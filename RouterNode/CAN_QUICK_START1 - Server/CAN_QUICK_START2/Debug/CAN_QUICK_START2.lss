
CAN_QUICK_START2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d4  20000000  000048d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a84  200001d4  00004aac  000201d4  2**2
                  ALLOC
  3 .stack        00002000  20000c58  00005530  000201d4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002769f  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000346c  00000000  00000000  000478f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000508  00000000  00000000  0004ad60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000005a8  00000000  00000000  0004b268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001ff05  00000000  00000000  0004b810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bf4d  00000000  00000000  0006b715  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000a482a  00000000  00000000  00077662  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001834  00000000  00000000  0011be8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004dff  00000000  00000000  0011d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 2c 00 20 09 18 00 00 05 18 00 00 05 18 00 00     X,. ............
	...
      2c:	05 18 00 00 00 00 00 00 00 00 00 00 05 18 00 00     ................
      3c:	05 18 00 00 05 18 00 00 05 18 00 00 05 18 00 00     ................
      4c:	05 18 00 00 05 18 00 00 05 18 00 00 05 18 00 00     ................
      5c:	05 18 00 00 05 18 00 00 01 0b 00 00 11 0b 00 00     ................
      6c:	21 0b 00 00 31 0b 00 00 41 0b 00 00 51 0b 00 00     !...1...A...Q...
      7c:	7d 1a 00 00 05 18 00 00 05 18 00 00 05 18 00 00     }...............
      8c:	05 18 00 00 05 18 00 00 05 18 00 00 05 18 00 00     ................
      9c:	05 18 00 00 05 18 00 00 05 18 00 00 05 18 00 00     ................
      ac:	05 18 00 00 05 18 00 00 05 18 00 00 05 18 00 00     ................

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	200001d4 	.word	0x200001d4
      dc:	00000000 	.word	0x00000000
      e0:	000048d8 	.word	0x000048d8

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	200001d8 	.word	0x200001d8
     110:	000048d8 	.word	0x000048d8
     114:	000048d8 	.word	0x000048d8
     118:	00000000 	.word	0x00000000

0000011c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     11c:	4b0c      	ldr	r3, [pc, #48]	; (150 <cpu_irq_enter_critical+0x34>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2b00      	cmp	r3, #0
     122:	d106      	bne.n	132 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     124:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     128:	2b00      	cmp	r3, #0
     12a:	d007      	beq.n	13c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     12c:	2200      	movs	r2, #0
     12e:	4b09      	ldr	r3, [pc, #36]	; (154 <cpu_irq_enter_critical+0x38>)
     130:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     132:	4a07      	ldr	r2, [pc, #28]	; (150 <cpu_irq_enter_critical+0x34>)
     134:	6813      	ldr	r3, [r2, #0]
     136:	3301      	adds	r3, #1
     138:	6013      	str	r3, [r2, #0]
}
     13a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     13c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     13e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     142:	2200      	movs	r2, #0
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <cpu_irq_enter_critical+0x3c>)
     146:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     148:	3201      	adds	r2, #1
     14a:	4b02      	ldr	r3, [pc, #8]	; (154 <cpu_irq_enter_critical+0x38>)
     14c:	701a      	strb	r2, [r3, #0]
     14e:	e7f0      	b.n	132 <cpu_irq_enter_critical+0x16>
     150:	200001f0 	.word	0x200001f0
     154:	200001f4 	.word	0x200001f4
     158:	20000000 	.word	0x20000000

0000015c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     15c:	4b08      	ldr	r3, [pc, #32]	; (180 <cpu_irq_leave_critical+0x24>)
     15e:	681a      	ldr	r2, [r3, #0]
     160:	3a01      	subs	r2, #1
     162:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     164:	681b      	ldr	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d109      	bne.n	17e <cpu_irq_leave_critical+0x22>
     16a:	4b06      	ldr	r3, [pc, #24]	; (184 <cpu_irq_leave_critical+0x28>)
     16c:	781b      	ldrb	r3, [r3, #0]
     16e:	2b00      	cmp	r3, #0
     170:	d005      	beq.n	17e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     172:	2201      	movs	r2, #1
     174:	4b04      	ldr	r3, [pc, #16]	; (188 <cpu_irq_leave_critical+0x2c>)
     176:	701a      	strb	r2, [r3, #0]
     178:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     17c:	b662      	cpsie	i
	}
}
     17e:	4770      	bx	lr
     180:	200001f0 	.word	0x200001f0
     184:	200001f4 	.word	0x200001f4
     188:	20000000 	.word	0x20000000

0000018c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     190:	ac01      	add	r4, sp, #4
     192:	2501      	movs	r5, #1
     194:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     196:	2700      	movs	r7, #0
     198:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     19a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     19c:	0021      	movs	r1, r4
     19e:	200f      	movs	r0, #15
     1a0:	4e06      	ldr	r6, [pc, #24]	; (1bc <system_board_init+0x30>)
     1a2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1a4:	2280      	movs	r2, #128	; 0x80
     1a6:	0212      	lsls	r2, r2, #8
     1a8:	2382      	movs	r3, #130	; 0x82
     1aa:	05db      	lsls	r3, r3, #23
     1ac:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1ae:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1b0:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1b2:	0021      	movs	r1, r4
     1b4:	201c      	movs	r0, #28
     1b6:	47b0      	blx	r6
}
     1b8:	b003      	add	sp, #12
     1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1bc:	000006f5 	.word	0x000006f5

000001c0 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
     1c0:	6803      	ldr	r3, [r0, #0]
     1c2:	4a0a      	ldr	r2, [pc, #40]	; (1ec <_can_enable_peripheral_clock+0x2c>)
     1c4:	4293      	cmp	r3, r2
     1c6:	d003      	beq.n	1d0 <_can_enable_peripheral_clock+0x10>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
     1c8:	4a09      	ldr	r2, [pc, #36]	; (1f0 <_can_enable_peripheral_clock+0x30>)
     1ca:	4293      	cmp	r3, r2
     1cc:	d007      	beq.n	1de <_can_enable_peripheral_clock+0x1e>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
     1ce:	4770      	bx	lr
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	MCLK->AHBMASK.reg |= ahb_mask;
     1d0:	4a08      	ldr	r2, [pc, #32]	; (1f4 <_can_enable_peripheral_clock+0x34>)
     1d2:	6911      	ldr	r1, [r2, #16]
     1d4:	2380      	movs	r3, #128	; 0x80
     1d6:	005b      	lsls	r3, r3, #1
     1d8:	430b      	orrs	r3, r1
     1da:	6113      	str	r3, [r2, #16]
     1dc:	e7f7      	b.n	1ce <_can_enable_peripheral_clock+0xe>
     1de:	4a05      	ldr	r2, [pc, #20]	; (1f4 <_can_enable_peripheral_clock+0x34>)
     1e0:	6911      	ldr	r1, [r2, #16]
     1e2:	2380      	movs	r3, #128	; 0x80
     1e4:	009b      	lsls	r3, r3, #2
     1e6:	430b      	orrs	r3, r1
     1e8:	6113      	str	r3, [r2, #16]
     1ea:	e7f0      	b.n	1ce <_can_enable_peripheral_clock+0xe>
     1ec:	42001c00 	.word	0x42001c00
     1f0:	42002000 	.word	0x42002000
     1f4:	40000800 	.word	0x40000800

000001f8 <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
     1f8:	b570      	push	{r4, r5, r6, lr}
     1fa:	000c      	movs	r4, r1
     1fc:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1fe:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
     200:	4ba5      	ldr	r3, [pc, #660]	; (498 <can_init+0x2a0>)
     202:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     204:	4ba5      	ldr	r3, [pc, #660]	; (49c <can_init+0x2a4>)
     206:	2200      	movs	r2, #0
     208:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     20a:	782a      	ldrb	r2, [r5, #0]
     20c:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
     20e:	4ba4      	ldr	r3, [pc, #656]	; (4a0 <can_init+0x2a8>)
     210:	429c      	cmp	r4, r3
     212:	d100      	bne.n	216 <can_init+0x1e>
     214:	e0c6      	b.n	3a4 <can_init+0x1ac>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
     216:	4ba3      	ldr	r3, [pc, #652]	; (4a4 <can_init+0x2ac>)
     218:	429c      	cmp	r4, r3
     21a:	d100      	bne.n	21e <can_init+0x26>
     21c:	e0ff      	b.n	41e <can_init+0x226>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
     21e:	69a3      	ldr	r3, [r4, #24]
     220:	2202      	movs	r2, #2
     222:	4313      	orrs	r3, r2
     224:	61a3      	str	r3, [r4, #24]
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
     226:	2300      	movs	r3, #0
     228:	22bc      	movs	r2, #188	; 0xbc
     22a:	50a3      	str	r3, [r4, r2]
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
     22c:	320c      	adds	r2, #12
     22e:	50a3      	str	r3, [r4, r2]
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
     230:	4b9d      	ldr	r3, [pc, #628]	; (4a8 <can_init+0x2b0>)
     232:	61e3      	str	r3, [r4, #28]
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
     234:	4b9d      	ldr	r3, [pc, #628]	; (4ac <can_init+0x2b4>)
     236:	60e3      	str	r3, [r4, #12]
	if (config->tdc_enable) {
     238:	7bab      	ldrb	r3, [r5, #14]
     23a:	2b00      	cmp	r3, #0
     23c:	d004      	beq.n	248 <can_init+0x50>
		hw->DBTP.reg |= CAN_DBTP_TDC;
     23e:	68e2      	ldr	r2, [r4, #12]
     240:	2380      	movs	r3, #128	; 0x80
     242:	041b      	lsls	r3, r3, #16
     244:	4313      	orrs	r3, r2
     246:	60e3      	str	r3, [r4, #12]
	if (config->run_in_standby) {
     248:	786b      	ldrb	r3, [r5, #1]
     24a:	2b00      	cmp	r3, #0
     24c:	d003      	beq.n	256 <can_init+0x5e>
		hw->MRCFG.reg |= 0x01<<6;
     24e:	68a3      	ldr	r3, [r4, #8]
     250:	2240      	movs	r2, #64	; 0x40
     252:	4313      	orrs	r3, r2
     254:	60a3      	str	r3, [r4, #8]
	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
     256:	6962      	ldr	r2, [r4, #20]
     258:	78ab      	ldrb	r3, [r5, #2]
     25a:	4313      	orrs	r3, r2
     25c:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
     25e:	78eb      	ldrb	r3, [r5, #3]
     260:	2b00      	cmp	r3, #0
     262:	d004      	beq.n	26e <can_init+0x76>
		hw->CCCR.reg |= CAN_CCCR_TXP;
     264:	69a2      	ldr	r2, [r4, #24]
     266:	2380      	movs	r3, #128	; 0x80
     268:	01db      	lsls	r3, r3, #7
     26a:	4313      	orrs	r3, r2
     26c:	61a3      	str	r3, [r4, #24]
	if (config->edge_filtering) {
     26e:	792b      	ldrb	r3, [r5, #4]
     270:	2b00      	cmp	r3, #0
     272:	d004      	beq.n	27e <can_init+0x86>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
     274:	69a2      	ldr	r2, [r4, #24]
     276:	2380      	movs	r3, #128	; 0x80
     278:	019b      	lsls	r3, r3, #6
     27a:	4313      	orrs	r3, r2
     27c:	61a3      	str	r3, [r4, #24]
	if (config->protocol_exception_handling) {
     27e:	796b      	ldrb	r3, [r5, #5]
     280:	2b00      	cmp	r3, #0
     282:	d004      	beq.n	28e <can_init+0x96>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
     284:	69a2      	ldr	r2, [r4, #24]
     286:	2380      	movs	r3, #128	; 0x80
     288:	015b      	lsls	r3, r3, #5
     28a:	4313      	orrs	r3, r2
     28c:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
     28e:	79ab      	ldrb	r3, [r5, #6]
     290:	2b00      	cmp	r3, #0
     292:	d103      	bne.n	29c <can_init+0xa4>
		hw->CCCR.reg |= CAN_CCCR_DAR;
     294:	69a3      	ldr	r3, [r4, #24]
     296:	2240      	movs	r2, #64	; 0x40
     298:	4313      	orrs	r3, r2
     29a:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
     29c:	79eb      	ldrb	r3, [r5, #7]
     29e:	2b00      	cmp	r3, #0
     2a0:	d003      	beq.n	2aa <can_init+0xb2>
		hw->CCCR.reg |= CAN_CCCR_CSR;
     2a2:	69a3      	ldr	r3, [r4, #24]
     2a4:	2210      	movs	r2, #16
     2a6:	4313      	orrs	r3, r2
     2a8:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_acknowledge) {
     2aa:	7a2b      	ldrb	r3, [r5, #8]
     2ac:	2b00      	cmp	r3, #0
     2ae:	d003      	beq.n	2b8 <can_init+0xc0>
		hw->CCCR.reg |= CAN_CCCR_CSA;
     2b0:	69a3      	ldr	r3, [r4, #24]
     2b2:	2208      	movs	r2, #8
     2b4:	4313      	orrs	r3, r2
     2b6:	61a3      	str	r3, [r4, #24]
	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
     2b8:	7a6b      	ldrb	r3, [r5, #9]
     2ba:	041b      	lsls	r3, r3, #16
     2bc:	22f0      	movs	r2, #240	; 0xf0
     2be:	0312      	lsls	r2, r2, #12
     2c0:	4013      	ands	r3, r2
     2c2:	2201      	movs	r2, #1
     2c4:	4313      	orrs	r3, r2
     2c6:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
     2c8:	7b2b      	ldrb	r3, [r5, #12]
     2ca:	7b6a      	ldrb	r2, [r5, #13]
     2cc:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
     2ce:	896a      	ldrh	r2, [r5, #10]
     2d0:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
     2d2:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
     2d4:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
     2d6:	7beb      	ldrb	r3, [r5, #15]
     2d8:	021b      	lsls	r3, r3, #8
     2da:	22fe      	movs	r2, #254	; 0xfe
     2dc:	01d2      	lsls	r2, r2, #7
     2de:	4013      	ands	r3, r2
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
     2e0:	7c29      	ldrb	r1, [r5, #16]
     2e2:	227f      	movs	r2, #127	; 0x7f
     2e4:	400a      	ands	r2, r1
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
     2e6:	4313      	orrs	r3, r2
     2e8:	64a3      	str	r3, [r4, #72]	; 0x48
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
     2ea:	7c6a      	ldrb	r2, [r5, #17]
     2ec:	0112      	lsls	r2, r2, #4
     2ee:	2330      	movs	r3, #48	; 0x30
     2f0:	4013      	ands	r3, r2
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
     2f2:	7ca9      	ldrb	r1, [r5, #18]
     2f4:	0089      	lsls	r1, r1, #2
     2f6:	220c      	movs	r2, #12
     2f8:	400a      	ands	r2, r1
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
     2fa:	4313      	orrs	r3, r2
     2fc:	2280      	movs	r2, #128	; 0x80
     2fe:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_standard_reject) {
     300:	7ceb      	ldrb	r3, [r5, #19]
     302:	2b00      	cmp	r3, #0
     304:	d003      	beq.n	30e <can_init+0x116>
		hw->GFC.reg |= CAN_GFC_RRFS;
     306:	58a3      	ldr	r3, [r4, r2]
     308:	2102      	movs	r1, #2
     30a:	430b      	orrs	r3, r1
     30c:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_extended_reject) {
     30e:	7d2b      	ldrb	r3, [r5, #20]
     310:	2b00      	cmp	r3, #0
     312:	d004      	beq.n	31e <can_init+0x126>
		hw->GFC.reg |= CAN_GFC_RRFE;
     314:	2280      	movs	r2, #128	; 0x80
     316:	58a3      	ldr	r3, [r4, r2]
     318:	2101      	movs	r1, #1
     31a:	430b      	orrs	r3, r1
     31c:	50a3      	str	r3, [r4, r2]
	hw->XIDAM.reg = config->extended_id_mask;
     31e:	2390      	movs	r3, #144	; 0x90
     320:	69aa      	ldr	r2, [r5, #24]
     322:	50e2      	str	r2, [r4, r3]
	if (config->rx_fifo_0_overwrite) {
     324:	7f2b      	ldrb	r3, [r5, #28]
     326:	2b00      	cmp	r3, #0
     328:	d005      	beq.n	336 <can_init+0x13e>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
     32a:	22a0      	movs	r2, #160	; 0xa0
     32c:	58a1      	ldr	r1, [r4, r2]
     32e:	2380      	movs	r3, #128	; 0x80
     330:	061b      	lsls	r3, r3, #24
     332:	430b      	orrs	r3, r1
     334:	50a3      	str	r3, [r4, r2]
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
     336:	22a0      	movs	r2, #160	; 0xa0
     338:	58a1      	ldr	r1, [r4, r2]
     33a:	7f6b      	ldrb	r3, [r5, #29]
     33c:	061b      	lsls	r3, r3, #24
     33e:	20fe      	movs	r0, #254	; 0xfe
     340:	05c0      	lsls	r0, r0, #23
     342:	4003      	ands	r3, r0
     344:	430b      	orrs	r3, r1
     346:	50a3      	str	r3, [r4, r2]
	if (config->rx_fifo_1_overwrite) {
     348:	7fab      	ldrb	r3, [r5, #30]
     34a:	2b00      	cmp	r3, #0
     34c:	d005      	beq.n	35a <can_init+0x162>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
     34e:	3210      	adds	r2, #16
     350:	58a1      	ldr	r1, [r4, r2]
     352:	2380      	movs	r3, #128	; 0x80
     354:	061b      	lsls	r3, r3, #24
     356:	430b      	orrs	r3, r1
     358:	50a3      	str	r3, [r4, r2]
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
     35a:	22b0      	movs	r2, #176	; 0xb0
     35c:	58a1      	ldr	r1, [r4, r2]
     35e:	7feb      	ldrb	r3, [r5, #31]
     360:	061b      	lsls	r3, r3, #24
     362:	20fe      	movs	r0, #254	; 0xfe
     364:	05c0      	lsls	r0, r0, #23
     366:	4003      	ands	r3, r0
     368:	430b      	orrs	r3, r1
     36a:	50a3      	str	r3, [r4, r2]
	if (config->tx_queue_mode) {
     36c:	2320      	movs	r3, #32
     36e:	5ceb      	ldrb	r3, [r5, r3]
     370:	2b00      	cmp	r3, #0
     372:	d005      	beq.n	380 <can_init+0x188>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
     374:	3210      	adds	r2, #16
     376:	58a1      	ldr	r1, [r4, r2]
     378:	2380      	movs	r3, #128	; 0x80
     37a:	05db      	lsls	r3, r3, #23
     37c:	430b      	orrs	r3, r1
     37e:	50a3      	str	r3, [r4, r2]
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
     380:	22f0      	movs	r2, #240	; 0xf0
     382:	58a1      	ldr	r1, [r4, r2]
     384:	2321      	movs	r3, #33	; 0x21
     386:	5ceb      	ldrb	r3, [r5, r3]
     388:	061b      	lsls	r3, r3, #24
     38a:	20fc      	movs	r0, #252	; 0xfc
     38c:	0580      	lsls	r0, r0, #22
     38e:	4003      	ands	r3, r0
     390:	430b      	orrs	r3, r1
     392:	50a3      	str	r3, [r4, r2]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
     394:	2303      	movs	r3, #3
     396:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
     398:	3b04      	subs	r3, #4
     39a:	3a10      	subs	r2, #16
     39c:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
     39e:	3204      	adds	r2, #4
     3a0:	50a3      	str	r3, [r4, r2]
}
     3a2:	bd70      	pop	{r4, r5, r6, pc}
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
     3a4:	493d      	ldr	r1, [pc, #244]	; (49c <can_init+0x2a4>)
     3a6:	201a      	movs	r0, #26
     3a8:	4b41      	ldr	r3, [pc, #260]	; (4b0 <can_init+0x2b8>)
     3aa:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
     3ac:	201a      	movs	r0, #26
     3ae:	4b41      	ldr	r3, [pc, #260]	; (4b4 <can_init+0x2bc>)
     3b0:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
     3b2:	4b3b      	ldr	r3, [pc, #236]	; (4a0 <can_init+0x2a8>)
     3b4:	699a      	ldr	r2, [r3, #24]
     3b6:	2102      	movs	r1, #2
     3b8:	430a      	orrs	r2, r1
     3ba:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
     3bc:	4a3e      	ldr	r2, [pc, #248]	; (4b8 <can_init+0x2c0>)
     3be:	0412      	lsls	r2, r2, #16
     3c0:	0c12      	lsrs	r2, r2, #16
     3c2:	2180      	movs	r1, #128	; 0x80
     3c4:	0389      	lsls	r1, r1, #14
     3c6:	430a      	orrs	r2, r1
     3c8:	2184      	movs	r1, #132	; 0x84
     3ca:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
     3cc:	4a3b      	ldr	r2, [pc, #236]	; (4bc <can_init+0x2c4>)
     3ce:	0412      	lsls	r2, r2, #16
     3d0:	0c12      	lsrs	r2, r2, #16
     3d2:	2180      	movs	r1, #128	; 0x80
     3d4:	0349      	lsls	r1, r1, #13
     3d6:	430a      	orrs	r2, r1
     3d8:	2088      	movs	r0, #136	; 0x88
     3da:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
     3dc:	4a38      	ldr	r2, [pc, #224]	; (4c0 <can_init+0x2c8>)
     3de:	0412      	lsls	r2, r2, #16
     3e0:	0c12      	lsrs	r2, r2, #16
     3e2:	430a      	orrs	r2, r1
     3e4:	3018      	adds	r0, #24
     3e6:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
     3e8:	4a36      	ldr	r2, [pc, #216]	; (4c4 <can_init+0x2cc>)
     3ea:	0412      	lsls	r2, r2, #16
     3ec:	0c12      	lsrs	r2, r2, #16
     3ee:	4311      	orrs	r1, r2
     3f0:	22b0      	movs	r2, #176	; 0xb0
     3f2:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
     3f4:	4a34      	ldr	r2, [pc, #208]	; (4c8 <can_init+0x2d0>)
     3f6:	0412      	lsls	r2, r2, #16
     3f8:	0c12      	lsrs	r2, r2, #16
     3fa:	21ac      	movs	r1, #172	; 0xac
     3fc:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
     3fe:	4a33      	ldr	r2, [pc, #204]	; (4cc <can_init+0x2d4>)
     400:	0412      	lsls	r2, r2, #16
     402:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
     404:	4932      	ldr	r1, [pc, #200]	; (4d0 <can_init+0x2d8>)
     406:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
     408:	21c0      	movs	r1, #192	; 0xc0
     40a:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
     40c:	4a31      	ldr	r2, [pc, #196]	; (4d4 <can_init+0x2dc>)
     40e:	0412      	lsls	r2, r2, #16
     410:	0c12      	lsrs	r2, r2, #16
     412:	2180      	movs	r1, #128	; 0x80
     414:	0309      	lsls	r1, r1, #12
     416:	430a      	orrs	r2, r1
     418:	21f0      	movs	r1, #240	; 0xf0
     41a:	505a      	str	r2, [r3, r1]
     41c:	e703      	b.n	226 <can_init+0x2e>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
     41e:	491f      	ldr	r1, [pc, #124]	; (49c <can_init+0x2a4>)
     420:	201b      	movs	r0, #27
     422:	4b23      	ldr	r3, [pc, #140]	; (4b0 <can_init+0x2b8>)
     424:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
     426:	201b      	movs	r0, #27
     428:	4b22      	ldr	r3, [pc, #136]	; (4b4 <can_init+0x2bc>)
     42a:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
     42c:	4b1d      	ldr	r3, [pc, #116]	; (4a4 <can_init+0x2ac>)
     42e:	699a      	ldr	r2, [r3, #24]
     430:	2102      	movs	r1, #2
     432:	430a      	orrs	r2, r1
     434:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
     436:	4a28      	ldr	r2, [pc, #160]	; (4d8 <can_init+0x2e0>)
     438:	0412      	lsls	r2, r2, #16
     43a:	0c12      	lsrs	r2, r2, #16
     43c:	2180      	movs	r1, #128	; 0x80
     43e:	0389      	lsls	r1, r1, #14
     440:	430a      	orrs	r2, r1
     442:	2184      	movs	r1, #132	; 0x84
     444:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
     446:	4a25      	ldr	r2, [pc, #148]	; (4dc <can_init+0x2e4>)
     448:	0412      	lsls	r2, r2, #16
     44a:	0c12      	lsrs	r2, r2, #16
     44c:	2180      	movs	r1, #128	; 0x80
     44e:	0349      	lsls	r1, r1, #13
     450:	430a      	orrs	r2, r1
     452:	2088      	movs	r0, #136	; 0x88
     454:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
     456:	4a22      	ldr	r2, [pc, #136]	; (4e0 <can_init+0x2e8>)
     458:	0412      	lsls	r2, r2, #16
     45a:	0c12      	lsrs	r2, r2, #16
     45c:	430a      	orrs	r2, r1
     45e:	3018      	adds	r0, #24
     460:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
     462:	4a20      	ldr	r2, [pc, #128]	; (4e4 <can_init+0x2ec>)
     464:	0412      	lsls	r2, r2, #16
     466:	0c12      	lsrs	r2, r2, #16
     468:	4311      	orrs	r1, r2
     46a:	22b0      	movs	r2, #176	; 0xb0
     46c:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
     46e:	4a1e      	ldr	r2, [pc, #120]	; (4e8 <can_init+0x2f0>)
     470:	0412      	lsls	r2, r2, #16
     472:	0c12      	lsrs	r2, r2, #16
     474:	21ac      	movs	r1, #172	; 0xac
     476:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
     478:	4a1c      	ldr	r2, [pc, #112]	; (4ec <can_init+0x2f4>)
     47a:	0412      	lsls	r2, r2, #16
     47c:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
     47e:	4914      	ldr	r1, [pc, #80]	; (4d0 <can_init+0x2d8>)
     480:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
     482:	21c0      	movs	r1, #192	; 0xc0
     484:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
     486:	4a1a      	ldr	r2, [pc, #104]	; (4f0 <can_init+0x2f8>)
     488:	0412      	lsls	r2, r2, #16
     48a:	0c12      	lsrs	r2, r2, #16
     48c:	2180      	movs	r1, #128	; 0x80
     48e:	0309      	lsls	r1, r1, #12
     490:	430a      	orrs	r2, r1
     492:	21f0      	movs	r1, #240	; 0xf0
     494:	505a      	str	r2, [r3, r1]
     496:	e6c6      	b.n	226 <can_init+0x2e>
     498:	000001c1 	.word	0x000001c1
     49c:	20000c2c 	.word	0x20000c2c
     4a0:	42001c00 	.word	0x42001c00
     4a4:	42002000 	.word	0x42002000
     4a8:	06050a03 	.word	0x06050a03
     4ac:	00050a33 	.word	0x00050a33
     4b0:	000016ad 	.word	0x000016ad
     4b4:	0000163d 	.word	0x0000163d
     4b8:	20000578 	.word	0x20000578
     4bc:	200002f8 	.word	0x200002f8
     4c0:	20000378 	.word	0x20000378
     4c4:	20000478 	.word	0x20000478
     4c8:	200001f8 	.word	0x200001f8
     4cc:	200005f8 	.word	0x200005f8
     4d0:	04040000 	.word	0x04040000
     4d4:	20000678 	.word	0x20000678
     4d8:	20000a38 	.word	0x20000a38
     4dc:	200007b8 	.word	0x200007b8
     4e0:	20000838 	.word	0x20000838
     4e4:	20000938 	.word	0x20000938
     4e8:	200006b8 	.word	0x200006b8
     4ec:	20000ab8 	.word	0x20000ab8
     4f0:	20000b38 	.word	0x20000b38

000004f4 <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
     4f4:	6802      	ldr	r2, [r0, #0]
     4f6:	6993      	ldr	r3, [r2, #24]
     4f8:	2101      	movs	r1, #1
     4fa:	438b      	bics	r3, r1
     4fc:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
     4fe:	6801      	ldr	r1, [r0, #0]
     500:	2201      	movs	r2, #1
     502:	698b      	ldr	r3, [r1, #24]
     504:	421a      	tst	r2, r3
     506:	d1fc      	bne.n	502 <can_start+0xe>
}
     508:	4770      	bx	lr
	...

0000050c <can_set_rx_standard_filter>:
}

enum status_code can_set_rx_standard_filter(
		struct can_module *const module_inst,
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
     50c:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
     50e:	6803      	ldr	r3, [r0, #0]
     510:	4809      	ldr	r0, [pc, #36]	; (538 <can_set_rx_standard_filter+0x2c>)
     512:	4283      	cmp	r3, r0
     514:	d004      	beq.n	520 <can_set_rx_standard_filter+0x14>
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     516:	4c09      	ldr	r4, [pc, #36]	; (53c <can_set_rx_standard_filter+0x30>)
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     518:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     51a:	42a3      	cmp	r3, r4
     51c:	d006      	beq.n	52c <can_set_rx_standard_filter+0x20>
}
     51e:	bd10      	pop	{r4, pc}
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
     520:	6809      	ldr	r1, [r1, #0]
     522:	0092      	lsls	r2, r2, #2
     524:	4b06      	ldr	r3, [pc, #24]	; (540 <can_set_rx_standard_filter+0x34>)
     526:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     528:	2000      	movs	r0, #0
     52a:	e7f8      	b.n	51e <can_set_rx_standard_filter+0x12>
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
     52c:	6809      	ldr	r1, [r1, #0]
     52e:	0092      	lsls	r2, r2, #2
     530:	4b04      	ldr	r3, [pc, #16]	; (544 <can_set_rx_standard_filter+0x38>)
     532:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     534:	2000      	movs	r0, #0
     536:	e7f2      	b.n	51e <can_set_rx_standard_filter+0x12>
     538:	42001c00 	.word	0x42001c00
     53c:	42002000 	.word	0x42002000
     540:	20000578 	.word	0x20000578
     544:	20000a38 	.word	0x20000a38

00000548 <can_set_rx_extended_filter>:

enum status_code can_set_rx_extended_filter(
		struct can_module *const module_inst,
		struct can_extended_message_filter_element *et_filter, uint32_t index)
{
     548:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
     54a:	6803      	ldr	r3, [r0, #0]
     54c:	480c      	ldr	r0, [pc, #48]	; (580 <can_set_rx_extended_filter+0x38>)
     54e:	4283      	cmp	r3, r0
     550:	d004      	beq.n	55c <can_set_rx_extended_filter+0x14>
		can0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
		can0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     552:	4c0c      	ldr	r4, [pc, #48]	; (584 <can_set_rx_extended_filter+0x3c>)
		can1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
		can1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     554:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     556:	42a3      	cmp	r3, r4
     558:	d009      	beq.n	56e <can_set_rx_extended_filter+0x26>
}
     55a:	bd10      	pop	{r4, pc}
		can0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
     55c:	6808      	ldr	r0, [r1, #0]
     55e:	4b0a      	ldr	r3, [pc, #40]	; (588 <can_set_rx_extended_filter+0x40>)
     560:	00d2      	lsls	r2, r2, #3
     562:	50d0      	str	r0, [r2, r3]
		can0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
     564:	6849      	ldr	r1, [r1, #4]
     566:	189b      	adds	r3, r3, r2
     568:	6059      	str	r1, [r3, #4]
		return STATUS_OK;
     56a:	2000      	movs	r0, #0
     56c:	e7f5      	b.n	55a <can_set_rx_extended_filter+0x12>
		can1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
     56e:	6808      	ldr	r0, [r1, #0]
     570:	4b06      	ldr	r3, [pc, #24]	; (58c <can_set_rx_extended_filter+0x44>)
     572:	00d2      	lsls	r2, r2, #3
     574:	50d0      	str	r0, [r2, r3]
		can1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
     576:	6849      	ldr	r1, [r1, #4]
     578:	189a      	adds	r2, r3, r2
     57a:	6051      	str	r1, [r2, #4]
		return STATUS_OK;
     57c:	2000      	movs	r0, #0
     57e:	e7ec      	b.n	55a <can_set_rx_extended_filter+0x12>
     580:	42001c00 	.word	0x42001c00
     584:	42002000 	.word	0x42002000
     588:	200002f8 	.word	0x200002f8
     58c:	200007b8 	.word	0x200007b8

00000590 <can_get_rx_buffer_element>:

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
     590:	b570      	push	{r4, r5, r6, lr}
     592:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
     594:	6803      	ldr	r3, [r0, #0]
     596:	4c0d      	ldr	r4, [pc, #52]	; (5cc <can_get_rx_buffer_element+0x3c>)
     598:	42a3      	cmp	r3, r4
     59a:	d004      	beq.n	5a6 <can_get_rx_buffer_element+0x16>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     59c:	4c0c      	ldr	r4, [pc, #48]	; (5d0 <can_get_rx_buffer_element+0x40>)
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     59e:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     5a0:	42a3      	cmp	r3, r4
     5a2:	d009      	beq.n	5b8 <can_get_rx_buffer_element+0x28>
}
     5a4:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
     5a6:	0112      	lsls	r2, r2, #4
     5a8:	490a      	ldr	r1, [pc, #40]	; (5d4 <can_get_rx_buffer_element+0x44>)
     5aa:	1889      	adds	r1, r1, r2
     5ac:	2210      	movs	r2, #16
     5ae:	0028      	movs	r0, r5
     5b0:	4b09      	ldr	r3, [pc, #36]	; (5d8 <can_get_rx_buffer_element+0x48>)
     5b2:	4798      	blx	r3
		return STATUS_OK;
     5b4:	2000      	movs	r0, #0
     5b6:	e7f5      	b.n	5a4 <can_get_rx_buffer_element+0x14>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
     5b8:	0112      	lsls	r2, r2, #4
     5ba:	4908      	ldr	r1, [pc, #32]	; (5dc <can_get_rx_buffer_element+0x4c>)
     5bc:	1889      	adds	r1, r1, r2
     5be:	2210      	movs	r2, #16
     5c0:	0028      	movs	r0, r5
     5c2:	4b05      	ldr	r3, [pc, #20]	; (5d8 <can_get_rx_buffer_element+0x48>)
     5c4:	4798      	blx	r3
		return STATUS_OK;
     5c6:	2000      	movs	r0, #0
     5c8:	e7ec      	b.n	5a4 <can_get_rx_buffer_element+0x14>
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	42001c00 	.word	0x42001c00
     5d0:	42002000 	.word	0x42002000
     5d4:	200001f8 	.word	0x200001f8
     5d8:	00002221 	.word	0x00002221
     5dc:	200006b8 	.word	0x200006b8

000005e0 <can_get_rx_fifo_0_element>:

enum status_code can_get_rx_fifo_0_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
     5e0:	b570      	push	{r4, r5, r6, lr}
     5e2:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
     5e4:	6803      	ldr	r3, [r0, #0]
     5e6:	4c0d      	ldr	r4, [pc, #52]	; (61c <can_get_rx_fifo_0_element+0x3c>)
     5e8:	42a3      	cmp	r3, r4
     5ea:	d004      	beq.n	5f6 <can_get_rx_fifo_0_element+0x16>
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     5ec:	4c0c      	ldr	r4, [pc, #48]	; (620 <can_get_rx_fifo_0_element+0x40>)
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     5ee:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     5f0:	42a3      	cmp	r3, r4
     5f2:	d009      	beq.n	608 <can_get_rx_fifo_0_element+0x28>
}
     5f4:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
     5f6:	0112      	lsls	r2, r2, #4
     5f8:	490a      	ldr	r1, [pc, #40]	; (624 <can_get_rx_fifo_0_element+0x44>)
     5fa:	1889      	adds	r1, r1, r2
     5fc:	2210      	movs	r2, #16
     5fe:	0028      	movs	r0, r5
     600:	4b09      	ldr	r3, [pc, #36]	; (628 <can_get_rx_fifo_0_element+0x48>)
     602:	4798      	blx	r3
		return STATUS_OK;
     604:	2000      	movs	r0, #0
     606:	e7f5      	b.n	5f4 <can_get_rx_fifo_0_element+0x14>
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
     608:	0112      	lsls	r2, r2, #4
     60a:	4908      	ldr	r1, [pc, #32]	; (62c <can_get_rx_fifo_0_element+0x4c>)
     60c:	1889      	adds	r1, r1, r2
     60e:	2210      	movs	r2, #16
     610:	0028      	movs	r0, r5
     612:	4b05      	ldr	r3, [pc, #20]	; (628 <can_get_rx_fifo_0_element+0x48>)
     614:	4798      	blx	r3
		return STATUS_OK;
     616:	2000      	movs	r0, #0
     618:	e7ec      	b.n	5f4 <can_get_rx_fifo_0_element+0x14>
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	42001c00 	.word	0x42001c00
     620:	42002000 	.word	0x42002000
     624:	20000378 	.word	0x20000378
     628:	00002221 	.word	0x00002221
     62c:	20000838 	.word	0x20000838

00000630 <can_get_rx_fifo_1_element>:

enum status_code can_get_rx_fifo_1_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_1 *rx_element, uint32_t index)
{
     630:	b570      	push	{r4, r5, r6, lr}
     632:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
     634:	6803      	ldr	r3, [r0, #0]
     636:	4c0d      	ldr	r4, [pc, #52]	; (66c <can_get_rx_fifo_1_element+0x3c>)
     638:	42a3      	cmp	r3, r4
     63a:	d004      	beq.n	646 <can_get_rx_fifo_1_element+0x16>
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     63c:	4c0c      	ldr	r4, [pc, #48]	; (670 <can_get_rx_fifo_1_element+0x40>)
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     63e:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     640:	42a3      	cmp	r3, r4
     642:	d009      	beq.n	658 <can_get_rx_fifo_1_element+0x28>
}
     644:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
     646:	0112      	lsls	r2, r2, #4
     648:	490a      	ldr	r1, [pc, #40]	; (674 <can_get_rx_fifo_1_element+0x44>)
     64a:	1889      	adds	r1, r1, r2
     64c:	2210      	movs	r2, #16
     64e:	0028      	movs	r0, r5
     650:	4b09      	ldr	r3, [pc, #36]	; (678 <can_get_rx_fifo_1_element+0x48>)
     652:	4798      	blx	r3
		return STATUS_OK;
     654:	2000      	movs	r0, #0
     656:	e7f5      	b.n	644 <can_get_rx_fifo_1_element+0x14>
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
     658:	0112      	lsls	r2, r2, #4
     65a:	4908      	ldr	r1, [pc, #32]	; (67c <can_get_rx_fifo_1_element+0x4c>)
     65c:	1889      	adds	r1, r1, r2
     65e:	2210      	movs	r2, #16
     660:	0028      	movs	r0, r5
     662:	4b05      	ldr	r3, [pc, #20]	; (678 <can_get_rx_fifo_1_element+0x48>)
     664:	4798      	blx	r3
		return STATUS_OK;
     666:	2000      	movs	r0, #0
     668:	e7ec      	b.n	644 <can_get_rx_fifo_1_element+0x14>
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	42001c00 	.word	0x42001c00
     670:	42002000 	.word	0x42002000
     674:	20000478 	.word	0x20000478
     678:	00002221 	.word	0x00002221
     67c:	20000938 	.word	0x20000938

00000680 <can_set_tx_buffer_element>:

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
     680:	b510      	push	{r4, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
     682:	6803      	ldr	r3, [r0, #0]
     684:	4817      	ldr	r0, [pc, #92]	; (6e4 <can_set_tx_buffer_element+0x64>)
     686:	4283      	cmp	r3, r0
     688:	d004      	beq.n	694 <can_set_tx_buffer_element+0x14>
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     68a:	4c17      	ldr	r4, [pc, #92]	; (6e8 <can_set_tx_buffer_element+0x68>)
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     68c:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     68e:	42a3      	cmp	r3, r4
     690:	d014      	beq.n	6bc <can_set_tx_buffer_element+0x3c>
}
     692:	bd10      	pop	{r4, pc}
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
     694:	680b      	ldr	r3, [r1, #0]
     696:	4815      	ldr	r0, [pc, #84]	; (6ec <can_set_tx_buffer_element+0x6c>)
     698:	0112      	lsls	r2, r2, #4
     69a:	5013      	str	r3, [r2, r0]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
     69c:	684c      	ldr	r4, [r1, #4]
     69e:	1883      	adds	r3, r0, r2
     6a0:	605c      	str	r4, [r3, #4]
     6a2:	000b      	movs	r3, r1
     6a4:	3308      	adds	r3, #8
     6a6:	3208      	adds	r2, #8
     6a8:	1882      	adds	r2, r0, r2
     6aa:	3110      	adds	r1, #16
			can0_tx_buffer[index].data[i] = tx_element->data[i];
     6ac:	7818      	ldrb	r0, [r3, #0]
     6ae:	7010      	strb	r0, [r2, #0]
     6b0:	3301      	adds	r3, #1
     6b2:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     6b4:	428b      	cmp	r3, r1
     6b6:	d1f9      	bne.n	6ac <can_set_tx_buffer_element+0x2c>
		return STATUS_OK;
     6b8:	2000      	movs	r0, #0
     6ba:	e7ea      	b.n	692 <can_set_tx_buffer_element+0x12>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
     6bc:	680b      	ldr	r3, [r1, #0]
     6be:	480c      	ldr	r0, [pc, #48]	; (6f0 <can_set_tx_buffer_element+0x70>)
     6c0:	0112      	lsls	r2, r2, #4
     6c2:	5013      	str	r3, [r2, r0]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
     6c4:	684c      	ldr	r4, [r1, #4]
     6c6:	1883      	adds	r3, r0, r2
     6c8:	605c      	str	r4, [r3, #4]
     6ca:	000b      	movs	r3, r1
     6cc:	3308      	adds	r3, #8
     6ce:	3208      	adds	r2, #8
     6d0:	1882      	adds	r2, r0, r2
     6d2:	3110      	adds	r1, #16
			can1_tx_buffer[index].data[i] = tx_element->data[i];
     6d4:	7818      	ldrb	r0, [r3, #0]
     6d6:	7010      	strb	r0, [r2, #0]
     6d8:	3301      	adds	r3, #1
     6da:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     6dc:	428b      	cmp	r3, r1
     6de:	d1f9      	bne.n	6d4 <can_set_tx_buffer_element+0x54>
		return STATUS_OK;
     6e0:	2000      	movs	r0, #0
     6e2:	e7d6      	b.n	692 <can_set_tx_buffer_element+0x12>
     6e4:	42001c00 	.word	0x42001c00
     6e8:	42002000 	.word	0x42002000
     6ec:	200005f8 	.word	0x200005f8
     6f0:	20000ab8 	.word	0x20000ab8

000006f4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     6f4:	b500      	push	{lr}
     6f6:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     6f8:	ab01      	add	r3, sp, #4
     6fa:	2280      	movs	r2, #128	; 0x80
     6fc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     6fe:	780a      	ldrb	r2, [r1, #0]
     700:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     702:	784a      	ldrb	r2, [r1, #1]
     704:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     706:	788a      	ldrb	r2, [r1, #2]
     708:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     70a:	0019      	movs	r1, r3
     70c:	4b01      	ldr	r3, [pc, #4]	; (714 <port_pin_set_config+0x20>)
     70e:	4798      	blx	r3
}
     710:	b003      	add	sp, #12
     712:	bd00      	pop	{pc}
     714:	000017a9 	.word	0x000017a9

00000718 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     718:	b5f0      	push	{r4, r5, r6, r7, lr}
     71a:	46de      	mov	lr, fp
     71c:	4657      	mov	r7, sl
     71e:	464e      	mov	r6, r9
     720:	4645      	mov	r5, r8
     722:	b5e0      	push	{r5, r6, r7, lr}
     724:	b087      	sub	sp, #28
     726:	4680      	mov	r8, r0
     728:	9104      	str	r1, [sp, #16]
     72a:	0016      	movs	r6, r2
     72c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     72e:	2200      	movs	r2, #0
     730:	2300      	movs	r3, #0
     732:	2100      	movs	r1, #0
     734:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     736:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     738:	2001      	movs	r0, #1
     73a:	0021      	movs	r1, r4
     73c:	9600      	str	r6, [sp, #0]
     73e:	9701      	str	r7, [sp, #4]
     740:	465c      	mov	r4, fp
     742:	9403      	str	r4, [sp, #12]
     744:	4644      	mov	r4, r8
     746:	9405      	str	r4, [sp, #20]
     748:	e013      	b.n	772 <long_division+0x5a>
     74a:	2420      	movs	r4, #32
     74c:	1a64      	subs	r4, r4, r1
     74e:	0005      	movs	r5, r0
     750:	40e5      	lsrs	r5, r4
     752:	46a8      	mov	r8, r5
     754:	e014      	b.n	780 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     756:	9c00      	ldr	r4, [sp, #0]
     758:	9d01      	ldr	r5, [sp, #4]
     75a:	1b12      	subs	r2, r2, r4
     75c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     75e:	465c      	mov	r4, fp
     760:	464d      	mov	r5, r9
     762:	432c      	orrs	r4, r5
     764:	46a3      	mov	fp, r4
     766:	9c03      	ldr	r4, [sp, #12]
     768:	4645      	mov	r5, r8
     76a:	432c      	orrs	r4, r5
     76c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     76e:	3901      	subs	r1, #1
     770:	d325      	bcc.n	7be <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     772:	2420      	movs	r4, #32
     774:	4264      	negs	r4, r4
     776:	190c      	adds	r4, r1, r4
     778:	d4e7      	bmi.n	74a <long_division+0x32>
     77a:	0005      	movs	r5, r0
     77c:	40a5      	lsls	r5, r4
     77e:	46a8      	mov	r8, r5
     780:	0004      	movs	r4, r0
     782:	408c      	lsls	r4, r1
     784:	46a1      	mov	r9, r4
		r = r << 1;
     786:	1892      	adds	r2, r2, r2
     788:	415b      	adcs	r3, r3
     78a:	0014      	movs	r4, r2
     78c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     78e:	9e05      	ldr	r6, [sp, #20]
     790:	464f      	mov	r7, r9
     792:	403e      	ands	r6, r7
     794:	46b4      	mov	ip, r6
     796:	9e04      	ldr	r6, [sp, #16]
     798:	4647      	mov	r7, r8
     79a:	403e      	ands	r6, r7
     79c:	46b2      	mov	sl, r6
     79e:	4666      	mov	r6, ip
     7a0:	4657      	mov	r7, sl
     7a2:	433e      	orrs	r6, r7
     7a4:	d003      	beq.n	7ae <long_division+0x96>
			r |= 0x01;
     7a6:	0006      	movs	r6, r0
     7a8:	4326      	orrs	r6, r4
     7aa:	0032      	movs	r2, r6
     7ac:	002b      	movs	r3, r5
		if (r >= d) {
     7ae:	9c00      	ldr	r4, [sp, #0]
     7b0:	9d01      	ldr	r5, [sp, #4]
     7b2:	429d      	cmp	r5, r3
     7b4:	d8db      	bhi.n	76e <long_division+0x56>
     7b6:	d1ce      	bne.n	756 <long_division+0x3e>
     7b8:	4294      	cmp	r4, r2
     7ba:	d8d8      	bhi.n	76e <long_division+0x56>
     7bc:	e7cb      	b.n	756 <long_division+0x3e>
     7be:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     7c0:	4658      	mov	r0, fp
     7c2:	0019      	movs	r1, r3
     7c4:	b007      	add	sp, #28
     7c6:	bc3c      	pop	{r2, r3, r4, r5}
     7c8:	4690      	mov	r8, r2
     7ca:	4699      	mov	r9, r3
     7cc:	46a2      	mov	sl, r4
     7ce:	46ab      	mov	fp, r5
     7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000007d2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     7d2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     7d4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7d6:	2340      	movs	r3, #64	; 0x40
     7d8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     7da:	4281      	cmp	r1, r0
     7dc:	d202      	bcs.n	7e4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     7de:	0018      	movs	r0, r3
     7e0:	bd10      	pop	{r4, pc}
		baud_calculated++;
     7e2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     7e4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     7e6:	1c63      	adds	r3, r4, #1
     7e8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     7ea:	4288      	cmp	r0, r1
     7ec:	d9f9      	bls.n	7e2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7ee:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     7f0:	2cff      	cmp	r4, #255	; 0xff
     7f2:	d8f4      	bhi.n	7de <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     7f4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     7f6:	2300      	movs	r3, #0
     7f8:	e7f1      	b.n	7de <_sercom_get_sync_baud_val+0xc>
	...

000007fc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7fe:	b083      	sub	sp, #12
     800:	000f      	movs	r7, r1
     802:	0016      	movs	r6, r2
     804:	aa08      	add	r2, sp, #32
     806:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     808:	0004      	movs	r4, r0
     80a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     80c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     80e:	42bc      	cmp	r4, r7
     810:	d902      	bls.n	818 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     812:	0010      	movs	r0, r2
     814:	b003      	add	sp, #12
     816:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     818:	2b00      	cmp	r3, #0
     81a:	d114      	bne.n	846 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     81c:	0002      	movs	r2, r0
     81e:	0008      	movs	r0, r1
     820:	2100      	movs	r1, #0
     822:	4c19      	ldr	r4, [pc, #100]	; (888 <_sercom_get_async_baud_val+0x8c>)
     824:	47a0      	blx	r4
     826:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     828:	003a      	movs	r2, r7
     82a:	2300      	movs	r3, #0
     82c:	2000      	movs	r0, #0
     82e:	4c17      	ldr	r4, [pc, #92]	; (88c <_sercom_get_async_baud_val+0x90>)
     830:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     832:	2200      	movs	r2, #0
     834:	2301      	movs	r3, #1
     836:	1a12      	subs	r2, r2, r0
     838:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     83a:	0c12      	lsrs	r2, r2, #16
     83c:	041b      	lsls	r3, r3, #16
     83e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     840:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     842:	2200      	movs	r2, #0
     844:	e7e5      	b.n	812 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     846:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     848:	2b01      	cmp	r3, #1
     84a:	d1f9      	bne.n	840 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     84c:	000a      	movs	r2, r1
     84e:	2300      	movs	r3, #0
     850:	2100      	movs	r1, #0
     852:	4c0d      	ldr	r4, [pc, #52]	; (888 <_sercom_get_async_baud_val+0x8c>)
     854:	47a0      	blx	r4
     856:	0002      	movs	r2, r0
     858:	000b      	movs	r3, r1
     85a:	9200      	str	r2, [sp, #0]
     85c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     85e:	0038      	movs	r0, r7
     860:	2100      	movs	r1, #0
     862:	4c0a      	ldr	r4, [pc, #40]	; (88c <_sercom_get_async_baud_val+0x90>)
     864:	47a0      	blx	r4
     866:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     868:	2380      	movs	r3, #128	; 0x80
     86a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     86c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     86e:	4298      	cmp	r0, r3
     870:	d8cf      	bhi.n	812 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     872:	0f79      	lsrs	r1, r7, #29
     874:	00f8      	lsls	r0, r7, #3
     876:	9a00      	ldr	r2, [sp, #0]
     878:	9b01      	ldr	r3, [sp, #4]
     87a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     87c:	00ea      	lsls	r2, r5, #3
     87e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     880:	b2d2      	uxtb	r2, r2
     882:	0352      	lsls	r2, r2, #13
     884:	432a      	orrs	r2, r5
     886:	e7db      	b.n	840 <_sercom_get_async_baud_val+0x44>
     888:	00002185 	.word	0x00002185
     88c:	00000719 	.word	0x00000719

00000890 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     890:	b510      	push	{r4, lr}
     892:	b082      	sub	sp, #8
     894:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     896:	4b0e      	ldr	r3, [pc, #56]	; (8d0 <sercom_set_gclk_generator+0x40>)
     898:	781b      	ldrb	r3, [r3, #0]
     89a:	2b00      	cmp	r3, #0
     89c:	d007      	beq.n	8ae <sercom_set_gclk_generator+0x1e>
     89e:	2900      	cmp	r1, #0
     8a0:	d105      	bne.n	8ae <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     8a2:	4b0b      	ldr	r3, [pc, #44]	; (8d0 <sercom_set_gclk_generator+0x40>)
     8a4:	785b      	ldrb	r3, [r3, #1]
     8a6:	4283      	cmp	r3, r0
     8a8:	d010      	beq.n	8cc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     8aa:	201d      	movs	r0, #29
     8ac:	e00c      	b.n	8c8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     8ae:	a901      	add	r1, sp, #4
     8b0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     8b2:	2012      	movs	r0, #18
     8b4:	4b07      	ldr	r3, [pc, #28]	; (8d4 <sercom_set_gclk_generator+0x44>)
     8b6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     8b8:	2012      	movs	r0, #18
     8ba:	4b07      	ldr	r3, [pc, #28]	; (8d8 <sercom_set_gclk_generator+0x48>)
     8bc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     8be:	4b04      	ldr	r3, [pc, #16]	; (8d0 <sercom_set_gclk_generator+0x40>)
     8c0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     8c2:	2201      	movs	r2, #1
     8c4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     8c6:	2000      	movs	r0, #0
}
     8c8:	b002      	add	sp, #8
     8ca:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     8cc:	2000      	movs	r0, #0
     8ce:	e7fb      	b.n	8c8 <sercom_set_gclk_generator+0x38>
     8d0:	20000b78 	.word	0x20000b78
     8d4:	000016ad 	.word	0x000016ad
     8d8:	0000163d 	.word	0x0000163d

000008dc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8dc:	4b40      	ldr	r3, [pc, #256]	; (9e0 <_sercom_get_default_pad+0x104>)
     8de:	4298      	cmp	r0, r3
     8e0:	d031      	beq.n	946 <_sercom_get_default_pad+0x6a>
     8e2:	d90a      	bls.n	8fa <_sercom_get_default_pad+0x1e>
     8e4:	4b3f      	ldr	r3, [pc, #252]	; (9e4 <_sercom_get_default_pad+0x108>)
     8e6:	4298      	cmp	r0, r3
     8e8:	d04d      	beq.n	986 <_sercom_get_default_pad+0xaa>
     8ea:	4b3f      	ldr	r3, [pc, #252]	; (9e8 <_sercom_get_default_pad+0x10c>)
     8ec:	4298      	cmp	r0, r3
     8ee:	d05a      	beq.n	9a6 <_sercom_get_default_pad+0xca>
     8f0:	4b3e      	ldr	r3, [pc, #248]	; (9ec <_sercom_get_default_pad+0x110>)
     8f2:	4298      	cmp	r0, r3
     8f4:	d037      	beq.n	966 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8f6:	2000      	movs	r0, #0
}
     8f8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     8fa:	4b3d      	ldr	r3, [pc, #244]	; (9f0 <_sercom_get_default_pad+0x114>)
     8fc:	4298      	cmp	r0, r3
     8fe:	d00c      	beq.n	91a <_sercom_get_default_pad+0x3e>
     900:	4b3c      	ldr	r3, [pc, #240]	; (9f4 <_sercom_get_default_pad+0x118>)
     902:	4298      	cmp	r0, r3
     904:	d1f7      	bne.n	8f6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     906:	2901      	cmp	r1, #1
     908:	d017      	beq.n	93a <_sercom_get_default_pad+0x5e>
     90a:	2900      	cmp	r1, #0
     90c:	d05d      	beq.n	9ca <_sercom_get_default_pad+0xee>
     90e:	2902      	cmp	r1, #2
     910:	d015      	beq.n	93e <_sercom_get_default_pad+0x62>
     912:	2903      	cmp	r1, #3
     914:	d015      	beq.n	942 <_sercom_get_default_pad+0x66>
	return 0;
     916:	2000      	movs	r0, #0
     918:	e7ee      	b.n	8f8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     91a:	2901      	cmp	r1, #1
     91c:	d007      	beq.n	92e <_sercom_get_default_pad+0x52>
     91e:	2900      	cmp	r1, #0
     920:	d051      	beq.n	9c6 <_sercom_get_default_pad+0xea>
     922:	2902      	cmp	r1, #2
     924:	d005      	beq.n	932 <_sercom_get_default_pad+0x56>
     926:	2903      	cmp	r1, #3
     928:	d005      	beq.n	936 <_sercom_get_default_pad+0x5a>
	return 0;
     92a:	2000      	movs	r0, #0
     92c:	e7e4      	b.n	8f8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     92e:	4832      	ldr	r0, [pc, #200]	; (9f8 <_sercom_get_default_pad+0x11c>)
     930:	e7e2      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     932:	4832      	ldr	r0, [pc, #200]	; (9fc <_sercom_get_default_pad+0x120>)
     934:	e7e0      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     936:	4832      	ldr	r0, [pc, #200]	; (a00 <_sercom_get_default_pad+0x124>)
     938:	e7de      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     93a:	4832      	ldr	r0, [pc, #200]	; (a04 <_sercom_get_default_pad+0x128>)
     93c:	e7dc      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     93e:	4832      	ldr	r0, [pc, #200]	; (a08 <_sercom_get_default_pad+0x12c>)
     940:	e7da      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     942:	4832      	ldr	r0, [pc, #200]	; (a0c <_sercom_get_default_pad+0x130>)
     944:	e7d8      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     946:	2901      	cmp	r1, #1
     948:	d007      	beq.n	95a <_sercom_get_default_pad+0x7e>
     94a:	2900      	cmp	r1, #0
     94c:	d03f      	beq.n	9ce <_sercom_get_default_pad+0xf2>
     94e:	2902      	cmp	r1, #2
     950:	d005      	beq.n	95e <_sercom_get_default_pad+0x82>
     952:	2903      	cmp	r1, #3
     954:	d005      	beq.n	962 <_sercom_get_default_pad+0x86>
	return 0;
     956:	2000      	movs	r0, #0
     958:	e7ce      	b.n	8f8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     95a:	482d      	ldr	r0, [pc, #180]	; (a10 <_sercom_get_default_pad+0x134>)
     95c:	e7cc      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     95e:	482d      	ldr	r0, [pc, #180]	; (a14 <_sercom_get_default_pad+0x138>)
     960:	e7ca      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     962:	482d      	ldr	r0, [pc, #180]	; (a18 <_sercom_get_default_pad+0x13c>)
     964:	e7c8      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     966:	2901      	cmp	r1, #1
     968:	d007      	beq.n	97a <_sercom_get_default_pad+0x9e>
     96a:	2900      	cmp	r1, #0
     96c:	d031      	beq.n	9d2 <_sercom_get_default_pad+0xf6>
     96e:	2902      	cmp	r1, #2
     970:	d005      	beq.n	97e <_sercom_get_default_pad+0xa2>
     972:	2903      	cmp	r1, #3
     974:	d005      	beq.n	982 <_sercom_get_default_pad+0xa6>
	return 0;
     976:	2000      	movs	r0, #0
     978:	e7be      	b.n	8f8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     97a:	4828      	ldr	r0, [pc, #160]	; (a1c <_sercom_get_default_pad+0x140>)
     97c:	e7bc      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     97e:	4828      	ldr	r0, [pc, #160]	; (a20 <_sercom_get_default_pad+0x144>)
     980:	e7ba      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     982:	4828      	ldr	r0, [pc, #160]	; (a24 <_sercom_get_default_pad+0x148>)
     984:	e7b8      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     986:	2901      	cmp	r1, #1
     988:	d007      	beq.n	99a <_sercom_get_default_pad+0xbe>
     98a:	2900      	cmp	r1, #0
     98c:	d023      	beq.n	9d6 <_sercom_get_default_pad+0xfa>
     98e:	2902      	cmp	r1, #2
     990:	d005      	beq.n	99e <_sercom_get_default_pad+0xc2>
     992:	2903      	cmp	r1, #3
     994:	d005      	beq.n	9a2 <_sercom_get_default_pad+0xc6>
	return 0;
     996:	2000      	movs	r0, #0
     998:	e7ae      	b.n	8f8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     99a:	4823      	ldr	r0, [pc, #140]	; (a28 <_sercom_get_default_pad+0x14c>)
     99c:	e7ac      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     99e:	4823      	ldr	r0, [pc, #140]	; (a2c <_sercom_get_default_pad+0x150>)
     9a0:	e7aa      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     9a2:	4823      	ldr	r0, [pc, #140]	; (a30 <_sercom_get_default_pad+0x154>)
     9a4:	e7a8      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     9a6:	2901      	cmp	r1, #1
     9a8:	d007      	beq.n	9ba <_sercom_get_default_pad+0xde>
     9aa:	2900      	cmp	r1, #0
     9ac:	d015      	beq.n	9da <_sercom_get_default_pad+0xfe>
     9ae:	2902      	cmp	r1, #2
     9b0:	d005      	beq.n	9be <_sercom_get_default_pad+0xe2>
     9b2:	2903      	cmp	r1, #3
     9b4:	d005      	beq.n	9c2 <_sercom_get_default_pad+0xe6>
	return 0;
     9b6:	2000      	movs	r0, #0
     9b8:	e79e      	b.n	8f8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ba:	481e      	ldr	r0, [pc, #120]	; (a34 <_sercom_get_default_pad+0x158>)
     9bc:	e79c      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     9be:	481e      	ldr	r0, [pc, #120]	; (a38 <_sercom_get_default_pad+0x15c>)
     9c0:	e79a      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     9c2:	481e      	ldr	r0, [pc, #120]	; (a3c <_sercom_get_default_pad+0x160>)
     9c4:	e798      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     9c6:	481e      	ldr	r0, [pc, #120]	; (a40 <_sercom_get_default_pad+0x164>)
     9c8:	e796      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     9ca:	481e      	ldr	r0, [pc, #120]	; (a44 <_sercom_get_default_pad+0x168>)
     9cc:	e794      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     9ce:	481e      	ldr	r0, [pc, #120]	; (a48 <_sercom_get_default_pad+0x16c>)
     9d0:	e792      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     9d2:	481e      	ldr	r0, [pc, #120]	; (a4c <_sercom_get_default_pad+0x170>)
     9d4:	e790      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     9d6:	481e      	ldr	r0, [pc, #120]	; (a50 <_sercom_get_default_pad+0x174>)
     9d8:	e78e      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     9da:	481e      	ldr	r0, [pc, #120]	; (a54 <_sercom_get_default_pad+0x178>)
     9dc:	e78c      	b.n	8f8 <_sercom_get_default_pad+0x1c>
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	42000c00 	.word	0x42000c00
     9e4:	42001400 	.word	0x42001400
     9e8:	42001800 	.word	0x42001800
     9ec:	42001000 	.word	0x42001000
     9f0:	42000400 	.word	0x42000400
     9f4:	42000800 	.word	0x42000800
     9f8:	00050003 	.word	0x00050003
     9fc:	00060003 	.word	0x00060003
     a00:	00070003 	.word	0x00070003
     a04:	00110002 	.word	0x00110002
     a08:	00120002 	.word	0x00120002
     a0c:	00130002 	.word	0x00130002
     a10:	000d0002 	.word	0x000d0002
     a14:	000e0002 	.word	0x000e0002
     a18:	000f0002 	.word	0x000f0002
     a1c:	00170002 	.word	0x00170002
     a20:	00180002 	.word	0x00180002
     a24:	00190002 	.word	0x00190002
     a28:	00290003 	.word	0x00290003
     a2c:	002a0003 	.word	0x002a0003
     a30:	002b0003 	.word	0x002b0003
     a34:	00230003 	.word	0x00230003
     a38:	00200003 	.word	0x00200003
     a3c:	00210003 	.word	0x00210003
     a40:	00040003 	.word	0x00040003
     a44:	00100002 	.word	0x00100002
     a48:	000c0002 	.word	0x000c0002
     a4c:	00160002 	.word	0x00160002
     a50:	00280003 	.word	0x00280003
     a54:	00220003 	.word	0x00220003

00000a58 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a58:	b530      	push	{r4, r5, lr}
     a5a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a5c:	4b0b      	ldr	r3, [pc, #44]	; (a8c <_sercom_get_sercom_inst_index+0x34>)
     a5e:	466a      	mov	r2, sp
     a60:	cb32      	ldmia	r3!, {r1, r4, r5}
     a62:	c232      	stmia	r2!, {r1, r4, r5}
     a64:	cb32      	ldmia	r3!, {r1, r4, r5}
     a66:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a68:	9b00      	ldr	r3, [sp, #0]
     a6a:	4283      	cmp	r3, r0
     a6c:	d00b      	beq.n	a86 <_sercom_get_sercom_inst_index+0x2e>
     a6e:	2301      	movs	r3, #1
     a70:	009a      	lsls	r2, r3, #2
     a72:	4669      	mov	r1, sp
     a74:	5852      	ldr	r2, [r2, r1]
     a76:	4282      	cmp	r2, r0
     a78:	d006      	beq.n	a88 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a7a:	3301      	adds	r3, #1
     a7c:	2b06      	cmp	r3, #6
     a7e:	d1f7      	bne.n	a70 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a80:	2000      	movs	r0, #0
}
     a82:	b007      	add	sp, #28
     a84:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a86:	2300      	movs	r3, #0
			return i;
     a88:	b2d8      	uxtb	r0, r3
     a8a:	e7fa      	b.n	a82 <_sercom_get_sercom_inst_index+0x2a>
     a8c:	00003fc8 	.word	0x00003fc8

00000a90 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     a90:	4770      	bx	lr
	...

00000a94 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     a94:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     a96:	4b0a      	ldr	r3, [pc, #40]	; (ac0 <_sercom_set_handler+0x2c>)
     a98:	781b      	ldrb	r3, [r3, #0]
     a9a:	2b00      	cmp	r3, #0
     a9c:	d10c      	bne.n	ab8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a9e:	4f09      	ldr	r7, [pc, #36]	; (ac4 <_sercom_set_handler+0x30>)
     aa0:	4e09      	ldr	r6, [pc, #36]	; (ac8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     aa2:	4d0a      	ldr	r5, [pc, #40]	; (acc <_sercom_set_handler+0x38>)
     aa4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     aa6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     aa8:	195a      	adds	r2, r3, r5
     aaa:	6014      	str	r4, [r2, #0]
     aac:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     aae:	2b18      	cmp	r3, #24
     ab0:	d1f9      	bne.n	aa6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     ab2:	2201      	movs	r2, #1
     ab4:	4b02      	ldr	r3, [pc, #8]	; (ac0 <_sercom_set_handler+0x2c>)
     ab6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     ab8:	0080      	lsls	r0, r0, #2
     aba:	4b02      	ldr	r3, [pc, #8]	; (ac4 <_sercom_set_handler+0x30>)
     abc:	50c1      	str	r1, [r0, r3]
}
     abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ac0:	20000b7a 	.word	0x20000b7a
     ac4:	20000b7c 	.word	0x20000b7c
     ac8:	00000a91 	.word	0x00000a91
     acc:	20000c30 	.word	0x20000c30

00000ad0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     ad0:	b500      	push	{lr}
     ad2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ad4:	2309      	movs	r3, #9
     ad6:	466a      	mov	r2, sp
     ad8:	7013      	strb	r3, [r2, #0]
     ada:	3301      	adds	r3, #1
     adc:	7053      	strb	r3, [r2, #1]
     ade:	3301      	adds	r3, #1
     ae0:	7093      	strb	r3, [r2, #2]
     ae2:	3301      	adds	r3, #1
     ae4:	70d3      	strb	r3, [r2, #3]
     ae6:	3301      	adds	r3, #1
     ae8:	7113      	strb	r3, [r2, #4]
     aea:	3301      	adds	r3, #1
     aec:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     aee:	4b03      	ldr	r3, [pc, #12]	; (afc <_sercom_get_interrupt_vector+0x2c>)
     af0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     af2:	466b      	mov	r3, sp
     af4:	5618      	ldrsb	r0, [r3, r0]
}
     af6:	b003      	add	sp, #12
     af8:	bd00      	pop	{pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	00000a59 	.word	0x00000a59

00000b00 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b00:	b510      	push	{r4, lr}
     b02:	4b02      	ldr	r3, [pc, #8]	; (b0c <SERCOM0_Handler+0xc>)
     b04:	681b      	ldr	r3, [r3, #0]
     b06:	2000      	movs	r0, #0
     b08:	4798      	blx	r3
     b0a:	bd10      	pop	{r4, pc}
     b0c:	20000b7c 	.word	0x20000b7c

00000b10 <SERCOM1_Handler>:
     b10:	b510      	push	{r4, lr}
     b12:	4b02      	ldr	r3, [pc, #8]	; (b1c <SERCOM1_Handler+0xc>)
     b14:	685b      	ldr	r3, [r3, #4]
     b16:	2001      	movs	r0, #1
     b18:	4798      	blx	r3
     b1a:	bd10      	pop	{r4, pc}
     b1c:	20000b7c 	.word	0x20000b7c

00000b20 <SERCOM2_Handler>:
     b20:	b510      	push	{r4, lr}
     b22:	4b02      	ldr	r3, [pc, #8]	; (b2c <SERCOM2_Handler+0xc>)
     b24:	689b      	ldr	r3, [r3, #8]
     b26:	2002      	movs	r0, #2
     b28:	4798      	blx	r3
     b2a:	bd10      	pop	{r4, pc}
     b2c:	20000b7c 	.word	0x20000b7c

00000b30 <SERCOM3_Handler>:
     b30:	b510      	push	{r4, lr}
     b32:	4b02      	ldr	r3, [pc, #8]	; (b3c <SERCOM3_Handler+0xc>)
     b34:	68db      	ldr	r3, [r3, #12]
     b36:	2003      	movs	r0, #3
     b38:	4798      	blx	r3
     b3a:	bd10      	pop	{r4, pc}
     b3c:	20000b7c 	.word	0x20000b7c

00000b40 <SERCOM4_Handler>:
     b40:	b510      	push	{r4, lr}
     b42:	4b02      	ldr	r3, [pc, #8]	; (b4c <SERCOM4_Handler+0xc>)
     b44:	691b      	ldr	r3, [r3, #16]
     b46:	2004      	movs	r0, #4
     b48:	4798      	blx	r3
     b4a:	bd10      	pop	{r4, pc}
     b4c:	20000b7c 	.word	0x20000b7c

00000b50 <SERCOM5_Handler>:
     b50:	b510      	push	{r4, lr}
     b52:	4b02      	ldr	r3, [pc, #8]	; (b5c <SERCOM5_Handler+0xc>)
     b54:	695b      	ldr	r3, [r3, #20]
     b56:	2005      	movs	r0, #5
     b58:	4798      	blx	r3
     b5a:	bd10      	pop	{r4, pc}
     b5c:	20000b7c 	.word	0x20000b7c

00000b60 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     b60:	b5f0      	push	{r4, r5, r6, r7, lr}
     b62:	46de      	mov	lr, fp
     b64:	4657      	mov	r7, sl
     b66:	464e      	mov	r6, r9
     b68:	4645      	mov	r5, r8
     b6a:	b5e0      	push	{r5, r6, r7, lr}
     b6c:	b091      	sub	sp, #68	; 0x44
     b6e:	0005      	movs	r5, r0
     b70:	000c      	movs	r4, r1
     b72:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     b74:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b76:	0008      	movs	r0, r1
     b78:	4bd2      	ldr	r3, [pc, #840]	; (ec4 <usart_init+0x364>)
     b7a:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
     b7c:	2805      	cmp	r0, #5
     b7e:	d00d      	beq.n	b9c <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
     b80:	0007      	movs	r7, r0
     b82:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b84:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     b86:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b88:	07d2      	lsls	r2, r2, #31
     b8a:	d509      	bpl.n	ba0 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     b8c:	0018      	movs	r0, r3
     b8e:	b011      	add	sp, #68	; 0x44
     b90:	bc3c      	pop	{r2, r3, r4, r5}
     b92:	4690      	mov	r8, r2
     b94:	4699      	mov	r9, r3
     b96:	46a2      	mov	sl, r4
     b98:	46ab      	mov	fp, r5
     b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
     b9c:	2719      	movs	r7, #25
     b9e:	e7f1      	b.n	b84 <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ba0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     ba2:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ba4:	0792      	lsls	r2, r2, #30
     ba6:	d4f1      	bmi.n	b8c <usart_init+0x2c>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     ba8:	4ac7      	ldr	r2, [pc, #796]	; (ec8 <usart_init+0x368>)
     baa:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     bac:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     bae:	3b1b      	subs	r3, #27
     bb0:	4083      	lsls	r3, r0
     bb2:	430b      	orrs	r3, r1
     bb4:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
     bb6:	a90f      	add	r1, sp, #60	; 0x3c
     bb8:	2335      	movs	r3, #53	; 0x35
     bba:	4698      	mov	r8, r3
     bbc:	5cf3      	ldrb	r3, [r6, r3]
     bbe:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     bc0:	b2ff      	uxtb	r7, r7
     bc2:	0038      	movs	r0, r7
     bc4:	4bc1      	ldr	r3, [pc, #772]	; (ecc <usart_init+0x36c>)
     bc6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     bc8:	0038      	movs	r0, r7
     bca:	4bc1      	ldr	r3, [pc, #772]	; (ed0 <usart_init+0x370>)
     bcc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bce:	4643      	mov	r3, r8
     bd0:	5cf0      	ldrb	r0, [r6, r3]
     bd2:	2100      	movs	r1, #0
     bd4:	4bbf      	ldr	r3, [pc, #764]	; (ed4 <usart_init+0x374>)
     bd6:	4798      	blx	r3
	module->character_size = config->character_size;
     bd8:	7af3      	ldrb	r3, [r6, #11]
     bda:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     bdc:	232c      	movs	r3, #44	; 0x2c
     bde:	5cf3      	ldrb	r3, [r6, r3]
     be0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     be2:	232d      	movs	r3, #45	; 0x2d
     be4:	5cf3      	ldrb	r3, [r6, r3]
     be6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     be8:	7ef3      	ldrb	r3, [r6, #27]
     bea:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     bec:	2324      	movs	r3, #36	; 0x24
     bee:	5cf3      	ldrb	r3, [r6, r3]
     bf0:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     bf2:	682b      	ldr	r3, [r5, #0]
     bf4:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bf6:	0018      	movs	r0, r3
     bf8:	4bb2      	ldr	r3, [pc, #712]	; (ec4 <usart_init+0x364>)
     bfa:	4798      	blx	r3
	if (sercom_index == 5) {
     bfc:	2805      	cmp	r0, #5
     bfe:	d01d      	beq.n	c3c <usart_init+0xdc>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c00:	3013      	adds	r0, #19
	uint16_t baud  = 0;
     c02:	2200      	movs	r2, #0
     c04:	230e      	movs	r3, #14
     c06:	a906      	add	r1, sp, #24
     c08:	468c      	mov	ip, r1
     c0a:	4463      	add	r3, ip
     c0c:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     c0e:	8a33      	ldrh	r3, [r6, #16]
     c10:	4698      	mov	r8, r3
     c12:	2380      	movs	r3, #128	; 0x80
     c14:	01db      	lsls	r3, r3, #7
     c16:	4598      	cmp	r8, r3
     c18:	d100      	bne.n	c1c <usart_init+0xbc>
     c1a:	e0c3      	b.n	da4 <usart_init+0x244>
     c1c:	d910      	bls.n	c40 <usart_init+0xe0>
     c1e:	23c0      	movs	r3, #192	; 0xc0
     c20:	01db      	lsls	r3, r3, #7
     c22:	4598      	cmp	r8, r3
     c24:	d100      	bne.n	c28 <usart_init+0xc8>
     c26:	e0b8      	b.n	d9a <usart_init+0x23a>
     c28:	2380      	movs	r3, #128	; 0x80
     c2a:	021b      	lsls	r3, r3, #8
     c2c:	4598      	cmp	r8, r3
     c2e:	d000      	beq.n	c32 <usart_init+0xd2>
     c30:	e166      	b.n	f00 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     c32:	2303      	movs	r3, #3
     c34:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c36:	2300      	movs	r3, #0
     c38:	9307      	str	r3, [sp, #28]
     c3a:	e00a      	b.n	c52 <usart_init+0xf2>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     c3c:	2019      	movs	r0, #25
     c3e:	e7e0      	b.n	c02 <usart_init+0xa2>
	switch (config->sample_rate) {
     c40:	2380      	movs	r3, #128	; 0x80
     c42:	019b      	lsls	r3, r3, #6
     c44:	4598      	cmp	r8, r3
     c46:	d000      	beq.n	c4a <usart_init+0xea>
     c48:	e15a      	b.n	f00 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c4a:	2310      	movs	r3, #16
     c4c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c4e:	3b0f      	subs	r3, #15
     c50:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     c52:	6833      	ldr	r3, [r6, #0]
     c54:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     c56:	68f3      	ldr	r3, [r6, #12]
     c58:	469b      	mov	fp, r3
		config->sample_adjustment |
     c5a:	6973      	ldr	r3, [r6, #20]
     c5c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c5e:	7e33      	ldrb	r3, [r6, #24]
     c60:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c62:	232e      	movs	r3, #46	; 0x2e
     c64:	5cf3      	ldrb	r3, [r6, r3]
     c66:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     c68:	6873      	ldr	r3, [r6, #4]
     c6a:	4699      	mov	r9, r3
	switch (transfer_mode)
     c6c:	2b00      	cmp	r3, #0
     c6e:	d100      	bne.n	c72 <usart_init+0x112>
     c70:	e0c5      	b.n	dfe <usart_init+0x29e>
     c72:	2380      	movs	r3, #128	; 0x80
     c74:	055b      	lsls	r3, r3, #21
     c76:	4599      	cmp	r9, r3
     c78:	d100      	bne.n	c7c <usart_init+0x11c>
     c7a:	e0a8      	b.n	dce <usart_init+0x26e>
	if(config->encoding_format_enable) {
     c7c:	7e73      	ldrb	r3, [r6, #25]
     c7e:	2b00      	cmp	r3, #0
     c80:	d002      	beq.n	c88 <usart_init+0x128>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     c82:	7eb3      	ldrb	r3, [r6, #26]
     c84:	9a02      	ldr	r2, [sp, #8]
     c86:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     c88:	230e      	movs	r3, #14
     c8a:	aa06      	add	r2, sp, #24
     c8c:	4694      	mov	ip, r2
     c8e:	4463      	add	r3, ip
     c90:	881b      	ldrh	r3, [r3, #0]
     c92:	9a02      	ldr	r2, [sp, #8]
     c94:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     c96:	9a05      	ldr	r2, [sp, #20]
     c98:	465b      	mov	r3, fp
     c9a:	431a      	orrs	r2, r3
     c9c:	9b03      	ldr	r3, [sp, #12]
     c9e:	431a      	orrs	r2, r3
     ca0:	464b      	mov	r3, r9
     ca2:	431a      	orrs	r2, r3
     ca4:	4643      	mov	r3, r8
     ca6:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ca8:	9b04      	ldr	r3, [sp, #16]
     caa:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     cac:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     cae:	4653      	mov	r3, sl
     cb0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     cb2:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
     cb4:	232f      	movs	r3, #47	; 0x2f
     cb6:	5cf3      	ldrb	r3, [r6, r3]
     cb8:	2b00      	cmp	r3, #0
     cba:	d101      	bne.n	cc0 <usart_init+0x160>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     cbc:	3304      	adds	r3, #4
     cbe:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     cc0:	7e73      	ldrb	r3, [r6, #25]
     cc2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     cc4:	2124      	movs	r1, #36	; 0x24
     cc6:	5c71      	ldrb	r1, [r6, r1]
     cc8:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     cca:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ccc:	2126      	movs	r1, #38	; 0x26
     cce:	5c71      	ldrb	r1, [r6, r1]
     cd0:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     cd2:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     cd4:	212c      	movs	r1, #44	; 0x2c
     cd6:	5c71      	ldrb	r1, [r6, r1]
     cd8:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     cda:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     cdc:	212d      	movs	r1, #45	; 0x2d
     cde:	5c71      	ldrb	r1, [r6, r1]
     ce0:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     ce2:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     ce4:	7ab0      	ldrb	r0, [r6, #10]
     ce6:	7af1      	ldrb	r1, [r6, #11]
     ce8:	4308      	orrs	r0, r1
     cea:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
     cec:	8933      	ldrh	r3, [r6, #8]
     cee:	2bff      	cmp	r3, #255	; 0xff
     cf0:	d100      	bne.n	cf4 <usart_init+0x194>
     cf2:	e0aa      	b.n	e4a <usart_init+0x2ea>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     cf4:	2180      	movs	r1, #128	; 0x80
     cf6:	0449      	lsls	r1, r1, #17
     cf8:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
     cfa:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     cfc:	9902      	ldr	r1, [sp, #8]
     cfe:	688b      	ldr	r3, [r1, #8]
     d00:	469c      	mov	ip, r3
						| config->lin_break_length;
     d02:	8c33      	ldrh	r3, [r6, #32]
     d04:	8c71      	ldrh	r1, [r6, #34]	; 0x22
     d06:	430b      	orrs	r3, r1
     d08:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     d0a:	2107      	movs	r1, #7
     d0c:	4663      	mov	r3, ip
     d0e:	4019      	ands	r1, r3
						| config->lin_break_length;
     d10:	003b      	movs	r3, r7
     d12:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     d14:	9902      	ldr	r1, [sp, #8]
     d16:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
     d18:	69f3      	ldr	r3, [r6, #28]
     d1a:	2b00      	cmp	r3, #0
     d1c:	d002      	beq.n	d24 <usart_init+0x1c4>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
     d1e:	496e      	ldr	r1, [pc, #440]	; (ed8 <usart_init+0x378>)
     d20:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
     d22:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     d24:	2334      	movs	r3, #52	; 0x34
     d26:	5cf3      	ldrb	r3, [r6, r3]
     d28:	2b00      	cmp	r3, #0
     d2a:	d103      	bne.n	d34 <usart_init+0x1d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     d2c:	4b6b      	ldr	r3, [pc, #428]	; (edc <usart_init+0x37c>)
     d2e:	789b      	ldrb	r3, [r3, #2]
     d30:	079b      	lsls	r3, r3, #30
     d32:	d501      	bpl.n	d38 <usart_init+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     d34:	2380      	movs	r3, #128	; 0x80
     d36:	431a      	orrs	r2, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d38:	6829      	ldr	r1, [r5, #0]
     d3a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d3c:	69cb      	ldr	r3, [r1, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     d3e:	2b00      	cmp	r3, #0
     d40:	d1fc      	bne.n	d3c <usart_init+0x1dc>
	usart_hw->CTRLB.reg = ctrlb;
     d42:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     d44:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     d46:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
     d48:	2b00      	cmp	r3, #0
     d4a:	d1fc      	bne.n	d46 <usart_init+0x1e6>
	usart_hw->CTRLA.reg = ctrla;
     d4c:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
     d4e:	683b      	ldr	r3, [r7, #0]
     d50:	22f0      	movs	r2, #240	; 0xf0
     d52:	0512      	lsls	r2, r2, #20
     d54:	4013      	ands	r3, r2
     d56:	22e0      	movs	r2, #224	; 0xe0
     d58:	04d2      	lsls	r2, r2, #19
     d5a:	4293      	cmp	r3, r2
     d5c:	d00a      	beq.n	d74 <usart_init+0x214>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
     d5e:	68bb      	ldr	r3, [r7, #8]
     d60:	2207      	movs	r2, #7
     d62:	4393      	bics	r3, r2
     d64:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
     d66:	68ba      	ldr	r2, [r7, #8]
     d68:	2325      	movs	r3, #37	; 0x25
     d6a:	5cf1      	ldrb	r1, [r6, r3]
     d6c:	3b1e      	subs	r3, #30
     d6e:	400b      	ands	r3, r1
     d70:	4313      	orrs	r3, r2
     d72:	60bb      	str	r3, [r7, #8]
     d74:	ab0e      	add	r3, sp, #56	; 0x38
     d76:	2280      	movs	r2, #128	; 0x80
     d78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d7a:	2200      	movs	r2, #0
     d7c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     d7e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     d80:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     d82:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     d84:	930a      	str	r3, [sp, #40]	; 0x28
     d86:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     d88:	930b      	str	r3, [sp, #44]	; 0x2c
     d8a:	6c33      	ldr	r3, [r6, #64]	; 0x40
     d8c:	930c      	str	r3, [sp, #48]	; 0x30
     d8e:	6c73      	ldr	r3, [r6, #68]	; 0x44
     d90:	9302      	str	r3, [sp, #8]
     d92:	930d      	str	r3, [sp, #52]	; 0x34
     d94:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d96:	ae0a      	add	r6, sp, #40	; 0x28
     d98:	e066      	b.n	e68 <usart_init+0x308>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d9a:	2308      	movs	r3, #8
     d9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     d9e:	3b07      	subs	r3, #7
     da0:	9307      	str	r3, [sp, #28]
     da2:	e756      	b.n	c52 <usart_init+0xf2>
	ctrla = (uint32_t)config->data_order |
     da4:	6833      	ldr	r3, [r6, #0]
     da6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     da8:	68f3      	ldr	r3, [r6, #12]
     daa:	469b      	mov	fp, r3
		config->sample_adjustment |
     dac:	6973      	ldr	r3, [r6, #20]
     dae:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     db0:	7e33      	ldrb	r3, [r6, #24]
     db2:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     db4:	232e      	movs	r3, #46	; 0x2e
     db6:	5cf3      	ldrb	r3, [r6, r3]
     db8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     dba:	6873      	ldr	r3, [r6, #4]
     dbc:	4699      	mov	r9, r3
	switch (transfer_mode)
     dbe:	2b00      	cmp	r3, #0
     dc0:	d019      	beq.n	df6 <usart_init+0x296>
     dc2:	2380      	movs	r3, #128	; 0x80
     dc4:	055b      	lsls	r3, r3, #21
     dc6:	4599      	cmp	r9, r3
     dc8:	d001      	beq.n	dce <usart_init+0x26e>
	enum status_code status_code = STATUS_OK;
     dca:	2300      	movs	r3, #0
     dcc:	e027      	b.n	e1e <usart_init+0x2be>
			if (!config->use_external_clock) {
     dce:	232f      	movs	r3, #47	; 0x2f
     dd0:	5cf3      	ldrb	r3, [r6, r3]
     dd2:	2b00      	cmp	r3, #0
     dd4:	d000      	beq.n	dd8 <usart_init+0x278>
     dd6:	e751      	b.n	c7c <usart_init+0x11c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     dd8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     dda:	001f      	movs	r7, r3
     ddc:	b2c0      	uxtb	r0, r0
     dde:	4b40      	ldr	r3, [pc, #256]	; (ee0 <usart_init+0x380>)
     de0:	4798      	blx	r3
     de2:	0001      	movs	r1, r0
     de4:	220e      	movs	r2, #14
     de6:	ab06      	add	r3, sp, #24
     de8:	469c      	mov	ip, r3
     dea:	4462      	add	r2, ip
     dec:	0038      	movs	r0, r7
     dee:	4b3d      	ldr	r3, [pc, #244]	; (ee4 <usart_init+0x384>)
     df0:	4798      	blx	r3
     df2:	0003      	movs	r3, r0
     df4:	e013      	b.n	e1e <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     df6:	2308      	movs	r3, #8
     df8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     dfa:	2300      	movs	r3, #0
     dfc:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     dfe:	232f      	movs	r3, #47	; 0x2f
     e00:	5cf3      	ldrb	r3, [r6, r3]
     e02:	2b00      	cmp	r3, #0
     e04:	d00f      	beq.n	e26 <usart_init+0x2c6>
				status_code =
     e06:	9b06      	ldr	r3, [sp, #24]
     e08:	9300      	str	r3, [sp, #0]
     e0a:	9b07      	ldr	r3, [sp, #28]
     e0c:	220e      	movs	r2, #14
     e0e:	a906      	add	r1, sp, #24
     e10:	468c      	mov	ip, r1
     e12:	4462      	add	r2, ip
     e14:	6b31      	ldr	r1, [r6, #48]	; 0x30
     e16:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     e18:	4f33      	ldr	r7, [pc, #204]	; (ee8 <usart_init+0x388>)
     e1a:	47b8      	blx	r7
     e1c:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
     e1e:	2b00      	cmp	r3, #0
     e20:	d000      	beq.n	e24 <usart_init+0x2c4>
     e22:	e6b3      	b.n	b8c <usart_init+0x2c>
     e24:	e72a      	b.n	c7c <usart_init+0x11c>
						_sercom_get_async_baud_val(config->baudrate,
     e26:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     e28:	001f      	movs	r7, r3
     e2a:	b2c0      	uxtb	r0, r0
     e2c:	4b2c      	ldr	r3, [pc, #176]	; (ee0 <usart_init+0x380>)
     e2e:	4798      	blx	r3
     e30:	0001      	movs	r1, r0
				status_code =
     e32:	9b06      	ldr	r3, [sp, #24]
     e34:	9300      	str	r3, [sp, #0]
     e36:	9b07      	ldr	r3, [sp, #28]
     e38:	220e      	movs	r2, #14
     e3a:	a806      	add	r0, sp, #24
     e3c:	4684      	mov	ip, r0
     e3e:	4462      	add	r2, ip
     e40:	0038      	movs	r0, r7
     e42:	4f29      	ldr	r7, [pc, #164]	; (ee8 <usart_init+0x388>)
     e44:	47b8      	blx	r7
     e46:	0003      	movs	r3, r0
     e48:	e7e9      	b.n	e1e <usart_init+0x2be>
		if(config->lin_slave_enable) {
     e4a:	7ef3      	ldrb	r3, [r6, #27]
     e4c:	2b00      	cmp	r3, #0
     e4e:	d100      	bne.n	e52 <usart_init+0x2f2>
     e50:	e754      	b.n	cfc <usart_init+0x19c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     e52:	2380      	movs	r3, #128	; 0x80
     e54:	04db      	lsls	r3, r3, #19
     e56:	431a      	orrs	r2, r3
     e58:	e750      	b.n	cfc <usart_init+0x19c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e5a:	0020      	movs	r0, r4
     e5c:	4b23      	ldr	r3, [pc, #140]	; (eec <usart_init+0x38c>)
     e5e:	4798      	blx	r3
     e60:	e007      	b.n	e72 <usart_init+0x312>
     e62:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     e64:	2f04      	cmp	r7, #4
     e66:	d00d      	beq.n	e84 <usart_init+0x324>
     e68:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e6a:	00bb      	lsls	r3, r7, #2
     e6c:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     e6e:	2800      	cmp	r0, #0
     e70:	d0f3      	beq.n	e5a <usart_init+0x2fa>
		if (current_pinmux != PINMUX_UNUSED) {
     e72:	1c43      	adds	r3, r0, #1
     e74:	d0f5      	beq.n	e62 <usart_init+0x302>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e76:	a90e      	add	r1, sp, #56	; 0x38
     e78:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     e7a:	0c00      	lsrs	r0, r0, #16
     e7c:	b2c0      	uxtb	r0, r0
     e7e:	4b1c      	ldr	r3, [pc, #112]	; (ef0 <usart_init+0x390>)
     e80:	4798      	blx	r3
     e82:	e7ee      	b.n	e62 <usart_init+0x302>
		module->callback[i]            = NULL;
     e84:	2300      	movs	r3, #0
     e86:	60eb      	str	r3, [r5, #12]
     e88:	612b      	str	r3, [r5, #16]
     e8a:	616b      	str	r3, [r5, #20]
     e8c:	61ab      	str	r3, [r5, #24]
     e8e:	61eb      	str	r3, [r5, #28]
     e90:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     e92:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     e94:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     e96:	2200      	movs	r2, #0
     e98:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     e9a:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     e9c:	3330      	adds	r3, #48	; 0x30
     e9e:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     ea0:	3301      	adds	r3, #1
     ea2:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     ea4:	3301      	adds	r3, #1
     ea6:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     ea8:	3301      	adds	r3, #1
     eaa:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     eac:	6828      	ldr	r0, [r5, #0]
     eae:	4b05      	ldr	r3, [pc, #20]	; (ec4 <usart_init+0x364>)
     eb0:	4798      	blx	r3
     eb2:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     eb4:	490f      	ldr	r1, [pc, #60]	; (ef4 <usart_init+0x394>)
     eb6:	4b10      	ldr	r3, [pc, #64]	; (ef8 <usart_init+0x398>)
     eb8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     eba:	00a4      	lsls	r4, r4, #2
     ebc:	4b0f      	ldr	r3, [pc, #60]	; (efc <usart_init+0x39c>)
     ebe:	50e5      	str	r5, [r4, r3]
	return status_code;
     ec0:	2300      	movs	r3, #0
     ec2:	e663      	b.n	b8c <usart_init+0x2c>
     ec4:	00000a59 	.word	0x00000a59
     ec8:	40000800 	.word	0x40000800
     ecc:	000016ad 	.word	0x000016ad
     ed0:	0000163d 	.word	0x0000163d
     ed4:	00000891 	.word	0x00000891
     ed8:	f0ffffff 	.word	0xf0ffffff
     edc:	41002000 	.word	0x41002000
     ee0:	000016d1 	.word	0x000016d1
     ee4:	000007d3 	.word	0x000007d3
     ee8:	000007fd 	.word	0x000007fd
     eec:	000008dd 	.word	0x000008dd
     ef0:	000017a9 	.word	0x000017a9
     ef4:	00000f9d 	.word	0x00000f9d
     ef8:	00000a95 	.word	0x00000a95
     efc:	20000c30 	.word	0x20000c30
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f00:	2310      	movs	r3, #16
     f02:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f04:	2300      	movs	r3, #0
     f06:	9307      	str	r3, [sp, #28]
     f08:	e6a3      	b.n	c52 <usart_init+0xf2>
     f0a:	46c0      	nop			; (mov r8, r8)

00000f0c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     f0c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     f0e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     f10:	2a00      	cmp	r2, #0
     f12:	d101      	bne.n	f18 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     f14:	0018      	movs	r0, r3
     f16:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     f18:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     f1a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     f1c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     f1e:	2a00      	cmp	r2, #0
     f20:	d1f8      	bne.n	f14 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     f22:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     f24:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     f26:	2102      	movs	r1, #2
     f28:	7e13      	ldrb	r3, [r2, #24]
     f2a:	420b      	tst	r3, r1
     f2c:	d0fc      	beq.n	f28 <usart_write_wait+0x1c>
	return STATUS_OK;
     f2e:	2300      	movs	r3, #0
     f30:	e7f0      	b.n	f14 <usart_write_wait+0x8>

00000f32 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     f32:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     f34:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     f36:	2a00      	cmp	r2, #0
     f38:	d101      	bne.n	f3e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     f3a:	0018      	movs	r0, r3
     f3c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     f3e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     f40:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     f42:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     f44:	2a00      	cmp	r2, #0
     f46:	d1f8      	bne.n	f3a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     f48:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     f4a:	7e10      	ldrb	r0, [r2, #24]
     f4c:	0740      	lsls	r0, r0, #29
     f4e:	d5f4      	bpl.n	f3a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f50:	8b53      	ldrh	r3, [r2, #26]
     f52:	b2db      	uxtb	r3, r3
	if (error_code) {
     f54:	0658      	lsls	r0, r3, #25
     f56:	d01d      	beq.n	f94 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     f58:	0798      	lsls	r0, r3, #30
     f5a:	d503      	bpl.n	f64 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     f5c:	2302      	movs	r3, #2
     f5e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     f60:	3318      	adds	r3, #24
     f62:	e7ea      	b.n	f3a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     f64:	0758      	lsls	r0, r3, #29
     f66:	d503      	bpl.n	f70 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     f68:	2304      	movs	r3, #4
     f6a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     f6c:	331a      	adds	r3, #26
     f6e:	e7e4      	b.n	f3a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f70:	07d8      	lsls	r0, r3, #31
     f72:	d503      	bpl.n	f7c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     f74:	2301      	movs	r3, #1
     f76:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     f78:	3312      	adds	r3, #18
     f7a:	e7de      	b.n	f3a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     f7c:	06d8      	lsls	r0, r3, #27
     f7e:	d503      	bpl.n	f88 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     f80:	2310      	movs	r3, #16
     f82:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     f84:	3332      	adds	r3, #50	; 0x32
     f86:	e7d8      	b.n	f3a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     f88:	069b      	lsls	r3, r3, #26
     f8a:	d503      	bpl.n	f94 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     f8c:	2320      	movs	r3, #32
     f8e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     f90:	3321      	adds	r3, #33	; 0x21
     f92:	e7d2      	b.n	f3a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     f94:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     f96:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     f98:	2300      	movs	r3, #0
     f9a:	e7ce      	b.n	f3a <usart_read_wait+0x8>

00000f9c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     f9e:	0080      	lsls	r0, r0, #2
     fa0:	4b64      	ldr	r3, [pc, #400]	; (1134 <_usart_interrupt_handler+0x198>)
     fa2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     fa4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     fa6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     fa8:	2b00      	cmp	r3, #0
     faa:	d1fc      	bne.n	fa6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     fac:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     fae:	7da6      	ldrb	r6, [r4, #22]
     fb0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     fb2:	2330      	movs	r3, #48	; 0x30
     fb4:	5ceb      	ldrb	r3, [r5, r3]
     fb6:	2231      	movs	r2, #49	; 0x31
     fb8:	5caf      	ldrb	r7, [r5, r2]
     fba:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     fbc:	07f3      	lsls	r3, r6, #31
     fbe:	d522      	bpl.n	1006 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     fc0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     fc2:	b29b      	uxth	r3, r3
     fc4:	2b00      	cmp	r3, #0
     fc6:	d01c      	beq.n	1002 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     fc8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     fca:	7813      	ldrb	r3, [r2, #0]
     fcc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     fce:	1c51      	adds	r1, r2, #1
     fd0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     fd2:	7969      	ldrb	r1, [r5, #5]
     fd4:	2901      	cmp	r1, #1
     fd6:	d00e      	beq.n	ff6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     fd8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     fda:	05db      	lsls	r3, r3, #23
     fdc:	0ddb      	lsrs	r3, r3, #23
     fde:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     fe0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     fe2:	3b01      	subs	r3, #1
     fe4:	b29b      	uxth	r3, r3
     fe6:	85eb      	strh	r3, [r5, #46]	; 0x2e
     fe8:	2b00      	cmp	r3, #0
     fea:	d10c      	bne.n	1006 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     fec:	3301      	adds	r3, #1
     fee:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     ff0:	3301      	adds	r3, #1
     ff2:	75a3      	strb	r3, [r4, #22]
     ff4:	e007      	b.n	1006 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     ff6:	7851      	ldrb	r1, [r2, #1]
     ff8:	0209      	lsls	r1, r1, #8
     ffa:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     ffc:	3202      	adds	r2, #2
     ffe:	62aa      	str	r2, [r5, #40]	; 0x28
    1000:	e7eb      	b.n	fda <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1002:	2301      	movs	r3, #1
    1004:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1006:	07b3      	lsls	r3, r6, #30
    1008:	d506      	bpl.n	1018 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    100a:	2302      	movs	r3, #2
    100c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    100e:	2200      	movs	r2, #0
    1010:	3331      	adds	r3, #49	; 0x31
    1012:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1014:	07fb      	lsls	r3, r7, #31
    1016:	d41e      	bmi.n	1056 <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1018:	0773      	lsls	r3, r6, #29
    101a:	d568      	bpl.n	10ee <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
    101c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    101e:	b29b      	uxth	r3, r3
    1020:	2b00      	cmp	r3, #0
    1022:	d062      	beq.n	10ea <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1024:	8b63      	ldrh	r3, [r4, #26]
    1026:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1028:	071a      	lsls	r2, r3, #28
    102a:	d418      	bmi.n	105e <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    102c:	227f      	movs	r2, #127	; 0x7f
    102e:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    1030:	065a      	lsls	r2, r3, #25
    1032:	d501      	bpl.n	1038 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    1034:	2240      	movs	r2, #64	; 0x40
    1036:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1038:	2b00      	cmp	r3, #0
    103a:	d033      	beq.n	10a4 <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    103c:	079a      	lsls	r2, r3, #30
    103e:	d511      	bpl.n	1064 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1040:	221a      	movs	r2, #26
    1042:	2332      	movs	r3, #50	; 0x32
    1044:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1046:	3b30      	subs	r3, #48	; 0x30
    1048:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    104a:	077b      	lsls	r3, r7, #29
    104c:	d54f      	bpl.n	10ee <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    104e:	0028      	movs	r0, r5
    1050:	696b      	ldr	r3, [r5, #20]
    1052:	4798      	blx	r3
    1054:	e04b      	b.n	10ee <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1056:	0028      	movs	r0, r5
    1058:	68eb      	ldr	r3, [r5, #12]
    105a:	4798      	blx	r3
    105c:	e7dc      	b.n	1018 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    105e:	2277      	movs	r2, #119	; 0x77
    1060:	4013      	ands	r3, r2
    1062:	e7e5      	b.n	1030 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1064:	075a      	lsls	r2, r3, #29
    1066:	d505      	bpl.n	1074 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1068:	221e      	movs	r2, #30
    106a:	2332      	movs	r3, #50	; 0x32
    106c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    106e:	3b2e      	subs	r3, #46	; 0x2e
    1070:	8363      	strh	r3, [r4, #26]
    1072:	e7ea      	b.n	104a <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1074:	07da      	lsls	r2, r3, #31
    1076:	d505      	bpl.n	1084 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1078:	2213      	movs	r2, #19
    107a:	2332      	movs	r3, #50	; 0x32
    107c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    107e:	3b31      	subs	r3, #49	; 0x31
    1080:	8363      	strh	r3, [r4, #26]
    1082:	e7e2      	b.n	104a <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1084:	06da      	lsls	r2, r3, #27
    1086:	d505      	bpl.n	1094 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1088:	2242      	movs	r2, #66	; 0x42
    108a:	2332      	movs	r3, #50	; 0x32
    108c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    108e:	3b22      	subs	r3, #34	; 0x22
    1090:	8363      	strh	r3, [r4, #26]
    1092:	e7da      	b.n	104a <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1094:	069b      	lsls	r3, r3, #26
    1096:	d5d8      	bpl.n	104a <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1098:	2241      	movs	r2, #65	; 0x41
    109a:	2332      	movs	r3, #50	; 0x32
    109c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    109e:	3b12      	subs	r3, #18
    10a0:	8363      	strh	r3, [r4, #26]
    10a2:	e7d2      	b.n	104a <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    10a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    10a6:	05db      	lsls	r3, r3, #23
    10a8:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    10aa:	b2da      	uxtb	r2, r3
    10ac:	6a69      	ldr	r1, [r5, #36]	; 0x24
    10ae:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    10b0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    10b2:	1c51      	adds	r1, r2, #1
    10b4:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    10b6:	7969      	ldrb	r1, [r5, #5]
    10b8:	2901      	cmp	r1, #1
    10ba:	d010      	beq.n	10de <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    10bc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    10be:	3b01      	subs	r3, #1
    10c0:	b29b      	uxth	r3, r3
    10c2:	85ab      	strh	r3, [r5, #44]	; 0x2c
    10c4:	2b00      	cmp	r3, #0
    10c6:	d112      	bne.n	10ee <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    10c8:	3304      	adds	r3, #4
    10ca:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    10cc:	2200      	movs	r2, #0
    10ce:	332e      	adds	r3, #46	; 0x2e
    10d0:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    10d2:	07bb      	lsls	r3, r7, #30
    10d4:	d50b      	bpl.n	10ee <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    10d6:	0028      	movs	r0, r5
    10d8:	692b      	ldr	r3, [r5, #16]
    10da:	4798      	blx	r3
    10dc:	e007      	b.n	10ee <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    10de:	0a1b      	lsrs	r3, r3, #8
    10e0:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    10e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    10e4:	3301      	adds	r3, #1
    10e6:	626b      	str	r3, [r5, #36]	; 0x24
    10e8:	e7e8      	b.n	10bc <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    10ea:	2304      	movs	r3, #4
    10ec:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    10ee:	06f3      	lsls	r3, r6, #27
    10f0:	d504      	bpl.n	10fc <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    10f2:	2310      	movs	r3, #16
    10f4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    10f6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    10f8:	06fb      	lsls	r3, r7, #27
    10fa:	d40e      	bmi.n	111a <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    10fc:	06b3      	lsls	r3, r6, #26
    10fe:	d504      	bpl.n	110a <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1100:	2320      	movs	r3, #32
    1102:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1104:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1106:	073b      	lsls	r3, r7, #28
    1108:	d40b      	bmi.n	1122 <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    110a:	0733      	lsls	r3, r6, #28
    110c:	d504      	bpl.n	1118 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    110e:	2308      	movs	r3, #8
    1110:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1112:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1114:	06bb      	lsls	r3, r7, #26
    1116:	d408      	bmi.n	112a <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    111a:	0028      	movs	r0, r5
    111c:	69eb      	ldr	r3, [r5, #28]
    111e:	4798      	blx	r3
    1120:	e7ec      	b.n	10fc <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1122:	0028      	movs	r0, r5
    1124:	69ab      	ldr	r3, [r5, #24]
    1126:	4798      	blx	r3
    1128:	e7ef      	b.n	110a <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    112a:	6a2b      	ldr	r3, [r5, #32]
    112c:	0028      	movs	r0, r5
    112e:	4798      	blx	r3
}
    1130:	e7f2      	b.n	1118 <_usart_interrupt_handler+0x17c>
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	20000c30 	.word	0x20000c30

00001138 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1138:	b510      	push	{r4, lr}
	switch (clock_source) {
    113a:	2807      	cmp	r0, #7
    113c:	d803      	bhi.n	1146 <system_clock_source_get_hz+0xe>
    113e:	0080      	lsls	r0, r0, #2
    1140:	4b0f      	ldr	r3, [pc, #60]	; (1180 <system_clock_source_get_hz+0x48>)
    1142:	581b      	ldr	r3, [r3, r0]
    1144:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1146:	2000      	movs	r0, #0
    1148:	e018      	b.n	117c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    114a:	4b0e      	ldr	r3, [pc, #56]	; (1184 <system_clock_source_get_hz+0x4c>)
    114c:	6858      	ldr	r0, [r3, #4]
    114e:	e015      	b.n	117c <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    1150:	4b0d      	ldr	r3, [pc, #52]	; (1188 <system_clock_source_get_hz+0x50>)
    1152:	7d59      	ldrb	r1, [r3, #21]
    1154:	0709      	lsls	r1, r1, #28
    1156:	0f09      	lsrs	r1, r1, #28
    1158:	3101      	adds	r1, #1
    115a:	480c      	ldr	r0, [pc, #48]	; (118c <system_clock_source_get_hz+0x54>)
    115c:	4b0c      	ldr	r3, [pc, #48]	; (1190 <system_clock_source_get_hz+0x58>)
    115e:	4798      	blx	r3
    1160:	e00c      	b.n	117c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    1162:	4b08      	ldr	r3, [pc, #32]	; (1184 <system_clock_source_get_hz+0x4c>)
    1164:	6898      	ldr	r0, [r3, #8]
    1166:	e009      	b.n	117c <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1168:	4b07      	ldr	r3, [pc, #28]	; (1188 <system_clock_source_get_hz+0x50>)
    116a:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    116c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    116e:	079b      	lsls	r3, r3, #30
    1170:	d504      	bpl.n	117c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    1172:	4b04      	ldr	r3, [pc, #16]	; (1184 <system_clock_source_get_hz+0x4c>)
    1174:	6818      	ldr	r0, [r3, #0]
    1176:	e001      	b.n	117c <system_clock_source_get_hz+0x44>
		return 32768UL;
    1178:	2080      	movs	r0, #128	; 0x80
    117a:	0200      	lsls	r0, r0, #8
	}
}
    117c:	bd10      	pop	{r4, pc}
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	00003fe0 	.word	0x00003fe0
    1184:	20000b94 	.word	0x20000b94
    1188:	40001000 	.word	0x40001000
    118c:	02dc6c00 	.word	0x02dc6c00
    1190:	0000206d 	.word	0x0000206d

00001194 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1194:	b5f0      	push	{r4, r5, r6, r7, lr}
    1196:	46de      	mov	lr, fp
    1198:	4657      	mov	r7, sl
    119a:	464e      	mov	r6, r9
    119c:	4645      	mov	r5, r8
    119e:	b5e0      	push	{r5, r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    11a0:	4a25      	ldr	r2, [pc, #148]	; (1238 <system_clock_source_xosc32k_set_config+0xa4>)
    11a2:	8a93      	ldrh	r3, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    11a4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    11a6:	7801      	ldrb	r1, [r0, #0]
    11a8:	424c      	negs	r4, r1
    11aa:	414c      	adcs	r4, r1
    11ac:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    11ae:	7881      	ldrb	r1, [r0, #2]
    11b0:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    11b2:	78c1      	ldrb	r1, [r0, #3]
    11b4:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    11b6:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    11b8:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    11ba:	7a81      	ldrb	r1, [r0, #10]
    11bc:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    11be:	491f      	ldr	r1, [pc, #124]	; (123c <system_clock_source_xosc32k_set_config+0xa8>)
    11c0:	6844      	ldr	r4, [r0, #4]
    11c2:	608c      	str	r4, [r1, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    11c4:	7ac1      	ldrb	r1, [r0, #11]
    11c6:	0089      	lsls	r1, r1, #2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    11c8:	7b84      	ldrb	r4, [r0, #14]
    11ca:	0064      	lsls	r4, r4, #1
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
    11cc:	4321      	orrs	r1, r4
    11ce:	7b44      	ldrb	r4, [r0, #13]
    11d0:	4321      	orrs	r1, r4
    11d2:	b2c9      	uxtb	r1, r1
	OSC32KCTRL->CFDCTRL.reg =
    11d4:	7591      	strb	r1, [r2, #22]

	OSC32KCTRL->EVCTRL.reg =
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);
    11d6:	7b01      	ldrb	r1, [r0, #12]
	OSC32KCTRL->EVCTRL.reg =
    11d8:	75d1      	strb	r1, [r2, #23]

	OSC32KCTRL->XOSC32K = temp;
    11da:	2101      	movs	r1, #1
    11dc:	4648      	mov	r0, r9
    11de:	0080      	lsls	r0, r0, #2
    11e0:	2404      	movs	r4, #4
    11e2:	43a3      	bics	r3, r4
    11e4:	4303      	orrs	r3, r0
    11e6:	4640      	mov	r0, r8
    11e8:	4008      	ands	r0, r1
    11ea:	00c0      	lsls	r0, r0, #3
    11ec:	3404      	adds	r4, #4
    11ee:	43a3      	bics	r3, r4
    11f0:	4303      	orrs	r3, r0
    11f2:	4660      	mov	r0, ip
    11f4:	4008      	ands	r0, r1
    11f6:	0100      	lsls	r0, r0, #4
    11f8:	3408      	adds	r4, #8
    11fa:	43a3      	bics	r3, r4
    11fc:	4303      	orrs	r3, r0
    11fe:	400f      	ands	r7, r1
    1200:	01bf      	lsls	r7, r7, #6
    1202:	2040      	movs	r0, #64	; 0x40
    1204:	4383      	bics	r3, r0
    1206:	433b      	orrs	r3, r7
    1208:	400e      	ands	r6, r1
    120a:	01f6      	lsls	r6, r6, #7
    120c:	3040      	adds	r0, #64	; 0x40
    120e:	4383      	bics	r3, r0
    1210:	4333      	orrs	r3, r6
    1212:	3879      	subs	r0, #121	; 0x79
    1214:	4005      	ands	r5, r0
    1216:	022d      	lsls	r5, r5, #8
    1218:	4809      	ldr	r0, [pc, #36]	; (1240 <system_clock_source_xosc32k_set_config+0xac>)
    121a:	4003      	ands	r3, r0
    121c:	432b      	orrs	r3, r5
    121e:	4658      	mov	r0, fp
    1220:	4001      	ands	r1, r0
    1222:	0309      	lsls	r1, r1, #12
    1224:	4807      	ldr	r0, [pc, #28]	; (1244 <system_clock_source_xosc32k_set_config+0xb0>)
    1226:	4003      	ands	r3, r0
    1228:	430b      	orrs	r3, r1
    122a:	8293      	strh	r3, [r2, #20]
}
    122c:	bc3c      	pop	{r2, r3, r4, r5}
    122e:	4690      	mov	r8, r2
    1230:	4699      	mov	r9, r3
    1232:	46a2      	mov	sl, r4
    1234:	46ab      	mov	fp, r5
    1236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1238:	40001400 	.word	0x40001400
    123c:	20000b94 	.word	0x20000b94
    1240:	fffff8ff 	.word	0xfffff8ff
    1244:	ffffefff 	.word	0xffffefff

00001248 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    1248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    124a:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    124c:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    124e:	7d03      	ldrb	r3, [r0, #20]
    1250:	2b01      	cmp	r3, #1
    1252:	d04d      	beq.n	12f0 <system_clock_source_dpll_set_config+0xa8>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    1254:	68a3      	ldr	r3, [r4, #8]
    1256:	0118      	lsls	r0, r3, #4
    1258:	0029      	movs	r1, r5
    125a:	4b29      	ldr	r3, [pc, #164]	; (1300 <system_clock_source_dpll_set_config+0xb8>)
    125c:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    125e:	220f      	movs	r2, #15
    1260:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    1262:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    1264:	7821      	ldrb	r1, [r4, #0]
    1266:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    1268:	7866      	ldrb	r6, [r4, #1]
    126a:	01b6      	lsls	r6, r6, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    126c:	4331      	orrs	r1, r6
    126e:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    1270:	4e24      	ldr	r6, [pc, #144]	; (1304 <system_clock_source_dpll_set_config+0xbc>)
    1272:	7731      	strb	r1, [r6, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1274:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    1276:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    1278:	051b      	lsls	r3, r3, #20
    127a:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    127c:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    127e:	6233      	str	r3, [r6, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    1280:	0037      	movs	r7, r6
    1282:	262c      	movs	r6, #44	; 0x2c
    1284:	2104      	movs	r1, #4
    1286:	5dbb      	ldrb	r3, [r7, r6]
    1288:	420b      	tst	r3, r1
    128a:	d1fc      	bne.n	1286 <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    128c:	78a3      	ldrb	r3, [r4, #2]
    128e:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    1290:	78e1      	ldrb	r1, [r4, #3]
    1292:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    1294:	430b      	orrs	r3, r1
    1296:	7921      	ldrb	r1, [r4, #4]
    1298:	0089      	lsls	r1, r1, #2
    129a:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    129c:	7ca1      	ldrb	r1, [r4, #18]
    129e:	2603      	movs	r6, #3
    12a0:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    12a2:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    12a4:	8a21      	ldrh	r1, [r4, #16]
    12a6:	0409      	lsls	r1, r1, #16
    12a8:	4f17      	ldr	r7, [pc, #92]	; (1308 <system_clock_source_dpll_set_config+0xc0>)
    12aa:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    12ac:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    12ae:	7ce1      	ldrb	r1, [r4, #19]
    12b0:	0209      	lsls	r1, r1, #8
    12b2:	27e0      	movs	r7, #224	; 0xe0
    12b4:	00ff      	lsls	r7, r7, #3
    12b6:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    12b8:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    12ba:	7d27      	ldrb	r7, [r4, #20]
    12bc:	013f      	lsls	r7, r7, #4
    12be:	2130      	movs	r1, #48	; 0x30
    12c0:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    12c2:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    12c4:	490f      	ldr	r1, [pc, #60]	; (1304 <system_clock_source_dpll_set_config+0xbc>)
    12c6:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    12c8:	7d63      	ldrb	r3, [r4, #21]
    12ca:	401e      	ands	r6, r3
    12cc:	2328      	movs	r3, #40	; 0x28
    12ce:	54ce      	strb	r6, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    12d0:	000f      	movs	r7, r1
    12d2:	262c      	movs	r6, #44	; 0x2c
    12d4:	2108      	movs	r1, #8
    12d6:	5dbb      	ldrb	r3, [r7, r6]
    12d8:	420b      	tst	r3, r1
    12da:	d1fc      	bne.n	12d6 <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    12dc:	230f      	movs	r3, #15
    12de:	4398      	bics	r0, r3
    12e0:	1882      	adds	r2, r0, r2
			(refclk *
    12e2:	436a      	muls	r2, r5
			) >> (4 + config->prescaler);
    12e4:	7d63      	ldrb	r3, [r4, #21]
    12e6:	3304      	adds	r3, #4
    12e8:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    12ea:	4b08      	ldr	r3, [pc, #32]	; (130c <system_clock_source_dpll_set_config+0xc4>)
    12ec:	601a      	str	r2, [r3, #0]
}
    12ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    12f0:	8a01      	ldrh	r1, [r0, #16]
    12f2:	3101      	adds	r1, #1
    12f4:	0049      	lsls	r1, r1, #1
    12f6:	0028      	movs	r0, r5
    12f8:	4b01      	ldr	r3, [pc, #4]	; (1300 <system_clock_source_dpll_set_config+0xb8>)
    12fa:	4798      	blx	r3
    12fc:	0005      	movs	r5, r0
    12fe:	e7a9      	b.n	1254 <system_clock_source_dpll_set_config+0xc>
    1300:	0000206d 	.word	0x0000206d
    1304:	40001000 	.word	0x40001000
    1308:	07ff0000 	.word	0x07ff0000
    130c:	20000b94 	.word	0x20000b94

00001310 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1310:	2807      	cmp	r0, #7
    1312:	d803      	bhi.n	131c <system_clock_source_enable+0xc>
    1314:	0080      	lsls	r0, r0, #2
    1316:	4b18      	ldr	r3, [pc, #96]	; (1378 <system_clock_source_enable+0x68>)
    1318:	581b      	ldr	r3, [r3, r0]
    131a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    131c:	2017      	movs	r0, #23
    131e:	e029      	b.n	1374 <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    1320:	4a16      	ldr	r2, [pc, #88]	; (137c <system_clock_source_enable+0x6c>)
    1322:	7d13      	ldrb	r3, [r2, #20]
    1324:	2102      	movs	r1, #2
    1326:	430b      	orrs	r3, r1
    1328:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    132a:	2000      	movs	r0, #0
    132c:	e022      	b.n	1374 <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    132e:	4a14      	ldr	r2, [pc, #80]	; (1380 <system_clock_source_enable+0x70>)
    1330:	6993      	ldr	r3, [r2, #24]
    1332:	2102      	movs	r1, #2
    1334:	430b      	orrs	r3, r1
    1336:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1338:	2000      	movs	r0, #0
		break;
    133a:	e01b      	b.n	1374 <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    133c:	4a0f      	ldr	r2, [pc, #60]	; (137c <system_clock_source_enable+0x6c>)
    133e:	8a13      	ldrh	r3, [r2, #16]
    1340:	2102      	movs	r1, #2
    1342:	430b      	orrs	r3, r1
    1344:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1346:	2000      	movs	r0, #0
		break;
    1348:	e014      	b.n	1374 <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    134a:	4a0d      	ldr	r2, [pc, #52]	; (1380 <system_clock_source_enable+0x70>)
    134c:	8a93      	ldrh	r3, [r2, #20]
    134e:	2102      	movs	r1, #2
    1350:	430b      	orrs	r3, r1
    1352:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1354:	2000      	movs	r0, #0
		break;
    1356:	e00d      	b.n	1374 <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    1358:	4a08      	ldr	r2, [pc, #32]	; (137c <system_clock_source_enable+0x6c>)
    135a:	7f13      	ldrb	r3, [r2, #28]
    135c:	2102      	movs	r1, #2
    135e:	430b      	orrs	r3, r1
    1360:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    1362:	0010      	movs	r0, r2
    1364:	312a      	adds	r1, #42	; 0x2a
    1366:	2202      	movs	r2, #2
    1368:	5c43      	ldrb	r3, [r0, r1]
    136a:	4213      	tst	r3, r2
    136c:	d1fc      	bne.n	1368 <system_clock_source_enable+0x58>
	return STATUS_OK;
    136e:	2000      	movs	r0, #0
    1370:	e000      	b.n	1374 <system_clock_source_enable+0x64>
		return STATUS_OK;
    1372:	2000      	movs	r0, #0
}
    1374:	4770      	bx	lr
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	00004000 	.word	0x00004000
    137c:	40001000 	.word	0x40001000
    1380:	40001400 	.word	0x40001400

00001384 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    1384:	b5f0      	push	{r4, r5, r6, r7, lr}
    1386:	46c6      	mov	lr, r8
    1388:	b500      	push	{lr}
    138a:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    138c:	2203      	movs	r2, #3
    138e:	4b3f      	ldr	r3, [pc, #252]	; (148c <system_clock_init+0x108>)
    1390:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1392:	4a3f      	ldr	r2, [pc, #252]	; (1490 <system_clock_init+0x10c>)
    1394:	6853      	ldr	r3, [r2, #4]
    1396:	211e      	movs	r1, #30
    1398:	438b      	bics	r3, r1
    139a:	3918      	subs	r1, #24
    139c:	430b      	orrs	r3, r1
    139e:	6053      	str	r3, [r2, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    13a0:	a80a      	add	r0, sp, #40	; 0x28
    13a2:	2300      	movs	r3, #0
    13a4:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    13a6:	2280      	movs	r2, #128	; 0x80
    13a8:	0212      	lsls	r2, r2, #8
    13aa:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    13ac:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    13ae:	2201      	movs	r2, #1
    13b0:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    13b2:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    13b4:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    13b6:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    13b8:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    13ba:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    13bc:	3902      	subs	r1, #2
    13be:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    13c0:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    13c2:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    13c4:	4b33      	ldr	r3, [pc, #204]	; (1494 <system_clock_init+0x110>)
    13c6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    13c8:	2005      	movs	r0, #5
    13ca:	4b33      	ldr	r3, [pc, #204]	; (1498 <system_clock_init+0x114>)
    13cc:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    13ce:	4933      	ldr	r1, [pc, #204]	; (149c <system_clock_init+0x118>)
    13d0:	2201      	movs	r2, #1
    13d2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    13d4:	421a      	tst	r2, r3
    13d6:	d0fc      	beq.n	13d2 <system_clock_init+0x4e>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    13d8:	4b31      	ldr	r3, [pc, #196]	; (14a0 <system_clock_init+0x11c>)
    13da:	7d1a      	ldrb	r2, [r3, #20]
    13dc:	2180      	movs	r1, #128	; 0x80
    13de:	430a      	orrs	r2, r1
    13e0:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    13e2:	2202      	movs	r2, #2
    13e4:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    13e6:	001a      	movs	r2, r3
    13e8:	6993      	ldr	r3, [r2, #24]
    13ea:	2b00      	cmp	r3, #0
    13ec:	d1fc      	bne.n	13e8 <system_clock_init+0x64>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    13ee:	4b2d      	ldr	r3, [pc, #180]	; (14a4 <system_clock_init+0x120>)
    13f0:	4798      	blx	r3
	config->division_factor    = 1;
    13f2:	ad01      	add	r5, sp, #4
    13f4:	2601      	movs	r6, #1
    13f6:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    13f8:	2400      	movs	r4, #0
    13fa:	706c      	strb	r4, [r5, #1]
	config->output_enable      = false;
    13fc:	726c      	strb	r4, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    13fe:	2305      	movs	r3, #5
    1400:	702b      	strb	r3, [r5, #0]
    1402:	722e      	strb	r6, [r5, #8]
    1404:	0029      	movs	r1, r5
    1406:	2001      	movs	r0, #1
    1408:	4b27      	ldr	r3, [pc, #156]	; (14a8 <system_clock_init+0x124>)
    140a:	4698      	mov	r8, r3
    140c:	4798      	blx	r3
    140e:	2001      	movs	r0, #1
    1410:	4f26      	ldr	r7, [pc, #152]	; (14ac <system_clock_init+0x128>)
    1412:	47b8      	blx	r7
	config->division_factor    = 1;
    1414:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    1416:	706c      	strb	r4, [r5, #1]
	config->run_in_standby     = false;
    1418:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    141a:	726c      	strb	r4, [r5, #9]
    141c:	2307      	movs	r3, #7
    141e:	702b      	strb	r3, [r5, #0]
    1420:	0029      	movs	r1, r5
    1422:	2008      	movs	r0, #8
    1424:	47c0      	blx	r8
    1426:	2008      	movs	r0, #8
    1428:	47b8      	blx	r7
	config->lock_bypass         = false;
    142a:	a804      	add	r0, sp, #16
    142c:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    142e:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    1430:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    1432:	4b1f      	ldr	r3, [pc, #124]	; (14b0 <system_clock_init+0x12c>)
    1434:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    1436:	8206      	strh	r6, [r0, #16]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    1438:	7544      	strb	r4, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    143a:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    143c:	7484      	strb	r4, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    143e:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    1440:	2301      	movs	r3, #1
    1442:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    1444:	7504      	strb	r4, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    1446:	4b1b      	ldr	r3, [pc, #108]	; (14b4 <system_clock_init+0x130>)
    1448:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    144a:	4b1b      	ldr	r3, [pc, #108]	; (14b8 <system_clock_init+0x134>)
    144c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    144e:	2007      	movs	r0, #7
    1450:	4b11      	ldr	r3, [pc, #68]	; (1498 <system_clock_init+0x114>)
    1452:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    1454:	4812      	ldr	r0, [pc, #72]	; (14a0 <system_clock_init+0x11c>)
    1456:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    1458:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    145a:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    145c:	4013      	ands	r3, r2
    145e:	2b03      	cmp	r3, #3
    1460:	d1fb      	bne.n	145a <system_clock_init+0xd6>
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    1462:	3b02      	subs	r3, #2
    1464:	4a15      	ldr	r2, [pc, #84]	; (14bc <system_clock_init+0x138>)
    1466:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    1468:	a901      	add	r1, sp, #4
    146a:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    146c:	2200      	movs	r2, #0
    146e:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    1470:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1472:	3207      	adds	r2, #7
    1474:	700a      	strb	r2, [r1, #0]
    1476:	720b      	strb	r3, [r1, #8]
    1478:	2000      	movs	r0, #0
    147a:	4b0b      	ldr	r3, [pc, #44]	; (14a8 <system_clock_init+0x124>)
    147c:	4798      	blx	r3
    147e:	2000      	movs	r0, #0
    1480:	4b0a      	ldr	r3, [pc, #40]	; (14ac <system_clock_init+0x128>)
    1482:	4798      	blx	r3
#endif

}
    1484:	b00e      	add	sp, #56	; 0x38
    1486:	bc04      	pop	{r2}
    1488:	4690      	mov	r8, r2
    148a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    148c:	40001800 	.word	0x40001800
    1490:	41004000 	.word	0x41004000
    1494:	00001195 	.word	0x00001195
    1498:	00001311 	.word	0x00001311
    149c:	40001400 	.word	0x40001400
    14a0:	40001000 	.word	0x40001000
    14a4:	000014c1 	.word	0x000014c1
    14a8:	000014e5 	.word	0x000014e5
    14ac:	00001591 	.word	0x00001591
    14b0:	02dc6c00 	.word	0x02dc6c00
    14b4:	00007fff 	.word	0x00007fff
    14b8:	00001249 	.word	0x00001249
    14bc:	40000800 	.word	0x40000800

000014c0 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    14c0:	4a06      	ldr	r2, [pc, #24]	; (14dc <system_gclk_init+0x1c>)
    14c2:	6953      	ldr	r3, [r2, #20]
    14c4:	2180      	movs	r1, #128	; 0x80
    14c6:	430b      	orrs	r3, r1
    14c8:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    14ca:	2201      	movs	r2, #1
    14cc:	4b04      	ldr	r3, [pc, #16]	; (14e0 <system_gclk_init+0x20>)
    14ce:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    14d0:	0019      	movs	r1, r3
    14d2:	780b      	ldrb	r3, [r1, #0]
    14d4:	4213      	tst	r3, r2
    14d6:	d1fc      	bne.n	14d2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    14d8:	4770      	bx	lr
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	40000800 	.word	0x40000800
    14e0:	40001c00 	.word	0x40001c00

000014e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    14e4:	b570      	push	{r4, r5, r6, lr}
    14e6:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    14e8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    14ea:	784b      	ldrb	r3, [r1, #1]
    14ec:	2b00      	cmp	r3, #0
    14ee:	d002      	beq.n	14f6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    14f0:	2380      	movs	r3, #128	; 0x80
    14f2:	00db      	lsls	r3, r3, #3
    14f4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    14f6:	7a4b      	ldrb	r3, [r1, #9]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d002      	beq.n	1502 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    14fc:	2380      	movs	r3, #128	; 0x80
    14fe:	011b      	lsls	r3, r3, #4
    1500:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1502:	6848      	ldr	r0, [r1, #4]
    1504:	2801      	cmp	r0, #1
    1506:	d90f      	bls.n	1528 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1508:	1e43      	subs	r3, r0, #1
    150a:	4218      	tst	r0, r3
    150c:	d131      	bne.n	1572 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    150e:	2802      	cmp	r0, #2
    1510:	d92d      	bls.n	156e <system_gclk_gen_set_config+0x8a>
    1512:	2302      	movs	r3, #2
    1514:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1516:	3201      	adds	r2, #1
						mask <<= 1) {
    1518:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    151a:	4298      	cmp	r0, r3
    151c:	d8fb      	bhi.n	1516 <system_gclk_gen_set_config+0x32>
    151e:	2380      	movs	r3, #128	; 0x80
    1520:	015b      	lsls	r3, r3, #5
    1522:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1524:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1526:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1528:	7a0b      	ldrb	r3, [r1, #8]
    152a:	2b00      	cmp	r3, #0
    152c:	d002      	beq.n	1534 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    152e:	2380      	movs	r3, #128	; 0x80
    1530:	019b      	lsls	r3, r3, #6
    1532:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1534:	2604      	movs	r6, #4
    1536:	40a6      	lsls	r6, r4
    1538:	4911      	ldr	r1, [pc, #68]	; (1580 <system_gclk_gen_set_config+0x9c>)
    153a:	4a12      	ldr	r2, [pc, #72]	; (1584 <system_gclk_gen_set_config+0xa0>)
    153c:	684b      	ldr	r3, [r1, #4]
    153e:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    1540:	421e      	tst	r6, r3
    1542:	d1fb      	bne.n	153c <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1544:	4b10      	ldr	r3, [pc, #64]	; (1588 <system_gclk_gen_set_config+0xa4>)
    1546:	4798      	blx	r3
    1548:	00a4      	lsls	r4, r4, #2
    154a:	4b0d      	ldr	r3, [pc, #52]	; (1580 <system_gclk_gen_set_config+0x9c>)
    154c:	469c      	mov	ip, r3
    154e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1550:	6a22      	ldr	r2, [r4, #32]
    1552:	2380      	movs	r3, #128	; 0x80
    1554:	005b      	lsls	r3, r3, #1
    1556:	401a      	ands	r2, r3
    1558:	432a      	orrs	r2, r5
    155a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    155c:	4661      	mov	r1, ip
    155e:	4a09      	ldr	r2, [pc, #36]	; (1584 <system_gclk_gen_set_config+0xa0>)
    1560:	684b      	ldr	r3, [r1, #4]
    1562:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    1564:	421e      	tst	r6, r3
    1566:	d1fb      	bne.n	1560 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1568:	4b08      	ldr	r3, [pc, #32]	; (158c <system_gclk_gen_set_config+0xa8>)
    156a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    156c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    156e:	2200      	movs	r2, #0
    1570:	e7d5      	b.n	151e <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    1572:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1574:	2380      	movs	r3, #128	; 0x80
    1576:	009b      	lsls	r3, r3, #2
    1578:	4318      	orrs	r0, r3
    157a:	4305      	orrs	r5, r0
    157c:	e7d4      	b.n	1528 <system_gclk_gen_set_config+0x44>
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	40001c00 	.word	0x40001c00
    1584:	000007fc 	.word	0x000007fc
    1588:	0000011d 	.word	0x0000011d
    158c:	0000015d 	.word	0x0000015d

00001590 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1590:	b510      	push	{r4, lr}
    1592:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1594:	2204      	movs	r2, #4
    1596:	4082      	lsls	r2, r0
    1598:	4809      	ldr	r0, [pc, #36]	; (15c0 <system_gclk_gen_enable+0x30>)
    159a:	490a      	ldr	r1, [pc, #40]	; (15c4 <system_gclk_gen_enable+0x34>)
    159c:	6843      	ldr	r3, [r0, #4]
    159e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    15a0:	421a      	tst	r2, r3
    15a2:	d1fb      	bne.n	159c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    15a4:	4b08      	ldr	r3, [pc, #32]	; (15c8 <system_gclk_gen_enable+0x38>)
    15a6:	4798      	blx	r3
    15a8:	00a4      	lsls	r4, r4, #2
    15aa:	4b05      	ldr	r3, [pc, #20]	; (15c0 <system_gclk_gen_enable+0x30>)
    15ac:	469c      	mov	ip, r3
    15ae:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    15b0:	6a22      	ldr	r2, [r4, #32]
    15b2:	2380      	movs	r3, #128	; 0x80
    15b4:	005b      	lsls	r3, r3, #1
    15b6:	4313      	orrs	r3, r2
    15b8:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    15ba:	4b04      	ldr	r3, [pc, #16]	; (15cc <system_gclk_gen_enable+0x3c>)
    15bc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15be:	bd10      	pop	{r4, pc}
    15c0:	40001c00 	.word	0x40001c00
    15c4:	000007fc 	.word	0x000007fc
    15c8:	0000011d 	.word	0x0000011d
    15cc:	0000015d 	.word	0x0000015d

000015d0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    15d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15d2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    15d4:	2204      	movs	r2, #4
    15d6:	4082      	lsls	r2, r0
    15d8:	4812      	ldr	r0, [pc, #72]	; (1624 <system_gclk_gen_get_hz+0x54>)
    15da:	4913      	ldr	r1, [pc, #76]	; (1628 <system_gclk_gen_get_hz+0x58>)
    15dc:	6843      	ldr	r3, [r0, #4]
    15de:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    15e0:	421a      	tst	r2, r3
    15e2:	d1fb      	bne.n	15dc <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    15e4:	4b11      	ldr	r3, [pc, #68]	; (162c <system_gclk_gen_get_hz+0x5c>)
    15e6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    15e8:	4f0e      	ldr	r7, [pc, #56]	; (1624 <system_gclk_gen_get_hz+0x54>)
    15ea:	3408      	adds	r4, #8
    15ec:	00a4      	lsls	r4, r4, #2
    15ee:	59e0      	ldr	r0, [r4, r7]
    15f0:	0740      	lsls	r0, r0, #29
    15f2:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    15f4:	4b0e      	ldr	r3, [pc, #56]	; (1630 <system_gclk_gen_get_hz+0x60>)
    15f6:	4798      	blx	r3
    15f8:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    15fa:	59e5      	ldr	r5, [r4, r7]
    15fc:	04ed      	lsls	r5, r5, #19
    15fe:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1600:	59e4      	ldr	r4, [r4, r7]
    1602:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1604:	4b0b      	ldr	r3, [pc, #44]	; (1634 <system_gclk_gen_get_hz+0x64>)
    1606:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1608:	2d00      	cmp	r5, #0
    160a:	d107      	bne.n	161c <system_gclk_gen_get_hz+0x4c>
    160c:	2c01      	cmp	r4, #1
    160e:	d907      	bls.n	1620 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1610:	0021      	movs	r1, r4
    1612:	0030      	movs	r0, r6
    1614:	4b08      	ldr	r3, [pc, #32]	; (1638 <system_gclk_gen_get_hz+0x68>)
    1616:	4798      	blx	r3
    1618:	0006      	movs	r6, r0
    161a:	e001      	b.n	1620 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    161c:	3401      	adds	r4, #1
    161e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1620:	0030      	movs	r0, r6
    1622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1624:	40001c00 	.word	0x40001c00
    1628:	000007fc 	.word	0x000007fc
    162c:	0000011d 	.word	0x0000011d
    1630:	00001139 	.word	0x00001139
    1634:	0000015d 	.word	0x0000015d
    1638:	0000206d 	.word	0x0000206d

0000163c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    163c:	b510      	push	{r4, lr}
    163e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1640:	4b09      	ldr	r3, [pc, #36]	; (1668 <system_gclk_chan_enable+0x2c>)
    1642:	4798      	blx	r3
    1644:	00a0      	lsls	r0, r4, #2
    1646:	4b09      	ldr	r3, [pc, #36]	; (166c <system_gclk_chan_enable+0x30>)
    1648:	469c      	mov	ip, r3
    164a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    164c:	2280      	movs	r2, #128	; 0x80
    164e:	5883      	ldr	r3, [r0, r2]
    1650:	2140      	movs	r1, #64	; 0x40
    1652:	430b      	orrs	r3, r1
    1654:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1656:	3140      	adds	r1, #64	; 0x40
    1658:	3a40      	subs	r2, #64	; 0x40
    165a:	5843      	ldr	r3, [r0, r1]
    165c:	421a      	tst	r2, r3
    165e:	d0fc      	beq.n	165a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    1660:	4b03      	ldr	r3, [pc, #12]	; (1670 <system_gclk_chan_enable+0x34>)
    1662:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1664:	bd10      	pop	{r4, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	0000011d 	.word	0x0000011d
    166c:	40001c00 	.word	0x40001c00
    1670:	0000015d 	.word	0x0000015d

00001674 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1674:	b510      	push	{r4, lr}
    1676:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1678:	4b09      	ldr	r3, [pc, #36]	; (16a0 <system_gclk_chan_disable+0x2c>)
    167a:	4798      	blx	r3
    167c:	00a0      	lsls	r0, r4, #2
    167e:	4b09      	ldr	r3, [pc, #36]	; (16a4 <system_gclk_chan_disable+0x30>)
    1680:	469c      	mov	ip, r3
    1682:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1684:	2280      	movs	r2, #128	; 0x80
    1686:	5883      	ldr	r3, [r0, r2]
    1688:	2140      	movs	r1, #64	; 0x40
    168a:	438b      	bics	r3, r1
    168c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    168e:	3140      	adds	r1, #64	; 0x40
    1690:	3a40      	subs	r2, #64	; 0x40
    1692:	5843      	ldr	r3, [r0, r1]
    1694:	421a      	tst	r2, r3
    1696:	d1fc      	bne.n	1692 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    1698:	4b03      	ldr	r3, [pc, #12]	; (16a8 <system_gclk_chan_disable+0x34>)
    169a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    169c:	bd10      	pop	{r4, pc}
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	0000011d 	.word	0x0000011d
    16a4:	40001c00 	.word	0x40001c00
    16a8:	0000015d 	.word	0x0000015d

000016ac <system_gclk_chan_set_config>:
{
    16ac:	b570      	push	{r4, r5, r6, lr}
    16ae:	0004      	movs	r4, r0
    16b0:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    16b2:	4b05      	ldr	r3, [pc, #20]	; (16c8 <system_gclk_chan_set_config+0x1c>)
    16b4:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    16b6:	782a      	ldrb	r2, [r5, #0]
    16b8:	230f      	movs	r3, #15
    16ba:	4013      	ands	r3, r2
    16bc:	3420      	adds	r4, #32
    16be:	00a4      	lsls	r4, r4, #2
    16c0:	4a02      	ldr	r2, [pc, #8]	; (16cc <system_gclk_chan_set_config+0x20>)
    16c2:	50a3      	str	r3, [r4, r2]
}
    16c4:	bd70      	pop	{r4, r5, r6, pc}
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	00001675 	.word	0x00001675
    16cc:	40001c00 	.word	0x40001c00

000016d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    16d0:	b510      	push	{r4, lr}
    16d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16d4:	4b06      	ldr	r3, [pc, #24]	; (16f0 <system_gclk_chan_get_hz+0x20>)
    16d6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    16d8:	3420      	adds	r4, #32
    16da:	00a4      	lsls	r4, r4, #2
    16dc:	4b05      	ldr	r3, [pc, #20]	; (16f4 <system_gclk_chan_get_hz+0x24>)
    16de:	58e4      	ldr	r4, [r4, r3]
    16e0:	0724      	lsls	r4, r4, #28
    16e2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    16e4:	4b04      	ldr	r3, [pc, #16]	; (16f8 <system_gclk_chan_get_hz+0x28>)
    16e6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    16e8:	0020      	movs	r0, r4
    16ea:	4b04      	ldr	r3, [pc, #16]	; (16fc <system_gclk_chan_get_hz+0x2c>)
    16ec:	4798      	blx	r3
}
    16ee:	bd10      	pop	{r4, pc}
    16f0:	0000011d 	.word	0x0000011d
    16f4:	40001c00 	.word	0x40001c00
    16f8:	0000015d 	.word	0x0000015d
    16fc:	000015d1 	.word	0x000015d1

00001700 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1700:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1702:	78d3      	ldrb	r3, [r2, #3]
    1704:	2b00      	cmp	r3, #0
    1706:	d135      	bne.n	1774 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1708:	7813      	ldrb	r3, [r2, #0]
    170a:	2b80      	cmp	r3, #128	; 0x80
    170c:	d029      	beq.n	1762 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    170e:	061b      	lsls	r3, r3, #24
    1710:	2480      	movs	r4, #128	; 0x80
    1712:	0264      	lsls	r4, r4, #9
    1714:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1716:	7854      	ldrb	r4, [r2, #1]
    1718:	2502      	movs	r5, #2
    171a:	43ac      	bics	r4, r5
    171c:	d106      	bne.n	172c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    171e:	7894      	ldrb	r4, [r2, #2]
    1720:	2c00      	cmp	r4, #0
    1722:	d120      	bne.n	1766 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1724:	2480      	movs	r4, #128	; 0x80
    1726:	02a4      	lsls	r4, r4, #10
    1728:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    172a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    172c:	7854      	ldrb	r4, [r2, #1]
    172e:	3c01      	subs	r4, #1
    1730:	2c01      	cmp	r4, #1
    1732:	d91c      	bls.n	176e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1734:	040d      	lsls	r5, r1, #16
    1736:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1738:	24a0      	movs	r4, #160	; 0xa0
    173a:	05e4      	lsls	r4, r4, #23
    173c:	432c      	orrs	r4, r5
    173e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1740:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1742:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1744:	24d0      	movs	r4, #208	; 0xd0
    1746:	0624      	lsls	r4, r4, #24
    1748:	432c      	orrs	r4, r5
    174a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    174c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    174e:	78d4      	ldrb	r4, [r2, #3]
    1750:	2c00      	cmp	r4, #0
    1752:	d122      	bne.n	179a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1754:	035b      	lsls	r3, r3, #13
    1756:	d51c      	bpl.n	1792 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1758:	7893      	ldrb	r3, [r2, #2]
    175a:	2b01      	cmp	r3, #1
    175c:	d01e      	beq.n	179c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    175e:	6141      	str	r1, [r0, #20]
    1760:	e017      	b.n	1792 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1762:	2300      	movs	r3, #0
    1764:	e7d7      	b.n	1716 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1766:	24c0      	movs	r4, #192	; 0xc0
    1768:	02e4      	lsls	r4, r4, #11
    176a:	4323      	orrs	r3, r4
    176c:	e7dd      	b.n	172a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    176e:	4c0d      	ldr	r4, [pc, #52]	; (17a4 <_system_pinmux_config+0xa4>)
    1770:	4023      	ands	r3, r4
    1772:	e7df      	b.n	1734 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1774:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1776:	040c      	lsls	r4, r1, #16
    1778:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    177a:	23a0      	movs	r3, #160	; 0xa0
    177c:	05db      	lsls	r3, r3, #23
    177e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1780:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1782:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1784:	23d0      	movs	r3, #208	; 0xd0
    1786:	061b      	lsls	r3, r3, #24
    1788:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    178a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    178c:	78d3      	ldrb	r3, [r2, #3]
    178e:	2b00      	cmp	r3, #0
    1790:	d103      	bne.n	179a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1792:	7853      	ldrb	r3, [r2, #1]
    1794:	3b01      	subs	r3, #1
    1796:	2b01      	cmp	r3, #1
    1798:	d902      	bls.n	17a0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    179a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    179c:	6181      	str	r1, [r0, #24]
    179e:	e7f8      	b.n	1792 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    17a0:	6081      	str	r1, [r0, #8]
}
    17a2:	e7fa      	b.n	179a <_system_pinmux_config+0x9a>
    17a4:	fffbffff 	.word	0xfffbffff

000017a8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    17a8:	b510      	push	{r4, lr}
    17aa:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    17ac:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    17ae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17b0:	2900      	cmp	r1, #0
    17b2:	d105      	bne.n	17c0 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    17b4:	0943      	lsrs	r3, r0, #5
    17b6:	01db      	lsls	r3, r3, #7
    17b8:	2182      	movs	r1, #130	; 0x82
    17ba:	05c9      	lsls	r1, r1, #23
    17bc:	468c      	mov	ip, r1
    17be:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    17c0:	241f      	movs	r4, #31
    17c2:	4020      	ands	r0, r4
    17c4:	2101      	movs	r1, #1
    17c6:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    17c8:	0018      	movs	r0, r3
    17ca:	4b01      	ldr	r3, [pc, #4]	; (17d0 <system_pinmux_pin_set_config+0x28>)
    17cc:	4798      	blx	r3
}
    17ce:	bd10      	pop	{r4, pc}
    17d0:	00001701 	.word	0x00001701

000017d4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    17d4:	4770      	bx	lr
	...

000017d8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    17d8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    17da:	4b05      	ldr	r3, [pc, #20]	; (17f0 <system_init+0x18>)
    17dc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    17de:	4b05      	ldr	r3, [pc, #20]	; (17f4 <system_init+0x1c>)
    17e0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    17e2:	4b05      	ldr	r3, [pc, #20]	; (17f8 <system_init+0x20>)
    17e4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    17e6:	4b05      	ldr	r3, [pc, #20]	; (17fc <system_init+0x24>)
    17e8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    17ea:	4b05      	ldr	r3, [pc, #20]	; (1800 <system_init+0x28>)
    17ec:	4798      	blx	r3
}
    17ee:	bd10      	pop	{r4, pc}
    17f0:	00001385 	.word	0x00001385
    17f4:	0000018d 	.word	0x0000018d
    17f8:	000017d5 	.word	0x000017d5
    17fc:	000017d5 	.word	0x000017d5
    1800:	000017d5 	.word	0x000017d5

00001804 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1804:	e7fe      	b.n	1804 <Dummy_Handler>
	...

00001808 <Reset_Handler>:
{
    1808:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    180a:	4a17      	ldr	r2, [pc, #92]	; (1868 <Reset_Handler+0x60>)
    180c:	4b17      	ldr	r3, [pc, #92]	; (186c <Reset_Handler+0x64>)
    180e:	429a      	cmp	r2, r3
    1810:	d011      	beq.n	1836 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1812:	001a      	movs	r2, r3
    1814:	4b16      	ldr	r3, [pc, #88]	; (1870 <Reset_Handler+0x68>)
    1816:	429a      	cmp	r2, r3
    1818:	d20d      	bcs.n	1836 <Reset_Handler+0x2e>
    181a:	4a16      	ldr	r2, [pc, #88]	; (1874 <Reset_Handler+0x6c>)
    181c:	3303      	adds	r3, #3
    181e:	1a9b      	subs	r3, r3, r2
    1820:	089b      	lsrs	r3, r3, #2
    1822:	3301      	adds	r3, #1
    1824:	009b      	lsls	r3, r3, #2
    1826:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1828:	4810      	ldr	r0, [pc, #64]	; (186c <Reset_Handler+0x64>)
    182a:	490f      	ldr	r1, [pc, #60]	; (1868 <Reset_Handler+0x60>)
    182c:	588c      	ldr	r4, [r1, r2]
    182e:	5084      	str	r4, [r0, r2]
    1830:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1832:	429a      	cmp	r2, r3
    1834:	d1fa      	bne.n	182c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1836:	4a10      	ldr	r2, [pc, #64]	; (1878 <Reset_Handler+0x70>)
    1838:	4b10      	ldr	r3, [pc, #64]	; (187c <Reset_Handler+0x74>)
    183a:	429a      	cmp	r2, r3
    183c:	d20a      	bcs.n	1854 <Reset_Handler+0x4c>
    183e:	43d3      	mvns	r3, r2
    1840:	490e      	ldr	r1, [pc, #56]	; (187c <Reset_Handler+0x74>)
    1842:	185b      	adds	r3, r3, r1
    1844:	2103      	movs	r1, #3
    1846:	438b      	bics	r3, r1
    1848:	3304      	adds	r3, #4
    184a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    184c:	2100      	movs	r1, #0
    184e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1850:	4293      	cmp	r3, r2
    1852:	d1fc      	bne.n	184e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1854:	4a0a      	ldr	r2, [pc, #40]	; (1880 <Reset_Handler+0x78>)
    1856:	21ff      	movs	r1, #255	; 0xff
    1858:	4b0a      	ldr	r3, [pc, #40]	; (1884 <Reset_Handler+0x7c>)
    185a:	438b      	bics	r3, r1
    185c:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    185e:	4b0a      	ldr	r3, [pc, #40]	; (1888 <Reset_Handler+0x80>)
    1860:	4798      	blx	r3
        main();
    1862:	4b0a      	ldr	r3, [pc, #40]	; (188c <Reset_Handler+0x84>)
    1864:	4798      	blx	r3
    1866:	e7fe      	b.n	1866 <Reset_Handler+0x5e>
    1868:	000048d8 	.word	0x000048d8
    186c:	20000000 	.word	0x20000000
    1870:	200001d4 	.word	0x200001d4
    1874:	20000004 	.word	0x20000004
    1878:	200001d4 	.word	0x200001d4
    187c:	20000c58 	.word	0x20000c58
    1880:	e000ed00 	.word	0xe000ed00
    1884:	00000000 	.word	0x00000000
    1888:	000021d9 	.word	0x000021d9
    188c:	00001cd9 	.word	0x00001cd9

00001890 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1890:	b5f0      	push	{r4, r5, r6, r7, lr}
    1892:	46c6      	mov	lr, r8
    1894:	b500      	push	{lr}
    1896:	000c      	movs	r4, r1
    1898:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    189a:	2800      	cmp	r0, #0
    189c:	d10f      	bne.n	18be <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    189e:	2a00      	cmp	r2, #0
    18a0:	dd11      	ble.n	18c6 <_read+0x36>
    18a2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    18a4:	4e09      	ldr	r6, [pc, #36]	; (18cc <_read+0x3c>)
    18a6:	4d0a      	ldr	r5, [pc, #40]	; (18d0 <_read+0x40>)
    18a8:	6830      	ldr	r0, [r6, #0]
    18aa:	0021      	movs	r1, r4
    18ac:	682b      	ldr	r3, [r5, #0]
    18ae:	4798      	blx	r3
		ptr++;
    18b0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    18b2:	42bc      	cmp	r4, r7
    18b4:	d1f8      	bne.n	18a8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    18b6:	4640      	mov	r0, r8
    18b8:	bc04      	pop	{r2}
    18ba:	4690      	mov	r8, r2
    18bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    18be:	2301      	movs	r3, #1
    18c0:	425b      	negs	r3, r3
    18c2:	4698      	mov	r8, r3
    18c4:	e7f7      	b.n	18b6 <_read+0x26>
	for (; len > 0; --len) {
    18c6:	4680      	mov	r8, r0
    18c8:	e7f5      	b.n	18b6 <_read+0x26>
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	20000c50 	.word	0x20000c50
    18d0:	20000c48 	.word	0x20000c48

000018d4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    18d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18d6:	46c6      	mov	lr, r8
    18d8:	b500      	push	{lr}
    18da:	000e      	movs	r6, r1
    18dc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    18de:	3801      	subs	r0, #1
    18e0:	2802      	cmp	r0, #2
    18e2:	d810      	bhi.n	1906 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    18e4:	2a00      	cmp	r2, #0
    18e6:	d011      	beq.n	190c <_write+0x38>
    18e8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    18ea:	4b0c      	ldr	r3, [pc, #48]	; (191c <_write+0x48>)
    18ec:	4698      	mov	r8, r3
    18ee:	4f0c      	ldr	r7, [pc, #48]	; (1920 <_write+0x4c>)
    18f0:	4643      	mov	r3, r8
    18f2:	6818      	ldr	r0, [r3, #0]
    18f4:	5d31      	ldrb	r1, [r6, r4]
    18f6:	683b      	ldr	r3, [r7, #0]
    18f8:	4798      	blx	r3
    18fa:	2800      	cmp	r0, #0
    18fc:	db08      	blt.n	1910 <_write+0x3c>
			return -1;
		}
		++nChars;
    18fe:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1900:	42a5      	cmp	r5, r4
    1902:	d1f5      	bne.n	18f0 <_write+0x1c>
    1904:	e006      	b.n	1914 <_write+0x40>
		return -1;
    1906:	2401      	movs	r4, #1
    1908:	4264      	negs	r4, r4
    190a:	e003      	b.n	1914 <_write+0x40>
	for (; len != 0; --len) {
    190c:	0014      	movs	r4, r2
    190e:	e001      	b.n	1914 <_write+0x40>
			return -1;
    1910:	2401      	movs	r4, #1
    1912:	4264      	negs	r4, r4
	}
	return nChars;
}
    1914:	0020      	movs	r0, r4
    1916:	bc04      	pop	{r2}
    1918:	4690      	mov	r8, r2
    191a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    191c:	20000c50 	.word	0x20000c50
    1920:	20000c4c 	.word	0x20000c4c

00001924 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1924:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1926:	4a06      	ldr	r2, [pc, #24]	; (1940 <_sbrk+0x1c>)
    1928:	6812      	ldr	r2, [r2, #0]
    192a:	2a00      	cmp	r2, #0
    192c:	d004      	beq.n	1938 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    192e:	4a04      	ldr	r2, [pc, #16]	; (1940 <_sbrk+0x1c>)
    1930:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1932:	18c3      	adds	r3, r0, r3
    1934:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1936:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1938:	4902      	ldr	r1, [pc, #8]	; (1944 <_sbrk+0x20>)
    193a:	4a01      	ldr	r2, [pc, #4]	; (1940 <_sbrk+0x1c>)
    193c:	6011      	str	r1, [r2, #0]
    193e:	e7f6      	b.n	192e <_sbrk+0xa>
    1940:	20000ba0 	.word	0x20000ba0
    1944:	20002c58 	.word	0x20002c58

00001948 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1948:	2001      	movs	r0, #1
    194a:	4240      	negs	r0, r0
    194c:	4770      	bx	lr

0000194e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    194e:	2380      	movs	r3, #128	; 0x80
    1950:	019b      	lsls	r3, r3, #6
    1952:	604b      	str	r3, [r1, #4]

	return 0;
}
    1954:	2000      	movs	r0, #0
    1956:	4770      	bx	lr

00001958 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1958:	2001      	movs	r0, #1
    195a:	4770      	bx	lr

0000195c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    195c:	2000      	movs	r0, #0
    195e:	4770      	bx	lr

00001960 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1960:	b570      	push	{r4, r5, r6, lr}
    1962:	b082      	sub	sp, #8
    1964:	0005      	movs	r5, r0
    1966:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1968:	2200      	movs	r2, #0
    196a:	466b      	mov	r3, sp
    196c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    196e:	4c06      	ldr	r4, [pc, #24]	; (1988 <usart_serial_getchar+0x28>)
    1970:	466b      	mov	r3, sp
    1972:	1d99      	adds	r1, r3, #6
    1974:	0028      	movs	r0, r5
    1976:	47a0      	blx	r4
    1978:	2800      	cmp	r0, #0
    197a:	d1f9      	bne.n	1970 <usart_serial_getchar+0x10>

	*c = temp;
    197c:	466b      	mov	r3, sp
    197e:	3306      	adds	r3, #6
    1980:	881b      	ldrh	r3, [r3, #0]
    1982:	7033      	strb	r3, [r6, #0]
}
    1984:	b002      	add	sp, #8
    1986:	bd70      	pop	{r4, r5, r6, pc}
    1988:	00000f33 	.word	0x00000f33

0000198c <usart_serial_putchar>:
{
    198c:	b570      	push	{r4, r5, r6, lr}
    198e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1990:	b28c      	uxth	r4, r1
    1992:	4e03      	ldr	r6, [pc, #12]	; (19a0 <usart_serial_putchar+0x14>)
    1994:	0021      	movs	r1, r4
    1996:	0028      	movs	r0, r5
    1998:	47b0      	blx	r6
    199a:	2800      	cmp	r0, #0
    199c:	d1fa      	bne.n	1994 <usart_serial_putchar+0x8>
}
    199e:	bd70      	pop	{r4, r5, r6, pc}
    19a0:	00000f0d 	.word	0x00000f0d

000019a4 <can_send_standard_message>:
//! [can_receive_filter_setup]

//! [can_transfer_message_setup]
static void can_send_standard_message(uint32_t id_value, uint8_t *data,
		uint32_t data_length)
{
    19a4:	b510      	push	{r4, lr}
    19a6:	b084      	sub	sp, #16
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void can_get_tx_buffer_element_defaults(
		struct can_tx_element *tx_element)
{
	tx_element->T0.reg = 0;
    19a8:	2300      	movs	r3, #0
    19aa:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    19ac:	2388      	movs	r3, #136	; 0x88
    19ae:	041b      	lsls	r3, r3, #16
    19b0:	9301      	str	r3, [sp, #4]
	uint32_t i;
	struct can_tx_element tx_element;

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
    19b2:	9b00      	ldr	r3, [sp, #0]
    19b4:	0480      	lsls	r0, r0, #18
    19b6:	4c12      	ldr	r4, [pc, #72]	; (1a00 <can_send_standard_message+0x5c>)
    19b8:	4020      	ands	r0, r4
    19ba:	4318      	orrs	r0, r3
    19bc:	9000      	str	r0, [sp, #0]
	tx_element.T1.bit.DLC = data_length;
    19be:	9b01      	ldr	r3, [sp, #4]
    19c0:	200f      	movs	r0, #15
    19c2:	4010      	ands	r0, r2
    19c4:	0400      	lsls	r0, r0, #16
    19c6:	4c0f      	ldr	r4, [pc, #60]	; (1a04 <can_send_standard_message+0x60>)
    19c8:	4023      	ands	r3, r4
    19ca:	4303      	orrs	r3, r0
    19cc:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
    19ce:	2a00      	cmp	r2, #0
    19d0:	d007      	beq.n	19e2 <can_send_standard_message+0x3e>
    19d2:	2300      	movs	r3, #0
		tx_element.data[i] = *data;
    19d4:	0018      	movs	r0, r3
    19d6:	4468      	add	r0, sp
    19d8:	5ccc      	ldrb	r4, [r1, r3]
    19da:	7204      	strb	r4, [r0, #8]
	for (i = 0; i < data_length; i++) {
    19dc:	3301      	adds	r3, #1
    19de:	429a      	cmp	r2, r3
    19e0:	d1f8      	bne.n	19d4 <can_send_standard_message+0x30>
		data++;
	}

	can_set_tx_buffer_element(&can_instance, &tx_element,
    19e2:	4c09      	ldr	r4, [pc, #36]	; (1a08 <can_send_standard_message+0x64>)
    19e4:	2200      	movs	r2, #0
    19e6:	4669      	mov	r1, sp
    19e8:	0020      	movs	r0, r4
    19ea:	4b08      	ldr	r3, [pc, #32]	; (1a0c <can_send_standard_message+0x68>)
    19ec:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    19ee:	6823      	ldr	r3, [r4, #0]
    19f0:	699a      	ldr	r2, [r3, #24]
    19f2:	0792      	lsls	r2, r2, #30
    19f4:	d402      	bmi.n	19fc <can_send_standard_message+0x58>
	module_inst->hw->TXBAR.reg = trig_mask;
    19f6:	2101      	movs	r1, #1
    19f8:	22d0      	movs	r2, #208	; 0xd0
    19fa:	5099      	str	r1, [r3, r2]
			CAN_TX_BUFFER_INDEX);
	can_tx_transfer_request(&can_instance, 1 << CAN_TX_BUFFER_INDEX);
}
    19fc:	b004      	add	sp, #16
    19fe:	bd10      	pop	{r4, pc}
    1a00:	1ffc0000 	.word	0x1ffc0000
    1a04:	fff0ffff 	.word	0xfff0ffff
    1a08:	20000ba4 	.word	0x20000ba4
    1a0c:	00000681 	.word	0x00000681

00001a10 <can_send_extended_message>:

static void can_send_extended_message(uint32_t id_value, uint8_t *data,
		uint32_t data_length)
{
    1a10:	b510      	push	{r4, lr}
    1a12:	b084      	sub	sp, #16
	tx_element->T0.reg = 0;
    1a14:	2300      	movs	r3, #0
    1a16:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    1a18:	2388      	movs	r3, #136	; 0x88
    1a1a:	041b      	lsls	r3, r3, #16
    1a1c:	9301      	str	r3, [sp, #4]
	uint32_t i;
	struct can_tx_element tx_element;

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_EXTENDED_ID(id_value) |
    1a1e:	9c00      	ldr	r4, [sp, #0]
    1a20:	2380      	movs	r3, #128	; 0x80
    1a22:	05db      	lsls	r3, r3, #23
    1a24:	4323      	orrs	r3, r4
    1a26:	00c0      	lsls	r0, r0, #3
    1a28:	08c0      	lsrs	r0, r0, #3
    1a2a:	4318      	orrs	r0, r3
    1a2c:	9000      	str	r0, [sp, #0]
			CAN_TX_ELEMENT_T0_XTD;
	tx_element.T1.bit.DLC = data_length;
    1a2e:	9b01      	ldr	r3, [sp, #4]
    1a30:	200f      	movs	r0, #15
    1a32:	4010      	ands	r0, r2
    1a34:	0400      	lsls	r0, r0, #16
    1a36:	4c0e      	ldr	r4, [pc, #56]	; (1a70 <can_send_extended_message+0x60>)
    1a38:	4023      	ands	r3, r4
    1a3a:	4303      	orrs	r3, r0
    1a3c:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
    1a3e:	2a00      	cmp	r2, #0
    1a40:	d007      	beq.n	1a52 <can_send_extended_message+0x42>
    1a42:	2300      	movs	r3, #0
		tx_element.data[i] = *data;
    1a44:	0018      	movs	r0, r3
    1a46:	4468      	add	r0, sp
    1a48:	5ccc      	ldrb	r4, [r1, r3]
    1a4a:	7204      	strb	r4, [r0, #8]
	for (i = 0; i < data_length; i++) {
    1a4c:	3301      	adds	r3, #1
    1a4e:	429a      	cmp	r2, r3
    1a50:	d1f8      	bne.n	1a44 <can_send_extended_message+0x34>
		data++;
	}

	can_set_tx_buffer_element(&can_instance, &tx_element,
    1a52:	4c08      	ldr	r4, [pc, #32]	; (1a74 <can_send_extended_message+0x64>)
    1a54:	2200      	movs	r2, #0
    1a56:	4669      	mov	r1, sp
    1a58:	0020      	movs	r0, r4
    1a5a:	4b07      	ldr	r3, [pc, #28]	; (1a78 <can_send_extended_message+0x68>)
    1a5c:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    1a5e:	6823      	ldr	r3, [r4, #0]
    1a60:	699a      	ldr	r2, [r3, #24]
    1a62:	0792      	lsls	r2, r2, #30
    1a64:	d402      	bmi.n	1a6c <can_send_extended_message+0x5c>
	module_inst->hw->TXBAR.reg = trig_mask;
    1a66:	2101      	movs	r1, #1
    1a68:	22d0      	movs	r2, #208	; 0xd0
    1a6a:	5099      	str	r1, [r3, r2]
			CAN_TX_BUFFER_INDEX);
	can_tx_transfer_request(&can_instance, 1 << CAN_TX_BUFFER_INDEX);
}
    1a6c:	b004      	add	sp, #16
    1a6e:	bd10      	pop	{r4, pc}
    1a70:	fff0ffff 	.word	0xfff0ffff
    1a74:	20000ba4 	.word	0x20000ba4
    1a78:	00000681 	.word	0x00000681

00001a7c <CAN0_Handler>:

//! [can_transfer_message_setup]

//! [can_interrupt_handler]
void CAN0_Handler(void)
{
    1a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a7e:	46ce      	mov	lr, r9
    1a80:	4647      	mov	r7, r8
    1a82:	b580      	push	{r7, lr}
    1a84:	b085      	sub	sp, #20
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
    1a86:	4b82      	ldr	r3, [pc, #520]	; (1c90 <CAN0_Handler+0x214>)
    1a88:	681b      	ldr	r3, [r3, #0]
    1a8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = can_read_interrupt_status(&can_instance);
    1a8c:	9203      	str	r2, [sp, #12]

	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    1a8e:	9a03      	ldr	r2, [sp, #12]
    1a90:	0312      	lsls	r2, r2, #12
    1a92:	d56e      	bpl.n	1b72 <CAN0_Handler+0xf6>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    1a94:	2280      	movs	r2, #128	; 0x80
    1a96:	0312      	lsls	r2, r2, #12
    1a98:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    1a9a:	2300      	movs	r3, #0
    1a9c:	9302      	str	r3, [sp, #8]
    1a9e:	9b02      	ldr	r3, [sp, #8]
    1aa0:	2b0f      	cmp	r3, #15
    1aa2:	d866      	bhi.n	1b72 <CAN0_Handler+0xf6>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    1aa4:	4b7a      	ldr	r3, [pc, #488]	; (1c90 <CAN0_Handler+0x214>)
    1aa6:	4699      	mov	r9, r3
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    1aa8:	4698      	mov	r8, r3
			if (can_rx_get_buffer_status(&can_instance, i)) {
				rx_buffer_index = i;
				can_rx_clear_buffer_status(&can_instance, i);
				can_get_rx_buffer_element(&can_instance, &rx_element_buffer,
    1aaa:	4f7a      	ldr	r7, [pc, #488]	; (1c94 <CAN0_Handler+0x218>)
    1aac:	e03a      	b.n	1b24 <CAN0_Handler+0xa8>
    1aae:	239c      	movs	r3, #156	; 0x9c
    1ab0:	4641      	mov	r1, r8
    1ab2:	6809      	ldr	r1, [r1, #0]
    1ab4:	58cb      	ldr	r3, [r1, r3]
		index -= 32;
    1ab6:	3a20      	subs	r2, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    1ab8:	2101      	movs	r1, #1
    1aba:	4091      	lsls	r1, r2
    1abc:	400b      	ands	r3, r1
    1abe:	1e5a      	subs	r2, r3, #1
    1ac0:	4193      	sbcs	r3, r2
    1ac2:	b2db      	uxtb	r3, r3
    1ac4:	e03b      	b.n	1b3e <CAN0_Handler+0xc2>
		module_inst->hw->NDAT2.reg = (1 << index);
    1ac6:	4a72      	ldr	r2, [pc, #456]	; (1c90 <CAN0_Handler+0x214>)
    1ac8:	6811      	ldr	r1, [r2, #0]
		index -= 32;
    1aca:	3b20      	subs	r3, #32
		module_inst->hw->NDAT2.reg = (1 << index);
    1acc:	2201      	movs	r2, #1
    1ace:	409a      	lsls	r2, r3
    1ad0:	0013      	movs	r3, r2
    1ad2:	229c      	movs	r2, #156	; 0x9c
    1ad4:	508b      	str	r3, [r1, r2]
    1ad6:	e040      	b.n	1b5a <CAN0_Handler+0xde>
				rx_buffer_index);
				if (rx_element_buffer.R0.bit.XTD) {
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
				} else {
					printf("\n\r Standard message received in Rx buffer. The received data is: \r\n");
    1ad8:	486f      	ldr	r0, [pc, #444]	; (1c98 <CAN0_Handler+0x21c>)
    1ada:	4b70      	ldr	r3, [pc, #448]	; (1c9c <CAN0_Handler+0x220>)
    1adc:	4798      	blx	r3
				}
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
    1ade:	2300      	movs	r3, #0
    1ae0:	9302      	str	r3, [sp, #8]
    1ae2:	4b6c      	ldr	r3, [pc, #432]	; (1c94 <CAN0_Handler+0x218>)
    1ae4:	685b      	ldr	r3, [r3, #4]
    1ae6:	031b      	lsls	r3, r3, #12
    1ae8:	0f1b      	lsrs	r3, r3, #28
    1aea:	9a02      	ldr	r2, [sp, #8]
    1aec:	4293      	cmp	r3, r2
    1aee:	d910      	bls.n	1b12 <CAN0_Handler+0x96>
					printf("  %d",rx_element_buffer.data[i]);
    1af0:	4c68      	ldr	r4, [pc, #416]	; (1c94 <CAN0_Handler+0x218>)
    1af2:	4d6b      	ldr	r5, [pc, #428]	; (1ca0 <CAN0_Handler+0x224>)
    1af4:	4e6b      	ldr	r6, [pc, #428]	; (1ca4 <CAN0_Handler+0x228>)
    1af6:	9b02      	ldr	r3, [sp, #8]
    1af8:	18e3      	adds	r3, r4, r3
    1afa:	7a19      	ldrb	r1, [r3, #8]
    1afc:	0028      	movs	r0, r5
    1afe:	47b0      	blx	r6
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
    1b00:	9b02      	ldr	r3, [sp, #8]
    1b02:	3301      	adds	r3, #1
    1b04:	9302      	str	r3, [sp, #8]
    1b06:	6863      	ldr	r3, [r4, #4]
    1b08:	031b      	lsls	r3, r3, #12
    1b0a:	0f1b      	lsrs	r3, r3, #28
    1b0c:	9a02      	ldr	r2, [sp, #8]
    1b0e:	4293      	cmp	r3, r2
    1b10:	d8f1      	bhi.n	1af6 <CAN0_Handler+0x7a>
				}
				printf("\r\n\r\n");
    1b12:	4865      	ldr	r0, [pc, #404]	; (1ca8 <CAN0_Handler+0x22c>)
    1b14:	4b61      	ldr	r3, [pc, #388]	; (1c9c <CAN0_Handler+0x220>)
    1b16:	4798      	blx	r3
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    1b18:	9b02      	ldr	r3, [sp, #8]
    1b1a:	3301      	adds	r3, #1
    1b1c:	9302      	str	r3, [sp, #8]
    1b1e:	9b02      	ldr	r3, [sp, #8]
    1b20:	2b0f      	cmp	r3, #15
    1b22:	d826      	bhi.n	1b72 <CAN0_Handler+0xf6>
			if (can_rx_get_buffer_status(&can_instance, i)) {
    1b24:	9a02      	ldr	r2, [sp, #8]
	if (index < 32) {
    1b26:	2a1f      	cmp	r2, #31
    1b28:	d8c1      	bhi.n	1aae <CAN0_Handler+0x32>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    1b2a:	2398      	movs	r3, #152	; 0x98
    1b2c:	4649      	mov	r1, r9
    1b2e:	6809      	ldr	r1, [r1, #0]
    1b30:	58cb      	ldr	r3, [r1, r3]
    1b32:	2101      	movs	r1, #1
    1b34:	4091      	lsls	r1, r2
    1b36:	400b      	ands	r3, r1
    1b38:	1e5a      	subs	r2, r3, #1
    1b3a:	4193      	sbcs	r3, r2
    1b3c:	b2db      	uxtb	r3, r3
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d0ea      	beq.n	1b18 <CAN0_Handler+0x9c>
				rx_buffer_index = i;
    1b42:	9b02      	ldr	r3, [sp, #8]
    1b44:	9301      	str	r3, [sp, #4]
				can_rx_clear_buffer_status(&can_instance, i);
    1b46:	9b02      	ldr	r3, [sp, #8]
	if (index < 32) {
    1b48:	2b1f      	cmp	r3, #31
    1b4a:	d8bc      	bhi.n	1ac6 <CAN0_Handler+0x4a>
		module_inst->hw->NDAT1.reg = (1 << index);
    1b4c:	4a50      	ldr	r2, [pc, #320]	; (1c90 <CAN0_Handler+0x214>)
    1b4e:	6811      	ldr	r1, [r2, #0]
    1b50:	2201      	movs	r2, #1
    1b52:	409a      	lsls	r2, r3
    1b54:	0013      	movs	r3, r2
    1b56:	2298      	movs	r2, #152	; 0x98
    1b58:	508b      	str	r3, [r1, r2]
				can_get_rx_buffer_element(&can_instance, &rx_element_buffer,
    1b5a:	9a01      	ldr	r2, [sp, #4]
    1b5c:	0039      	movs	r1, r7
    1b5e:	484c      	ldr	r0, [pc, #304]	; (1c90 <CAN0_Handler+0x214>)
    1b60:	4b52      	ldr	r3, [pc, #328]	; (1cac <CAN0_Handler+0x230>)
    1b62:	4798      	blx	r3
				if (rx_element_buffer.R0.bit.XTD) {
    1b64:	683b      	ldr	r3, [r7, #0]
    1b66:	005b      	lsls	r3, r3, #1
    1b68:	d5b6      	bpl.n	1ad8 <CAN0_Handler+0x5c>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
    1b6a:	4851      	ldr	r0, [pc, #324]	; (1cb0 <CAN0_Handler+0x234>)
    1b6c:	4b4b      	ldr	r3, [pc, #300]	; (1c9c <CAN0_Handler+0x220>)
    1b6e:	4798      	blx	r3
    1b70:	e7b5      	b.n	1ade <CAN0_Handler+0x62>
			}
		}
	}

	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
    1b72:	9b03      	ldr	r3, [sp, #12]
    1b74:	07db      	lsls	r3, r3, #31
    1b76:	d415      	bmi.n	1ba4 <CAN0_Handler+0x128>
			printf("  %d",rx_element_fifo_0.data[i]);
		}
		printf("\r\n\r\n");
	}

	if (status & CAN_RX_FIFO_1_NEW_MESSAGE) {
    1b78:	9b03      	ldr	r3, [sp, #12]
    1b7a:	06db      	lsls	r3, r3, #27
    1b7c:	d44d      	bmi.n	1c1a <CAN0_Handler+0x19e>
			printf("  %d",rx_element_fifo_1.data[i]);
		}
		printf("\r\n\r\n");
	}

	if ((status & CAN_PROTOCOL_ERROR_ARBITRATION)
    1b7e:	9b03      	ldr	r3, [sp, #12]
    1b80:	011b      	lsls	r3, r3, #4
    1b82:	d402      	bmi.n	1b8a <CAN0_Handler+0x10e>
			|| (status & CAN_PROTOCOL_ERROR_DATA)) {
    1b84:	9b03      	ldr	r3, [sp, #12]
    1b86:	00db      	lsls	r3, r3, #3
    1b88:	d507      	bpl.n	1b9a <CAN0_Handler+0x11e>
	module_inst->hw->IR.reg = source;
    1b8a:	4b41      	ldr	r3, [pc, #260]	; (1c90 <CAN0_Handler+0x214>)
    1b8c:	681b      	ldr	r3, [r3, #0]
    1b8e:	22c0      	movs	r2, #192	; 0xc0
    1b90:	0552      	lsls	r2, r2, #21
    1b92:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_PROTOCOL_ERROR_ARBITRATION
			 	| CAN_PROTOCOL_ERROR_DATA);
		printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
    1b94:	4847      	ldr	r0, [pc, #284]	; (1cb4 <CAN0_Handler+0x238>)
    1b96:	4b41      	ldr	r3, [pc, #260]	; (1c9c <CAN0_Handler+0x220>)
    1b98:	4798      	blx	r3
	}
}
    1b9a:	b005      	add	sp, #20
    1b9c:	bc0c      	pop	{r2, r3}
    1b9e:	4690      	mov	r8, r2
    1ba0:	4699      	mov	r9, r3
    1ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ba4:	4d3a      	ldr	r5, [pc, #232]	; (1c90 <CAN0_Handler+0x214>)
    1ba6:	682b      	ldr	r3, [r5, #0]
    1ba8:	2201      	movs	r2, #1
    1baa:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
    1bac:	4c42      	ldr	r4, [pc, #264]	; (1cb8 <CAN0_Handler+0x23c>)
    1bae:	6822      	ldr	r2, [r4, #0]
    1bb0:	4942      	ldr	r1, [pc, #264]	; (1cbc <CAN0_Handler+0x240>)
    1bb2:	0028      	movs	r0, r5
    1bb4:	4b42      	ldr	r3, [pc, #264]	; (1cc0 <CAN0_Handler+0x244>)
    1bb6:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
    1bb8:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    1bba:	6829      	ldr	r1, [r5, #0]
    1bbc:	233f      	movs	r3, #63	; 0x3f
    1bbe:	4013      	ands	r3, r2
    1bc0:	22a8      	movs	r2, #168	; 0xa8
    1bc2:	508b      	str	r3, [r1, r2]
		standard_receive_index++;
    1bc4:	6823      	ldr	r3, [r4, #0]
    1bc6:	3301      	adds	r3, #1
    1bc8:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
    1bca:	6823      	ldr	r3, [r4, #0]
    1bcc:	2b10      	cmp	r3, #16
    1bce:	d020      	beq.n	1c12 <CAN0_Handler+0x196>
		printf("\n\r Standard message received in FIFO 0. The received data is: \r\n");
    1bd0:	483c      	ldr	r0, [pc, #240]	; (1cc4 <CAN0_Handler+0x248>)
    1bd2:	4b32      	ldr	r3, [pc, #200]	; (1c9c <CAN0_Handler+0x220>)
    1bd4:	4798      	blx	r3
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    1bd6:	2300      	movs	r3, #0
    1bd8:	9302      	str	r3, [sp, #8]
    1bda:	4b38      	ldr	r3, [pc, #224]	; (1cbc <CAN0_Handler+0x240>)
    1bdc:	685b      	ldr	r3, [r3, #4]
    1bde:	031b      	lsls	r3, r3, #12
    1be0:	0f1b      	lsrs	r3, r3, #28
    1be2:	9a02      	ldr	r2, [sp, #8]
    1be4:	4293      	cmp	r3, r2
    1be6:	d910      	bls.n	1c0a <CAN0_Handler+0x18e>
			printf("  %d",rx_element_fifo_0.data[i]);
    1be8:	4d34      	ldr	r5, [pc, #208]	; (1cbc <CAN0_Handler+0x240>)
    1bea:	4c2d      	ldr	r4, [pc, #180]	; (1ca0 <CAN0_Handler+0x224>)
    1bec:	4e2d      	ldr	r6, [pc, #180]	; (1ca4 <CAN0_Handler+0x228>)
    1bee:	9b02      	ldr	r3, [sp, #8]
    1bf0:	18eb      	adds	r3, r5, r3
    1bf2:	7a19      	ldrb	r1, [r3, #8]
    1bf4:	0020      	movs	r0, r4
    1bf6:	47b0      	blx	r6
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    1bf8:	9b02      	ldr	r3, [sp, #8]
    1bfa:	3301      	adds	r3, #1
    1bfc:	9302      	str	r3, [sp, #8]
    1bfe:	686b      	ldr	r3, [r5, #4]
    1c00:	031b      	lsls	r3, r3, #12
    1c02:	0f1b      	lsrs	r3, r3, #28
    1c04:	9a02      	ldr	r2, [sp, #8]
    1c06:	4293      	cmp	r3, r2
    1c08:	d8f1      	bhi.n	1bee <CAN0_Handler+0x172>
		printf("\r\n\r\n");
    1c0a:	4827      	ldr	r0, [pc, #156]	; (1ca8 <CAN0_Handler+0x22c>)
    1c0c:	4b23      	ldr	r3, [pc, #140]	; (1c9c <CAN0_Handler+0x220>)
    1c0e:	4798      	blx	r3
    1c10:	e7b2      	b.n	1b78 <CAN0_Handler+0xfc>
			standard_receive_index = 0;
    1c12:	2200      	movs	r2, #0
    1c14:	4b28      	ldr	r3, [pc, #160]	; (1cb8 <CAN0_Handler+0x23c>)
    1c16:	601a      	str	r2, [r3, #0]
    1c18:	e7da      	b.n	1bd0 <CAN0_Handler+0x154>
	module_inst->hw->IR.reg = source;
    1c1a:	4d1d      	ldr	r5, [pc, #116]	; (1c90 <CAN0_Handler+0x214>)
    1c1c:	682b      	ldr	r3, [r5, #0]
    1c1e:	2210      	movs	r2, #16
    1c20:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_1_element(&can_instance, &rx_element_fifo_1,
    1c22:	4c29      	ldr	r4, [pc, #164]	; (1cc8 <CAN0_Handler+0x24c>)
    1c24:	6822      	ldr	r2, [r4, #0]
    1c26:	4929      	ldr	r1, [pc, #164]	; (1ccc <CAN0_Handler+0x250>)
    1c28:	0028      	movs	r0, r5
    1c2a:	4b29      	ldr	r3, [pc, #164]	; (1cd0 <CAN0_Handler+0x254>)
    1c2c:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
    1c2e:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    1c30:	6829      	ldr	r1, [r5, #0]
    1c32:	233f      	movs	r3, #63	; 0x3f
    1c34:	4013      	ands	r3, r2
    1c36:	22a8      	movs	r2, #168	; 0xa8
    1c38:	508b      	str	r3, [r1, r2]
		extended_receive_index++;
    1c3a:	6823      	ldr	r3, [r4, #0]
    1c3c:	3301      	adds	r3, #1
    1c3e:	6023      	str	r3, [r4, #0]
		if (extended_receive_index == CONF_CAN0_RX_FIFO_1_NUM) {
    1c40:	6823      	ldr	r3, [r4, #0]
    1c42:	2b10      	cmp	r3, #16
    1c44:	d020      	beq.n	1c88 <CAN0_Handler+0x20c>
		printf("\n\r Extended message received in FIFO 1. The received data is: \r\n");
    1c46:	4823      	ldr	r0, [pc, #140]	; (1cd4 <CAN0_Handler+0x258>)
    1c48:	4b14      	ldr	r3, [pc, #80]	; (1c9c <CAN0_Handler+0x220>)
    1c4a:	4798      	blx	r3
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
    1c4c:	2300      	movs	r3, #0
    1c4e:	9302      	str	r3, [sp, #8]
    1c50:	4b1e      	ldr	r3, [pc, #120]	; (1ccc <CAN0_Handler+0x250>)
    1c52:	685b      	ldr	r3, [r3, #4]
    1c54:	031b      	lsls	r3, r3, #12
    1c56:	0f1b      	lsrs	r3, r3, #28
    1c58:	9a02      	ldr	r2, [sp, #8]
    1c5a:	4293      	cmp	r3, r2
    1c5c:	d910      	bls.n	1c80 <CAN0_Handler+0x204>
			printf("  %d",rx_element_fifo_1.data[i]);
    1c5e:	4d1b      	ldr	r5, [pc, #108]	; (1ccc <CAN0_Handler+0x250>)
    1c60:	4c0f      	ldr	r4, [pc, #60]	; (1ca0 <CAN0_Handler+0x224>)
    1c62:	4e10      	ldr	r6, [pc, #64]	; (1ca4 <CAN0_Handler+0x228>)
    1c64:	9b02      	ldr	r3, [sp, #8]
    1c66:	18eb      	adds	r3, r5, r3
    1c68:	7a19      	ldrb	r1, [r3, #8]
    1c6a:	0020      	movs	r0, r4
    1c6c:	47b0      	blx	r6
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
    1c6e:	9b02      	ldr	r3, [sp, #8]
    1c70:	3301      	adds	r3, #1
    1c72:	9302      	str	r3, [sp, #8]
    1c74:	686b      	ldr	r3, [r5, #4]
    1c76:	031b      	lsls	r3, r3, #12
    1c78:	0f1b      	lsrs	r3, r3, #28
    1c7a:	9a02      	ldr	r2, [sp, #8]
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d8f1      	bhi.n	1c64 <CAN0_Handler+0x1e8>
		printf("\r\n\r\n");
    1c80:	4809      	ldr	r0, [pc, #36]	; (1ca8 <CAN0_Handler+0x22c>)
    1c82:	4b06      	ldr	r3, [pc, #24]	; (1c9c <CAN0_Handler+0x220>)
    1c84:	4798      	blx	r3
    1c86:	e77a      	b.n	1b7e <CAN0_Handler+0x102>
			extended_receive_index = 0;
    1c88:	2200      	movs	r2, #0
    1c8a:	4b0f      	ldr	r3, [pc, #60]	; (1cc8 <CAN0_Handler+0x24c>)
    1c8c:	601a      	str	r2, [r3, #0]
    1c8e:	e7da      	b.n	1c46 <CAN0_Handler+0x1ca>
    1c90:	20000ba4 	.word	0x20000ba4
    1c94:	20000be0 	.word	0x20000be0
    1c98:	00004148 	.word	0x00004148
    1c9c:	00002339 	.word	0x00002339
    1ca0:	0000418c 	.word	0x0000418c
    1ca4:	00002245 	.word	0x00002245
    1ca8:	00004194 	.word	0x00004194
    1cac:	00000591 	.word	0x00000591
    1cb0:	00004104 	.word	0x00004104
    1cb4:	00004218 	.word	0x00004218
    1cb8:	20000c10 	.word	0x20000c10
    1cbc:	20000bf0 	.word	0x20000bf0
    1cc0:	000005e1 	.word	0x000005e1
    1cc4:	00004198 	.word	0x00004198
    1cc8:	20000bdc 	.word	0x20000bdc
    1ccc:	20000c00 	.word	0x20000c00
    1cd0:	00000631 	.word	0x00000631
    1cd4:	000041d8 	.word	0x000041d8

00001cd8 <main>:
//! [user_menu]

//! [setup]

int main(void)
{
    1cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cda:	b095      	sub	sp, #84	; 0x54
	uint8_t key;

//! [setup_init]
	system_init();
    1cdc:	4bb2      	ldr	r3, [pc, #712]	; (1fa8 <main+0x2d0>)
    1cde:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1ce0:	aa01      	add	r2, sp, #4
    1ce2:	2380      	movs	r3, #128	; 0x80
    1ce4:	05db      	lsls	r3, r3, #23
    1ce6:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1ce8:	2300      	movs	r3, #0
    1cea:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    1cec:	21ff      	movs	r1, #255	; 0xff
    1cee:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    1cf0:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1cf2:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1cf4:	2401      	movs	r4, #1
    1cf6:	39d3      	subs	r1, #211	; 0xd3
    1cf8:	5454      	strb	r4, [r2, r1]
	config->transmitter_enable = true;
    1cfa:	3101      	adds	r1, #1
    1cfc:	5454      	strb	r4, [r2, r1]
	config->clock_polarity_inverted = false;
    1cfe:	3101      	adds	r1, #1
    1d00:	5453      	strb	r3, [r2, r1]
	config->use_external_clock = false;
    1d02:	3101      	adds	r1, #1
    1d04:	5453      	strb	r3, [r2, r1]
	config->ext_clock_freq   = 0;
    1d06:	6313      	str	r3, [r2, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1d08:	3105      	adds	r1, #5
    1d0a:	5453      	strb	r3, [r2, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1d0c:	3101      	adds	r1, #1
    1d0e:	5453      	strb	r3, [r2, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1d10:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1d12:	2100      	movs	r1, #0
    1d14:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1d16:	76d1      	strb	r1, [r2, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    1d18:	61d3      	str	r3, [r2, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    1d1a:	8413      	strh	r3, [r2, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    1d1c:	8453      	strh	r3, [r2, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1d1e:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1d20:	3324      	adds	r3, #36	; 0x24
    1d22:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1d24:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    1d26:	3b11      	subs	r3, #17
    1d28:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1d2a:	3313      	adds	r3, #19
    1d2c:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    1d2e:	3b01      	subs	r3, #1
    1d30:	54d1      	strb	r1, [r2, r3]
	config_cdc.baudrate	 = 38400;
    1d32:	2396      	movs	r3, #150	; 0x96
    1d34:	021b      	lsls	r3, r3, #8
    1d36:	6293      	str	r3, [r2, #40]	; 0x28
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1d38:	23c4      	movs	r3, #196	; 0xc4
    1d3a:	039b      	lsls	r3, r3, #14
    1d3c:	60d3      	str	r3, [r2, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1d3e:	2301      	movs	r3, #1
    1d40:	425b      	negs	r3, r3
    1d42:	6393      	str	r3, [r2, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1d44:	63d3      	str	r3, [r2, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1d46:	4b99      	ldr	r3, [pc, #612]	; (1fac <main+0x2d4>)
    1d48:	6413      	str	r3, [r2, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1d4a:	4b99      	ldr	r3, [pc, #612]	; (1fb0 <main+0x2d8>)
    1d4c:	6453      	str	r3, [r2, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1d4e:	4d99      	ldr	r5, [pc, #612]	; (1fb4 <main+0x2dc>)
    1d50:	4b99      	ldr	r3, [pc, #612]	; (1fb8 <main+0x2e0>)
    1d52:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1d54:	4999      	ldr	r1, [pc, #612]	; (1fbc <main+0x2e4>)
    1d56:	4b9a      	ldr	r3, [pc, #616]	; (1fc0 <main+0x2e8>)
    1d58:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1d5a:	499a      	ldr	r1, [pc, #616]	; (1fc4 <main+0x2ec>)
    1d5c:	4b9a      	ldr	r3, [pc, #616]	; (1fc8 <main+0x2f0>)
    1d5e:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1d60:	499a      	ldr	r1, [pc, #616]	; (1fcc <main+0x2f4>)
    1d62:	0028      	movs	r0, r5
    1d64:	4b9a      	ldr	r3, [pc, #616]	; (1fd0 <main+0x2f8>)
    1d66:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1d68:	4f9a      	ldr	r7, [pc, #616]	; (1fd4 <main+0x2fc>)
    1d6a:	683b      	ldr	r3, [r7, #0]
    1d6c:	6898      	ldr	r0, [r3, #8]
    1d6e:	2100      	movs	r1, #0
    1d70:	4e99      	ldr	r6, [pc, #612]	; (1fd8 <main+0x300>)
    1d72:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1d74:	683b      	ldr	r3, [r7, #0]
    1d76:	6858      	ldr	r0, [r3, #4]
    1d78:	2100      	movs	r1, #0
    1d7a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d7c:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1d7e:	0030      	movs	r0, r6
    1d80:	4b96      	ldr	r3, [pc, #600]	; (1fdc <main+0x304>)
    1d82:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1d84:	231f      	movs	r3, #31
    1d86:	4018      	ands	r0, r3
    1d88:	4084      	lsls	r4, r0
    1d8a:	4b95      	ldr	r3, [pc, #596]	; (1fe0 <main+0x308>)
    1d8c:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d8e:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1d90:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1d92:	2a00      	cmp	r2, #0
    1d94:	d1fc      	bne.n	1d90 <main+0xb8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1d96:	6833      	ldr	r3, [r6, #0]
    1d98:	3202      	adds	r2, #2
    1d9a:	4313      	orrs	r3, r2
    1d9c:	6033      	str	r3, [r6, #0]
    1d9e:	327e      	adds	r2, #126	; 0x7e
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    1da0:	2300      	movs	r3, #0
		tx_message_0[i] = i;
    1da2:	4890      	ldr	r0, [pc, #576]	; (1fe4 <main+0x30c>)
		tx_message_1[i] = i + 0x80;
    1da4:	4990      	ldr	r1, [pc, #576]	; (1fe8 <main+0x310>)
		tx_message_0[i] = i;
    1da6:	541b      	strb	r3, [r3, r0]
		tx_message_1[i] = i + 0x80;
    1da8:	545a      	strb	r2, [r3, r1]
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    1daa:	3301      	adds	r3, #1
    1dac:	3201      	adds	r2, #1
    1dae:	b2d2      	uxtb	r2, r2
    1db0:	2b08      	cmp	r3, #8
    1db2:	d1f8      	bne.n	1da6 <main+0xce>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1db4:	2400      	movs	r4, #0
    1db6:	466b      	mov	r3, sp
    1db8:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1dba:	2501      	movs	r5, #1
    1dbc:	709d      	strb	r5, [r3, #2]
	config->powersave    = false;
    1dbe:	70dc      	strb	r4, [r3, #3]
	pin_config.mux_position = CAN_TX_MUX_SETTING;
    1dc0:	2706      	movs	r7, #6
    1dc2:	701f      	strb	r7, [r3, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
    1dc4:	4669      	mov	r1, sp
    1dc6:	2018      	movs	r0, #24
    1dc8:	4e88      	ldr	r6, [pc, #544]	; (1fec <main+0x314>)
    1dca:	47b0      	blx	r6
	pin_config.mux_position = CAN_RX_MUX_SETTING;
    1dcc:	466b      	mov	r3, sp
    1dce:	701f      	strb	r7, [r3, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
    1dd0:	4669      	mov	r1, sp
    1dd2:	2019      	movs	r0, #25
    1dd4:	47b0      	blx	r6
	config->clock_source = GCLK_GENERATOR_8;
    1dd6:	aa01      	add	r2, sp, #4
    1dd8:	2308      	movs	r3, #8
    1dda:	7013      	strb	r3, [r2, #0]
	config->run_in_standby = false;
    1ddc:	7054      	strb	r4, [r2, #1]
	config->watchdog_configuration = 0x00;
    1dde:	7094      	strb	r4, [r2, #2]
	config->transmit_pause = true;
    1de0:	70d5      	strb	r5, [r2, #3]
	config->edge_filtering = true;
    1de2:	7115      	strb	r5, [r2, #4]
	config->protocol_exception_handling = true;
    1de4:	7155      	strb	r5, [r2, #5]
	config->automatic_retransmission = true;
    1de6:	7195      	strb	r5, [r2, #6]
	config->clock_stop_request = false;
    1de8:	71d4      	strb	r4, [r2, #7]
	config->clock_stop_acknowledge = false;
    1dea:	7214      	strb	r4, [r2, #8]
	config->timestamp_prescaler = 0;
    1dec:	7254      	strb	r4, [r2, #9]
	config->timeout_period = 0xFFFF;
    1dee:	3b09      	subs	r3, #9
    1df0:	8153      	strh	r3, [r2, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
    1df2:	7314      	strb	r4, [r2, #12]
	config->timeout_enable = false;
    1df4:	7354      	strb	r4, [r2, #13]
	config->tdc_enable = false;
    1df6:	7394      	strb	r4, [r2, #14]
	config->delay_compensation_offset = 0;
    1df8:	73d4      	strb	r4, [r2, #15]
	config->delay_compensation_filter_window_length = 0;
    1dfa:	7414      	strb	r4, [r2, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
    1dfc:	3303      	adds	r3, #3
    1dfe:	7453      	strb	r3, [r2, #17]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
    1e00:	7493      	strb	r3, [r2, #18]
	config->remote_frames_standard_reject = true;
    1e02:	74d5      	strb	r5, [r2, #19]
	config->remote_frames_extended_reject = true;
    1e04:	7515      	strb	r5, [r2, #20]
	config->extended_id_mask = 0x1FFFFFFF;
    1e06:	4b7a      	ldr	r3, [pc, #488]	; (1ff0 <main+0x318>)
    1e08:	6193      	str	r3, [r2, #24]
	config->rx_fifo_0_overwrite = true;
    1e0a:	7715      	strb	r5, [r2, #28]
	config->rx_fifo_0_watermark = 0;
    1e0c:	7754      	strb	r4, [r2, #29]
	config->rx_fifo_1_overwrite = true;
    1e0e:	7795      	strb	r5, [r2, #30]
	config->rx_fifo_1_watermark = 0;
    1e10:	77d4      	strb	r4, [r2, #31]
	config->tx_queue_mode = false;
    1e12:	2320      	movs	r3, #32
    1e14:	54d4      	strb	r4, [r2, r3]
	config->tx_event_fifo_watermark = 0;
    1e16:	3301      	adds	r3, #1
    1e18:	54d4      	strb	r4, [r2, r3]
	can_init(&can_instance, CAN_MODULE, &config_can);
    1e1a:	4c76      	ldr	r4, [pc, #472]	; (1ff4 <main+0x31c>)
    1e1c:	4976      	ldr	r1, [pc, #472]	; (1ff8 <main+0x320>)
    1e1e:	0020      	movs	r0, r4
    1e20:	4b76      	ldr	r3, [pc, #472]	; (1ffc <main+0x324>)
    1e22:	4798      	blx	r3
	can_start(&can_instance);
    1e24:	0020      	movs	r0, r4
    1e26:	4b76      	ldr	r3, [pc, #472]	; (2000 <STACK_SIZE>)
    1e28:	4798      	blx	r3
    1e2a:	2280      	movs	r2, #128	; 0x80
    1e2c:	0212      	lsls	r2, r2, #8
    1e2e:	4b6c      	ldr	r3, [pc, #432]	; (1fe0 <main+0x308>)
    1e30:	601a      	str	r2, [r3, #0]
	module_inst->hw->IE.reg |= source;
    1e32:	6822      	ldr	r2, [r4, #0]
    1e34:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1e36:	23c0      	movs	r3, #192	; 0xc0
    1e38:	055b      	lsls	r3, r3, #21
    1e3a:	430b      	orrs	r3, r1
    1e3c:	6553      	str	r3, [r2, #84]	; 0x54
	printf("Menu :\r\n"
    1e3e:	4871      	ldr	r0, [pc, #452]	; (2004 <STACK_SIZE+0x4>)
    1e40:	4b71      	ldr	r3, [pc, #452]	; (2008 <STACK_SIZE+0x8>)
    1e42:	4798      	blx	r3
	display_menu();
//! [display_user_menu]

//! [main_loop]
	while(1) {
		scanf("%c", (char *)&key);
    1e44:	4c71      	ldr	r4, [pc, #452]	; (200c <STACK_SIZE+0xc>)

		switch (key) {
    1e46:	4f72      	ldr	r7, [pc, #456]	; (2010 <STACK_SIZE+0x10>)
    1e48:	e002      	b.n	1e50 <main+0x178>
	printf("Menu :\r\n"
    1e4a:	486e      	ldr	r0, [pc, #440]	; (2004 <STACK_SIZE+0x4>)
    1e4c:	4b6e      	ldr	r3, [pc, #440]	; (2008 <STACK_SIZE+0x8>)
    1e4e:	4798      	blx	r3
		scanf("%c", (char *)&key);
    1e50:	4e70      	ldr	r6, [pc, #448]	; (2014 <STACK_SIZE+0x14>)
    1e52:	254f      	movs	r5, #79	; 0x4f
    1e54:	446d      	add	r5, sp
    1e56:	0029      	movs	r1, r5
    1e58:	0020      	movs	r0, r4
    1e5a:	47b0      	blx	r6
		switch (key) {
    1e5c:	782b      	ldrb	r3, [r5, #0]
    1e5e:	3b30      	subs	r3, #48	; 0x30
    1e60:	b2da      	uxtb	r2, r3
    1e62:	2a38      	cmp	r2, #56	; 0x38
    1e64:	d8f5      	bhi.n	1e52 <main+0x17a>
    1e66:	0093      	lsls	r3, r2, #2
    1e68:	58fb      	ldr	r3, [r7, r3]
    1e6a:	469f      	mov	pc, r3
		case 'h':
			display_menu();
			break;

		case '0':
			printf("  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
    1e6c:	486a      	ldr	r0, [pc, #424]	; (2018 <STACK_SIZE+0x18>)
    1e6e:	4b66      	ldr	r3, [pc, #408]	; (2008 <STACK_SIZE+0x8>)
    1e70:	4798      	blx	r3
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1e72:	4b6a      	ldr	r3, [pc, #424]	; (201c <STACK_SIZE+0x1c>)
    1e74:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFID2 = CAN_RX_STANDARD_FILTER_ID_0_BUFFER_INDEX;
    1e76:	9b01      	ldr	r3, [sp, #4]
    1e78:	0adb      	lsrs	r3, r3, #11
    1e7a:	02db      	lsls	r3, r3, #11
    1e7c:	2202      	movs	r2, #2
    1e7e:	4313      	orrs	r3, r2
    1e80:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFID1 = CAN_RX_STANDARD_FILTER_ID_0;
    1e82:	9b01      	ldr	r3, [sp, #4]
    1e84:	4a66      	ldr	r2, [pc, #408]	; (2020 <STACK_SIZE+0x20>)
    1e86:	401a      	ands	r2, r3
    1e88:	4b66      	ldr	r3, [pc, #408]	; (2024 <STACK_SIZE+0x24>)
    1e8a:	4313      	orrs	r3, r2
    1e8c:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFEC =
    1e8e:	9a01      	ldr	r2, [sp, #4]
    1e90:	23e0      	movs	r3, #224	; 0xe0
    1e92:	059b      	lsls	r3, r3, #22
    1e94:	4313      	orrs	r3, r2
    1e96:	9301      	str	r3, [sp, #4]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    1e98:	4d56      	ldr	r5, [pc, #344]	; (1ff4 <main+0x31c>)
    1e9a:	2200      	movs	r2, #0
    1e9c:	a901      	add	r1, sp, #4
    1e9e:	0028      	movs	r0, r5
    1ea0:	4b61      	ldr	r3, [pc, #388]	; (2028 <STACK_SIZE+0x28>)
    1ea2:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    1ea4:	682a      	ldr	r2, [r5, #0]
    1ea6:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1ea8:	2380      	movs	r3, #128	; 0x80
    1eaa:	031b      	lsls	r3, r3, #12
    1eac:	430b      	orrs	r3, r1
    1eae:	6553      	str	r3, [r2, #84]	; 0x54
    1eb0:	e7ce      	b.n	1e50 <main+0x178>
			can_set_standard_filter_0();
			break;

		case '1':
			printf("  1: Set standard filter ID 1: 0x469, store into Rx FIFO 0. \r\n");
    1eb2:	485e      	ldr	r0, [pc, #376]	; (202c <STACK_SIZE+0x2c>)
    1eb4:	4b54      	ldr	r3, [pc, #336]	; (2008 <STACK_SIZE+0x8>)
    1eb6:	4798      	blx	r3
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1eb8:	4b58      	ldr	r3, [pc, #352]	; (201c <STACK_SIZE+0x1c>)
    1eba:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFID1 = CAN_RX_STANDARD_FILTER_ID_1;
    1ebc:	9b01      	ldr	r3, [sp, #4]
    1ebe:	4a58      	ldr	r2, [pc, #352]	; (2020 <STACK_SIZE+0x20>)
    1ec0:	401a      	ands	r2, r3
    1ec2:	4b5b      	ldr	r3, [pc, #364]	; (2030 <STACK_SIZE+0x30>)
    1ec4:	4313      	orrs	r3, r2
    1ec6:	9301      	str	r3, [sp, #4]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    1ec8:	4d4a      	ldr	r5, [pc, #296]	; (1ff4 <main+0x31c>)
    1eca:	2201      	movs	r2, #1
    1ecc:	a901      	add	r1, sp, #4
    1ece:	0028      	movs	r0, r5
    1ed0:	4b55      	ldr	r3, [pc, #340]	; (2028 <STACK_SIZE+0x28>)
    1ed2:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    1ed4:	682a      	ldr	r2, [r5, #0]
    1ed6:	6d53      	ldr	r3, [r2, #84]	; 0x54
    1ed8:	2101      	movs	r1, #1
    1eda:	430b      	orrs	r3, r1
    1edc:	6553      	str	r3, [r2, #84]	; 0x54
    1ede:	e7b7      	b.n	1e50 <main+0x178>
			can_set_standard_filter_1();
			break;

		case '2':
			printf("  2: Send standard message with ID: 0x45A and 4 byte data 0 to 3. \r\n");
    1ee0:	4854      	ldr	r0, [pc, #336]	; (2034 <STACK_SIZE+0x34>)
    1ee2:	4b49      	ldr	r3, [pc, #292]	; (2008 <STACK_SIZE+0x8>)
    1ee4:	4798      	blx	r3
			can_send_standard_message(CAN_RX_STANDARD_FILTER_ID_0, tx_message_0,
    1ee6:	2204      	movs	r2, #4
    1ee8:	493e      	ldr	r1, [pc, #248]	; (1fe4 <main+0x30c>)
    1eea:	4853      	ldr	r0, [pc, #332]	; (2038 <STACK_SIZE+0x38>)
    1eec:	4b53      	ldr	r3, [pc, #332]	; (203c <STACK_SIZE+0x3c>)
    1eee:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE / 2);
			break;
    1ef0:	e7ae      	b.n	1e50 <main+0x178>

		case '3':
			printf("  3: Send standard message with ID: 0x469 and 4 byte data 128 to 131. \r\n");
    1ef2:	4853      	ldr	r0, [pc, #332]	; (2040 <STACK_SIZE+0x40>)
    1ef4:	4b44      	ldr	r3, [pc, #272]	; (2008 <STACK_SIZE+0x8>)
    1ef6:	4798      	blx	r3
			can_send_standard_message(CAN_RX_STANDARD_FILTER_ID_1, tx_message_1,
    1ef8:	2204      	movs	r2, #4
    1efa:	493b      	ldr	r1, [pc, #236]	; (1fe8 <main+0x310>)
    1efc:	4851      	ldr	r0, [pc, #324]	; (2044 <STACK_SIZE+0x44>)
    1efe:	4b4f      	ldr	r3, [pc, #316]	; (203c <STACK_SIZE+0x3c>)
    1f00:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE / 2);
			break;
    1f02:	e7a5      	b.n	1e50 <main+0x178>

		case '4':
			printf("  4: Set extended filter ID 0: 0x100000A5, store into Rx buffer. \r\n");
    1f04:	4850      	ldr	r0, [pc, #320]	; (2048 <STACK_SIZE+0x48>)
    1f06:	4b40      	ldr	r3, [pc, #256]	; (2008 <STACK_SIZE+0x8>)
    1f08:	4798      	blx	r3
	et_filter->F0.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFID1(0) |
    1f0a:	2380      	movs	r3, #128	; 0x80
    1f0c:	05db      	lsls	r3, r3, #23
    1f0e:	9301      	str	r3, [sp, #4]
	et_filter->F1.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2_Msk |
    1f10:	4b4e      	ldr	r3, [pc, #312]	; (204c <STACK_SIZE+0x4c>)
    1f12:	9302      	str	r3, [sp, #8]
	et_filter.F0.bit.EFID1 = CAN_RX_EXTENDED_FILTER_ID_0;
    1f14:	9b01      	ldr	r3, [sp, #4]
    1f16:	0f5b      	lsrs	r3, r3, #29
    1f18:	075b      	lsls	r3, r3, #29
    1f1a:	4a4d      	ldr	r2, [pc, #308]	; (2050 <STACK_SIZE+0x50>)
    1f1c:	4313      	orrs	r3, r2
    1f1e:	9301      	str	r3, [sp, #4]
	et_filter.F0.bit.EFEC =
    1f20:	9a01      	ldr	r2, [sp, #4]
    1f22:	23e0      	movs	r3, #224	; 0xe0
    1f24:	061b      	lsls	r3, r3, #24
    1f26:	4313      	orrs	r3, r2
    1f28:	9301      	str	r3, [sp, #4]
	et_filter.F1.bit.EFID2 = CAN_RX_EXTENDED_FILTER_ID_0_BUFFER_INDEX;
    1f2a:	9b02      	ldr	r3, [sp, #8]
    1f2c:	0f5b      	lsrs	r3, r3, #29
    1f2e:	075b      	lsls	r3, r3, #29
    1f30:	2201      	movs	r2, #1
    1f32:	4313      	orrs	r3, r2
    1f34:	9302      	str	r3, [sp, #8]
	can_set_rx_extended_filter(&can_instance, &et_filter,
    1f36:	4d2f      	ldr	r5, [pc, #188]	; (1ff4 <main+0x31c>)
    1f38:	2200      	movs	r2, #0
    1f3a:	a901      	add	r1, sp, #4
    1f3c:	0028      	movs	r0, r5
    1f3e:	4b45      	ldr	r3, [pc, #276]	; (2054 <STACK_SIZE+0x54>)
    1f40:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    1f42:	682a      	ldr	r2, [r5, #0]
    1f44:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1f46:	2380      	movs	r3, #128	; 0x80
    1f48:	031b      	lsls	r3, r3, #12
    1f4a:	430b      	orrs	r3, r1
    1f4c:	6553      	str	r3, [r2, #84]	; 0x54
    1f4e:	e77f      	b.n	1e50 <main+0x178>
			can_set_extended_filter_0();
			break;

		case '5':
			printf("  5: Set extended filter ID 1: 0x10000096, store into Rx FIFO 1. \r\n");
    1f50:	4841      	ldr	r0, [pc, #260]	; (2058 <STACK_SIZE+0x58>)
    1f52:	4b2d      	ldr	r3, [pc, #180]	; (2008 <STACK_SIZE+0x8>)
    1f54:	4798      	blx	r3
	et_filter->F0.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFID1(0) |
    1f56:	2380      	movs	r3, #128	; 0x80
    1f58:	05db      	lsls	r3, r3, #23
    1f5a:	9301      	str	r3, [sp, #4]
	et_filter->F1.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2_Msk |
    1f5c:	4b3b      	ldr	r3, [pc, #236]	; (204c <STACK_SIZE+0x4c>)
    1f5e:	9302      	str	r3, [sp, #8]
	et_filter.F0.bit.EFID1 = CAN_RX_EXTENDED_FILTER_ID_1;
    1f60:	9b01      	ldr	r3, [sp, #4]
    1f62:	0f5b      	lsrs	r3, r3, #29
    1f64:	075b      	lsls	r3, r3, #29
    1f66:	4a3d      	ldr	r2, [pc, #244]	; (205c <STACK_SIZE+0x5c>)
    1f68:	4313      	orrs	r3, r2
    1f6a:	9301      	str	r3, [sp, #4]
	can_set_rx_extended_filter(&can_instance, &et_filter,
    1f6c:	4d21      	ldr	r5, [pc, #132]	; (1ff4 <main+0x31c>)
    1f6e:	2201      	movs	r2, #1
    1f70:	a901      	add	r1, sp, #4
    1f72:	0028      	movs	r0, r5
    1f74:	4b37      	ldr	r3, [pc, #220]	; (2054 <STACK_SIZE+0x54>)
    1f76:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    1f78:	682a      	ldr	r2, [r5, #0]
    1f7a:	6d53      	ldr	r3, [r2, #84]	; 0x54
    1f7c:	2110      	movs	r1, #16
    1f7e:	430b      	orrs	r3, r1
    1f80:	6553      	str	r3, [r2, #84]	; 0x54
    1f82:	e765      	b.n	1e50 <main+0x178>
			can_set_extended_filter_1();
			break;

		case '6':
			printf("  6: Send extended message with ID: 0x100000A5 and 8 byte data 0 to 7. \r\n");
    1f84:	4836      	ldr	r0, [pc, #216]	; (2060 <STACK_SIZE+0x60>)
    1f86:	4b20      	ldr	r3, [pc, #128]	; (2008 <STACK_SIZE+0x8>)
    1f88:	4798      	blx	r3
			can_send_extended_message(CAN_RX_EXTENDED_FILTER_ID_0, tx_message_0,
    1f8a:	2208      	movs	r2, #8
    1f8c:	4915      	ldr	r1, [pc, #84]	; (1fe4 <main+0x30c>)
    1f8e:	4830      	ldr	r0, [pc, #192]	; (2050 <STACK_SIZE+0x50>)
    1f90:	4b34      	ldr	r3, [pc, #208]	; (2064 <STACK_SIZE+0x64>)
    1f92:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE);
			break;
    1f94:	e75c      	b.n	1e50 <main+0x178>

		case '7':
			printf("  7: Send extended message with ID: 0x10000096 and 8 byte data 128 to 135. \r\n");
    1f96:	4834      	ldr	r0, [pc, #208]	; (2068 <STACK_SIZE+0x68>)
    1f98:	4b1b      	ldr	r3, [pc, #108]	; (2008 <STACK_SIZE+0x8>)
    1f9a:	4798      	blx	r3
			can_send_extended_message(CAN_RX_EXTENDED_FILTER_ID_1, tx_message_1,
    1f9c:	2208      	movs	r2, #8
    1f9e:	4912      	ldr	r1, [pc, #72]	; (1fe8 <main+0x310>)
    1fa0:	482e      	ldr	r0, [pc, #184]	; (205c <STACK_SIZE+0x5c>)
    1fa2:	4b30      	ldr	r3, [pc, #192]	; (2064 <STACK_SIZE+0x64>)
    1fa4:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE);
			break;
    1fa6:	e753      	b.n	1e50 <main+0x178>
    1fa8:	000017d9 	.word	0x000017d9
    1fac:	002a0003 	.word	0x002a0003
    1fb0:	002b0003 	.word	0x002b0003
    1fb4:	20000ba8 	.word	0x20000ba8
    1fb8:	20000c50 	.word	0x20000c50
    1fbc:	0000198d 	.word	0x0000198d
    1fc0:	20000c4c 	.word	0x20000c4c
    1fc4:	00001961 	.word	0x00001961
    1fc8:	20000c48 	.word	0x20000c48
    1fcc:	42001400 	.word	0x42001400
    1fd0:	00000b61 	.word	0x00000b61
    1fd4:	20000004 	.word	0x20000004
    1fd8:	00002381 	.word	0x00002381
    1fdc:	00000ad1 	.word	0x00000ad1
    1fe0:	e000e100 	.word	0xe000e100
    1fe4:	20000c14 	.word	0x20000c14
    1fe8:	20000c1c 	.word	0x20000c1c
    1fec:	000017a9 	.word	0x000017a9
    1ff0:	1fffffff 	.word	0x1fffffff
    1ff4:	20000ba4 	.word	0x20000ba4
    1ff8:	42001c00 	.word	0x42001c00
    1ffc:	000001f9 	.word	0x000001f9
    2000:	000004f5 	.word	0x000004f5
    2004:	0000425c 	.word	0x0000425c
    2008:	00002339 	.word	0x00002339
    200c:	000044b8 	.word	0x000044b8
    2010:	00004020 	.word	0x00004020
    2014:	0000234d 	.word	0x0000234d
    2018:	000044bc 	.word	0x000044bc
    201c:	880007ff 	.word	0x880007ff
    2020:	f800ffff 	.word	0xf800ffff
    2024:	045a0000 	.word	0x045a0000
    2028:	0000050d 	.word	0x0000050d
    202c:	000044fc 	.word	0x000044fc
    2030:	04690000 	.word	0x04690000
    2034:	0000453c 	.word	0x0000453c
    2038:	0000045a 	.word	0x0000045a
    203c:	000019a5 	.word	0x000019a5
    2040:	00004580 	.word	0x00004580
    2044:	00000469 	.word	0x00000469
    2048:	000045c8 	.word	0x000045c8
    204c:	9fffffff 	.word	0x9fffffff
    2050:	100000a5 	.word	0x100000a5
    2054:	00000549 	.word	0x00000549
    2058:	0000460c 	.word	0x0000460c
    205c:	10000096 	.word	0x10000096
    2060:	00004650 	.word	0x00004650
    2064:	00001a11 	.word	0x00001a11
    2068:	0000469c 	.word	0x0000469c

0000206c <__udivsi3>:
    206c:	2200      	movs	r2, #0
    206e:	0843      	lsrs	r3, r0, #1
    2070:	428b      	cmp	r3, r1
    2072:	d374      	bcc.n	215e <__udivsi3+0xf2>
    2074:	0903      	lsrs	r3, r0, #4
    2076:	428b      	cmp	r3, r1
    2078:	d35f      	bcc.n	213a <__udivsi3+0xce>
    207a:	0a03      	lsrs	r3, r0, #8
    207c:	428b      	cmp	r3, r1
    207e:	d344      	bcc.n	210a <__udivsi3+0x9e>
    2080:	0b03      	lsrs	r3, r0, #12
    2082:	428b      	cmp	r3, r1
    2084:	d328      	bcc.n	20d8 <__udivsi3+0x6c>
    2086:	0c03      	lsrs	r3, r0, #16
    2088:	428b      	cmp	r3, r1
    208a:	d30d      	bcc.n	20a8 <__udivsi3+0x3c>
    208c:	22ff      	movs	r2, #255	; 0xff
    208e:	0209      	lsls	r1, r1, #8
    2090:	ba12      	rev	r2, r2
    2092:	0c03      	lsrs	r3, r0, #16
    2094:	428b      	cmp	r3, r1
    2096:	d302      	bcc.n	209e <__udivsi3+0x32>
    2098:	1212      	asrs	r2, r2, #8
    209a:	0209      	lsls	r1, r1, #8
    209c:	d065      	beq.n	216a <__udivsi3+0xfe>
    209e:	0b03      	lsrs	r3, r0, #12
    20a0:	428b      	cmp	r3, r1
    20a2:	d319      	bcc.n	20d8 <__udivsi3+0x6c>
    20a4:	e000      	b.n	20a8 <__udivsi3+0x3c>
    20a6:	0a09      	lsrs	r1, r1, #8
    20a8:	0bc3      	lsrs	r3, r0, #15
    20aa:	428b      	cmp	r3, r1
    20ac:	d301      	bcc.n	20b2 <__udivsi3+0x46>
    20ae:	03cb      	lsls	r3, r1, #15
    20b0:	1ac0      	subs	r0, r0, r3
    20b2:	4152      	adcs	r2, r2
    20b4:	0b83      	lsrs	r3, r0, #14
    20b6:	428b      	cmp	r3, r1
    20b8:	d301      	bcc.n	20be <__udivsi3+0x52>
    20ba:	038b      	lsls	r3, r1, #14
    20bc:	1ac0      	subs	r0, r0, r3
    20be:	4152      	adcs	r2, r2
    20c0:	0b43      	lsrs	r3, r0, #13
    20c2:	428b      	cmp	r3, r1
    20c4:	d301      	bcc.n	20ca <__udivsi3+0x5e>
    20c6:	034b      	lsls	r3, r1, #13
    20c8:	1ac0      	subs	r0, r0, r3
    20ca:	4152      	adcs	r2, r2
    20cc:	0b03      	lsrs	r3, r0, #12
    20ce:	428b      	cmp	r3, r1
    20d0:	d301      	bcc.n	20d6 <__udivsi3+0x6a>
    20d2:	030b      	lsls	r3, r1, #12
    20d4:	1ac0      	subs	r0, r0, r3
    20d6:	4152      	adcs	r2, r2
    20d8:	0ac3      	lsrs	r3, r0, #11
    20da:	428b      	cmp	r3, r1
    20dc:	d301      	bcc.n	20e2 <__udivsi3+0x76>
    20de:	02cb      	lsls	r3, r1, #11
    20e0:	1ac0      	subs	r0, r0, r3
    20e2:	4152      	adcs	r2, r2
    20e4:	0a83      	lsrs	r3, r0, #10
    20e6:	428b      	cmp	r3, r1
    20e8:	d301      	bcc.n	20ee <__udivsi3+0x82>
    20ea:	028b      	lsls	r3, r1, #10
    20ec:	1ac0      	subs	r0, r0, r3
    20ee:	4152      	adcs	r2, r2
    20f0:	0a43      	lsrs	r3, r0, #9
    20f2:	428b      	cmp	r3, r1
    20f4:	d301      	bcc.n	20fa <__udivsi3+0x8e>
    20f6:	024b      	lsls	r3, r1, #9
    20f8:	1ac0      	subs	r0, r0, r3
    20fa:	4152      	adcs	r2, r2
    20fc:	0a03      	lsrs	r3, r0, #8
    20fe:	428b      	cmp	r3, r1
    2100:	d301      	bcc.n	2106 <__udivsi3+0x9a>
    2102:	020b      	lsls	r3, r1, #8
    2104:	1ac0      	subs	r0, r0, r3
    2106:	4152      	adcs	r2, r2
    2108:	d2cd      	bcs.n	20a6 <__udivsi3+0x3a>
    210a:	09c3      	lsrs	r3, r0, #7
    210c:	428b      	cmp	r3, r1
    210e:	d301      	bcc.n	2114 <__udivsi3+0xa8>
    2110:	01cb      	lsls	r3, r1, #7
    2112:	1ac0      	subs	r0, r0, r3
    2114:	4152      	adcs	r2, r2
    2116:	0983      	lsrs	r3, r0, #6
    2118:	428b      	cmp	r3, r1
    211a:	d301      	bcc.n	2120 <__udivsi3+0xb4>
    211c:	018b      	lsls	r3, r1, #6
    211e:	1ac0      	subs	r0, r0, r3
    2120:	4152      	adcs	r2, r2
    2122:	0943      	lsrs	r3, r0, #5
    2124:	428b      	cmp	r3, r1
    2126:	d301      	bcc.n	212c <__udivsi3+0xc0>
    2128:	014b      	lsls	r3, r1, #5
    212a:	1ac0      	subs	r0, r0, r3
    212c:	4152      	adcs	r2, r2
    212e:	0903      	lsrs	r3, r0, #4
    2130:	428b      	cmp	r3, r1
    2132:	d301      	bcc.n	2138 <__udivsi3+0xcc>
    2134:	010b      	lsls	r3, r1, #4
    2136:	1ac0      	subs	r0, r0, r3
    2138:	4152      	adcs	r2, r2
    213a:	08c3      	lsrs	r3, r0, #3
    213c:	428b      	cmp	r3, r1
    213e:	d301      	bcc.n	2144 <__udivsi3+0xd8>
    2140:	00cb      	lsls	r3, r1, #3
    2142:	1ac0      	subs	r0, r0, r3
    2144:	4152      	adcs	r2, r2
    2146:	0883      	lsrs	r3, r0, #2
    2148:	428b      	cmp	r3, r1
    214a:	d301      	bcc.n	2150 <__udivsi3+0xe4>
    214c:	008b      	lsls	r3, r1, #2
    214e:	1ac0      	subs	r0, r0, r3
    2150:	4152      	adcs	r2, r2
    2152:	0843      	lsrs	r3, r0, #1
    2154:	428b      	cmp	r3, r1
    2156:	d301      	bcc.n	215c <__udivsi3+0xf0>
    2158:	004b      	lsls	r3, r1, #1
    215a:	1ac0      	subs	r0, r0, r3
    215c:	4152      	adcs	r2, r2
    215e:	1a41      	subs	r1, r0, r1
    2160:	d200      	bcs.n	2164 <__udivsi3+0xf8>
    2162:	4601      	mov	r1, r0
    2164:	4152      	adcs	r2, r2
    2166:	4610      	mov	r0, r2
    2168:	4770      	bx	lr
    216a:	e7ff      	b.n	216c <__udivsi3+0x100>
    216c:	b501      	push	{r0, lr}
    216e:	2000      	movs	r0, #0
    2170:	f000 f806 	bl	2180 <__aeabi_idiv0>
    2174:	bd02      	pop	{r1, pc}
    2176:	46c0      	nop			; (mov r8, r8)

00002178 <__aeabi_uidivmod>:
    2178:	2900      	cmp	r1, #0
    217a:	d0f7      	beq.n	216c <__udivsi3+0x100>
    217c:	e776      	b.n	206c <__udivsi3>
    217e:	4770      	bx	lr

00002180 <__aeabi_idiv0>:
    2180:	4770      	bx	lr
    2182:	46c0      	nop			; (mov r8, r8)

00002184 <__aeabi_lmul>:
    2184:	b5f0      	push	{r4, r5, r6, r7, lr}
    2186:	46ce      	mov	lr, r9
    2188:	4647      	mov	r7, r8
    218a:	0415      	lsls	r5, r2, #16
    218c:	0c2d      	lsrs	r5, r5, #16
    218e:	002e      	movs	r6, r5
    2190:	b580      	push	{r7, lr}
    2192:	0407      	lsls	r7, r0, #16
    2194:	0c14      	lsrs	r4, r2, #16
    2196:	0c3f      	lsrs	r7, r7, #16
    2198:	4699      	mov	r9, r3
    219a:	0c03      	lsrs	r3, r0, #16
    219c:	437e      	muls	r6, r7
    219e:	435d      	muls	r5, r3
    21a0:	4367      	muls	r7, r4
    21a2:	4363      	muls	r3, r4
    21a4:	197f      	adds	r7, r7, r5
    21a6:	0c34      	lsrs	r4, r6, #16
    21a8:	19e4      	adds	r4, r4, r7
    21aa:	469c      	mov	ip, r3
    21ac:	42a5      	cmp	r5, r4
    21ae:	d903      	bls.n	21b8 <__aeabi_lmul+0x34>
    21b0:	2380      	movs	r3, #128	; 0x80
    21b2:	025b      	lsls	r3, r3, #9
    21b4:	4698      	mov	r8, r3
    21b6:	44c4      	add	ip, r8
    21b8:	464b      	mov	r3, r9
    21ba:	4351      	muls	r1, r2
    21bc:	4343      	muls	r3, r0
    21be:	0436      	lsls	r6, r6, #16
    21c0:	0c36      	lsrs	r6, r6, #16
    21c2:	0c25      	lsrs	r5, r4, #16
    21c4:	0424      	lsls	r4, r4, #16
    21c6:	4465      	add	r5, ip
    21c8:	19a4      	adds	r4, r4, r6
    21ca:	1859      	adds	r1, r3, r1
    21cc:	1949      	adds	r1, r1, r5
    21ce:	0020      	movs	r0, r4
    21d0:	bc0c      	pop	{r2, r3}
    21d2:	4690      	mov	r8, r2
    21d4:	4699      	mov	r9, r3
    21d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000021d8 <__libc_init_array>:
    21d8:	b570      	push	{r4, r5, r6, lr}
    21da:	2600      	movs	r6, #0
    21dc:	4d0c      	ldr	r5, [pc, #48]	; (2210 <__libc_init_array+0x38>)
    21de:	4c0d      	ldr	r4, [pc, #52]	; (2214 <__libc_init_array+0x3c>)
    21e0:	1b64      	subs	r4, r4, r5
    21e2:	10a4      	asrs	r4, r4, #2
    21e4:	42a6      	cmp	r6, r4
    21e6:	d109      	bne.n	21fc <__libc_init_array+0x24>
    21e8:	2600      	movs	r6, #0
    21ea:	f002 fb65 	bl	48b8 <_init>
    21ee:	4d0a      	ldr	r5, [pc, #40]	; (2218 <__libc_init_array+0x40>)
    21f0:	4c0a      	ldr	r4, [pc, #40]	; (221c <__libc_init_array+0x44>)
    21f2:	1b64      	subs	r4, r4, r5
    21f4:	10a4      	asrs	r4, r4, #2
    21f6:	42a6      	cmp	r6, r4
    21f8:	d105      	bne.n	2206 <__libc_init_array+0x2e>
    21fa:	bd70      	pop	{r4, r5, r6, pc}
    21fc:	00b3      	lsls	r3, r6, #2
    21fe:	58eb      	ldr	r3, [r5, r3]
    2200:	4798      	blx	r3
    2202:	3601      	adds	r6, #1
    2204:	e7ee      	b.n	21e4 <__libc_init_array+0xc>
    2206:	00b3      	lsls	r3, r6, #2
    2208:	58eb      	ldr	r3, [r5, r3]
    220a:	4798      	blx	r3
    220c:	3601      	adds	r6, #1
    220e:	e7f2      	b.n	21f6 <__libc_init_array+0x1e>
    2210:	000048c4 	.word	0x000048c4
    2214:	000048c4 	.word	0x000048c4
    2218:	000048c4 	.word	0x000048c4
    221c:	000048c8 	.word	0x000048c8

00002220 <memcpy>:
    2220:	2300      	movs	r3, #0
    2222:	b510      	push	{r4, lr}
    2224:	429a      	cmp	r2, r3
    2226:	d100      	bne.n	222a <memcpy+0xa>
    2228:	bd10      	pop	{r4, pc}
    222a:	5ccc      	ldrb	r4, [r1, r3]
    222c:	54c4      	strb	r4, [r0, r3]
    222e:	3301      	adds	r3, #1
    2230:	e7f8      	b.n	2224 <memcpy+0x4>

00002232 <memset>:
    2232:	0003      	movs	r3, r0
    2234:	1882      	adds	r2, r0, r2
    2236:	4293      	cmp	r3, r2
    2238:	d100      	bne.n	223c <memset+0xa>
    223a:	4770      	bx	lr
    223c:	7019      	strb	r1, [r3, #0]
    223e:	3301      	adds	r3, #1
    2240:	e7f9      	b.n	2236 <memset+0x4>
	...

00002244 <iprintf>:
    2244:	b40f      	push	{r0, r1, r2, r3}
    2246:	4b0b      	ldr	r3, [pc, #44]	; (2274 <iprintf+0x30>)
    2248:	b513      	push	{r0, r1, r4, lr}
    224a:	681c      	ldr	r4, [r3, #0]
    224c:	2c00      	cmp	r4, #0
    224e:	d005      	beq.n	225c <iprintf+0x18>
    2250:	69a3      	ldr	r3, [r4, #24]
    2252:	2b00      	cmp	r3, #0
    2254:	d102      	bne.n	225c <iprintf+0x18>
    2256:	0020      	movs	r0, r4
    2258:	f000 fb20 	bl	289c <__sinit>
    225c:	ab05      	add	r3, sp, #20
    225e:	9a04      	ldr	r2, [sp, #16]
    2260:	68a1      	ldr	r1, [r4, #8]
    2262:	0020      	movs	r0, r4
    2264:	9301      	str	r3, [sp, #4]
    2266:	f000 fd11 	bl	2c8c <_vfiprintf_r>
    226a:	bc16      	pop	{r1, r2, r4}
    226c:	bc08      	pop	{r3}
    226e:	b004      	add	sp, #16
    2270:	4718      	bx	r3
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	20000004 	.word	0x20000004

00002278 <_puts_r>:
    2278:	b570      	push	{r4, r5, r6, lr}
    227a:	0005      	movs	r5, r0
    227c:	000e      	movs	r6, r1
    227e:	2800      	cmp	r0, #0
    2280:	d004      	beq.n	228c <_puts_r+0x14>
    2282:	6983      	ldr	r3, [r0, #24]
    2284:	2b00      	cmp	r3, #0
    2286:	d101      	bne.n	228c <_puts_r+0x14>
    2288:	f000 fb08 	bl	289c <__sinit>
    228c:	69ab      	ldr	r3, [r5, #24]
    228e:	68ac      	ldr	r4, [r5, #8]
    2290:	2b00      	cmp	r3, #0
    2292:	d102      	bne.n	229a <_puts_r+0x22>
    2294:	0028      	movs	r0, r5
    2296:	f000 fb01 	bl	289c <__sinit>
    229a:	4b24      	ldr	r3, [pc, #144]	; (232c <_puts_r+0xb4>)
    229c:	429c      	cmp	r4, r3
    229e:	d10f      	bne.n	22c0 <_puts_r+0x48>
    22a0:	686c      	ldr	r4, [r5, #4]
    22a2:	89a3      	ldrh	r3, [r4, #12]
    22a4:	071b      	lsls	r3, r3, #28
    22a6:	d502      	bpl.n	22ae <_puts_r+0x36>
    22a8:	6923      	ldr	r3, [r4, #16]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d120      	bne.n	22f0 <_puts_r+0x78>
    22ae:	0021      	movs	r1, r4
    22b0:	0028      	movs	r0, r5
    22b2:	f000 f971 	bl	2598 <__swsetup_r>
    22b6:	2800      	cmp	r0, #0
    22b8:	d01a      	beq.n	22f0 <_puts_r+0x78>
    22ba:	2001      	movs	r0, #1
    22bc:	4240      	negs	r0, r0
    22be:	bd70      	pop	{r4, r5, r6, pc}
    22c0:	4b1b      	ldr	r3, [pc, #108]	; (2330 <_puts_r+0xb8>)
    22c2:	429c      	cmp	r4, r3
    22c4:	d101      	bne.n	22ca <_puts_r+0x52>
    22c6:	68ac      	ldr	r4, [r5, #8]
    22c8:	e7eb      	b.n	22a2 <_puts_r+0x2a>
    22ca:	4b1a      	ldr	r3, [pc, #104]	; (2334 <_puts_r+0xbc>)
    22cc:	429c      	cmp	r4, r3
    22ce:	d1e8      	bne.n	22a2 <_puts_r+0x2a>
    22d0:	68ec      	ldr	r4, [r5, #12]
    22d2:	e7e6      	b.n	22a2 <_puts_r+0x2a>
    22d4:	3b01      	subs	r3, #1
    22d6:	3601      	adds	r6, #1
    22d8:	60a3      	str	r3, [r4, #8]
    22da:	2b00      	cmp	r3, #0
    22dc:	da04      	bge.n	22e8 <_puts_r+0x70>
    22de:	69a2      	ldr	r2, [r4, #24]
    22e0:	4293      	cmp	r3, r2
    22e2:	db16      	blt.n	2312 <_puts_r+0x9a>
    22e4:	290a      	cmp	r1, #10
    22e6:	d014      	beq.n	2312 <_puts_r+0x9a>
    22e8:	6823      	ldr	r3, [r4, #0]
    22ea:	1c5a      	adds	r2, r3, #1
    22ec:	6022      	str	r2, [r4, #0]
    22ee:	7019      	strb	r1, [r3, #0]
    22f0:	7831      	ldrb	r1, [r6, #0]
    22f2:	68a3      	ldr	r3, [r4, #8]
    22f4:	2900      	cmp	r1, #0
    22f6:	d1ed      	bne.n	22d4 <_puts_r+0x5c>
    22f8:	3b01      	subs	r3, #1
    22fa:	60a3      	str	r3, [r4, #8]
    22fc:	2b00      	cmp	r3, #0
    22fe:	da0f      	bge.n	2320 <_puts_r+0xa8>
    2300:	0022      	movs	r2, r4
    2302:	310a      	adds	r1, #10
    2304:	0028      	movs	r0, r5
    2306:	f000 f8f1 	bl	24ec <__swbuf_r>
    230a:	1c43      	adds	r3, r0, #1
    230c:	d0d5      	beq.n	22ba <_puts_r+0x42>
    230e:	200a      	movs	r0, #10
    2310:	e7d5      	b.n	22be <_puts_r+0x46>
    2312:	0022      	movs	r2, r4
    2314:	0028      	movs	r0, r5
    2316:	f000 f8e9 	bl	24ec <__swbuf_r>
    231a:	1c43      	adds	r3, r0, #1
    231c:	d1e8      	bne.n	22f0 <_puts_r+0x78>
    231e:	e7cc      	b.n	22ba <_puts_r+0x42>
    2320:	200a      	movs	r0, #10
    2322:	6823      	ldr	r3, [r4, #0]
    2324:	1c5a      	adds	r2, r3, #1
    2326:	6022      	str	r2, [r4, #0]
    2328:	7018      	strb	r0, [r3, #0]
    232a:	e7c8      	b.n	22be <_puts_r+0x46>
    232c:	00004710 	.word	0x00004710
    2330:	00004730 	.word	0x00004730
    2334:	000046f0 	.word	0x000046f0

00002338 <puts>:
    2338:	b510      	push	{r4, lr}
    233a:	4b03      	ldr	r3, [pc, #12]	; (2348 <puts+0x10>)
    233c:	0001      	movs	r1, r0
    233e:	6818      	ldr	r0, [r3, #0]
    2340:	f7ff ff9a 	bl	2278 <_puts_r>
    2344:	bd10      	pop	{r4, pc}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	20000004 	.word	0x20000004

0000234c <iscanf>:
    234c:	b40f      	push	{r0, r1, r2, r3}
    234e:	4b0b      	ldr	r3, [pc, #44]	; (237c <iscanf+0x30>)
    2350:	b513      	push	{r0, r1, r4, lr}
    2352:	681c      	ldr	r4, [r3, #0]
    2354:	2c00      	cmp	r4, #0
    2356:	d005      	beq.n	2364 <iscanf+0x18>
    2358:	69a3      	ldr	r3, [r4, #24]
    235a:	2b00      	cmp	r3, #0
    235c:	d102      	bne.n	2364 <iscanf+0x18>
    235e:	0020      	movs	r0, r4
    2360:	f000 fa9c 	bl	289c <__sinit>
    2364:	ab05      	add	r3, sp, #20
    2366:	9a04      	ldr	r2, [sp, #16]
    2368:	6861      	ldr	r1, [r4, #4]
    236a:	0020      	movs	r0, r4
    236c:	9301      	str	r3, [sp, #4]
    236e:	f001 f8b7 	bl	34e0 <_vfiscanf_r>
    2372:	bc16      	pop	{r1, r2, r4}
    2374:	bc08      	pop	{r3}
    2376:	b004      	add	sp, #16
    2378:	4718      	bx	r3
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	20000004 	.word	0x20000004

00002380 <setbuf>:
    2380:	424a      	negs	r2, r1
    2382:	414a      	adcs	r2, r1
    2384:	2380      	movs	r3, #128	; 0x80
    2386:	b510      	push	{r4, lr}
    2388:	0052      	lsls	r2, r2, #1
    238a:	00db      	lsls	r3, r3, #3
    238c:	f000 f802 	bl	2394 <setvbuf>
    2390:	bd10      	pop	{r4, pc}
	...

00002394 <setvbuf>:
    2394:	b5f0      	push	{r4, r5, r6, r7, lr}
    2396:	001d      	movs	r5, r3
    2398:	4b4f      	ldr	r3, [pc, #316]	; (24d8 <setvbuf+0x144>)
    239a:	b085      	sub	sp, #20
    239c:	681e      	ldr	r6, [r3, #0]
    239e:	0004      	movs	r4, r0
    23a0:	000f      	movs	r7, r1
    23a2:	9200      	str	r2, [sp, #0]
    23a4:	2e00      	cmp	r6, #0
    23a6:	d005      	beq.n	23b4 <setvbuf+0x20>
    23a8:	69b3      	ldr	r3, [r6, #24]
    23aa:	2b00      	cmp	r3, #0
    23ac:	d102      	bne.n	23b4 <setvbuf+0x20>
    23ae:	0030      	movs	r0, r6
    23b0:	f000 fa74 	bl	289c <__sinit>
    23b4:	4b49      	ldr	r3, [pc, #292]	; (24dc <setvbuf+0x148>)
    23b6:	429c      	cmp	r4, r3
    23b8:	d150      	bne.n	245c <setvbuf+0xc8>
    23ba:	6874      	ldr	r4, [r6, #4]
    23bc:	9b00      	ldr	r3, [sp, #0]
    23be:	2b02      	cmp	r3, #2
    23c0:	d005      	beq.n	23ce <setvbuf+0x3a>
    23c2:	2b01      	cmp	r3, #1
    23c4:	d900      	bls.n	23c8 <setvbuf+0x34>
    23c6:	e084      	b.n	24d2 <setvbuf+0x13e>
    23c8:	2d00      	cmp	r5, #0
    23ca:	da00      	bge.n	23ce <setvbuf+0x3a>
    23cc:	e081      	b.n	24d2 <setvbuf+0x13e>
    23ce:	0021      	movs	r1, r4
    23d0:	0030      	movs	r0, r6
    23d2:	f000 f9e1 	bl	2798 <_fflush_r>
    23d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    23d8:	2900      	cmp	r1, #0
    23da:	d008      	beq.n	23ee <setvbuf+0x5a>
    23dc:	0023      	movs	r3, r4
    23de:	3344      	adds	r3, #68	; 0x44
    23e0:	4299      	cmp	r1, r3
    23e2:	d002      	beq.n	23ea <setvbuf+0x56>
    23e4:	0030      	movs	r0, r6
    23e6:	f000 fb81 	bl	2aec <_free_r>
    23ea:	2300      	movs	r3, #0
    23ec:	6363      	str	r3, [r4, #52]	; 0x34
    23ee:	2300      	movs	r3, #0
    23f0:	61a3      	str	r3, [r4, #24]
    23f2:	6063      	str	r3, [r4, #4]
    23f4:	89a3      	ldrh	r3, [r4, #12]
    23f6:	061b      	lsls	r3, r3, #24
    23f8:	d503      	bpl.n	2402 <setvbuf+0x6e>
    23fa:	6921      	ldr	r1, [r4, #16]
    23fc:	0030      	movs	r0, r6
    23fe:	f000 fb75 	bl	2aec <_free_r>
    2402:	89a3      	ldrh	r3, [r4, #12]
    2404:	4a36      	ldr	r2, [pc, #216]	; (24e0 <setvbuf+0x14c>)
    2406:	4013      	ands	r3, r2
    2408:	81a3      	strh	r3, [r4, #12]
    240a:	9b00      	ldr	r3, [sp, #0]
    240c:	2b02      	cmp	r3, #2
    240e:	d05a      	beq.n	24c6 <setvbuf+0x132>
    2410:	ab03      	add	r3, sp, #12
    2412:	aa02      	add	r2, sp, #8
    2414:	0021      	movs	r1, r4
    2416:	0030      	movs	r0, r6
    2418:	f000 faf2 	bl	2a00 <__swhatbuf_r>
    241c:	89a3      	ldrh	r3, [r4, #12]
    241e:	4318      	orrs	r0, r3
    2420:	81a0      	strh	r0, [r4, #12]
    2422:	2d00      	cmp	r5, #0
    2424:	d124      	bne.n	2470 <setvbuf+0xdc>
    2426:	9d02      	ldr	r5, [sp, #8]
    2428:	0028      	movs	r0, r5
    242a:	f000 fb55 	bl	2ad8 <malloc>
    242e:	9501      	str	r5, [sp, #4]
    2430:	1e07      	subs	r7, r0, #0
    2432:	d142      	bne.n	24ba <setvbuf+0x126>
    2434:	9b02      	ldr	r3, [sp, #8]
    2436:	9301      	str	r3, [sp, #4]
    2438:	42ab      	cmp	r3, r5
    243a:	d139      	bne.n	24b0 <setvbuf+0x11c>
    243c:	2001      	movs	r0, #1
    243e:	4240      	negs	r0, r0
    2440:	2302      	movs	r3, #2
    2442:	89a2      	ldrh	r2, [r4, #12]
    2444:	4313      	orrs	r3, r2
    2446:	81a3      	strh	r3, [r4, #12]
    2448:	2300      	movs	r3, #0
    244a:	60a3      	str	r3, [r4, #8]
    244c:	0023      	movs	r3, r4
    244e:	3347      	adds	r3, #71	; 0x47
    2450:	6023      	str	r3, [r4, #0]
    2452:	6123      	str	r3, [r4, #16]
    2454:	2301      	movs	r3, #1
    2456:	6163      	str	r3, [r4, #20]
    2458:	b005      	add	sp, #20
    245a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    245c:	4b21      	ldr	r3, [pc, #132]	; (24e4 <setvbuf+0x150>)
    245e:	429c      	cmp	r4, r3
    2460:	d101      	bne.n	2466 <setvbuf+0xd2>
    2462:	68b4      	ldr	r4, [r6, #8]
    2464:	e7aa      	b.n	23bc <setvbuf+0x28>
    2466:	4b20      	ldr	r3, [pc, #128]	; (24e8 <setvbuf+0x154>)
    2468:	429c      	cmp	r4, r3
    246a:	d1a7      	bne.n	23bc <setvbuf+0x28>
    246c:	68f4      	ldr	r4, [r6, #12]
    246e:	e7a5      	b.n	23bc <setvbuf+0x28>
    2470:	2f00      	cmp	r7, #0
    2472:	d0d9      	beq.n	2428 <setvbuf+0x94>
    2474:	69b3      	ldr	r3, [r6, #24]
    2476:	2b00      	cmp	r3, #0
    2478:	d102      	bne.n	2480 <setvbuf+0xec>
    247a:	0030      	movs	r0, r6
    247c:	f000 fa0e 	bl	289c <__sinit>
    2480:	9b00      	ldr	r3, [sp, #0]
    2482:	2b01      	cmp	r3, #1
    2484:	d103      	bne.n	248e <setvbuf+0xfa>
    2486:	89a3      	ldrh	r3, [r4, #12]
    2488:	9a00      	ldr	r2, [sp, #0]
    248a:	431a      	orrs	r2, r3
    248c:	81a2      	strh	r2, [r4, #12]
    248e:	2008      	movs	r0, #8
    2490:	89a3      	ldrh	r3, [r4, #12]
    2492:	6027      	str	r7, [r4, #0]
    2494:	6127      	str	r7, [r4, #16]
    2496:	6165      	str	r5, [r4, #20]
    2498:	4018      	ands	r0, r3
    249a:	d018      	beq.n	24ce <setvbuf+0x13a>
    249c:	2001      	movs	r0, #1
    249e:	4018      	ands	r0, r3
    24a0:	2300      	movs	r3, #0
    24a2:	4298      	cmp	r0, r3
    24a4:	d011      	beq.n	24ca <setvbuf+0x136>
    24a6:	426d      	negs	r5, r5
    24a8:	60a3      	str	r3, [r4, #8]
    24aa:	61a5      	str	r5, [r4, #24]
    24ac:	0018      	movs	r0, r3
    24ae:	e7d3      	b.n	2458 <setvbuf+0xc4>
    24b0:	9801      	ldr	r0, [sp, #4]
    24b2:	f000 fb11 	bl	2ad8 <malloc>
    24b6:	1e07      	subs	r7, r0, #0
    24b8:	d0c0      	beq.n	243c <setvbuf+0xa8>
    24ba:	2380      	movs	r3, #128	; 0x80
    24bc:	89a2      	ldrh	r2, [r4, #12]
    24be:	9d01      	ldr	r5, [sp, #4]
    24c0:	4313      	orrs	r3, r2
    24c2:	81a3      	strh	r3, [r4, #12]
    24c4:	e7d6      	b.n	2474 <setvbuf+0xe0>
    24c6:	2000      	movs	r0, #0
    24c8:	e7ba      	b.n	2440 <setvbuf+0xac>
    24ca:	60a5      	str	r5, [r4, #8]
    24cc:	e7c4      	b.n	2458 <setvbuf+0xc4>
    24ce:	60a0      	str	r0, [r4, #8]
    24d0:	e7c2      	b.n	2458 <setvbuf+0xc4>
    24d2:	2001      	movs	r0, #1
    24d4:	4240      	negs	r0, r0
    24d6:	e7bf      	b.n	2458 <setvbuf+0xc4>
    24d8:	20000004 	.word	0x20000004
    24dc:	00004710 	.word	0x00004710
    24e0:	fffff35c 	.word	0xfffff35c
    24e4:	00004730 	.word	0x00004730
    24e8:	000046f0 	.word	0x000046f0

000024ec <__swbuf_r>:
    24ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24ee:	0005      	movs	r5, r0
    24f0:	000e      	movs	r6, r1
    24f2:	0014      	movs	r4, r2
    24f4:	2800      	cmp	r0, #0
    24f6:	d004      	beq.n	2502 <__swbuf_r+0x16>
    24f8:	6983      	ldr	r3, [r0, #24]
    24fa:	2b00      	cmp	r3, #0
    24fc:	d101      	bne.n	2502 <__swbuf_r+0x16>
    24fe:	f000 f9cd 	bl	289c <__sinit>
    2502:	4b22      	ldr	r3, [pc, #136]	; (258c <__swbuf_r+0xa0>)
    2504:	429c      	cmp	r4, r3
    2506:	d12d      	bne.n	2564 <__swbuf_r+0x78>
    2508:	686c      	ldr	r4, [r5, #4]
    250a:	69a3      	ldr	r3, [r4, #24]
    250c:	60a3      	str	r3, [r4, #8]
    250e:	89a3      	ldrh	r3, [r4, #12]
    2510:	071b      	lsls	r3, r3, #28
    2512:	d531      	bpl.n	2578 <__swbuf_r+0x8c>
    2514:	6923      	ldr	r3, [r4, #16]
    2516:	2b00      	cmp	r3, #0
    2518:	d02e      	beq.n	2578 <__swbuf_r+0x8c>
    251a:	6823      	ldr	r3, [r4, #0]
    251c:	6922      	ldr	r2, [r4, #16]
    251e:	b2f7      	uxtb	r7, r6
    2520:	1a98      	subs	r0, r3, r2
    2522:	6963      	ldr	r3, [r4, #20]
    2524:	b2f6      	uxtb	r6, r6
    2526:	4298      	cmp	r0, r3
    2528:	db05      	blt.n	2536 <__swbuf_r+0x4a>
    252a:	0021      	movs	r1, r4
    252c:	0028      	movs	r0, r5
    252e:	f000 f933 	bl	2798 <_fflush_r>
    2532:	2800      	cmp	r0, #0
    2534:	d126      	bne.n	2584 <__swbuf_r+0x98>
    2536:	68a3      	ldr	r3, [r4, #8]
    2538:	3001      	adds	r0, #1
    253a:	3b01      	subs	r3, #1
    253c:	60a3      	str	r3, [r4, #8]
    253e:	6823      	ldr	r3, [r4, #0]
    2540:	1c5a      	adds	r2, r3, #1
    2542:	6022      	str	r2, [r4, #0]
    2544:	701f      	strb	r7, [r3, #0]
    2546:	6963      	ldr	r3, [r4, #20]
    2548:	4298      	cmp	r0, r3
    254a:	d004      	beq.n	2556 <__swbuf_r+0x6a>
    254c:	89a3      	ldrh	r3, [r4, #12]
    254e:	07db      	lsls	r3, r3, #31
    2550:	d51a      	bpl.n	2588 <__swbuf_r+0x9c>
    2552:	2e0a      	cmp	r6, #10
    2554:	d118      	bne.n	2588 <__swbuf_r+0x9c>
    2556:	0021      	movs	r1, r4
    2558:	0028      	movs	r0, r5
    255a:	f000 f91d 	bl	2798 <_fflush_r>
    255e:	2800      	cmp	r0, #0
    2560:	d012      	beq.n	2588 <__swbuf_r+0x9c>
    2562:	e00f      	b.n	2584 <__swbuf_r+0x98>
    2564:	4b0a      	ldr	r3, [pc, #40]	; (2590 <__swbuf_r+0xa4>)
    2566:	429c      	cmp	r4, r3
    2568:	d101      	bne.n	256e <__swbuf_r+0x82>
    256a:	68ac      	ldr	r4, [r5, #8]
    256c:	e7cd      	b.n	250a <__swbuf_r+0x1e>
    256e:	4b09      	ldr	r3, [pc, #36]	; (2594 <__swbuf_r+0xa8>)
    2570:	429c      	cmp	r4, r3
    2572:	d1ca      	bne.n	250a <__swbuf_r+0x1e>
    2574:	68ec      	ldr	r4, [r5, #12]
    2576:	e7c8      	b.n	250a <__swbuf_r+0x1e>
    2578:	0021      	movs	r1, r4
    257a:	0028      	movs	r0, r5
    257c:	f000 f80c 	bl	2598 <__swsetup_r>
    2580:	2800      	cmp	r0, #0
    2582:	d0ca      	beq.n	251a <__swbuf_r+0x2e>
    2584:	2601      	movs	r6, #1
    2586:	4276      	negs	r6, r6
    2588:	0030      	movs	r0, r6
    258a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    258c:	00004710 	.word	0x00004710
    2590:	00004730 	.word	0x00004730
    2594:	000046f0 	.word	0x000046f0

00002598 <__swsetup_r>:
    2598:	4b36      	ldr	r3, [pc, #216]	; (2674 <__swsetup_r+0xdc>)
    259a:	b570      	push	{r4, r5, r6, lr}
    259c:	681d      	ldr	r5, [r3, #0]
    259e:	0006      	movs	r6, r0
    25a0:	000c      	movs	r4, r1
    25a2:	2d00      	cmp	r5, #0
    25a4:	d005      	beq.n	25b2 <__swsetup_r+0x1a>
    25a6:	69ab      	ldr	r3, [r5, #24]
    25a8:	2b00      	cmp	r3, #0
    25aa:	d102      	bne.n	25b2 <__swsetup_r+0x1a>
    25ac:	0028      	movs	r0, r5
    25ae:	f000 f975 	bl	289c <__sinit>
    25b2:	4b31      	ldr	r3, [pc, #196]	; (2678 <__swsetup_r+0xe0>)
    25b4:	429c      	cmp	r4, r3
    25b6:	d10f      	bne.n	25d8 <__swsetup_r+0x40>
    25b8:	686c      	ldr	r4, [r5, #4]
    25ba:	230c      	movs	r3, #12
    25bc:	5ee2      	ldrsh	r2, [r4, r3]
    25be:	b293      	uxth	r3, r2
    25c0:	0719      	lsls	r1, r3, #28
    25c2:	d42d      	bmi.n	2620 <__swsetup_r+0x88>
    25c4:	06d9      	lsls	r1, r3, #27
    25c6:	d411      	bmi.n	25ec <__swsetup_r+0x54>
    25c8:	2309      	movs	r3, #9
    25ca:	2001      	movs	r0, #1
    25cc:	6033      	str	r3, [r6, #0]
    25ce:	3337      	adds	r3, #55	; 0x37
    25d0:	4313      	orrs	r3, r2
    25d2:	81a3      	strh	r3, [r4, #12]
    25d4:	4240      	negs	r0, r0
    25d6:	bd70      	pop	{r4, r5, r6, pc}
    25d8:	4b28      	ldr	r3, [pc, #160]	; (267c <__swsetup_r+0xe4>)
    25da:	429c      	cmp	r4, r3
    25dc:	d101      	bne.n	25e2 <__swsetup_r+0x4a>
    25de:	68ac      	ldr	r4, [r5, #8]
    25e0:	e7eb      	b.n	25ba <__swsetup_r+0x22>
    25e2:	4b27      	ldr	r3, [pc, #156]	; (2680 <__swsetup_r+0xe8>)
    25e4:	429c      	cmp	r4, r3
    25e6:	d1e8      	bne.n	25ba <__swsetup_r+0x22>
    25e8:	68ec      	ldr	r4, [r5, #12]
    25ea:	e7e6      	b.n	25ba <__swsetup_r+0x22>
    25ec:	075b      	lsls	r3, r3, #29
    25ee:	d513      	bpl.n	2618 <__swsetup_r+0x80>
    25f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    25f2:	2900      	cmp	r1, #0
    25f4:	d008      	beq.n	2608 <__swsetup_r+0x70>
    25f6:	0023      	movs	r3, r4
    25f8:	3344      	adds	r3, #68	; 0x44
    25fa:	4299      	cmp	r1, r3
    25fc:	d002      	beq.n	2604 <__swsetup_r+0x6c>
    25fe:	0030      	movs	r0, r6
    2600:	f000 fa74 	bl	2aec <_free_r>
    2604:	2300      	movs	r3, #0
    2606:	6363      	str	r3, [r4, #52]	; 0x34
    2608:	2224      	movs	r2, #36	; 0x24
    260a:	89a3      	ldrh	r3, [r4, #12]
    260c:	4393      	bics	r3, r2
    260e:	81a3      	strh	r3, [r4, #12]
    2610:	2300      	movs	r3, #0
    2612:	6063      	str	r3, [r4, #4]
    2614:	6923      	ldr	r3, [r4, #16]
    2616:	6023      	str	r3, [r4, #0]
    2618:	2308      	movs	r3, #8
    261a:	89a2      	ldrh	r2, [r4, #12]
    261c:	4313      	orrs	r3, r2
    261e:	81a3      	strh	r3, [r4, #12]
    2620:	6923      	ldr	r3, [r4, #16]
    2622:	2b00      	cmp	r3, #0
    2624:	d10b      	bne.n	263e <__swsetup_r+0xa6>
    2626:	21a0      	movs	r1, #160	; 0xa0
    2628:	2280      	movs	r2, #128	; 0x80
    262a:	89a3      	ldrh	r3, [r4, #12]
    262c:	0089      	lsls	r1, r1, #2
    262e:	0092      	lsls	r2, r2, #2
    2630:	400b      	ands	r3, r1
    2632:	4293      	cmp	r3, r2
    2634:	d003      	beq.n	263e <__swsetup_r+0xa6>
    2636:	0021      	movs	r1, r4
    2638:	0030      	movs	r0, r6
    263a:	f000 fa09 	bl	2a50 <__smakebuf_r>
    263e:	2301      	movs	r3, #1
    2640:	89a2      	ldrh	r2, [r4, #12]
    2642:	4013      	ands	r3, r2
    2644:	d011      	beq.n	266a <__swsetup_r+0xd2>
    2646:	2300      	movs	r3, #0
    2648:	60a3      	str	r3, [r4, #8]
    264a:	6963      	ldr	r3, [r4, #20]
    264c:	425b      	negs	r3, r3
    264e:	61a3      	str	r3, [r4, #24]
    2650:	2000      	movs	r0, #0
    2652:	6923      	ldr	r3, [r4, #16]
    2654:	4283      	cmp	r3, r0
    2656:	d1be      	bne.n	25d6 <__swsetup_r+0x3e>
    2658:	230c      	movs	r3, #12
    265a:	5ee2      	ldrsh	r2, [r4, r3]
    265c:	0613      	lsls	r3, r2, #24
    265e:	d5ba      	bpl.n	25d6 <__swsetup_r+0x3e>
    2660:	2340      	movs	r3, #64	; 0x40
    2662:	4313      	orrs	r3, r2
    2664:	81a3      	strh	r3, [r4, #12]
    2666:	3801      	subs	r0, #1
    2668:	e7b5      	b.n	25d6 <__swsetup_r+0x3e>
    266a:	0792      	lsls	r2, r2, #30
    266c:	d400      	bmi.n	2670 <__swsetup_r+0xd8>
    266e:	6963      	ldr	r3, [r4, #20]
    2670:	60a3      	str	r3, [r4, #8]
    2672:	e7ed      	b.n	2650 <__swsetup_r+0xb8>
    2674:	20000004 	.word	0x20000004
    2678:	00004710 	.word	0x00004710
    267c:	00004730 	.word	0x00004730
    2680:	000046f0 	.word	0x000046f0

00002684 <__sflush_r>:
    2684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2686:	898a      	ldrh	r2, [r1, #12]
    2688:	0005      	movs	r5, r0
    268a:	000c      	movs	r4, r1
    268c:	0713      	lsls	r3, r2, #28
    268e:	d460      	bmi.n	2752 <__sflush_r+0xce>
    2690:	684b      	ldr	r3, [r1, #4]
    2692:	2b00      	cmp	r3, #0
    2694:	dc04      	bgt.n	26a0 <__sflush_r+0x1c>
    2696:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2698:	2b00      	cmp	r3, #0
    269a:	dc01      	bgt.n	26a0 <__sflush_r+0x1c>
    269c:	2000      	movs	r0, #0
    269e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    26a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    26a2:	2f00      	cmp	r7, #0
    26a4:	d0fa      	beq.n	269c <__sflush_r+0x18>
    26a6:	2300      	movs	r3, #0
    26a8:	682e      	ldr	r6, [r5, #0]
    26aa:	602b      	str	r3, [r5, #0]
    26ac:	2380      	movs	r3, #128	; 0x80
    26ae:	015b      	lsls	r3, r3, #5
    26b0:	401a      	ands	r2, r3
    26b2:	d034      	beq.n	271e <__sflush_r+0x9a>
    26b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    26b6:	89a3      	ldrh	r3, [r4, #12]
    26b8:	075b      	lsls	r3, r3, #29
    26ba:	d506      	bpl.n	26ca <__sflush_r+0x46>
    26bc:	6863      	ldr	r3, [r4, #4]
    26be:	1ac0      	subs	r0, r0, r3
    26c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    26c2:	2b00      	cmp	r3, #0
    26c4:	d001      	beq.n	26ca <__sflush_r+0x46>
    26c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    26c8:	1ac0      	subs	r0, r0, r3
    26ca:	0002      	movs	r2, r0
    26cc:	6a21      	ldr	r1, [r4, #32]
    26ce:	2300      	movs	r3, #0
    26d0:	0028      	movs	r0, r5
    26d2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    26d4:	47b8      	blx	r7
    26d6:	89a1      	ldrh	r1, [r4, #12]
    26d8:	1c43      	adds	r3, r0, #1
    26da:	d106      	bne.n	26ea <__sflush_r+0x66>
    26dc:	682b      	ldr	r3, [r5, #0]
    26de:	2b1d      	cmp	r3, #29
    26e0:	d831      	bhi.n	2746 <__sflush_r+0xc2>
    26e2:	4a2c      	ldr	r2, [pc, #176]	; (2794 <__sflush_r+0x110>)
    26e4:	40da      	lsrs	r2, r3
    26e6:	07d3      	lsls	r3, r2, #31
    26e8:	d52d      	bpl.n	2746 <__sflush_r+0xc2>
    26ea:	2300      	movs	r3, #0
    26ec:	6063      	str	r3, [r4, #4]
    26ee:	6923      	ldr	r3, [r4, #16]
    26f0:	6023      	str	r3, [r4, #0]
    26f2:	04cb      	lsls	r3, r1, #19
    26f4:	d505      	bpl.n	2702 <__sflush_r+0x7e>
    26f6:	1c43      	adds	r3, r0, #1
    26f8:	d102      	bne.n	2700 <__sflush_r+0x7c>
    26fa:	682b      	ldr	r3, [r5, #0]
    26fc:	2b00      	cmp	r3, #0
    26fe:	d100      	bne.n	2702 <__sflush_r+0x7e>
    2700:	6560      	str	r0, [r4, #84]	; 0x54
    2702:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2704:	602e      	str	r6, [r5, #0]
    2706:	2900      	cmp	r1, #0
    2708:	d0c8      	beq.n	269c <__sflush_r+0x18>
    270a:	0023      	movs	r3, r4
    270c:	3344      	adds	r3, #68	; 0x44
    270e:	4299      	cmp	r1, r3
    2710:	d002      	beq.n	2718 <__sflush_r+0x94>
    2712:	0028      	movs	r0, r5
    2714:	f000 f9ea 	bl	2aec <_free_r>
    2718:	2000      	movs	r0, #0
    271a:	6360      	str	r0, [r4, #52]	; 0x34
    271c:	e7bf      	b.n	269e <__sflush_r+0x1a>
    271e:	2301      	movs	r3, #1
    2720:	6a21      	ldr	r1, [r4, #32]
    2722:	0028      	movs	r0, r5
    2724:	47b8      	blx	r7
    2726:	1c43      	adds	r3, r0, #1
    2728:	d1c5      	bne.n	26b6 <__sflush_r+0x32>
    272a:	682b      	ldr	r3, [r5, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d0c2      	beq.n	26b6 <__sflush_r+0x32>
    2730:	2b1d      	cmp	r3, #29
    2732:	d001      	beq.n	2738 <__sflush_r+0xb4>
    2734:	2b16      	cmp	r3, #22
    2736:	d101      	bne.n	273c <__sflush_r+0xb8>
    2738:	602e      	str	r6, [r5, #0]
    273a:	e7af      	b.n	269c <__sflush_r+0x18>
    273c:	2340      	movs	r3, #64	; 0x40
    273e:	89a2      	ldrh	r2, [r4, #12]
    2740:	4313      	orrs	r3, r2
    2742:	81a3      	strh	r3, [r4, #12]
    2744:	e7ab      	b.n	269e <__sflush_r+0x1a>
    2746:	2340      	movs	r3, #64	; 0x40
    2748:	430b      	orrs	r3, r1
    274a:	2001      	movs	r0, #1
    274c:	81a3      	strh	r3, [r4, #12]
    274e:	4240      	negs	r0, r0
    2750:	e7a5      	b.n	269e <__sflush_r+0x1a>
    2752:	690f      	ldr	r7, [r1, #16]
    2754:	2f00      	cmp	r7, #0
    2756:	d0a1      	beq.n	269c <__sflush_r+0x18>
    2758:	680b      	ldr	r3, [r1, #0]
    275a:	600f      	str	r7, [r1, #0]
    275c:	1bdb      	subs	r3, r3, r7
    275e:	9301      	str	r3, [sp, #4]
    2760:	2300      	movs	r3, #0
    2762:	0792      	lsls	r2, r2, #30
    2764:	d100      	bne.n	2768 <__sflush_r+0xe4>
    2766:	694b      	ldr	r3, [r1, #20]
    2768:	60a3      	str	r3, [r4, #8]
    276a:	9b01      	ldr	r3, [sp, #4]
    276c:	2b00      	cmp	r3, #0
    276e:	dc00      	bgt.n	2772 <__sflush_r+0xee>
    2770:	e794      	b.n	269c <__sflush_r+0x18>
    2772:	9b01      	ldr	r3, [sp, #4]
    2774:	003a      	movs	r2, r7
    2776:	6a21      	ldr	r1, [r4, #32]
    2778:	0028      	movs	r0, r5
    277a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    277c:	47b0      	blx	r6
    277e:	2800      	cmp	r0, #0
    2780:	dc03      	bgt.n	278a <__sflush_r+0x106>
    2782:	2340      	movs	r3, #64	; 0x40
    2784:	89a2      	ldrh	r2, [r4, #12]
    2786:	4313      	orrs	r3, r2
    2788:	e7df      	b.n	274a <__sflush_r+0xc6>
    278a:	9b01      	ldr	r3, [sp, #4]
    278c:	183f      	adds	r7, r7, r0
    278e:	1a1b      	subs	r3, r3, r0
    2790:	9301      	str	r3, [sp, #4]
    2792:	e7ea      	b.n	276a <__sflush_r+0xe6>
    2794:	20400001 	.word	0x20400001

00002798 <_fflush_r>:
    2798:	690b      	ldr	r3, [r1, #16]
    279a:	b570      	push	{r4, r5, r6, lr}
    279c:	0005      	movs	r5, r0
    279e:	000c      	movs	r4, r1
    27a0:	2b00      	cmp	r3, #0
    27a2:	d101      	bne.n	27a8 <_fflush_r+0x10>
    27a4:	2000      	movs	r0, #0
    27a6:	bd70      	pop	{r4, r5, r6, pc}
    27a8:	2800      	cmp	r0, #0
    27aa:	d004      	beq.n	27b6 <_fflush_r+0x1e>
    27ac:	6983      	ldr	r3, [r0, #24]
    27ae:	2b00      	cmp	r3, #0
    27b0:	d101      	bne.n	27b6 <_fflush_r+0x1e>
    27b2:	f000 f873 	bl	289c <__sinit>
    27b6:	4b0b      	ldr	r3, [pc, #44]	; (27e4 <_fflush_r+0x4c>)
    27b8:	429c      	cmp	r4, r3
    27ba:	d109      	bne.n	27d0 <_fflush_r+0x38>
    27bc:	686c      	ldr	r4, [r5, #4]
    27be:	220c      	movs	r2, #12
    27c0:	5ea3      	ldrsh	r3, [r4, r2]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d0ee      	beq.n	27a4 <_fflush_r+0xc>
    27c6:	0021      	movs	r1, r4
    27c8:	0028      	movs	r0, r5
    27ca:	f7ff ff5b 	bl	2684 <__sflush_r>
    27ce:	e7ea      	b.n	27a6 <_fflush_r+0xe>
    27d0:	4b05      	ldr	r3, [pc, #20]	; (27e8 <_fflush_r+0x50>)
    27d2:	429c      	cmp	r4, r3
    27d4:	d101      	bne.n	27da <_fflush_r+0x42>
    27d6:	68ac      	ldr	r4, [r5, #8]
    27d8:	e7f1      	b.n	27be <_fflush_r+0x26>
    27da:	4b04      	ldr	r3, [pc, #16]	; (27ec <_fflush_r+0x54>)
    27dc:	429c      	cmp	r4, r3
    27de:	d1ee      	bne.n	27be <_fflush_r+0x26>
    27e0:	68ec      	ldr	r4, [r5, #12]
    27e2:	e7ec      	b.n	27be <_fflush_r+0x26>
    27e4:	00004710 	.word	0x00004710
    27e8:	00004730 	.word	0x00004730
    27ec:	000046f0 	.word	0x000046f0

000027f0 <fflush>:
    27f0:	b510      	push	{r4, lr}
    27f2:	1e01      	subs	r1, r0, #0
    27f4:	d105      	bne.n	2802 <fflush+0x12>
    27f6:	4b05      	ldr	r3, [pc, #20]	; (280c <fflush+0x1c>)
    27f8:	4905      	ldr	r1, [pc, #20]	; (2810 <fflush+0x20>)
    27fa:	6818      	ldr	r0, [r3, #0]
    27fc:	f000 f8de 	bl	29bc <_fwalk_reent>
    2800:	bd10      	pop	{r4, pc}
    2802:	4b04      	ldr	r3, [pc, #16]	; (2814 <fflush+0x24>)
    2804:	6818      	ldr	r0, [r3, #0]
    2806:	f7ff ffc7 	bl	2798 <_fflush_r>
    280a:	e7f9      	b.n	2800 <fflush+0x10>
    280c:	000046ec 	.word	0x000046ec
    2810:	00002799 	.word	0x00002799
    2814:	20000004 	.word	0x20000004

00002818 <_cleanup_r>:
    2818:	b510      	push	{r4, lr}
    281a:	4902      	ldr	r1, [pc, #8]	; (2824 <_cleanup_r+0xc>)
    281c:	f000 f8ce 	bl	29bc <_fwalk_reent>
    2820:	bd10      	pop	{r4, pc}
    2822:	46c0      	nop			; (mov r8, r8)
    2824:	00002799 	.word	0x00002799

00002828 <std.isra.0>:
    2828:	2300      	movs	r3, #0
    282a:	b510      	push	{r4, lr}
    282c:	0004      	movs	r4, r0
    282e:	6003      	str	r3, [r0, #0]
    2830:	6043      	str	r3, [r0, #4]
    2832:	6083      	str	r3, [r0, #8]
    2834:	8181      	strh	r1, [r0, #12]
    2836:	6643      	str	r3, [r0, #100]	; 0x64
    2838:	81c2      	strh	r2, [r0, #14]
    283a:	6103      	str	r3, [r0, #16]
    283c:	6143      	str	r3, [r0, #20]
    283e:	6183      	str	r3, [r0, #24]
    2840:	0019      	movs	r1, r3
    2842:	2208      	movs	r2, #8
    2844:	305c      	adds	r0, #92	; 0x5c
    2846:	f7ff fcf4 	bl	2232 <memset>
    284a:	4b05      	ldr	r3, [pc, #20]	; (2860 <std.isra.0+0x38>)
    284c:	6224      	str	r4, [r4, #32]
    284e:	6263      	str	r3, [r4, #36]	; 0x24
    2850:	4b04      	ldr	r3, [pc, #16]	; (2864 <std.isra.0+0x3c>)
    2852:	62a3      	str	r3, [r4, #40]	; 0x28
    2854:	4b04      	ldr	r3, [pc, #16]	; (2868 <std.isra.0+0x40>)
    2856:	62e3      	str	r3, [r4, #44]	; 0x2c
    2858:	4b04      	ldr	r3, [pc, #16]	; (286c <std.isra.0+0x44>)
    285a:	6323      	str	r3, [r4, #48]	; 0x30
    285c:	bd10      	pop	{r4, pc}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	000039b9 	.word	0x000039b9
    2864:	000039e1 	.word	0x000039e1
    2868:	00003a19 	.word	0x00003a19
    286c:	00003a45 	.word	0x00003a45

00002870 <__sfmoreglue>:
    2870:	b570      	push	{r4, r5, r6, lr}
    2872:	2568      	movs	r5, #104	; 0x68
    2874:	1e4a      	subs	r2, r1, #1
    2876:	4355      	muls	r5, r2
    2878:	000e      	movs	r6, r1
    287a:	0029      	movs	r1, r5
    287c:	3174      	adds	r1, #116	; 0x74
    287e:	f000 f97f 	bl	2b80 <_malloc_r>
    2882:	1e04      	subs	r4, r0, #0
    2884:	d008      	beq.n	2898 <__sfmoreglue+0x28>
    2886:	2100      	movs	r1, #0
    2888:	002a      	movs	r2, r5
    288a:	6001      	str	r1, [r0, #0]
    288c:	6046      	str	r6, [r0, #4]
    288e:	300c      	adds	r0, #12
    2890:	60a0      	str	r0, [r4, #8]
    2892:	3268      	adds	r2, #104	; 0x68
    2894:	f7ff fccd 	bl	2232 <memset>
    2898:	0020      	movs	r0, r4
    289a:	bd70      	pop	{r4, r5, r6, pc}

0000289c <__sinit>:
    289c:	6983      	ldr	r3, [r0, #24]
    289e:	b513      	push	{r0, r1, r4, lr}
    28a0:	0004      	movs	r4, r0
    28a2:	2b00      	cmp	r3, #0
    28a4:	d128      	bne.n	28f8 <__sinit+0x5c>
    28a6:	6483      	str	r3, [r0, #72]	; 0x48
    28a8:	64c3      	str	r3, [r0, #76]	; 0x4c
    28aa:	6503      	str	r3, [r0, #80]	; 0x50
    28ac:	4b13      	ldr	r3, [pc, #76]	; (28fc <__sinit+0x60>)
    28ae:	4a14      	ldr	r2, [pc, #80]	; (2900 <__sinit+0x64>)
    28b0:	681b      	ldr	r3, [r3, #0]
    28b2:	6282      	str	r2, [r0, #40]	; 0x28
    28b4:	9301      	str	r3, [sp, #4]
    28b6:	4298      	cmp	r0, r3
    28b8:	d101      	bne.n	28be <__sinit+0x22>
    28ba:	2301      	movs	r3, #1
    28bc:	6183      	str	r3, [r0, #24]
    28be:	0020      	movs	r0, r4
    28c0:	f000 f820 	bl	2904 <__sfp>
    28c4:	6060      	str	r0, [r4, #4]
    28c6:	0020      	movs	r0, r4
    28c8:	f000 f81c 	bl	2904 <__sfp>
    28cc:	60a0      	str	r0, [r4, #8]
    28ce:	0020      	movs	r0, r4
    28d0:	f000 f818 	bl	2904 <__sfp>
    28d4:	2200      	movs	r2, #0
    28d6:	60e0      	str	r0, [r4, #12]
    28d8:	2104      	movs	r1, #4
    28da:	6860      	ldr	r0, [r4, #4]
    28dc:	f7ff ffa4 	bl	2828 <std.isra.0>
    28e0:	2201      	movs	r2, #1
    28e2:	2109      	movs	r1, #9
    28e4:	68a0      	ldr	r0, [r4, #8]
    28e6:	f7ff ff9f 	bl	2828 <std.isra.0>
    28ea:	2202      	movs	r2, #2
    28ec:	2112      	movs	r1, #18
    28ee:	68e0      	ldr	r0, [r4, #12]
    28f0:	f7ff ff9a 	bl	2828 <std.isra.0>
    28f4:	2301      	movs	r3, #1
    28f6:	61a3      	str	r3, [r4, #24]
    28f8:	bd13      	pop	{r0, r1, r4, pc}
    28fa:	46c0      	nop			; (mov r8, r8)
    28fc:	000046ec 	.word	0x000046ec
    2900:	00002819 	.word	0x00002819

00002904 <__sfp>:
    2904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2906:	4b1e      	ldr	r3, [pc, #120]	; (2980 <__sfp+0x7c>)
    2908:	0007      	movs	r7, r0
    290a:	681e      	ldr	r6, [r3, #0]
    290c:	69b3      	ldr	r3, [r6, #24]
    290e:	2b00      	cmp	r3, #0
    2910:	d102      	bne.n	2918 <__sfp+0x14>
    2912:	0030      	movs	r0, r6
    2914:	f7ff ffc2 	bl	289c <__sinit>
    2918:	3648      	adds	r6, #72	; 0x48
    291a:	68b4      	ldr	r4, [r6, #8]
    291c:	6873      	ldr	r3, [r6, #4]
    291e:	3b01      	subs	r3, #1
    2920:	d504      	bpl.n	292c <__sfp+0x28>
    2922:	6833      	ldr	r3, [r6, #0]
    2924:	2b00      	cmp	r3, #0
    2926:	d007      	beq.n	2938 <__sfp+0x34>
    2928:	6836      	ldr	r6, [r6, #0]
    292a:	e7f6      	b.n	291a <__sfp+0x16>
    292c:	220c      	movs	r2, #12
    292e:	5ea5      	ldrsh	r5, [r4, r2]
    2930:	2d00      	cmp	r5, #0
    2932:	d00d      	beq.n	2950 <__sfp+0x4c>
    2934:	3468      	adds	r4, #104	; 0x68
    2936:	e7f2      	b.n	291e <__sfp+0x1a>
    2938:	2104      	movs	r1, #4
    293a:	0038      	movs	r0, r7
    293c:	f7ff ff98 	bl	2870 <__sfmoreglue>
    2940:	6030      	str	r0, [r6, #0]
    2942:	2800      	cmp	r0, #0
    2944:	d1f0      	bne.n	2928 <__sfp+0x24>
    2946:	230c      	movs	r3, #12
    2948:	0004      	movs	r4, r0
    294a:	603b      	str	r3, [r7, #0]
    294c:	0020      	movs	r0, r4
    294e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2950:	2301      	movs	r3, #1
    2952:	0020      	movs	r0, r4
    2954:	425b      	negs	r3, r3
    2956:	81e3      	strh	r3, [r4, #14]
    2958:	3302      	adds	r3, #2
    295a:	81a3      	strh	r3, [r4, #12]
    295c:	6665      	str	r5, [r4, #100]	; 0x64
    295e:	6025      	str	r5, [r4, #0]
    2960:	60a5      	str	r5, [r4, #8]
    2962:	6065      	str	r5, [r4, #4]
    2964:	6125      	str	r5, [r4, #16]
    2966:	6165      	str	r5, [r4, #20]
    2968:	61a5      	str	r5, [r4, #24]
    296a:	2208      	movs	r2, #8
    296c:	0029      	movs	r1, r5
    296e:	305c      	adds	r0, #92	; 0x5c
    2970:	f7ff fc5f 	bl	2232 <memset>
    2974:	6365      	str	r5, [r4, #52]	; 0x34
    2976:	63a5      	str	r5, [r4, #56]	; 0x38
    2978:	64a5      	str	r5, [r4, #72]	; 0x48
    297a:	64e5      	str	r5, [r4, #76]	; 0x4c
    297c:	e7e6      	b.n	294c <__sfp+0x48>
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	000046ec 	.word	0x000046ec

00002984 <_fwalk>:
    2984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2986:	3048      	adds	r0, #72	; 0x48
    2988:	0004      	movs	r4, r0
    298a:	2600      	movs	r6, #0
    298c:	9101      	str	r1, [sp, #4]
    298e:	2c00      	cmp	r4, #0
    2990:	d101      	bne.n	2996 <_fwalk+0x12>
    2992:	0030      	movs	r0, r6
    2994:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2996:	68a5      	ldr	r5, [r4, #8]
    2998:	6867      	ldr	r7, [r4, #4]
    299a:	3f01      	subs	r7, #1
    299c:	d501      	bpl.n	29a2 <_fwalk+0x1e>
    299e:	6824      	ldr	r4, [r4, #0]
    29a0:	e7f5      	b.n	298e <_fwalk+0xa>
    29a2:	89ab      	ldrh	r3, [r5, #12]
    29a4:	2b01      	cmp	r3, #1
    29a6:	d907      	bls.n	29b8 <_fwalk+0x34>
    29a8:	220e      	movs	r2, #14
    29aa:	5eab      	ldrsh	r3, [r5, r2]
    29ac:	3301      	adds	r3, #1
    29ae:	d003      	beq.n	29b8 <_fwalk+0x34>
    29b0:	0028      	movs	r0, r5
    29b2:	9b01      	ldr	r3, [sp, #4]
    29b4:	4798      	blx	r3
    29b6:	4306      	orrs	r6, r0
    29b8:	3568      	adds	r5, #104	; 0x68
    29ba:	e7ee      	b.n	299a <_fwalk+0x16>

000029bc <_fwalk_reent>:
    29bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    29be:	0004      	movs	r4, r0
    29c0:	0007      	movs	r7, r0
    29c2:	2600      	movs	r6, #0
    29c4:	9101      	str	r1, [sp, #4]
    29c6:	3448      	adds	r4, #72	; 0x48
    29c8:	2c00      	cmp	r4, #0
    29ca:	d101      	bne.n	29d0 <_fwalk_reent+0x14>
    29cc:	0030      	movs	r0, r6
    29ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    29d0:	6863      	ldr	r3, [r4, #4]
    29d2:	68a5      	ldr	r5, [r4, #8]
    29d4:	9300      	str	r3, [sp, #0]
    29d6:	9b00      	ldr	r3, [sp, #0]
    29d8:	3b01      	subs	r3, #1
    29da:	9300      	str	r3, [sp, #0]
    29dc:	d501      	bpl.n	29e2 <_fwalk_reent+0x26>
    29de:	6824      	ldr	r4, [r4, #0]
    29e0:	e7f2      	b.n	29c8 <_fwalk_reent+0xc>
    29e2:	89ab      	ldrh	r3, [r5, #12]
    29e4:	2b01      	cmp	r3, #1
    29e6:	d908      	bls.n	29fa <_fwalk_reent+0x3e>
    29e8:	220e      	movs	r2, #14
    29ea:	5eab      	ldrsh	r3, [r5, r2]
    29ec:	3301      	adds	r3, #1
    29ee:	d004      	beq.n	29fa <_fwalk_reent+0x3e>
    29f0:	0029      	movs	r1, r5
    29f2:	0038      	movs	r0, r7
    29f4:	9b01      	ldr	r3, [sp, #4]
    29f6:	4798      	blx	r3
    29f8:	4306      	orrs	r6, r0
    29fa:	3568      	adds	r5, #104	; 0x68
    29fc:	e7eb      	b.n	29d6 <_fwalk_reent+0x1a>
	...

00002a00 <__swhatbuf_r>:
    2a00:	b570      	push	{r4, r5, r6, lr}
    2a02:	000e      	movs	r6, r1
    2a04:	001d      	movs	r5, r3
    2a06:	230e      	movs	r3, #14
    2a08:	5ec9      	ldrsh	r1, [r1, r3]
    2a0a:	b090      	sub	sp, #64	; 0x40
    2a0c:	0014      	movs	r4, r2
    2a0e:	2900      	cmp	r1, #0
    2a10:	da07      	bge.n	2a22 <__swhatbuf_r+0x22>
    2a12:	2300      	movs	r3, #0
    2a14:	602b      	str	r3, [r5, #0]
    2a16:	89b3      	ldrh	r3, [r6, #12]
    2a18:	061b      	lsls	r3, r3, #24
    2a1a:	d411      	bmi.n	2a40 <__swhatbuf_r+0x40>
    2a1c:	2380      	movs	r3, #128	; 0x80
    2a1e:	00db      	lsls	r3, r3, #3
    2a20:	e00f      	b.n	2a42 <__swhatbuf_r+0x42>
    2a22:	aa01      	add	r2, sp, #4
    2a24:	f001 fa18 	bl	3e58 <_fstat_r>
    2a28:	2800      	cmp	r0, #0
    2a2a:	dbf2      	blt.n	2a12 <__swhatbuf_r+0x12>
    2a2c:	22f0      	movs	r2, #240	; 0xf0
    2a2e:	9b02      	ldr	r3, [sp, #8]
    2a30:	0212      	lsls	r2, r2, #8
    2a32:	4013      	ands	r3, r2
    2a34:	4a05      	ldr	r2, [pc, #20]	; (2a4c <__swhatbuf_r+0x4c>)
    2a36:	189b      	adds	r3, r3, r2
    2a38:	425a      	negs	r2, r3
    2a3a:	4153      	adcs	r3, r2
    2a3c:	602b      	str	r3, [r5, #0]
    2a3e:	e7ed      	b.n	2a1c <__swhatbuf_r+0x1c>
    2a40:	2340      	movs	r3, #64	; 0x40
    2a42:	2000      	movs	r0, #0
    2a44:	6023      	str	r3, [r4, #0]
    2a46:	b010      	add	sp, #64	; 0x40
    2a48:	bd70      	pop	{r4, r5, r6, pc}
    2a4a:	46c0      	nop			; (mov r8, r8)
    2a4c:	ffffe000 	.word	0xffffe000

00002a50 <__smakebuf_r>:
    2a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a52:	2602      	movs	r6, #2
    2a54:	898b      	ldrh	r3, [r1, #12]
    2a56:	0005      	movs	r5, r0
    2a58:	000c      	movs	r4, r1
    2a5a:	4233      	tst	r3, r6
    2a5c:	d006      	beq.n	2a6c <__smakebuf_r+0x1c>
    2a5e:	0023      	movs	r3, r4
    2a60:	3347      	adds	r3, #71	; 0x47
    2a62:	6023      	str	r3, [r4, #0]
    2a64:	6123      	str	r3, [r4, #16]
    2a66:	2301      	movs	r3, #1
    2a68:	6163      	str	r3, [r4, #20]
    2a6a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2a6c:	ab01      	add	r3, sp, #4
    2a6e:	466a      	mov	r2, sp
    2a70:	f7ff ffc6 	bl	2a00 <__swhatbuf_r>
    2a74:	9900      	ldr	r1, [sp, #0]
    2a76:	0007      	movs	r7, r0
    2a78:	0028      	movs	r0, r5
    2a7a:	f000 f881 	bl	2b80 <_malloc_r>
    2a7e:	2800      	cmp	r0, #0
    2a80:	d108      	bne.n	2a94 <__smakebuf_r+0x44>
    2a82:	220c      	movs	r2, #12
    2a84:	5ea3      	ldrsh	r3, [r4, r2]
    2a86:	059a      	lsls	r2, r3, #22
    2a88:	d4ef      	bmi.n	2a6a <__smakebuf_r+0x1a>
    2a8a:	2203      	movs	r2, #3
    2a8c:	4393      	bics	r3, r2
    2a8e:	431e      	orrs	r6, r3
    2a90:	81a6      	strh	r6, [r4, #12]
    2a92:	e7e4      	b.n	2a5e <__smakebuf_r+0xe>
    2a94:	4b0f      	ldr	r3, [pc, #60]	; (2ad4 <__smakebuf_r+0x84>)
    2a96:	62ab      	str	r3, [r5, #40]	; 0x28
    2a98:	2380      	movs	r3, #128	; 0x80
    2a9a:	89a2      	ldrh	r2, [r4, #12]
    2a9c:	6020      	str	r0, [r4, #0]
    2a9e:	4313      	orrs	r3, r2
    2aa0:	81a3      	strh	r3, [r4, #12]
    2aa2:	9b00      	ldr	r3, [sp, #0]
    2aa4:	6120      	str	r0, [r4, #16]
    2aa6:	6163      	str	r3, [r4, #20]
    2aa8:	9b01      	ldr	r3, [sp, #4]
    2aaa:	2b00      	cmp	r3, #0
    2aac:	d00d      	beq.n	2aca <__smakebuf_r+0x7a>
    2aae:	230e      	movs	r3, #14
    2ab0:	5ee1      	ldrsh	r1, [r4, r3]
    2ab2:	0028      	movs	r0, r5
    2ab4:	f001 f9e2 	bl	3e7c <_isatty_r>
    2ab8:	2800      	cmp	r0, #0
    2aba:	d006      	beq.n	2aca <__smakebuf_r+0x7a>
    2abc:	2203      	movs	r2, #3
    2abe:	89a3      	ldrh	r3, [r4, #12]
    2ac0:	4393      	bics	r3, r2
    2ac2:	001a      	movs	r2, r3
    2ac4:	2301      	movs	r3, #1
    2ac6:	4313      	orrs	r3, r2
    2ac8:	81a3      	strh	r3, [r4, #12]
    2aca:	89a0      	ldrh	r0, [r4, #12]
    2acc:	4338      	orrs	r0, r7
    2ace:	81a0      	strh	r0, [r4, #12]
    2ad0:	e7cb      	b.n	2a6a <__smakebuf_r+0x1a>
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	00002819 	.word	0x00002819

00002ad8 <malloc>:
    2ad8:	b510      	push	{r4, lr}
    2ada:	4b03      	ldr	r3, [pc, #12]	; (2ae8 <malloc+0x10>)
    2adc:	0001      	movs	r1, r0
    2ade:	6818      	ldr	r0, [r3, #0]
    2ae0:	f000 f84e 	bl	2b80 <_malloc_r>
    2ae4:	bd10      	pop	{r4, pc}
    2ae6:	46c0      	nop			; (mov r8, r8)
    2ae8:	20000004 	.word	0x20000004

00002aec <_free_r>:
    2aec:	b570      	push	{r4, r5, r6, lr}
    2aee:	0005      	movs	r5, r0
    2af0:	2900      	cmp	r1, #0
    2af2:	d010      	beq.n	2b16 <_free_r+0x2a>
    2af4:	1f0c      	subs	r4, r1, #4
    2af6:	6823      	ldr	r3, [r4, #0]
    2af8:	2b00      	cmp	r3, #0
    2afa:	da00      	bge.n	2afe <_free_r+0x12>
    2afc:	18e4      	adds	r4, r4, r3
    2afe:	0028      	movs	r0, r5
    2b00:	f001 fa11 	bl	3f26 <__malloc_lock>
    2b04:	4a1d      	ldr	r2, [pc, #116]	; (2b7c <_free_r+0x90>)
    2b06:	6813      	ldr	r3, [r2, #0]
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d105      	bne.n	2b18 <_free_r+0x2c>
    2b0c:	6063      	str	r3, [r4, #4]
    2b0e:	6014      	str	r4, [r2, #0]
    2b10:	0028      	movs	r0, r5
    2b12:	f001 fa09 	bl	3f28 <__malloc_unlock>
    2b16:	bd70      	pop	{r4, r5, r6, pc}
    2b18:	42a3      	cmp	r3, r4
    2b1a:	d909      	bls.n	2b30 <_free_r+0x44>
    2b1c:	6821      	ldr	r1, [r4, #0]
    2b1e:	1860      	adds	r0, r4, r1
    2b20:	4283      	cmp	r3, r0
    2b22:	d1f3      	bne.n	2b0c <_free_r+0x20>
    2b24:	6818      	ldr	r0, [r3, #0]
    2b26:	685b      	ldr	r3, [r3, #4]
    2b28:	1841      	adds	r1, r0, r1
    2b2a:	6021      	str	r1, [r4, #0]
    2b2c:	e7ee      	b.n	2b0c <_free_r+0x20>
    2b2e:	0013      	movs	r3, r2
    2b30:	685a      	ldr	r2, [r3, #4]
    2b32:	2a00      	cmp	r2, #0
    2b34:	d001      	beq.n	2b3a <_free_r+0x4e>
    2b36:	42a2      	cmp	r2, r4
    2b38:	d9f9      	bls.n	2b2e <_free_r+0x42>
    2b3a:	6819      	ldr	r1, [r3, #0]
    2b3c:	1858      	adds	r0, r3, r1
    2b3e:	42a0      	cmp	r0, r4
    2b40:	d10b      	bne.n	2b5a <_free_r+0x6e>
    2b42:	6820      	ldr	r0, [r4, #0]
    2b44:	1809      	adds	r1, r1, r0
    2b46:	1858      	adds	r0, r3, r1
    2b48:	6019      	str	r1, [r3, #0]
    2b4a:	4282      	cmp	r2, r0
    2b4c:	d1e0      	bne.n	2b10 <_free_r+0x24>
    2b4e:	6810      	ldr	r0, [r2, #0]
    2b50:	6852      	ldr	r2, [r2, #4]
    2b52:	1841      	adds	r1, r0, r1
    2b54:	6019      	str	r1, [r3, #0]
    2b56:	605a      	str	r2, [r3, #4]
    2b58:	e7da      	b.n	2b10 <_free_r+0x24>
    2b5a:	42a0      	cmp	r0, r4
    2b5c:	d902      	bls.n	2b64 <_free_r+0x78>
    2b5e:	230c      	movs	r3, #12
    2b60:	602b      	str	r3, [r5, #0]
    2b62:	e7d5      	b.n	2b10 <_free_r+0x24>
    2b64:	6821      	ldr	r1, [r4, #0]
    2b66:	1860      	adds	r0, r4, r1
    2b68:	4282      	cmp	r2, r0
    2b6a:	d103      	bne.n	2b74 <_free_r+0x88>
    2b6c:	6810      	ldr	r0, [r2, #0]
    2b6e:	6852      	ldr	r2, [r2, #4]
    2b70:	1841      	adds	r1, r0, r1
    2b72:	6021      	str	r1, [r4, #0]
    2b74:	6062      	str	r2, [r4, #4]
    2b76:	605c      	str	r4, [r3, #4]
    2b78:	e7ca      	b.n	2b10 <_free_r+0x24>
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	20000c24 	.word	0x20000c24

00002b80 <_malloc_r>:
    2b80:	2303      	movs	r3, #3
    2b82:	b570      	push	{r4, r5, r6, lr}
    2b84:	1ccd      	adds	r5, r1, #3
    2b86:	439d      	bics	r5, r3
    2b88:	3508      	adds	r5, #8
    2b8a:	0006      	movs	r6, r0
    2b8c:	2d0c      	cmp	r5, #12
    2b8e:	d21e      	bcs.n	2bce <_malloc_r+0x4e>
    2b90:	250c      	movs	r5, #12
    2b92:	42a9      	cmp	r1, r5
    2b94:	d81d      	bhi.n	2bd2 <_malloc_r+0x52>
    2b96:	0030      	movs	r0, r6
    2b98:	f001 f9c5 	bl	3f26 <__malloc_lock>
    2b9c:	4a25      	ldr	r2, [pc, #148]	; (2c34 <_malloc_r+0xb4>)
    2b9e:	6814      	ldr	r4, [r2, #0]
    2ba0:	0021      	movs	r1, r4
    2ba2:	2900      	cmp	r1, #0
    2ba4:	d119      	bne.n	2bda <_malloc_r+0x5a>
    2ba6:	4c24      	ldr	r4, [pc, #144]	; (2c38 <_malloc_r+0xb8>)
    2ba8:	6823      	ldr	r3, [r4, #0]
    2baa:	2b00      	cmp	r3, #0
    2bac:	d103      	bne.n	2bb6 <_malloc_r+0x36>
    2bae:	0030      	movs	r0, r6
    2bb0:	f000 febe 	bl	3930 <_sbrk_r>
    2bb4:	6020      	str	r0, [r4, #0]
    2bb6:	0029      	movs	r1, r5
    2bb8:	0030      	movs	r0, r6
    2bba:	f000 feb9 	bl	3930 <_sbrk_r>
    2bbe:	1c43      	adds	r3, r0, #1
    2bc0:	d12c      	bne.n	2c1c <_malloc_r+0x9c>
    2bc2:	230c      	movs	r3, #12
    2bc4:	0030      	movs	r0, r6
    2bc6:	6033      	str	r3, [r6, #0]
    2bc8:	f001 f9ae 	bl	3f28 <__malloc_unlock>
    2bcc:	e003      	b.n	2bd6 <_malloc_r+0x56>
    2bce:	2d00      	cmp	r5, #0
    2bd0:	dadf      	bge.n	2b92 <_malloc_r+0x12>
    2bd2:	230c      	movs	r3, #12
    2bd4:	6033      	str	r3, [r6, #0]
    2bd6:	2000      	movs	r0, #0
    2bd8:	bd70      	pop	{r4, r5, r6, pc}
    2bda:	680b      	ldr	r3, [r1, #0]
    2bdc:	1b5b      	subs	r3, r3, r5
    2bde:	d41a      	bmi.n	2c16 <_malloc_r+0x96>
    2be0:	2b0b      	cmp	r3, #11
    2be2:	d903      	bls.n	2bec <_malloc_r+0x6c>
    2be4:	600b      	str	r3, [r1, #0]
    2be6:	18cc      	adds	r4, r1, r3
    2be8:	6025      	str	r5, [r4, #0]
    2bea:	e003      	b.n	2bf4 <_malloc_r+0x74>
    2bec:	428c      	cmp	r4, r1
    2bee:	d10e      	bne.n	2c0e <_malloc_r+0x8e>
    2bf0:	6863      	ldr	r3, [r4, #4]
    2bf2:	6013      	str	r3, [r2, #0]
    2bf4:	0030      	movs	r0, r6
    2bf6:	f001 f997 	bl	3f28 <__malloc_unlock>
    2bfa:	0020      	movs	r0, r4
    2bfc:	2207      	movs	r2, #7
    2bfe:	300b      	adds	r0, #11
    2c00:	1d23      	adds	r3, r4, #4
    2c02:	4390      	bics	r0, r2
    2c04:	1ac3      	subs	r3, r0, r3
    2c06:	d0e7      	beq.n	2bd8 <_malloc_r+0x58>
    2c08:	425a      	negs	r2, r3
    2c0a:	50e2      	str	r2, [r4, r3]
    2c0c:	e7e4      	b.n	2bd8 <_malloc_r+0x58>
    2c0e:	684b      	ldr	r3, [r1, #4]
    2c10:	6063      	str	r3, [r4, #4]
    2c12:	000c      	movs	r4, r1
    2c14:	e7ee      	b.n	2bf4 <_malloc_r+0x74>
    2c16:	000c      	movs	r4, r1
    2c18:	6849      	ldr	r1, [r1, #4]
    2c1a:	e7c2      	b.n	2ba2 <_malloc_r+0x22>
    2c1c:	2303      	movs	r3, #3
    2c1e:	1cc4      	adds	r4, r0, #3
    2c20:	439c      	bics	r4, r3
    2c22:	42a0      	cmp	r0, r4
    2c24:	d0e0      	beq.n	2be8 <_malloc_r+0x68>
    2c26:	1a21      	subs	r1, r4, r0
    2c28:	0030      	movs	r0, r6
    2c2a:	f000 fe81 	bl	3930 <_sbrk_r>
    2c2e:	1c43      	adds	r3, r0, #1
    2c30:	d1da      	bne.n	2be8 <_malloc_r+0x68>
    2c32:	e7c6      	b.n	2bc2 <_malloc_r+0x42>
    2c34:	20000c24 	.word	0x20000c24
    2c38:	20000c28 	.word	0x20000c28

00002c3c <__sfputc_r>:
    2c3c:	6893      	ldr	r3, [r2, #8]
    2c3e:	b510      	push	{r4, lr}
    2c40:	3b01      	subs	r3, #1
    2c42:	6093      	str	r3, [r2, #8]
    2c44:	2b00      	cmp	r3, #0
    2c46:	da05      	bge.n	2c54 <__sfputc_r+0x18>
    2c48:	6994      	ldr	r4, [r2, #24]
    2c4a:	42a3      	cmp	r3, r4
    2c4c:	db08      	blt.n	2c60 <__sfputc_r+0x24>
    2c4e:	b2cb      	uxtb	r3, r1
    2c50:	2b0a      	cmp	r3, #10
    2c52:	d005      	beq.n	2c60 <__sfputc_r+0x24>
    2c54:	6813      	ldr	r3, [r2, #0]
    2c56:	1c58      	adds	r0, r3, #1
    2c58:	6010      	str	r0, [r2, #0]
    2c5a:	7019      	strb	r1, [r3, #0]
    2c5c:	b2c8      	uxtb	r0, r1
    2c5e:	bd10      	pop	{r4, pc}
    2c60:	f7ff fc44 	bl	24ec <__swbuf_r>
    2c64:	e7fb      	b.n	2c5e <__sfputc_r+0x22>

00002c66 <__sfputs_r>:
    2c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c68:	0006      	movs	r6, r0
    2c6a:	000f      	movs	r7, r1
    2c6c:	0014      	movs	r4, r2
    2c6e:	18d5      	adds	r5, r2, r3
    2c70:	42ac      	cmp	r4, r5
    2c72:	d101      	bne.n	2c78 <__sfputs_r+0x12>
    2c74:	2000      	movs	r0, #0
    2c76:	e007      	b.n	2c88 <__sfputs_r+0x22>
    2c78:	7821      	ldrb	r1, [r4, #0]
    2c7a:	003a      	movs	r2, r7
    2c7c:	0030      	movs	r0, r6
    2c7e:	f7ff ffdd 	bl	2c3c <__sfputc_r>
    2c82:	3401      	adds	r4, #1
    2c84:	1c43      	adds	r3, r0, #1
    2c86:	d1f3      	bne.n	2c70 <__sfputs_r+0xa>
    2c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002c8c <_vfiprintf_r>:
    2c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c8e:	b09f      	sub	sp, #124	; 0x7c
    2c90:	0006      	movs	r6, r0
    2c92:	000f      	movs	r7, r1
    2c94:	0014      	movs	r4, r2
    2c96:	9305      	str	r3, [sp, #20]
    2c98:	2800      	cmp	r0, #0
    2c9a:	d004      	beq.n	2ca6 <_vfiprintf_r+0x1a>
    2c9c:	6983      	ldr	r3, [r0, #24]
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	d101      	bne.n	2ca6 <_vfiprintf_r+0x1a>
    2ca2:	f7ff fdfb 	bl	289c <__sinit>
    2ca6:	4b7f      	ldr	r3, [pc, #508]	; (2ea4 <_vfiprintf_r+0x218>)
    2ca8:	429f      	cmp	r7, r3
    2caa:	d15c      	bne.n	2d66 <_vfiprintf_r+0xda>
    2cac:	6877      	ldr	r7, [r6, #4]
    2cae:	89bb      	ldrh	r3, [r7, #12]
    2cb0:	071b      	lsls	r3, r3, #28
    2cb2:	d562      	bpl.n	2d7a <_vfiprintf_r+0xee>
    2cb4:	693b      	ldr	r3, [r7, #16]
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d05f      	beq.n	2d7a <_vfiprintf_r+0xee>
    2cba:	2300      	movs	r3, #0
    2cbc:	ad06      	add	r5, sp, #24
    2cbe:	616b      	str	r3, [r5, #20]
    2cc0:	3320      	adds	r3, #32
    2cc2:	766b      	strb	r3, [r5, #25]
    2cc4:	3310      	adds	r3, #16
    2cc6:	76ab      	strb	r3, [r5, #26]
    2cc8:	9402      	str	r4, [sp, #8]
    2cca:	9c02      	ldr	r4, [sp, #8]
    2ccc:	7823      	ldrb	r3, [r4, #0]
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d15d      	bne.n	2d8e <_vfiprintf_r+0x102>
    2cd2:	9b02      	ldr	r3, [sp, #8]
    2cd4:	1ae3      	subs	r3, r4, r3
    2cd6:	9304      	str	r3, [sp, #16]
    2cd8:	d00d      	beq.n	2cf6 <_vfiprintf_r+0x6a>
    2cda:	9b04      	ldr	r3, [sp, #16]
    2cdc:	9a02      	ldr	r2, [sp, #8]
    2cde:	0039      	movs	r1, r7
    2ce0:	0030      	movs	r0, r6
    2ce2:	f7ff ffc0 	bl	2c66 <__sfputs_r>
    2ce6:	1c43      	adds	r3, r0, #1
    2ce8:	d100      	bne.n	2cec <_vfiprintf_r+0x60>
    2cea:	e0cc      	b.n	2e86 <_vfiprintf_r+0x1fa>
    2cec:	696a      	ldr	r2, [r5, #20]
    2cee:	9b04      	ldr	r3, [sp, #16]
    2cf0:	4694      	mov	ip, r2
    2cf2:	4463      	add	r3, ip
    2cf4:	616b      	str	r3, [r5, #20]
    2cf6:	7823      	ldrb	r3, [r4, #0]
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d100      	bne.n	2cfe <_vfiprintf_r+0x72>
    2cfc:	e0c3      	b.n	2e86 <_vfiprintf_r+0x1fa>
    2cfe:	2201      	movs	r2, #1
    2d00:	2300      	movs	r3, #0
    2d02:	4252      	negs	r2, r2
    2d04:	606a      	str	r2, [r5, #4]
    2d06:	a902      	add	r1, sp, #8
    2d08:	3254      	adds	r2, #84	; 0x54
    2d0a:	1852      	adds	r2, r2, r1
    2d0c:	3401      	adds	r4, #1
    2d0e:	602b      	str	r3, [r5, #0]
    2d10:	60eb      	str	r3, [r5, #12]
    2d12:	60ab      	str	r3, [r5, #8]
    2d14:	7013      	strb	r3, [r2, #0]
    2d16:	65ab      	str	r3, [r5, #88]	; 0x58
    2d18:	7821      	ldrb	r1, [r4, #0]
    2d1a:	2205      	movs	r2, #5
    2d1c:	4862      	ldr	r0, [pc, #392]	; (2ea8 <_vfiprintf_r+0x21c>)
    2d1e:	f001 f8f7 	bl	3f10 <memchr>
    2d22:	1c63      	adds	r3, r4, #1
    2d24:	469c      	mov	ip, r3
    2d26:	2800      	cmp	r0, #0
    2d28:	d135      	bne.n	2d96 <_vfiprintf_r+0x10a>
    2d2a:	6829      	ldr	r1, [r5, #0]
    2d2c:	06cb      	lsls	r3, r1, #27
    2d2e:	d504      	bpl.n	2d3a <_vfiprintf_r+0xae>
    2d30:	2353      	movs	r3, #83	; 0x53
    2d32:	aa02      	add	r2, sp, #8
    2d34:	3020      	adds	r0, #32
    2d36:	189b      	adds	r3, r3, r2
    2d38:	7018      	strb	r0, [r3, #0]
    2d3a:	070b      	lsls	r3, r1, #28
    2d3c:	d504      	bpl.n	2d48 <_vfiprintf_r+0xbc>
    2d3e:	2353      	movs	r3, #83	; 0x53
    2d40:	202b      	movs	r0, #43	; 0x2b
    2d42:	aa02      	add	r2, sp, #8
    2d44:	189b      	adds	r3, r3, r2
    2d46:	7018      	strb	r0, [r3, #0]
    2d48:	7823      	ldrb	r3, [r4, #0]
    2d4a:	2b2a      	cmp	r3, #42	; 0x2a
    2d4c:	d02c      	beq.n	2da8 <_vfiprintf_r+0x11c>
    2d4e:	2000      	movs	r0, #0
    2d50:	210a      	movs	r1, #10
    2d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d54:	7822      	ldrb	r2, [r4, #0]
    2d56:	3a30      	subs	r2, #48	; 0x30
    2d58:	2a09      	cmp	r2, #9
    2d5a:	d800      	bhi.n	2d5e <_vfiprintf_r+0xd2>
    2d5c:	e06b      	b.n	2e36 <_vfiprintf_r+0x1aa>
    2d5e:	2800      	cmp	r0, #0
    2d60:	d02a      	beq.n	2db8 <_vfiprintf_r+0x12c>
    2d62:	9309      	str	r3, [sp, #36]	; 0x24
    2d64:	e028      	b.n	2db8 <_vfiprintf_r+0x12c>
    2d66:	4b51      	ldr	r3, [pc, #324]	; (2eac <_vfiprintf_r+0x220>)
    2d68:	429f      	cmp	r7, r3
    2d6a:	d101      	bne.n	2d70 <_vfiprintf_r+0xe4>
    2d6c:	68b7      	ldr	r7, [r6, #8]
    2d6e:	e79e      	b.n	2cae <_vfiprintf_r+0x22>
    2d70:	4b4f      	ldr	r3, [pc, #316]	; (2eb0 <_vfiprintf_r+0x224>)
    2d72:	429f      	cmp	r7, r3
    2d74:	d19b      	bne.n	2cae <_vfiprintf_r+0x22>
    2d76:	68f7      	ldr	r7, [r6, #12]
    2d78:	e799      	b.n	2cae <_vfiprintf_r+0x22>
    2d7a:	0039      	movs	r1, r7
    2d7c:	0030      	movs	r0, r6
    2d7e:	f7ff fc0b 	bl	2598 <__swsetup_r>
    2d82:	2800      	cmp	r0, #0
    2d84:	d099      	beq.n	2cba <_vfiprintf_r+0x2e>
    2d86:	2001      	movs	r0, #1
    2d88:	4240      	negs	r0, r0
    2d8a:	b01f      	add	sp, #124	; 0x7c
    2d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d8e:	2b25      	cmp	r3, #37	; 0x25
    2d90:	d09f      	beq.n	2cd2 <_vfiprintf_r+0x46>
    2d92:	3401      	adds	r4, #1
    2d94:	e79a      	b.n	2ccc <_vfiprintf_r+0x40>
    2d96:	4b44      	ldr	r3, [pc, #272]	; (2ea8 <_vfiprintf_r+0x21c>)
    2d98:	6829      	ldr	r1, [r5, #0]
    2d9a:	1ac0      	subs	r0, r0, r3
    2d9c:	2301      	movs	r3, #1
    2d9e:	4083      	lsls	r3, r0
    2da0:	430b      	orrs	r3, r1
    2da2:	602b      	str	r3, [r5, #0]
    2da4:	4664      	mov	r4, ip
    2da6:	e7b7      	b.n	2d18 <_vfiprintf_r+0x8c>
    2da8:	9b05      	ldr	r3, [sp, #20]
    2daa:	1d18      	adds	r0, r3, #4
    2dac:	681b      	ldr	r3, [r3, #0]
    2dae:	9005      	str	r0, [sp, #20]
    2db0:	2b00      	cmp	r3, #0
    2db2:	db3a      	blt.n	2e2a <_vfiprintf_r+0x19e>
    2db4:	9309      	str	r3, [sp, #36]	; 0x24
    2db6:	4664      	mov	r4, ip
    2db8:	7823      	ldrb	r3, [r4, #0]
    2dba:	2b2e      	cmp	r3, #46	; 0x2e
    2dbc:	d10b      	bne.n	2dd6 <_vfiprintf_r+0x14a>
    2dbe:	7863      	ldrb	r3, [r4, #1]
    2dc0:	1c62      	adds	r2, r4, #1
    2dc2:	2b2a      	cmp	r3, #42	; 0x2a
    2dc4:	d13f      	bne.n	2e46 <_vfiprintf_r+0x1ba>
    2dc6:	9b05      	ldr	r3, [sp, #20]
    2dc8:	3402      	adds	r4, #2
    2dca:	1d1a      	adds	r2, r3, #4
    2dcc:	681b      	ldr	r3, [r3, #0]
    2dce:	9205      	str	r2, [sp, #20]
    2dd0:	2b00      	cmp	r3, #0
    2dd2:	db35      	blt.n	2e40 <_vfiprintf_r+0x1b4>
    2dd4:	9307      	str	r3, [sp, #28]
    2dd6:	7821      	ldrb	r1, [r4, #0]
    2dd8:	2203      	movs	r2, #3
    2dda:	4836      	ldr	r0, [pc, #216]	; (2eb4 <_vfiprintf_r+0x228>)
    2ddc:	f001 f898 	bl	3f10 <memchr>
    2de0:	2800      	cmp	r0, #0
    2de2:	d007      	beq.n	2df4 <_vfiprintf_r+0x168>
    2de4:	4b33      	ldr	r3, [pc, #204]	; (2eb4 <_vfiprintf_r+0x228>)
    2de6:	682a      	ldr	r2, [r5, #0]
    2de8:	1ac0      	subs	r0, r0, r3
    2dea:	2340      	movs	r3, #64	; 0x40
    2dec:	4083      	lsls	r3, r0
    2dee:	4313      	orrs	r3, r2
    2df0:	602b      	str	r3, [r5, #0]
    2df2:	3401      	adds	r4, #1
    2df4:	7821      	ldrb	r1, [r4, #0]
    2df6:	1c63      	adds	r3, r4, #1
    2df8:	2206      	movs	r2, #6
    2dfa:	482f      	ldr	r0, [pc, #188]	; (2eb8 <_vfiprintf_r+0x22c>)
    2dfc:	9302      	str	r3, [sp, #8]
    2dfe:	7629      	strb	r1, [r5, #24]
    2e00:	f001 f886 	bl	3f10 <memchr>
    2e04:	2800      	cmp	r0, #0
    2e06:	d044      	beq.n	2e92 <_vfiprintf_r+0x206>
    2e08:	4b2c      	ldr	r3, [pc, #176]	; (2ebc <_vfiprintf_r+0x230>)
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	d12f      	bne.n	2e6e <_vfiprintf_r+0x1e2>
    2e0e:	6829      	ldr	r1, [r5, #0]
    2e10:	9b05      	ldr	r3, [sp, #20]
    2e12:	2207      	movs	r2, #7
    2e14:	05c9      	lsls	r1, r1, #23
    2e16:	d528      	bpl.n	2e6a <_vfiprintf_r+0x1de>
    2e18:	189b      	adds	r3, r3, r2
    2e1a:	4393      	bics	r3, r2
    2e1c:	3308      	adds	r3, #8
    2e1e:	9305      	str	r3, [sp, #20]
    2e20:	696b      	ldr	r3, [r5, #20]
    2e22:	9a03      	ldr	r2, [sp, #12]
    2e24:	189b      	adds	r3, r3, r2
    2e26:	616b      	str	r3, [r5, #20]
    2e28:	e74f      	b.n	2cca <_vfiprintf_r+0x3e>
    2e2a:	425b      	negs	r3, r3
    2e2c:	60eb      	str	r3, [r5, #12]
    2e2e:	2302      	movs	r3, #2
    2e30:	430b      	orrs	r3, r1
    2e32:	602b      	str	r3, [r5, #0]
    2e34:	e7bf      	b.n	2db6 <_vfiprintf_r+0x12a>
    2e36:	434b      	muls	r3, r1
    2e38:	3401      	adds	r4, #1
    2e3a:	189b      	adds	r3, r3, r2
    2e3c:	2001      	movs	r0, #1
    2e3e:	e789      	b.n	2d54 <_vfiprintf_r+0xc8>
    2e40:	2301      	movs	r3, #1
    2e42:	425b      	negs	r3, r3
    2e44:	e7c6      	b.n	2dd4 <_vfiprintf_r+0x148>
    2e46:	2300      	movs	r3, #0
    2e48:	0014      	movs	r4, r2
    2e4a:	200a      	movs	r0, #10
    2e4c:	001a      	movs	r2, r3
    2e4e:	606b      	str	r3, [r5, #4]
    2e50:	7821      	ldrb	r1, [r4, #0]
    2e52:	3930      	subs	r1, #48	; 0x30
    2e54:	2909      	cmp	r1, #9
    2e56:	d903      	bls.n	2e60 <_vfiprintf_r+0x1d4>
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d0bc      	beq.n	2dd6 <_vfiprintf_r+0x14a>
    2e5c:	9207      	str	r2, [sp, #28]
    2e5e:	e7ba      	b.n	2dd6 <_vfiprintf_r+0x14a>
    2e60:	4342      	muls	r2, r0
    2e62:	3401      	adds	r4, #1
    2e64:	1852      	adds	r2, r2, r1
    2e66:	2301      	movs	r3, #1
    2e68:	e7f2      	b.n	2e50 <_vfiprintf_r+0x1c4>
    2e6a:	3307      	adds	r3, #7
    2e6c:	e7d5      	b.n	2e1a <_vfiprintf_r+0x18e>
    2e6e:	ab05      	add	r3, sp, #20
    2e70:	9300      	str	r3, [sp, #0]
    2e72:	003a      	movs	r2, r7
    2e74:	4b12      	ldr	r3, [pc, #72]	; (2ec0 <_vfiprintf_r+0x234>)
    2e76:	0029      	movs	r1, r5
    2e78:	0030      	movs	r0, r6
    2e7a:	e000      	b.n	2e7e <_vfiprintf_r+0x1f2>
    2e7c:	bf00      	nop
    2e7e:	9003      	str	r0, [sp, #12]
    2e80:	9b03      	ldr	r3, [sp, #12]
    2e82:	3301      	adds	r3, #1
    2e84:	d1cc      	bne.n	2e20 <_vfiprintf_r+0x194>
    2e86:	89bb      	ldrh	r3, [r7, #12]
    2e88:	065b      	lsls	r3, r3, #25
    2e8a:	d500      	bpl.n	2e8e <_vfiprintf_r+0x202>
    2e8c:	e77b      	b.n	2d86 <_vfiprintf_r+0xfa>
    2e8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2e90:	e77b      	b.n	2d8a <_vfiprintf_r+0xfe>
    2e92:	ab05      	add	r3, sp, #20
    2e94:	9300      	str	r3, [sp, #0]
    2e96:	003a      	movs	r2, r7
    2e98:	4b09      	ldr	r3, [pc, #36]	; (2ec0 <_vfiprintf_r+0x234>)
    2e9a:	0029      	movs	r1, r5
    2e9c:	0030      	movs	r0, r6
    2e9e:	f000 f87f 	bl	2fa0 <_printf_i>
    2ea2:	e7ec      	b.n	2e7e <_vfiprintf_r+0x1f2>
    2ea4:	00004710 	.word	0x00004710
    2ea8:	00004750 	.word	0x00004750
    2eac:	00004730 	.word	0x00004730
    2eb0:	000046f0 	.word	0x000046f0
    2eb4:	00004756 	.word	0x00004756
    2eb8:	0000475a 	.word	0x0000475a
    2ebc:	00000000 	.word	0x00000000
    2ec0:	00002c67 	.word	0x00002c67

00002ec4 <_printf_common>:
    2ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ec6:	0015      	movs	r5, r2
    2ec8:	9301      	str	r3, [sp, #4]
    2eca:	688a      	ldr	r2, [r1, #8]
    2ecc:	690b      	ldr	r3, [r1, #16]
    2ece:	9000      	str	r0, [sp, #0]
    2ed0:	000c      	movs	r4, r1
    2ed2:	4293      	cmp	r3, r2
    2ed4:	da00      	bge.n	2ed8 <_printf_common+0x14>
    2ed6:	0013      	movs	r3, r2
    2ed8:	0022      	movs	r2, r4
    2eda:	602b      	str	r3, [r5, #0]
    2edc:	3243      	adds	r2, #67	; 0x43
    2ede:	7812      	ldrb	r2, [r2, #0]
    2ee0:	2a00      	cmp	r2, #0
    2ee2:	d001      	beq.n	2ee8 <_printf_common+0x24>
    2ee4:	3301      	adds	r3, #1
    2ee6:	602b      	str	r3, [r5, #0]
    2ee8:	6823      	ldr	r3, [r4, #0]
    2eea:	069b      	lsls	r3, r3, #26
    2eec:	d502      	bpl.n	2ef4 <_printf_common+0x30>
    2eee:	682b      	ldr	r3, [r5, #0]
    2ef0:	3302      	adds	r3, #2
    2ef2:	602b      	str	r3, [r5, #0]
    2ef4:	2706      	movs	r7, #6
    2ef6:	6823      	ldr	r3, [r4, #0]
    2ef8:	401f      	ands	r7, r3
    2efa:	d027      	beq.n	2f4c <_printf_common+0x88>
    2efc:	0023      	movs	r3, r4
    2efe:	3343      	adds	r3, #67	; 0x43
    2f00:	781b      	ldrb	r3, [r3, #0]
    2f02:	1e5a      	subs	r2, r3, #1
    2f04:	4193      	sbcs	r3, r2
    2f06:	6822      	ldr	r2, [r4, #0]
    2f08:	0692      	lsls	r2, r2, #26
    2f0a:	d430      	bmi.n	2f6e <_printf_common+0xaa>
    2f0c:	0022      	movs	r2, r4
    2f0e:	9901      	ldr	r1, [sp, #4]
    2f10:	3243      	adds	r2, #67	; 0x43
    2f12:	9800      	ldr	r0, [sp, #0]
    2f14:	9e08      	ldr	r6, [sp, #32]
    2f16:	47b0      	blx	r6
    2f18:	1c43      	adds	r3, r0, #1
    2f1a:	d025      	beq.n	2f68 <_printf_common+0xa4>
    2f1c:	2306      	movs	r3, #6
    2f1e:	6820      	ldr	r0, [r4, #0]
    2f20:	682a      	ldr	r2, [r5, #0]
    2f22:	68e1      	ldr	r1, [r4, #12]
    2f24:	4003      	ands	r3, r0
    2f26:	2500      	movs	r5, #0
    2f28:	2b04      	cmp	r3, #4
    2f2a:	d103      	bne.n	2f34 <_printf_common+0x70>
    2f2c:	1a8d      	subs	r5, r1, r2
    2f2e:	43eb      	mvns	r3, r5
    2f30:	17db      	asrs	r3, r3, #31
    2f32:	401d      	ands	r5, r3
    2f34:	68a3      	ldr	r3, [r4, #8]
    2f36:	6922      	ldr	r2, [r4, #16]
    2f38:	4293      	cmp	r3, r2
    2f3a:	dd01      	ble.n	2f40 <_printf_common+0x7c>
    2f3c:	1a9b      	subs	r3, r3, r2
    2f3e:	18ed      	adds	r5, r5, r3
    2f40:	2700      	movs	r7, #0
    2f42:	42bd      	cmp	r5, r7
    2f44:	d120      	bne.n	2f88 <_printf_common+0xc4>
    2f46:	2000      	movs	r0, #0
    2f48:	e010      	b.n	2f6c <_printf_common+0xa8>
    2f4a:	3701      	adds	r7, #1
    2f4c:	68e3      	ldr	r3, [r4, #12]
    2f4e:	682a      	ldr	r2, [r5, #0]
    2f50:	1a9b      	subs	r3, r3, r2
    2f52:	429f      	cmp	r7, r3
    2f54:	dad2      	bge.n	2efc <_printf_common+0x38>
    2f56:	0022      	movs	r2, r4
    2f58:	2301      	movs	r3, #1
    2f5a:	3219      	adds	r2, #25
    2f5c:	9901      	ldr	r1, [sp, #4]
    2f5e:	9800      	ldr	r0, [sp, #0]
    2f60:	9e08      	ldr	r6, [sp, #32]
    2f62:	47b0      	blx	r6
    2f64:	1c43      	adds	r3, r0, #1
    2f66:	d1f0      	bne.n	2f4a <_printf_common+0x86>
    2f68:	2001      	movs	r0, #1
    2f6a:	4240      	negs	r0, r0
    2f6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2f6e:	2030      	movs	r0, #48	; 0x30
    2f70:	18e1      	adds	r1, r4, r3
    2f72:	3143      	adds	r1, #67	; 0x43
    2f74:	7008      	strb	r0, [r1, #0]
    2f76:	0021      	movs	r1, r4
    2f78:	1c5a      	adds	r2, r3, #1
    2f7a:	3145      	adds	r1, #69	; 0x45
    2f7c:	7809      	ldrb	r1, [r1, #0]
    2f7e:	18a2      	adds	r2, r4, r2
    2f80:	3243      	adds	r2, #67	; 0x43
    2f82:	3302      	adds	r3, #2
    2f84:	7011      	strb	r1, [r2, #0]
    2f86:	e7c1      	b.n	2f0c <_printf_common+0x48>
    2f88:	0022      	movs	r2, r4
    2f8a:	2301      	movs	r3, #1
    2f8c:	321a      	adds	r2, #26
    2f8e:	9901      	ldr	r1, [sp, #4]
    2f90:	9800      	ldr	r0, [sp, #0]
    2f92:	9e08      	ldr	r6, [sp, #32]
    2f94:	47b0      	blx	r6
    2f96:	1c43      	adds	r3, r0, #1
    2f98:	d0e6      	beq.n	2f68 <_printf_common+0xa4>
    2f9a:	3701      	adds	r7, #1
    2f9c:	e7d1      	b.n	2f42 <_printf_common+0x7e>
	...

00002fa0 <_printf_i>:
    2fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fa2:	b08b      	sub	sp, #44	; 0x2c
    2fa4:	9206      	str	r2, [sp, #24]
    2fa6:	000a      	movs	r2, r1
    2fa8:	3243      	adds	r2, #67	; 0x43
    2faa:	9307      	str	r3, [sp, #28]
    2fac:	9005      	str	r0, [sp, #20]
    2fae:	9204      	str	r2, [sp, #16]
    2fb0:	7e0a      	ldrb	r2, [r1, #24]
    2fb2:	000c      	movs	r4, r1
    2fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2fb6:	2a6e      	cmp	r2, #110	; 0x6e
    2fb8:	d100      	bne.n	2fbc <_printf_i+0x1c>
    2fba:	e08f      	b.n	30dc <_printf_i+0x13c>
    2fbc:	d817      	bhi.n	2fee <_printf_i+0x4e>
    2fbe:	2a63      	cmp	r2, #99	; 0x63
    2fc0:	d02c      	beq.n	301c <_printf_i+0x7c>
    2fc2:	d808      	bhi.n	2fd6 <_printf_i+0x36>
    2fc4:	2a00      	cmp	r2, #0
    2fc6:	d100      	bne.n	2fca <_printf_i+0x2a>
    2fc8:	e099      	b.n	30fe <_printf_i+0x15e>
    2fca:	2a58      	cmp	r2, #88	; 0x58
    2fcc:	d054      	beq.n	3078 <_printf_i+0xd8>
    2fce:	0026      	movs	r6, r4
    2fd0:	3642      	adds	r6, #66	; 0x42
    2fd2:	7032      	strb	r2, [r6, #0]
    2fd4:	e029      	b.n	302a <_printf_i+0x8a>
    2fd6:	2a64      	cmp	r2, #100	; 0x64
    2fd8:	d001      	beq.n	2fde <_printf_i+0x3e>
    2fda:	2a69      	cmp	r2, #105	; 0x69
    2fdc:	d1f7      	bne.n	2fce <_printf_i+0x2e>
    2fde:	6821      	ldr	r1, [r4, #0]
    2fe0:	681a      	ldr	r2, [r3, #0]
    2fe2:	0608      	lsls	r0, r1, #24
    2fe4:	d523      	bpl.n	302e <_printf_i+0x8e>
    2fe6:	1d11      	adds	r1, r2, #4
    2fe8:	6019      	str	r1, [r3, #0]
    2fea:	6815      	ldr	r5, [r2, #0]
    2fec:	e025      	b.n	303a <_printf_i+0x9a>
    2fee:	2a73      	cmp	r2, #115	; 0x73
    2ff0:	d100      	bne.n	2ff4 <_printf_i+0x54>
    2ff2:	e088      	b.n	3106 <_printf_i+0x166>
    2ff4:	d808      	bhi.n	3008 <_printf_i+0x68>
    2ff6:	2a6f      	cmp	r2, #111	; 0x6f
    2ff8:	d029      	beq.n	304e <_printf_i+0xae>
    2ffa:	2a70      	cmp	r2, #112	; 0x70
    2ffc:	d1e7      	bne.n	2fce <_printf_i+0x2e>
    2ffe:	2220      	movs	r2, #32
    3000:	6809      	ldr	r1, [r1, #0]
    3002:	430a      	orrs	r2, r1
    3004:	6022      	str	r2, [r4, #0]
    3006:	e003      	b.n	3010 <_printf_i+0x70>
    3008:	2a75      	cmp	r2, #117	; 0x75
    300a:	d020      	beq.n	304e <_printf_i+0xae>
    300c:	2a78      	cmp	r2, #120	; 0x78
    300e:	d1de      	bne.n	2fce <_printf_i+0x2e>
    3010:	0022      	movs	r2, r4
    3012:	2178      	movs	r1, #120	; 0x78
    3014:	3245      	adds	r2, #69	; 0x45
    3016:	7011      	strb	r1, [r2, #0]
    3018:	4a6c      	ldr	r2, [pc, #432]	; (31cc <_printf_i+0x22c>)
    301a:	e030      	b.n	307e <_printf_i+0xde>
    301c:	000e      	movs	r6, r1
    301e:	681a      	ldr	r2, [r3, #0]
    3020:	3642      	adds	r6, #66	; 0x42
    3022:	1d11      	adds	r1, r2, #4
    3024:	6019      	str	r1, [r3, #0]
    3026:	6813      	ldr	r3, [r2, #0]
    3028:	7033      	strb	r3, [r6, #0]
    302a:	2301      	movs	r3, #1
    302c:	e079      	b.n	3122 <_printf_i+0x182>
    302e:	0649      	lsls	r1, r1, #25
    3030:	d5d9      	bpl.n	2fe6 <_printf_i+0x46>
    3032:	1d11      	adds	r1, r2, #4
    3034:	6019      	str	r1, [r3, #0]
    3036:	2300      	movs	r3, #0
    3038:	5ed5      	ldrsh	r5, [r2, r3]
    303a:	2d00      	cmp	r5, #0
    303c:	da03      	bge.n	3046 <_printf_i+0xa6>
    303e:	232d      	movs	r3, #45	; 0x2d
    3040:	9a04      	ldr	r2, [sp, #16]
    3042:	426d      	negs	r5, r5
    3044:	7013      	strb	r3, [r2, #0]
    3046:	4b62      	ldr	r3, [pc, #392]	; (31d0 <_printf_i+0x230>)
    3048:	270a      	movs	r7, #10
    304a:	9303      	str	r3, [sp, #12]
    304c:	e02f      	b.n	30ae <_printf_i+0x10e>
    304e:	6820      	ldr	r0, [r4, #0]
    3050:	6819      	ldr	r1, [r3, #0]
    3052:	0605      	lsls	r5, r0, #24
    3054:	d503      	bpl.n	305e <_printf_i+0xbe>
    3056:	1d08      	adds	r0, r1, #4
    3058:	6018      	str	r0, [r3, #0]
    305a:	680d      	ldr	r5, [r1, #0]
    305c:	e005      	b.n	306a <_printf_i+0xca>
    305e:	0640      	lsls	r0, r0, #25
    3060:	d5f9      	bpl.n	3056 <_printf_i+0xb6>
    3062:	680d      	ldr	r5, [r1, #0]
    3064:	1d08      	adds	r0, r1, #4
    3066:	6018      	str	r0, [r3, #0]
    3068:	b2ad      	uxth	r5, r5
    306a:	4b59      	ldr	r3, [pc, #356]	; (31d0 <_printf_i+0x230>)
    306c:	2708      	movs	r7, #8
    306e:	9303      	str	r3, [sp, #12]
    3070:	2a6f      	cmp	r2, #111	; 0x6f
    3072:	d018      	beq.n	30a6 <_printf_i+0x106>
    3074:	270a      	movs	r7, #10
    3076:	e016      	b.n	30a6 <_printf_i+0x106>
    3078:	3145      	adds	r1, #69	; 0x45
    307a:	700a      	strb	r2, [r1, #0]
    307c:	4a54      	ldr	r2, [pc, #336]	; (31d0 <_printf_i+0x230>)
    307e:	9203      	str	r2, [sp, #12]
    3080:	681a      	ldr	r2, [r3, #0]
    3082:	6821      	ldr	r1, [r4, #0]
    3084:	1d10      	adds	r0, r2, #4
    3086:	6018      	str	r0, [r3, #0]
    3088:	6815      	ldr	r5, [r2, #0]
    308a:	0608      	lsls	r0, r1, #24
    308c:	d522      	bpl.n	30d4 <_printf_i+0x134>
    308e:	07cb      	lsls	r3, r1, #31
    3090:	d502      	bpl.n	3098 <_printf_i+0xf8>
    3092:	2320      	movs	r3, #32
    3094:	4319      	orrs	r1, r3
    3096:	6021      	str	r1, [r4, #0]
    3098:	2710      	movs	r7, #16
    309a:	2d00      	cmp	r5, #0
    309c:	d103      	bne.n	30a6 <_printf_i+0x106>
    309e:	2320      	movs	r3, #32
    30a0:	6822      	ldr	r2, [r4, #0]
    30a2:	439a      	bics	r2, r3
    30a4:	6022      	str	r2, [r4, #0]
    30a6:	0023      	movs	r3, r4
    30a8:	2200      	movs	r2, #0
    30aa:	3343      	adds	r3, #67	; 0x43
    30ac:	701a      	strb	r2, [r3, #0]
    30ae:	6863      	ldr	r3, [r4, #4]
    30b0:	60a3      	str	r3, [r4, #8]
    30b2:	2b00      	cmp	r3, #0
    30b4:	db5c      	blt.n	3170 <_printf_i+0x1d0>
    30b6:	2204      	movs	r2, #4
    30b8:	6821      	ldr	r1, [r4, #0]
    30ba:	4391      	bics	r1, r2
    30bc:	6021      	str	r1, [r4, #0]
    30be:	2d00      	cmp	r5, #0
    30c0:	d158      	bne.n	3174 <_printf_i+0x1d4>
    30c2:	9e04      	ldr	r6, [sp, #16]
    30c4:	2b00      	cmp	r3, #0
    30c6:	d064      	beq.n	3192 <_printf_i+0x1f2>
    30c8:	0026      	movs	r6, r4
    30ca:	9b03      	ldr	r3, [sp, #12]
    30cc:	3642      	adds	r6, #66	; 0x42
    30ce:	781b      	ldrb	r3, [r3, #0]
    30d0:	7033      	strb	r3, [r6, #0]
    30d2:	e05e      	b.n	3192 <_printf_i+0x1f2>
    30d4:	0648      	lsls	r0, r1, #25
    30d6:	d5da      	bpl.n	308e <_printf_i+0xee>
    30d8:	b2ad      	uxth	r5, r5
    30da:	e7d8      	b.n	308e <_printf_i+0xee>
    30dc:	6809      	ldr	r1, [r1, #0]
    30de:	681a      	ldr	r2, [r3, #0]
    30e0:	0608      	lsls	r0, r1, #24
    30e2:	d505      	bpl.n	30f0 <_printf_i+0x150>
    30e4:	1d11      	adds	r1, r2, #4
    30e6:	6019      	str	r1, [r3, #0]
    30e8:	6813      	ldr	r3, [r2, #0]
    30ea:	6962      	ldr	r2, [r4, #20]
    30ec:	601a      	str	r2, [r3, #0]
    30ee:	e006      	b.n	30fe <_printf_i+0x15e>
    30f0:	0649      	lsls	r1, r1, #25
    30f2:	d5f7      	bpl.n	30e4 <_printf_i+0x144>
    30f4:	1d11      	adds	r1, r2, #4
    30f6:	6019      	str	r1, [r3, #0]
    30f8:	6813      	ldr	r3, [r2, #0]
    30fa:	8aa2      	ldrh	r2, [r4, #20]
    30fc:	801a      	strh	r2, [r3, #0]
    30fe:	2300      	movs	r3, #0
    3100:	9e04      	ldr	r6, [sp, #16]
    3102:	6123      	str	r3, [r4, #16]
    3104:	e054      	b.n	31b0 <_printf_i+0x210>
    3106:	681a      	ldr	r2, [r3, #0]
    3108:	1d11      	adds	r1, r2, #4
    310a:	6019      	str	r1, [r3, #0]
    310c:	6816      	ldr	r6, [r2, #0]
    310e:	2100      	movs	r1, #0
    3110:	6862      	ldr	r2, [r4, #4]
    3112:	0030      	movs	r0, r6
    3114:	f000 fefc 	bl	3f10 <memchr>
    3118:	2800      	cmp	r0, #0
    311a:	d001      	beq.n	3120 <_printf_i+0x180>
    311c:	1b80      	subs	r0, r0, r6
    311e:	6060      	str	r0, [r4, #4]
    3120:	6863      	ldr	r3, [r4, #4]
    3122:	6123      	str	r3, [r4, #16]
    3124:	2300      	movs	r3, #0
    3126:	9a04      	ldr	r2, [sp, #16]
    3128:	7013      	strb	r3, [r2, #0]
    312a:	e041      	b.n	31b0 <_printf_i+0x210>
    312c:	6923      	ldr	r3, [r4, #16]
    312e:	0032      	movs	r2, r6
    3130:	9906      	ldr	r1, [sp, #24]
    3132:	9805      	ldr	r0, [sp, #20]
    3134:	9d07      	ldr	r5, [sp, #28]
    3136:	47a8      	blx	r5
    3138:	1c43      	adds	r3, r0, #1
    313a:	d043      	beq.n	31c4 <_printf_i+0x224>
    313c:	6823      	ldr	r3, [r4, #0]
    313e:	2500      	movs	r5, #0
    3140:	079b      	lsls	r3, r3, #30
    3142:	d40f      	bmi.n	3164 <_printf_i+0x1c4>
    3144:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3146:	68e0      	ldr	r0, [r4, #12]
    3148:	4298      	cmp	r0, r3
    314a:	da3d      	bge.n	31c8 <_printf_i+0x228>
    314c:	0018      	movs	r0, r3
    314e:	e03b      	b.n	31c8 <_printf_i+0x228>
    3150:	0022      	movs	r2, r4
    3152:	2301      	movs	r3, #1
    3154:	3219      	adds	r2, #25
    3156:	9906      	ldr	r1, [sp, #24]
    3158:	9805      	ldr	r0, [sp, #20]
    315a:	9e07      	ldr	r6, [sp, #28]
    315c:	47b0      	blx	r6
    315e:	1c43      	adds	r3, r0, #1
    3160:	d030      	beq.n	31c4 <_printf_i+0x224>
    3162:	3501      	adds	r5, #1
    3164:	68e3      	ldr	r3, [r4, #12]
    3166:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3168:	1a9b      	subs	r3, r3, r2
    316a:	429d      	cmp	r5, r3
    316c:	dbf0      	blt.n	3150 <_printf_i+0x1b0>
    316e:	e7e9      	b.n	3144 <_printf_i+0x1a4>
    3170:	2d00      	cmp	r5, #0
    3172:	d0a9      	beq.n	30c8 <_printf_i+0x128>
    3174:	9e04      	ldr	r6, [sp, #16]
    3176:	0028      	movs	r0, r5
    3178:	0039      	movs	r1, r7
    317a:	f7fe fffd 	bl	2178 <__aeabi_uidivmod>
    317e:	9b03      	ldr	r3, [sp, #12]
    3180:	3e01      	subs	r6, #1
    3182:	5c5b      	ldrb	r3, [r3, r1]
    3184:	0028      	movs	r0, r5
    3186:	7033      	strb	r3, [r6, #0]
    3188:	0039      	movs	r1, r7
    318a:	f7fe ff6f 	bl	206c <__udivsi3>
    318e:	1e05      	subs	r5, r0, #0
    3190:	d1f1      	bne.n	3176 <_printf_i+0x1d6>
    3192:	2f08      	cmp	r7, #8
    3194:	d109      	bne.n	31aa <_printf_i+0x20a>
    3196:	6823      	ldr	r3, [r4, #0]
    3198:	07db      	lsls	r3, r3, #31
    319a:	d506      	bpl.n	31aa <_printf_i+0x20a>
    319c:	6863      	ldr	r3, [r4, #4]
    319e:	6922      	ldr	r2, [r4, #16]
    31a0:	4293      	cmp	r3, r2
    31a2:	dc02      	bgt.n	31aa <_printf_i+0x20a>
    31a4:	2330      	movs	r3, #48	; 0x30
    31a6:	3e01      	subs	r6, #1
    31a8:	7033      	strb	r3, [r6, #0]
    31aa:	9b04      	ldr	r3, [sp, #16]
    31ac:	1b9b      	subs	r3, r3, r6
    31ae:	6123      	str	r3, [r4, #16]
    31b0:	9b07      	ldr	r3, [sp, #28]
    31b2:	aa09      	add	r2, sp, #36	; 0x24
    31b4:	9300      	str	r3, [sp, #0]
    31b6:	0021      	movs	r1, r4
    31b8:	9b06      	ldr	r3, [sp, #24]
    31ba:	9805      	ldr	r0, [sp, #20]
    31bc:	f7ff fe82 	bl	2ec4 <_printf_common>
    31c0:	1c43      	adds	r3, r0, #1
    31c2:	d1b3      	bne.n	312c <_printf_i+0x18c>
    31c4:	2001      	movs	r0, #1
    31c6:	4240      	negs	r0, r0
    31c8:	b00b      	add	sp, #44	; 0x2c
    31ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31cc:	00004772 	.word	0x00004772
    31d0:	00004761 	.word	0x00004761

000031d4 <__svfiscanf_r>:
    31d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31d6:	4cbd      	ldr	r4, [pc, #756]	; (34cc <__svfiscanf_r+0x2f8>)
    31d8:	2586      	movs	r5, #134	; 0x86
    31da:	44a5      	add	sp, r4
    31dc:	9303      	str	r3, [sp, #12]
    31de:	2300      	movs	r3, #0
    31e0:	9348      	str	r3, [sp, #288]	; 0x120
    31e2:	9349      	str	r3, [sp, #292]	; 0x124
    31e4:	ab05      	add	r3, sp, #20
    31e6:	934a      	str	r3, [sp, #296]	; 0x128
    31e8:	23be      	movs	r3, #190	; 0xbe
    31ea:	006d      	lsls	r5, r5, #1
    31ec:	9000      	str	r0, [sp, #0]
    31ee:	000c      	movs	r4, r1
    31f0:	a802      	add	r0, sp, #8
    31f2:	49b7      	ldr	r1, [pc, #732]	; (34d0 <__svfiscanf_r+0x2fc>)
    31f4:	005b      	lsls	r3, r3, #1
    31f6:	1940      	adds	r0, r0, r5
    31f8:	27c0      	movs	r7, #192	; 0xc0
    31fa:	50c1      	str	r1, [r0, r3]
    31fc:	ab02      	add	r3, sp, #8
    31fe:	195b      	adds	r3, r3, r5
    3200:	0015      	movs	r5, r2
    3202:	49b4      	ldr	r1, [pc, #720]	; (34d4 <__svfiscanf_r+0x300>)
    3204:	007f      	lsls	r7, r7, #1
    3206:	51d9      	str	r1, [r3, r7]
    3208:	782b      	ldrb	r3, [r5, #0]
    320a:	2b00      	cmp	r3, #0
    320c:	d100      	bne.n	3210 <__svfiscanf_r+0x3c>
    320e:	e15b      	b.n	34c8 <__svfiscanf_r+0x2f4>
    3210:	f000 fe4a 	bl	3ea8 <__locale_ctype_ptr>
    3214:	2208      	movs	r2, #8
    3216:	782b      	ldrb	r3, [r5, #0]
    3218:	18c0      	adds	r0, r0, r3
    321a:	9301      	str	r3, [sp, #4]
    321c:	7843      	ldrb	r3, [r0, #1]
    321e:	4013      	ands	r3, r2
    3220:	d141      	bne.n	32a6 <__svfiscanf_r+0xd2>
    3222:	9a01      	ldr	r2, [sp, #4]
    3224:	1c6e      	adds	r6, r5, #1
    3226:	2a25      	cmp	r2, #37	; 0x25
    3228:	d000      	beq.n	322c <__svfiscanf_r+0x58>
    322a:	e0a8      	b.n	337e <__svfiscanf_r+0x1aa>
    322c:	9347      	str	r3, [sp, #284]	; 0x11c
    322e:	9345      	str	r3, [sp, #276]	; 0x114
    3230:	786b      	ldrb	r3, [r5, #1]
    3232:	2b2a      	cmp	r3, #42	; 0x2a
    3234:	d102      	bne.n	323c <__svfiscanf_r+0x68>
    3236:	3b1a      	subs	r3, #26
    3238:	9345      	str	r3, [sp, #276]	; 0x114
    323a:	1cae      	adds	r6, r5, #2
    323c:	0035      	movs	r5, r6
    323e:	220a      	movs	r2, #10
    3240:	7829      	ldrb	r1, [r5, #0]
    3242:	000b      	movs	r3, r1
    3244:	3b30      	subs	r3, #48	; 0x30
    3246:	2b09      	cmp	r3, #9
    3248:	d948      	bls.n	32dc <__svfiscanf_r+0x108>
    324a:	4ea3      	ldr	r6, [pc, #652]	; (34d8 <__svfiscanf_r+0x304>)
    324c:	2203      	movs	r2, #3
    324e:	0030      	movs	r0, r6
    3250:	f000 fe5e 	bl	3f10 <memchr>
    3254:	2800      	cmp	r0, #0
    3256:	d007      	beq.n	3268 <__svfiscanf_r+0x94>
    3258:	2301      	movs	r3, #1
    325a:	1b80      	subs	r0, r0, r6
    325c:	4083      	lsls	r3, r0
    325e:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3260:	3501      	adds	r5, #1
    3262:	4313      	orrs	r3, r2
    3264:	9202      	str	r2, [sp, #8]
    3266:	9345      	str	r3, [sp, #276]	; 0x114
    3268:	782b      	ldrb	r3, [r5, #0]
    326a:	1c6e      	adds	r6, r5, #1
    326c:	2b67      	cmp	r3, #103	; 0x67
    326e:	d858      	bhi.n	3322 <__svfiscanf_r+0x14e>
    3270:	2b65      	cmp	r3, #101	; 0x65
    3272:	d300      	bcc.n	3276 <__svfiscanf_r+0xa2>
    3274:	e0dd      	b.n	3432 <__svfiscanf_r+0x25e>
    3276:	2b47      	cmp	r3, #71	; 0x47
    3278:	d838      	bhi.n	32ec <__svfiscanf_r+0x118>
    327a:	2b45      	cmp	r3, #69	; 0x45
    327c:	d300      	bcc.n	3280 <__svfiscanf_r+0xac>
    327e:	e0d8      	b.n	3432 <__svfiscanf_r+0x25e>
    3280:	2b00      	cmp	r3, #0
    3282:	d100      	bne.n	3286 <__svfiscanf_r+0xb2>
    3284:	e11d      	b.n	34c2 <__svfiscanf_r+0x2ee>
    3286:	2b25      	cmp	r3, #37	; 0x25
    3288:	d079      	beq.n	337e <__svfiscanf_r+0x1aa>
    328a:	2303      	movs	r3, #3
    328c:	934b      	str	r3, [sp, #300]	; 0x12c
    328e:	3307      	adds	r3, #7
    3290:	9346      	str	r3, [sp, #280]	; 0x118
    3292:	e053      	b.n	333c <__svfiscanf_r+0x168>
    3294:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3296:	3301      	adds	r3, #1
    3298:	9201      	str	r2, [sp, #4]
    329a:	3201      	adds	r2, #1
    329c:	9249      	str	r2, [sp, #292]	; 0x124
    329e:	6862      	ldr	r2, [r4, #4]
    32a0:	6023      	str	r3, [r4, #0]
    32a2:	3a01      	subs	r2, #1
    32a4:	6062      	str	r2, [r4, #4]
    32a6:	6863      	ldr	r3, [r4, #4]
    32a8:	2b00      	cmp	r3, #0
    32aa:	dd0b      	ble.n	32c4 <__svfiscanf_r+0xf0>
    32ac:	f000 fdfc 	bl	3ea8 <__locale_ctype_ptr>
    32b0:	2108      	movs	r1, #8
    32b2:	6823      	ldr	r3, [r4, #0]
    32b4:	781a      	ldrb	r2, [r3, #0]
    32b6:	1880      	adds	r0, r0, r2
    32b8:	7842      	ldrb	r2, [r0, #1]
    32ba:	420a      	tst	r2, r1
    32bc:	d1ea      	bne.n	3294 <__svfiscanf_r+0xc0>
    32be:	1c6e      	adds	r6, r5, #1
    32c0:	0035      	movs	r5, r6
    32c2:	e7a1      	b.n	3208 <__svfiscanf_r+0x34>
    32c4:	2286      	movs	r2, #134	; 0x86
    32c6:	ab02      	add	r3, sp, #8
    32c8:	0052      	lsls	r2, r2, #1
    32ca:	189b      	adds	r3, r3, r2
    32cc:	59db      	ldr	r3, [r3, r7]
    32ce:	0021      	movs	r1, r4
    32d0:	9800      	ldr	r0, [sp, #0]
    32d2:	9301      	str	r3, [sp, #4]
    32d4:	4798      	blx	r3
    32d6:	2800      	cmp	r0, #0
    32d8:	d0e8      	beq.n	32ac <__svfiscanf_r+0xd8>
    32da:	e7f0      	b.n	32be <__svfiscanf_r+0xea>
    32dc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    32de:	3501      	adds	r5, #1
    32e0:	9302      	str	r3, [sp, #8]
    32e2:	4353      	muls	r3, r2
    32e4:	3b30      	subs	r3, #48	; 0x30
    32e6:	1859      	adds	r1, r3, r1
    32e8:	9147      	str	r1, [sp, #284]	; 0x11c
    32ea:	e7a9      	b.n	3240 <__svfiscanf_r+0x6c>
    32ec:	2b5b      	cmp	r3, #91	; 0x5b
    32ee:	d100      	bne.n	32f2 <__svfiscanf_r+0x11e>
    32f0:	e077      	b.n	33e2 <__svfiscanf_r+0x20e>
    32f2:	d80f      	bhi.n	3314 <__svfiscanf_r+0x140>
    32f4:	2b58      	cmp	r3, #88	; 0x58
    32f6:	d1c8      	bne.n	328a <__svfiscanf_r+0xb6>
    32f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
    32fa:	9201      	str	r2, [sp, #4]
    32fc:	2280      	movs	r2, #128	; 0x80
    32fe:	9901      	ldr	r1, [sp, #4]
    3300:	0092      	lsls	r2, r2, #2
    3302:	430a      	orrs	r2, r1
    3304:	9245      	str	r2, [sp, #276]	; 0x114
    3306:	2210      	movs	r2, #16
    3308:	9246      	str	r2, [sp, #280]	; 0x118
    330a:	2203      	movs	r2, #3
    330c:	2b6e      	cmp	r3, #110	; 0x6e
    330e:	dd14      	ble.n	333a <__svfiscanf_r+0x166>
    3310:	3201      	adds	r2, #1
    3312:	e012      	b.n	333a <__svfiscanf_r+0x166>
    3314:	2b63      	cmp	r3, #99	; 0x63
    3316:	d100      	bne.n	331a <__svfiscanf_r+0x146>
    3318:	e071      	b.n	33fe <__svfiscanf_r+0x22a>
    331a:	2b64      	cmp	r3, #100	; 0x64
    331c:	d1b5      	bne.n	328a <__svfiscanf_r+0xb6>
    331e:	220a      	movs	r2, #10
    3320:	e7f2      	b.n	3308 <__svfiscanf_r+0x134>
    3322:	2b70      	cmp	r3, #112	; 0x70
    3324:	d052      	beq.n	33cc <__svfiscanf_r+0x1f8>
    3326:	d822      	bhi.n	336e <__svfiscanf_r+0x19a>
    3328:	2b6e      	cmp	r3, #110	; 0x6e
    332a:	d100      	bne.n	332e <__svfiscanf_r+0x15a>
    332c:	e06f      	b.n	340e <__svfiscanf_r+0x23a>
    332e:	d854      	bhi.n	33da <__svfiscanf_r+0x206>
    3330:	2b69      	cmp	r3, #105	; 0x69
    3332:	d1aa      	bne.n	328a <__svfiscanf_r+0xb6>
    3334:	2300      	movs	r3, #0
    3336:	2203      	movs	r2, #3
    3338:	9346      	str	r3, [sp, #280]	; 0x118
    333a:	924b      	str	r2, [sp, #300]	; 0x12c
    333c:	6863      	ldr	r3, [r4, #4]
    333e:	2b00      	cmp	r3, #0
    3340:	dc00      	bgt.n	3344 <__svfiscanf_r+0x170>
    3342:	e078      	b.n	3436 <__svfiscanf_r+0x262>
    3344:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3346:	9301      	str	r3, [sp, #4]
    3348:	065b      	lsls	r3, r3, #25
    334a:	d400      	bmi.n	334e <__svfiscanf_r+0x17a>
    334c:	e08b      	b.n	3466 <__svfiscanf_r+0x292>
    334e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    3350:	2b02      	cmp	r3, #2
    3352:	dd00      	ble.n	3356 <__svfiscanf_r+0x182>
    3354:	e09d      	b.n	3492 <__svfiscanf_r+0x2be>
    3356:	ab03      	add	r3, sp, #12
    3358:	0022      	movs	r2, r4
    335a:	a945      	add	r1, sp, #276	; 0x114
    335c:	9800      	ldr	r0, [sp, #0]
    335e:	f000 f8e7 	bl	3530 <_scanf_chars>
    3362:	2801      	cmp	r0, #1
    3364:	d100      	bne.n	3368 <__svfiscanf_r+0x194>
    3366:	e0af      	b.n	34c8 <__svfiscanf_r+0x2f4>
    3368:	2802      	cmp	r0, #2
    336a:	d1a9      	bne.n	32c0 <__svfiscanf_r+0xec>
    336c:	e025      	b.n	33ba <__svfiscanf_r+0x1e6>
    336e:	2b75      	cmp	r3, #117	; 0x75
    3370:	d0d5      	beq.n	331e <__svfiscanf_r+0x14a>
    3372:	2b78      	cmp	r3, #120	; 0x78
    3374:	d0c0      	beq.n	32f8 <__svfiscanf_r+0x124>
    3376:	2b73      	cmp	r3, #115	; 0x73
    3378:	d187      	bne.n	328a <__svfiscanf_r+0xb6>
    337a:	2302      	movs	r3, #2
    337c:	e03d      	b.n	33fa <__svfiscanf_r+0x226>
    337e:	6863      	ldr	r3, [r4, #4]
    3380:	2b00      	cmp	r3, #0
    3382:	dd0f      	ble.n	33a4 <__svfiscanf_r+0x1d0>
    3384:	6823      	ldr	r3, [r4, #0]
    3386:	9901      	ldr	r1, [sp, #4]
    3388:	781a      	ldrb	r2, [r3, #0]
    338a:	4291      	cmp	r1, r2
    338c:	d000      	beq.n	3390 <__svfiscanf_r+0x1bc>
    338e:	e09b      	b.n	34c8 <__svfiscanf_r+0x2f4>
    3390:	3301      	adds	r3, #1
    3392:	6862      	ldr	r2, [r4, #4]
    3394:	6023      	str	r3, [r4, #0]
    3396:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3398:	3a01      	subs	r2, #1
    339a:	9301      	str	r3, [sp, #4]
    339c:	3301      	adds	r3, #1
    339e:	6062      	str	r2, [r4, #4]
    33a0:	9349      	str	r3, [sp, #292]	; 0x124
    33a2:	e78d      	b.n	32c0 <__svfiscanf_r+0xec>
    33a4:	2286      	movs	r2, #134	; 0x86
    33a6:	ab02      	add	r3, sp, #8
    33a8:	0052      	lsls	r2, r2, #1
    33aa:	189b      	adds	r3, r3, r2
    33ac:	59db      	ldr	r3, [r3, r7]
    33ae:	0021      	movs	r1, r4
    33b0:	9800      	ldr	r0, [sp, #0]
    33b2:	9302      	str	r3, [sp, #8]
    33b4:	4798      	blx	r3
    33b6:	2800      	cmp	r0, #0
    33b8:	d0e4      	beq.n	3384 <__svfiscanf_r+0x1b0>
    33ba:	9848      	ldr	r0, [sp, #288]	; 0x120
    33bc:	2800      	cmp	r0, #0
    33be:	d000      	beq.n	33c2 <__svfiscanf_r+0x1ee>
    33c0:	e07b      	b.n	34ba <__svfiscanf_r+0x2e6>
    33c2:	3801      	subs	r0, #1
    33c4:	23a7      	movs	r3, #167	; 0xa7
    33c6:	009b      	lsls	r3, r3, #2
    33c8:	449d      	add	sp, r3
    33ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
    33ce:	9201      	str	r2, [sp, #4]
    33d0:	2220      	movs	r2, #32
    33d2:	9901      	ldr	r1, [sp, #4]
    33d4:	430a      	orrs	r2, r1
    33d6:	9245      	str	r2, [sp, #276]	; 0x114
    33d8:	e78e      	b.n	32f8 <__svfiscanf_r+0x124>
    33da:	2308      	movs	r3, #8
    33dc:	2204      	movs	r2, #4
    33de:	9346      	str	r3, [sp, #280]	; 0x118
    33e0:	e7ab      	b.n	333a <__svfiscanf_r+0x166>
    33e2:	0031      	movs	r1, r6
    33e4:	a805      	add	r0, sp, #20
    33e6:	f000 fab5 	bl	3954 <__sccl>
    33ea:	9b45      	ldr	r3, [sp, #276]	; 0x114
    33ec:	0006      	movs	r6, r0
    33ee:	9301      	str	r3, [sp, #4]
    33f0:	2340      	movs	r3, #64	; 0x40
    33f2:	9a01      	ldr	r2, [sp, #4]
    33f4:	4313      	orrs	r3, r2
    33f6:	9345      	str	r3, [sp, #276]	; 0x114
    33f8:	2301      	movs	r3, #1
    33fa:	934b      	str	r3, [sp, #300]	; 0x12c
    33fc:	e79e      	b.n	333c <__svfiscanf_r+0x168>
    33fe:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3400:	9301      	str	r3, [sp, #4]
    3402:	2340      	movs	r3, #64	; 0x40
    3404:	9a01      	ldr	r2, [sp, #4]
    3406:	4313      	orrs	r3, r2
    3408:	9345      	str	r3, [sp, #276]	; 0x114
    340a:	2300      	movs	r3, #0
    340c:	e7f5      	b.n	33fa <__svfiscanf_r+0x226>
    340e:	9945      	ldr	r1, [sp, #276]	; 0x114
    3410:	06cb      	lsls	r3, r1, #27
    3412:	d500      	bpl.n	3416 <__svfiscanf_r+0x242>
    3414:	e754      	b.n	32c0 <__svfiscanf_r+0xec>
    3416:	9b03      	ldr	r3, [sp, #12]
    3418:	9a49      	ldr	r2, [sp, #292]	; 0x124
    341a:	07c8      	lsls	r0, r1, #31
    341c:	d504      	bpl.n	3428 <__svfiscanf_r+0x254>
    341e:	1d19      	adds	r1, r3, #4
    3420:	9103      	str	r1, [sp, #12]
    3422:	681b      	ldr	r3, [r3, #0]
    3424:	801a      	strh	r2, [r3, #0]
    3426:	e74b      	b.n	32c0 <__svfiscanf_r+0xec>
    3428:	1d19      	adds	r1, r3, #4
    342a:	9103      	str	r1, [sp, #12]
    342c:	681b      	ldr	r3, [r3, #0]
    342e:	601a      	str	r2, [r3, #0]
    3430:	e746      	b.n	32c0 <__svfiscanf_r+0xec>
    3432:	2305      	movs	r3, #5
    3434:	e7e1      	b.n	33fa <__svfiscanf_r+0x226>
    3436:	2286      	movs	r2, #134	; 0x86
    3438:	ab02      	add	r3, sp, #8
    343a:	0052      	lsls	r2, r2, #1
    343c:	189b      	adds	r3, r3, r2
    343e:	59db      	ldr	r3, [r3, r7]
    3440:	0021      	movs	r1, r4
    3442:	9800      	ldr	r0, [sp, #0]
    3444:	9301      	str	r3, [sp, #4]
    3446:	4798      	blx	r3
    3448:	2800      	cmp	r0, #0
    344a:	d100      	bne.n	344e <__svfiscanf_r+0x27a>
    344c:	e77a      	b.n	3344 <__svfiscanf_r+0x170>
    344e:	e7b4      	b.n	33ba <__svfiscanf_r+0x1e6>
    3450:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3452:	9201      	str	r2, [sp, #4]
    3454:	3201      	adds	r2, #1
    3456:	9249      	str	r2, [sp, #292]	; 0x124
    3458:	6862      	ldr	r2, [r4, #4]
    345a:	3a01      	subs	r2, #1
    345c:	6062      	str	r2, [r4, #4]
    345e:	2a00      	cmp	r2, #0
    3460:	dd0b      	ble.n	347a <__svfiscanf_r+0x2a6>
    3462:	3301      	adds	r3, #1
    3464:	6023      	str	r3, [r4, #0]
    3466:	f000 fd1f 	bl	3ea8 <__locale_ctype_ptr>
    346a:	2108      	movs	r1, #8
    346c:	6823      	ldr	r3, [r4, #0]
    346e:	781a      	ldrb	r2, [r3, #0]
    3470:	1880      	adds	r0, r0, r2
    3472:	7842      	ldrb	r2, [r0, #1]
    3474:	420a      	tst	r2, r1
    3476:	d1eb      	bne.n	3450 <__svfiscanf_r+0x27c>
    3478:	e769      	b.n	334e <__svfiscanf_r+0x17a>
    347a:	2286      	movs	r2, #134	; 0x86
    347c:	ab02      	add	r3, sp, #8
    347e:	0052      	lsls	r2, r2, #1
    3480:	189b      	adds	r3, r3, r2
    3482:	59db      	ldr	r3, [r3, r7]
    3484:	0021      	movs	r1, r4
    3486:	9800      	ldr	r0, [sp, #0]
    3488:	9301      	str	r3, [sp, #4]
    348a:	4798      	blx	r3
    348c:	2800      	cmp	r0, #0
    348e:	d0ea      	beq.n	3466 <__svfiscanf_r+0x292>
    3490:	e793      	b.n	33ba <__svfiscanf_r+0x1e6>
    3492:	2b04      	cmp	r3, #4
    3494:	dc06      	bgt.n	34a4 <__svfiscanf_r+0x2d0>
    3496:	ab03      	add	r3, sp, #12
    3498:	0022      	movs	r2, r4
    349a:	a945      	add	r1, sp, #276	; 0x114
    349c:	9800      	ldr	r0, [sp, #0]
    349e:	f000 f8ab 	bl	35f8 <_scanf_i>
    34a2:	e75e      	b.n	3362 <__svfiscanf_r+0x18e>
    34a4:	4b0d      	ldr	r3, [pc, #52]	; (34dc <__svfiscanf_r+0x308>)
    34a6:	2b00      	cmp	r3, #0
    34a8:	d100      	bne.n	34ac <__svfiscanf_r+0x2d8>
    34aa:	e709      	b.n	32c0 <__svfiscanf_r+0xec>
    34ac:	ab03      	add	r3, sp, #12
    34ae:	0022      	movs	r2, r4
    34b0:	a945      	add	r1, sp, #276	; 0x114
    34b2:	9800      	ldr	r0, [sp, #0]
    34b4:	e000      	b.n	34b8 <__svfiscanf_r+0x2e4>
    34b6:	bf00      	nop
    34b8:	e753      	b.n	3362 <__svfiscanf_r+0x18e>
    34ba:	89a3      	ldrh	r3, [r4, #12]
    34bc:	065b      	lsls	r3, r3, #25
    34be:	d400      	bmi.n	34c2 <__svfiscanf_r+0x2ee>
    34c0:	e780      	b.n	33c4 <__svfiscanf_r+0x1f0>
    34c2:	2001      	movs	r0, #1
    34c4:	4240      	negs	r0, r0
    34c6:	e77d      	b.n	33c4 <__svfiscanf_r+0x1f0>
    34c8:	9848      	ldr	r0, [sp, #288]	; 0x120
    34ca:	e77b      	b.n	33c4 <__svfiscanf_r+0x1f0>
    34cc:	fffffd64 	.word	0xfffffd64
    34d0:	00003d29 	.word	0x00003d29
    34d4:	00003811 	.word	0x00003811
    34d8:	00004756 	.word	0x00004756
    34dc:	00000000 	.word	0x00000000

000034e0 <_vfiscanf_r>:
    34e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34e2:	0004      	movs	r4, r0
    34e4:	000d      	movs	r5, r1
    34e6:	0016      	movs	r6, r2
    34e8:	001f      	movs	r7, r3
    34ea:	2800      	cmp	r0, #0
    34ec:	d004      	beq.n	34f8 <_vfiscanf_r+0x18>
    34ee:	6983      	ldr	r3, [r0, #24]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d101      	bne.n	34f8 <_vfiscanf_r+0x18>
    34f4:	f7ff f9d2 	bl	289c <__sinit>
    34f8:	4b0a      	ldr	r3, [pc, #40]	; (3524 <_vfiscanf_r+0x44>)
    34fa:	429d      	cmp	r5, r3
    34fc:	d107      	bne.n	350e <_vfiscanf_r+0x2e>
    34fe:	6865      	ldr	r5, [r4, #4]
    3500:	003b      	movs	r3, r7
    3502:	0032      	movs	r2, r6
    3504:	0029      	movs	r1, r5
    3506:	0020      	movs	r0, r4
    3508:	f7ff fe64 	bl	31d4 <__svfiscanf_r>
    350c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    350e:	4b06      	ldr	r3, [pc, #24]	; (3528 <_vfiscanf_r+0x48>)
    3510:	429d      	cmp	r5, r3
    3512:	d101      	bne.n	3518 <_vfiscanf_r+0x38>
    3514:	68a5      	ldr	r5, [r4, #8]
    3516:	e7f3      	b.n	3500 <_vfiscanf_r+0x20>
    3518:	4b04      	ldr	r3, [pc, #16]	; (352c <_vfiscanf_r+0x4c>)
    351a:	429d      	cmp	r5, r3
    351c:	d1f0      	bne.n	3500 <_vfiscanf_r+0x20>
    351e:	68e5      	ldr	r5, [r4, #12]
    3520:	e7ee      	b.n	3500 <_vfiscanf_r+0x20>
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	00004710 	.word	0x00004710
    3528:	00004730 	.word	0x00004730
    352c:	000046f0 	.word	0x000046f0

00003530 <_scanf_chars>:
    3530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3532:	0015      	movs	r5, r2
    3534:	688a      	ldr	r2, [r1, #8]
    3536:	9001      	str	r0, [sp, #4]
    3538:	000c      	movs	r4, r1
    353a:	2a00      	cmp	r2, #0
    353c:	d106      	bne.n	354c <_scanf_chars+0x1c>
    353e:	698a      	ldr	r2, [r1, #24]
    3540:	1e51      	subs	r1, r2, #1
    3542:	418a      	sbcs	r2, r1
    3544:	2101      	movs	r1, #1
    3546:	4252      	negs	r2, r2
    3548:	430a      	orrs	r2, r1
    354a:	60a2      	str	r2, [r4, #8]
    354c:	6822      	ldr	r2, [r4, #0]
    354e:	06d2      	lsls	r2, r2, #27
    3550:	d403      	bmi.n	355a <_scanf_chars+0x2a>
    3552:	681a      	ldr	r2, [r3, #0]
    3554:	1d11      	adds	r1, r2, #4
    3556:	6019      	str	r1, [r3, #0]
    3558:	6817      	ldr	r7, [r2, #0]
    355a:	2600      	movs	r6, #0
    355c:	69a3      	ldr	r3, [r4, #24]
    355e:	2b00      	cmp	r3, #0
    3560:	d01c      	beq.n	359c <_scanf_chars+0x6c>
    3562:	2b01      	cmp	r3, #1
    3564:	d108      	bne.n	3578 <_scanf_chars+0x48>
    3566:	682b      	ldr	r3, [r5, #0]
    3568:	6962      	ldr	r2, [r4, #20]
    356a:	781b      	ldrb	r3, [r3, #0]
    356c:	5cd3      	ldrb	r3, [r2, r3]
    356e:	2b00      	cmp	r3, #0
    3570:	d114      	bne.n	359c <_scanf_chars+0x6c>
    3572:	2e00      	cmp	r6, #0
    3574:	d130      	bne.n	35d8 <_scanf_chars+0xa8>
    3576:	e006      	b.n	3586 <_scanf_chars+0x56>
    3578:	2b02      	cmp	r3, #2
    357a:	d006      	beq.n	358a <_scanf_chars+0x5a>
    357c:	2e00      	cmp	r6, #0
    357e:	d12b      	bne.n	35d8 <_scanf_chars+0xa8>
    3580:	69a3      	ldr	r3, [r4, #24]
    3582:	2b01      	cmp	r3, #1
    3584:	d128      	bne.n	35d8 <_scanf_chars+0xa8>
    3586:	2001      	movs	r0, #1
    3588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    358a:	f000 fc8d 	bl	3ea8 <__locale_ctype_ptr>
    358e:	2208      	movs	r2, #8
    3590:	682b      	ldr	r3, [r5, #0]
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	18c0      	adds	r0, r0, r3
    3596:	7843      	ldrb	r3, [r0, #1]
    3598:	4213      	tst	r3, r2
    359a:	d1ef      	bne.n	357c <_scanf_chars+0x4c>
    359c:	2210      	movs	r2, #16
    359e:	6823      	ldr	r3, [r4, #0]
    35a0:	3601      	adds	r6, #1
    35a2:	4213      	tst	r3, r2
    35a4:	d103      	bne.n	35ae <_scanf_chars+0x7e>
    35a6:	682b      	ldr	r3, [r5, #0]
    35a8:	781b      	ldrb	r3, [r3, #0]
    35aa:	703b      	strb	r3, [r7, #0]
    35ac:	3701      	adds	r7, #1
    35ae:	682a      	ldr	r2, [r5, #0]
    35b0:	686b      	ldr	r3, [r5, #4]
    35b2:	3201      	adds	r2, #1
    35b4:	602a      	str	r2, [r5, #0]
    35b6:	68a2      	ldr	r2, [r4, #8]
    35b8:	3b01      	subs	r3, #1
    35ba:	3a01      	subs	r2, #1
    35bc:	606b      	str	r3, [r5, #4]
    35be:	60a2      	str	r2, [r4, #8]
    35c0:	2a00      	cmp	r2, #0
    35c2:	d009      	beq.n	35d8 <_scanf_chars+0xa8>
    35c4:	2b00      	cmp	r3, #0
    35c6:	dcc9      	bgt.n	355c <_scanf_chars+0x2c>
    35c8:	23c0      	movs	r3, #192	; 0xc0
    35ca:	005b      	lsls	r3, r3, #1
    35cc:	58e3      	ldr	r3, [r4, r3]
    35ce:	0029      	movs	r1, r5
    35d0:	9801      	ldr	r0, [sp, #4]
    35d2:	4798      	blx	r3
    35d4:	2800      	cmp	r0, #0
    35d6:	d0c1      	beq.n	355c <_scanf_chars+0x2c>
    35d8:	2310      	movs	r3, #16
    35da:	6822      	ldr	r2, [r4, #0]
    35dc:	4013      	ands	r3, r2
    35de:	d106      	bne.n	35ee <_scanf_chars+0xbe>
    35e0:	68e2      	ldr	r2, [r4, #12]
    35e2:	3201      	adds	r2, #1
    35e4:	60e2      	str	r2, [r4, #12]
    35e6:	69a2      	ldr	r2, [r4, #24]
    35e8:	2a00      	cmp	r2, #0
    35ea:	d000      	beq.n	35ee <_scanf_chars+0xbe>
    35ec:	703b      	strb	r3, [r7, #0]
    35ee:	6923      	ldr	r3, [r4, #16]
    35f0:	2000      	movs	r0, #0
    35f2:	199e      	adds	r6, r3, r6
    35f4:	6126      	str	r6, [r4, #16]
    35f6:	e7c7      	b.n	3588 <_scanf_chars+0x58>

000035f8 <_scanf_i>:
    35f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35fa:	000c      	movs	r4, r1
    35fc:	b08d      	sub	sp, #52	; 0x34
    35fe:	9302      	str	r3, [sp, #8]
    3600:	4b77      	ldr	r3, [pc, #476]	; (37e0 <_scanf_i+0x1e8>)
    3602:	9005      	str	r0, [sp, #20]
    3604:	0016      	movs	r6, r2
    3606:	aa09      	add	r2, sp, #36	; 0x24
    3608:	cb23      	ldmia	r3!, {r0, r1, r5}
    360a:	c223      	stmia	r2!, {r0, r1, r5}
    360c:	4b75      	ldr	r3, [pc, #468]	; (37e4 <_scanf_i+0x1ec>)
    360e:	9306      	str	r3, [sp, #24]
    3610:	69a3      	ldr	r3, [r4, #24]
    3612:	2b03      	cmp	r3, #3
    3614:	d001      	beq.n	361a <_scanf_i+0x22>
    3616:	4b74      	ldr	r3, [pc, #464]	; (37e8 <_scanf_i+0x1f0>)
    3618:	9306      	str	r3, [sp, #24]
    361a:	22ae      	movs	r2, #174	; 0xae
    361c:	2000      	movs	r0, #0
    361e:	68a3      	ldr	r3, [r4, #8]
    3620:	0052      	lsls	r2, r2, #1
    3622:	1e59      	subs	r1, r3, #1
    3624:	9004      	str	r0, [sp, #16]
    3626:	4291      	cmp	r1, r2
    3628:	d905      	bls.n	3636 <_scanf_i+0x3e>
    362a:	3b5e      	subs	r3, #94	; 0x5e
    362c:	3bff      	subs	r3, #255	; 0xff
    362e:	9304      	str	r3, [sp, #16]
    3630:	235e      	movs	r3, #94	; 0x5e
    3632:	33ff      	adds	r3, #255	; 0xff
    3634:	60a3      	str	r3, [r4, #8]
    3636:	0023      	movs	r3, r4
    3638:	331c      	adds	r3, #28
    363a:	9301      	str	r3, [sp, #4]
    363c:	23d0      	movs	r3, #208	; 0xd0
    363e:	2700      	movs	r7, #0
    3640:	6822      	ldr	r2, [r4, #0]
    3642:	011b      	lsls	r3, r3, #4
    3644:	4313      	orrs	r3, r2
    3646:	6023      	str	r3, [r4, #0]
    3648:	9b01      	ldr	r3, [sp, #4]
    364a:	9303      	str	r3, [sp, #12]
    364c:	6833      	ldr	r3, [r6, #0]
    364e:	a809      	add	r0, sp, #36	; 0x24
    3650:	7819      	ldrb	r1, [r3, #0]
    3652:	00bb      	lsls	r3, r7, #2
    3654:	2202      	movs	r2, #2
    3656:	5818      	ldr	r0, [r3, r0]
    3658:	f000 fc5a 	bl	3f10 <memchr>
    365c:	2800      	cmp	r0, #0
    365e:	d02b      	beq.n	36b8 <_scanf_i+0xc0>
    3660:	2f01      	cmp	r7, #1
    3662:	d15f      	bne.n	3724 <_scanf_i+0x12c>
    3664:	6863      	ldr	r3, [r4, #4]
    3666:	2b00      	cmp	r3, #0
    3668:	d106      	bne.n	3678 <_scanf_i+0x80>
    366a:	3308      	adds	r3, #8
    366c:	6822      	ldr	r2, [r4, #0]
    366e:	6063      	str	r3, [r4, #4]
    3670:	33f9      	adds	r3, #249	; 0xf9
    3672:	33ff      	adds	r3, #255	; 0xff
    3674:	4313      	orrs	r3, r2
    3676:	6023      	str	r3, [r4, #0]
    3678:	4b5c      	ldr	r3, [pc, #368]	; (37ec <_scanf_i+0x1f4>)
    367a:	6822      	ldr	r2, [r4, #0]
    367c:	4013      	ands	r3, r2
    367e:	6023      	str	r3, [r4, #0]
    3680:	68a3      	ldr	r3, [r4, #8]
    3682:	1e5a      	subs	r2, r3, #1
    3684:	60a2      	str	r2, [r4, #8]
    3686:	2b00      	cmp	r3, #0
    3688:	d016      	beq.n	36b8 <_scanf_i+0xc0>
    368a:	9b03      	ldr	r3, [sp, #12]
    368c:	1c5d      	adds	r5, r3, #1
    368e:	6833      	ldr	r3, [r6, #0]
    3690:	1c5a      	adds	r2, r3, #1
    3692:	6032      	str	r2, [r6, #0]
    3694:	781b      	ldrb	r3, [r3, #0]
    3696:	9a03      	ldr	r2, [sp, #12]
    3698:	9503      	str	r5, [sp, #12]
    369a:	7013      	strb	r3, [r2, #0]
    369c:	6873      	ldr	r3, [r6, #4]
    369e:	3b01      	subs	r3, #1
    36a0:	6073      	str	r3, [r6, #4]
    36a2:	2b00      	cmp	r3, #0
    36a4:	dc08      	bgt.n	36b8 <_scanf_i+0xc0>
    36a6:	23c0      	movs	r3, #192	; 0xc0
    36a8:	005b      	lsls	r3, r3, #1
    36aa:	58e3      	ldr	r3, [r4, r3]
    36ac:	0031      	movs	r1, r6
    36ae:	9805      	ldr	r0, [sp, #20]
    36b0:	9307      	str	r3, [sp, #28]
    36b2:	4798      	blx	r3
    36b4:	2800      	cmp	r0, #0
    36b6:	d17d      	bne.n	37b4 <_scanf_i+0x1bc>
    36b8:	3701      	adds	r7, #1
    36ba:	2f03      	cmp	r7, #3
    36bc:	d1c6      	bne.n	364c <_scanf_i+0x54>
    36be:	6863      	ldr	r3, [r4, #4]
    36c0:	2b00      	cmp	r3, #0
    36c2:	d101      	bne.n	36c8 <_scanf_i+0xd0>
    36c4:	330a      	adds	r3, #10
    36c6:	6063      	str	r3, [r4, #4]
    36c8:	2110      	movs	r1, #16
    36ca:	2700      	movs	r7, #0
    36cc:	6863      	ldr	r3, [r4, #4]
    36ce:	6960      	ldr	r0, [r4, #20]
    36d0:	1ac9      	subs	r1, r1, r3
    36d2:	4b47      	ldr	r3, [pc, #284]	; (37f0 <_scanf_i+0x1f8>)
    36d4:	18c9      	adds	r1, r1, r3
    36d6:	f000 f93d 	bl	3954 <__sccl>
    36da:	9d03      	ldr	r5, [sp, #12]
    36dc:	68a3      	ldr	r3, [r4, #8]
    36de:	2b00      	cmp	r3, #0
    36e0:	d041      	beq.n	3766 <_scanf_i+0x16e>
    36e2:	6832      	ldr	r2, [r6, #0]
    36e4:	6960      	ldr	r0, [r4, #20]
    36e6:	7811      	ldrb	r1, [r2, #0]
    36e8:	5c40      	ldrb	r0, [r0, r1]
    36ea:	2800      	cmp	r0, #0
    36ec:	d03b      	beq.n	3766 <_scanf_i+0x16e>
    36ee:	2930      	cmp	r1, #48	; 0x30
    36f0:	d128      	bne.n	3744 <_scanf_i+0x14c>
    36f2:	2080      	movs	r0, #128	; 0x80
    36f4:	6821      	ldr	r1, [r4, #0]
    36f6:	0100      	lsls	r0, r0, #4
    36f8:	4201      	tst	r1, r0
    36fa:	d023      	beq.n	3744 <_scanf_i+0x14c>
    36fc:	9a04      	ldr	r2, [sp, #16]
    36fe:	3701      	adds	r7, #1
    3700:	2a00      	cmp	r2, #0
    3702:	d003      	beq.n	370c <_scanf_i+0x114>
    3704:	3a01      	subs	r2, #1
    3706:	3301      	adds	r3, #1
    3708:	9204      	str	r2, [sp, #16]
    370a:	60a3      	str	r3, [r4, #8]
    370c:	6873      	ldr	r3, [r6, #4]
    370e:	3b01      	subs	r3, #1
    3710:	6073      	str	r3, [r6, #4]
    3712:	2b00      	cmp	r3, #0
    3714:	dd1e      	ble.n	3754 <_scanf_i+0x15c>
    3716:	6833      	ldr	r3, [r6, #0]
    3718:	3301      	adds	r3, #1
    371a:	6033      	str	r3, [r6, #0]
    371c:	68a3      	ldr	r3, [r4, #8]
    371e:	3b01      	subs	r3, #1
    3720:	60a3      	str	r3, [r4, #8]
    3722:	e7db      	b.n	36dc <_scanf_i+0xe4>
    3724:	2f02      	cmp	r7, #2
    3726:	d1ab      	bne.n	3680 <_scanf_i+0x88>
    3728:	21c0      	movs	r1, #192	; 0xc0
    372a:	2380      	movs	r3, #128	; 0x80
    372c:	6822      	ldr	r2, [r4, #0]
    372e:	00c9      	lsls	r1, r1, #3
    3730:	4011      	ands	r1, r2
    3732:	009b      	lsls	r3, r3, #2
    3734:	4299      	cmp	r1, r3
    3736:	d1c2      	bne.n	36be <_scanf_i+0xc6>
    3738:	3bf1      	subs	r3, #241	; 0xf1
    373a:	3bff      	subs	r3, #255	; 0xff
    373c:	6063      	str	r3, [r4, #4]
    373e:	33f0      	adds	r3, #240	; 0xf0
    3740:	4313      	orrs	r3, r2
    3742:	e79c      	b.n	367e <_scanf_i+0x86>
    3744:	6821      	ldr	r1, [r4, #0]
    3746:	4b2b      	ldr	r3, [pc, #172]	; (37f4 <_scanf_i+0x1fc>)
    3748:	400b      	ands	r3, r1
    374a:	6023      	str	r3, [r4, #0]
    374c:	7813      	ldrb	r3, [r2, #0]
    374e:	702b      	strb	r3, [r5, #0]
    3750:	3501      	adds	r5, #1
    3752:	e7db      	b.n	370c <_scanf_i+0x114>
    3754:	23c0      	movs	r3, #192	; 0xc0
    3756:	005b      	lsls	r3, r3, #1
    3758:	58e3      	ldr	r3, [r4, r3]
    375a:	0031      	movs	r1, r6
    375c:	9805      	ldr	r0, [sp, #20]
    375e:	9303      	str	r3, [sp, #12]
    3760:	4798      	blx	r3
    3762:	2800      	cmp	r0, #0
    3764:	d0da      	beq.n	371c <_scanf_i+0x124>
    3766:	6823      	ldr	r3, [r4, #0]
    3768:	05db      	lsls	r3, r3, #23
    376a:	d50e      	bpl.n	378a <_scanf_i+0x192>
    376c:	9b01      	ldr	r3, [sp, #4]
    376e:	429d      	cmp	r5, r3
    3770:	d907      	bls.n	3782 <_scanf_i+0x18a>
    3772:	23be      	movs	r3, #190	; 0xbe
    3774:	3d01      	subs	r5, #1
    3776:	005b      	lsls	r3, r3, #1
    3778:	7829      	ldrb	r1, [r5, #0]
    377a:	58e3      	ldr	r3, [r4, r3]
    377c:	0032      	movs	r2, r6
    377e:	9805      	ldr	r0, [sp, #20]
    3780:	4798      	blx	r3
    3782:	9b01      	ldr	r3, [sp, #4]
    3784:	2001      	movs	r0, #1
    3786:	429d      	cmp	r5, r3
    3788:	d027      	beq.n	37da <_scanf_i+0x1e2>
    378a:	2210      	movs	r2, #16
    378c:	6823      	ldr	r3, [r4, #0]
    378e:	401a      	ands	r2, r3
    3790:	d11c      	bne.n	37cc <_scanf_i+0x1d4>
    3792:	702a      	strb	r2, [r5, #0]
    3794:	6863      	ldr	r3, [r4, #4]
    3796:	9901      	ldr	r1, [sp, #4]
    3798:	9805      	ldr	r0, [sp, #20]
    379a:	9e06      	ldr	r6, [sp, #24]
    379c:	47b0      	blx	r6
    379e:	9b02      	ldr	r3, [sp, #8]
    37a0:	6822      	ldr	r2, [r4, #0]
    37a2:	681b      	ldr	r3, [r3, #0]
    37a4:	0691      	lsls	r1, r2, #26
    37a6:	d507      	bpl.n	37b8 <_scanf_i+0x1c0>
    37a8:	9902      	ldr	r1, [sp, #8]
    37aa:	1d1a      	adds	r2, r3, #4
    37ac:	600a      	str	r2, [r1, #0]
    37ae:	681b      	ldr	r3, [r3, #0]
    37b0:	6018      	str	r0, [r3, #0]
    37b2:	e008      	b.n	37c6 <_scanf_i+0x1ce>
    37b4:	2700      	movs	r7, #0
    37b6:	e7d6      	b.n	3766 <_scanf_i+0x16e>
    37b8:	07d1      	lsls	r1, r2, #31
    37ba:	d5f5      	bpl.n	37a8 <_scanf_i+0x1b0>
    37bc:	9902      	ldr	r1, [sp, #8]
    37be:	1d1a      	adds	r2, r3, #4
    37c0:	600a      	str	r2, [r1, #0]
    37c2:	681b      	ldr	r3, [r3, #0]
    37c4:	8018      	strh	r0, [r3, #0]
    37c6:	68e3      	ldr	r3, [r4, #12]
    37c8:	3301      	adds	r3, #1
    37ca:	60e3      	str	r3, [r4, #12]
    37cc:	2000      	movs	r0, #0
    37ce:	9b01      	ldr	r3, [sp, #4]
    37d0:	1aed      	subs	r5, r5, r3
    37d2:	6923      	ldr	r3, [r4, #16]
    37d4:	19ef      	adds	r7, r5, r7
    37d6:	19df      	adds	r7, r3, r7
    37d8:	6127      	str	r7, [r4, #16]
    37da:	b00d      	add	sp, #52	; 0x34
    37dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	00004784 	.word	0x00004784
    37e4:	00003b5d 	.word	0x00003b5d
    37e8:	00003c8d 	.word	0x00003c8d
    37ec:	fffffaff 	.word	0xfffffaff
    37f0:	00004790 	.word	0x00004790
    37f4:	fffff6ff 	.word	0xfffff6ff

000037f8 <lflush>:
    37f8:	2209      	movs	r2, #9
    37fa:	b510      	push	{r4, lr}
    37fc:	8983      	ldrh	r3, [r0, #12]
    37fe:	4013      	ands	r3, r2
    3800:	2200      	movs	r2, #0
    3802:	2b09      	cmp	r3, #9
    3804:	d102      	bne.n	380c <lflush+0x14>
    3806:	f7fe fff3 	bl	27f0 <fflush>
    380a:	0002      	movs	r2, r0
    380c:	0010      	movs	r0, r2
    380e:	bd10      	pop	{r4, pc}

00003810 <__srefill_r>:
    3810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3812:	0005      	movs	r5, r0
    3814:	000c      	movs	r4, r1
    3816:	2800      	cmp	r0, #0
    3818:	d004      	beq.n	3824 <__srefill_r+0x14>
    381a:	6983      	ldr	r3, [r0, #24]
    381c:	2b00      	cmp	r3, #0
    381e:	d101      	bne.n	3824 <__srefill_r+0x14>
    3820:	f7ff f83c 	bl	289c <__sinit>
    3824:	4b3d      	ldr	r3, [pc, #244]	; (391c <__srefill_r+0x10c>)
    3826:	429c      	cmp	r4, r3
    3828:	d10a      	bne.n	3840 <__srefill_r+0x30>
    382a:	686c      	ldr	r4, [r5, #4]
    382c:	2300      	movs	r3, #0
    382e:	6063      	str	r3, [r4, #4]
    3830:	230c      	movs	r3, #12
    3832:	5ee2      	ldrsh	r2, [r4, r3]
    3834:	b293      	uxth	r3, r2
    3836:	0699      	lsls	r1, r3, #26
    3838:	d50c      	bpl.n	3854 <__srefill_r+0x44>
    383a:	2001      	movs	r0, #1
    383c:	4240      	negs	r0, r0
    383e:	e068      	b.n	3912 <__srefill_r+0x102>
    3840:	4b37      	ldr	r3, [pc, #220]	; (3920 <__srefill_r+0x110>)
    3842:	429c      	cmp	r4, r3
    3844:	d101      	bne.n	384a <__srefill_r+0x3a>
    3846:	68ac      	ldr	r4, [r5, #8]
    3848:	e7f0      	b.n	382c <__srefill_r+0x1c>
    384a:	4b36      	ldr	r3, [pc, #216]	; (3924 <__srefill_r+0x114>)
    384c:	429c      	cmp	r4, r3
    384e:	d1ed      	bne.n	382c <__srefill_r+0x1c>
    3850:	68ec      	ldr	r4, [r5, #12]
    3852:	e7eb      	b.n	382c <__srefill_r+0x1c>
    3854:	0759      	lsls	r1, r3, #29
    3856:	d44a      	bmi.n	38ee <__srefill_r+0xde>
    3858:	06d9      	lsls	r1, r3, #27
    385a:	d405      	bmi.n	3868 <__srefill_r+0x58>
    385c:	2309      	movs	r3, #9
    385e:	602b      	str	r3, [r5, #0]
    3860:	3337      	adds	r3, #55	; 0x37
    3862:	4313      	orrs	r3, r2
    3864:	81a3      	strh	r3, [r4, #12]
    3866:	e7e8      	b.n	383a <__srefill_r+0x2a>
    3868:	2608      	movs	r6, #8
    386a:	4233      	tst	r3, r6
    386c:	d00a      	beq.n	3884 <__srefill_r+0x74>
    386e:	0021      	movs	r1, r4
    3870:	0028      	movs	r0, r5
    3872:	f7fe ff91 	bl	2798 <_fflush_r>
    3876:	2800      	cmp	r0, #0
    3878:	d1df      	bne.n	383a <__srefill_r+0x2a>
    387a:	89a3      	ldrh	r3, [r4, #12]
    387c:	60a0      	str	r0, [r4, #8]
    387e:	43b3      	bics	r3, r6
    3880:	81a3      	strh	r3, [r4, #12]
    3882:	61a0      	str	r0, [r4, #24]
    3884:	2304      	movs	r3, #4
    3886:	89a2      	ldrh	r2, [r4, #12]
    3888:	4313      	orrs	r3, r2
    388a:	81a3      	strh	r3, [r4, #12]
    388c:	6923      	ldr	r3, [r4, #16]
    388e:	2b00      	cmp	r3, #0
    3890:	d103      	bne.n	389a <__srefill_r+0x8a>
    3892:	0021      	movs	r1, r4
    3894:	0028      	movs	r0, r5
    3896:	f7ff f8db 	bl	2a50 <__smakebuf_r>
    389a:	230c      	movs	r3, #12
    389c:	5ee7      	ldrsh	r7, [r4, r3]
    389e:	b2be      	uxth	r6, r7
    38a0:	07b3      	lsls	r3, r6, #30
    38a2:	d00f      	beq.n	38c4 <__srefill_r+0xb4>
    38a4:	2301      	movs	r3, #1
    38a6:	81a3      	strh	r3, [r4, #12]
    38a8:	4b1f      	ldr	r3, [pc, #124]	; (3928 <__srefill_r+0x118>)
    38aa:	4920      	ldr	r1, [pc, #128]	; (392c <__srefill_r+0x11c>)
    38ac:	6818      	ldr	r0, [r3, #0]
    38ae:	f7ff f869 	bl	2984 <_fwalk>
    38b2:	2309      	movs	r3, #9
    38b4:	81a7      	strh	r7, [r4, #12]
    38b6:	401e      	ands	r6, r3
    38b8:	429e      	cmp	r6, r3
    38ba:	d103      	bne.n	38c4 <__srefill_r+0xb4>
    38bc:	0021      	movs	r1, r4
    38be:	0028      	movs	r0, r5
    38c0:	f7fe fee0 	bl	2684 <__sflush_r>
    38c4:	6923      	ldr	r3, [r4, #16]
    38c6:	6922      	ldr	r2, [r4, #16]
    38c8:	6023      	str	r3, [r4, #0]
    38ca:	0028      	movs	r0, r5
    38cc:	6963      	ldr	r3, [r4, #20]
    38ce:	6a21      	ldr	r1, [r4, #32]
    38d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    38d2:	47a8      	blx	r5
    38d4:	0002      	movs	r2, r0
    38d6:	6060      	str	r0, [r4, #4]
    38d8:	2000      	movs	r0, #0
    38da:	4282      	cmp	r2, r0
    38dc:	dc19      	bgt.n	3912 <__srefill_r+0x102>
    38de:	89a1      	ldrh	r1, [r4, #12]
    38e0:	4282      	cmp	r2, r0
    38e2:	d117      	bne.n	3914 <__srefill_r+0x104>
    38e4:	2320      	movs	r3, #32
    38e6:	430b      	orrs	r3, r1
    38e8:	81a3      	strh	r3, [r4, #12]
    38ea:	3801      	subs	r0, #1
    38ec:	e011      	b.n	3912 <__srefill_r+0x102>
    38ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    38f0:	2900      	cmp	r1, #0
    38f2:	d0cb      	beq.n	388c <__srefill_r+0x7c>
    38f4:	0023      	movs	r3, r4
    38f6:	3344      	adds	r3, #68	; 0x44
    38f8:	4299      	cmp	r1, r3
    38fa:	d002      	beq.n	3902 <__srefill_r+0xf2>
    38fc:	0028      	movs	r0, r5
    38fe:	f7ff f8f5 	bl	2aec <_free_r>
    3902:	2000      	movs	r0, #0
    3904:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3906:	6360      	str	r0, [r4, #52]	; 0x34
    3908:	6063      	str	r3, [r4, #4]
    390a:	4283      	cmp	r3, r0
    390c:	d0be      	beq.n	388c <__srefill_r+0x7c>
    390e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3910:	6023      	str	r3, [r4, #0]
    3912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3914:	2340      	movs	r3, #64	; 0x40
    3916:	6060      	str	r0, [r4, #4]
    3918:	430b      	orrs	r3, r1
    391a:	e7a3      	b.n	3864 <__srefill_r+0x54>
    391c:	00004710 	.word	0x00004710
    3920:	00004730 	.word	0x00004730
    3924:	000046f0 	.word	0x000046f0
    3928:	000046ec 	.word	0x000046ec
    392c:	000037f9 	.word	0x000037f9

00003930 <_sbrk_r>:
    3930:	2300      	movs	r3, #0
    3932:	b570      	push	{r4, r5, r6, lr}
    3934:	4c06      	ldr	r4, [pc, #24]	; (3950 <_sbrk_r+0x20>)
    3936:	0005      	movs	r5, r0
    3938:	0008      	movs	r0, r1
    393a:	6023      	str	r3, [r4, #0]
    393c:	f7fd fff2 	bl	1924 <_sbrk>
    3940:	1c43      	adds	r3, r0, #1
    3942:	d103      	bne.n	394c <_sbrk_r+0x1c>
    3944:	6823      	ldr	r3, [r4, #0]
    3946:	2b00      	cmp	r3, #0
    3948:	d000      	beq.n	394c <_sbrk_r+0x1c>
    394a:	602b      	str	r3, [r5, #0]
    394c:	bd70      	pop	{r4, r5, r6, pc}
    394e:	46c0      	nop			; (mov r8, r8)
    3950:	20000c54 	.word	0x20000c54

00003954 <__sccl>:
    3954:	b570      	push	{r4, r5, r6, lr}
    3956:	780b      	ldrb	r3, [r1, #0]
    3958:	2b5e      	cmp	r3, #94	; 0x5e
    395a:	d00d      	beq.n	3978 <__sccl+0x24>
    395c:	1c4a      	adds	r2, r1, #1
    395e:	2100      	movs	r1, #0
    3960:	0004      	movs	r4, r0
    3962:	1c45      	adds	r5, r0, #1
    3964:	35ff      	adds	r5, #255	; 0xff
    3966:	7021      	strb	r1, [r4, #0]
    3968:	3401      	adds	r4, #1
    396a:	42a5      	cmp	r5, r4
    396c:	d1fb      	bne.n	3966 <__sccl+0x12>
    396e:	2b00      	cmp	r3, #0
    3970:	d106      	bne.n	3980 <__sccl+0x2c>
    3972:	3a01      	subs	r2, #1
    3974:	0010      	movs	r0, r2
    3976:	bd70      	pop	{r4, r5, r6, pc}
    3978:	1c8a      	adds	r2, r1, #2
    397a:	784b      	ldrb	r3, [r1, #1]
    397c:	2101      	movs	r1, #1
    397e:	e7ef      	b.n	3960 <__sccl+0xc>
    3980:	2401      	movs	r4, #1
    3982:	404c      	eors	r4, r1
    3984:	0011      	movs	r1, r2
    3986:	54c4      	strb	r4, [r0, r3]
    3988:	780d      	ldrb	r5, [r1, #0]
    398a:	1c4a      	adds	r2, r1, #1
    398c:	2d2d      	cmp	r5, #45	; 0x2d
    398e:	d007      	beq.n	39a0 <__sccl+0x4c>
    3990:	2d5d      	cmp	r5, #93	; 0x5d
    3992:	d0ef      	beq.n	3974 <__sccl+0x20>
    3994:	2d00      	cmp	r5, #0
    3996:	d101      	bne.n	399c <__sccl+0x48>
    3998:	000a      	movs	r2, r1
    399a:	e7eb      	b.n	3974 <__sccl+0x20>
    399c:	002b      	movs	r3, r5
    399e:	e7f1      	b.n	3984 <__sccl+0x30>
    39a0:	784e      	ldrb	r6, [r1, #1]
    39a2:	2e5d      	cmp	r6, #93	; 0x5d
    39a4:	d0fa      	beq.n	399c <__sccl+0x48>
    39a6:	42b3      	cmp	r3, r6
    39a8:	dcf8      	bgt.n	399c <__sccl+0x48>
    39aa:	3102      	adds	r1, #2
    39ac:	3301      	adds	r3, #1
    39ae:	54c4      	strb	r4, [r0, r3]
    39b0:	429e      	cmp	r6, r3
    39b2:	dcfb      	bgt.n	39ac <__sccl+0x58>
    39b4:	e7e8      	b.n	3988 <__sccl+0x34>
	...

000039b8 <__sread>:
    39b8:	b570      	push	{r4, r5, r6, lr}
    39ba:	000c      	movs	r4, r1
    39bc:	250e      	movs	r5, #14
    39be:	5f49      	ldrsh	r1, [r1, r5]
    39c0:	f000 fada 	bl	3f78 <_read_r>
    39c4:	2800      	cmp	r0, #0
    39c6:	db03      	blt.n	39d0 <__sread+0x18>
    39c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    39ca:	181b      	adds	r3, r3, r0
    39cc:	6563      	str	r3, [r4, #84]	; 0x54
    39ce:	bd70      	pop	{r4, r5, r6, pc}
    39d0:	89a3      	ldrh	r3, [r4, #12]
    39d2:	4a02      	ldr	r2, [pc, #8]	; (39dc <__sread+0x24>)
    39d4:	4013      	ands	r3, r2
    39d6:	81a3      	strh	r3, [r4, #12]
    39d8:	e7f9      	b.n	39ce <__sread+0x16>
    39da:	46c0      	nop			; (mov r8, r8)
    39dc:	ffffefff 	.word	0xffffefff

000039e0 <__swrite>:
    39e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39e2:	001f      	movs	r7, r3
    39e4:	898b      	ldrh	r3, [r1, #12]
    39e6:	0005      	movs	r5, r0
    39e8:	000c      	movs	r4, r1
    39ea:	0016      	movs	r6, r2
    39ec:	05db      	lsls	r3, r3, #23
    39ee:	d505      	bpl.n	39fc <__swrite+0x1c>
    39f0:	230e      	movs	r3, #14
    39f2:	5ec9      	ldrsh	r1, [r1, r3]
    39f4:	2200      	movs	r2, #0
    39f6:	2302      	movs	r3, #2
    39f8:	f000 fa64 	bl	3ec4 <_lseek_r>
    39fc:	89a3      	ldrh	r3, [r4, #12]
    39fe:	4a05      	ldr	r2, [pc, #20]	; (3a14 <__swrite+0x34>)
    3a00:	0028      	movs	r0, r5
    3a02:	4013      	ands	r3, r2
    3a04:	81a3      	strh	r3, [r4, #12]
    3a06:	0032      	movs	r2, r6
    3a08:	230e      	movs	r3, #14
    3a0a:	5ee1      	ldrsh	r1, [r4, r3]
    3a0c:	003b      	movs	r3, r7
    3a0e:	f000 f9fd 	bl	3e0c <_write_r>
    3a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a14:	ffffefff 	.word	0xffffefff

00003a18 <__sseek>:
    3a18:	b570      	push	{r4, r5, r6, lr}
    3a1a:	000c      	movs	r4, r1
    3a1c:	250e      	movs	r5, #14
    3a1e:	5f49      	ldrsh	r1, [r1, r5]
    3a20:	f000 fa50 	bl	3ec4 <_lseek_r>
    3a24:	89a3      	ldrh	r3, [r4, #12]
    3a26:	1c42      	adds	r2, r0, #1
    3a28:	d103      	bne.n	3a32 <__sseek+0x1a>
    3a2a:	4a05      	ldr	r2, [pc, #20]	; (3a40 <__sseek+0x28>)
    3a2c:	4013      	ands	r3, r2
    3a2e:	81a3      	strh	r3, [r4, #12]
    3a30:	bd70      	pop	{r4, r5, r6, pc}
    3a32:	2280      	movs	r2, #128	; 0x80
    3a34:	0152      	lsls	r2, r2, #5
    3a36:	4313      	orrs	r3, r2
    3a38:	81a3      	strh	r3, [r4, #12]
    3a3a:	6560      	str	r0, [r4, #84]	; 0x54
    3a3c:	e7f8      	b.n	3a30 <__sseek+0x18>
    3a3e:	46c0      	nop			; (mov r8, r8)
    3a40:	ffffefff 	.word	0xffffefff

00003a44 <__sclose>:
    3a44:	b510      	push	{r4, lr}
    3a46:	230e      	movs	r3, #14
    3a48:	5ec9      	ldrsh	r1, [r1, r3]
    3a4a:	f000 f9f3 	bl	3e34 <_close_r>
    3a4e:	bd10      	pop	{r4, pc}

00003a50 <_strtol_l.isra.0>:
    3a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a52:	001f      	movs	r7, r3
    3a54:	000e      	movs	r6, r1
    3a56:	b087      	sub	sp, #28
    3a58:	9005      	str	r0, [sp, #20]
    3a5a:	9103      	str	r1, [sp, #12]
    3a5c:	9202      	str	r2, [sp, #8]
    3a5e:	980c      	ldr	r0, [sp, #48]	; 0x30
    3a60:	7834      	ldrb	r4, [r6, #0]
    3a62:	f000 fa1d 	bl	3ea0 <__locale_ctype_ptr_l>
    3a66:	2208      	movs	r2, #8
    3a68:	1900      	adds	r0, r0, r4
    3a6a:	7843      	ldrb	r3, [r0, #1]
    3a6c:	1c75      	adds	r5, r6, #1
    3a6e:	4013      	ands	r3, r2
    3a70:	d10c      	bne.n	3a8c <_strtol_l.isra.0+0x3c>
    3a72:	2c2d      	cmp	r4, #45	; 0x2d
    3a74:	d10c      	bne.n	3a90 <_strtol_l.isra.0+0x40>
    3a76:	3301      	adds	r3, #1
    3a78:	782c      	ldrb	r4, [r5, #0]
    3a7a:	9301      	str	r3, [sp, #4]
    3a7c:	1cb5      	adds	r5, r6, #2
    3a7e:	2f00      	cmp	r7, #0
    3a80:	d00c      	beq.n	3a9c <_strtol_l.isra.0+0x4c>
    3a82:	2f10      	cmp	r7, #16
    3a84:	d114      	bne.n	3ab0 <_strtol_l.isra.0+0x60>
    3a86:	2c30      	cmp	r4, #48	; 0x30
    3a88:	d00a      	beq.n	3aa0 <_strtol_l.isra.0+0x50>
    3a8a:	e011      	b.n	3ab0 <_strtol_l.isra.0+0x60>
    3a8c:	002e      	movs	r6, r5
    3a8e:	e7e6      	b.n	3a5e <_strtol_l.isra.0+0xe>
    3a90:	9301      	str	r3, [sp, #4]
    3a92:	2c2b      	cmp	r4, #43	; 0x2b
    3a94:	d1f3      	bne.n	3a7e <_strtol_l.isra.0+0x2e>
    3a96:	782c      	ldrb	r4, [r5, #0]
    3a98:	1cb5      	adds	r5, r6, #2
    3a9a:	e7f0      	b.n	3a7e <_strtol_l.isra.0+0x2e>
    3a9c:	2c30      	cmp	r4, #48	; 0x30
    3a9e:	d12f      	bne.n	3b00 <_strtol_l.isra.0+0xb0>
    3aa0:	2220      	movs	r2, #32
    3aa2:	782b      	ldrb	r3, [r5, #0]
    3aa4:	4393      	bics	r3, r2
    3aa6:	2b58      	cmp	r3, #88	; 0x58
    3aa8:	d151      	bne.n	3b4e <_strtol_l.isra.0+0xfe>
    3aaa:	2710      	movs	r7, #16
    3aac:	786c      	ldrb	r4, [r5, #1]
    3aae:	3502      	adds	r5, #2
    3ab0:	9b01      	ldr	r3, [sp, #4]
    3ab2:	4a29      	ldr	r2, [pc, #164]	; (3b58 <_strtol_l.isra.0+0x108>)
    3ab4:	0039      	movs	r1, r7
    3ab6:	189e      	adds	r6, r3, r2
    3ab8:	0030      	movs	r0, r6
    3aba:	f7fe fb5d 	bl	2178 <__aeabi_uidivmod>
    3abe:	0030      	movs	r0, r6
    3ac0:	9104      	str	r1, [sp, #16]
    3ac2:	0039      	movs	r1, r7
    3ac4:	f7fe fad2 	bl	206c <__udivsi3>
    3ac8:	2101      	movs	r1, #1
    3aca:	2300      	movs	r3, #0
    3acc:	4249      	negs	r1, r1
    3ace:	0002      	movs	r2, r0
    3ad0:	468c      	mov	ip, r1
    3ad2:	0018      	movs	r0, r3
    3ad4:	0021      	movs	r1, r4
    3ad6:	3930      	subs	r1, #48	; 0x30
    3ad8:	2909      	cmp	r1, #9
    3ada:	d813      	bhi.n	3b04 <_strtol_l.isra.0+0xb4>
    3adc:	000c      	movs	r4, r1
    3ade:	42a7      	cmp	r7, r4
    3ae0:	dd1c      	ble.n	3b1c <_strtol_l.isra.0+0xcc>
    3ae2:	1c59      	adds	r1, r3, #1
    3ae4:	d009      	beq.n	3afa <_strtol_l.isra.0+0xaa>
    3ae6:	4663      	mov	r3, ip
    3ae8:	4282      	cmp	r2, r0
    3aea:	d306      	bcc.n	3afa <_strtol_l.isra.0+0xaa>
    3aec:	d102      	bne.n	3af4 <_strtol_l.isra.0+0xa4>
    3aee:	9904      	ldr	r1, [sp, #16]
    3af0:	42a1      	cmp	r1, r4
    3af2:	db02      	blt.n	3afa <_strtol_l.isra.0+0xaa>
    3af4:	2301      	movs	r3, #1
    3af6:	4378      	muls	r0, r7
    3af8:	1820      	adds	r0, r4, r0
    3afa:	782c      	ldrb	r4, [r5, #0]
    3afc:	3501      	adds	r5, #1
    3afe:	e7e9      	b.n	3ad4 <_strtol_l.isra.0+0x84>
    3b00:	270a      	movs	r7, #10
    3b02:	e7d5      	b.n	3ab0 <_strtol_l.isra.0+0x60>
    3b04:	0021      	movs	r1, r4
    3b06:	3941      	subs	r1, #65	; 0x41
    3b08:	2919      	cmp	r1, #25
    3b0a:	d801      	bhi.n	3b10 <_strtol_l.isra.0+0xc0>
    3b0c:	3c37      	subs	r4, #55	; 0x37
    3b0e:	e7e6      	b.n	3ade <_strtol_l.isra.0+0x8e>
    3b10:	0021      	movs	r1, r4
    3b12:	3961      	subs	r1, #97	; 0x61
    3b14:	2919      	cmp	r1, #25
    3b16:	d801      	bhi.n	3b1c <_strtol_l.isra.0+0xcc>
    3b18:	3c57      	subs	r4, #87	; 0x57
    3b1a:	e7e0      	b.n	3ade <_strtol_l.isra.0+0x8e>
    3b1c:	1c5a      	adds	r2, r3, #1
    3b1e:	d108      	bne.n	3b32 <_strtol_l.isra.0+0xe2>
    3b20:	9a05      	ldr	r2, [sp, #20]
    3b22:	3323      	adds	r3, #35	; 0x23
    3b24:	6013      	str	r3, [r2, #0]
    3b26:	9b02      	ldr	r3, [sp, #8]
    3b28:	0030      	movs	r0, r6
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d10b      	bne.n	3b46 <_strtol_l.isra.0+0xf6>
    3b2e:	b007      	add	sp, #28
    3b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b32:	9a01      	ldr	r2, [sp, #4]
    3b34:	2a00      	cmp	r2, #0
    3b36:	d000      	beq.n	3b3a <_strtol_l.isra.0+0xea>
    3b38:	4240      	negs	r0, r0
    3b3a:	9a02      	ldr	r2, [sp, #8]
    3b3c:	2a00      	cmp	r2, #0
    3b3e:	d0f6      	beq.n	3b2e <_strtol_l.isra.0+0xde>
    3b40:	9a03      	ldr	r2, [sp, #12]
    3b42:	2b00      	cmp	r3, #0
    3b44:	d000      	beq.n	3b48 <_strtol_l.isra.0+0xf8>
    3b46:	1e6a      	subs	r2, r5, #1
    3b48:	9b02      	ldr	r3, [sp, #8]
    3b4a:	601a      	str	r2, [r3, #0]
    3b4c:	e7ef      	b.n	3b2e <_strtol_l.isra.0+0xde>
    3b4e:	2430      	movs	r4, #48	; 0x30
    3b50:	2f00      	cmp	r7, #0
    3b52:	d1ad      	bne.n	3ab0 <_strtol_l.isra.0+0x60>
    3b54:	3708      	adds	r7, #8
    3b56:	e7ab      	b.n	3ab0 <_strtol_l.isra.0+0x60>
    3b58:	7fffffff 	.word	0x7fffffff

00003b5c <_strtol_r>:
    3b5c:	b513      	push	{r0, r1, r4, lr}
    3b5e:	4c05      	ldr	r4, [pc, #20]	; (3b74 <_strtol_r+0x18>)
    3b60:	6824      	ldr	r4, [r4, #0]
    3b62:	6a24      	ldr	r4, [r4, #32]
    3b64:	2c00      	cmp	r4, #0
    3b66:	d100      	bne.n	3b6a <_strtol_r+0xe>
    3b68:	4c03      	ldr	r4, [pc, #12]	; (3b78 <_strtol_r+0x1c>)
    3b6a:	9400      	str	r4, [sp, #0]
    3b6c:	f7ff ff70 	bl	3a50 <_strtol_l.isra.0>
    3b70:	bd16      	pop	{r1, r2, r4, pc}
    3b72:	46c0      	nop			; (mov r8, r8)
    3b74:	20000004 	.word	0x20000004
    3b78:	20000068 	.word	0x20000068

00003b7c <_strtoul_l.isra.0>:
    3b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b7e:	001f      	movs	r7, r3
    3b80:	000e      	movs	r6, r1
    3b82:	b087      	sub	sp, #28
    3b84:	9005      	str	r0, [sp, #20]
    3b86:	9103      	str	r1, [sp, #12]
    3b88:	9201      	str	r2, [sp, #4]
    3b8a:	980c      	ldr	r0, [sp, #48]	; 0x30
    3b8c:	7834      	ldrb	r4, [r6, #0]
    3b8e:	f000 f987 	bl	3ea0 <__locale_ctype_ptr_l>
    3b92:	2208      	movs	r2, #8
    3b94:	1900      	adds	r0, r0, r4
    3b96:	7843      	ldrb	r3, [r0, #1]
    3b98:	1c75      	adds	r5, r6, #1
    3b9a:	4013      	ands	r3, r2
    3b9c:	d10c      	bne.n	3bb8 <_strtoul_l.isra.0+0x3c>
    3b9e:	2c2d      	cmp	r4, #45	; 0x2d
    3ba0:	d10c      	bne.n	3bbc <_strtoul_l.isra.0+0x40>
    3ba2:	3301      	adds	r3, #1
    3ba4:	782c      	ldrb	r4, [r5, #0]
    3ba6:	9302      	str	r3, [sp, #8]
    3ba8:	1cb5      	adds	r5, r6, #2
    3baa:	2f00      	cmp	r7, #0
    3bac:	d00c      	beq.n	3bc8 <_strtoul_l.isra.0+0x4c>
    3bae:	2f10      	cmp	r7, #16
    3bb0:	d114      	bne.n	3bdc <_strtoul_l.isra.0+0x60>
    3bb2:	2c30      	cmp	r4, #48	; 0x30
    3bb4:	d00a      	beq.n	3bcc <_strtoul_l.isra.0+0x50>
    3bb6:	e011      	b.n	3bdc <_strtoul_l.isra.0+0x60>
    3bb8:	002e      	movs	r6, r5
    3bba:	e7e6      	b.n	3b8a <_strtoul_l.isra.0+0xe>
    3bbc:	9302      	str	r3, [sp, #8]
    3bbe:	2c2b      	cmp	r4, #43	; 0x2b
    3bc0:	d1f3      	bne.n	3baa <_strtoul_l.isra.0+0x2e>
    3bc2:	782c      	ldrb	r4, [r5, #0]
    3bc4:	1cb5      	adds	r5, r6, #2
    3bc6:	e7f0      	b.n	3baa <_strtoul_l.isra.0+0x2e>
    3bc8:	2c30      	cmp	r4, #48	; 0x30
    3bca:	d12f      	bne.n	3c2c <_strtoul_l.isra.0+0xb0>
    3bcc:	2220      	movs	r2, #32
    3bce:	782b      	ldrb	r3, [r5, #0]
    3bd0:	4393      	bics	r3, r2
    3bd2:	2b58      	cmp	r3, #88	; 0x58
    3bd4:	d154      	bne.n	3c80 <_strtoul_l.isra.0+0x104>
    3bd6:	2710      	movs	r7, #16
    3bd8:	786c      	ldrb	r4, [r5, #1]
    3bda:	3502      	adds	r5, #2
    3bdc:	2001      	movs	r0, #1
    3bde:	0039      	movs	r1, r7
    3be0:	4240      	negs	r0, r0
    3be2:	f7fe fa43 	bl	206c <__udivsi3>
    3be6:	0006      	movs	r6, r0
    3be8:	2001      	movs	r0, #1
    3bea:	0039      	movs	r1, r7
    3bec:	4240      	negs	r0, r0
    3bee:	f7fe fac3 	bl	2178 <__aeabi_uidivmod>
    3bf2:	2300      	movs	r3, #0
    3bf4:	9104      	str	r1, [sp, #16]
    3bf6:	2101      	movs	r1, #1
    3bf8:	2201      	movs	r2, #1
    3bfa:	0018      	movs	r0, r3
    3bfc:	468c      	mov	ip, r1
    3bfe:	4252      	negs	r2, r2
    3c00:	0021      	movs	r1, r4
    3c02:	3930      	subs	r1, #48	; 0x30
    3c04:	2909      	cmp	r1, #9
    3c06:	d813      	bhi.n	3c30 <_strtoul_l.isra.0+0xb4>
    3c08:	000c      	movs	r4, r1
    3c0a:	42a7      	cmp	r7, r4
    3c0c:	dd1e      	ble.n	3c4c <_strtoul_l.isra.0+0xd0>
    3c0e:	2b00      	cmp	r3, #0
    3c10:	db1a      	blt.n	3c48 <_strtoul_l.isra.0+0xcc>
    3c12:	0013      	movs	r3, r2
    3c14:	4286      	cmp	r6, r0
    3c16:	d306      	bcc.n	3c26 <_strtoul_l.isra.0+0xaa>
    3c18:	d102      	bne.n	3c20 <_strtoul_l.isra.0+0xa4>
    3c1a:	9904      	ldr	r1, [sp, #16]
    3c1c:	42a1      	cmp	r1, r4
    3c1e:	db02      	blt.n	3c26 <_strtoul_l.isra.0+0xaa>
    3c20:	4663      	mov	r3, ip
    3c22:	4378      	muls	r0, r7
    3c24:	1820      	adds	r0, r4, r0
    3c26:	782c      	ldrb	r4, [r5, #0]
    3c28:	3501      	adds	r5, #1
    3c2a:	e7e9      	b.n	3c00 <_strtoul_l.isra.0+0x84>
    3c2c:	270a      	movs	r7, #10
    3c2e:	e7d5      	b.n	3bdc <_strtoul_l.isra.0+0x60>
    3c30:	0021      	movs	r1, r4
    3c32:	3941      	subs	r1, #65	; 0x41
    3c34:	2919      	cmp	r1, #25
    3c36:	d801      	bhi.n	3c3c <_strtoul_l.isra.0+0xc0>
    3c38:	3c37      	subs	r4, #55	; 0x37
    3c3a:	e7e6      	b.n	3c0a <_strtoul_l.isra.0+0x8e>
    3c3c:	0021      	movs	r1, r4
    3c3e:	3961      	subs	r1, #97	; 0x61
    3c40:	2919      	cmp	r1, #25
    3c42:	d803      	bhi.n	3c4c <_strtoul_l.isra.0+0xd0>
    3c44:	3c57      	subs	r4, #87	; 0x57
    3c46:	e7e0      	b.n	3c0a <_strtoul_l.isra.0+0x8e>
    3c48:	0013      	movs	r3, r2
    3c4a:	e7ec      	b.n	3c26 <_strtoul_l.isra.0+0xaa>
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	da09      	bge.n	3c64 <_strtoul_l.isra.0+0xe8>
    3c50:	2322      	movs	r3, #34	; 0x22
    3c52:	2001      	movs	r0, #1
    3c54:	9a05      	ldr	r2, [sp, #20]
    3c56:	4240      	negs	r0, r0
    3c58:	6013      	str	r3, [r2, #0]
    3c5a:	9b01      	ldr	r3, [sp, #4]
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	d10b      	bne.n	3c78 <_strtoul_l.isra.0+0xfc>
    3c60:	b007      	add	sp, #28
    3c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c64:	9a02      	ldr	r2, [sp, #8]
    3c66:	2a00      	cmp	r2, #0
    3c68:	d000      	beq.n	3c6c <_strtoul_l.isra.0+0xf0>
    3c6a:	4240      	negs	r0, r0
    3c6c:	9a01      	ldr	r2, [sp, #4]
    3c6e:	2a00      	cmp	r2, #0
    3c70:	d0f6      	beq.n	3c60 <_strtoul_l.isra.0+0xe4>
    3c72:	9a03      	ldr	r2, [sp, #12]
    3c74:	2b00      	cmp	r3, #0
    3c76:	d000      	beq.n	3c7a <_strtoul_l.isra.0+0xfe>
    3c78:	1e6a      	subs	r2, r5, #1
    3c7a:	9b01      	ldr	r3, [sp, #4]
    3c7c:	601a      	str	r2, [r3, #0]
    3c7e:	e7ef      	b.n	3c60 <_strtoul_l.isra.0+0xe4>
    3c80:	2430      	movs	r4, #48	; 0x30
    3c82:	2f00      	cmp	r7, #0
    3c84:	d1aa      	bne.n	3bdc <_strtoul_l.isra.0+0x60>
    3c86:	3708      	adds	r7, #8
    3c88:	e7a8      	b.n	3bdc <_strtoul_l.isra.0+0x60>
	...

00003c8c <_strtoul_r>:
    3c8c:	b513      	push	{r0, r1, r4, lr}
    3c8e:	4c05      	ldr	r4, [pc, #20]	; (3ca4 <_strtoul_r+0x18>)
    3c90:	6824      	ldr	r4, [r4, #0]
    3c92:	6a24      	ldr	r4, [r4, #32]
    3c94:	2c00      	cmp	r4, #0
    3c96:	d100      	bne.n	3c9a <_strtoul_r+0xe>
    3c98:	4c03      	ldr	r4, [pc, #12]	; (3ca8 <_strtoul_r+0x1c>)
    3c9a:	9400      	str	r4, [sp, #0]
    3c9c:	f7ff ff6e 	bl	3b7c <_strtoul_l.isra.0>
    3ca0:	bd16      	pop	{r1, r2, r4, pc}
    3ca2:	46c0      	nop			; (mov r8, r8)
    3ca4:	20000004 	.word	0x20000004
    3ca8:	20000068 	.word	0x20000068

00003cac <__submore>:
    3cac:	000b      	movs	r3, r1
    3cae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3cb0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    3cb2:	3344      	adds	r3, #68	; 0x44
    3cb4:	000c      	movs	r4, r1
    3cb6:	429d      	cmp	r5, r3
    3cb8:	d11c      	bne.n	3cf4 <__submore+0x48>
    3cba:	2680      	movs	r6, #128	; 0x80
    3cbc:	00f6      	lsls	r6, r6, #3
    3cbe:	0031      	movs	r1, r6
    3cc0:	f7fe ff5e 	bl	2b80 <_malloc_r>
    3cc4:	2800      	cmp	r0, #0
    3cc6:	d102      	bne.n	3cce <__submore+0x22>
    3cc8:	2001      	movs	r0, #1
    3cca:	4240      	negs	r0, r0
    3ccc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3cce:	0023      	movs	r3, r4
    3cd0:	6360      	str	r0, [r4, #52]	; 0x34
    3cd2:	63a6      	str	r6, [r4, #56]	; 0x38
    3cd4:	3346      	adds	r3, #70	; 0x46
    3cd6:	781a      	ldrb	r2, [r3, #0]
    3cd8:	4b10      	ldr	r3, [pc, #64]	; (3d1c <__submore+0x70>)
    3cda:	54c2      	strb	r2, [r0, r3]
    3cdc:	0023      	movs	r3, r4
    3cde:	3345      	adds	r3, #69	; 0x45
    3ce0:	781a      	ldrb	r2, [r3, #0]
    3ce2:	4b0f      	ldr	r3, [pc, #60]	; (3d20 <__submore+0x74>)
    3ce4:	54c2      	strb	r2, [r0, r3]
    3ce6:	782a      	ldrb	r2, [r5, #0]
    3ce8:	4b0e      	ldr	r3, [pc, #56]	; (3d24 <__submore+0x78>)
    3cea:	54c2      	strb	r2, [r0, r3]
    3cec:	18c0      	adds	r0, r0, r3
    3cee:	6020      	str	r0, [r4, #0]
    3cf0:	2000      	movs	r0, #0
    3cf2:	e7eb      	b.n	3ccc <__submore+0x20>
    3cf4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    3cf6:	0029      	movs	r1, r5
    3cf8:	0073      	lsls	r3, r6, #1
    3cfa:	001a      	movs	r2, r3
    3cfc:	9301      	str	r3, [sp, #4]
    3cfe:	f000 f914 	bl	3f2a <_realloc_r>
    3d02:	1e05      	subs	r5, r0, #0
    3d04:	d0e0      	beq.n	3cc8 <__submore+0x1c>
    3d06:	1987      	adds	r7, r0, r6
    3d08:	0001      	movs	r1, r0
    3d0a:	0032      	movs	r2, r6
    3d0c:	0038      	movs	r0, r7
    3d0e:	f7fe fa87 	bl	2220 <memcpy>
    3d12:	9b01      	ldr	r3, [sp, #4]
    3d14:	6027      	str	r7, [r4, #0]
    3d16:	6365      	str	r5, [r4, #52]	; 0x34
    3d18:	63a3      	str	r3, [r4, #56]	; 0x38
    3d1a:	e7e9      	b.n	3cf0 <__submore+0x44>
    3d1c:	000003ff 	.word	0x000003ff
    3d20:	000003fe 	.word	0x000003fe
    3d24:	000003fd 	.word	0x000003fd

00003d28 <_ungetc_r>:
    3d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d2a:	0005      	movs	r5, r0
    3d2c:	000e      	movs	r6, r1
    3d2e:	0014      	movs	r4, r2
    3d30:	1c4b      	adds	r3, r1, #1
    3d32:	d103      	bne.n	3d3c <_ungetc_r+0x14>
    3d34:	2601      	movs	r6, #1
    3d36:	4276      	negs	r6, r6
    3d38:	0030      	movs	r0, r6
    3d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d3c:	2800      	cmp	r0, #0
    3d3e:	d004      	beq.n	3d4a <_ungetc_r+0x22>
    3d40:	6983      	ldr	r3, [r0, #24]
    3d42:	2b00      	cmp	r3, #0
    3d44:	d101      	bne.n	3d4a <_ungetc_r+0x22>
    3d46:	f7fe fda9 	bl	289c <__sinit>
    3d4a:	4b2d      	ldr	r3, [pc, #180]	; (3e00 <_ungetc_r+0xd8>)
    3d4c:	429c      	cmp	r4, r3
    3d4e:	d12d      	bne.n	3dac <_ungetc_r+0x84>
    3d50:	686c      	ldr	r4, [r5, #4]
    3d52:	2220      	movs	r2, #32
    3d54:	89a3      	ldrh	r3, [r4, #12]
    3d56:	4393      	bics	r3, r2
    3d58:	b21b      	sxth	r3, r3
    3d5a:	81a3      	strh	r3, [r4, #12]
    3d5c:	b29b      	uxth	r3, r3
    3d5e:	075a      	lsls	r2, r3, #29
    3d60:	d413      	bmi.n	3d8a <_ungetc_r+0x62>
    3d62:	06da      	lsls	r2, r3, #27
    3d64:	d5e6      	bpl.n	3d34 <_ungetc_r+0xc>
    3d66:	2708      	movs	r7, #8
    3d68:	423b      	tst	r3, r7
    3d6a:	d00a      	beq.n	3d82 <_ungetc_r+0x5a>
    3d6c:	0021      	movs	r1, r4
    3d6e:	0028      	movs	r0, r5
    3d70:	f7fe fd12 	bl	2798 <_fflush_r>
    3d74:	2800      	cmp	r0, #0
    3d76:	d1dd      	bne.n	3d34 <_ungetc_r+0xc>
    3d78:	89a3      	ldrh	r3, [r4, #12]
    3d7a:	60a0      	str	r0, [r4, #8]
    3d7c:	43bb      	bics	r3, r7
    3d7e:	81a3      	strh	r3, [r4, #12]
    3d80:	61a0      	str	r0, [r4, #24]
    3d82:	2304      	movs	r3, #4
    3d84:	89a2      	ldrh	r2, [r4, #12]
    3d86:	4313      	orrs	r3, r2
    3d88:	81a3      	strh	r3, [r4, #12]
    3d8a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    3d8c:	b2f7      	uxtb	r7, r6
    3d8e:	6863      	ldr	r3, [r4, #4]
    3d90:	b2f6      	uxtb	r6, r6
    3d92:	2a00      	cmp	r2, #0
    3d94:	d01b      	beq.n	3dce <_ungetc_r+0xa6>
    3d96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3d98:	4293      	cmp	r3, r2
    3d9a:	da11      	bge.n	3dc0 <_ungetc_r+0x98>
    3d9c:	6823      	ldr	r3, [r4, #0]
    3d9e:	3b01      	subs	r3, #1
    3da0:	6023      	str	r3, [r4, #0]
    3da2:	701f      	strb	r7, [r3, #0]
    3da4:	6863      	ldr	r3, [r4, #4]
    3da6:	3301      	adds	r3, #1
    3da8:	6063      	str	r3, [r4, #4]
    3daa:	e7c5      	b.n	3d38 <_ungetc_r+0x10>
    3dac:	4b15      	ldr	r3, [pc, #84]	; (3e04 <_ungetc_r+0xdc>)
    3dae:	429c      	cmp	r4, r3
    3db0:	d101      	bne.n	3db6 <_ungetc_r+0x8e>
    3db2:	68ac      	ldr	r4, [r5, #8]
    3db4:	e7cd      	b.n	3d52 <_ungetc_r+0x2a>
    3db6:	4b14      	ldr	r3, [pc, #80]	; (3e08 <_ungetc_r+0xe0>)
    3db8:	429c      	cmp	r4, r3
    3dba:	d1ca      	bne.n	3d52 <_ungetc_r+0x2a>
    3dbc:	68ec      	ldr	r4, [r5, #12]
    3dbe:	e7c8      	b.n	3d52 <_ungetc_r+0x2a>
    3dc0:	0021      	movs	r1, r4
    3dc2:	0028      	movs	r0, r5
    3dc4:	f7ff ff72 	bl	3cac <__submore>
    3dc8:	2800      	cmp	r0, #0
    3dca:	d0e7      	beq.n	3d9c <_ungetc_r+0x74>
    3dcc:	e7b2      	b.n	3d34 <_ungetc_r+0xc>
    3dce:	6921      	ldr	r1, [r4, #16]
    3dd0:	6822      	ldr	r2, [r4, #0]
    3dd2:	2900      	cmp	r1, #0
    3dd4:	d007      	beq.n	3de6 <_ungetc_r+0xbe>
    3dd6:	4291      	cmp	r1, r2
    3dd8:	d205      	bcs.n	3de6 <_ungetc_r+0xbe>
    3dda:	1e51      	subs	r1, r2, #1
    3ddc:	7808      	ldrb	r0, [r1, #0]
    3dde:	4286      	cmp	r6, r0
    3de0:	d101      	bne.n	3de6 <_ungetc_r+0xbe>
    3de2:	6021      	str	r1, [r4, #0]
    3de4:	e7df      	b.n	3da6 <_ungetc_r+0x7e>
    3de6:	6423      	str	r3, [r4, #64]	; 0x40
    3de8:	0023      	movs	r3, r4
    3dea:	3344      	adds	r3, #68	; 0x44
    3dec:	6363      	str	r3, [r4, #52]	; 0x34
    3dee:	2303      	movs	r3, #3
    3df0:	63a3      	str	r3, [r4, #56]	; 0x38
    3df2:	0023      	movs	r3, r4
    3df4:	3346      	adds	r3, #70	; 0x46
    3df6:	63e2      	str	r2, [r4, #60]	; 0x3c
    3df8:	701f      	strb	r7, [r3, #0]
    3dfa:	6023      	str	r3, [r4, #0]
    3dfc:	2301      	movs	r3, #1
    3dfe:	e7d3      	b.n	3da8 <_ungetc_r+0x80>
    3e00:	00004710 	.word	0x00004710
    3e04:	00004730 	.word	0x00004730
    3e08:	000046f0 	.word	0x000046f0

00003e0c <_write_r>:
    3e0c:	b570      	push	{r4, r5, r6, lr}
    3e0e:	0005      	movs	r5, r0
    3e10:	0008      	movs	r0, r1
    3e12:	0011      	movs	r1, r2
    3e14:	2200      	movs	r2, #0
    3e16:	4c06      	ldr	r4, [pc, #24]	; (3e30 <_write_r+0x24>)
    3e18:	6022      	str	r2, [r4, #0]
    3e1a:	001a      	movs	r2, r3
    3e1c:	f7fd fd5a 	bl	18d4 <_write>
    3e20:	1c43      	adds	r3, r0, #1
    3e22:	d103      	bne.n	3e2c <_write_r+0x20>
    3e24:	6823      	ldr	r3, [r4, #0]
    3e26:	2b00      	cmp	r3, #0
    3e28:	d000      	beq.n	3e2c <_write_r+0x20>
    3e2a:	602b      	str	r3, [r5, #0]
    3e2c:	bd70      	pop	{r4, r5, r6, pc}
    3e2e:	46c0      	nop			; (mov r8, r8)
    3e30:	20000c54 	.word	0x20000c54

00003e34 <_close_r>:
    3e34:	2300      	movs	r3, #0
    3e36:	b570      	push	{r4, r5, r6, lr}
    3e38:	4c06      	ldr	r4, [pc, #24]	; (3e54 <_close_r+0x20>)
    3e3a:	0005      	movs	r5, r0
    3e3c:	0008      	movs	r0, r1
    3e3e:	6023      	str	r3, [r4, #0]
    3e40:	f7fd fd82 	bl	1948 <_close>
    3e44:	1c43      	adds	r3, r0, #1
    3e46:	d103      	bne.n	3e50 <_close_r+0x1c>
    3e48:	6823      	ldr	r3, [r4, #0]
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	d000      	beq.n	3e50 <_close_r+0x1c>
    3e4e:	602b      	str	r3, [r5, #0]
    3e50:	bd70      	pop	{r4, r5, r6, pc}
    3e52:	46c0      	nop			; (mov r8, r8)
    3e54:	20000c54 	.word	0x20000c54

00003e58 <_fstat_r>:
    3e58:	2300      	movs	r3, #0
    3e5a:	b570      	push	{r4, r5, r6, lr}
    3e5c:	4c06      	ldr	r4, [pc, #24]	; (3e78 <_fstat_r+0x20>)
    3e5e:	0005      	movs	r5, r0
    3e60:	0008      	movs	r0, r1
    3e62:	0011      	movs	r1, r2
    3e64:	6023      	str	r3, [r4, #0]
    3e66:	f7fd fd72 	bl	194e <_fstat>
    3e6a:	1c43      	adds	r3, r0, #1
    3e6c:	d103      	bne.n	3e76 <_fstat_r+0x1e>
    3e6e:	6823      	ldr	r3, [r4, #0]
    3e70:	2b00      	cmp	r3, #0
    3e72:	d000      	beq.n	3e76 <_fstat_r+0x1e>
    3e74:	602b      	str	r3, [r5, #0]
    3e76:	bd70      	pop	{r4, r5, r6, pc}
    3e78:	20000c54 	.word	0x20000c54

00003e7c <_isatty_r>:
    3e7c:	2300      	movs	r3, #0
    3e7e:	b570      	push	{r4, r5, r6, lr}
    3e80:	4c06      	ldr	r4, [pc, #24]	; (3e9c <_isatty_r+0x20>)
    3e82:	0005      	movs	r5, r0
    3e84:	0008      	movs	r0, r1
    3e86:	6023      	str	r3, [r4, #0]
    3e88:	f7fd fd66 	bl	1958 <_isatty>
    3e8c:	1c43      	adds	r3, r0, #1
    3e8e:	d103      	bne.n	3e98 <_isatty_r+0x1c>
    3e90:	6823      	ldr	r3, [r4, #0]
    3e92:	2b00      	cmp	r3, #0
    3e94:	d000      	beq.n	3e98 <_isatty_r+0x1c>
    3e96:	602b      	str	r3, [r5, #0]
    3e98:	bd70      	pop	{r4, r5, r6, pc}
    3e9a:	46c0      	nop			; (mov r8, r8)
    3e9c:	20000c54 	.word	0x20000c54

00003ea0 <__locale_ctype_ptr_l>:
    3ea0:	30ec      	adds	r0, #236	; 0xec
    3ea2:	6800      	ldr	r0, [r0, #0]
    3ea4:	4770      	bx	lr
	...

00003ea8 <__locale_ctype_ptr>:
    3ea8:	4b04      	ldr	r3, [pc, #16]	; (3ebc <__locale_ctype_ptr+0x14>)
    3eaa:	681b      	ldr	r3, [r3, #0]
    3eac:	6a1b      	ldr	r3, [r3, #32]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d100      	bne.n	3eb4 <__locale_ctype_ptr+0xc>
    3eb2:	4b03      	ldr	r3, [pc, #12]	; (3ec0 <__locale_ctype_ptr+0x18>)
    3eb4:	33ec      	adds	r3, #236	; 0xec
    3eb6:	6818      	ldr	r0, [r3, #0]
    3eb8:	4770      	bx	lr
    3eba:	46c0      	nop			; (mov r8, r8)
    3ebc:	20000004 	.word	0x20000004
    3ec0:	20000068 	.word	0x20000068

00003ec4 <_lseek_r>:
    3ec4:	b570      	push	{r4, r5, r6, lr}
    3ec6:	0005      	movs	r5, r0
    3ec8:	0008      	movs	r0, r1
    3eca:	0011      	movs	r1, r2
    3ecc:	2200      	movs	r2, #0
    3ece:	4c06      	ldr	r4, [pc, #24]	; (3ee8 <_lseek_r+0x24>)
    3ed0:	6022      	str	r2, [r4, #0]
    3ed2:	001a      	movs	r2, r3
    3ed4:	f7fd fd42 	bl	195c <_lseek>
    3ed8:	1c43      	adds	r3, r0, #1
    3eda:	d103      	bne.n	3ee4 <_lseek_r+0x20>
    3edc:	6823      	ldr	r3, [r4, #0]
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d000      	beq.n	3ee4 <_lseek_r+0x20>
    3ee2:	602b      	str	r3, [r5, #0]
    3ee4:	bd70      	pop	{r4, r5, r6, pc}
    3ee6:	46c0      	nop			; (mov r8, r8)
    3ee8:	20000c54 	.word	0x20000c54

00003eec <__ascii_mbtowc>:
    3eec:	b082      	sub	sp, #8
    3eee:	2900      	cmp	r1, #0
    3ef0:	d100      	bne.n	3ef4 <__ascii_mbtowc+0x8>
    3ef2:	a901      	add	r1, sp, #4
    3ef4:	1e10      	subs	r0, r2, #0
    3ef6:	d006      	beq.n	3f06 <__ascii_mbtowc+0x1a>
    3ef8:	2b00      	cmp	r3, #0
    3efa:	d006      	beq.n	3f0a <__ascii_mbtowc+0x1e>
    3efc:	7813      	ldrb	r3, [r2, #0]
    3efe:	600b      	str	r3, [r1, #0]
    3f00:	7810      	ldrb	r0, [r2, #0]
    3f02:	1e43      	subs	r3, r0, #1
    3f04:	4198      	sbcs	r0, r3
    3f06:	b002      	add	sp, #8
    3f08:	4770      	bx	lr
    3f0a:	2002      	movs	r0, #2
    3f0c:	4240      	negs	r0, r0
    3f0e:	e7fa      	b.n	3f06 <__ascii_mbtowc+0x1a>

00003f10 <memchr>:
    3f10:	b2c9      	uxtb	r1, r1
    3f12:	1882      	adds	r2, r0, r2
    3f14:	4290      	cmp	r0, r2
    3f16:	d101      	bne.n	3f1c <memchr+0xc>
    3f18:	2000      	movs	r0, #0
    3f1a:	4770      	bx	lr
    3f1c:	7803      	ldrb	r3, [r0, #0]
    3f1e:	428b      	cmp	r3, r1
    3f20:	d0fb      	beq.n	3f1a <memchr+0xa>
    3f22:	3001      	adds	r0, #1
    3f24:	e7f6      	b.n	3f14 <memchr+0x4>

00003f26 <__malloc_lock>:
    3f26:	4770      	bx	lr

00003f28 <__malloc_unlock>:
    3f28:	4770      	bx	lr

00003f2a <_realloc_r>:
    3f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f2c:	0007      	movs	r7, r0
    3f2e:	000d      	movs	r5, r1
    3f30:	0016      	movs	r6, r2
    3f32:	2900      	cmp	r1, #0
    3f34:	d105      	bne.n	3f42 <_realloc_r+0x18>
    3f36:	0011      	movs	r1, r2
    3f38:	f7fe fe22 	bl	2b80 <_malloc_r>
    3f3c:	0004      	movs	r4, r0
    3f3e:	0020      	movs	r0, r4
    3f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f42:	2a00      	cmp	r2, #0
    3f44:	d103      	bne.n	3f4e <_realloc_r+0x24>
    3f46:	f7fe fdd1 	bl	2aec <_free_r>
    3f4a:	0034      	movs	r4, r6
    3f4c:	e7f7      	b.n	3f3e <_realloc_r+0x14>
    3f4e:	f000 f833 	bl	3fb8 <_malloc_usable_size_r>
    3f52:	002c      	movs	r4, r5
    3f54:	4286      	cmp	r6, r0
    3f56:	d9f2      	bls.n	3f3e <_realloc_r+0x14>
    3f58:	0031      	movs	r1, r6
    3f5a:	0038      	movs	r0, r7
    3f5c:	f7fe fe10 	bl	2b80 <_malloc_r>
    3f60:	1e04      	subs	r4, r0, #0
    3f62:	d0ec      	beq.n	3f3e <_realloc_r+0x14>
    3f64:	0029      	movs	r1, r5
    3f66:	0032      	movs	r2, r6
    3f68:	f7fe f95a 	bl	2220 <memcpy>
    3f6c:	0029      	movs	r1, r5
    3f6e:	0038      	movs	r0, r7
    3f70:	f7fe fdbc 	bl	2aec <_free_r>
    3f74:	e7e3      	b.n	3f3e <_realloc_r+0x14>
	...

00003f78 <_read_r>:
    3f78:	b570      	push	{r4, r5, r6, lr}
    3f7a:	0005      	movs	r5, r0
    3f7c:	0008      	movs	r0, r1
    3f7e:	0011      	movs	r1, r2
    3f80:	2200      	movs	r2, #0
    3f82:	4c06      	ldr	r4, [pc, #24]	; (3f9c <_read_r+0x24>)
    3f84:	6022      	str	r2, [r4, #0]
    3f86:	001a      	movs	r2, r3
    3f88:	f7fd fc82 	bl	1890 <_read>
    3f8c:	1c43      	adds	r3, r0, #1
    3f8e:	d103      	bne.n	3f98 <_read_r+0x20>
    3f90:	6823      	ldr	r3, [r4, #0]
    3f92:	2b00      	cmp	r3, #0
    3f94:	d000      	beq.n	3f98 <_read_r+0x20>
    3f96:	602b      	str	r3, [r5, #0]
    3f98:	bd70      	pop	{r4, r5, r6, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	20000c54 	.word	0x20000c54

00003fa0 <__ascii_wctomb>:
    3fa0:	1e0b      	subs	r3, r1, #0
    3fa2:	d004      	beq.n	3fae <__ascii_wctomb+0xe>
    3fa4:	2aff      	cmp	r2, #255	; 0xff
    3fa6:	d904      	bls.n	3fb2 <__ascii_wctomb+0x12>
    3fa8:	238a      	movs	r3, #138	; 0x8a
    3faa:	6003      	str	r3, [r0, #0]
    3fac:	3b8b      	subs	r3, #139	; 0x8b
    3fae:	0018      	movs	r0, r3
    3fb0:	4770      	bx	lr
    3fb2:	700a      	strb	r2, [r1, #0]
    3fb4:	2301      	movs	r3, #1
    3fb6:	e7fa      	b.n	3fae <__ascii_wctomb+0xe>

00003fb8 <_malloc_usable_size_r>:
    3fb8:	1f0b      	subs	r3, r1, #4
    3fba:	681b      	ldr	r3, [r3, #0]
    3fbc:	1f18      	subs	r0, r3, #4
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	da01      	bge.n	3fc6 <_malloc_usable_size_r+0xe>
    3fc2:	580b      	ldr	r3, [r1, r0]
    3fc4:	18c0      	adds	r0, r0, r3
    3fc6:	4770      	bx	lr
    3fc8:	42000400 	.word	0x42000400
    3fcc:	42000800 	.word	0x42000800
    3fd0:	42000c00 	.word	0x42000c00
    3fd4:	42001000 	.word	0x42001000
    3fd8:	42001400 	.word	0x42001400
    3fdc:	42001800 	.word	0x42001800
    3fe0:	0000114a 	.word	0x0000114a
    3fe4:	00001146 	.word	0x00001146
    3fe8:	00001146 	.word	0x00001146
    3fec:	00001178 	.word	0x00001178
    3ff0:	00001178 	.word	0x00001178
    3ff4:	00001162 	.word	0x00001162
    3ff8:	00001150 	.word	0x00001150
    3ffc:	00001168 	.word	0x00001168
    4000:	0000133c 	.word	0x0000133c
    4004:	0000131c 	.word	0x0000131c
    4008:	0000131c 	.word	0x0000131c
    400c:	00001372 	.word	0x00001372
    4010:	0000132e 	.word	0x0000132e
    4014:	0000134a 	.word	0x0000134a
    4018:	00001320 	.word	0x00001320
    401c:	00001358 	.word	0x00001358
    4020:	00001e6c 	.word	0x00001e6c
    4024:	00001eb2 	.word	0x00001eb2
    4028:	00001ee0 	.word	0x00001ee0
    402c:	00001ef2 	.word	0x00001ef2
    4030:	00001f04 	.word	0x00001f04
    4034:	00001f50 	.word	0x00001f50
    4038:	00001f84 	.word	0x00001f84
    403c:	00001f96 	.word	0x00001f96
    4040:	00001e52 	.word	0x00001e52
    4044:	00001e52 	.word	0x00001e52
    4048:	00001e52 	.word	0x00001e52
    404c:	00001e52 	.word	0x00001e52
    4050:	00001e52 	.word	0x00001e52
    4054:	00001e52 	.word	0x00001e52
    4058:	00001e52 	.word	0x00001e52
    405c:	00001e52 	.word	0x00001e52
    4060:	00001e52 	.word	0x00001e52
    4064:	00001e52 	.word	0x00001e52
    4068:	00001e52 	.word	0x00001e52
    406c:	00001e52 	.word	0x00001e52
    4070:	00001e52 	.word	0x00001e52
    4074:	00001e52 	.word	0x00001e52
    4078:	00001e52 	.word	0x00001e52
    407c:	00001e52 	.word	0x00001e52
    4080:	00001e52 	.word	0x00001e52
    4084:	00001e52 	.word	0x00001e52
    4088:	00001e52 	.word	0x00001e52
    408c:	00001e52 	.word	0x00001e52
    4090:	00001e52 	.word	0x00001e52
    4094:	00001e52 	.word	0x00001e52
    4098:	00001e52 	.word	0x00001e52
    409c:	00001e52 	.word	0x00001e52
    40a0:	00001e52 	.word	0x00001e52
    40a4:	00001e52 	.word	0x00001e52
    40a8:	00001e52 	.word	0x00001e52
    40ac:	00001e52 	.word	0x00001e52
    40b0:	00001e52 	.word	0x00001e52
    40b4:	00001e52 	.word	0x00001e52
    40b8:	00001e52 	.word	0x00001e52
    40bc:	00001e52 	.word	0x00001e52
    40c0:	00001e52 	.word	0x00001e52
    40c4:	00001e52 	.word	0x00001e52
    40c8:	00001e52 	.word	0x00001e52
    40cc:	00001e52 	.word	0x00001e52
    40d0:	00001e52 	.word	0x00001e52
    40d4:	00001e52 	.word	0x00001e52
    40d8:	00001e52 	.word	0x00001e52
    40dc:	00001e52 	.word	0x00001e52
    40e0:	00001e52 	.word	0x00001e52
    40e4:	00001e52 	.word	0x00001e52
    40e8:	00001e52 	.word	0x00001e52
    40ec:	00001e52 	.word	0x00001e52
    40f0:	00001e52 	.word	0x00001e52
    40f4:	00001e52 	.word	0x00001e52
    40f8:	00001e52 	.word	0x00001e52
    40fc:	00001e52 	.word	0x00001e52
    4100:	00001e4a 	.word	0x00001e4a
    4104:	45200d0a 	.word	0x45200d0a
    4108:	6e657478 	.word	0x6e657478
    410c:	20646564 	.word	0x20646564
    4110:	7373656d 	.word	0x7373656d
    4114:	20656761 	.word	0x20656761
    4118:	65636572 	.word	0x65636572
    411c:	64657669 	.word	0x64657669
    4120:	206e6920 	.word	0x206e6920
    4124:	62207852 	.word	0x62207852
    4128:	65666675 	.word	0x65666675
    412c:	54202e72 	.word	0x54202e72
    4130:	72206568 	.word	0x72206568
    4134:	69656365 	.word	0x69656365
    4138:	20646576 	.word	0x20646576
    413c:	61746164 	.word	0x61746164
    4140:	3a736920 	.word	0x3a736920
    4144:	00000d20 	.word	0x00000d20
    4148:	53200d0a 	.word	0x53200d0a
    414c:	646e6174 	.word	0x646e6174
    4150:	20647261 	.word	0x20647261
    4154:	7373656d 	.word	0x7373656d
    4158:	20656761 	.word	0x20656761
    415c:	65636572 	.word	0x65636572
    4160:	64657669 	.word	0x64657669
    4164:	206e6920 	.word	0x206e6920
    4168:	62207852 	.word	0x62207852
    416c:	65666675 	.word	0x65666675
    4170:	54202e72 	.word	0x54202e72
    4174:	72206568 	.word	0x72206568
    4178:	69656365 	.word	0x69656365
    417c:	20646576 	.word	0x20646576
    4180:	61746164 	.word	0x61746164
    4184:	3a736920 	.word	0x3a736920
    4188:	00000d20 	.word	0x00000d20
    418c:	64252020 	.word	0x64252020
    4190:	00000000 	.word	0x00000000
    4194:	000d0a0d 	.word	0x000d0a0d
    4198:	53200d0a 	.word	0x53200d0a
    419c:	646e6174 	.word	0x646e6174
    41a0:	20647261 	.word	0x20647261
    41a4:	7373656d 	.word	0x7373656d
    41a8:	20656761 	.word	0x20656761
    41ac:	65636572 	.word	0x65636572
    41b0:	64657669 	.word	0x64657669
    41b4:	206e6920 	.word	0x206e6920
    41b8:	4f464946 	.word	0x4f464946
    41bc:	202e3020 	.word	0x202e3020
    41c0:	20656854 	.word	0x20656854
    41c4:	65636572 	.word	0x65636572
    41c8:	64657669 	.word	0x64657669
    41cc:	74616420 	.word	0x74616420
    41d0:	73692061 	.word	0x73692061
    41d4:	000d203a 	.word	0x000d203a
    41d8:	45200d0a 	.word	0x45200d0a
    41dc:	6e657478 	.word	0x6e657478
    41e0:	20646564 	.word	0x20646564
    41e4:	7373656d 	.word	0x7373656d
    41e8:	20656761 	.word	0x20656761
    41ec:	65636572 	.word	0x65636572
    41f0:	64657669 	.word	0x64657669
    41f4:	206e6920 	.word	0x206e6920
    41f8:	4f464946 	.word	0x4f464946
    41fc:	202e3120 	.word	0x202e3120
    4200:	20656854 	.word	0x20656854
    4204:	65636572 	.word	0x65636572
    4208:	64657669 	.word	0x64657669
    420c:	74616420 	.word	0x74616420
    4210:	73692061 	.word	0x73692061
    4214:	000d203a 	.word	0x000d203a
    4218:	746f7250 	.word	0x746f7250
    421c:	6c6f636f 	.word	0x6c6f636f
    4220:	72726520 	.word	0x72726520
    4224:	202c726f 	.word	0x202c726f
    4228:	61656c70 	.word	0x61656c70
    422c:	64206573 	.word	0x64206573
    4230:	6c62756f 	.word	0x6c62756f
    4234:	68632065 	.word	0x68632065
    4238:	206b6365 	.word	0x206b6365
    423c:	20656874 	.word	0x20656874
    4240:	636f6c63 	.word	0x636f6c63
    4244:	6e69206b 	.word	0x6e69206b
    4248:	6f777420 	.word	0x6f777420
    424c:	616f6220 	.word	0x616f6220
    4250:	2e736472 	.word	0x2e736472
    4254:	0d0a0d20 	.word	0x0d0a0d20
    4258:	00000000 	.word	0x00000000
    425c:	756e654d 	.word	0x756e654d
    4260:	0a0d3a20 	.word	0x0a0d3a20
    4264:	2d2d2020 	.word	0x2d2d2020
    4268:	6c655320 	.word	0x6c655320
    426c:	20746365 	.word	0x20746365
    4270:	20656874 	.word	0x20656874
    4274:	69746361 	.word	0x69746361
    4278:	0d3a6e6f 	.word	0x0d3a6e6f
    427c:	3020200a 	.word	0x3020200a
    4280:	6553203a 	.word	0x6553203a
    4284:	74732074 	.word	0x74732074
    4288:	61646e61 	.word	0x61646e61
    428c:	66206472 	.word	0x66206472
    4290:	65746c69 	.word	0x65746c69
    4294:	44492072 	.word	0x44492072
    4298:	203a3020 	.word	0x203a3020
    429c:	35347830 	.word	0x35347830
    42a0:	73202c41 	.word	0x73202c41
    42a4:	65726f74 	.word	0x65726f74
    42a8:	746e6920 	.word	0x746e6920
    42ac:	7852206f 	.word	0x7852206f
    42b0:	66756220 	.word	0x66756220
    42b4:	2e726566 	.word	0x2e726566
    42b8:	200a0d20 	.word	0x200a0d20
    42bc:	203a3120 	.word	0x203a3120
    42c0:	20746553 	.word	0x20746553
    42c4:	6e617473 	.word	0x6e617473
    42c8:	64726164 	.word	0x64726164
    42cc:	6c696620 	.word	0x6c696620
    42d0:	20726574 	.word	0x20726574
    42d4:	31204449 	.word	0x31204449
    42d8:	7830203a 	.word	0x7830203a
    42dc:	2c393634 	.word	0x2c393634
    42e0:	6f747320 	.word	0x6f747320
    42e4:	69206572 	.word	0x69206572
    42e8:	206f746e 	.word	0x206f746e
    42ec:	46207852 	.word	0x46207852
    42f0:	204f4649 	.word	0x204f4649
    42f4:	0d202e30 	.word	0x0d202e30
    42f8:	3220200a 	.word	0x3220200a
    42fc:	6553203a 	.word	0x6553203a
    4300:	7320646e 	.word	0x7320646e
    4304:	646e6174 	.word	0x646e6174
    4308:	20647261 	.word	0x20647261
    430c:	7373656d 	.word	0x7373656d
    4310:	20656761 	.word	0x20656761
    4314:	68746977 	.word	0x68746977
    4318:	3a444920 	.word	0x3a444920
    431c:	34783020 	.word	0x34783020
    4320:	61204135 	.word	0x61204135
    4324:	3420646e 	.word	0x3420646e
    4328:	74796220 	.word	0x74796220
    432c:	61642065 	.word	0x61642065
    4330:	30206174 	.word	0x30206174
    4334:	206f7420 	.word	0x206f7420
    4338:	0d202e33 	.word	0x0d202e33
    433c:	3320200a 	.word	0x3320200a
    4340:	6553203a 	.word	0x6553203a
    4344:	7320646e 	.word	0x7320646e
    4348:	646e6174 	.word	0x646e6174
    434c:	20647261 	.word	0x20647261
    4350:	7373656d 	.word	0x7373656d
    4354:	20656761 	.word	0x20656761
    4358:	68746977 	.word	0x68746977
    435c:	3a444920 	.word	0x3a444920
    4360:	34783020 	.word	0x34783020
    4364:	61203936 	.word	0x61203936
    4368:	3420646e 	.word	0x3420646e
    436c:	74796220 	.word	0x74796220
    4370:	61642065 	.word	0x61642065
    4374:	31206174 	.word	0x31206174
    4378:	74203832 	.word	0x74203832
    437c:	3331206f 	.word	0x3331206f
    4380:	0d202e31 	.word	0x0d202e31
    4384:	3420200a 	.word	0x3420200a
    4388:	6553203a 	.word	0x6553203a
    438c:	78652074 	.word	0x78652074
    4390:	646e6574 	.word	0x646e6574
    4394:	66206465 	.word	0x66206465
    4398:	65746c69 	.word	0x65746c69
    439c:	44492072 	.word	0x44492072
    43a0:	203a3020 	.word	0x203a3020
    43a4:	30317830 	.word	0x30317830
    43a8:	30303030 	.word	0x30303030
    43ac:	202c3541 	.word	0x202c3541
    43b0:	726f7473 	.word	0x726f7473
    43b4:	6e692065 	.word	0x6e692065
    43b8:	52206f74 	.word	0x52206f74
    43bc:	75622078 	.word	0x75622078
    43c0:	72656666 	.word	0x72656666
    43c4:	0a0d202e 	.word	0x0a0d202e
    43c8:	3a352020 	.word	0x3a352020
    43cc:	74655320 	.word	0x74655320
    43d0:	74786520 	.word	0x74786520
    43d4:	65646e65 	.word	0x65646e65
    43d8:	69662064 	.word	0x69662064
    43dc:	7265746c 	.word	0x7265746c
    43e0:	20444920 	.word	0x20444920
    43e4:	30203a31 	.word	0x30203a31
    43e8:	30303178 	.word	0x30303178
    43ec:	39303030 	.word	0x39303030
    43f0:	73202c36 	.word	0x73202c36
    43f4:	65726f74 	.word	0x65726f74
    43f8:	746e6920 	.word	0x746e6920
    43fc:	7852206f 	.word	0x7852206f
    4400:	46494620 	.word	0x46494620
    4404:	2e31204f 	.word	0x2e31204f
    4408:	200a0d20 	.word	0x200a0d20
    440c:	203a3620 	.word	0x203a3620
    4410:	646e6553 	.word	0x646e6553
    4414:	74786520 	.word	0x74786520
    4418:	65646e65 	.word	0x65646e65
    441c:	656d2064 	.word	0x656d2064
    4420:	67617373 	.word	0x67617373
    4424:	69772065 	.word	0x69772065
    4428:	49206874 	.word	0x49206874
    442c:	30203a44 	.word	0x30203a44
    4430:	30303178 	.word	0x30303178
    4434:	41303030 	.word	0x41303030
    4438:	6e612035 	.word	0x6e612035
    443c:	20382064 	.word	0x20382064
    4440:	65747962 	.word	0x65747962
    4444:	74616420 	.word	0x74616420
    4448:	20302061 	.word	0x20302061
    444c:	37206f74 	.word	0x37206f74
    4450:	0a0d202e 	.word	0x0a0d202e
    4454:	3a372020 	.word	0x3a372020
    4458:	6e655320 	.word	0x6e655320
    445c:	78652064 	.word	0x78652064
    4460:	646e6574 	.word	0x646e6574
    4464:	6d206465 	.word	0x6d206465
    4468:	61737365 	.word	0x61737365
    446c:	77206567 	.word	0x77206567
    4470:	20687469 	.word	0x20687469
    4474:	203a4449 	.word	0x203a4449
    4478:	30317830 	.word	0x30317830
    447c:	30303030 	.word	0x30303030
    4480:	61203639 	.word	0x61203639
    4484:	3820646e 	.word	0x3820646e
    4488:	74796220 	.word	0x74796220
    448c:	61642065 	.word	0x61642065
    4490:	31206174 	.word	0x31206174
    4494:	74203832 	.word	0x74203832
    4498:	3331206f 	.word	0x3331206f
    449c:	0d202e35 	.word	0x0d202e35
    44a0:	6820200a 	.word	0x6820200a
    44a4:	6944203a 	.word	0x6944203a
    44a8:	616c7073 	.word	0x616c7073
    44ac:	656d2079 	.word	0x656d2079
    44b0:	0d20756e 	.word	0x0d20756e
    44b4:	00000d0a 	.word	0x00000d0a
    44b8:	00006325 	.word	0x00006325
    44bc:	3a302020 	.word	0x3a302020
    44c0:	74655320 	.word	0x74655320
    44c4:	61747320 	.word	0x61747320
    44c8:	7261646e 	.word	0x7261646e
    44cc:	69662064 	.word	0x69662064
    44d0:	7265746c 	.word	0x7265746c
    44d4:	20444920 	.word	0x20444920
    44d8:	30203a30 	.word	0x30203a30
    44dc:	41353478 	.word	0x41353478
    44e0:	7473202c 	.word	0x7473202c
    44e4:	2065726f 	.word	0x2065726f
    44e8:	6f746e69 	.word	0x6f746e69
    44ec:	20785220 	.word	0x20785220
    44f0:	66667562 	.word	0x66667562
    44f4:	202e7265 	.word	0x202e7265
    44f8:	0000000d 	.word	0x0000000d
    44fc:	3a312020 	.word	0x3a312020
    4500:	74655320 	.word	0x74655320
    4504:	61747320 	.word	0x61747320
    4508:	7261646e 	.word	0x7261646e
    450c:	69662064 	.word	0x69662064
    4510:	7265746c 	.word	0x7265746c
    4514:	20444920 	.word	0x20444920
    4518:	30203a31 	.word	0x30203a31
    451c:	39363478 	.word	0x39363478
    4520:	7473202c 	.word	0x7473202c
    4524:	2065726f 	.word	0x2065726f
    4528:	6f746e69 	.word	0x6f746e69
    452c:	20785220 	.word	0x20785220
    4530:	4f464946 	.word	0x4f464946
    4534:	202e3020 	.word	0x202e3020
    4538:	0000000d 	.word	0x0000000d
    453c:	3a322020 	.word	0x3a322020
    4540:	6e655320 	.word	0x6e655320
    4544:	74732064 	.word	0x74732064
    4548:	61646e61 	.word	0x61646e61
    454c:	6d206472 	.word	0x6d206472
    4550:	61737365 	.word	0x61737365
    4554:	77206567 	.word	0x77206567
    4558:	20687469 	.word	0x20687469
    455c:	203a4449 	.word	0x203a4449
    4560:	35347830 	.word	0x35347830
    4564:	6e612041 	.word	0x6e612041
    4568:	20342064 	.word	0x20342064
    456c:	65747962 	.word	0x65747962
    4570:	74616420 	.word	0x74616420
    4574:	20302061 	.word	0x20302061
    4578:	33206f74 	.word	0x33206f74
    457c:	000d202e 	.word	0x000d202e
    4580:	3a332020 	.word	0x3a332020
    4584:	6e655320 	.word	0x6e655320
    4588:	74732064 	.word	0x74732064
    458c:	61646e61 	.word	0x61646e61
    4590:	6d206472 	.word	0x6d206472
    4594:	61737365 	.word	0x61737365
    4598:	77206567 	.word	0x77206567
    459c:	20687469 	.word	0x20687469
    45a0:	203a4449 	.word	0x203a4449
    45a4:	36347830 	.word	0x36347830
    45a8:	6e612039 	.word	0x6e612039
    45ac:	20342064 	.word	0x20342064
    45b0:	65747962 	.word	0x65747962
    45b4:	74616420 	.word	0x74616420
    45b8:	32312061 	.word	0x32312061
    45bc:	6f742038 	.word	0x6f742038
    45c0:	31333120 	.word	0x31333120
    45c4:	000d202e 	.word	0x000d202e
    45c8:	3a342020 	.word	0x3a342020
    45cc:	74655320 	.word	0x74655320
    45d0:	74786520 	.word	0x74786520
    45d4:	65646e65 	.word	0x65646e65
    45d8:	69662064 	.word	0x69662064
    45dc:	7265746c 	.word	0x7265746c
    45e0:	20444920 	.word	0x20444920
    45e4:	30203a30 	.word	0x30203a30
    45e8:	30303178 	.word	0x30303178
    45ec:	41303030 	.word	0x41303030
    45f0:	73202c35 	.word	0x73202c35
    45f4:	65726f74 	.word	0x65726f74
    45f8:	746e6920 	.word	0x746e6920
    45fc:	7852206f 	.word	0x7852206f
    4600:	66756220 	.word	0x66756220
    4604:	2e726566 	.word	0x2e726566
    4608:	00000d20 	.word	0x00000d20
    460c:	3a352020 	.word	0x3a352020
    4610:	74655320 	.word	0x74655320
    4614:	74786520 	.word	0x74786520
    4618:	65646e65 	.word	0x65646e65
    461c:	69662064 	.word	0x69662064
    4620:	7265746c 	.word	0x7265746c
    4624:	20444920 	.word	0x20444920
    4628:	30203a31 	.word	0x30203a31
    462c:	30303178 	.word	0x30303178
    4630:	39303030 	.word	0x39303030
    4634:	73202c36 	.word	0x73202c36
    4638:	65726f74 	.word	0x65726f74
    463c:	746e6920 	.word	0x746e6920
    4640:	7852206f 	.word	0x7852206f
    4644:	46494620 	.word	0x46494620
    4648:	2e31204f 	.word	0x2e31204f
    464c:	00000d20 	.word	0x00000d20
    4650:	3a362020 	.word	0x3a362020
    4654:	6e655320 	.word	0x6e655320
    4658:	78652064 	.word	0x78652064
    465c:	646e6574 	.word	0x646e6574
    4660:	6d206465 	.word	0x6d206465
    4664:	61737365 	.word	0x61737365
    4668:	77206567 	.word	0x77206567
    466c:	20687469 	.word	0x20687469
    4670:	203a4449 	.word	0x203a4449
    4674:	30317830 	.word	0x30317830
    4678:	30303030 	.word	0x30303030
    467c:	61203541 	.word	0x61203541
    4680:	3820646e 	.word	0x3820646e
    4684:	74796220 	.word	0x74796220
    4688:	61642065 	.word	0x61642065
    468c:	30206174 	.word	0x30206174
    4690:	206f7420 	.word	0x206f7420
    4694:	0d202e37 	.word	0x0d202e37
    4698:	00000000 	.word	0x00000000
    469c:	3a372020 	.word	0x3a372020
    46a0:	6e655320 	.word	0x6e655320
    46a4:	78652064 	.word	0x78652064
    46a8:	646e6574 	.word	0x646e6574
    46ac:	6d206465 	.word	0x6d206465
    46b0:	61737365 	.word	0x61737365
    46b4:	77206567 	.word	0x77206567
    46b8:	20687469 	.word	0x20687469
    46bc:	203a4449 	.word	0x203a4449
    46c0:	30317830 	.word	0x30317830
    46c4:	30303030 	.word	0x30303030
    46c8:	61203639 	.word	0x61203639
    46cc:	3820646e 	.word	0x3820646e
    46d0:	74796220 	.word	0x74796220
    46d4:	61642065 	.word	0x61642065
    46d8:	31206174 	.word	0x31206174
    46dc:	74203832 	.word	0x74203832
    46e0:	3331206f 	.word	0x3331206f
    46e4:	0d202e35 	.word	0x0d202e35
    46e8:	00000000 	.word	0x00000000

000046ec <_global_impure_ptr>:
    46ec:	20000008                                ... 

000046f0 <__sf_fake_stderr>:
	...

00004710 <__sf_fake_stdin>:
	...

00004730 <__sf_fake_stdout>:
	...
    4750:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4760:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4770:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4780:	00006665 000047a2 000047a5 000047a8     ef...G...G...G..
    4790:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    47a0:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
    47b0:	2e005849 20200000                                IX...

000047b5 <_ctype_>:
    47b5:	20202000 20202020 28282020 20282828     .         ((((( 
    47c5:	20202020 20202020 20202020 20202020                     
    47d5:	10108820 10101010 10101010 10101010      ...............
    47e5:	04040410 04040404 10040404 10101010     ................
    47f5:	41411010 41414141 01010101 01010101     ..AAAAAA........
    4805:	01010101 01010101 01010101 10101010     ................
    4815:	42421010 42424242 02020202 02020202     ..BBBBBB........
    4825:	02020202 02020202 02020202 10101010     ................
    4835:	00000020 00000000 00000000 00000000      ...............
	...

000048b8 <_init>:
    48b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48ba:	46c0      	nop			; (mov r8, r8)
    48bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48be:	bc08      	pop	{r3}
    48c0:	469e      	mov	lr, r3
    48c2:	4770      	bx	lr

000048c4 <__init_array_start>:
    48c4:	000000e5 	.word	0x000000e5

000048c8 <_fini>:
    48c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48ca:	46c0      	nop			; (mov r8, r8)
    48cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48ce:	bc08      	pop	{r3}
    48d0:	469e      	mov	lr, r3
    48d2:	4770      	bx	lr

000048d4 <__fini_array_start>:
    48d4:	000000bd 	.word	0x000000bd
