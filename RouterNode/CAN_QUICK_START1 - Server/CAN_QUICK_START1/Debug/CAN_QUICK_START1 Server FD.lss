
CAN_QUICK_START1 Server FD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b1ec  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002e8  20000000  0000b1ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003654  200002e8  0000b4d4  000202e8  2**2
                  ALLOC
  3 .stack        00002004  2000393c  0000eb28  000202e8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003f311  00000000  00000000  00020369  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004bdd  00000000  00000000  0005f67a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ce0a  00000000  00000000  00064257  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000800  00000000  00000000  00071061  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000df8  00000000  00000000  00071861  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000215d5  00000000  00000000  00072659  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ff2f  00000000  00000000  00093c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a6cd4  00000000  00000000  000a3b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002250  00000000  00000000  0014a834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 59 00 20 65 29 00 00 5d 29 00 00 5d 29 00 00     @Y. e)..])..])..
	...
      2c:	5d 29 00 00 00 00 00 00 00 00 00 00 5d 29 00 00     ])..........])..
      3c:	3d 5c 00 00 5d 29 00 00 5d 29 00 00 5d 29 00 00     =\..])..])..])..
      4c:	5d 29 00 00 5d 29 00 00 5d 29 00 00 5d 29 00 00     ])..])..])..])..
      5c:	5d 29 00 00 5d 29 00 00 59 1c 00 00 69 1c 00 00     ])..])..Y...i...
      6c:	79 1c 00 00 89 1c 00 00 99 1c 00 00 a9 1c 00 00     y...............
      7c:	7d 58 00 00 5d 29 00 00 5d 29 00 00 5d 29 00 00     }X..])..])..])..
      8c:	5d 29 00 00 5d 29 00 00 5d 29 00 00 5d 29 00 00     ])..])..])..])..
      9c:	5d 29 00 00 5d 29 00 00 5d 29 00 00 5d 29 00 00     ])..])..])..])..
      ac:	5d 29 00 00 5d 29 00 00 5d 29 00 00 5d 29 00 00     ])..])..])..])..

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	200002e8 	.word	0x200002e8
      dc:	00000000 	.word	0x00000000
      e0:	0000b1ec 	.word	0x0000b1ec

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	200002ec 	.word	0x200002ec
     110:	0000b1ec 	.word	0x0000b1ec
     114:	0000b1ec 	.word	0x0000b1ec
     118:	00000000 	.word	0x00000000

0000011c <crypto_aead_encrypt>:

int crypto_aead_encrypt(unsigned char* c, unsigned long long* clen,
                        const unsigned char* m, unsigned long long mlen,
                        const unsigned char* ad, unsigned long long adlen,
                        const unsigned char* nsec, const unsigned char* npub,
                        const unsigned char* k) {
     11c:	b5f0      	push	{r4, r5, r6, r7, lr}
     11e:	46de      	mov	lr, fp
     120:	4657      	mov	r7, sl
     122:	464e      	mov	r6, r9
     124:	4645      	mov	r5, r8
     126:	b5e0      	push	{r5, r6, r7, lr}
     128:	b0a1      	sub	sp, #132	; 0x84
     12a:	9013      	str	r0, [sp, #76]	; 0x4c
     12c:	9210      	str	r2, [sp, #64]	; 0x40
     12e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
     130:	469c      	mov	ip, r3
     132:	9832      	ldr	r0, [sp, #200]	; 0xc8
  ascon_state_t s;
  (void)nsec;
  *clen = mlen + CRYPTO_ABYTES;
     134:	2208      	movs	r2, #8
     136:	2300      	movs	r3, #0
     138:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
     13a:	9d2b      	ldr	r5, [sp, #172]	; 0xac
     13c:	1912      	adds	r2, r2, r4
     13e:	416b      	adcs	r3, r5
     140:	600a      	str	r2, [r1, #0]
     142:	604b      	str	r3, [r1, #4]
  /* undefined for n == 0 */
  return ~0ull >> (64 - 8 * n);
}

forceinline uint64_t LOAD(const uint8_t* bytes, int n) {
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     144:	6801      	ldr	r1, [r0, #0]
     146:	6844      	ldr	r4, [r0, #4]
  return U64TOWORD(x);
     148:	060a      	lsls	r2, r1, #24
     14a:	0e23      	lsrs	r3, r4, #24
     14c:	020f      	lsls	r7, r1, #8
     14e:	26ff      	movs	r6, #255	; 0xff
     150:	0436      	lsls	r6, r6, #16
     152:	4037      	ands	r7, r6
     154:	4317      	orrs	r7, r2
     156:	0a0d      	lsrs	r5, r1, #8
     158:	0622      	lsls	r2, r4, #24
     15a:	432a      	orrs	r2, r5
     15c:	25ff      	movs	r5, #255	; 0xff
     15e:	022d      	lsls	r5, r5, #8
     160:	402a      	ands	r2, r5
     162:	4317      	orrs	r7, r2
     164:	46b8      	mov	r8, r7
     166:	0e0a      	lsrs	r2, r1, #24
     168:	0227      	lsls	r7, r4, #8
     16a:	4317      	orrs	r7, r2
     16c:	21ff      	movs	r1, #255	; 0xff
     16e:	468b      	mov	fp, r1
     170:	400f      	ands	r7, r1
     172:	4641      	mov	r1, r8
     174:	4339      	orrs	r1, r7
     176:	910f      	str	r1, [sp, #60]	; 0x3c
     178:	0a27      	lsrs	r7, r4, #8
     17a:	0621      	lsls	r1, r4, #24
     17c:	430b      	orrs	r3, r1
     17e:	0224      	lsls	r4, r4, #8
     180:	4314      	orrs	r4, r2
     182:	4034      	ands	r4, r6
     184:	431c      	orrs	r4, r3
     186:	402f      	ands	r7, r5
     188:	433c      	orrs	r4, r7
     18a:	940e      	str	r4, [sp, #56]	; 0x38
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     18c:	6882      	ldr	r2, [r0, #8]
     18e:	68c3      	ldr	r3, [r0, #12]
  return U64TOWORD(x);
     190:	0610      	lsls	r0, r2, #24
     192:	0e1f      	lsrs	r7, r3, #24
     194:	0214      	lsls	r4, r2, #8
     196:	4034      	ands	r4, r6
     198:	4304      	orrs	r4, r0
     19a:	0a10      	lsrs	r0, r2, #8
     19c:	4680      	mov	r8, r0
     19e:	0618      	lsls	r0, r3, #24
     1a0:	4641      	mov	r1, r8
     1a2:	4308      	orrs	r0, r1
     1a4:	4028      	ands	r0, r5
     1a6:	4304      	orrs	r4, r0
     1a8:	0e12      	lsrs	r2, r2, #24
     1aa:	0218      	lsls	r0, r3, #8
     1ac:	4310      	orrs	r0, r2
     1ae:	4659      	mov	r1, fp
     1b0:	4008      	ands	r0, r1
     1b2:	4304      	orrs	r4, r0
     1b4:	9412      	str	r4, [sp, #72]	; 0x48
     1b6:	0a1c      	lsrs	r4, r3, #8
     1b8:	0618      	lsls	r0, r3, #24
     1ba:	4307      	orrs	r7, r0
     1bc:	0218      	lsls	r0, r3, #8
     1be:	4310      	orrs	r0, r2
     1c0:	4030      	ands	r0, r6
     1c2:	4338      	orrs	r0, r7
     1c4:	402c      	ands	r4, r5
     1c6:	4320      	orrs	r0, r4
     1c8:	9011      	str	r0, [sp, #68]	; 0x44
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     1ca:	4663      	mov	r3, ip
     1cc:	681c      	ldr	r4, [r3, #0]
     1ce:	685b      	ldr	r3, [r3, #4]
  return U64TOWORD(x);
     1d0:	0627      	lsls	r7, r4, #24
     1d2:	0e1a      	lsrs	r2, r3, #24
     1d4:	0220      	lsls	r0, r4, #8
     1d6:	4030      	ands	r0, r6
     1d8:	4338      	orrs	r0, r7
     1da:	0a27      	lsrs	r7, r4, #8
     1dc:	46b8      	mov	r8, r7
     1de:	061f      	lsls	r7, r3, #24
     1e0:	4641      	mov	r1, r8
     1e2:	430f      	orrs	r7, r1
     1e4:	402f      	ands	r7, r5
     1e6:	4338      	orrs	r0, r7
     1e8:	0e24      	lsrs	r4, r4, #24
     1ea:	021f      	lsls	r7, r3, #8
     1ec:	4327      	orrs	r7, r4
     1ee:	4659      	mov	r1, fp
     1f0:	400f      	ands	r7, r1
     1f2:	4338      	orrs	r0, r7
     1f4:	0a1f      	lsrs	r7, r3, #8
     1f6:	0619      	lsls	r1, r3, #24
     1f8:	430a      	orrs	r2, r1
     1fa:	021b      	lsls	r3, r3, #8
     1fc:	431c      	orrs	r4, r3
     1fe:	4034      	ands	r4, r6
     200:	4322      	orrs	r2, r4
     202:	402f      	ands	r7, r5
     204:	433a      	orrs	r2, r7
     206:	4692      	mov	sl, r2
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     208:	4663      	mov	r3, ip
     20a:	689f      	ldr	r7, [r3, #8]
     20c:	68dc      	ldr	r4, [r3, #12]
  return U64TOWORD(x);
     20e:	063a      	lsls	r2, r7, #24
     210:	0e23      	lsrs	r3, r4, #24
     212:	4698      	mov	r8, r3
     214:	023b      	lsls	r3, r7, #8
     216:	4033      	ands	r3, r6
     218:	431a      	orrs	r2, r3
     21a:	0a3b      	lsrs	r3, r7, #8
     21c:	4699      	mov	r9, r3
     21e:	0623      	lsls	r3, r4, #24
     220:	4649      	mov	r1, r9
     222:	430b      	orrs	r3, r1
     224:	402b      	ands	r3, r5
     226:	4313      	orrs	r3, r2
     228:	0e3f      	lsrs	r7, r7, #24
     22a:	0222      	lsls	r2, r4, #8
     22c:	433a      	orrs	r2, r7
     22e:	4659      	mov	r1, fp
     230:	4011      	ands	r1, r2
     232:	4319      	orrs	r1, r3
     234:	0a23      	lsrs	r3, r4, #8
     236:	469c      	mov	ip, r3
     238:	0623      	lsls	r3, r4, #24
     23a:	4642      	mov	r2, r8
     23c:	4313      	orrs	r3, r2
     23e:	0224      	lsls	r4, r4, #8
     240:	4327      	orrs	r7, r4
     242:	4037      	ands	r7, r6
     244:	433b      	orrs	r3, r7
     246:	4662      	mov	r2, ip
     248:	4015      	ands	r5, r2
     24a:	432b      	orrs	r3, r5
#include "printstate.h"
#include "word.h"

forceinline void ROUND_LOOP(ascon_state_t* s, uint32_t C) {
  uint32_t tmp0, tmp1;
  __asm__ __volatile__(
     24c:	2200      	movs	r2, #0
     24e:	4690      	mov	r8, r2
     250:	4a64      	ldr	r2, [pc, #400]	; (3e4 <rend_297+0x3c>)
     252:	4694      	mov	ip, r2
     254:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     258:	4691      	mov	r9, r2
     25a:	9d11      	ldr	r5, [sp, #68]	; 0x44
     25c:	9c12      	ldr	r4, [sp, #72]	; 0x48
     25e:	4652      	mov	r2, sl
     260:	26f0      	movs	r6, #240	; 0xf0
     262:	9600      	str	r6, [sp, #0]
     264:	4646      	mov	r6, r8
     266:	46c8      	mov	r8, r9
     268:	46a2      	mov	sl, r4
     26a:	4683      	mov	fp, r0
     26c:	4689      	mov	r9, r1
     26e:	21f0      	movs	r1, #240	; 0xf0

00000270 <rbegin_297>:
     270:	404d      	eors	r5, r1
     272:	b402      	push	{r1}
     274:	405e      	eors	r6, r3
     276:	4053      	eors	r3, r2
     278:	407d      	eors	r5, r7
     27a:	43f0      	mvns	r0, r6
     27c:	4318      	orrs	r0, r3
     27e:	1c29      	adds	r1, r5, #0
     280:	43b9      	bics	r1, r7
     282:	404e      	eors	r6, r1
     284:	43d9      	mvns	r1, r3
     286:	4311      	orrs	r1, r2
     288:	404d      	eors	r5, r1
     28a:	1c39      	adds	r1, r7, #0
     28c:	43b1      	bics	r1, r6
     28e:	404b      	eors	r3, r1
     290:	1c11      	adds	r1, r2, #0
     292:	4029      	ands	r1, r5
     294:	4079      	eors	r1, r7
     296:	4050      	eors	r0, r2
     298:	4068      	eors	r0, r5
     29a:	4071      	eors	r1, r6
     29c:	405e      	eors	r6, r3
     29e:	4667      	mov	r7, ip
     2a0:	4642      	mov	r2, r8
     2a2:	46ac      	mov	ip, r5
     2a4:	46b0      	mov	r8, r6
     2a6:	4656      	mov	r6, sl
     2a8:	465d      	mov	r5, fp
     2aa:	464c      	mov	r4, r9
     2ac:	4682      	mov	sl, r0
     2ae:	469b      	mov	fp, r3
     2b0:	4067      	eors	r7, r4
     2b2:	406c      	eors	r4, r5
     2b4:	4056      	eors	r6, r2
     2b6:	43f8      	mvns	r0, r7
     2b8:	4320      	orrs	r0, r4
     2ba:	1c33      	adds	r3, r6, #0
     2bc:	4393      	bics	r3, r2
     2be:	405f      	eors	r7, r3
     2c0:	43e3      	mvns	r3, r4
     2c2:	432b      	orrs	r3, r5
     2c4:	405e      	eors	r6, r3
     2c6:	1c13      	adds	r3, r2, #0
     2c8:	43bb      	bics	r3, r7
     2ca:	405c      	eors	r4, r3
     2cc:	1c2b      	adds	r3, r5, #0
     2ce:	4033      	ands	r3, r6
     2d0:	405a      	eors	r2, r3
     2d2:	4045      	eors	r5, r0
     2d4:	4075      	eors	r5, r6
     2d6:	407a      	eors	r2, r7
     2d8:	4067      	eors	r7, r4
     2da:	46a9      	mov	r9, r5
     2dc:	4665      	mov	r5, ip
     2de:	46bc      	mov	ip, r7
     2e0:	09b3      	lsrs	r3, r6, #6
     2e2:	06af      	lsls	r7, r5, #26
     2e4:	09a8      	lsrs	r0, r5, #6
     2e6:	407b      	eors	r3, r7
     2e8:	06b7      	lsls	r7, r6, #26
     2ea:	4078      	eors	r0, r7
     2ec:	0877      	lsrs	r7, r6, #1
     2ee:	407b      	eors	r3, r7
     2f0:	07ef      	lsls	r7, r5, #31
     2f2:	407b      	eors	r3, r7
     2f4:	086f      	lsrs	r7, r5, #1
     2f6:	4078      	eors	r0, r7
     2f8:	07f7      	lsls	r7, r6, #31
     2fa:	4078      	eors	r0, r7
     2fc:	405e      	eors	r6, r3
     2fe:	4045      	eors	r5, r0
     300:	00d3      	lsls	r3, r2, #3
     302:	0f4f      	lsrs	r7, r1, #29
     304:	00c8      	lsls	r0, r1, #3
     306:	407b      	eors	r3, r7
     308:	0f57      	lsrs	r7, r2, #29
     30a:	4078      	eors	r0, r7
     30c:	0657      	lsls	r7, r2, #25
     30e:	407b      	eors	r3, r7
     310:	09cf      	lsrs	r7, r1, #7
     312:	407b      	eors	r3, r7
     314:	064f      	lsls	r7, r1, #25
     316:	4078      	eors	r0, r7
     318:	09d7      	lsrs	r7, r2, #7
     31a:	4078      	eors	r0, r7
     31c:	405a      	eors	r2, r3
     31e:	4041      	eors	r1, r0
     320:	465b      	mov	r3, fp
     322:	468b      	mov	fp, r1
     324:	05e1      	lsls	r1, r4, #23
     326:	0a5f      	lsrs	r7, r3, #9
     328:	05d8      	lsls	r0, r3, #23
     32a:	4079      	eors	r1, r7
     32c:	0a67      	lsrs	r7, r4, #9
     32e:	4078      	eors	r0, r7
     330:	09e7      	lsrs	r7, r4, #7
     332:	4079      	eors	r1, r7
     334:	065f      	lsls	r7, r3, #25
     336:	4079      	eors	r1, r7
     338:	09df      	lsrs	r7, r3, #7
     33a:	4078      	eors	r0, r7
     33c:	0667      	lsls	r7, r4, #25
     33e:	4078      	eors	r0, r7
     340:	404c      	eors	r4, r1
     342:	4043      	eors	r3, r0
     344:	465f      	mov	r7, fp
     346:	4649      	mov	r1, r9
     348:	46a1      	mov	r9, r4
     34a:	4693      	mov	fp, r2
     34c:	4652      	mov	r2, sl
     34e:	46b2      	mov	sl, r6
     350:	0c4c      	lsrs	r4, r1, #17
     352:	03d6      	lsls	r6, r2, #15
     354:	0c50      	lsrs	r0, r2, #17
     356:	4074      	eors	r4, r6
     358:	03ce      	lsls	r6, r1, #15
     35a:	4070      	eors	r0, r6
     35c:	0a8e      	lsrs	r6, r1, #10
     35e:	4074      	eors	r4, r6
     360:	0596      	lsls	r6, r2, #22
     362:	4074      	eors	r4, r6
     364:	0a96      	lsrs	r6, r2, #10
     366:	4070      	eors	r0, r6
     368:	058e      	lsls	r6, r1, #22
     36a:	4070      	eors	r0, r6
     36c:	4061      	eors	r1, r4
     36e:	4042      	eors	r2, r0
     370:	4660      	mov	r0, ip
     372:	4646      	mov	r6, r8
     374:	469c      	mov	ip, r3
     376:	46d8      	mov	r8, fp
     378:	468b      	mov	fp, r1
     37a:	0f03      	lsrs	r3, r0, #28
     37c:	0131      	lsls	r1, r6, #4
     37e:	0f34      	lsrs	r4, r6, #28
     380:	404b      	eors	r3, r1
     382:	0101      	lsls	r1, r0, #4
     384:	404c      	eors	r4, r1
     386:	0cc1      	lsrs	r1, r0, #19
     388:	404b      	eors	r3, r1
     38a:	0371      	lsls	r1, r6, #13
     38c:	404b      	eors	r3, r1
     38e:	0cf1      	lsrs	r1, r6, #19
     390:	404c      	eors	r4, r1
     392:	0341      	lsls	r1, r0, #13
     394:	404c      	eors	r4, r1
     396:	bc02      	pop	{r1}
     398:	4058      	eors	r0, r3
     39a:	4066      	eors	r6, r4
     39c:	4663      	mov	r3, ip
     39e:	4684      	mov	ip, r0
     3a0:	390f      	subs	r1, #15
     3a2:	293c      	cmp	r1, #60	; 0x3c
     3a4:	d000      	beq.n	3a8 <rend_297>
     3a6:	e763      	b.n	270 <rbegin_297>

000003a8 <rend_297>:
     3a8:	4649      	mov	r1, r9
     3aa:	4658      	mov	r0, fp
     3ac:	4654      	mov	r4, sl
     3ae:	46c1      	mov	r9, r8
     3b0:	9616      	str	r6, [sp, #88]	; 0x58
     3b2:	4666      	mov	r6, ip
     3b4:	9617      	str	r6, [sp, #92]	; 0x5c
     3b6:	9718      	str	r7, [sp, #96]	; 0x60
     3b8:	464e      	mov	r6, r9
     3ba:	9619      	str	r6, [sp, #100]	; 0x64
     3bc:	951a      	str	r5, [sp, #104]	; 0x68
     3be:	941b      	str	r4, [sp, #108]	; 0x6c
  s->x[3] ^= key->x[0];
     3c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
     3c2:	406a      	eors	r2, r5
     3c4:	921c      	str	r2, [sp, #112]	; 0x70
     3c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     3c8:	4050      	eors	r0, r2
     3ca:	901d      	str	r0, [sp, #116]	; 0x74
  s->x[4] ^= key->x[1];
     3cc:	9811      	ldr	r0, [sp, #68]	; 0x44
     3ce:	4043      	eors	r3, r0
     3d0:	931e      	str	r3, [sp, #120]	; 0x78
     3d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
     3d4:	4061      	eors	r1, r4
     3d6:	911f      	str	r1, [sp, #124]	; 0x7c
  while (mlen >= ASCON_AEAD_RATE) {
     3d8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
     3da:	2b00      	cmp	r3, #0
     3dc:	d101      	bne.n	3e2 <rend_297+0x3a>
     3de:	f000 fac2 	bl	966 <rend_847+0x6a>
     3e2:	e001      	b.n	3e8 <rend_297+0x40>
     3e4:	80400c06 	.word	0x80400c06
     3e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
     3ea:	9c2b      	ldr	r4, [sp, #172]	; 0xac
     3ec:	9304      	str	r3, [sp, #16]
     3ee:	9405      	str	r4, [sp, #20]
     3f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     3f2:	4698      	mov	r8, r3
     3f4:	9f10      	ldr	r7, [sp, #64]	; 0x40
     3f6:	23ff      	movs	r3, #255	; 0xff
     3f8:	041b      	lsls	r3, r3, #16
     3fa:	9303      	str	r3, [sp, #12]
     3fc:	23ff      	movs	r3, #255	; 0xff
     3fe:	021b      	lsls	r3, r3, #8
     400:	930d      	str	r3, [sp, #52]	; 0x34
    mlen -= ASCON_AEAD_RATE;
     402:	9700      	str	r7, [sp, #0]
     404:	4643      	mov	r3, r8
     406:	9301      	str	r3, [sp, #4]
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     408:	9b00      	ldr	r3, [sp, #0]
     40a:	681e      	ldr	r6, [r3, #0]
     40c:	6859      	ldr	r1, [r3, #4]
  return U64TOWORD(x);
     40e:	0633      	lsls	r3, r6, #24
     410:	0e0a      	lsrs	r2, r1, #24
     412:	0230      	lsls	r0, r6, #8
     414:	9c03      	ldr	r4, [sp, #12]
     416:	4020      	ands	r0, r4
     418:	4303      	orrs	r3, r0
     41a:	0a37      	lsrs	r7, r6, #8
     41c:	0608      	lsls	r0, r1, #24
     41e:	4338      	orrs	r0, r7
     420:	9d0d      	ldr	r5, [sp, #52]	; 0x34
     422:	4028      	ands	r0, r5
     424:	4303      	orrs	r3, r0
     426:	0e36      	lsrs	r6, r6, #24
     428:	0208      	lsls	r0, r1, #8
     42a:	4330      	orrs	r0, r6
     42c:	27ff      	movs	r7, #255	; 0xff
     42e:	4038      	ands	r0, r7
     430:	4303      	orrs	r3, r0
     432:	0a08      	lsrs	r0, r1, #8
     434:	060f      	lsls	r7, r1, #24
     436:	433a      	orrs	r2, r7
     438:	0209      	lsls	r1, r1, #8
     43a:	4331      	orrs	r1, r6
     43c:	4021      	ands	r1, r4
     43e:	430a      	orrs	r2, r1
     440:	4028      	ands	r0, r5
     442:	4302      	orrs	r2, r0
    s->x[0] ^= LOAD(m, 8);
     444:	9916      	ldr	r1, [sp, #88]	; 0x58
     446:	404a      	eors	r2, r1
     448:	9917      	ldr	r1, [sp, #92]	; 0x5c
     44a:	404b      	eors	r3, r1
}

forceinline void STORE(uint8_t* bytes, uint64_t w, int n) {
  *(uint64_t*)bytes &= ~MASK(n);
  *(uint64_t*)bytes |= WORDTOU64(w);
     44c:	0611      	lsls	r1, r2, #24
     44e:	0e18      	lsrs	r0, r3, #24
     450:	0216      	lsls	r6, r2, #8
     452:	4026      	ands	r6, r4
     454:	4331      	orrs	r1, r6
     456:	0a17      	lsrs	r7, r2, #8
     458:	061e      	lsls	r6, r3, #24
     45a:	433e      	orrs	r6, r7
     45c:	402e      	ands	r6, r5
     45e:	4331      	orrs	r1, r6
     460:	0e16      	lsrs	r6, r2, #24
     462:	46b4      	mov	ip, r6
     464:	021e      	lsls	r6, r3, #8
     466:	4667      	mov	r7, ip
     468:	433e      	orrs	r6, r7
     46a:	27ff      	movs	r7, #255	; 0xff
     46c:	403e      	ands	r6, r7
     46e:	4331      	orrs	r1, r6
     470:	0a1f      	lsrs	r7, r3, #8
     472:	061e      	lsls	r6, r3, #24
     474:	4330      	orrs	r0, r6
     476:	021e      	lsls	r6, r3, #8
     478:	4664      	mov	r4, ip
     47a:	4326      	orrs	r6, r4
     47c:	9c03      	ldr	r4, [sp, #12]
     47e:	4026      	ands	r6, r4
     480:	4330      	orrs	r0, r6
     482:	402f      	ands	r7, r5
     484:	4338      	orrs	r0, r7
     486:	9c01      	ldr	r4, [sp, #4]
     488:	6020      	str	r0, [r4, #0]
     48a:	6061      	str	r1, [r4, #4]
     48c:	9918      	ldr	r1, [sp, #96]	; 0x60
     48e:	9102      	str	r1, [sp, #8]
     490:	9919      	ldr	r1, [sp, #100]	; 0x64
     492:	9106      	str	r1, [sp, #24]
     494:	991a      	ldr	r1, [sp, #104]	; 0x68
     496:	9107      	str	r1, [sp, #28]
     498:	991b      	ldr	r1, [sp, #108]	; 0x6c
     49a:	9108      	str	r1, [sp, #32]
     49c:	991c      	ldr	r1, [sp, #112]	; 0x70
     49e:	9109      	str	r1, [sp, #36]	; 0x24
     4a0:	991d      	ldr	r1, [sp, #116]	; 0x74
     4a2:	910a      	str	r1, [sp, #40]	; 0x28
     4a4:	991e      	ldr	r1, [sp, #120]	; 0x78
     4a6:	910b      	str	r1, [sp, #44]	; 0x2c
     4a8:	991f      	ldr	r1, [sp, #124]	; 0x7c
     4aa:	910c      	str	r1, [sp, #48]	; 0x30
     4ac:	9f02      	ldr	r7, [sp, #8]
     4ae:	9e06      	ldr	r6, [sp, #24]
     4b0:	9907      	ldr	r1, [sp, #28]
     4b2:	9106      	str	r1, [sp, #24]
     4b4:	9808      	ldr	r0, [sp, #32]
     4b6:	9909      	ldr	r1, [sp, #36]	; 0x24
     4b8:	9102      	str	r1, [sp, #8]
     4ba:	990a      	ldr	r1, [sp, #40]	; 0x28
     4bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     4be:	0025      	movs	r5, r4
     4c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
     4c2:	46a0      	mov	r8, r4
     4c4:	2496      	movs	r4, #150	; 0x96
     4c6:	469c      	mov	ip, r3
     4c8:	46b1      	mov	r9, r6
     4ca:	9b06      	ldr	r3, [sp, #24]
     4cc:	4682      	mov	sl, r0
     4ce:	9802      	ldr	r0, [sp, #8]
     4d0:	468b      	mov	fp, r1
     4d2:	0029      	movs	r1, r5

000004d4 <rbegin_525>:
     4d4:	4063      	eors	r3, r4
     4d6:	b410      	push	{r4}
     4d8:	404a      	eors	r2, r1
     4da:	4041      	eors	r1, r0
     4dc:	407b      	eors	r3, r7
     4de:	43d6      	mvns	r6, r2
     4e0:	430e      	orrs	r6, r1
     4e2:	1c1c      	adds	r4, r3, #0
     4e4:	43bc      	bics	r4, r7
     4e6:	4062      	eors	r2, r4
     4e8:	43cc      	mvns	r4, r1
     4ea:	4304      	orrs	r4, r0
     4ec:	4063      	eors	r3, r4
     4ee:	1c3c      	adds	r4, r7, #0
     4f0:	4394      	bics	r4, r2
     4f2:	4061      	eors	r1, r4
     4f4:	1c04      	adds	r4, r0, #0
     4f6:	401c      	ands	r4, r3
     4f8:	407c      	eors	r4, r7
     4fa:	4046      	eors	r6, r0
     4fc:	405e      	eors	r6, r3
     4fe:	4054      	eors	r4, r2
     500:	404a      	eors	r2, r1
     502:	4667      	mov	r7, ip
     504:	4648      	mov	r0, r9
     506:	469c      	mov	ip, r3
     508:	4691      	mov	r9, r2
     50a:	4652      	mov	r2, sl
     50c:	465b      	mov	r3, fp
     50e:	4645      	mov	r5, r8
     510:	46b2      	mov	sl, r6
     512:	468b      	mov	fp, r1
     514:	406f      	eors	r7, r5
     516:	405d      	eors	r5, r3
     518:	4042      	eors	r2, r0
     51a:	43fe      	mvns	r6, r7
     51c:	432e      	orrs	r6, r5
     51e:	1c11      	adds	r1, r2, #0
     520:	4381      	bics	r1, r0
     522:	404f      	eors	r7, r1
     524:	43e9      	mvns	r1, r5
     526:	4319      	orrs	r1, r3
     528:	404a      	eors	r2, r1
     52a:	1c01      	adds	r1, r0, #0
     52c:	43b9      	bics	r1, r7
     52e:	404d      	eors	r5, r1
     530:	1c19      	adds	r1, r3, #0
     532:	4011      	ands	r1, r2
     534:	4048      	eors	r0, r1
     536:	4073      	eors	r3, r6
     538:	4053      	eors	r3, r2
     53a:	4078      	eors	r0, r7
     53c:	406f      	eors	r7, r5
     53e:	4698      	mov	r8, r3
     540:	4663      	mov	r3, ip
     542:	46bc      	mov	ip, r7
     544:	0991      	lsrs	r1, r2, #6
     546:	069f      	lsls	r7, r3, #26
     548:	099e      	lsrs	r6, r3, #6
     54a:	4079      	eors	r1, r7
     54c:	0697      	lsls	r7, r2, #26
     54e:	407e      	eors	r6, r7
     550:	0857      	lsrs	r7, r2, #1
     552:	4079      	eors	r1, r7
     554:	07df      	lsls	r7, r3, #31
     556:	4079      	eors	r1, r7
     558:	085f      	lsrs	r7, r3, #1
     55a:	407e      	eors	r6, r7
     55c:	07d7      	lsls	r7, r2, #31
     55e:	407e      	eors	r6, r7
     560:	404a      	eors	r2, r1
     562:	4073      	eors	r3, r6
     564:	00c1      	lsls	r1, r0, #3
     566:	0f67      	lsrs	r7, r4, #29
     568:	00e6      	lsls	r6, r4, #3
     56a:	4079      	eors	r1, r7
     56c:	0f47      	lsrs	r7, r0, #29
     56e:	407e      	eors	r6, r7
     570:	0647      	lsls	r7, r0, #25
     572:	4079      	eors	r1, r7
     574:	09e7      	lsrs	r7, r4, #7
     576:	4079      	eors	r1, r7
     578:	0667      	lsls	r7, r4, #25
     57a:	407e      	eors	r6, r7
     57c:	09c7      	lsrs	r7, r0, #7
     57e:	407e      	eors	r6, r7
     580:	4048      	eors	r0, r1
     582:	4074      	eors	r4, r6
     584:	4659      	mov	r1, fp
     586:	46a3      	mov	fp, r4
     588:	05ec      	lsls	r4, r5, #23
     58a:	0a4f      	lsrs	r7, r1, #9
     58c:	05ce      	lsls	r6, r1, #23
     58e:	407c      	eors	r4, r7
     590:	0a6f      	lsrs	r7, r5, #9
     592:	407e      	eors	r6, r7
     594:	09ef      	lsrs	r7, r5, #7
     596:	407c      	eors	r4, r7
     598:	064f      	lsls	r7, r1, #25
     59a:	407c      	eors	r4, r7
     59c:	09cf      	lsrs	r7, r1, #7
     59e:	407e      	eors	r6, r7
     5a0:	066f      	lsls	r7, r5, #25
     5a2:	407e      	eors	r6, r7
     5a4:	4065      	eors	r5, r4
     5a6:	4071      	eors	r1, r6
     5a8:	465f      	mov	r7, fp
     5aa:	4644      	mov	r4, r8
     5ac:	46a8      	mov	r8, r5
     5ae:	4683      	mov	fp, r0
     5b0:	4650      	mov	r0, sl
     5b2:	4692      	mov	sl, r2
     5b4:	0c65      	lsrs	r5, r4, #17
     5b6:	03c2      	lsls	r2, r0, #15
     5b8:	0c46      	lsrs	r6, r0, #17
     5ba:	4055      	eors	r5, r2
     5bc:	03e2      	lsls	r2, r4, #15
     5be:	4056      	eors	r6, r2
     5c0:	0aa2      	lsrs	r2, r4, #10
     5c2:	4055      	eors	r5, r2
     5c4:	0582      	lsls	r2, r0, #22
     5c6:	4055      	eors	r5, r2
     5c8:	0a82      	lsrs	r2, r0, #10
     5ca:	4056      	eors	r6, r2
     5cc:	05a2      	lsls	r2, r4, #22
     5ce:	4056      	eors	r6, r2
     5d0:	406c      	eors	r4, r5
     5d2:	4070      	eors	r0, r6
     5d4:	4666      	mov	r6, ip
     5d6:	464a      	mov	r2, r9
     5d8:	468c      	mov	ip, r1
     5da:	46d9      	mov	r9, fp
     5dc:	46a3      	mov	fp, r4
     5de:	0f31      	lsrs	r1, r6, #28
     5e0:	0114      	lsls	r4, r2, #4
     5e2:	0f15      	lsrs	r5, r2, #28
     5e4:	4061      	eors	r1, r4
     5e6:	0134      	lsls	r4, r6, #4
     5e8:	4065      	eors	r5, r4
     5ea:	0cf4      	lsrs	r4, r6, #19
     5ec:	4061      	eors	r1, r4
     5ee:	0354      	lsls	r4, r2, #13
     5f0:	4061      	eors	r1, r4
     5f2:	0cd4      	lsrs	r4, r2, #19
     5f4:	4065      	eors	r5, r4
     5f6:	0374      	lsls	r4, r6, #13
     5f8:	4065      	eors	r5, r4
     5fa:	bc10      	pop	{r4}
     5fc:	404e      	eors	r6, r1
     5fe:	406a      	eors	r2, r5
     600:	4661      	mov	r1, ip
     602:	46b4      	mov	ip, r6
     604:	3c0f      	subs	r4, #15
     606:	2c3c      	cmp	r4, #60	; 0x3c
     608:	d000      	beq.n	60c <rend_525>
     60a:	e763      	b.n	4d4 <rbegin_525>

0000060c <rend_525>:
     60c:	000d      	movs	r5, r1
     60e:	4659      	mov	r1, fp
     610:	9002      	str	r0, [sp, #8]
     612:	4650      	mov	r0, sl
     614:	001c      	movs	r4, r3
     616:	464e      	mov	r6, r9
     618:	4663      	mov	r3, ip
     61a:	9216      	str	r2, [sp, #88]	; 0x58
     61c:	9317      	str	r3, [sp, #92]	; 0x5c
     61e:	9718      	str	r7, [sp, #96]	; 0x60
     620:	9619      	str	r6, [sp, #100]	; 0x64
     622:	941a      	str	r4, [sp, #104]	; 0x68
     624:	901b      	str	r0, [sp, #108]	; 0x6c
     626:	9802      	ldr	r0, [sp, #8]
     628:	901c      	str	r0, [sp, #112]	; 0x70
     62a:	911d      	str	r1, [sp, #116]	; 0x74
     62c:	951e      	str	r5, [sp, #120]	; 0x78
     62e:	4643      	mov	r3, r8
     630:	931f      	str	r3, [sp, #124]	; 0x7c
    m += ASCON_AEAD_RATE;
     632:	9b00      	ldr	r3, [sp, #0]
     634:	3308      	adds	r3, #8
     636:	9300      	str	r3, [sp, #0]
    c += ASCON_AEAD_RATE;
     638:	9b01      	ldr	r3, [sp, #4]
     63a:	3308      	adds	r3, #8
     63c:	9301      	str	r3, [sp, #4]
    mlen -= ASCON_AEAD_RATE;
     63e:	9a04      	ldr	r2, [sp, #16]
     640:	9b05      	ldr	r3, [sp, #20]
     642:	2008      	movs	r0, #8
     644:	4240      	negs	r0, r0
     646:	17c1      	asrs	r1, r0, #31
     648:	1812      	adds	r2, r2, r0
     64a:	414b      	adcs	r3, r1
     64c:	9204      	str	r2, [sp, #16]
     64e:	9305      	str	r3, [sp, #20]
  while (mlen >= ASCON_AEAD_RATE) {
     650:	2b00      	cmp	r3, #0
     652:	d000      	beq.n	656 <rend_525+0x4a>
     654:	e6d8      	b.n	408 <rend_297+0x60>
     656:	9b04      	ldr	r3, [sp, #16]
     658:	9c05      	ldr	r4, [sp, #20]
     65a:	2c00      	cmp	r4, #0
     65c:	d102      	bne.n	664 <rend_525+0x58>
     65e:	2b07      	cmp	r3, #7
     660:	d900      	bls.n	664 <rend_525+0x58>
     662:	e6d1      	b.n	408 <rend_297+0x60>
     664:	992a      	ldr	r1, [sp, #168]	; 0xa8
     666:	3908      	subs	r1, #8
     668:	08c9      	lsrs	r1, r1, #3
     66a:	00c9      	lsls	r1, r1, #3
     66c:	3108      	adds	r1, #8
     66e:	9b10      	ldr	r3, [sp, #64]	; 0x40
     670:	469c      	mov	ip, r3
     672:	448c      	add	ip, r1
     674:	4663      	mov	r3, ip
     676:	9310      	str	r3, [sp, #64]	; 0x40
     678:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     67a:	469c      	mov	ip, r3
     67c:	4461      	add	r1, ip
     67e:	2607      	movs	r6, #7
     680:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
     682:	401e      	ands	r6, r3
     684:	2700      	movs	r7, #0
  *px ^= PAD(mlen);
     686:	0033      	movs	r3, r6
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
     688:	2007      	movs	r0, #7
     68a:	1b80      	subs	r0, r0, r6
     68c:	00c0      	lsls	r0, r0, #3
     68e:	2220      	movs	r2, #32
     690:	4252      	negs	r2, r2
     692:	1885      	adds	r5, r0, r2
     694:	d500      	bpl.n	698 <rend_525+0x8c>
     696:	e171      	b.n	97c <rend_847+0x80>
     698:	2480      	movs	r4, #128	; 0x80
     69a:	40ac      	lsls	r4, r5
     69c:	2580      	movs	r5, #128	; 0x80
     69e:	4085      	lsls	r5, r0
     6a0:	9a16      	ldr	r2, [sp, #88]	; 0x58
     6a2:	4055      	eors	r5, r2
     6a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
     6a6:	4054      	eors	r4, r2
     6a8:	9516      	str	r5, [sp, #88]	; 0x58
     6aa:	9417      	str	r4, [sp, #92]	; 0x5c
  if (mlen) {
     6ac:	433e      	orrs	r6, r7
     6ae:	d06c      	beq.n	78a <rend_525+0x17e>
  return ~0ull >> (64 - 8 * n);
     6b0:	2208      	movs	r2, #8
     6b2:	1ad3      	subs	r3, r2, r3
     6b4:	00db      	lsls	r3, r3, #3
     6b6:	3a28      	subs	r2, #40	; 0x28
     6b8:	189a      	adds	r2, r3, r2
     6ba:	d500      	bpl.n	6be <rend_525+0xb2>
     6bc:	e163      	b.n	986 <rend_847+0x8a>
     6be:	2601      	movs	r6, #1
     6c0:	4276      	negs	r6, r6
     6c2:	40d6      	lsrs	r6, r2
     6c4:	9600      	str	r6, [sp, #0]
     6c6:	2201      	movs	r2, #1
     6c8:	4252      	negs	r2, r2
     6ca:	40da      	lsrs	r2, r3
     6cc:	4690      	mov	r8, r2
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     6ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
     6d0:	681a      	ldr	r2, [r3, #0]
     6d2:	0010      	movs	r0, r2
     6d4:	9a00      	ldr	r2, [sp, #0]
     6d6:	4010      	ands	r0, r2
     6d8:	685b      	ldr	r3, [r3, #4]
     6da:	4642      	mov	r2, r8
     6dc:	4013      	ands	r3, r2
  return U64TOWORD(x);
     6de:	0607      	lsls	r7, r0, #24
     6e0:	0e1a      	lsrs	r2, r3, #24
     6e2:	9201      	str	r2, [sp, #4]
     6e4:	0202      	lsls	r2, r0, #8
     6e6:	26ff      	movs	r6, #255	; 0xff
     6e8:	0436      	lsls	r6, r6, #16
     6ea:	46b4      	mov	ip, r6
     6ec:	4032      	ands	r2, r6
     6ee:	4317      	orrs	r7, r2
     6f0:	46b9      	mov	r9, r7
     6f2:	0a07      	lsrs	r7, r0, #8
     6f4:	061a      	lsls	r2, r3, #24
     6f6:	433a      	orrs	r2, r7
     6f8:	26ff      	movs	r6, #255	; 0xff
     6fa:	0236      	lsls	r6, r6, #8
     6fc:	4032      	ands	r2, r6
     6fe:	464f      	mov	r7, r9
     700:	4317      	orrs	r7, r2
     702:	0e00      	lsrs	r0, r0, #24
     704:	021a      	lsls	r2, r3, #8
     706:	4302      	orrs	r2, r0
     708:	26ff      	movs	r6, #255	; 0xff
     70a:	46b3      	mov	fp, r6
     70c:	4032      	ands	r2, r6
     70e:	433a      	orrs	r2, r7
     710:	0a1e      	lsrs	r6, r3, #8
     712:	46b1      	mov	r9, r6
     714:	061e      	lsls	r6, r3, #24
     716:	9f01      	ldr	r7, [sp, #4]
     718:	4337      	orrs	r7, r6
     71a:	021b      	lsls	r3, r3, #8
     71c:	4303      	orrs	r3, r0
     71e:	4660      	mov	r0, ip
     720:	4003      	ands	r3, r0
     722:	433b      	orrs	r3, r7
     724:	4648      	mov	r0, r9
     726:	26ff      	movs	r6, #255	; 0xff
     728:	0236      	lsls	r6, r6, #8
     72a:	4030      	ands	r0, r6
     72c:	4303      	orrs	r3, r0
    *px ^= LOAD(m, mlen);
     72e:	405d      	eors	r5, r3
     730:	4062      	eors	r2, r4
     732:	9516      	str	r5, [sp, #88]	; 0x58
     734:	9217      	str	r2, [sp, #92]	; 0x5c
  *(uint64_t*)bytes &= ~MASK(n);
     736:	680b      	ldr	r3, [r1, #0]
     738:	9800      	ldr	r0, [sp, #0]
     73a:	4383      	bics	r3, r0
     73c:	001e      	movs	r6, r3
     73e:	684b      	ldr	r3, [r1, #4]
     740:	4640      	mov	r0, r8
     742:	4383      	bics	r3, r0
  *(uint64_t*)bytes |= WORDTOU64(w);
     744:	0628      	lsls	r0, r5, #24
     746:	0e14      	lsrs	r4, r2, #24
     748:	4326      	orrs	r6, r4
     74a:	4318      	orrs	r0, r3
     74c:	022c      	lsls	r4, r5, #8
     74e:	4663      	mov	r3, ip
     750:	401c      	ands	r4, r3
     752:	4320      	orrs	r0, r4
     754:	0a2c      	lsrs	r4, r5, #8
     756:	0613      	lsls	r3, r2, #24
     758:	4323      	orrs	r3, r4
     75a:	24ff      	movs	r4, #255	; 0xff
     75c:	0224      	lsls	r4, r4, #8
     75e:	4023      	ands	r3, r4
     760:	4318      	orrs	r0, r3
     762:	0e2d      	lsrs	r5, r5, #24
     764:	0214      	lsls	r4, r2, #8
     766:	432c      	orrs	r4, r5
     768:	465b      	mov	r3, fp
     76a:	401c      	ands	r4, r3
     76c:	4320      	orrs	r0, r4
     76e:	0a14      	lsrs	r4, r2, #8
     770:	0613      	lsls	r3, r2, #24
     772:	431e      	orrs	r6, r3
     774:	0212      	lsls	r2, r2, #8
     776:	4315      	orrs	r5, r2
     778:	4663      	mov	r3, ip
     77a:	401d      	ands	r5, r3
     77c:	432e      	orrs	r6, r5
     77e:	27ff      	movs	r7, #255	; 0xff
     780:	023f      	lsls	r7, r7, #8
     782:	4027      	ands	r7, r4
     784:	433e      	orrs	r6, r7
     786:	600e      	str	r6, [r1, #0]
     788:	6048      	str	r0, [r1, #4]
    s->x[1] ^= key->x[0];
     78a:	9b18      	ldr	r3, [sp, #96]	; 0x60
     78c:	0019      	movs	r1, r3
     78e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     790:	4059      	eors	r1, r3
     792:	9a19      	ldr	r2, [sp, #100]	; 0x64
     794:	980f      	ldr	r0, [sp, #60]	; 0x3c
     796:	4042      	eors	r2, r0
     798:	4694      	mov	ip, r2
    s->x[2] ^= key->x[1];
     79a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
     79c:	9200      	str	r2, [sp, #0]
     79e:	9a11      	ldr	r2, [sp, #68]	; 0x44
     7a0:	9c00      	ldr	r4, [sp, #0]
     7a2:	4062      	eors	r2, r4
     7a4:	0010      	movs	r0, r2
     7a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
     7a8:	9200      	str	r2, [sp, #0]
     7aa:	9f12      	ldr	r7, [sp, #72]	; 0x48
     7ac:	4057      	eors	r7, r2
     7ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
     7b0:	4691      	mov	r9, r2
     7b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
     7b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
     7b6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
     7b8:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
     7ba:	9d16      	ldr	r5, [sp, #88]	; 0x58
     7bc:	46b8      	mov	r8, r7
     7be:	46b2      	mov	sl, r6
     7c0:	26f0      	movs	r6, #240	; 0xf0
     7c2:	469b      	mov	fp, r3

000007c4 <rbegin_847>:
     7c4:	4070      	eors	r0, r6
     7c6:	b440      	push	{r6}
     7c8:	4065      	eors	r5, r4
     7ca:	4054      	eors	r4, r2
     7cc:	4048      	eors	r0, r1
     7ce:	43ef      	mvns	r7, r5
     7d0:	4327      	orrs	r7, r4
     7d2:	1c06      	adds	r6, r0, #0
     7d4:	438e      	bics	r6, r1
     7d6:	4075      	eors	r5, r6
     7d8:	43e6      	mvns	r6, r4
     7da:	4316      	orrs	r6, r2
     7dc:	4070      	eors	r0, r6
     7de:	1c0e      	adds	r6, r1, #0
     7e0:	43ae      	bics	r6, r5
     7e2:	4074      	eors	r4, r6
     7e4:	1c16      	adds	r6, r2, #0
     7e6:	4006      	ands	r6, r0
     7e8:	404e      	eors	r6, r1
     7ea:	4057      	eors	r7, r2
     7ec:	4047      	eors	r7, r0
     7ee:	406e      	eors	r6, r5
     7f0:	4065      	eors	r5, r4
     7f2:	4649      	mov	r1, r9
     7f4:	4662      	mov	r2, ip
     7f6:	4681      	mov	r9, r0
     7f8:	46ac      	mov	ip, r5
     7fa:	4645      	mov	r5, r8
     7fc:	4658      	mov	r0, fp
     7fe:	4653      	mov	r3, sl
     800:	46b8      	mov	r8, r7
     802:	46a3      	mov	fp, r4
     804:	4059      	eors	r1, r3
     806:	4043      	eors	r3, r0
     808:	4055      	eors	r5, r2
     80a:	43cf      	mvns	r7, r1
     80c:	431f      	orrs	r7, r3
     80e:	1c2c      	adds	r4, r5, #0
     810:	4394      	bics	r4, r2
     812:	4061      	eors	r1, r4
     814:	43dc      	mvns	r4, r3
     816:	4304      	orrs	r4, r0
     818:	4065      	eors	r5, r4
     81a:	1c14      	adds	r4, r2, #0
     81c:	438c      	bics	r4, r1
     81e:	4063      	eors	r3, r4
     820:	1c04      	adds	r4, r0, #0
     822:	402c      	ands	r4, r5
     824:	4062      	eors	r2, r4
     826:	4078      	eors	r0, r7
     828:	4068      	eors	r0, r5
     82a:	404a      	eors	r2, r1
     82c:	4059      	eors	r1, r3
     82e:	4682      	mov	sl, r0
     830:	4648      	mov	r0, r9
     832:	4689      	mov	r9, r1
     834:	09ac      	lsrs	r4, r5, #6
     836:	0681      	lsls	r1, r0, #26
     838:	0987      	lsrs	r7, r0, #6
     83a:	404c      	eors	r4, r1
     83c:	06a9      	lsls	r1, r5, #26
     83e:	404f      	eors	r7, r1
     840:	0869      	lsrs	r1, r5, #1
     842:	404c      	eors	r4, r1
     844:	07c1      	lsls	r1, r0, #31
     846:	404c      	eors	r4, r1
     848:	0841      	lsrs	r1, r0, #1
     84a:	404f      	eors	r7, r1
     84c:	07e9      	lsls	r1, r5, #31
     84e:	404f      	eors	r7, r1
     850:	4065      	eors	r5, r4
     852:	4078      	eors	r0, r7
     854:	00d4      	lsls	r4, r2, #3
     856:	0f71      	lsrs	r1, r6, #29
     858:	00f7      	lsls	r7, r6, #3
     85a:	404c      	eors	r4, r1
     85c:	0f51      	lsrs	r1, r2, #29
     85e:	404f      	eors	r7, r1
     860:	0651      	lsls	r1, r2, #25
     862:	404c      	eors	r4, r1
     864:	09f1      	lsrs	r1, r6, #7
     866:	404c      	eors	r4, r1
     868:	0671      	lsls	r1, r6, #25
     86a:	404f      	eors	r7, r1
     86c:	09d1      	lsrs	r1, r2, #7
     86e:	404f      	eors	r7, r1
     870:	4062      	eors	r2, r4
     872:	407e      	eors	r6, r7
     874:	465c      	mov	r4, fp
     876:	46b3      	mov	fp, r6
     878:	05de      	lsls	r6, r3, #23
     87a:	0a61      	lsrs	r1, r4, #9
     87c:	05e7      	lsls	r7, r4, #23
     87e:	404e      	eors	r6, r1
     880:	0a59      	lsrs	r1, r3, #9
     882:	404f      	eors	r7, r1
     884:	09d9      	lsrs	r1, r3, #7
     886:	404e      	eors	r6, r1
     888:	0661      	lsls	r1, r4, #25
     88a:	404e      	eors	r6, r1
     88c:	09e1      	lsrs	r1, r4, #7
     88e:	404f      	eors	r7, r1
     890:	0659      	lsls	r1, r3, #25
     892:	404f      	eors	r7, r1
     894:	4073      	eors	r3, r6
     896:	407c      	eors	r4, r7
     898:	4659      	mov	r1, fp
     89a:	4656      	mov	r6, sl
     89c:	469a      	mov	sl, r3
     89e:	4693      	mov	fp, r2
     8a0:	4642      	mov	r2, r8
     8a2:	46a8      	mov	r8, r5
     8a4:	0c73      	lsrs	r3, r6, #17
     8a6:	03d5      	lsls	r5, r2, #15
     8a8:	0c57      	lsrs	r7, r2, #17
     8aa:	406b      	eors	r3, r5
     8ac:	03f5      	lsls	r5, r6, #15
     8ae:	406f      	eors	r7, r5
     8b0:	0ab5      	lsrs	r5, r6, #10
     8b2:	406b      	eors	r3, r5
     8b4:	0595      	lsls	r5, r2, #22
     8b6:	406b      	eors	r3, r5
     8b8:	0a95      	lsrs	r5, r2, #10
     8ba:	406f      	eors	r7, r5
     8bc:	05b5      	lsls	r5, r6, #22
     8be:	406f      	eors	r7, r5
     8c0:	405e      	eors	r6, r3
     8c2:	407a      	eors	r2, r7
     8c4:	464f      	mov	r7, r9
     8c6:	4665      	mov	r5, ip
     8c8:	46a1      	mov	r9, r4
     8ca:	46dc      	mov	ip, fp
     8cc:	46b3      	mov	fp, r6
     8ce:	0f3c      	lsrs	r4, r7, #28
     8d0:	012e      	lsls	r6, r5, #4
     8d2:	0f2b      	lsrs	r3, r5, #28
     8d4:	4074      	eors	r4, r6
     8d6:	013e      	lsls	r6, r7, #4
     8d8:	4073      	eors	r3, r6
     8da:	0cfe      	lsrs	r6, r7, #19
     8dc:	4074      	eors	r4, r6
     8de:	036e      	lsls	r6, r5, #13
     8e0:	4074      	eors	r4, r6
     8e2:	0cee      	lsrs	r6, r5, #19
     8e4:	4073      	eors	r3, r6
     8e6:	037e      	lsls	r6, r7, #13
     8e8:	4073      	eors	r3, r6
     8ea:	bc40      	pop	{r6}
     8ec:	4067      	eors	r7, r4
     8ee:	405d      	eors	r5, r3
     8f0:	464c      	mov	r4, r9
     8f2:	46b9      	mov	r9, r7
     8f4:	3e0f      	subs	r6, #15
     8f6:	2e3c      	cmp	r6, #60	; 0x3c
     8f8:	d000      	beq.n	8fc <rend_847>
     8fa:	e763      	b.n	7c4 <rbegin_847>

000008fc <rend_847>:
     8fc:	465b      	mov	r3, fp
  s->x[3] ^= key->x[0];
     8fe:	990e      	ldr	r1, [sp, #56]	; 0x38
     900:	404a      	eors	r2, r1
     902:	980f      	ldr	r0, [sp, #60]	; 0x3c
     904:	4043      	eors	r3, r0
  memcpy(&x, bytes, n);
  return U64TOWORD(x);
}

forceinline void STOREBYTES(uint8_t* bytes, uint64_t w, int n) {
  uint64_t x = WORDTOU64(w);
     906:	0611      	lsls	r1, r2, #24
     908:	0e18      	lsrs	r0, r3, #24
     90a:	0214      	lsls	r4, r2, #8
     90c:	26ff      	movs	r6, #255	; 0xff
     90e:	0436      	lsls	r6, r6, #16
     910:	4034      	ands	r4, r6
     912:	4321      	orrs	r1, r4
     914:	0a15      	lsrs	r5, r2, #8
     916:	061c      	lsls	r4, r3, #24
     918:	432c      	orrs	r4, r5
     91a:	25ff      	movs	r5, #255	; 0xff
     91c:	022d      	lsls	r5, r5, #8
     91e:	402c      	ands	r4, r5
     920:	4321      	orrs	r1, r4
     922:	0e12      	lsrs	r2, r2, #24
     924:	021c      	lsls	r4, r3, #8
     926:	4314      	orrs	r4, r2
     928:	27ff      	movs	r7, #255	; 0xff
     92a:	403c      	ands	r4, r7
     92c:	4321      	orrs	r1, r4
     92e:	0a1c      	lsrs	r4, r3, #8
     930:	061f      	lsls	r7, r3, #24
     932:	4338      	orrs	r0, r7
     934:	021b      	lsls	r3, r3, #8
     936:	4313      	orrs	r3, r2
     938:	4033      	ands	r3, r6
     93a:	4303      	orrs	r3, r0
     93c:	4025      	ands	r5, r4
     93e:	432b      	orrs	r3, r5
     940:	9314      	str	r3, [sp, #80]	; 0x50
     942:	9115      	str	r1, [sp, #84]	; 0x54
  ascon_initaead(&s, &key, npub);
  //ascon_adata(&s, ad, adlen);
  ascon_encrypt(&s, c, m, mlen);
  ascon_final(&s, &key);
  /* set tag */
  STOREBYTES(c + mlen, s.x[3], 8);
     944:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     946:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
     948:	4694      	mov	ip, r2
     94a:	4463      	add	r3, ip
     94c:	0018      	movs	r0, r3
  memcpy(bytes, &x, n);
     94e:	2208      	movs	r2, #8
     950:	a914      	add	r1, sp, #80	; 0x50
     952:	4b13      	ldr	r3, [pc, #76]	; (9a0 <rend_847+0xa4>)
     954:	4798      	blx	r3
  //STOREBYTES(c + mlen + 8, s.x[4], 8);
  return 0;
}
     956:	2000      	movs	r0, #0
     958:	b021      	add	sp, #132	; 0x84
     95a:	bc3c      	pop	{r2, r3, r4, r5}
     95c:	4690      	mov	r8, r2
     95e:	4699      	mov	r9, r3
     960:	46a2      	mov	sl, r4
     962:	46ab      	mov	fp, r5
     964:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (mlen >= ASCON_AEAD_RATE) {
     966:	2b00      	cmp	r3, #0
     968:	d104      	bne.n	974 <rend_847+0x78>
     96a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
     96c:	2b07      	cmp	r3, #7
     96e:	d901      	bls.n	974 <rend_847+0x78>
     970:	f7ff fd3a 	bl	3e8 <rend_297+0x40>
     974:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
     976:	9f2b      	ldr	r7, [sp, #172]	; 0xac
     978:	9913      	ldr	r1, [sp, #76]	; 0x4c
     97a:	e684      	b.n	686 <rend_525+0x7a>
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
     97c:	2520      	movs	r5, #32
     97e:	1a2d      	subs	r5, r5, r0
     980:	2480      	movs	r4, #128	; 0x80
     982:	40ec      	lsrs	r4, r5
     984:	e68a      	b.n	69c <rend_525+0x90>
  return ~0ull >> (64 - 8 * n);
     986:	2220      	movs	r2, #32
     988:	1ad2      	subs	r2, r2, r3
     98a:	2601      	movs	r6, #1
     98c:	4276      	negs	r6, r6
     98e:	0030      	movs	r0, r6
     990:	4090      	lsls	r0, r2
     992:	0002      	movs	r2, r0
     994:	40de      	lsrs	r6, r3
     996:	0030      	movs	r0, r6
     998:	4310      	orrs	r0, r2
     99a:	9000      	str	r0, [sp, #0]
     99c:	e693      	b.n	6c6 <rend_525+0xba>
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	00006841 	.word	0x00006841

000009a4 <crypto_aead_decrypt>:

int crypto_aead_decrypt(unsigned char* m, unsigned long long* mlen,
                        unsigned char* nsec, const unsigned char* c,
                        unsigned long long clen, const unsigned char* ad,
                        unsigned long long adlen, const unsigned char* npub,
                        const unsigned char* k) {
     9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9a6:	46de      	mov	lr, fp
     9a8:	4657      	mov	r7, sl
     9aa:	464e      	mov	r6, r9
     9ac:	4645      	mov	r5, r8
     9ae:	b5e0      	push	{r5, r6, r7, lr}
     9b0:	b0a3      	sub	sp, #140	; 0x8c
     9b2:	900e      	str	r0, [sp, #56]	; 0x38
     9b4:	9315      	str	r3, [sp, #84]	; 0x54
     9b6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
     9b8:	469c      	mov	ip, r3
     9ba:	9c33      	ldr	r4, [sp, #204]	; 0xcc
  ascon_state_t s;
  (void)nsec;
  if (clen < CRYPTO_ABYTES) return -1;
     9bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
     9be:	2b00      	cmp	r3, #0
     9c0:	d101      	bne.n	9c6 <crypto_aead_decrypt+0x22>
     9c2:	f000 fc6d 	bl	12a0 <rend_1955+0x96>
  *mlen = clen = clen - CRYPTO_ABYTES;
     9c6:	2208      	movs	r2, #8
     9c8:	4252      	negs	r2, r2
     9ca:	17d3      	asrs	r3, r2, #31
     9cc:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
     9ce:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
     9d0:	18ad      	adds	r5, r5, r2
     9d2:	415e      	adcs	r6, r3
     9d4:	9510      	str	r5, [sp, #64]	; 0x40
     9d6:	9611      	str	r6, [sp, #68]	; 0x44
     9d8:	600d      	str	r5, [r1, #0]
     9da:	604e      	str	r6, [r1, #4]
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     9dc:	6822      	ldr	r2, [r4, #0]
     9de:	6863      	ldr	r3, [r4, #4]
  return U64TOWORD(x);
     9e0:	0611      	lsls	r1, r2, #24
     9e2:	0e1d      	lsrs	r5, r3, #24
     9e4:	0210      	lsls	r0, r2, #8
     9e6:	27ff      	movs	r7, #255	; 0xff
     9e8:	043f      	lsls	r7, r7, #16
     9ea:	4038      	ands	r0, r7
     9ec:	4308      	orrs	r0, r1
     9ee:	0a16      	lsrs	r6, r2, #8
     9f0:	0619      	lsls	r1, r3, #24
     9f2:	4331      	orrs	r1, r6
     9f4:	26ff      	movs	r6, #255	; 0xff
     9f6:	0236      	lsls	r6, r6, #8
     9f8:	4031      	ands	r1, r6
     9fa:	4308      	orrs	r0, r1
     9fc:	4680      	mov	r8, r0
     9fe:	0e12      	lsrs	r2, r2, #24
     a00:	0218      	lsls	r0, r3, #8
     a02:	4310      	orrs	r0, r2
     a04:	21ff      	movs	r1, #255	; 0xff
     a06:	468b      	mov	fp, r1
     a08:	4008      	ands	r0, r1
     a0a:	4641      	mov	r1, r8
     a0c:	4301      	orrs	r1, r0
     a0e:	9112      	str	r1, [sp, #72]	; 0x48
     a10:	0a18      	lsrs	r0, r3, #8
     a12:	0619      	lsls	r1, r3, #24
     a14:	430d      	orrs	r5, r1
     a16:	021b      	lsls	r3, r3, #8
     a18:	4313      	orrs	r3, r2
     a1a:	403b      	ands	r3, r7
     a1c:	431d      	orrs	r5, r3
     a1e:	4030      	ands	r0, r6
     a20:	002b      	movs	r3, r5
     a22:	4303      	orrs	r3, r0
     a24:	930f      	str	r3, [sp, #60]	; 0x3c
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     a26:	68a0      	ldr	r0, [r4, #8]
     a28:	68e3      	ldr	r3, [r4, #12]
  return U64TOWORD(x);
     a2a:	0604      	lsls	r4, r0, #24
     a2c:	0e1a      	lsrs	r2, r3, #24
     a2e:	0205      	lsls	r5, r0, #8
     a30:	403d      	ands	r5, r7
     a32:	4325      	orrs	r5, r4
     a34:	0a04      	lsrs	r4, r0, #8
     a36:	46a0      	mov	r8, r4
     a38:	061c      	lsls	r4, r3, #24
     a3a:	4641      	mov	r1, r8
     a3c:	430c      	orrs	r4, r1
     a3e:	4034      	ands	r4, r6
     a40:	4325      	orrs	r5, r4
     a42:	0e00      	lsrs	r0, r0, #24
     a44:	021c      	lsls	r4, r3, #8
     a46:	4304      	orrs	r4, r0
     a48:	4659      	mov	r1, fp
     a4a:	400c      	ands	r4, r1
     a4c:	0029      	movs	r1, r5
     a4e:	4321      	orrs	r1, r4
     a50:	9114      	str	r1, [sp, #80]	; 0x50
     a52:	0a1c      	lsrs	r4, r3, #8
     a54:	061d      	lsls	r5, r3, #24
     a56:	432a      	orrs	r2, r5
     a58:	021b      	lsls	r3, r3, #8
     a5a:	4318      	orrs	r0, r3
     a5c:	4038      	ands	r0, r7
     a5e:	4302      	orrs	r2, r0
     a60:	4034      	ands	r4, r6
     a62:	4322      	orrs	r2, r4
     a64:	9213      	str	r2, [sp, #76]	; 0x4c
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     a66:	4660      	mov	r0, ip
     a68:	6804      	ldr	r4, [r0, #0]
     a6a:	6843      	ldr	r3, [r0, #4]
  return U64TOWORD(x);
     a6c:	0625      	lsls	r5, r4, #24
     a6e:	0e1a      	lsrs	r2, r3, #24
     a70:	0220      	lsls	r0, r4, #8
     a72:	4038      	ands	r0, r7
     a74:	4328      	orrs	r0, r5
     a76:	0a21      	lsrs	r1, r4, #8
     a78:	061d      	lsls	r5, r3, #24
     a7a:	430d      	orrs	r5, r1
     a7c:	4035      	ands	r5, r6
     a7e:	4328      	orrs	r0, r5
     a80:	0e24      	lsrs	r4, r4, #24
     a82:	021d      	lsls	r5, r3, #8
     a84:	4325      	orrs	r5, r4
     a86:	4659      	mov	r1, fp
     a88:	400d      	ands	r5, r1
     a8a:	4328      	orrs	r0, r5
     a8c:	0a1d      	lsrs	r5, r3, #8
     a8e:	0619      	lsls	r1, r3, #24
     a90:	430a      	orrs	r2, r1
     a92:	021b      	lsls	r3, r3, #8
     a94:	431c      	orrs	r4, r3
     a96:	403c      	ands	r4, r7
     a98:	4322      	orrs	r2, r4
     a9a:	4035      	ands	r5, r6
     a9c:	432a      	orrs	r2, r5
     a9e:	4692      	mov	sl, r2
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     aa0:	4664      	mov	r4, ip
     aa2:	68a5      	ldr	r5, [r4, #8]
     aa4:	68e4      	ldr	r4, [r4, #12]
  return U64TOWORD(x);
     aa6:	062a      	lsls	r2, r5, #24
     aa8:	0e23      	lsrs	r3, r4, #24
     aaa:	4698      	mov	r8, r3
     aac:	022b      	lsls	r3, r5, #8
     aae:	403b      	ands	r3, r7
     ab0:	431a      	orrs	r2, r3
     ab2:	0a2b      	lsrs	r3, r5, #8
     ab4:	4699      	mov	r9, r3
     ab6:	0623      	lsls	r3, r4, #24
     ab8:	4649      	mov	r1, r9
     aba:	430b      	orrs	r3, r1
     abc:	4033      	ands	r3, r6
     abe:	4313      	orrs	r3, r2
     ac0:	0e2d      	lsrs	r5, r5, #24
     ac2:	0222      	lsls	r2, r4, #8
     ac4:	432a      	orrs	r2, r5
     ac6:	4659      	mov	r1, fp
     ac8:	4011      	ands	r1, r2
     aca:	4319      	orrs	r1, r3
     acc:	0a23      	lsrs	r3, r4, #8
     ace:	469c      	mov	ip, r3
     ad0:	0623      	lsls	r3, r4, #24
     ad2:	4642      	mov	r2, r8
     ad4:	4313      	orrs	r3, r2
     ad6:	0224      	lsls	r4, r4, #8
     ad8:	4325      	orrs	r5, r4
     ada:	403d      	ands	r5, r7
     adc:	432b      	orrs	r3, r5
     ade:	4664      	mov	r4, ip
     ae0:	4026      	ands	r6, r4
     ae2:	4333      	orrs	r3, r6
     ae4:	2400      	movs	r4, #0
     ae6:	46a0      	mov	r8, r4
     ae8:	4c64      	ldr	r4, [pc, #400]	; (c7c <rend_1336+0x3c>)
     aea:	46a4      	mov	ip, r4
     aec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
     aee:	9e12      	ldr	r6, [sp, #72]	; 0x48
     af0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
     af2:	9c14      	ldr	r4, [sp, #80]	; 0x50
     af4:	4652      	mov	r2, sl
     af6:	4681      	mov	r9, r0
     af8:	20f0      	movs	r0, #240	; 0xf0
     afa:	9001      	str	r0, [sp, #4]
     afc:	4640      	mov	r0, r8
     afe:	46b0      	mov	r8, r6
     b00:	46a2      	mov	sl, r4
     b02:	46cb      	mov	fp, r9
     b04:	4689      	mov	r9, r1
     b06:	24f0      	movs	r4, #240	; 0xf0

00000b08 <rbegin_1336>:
     b08:	4065      	eors	r5, r4
     b0a:	b410      	push	{r4}
     b0c:	4058      	eors	r0, r3
     b0e:	4053      	eors	r3, r2
     b10:	407d      	eors	r5, r7
     b12:	43c6      	mvns	r6, r0
     b14:	431e      	orrs	r6, r3
     b16:	1c2c      	adds	r4, r5, #0
     b18:	43bc      	bics	r4, r7
     b1a:	4060      	eors	r0, r4
     b1c:	43dc      	mvns	r4, r3
     b1e:	4314      	orrs	r4, r2
     b20:	4065      	eors	r5, r4
     b22:	1c3c      	adds	r4, r7, #0
     b24:	4384      	bics	r4, r0
     b26:	4063      	eors	r3, r4
     b28:	1c14      	adds	r4, r2, #0
     b2a:	402c      	ands	r4, r5
     b2c:	407c      	eors	r4, r7
     b2e:	4056      	eors	r6, r2
     b30:	406e      	eors	r6, r5
     b32:	4044      	eors	r4, r0
     b34:	4058      	eors	r0, r3
     b36:	4667      	mov	r7, ip
     b38:	4642      	mov	r2, r8
     b3a:	46ac      	mov	ip, r5
     b3c:	4680      	mov	r8, r0
     b3e:	4650      	mov	r0, sl
     b40:	465d      	mov	r5, fp
     b42:	4649      	mov	r1, r9
     b44:	46b2      	mov	sl, r6
     b46:	469b      	mov	fp, r3
     b48:	404f      	eors	r7, r1
     b4a:	4069      	eors	r1, r5
     b4c:	4050      	eors	r0, r2
     b4e:	43fe      	mvns	r6, r7
     b50:	430e      	orrs	r6, r1
     b52:	1c03      	adds	r3, r0, #0
     b54:	4393      	bics	r3, r2
     b56:	405f      	eors	r7, r3
     b58:	43cb      	mvns	r3, r1
     b5a:	432b      	orrs	r3, r5
     b5c:	4058      	eors	r0, r3
     b5e:	1c13      	adds	r3, r2, #0
     b60:	43bb      	bics	r3, r7
     b62:	4059      	eors	r1, r3
     b64:	1c2b      	adds	r3, r5, #0
     b66:	4003      	ands	r3, r0
     b68:	405a      	eors	r2, r3
     b6a:	4075      	eors	r5, r6
     b6c:	4045      	eors	r5, r0
     b6e:	407a      	eors	r2, r7
     b70:	404f      	eors	r7, r1
     b72:	46a9      	mov	r9, r5
     b74:	4665      	mov	r5, ip
     b76:	46bc      	mov	ip, r7
     b78:	0983      	lsrs	r3, r0, #6
     b7a:	06af      	lsls	r7, r5, #26
     b7c:	09ae      	lsrs	r6, r5, #6
     b7e:	407b      	eors	r3, r7
     b80:	0687      	lsls	r7, r0, #26
     b82:	407e      	eors	r6, r7
     b84:	0847      	lsrs	r7, r0, #1
     b86:	407b      	eors	r3, r7
     b88:	07ef      	lsls	r7, r5, #31
     b8a:	407b      	eors	r3, r7
     b8c:	086f      	lsrs	r7, r5, #1
     b8e:	407e      	eors	r6, r7
     b90:	07c7      	lsls	r7, r0, #31
     b92:	407e      	eors	r6, r7
     b94:	4058      	eors	r0, r3
     b96:	4075      	eors	r5, r6
     b98:	00d3      	lsls	r3, r2, #3
     b9a:	0f67      	lsrs	r7, r4, #29
     b9c:	00e6      	lsls	r6, r4, #3
     b9e:	407b      	eors	r3, r7
     ba0:	0f57      	lsrs	r7, r2, #29
     ba2:	407e      	eors	r6, r7
     ba4:	0657      	lsls	r7, r2, #25
     ba6:	407b      	eors	r3, r7
     ba8:	09e7      	lsrs	r7, r4, #7
     baa:	407b      	eors	r3, r7
     bac:	0667      	lsls	r7, r4, #25
     bae:	407e      	eors	r6, r7
     bb0:	09d7      	lsrs	r7, r2, #7
     bb2:	407e      	eors	r6, r7
     bb4:	405a      	eors	r2, r3
     bb6:	4074      	eors	r4, r6
     bb8:	465b      	mov	r3, fp
     bba:	46a3      	mov	fp, r4
     bbc:	05cc      	lsls	r4, r1, #23
     bbe:	0a5f      	lsrs	r7, r3, #9
     bc0:	05de      	lsls	r6, r3, #23
     bc2:	407c      	eors	r4, r7
     bc4:	0a4f      	lsrs	r7, r1, #9
     bc6:	407e      	eors	r6, r7
     bc8:	09cf      	lsrs	r7, r1, #7
     bca:	407c      	eors	r4, r7
     bcc:	065f      	lsls	r7, r3, #25
     bce:	407c      	eors	r4, r7
     bd0:	09df      	lsrs	r7, r3, #7
     bd2:	407e      	eors	r6, r7
     bd4:	064f      	lsls	r7, r1, #25
     bd6:	407e      	eors	r6, r7
     bd8:	4061      	eors	r1, r4
     bda:	4073      	eors	r3, r6
     bdc:	465f      	mov	r7, fp
     bde:	464c      	mov	r4, r9
     be0:	4689      	mov	r9, r1
     be2:	4693      	mov	fp, r2
     be4:	4652      	mov	r2, sl
     be6:	4682      	mov	sl, r0
     be8:	0c61      	lsrs	r1, r4, #17
     bea:	03d0      	lsls	r0, r2, #15
     bec:	0c56      	lsrs	r6, r2, #17
     bee:	4041      	eors	r1, r0
     bf0:	03e0      	lsls	r0, r4, #15
     bf2:	4046      	eors	r6, r0
     bf4:	0aa0      	lsrs	r0, r4, #10
     bf6:	4041      	eors	r1, r0
     bf8:	0590      	lsls	r0, r2, #22
     bfa:	4041      	eors	r1, r0
     bfc:	0a90      	lsrs	r0, r2, #10
     bfe:	4046      	eors	r6, r0
     c00:	05a0      	lsls	r0, r4, #22
     c02:	4046      	eors	r6, r0
     c04:	404c      	eors	r4, r1
     c06:	4072      	eors	r2, r6
     c08:	4666      	mov	r6, ip
     c0a:	4640      	mov	r0, r8
     c0c:	469c      	mov	ip, r3
     c0e:	46d8      	mov	r8, fp
     c10:	46a3      	mov	fp, r4
     c12:	0f33      	lsrs	r3, r6, #28
     c14:	0104      	lsls	r4, r0, #4
     c16:	0f01      	lsrs	r1, r0, #28
     c18:	4063      	eors	r3, r4
     c1a:	0134      	lsls	r4, r6, #4
     c1c:	4061      	eors	r1, r4
     c1e:	0cf4      	lsrs	r4, r6, #19
     c20:	4063      	eors	r3, r4
     c22:	0344      	lsls	r4, r0, #13
     c24:	4063      	eors	r3, r4
     c26:	0cc4      	lsrs	r4, r0, #19
     c28:	4061      	eors	r1, r4
     c2a:	0374      	lsls	r4, r6, #13
     c2c:	4061      	eors	r1, r4
     c2e:	bc10      	pop	{r4}
     c30:	405e      	eors	r6, r3
     c32:	4048      	eors	r0, r1
     c34:	4663      	mov	r3, ip
     c36:	46b4      	mov	ip, r6
     c38:	3c0f      	subs	r4, #15
     c3a:	2c3c      	cmp	r4, #60	; 0x3c
     c3c:	d000      	beq.n	c40 <rend_1336>
     c3e:	e763      	b.n	b08 <rbegin_1336>

00000c40 <rend_1336>:
     c40:	4649      	mov	r1, r9
     c42:	4654      	mov	r4, sl
     c44:	4646      	mov	r6, r8
     c46:	9018      	str	r0, [sp, #96]	; 0x60
     c48:	4660      	mov	r0, ip
     c4a:	9019      	str	r0, [sp, #100]	; 0x64
     c4c:	971a      	str	r7, [sp, #104]	; 0x68
     c4e:	961b      	str	r6, [sp, #108]	; 0x6c
     c50:	951c      	str	r5, [sp, #112]	; 0x70
     c52:	941d      	str	r4, [sp, #116]	; 0x74
  s->x[3] ^= key->x[0];
     c54:	980f      	ldr	r0, [sp, #60]	; 0x3c
     c56:	4042      	eors	r2, r0
     c58:	921e      	str	r2, [sp, #120]	; 0x78
     c5a:	9812      	ldr	r0, [sp, #72]	; 0x48
     c5c:	465a      	mov	r2, fp
     c5e:	4042      	eors	r2, r0
     c60:	921f      	str	r2, [sp, #124]	; 0x7c
  s->x[4] ^= key->x[1];
     c62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     c64:	4053      	eors	r3, r2
     c66:	9320      	str	r3, [sp, #128]	; 0x80
     c68:	9b14      	ldr	r3, [sp, #80]	; 0x50
     c6a:	4059      	eors	r1, r3
     c6c:	9121      	str	r1, [sp, #132]	; 0x84
  while (clen >= ASCON_AEAD_RATE) {
     c6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
     c70:	2b00      	cmp	r3, #0
     c72:	d101      	bne.n	c78 <rend_1336+0x38>
     c74:	f000 fb1e 	bl	12b4 <rend_1955+0xaa>
     c78:	e002      	b.n	c80 <rend_1336+0x40>
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	80400c06 	.word	0x80400c06
     c80:	9b10      	ldr	r3, [sp, #64]	; 0x40
     c82:	9c11      	ldr	r4, [sp, #68]	; 0x44
     c84:	9304      	str	r3, [sp, #16]
     c86:	9405      	str	r4, [sp, #20]
     c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     c8a:	469a      	mov	sl, r3
     c8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
     c8e:	4698      	mov	r8, r3
     c90:	23ff      	movs	r3, #255	; 0xff
     c92:	021b      	lsls	r3, r3, #8
     c94:	9301      	str	r3, [sp, #4]
    clen -= ASCON_AEAD_RATE;
     c96:	4653      	mov	r3, sl
     c98:	9302      	str	r3, [sp, #8]
     c9a:	4643      	mov	r3, r8
     c9c:	9303      	str	r3, [sp, #12]
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     c9e:	9b03      	ldr	r3, [sp, #12]
     ca0:	6818      	ldr	r0, [r3, #0]
     ca2:	6859      	ldr	r1, [r3, #4]
  return U64TOWORD(x);
     ca4:	0603      	lsls	r3, r0, #24
     ca6:	0e0a      	lsrs	r2, r1, #24
     ca8:	0206      	lsls	r6, r0, #8
     caa:	24ff      	movs	r4, #255	; 0xff
     cac:	0424      	lsls	r4, r4, #16
     cae:	4026      	ands	r6, r4
     cb0:	4333      	orrs	r3, r6
     cb2:	0a07      	lsrs	r7, r0, #8
     cb4:	060e      	lsls	r6, r1, #24
     cb6:	433e      	orrs	r6, r7
     cb8:	9d01      	ldr	r5, [sp, #4]
     cba:	402e      	ands	r6, r5
     cbc:	4333      	orrs	r3, r6
     cbe:	0e00      	lsrs	r0, r0, #24
     cc0:	020e      	lsls	r6, r1, #8
     cc2:	4306      	orrs	r6, r0
     cc4:	24ff      	movs	r4, #255	; 0xff
     cc6:	4026      	ands	r6, r4
     cc8:	4333      	orrs	r3, r6
     cca:	0a0e      	lsrs	r6, r1, #8
     ccc:	060f      	lsls	r7, r1, #24
     cce:	433a      	orrs	r2, r7
     cd0:	0209      	lsls	r1, r1, #8
     cd2:	4301      	orrs	r1, r0
     cd4:	20ff      	movs	r0, #255	; 0xff
     cd6:	0400      	lsls	r0, r0, #16
     cd8:	4001      	ands	r1, r0
     cda:	430a      	orrs	r2, r1
     cdc:	402e      	ands	r6, r5
     cde:	4332      	orrs	r2, r6
    s->x[0] ^= cx;
     ce0:	9d18      	ldr	r5, [sp, #96]	; 0x60
     ce2:	4055      	eors	r5, r2
     ce4:	9919      	ldr	r1, [sp, #100]	; 0x64
     ce6:	4059      	eors	r1, r3
  *(uint64_t*)bytes |= WORDTOU64(w);
     ce8:	062f      	lsls	r7, r5, #24
     cea:	0e0e      	lsrs	r6, r1, #24
     cec:	0228      	lsls	r0, r5, #8
     cee:	24ff      	movs	r4, #255	; 0xff
     cf0:	0424      	lsls	r4, r4, #16
     cf2:	4020      	ands	r0, r4
     cf4:	4307      	orrs	r7, r0
     cf6:	0a28      	lsrs	r0, r5, #8
     cf8:	4680      	mov	r8, r0
     cfa:	0608      	lsls	r0, r1, #24
     cfc:	4644      	mov	r4, r8
     cfe:	4320      	orrs	r0, r4
     d00:	9c01      	ldr	r4, [sp, #4]
     d02:	4020      	ands	r0, r4
     d04:	4338      	orrs	r0, r7
     d06:	0e2d      	lsrs	r5, r5, #24
     d08:	020f      	lsls	r7, r1, #8
     d0a:	432f      	orrs	r7, r5
     d0c:	24ff      	movs	r4, #255	; 0xff
     d0e:	4027      	ands	r7, r4
     d10:	4338      	orrs	r0, r7
     d12:	0a0f      	lsrs	r7, r1, #8
     d14:	060c      	lsls	r4, r1, #24
     d16:	4326      	orrs	r6, r4
     d18:	0209      	lsls	r1, r1, #8
     d1a:	4329      	orrs	r1, r5
     d1c:	24ff      	movs	r4, #255	; 0xff
     d1e:	0424      	lsls	r4, r4, #16
     d20:	4021      	ands	r1, r4
     d22:	4331      	orrs	r1, r6
     d24:	9c01      	ldr	r4, [sp, #4]
     d26:	4027      	ands	r7, r4
     d28:	4339      	orrs	r1, r7
     d2a:	9c02      	ldr	r4, [sp, #8]
     d2c:	6021      	str	r1, [r4, #0]
     d2e:	6060      	str	r0, [r4, #4]
     d30:	991a      	ldr	r1, [sp, #104]	; 0x68
     d32:	9106      	str	r1, [sp, #24]
     d34:	991b      	ldr	r1, [sp, #108]	; 0x6c
     d36:	9107      	str	r1, [sp, #28]
     d38:	991c      	ldr	r1, [sp, #112]	; 0x70
     d3a:	9108      	str	r1, [sp, #32]
     d3c:	991d      	ldr	r1, [sp, #116]	; 0x74
     d3e:	9109      	str	r1, [sp, #36]	; 0x24
     d40:	991e      	ldr	r1, [sp, #120]	; 0x78
     d42:	910a      	str	r1, [sp, #40]	; 0x28
     d44:	991f      	ldr	r1, [sp, #124]	; 0x7c
     d46:	910b      	str	r1, [sp, #44]	; 0x2c
     d48:	9920      	ldr	r1, [sp, #128]	; 0x80
     d4a:	910c      	str	r1, [sp, #48]	; 0x30
     d4c:	9921      	ldr	r1, [sp, #132]	; 0x84
     d4e:	910d      	str	r1, [sp, #52]	; 0x34
     d50:	9906      	ldr	r1, [sp, #24]
     d52:	468c      	mov	ip, r1
     d54:	9f07      	ldr	r7, [sp, #28]
     d56:	9908      	ldr	r1, [sp, #32]
     d58:	9106      	str	r1, [sp, #24]
     d5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
     d5c:	980a      	ldr	r0, [sp, #40]	; 0x28
     d5e:	4682      	mov	sl, r0
     d60:	980b      	ldr	r0, [sp, #44]	; 0x2c
     d62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
     d64:	990d      	ldr	r1, [sp, #52]	; 0x34
     d66:	2496      	movs	r4, #150	; 0x96
     d68:	9407      	str	r4, [sp, #28]
     d6a:	4698      	mov	r8, r3
     d6c:	4664      	mov	r4, ip
     d6e:	46bc      	mov	ip, r7
     d70:	9b06      	ldr	r3, [sp, #24]
     d72:	46b1      	mov	r9, r6
     d74:	4656      	mov	r6, sl
     d76:	4682      	mov	sl, r0
     d78:	468b      	mov	fp, r1
     d7a:	2196      	movs	r1, #150	; 0x96

00000d7c <rbegin_1581>:
     d7c:	404b      	eors	r3, r1
     d7e:	b402      	push	{r1}
     d80:	406a      	eors	r2, r5
     d82:	4075      	eors	r5, r6
     d84:	4063      	eors	r3, r4
     d86:	43d0      	mvns	r0, r2
     d88:	4328      	orrs	r0, r5
     d8a:	1c19      	adds	r1, r3, #0
     d8c:	43a1      	bics	r1, r4
     d8e:	404a      	eors	r2, r1
     d90:	43e9      	mvns	r1, r5
     d92:	4331      	orrs	r1, r6
     d94:	404b      	eors	r3, r1
     d96:	1c21      	adds	r1, r4, #0
     d98:	4391      	bics	r1, r2
     d9a:	404d      	eors	r5, r1
     d9c:	1c31      	adds	r1, r6, #0
     d9e:	4019      	ands	r1, r3
     da0:	4061      	eors	r1, r4
     da2:	4070      	eors	r0, r6
     da4:	4058      	eors	r0, r3
     da6:	4051      	eors	r1, r2
     da8:	406a      	eors	r2, r5
     daa:	4644      	mov	r4, r8
     dac:	4666      	mov	r6, ip
     dae:	4698      	mov	r8, r3
     db0:	4694      	mov	ip, r2
     db2:	464a      	mov	r2, r9
     db4:	4653      	mov	r3, sl
     db6:	465f      	mov	r7, fp
     db8:	4681      	mov	r9, r0
     dba:	46aa      	mov	sl, r5
     dbc:	407c      	eors	r4, r7
     dbe:	405f      	eors	r7, r3
     dc0:	4072      	eors	r2, r6
     dc2:	43e0      	mvns	r0, r4
     dc4:	4338      	orrs	r0, r7
     dc6:	1c15      	adds	r5, r2, #0
     dc8:	43b5      	bics	r5, r6
     dca:	406c      	eors	r4, r5
     dcc:	43fd      	mvns	r5, r7
     dce:	431d      	orrs	r5, r3
     dd0:	406a      	eors	r2, r5
     dd2:	1c35      	adds	r5, r6, #0
     dd4:	43a5      	bics	r5, r4
     dd6:	406f      	eors	r7, r5
     dd8:	1c1d      	adds	r5, r3, #0
     dda:	4015      	ands	r5, r2
     ddc:	406e      	eors	r6, r5
     dde:	4043      	eors	r3, r0
     de0:	4053      	eors	r3, r2
     de2:	4066      	eors	r6, r4
     de4:	407c      	eors	r4, r7
     de6:	469b      	mov	fp, r3
     de8:	4643      	mov	r3, r8
     dea:	46a0      	mov	r8, r4
     dec:	0995      	lsrs	r5, r2, #6
     dee:	069c      	lsls	r4, r3, #26
     df0:	0998      	lsrs	r0, r3, #6
     df2:	4065      	eors	r5, r4
     df4:	0694      	lsls	r4, r2, #26
     df6:	4060      	eors	r0, r4
     df8:	0854      	lsrs	r4, r2, #1
     dfa:	4065      	eors	r5, r4
     dfc:	07dc      	lsls	r4, r3, #31
     dfe:	4065      	eors	r5, r4
     e00:	085c      	lsrs	r4, r3, #1
     e02:	4060      	eors	r0, r4
     e04:	07d4      	lsls	r4, r2, #31
     e06:	4060      	eors	r0, r4
     e08:	406a      	eors	r2, r5
     e0a:	4043      	eors	r3, r0
     e0c:	00f5      	lsls	r5, r6, #3
     e0e:	0f4c      	lsrs	r4, r1, #29
     e10:	00c8      	lsls	r0, r1, #3
     e12:	4065      	eors	r5, r4
     e14:	0f74      	lsrs	r4, r6, #29
     e16:	4060      	eors	r0, r4
     e18:	0674      	lsls	r4, r6, #25
     e1a:	4065      	eors	r5, r4
     e1c:	09cc      	lsrs	r4, r1, #7
     e1e:	4065      	eors	r5, r4
     e20:	064c      	lsls	r4, r1, #25
     e22:	4060      	eors	r0, r4
     e24:	09f4      	lsrs	r4, r6, #7
     e26:	4060      	eors	r0, r4
     e28:	406e      	eors	r6, r5
     e2a:	4041      	eors	r1, r0
     e2c:	4655      	mov	r5, sl
     e2e:	468a      	mov	sl, r1
     e30:	05f9      	lsls	r1, r7, #23
     e32:	0a6c      	lsrs	r4, r5, #9
     e34:	05e8      	lsls	r0, r5, #23
     e36:	4061      	eors	r1, r4
     e38:	0a7c      	lsrs	r4, r7, #9
     e3a:	4060      	eors	r0, r4
     e3c:	09fc      	lsrs	r4, r7, #7
     e3e:	4061      	eors	r1, r4
     e40:	066c      	lsls	r4, r5, #25
     e42:	4061      	eors	r1, r4
     e44:	09ec      	lsrs	r4, r5, #7
     e46:	4060      	eors	r0, r4
     e48:	067c      	lsls	r4, r7, #25
     e4a:	4060      	eors	r0, r4
     e4c:	404f      	eors	r7, r1
     e4e:	4045      	eors	r5, r0
     e50:	4654      	mov	r4, sl
     e52:	4659      	mov	r1, fp
     e54:	46bb      	mov	fp, r7
     e56:	46b2      	mov	sl, r6
     e58:	464e      	mov	r6, r9
     e5a:	4691      	mov	r9, r2
     e5c:	0c4f      	lsrs	r7, r1, #17
     e5e:	03f2      	lsls	r2, r6, #15
     e60:	0c70      	lsrs	r0, r6, #17
     e62:	4057      	eors	r7, r2
     e64:	03ca      	lsls	r2, r1, #15
     e66:	4050      	eors	r0, r2
     e68:	0a8a      	lsrs	r2, r1, #10
     e6a:	4057      	eors	r7, r2
     e6c:	05b2      	lsls	r2, r6, #22
     e6e:	4057      	eors	r7, r2
     e70:	0ab2      	lsrs	r2, r6, #10
     e72:	4050      	eors	r0, r2
     e74:	058a      	lsls	r2, r1, #22
     e76:	4050      	eors	r0, r2
     e78:	4079      	eors	r1, r7
     e7a:	4046      	eors	r6, r0
     e7c:	4640      	mov	r0, r8
     e7e:	4662      	mov	r2, ip
     e80:	46a8      	mov	r8, r5
     e82:	46d4      	mov	ip, sl
     e84:	468a      	mov	sl, r1
     e86:	0f05      	lsrs	r5, r0, #28
     e88:	0111      	lsls	r1, r2, #4
     e8a:	0f17      	lsrs	r7, r2, #28
     e8c:	404d      	eors	r5, r1
     e8e:	0101      	lsls	r1, r0, #4
     e90:	404f      	eors	r7, r1
     e92:	0cc1      	lsrs	r1, r0, #19
     e94:	404d      	eors	r5, r1
     e96:	0351      	lsls	r1, r2, #13
     e98:	404d      	eors	r5, r1
     e9a:	0cd1      	lsrs	r1, r2, #19
     e9c:	404f      	eors	r7, r1
     e9e:	0341      	lsls	r1, r0, #13
     ea0:	404f      	eors	r7, r1
     ea2:	bc02      	pop	{r1}
     ea4:	4068      	eors	r0, r5
     ea6:	407a      	eors	r2, r7
     ea8:	4645      	mov	r5, r8
     eaa:	4680      	mov	r8, r0
     eac:	390f      	subs	r1, #15
     eae:	293c      	cmp	r1, #60	; 0x3c
     eb0:	d000      	beq.n	eb4 <rend_1581>
     eb2:	e763      	b.n	d7c <rbegin_1581>

00000eb4 <rend_1581>:
     eb4:	4659      	mov	r1, fp
     eb6:	4650      	mov	r0, sl
     eb8:	46b2      	mov	sl, r6
     eba:	464e      	mov	r6, r9
     ebc:	9306      	str	r3, [sp, #24]
     ebe:	4667      	mov	r7, ip
     ec0:	4643      	mov	r3, r8
     ec2:	9218      	str	r2, [sp, #96]	; 0x60
     ec4:	9319      	str	r3, [sp, #100]	; 0x64
     ec6:	941a      	str	r4, [sp, #104]	; 0x68
     ec8:	971b      	str	r7, [sp, #108]	; 0x6c
     eca:	9b06      	ldr	r3, [sp, #24]
     ecc:	931c      	str	r3, [sp, #112]	; 0x70
     ece:	961d      	str	r6, [sp, #116]	; 0x74
     ed0:	4653      	mov	r3, sl
     ed2:	931e      	str	r3, [sp, #120]	; 0x78
     ed4:	901f      	str	r0, [sp, #124]	; 0x7c
     ed6:	9520      	str	r5, [sp, #128]	; 0x80
     ed8:	9121      	str	r1, [sp, #132]	; 0x84
    m += ASCON_AEAD_RATE;
     eda:	2308      	movs	r3, #8
     edc:	469c      	mov	ip, r3
     ede:	9a02      	ldr	r2, [sp, #8]
     ee0:	4462      	add	r2, ip
     ee2:	9202      	str	r2, [sp, #8]
    c += ASCON_AEAD_RATE;
     ee4:	9b03      	ldr	r3, [sp, #12]
     ee6:	3308      	adds	r3, #8
     ee8:	9303      	str	r3, [sp, #12]
    clen -= ASCON_AEAD_RATE;
     eea:	9a04      	ldr	r2, [sp, #16]
     eec:	9b05      	ldr	r3, [sp, #20]
     eee:	2008      	movs	r0, #8
     ef0:	4240      	negs	r0, r0
     ef2:	17c1      	asrs	r1, r0, #31
     ef4:	1812      	adds	r2, r2, r0
     ef6:	414b      	adcs	r3, r1
     ef8:	9204      	str	r2, [sp, #16]
     efa:	9305      	str	r3, [sp, #20]
  while (clen >= ASCON_AEAD_RATE) {
     efc:	2b00      	cmp	r3, #0
     efe:	d000      	beq.n	f02 <rend_1581+0x4e>
     f00:	e6cd      	b.n	c9e <rend_1336+0x5e>
     f02:	9b04      	ldr	r3, [sp, #16]
     f04:	9c05      	ldr	r4, [sp, #20]
     f06:	2c00      	cmp	r4, #0
     f08:	d102      	bne.n	f10 <rend_1581+0x5c>
     f0a:	2b07      	cmp	r3, #7
     f0c:	d900      	bls.n	f10 <rend_1581+0x5c>
     f0e:	e6c6      	b.n	c9e <rend_1336+0x5e>
     f10:	2410      	movs	r4, #16
     f12:	4264      	negs	r4, r4
     f14:	17e5      	asrs	r5, r4, #31
     f16:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
     f18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
     f1a:	18a4      	adds	r4, r4, r2
     f1c:	415d      	adcs	r5, r3
     f1e:	076b      	lsls	r3, r5, #29
     f20:	08e0      	lsrs	r0, r4, #3
     f22:	4318      	orrs	r0, r3
     f24:	08e9      	lsrs	r1, r5, #3
     f26:	1c46      	adds	r6, r0, #1
     f28:	00f6      	lsls	r6, r6, #3
     f2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     f2c:	469c      	mov	ip, r3
     f2e:	44b4      	add	ip, r6
     f30:	4663      	mov	r3, ip
     f32:	930e      	str	r3, [sp, #56]	; 0x38
     f34:	9b15      	ldr	r3, [sp, #84]	; 0x54
     f36:	469c      	mov	ip, r3
     f38:	4466      	add	r6, ip
     f3a:	2208      	movs	r2, #8
     f3c:	4252      	negs	r2, r2
     f3e:	17d3      	asrs	r3, r2, #31
     f40:	4f56      	ldr	r7, [pc, #344]	; (109c <rend_1581+0x1e8>)
     f42:	47b8      	blx	r7
     f44:	1824      	adds	r4, r4, r0
     f46:	414d      	adcs	r5, r1
  *px ^= PAD(clen);
     f48:	9401      	str	r4, [sp, #4]
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
     f4a:	2207      	movs	r2, #7
     f4c:	1b12      	subs	r2, r2, r4
     f4e:	00d2      	lsls	r2, r2, #3
     f50:	2320      	movs	r3, #32
     f52:	425b      	negs	r3, r3
     f54:	18d1      	adds	r1, r2, r3
     f56:	d500      	bpl.n	f5a <rend_1581+0xa6>
     f58:	e1b8      	b.n	12cc <rend_1955+0xc2>
     f5a:	33a0      	adds	r3, #160	; 0xa0
     f5c:	408b      	lsls	r3, r1
     f5e:	2180      	movs	r1, #128	; 0x80
     f60:	4091      	lsls	r1, r2
     f62:	9a18      	ldr	r2, [sp, #96]	; 0x60
     f64:	4051      	eors	r1, r2
     f66:	9a19      	ldr	r2, [sp, #100]	; 0x64
     f68:	4053      	eors	r3, r2
     f6a:	9118      	str	r1, [sp, #96]	; 0x60
     f6c:	9319      	str	r3, [sp, #100]	; 0x64
  if (clen) {
     f6e:	432c      	orrs	r4, r5
     f70:	d100      	bne.n	f74 <rend_1581+0xc0>
     f72:	e095      	b.n	10a0 <rend_1581+0x1ec>
  return ~0ull >> (64 - 8 * n);
     f74:	2208      	movs	r2, #8
     f76:	9801      	ldr	r0, [sp, #4]
     f78:	1a12      	subs	r2, r2, r0
     f7a:	00d2      	lsls	r2, r2, #3
     f7c:	2020      	movs	r0, #32
     f7e:	4240      	negs	r0, r0
     f80:	1810      	adds	r0, r2, r0
     f82:	d500      	bpl.n	f86 <rend_1581+0xd2>
     f84:	e1a7      	b.n	12d6 <rend_1955+0xcc>
     f86:	2501      	movs	r5, #1
     f88:	426d      	negs	r5, r5
     f8a:	40c5      	lsrs	r5, r0
     f8c:	2001      	movs	r0, #1
     f8e:	4240      	negs	r0, r0
     f90:	40d0      	lsrs	r0, r2
     f92:	4684      	mov	ip, r0
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     f94:	6830      	ldr	r0, [r6, #0]
     f96:	4028      	ands	r0, r5
     f98:	6872      	ldr	r2, [r6, #4]
     f9a:	4664      	mov	r4, ip
     f9c:	4022      	ands	r2, r4
  return U64TOWORD(x);
     f9e:	0606      	lsls	r6, r0, #24
     fa0:	0e14      	lsrs	r4, r2, #24
     fa2:	46a3      	mov	fp, r4
     fa4:	0204      	lsls	r4, r0, #8
     fa6:	27ff      	movs	r7, #255	; 0xff
     fa8:	043f      	lsls	r7, r7, #16
     faa:	403c      	ands	r4, r7
     fac:	4326      	orrs	r6, r4
     fae:	46b0      	mov	r8, r6
     fb0:	0a06      	lsrs	r6, r0, #8
     fb2:	0614      	lsls	r4, r2, #24
     fb4:	4334      	orrs	r4, r6
     fb6:	26ff      	movs	r6, #255	; 0xff
     fb8:	0236      	lsls	r6, r6, #8
     fba:	4034      	ands	r4, r6
     fbc:	4646      	mov	r6, r8
     fbe:	4326      	orrs	r6, r4
     fc0:	46b0      	mov	r8, r6
     fc2:	0e00      	lsrs	r0, r0, #24
     fc4:	0214      	lsls	r4, r2, #8
     fc6:	4304      	orrs	r4, r0
     fc8:	26ff      	movs	r6, #255	; 0xff
     fca:	46b2      	mov	sl, r6
     fcc:	4034      	ands	r4, r6
     fce:	4646      	mov	r6, r8
     fd0:	4334      	orrs	r4, r6
     fd2:	0a16      	lsrs	r6, r2, #8
     fd4:	46b0      	mov	r8, r6
     fd6:	0616      	lsls	r6, r2, #24
     fd8:	46b1      	mov	r9, r6
     fda:	465e      	mov	r6, fp
     fdc:	464f      	mov	r7, r9
     fde:	433e      	orrs	r6, r7
     fe0:	0212      	lsls	r2, r2, #8
     fe2:	4302      	orrs	r2, r0
     fe4:	20ff      	movs	r0, #255	; 0xff
     fe6:	0400      	lsls	r0, r0, #16
     fe8:	4002      	ands	r2, r0
     fea:	4332      	orrs	r2, r6
     fec:	4640      	mov	r0, r8
     fee:	26ff      	movs	r6, #255	; 0xff
     ff0:	0236      	lsls	r6, r6, #8
     ff2:	4030      	ands	r0, r6
     ff4:	4302      	orrs	r2, r0
    *px ^= cx;
     ff6:	4051      	eors	r1, r2
     ff8:	4063      	eors	r3, r4
  *(uint64_t*)bytes &= ~MASK(n);
     ffa:	980e      	ldr	r0, [sp, #56]	; 0x38
     ffc:	6806      	ldr	r6, [r0, #0]
     ffe:	43ae      	bics	r6, r5
    1000:	0035      	movs	r5, r6
    1002:	6846      	ldr	r6, [r0, #4]
    1004:	9602      	str	r6, [sp, #8]
    1006:	4667      	mov	r7, ip
    1008:	43be      	bics	r6, r7
    100a:	46b4      	mov	ip, r6
  *(uint64_t*)bytes |= WORDTOU64(w);
    100c:	0608      	lsls	r0, r1, #24
    100e:	0e1e      	lsrs	r6, r3, #24
    1010:	4335      	orrs	r5, r6
    1012:	4666      	mov	r6, ip
    1014:	4306      	orrs	r6, r0
    1016:	46b4      	mov	ip, r6
    1018:	0208      	lsls	r0, r1, #8
    101a:	26ff      	movs	r6, #255	; 0xff
    101c:	0436      	lsls	r6, r6, #16
    101e:	4030      	ands	r0, r6
    1020:	4666      	mov	r6, ip
    1022:	4306      	orrs	r6, r0
    1024:	46b4      	mov	ip, r6
    1026:	0a0e      	lsrs	r6, r1, #8
    1028:	0618      	lsls	r0, r3, #24
    102a:	4330      	orrs	r0, r6
    102c:	26ff      	movs	r6, #255	; 0xff
    102e:	0236      	lsls	r6, r6, #8
    1030:	4030      	ands	r0, r6
    1032:	4666      	mov	r6, ip
    1034:	4330      	orrs	r0, r6
    1036:	0e0e      	lsrs	r6, r1, #24
    1038:	46b4      	mov	ip, r6
    103a:	021e      	lsls	r6, r3, #8
    103c:	4667      	mov	r7, ip
    103e:	433e      	orrs	r6, r7
    1040:	46b0      	mov	r8, r6
    1042:	4656      	mov	r6, sl
    1044:	4647      	mov	r7, r8
    1046:	403e      	ands	r6, r7
    1048:	4330      	orrs	r0, r6
    104a:	0a1e      	lsrs	r6, r3, #8
    104c:	46b0      	mov	r8, r6
    104e:	061e      	lsls	r6, r3, #24
    1050:	4335      	orrs	r5, r6
    1052:	021e      	lsls	r6, r3, #8
    1054:	46b1      	mov	r9, r6
    1056:	4666      	mov	r6, ip
    1058:	464f      	mov	r7, r9
    105a:	433e      	orrs	r6, r7
    105c:	27ff      	movs	r7, #255	; 0xff
    105e:	043f      	lsls	r7, r7, #16
    1060:	4037      	ands	r7, r6
    1062:	432f      	orrs	r7, r5
    1064:	4646      	mov	r6, r8
    1066:	25ff      	movs	r5, #255	; 0xff
    1068:	022d      	lsls	r5, r5, #8
    106a:	402e      	ands	r6, r5
    106c:	4337      	orrs	r7, r6
    106e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1070:	602f      	str	r7, [r5, #0]
    1072:	6068      	str	r0, [r5, #4]
  uint64_t mask = ~0ull >> (8 * n);
    1074:	9801      	ldr	r0, [sp, #4]
    1076:	00c5      	lsls	r5, r0, #3
    1078:	2020      	movs	r0, #32
    107a:	4240      	negs	r0, r0
    107c:	182e      	adds	r6, r5, r0
    107e:	d500      	bpl.n	1082 <rend_1581+0x1ce>
    1080:	e132      	b.n	12e8 <rend_1955+0xde>
    1082:	301f      	adds	r0, #31
    1084:	40f0      	lsrs	r0, r6
    1086:	2601      	movs	r6, #1
    1088:	4276      	negs	r6, r6
    108a:	40ee      	lsrs	r6, r5
  return w & mask;
    108c:	4001      	ands	r1, r0
    108e:	4033      	ands	r3, r6
    *px ^= cx;
    1090:	404a      	eors	r2, r1
    1092:	9218      	str	r2, [sp, #96]	; 0x60
    1094:	405c      	eors	r4, r3
    1096:	9419      	str	r4, [sp, #100]	; 0x64
    1098:	e002      	b.n	10a0 <rend_1581+0x1ec>
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	00006791 	.word	0x00006791
    s->x[1] ^= key->x[0];
    10a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    10a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    10a4:	4053      	eors	r3, r2
    10a6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    10a8:	9812      	ldr	r0, [sp, #72]	; 0x48
    10aa:	4041      	eors	r1, r0
    10ac:	468c      	mov	ip, r1
    s->x[2] ^= key->x[1];
    10ae:	991c      	ldr	r1, [sp, #112]	; 0x70
    10b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    10b2:	404a      	eors	r2, r1
    10b4:	991d      	ldr	r1, [sp, #116]	; 0x74
    10b6:	9101      	str	r1, [sp, #4]
    10b8:	9e14      	ldr	r6, [sp, #80]	; 0x50
    10ba:	404e      	eors	r6, r1
    10bc:	9919      	ldr	r1, [sp, #100]	; 0x64
    10be:	4689      	mov	r9, r1
    10c0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    10c2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    10c4:	9920      	ldr	r1, [sp, #128]	; 0x80
    10c6:	9f21      	ldr	r7, [sp, #132]	; 0x84
    10c8:	9818      	ldr	r0, [sp, #96]	; 0x60
    10ca:	46b0      	mov	r8, r6
    10cc:	46ba      	mov	sl, r7
    10ce:	26f0      	movs	r6, #240	; 0xf0
    10d0:	46a3      	mov	fp, r4

000010d2 <rbegin_1955>:
    10d2:	4072      	eors	r2, r6
    10d4:	b440      	push	{r6}
    10d6:	4048      	eors	r0, r1
    10d8:	4069      	eors	r1, r5
    10da:	405a      	eors	r2, r3
    10dc:	43c7      	mvns	r7, r0
    10de:	430f      	orrs	r7, r1
    10e0:	1c16      	adds	r6, r2, #0
    10e2:	439e      	bics	r6, r3
    10e4:	4070      	eors	r0, r6
    10e6:	43ce      	mvns	r6, r1
    10e8:	432e      	orrs	r6, r5
    10ea:	4072      	eors	r2, r6
    10ec:	1c1e      	adds	r6, r3, #0
    10ee:	4386      	bics	r6, r0
    10f0:	4071      	eors	r1, r6
    10f2:	1c2e      	adds	r6, r5, #0
    10f4:	4016      	ands	r6, r2
    10f6:	405e      	eors	r6, r3
    10f8:	406f      	eors	r7, r5
    10fa:	4057      	eors	r7, r2
    10fc:	4046      	eors	r6, r0
    10fe:	4048      	eors	r0, r1
    1100:	464b      	mov	r3, r9
    1102:	4665      	mov	r5, ip
    1104:	4691      	mov	r9, r2
    1106:	4684      	mov	ip, r0
    1108:	4640      	mov	r0, r8
    110a:	465a      	mov	r2, fp
    110c:	4654      	mov	r4, sl
    110e:	46b8      	mov	r8, r7
    1110:	468b      	mov	fp, r1
    1112:	4063      	eors	r3, r4
    1114:	4054      	eors	r4, r2
    1116:	4068      	eors	r0, r5
    1118:	43df      	mvns	r7, r3
    111a:	4327      	orrs	r7, r4
    111c:	1c01      	adds	r1, r0, #0
    111e:	43a9      	bics	r1, r5
    1120:	404b      	eors	r3, r1
    1122:	43e1      	mvns	r1, r4
    1124:	4311      	orrs	r1, r2
    1126:	4048      	eors	r0, r1
    1128:	1c29      	adds	r1, r5, #0
    112a:	4399      	bics	r1, r3
    112c:	404c      	eors	r4, r1
    112e:	1c11      	adds	r1, r2, #0
    1130:	4001      	ands	r1, r0
    1132:	404d      	eors	r5, r1
    1134:	407a      	eors	r2, r7
    1136:	4042      	eors	r2, r0
    1138:	405d      	eors	r5, r3
    113a:	4063      	eors	r3, r4
    113c:	4692      	mov	sl, r2
    113e:	464a      	mov	r2, r9
    1140:	4699      	mov	r9, r3
    1142:	0981      	lsrs	r1, r0, #6
    1144:	0693      	lsls	r3, r2, #26
    1146:	0997      	lsrs	r7, r2, #6
    1148:	4059      	eors	r1, r3
    114a:	0683      	lsls	r3, r0, #26
    114c:	405f      	eors	r7, r3
    114e:	0843      	lsrs	r3, r0, #1
    1150:	4059      	eors	r1, r3
    1152:	07d3      	lsls	r3, r2, #31
    1154:	4059      	eors	r1, r3
    1156:	0853      	lsrs	r3, r2, #1
    1158:	405f      	eors	r7, r3
    115a:	07c3      	lsls	r3, r0, #31
    115c:	405f      	eors	r7, r3
    115e:	4048      	eors	r0, r1
    1160:	407a      	eors	r2, r7
    1162:	00e9      	lsls	r1, r5, #3
    1164:	0f73      	lsrs	r3, r6, #29
    1166:	00f7      	lsls	r7, r6, #3
    1168:	4059      	eors	r1, r3
    116a:	0f6b      	lsrs	r3, r5, #29
    116c:	405f      	eors	r7, r3
    116e:	066b      	lsls	r3, r5, #25
    1170:	4059      	eors	r1, r3
    1172:	09f3      	lsrs	r3, r6, #7
    1174:	4059      	eors	r1, r3
    1176:	0673      	lsls	r3, r6, #25
    1178:	405f      	eors	r7, r3
    117a:	09eb      	lsrs	r3, r5, #7
    117c:	405f      	eors	r7, r3
    117e:	404d      	eors	r5, r1
    1180:	407e      	eors	r6, r7
    1182:	4659      	mov	r1, fp
    1184:	46b3      	mov	fp, r6
    1186:	05e6      	lsls	r6, r4, #23
    1188:	0a4b      	lsrs	r3, r1, #9
    118a:	05cf      	lsls	r7, r1, #23
    118c:	405e      	eors	r6, r3
    118e:	0a63      	lsrs	r3, r4, #9
    1190:	405f      	eors	r7, r3
    1192:	09e3      	lsrs	r3, r4, #7
    1194:	405e      	eors	r6, r3
    1196:	064b      	lsls	r3, r1, #25
    1198:	405e      	eors	r6, r3
    119a:	09cb      	lsrs	r3, r1, #7
    119c:	405f      	eors	r7, r3
    119e:	0663      	lsls	r3, r4, #25
    11a0:	405f      	eors	r7, r3
    11a2:	4074      	eors	r4, r6
    11a4:	4079      	eors	r1, r7
    11a6:	465b      	mov	r3, fp
    11a8:	4656      	mov	r6, sl
    11aa:	46a2      	mov	sl, r4
    11ac:	46ab      	mov	fp, r5
    11ae:	4645      	mov	r5, r8
    11b0:	4680      	mov	r8, r0
    11b2:	0c74      	lsrs	r4, r6, #17
    11b4:	03e8      	lsls	r0, r5, #15
    11b6:	0c6f      	lsrs	r7, r5, #17
    11b8:	4044      	eors	r4, r0
    11ba:	03f0      	lsls	r0, r6, #15
    11bc:	4047      	eors	r7, r0
    11be:	0ab0      	lsrs	r0, r6, #10
    11c0:	4044      	eors	r4, r0
    11c2:	05a8      	lsls	r0, r5, #22
    11c4:	4044      	eors	r4, r0
    11c6:	0aa8      	lsrs	r0, r5, #10
    11c8:	4047      	eors	r7, r0
    11ca:	05b0      	lsls	r0, r6, #22
    11cc:	4047      	eors	r7, r0
    11ce:	4066      	eors	r6, r4
    11d0:	407d      	eors	r5, r7
    11d2:	464f      	mov	r7, r9
    11d4:	4660      	mov	r0, ip
    11d6:	4689      	mov	r9, r1
    11d8:	46dc      	mov	ip, fp
    11da:	46b3      	mov	fp, r6
    11dc:	0f39      	lsrs	r1, r7, #28
    11de:	0106      	lsls	r6, r0, #4
    11e0:	0f04      	lsrs	r4, r0, #28
    11e2:	4071      	eors	r1, r6
    11e4:	013e      	lsls	r6, r7, #4
    11e6:	4074      	eors	r4, r6
    11e8:	0cfe      	lsrs	r6, r7, #19
    11ea:	4071      	eors	r1, r6
    11ec:	0346      	lsls	r6, r0, #13
    11ee:	4071      	eors	r1, r6
    11f0:	0cc6      	lsrs	r6, r0, #19
    11f2:	4074      	eors	r4, r6
    11f4:	037e      	lsls	r6, r7, #13
    11f6:	4074      	eors	r4, r6
    11f8:	bc40      	pop	{r6}
    11fa:	404f      	eors	r7, r1
    11fc:	4060      	eors	r0, r4
    11fe:	4649      	mov	r1, r9
    1200:	46b9      	mov	r9, r7
    1202:	3e0f      	subs	r6, #15
    1204:	2e3c      	cmp	r6, #60	; 0x3c
    1206:	d000      	beq.n	120a <rend_1955>
    1208:	e763      	b.n	10d2 <rbegin_1955>

0000120a <rend_1955>:
    120a:	465c      	mov	r4, fp
  ascon_initaead(&s, &key, npub);
  //ascon_adata(&s, ad, adlen);
  ascon_decrypt(&s, m, c, clen);
  ascon_final(&s, &key);
  /* verify tag (should be constant time, check compiler output) */
  s.x[3] ^= LOADBYTES(c + clen, 8);
    120c:	9915      	ldr	r1, [sp, #84]	; 0x54
    120e:	9e10      	ldr	r6, [sp, #64]	; 0x40
    1210:	46b4      	mov	ip, r6
    1212:	4461      	add	r1, ip
  memcpy(&x, bytes, n);
    1214:	2208      	movs	r2, #8
    1216:	a816      	add	r0, sp, #88	; 0x58
    1218:	4b38      	ldr	r3, [pc, #224]	; (12fc <rend_1955+0xf2>)
    121a:	4798      	blx	r3
  return U64TOWORD(x);
    121c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    121e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    1220:	0611      	lsls	r1, r2, #24
    1222:	0e03      	lsrs	r3, r0, #24
    1224:	0216      	lsls	r6, r2, #8
    1226:	27ff      	movs	r7, #255	; 0xff
    1228:	043f      	lsls	r7, r7, #16
    122a:	46bc      	mov	ip, r7
    122c:	403e      	ands	r6, r7
    122e:	4331      	orrs	r1, r6
    1230:	0a17      	lsrs	r7, r2, #8
    1232:	0606      	lsls	r6, r0, #24
    1234:	433e      	orrs	r6, r7
    1236:	27ff      	movs	r7, #255	; 0xff
    1238:	023f      	lsls	r7, r7, #8
    123a:	403e      	ands	r6, r7
    123c:	4331      	orrs	r1, r6
    123e:	0e16      	lsrs	r6, r2, #24
    1240:	46b0      	mov	r8, r6
    1242:	0206      	lsls	r6, r0, #8
    1244:	4642      	mov	r2, r8
    1246:	4316      	orrs	r6, r2
    1248:	22ff      	movs	r2, #255	; 0xff
    124a:	4016      	ands	r6, r2
    124c:	4331      	orrs	r1, r6
    124e:	468a      	mov	sl, r1
    1250:	0a06      	lsrs	r6, r0, #8
    1252:	0601      	lsls	r1, r0, #24
    1254:	430b      	orrs	r3, r1
    1256:	0200      	lsls	r0, r0, #8
    1258:	4641      	mov	r1, r8
    125a:	4308      	orrs	r0, r1
    125c:	4661      	mov	r1, ip
    125e:	4008      	ands	r0, r1
    1260:	4303      	orrs	r3, r0
    1262:	403e      	ands	r6, r7
    1264:	4333      	orrs	r3, r6
    1266:	405d      	eors	r5, r3
    1268:	4653      	mov	r3, sl
    126a:	405c      	eors	r4, r3
    126c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    126e:	405d      	eors	r5, r3
    1270:	9812      	ldr	r0, [sp, #72]	; 0x48
    1272:	4044      	eors	r4, r0
  result |= result >> 32;
    1274:	4325      	orrs	r5, r4
  result |= result >> 16;
    1276:	0421      	lsls	r1, r4, #16
    1278:	0c2b      	lsrs	r3, r5, #16
    127a:	430b      	orrs	r3, r1
    127c:	0c21      	lsrs	r1, r4, #16
    127e:	431d      	orrs	r5, r3
    1280:	430c      	orrs	r4, r1
  result |= result >> 8;
    1282:	0624      	lsls	r4, r4, #24
    1284:	0a28      	lsrs	r0, r5, #8
    1286:	4320      	orrs	r0, r4
    1288:	4328      	orrs	r0, r5
  return ((((int)(result & 0xff) - 1) >> 8) & 1) - 1;
    128a:	4010      	ands	r0, r2
    128c:	3801      	subs	r0, #1
    128e:	0fc0      	lsrs	r0, r0, #31
    1290:	3801      	subs	r0, #1
  s.x[4] = 0; //^= LOADBYTES(c + clen + 8, 8);
  return NOTZERO(s.x[3], s.x[4]);
}
    1292:	b023      	add	sp, #140	; 0x8c
    1294:	bc3c      	pop	{r2, r3, r4, r5}
    1296:	4690      	mov	r8, r2
    1298:	4699      	mov	r9, r3
    129a:	46a2      	mov	sl, r4
    129c:	46ab      	mov	fp, r5
    129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (clen < CRYPTO_ABYTES) return -1;
    12a0:	2b00      	cmp	r3, #0
    12a2:	d104      	bne.n	12ae <rend_1955+0xa4>
    12a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    12a6:	2b07      	cmp	r3, #7
    12a8:	d901      	bls.n	12ae <rend_1955+0xa4>
    12aa:	f7ff fb8c 	bl	9c6 <crypto_aead_decrypt+0x22>
    12ae:	2001      	movs	r0, #1
    12b0:	4240      	negs	r0, r0
    12b2:	e7ee      	b.n	1292 <rend_1955+0x88>
  while (clen >= ASCON_AEAD_RATE) {
    12b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    12b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
    12b8:	2c00      	cmp	r4, #0
    12ba:	d103      	bne.n	12c4 <rend_1955+0xba>
    12bc:	2b07      	cmp	r3, #7
    12be:	d901      	bls.n	12c4 <rend_1955+0xba>
    12c0:	f7ff fcde 	bl	c80 <rend_1336+0x40>
    12c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    12c6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    12c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
    12ca:	e63d      	b.n	f48 <rend_1581+0x94>
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
    12cc:	2120      	movs	r1, #32
    12ce:	1a89      	subs	r1, r1, r2
    12d0:	2380      	movs	r3, #128	; 0x80
    12d2:	40cb      	lsrs	r3, r1
    12d4:	e643      	b.n	f5e <rend_1581+0xaa>
  return ~0ull >> (64 - 8 * n);
    12d6:	2020      	movs	r0, #32
    12d8:	1a80      	subs	r0, r0, r2
    12da:	2501      	movs	r5, #1
    12dc:	426d      	negs	r5, r5
    12de:	002c      	movs	r4, r5
    12e0:	4084      	lsls	r4, r0
    12e2:	40d5      	lsrs	r5, r2
    12e4:	4325      	orrs	r5, r4
    12e6:	e651      	b.n	f8c <rend_1581+0xd8>
  uint64_t mask = ~0ull >> (8 * n);
    12e8:	2620      	movs	r6, #32
    12ea:	1b76      	subs	r6, r6, r5
    12ec:	2001      	movs	r0, #1
    12ee:	4240      	negs	r0, r0
    12f0:	0007      	movs	r7, r0
    12f2:	40b7      	lsls	r7, r6
    12f4:	40e8      	lsrs	r0, r5
    12f6:	4338      	orrs	r0, r7
    12f8:	e6c5      	b.n	1086 <rend_1581+0x1d2>
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	00006841 	.word	0x00006841

00001300 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1300:	4b0c      	ldr	r3, [pc, #48]	; (1334 <cpu_irq_enter_critical+0x34>)
    1302:	681b      	ldr	r3, [r3, #0]
    1304:	2b00      	cmp	r3, #0
    1306:	d106      	bne.n	1316 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1308:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    130c:	2b00      	cmp	r3, #0
    130e:	d007      	beq.n	1320 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1310:	2200      	movs	r2, #0
    1312:	4b09      	ldr	r3, [pc, #36]	; (1338 <cpu_irq_enter_critical+0x38>)
    1314:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1316:	4a07      	ldr	r2, [pc, #28]	; (1334 <cpu_irq_enter_critical+0x34>)
    1318:	6813      	ldr	r3, [r2, #0]
    131a:	3301      	adds	r3, #1
    131c:	6013      	str	r3, [r2, #0]
}
    131e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1320:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1322:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1326:	2200      	movs	r2, #0
    1328:	4b04      	ldr	r3, [pc, #16]	; (133c <cpu_irq_enter_critical+0x3c>)
    132a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    132c:	3201      	adds	r2, #1
    132e:	4b02      	ldr	r3, [pc, #8]	; (1338 <cpu_irq_enter_critical+0x38>)
    1330:	701a      	strb	r2, [r3, #0]
    1332:	e7f0      	b.n	1316 <cpu_irq_enter_critical+0x16>
    1334:	20000304 	.word	0x20000304
    1338:	20000308 	.word	0x20000308
    133c:	20000000 	.word	0x20000000

00001340 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1340:	4b08      	ldr	r3, [pc, #32]	; (1364 <cpu_irq_leave_critical+0x24>)
    1342:	681a      	ldr	r2, [r3, #0]
    1344:	3a01      	subs	r2, #1
    1346:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1348:	681b      	ldr	r3, [r3, #0]
    134a:	2b00      	cmp	r3, #0
    134c:	d109      	bne.n	1362 <cpu_irq_leave_critical+0x22>
    134e:	4b06      	ldr	r3, [pc, #24]	; (1368 <cpu_irq_leave_critical+0x28>)
    1350:	781b      	ldrb	r3, [r3, #0]
    1352:	2b00      	cmp	r3, #0
    1354:	d005      	beq.n	1362 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1356:	2201      	movs	r2, #1
    1358:	4b04      	ldr	r3, [pc, #16]	; (136c <cpu_irq_leave_critical+0x2c>)
    135a:	701a      	strb	r2, [r3, #0]
    135c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1360:	b662      	cpsie	i
	}
}
    1362:	4770      	bx	lr
    1364:	20000304 	.word	0x20000304
    1368:	20000308 	.word	0x20000308
    136c:	20000000 	.word	0x20000000

00001370 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1370:	b5f0      	push	{r4, r5, r6, r7, lr}
    1372:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1374:	ac01      	add	r4, sp, #4
    1376:	2501      	movs	r5, #1
    1378:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    137a:	2700      	movs	r7, #0
    137c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    137e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1380:	0021      	movs	r1, r4
    1382:	200f      	movs	r0, #15
    1384:	4e06      	ldr	r6, [pc, #24]	; (13a0 <system_board_init+0x30>)
    1386:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1388:	2280      	movs	r2, #128	; 0x80
    138a:	0212      	lsls	r2, r2, #8
    138c:	2382      	movs	r3, #130	; 0x82
    138e:	05db      	lsls	r3, r3, #23
    1390:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1392:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1394:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1396:	0021      	movs	r1, r4
    1398:	201c      	movs	r0, #28
    139a:	47b0      	blx	r6
}
    139c:	b003      	add	sp, #12
    139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13a0:	0000184d 	.word	0x0000184d

000013a4 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
    13a4:	6803      	ldr	r3, [r0, #0]
    13a6:	4a0a      	ldr	r2, [pc, #40]	; (13d0 <_can_enable_peripheral_clock+0x2c>)
    13a8:	4293      	cmp	r3, r2
    13aa:	d003      	beq.n	13b4 <_can_enable_peripheral_clock+0x10>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
    13ac:	4a09      	ldr	r2, [pc, #36]	; (13d4 <_can_enable_peripheral_clock+0x30>)
    13ae:	4293      	cmp	r3, r2
    13b0:	d007      	beq.n	13c2 <_can_enable_peripheral_clock+0x1e>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
    13b2:	4770      	bx	lr
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	MCLK->AHBMASK.reg |= ahb_mask;
    13b4:	4a08      	ldr	r2, [pc, #32]	; (13d8 <_can_enable_peripheral_clock+0x34>)
    13b6:	6911      	ldr	r1, [r2, #16]
    13b8:	2380      	movs	r3, #128	; 0x80
    13ba:	005b      	lsls	r3, r3, #1
    13bc:	430b      	orrs	r3, r1
    13be:	6113      	str	r3, [r2, #16]
    13c0:	e7f7      	b.n	13b2 <_can_enable_peripheral_clock+0xe>
    13c2:	4a05      	ldr	r2, [pc, #20]	; (13d8 <_can_enable_peripheral_clock+0x34>)
    13c4:	6911      	ldr	r1, [r2, #16]
    13c6:	2380      	movs	r3, #128	; 0x80
    13c8:	009b      	lsls	r3, r3, #2
    13ca:	430b      	orrs	r3, r1
    13cc:	6113      	str	r3, [r2, #16]
    13ce:	e7f0      	b.n	13b2 <_can_enable_peripheral_clock+0xe>
    13d0:	42001c00 	.word	0x42001c00
    13d4:	42002000 	.word	0x42002000
    13d8:	40000800 	.word	0x40000800

000013dc <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
    13dc:	b570      	push	{r4, r5, r6, lr}
    13de:	000c      	movs	r4, r1
    13e0:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    13e2:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
    13e4:	4ba6      	ldr	r3, [pc, #664]	; (1680 <can_init+0x2a4>)
    13e6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    13e8:	4ba6      	ldr	r3, [pc, #664]	; (1684 <can_init+0x2a8>)
    13ea:	2200      	movs	r2, #0
    13ec:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    13ee:	782a      	ldrb	r2, [r5, #0]
    13f0:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
    13f2:	4ba5      	ldr	r3, [pc, #660]	; (1688 <can_init+0x2ac>)
    13f4:	429c      	cmp	r4, r3
    13f6:	d100      	bne.n	13fa <can_init+0x1e>
    13f8:	e0c7      	b.n	158a <can_init+0x1ae>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
    13fa:	4ba4      	ldr	r3, [pc, #656]	; (168c <can_init+0x2b0>)
    13fc:	429c      	cmp	r4, r3
    13fe:	d100      	bne.n	1402 <can_init+0x26>
    1400:	e100      	b.n	1604 <can_init+0x228>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1402:	69a3      	ldr	r3, [r4, #24]
    1404:	2202      	movs	r2, #2
    1406:	4313      	orrs	r3, r2
    1408:	61a3      	str	r3, [r4, #24]
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 32) / 16 + 5) |
    140a:	4aa1      	ldr	r2, [pc, #644]	; (1690 <can_init+0x2b4>)
    140c:	23bc      	movs	r3, #188	; 0xbc
    140e:	50e2      	str	r2, [r4, r3]
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 32) / 16 + 5);
    1410:	2207      	movs	r2, #7
    1412:	330c      	adds	r3, #12
    1414:	50e2      	str	r2, [r4, r3]
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
    1416:	4b9f      	ldr	r3, [pc, #636]	; (1694 <can_init+0x2b8>)
    1418:	61e3      	str	r3, [r4, #28]
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
    141a:	4b9f      	ldr	r3, [pc, #636]	; (1698 <can_init+0x2bc>)
    141c:	60e3      	str	r3, [r4, #12]
	if (config->tdc_enable) {
    141e:	7bab      	ldrb	r3, [r5, #14]
    1420:	2b00      	cmp	r3, #0
    1422:	d004      	beq.n	142e <can_init+0x52>
		hw->DBTP.reg |= CAN_DBTP_TDC;
    1424:	68e2      	ldr	r2, [r4, #12]
    1426:	2380      	movs	r3, #128	; 0x80
    1428:	041b      	lsls	r3, r3, #16
    142a:	4313      	orrs	r3, r2
    142c:	60e3      	str	r3, [r4, #12]
	if (config->run_in_standby) {
    142e:	786b      	ldrb	r3, [r5, #1]
    1430:	2b00      	cmp	r3, #0
    1432:	d003      	beq.n	143c <can_init+0x60>
		hw->MRCFG.reg |= 0x01<<6;
    1434:	68a3      	ldr	r3, [r4, #8]
    1436:	2240      	movs	r2, #64	; 0x40
    1438:	4313      	orrs	r3, r2
    143a:	60a3      	str	r3, [r4, #8]
	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
    143c:	6962      	ldr	r2, [r4, #20]
    143e:	78ab      	ldrb	r3, [r5, #2]
    1440:	4313      	orrs	r3, r2
    1442:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
    1444:	78eb      	ldrb	r3, [r5, #3]
    1446:	2b00      	cmp	r3, #0
    1448:	d004      	beq.n	1454 <can_init+0x78>
		hw->CCCR.reg |= CAN_CCCR_TXP;
    144a:	69a2      	ldr	r2, [r4, #24]
    144c:	2380      	movs	r3, #128	; 0x80
    144e:	01db      	lsls	r3, r3, #7
    1450:	4313      	orrs	r3, r2
    1452:	61a3      	str	r3, [r4, #24]
	if (config->edge_filtering) {
    1454:	792b      	ldrb	r3, [r5, #4]
    1456:	2b00      	cmp	r3, #0
    1458:	d004      	beq.n	1464 <can_init+0x88>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
    145a:	69a2      	ldr	r2, [r4, #24]
    145c:	2380      	movs	r3, #128	; 0x80
    145e:	019b      	lsls	r3, r3, #6
    1460:	4313      	orrs	r3, r2
    1462:	61a3      	str	r3, [r4, #24]
	if (config->protocol_exception_handling) {
    1464:	796b      	ldrb	r3, [r5, #5]
    1466:	2b00      	cmp	r3, #0
    1468:	d004      	beq.n	1474 <can_init+0x98>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
    146a:	69a2      	ldr	r2, [r4, #24]
    146c:	2380      	movs	r3, #128	; 0x80
    146e:	015b      	lsls	r3, r3, #5
    1470:	4313      	orrs	r3, r2
    1472:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
    1474:	79ab      	ldrb	r3, [r5, #6]
    1476:	2b00      	cmp	r3, #0
    1478:	d103      	bne.n	1482 <can_init+0xa6>
		hw->CCCR.reg |= CAN_CCCR_DAR;
    147a:	69a3      	ldr	r3, [r4, #24]
    147c:	2240      	movs	r2, #64	; 0x40
    147e:	4313      	orrs	r3, r2
    1480:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
    1482:	79eb      	ldrb	r3, [r5, #7]
    1484:	2b00      	cmp	r3, #0
    1486:	d003      	beq.n	1490 <can_init+0xb4>
		hw->CCCR.reg |= CAN_CCCR_CSR;
    1488:	69a3      	ldr	r3, [r4, #24]
    148a:	2210      	movs	r2, #16
    148c:	4313      	orrs	r3, r2
    148e:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_acknowledge) {
    1490:	7a2b      	ldrb	r3, [r5, #8]
    1492:	2b00      	cmp	r3, #0
    1494:	d003      	beq.n	149e <can_init+0xc2>
		hw->CCCR.reg |= CAN_CCCR_CSA;
    1496:	69a3      	ldr	r3, [r4, #24]
    1498:	2208      	movs	r2, #8
    149a:	4313      	orrs	r3, r2
    149c:	61a3      	str	r3, [r4, #24]
	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
    149e:	7a6b      	ldrb	r3, [r5, #9]
    14a0:	041b      	lsls	r3, r3, #16
    14a2:	22f0      	movs	r2, #240	; 0xf0
    14a4:	0312      	lsls	r2, r2, #12
    14a6:	4013      	ands	r3, r2
    14a8:	2201      	movs	r2, #1
    14aa:	4313      	orrs	r3, r2
    14ac:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
    14ae:	7b2b      	ldrb	r3, [r5, #12]
    14b0:	7b6a      	ldrb	r2, [r5, #13]
    14b2:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    14b4:	896a      	ldrh	r2, [r5, #10]
    14b6:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
    14b8:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    14ba:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    14bc:	7beb      	ldrb	r3, [r5, #15]
    14be:	021b      	lsls	r3, r3, #8
    14c0:	22fe      	movs	r2, #254	; 0xfe
    14c2:	01d2      	lsls	r2, r2, #7
    14c4:	4013      	ands	r3, r2
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
    14c6:	7c29      	ldrb	r1, [r5, #16]
    14c8:	227f      	movs	r2, #127	; 0x7f
    14ca:	400a      	ands	r2, r1
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    14cc:	4313      	orrs	r3, r2
    14ce:	64a3      	str	r3, [r4, #72]	; 0x48
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    14d0:	7c6a      	ldrb	r2, [r5, #17]
    14d2:	0112      	lsls	r2, r2, #4
    14d4:	2330      	movs	r3, #48	; 0x30
    14d6:	4013      	ands	r3, r2
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
    14d8:	7ca9      	ldrb	r1, [r5, #18]
    14da:	0089      	lsls	r1, r1, #2
    14dc:	220c      	movs	r2, #12
    14de:	400a      	ands	r2, r1
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    14e0:	4313      	orrs	r3, r2
    14e2:	2280      	movs	r2, #128	; 0x80
    14e4:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_standard_reject) {
    14e6:	7ceb      	ldrb	r3, [r5, #19]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d003      	beq.n	14f4 <can_init+0x118>
		hw->GFC.reg |= CAN_GFC_RRFS;
    14ec:	58a3      	ldr	r3, [r4, r2]
    14ee:	2102      	movs	r1, #2
    14f0:	430b      	orrs	r3, r1
    14f2:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_extended_reject) {
    14f4:	7d2b      	ldrb	r3, [r5, #20]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d004      	beq.n	1504 <can_init+0x128>
		hw->GFC.reg |= CAN_GFC_RRFE;
    14fa:	2280      	movs	r2, #128	; 0x80
    14fc:	58a3      	ldr	r3, [r4, r2]
    14fe:	2101      	movs	r1, #1
    1500:	430b      	orrs	r3, r1
    1502:	50a3      	str	r3, [r4, r2]
	hw->XIDAM.reg = config->extended_id_mask;
    1504:	2390      	movs	r3, #144	; 0x90
    1506:	69aa      	ldr	r2, [r5, #24]
    1508:	50e2      	str	r2, [r4, r3]
	if (config->rx_fifo_0_overwrite) {
    150a:	7f2b      	ldrb	r3, [r5, #28]
    150c:	2b00      	cmp	r3, #0
    150e:	d005      	beq.n	151c <can_init+0x140>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
    1510:	22a0      	movs	r2, #160	; 0xa0
    1512:	58a1      	ldr	r1, [r4, r2]
    1514:	2380      	movs	r3, #128	; 0x80
    1516:	061b      	lsls	r3, r3, #24
    1518:	430b      	orrs	r3, r1
    151a:	50a3      	str	r3, [r4, r2]
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
    151c:	22a0      	movs	r2, #160	; 0xa0
    151e:	58a1      	ldr	r1, [r4, r2]
    1520:	7f6b      	ldrb	r3, [r5, #29]
    1522:	061b      	lsls	r3, r3, #24
    1524:	20fe      	movs	r0, #254	; 0xfe
    1526:	05c0      	lsls	r0, r0, #23
    1528:	4003      	ands	r3, r0
    152a:	430b      	orrs	r3, r1
    152c:	50a3      	str	r3, [r4, r2]
	if (config->rx_fifo_1_overwrite) {
    152e:	7fab      	ldrb	r3, [r5, #30]
    1530:	2b00      	cmp	r3, #0
    1532:	d005      	beq.n	1540 <can_init+0x164>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
    1534:	3210      	adds	r2, #16
    1536:	58a1      	ldr	r1, [r4, r2]
    1538:	2380      	movs	r3, #128	; 0x80
    153a:	061b      	lsls	r3, r3, #24
    153c:	430b      	orrs	r3, r1
    153e:	50a3      	str	r3, [r4, r2]
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
    1540:	22b0      	movs	r2, #176	; 0xb0
    1542:	58a1      	ldr	r1, [r4, r2]
    1544:	7feb      	ldrb	r3, [r5, #31]
    1546:	061b      	lsls	r3, r3, #24
    1548:	20fe      	movs	r0, #254	; 0xfe
    154a:	05c0      	lsls	r0, r0, #23
    154c:	4003      	ands	r3, r0
    154e:	430b      	orrs	r3, r1
    1550:	50a3      	str	r3, [r4, r2]
	if (config->tx_queue_mode) {
    1552:	2320      	movs	r3, #32
    1554:	5ceb      	ldrb	r3, [r5, r3]
    1556:	2b00      	cmp	r3, #0
    1558:	d005      	beq.n	1566 <can_init+0x18a>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
    155a:	3210      	adds	r2, #16
    155c:	58a1      	ldr	r1, [r4, r2]
    155e:	2380      	movs	r3, #128	; 0x80
    1560:	05db      	lsls	r3, r3, #23
    1562:	430b      	orrs	r3, r1
    1564:	50a3      	str	r3, [r4, r2]
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
    1566:	22f0      	movs	r2, #240	; 0xf0
    1568:	58a1      	ldr	r1, [r4, r2]
    156a:	2321      	movs	r3, #33	; 0x21
    156c:	5ceb      	ldrb	r3, [r5, r3]
    156e:	061b      	lsls	r3, r3, #24
    1570:	20fc      	movs	r0, #252	; 0xfc
    1572:	0580      	lsls	r0, r0, #22
    1574:	4003      	ands	r3, r0
    1576:	430b      	orrs	r3, r1
    1578:	50a3      	str	r3, [r4, r2]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
    157a:	2303      	movs	r3, #3
    157c:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
    157e:	3b04      	subs	r3, #4
    1580:	3a10      	subs	r2, #16
    1582:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
    1584:	3204      	adds	r2, #4
    1586:	50a3      	str	r3, [r4, r2]
}
    1588:	bd70      	pop	{r4, r5, r6, pc}
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
    158a:	493e      	ldr	r1, [pc, #248]	; (1684 <can_init+0x2a8>)
    158c:	201a      	movs	r0, #26
    158e:	4b43      	ldr	r3, [pc, #268]	; (169c <can_init+0x2c0>)
    1590:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
    1592:	201a      	movs	r0, #26
    1594:	4b42      	ldr	r3, [pc, #264]	; (16a0 <can_init+0x2c4>)
    1596:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1598:	4b3b      	ldr	r3, [pc, #236]	; (1688 <can_init+0x2ac>)
    159a:	699a      	ldr	r2, [r3, #24]
    159c:	2102      	movs	r1, #2
    159e:	430a      	orrs	r2, r1
    15a0:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
    15a2:	4a40      	ldr	r2, [pc, #256]	; (16a4 <can_init+0x2c8>)
    15a4:	0412      	lsls	r2, r2, #16
    15a6:	0c12      	lsrs	r2, r2, #16
    15a8:	2180      	movs	r1, #128	; 0x80
    15aa:	0389      	lsls	r1, r1, #14
    15ac:	430a      	orrs	r2, r1
    15ae:	2184      	movs	r1, #132	; 0x84
    15b0:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
    15b2:	4a3d      	ldr	r2, [pc, #244]	; (16a8 <can_init+0x2cc>)
    15b4:	0412      	lsls	r2, r2, #16
    15b6:	0c12      	lsrs	r2, r2, #16
    15b8:	2180      	movs	r1, #128	; 0x80
    15ba:	0349      	lsls	r1, r1, #13
    15bc:	430a      	orrs	r2, r1
    15be:	2088      	movs	r0, #136	; 0x88
    15c0:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
    15c2:	4a3a      	ldr	r2, [pc, #232]	; (16ac <can_init+0x2d0>)
    15c4:	0412      	lsls	r2, r2, #16
    15c6:	0c12      	lsrs	r2, r2, #16
    15c8:	430a      	orrs	r2, r1
    15ca:	3018      	adds	r0, #24
    15cc:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
    15ce:	4a38      	ldr	r2, [pc, #224]	; (16b0 <can_init+0x2d4>)
    15d0:	0412      	lsls	r2, r2, #16
    15d2:	0c12      	lsrs	r2, r2, #16
    15d4:	4311      	orrs	r1, r2
    15d6:	22b0      	movs	r2, #176	; 0xb0
    15d8:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
    15da:	4a36      	ldr	r2, [pc, #216]	; (16b4 <can_init+0x2d8>)
    15dc:	0412      	lsls	r2, r2, #16
    15de:	0c12      	lsrs	r2, r2, #16
    15e0:	21ac      	movs	r1, #172	; 0xac
    15e2:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    15e4:	4a34      	ldr	r2, [pc, #208]	; (16b8 <can_init+0x2dc>)
    15e6:	0412      	lsls	r2, r2, #16
    15e8:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
    15ea:	4934      	ldr	r1, [pc, #208]	; (16bc <can_init+0x2e0>)
    15ec:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    15ee:	21c0      	movs	r1, #192	; 0xc0
    15f0:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
    15f2:	4a33      	ldr	r2, [pc, #204]	; (16c0 <can_init+0x2e4>)
    15f4:	0412      	lsls	r2, r2, #16
    15f6:	0c12      	lsrs	r2, r2, #16
    15f8:	2180      	movs	r1, #128	; 0x80
    15fa:	0309      	lsls	r1, r1, #12
    15fc:	430a      	orrs	r2, r1
    15fe:	21f0      	movs	r1, #240	; 0xf0
    1600:	505a      	str	r2, [r3, r1]
    1602:	e702      	b.n	140a <can_init+0x2e>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
    1604:	491f      	ldr	r1, [pc, #124]	; (1684 <can_init+0x2a8>)
    1606:	201b      	movs	r0, #27
    1608:	4b24      	ldr	r3, [pc, #144]	; (169c <can_init+0x2c0>)
    160a:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
    160c:	201b      	movs	r0, #27
    160e:	4b24      	ldr	r3, [pc, #144]	; (16a0 <can_init+0x2c4>)
    1610:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1612:	4b1e      	ldr	r3, [pc, #120]	; (168c <can_init+0x2b0>)
    1614:	699a      	ldr	r2, [r3, #24]
    1616:	2102      	movs	r1, #2
    1618:	430a      	orrs	r2, r1
    161a:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
    161c:	4a29      	ldr	r2, [pc, #164]	; (16c4 <can_init+0x2e8>)
    161e:	0412      	lsls	r2, r2, #16
    1620:	0c12      	lsrs	r2, r2, #16
    1622:	2180      	movs	r1, #128	; 0x80
    1624:	0389      	lsls	r1, r1, #14
    1626:	430a      	orrs	r2, r1
    1628:	2184      	movs	r1, #132	; 0x84
    162a:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
    162c:	4a26      	ldr	r2, [pc, #152]	; (16c8 <can_init+0x2ec>)
    162e:	0412      	lsls	r2, r2, #16
    1630:	0c12      	lsrs	r2, r2, #16
    1632:	2180      	movs	r1, #128	; 0x80
    1634:	0349      	lsls	r1, r1, #13
    1636:	430a      	orrs	r2, r1
    1638:	2088      	movs	r0, #136	; 0x88
    163a:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
    163c:	4a23      	ldr	r2, [pc, #140]	; (16cc <can_init+0x2f0>)
    163e:	0412      	lsls	r2, r2, #16
    1640:	0c12      	lsrs	r2, r2, #16
    1642:	430a      	orrs	r2, r1
    1644:	3018      	adds	r0, #24
    1646:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
    1648:	4a21      	ldr	r2, [pc, #132]	; (16d0 <can_init+0x2f4>)
    164a:	0412      	lsls	r2, r2, #16
    164c:	0c12      	lsrs	r2, r2, #16
    164e:	4311      	orrs	r1, r2
    1650:	22b0      	movs	r2, #176	; 0xb0
    1652:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
    1654:	4a1f      	ldr	r2, [pc, #124]	; (16d4 <can_init+0x2f8>)
    1656:	0412      	lsls	r2, r2, #16
    1658:	0c12      	lsrs	r2, r2, #16
    165a:	21ac      	movs	r1, #172	; 0xac
    165c:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    165e:	4a1e      	ldr	r2, [pc, #120]	; (16d8 <can_init+0x2fc>)
    1660:	0412      	lsls	r2, r2, #16
    1662:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
    1664:	4915      	ldr	r1, [pc, #84]	; (16bc <can_init+0x2e0>)
    1666:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    1668:	21c0      	movs	r1, #192	; 0xc0
    166a:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
    166c:	4a1b      	ldr	r2, [pc, #108]	; (16dc <can_init+0x300>)
    166e:	0412      	lsls	r2, r2, #16
    1670:	0c12      	lsrs	r2, r2, #16
    1672:	2180      	movs	r1, #128	; 0x80
    1674:	0309      	lsls	r1, r1, #12
    1676:	430a      	orrs	r2, r1
    1678:	21f0      	movs	r1, #240	; 0xf0
    167a:	505a      	str	r2, [r3, r1]
    167c:	e6c5      	b.n	140a <can_init+0x2e>
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	000013a5 	.word	0x000013a5
    1684:	200025ac 	.word	0x200025ac
    1688:	42001c00 	.word	0x42001c00
    168c:	42002000 	.word	0x42002000
    1690:	00000777 	.word	0x00000777
    1694:	06050a03 	.word	0x06050a03
    1698:	00000a33 	.word	0x00000a33
    169c:	00002805 	.word	0x00002805
    16a0:	00002795 	.word	0x00002795
    16a4:	2000110c 	.word	0x2000110c
    16a8:	2000078c 	.word	0x2000078c
    16ac:	2000080c 	.word	0x2000080c
    16b0:	20000c8c 	.word	0x20000c8c
    16b4:	2000030c 	.word	0x2000030c
    16b8:	2000118c 	.word	0x2000118c
    16bc:	04040000 	.word	0x04040000
    16c0:	200013cc 	.word	0x200013cc
    16c4:	2000220c 	.word	0x2000220c
    16c8:	2000188c 	.word	0x2000188c
    16cc:	2000190c 	.word	0x2000190c
    16d0:	20001d8c 	.word	0x20001d8c
    16d4:	2000140c 	.word	0x2000140c
    16d8:	2000228c 	.word	0x2000228c
    16dc:	200024cc 	.word	0x200024cc

000016e0 <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
    16e0:	6802      	ldr	r2, [r0, #0]
    16e2:	6993      	ldr	r3, [r2, #24]
    16e4:	2101      	movs	r1, #1
    16e6:	438b      	bics	r3, r1
    16e8:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
    16ea:	6801      	ldr	r1, [r0, #0]
    16ec:	2201      	movs	r2, #1
    16ee:	698b      	ldr	r3, [r1, #24]
    16f0:	421a      	tst	r2, r3
    16f2:	d1fc      	bne.n	16ee <can_start+0xe>
}
    16f4:	4770      	bx	lr

000016f6 <can_enable_fd_mode>:
	while (!(module_inst->hw->CCCR.reg & CAN_CCCR_INIT));
}

void can_enable_fd_mode(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg |= CAN_CCCR_INIT;
    16f6:	6802      	ldr	r2, [r0, #0]
    16f8:	6993      	ldr	r3, [r2, #24]
    16fa:	2101      	movs	r1, #1
    16fc:	430b      	orrs	r3, r1
    16fe:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->CCCR.reg & CAN_CCCR_INIT));
    1700:	6802      	ldr	r2, [r0, #0]
    1702:	6993      	ldr	r3, [r2, #24]
    1704:	4219      	tst	r1, r3
    1706:	d0fc      	beq.n	1702 <can_enable_fd_mode+0xc>
	module_inst->hw->CCCR.reg |= CAN_CCCR_CCE;
    1708:	6993      	ldr	r3, [r2, #24]
    170a:	2102      	movs	r1, #2
    170c:	430b      	orrs	r3, r1
    170e:	6193      	str	r3, [r2, #24]

	module_inst->hw->CCCR.reg |= CAN_CCCR_FDOE;
    1710:	6802      	ldr	r2, [r0, #0]
    1712:	6991      	ldr	r1, [r2, #24]
    1714:	2380      	movs	r3, #128	; 0x80
    1716:	005b      	lsls	r3, r3, #1
    1718:	430b      	orrs	r3, r1
    171a:	6193      	str	r3, [r2, #24]
	module_inst->hw->CCCR.reg |= CAN_CCCR_BRSE;
    171c:	6802      	ldr	r2, [r0, #0]
    171e:	6991      	ldr	r1, [r2, #24]
    1720:	2380      	movs	r3, #128	; 0x80
    1722:	009b      	lsls	r3, r3, #2
    1724:	430b      	orrs	r3, r1
    1726:	6193      	str	r3, [r2, #24]
}
    1728:	4770      	bx	lr
	...

0000172c <can_set_rx_standard_filter>:
}

enum status_code can_set_rx_standard_filter(
		struct can_module *const module_inst,
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
    172c:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    172e:	6803      	ldr	r3, [r0, #0]
    1730:	4809      	ldr	r0, [pc, #36]	; (1758 <can_set_rx_standard_filter+0x2c>)
    1732:	4283      	cmp	r3, r0
    1734:	d004      	beq.n	1740 <can_set_rx_standard_filter+0x14>
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1736:	4c09      	ldr	r4, [pc, #36]	; (175c <can_set_rx_standard_filter+0x30>)
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1738:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    173a:	42a3      	cmp	r3, r4
    173c:	d006      	beq.n	174c <can_set_rx_standard_filter+0x20>
}
    173e:	bd10      	pop	{r4, pc}
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    1740:	6809      	ldr	r1, [r1, #0]
    1742:	0092      	lsls	r2, r2, #2
    1744:	4b06      	ldr	r3, [pc, #24]	; (1760 <can_set_rx_standard_filter+0x34>)
    1746:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    1748:	2000      	movs	r0, #0
    174a:	e7f8      	b.n	173e <can_set_rx_standard_filter+0x12>
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    174c:	6809      	ldr	r1, [r1, #0]
    174e:	0092      	lsls	r2, r2, #2
    1750:	4b04      	ldr	r3, [pc, #16]	; (1764 <can_set_rx_standard_filter+0x38>)
    1752:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    1754:	2000      	movs	r0, #0
    1756:	e7f2      	b.n	173e <can_set_rx_standard_filter+0x12>
    1758:	42001c00 	.word	0x42001c00
    175c:	42002000 	.word	0x42002000
    1760:	2000110c 	.word	0x2000110c
    1764:	2000220c 	.word	0x2000220c

00001768 <can_get_rx_buffer_element>:
}

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
    1768:	b510      	push	{r4, lr}
    176a:	000c      	movs	r4, r1
	if (module_inst->hw == CAN0) {
    176c:	6803      	ldr	r3, [r0, #0]
    176e:	490f      	ldr	r1, [pc, #60]	; (17ac <can_get_rx_buffer_element+0x44>)
    1770:	428b      	cmp	r3, r1
    1772:	d004      	beq.n	177e <can_get_rx_buffer_element+0x16>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1774:	490e      	ldr	r1, [pc, #56]	; (17b0 <can_get_rx_buffer_element+0x48>)
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1776:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    1778:	428b      	cmp	r3, r1
    177a:	d00b      	beq.n	1794 <can_get_rx_buffer_element+0x2c>
}
    177c:	bd10      	pop	{r4, pc}
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    177e:	00d1      	lsls	r1, r2, #3
    1780:	188a      	adds	r2, r1, r2
    1782:	00d2      	lsls	r2, r2, #3
    1784:	490b      	ldr	r1, [pc, #44]	; (17b4 <can_get_rx_buffer_element+0x4c>)
    1786:	1889      	adds	r1, r1, r2
    1788:	2248      	movs	r2, #72	; 0x48
    178a:	0020      	movs	r0, r4
    178c:	4b0a      	ldr	r3, [pc, #40]	; (17b8 <can_get_rx_buffer_element+0x50>)
    178e:	4798      	blx	r3
		return STATUS_OK;
    1790:	2000      	movs	r0, #0
    1792:	e7f3      	b.n	177c <can_get_rx_buffer_element+0x14>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    1794:	00d1      	lsls	r1, r2, #3
    1796:	188a      	adds	r2, r1, r2
    1798:	00d2      	lsls	r2, r2, #3
    179a:	4908      	ldr	r1, [pc, #32]	; (17bc <can_get_rx_buffer_element+0x54>)
    179c:	1889      	adds	r1, r1, r2
    179e:	2248      	movs	r2, #72	; 0x48
    17a0:	0020      	movs	r0, r4
    17a2:	4b05      	ldr	r3, [pc, #20]	; (17b8 <can_get_rx_buffer_element+0x50>)
    17a4:	4798      	blx	r3
		return STATUS_OK;
    17a6:	2000      	movs	r0, #0
    17a8:	e7e8      	b.n	177c <can_get_rx_buffer_element+0x14>
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	42001c00 	.word	0x42001c00
    17b0:	42002000 	.word	0x42002000
    17b4:	2000030c 	.word	0x2000030c
    17b8:	00006841 	.word	0x00006841
    17bc:	2000140c 	.word	0x2000140c

000017c0 <can_set_tx_buffer_element>:
}

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
    17c0:	b530      	push	{r4, r5, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
    17c2:	6803      	ldr	r3, [r0, #0]
    17c4:	481d      	ldr	r0, [pc, #116]	; (183c <can_set_tx_buffer_element+0x7c>)
    17c6:	4283      	cmp	r3, r0
    17c8:	d004      	beq.n	17d4 <can_set_tx_buffer_element+0x14>
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    17ca:	4c1d      	ldr	r4, [pc, #116]	; (1840 <can_set_tx_buffer_element+0x80>)
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    17cc:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    17ce:	42a3      	cmp	r3, r4
    17d0:	d01a      	beq.n	1808 <can_set_tx_buffer_element+0x48>
}
    17d2:	bd30      	pop	{r4, r5, pc}
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
    17d4:	680d      	ldr	r5, [r1, #0]
    17d6:	481b      	ldr	r0, [pc, #108]	; (1844 <can_set_tx_buffer_element+0x84>)
    17d8:	00d4      	lsls	r4, r2, #3
    17da:	18a3      	adds	r3, r4, r2
    17dc:	00db      	lsls	r3, r3, #3
    17de:	501d      	str	r5, [r3, r0]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
    17e0:	684d      	ldr	r5, [r1, #4]
    17e2:	18a3      	adds	r3, r4, r2
    17e4:	00db      	lsls	r3, r3, #3
    17e6:	18c3      	adds	r3, r0, r3
    17e8:	605d      	str	r5, [r3, #4]
    17ea:	000b      	movs	r3, r1
    17ec:	3308      	adds	r3, #8
    17ee:	18a2      	adds	r2, r4, r2
    17f0:	00d2      	lsls	r2, r2, #3
    17f2:	3208      	adds	r2, #8
    17f4:	1882      	adds	r2, r0, r2
    17f6:	3148      	adds	r1, #72	; 0x48
			can0_tx_buffer[index].data[i] = tx_element->data[i];
    17f8:	7818      	ldrb	r0, [r3, #0]
    17fa:	7010      	strb	r0, [r2, #0]
    17fc:	3301      	adds	r3, #1
    17fe:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    1800:	428b      	cmp	r3, r1
    1802:	d1f9      	bne.n	17f8 <can_set_tx_buffer_element+0x38>
		return STATUS_OK;
    1804:	2000      	movs	r0, #0
    1806:	e7e4      	b.n	17d2 <can_set_tx_buffer_element+0x12>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
    1808:	680d      	ldr	r5, [r1, #0]
    180a:	480f      	ldr	r0, [pc, #60]	; (1848 <can_set_tx_buffer_element+0x88>)
    180c:	00d4      	lsls	r4, r2, #3
    180e:	18a3      	adds	r3, r4, r2
    1810:	00db      	lsls	r3, r3, #3
    1812:	501d      	str	r5, [r3, r0]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
    1814:	684d      	ldr	r5, [r1, #4]
    1816:	18a3      	adds	r3, r4, r2
    1818:	00db      	lsls	r3, r3, #3
    181a:	18c3      	adds	r3, r0, r3
    181c:	605d      	str	r5, [r3, #4]
    181e:	000b      	movs	r3, r1
    1820:	3308      	adds	r3, #8
    1822:	18a2      	adds	r2, r4, r2
    1824:	00d2      	lsls	r2, r2, #3
    1826:	3208      	adds	r2, #8
    1828:	1882      	adds	r2, r0, r2
    182a:	3148      	adds	r1, #72	; 0x48
			can1_tx_buffer[index].data[i] = tx_element->data[i];
    182c:	7818      	ldrb	r0, [r3, #0]
    182e:	7010      	strb	r0, [r2, #0]
    1830:	3301      	adds	r3, #1
    1832:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    1834:	428b      	cmp	r3, r1
    1836:	d1f9      	bne.n	182c <can_set_tx_buffer_element+0x6c>
		return STATUS_OK;
    1838:	2000      	movs	r0, #0
    183a:	e7ca      	b.n	17d2 <can_set_tx_buffer_element+0x12>
    183c:	42001c00 	.word	0x42001c00
    1840:	42002000 	.word	0x42002000
    1844:	2000118c 	.word	0x2000118c
    1848:	2000228c 	.word	0x2000228c

0000184c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    184c:	b500      	push	{lr}
    184e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1850:	ab01      	add	r3, sp, #4
    1852:	2280      	movs	r2, #128	; 0x80
    1854:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1856:	780a      	ldrb	r2, [r1, #0]
    1858:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    185a:	784a      	ldrb	r2, [r1, #1]
    185c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    185e:	788a      	ldrb	r2, [r1, #2]
    1860:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1862:	0019      	movs	r1, r3
    1864:	4b01      	ldr	r3, [pc, #4]	; (186c <port_pin_set_config+0x20>)
    1866:	4798      	blx	r3
}
    1868:	b003      	add	sp, #12
    186a:	bd00      	pop	{pc}
    186c:	00002901 	.word	0x00002901

00001870 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1870:	b5f0      	push	{r4, r5, r6, r7, lr}
    1872:	46de      	mov	lr, fp
    1874:	4657      	mov	r7, sl
    1876:	464e      	mov	r6, r9
    1878:	4645      	mov	r5, r8
    187a:	b5e0      	push	{r5, r6, r7, lr}
    187c:	b087      	sub	sp, #28
    187e:	4680      	mov	r8, r0
    1880:	9104      	str	r1, [sp, #16]
    1882:	0016      	movs	r6, r2
    1884:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1886:	2200      	movs	r2, #0
    1888:	2300      	movs	r3, #0
    188a:	2100      	movs	r1, #0
    188c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    188e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1890:	2001      	movs	r0, #1
    1892:	0021      	movs	r1, r4
    1894:	9600      	str	r6, [sp, #0]
    1896:	9701      	str	r7, [sp, #4]
    1898:	465c      	mov	r4, fp
    189a:	9403      	str	r4, [sp, #12]
    189c:	4644      	mov	r4, r8
    189e:	9405      	str	r4, [sp, #20]
    18a0:	e013      	b.n	18ca <long_division+0x5a>
    18a2:	2420      	movs	r4, #32
    18a4:	1a64      	subs	r4, r4, r1
    18a6:	0005      	movs	r5, r0
    18a8:	40e5      	lsrs	r5, r4
    18aa:	46a8      	mov	r8, r5
    18ac:	e014      	b.n	18d8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    18ae:	9c00      	ldr	r4, [sp, #0]
    18b0:	9d01      	ldr	r5, [sp, #4]
    18b2:	1b12      	subs	r2, r2, r4
    18b4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    18b6:	465c      	mov	r4, fp
    18b8:	464d      	mov	r5, r9
    18ba:	432c      	orrs	r4, r5
    18bc:	46a3      	mov	fp, r4
    18be:	9c03      	ldr	r4, [sp, #12]
    18c0:	4645      	mov	r5, r8
    18c2:	432c      	orrs	r4, r5
    18c4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    18c6:	3901      	subs	r1, #1
    18c8:	d325      	bcc.n	1916 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    18ca:	2420      	movs	r4, #32
    18cc:	4264      	negs	r4, r4
    18ce:	190c      	adds	r4, r1, r4
    18d0:	d4e7      	bmi.n	18a2 <long_division+0x32>
    18d2:	0005      	movs	r5, r0
    18d4:	40a5      	lsls	r5, r4
    18d6:	46a8      	mov	r8, r5
    18d8:	0004      	movs	r4, r0
    18da:	408c      	lsls	r4, r1
    18dc:	46a1      	mov	r9, r4
		r = r << 1;
    18de:	1892      	adds	r2, r2, r2
    18e0:	415b      	adcs	r3, r3
    18e2:	0014      	movs	r4, r2
    18e4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    18e6:	9e05      	ldr	r6, [sp, #20]
    18e8:	464f      	mov	r7, r9
    18ea:	403e      	ands	r6, r7
    18ec:	46b4      	mov	ip, r6
    18ee:	9e04      	ldr	r6, [sp, #16]
    18f0:	4647      	mov	r7, r8
    18f2:	403e      	ands	r6, r7
    18f4:	46b2      	mov	sl, r6
    18f6:	4666      	mov	r6, ip
    18f8:	4657      	mov	r7, sl
    18fa:	433e      	orrs	r6, r7
    18fc:	d003      	beq.n	1906 <long_division+0x96>
			r |= 0x01;
    18fe:	0006      	movs	r6, r0
    1900:	4326      	orrs	r6, r4
    1902:	0032      	movs	r2, r6
    1904:	002b      	movs	r3, r5
		if (r >= d) {
    1906:	9c00      	ldr	r4, [sp, #0]
    1908:	9d01      	ldr	r5, [sp, #4]
    190a:	429d      	cmp	r5, r3
    190c:	d8db      	bhi.n	18c6 <long_division+0x56>
    190e:	d1ce      	bne.n	18ae <long_division+0x3e>
    1910:	4294      	cmp	r4, r2
    1912:	d8d8      	bhi.n	18c6 <long_division+0x56>
    1914:	e7cb      	b.n	18ae <long_division+0x3e>
    1916:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1918:	4658      	mov	r0, fp
    191a:	0019      	movs	r1, r3
    191c:	b007      	add	sp, #28
    191e:	bc3c      	pop	{r2, r3, r4, r5}
    1920:	4690      	mov	r8, r2
    1922:	4699      	mov	r9, r3
    1924:	46a2      	mov	sl, r4
    1926:	46ab      	mov	fp, r5
    1928:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000192a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    192a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    192c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    192e:	2340      	movs	r3, #64	; 0x40
    1930:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1932:	4281      	cmp	r1, r0
    1934:	d202      	bcs.n	193c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1936:	0018      	movs	r0, r3
    1938:	bd10      	pop	{r4, pc}
		baud_calculated++;
    193a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    193c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    193e:	1c63      	adds	r3, r4, #1
    1940:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1942:	4288      	cmp	r0, r1
    1944:	d9f9      	bls.n	193a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1946:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1948:	2cff      	cmp	r4, #255	; 0xff
    194a:	d8f4      	bhi.n	1936 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    194c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    194e:	2300      	movs	r3, #0
    1950:	e7f1      	b.n	1936 <_sercom_get_sync_baud_val+0xc>
	...

00001954 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1954:	b5f0      	push	{r4, r5, r6, r7, lr}
    1956:	b083      	sub	sp, #12
    1958:	000f      	movs	r7, r1
    195a:	0016      	movs	r6, r2
    195c:	aa08      	add	r2, sp, #32
    195e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1960:	0004      	movs	r4, r0
    1962:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1964:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1966:	42bc      	cmp	r4, r7
    1968:	d902      	bls.n	1970 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    196a:	0010      	movs	r0, r2
    196c:	b003      	add	sp, #12
    196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1970:	2b00      	cmp	r3, #0
    1972:	d114      	bne.n	199e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1974:	0002      	movs	r2, r0
    1976:	0008      	movs	r0, r1
    1978:	2100      	movs	r1, #0
    197a:	4c19      	ldr	r4, [pc, #100]	; (19e0 <_sercom_get_async_baud_val+0x8c>)
    197c:	47a0      	blx	r4
    197e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1980:	003a      	movs	r2, r7
    1982:	2300      	movs	r3, #0
    1984:	2000      	movs	r0, #0
    1986:	4c17      	ldr	r4, [pc, #92]	; (19e4 <_sercom_get_async_baud_val+0x90>)
    1988:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    198a:	2200      	movs	r2, #0
    198c:	2301      	movs	r3, #1
    198e:	1a12      	subs	r2, r2, r0
    1990:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1992:	0c12      	lsrs	r2, r2, #16
    1994:	041b      	lsls	r3, r3, #16
    1996:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1998:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    199a:	2200      	movs	r2, #0
    199c:	e7e5      	b.n	196a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    199e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    19a0:	2b01      	cmp	r3, #1
    19a2:	d1f9      	bne.n	1998 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    19a4:	000a      	movs	r2, r1
    19a6:	2300      	movs	r3, #0
    19a8:	2100      	movs	r1, #0
    19aa:	4c0d      	ldr	r4, [pc, #52]	; (19e0 <_sercom_get_async_baud_val+0x8c>)
    19ac:	47a0      	blx	r4
    19ae:	0002      	movs	r2, r0
    19b0:	000b      	movs	r3, r1
    19b2:	9200      	str	r2, [sp, #0]
    19b4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    19b6:	0038      	movs	r0, r7
    19b8:	2100      	movs	r1, #0
    19ba:	4c0a      	ldr	r4, [pc, #40]	; (19e4 <_sercom_get_async_baud_val+0x90>)
    19bc:	47a0      	blx	r4
    19be:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    19c0:	2380      	movs	r3, #128	; 0x80
    19c2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19c4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    19c6:	4298      	cmp	r0, r3
    19c8:	d8cf      	bhi.n	196a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    19ca:	0f79      	lsrs	r1, r7, #29
    19cc:	00f8      	lsls	r0, r7, #3
    19ce:	9a00      	ldr	r2, [sp, #0]
    19d0:	9b01      	ldr	r3, [sp, #4]
    19d2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    19d4:	00ea      	lsls	r2, r5, #3
    19d6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    19d8:	b2d2      	uxtb	r2, r2
    19da:	0352      	lsls	r2, r2, #13
    19dc:	432a      	orrs	r2, r5
    19de:	e7db      	b.n	1998 <_sercom_get_async_baud_val+0x44>
    19e0:	00006791 	.word	0x00006791
    19e4:	00001871 	.word	0x00001871

000019e8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    19e8:	b510      	push	{r4, lr}
    19ea:	b082      	sub	sp, #8
    19ec:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    19ee:	4b0e      	ldr	r3, [pc, #56]	; (1a28 <sercom_set_gclk_generator+0x40>)
    19f0:	781b      	ldrb	r3, [r3, #0]
    19f2:	2b00      	cmp	r3, #0
    19f4:	d007      	beq.n	1a06 <sercom_set_gclk_generator+0x1e>
    19f6:	2900      	cmp	r1, #0
    19f8:	d105      	bne.n	1a06 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    19fa:	4b0b      	ldr	r3, [pc, #44]	; (1a28 <sercom_set_gclk_generator+0x40>)
    19fc:	785b      	ldrb	r3, [r3, #1]
    19fe:	4283      	cmp	r3, r0
    1a00:	d010      	beq.n	1a24 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1a02:	201d      	movs	r0, #29
    1a04:	e00c      	b.n	1a20 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1a06:	a901      	add	r1, sp, #4
    1a08:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1a0a:	2012      	movs	r0, #18
    1a0c:	4b07      	ldr	r3, [pc, #28]	; (1a2c <sercom_set_gclk_generator+0x44>)
    1a0e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1a10:	2012      	movs	r0, #18
    1a12:	4b07      	ldr	r3, [pc, #28]	; (1a30 <sercom_set_gclk_generator+0x48>)
    1a14:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1a16:	4b04      	ldr	r3, [pc, #16]	; (1a28 <sercom_set_gclk_generator+0x40>)
    1a18:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1a1a:	2201      	movs	r2, #1
    1a1c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1a1e:	2000      	movs	r0, #0
}
    1a20:	b002      	add	sp, #8
    1a22:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1a24:	2000      	movs	r0, #0
    1a26:	e7fb      	b.n	1a20 <sercom_set_gclk_generator+0x38>
    1a28:	2000250c 	.word	0x2000250c
    1a2c:	00002805 	.word	0x00002805
    1a30:	00002795 	.word	0x00002795

00001a34 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1a34:	4b40      	ldr	r3, [pc, #256]	; (1b38 <_sercom_get_default_pad+0x104>)
    1a36:	4298      	cmp	r0, r3
    1a38:	d031      	beq.n	1a9e <_sercom_get_default_pad+0x6a>
    1a3a:	d90a      	bls.n	1a52 <_sercom_get_default_pad+0x1e>
    1a3c:	4b3f      	ldr	r3, [pc, #252]	; (1b3c <_sercom_get_default_pad+0x108>)
    1a3e:	4298      	cmp	r0, r3
    1a40:	d04d      	beq.n	1ade <_sercom_get_default_pad+0xaa>
    1a42:	4b3f      	ldr	r3, [pc, #252]	; (1b40 <_sercom_get_default_pad+0x10c>)
    1a44:	4298      	cmp	r0, r3
    1a46:	d05a      	beq.n	1afe <_sercom_get_default_pad+0xca>
    1a48:	4b3e      	ldr	r3, [pc, #248]	; (1b44 <_sercom_get_default_pad+0x110>)
    1a4a:	4298      	cmp	r0, r3
    1a4c:	d037      	beq.n	1abe <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1a4e:	2000      	movs	r0, #0
}
    1a50:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1a52:	4b3d      	ldr	r3, [pc, #244]	; (1b48 <_sercom_get_default_pad+0x114>)
    1a54:	4298      	cmp	r0, r3
    1a56:	d00c      	beq.n	1a72 <_sercom_get_default_pad+0x3e>
    1a58:	4b3c      	ldr	r3, [pc, #240]	; (1b4c <_sercom_get_default_pad+0x118>)
    1a5a:	4298      	cmp	r0, r3
    1a5c:	d1f7      	bne.n	1a4e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a5e:	2901      	cmp	r1, #1
    1a60:	d017      	beq.n	1a92 <_sercom_get_default_pad+0x5e>
    1a62:	2900      	cmp	r1, #0
    1a64:	d05d      	beq.n	1b22 <_sercom_get_default_pad+0xee>
    1a66:	2902      	cmp	r1, #2
    1a68:	d015      	beq.n	1a96 <_sercom_get_default_pad+0x62>
    1a6a:	2903      	cmp	r1, #3
    1a6c:	d015      	beq.n	1a9a <_sercom_get_default_pad+0x66>
	return 0;
    1a6e:	2000      	movs	r0, #0
    1a70:	e7ee      	b.n	1a50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a72:	2901      	cmp	r1, #1
    1a74:	d007      	beq.n	1a86 <_sercom_get_default_pad+0x52>
    1a76:	2900      	cmp	r1, #0
    1a78:	d051      	beq.n	1b1e <_sercom_get_default_pad+0xea>
    1a7a:	2902      	cmp	r1, #2
    1a7c:	d005      	beq.n	1a8a <_sercom_get_default_pad+0x56>
    1a7e:	2903      	cmp	r1, #3
    1a80:	d005      	beq.n	1a8e <_sercom_get_default_pad+0x5a>
	return 0;
    1a82:	2000      	movs	r0, #0
    1a84:	e7e4      	b.n	1a50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a86:	4832      	ldr	r0, [pc, #200]	; (1b50 <_sercom_get_default_pad+0x11c>)
    1a88:	e7e2      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1a8a:	4832      	ldr	r0, [pc, #200]	; (1b54 <_sercom_get_default_pad+0x120>)
    1a8c:	e7e0      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1a8e:	4832      	ldr	r0, [pc, #200]	; (1b58 <_sercom_get_default_pad+0x124>)
    1a90:	e7de      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1a92:	4832      	ldr	r0, [pc, #200]	; (1b5c <_sercom_get_default_pad+0x128>)
    1a94:	e7dc      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1a96:	4832      	ldr	r0, [pc, #200]	; (1b60 <_sercom_get_default_pad+0x12c>)
    1a98:	e7da      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1a9a:	4832      	ldr	r0, [pc, #200]	; (1b64 <_sercom_get_default_pad+0x130>)
    1a9c:	e7d8      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1a9e:	2901      	cmp	r1, #1
    1aa0:	d007      	beq.n	1ab2 <_sercom_get_default_pad+0x7e>
    1aa2:	2900      	cmp	r1, #0
    1aa4:	d03f      	beq.n	1b26 <_sercom_get_default_pad+0xf2>
    1aa6:	2902      	cmp	r1, #2
    1aa8:	d005      	beq.n	1ab6 <_sercom_get_default_pad+0x82>
    1aaa:	2903      	cmp	r1, #3
    1aac:	d005      	beq.n	1aba <_sercom_get_default_pad+0x86>
	return 0;
    1aae:	2000      	movs	r0, #0
    1ab0:	e7ce      	b.n	1a50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ab2:	482d      	ldr	r0, [pc, #180]	; (1b68 <_sercom_get_default_pad+0x134>)
    1ab4:	e7cc      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1ab6:	482d      	ldr	r0, [pc, #180]	; (1b6c <_sercom_get_default_pad+0x138>)
    1ab8:	e7ca      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1aba:	482d      	ldr	r0, [pc, #180]	; (1b70 <_sercom_get_default_pad+0x13c>)
    1abc:	e7c8      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1abe:	2901      	cmp	r1, #1
    1ac0:	d007      	beq.n	1ad2 <_sercom_get_default_pad+0x9e>
    1ac2:	2900      	cmp	r1, #0
    1ac4:	d031      	beq.n	1b2a <_sercom_get_default_pad+0xf6>
    1ac6:	2902      	cmp	r1, #2
    1ac8:	d005      	beq.n	1ad6 <_sercom_get_default_pad+0xa2>
    1aca:	2903      	cmp	r1, #3
    1acc:	d005      	beq.n	1ada <_sercom_get_default_pad+0xa6>
	return 0;
    1ace:	2000      	movs	r0, #0
    1ad0:	e7be      	b.n	1a50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ad2:	4828      	ldr	r0, [pc, #160]	; (1b74 <_sercom_get_default_pad+0x140>)
    1ad4:	e7bc      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1ad6:	4828      	ldr	r0, [pc, #160]	; (1b78 <_sercom_get_default_pad+0x144>)
    1ad8:	e7ba      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1ada:	4828      	ldr	r0, [pc, #160]	; (1b7c <_sercom_get_default_pad+0x148>)
    1adc:	e7b8      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1ade:	2901      	cmp	r1, #1
    1ae0:	d007      	beq.n	1af2 <_sercom_get_default_pad+0xbe>
    1ae2:	2900      	cmp	r1, #0
    1ae4:	d023      	beq.n	1b2e <_sercom_get_default_pad+0xfa>
    1ae6:	2902      	cmp	r1, #2
    1ae8:	d005      	beq.n	1af6 <_sercom_get_default_pad+0xc2>
    1aea:	2903      	cmp	r1, #3
    1aec:	d005      	beq.n	1afa <_sercom_get_default_pad+0xc6>
	return 0;
    1aee:	2000      	movs	r0, #0
    1af0:	e7ae      	b.n	1a50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1af2:	4823      	ldr	r0, [pc, #140]	; (1b80 <_sercom_get_default_pad+0x14c>)
    1af4:	e7ac      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1af6:	4823      	ldr	r0, [pc, #140]	; (1b84 <_sercom_get_default_pad+0x150>)
    1af8:	e7aa      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1afa:	4823      	ldr	r0, [pc, #140]	; (1b88 <_sercom_get_default_pad+0x154>)
    1afc:	e7a8      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1afe:	2901      	cmp	r1, #1
    1b00:	d007      	beq.n	1b12 <_sercom_get_default_pad+0xde>
    1b02:	2900      	cmp	r1, #0
    1b04:	d015      	beq.n	1b32 <_sercom_get_default_pad+0xfe>
    1b06:	2902      	cmp	r1, #2
    1b08:	d005      	beq.n	1b16 <_sercom_get_default_pad+0xe2>
    1b0a:	2903      	cmp	r1, #3
    1b0c:	d005      	beq.n	1b1a <_sercom_get_default_pad+0xe6>
	return 0;
    1b0e:	2000      	movs	r0, #0
    1b10:	e79e      	b.n	1a50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b12:	481e      	ldr	r0, [pc, #120]	; (1b8c <_sercom_get_default_pad+0x158>)
    1b14:	e79c      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1b16:	481e      	ldr	r0, [pc, #120]	; (1b90 <_sercom_get_default_pad+0x15c>)
    1b18:	e79a      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1b1a:	481e      	ldr	r0, [pc, #120]	; (1b94 <_sercom_get_default_pad+0x160>)
    1b1c:	e798      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1b1e:	481e      	ldr	r0, [pc, #120]	; (1b98 <_sercom_get_default_pad+0x164>)
    1b20:	e796      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1b22:	481e      	ldr	r0, [pc, #120]	; (1b9c <_sercom_get_default_pad+0x168>)
    1b24:	e794      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1b26:	481e      	ldr	r0, [pc, #120]	; (1ba0 <_sercom_get_default_pad+0x16c>)
    1b28:	e792      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1b2a:	481e      	ldr	r0, [pc, #120]	; (1ba4 <_sercom_get_default_pad+0x170>)
    1b2c:	e790      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1b2e:	481e      	ldr	r0, [pc, #120]	; (1ba8 <_sercom_get_default_pad+0x174>)
    1b30:	e78e      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1b32:	481e      	ldr	r0, [pc, #120]	; (1bac <_sercom_get_default_pad+0x178>)
    1b34:	e78c      	b.n	1a50 <_sercom_get_default_pad+0x1c>
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	42000c00 	.word	0x42000c00
    1b3c:	42001400 	.word	0x42001400
    1b40:	42001800 	.word	0x42001800
    1b44:	42001000 	.word	0x42001000
    1b48:	42000400 	.word	0x42000400
    1b4c:	42000800 	.word	0x42000800
    1b50:	00050003 	.word	0x00050003
    1b54:	00060003 	.word	0x00060003
    1b58:	00070003 	.word	0x00070003
    1b5c:	00110002 	.word	0x00110002
    1b60:	00120002 	.word	0x00120002
    1b64:	00130002 	.word	0x00130002
    1b68:	000d0002 	.word	0x000d0002
    1b6c:	000e0002 	.word	0x000e0002
    1b70:	000f0002 	.word	0x000f0002
    1b74:	00170002 	.word	0x00170002
    1b78:	00180002 	.word	0x00180002
    1b7c:	00190002 	.word	0x00190002
    1b80:	00290003 	.word	0x00290003
    1b84:	002a0003 	.word	0x002a0003
    1b88:	002b0003 	.word	0x002b0003
    1b8c:	00230003 	.word	0x00230003
    1b90:	00200003 	.word	0x00200003
    1b94:	00210003 	.word	0x00210003
    1b98:	00040003 	.word	0x00040003
    1b9c:	00100002 	.word	0x00100002
    1ba0:	000c0002 	.word	0x000c0002
    1ba4:	00160002 	.word	0x00160002
    1ba8:	00280003 	.word	0x00280003
    1bac:	00220003 	.word	0x00220003

00001bb0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1bb0:	b530      	push	{r4, r5, lr}
    1bb2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1bb4:	4b0b      	ldr	r3, [pc, #44]	; (1be4 <_sercom_get_sercom_inst_index+0x34>)
    1bb6:	466a      	mov	r2, sp
    1bb8:	cb32      	ldmia	r3!, {r1, r4, r5}
    1bba:	c232      	stmia	r2!, {r1, r4, r5}
    1bbc:	cb32      	ldmia	r3!, {r1, r4, r5}
    1bbe:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1bc0:	9b00      	ldr	r3, [sp, #0]
    1bc2:	4283      	cmp	r3, r0
    1bc4:	d00b      	beq.n	1bde <_sercom_get_sercom_inst_index+0x2e>
    1bc6:	2301      	movs	r3, #1
    1bc8:	009a      	lsls	r2, r3, #2
    1bca:	4669      	mov	r1, sp
    1bcc:	5852      	ldr	r2, [r2, r1]
    1bce:	4282      	cmp	r2, r0
    1bd0:	d006      	beq.n	1be0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1bd2:	3301      	adds	r3, #1
    1bd4:	2b06      	cmp	r3, #6
    1bd6:	d1f7      	bne.n	1bc8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1bd8:	2000      	movs	r0, #0
}
    1bda:	b007      	add	sp, #28
    1bdc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1bde:	2300      	movs	r3, #0
			return i;
    1be0:	b2d8      	uxtb	r0, r3
    1be2:	e7fa      	b.n	1bda <_sercom_get_sercom_inst_index+0x2a>
    1be4:	000085f8 	.word	0x000085f8

00001be8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1be8:	4770      	bx	lr
	...

00001bec <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1bec:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1bee:	4b0a      	ldr	r3, [pc, #40]	; (1c18 <_sercom_set_handler+0x2c>)
    1bf0:	781b      	ldrb	r3, [r3, #0]
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d10c      	bne.n	1c10 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1bf6:	4f09      	ldr	r7, [pc, #36]	; (1c1c <_sercom_set_handler+0x30>)
    1bf8:	4e09      	ldr	r6, [pc, #36]	; (1c20 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1bfa:	4d0a      	ldr	r5, [pc, #40]	; (1c24 <_sercom_set_handler+0x38>)
    1bfc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1bfe:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1c00:	195a      	adds	r2, r3, r5
    1c02:	6014      	str	r4, [r2, #0]
    1c04:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c06:	2b18      	cmp	r3, #24
    1c08:	d1f9      	bne.n	1bfe <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1c0a:	2201      	movs	r2, #1
    1c0c:	4b02      	ldr	r3, [pc, #8]	; (1c18 <_sercom_set_handler+0x2c>)
    1c0e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1c10:	0080      	lsls	r0, r0, #2
    1c12:	4b02      	ldr	r3, [pc, #8]	; (1c1c <_sercom_set_handler+0x30>)
    1c14:	50c1      	str	r1, [r0, r3]
}
    1c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c18:	2000250e 	.word	0x2000250e
    1c1c:	20002510 	.word	0x20002510
    1c20:	00001be9 	.word	0x00001be9
    1c24:	200025b0 	.word	0x200025b0

00001c28 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1c28:	b500      	push	{lr}
    1c2a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1c2c:	2309      	movs	r3, #9
    1c2e:	466a      	mov	r2, sp
    1c30:	7013      	strb	r3, [r2, #0]
    1c32:	3301      	adds	r3, #1
    1c34:	7053      	strb	r3, [r2, #1]
    1c36:	3301      	adds	r3, #1
    1c38:	7093      	strb	r3, [r2, #2]
    1c3a:	3301      	adds	r3, #1
    1c3c:	70d3      	strb	r3, [r2, #3]
    1c3e:	3301      	adds	r3, #1
    1c40:	7113      	strb	r3, [r2, #4]
    1c42:	3301      	adds	r3, #1
    1c44:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1c46:	4b03      	ldr	r3, [pc, #12]	; (1c54 <_sercom_get_interrupt_vector+0x2c>)
    1c48:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1c4a:	466b      	mov	r3, sp
    1c4c:	5618      	ldrsb	r0, [r3, r0]
}
    1c4e:	b003      	add	sp, #12
    1c50:	bd00      	pop	{pc}
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	00001bb1 	.word	0x00001bb1

00001c58 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1c58:	b510      	push	{r4, lr}
    1c5a:	4b02      	ldr	r3, [pc, #8]	; (1c64 <SERCOM0_Handler+0xc>)
    1c5c:	681b      	ldr	r3, [r3, #0]
    1c5e:	2000      	movs	r0, #0
    1c60:	4798      	blx	r3
    1c62:	bd10      	pop	{r4, pc}
    1c64:	20002510 	.word	0x20002510

00001c68 <SERCOM1_Handler>:
    1c68:	b510      	push	{r4, lr}
    1c6a:	4b02      	ldr	r3, [pc, #8]	; (1c74 <SERCOM1_Handler+0xc>)
    1c6c:	685b      	ldr	r3, [r3, #4]
    1c6e:	2001      	movs	r0, #1
    1c70:	4798      	blx	r3
    1c72:	bd10      	pop	{r4, pc}
    1c74:	20002510 	.word	0x20002510

00001c78 <SERCOM2_Handler>:
    1c78:	b510      	push	{r4, lr}
    1c7a:	4b02      	ldr	r3, [pc, #8]	; (1c84 <SERCOM2_Handler+0xc>)
    1c7c:	689b      	ldr	r3, [r3, #8]
    1c7e:	2002      	movs	r0, #2
    1c80:	4798      	blx	r3
    1c82:	bd10      	pop	{r4, pc}
    1c84:	20002510 	.word	0x20002510

00001c88 <SERCOM3_Handler>:
    1c88:	b510      	push	{r4, lr}
    1c8a:	4b02      	ldr	r3, [pc, #8]	; (1c94 <SERCOM3_Handler+0xc>)
    1c8c:	68db      	ldr	r3, [r3, #12]
    1c8e:	2003      	movs	r0, #3
    1c90:	4798      	blx	r3
    1c92:	bd10      	pop	{r4, pc}
    1c94:	20002510 	.word	0x20002510

00001c98 <SERCOM4_Handler>:
    1c98:	b510      	push	{r4, lr}
    1c9a:	4b02      	ldr	r3, [pc, #8]	; (1ca4 <SERCOM4_Handler+0xc>)
    1c9c:	691b      	ldr	r3, [r3, #16]
    1c9e:	2004      	movs	r0, #4
    1ca0:	4798      	blx	r3
    1ca2:	bd10      	pop	{r4, pc}
    1ca4:	20002510 	.word	0x20002510

00001ca8 <SERCOM5_Handler>:
    1ca8:	b510      	push	{r4, lr}
    1caa:	4b02      	ldr	r3, [pc, #8]	; (1cb4 <SERCOM5_Handler+0xc>)
    1cac:	695b      	ldr	r3, [r3, #20]
    1cae:	2005      	movs	r0, #5
    1cb0:	4798      	blx	r3
    1cb2:	bd10      	pop	{r4, pc}
    1cb4:	20002510 	.word	0x20002510

00001cb8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cba:	46de      	mov	lr, fp
    1cbc:	4657      	mov	r7, sl
    1cbe:	464e      	mov	r6, r9
    1cc0:	4645      	mov	r5, r8
    1cc2:	b5e0      	push	{r5, r6, r7, lr}
    1cc4:	b091      	sub	sp, #68	; 0x44
    1cc6:	0005      	movs	r5, r0
    1cc8:	000c      	movs	r4, r1
    1cca:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1ccc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1cce:	0008      	movs	r0, r1
    1cd0:	4bd2      	ldr	r3, [pc, #840]	; (201c <STACK_SIZE+0x1c>)
    1cd2:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
    1cd4:	2805      	cmp	r0, #5
    1cd6:	d00d      	beq.n	1cf4 <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    1cd8:	0007      	movs	r7, r0
    1cda:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1cdc:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1cde:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1ce0:	07d2      	lsls	r2, r2, #31
    1ce2:	d509      	bpl.n	1cf8 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1ce4:	0018      	movs	r0, r3
    1ce6:	b011      	add	sp, #68	; 0x44
    1ce8:	bc3c      	pop	{r2, r3, r4, r5}
    1cea:	4690      	mov	r8, r2
    1cec:	4699      	mov	r9, r3
    1cee:	46a2      	mov	sl, r4
    1cf0:	46ab      	mov	fp, r5
    1cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    1cf4:	2719      	movs	r7, #25
    1cf6:	e7f1      	b.n	1cdc <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1cf8:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    1cfa:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1cfc:	0792      	lsls	r2, r2, #30
    1cfe:	d4f1      	bmi.n	1ce4 <usart_init+0x2c>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    1d00:	4ac7      	ldr	r2, [pc, #796]	; (2020 <STACK_SIZE+0x20>)
    1d02:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1d04:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1d06:	3b1b      	subs	r3, #27
    1d08:	4083      	lsls	r3, r0
    1d0a:	430b      	orrs	r3, r1
    1d0c:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    1d0e:	a90f      	add	r1, sp, #60	; 0x3c
    1d10:	2335      	movs	r3, #53	; 0x35
    1d12:	4698      	mov	r8, r3
    1d14:	5cf3      	ldrb	r3, [r6, r3]
    1d16:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1d18:	b2ff      	uxtb	r7, r7
    1d1a:	0038      	movs	r0, r7
    1d1c:	4bc1      	ldr	r3, [pc, #772]	; (2024 <STACK_SIZE+0x24>)
    1d1e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1d20:	0038      	movs	r0, r7
    1d22:	4bc1      	ldr	r3, [pc, #772]	; (2028 <STACK_SIZE+0x28>)
    1d24:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1d26:	4643      	mov	r3, r8
    1d28:	5cf0      	ldrb	r0, [r6, r3]
    1d2a:	2100      	movs	r1, #0
    1d2c:	4bbf      	ldr	r3, [pc, #764]	; (202c <STACK_SIZE+0x2c>)
    1d2e:	4798      	blx	r3
	module->character_size = config->character_size;
    1d30:	7af3      	ldrb	r3, [r6, #11]
    1d32:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1d34:	232c      	movs	r3, #44	; 0x2c
    1d36:	5cf3      	ldrb	r3, [r6, r3]
    1d38:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1d3a:	232d      	movs	r3, #45	; 0x2d
    1d3c:	5cf3      	ldrb	r3, [r6, r3]
    1d3e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1d40:	7ef3      	ldrb	r3, [r6, #27]
    1d42:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1d44:	2324      	movs	r3, #36	; 0x24
    1d46:	5cf3      	ldrb	r3, [r6, r3]
    1d48:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d4a:	682b      	ldr	r3, [r5, #0]
    1d4c:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1d4e:	0018      	movs	r0, r3
    1d50:	4bb2      	ldr	r3, [pc, #712]	; (201c <STACK_SIZE+0x1c>)
    1d52:	4798      	blx	r3
	if (sercom_index == 5) {
    1d54:	2805      	cmp	r0, #5
    1d56:	d01d      	beq.n	1d94 <usart_init+0xdc>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1d58:	3013      	adds	r0, #19
	uint16_t baud  = 0;
    1d5a:	2200      	movs	r2, #0
    1d5c:	230e      	movs	r3, #14
    1d5e:	a906      	add	r1, sp, #24
    1d60:	468c      	mov	ip, r1
    1d62:	4463      	add	r3, ip
    1d64:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1d66:	8a33      	ldrh	r3, [r6, #16]
    1d68:	4698      	mov	r8, r3
    1d6a:	2380      	movs	r3, #128	; 0x80
    1d6c:	01db      	lsls	r3, r3, #7
    1d6e:	4598      	cmp	r8, r3
    1d70:	d100      	bne.n	1d74 <usart_init+0xbc>
    1d72:	e0c3      	b.n	1efc <usart_init+0x244>
    1d74:	d910      	bls.n	1d98 <usart_init+0xe0>
    1d76:	23c0      	movs	r3, #192	; 0xc0
    1d78:	01db      	lsls	r3, r3, #7
    1d7a:	4598      	cmp	r8, r3
    1d7c:	d100      	bne.n	1d80 <usart_init+0xc8>
    1d7e:	e0b8      	b.n	1ef2 <usart_init+0x23a>
    1d80:	2380      	movs	r3, #128	; 0x80
    1d82:	021b      	lsls	r3, r3, #8
    1d84:	4598      	cmp	r8, r3
    1d86:	d000      	beq.n	1d8a <usart_init+0xd2>
    1d88:	e166      	b.n	2058 <STACK_SIZE+0x58>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1d8a:	2303      	movs	r3, #3
    1d8c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d8e:	2300      	movs	r3, #0
    1d90:	9307      	str	r3, [sp, #28]
    1d92:	e00a      	b.n	1daa <usart_init+0xf2>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1d94:	2019      	movs	r0, #25
    1d96:	e7e0      	b.n	1d5a <usart_init+0xa2>
	switch (config->sample_rate) {
    1d98:	2380      	movs	r3, #128	; 0x80
    1d9a:	019b      	lsls	r3, r3, #6
    1d9c:	4598      	cmp	r8, r3
    1d9e:	d000      	beq.n	1da2 <usart_init+0xea>
    1da0:	e15a      	b.n	2058 <STACK_SIZE+0x58>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1da2:	2310      	movs	r3, #16
    1da4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1da6:	3b0f      	subs	r3, #15
    1da8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1daa:	6833      	ldr	r3, [r6, #0]
    1dac:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1dae:	68f3      	ldr	r3, [r6, #12]
    1db0:	469b      	mov	fp, r3
		config->sample_adjustment |
    1db2:	6973      	ldr	r3, [r6, #20]
    1db4:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1db6:	7e33      	ldrb	r3, [r6, #24]
    1db8:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1dba:	232e      	movs	r3, #46	; 0x2e
    1dbc:	5cf3      	ldrb	r3, [r6, r3]
    1dbe:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1dc0:	6873      	ldr	r3, [r6, #4]
    1dc2:	4699      	mov	r9, r3
	switch (transfer_mode)
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d100      	bne.n	1dca <usart_init+0x112>
    1dc8:	e0c5      	b.n	1f56 <usart_init+0x29e>
    1dca:	2380      	movs	r3, #128	; 0x80
    1dcc:	055b      	lsls	r3, r3, #21
    1dce:	4599      	cmp	r9, r3
    1dd0:	d100      	bne.n	1dd4 <usart_init+0x11c>
    1dd2:	e0a8      	b.n	1f26 <usart_init+0x26e>
	if(config->encoding_format_enable) {
    1dd4:	7e73      	ldrb	r3, [r6, #25]
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	d002      	beq.n	1de0 <usart_init+0x128>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1dda:	7eb3      	ldrb	r3, [r6, #26]
    1ddc:	9a02      	ldr	r2, [sp, #8]
    1dde:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1de0:	230e      	movs	r3, #14
    1de2:	aa06      	add	r2, sp, #24
    1de4:	4694      	mov	ip, r2
    1de6:	4463      	add	r3, ip
    1de8:	881b      	ldrh	r3, [r3, #0]
    1dea:	9a02      	ldr	r2, [sp, #8]
    1dec:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1dee:	9a05      	ldr	r2, [sp, #20]
    1df0:	465b      	mov	r3, fp
    1df2:	431a      	orrs	r2, r3
    1df4:	9b03      	ldr	r3, [sp, #12]
    1df6:	431a      	orrs	r2, r3
    1df8:	464b      	mov	r3, r9
    1dfa:	431a      	orrs	r2, r3
    1dfc:	4643      	mov	r3, r8
    1dfe:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1e00:	9b04      	ldr	r3, [sp, #16]
    1e02:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1e04:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1e06:	4653      	mov	r3, sl
    1e08:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1e0a:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
    1e0c:	232f      	movs	r3, #47	; 0x2f
    1e0e:	5cf3      	ldrb	r3, [r6, r3]
    1e10:	2b00      	cmp	r3, #0
    1e12:	d101      	bne.n	1e18 <usart_init+0x160>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1e14:	3304      	adds	r3, #4
    1e16:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e18:	7e73      	ldrb	r3, [r6, #25]
    1e1a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e1c:	2124      	movs	r1, #36	; 0x24
    1e1e:	5c71      	ldrb	r1, [r6, r1]
    1e20:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e22:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e24:	2126      	movs	r1, #38	; 0x26
    1e26:	5c71      	ldrb	r1, [r6, r1]
    1e28:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e2a:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e2c:	212c      	movs	r1, #44	; 0x2c
    1e2e:	5c71      	ldrb	r1, [r6, r1]
    1e30:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e32:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1e34:	212d      	movs	r1, #45	; 0x2d
    1e36:	5c71      	ldrb	r1, [r6, r1]
    1e38:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e3a:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    1e3c:	7ab0      	ldrb	r0, [r6, #10]
    1e3e:	7af1      	ldrb	r1, [r6, #11]
    1e40:	4308      	orrs	r0, r1
    1e42:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
    1e44:	8933      	ldrh	r3, [r6, #8]
    1e46:	2bff      	cmp	r3, #255	; 0xff
    1e48:	d100      	bne.n	1e4c <usart_init+0x194>
    1e4a:	e0aa      	b.n	1fa2 <usart_init+0x2ea>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1e4c:	2180      	movs	r1, #128	; 0x80
    1e4e:	0449      	lsls	r1, r1, #17
    1e50:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
    1e52:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1e54:	9902      	ldr	r1, [sp, #8]
    1e56:	688b      	ldr	r3, [r1, #8]
    1e58:	469c      	mov	ip, r3
						| config->lin_break_length;
    1e5a:	8c33      	ldrh	r3, [r6, #32]
    1e5c:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    1e5e:	430b      	orrs	r3, r1
    1e60:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1e62:	2107      	movs	r1, #7
    1e64:	4663      	mov	r3, ip
    1e66:	4019      	ands	r1, r3
						| config->lin_break_length;
    1e68:	003b      	movs	r3, r7
    1e6a:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1e6c:	9902      	ldr	r1, [sp, #8]
    1e6e:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
    1e70:	69f3      	ldr	r3, [r6, #28]
    1e72:	2b00      	cmp	r3, #0
    1e74:	d002      	beq.n	1e7c <usart_init+0x1c4>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    1e76:	496e      	ldr	r1, [pc, #440]	; (2030 <STACK_SIZE+0x30>)
    1e78:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
    1e7a:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1e7c:	2334      	movs	r3, #52	; 0x34
    1e7e:	5cf3      	ldrb	r3, [r6, r3]
    1e80:	2b00      	cmp	r3, #0
    1e82:	d103      	bne.n	1e8c <usart_init+0x1d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1e84:	4b6b      	ldr	r3, [pc, #428]	; (2034 <STACK_SIZE+0x34>)
    1e86:	789b      	ldrb	r3, [r3, #2]
    1e88:	079b      	lsls	r3, r3, #30
    1e8a:	d501      	bpl.n	1e90 <usart_init+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1e8c:	2380      	movs	r3, #128	; 0x80
    1e8e:	431a      	orrs	r2, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1e90:	6829      	ldr	r1, [r5, #0]
    1e92:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1e94:	69cb      	ldr	r3, [r1, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1e96:	2b00      	cmp	r3, #0
    1e98:	d1fc      	bne.n	1e94 <usart_init+0x1dc>
	usart_hw->CTRLB.reg = ctrlb;
    1e9a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e9c:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e9e:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d1fc      	bne.n	1e9e <usart_init+0x1e6>
	usart_hw->CTRLA.reg = ctrla;
    1ea4:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    1ea6:	683b      	ldr	r3, [r7, #0]
    1ea8:	22f0      	movs	r2, #240	; 0xf0
    1eaa:	0512      	lsls	r2, r2, #20
    1eac:	4013      	ands	r3, r2
    1eae:	22e0      	movs	r2, #224	; 0xe0
    1eb0:	04d2      	lsls	r2, r2, #19
    1eb2:	4293      	cmp	r3, r2
    1eb4:	d00a      	beq.n	1ecc <usart_init+0x214>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    1eb6:	68bb      	ldr	r3, [r7, #8]
    1eb8:	2207      	movs	r2, #7
    1eba:	4393      	bics	r3, r2
    1ebc:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    1ebe:	68ba      	ldr	r2, [r7, #8]
    1ec0:	2325      	movs	r3, #37	; 0x25
    1ec2:	5cf1      	ldrb	r1, [r6, r3]
    1ec4:	3b1e      	subs	r3, #30
    1ec6:	400b      	ands	r3, r1
    1ec8:	4313      	orrs	r3, r2
    1eca:	60bb      	str	r3, [r7, #8]
    1ecc:	ab0e      	add	r3, sp, #56	; 0x38
    1ece:	2280      	movs	r2, #128	; 0x80
    1ed0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ed2:	2200      	movs	r2, #0
    1ed4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1ed6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1ed8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1eda:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1edc:	930a      	str	r3, [sp, #40]	; 0x28
    1ede:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1ee0:	930b      	str	r3, [sp, #44]	; 0x2c
    1ee2:	6c33      	ldr	r3, [r6, #64]	; 0x40
    1ee4:	930c      	str	r3, [sp, #48]	; 0x30
    1ee6:	6c73      	ldr	r3, [r6, #68]	; 0x44
    1ee8:	9302      	str	r3, [sp, #8]
    1eea:	930d      	str	r3, [sp, #52]	; 0x34
    1eec:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1eee:	ae0a      	add	r6, sp, #40	; 0x28
    1ef0:	e066      	b.n	1fc0 <usart_init+0x308>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1ef2:	2308      	movs	r3, #8
    1ef4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1ef6:	3b07      	subs	r3, #7
    1ef8:	9307      	str	r3, [sp, #28]
    1efa:	e756      	b.n	1daa <usart_init+0xf2>
	ctrla = (uint32_t)config->data_order |
    1efc:	6833      	ldr	r3, [r6, #0]
    1efe:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1f00:	68f3      	ldr	r3, [r6, #12]
    1f02:	469b      	mov	fp, r3
		config->sample_adjustment |
    1f04:	6973      	ldr	r3, [r6, #20]
    1f06:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1f08:	7e33      	ldrb	r3, [r6, #24]
    1f0a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1f0c:	232e      	movs	r3, #46	; 0x2e
    1f0e:	5cf3      	ldrb	r3, [r6, r3]
    1f10:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1f12:	6873      	ldr	r3, [r6, #4]
    1f14:	4699      	mov	r9, r3
	switch (transfer_mode)
    1f16:	2b00      	cmp	r3, #0
    1f18:	d019      	beq.n	1f4e <usart_init+0x296>
    1f1a:	2380      	movs	r3, #128	; 0x80
    1f1c:	055b      	lsls	r3, r3, #21
    1f1e:	4599      	cmp	r9, r3
    1f20:	d001      	beq.n	1f26 <usart_init+0x26e>
	enum status_code status_code = STATUS_OK;
    1f22:	2300      	movs	r3, #0
    1f24:	e027      	b.n	1f76 <usart_init+0x2be>
			if (!config->use_external_clock) {
    1f26:	232f      	movs	r3, #47	; 0x2f
    1f28:	5cf3      	ldrb	r3, [r6, r3]
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d000      	beq.n	1f30 <usart_init+0x278>
    1f2e:	e751      	b.n	1dd4 <usart_init+0x11c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1f30:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1f32:	001f      	movs	r7, r3
    1f34:	b2c0      	uxtb	r0, r0
    1f36:	4b40      	ldr	r3, [pc, #256]	; (2038 <STACK_SIZE+0x38>)
    1f38:	4798      	blx	r3
    1f3a:	0001      	movs	r1, r0
    1f3c:	220e      	movs	r2, #14
    1f3e:	ab06      	add	r3, sp, #24
    1f40:	469c      	mov	ip, r3
    1f42:	4462      	add	r2, ip
    1f44:	0038      	movs	r0, r7
    1f46:	4b3d      	ldr	r3, [pc, #244]	; (203c <STACK_SIZE+0x3c>)
    1f48:	4798      	blx	r3
    1f4a:	0003      	movs	r3, r0
    1f4c:	e013      	b.n	1f76 <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1f4e:	2308      	movs	r3, #8
    1f50:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1f52:	2300      	movs	r3, #0
    1f54:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1f56:	232f      	movs	r3, #47	; 0x2f
    1f58:	5cf3      	ldrb	r3, [r6, r3]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d00f      	beq.n	1f7e <usart_init+0x2c6>
				status_code =
    1f5e:	9b06      	ldr	r3, [sp, #24]
    1f60:	9300      	str	r3, [sp, #0]
    1f62:	9b07      	ldr	r3, [sp, #28]
    1f64:	220e      	movs	r2, #14
    1f66:	a906      	add	r1, sp, #24
    1f68:	468c      	mov	ip, r1
    1f6a:	4462      	add	r2, ip
    1f6c:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1f6e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1f70:	4f33      	ldr	r7, [pc, #204]	; (2040 <STACK_SIZE+0x40>)
    1f72:	47b8      	blx	r7
    1f74:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
    1f76:	2b00      	cmp	r3, #0
    1f78:	d000      	beq.n	1f7c <usart_init+0x2c4>
    1f7a:	e6b3      	b.n	1ce4 <usart_init+0x2c>
    1f7c:	e72a      	b.n	1dd4 <usart_init+0x11c>
						_sercom_get_async_baud_val(config->baudrate,
    1f7e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1f80:	001f      	movs	r7, r3
    1f82:	b2c0      	uxtb	r0, r0
    1f84:	4b2c      	ldr	r3, [pc, #176]	; (2038 <STACK_SIZE+0x38>)
    1f86:	4798      	blx	r3
    1f88:	0001      	movs	r1, r0
				status_code =
    1f8a:	9b06      	ldr	r3, [sp, #24]
    1f8c:	9300      	str	r3, [sp, #0]
    1f8e:	9b07      	ldr	r3, [sp, #28]
    1f90:	220e      	movs	r2, #14
    1f92:	a806      	add	r0, sp, #24
    1f94:	4684      	mov	ip, r0
    1f96:	4462      	add	r2, ip
    1f98:	0038      	movs	r0, r7
    1f9a:	4f29      	ldr	r7, [pc, #164]	; (2040 <STACK_SIZE+0x40>)
    1f9c:	47b8      	blx	r7
    1f9e:	0003      	movs	r3, r0
    1fa0:	e7e9      	b.n	1f76 <usart_init+0x2be>
		if(config->lin_slave_enable) {
    1fa2:	7ef3      	ldrb	r3, [r6, #27]
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d100      	bne.n	1faa <usart_init+0x2f2>
    1fa8:	e754      	b.n	1e54 <usart_init+0x19c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1faa:	2380      	movs	r3, #128	; 0x80
    1fac:	04db      	lsls	r3, r3, #19
    1fae:	431a      	orrs	r2, r3
    1fb0:	e750      	b.n	1e54 <usart_init+0x19c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1fb2:	0020      	movs	r0, r4
    1fb4:	4b23      	ldr	r3, [pc, #140]	; (2044 <STACK_SIZE+0x44>)
    1fb6:	4798      	blx	r3
    1fb8:	e007      	b.n	1fca <usart_init+0x312>
    1fba:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1fbc:	2f04      	cmp	r7, #4
    1fbe:	d00d      	beq.n	1fdc <usart_init+0x324>
    1fc0:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1fc2:	00bb      	lsls	r3, r7, #2
    1fc4:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1fc6:	2800      	cmp	r0, #0
    1fc8:	d0f3      	beq.n	1fb2 <usart_init+0x2fa>
		if (current_pinmux != PINMUX_UNUSED) {
    1fca:	1c43      	adds	r3, r0, #1
    1fcc:	d0f5      	beq.n	1fba <usart_init+0x302>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1fce:	a90e      	add	r1, sp, #56	; 0x38
    1fd0:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1fd2:	0c00      	lsrs	r0, r0, #16
    1fd4:	b2c0      	uxtb	r0, r0
    1fd6:	4b1c      	ldr	r3, [pc, #112]	; (2048 <STACK_SIZE+0x48>)
    1fd8:	4798      	blx	r3
    1fda:	e7ee      	b.n	1fba <usart_init+0x302>
		module->callback[i]            = NULL;
    1fdc:	2300      	movs	r3, #0
    1fde:	60eb      	str	r3, [r5, #12]
    1fe0:	612b      	str	r3, [r5, #16]
    1fe2:	616b      	str	r3, [r5, #20]
    1fe4:	61ab      	str	r3, [r5, #24]
    1fe6:	61eb      	str	r3, [r5, #28]
    1fe8:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1fea:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1fec:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1fee:	2200      	movs	r2, #0
    1ff0:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1ff2:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1ff4:	3330      	adds	r3, #48	; 0x30
    1ff6:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1ff8:	3301      	adds	r3, #1
    1ffa:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1ffc:	3301      	adds	r3, #1
    1ffe:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2000:	3301      	adds	r3, #1
    2002:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2004:	6828      	ldr	r0, [r5, #0]
    2006:	4b05      	ldr	r3, [pc, #20]	; (201c <STACK_SIZE+0x1c>)
    2008:	4798      	blx	r3
    200a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    200c:	490f      	ldr	r1, [pc, #60]	; (204c <STACK_SIZE+0x4c>)
    200e:	4b10      	ldr	r3, [pc, #64]	; (2050 <STACK_SIZE+0x50>)
    2010:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2012:	00a4      	lsls	r4, r4, #2
    2014:	4b0f      	ldr	r3, [pc, #60]	; (2054 <STACK_SIZE+0x54>)
    2016:	50e5      	str	r5, [r4, r3]
	return status_code;
    2018:	2300      	movs	r3, #0
    201a:	e663      	b.n	1ce4 <usart_init+0x2c>
    201c:	00001bb1 	.word	0x00001bb1
    2020:	40000800 	.word	0x40000800
    2024:	00002805 	.word	0x00002805
    2028:	00002795 	.word	0x00002795
    202c:	000019e9 	.word	0x000019e9
    2030:	f0ffffff 	.word	0xf0ffffff
    2034:	41002000 	.word	0x41002000
    2038:	00002829 	.word	0x00002829
    203c:	0000192b 	.word	0x0000192b
    2040:	00001955 	.word	0x00001955
    2044:	00001a35 	.word	0x00001a35
    2048:	00002901 	.word	0x00002901
    204c:	000020f5 	.word	0x000020f5
    2050:	00001bed 	.word	0x00001bed
    2054:	200025b0 	.word	0x200025b0
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2058:	2310      	movs	r3, #16
    205a:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    205c:	2300      	movs	r3, #0
    205e:	9307      	str	r3, [sp, #28]
    2060:	e6a3      	b.n	1daa <usart_init+0xf2>
    2062:	46c0      	nop			; (mov r8, r8)

00002064 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2064:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2066:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2068:	2a00      	cmp	r2, #0
    206a:	d101      	bne.n	2070 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    206c:	0018      	movs	r0, r3
    206e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2070:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2072:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2074:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2076:	2a00      	cmp	r2, #0
    2078:	d1f8      	bne.n	206c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    207a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    207c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    207e:	2102      	movs	r1, #2
    2080:	7e13      	ldrb	r3, [r2, #24]
    2082:	420b      	tst	r3, r1
    2084:	d0fc      	beq.n	2080 <usart_write_wait+0x1c>
	return STATUS_OK;
    2086:	2300      	movs	r3, #0
    2088:	e7f0      	b.n	206c <usart_write_wait+0x8>

0000208a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    208a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    208c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    208e:	2a00      	cmp	r2, #0
    2090:	d101      	bne.n	2096 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2092:	0018      	movs	r0, r3
    2094:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2096:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2098:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    209a:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    209c:	2a00      	cmp	r2, #0
    209e:	d1f8      	bne.n	2092 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    20a0:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    20a2:	7e10      	ldrb	r0, [r2, #24]
    20a4:	0740      	lsls	r0, r0, #29
    20a6:	d5f4      	bpl.n	2092 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    20a8:	8b53      	ldrh	r3, [r2, #26]
    20aa:	b2db      	uxtb	r3, r3
	if (error_code) {
    20ac:	0658      	lsls	r0, r3, #25
    20ae:	d01d      	beq.n	20ec <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    20b0:	0798      	lsls	r0, r3, #30
    20b2:	d503      	bpl.n	20bc <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    20b4:	2302      	movs	r3, #2
    20b6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    20b8:	3318      	adds	r3, #24
    20ba:	e7ea      	b.n	2092 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    20bc:	0758      	lsls	r0, r3, #29
    20be:	d503      	bpl.n	20c8 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    20c0:	2304      	movs	r3, #4
    20c2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    20c4:	331a      	adds	r3, #26
    20c6:	e7e4      	b.n	2092 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    20c8:	07d8      	lsls	r0, r3, #31
    20ca:	d503      	bpl.n	20d4 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    20cc:	2301      	movs	r3, #1
    20ce:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    20d0:	3312      	adds	r3, #18
    20d2:	e7de      	b.n	2092 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    20d4:	06d8      	lsls	r0, r3, #27
    20d6:	d503      	bpl.n	20e0 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    20d8:	2310      	movs	r3, #16
    20da:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    20dc:	3332      	adds	r3, #50	; 0x32
    20de:	e7d8      	b.n	2092 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    20e0:	069b      	lsls	r3, r3, #26
    20e2:	d503      	bpl.n	20ec <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    20e4:	2320      	movs	r3, #32
    20e6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    20e8:	3321      	adds	r3, #33	; 0x21
    20ea:	e7d2      	b.n	2092 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    20ec:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    20ee:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    20f0:	2300      	movs	r3, #0
    20f2:	e7ce      	b.n	2092 <usart_read_wait+0x8>

000020f4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    20f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    20f6:	0080      	lsls	r0, r0, #2
    20f8:	4b64      	ldr	r3, [pc, #400]	; (228c <_usart_interrupt_handler+0x198>)
    20fa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    20fc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    20fe:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2100:	2b00      	cmp	r3, #0
    2102:	d1fc      	bne.n	20fe <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2104:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2106:	7da6      	ldrb	r6, [r4, #22]
    2108:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    210a:	2330      	movs	r3, #48	; 0x30
    210c:	5ceb      	ldrb	r3, [r5, r3]
    210e:	2231      	movs	r2, #49	; 0x31
    2110:	5caf      	ldrb	r7, [r5, r2]
    2112:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2114:	07f3      	lsls	r3, r6, #31
    2116:	d522      	bpl.n	215e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2118:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    211a:	b29b      	uxth	r3, r3
    211c:	2b00      	cmp	r3, #0
    211e:	d01c      	beq.n	215a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2120:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2122:	7813      	ldrb	r3, [r2, #0]
    2124:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2126:	1c51      	adds	r1, r2, #1
    2128:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    212a:	7969      	ldrb	r1, [r5, #5]
    212c:	2901      	cmp	r1, #1
    212e:	d00e      	beq.n	214e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2130:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2132:	05db      	lsls	r3, r3, #23
    2134:	0ddb      	lsrs	r3, r3, #23
    2136:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2138:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    213a:	3b01      	subs	r3, #1
    213c:	b29b      	uxth	r3, r3
    213e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2140:	2b00      	cmp	r3, #0
    2142:	d10c      	bne.n	215e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2144:	3301      	adds	r3, #1
    2146:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2148:	3301      	adds	r3, #1
    214a:	75a3      	strb	r3, [r4, #22]
    214c:	e007      	b.n	215e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    214e:	7851      	ldrb	r1, [r2, #1]
    2150:	0209      	lsls	r1, r1, #8
    2152:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2154:	3202      	adds	r2, #2
    2156:	62aa      	str	r2, [r5, #40]	; 0x28
    2158:	e7eb      	b.n	2132 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    215a:	2301      	movs	r3, #1
    215c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    215e:	07b3      	lsls	r3, r6, #30
    2160:	d506      	bpl.n	2170 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2162:	2302      	movs	r3, #2
    2164:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2166:	2200      	movs	r2, #0
    2168:	3331      	adds	r3, #49	; 0x31
    216a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    216c:	07fb      	lsls	r3, r7, #31
    216e:	d41e      	bmi.n	21ae <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2170:	0773      	lsls	r3, r6, #29
    2172:	d568      	bpl.n	2246 <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
    2174:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2176:	b29b      	uxth	r3, r3
    2178:	2b00      	cmp	r3, #0
    217a:	d062      	beq.n	2242 <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    217c:	8b63      	ldrh	r3, [r4, #26]
    217e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2180:	071a      	lsls	r2, r3, #28
    2182:	d418      	bmi.n	21b6 <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2184:	227f      	movs	r2, #127	; 0x7f
    2186:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    2188:	065a      	lsls	r2, r3, #25
    218a:	d501      	bpl.n	2190 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    218c:	2240      	movs	r2, #64	; 0x40
    218e:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2190:	2b00      	cmp	r3, #0
    2192:	d033      	beq.n	21fc <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2194:	079a      	lsls	r2, r3, #30
    2196:	d511      	bpl.n	21bc <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2198:	221a      	movs	r2, #26
    219a:	2332      	movs	r3, #50	; 0x32
    219c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    219e:	3b30      	subs	r3, #48	; 0x30
    21a0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    21a2:	077b      	lsls	r3, r7, #29
    21a4:	d54f      	bpl.n	2246 <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    21a6:	0028      	movs	r0, r5
    21a8:	696b      	ldr	r3, [r5, #20]
    21aa:	4798      	blx	r3
    21ac:	e04b      	b.n	2246 <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    21ae:	0028      	movs	r0, r5
    21b0:	68eb      	ldr	r3, [r5, #12]
    21b2:	4798      	blx	r3
    21b4:	e7dc      	b.n	2170 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    21b6:	2277      	movs	r2, #119	; 0x77
    21b8:	4013      	ands	r3, r2
    21ba:	e7e5      	b.n	2188 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    21bc:	075a      	lsls	r2, r3, #29
    21be:	d505      	bpl.n	21cc <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    21c0:	221e      	movs	r2, #30
    21c2:	2332      	movs	r3, #50	; 0x32
    21c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    21c6:	3b2e      	subs	r3, #46	; 0x2e
    21c8:	8363      	strh	r3, [r4, #26]
    21ca:	e7ea      	b.n	21a2 <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    21cc:	07da      	lsls	r2, r3, #31
    21ce:	d505      	bpl.n	21dc <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    21d0:	2213      	movs	r2, #19
    21d2:	2332      	movs	r3, #50	; 0x32
    21d4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    21d6:	3b31      	subs	r3, #49	; 0x31
    21d8:	8363      	strh	r3, [r4, #26]
    21da:	e7e2      	b.n	21a2 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    21dc:	06da      	lsls	r2, r3, #27
    21de:	d505      	bpl.n	21ec <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    21e0:	2242      	movs	r2, #66	; 0x42
    21e2:	2332      	movs	r3, #50	; 0x32
    21e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    21e6:	3b22      	subs	r3, #34	; 0x22
    21e8:	8363      	strh	r3, [r4, #26]
    21ea:	e7da      	b.n	21a2 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    21ec:	069b      	lsls	r3, r3, #26
    21ee:	d5d8      	bpl.n	21a2 <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    21f0:	2241      	movs	r2, #65	; 0x41
    21f2:	2332      	movs	r3, #50	; 0x32
    21f4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    21f6:	3b12      	subs	r3, #18
    21f8:	8363      	strh	r3, [r4, #26]
    21fa:	e7d2      	b.n	21a2 <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    21fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    21fe:	05db      	lsls	r3, r3, #23
    2200:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2202:	b2da      	uxtb	r2, r3
    2204:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2206:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2208:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    220a:	1c51      	adds	r1, r2, #1
    220c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    220e:	7969      	ldrb	r1, [r5, #5]
    2210:	2901      	cmp	r1, #1
    2212:	d010      	beq.n	2236 <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2214:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2216:	3b01      	subs	r3, #1
    2218:	b29b      	uxth	r3, r3
    221a:	85ab      	strh	r3, [r5, #44]	; 0x2c
    221c:	2b00      	cmp	r3, #0
    221e:	d112      	bne.n	2246 <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2220:	3304      	adds	r3, #4
    2222:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2224:	2200      	movs	r2, #0
    2226:	332e      	adds	r3, #46	; 0x2e
    2228:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    222a:	07bb      	lsls	r3, r7, #30
    222c:	d50b      	bpl.n	2246 <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    222e:	0028      	movs	r0, r5
    2230:	692b      	ldr	r3, [r5, #16]
    2232:	4798      	blx	r3
    2234:	e007      	b.n	2246 <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2236:	0a1b      	lsrs	r3, r3, #8
    2238:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    223a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    223c:	3301      	adds	r3, #1
    223e:	626b      	str	r3, [r5, #36]	; 0x24
    2240:	e7e8      	b.n	2214 <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2242:	2304      	movs	r3, #4
    2244:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2246:	06f3      	lsls	r3, r6, #27
    2248:	d504      	bpl.n	2254 <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    224a:	2310      	movs	r3, #16
    224c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    224e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2250:	06fb      	lsls	r3, r7, #27
    2252:	d40e      	bmi.n	2272 <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2254:	06b3      	lsls	r3, r6, #26
    2256:	d504      	bpl.n	2262 <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2258:	2320      	movs	r3, #32
    225a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    225c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    225e:	073b      	lsls	r3, r7, #28
    2260:	d40b      	bmi.n	227a <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2262:	0733      	lsls	r3, r6, #28
    2264:	d504      	bpl.n	2270 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2266:	2308      	movs	r3, #8
    2268:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    226a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    226c:	06bb      	lsls	r3, r7, #26
    226e:	d408      	bmi.n	2282 <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2272:	0028      	movs	r0, r5
    2274:	69eb      	ldr	r3, [r5, #28]
    2276:	4798      	blx	r3
    2278:	e7ec      	b.n	2254 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    227a:	0028      	movs	r0, r5
    227c:	69ab      	ldr	r3, [r5, #24]
    227e:	4798      	blx	r3
    2280:	e7ef      	b.n	2262 <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2282:	6a2b      	ldr	r3, [r5, #32]
    2284:	0028      	movs	r0, r5
    2286:	4798      	blx	r3
}
    2288:	e7f2      	b.n	2270 <_usart_interrupt_handler+0x17c>
    228a:	46c0      	nop			; (mov r8, r8)
    228c:	200025b0 	.word	0x200025b0

00002290 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2290:	b510      	push	{r4, lr}
	switch (clock_source) {
    2292:	2807      	cmp	r0, #7
    2294:	d803      	bhi.n	229e <system_clock_source_get_hz+0xe>
    2296:	0080      	lsls	r0, r0, #2
    2298:	4b0f      	ldr	r3, [pc, #60]	; (22d8 <system_clock_source_get_hz+0x48>)
    229a:	581b      	ldr	r3, [r3, r0]
    229c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    229e:	2000      	movs	r0, #0
    22a0:	e018      	b.n	22d4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    22a2:	4b0e      	ldr	r3, [pc, #56]	; (22dc <system_clock_source_get_hz+0x4c>)
    22a4:	6858      	ldr	r0, [r3, #4]
    22a6:	e015      	b.n	22d4 <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    22a8:	4b0d      	ldr	r3, [pc, #52]	; (22e0 <system_clock_source_get_hz+0x50>)
    22aa:	7d59      	ldrb	r1, [r3, #21]
    22ac:	0709      	lsls	r1, r1, #28
    22ae:	0f09      	lsrs	r1, r1, #28
    22b0:	3101      	adds	r1, #1
    22b2:	480c      	ldr	r0, [pc, #48]	; (22e4 <system_clock_source_get_hz+0x54>)
    22b4:	4b0c      	ldr	r3, [pc, #48]	; (22e8 <system_clock_source_get_hz+0x58>)
    22b6:	4798      	blx	r3
    22b8:	e00c      	b.n	22d4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    22ba:	4b08      	ldr	r3, [pc, #32]	; (22dc <system_clock_source_get_hz+0x4c>)
    22bc:	6898      	ldr	r0, [r3, #8]
    22be:	e009      	b.n	22d4 <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    22c0:	4b07      	ldr	r3, [pc, #28]	; (22e0 <system_clock_source_get_hz+0x50>)
    22c2:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    22c4:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    22c6:	079b      	lsls	r3, r3, #30
    22c8:	d504      	bpl.n	22d4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    22ca:	4b04      	ldr	r3, [pc, #16]	; (22dc <system_clock_source_get_hz+0x4c>)
    22cc:	6818      	ldr	r0, [r3, #0]
    22ce:	e001      	b.n	22d4 <system_clock_source_get_hz+0x44>
		return 32768UL;
    22d0:	2080      	movs	r0, #128	; 0x80
    22d2:	0200      	lsls	r0, r0, #8
	}
}
    22d4:	bd10      	pop	{r4, pc}
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	00008610 	.word	0x00008610
    22dc:	20002528 	.word	0x20002528
    22e0:	40001000 	.word	0x40001000
    22e4:	02dc6c00 	.word	0x02dc6c00
    22e8:	000064a5 	.word	0x000064a5

000022ec <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    22ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ee:	46de      	mov	lr, fp
    22f0:	4657      	mov	r7, sl
    22f2:	464e      	mov	r6, r9
    22f4:	4645      	mov	r5, r8
    22f6:	b5e0      	push	{r5, r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    22f8:	4a25      	ldr	r2, [pc, #148]	; (2390 <system_clock_source_xosc32k_set_config+0xa4>)
    22fa:	8a93      	ldrh	r3, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    22fc:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    22fe:	7801      	ldrb	r1, [r0, #0]
    2300:	424c      	negs	r4, r1
    2302:	414c      	adcs	r4, r1
    2304:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    2306:	7881      	ldrb	r1, [r0, #2]
    2308:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    230a:	78c1      	ldrb	r1, [r0, #3]
    230c:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    230e:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2310:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    2312:	7a81      	ldrb	r1, [r0, #10]
    2314:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2316:	491f      	ldr	r1, [pc, #124]	; (2394 <system_clock_source_xosc32k_set_config+0xa8>)
    2318:	6844      	ldr	r4, [r0, #4]
    231a:	608c      	str	r4, [r1, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    231c:	7ac1      	ldrb	r1, [r0, #11]
    231e:	0089      	lsls	r1, r1, #2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    2320:	7b84      	ldrb	r4, [r0, #14]
    2322:	0064      	lsls	r4, r4, #1
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
    2324:	4321      	orrs	r1, r4
    2326:	7b44      	ldrb	r4, [r0, #13]
    2328:	4321      	orrs	r1, r4
    232a:	b2c9      	uxtb	r1, r1
	OSC32KCTRL->CFDCTRL.reg =
    232c:	7591      	strb	r1, [r2, #22]

	OSC32KCTRL->EVCTRL.reg =
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);
    232e:	7b01      	ldrb	r1, [r0, #12]
	OSC32KCTRL->EVCTRL.reg =
    2330:	75d1      	strb	r1, [r2, #23]

	OSC32KCTRL->XOSC32K = temp;
    2332:	2101      	movs	r1, #1
    2334:	4648      	mov	r0, r9
    2336:	0080      	lsls	r0, r0, #2
    2338:	2404      	movs	r4, #4
    233a:	43a3      	bics	r3, r4
    233c:	4303      	orrs	r3, r0
    233e:	4640      	mov	r0, r8
    2340:	4008      	ands	r0, r1
    2342:	00c0      	lsls	r0, r0, #3
    2344:	3404      	adds	r4, #4
    2346:	43a3      	bics	r3, r4
    2348:	4303      	orrs	r3, r0
    234a:	4660      	mov	r0, ip
    234c:	4008      	ands	r0, r1
    234e:	0100      	lsls	r0, r0, #4
    2350:	3408      	adds	r4, #8
    2352:	43a3      	bics	r3, r4
    2354:	4303      	orrs	r3, r0
    2356:	400f      	ands	r7, r1
    2358:	01bf      	lsls	r7, r7, #6
    235a:	2040      	movs	r0, #64	; 0x40
    235c:	4383      	bics	r3, r0
    235e:	433b      	orrs	r3, r7
    2360:	400e      	ands	r6, r1
    2362:	01f6      	lsls	r6, r6, #7
    2364:	3040      	adds	r0, #64	; 0x40
    2366:	4383      	bics	r3, r0
    2368:	4333      	orrs	r3, r6
    236a:	3879      	subs	r0, #121	; 0x79
    236c:	4005      	ands	r5, r0
    236e:	022d      	lsls	r5, r5, #8
    2370:	4809      	ldr	r0, [pc, #36]	; (2398 <system_clock_source_xosc32k_set_config+0xac>)
    2372:	4003      	ands	r3, r0
    2374:	432b      	orrs	r3, r5
    2376:	4658      	mov	r0, fp
    2378:	4001      	ands	r1, r0
    237a:	0309      	lsls	r1, r1, #12
    237c:	4807      	ldr	r0, [pc, #28]	; (239c <system_clock_source_xosc32k_set_config+0xb0>)
    237e:	4003      	ands	r3, r0
    2380:	430b      	orrs	r3, r1
    2382:	8293      	strh	r3, [r2, #20]
}
    2384:	bc3c      	pop	{r2, r3, r4, r5}
    2386:	4690      	mov	r8, r2
    2388:	4699      	mov	r9, r3
    238a:	46a2      	mov	sl, r4
    238c:	46ab      	mov	fp, r5
    238e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2390:	40001400 	.word	0x40001400
    2394:	20002528 	.word	0x20002528
    2398:	fffff8ff 	.word	0xfffff8ff
    239c:	ffffefff 	.word	0xffffefff

000023a0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    23a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23a2:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    23a4:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    23a6:	7d03      	ldrb	r3, [r0, #20]
    23a8:	2b01      	cmp	r3, #1
    23aa:	d04d      	beq.n	2448 <system_clock_source_dpll_set_config+0xa8>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    23ac:	68a3      	ldr	r3, [r4, #8]
    23ae:	0118      	lsls	r0, r3, #4
    23b0:	0029      	movs	r1, r5
    23b2:	4b29      	ldr	r3, [pc, #164]	; (2458 <system_clock_source_dpll_set_config+0xb8>)
    23b4:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    23b6:	220f      	movs	r2, #15
    23b8:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    23ba:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    23bc:	7821      	ldrb	r1, [r4, #0]
    23be:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    23c0:	7866      	ldrb	r6, [r4, #1]
    23c2:	01b6      	lsls	r6, r6, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    23c4:	4331      	orrs	r1, r6
    23c6:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    23c8:	4e24      	ldr	r6, [pc, #144]	; (245c <system_clock_source_dpll_set_config+0xbc>)
    23ca:	7731      	strb	r1, [r6, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    23cc:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    23ce:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    23d0:	051b      	lsls	r3, r3, #20
    23d2:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    23d4:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    23d6:	6233      	str	r3, [r6, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    23d8:	0037      	movs	r7, r6
    23da:	262c      	movs	r6, #44	; 0x2c
    23dc:	2104      	movs	r1, #4
    23de:	5dbb      	ldrb	r3, [r7, r6]
    23e0:	420b      	tst	r3, r1
    23e2:	d1fc      	bne.n	23de <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    23e4:	78a3      	ldrb	r3, [r4, #2]
    23e6:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    23e8:	78e1      	ldrb	r1, [r4, #3]
    23ea:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    23ec:	430b      	orrs	r3, r1
    23ee:	7921      	ldrb	r1, [r4, #4]
    23f0:	0089      	lsls	r1, r1, #2
    23f2:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    23f4:	7ca1      	ldrb	r1, [r4, #18]
    23f6:	2603      	movs	r6, #3
    23f8:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    23fa:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    23fc:	8a21      	ldrh	r1, [r4, #16]
    23fe:	0409      	lsls	r1, r1, #16
    2400:	4f17      	ldr	r7, [pc, #92]	; (2460 <system_clock_source_dpll_set_config+0xc0>)
    2402:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2404:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    2406:	7ce1      	ldrb	r1, [r4, #19]
    2408:	0209      	lsls	r1, r1, #8
    240a:	27e0      	movs	r7, #224	; 0xe0
    240c:	00ff      	lsls	r7, r7, #3
    240e:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2410:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    2412:	7d27      	ldrb	r7, [r4, #20]
    2414:	013f      	lsls	r7, r7, #4
    2416:	2130      	movs	r1, #48	; 0x30
    2418:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    241a:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    241c:	490f      	ldr	r1, [pc, #60]	; (245c <system_clock_source_dpll_set_config+0xbc>)
    241e:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    2420:	7d63      	ldrb	r3, [r4, #21]
    2422:	401e      	ands	r6, r3
    2424:	2328      	movs	r3, #40	; 0x28
    2426:	54ce      	strb	r6, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    2428:	000f      	movs	r7, r1
    242a:	262c      	movs	r6, #44	; 0x2c
    242c:	2108      	movs	r1, #8
    242e:	5dbb      	ldrb	r3, [r7, r6]
    2430:	420b      	tst	r3, r1
    2432:	d1fc      	bne.n	242e <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    2434:	230f      	movs	r3, #15
    2436:	4398      	bics	r0, r3
    2438:	1882      	adds	r2, r0, r2
			(refclk *
    243a:	436a      	muls	r2, r5
			) >> (4 + config->prescaler);
    243c:	7d63      	ldrb	r3, [r4, #21]
    243e:	3304      	adds	r3, #4
    2440:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    2442:	4b08      	ldr	r3, [pc, #32]	; (2464 <system_clock_source_dpll_set_config+0xc4>)
    2444:	601a      	str	r2, [r3, #0]
}
    2446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    2448:	8a01      	ldrh	r1, [r0, #16]
    244a:	3101      	adds	r1, #1
    244c:	0049      	lsls	r1, r1, #1
    244e:	0028      	movs	r0, r5
    2450:	4b01      	ldr	r3, [pc, #4]	; (2458 <system_clock_source_dpll_set_config+0xb8>)
    2452:	4798      	blx	r3
    2454:	0005      	movs	r5, r0
    2456:	e7a9      	b.n	23ac <system_clock_source_dpll_set_config+0xc>
    2458:	000064a5 	.word	0x000064a5
    245c:	40001000 	.word	0x40001000
    2460:	07ff0000 	.word	0x07ff0000
    2464:	20002528 	.word	0x20002528

00002468 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2468:	2807      	cmp	r0, #7
    246a:	d803      	bhi.n	2474 <system_clock_source_enable+0xc>
    246c:	0080      	lsls	r0, r0, #2
    246e:	4b18      	ldr	r3, [pc, #96]	; (24d0 <system_clock_source_enable+0x68>)
    2470:	581b      	ldr	r3, [r3, r0]
    2472:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2474:	2017      	movs	r0, #23
    2476:	e029      	b.n	24cc <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    2478:	4a16      	ldr	r2, [pc, #88]	; (24d4 <system_clock_source_enable+0x6c>)
    247a:	7d13      	ldrb	r3, [r2, #20]
    247c:	2102      	movs	r1, #2
    247e:	430b      	orrs	r3, r1
    2480:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    2482:	2000      	movs	r0, #0
    2484:	e022      	b.n	24cc <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    2486:	4a14      	ldr	r2, [pc, #80]	; (24d8 <system_clock_source_enable+0x70>)
    2488:	6993      	ldr	r3, [r2, #24]
    248a:	2102      	movs	r1, #2
    248c:	430b      	orrs	r3, r1
    248e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2490:	2000      	movs	r0, #0
		break;
    2492:	e01b      	b.n	24cc <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    2494:	4a0f      	ldr	r2, [pc, #60]	; (24d4 <system_clock_source_enable+0x6c>)
    2496:	8a13      	ldrh	r3, [r2, #16]
    2498:	2102      	movs	r1, #2
    249a:	430b      	orrs	r3, r1
    249c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    249e:	2000      	movs	r0, #0
		break;
    24a0:	e014      	b.n	24cc <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    24a2:	4a0d      	ldr	r2, [pc, #52]	; (24d8 <system_clock_source_enable+0x70>)
    24a4:	8a93      	ldrh	r3, [r2, #20]
    24a6:	2102      	movs	r1, #2
    24a8:	430b      	orrs	r3, r1
    24aa:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    24ac:	2000      	movs	r0, #0
		break;
    24ae:	e00d      	b.n	24cc <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    24b0:	4a08      	ldr	r2, [pc, #32]	; (24d4 <system_clock_source_enable+0x6c>)
    24b2:	7f13      	ldrb	r3, [r2, #28]
    24b4:	2102      	movs	r1, #2
    24b6:	430b      	orrs	r3, r1
    24b8:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    24ba:	0010      	movs	r0, r2
    24bc:	312a      	adds	r1, #42	; 0x2a
    24be:	2202      	movs	r2, #2
    24c0:	5c43      	ldrb	r3, [r0, r1]
    24c2:	4213      	tst	r3, r2
    24c4:	d1fc      	bne.n	24c0 <system_clock_source_enable+0x58>
	return STATUS_OK;
    24c6:	2000      	movs	r0, #0
    24c8:	e000      	b.n	24cc <system_clock_source_enable+0x64>
		return STATUS_OK;
    24ca:	2000      	movs	r0, #0
}
    24cc:	4770      	bx	lr
    24ce:	46c0      	nop			; (mov r8, r8)
    24d0:	00008630 	.word	0x00008630
    24d4:	40001000 	.word	0x40001000
    24d8:	40001400 	.word	0x40001400

000024dc <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    24dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24de:	46c6      	mov	lr, r8
    24e0:	b500      	push	{lr}
    24e2:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    24e4:	2203      	movs	r2, #3
    24e6:	4b3f      	ldr	r3, [pc, #252]	; (25e4 <system_clock_init+0x108>)
    24e8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    24ea:	4a3f      	ldr	r2, [pc, #252]	; (25e8 <system_clock_init+0x10c>)
    24ec:	6853      	ldr	r3, [r2, #4]
    24ee:	211e      	movs	r1, #30
    24f0:	438b      	bics	r3, r1
    24f2:	3918      	subs	r1, #24
    24f4:	430b      	orrs	r3, r1
    24f6:	6053      	str	r3, [r2, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    24f8:	a80a      	add	r0, sp, #40	; 0x28
    24fa:	2300      	movs	r3, #0
    24fc:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    24fe:	2280      	movs	r2, #128	; 0x80
    2500:	0212      	lsls	r2, r2, #8
    2502:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    2504:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    2506:	2201      	movs	r2, #1
    2508:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    250a:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    250c:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    250e:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    2510:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    2512:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2514:	3902      	subs	r1, #2
    2516:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2518:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    251a:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    251c:	4b33      	ldr	r3, [pc, #204]	; (25ec <system_clock_init+0x110>)
    251e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2520:	2005      	movs	r0, #5
    2522:	4b33      	ldr	r3, [pc, #204]	; (25f0 <system_clock_init+0x114>)
    2524:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    2526:	4933      	ldr	r1, [pc, #204]	; (25f4 <system_clock_init+0x118>)
    2528:	2201      	movs	r2, #1
    252a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    252c:	421a      	tst	r2, r3
    252e:	d0fc      	beq.n	252a <system_clock_init+0x4e>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    2530:	4b31      	ldr	r3, [pc, #196]	; (25f8 <system_clock_init+0x11c>)
    2532:	7d1a      	ldrb	r2, [r3, #20]
    2534:	2180      	movs	r1, #128	; 0x80
    2536:	430a      	orrs	r2, r1
    2538:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    253a:	2202      	movs	r2, #2
    253c:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    253e:	001a      	movs	r2, r3
    2540:	6993      	ldr	r3, [r2, #24]
    2542:	2b00      	cmp	r3, #0
    2544:	d1fc      	bne.n	2540 <system_clock_init+0x64>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2546:	4b2d      	ldr	r3, [pc, #180]	; (25fc <system_clock_init+0x120>)
    2548:	4798      	blx	r3
	config->division_factor    = 1;
    254a:	ad01      	add	r5, sp, #4
    254c:	2601      	movs	r6, #1
    254e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2550:	2400      	movs	r4, #0
    2552:	706c      	strb	r4, [r5, #1]
	config->output_enable      = false;
    2554:	726c      	strb	r4, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2556:	2305      	movs	r3, #5
    2558:	702b      	strb	r3, [r5, #0]
    255a:	722e      	strb	r6, [r5, #8]
    255c:	0029      	movs	r1, r5
    255e:	2001      	movs	r0, #1
    2560:	4b27      	ldr	r3, [pc, #156]	; (2600 <system_clock_init+0x124>)
    2562:	4698      	mov	r8, r3
    2564:	4798      	blx	r3
    2566:	2001      	movs	r0, #1
    2568:	4f26      	ldr	r7, [pc, #152]	; (2604 <system_clock_init+0x128>)
    256a:	47b8      	blx	r7
	config->division_factor    = 1;
    256c:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    256e:	706c      	strb	r4, [r5, #1]
	config->run_in_standby     = false;
    2570:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    2572:	726c      	strb	r4, [r5, #9]
    2574:	2307      	movs	r3, #7
    2576:	702b      	strb	r3, [r5, #0]
    2578:	0029      	movs	r1, r5
    257a:	2008      	movs	r0, #8
    257c:	47c0      	blx	r8
    257e:	2008      	movs	r0, #8
    2580:	47b8      	blx	r7
	config->lock_bypass         = false;
    2582:	a804      	add	r0, sp, #16
    2584:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    2586:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    2588:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    258a:	4b1f      	ldr	r3, [pc, #124]	; (2608 <system_clock_init+0x12c>)
    258c:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    258e:	8206      	strh	r6, [r0, #16]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    2590:	7544      	strb	r4, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    2592:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    2594:	7484      	strb	r4, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    2596:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    2598:	2301      	movs	r3, #1
    259a:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    259c:	7504      	strb	r4, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    259e:	4b1b      	ldr	r3, [pc, #108]	; (260c <system_clock_init+0x130>)
    25a0:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    25a2:	4b1b      	ldr	r3, [pc, #108]	; (2610 <system_clock_init+0x134>)
    25a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    25a6:	2007      	movs	r0, #7
    25a8:	4b11      	ldr	r3, [pc, #68]	; (25f0 <system_clock_init+0x114>)
    25aa:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    25ac:	4812      	ldr	r0, [pc, #72]	; (25f8 <system_clock_init+0x11c>)
    25ae:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    25b0:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    25b2:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    25b4:	4013      	ands	r3, r2
    25b6:	2b03      	cmp	r3, #3
    25b8:	d1fb      	bne.n	25b2 <system_clock_init+0xd6>
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    25ba:	3b02      	subs	r3, #2
    25bc:	4a15      	ldr	r2, [pc, #84]	; (2614 <system_clock_init+0x138>)
    25be:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    25c0:	a901      	add	r1, sp, #4
    25c2:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    25c4:	2200      	movs	r2, #0
    25c6:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    25c8:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    25ca:	3207      	adds	r2, #7
    25cc:	700a      	strb	r2, [r1, #0]
    25ce:	720b      	strb	r3, [r1, #8]
    25d0:	2000      	movs	r0, #0
    25d2:	4b0b      	ldr	r3, [pc, #44]	; (2600 <system_clock_init+0x124>)
    25d4:	4798      	blx	r3
    25d6:	2000      	movs	r0, #0
    25d8:	4b0a      	ldr	r3, [pc, #40]	; (2604 <system_clock_init+0x128>)
    25da:	4798      	blx	r3
#endif

}
    25dc:	b00e      	add	sp, #56	; 0x38
    25de:	bc04      	pop	{r2}
    25e0:	4690      	mov	r8, r2
    25e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25e4:	40001800 	.word	0x40001800
    25e8:	41004000 	.word	0x41004000
    25ec:	000022ed 	.word	0x000022ed
    25f0:	00002469 	.word	0x00002469
    25f4:	40001400 	.word	0x40001400
    25f8:	40001000 	.word	0x40001000
    25fc:	00002619 	.word	0x00002619
    2600:	0000263d 	.word	0x0000263d
    2604:	000026e9 	.word	0x000026e9
    2608:	02dc6c00 	.word	0x02dc6c00
    260c:	00007fff 	.word	0x00007fff
    2610:	000023a1 	.word	0x000023a1
    2614:	40000800 	.word	0x40000800

00002618 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    2618:	4a06      	ldr	r2, [pc, #24]	; (2634 <system_gclk_init+0x1c>)
    261a:	6953      	ldr	r3, [r2, #20]
    261c:	2180      	movs	r1, #128	; 0x80
    261e:	430b      	orrs	r3, r1
    2620:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    2622:	2201      	movs	r2, #1
    2624:	4b04      	ldr	r3, [pc, #16]	; (2638 <system_gclk_init+0x20>)
    2626:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2628:	0019      	movs	r1, r3
    262a:	780b      	ldrb	r3, [r1, #0]
    262c:	4213      	tst	r3, r2
    262e:	d1fc      	bne.n	262a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2630:	4770      	bx	lr
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	40000800 	.word	0x40000800
    2638:	40001c00 	.word	0x40001c00

0000263c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    263c:	b570      	push	{r4, r5, r6, lr}
    263e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2640:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2642:	784b      	ldrb	r3, [r1, #1]
    2644:	2b00      	cmp	r3, #0
    2646:	d002      	beq.n	264e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2648:	2380      	movs	r3, #128	; 0x80
    264a:	00db      	lsls	r3, r3, #3
    264c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    264e:	7a4b      	ldrb	r3, [r1, #9]
    2650:	2b00      	cmp	r3, #0
    2652:	d002      	beq.n	265a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2654:	2380      	movs	r3, #128	; 0x80
    2656:	011b      	lsls	r3, r3, #4
    2658:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    265a:	6848      	ldr	r0, [r1, #4]
    265c:	2801      	cmp	r0, #1
    265e:	d90f      	bls.n	2680 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2660:	1e43      	subs	r3, r0, #1
    2662:	4218      	tst	r0, r3
    2664:	d131      	bne.n	26ca <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2666:	2802      	cmp	r0, #2
    2668:	d92d      	bls.n	26c6 <system_gclk_gen_set_config+0x8a>
    266a:	2302      	movs	r3, #2
    266c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    266e:	3201      	adds	r2, #1
						mask <<= 1) {
    2670:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2672:	4298      	cmp	r0, r3
    2674:	d8fb      	bhi.n	266e <system_gclk_gen_set_config+0x32>
    2676:	2380      	movs	r3, #128	; 0x80
    2678:	015b      	lsls	r3, r3, #5
    267a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    267c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    267e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2680:	7a0b      	ldrb	r3, [r1, #8]
    2682:	2b00      	cmp	r3, #0
    2684:	d002      	beq.n	268c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2686:	2380      	movs	r3, #128	; 0x80
    2688:	019b      	lsls	r3, r3, #6
    268a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    268c:	2604      	movs	r6, #4
    268e:	40a6      	lsls	r6, r4
    2690:	4911      	ldr	r1, [pc, #68]	; (26d8 <system_gclk_gen_set_config+0x9c>)
    2692:	4a12      	ldr	r2, [pc, #72]	; (26dc <system_gclk_gen_set_config+0xa0>)
    2694:	684b      	ldr	r3, [r1, #4]
    2696:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    2698:	421e      	tst	r6, r3
    269a:	d1fb      	bne.n	2694 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    269c:	4b10      	ldr	r3, [pc, #64]	; (26e0 <system_gclk_gen_set_config+0xa4>)
    269e:	4798      	blx	r3
    26a0:	00a4      	lsls	r4, r4, #2
    26a2:	4b0d      	ldr	r3, [pc, #52]	; (26d8 <system_gclk_gen_set_config+0x9c>)
    26a4:	469c      	mov	ip, r3
    26a6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    26a8:	6a22      	ldr	r2, [r4, #32]
    26aa:	2380      	movs	r3, #128	; 0x80
    26ac:	005b      	lsls	r3, r3, #1
    26ae:	401a      	ands	r2, r3
    26b0:	432a      	orrs	r2, r5
    26b2:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    26b4:	4661      	mov	r1, ip
    26b6:	4a09      	ldr	r2, [pc, #36]	; (26dc <system_gclk_gen_set_config+0xa0>)
    26b8:	684b      	ldr	r3, [r1, #4]
    26ba:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    26bc:	421e      	tst	r6, r3
    26be:	d1fb      	bne.n	26b8 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    26c0:	4b08      	ldr	r3, [pc, #32]	; (26e4 <system_gclk_gen_set_config+0xa8>)
    26c2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    26c4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    26c6:	2200      	movs	r2, #0
    26c8:	e7d5      	b.n	2676 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    26ca:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    26cc:	2380      	movs	r3, #128	; 0x80
    26ce:	009b      	lsls	r3, r3, #2
    26d0:	4318      	orrs	r0, r3
    26d2:	4305      	orrs	r5, r0
    26d4:	e7d4      	b.n	2680 <system_gclk_gen_set_config+0x44>
    26d6:	46c0      	nop			; (mov r8, r8)
    26d8:	40001c00 	.word	0x40001c00
    26dc:	000007fc 	.word	0x000007fc
    26e0:	00001301 	.word	0x00001301
    26e4:	00001341 	.word	0x00001341

000026e8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    26e8:	b510      	push	{r4, lr}
    26ea:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    26ec:	2204      	movs	r2, #4
    26ee:	4082      	lsls	r2, r0
    26f0:	4809      	ldr	r0, [pc, #36]	; (2718 <system_gclk_gen_enable+0x30>)
    26f2:	490a      	ldr	r1, [pc, #40]	; (271c <system_gclk_gen_enable+0x34>)
    26f4:	6843      	ldr	r3, [r0, #4]
    26f6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    26f8:	421a      	tst	r2, r3
    26fa:	d1fb      	bne.n	26f4 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    26fc:	4b08      	ldr	r3, [pc, #32]	; (2720 <system_gclk_gen_enable+0x38>)
    26fe:	4798      	blx	r3
    2700:	00a4      	lsls	r4, r4, #2
    2702:	4b05      	ldr	r3, [pc, #20]	; (2718 <system_gclk_gen_enable+0x30>)
    2704:	469c      	mov	ip, r3
    2706:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    2708:	6a22      	ldr	r2, [r4, #32]
    270a:	2380      	movs	r3, #128	; 0x80
    270c:	005b      	lsls	r3, r3, #1
    270e:	4313      	orrs	r3, r2
    2710:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    2712:	4b04      	ldr	r3, [pc, #16]	; (2724 <system_gclk_gen_enable+0x3c>)
    2714:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2716:	bd10      	pop	{r4, pc}
    2718:	40001c00 	.word	0x40001c00
    271c:	000007fc 	.word	0x000007fc
    2720:	00001301 	.word	0x00001301
    2724:	00001341 	.word	0x00001341

00002728 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    272a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    272c:	2204      	movs	r2, #4
    272e:	4082      	lsls	r2, r0
    2730:	4812      	ldr	r0, [pc, #72]	; (277c <system_gclk_gen_get_hz+0x54>)
    2732:	4913      	ldr	r1, [pc, #76]	; (2780 <system_gclk_gen_get_hz+0x58>)
    2734:	6843      	ldr	r3, [r0, #4]
    2736:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2738:	421a      	tst	r2, r3
    273a:	d1fb      	bne.n	2734 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    273c:	4b11      	ldr	r3, [pc, #68]	; (2784 <system_gclk_gen_get_hz+0x5c>)
    273e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2740:	4f0e      	ldr	r7, [pc, #56]	; (277c <system_gclk_gen_get_hz+0x54>)
    2742:	3408      	adds	r4, #8
    2744:	00a4      	lsls	r4, r4, #2
    2746:	59e0      	ldr	r0, [r4, r7]
    2748:	0740      	lsls	r0, r0, #29
    274a:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    274c:	4b0e      	ldr	r3, [pc, #56]	; (2788 <system_gclk_gen_get_hz+0x60>)
    274e:	4798      	blx	r3
    2750:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    2752:	59e5      	ldr	r5, [r4, r7]
    2754:	04ed      	lsls	r5, r5, #19
    2756:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    2758:	59e4      	ldr	r4, [r4, r7]
    275a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    275c:	4b0b      	ldr	r3, [pc, #44]	; (278c <system_gclk_gen_get_hz+0x64>)
    275e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2760:	2d00      	cmp	r5, #0
    2762:	d107      	bne.n	2774 <system_gclk_gen_get_hz+0x4c>
    2764:	2c01      	cmp	r4, #1
    2766:	d907      	bls.n	2778 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    2768:	0021      	movs	r1, r4
    276a:	0030      	movs	r0, r6
    276c:	4b08      	ldr	r3, [pc, #32]	; (2790 <system_gclk_gen_get_hz+0x68>)
    276e:	4798      	blx	r3
    2770:	0006      	movs	r6, r0
    2772:	e001      	b.n	2778 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2774:	3401      	adds	r4, #1
    2776:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    2778:	0030      	movs	r0, r6
    277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    277c:	40001c00 	.word	0x40001c00
    2780:	000007fc 	.word	0x000007fc
    2784:	00001301 	.word	0x00001301
    2788:	00002291 	.word	0x00002291
    278c:	00001341 	.word	0x00001341
    2790:	000064a5 	.word	0x000064a5

00002794 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2794:	b510      	push	{r4, lr}
    2796:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2798:	4b09      	ldr	r3, [pc, #36]	; (27c0 <system_gclk_chan_enable+0x2c>)
    279a:	4798      	blx	r3
    279c:	00a0      	lsls	r0, r4, #2
    279e:	4b09      	ldr	r3, [pc, #36]	; (27c4 <system_gclk_chan_enable+0x30>)
    27a0:	469c      	mov	ip, r3
    27a2:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    27a4:	2280      	movs	r2, #128	; 0x80
    27a6:	5883      	ldr	r3, [r0, r2]
    27a8:	2140      	movs	r1, #64	; 0x40
    27aa:	430b      	orrs	r3, r1
    27ac:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    27ae:	3140      	adds	r1, #64	; 0x40
    27b0:	3a40      	subs	r2, #64	; 0x40
    27b2:	5843      	ldr	r3, [r0, r1]
    27b4:	421a      	tst	r2, r3
    27b6:	d0fc      	beq.n	27b2 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    27b8:	4b03      	ldr	r3, [pc, #12]	; (27c8 <system_gclk_chan_enable+0x34>)
    27ba:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    27bc:	bd10      	pop	{r4, pc}
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	00001301 	.word	0x00001301
    27c4:	40001c00 	.word	0x40001c00
    27c8:	00001341 	.word	0x00001341

000027cc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    27cc:	b510      	push	{r4, lr}
    27ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    27d0:	4b09      	ldr	r3, [pc, #36]	; (27f8 <system_gclk_chan_disable+0x2c>)
    27d2:	4798      	blx	r3
    27d4:	00a0      	lsls	r0, r4, #2
    27d6:	4b09      	ldr	r3, [pc, #36]	; (27fc <system_gclk_chan_disable+0x30>)
    27d8:	469c      	mov	ip, r3
    27da:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    27dc:	2280      	movs	r2, #128	; 0x80
    27de:	5883      	ldr	r3, [r0, r2]
    27e0:	2140      	movs	r1, #64	; 0x40
    27e2:	438b      	bics	r3, r1
    27e4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    27e6:	3140      	adds	r1, #64	; 0x40
    27e8:	3a40      	subs	r2, #64	; 0x40
    27ea:	5843      	ldr	r3, [r0, r1]
    27ec:	421a      	tst	r2, r3
    27ee:	d1fc      	bne.n	27ea <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    27f0:	4b03      	ldr	r3, [pc, #12]	; (2800 <system_gclk_chan_disable+0x34>)
    27f2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    27f4:	bd10      	pop	{r4, pc}
    27f6:	46c0      	nop			; (mov r8, r8)
    27f8:	00001301 	.word	0x00001301
    27fc:	40001c00 	.word	0x40001c00
    2800:	00001341 	.word	0x00001341

00002804 <system_gclk_chan_set_config>:
{
    2804:	b570      	push	{r4, r5, r6, lr}
    2806:	0004      	movs	r4, r0
    2808:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    280a:	4b05      	ldr	r3, [pc, #20]	; (2820 <system_gclk_chan_set_config+0x1c>)
    280c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    280e:	782a      	ldrb	r2, [r5, #0]
    2810:	230f      	movs	r3, #15
    2812:	4013      	ands	r3, r2
    2814:	3420      	adds	r4, #32
    2816:	00a4      	lsls	r4, r4, #2
    2818:	4a02      	ldr	r2, [pc, #8]	; (2824 <system_gclk_chan_set_config+0x20>)
    281a:	50a3      	str	r3, [r4, r2]
}
    281c:	bd70      	pop	{r4, r5, r6, pc}
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	000027cd 	.word	0x000027cd
    2824:	40001c00 	.word	0x40001c00

00002828 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2828:	b510      	push	{r4, lr}
    282a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    282c:	4b06      	ldr	r3, [pc, #24]	; (2848 <system_gclk_chan_get_hz+0x20>)
    282e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    2830:	3420      	adds	r4, #32
    2832:	00a4      	lsls	r4, r4, #2
    2834:	4b05      	ldr	r3, [pc, #20]	; (284c <system_gclk_chan_get_hz+0x24>)
    2836:	58e4      	ldr	r4, [r4, r3]
    2838:	0724      	lsls	r4, r4, #28
    283a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    283c:	4b04      	ldr	r3, [pc, #16]	; (2850 <system_gclk_chan_get_hz+0x28>)
    283e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2840:	0020      	movs	r0, r4
    2842:	4b04      	ldr	r3, [pc, #16]	; (2854 <system_gclk_chan_get_hz+0x2c>)
    2844:	4798      	blx	r3
}
    2846:	bd10      	pop	{r4, pc}
    2848:	00001301 	.word	0x00001301
    284c:	40001c00 	.word	0x40001c00
    2850:	00001341 	.word	0x00001341
    2854:	00002729 	.word	0x00002729

00002858 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2858:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    285a:	78d3      	ldrb	r3, [r2, #3]
    285c:	2b00      	cmp	r3, #0
    285e:	d135      	bne.n	28cc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2860:	7813      	ldrb	r3, [r2, #0]
    2862:	2b80      	cmp	r3, #128	; 0x80
    2864:	d029      	beq.n	28ba <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2866:	061b      	lsls	r3, r3, #24
    2868:	2480      	movs	r4, #128	; 0x80
    286a:	0264      	lsls	r4, r4, #9
    286c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    286e:	7854      	ldrb	r4, [r2, #1]
    2870:	2502      	movs	r5, #2
    2872:	43ac      	bics	r4, r5
    2874:	d106      	bne.n	2884 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2876:	7894      	ldrb	r4, [r2, #2]
    2878:	2c00      	cmp	r4, #0
    287a:	d120      	bne.n	28be <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    287c:	2480      	movs	r4, #128	; 0x80
    287e:	02a4      	lsls	r4, r4, #10
    2880:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2882:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2884:	7854      	ldrb	r4, [r2, #1]
    2886:	3c01      	subs	r4, #1
    2888:	2c01      	cmp	r4, #1
    288a:	d91c      	bls.n	28c6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    288c:	040d      	lsls	r5, r1, #16
    288e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2890:	24a0      	movs	r4, #160	; 0xa0
    2892:	05e4      	lsls	r4, r4, #23
    2894:	432c      	orrs	r4, r5
    2896:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2898:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    289a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    289c:	24d0      	movs	r4, #208	; 0xd0
    289e:	0624      	lsls	r4, r4, #24
    28a0:	432c      	orrs	r4, r5
    28a2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28a4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    28a6:	78d4      	ldrb	r4, [r2, #3]
    28a8:	2c00      	cmp	r4, #0
    28aa:	d122      	bne.n	28f2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    28ac:	035b      	lsls	r3, r3, #13
    28ae:	d51c      	bpl.n	28ea <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    28b0:	7893      	ldrb	r3, [r2, #2]
    28b2:	2b01      	cmp	r3, #1
    28b4:	d01e      	beq.n	28f4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    28b6:	6141      	str	r1, [r0, #20]
    28b8:	e017      	b.n	28ea <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    28ba:	2300      	movs	r3, #0
    28bc:	e7d7      	b.n	286e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    28be:	24c0      	movs	r4, #192	; 0xc0
    28c0:	02e4      	lsls	r4, r4, #11
    28c2:	4323      	orrs	r3, r4
    28c4:	e7dd      	b.n	2882 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    28c6:	4c0d      	ldr	r4, [pc, #52]	; (28fc <_system_pinmux_config+0xa4>)
    28c8:	4023      	ands	r3, r4
    28ca:	e7df      	b.n	288c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    28cc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    28ce:	040c      	lsls	r4, r1, #16
    28d0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    28d2:	23a0      	movs	r3, #160	; 0xa0
    28d4:	05db      	lsls	r3, r3, #23
    28d6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28d8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    28da:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    28dc:	23d0      	movs	r3, #208	; 0xd0
    28de:	061b      	lsls	r3, r3, #24
    28e0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28e2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    28e4:	78d3      	ldrb	r3, [r2, #3]
    28e6:	2b00      	cmp	r3, #0
    28e8:	d103      	bne.n	28f2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    28ea:	7853      	ldrb	r3, [r2, #1]
    28ec:	3b01      	subs	r3, #1
    28ee:	2b01      	cmp	r3, #1
    28f0:	d902      	bls.n	28f8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    28f2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    28f4:	6181      	str	r1, [r0, #24]
    28f6:	e7f8      	b.n	28ea <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    28f8:	6081      	str	r1, [r0, #8]
}
    28fa:	e7fa      	b.n	28f2 <_system_pinmux_config+0x9a>
    28fc:	fffbffff 	.word	0xfffbffff

00002900 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2900:	b510      	push	{r4, lr}
    2902:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2904:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2906:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2908:	2900      	cmp	r1, #0
    290a:	d105      	bne.n	2918 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    290c:	0943      	lsrs	r3, r0, #5
    290e:	01db      	lsls	r3, r3, #7
    2910:	2182      	movs	r1, #130	; 0x82
    2912:	05c9      	lsls	r1, r1, #23
    2914:	468c      	mov	ip, r1
    2916:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2918:	241f      	movs	r4, #31
    291a:	4020      	ands	r0, r4
    291c:	2101      	movs	r1, #1
    291e:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2920:	0018      	movs	r0, r3
    2922:	4b01      	ldr	r3, [pc, #4]	; (2928 <system_pinmux_pin_set_config+0x28>)
    2924:	4798      	blx	r3
}
    2926:	bd10      	pop	{r4, pc}
    2928:	00002859 	.word	0x00002859

0000292c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    292c:	4770      	bx	lr
	...

00002930 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2930:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2932:	4b05      	ldr	r3, [pc, #20]	; (2948 <system_init+0x18>)
    2934:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2936:	4b05      	ldr	r3, [pc, #20]	; (294c <system_init+0x1c>)
    2938:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    293a:	4b05      	ldr	r3, [pc, #20]	; (2950 <system_init+0x20>)
    293c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    293e:	4b05      	ldr	r3, [pc, #20]	; (2954 <system_init+0x24>)
    2940:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2942:	4b05      	ldr	r3, [pc, #20]	; (2958 <system_init+0x28>)
    2944:	4798      	blx	r3
}
    2946:	bd10      	pop	{r4, pc}
    2948:	000024dd 	.word	0x000024dd
    294c:	00001371 	.word	0x00001371
    2950:	0000292d 	.word	0x0000292d
    2954:	0000292d 	.word	0x0000292d
    2958:	0000292d 	.word	0x0000292d

0000295c <Dummy_Handler>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    295c:	f3ef 8305 	mrs	r3, IPSR
    2960:	e7fc      	b.n	295c <Dummy_Handler>
	...

00002964 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2964:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2966:	4a17      	ldr	r2, [pc, #92]	; (29c4 <Reset_Handler+0x60>)
    2968:	4b17      	ldr	r3, [pc, #92]	; (29c8 <Reset_Handler+0x64>)
    296a:	429a      	cmp	r2, r3
    296c:	d011      	beq.n	2992 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    296e:	001a      	movs	r2, r3
    2970:	4b16      	ldr	r3, [pc, #88]	; (29cc <Reset_Handler+0x68>)
    2972:	429a      	cmp	r2, r3
    2974:	d20d      	bcs.n	2992 <Reset_Handler+0x2e>
    2976:	4a16      	ldr	r2, [pc, #88]	; (29d0 <Reset_Handler+0x6c>)
    2978:	3303      	adds	r3, #3
    297a:	1a9b      	subs	r3, r3, r2
    297c:	089b      	lsrs	r3, r3, #2
    297e:	3301      	adds	r3, #1
    2980:	009b      	lsls	r3, r3, #2
    2982:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2984:	4810      	ldr	r0, [pc, #64]	; (29c8 <Reset_Handler+0x64>)
    2986:	490f      	ldr	r1, [pc, #60]	; (29c4 <Reset_Handler+0x60>)
    2988:	588c      	ldr	r4, [r1, r2]
    298a:	5084      	str	r4, [r0, r2]
    298c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    298e:	429a      	cmp	r2, r3
    2990:	d1fa      	bne.n	2988 <Reset_Handler+0x24>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2992:	4a10      	ldr	r2, [pc, #64]	; (29d4 <Reset_Handler+0x70>)
    2994:	4b10      	ldr	r3, [pc, #64]	; (29d8 <Reset_Handler+0x74>)
    2996:	429a      	cmp	r2, r3
    2998:	d20a      	bcs.n	29b0 <Reset_Handler+0x4c>
    299a:	43d3      	mvns	r3, r2
    299c:	490e      	ldr	r1, [pc, #56]	; (29d8 <Reset_Handler+0x74>)
    299e:	185b      	adds	r3, r3, r1
    29a0:	2103      	movs	r1, #3
    29a2:	438b      	bics	r3, r1
    29a4:	3304      	adds	r3, #4
    29a6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    29a8:	2100      	movs	r1, #0
    29aa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    29ac:	4293      	cmp	r3, r2
    29ae:	d1fc      	bne.n	29aa <Reset_Handler+0x46>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    29b0:	4a0a      	ldr	r2, [pc, #40]	; (29dc <Reset_Handler+0x78>)
    29b2:	21ff      	movs	r1, #255	; 0xff
    29b4:	4b0a      	ldr	r3, [pc, #40]	; (29e0 <Reset_Handler+0x7c>)
    29b6:	438b      	bics	r3, r1
    29b8:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    29ba:	4b0a      	ldr	r3, [pc, #40]	; (29e4 <Reset_Handler+0x80>)
    29bc:	4798      	blx	r3

        /* Branch to main function */
        main();
    29be:	4b0a      	ldr	r3, [pc, #40]	; (29e8 <Reset_Handler+0x84>)
    29c0:	4798      	blx	r3
    29c2:	e7fe      	b.n	29c2 <Reset_Handler+0x5e>
    29c4:	0000b1ec 	.word	0x0000b1ec
    29c8:	20000000 	.word	0x20000000
    29cc:	200002e8 	.word	0x200002e8
    29d0:	20000004 	.word	0x20000004
    29d4:	200002e8 	.word	0x200002e8
    29d8:	2000393c 	.word	0x2000393c
    29dc:	e000ed00 	.word	0xe000ed00
    29e0:	00000000 	.word	0x00000000
    29e4:	000067e5 	.word	0x000067e5
    29e8:	00005c4d 	.word	0x00005c4d

000029ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    29ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ee:	46c6      	mov	lr, r8
    29f0:	b500      	push	{lr}
    29f2:	000c      	movs	r4, r1
    29f4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    29f6:	2800      	cmp	r0, #0
    29f8:	d10f      	bne.n	2a1a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    29fa:	2a00      	cmp	r2, #0
    29fc:	dd11      	ble.n	2a22 <_read+0x36>
    29fe:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2a00:	4e09      	ldr	r6, [pc, #36]	; (2a28 <_read+0x3c>)
    2a02:	4d0a      	ldr	r5, [pc, #40]	; (2a2c <_read+0x40>)
    2a04:	6830      	ldr	r0, [r6, #0]
    2a06:	0021      	movs	r1, r4
    2a08:	682b      	ldr	r3, [r5, #0]
    2a0a:	4798      	blx	r3
		ptr++;
    2a0c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2a0e:	42bc      	cmp	r4, r7
    2a10:	d1f8      	bne.n	2a04 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2a12:	4640      	mov	r0, r8
    2a14:	bc04      	pop	{r2}
    2a16:	4690      	mov	r8, r2
    2a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2a1a:	2301      	movs	r3, #1
    2a1c:	425b      	negs	r3, r3
    2a1e:	4698      	mov	r8, r3
    2a20:	e7f7      	b.n	2a12 <_read+0x26>
	for (; len > 0; --len) {
    2a22:	4680      	mov	r8, r0
    2a24:	e7f5      	b.n	2a12 <_read+0x26>
    2a26:	46c0      	nop			; (mov r8, r8)
    2a28:	200025d0 	.word	0x200025d0
    2a2c:	200025c8 	.word	0x200025c8

00002a30 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a32:	46c6      	mov	lr, r8
    2a34:	b500      	push	{lr}
    2a36:	000e      	movs	r6, r1
    2a38:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2a3a:	3801      	subs	r0, #1
    2a3c:	2802      	cmp	r0, #2
    2a3e:	d810      	bhi.n	2a62 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2a40:	2a00      	cmp	r2, #0
    2a42:	d011      	beq.n	2a68 <_write+0x38>
    2a44:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2a46:	4b0c      	ldr	r3, [pc, #48]	; (2a78 <_write+0x48>)
    2a48:	4698      	mov	r8, r3
    2a4a:	4f0c      	ldr	r7, [pc, #48]	; (2a7c <_write+0x4c>)
    2a4c:	4643      	mov	r3, r8
    2a4e:	6818      	ldr	r0, [r3, #0]
    2a50:	5d31      	ldrb	r1, [r6, r4]
    2a52:	683b      	ldr	r3, [r7, #0]
    2a54:	4798      	blx	r3
    2a56:	2800      	cmp	r0, #0
    2a58:	db08      	blt.n	2a6c <_write+0x3c>
			return -1;
		}
		++nChars;
    2a5a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2a5c:	42a5      	cmp	r5, r4
    2a5e:	d1f5      	bne.n	2a4c <_write+0x1c>
    2a60:	e006      	b.n	2a70 <_write+0x40>
		return -1;
    2a62:	2401      	movs	r4, #1
    2a64:	4264      	negs	r4, r4
    2a66:	e003      	b.n	2a70 <_write+0x40>
	for (; len != 0; --len) {
    2a68:	0014      	movs	r4, r2
    2a6a:	e001      	b.n	2a70 <_write+0x40>
			return -1;
    2a6c:	2401      	movs	r4, #1
    2a6e:	4264      	negs	r4, r4
	}
	return nChars;
}
    2a70:	0020      	movs	r0, r4
    2a72:	bc04      	pop	{r2}
    2a74:	4690      	mov	r8, r2
    2a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a78:	200025d0 	.word	0x200025d0
    2a7c:	200025cc 	.word	0x200025cc

00002a80 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2a80:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2a82:	4a06      	ldr	r2, [pc, #24]	; (2a9c <_sbrk+0x1c>)
    2a84:	6812      	ldr	r2, [r2, #0]
    2a86:	2a00      	cmp	r2, #0
    2a88:	d004      	beq.n	2a94 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2a8a:	4a04      	ldr	r2, [pc, #16]	; (2a9c <_sbrk+0x1c>)
    2a8c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2a8e:	18c3      	adds	r3, r0, r3
    2a90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2a92:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2a94:	4902      	ldr	r1, [pc, #8]	; (2aa0 <_sbrk+0x20>)
    2a96:	4a01      	ldr	r2, [pc, #4]	; (2a9c <_sbrk+0x1c>)
    2a98:	6011      	str	r1, [r2, #0]
    2a9a:	e7f6      	b.n	2a8a <_sbrk+0xa>
    2a9c:	20002534 	.word	0x20002534
    2aa0:	20005940 	.word	0x20005940

00002aa4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2aa4:	2001      	movs	r0, #1
    2aa6:	4240      	negs	r0, r0
    2aa8:	4770      	bx	lr

00002aaa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2aaa:	2380      	movs	r3, #128	; 0x80
    2aac:	019b      	lsls	r3, r3, #6
    2aae:	604b      	str	r3, [r1, #4]

	return 0;
}
    2ab0:	2000      	movs	r0, #0
    2ab2:	4770      	bx	lr

00002ab4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2ab4:	2001      	movs	r0, #1
    2ab6:	4770      	bx	lr

00002ab8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2ab8:	2000      	movs	r0, #0
    2aba:	4770      	bx	lr

00002abc <EnrollNodes>:
static void Delay_ms(uint32_t ms);
uint32_t ul_tickcount = 0;
#define TIMEVAL (ul_tickcount+(SysTick->VAL)/48000)

bool EnrollNodes(int total_nodes, uint8_t (*StoredPublicKeys)[32],
	uint8_t (*StoredResponseHashes)[16], uint8_t *ec, struct can_module * can_inst){
    2abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2abe:	46de      	mov	lr, fp
    2ac0:	4657      	mov	r7, sl
    2ac2:	464e      	mov	r6, r9
    2ac4:	4645      	mov	r5, r8
    2ac6:	b5e0      	push	{r5, r6, r7, lr}
    2ac8:	b09d      	sub	sp, #116	; 0x74
    2aca:	4683      	mov	fp, r0
    2acc:	9101      	str	r1, [sp, #4]
    2ace:	4690      	mov	r8, r2
    2ad0:	9c26      	ldr	r4, [sp, #152]	; 0x98
	ECCRYPTO_STATUS Status;
	
	struct can_standard_message_filter_element sd_filter;
	struct can_tx_element tx_element;
	
	printf("\r\nWelcome to the PUF-based CAN Security Demo!\r\n");
    2ad2:	48c1      	ldr	r0, [pc, #772]	; (2dd8 <EnrollNodes+0x31c>)
    2ad4:	4bc1      	ldr	r3, [pc, #772]	; (2ddc <EnrollNodes+0x320>)
    2ad6:	4798      	blx	r3
	printf("Press 'h' to begin with hardcoded values: ");
    2ad8:	48c1      	ldr	r0, [pc, #772]	; (2de0 <EnrollNodes+0x324>)
    2ada:	4bc2      	ldr	r3, [pc, #776]	; (2de4 <EnrollNodes+0x328>)
    2adc:	4798      	blx	r3
	
	char c;
	scanf("%c", &c);
    2ade:	ab04      	add	r3, sp, #16
    2ae0:	1cde      	adds	r6, r3, #3
    2ae2:	0031      	movs	r1, r6
    2ae4:	48c0      	ldr	r0, [pc, #768]	; (2de8 <EnrollNodes+0x32c>)
    2ae6:	4bc1      	ldr	r3, [pc, #772]	; (2dec <EnrollNodes+0x330>)
    2ae8:	4798      	blx	r3
	
	while((c != 'h')) {
    2aea:	7833      	ldrb	r3, [r6, #0]
    2aec:	2b68      	cmp	r3, #104	; 0x68
    2aee:	d00e      	beq.n	2b0e <EnrollNodes+0x52>
		printf("How could you...\r\n");
    2af0:	4bbf      	ldr	r3, [pc, #764]	; (2df0 <EnrollNodes+0x334>)
    2af2:	469a      	mov	sl, r3
    2af4:	4fb9      	ldr	r7, [pc, #740]	; (2ddc <EnrollNodes+0x320>)
		scanf("%c", &c);
    2af6:	4dbc      	ldr	r5, [pc, #752]	; (2de8 <EnrollNodes+0x32c>)
		printf("How could you...\r\n");
    2af8:	4650      	mov	r0, sl
    2afa:	47b8      	blx	r7
		scanf("%c", &c);
    2afc:	ab04      	add	r3, sp, #16
    2afe:	1cde      	adds	r6, r3, #3
    2b00:	0031      	movs	r1, r6
    2b02:	0028      	movs	r0, r5
    2b04:	4bb9      	ldr	r3, [pc, #740]	; (2dec <EnrollNodes+0x330>)
    2b06:	4798      	blx	r3
	while((c != 'h')) {
    2b08:	7833      	ldrb	r3, [r6, #0]
    2b0a:	2b68      	cmp	r3, #104	; 0x68
    2b0c:	d1f4      	bne.n	2af8 <EnrollNodes+0x3c>
	}
	
	if(c == 'h') {
		printf("\r\nPUF responses will be hardcoded values for enrollment and authentication\r\n");
    2b0e:	48b9      	ldr	r0, [pc, #740]	; (2df4 <EnrollNodes+0x338>)
    2b10:	4bb2      	ldr	r3, [pc, #712]	; (2ddc <EnrollNodes+0x320>)
    2b12:	4798      	blx	r3
	else {
		// Case is available if a second option becomes available
	}
	
	// Handler set to enrollment phase
	STAGE = ENROLLMENT;
    2b14:	2200      	movs	r2, #0
    2b16:	4bb8      	ldr	r3, [pc, #736]	; (2df8 <EnrollNodes+0x33c>)
    2b18:	701a      	strb	r2, [r3, #0]

	 printf("Start: %d\r\n",startVal);
    2b1a:	4bb8      	ldr	r3, [pc, #736]	; (2dfc <EnrollNodes+0x340>)
    2b1c:	6819      	ldr	r1, [r3, #0]
    2b1e:	48b8      	ldr	r0, [pc, #736]	; (2e00 <EnrollNodes+0x344>)
    2b20:	4bb0      	ldr	r3, [pc, #704]	; (2de4 <EnrollNodes+0x328>)
    2b22:	4798      	blx	r3
	 
	// Responses will be first stored in StoredPublicKeys
	for(int i = 0; i <= total_nodes; i++) {
    2b24:	465b      	mov	r3, fp
    2b26:	2b00      	cmp	r3, #0
    2b28:	db0a      	blt.n	2b40 <EnrollNodes+0x84>
    2b2a:	9d01      	ldr	r5, [sp, #4]
    2b2c:	2600      	movs	r6, #0
		memset(StoredPublicKeys[i],0,32);
    2b2e:	4fb5      	ldr	r7, [pc, #724]	; (2e04 <EnrollNodes+0x348>)
    2b30:	2220      	movs	r2, #32
    2b32:	2100      	movs	r1, #0
    2b34:	0028      	movs	r0, r5
    2b36:	47b8      	blx	r7
	for(int i = 0; i <= total_nodes; i++) {
    2b38:	3601      	adds	r6, #1
    2b3a:	3520      	adds	r5, #32
    2b3c:	45b3      	cmp	fp, r6
    2b3e:	daf7      	bge.n	2b30 <EnrollNodes+0x74>
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void can_get_tx_buffer_element_defaults(
		struct can_tx_element *tx_element)
{
	tx_element->T0.reg = 0;
    2b40:	2300      	movs	r3, #0
    2b42:	9305      	str	r3, [sp, #20]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    2b44:	2388      	movs	r3, #136	; 0x88
    2b46:	041b      	lsls	r3, r3, #16
    2b48:	9306      	str	r3, [sp, #24]
	}
	
	// Let everyone know to either prepare for public keys or use hardcoded values
	// Nodes should be looking for 0x411
	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x411);
    2b4a:	9a05      	ldr	r2, [sp, #20]
    2b4c:	4bae      	ldr	r3, [pc, #696]	; (2e08 <EnrollNodes+0x34c>)
    2b4e:	4313      	orrs	r3, r2
    2b50:	9305      	str	r3, [sp, #20]
	tx_element.T1.reg = CAN_TX_ELEMENT_T1_FDF | CAN_TX_ELEMENT_T1_BRS |
    2b52:	23e0      	movs	r3, #224	; 0xe0
    2b54:	039b      	lsls	r3, r3, #14
    2b56:	9306      	str	r3, [sp, #24]
		CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA8_Val);
	memset(tx_element.data,hardcoded,8);
    2b58:	2208      	movs	r2, #8
    2b5a:	2101      	movs	r1, #1
    2b5c:	a807      	add	r0, sp, #28
    2b5e:	4ba9      	ldr	r3, [pc, #676]	; (2e04 <EnrollNodes+0x348>)
    2b60:	4798      	blx	r3
	can_set_tx_buffer_element(can_inst, &tx_element,
    2b62:	2201      	movs	r2, #1
    2b64:	a905      	add	r1, sp, #20
    2b66:	0020      	movs	r0, r4
    2b68:	4ba8      	ldr	r3, [pc, #672]	; (2e0c <EnrollNodes+0x350>)
    2b6a:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    2b6c:	6823      	ldr	r3, [r4, #0]
    2b6e:	699a      	ldr	r2, [r3, #24]
    2b70:	0792      	lsls	r2, r2, #30
    2b72:	d402      	bmi.n	2b7a <EnrollNodes+0xbe>
	module_inst->hw->TXBAR.reg = trig_mask;
    2b74:	2102      	movs	r1, #2
    2b76:	22d0      	movs	r2, #208	; 0xd0
    2b78:	5099      	str	r1, [r3, r2]
	return module_inst->hw->TXBTO.reg;
    2b7a:	6821      	ldr	r1, [r4, #0]
    2b7c:	22d8      	movs	r2, #216	; 0xd8
		CAN_FILTER_REGULAR_SEND);
	can_tx_transfer_request(can_inst, 1 << CAN_FILTER_REGULAR_SEND);
	
	while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_FILTER_REGULAR_SEND)));
    2b7e:	2302      	movs	r3, #2
    2b80:	5888      	ldr	r0, [r1, r2]
    2b82:	4203      	tst	r3, r0
    2b84:	d0fc      	beq.n	2b80 <EnrollNodes+0xc4>
	
	if(hardcoded) {
		//printf("Hardcoding a response\r\n");
		memset(StoredPublicKeys[0],0xFF,16);
    2b86:	2210      	movs	r2, #16
    2b88:	21ff      	movs	r1, #255	; 0xff
    2b8a:	9d01      	ldr	r5, [sp, #4]
    2b8c:	0028      	movs	r0, r5
    2b8e:	4b9d      	ldr	r3, [pc, #628]	; (2e04 <EnrollNodes+0x348>)
    2b90:	4798      	blx	r3
	else {
		printf("Cannot generate a response.\r\n");
	}
	
	Status = ECCRYPTO_SUCCESS;
	Status = CompressedKeyGeneration(StoredPublicKeys[0], StoredPublicKeys[0]);
    2b92:	0029      	movs	r1, r5
    2b94:	0028      	movs	r0, r5
    2b96:	4b9e      	ldr	r3, [pc, #632]	; (2e10 <EnrollNodes+0x354>)
    2b98:	4798      	blx	r3
	//printf("Something was supposed to happen here 1.\r\n");
	if (Status != ECCRYPTO_SUCCESS) {
    2b9a:	2801      	cmp	r0, #1
    2b9c:	d003      	beq.n	2ba6 <EnrollNodes+0xea>
		printf("Enrollment: Failed server public key generation!\r\n");
    2b9e:	489d      	ldr	r0, [pc, #628]	; (2e14 <EnrollNodes+0x358>)
    2ba0:	4b8e      	ldr	r3, [pc, #568]	; (2ddc <EnrollNodes+0x320>)
    2ba2:	4798      	blx	r3
    2ba4:	e7fe      	b.n	2ba4 <EnrollNodes+0xe8>
		can_tx_transfer_request(can_inst, 1 << CAN_FILTER_REGULAR_SEND);
		while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_FILTER_REGULAR_SEND)));
		Delay_ms(50);
	}
	*/
	memcpy(tx_element.data,&StoredPublicKeys[0][0],24);
    2ba6:	2218      	movs	r2, #24
    2ba8:	9901      	ldr	r1, [sp, #4]
    2baa:	a807      	add	r0, sp, #28
    2bac:	4b9a      	ldr	r3, [pc, #616]	; (2e18 <EnrollNodes+0x35c>)
    2bae:	4798      	blx	r3
	tx_element->T0.reg = 0;
    2bb0:	2300      	movs	r3, #0
    2bb2:	9305      	str	r3, [sp, #20]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    2bb4:	2388      	movs	r3, #136	; 0x88
    2bb6:	041b      	lsls	r3, r3, #16
    2bb8:	9306      	str	r3, [sp, #24]
	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x100);
    2bba:	9a05      	ldr	r2, [sp, #20]
    2bbc:	2380      	movs	r3, #128	; 0x80
    2bbe:	04db      	lsls	r3, r3, #19
    2bc0:	4313      	orrs	r3, r2
    2bc2:	9305      	str	r3, [sp, #20]
	tx_element.T1.reg = CAN_TX_ELEMENT_T1_FDF | CAN_TX_ELEMENT_T1_BRS |
    2bc4:	23f0      	movs	r3, #240	; 0xf0
    2bc6:	039b      	lsls	r3, r3, #14
    2bc8:	9306      	str	r3, [sp, #24]
		CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA24_Val);
	can_set_tx_buffer_element(can_inst,&tx_element,CAN_FILTER_REGULAR_SEND);
    2bca:	2201      	movs	r2, #1
    2bcc:	a905      	add	r1, sp, #20
    2bce:	0020      	movs	r0, r4
    2bd0:	4b8e      	ldr	r3, [pc, #568]	; (2e0c <EnrollNodes+0x350>)
    2bd2:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    2bd4:	6823      	ldr	r3, [r4, #0]
    2bd6:	699a      	ldr	r2, [r3, #24]
    2bd8:	0792      	lsls	r2, r2, #30
    2bda:	d402      	bmi.n	2be2 <EnrollNodes+0x126>
	module_inst->hw->TXBAR.reg = trig_mask;
    2bdc:	2102      	movs	r1, #2
    2bde:	22d0      	movs	r2, #208	; 0xd0
    2be0:	5099      	str	r1, [r3, r2]
	return module_inst->hw->TXBTO.reg;
    2be2:	6821      	ldr	r1, [r4, #0]
    2be4:	22d8      	movs	r2, #216	; 0xd8
	can_tx_transfer_request(can_inst, 1 << CAN_FILTER_REGULAR_SEND);
	while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_FILTER_REGULAR_SEND)));
    2be6:	2302      	movs	r3, #2
    2be8:	5888      	ldr	r0, [r1, r2]
    2bea:	4203      	tst	r3, r0
    2bec:	d0fc      	beq.n	2be8 <EnrollNodes+0x12c>
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    2bee:	4b8b      	ldr	r3, [pc, #556]	; (2e1c <EnrollNodes+0x360>)
    2bf0:	9317      	str	r3, [sp, #92]	; 0x5c
	
	// Configure to receive on CAN Object CAN_FILTER_REGULAR_REC
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID1 = 0x301;
    2bf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2bf4:	4a8a      	ldr	r2, [pc, #552]	; (2e20 <EnrollNodes+0x364>)
    2bf6:	401a      	ands	r2, r3
    2bf8:	4b8a      	ldr	r3, [pc, #552]	; (2e24 <EnrollNodes+0x368>)
    2bfa:	4313      	orrs	r3, r2
    2bfc:	9317      	str	r3, [sp, #92]	; 0x5c
	sd_filter.S0.bit.SFID2 = CAN_FILTER_REGULAR_REC;
    2bfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2c00:	0adb      	lsrs	r3, r3, #11
    2c02:	02db      	lsls	r3, r3, #11
    2c04:	2202      	movs	r2, #2
    2c06:	4313      	orrs	r3, r2
    2c08:	9317      	str	r3, [sp, #92]	; 0x5c
	sd_filter.S0.bit.SFEC =
    2c0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    2c0c:	23e0      	movs	r3, #224	; 0xe0
    2c0e:	059b      	lsls	r3, r3, #22
    2c10:	4313      	orrs	r3, r2
    2c12:	9317      	str	r3, [sp, #92]	; 0x5c
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	//Delay_ms(20);
	for (int i = 1; i <= total_nodes; i++) {
    2c14:	465b      	mov	r3, fp
    2c16:	2b00      	cmp	r3, #0
    2c18:	dc00      	bgt.n	2c1c <EnrollNodes+0x160>
    2c1a:	e0a6      	b.n	2d6a <EnrollNodes+0x2ae>
    2c1c:	9f01      	ldr	r7, [sp, #4]
    2c1e:	3720      	adds	r7, #32
    2c20:	2310      	movs	r3, #16
    2c22:	4443      	add	r3, r8
    2c24:	469a      	mov	sl, r3
    2c26:	4e80      	ldr	r6, [pc, #512]	; (2e28 <EnrollNodes+0x36c>)
    2c28:	2301      	movs	r3, #1
    2c2a:	4699      	mov	r9, r3
		//printf("Now on Node %d\r\n",i);
		
		// Receive node[i]'s response on 0x200 + ID
		g_received = 0;
    2c2c:	4b7f      	ldr	r3, [pc, #508]	; (2e2c <EnrollNodes+0x370>)
    2c2e:	4698      	mov	r8, r3
    2c30:	2300      	movs	r3, #0
    2c32:	9303      	str	r3, [sp, #12]
		can_get_standard_message_filter_element_default(&sd_filter);
		sd_filter.S0.bit.SFID1 = 0x200 + i;
		sd_filter.S0.bit.SFID2 = CAN_FILTER_REGULAR_REC;
    2c34:	2502      	movs	r5, #2
    2c36:	9426      	str	r4, [sp, #152]	; 0x98
    2c38:	465b      	mov	r3, fp
    2c3a:	9302      	str	r3, [sp, #8]
    2c3c:	46a3      	mov	fp, r4
    2c3e:	e046      	b.n	2cce <EnrollNodes+0x212>
	return module_inst->hw->TXBTO.reg;
    2c40:	465b      	mov	r3, fp
    2c42:	6819      	ldr	r1, [r3, #0]
    2c44:	22d8      	movs	r2, #216	; 0xd8
    2c46:	9c02      	ldr	r4, [sp, #8]
    2c48:	588b      	ldr	r3, [r1, r2]
		
		can_set_tx_buffer_element(can_inst, &tx_element,
			CAN_FILTER_REGULAR_SEND);
		can_tx_transfer_request(can_inst, 1 << CAN_FILTER_REGULAR_SEND);
		
		while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_FILTER_REGULAR_SEND)));
    2c4a:	421d      	tst	r5, r3
    2c4c:	d0fc      	beq.n	2c48 <EnrollNodes+0x18c>
		
		while(g_received == 0);
    2c4e:	4a77      	ldr	r2, [pc, #476]	; (2e2c <EnrollNodes+0x370>)
    2c50:	6813      	ldr	r3, [r2, #0]
    2c52:	2b00      	cmp	r3, #0
    2c54:	d0fc      	beq.n	2c50 <EnrollNodes+0x194>
    2c56:	9402      	str	r4, [sp, #8]
		g_received = 0;
    2c58:	4b74      	ldr	r3, [pc, #464]	; (2e2c <EnrollNodes+0x370>)
    2c5a:	2200      	movs	r2, #0
    2c5c:	601a      	str	r2, [r3, #0]
	uint8_t (*StoredResponseHashes)[16], uint8_t *ec, struct can_module * can_inst);



inline struct can_rx_element_buffer * getNextBufferElement(struct multiBuffer * buff) {
	if (buff->last_write == buff->last_read) return NULL;
    2c5e:	4b74      	ldr	r3, [pc, #464]	; (2e30 <EnrollNodes+0x374>)
    2c60:	4a74      	ldr	r2, [pc, #464]	; (2e34 <EnrollNodes+0x378>)
    2c62:	5c99      	ldrb	r1, [r3, r2]
    2c64:	3a01      	subs	r2, #1
    2c66:	5c9b      	ldrb	r3, [r3, r2]
    2c68:	428b      	cmp	r3, r1
    2c6a:	d076      	beq.n	2d5a <EnrollNodes+0x29e>
	register int last_element = buff->last_read;
	
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    2c6c:	4a70      	ldr	r2, [pc, #448]	; (2e30 <EnrollNodes+0x374>)
    2c6e:	1c48      	adds	r0, r1, #1
    2c70:	2303      	movs	r3, #3
    2c72:	4003      	ands	r3, r0
    2c74:	486f      	ldr	r0, [pc, #444]	; (2e34 <EnrollNodes+0x378>)
    2c76:	5413      	strb	r3, [r2, r0]
	
	return &(buff->buffers[last_element]);
    2c78:	00cb      	lsls	r3, r1, #3
    2c7a:	185b      	adds	r3, r3, r1
    2c7c:	00db      	lsls	r3, r3, #3
    2c7e:	2193      	movs	r1, #147	; 0x93
    2c80:	0089      	lsls	r1, r1, #2
    2c82:	468c      	mov	ip, r1
    2c84:	4463      	add	r3, ip
    2c86:	189b      	adds	r3, r3, r2
		memcpy(&response[0],getNextBufferElement(&rx_element_buff[CAN_FILTER_REGULAR_REC])->data,16);
    2c88:	3308      	adds	r3, #8
    2c8a:	aa18      	add	r2, sp, #96	; 0x60
    2c8c:	cb13      	ldmia	r3!, {r0, r1, r4}
    2c8e:	c213      	stmia	r2!, {r0, r1, r4}
    2c90:	681b      	ldr	r3, [r3, #0]
    2c92:	6013      	str	r3, [r2, #0]
			printf("%02x",response[j]);
		}
		printf("\r\n");
		*/
		// Lowest 16 bytes of secret will be the response
		memmove(StoredPublicKeys[i],response,16);
    2c94:	2210      	movs	r2, #16
    2c96:	a918      	add	r1, sp, #96	; 0x60
    2c98:	0038      	movs	r0, r7
    2c9a:	4b5f      	ldr	r3, [pc, #380]	; (2e18 <EnrollNodes+0x35c>)
    2c9c:	4798      	blx	r3
		
		photon128(response,16,StoredResponseHashes[i]);
    2c9e:	4652      	mov	r2, sl
    2ca0:	2110      	movs	r1, #16
    2ca2:	a818      	add	r0, sp, #96	; 0x60
    2ca4:	4b64      	ldr	r3, [pc, #400]	; (2e38 <EnrollNodes+0x37c>)
    2ca6:	4798      	blx	r3
		Status = CompressedKeyGeneration(StoredPublicKeys[i],StoredPublicKeys[i]);
    2ca8:	0039      	movs	r1, r7
    2caa:	0038      	movs	r0, r7
    2cac:	4b58      	ldr	r3, [pc, #352]	; (2e10 <EnrollNodes+0x354>)
    2cae:	4798      	blx	r3
		if (Status != ECCRYPTO_SUCCESS) {
    2cb0:	2801      	cmp	r0, #1
    2cb2:	d154      	bne.n	2d5e <EnrollNodes+0x2a2>
	for (int i = 1; i <= total_nodes; i++) {
    2cb4:	2301      	movs	r3, #1
    2cb6:	469c      	mov	ip, r3
    2cb8:	44e1      	add	r9, ip
    2cba:	3601      	adds	r6, #1
    2cbc:	0576      	lsls	r6, r6, #21
    2cbe:	0d76      	lsrs	r6, r6, #21
    2cc0:	3720      	adds	r7, #32
    2cc2:	330f      	adds	r3, #15
    2cc4:	469c      	mov	ip, r3
    2cc6:	44e2      	add	sl, ip
    2cc8:	9b02      	ldr	r3, [sp, #8]
    2cca:	454b      	cmp	r3, r9
    2ccc:	db4c      	blt.n	2d68 <EnrollNodes+0x2ac>
		g_received = 0;
    2cce:	4643      	mov	r3, r8
    2cd0:	9a03      	ldr	r2, [sp, #12]
    2cd2:	601a      	str	r2, [r3, #0]
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    2cd4:	4b51      	ldr	r3, [pc, #324]	; (2e1c <EnrollNodes+0x360>)
    2cd6:	9317      	str	r3, [sp, #92]	; 0x5c
		sd_filter.S0.bit.SFID1 = 0x200 + i;
    2cd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2cda:	0432      	lsls	r2, r6, #16
    2cdc:	4950      	ldr	r1, [pc, #320]	; (2e20 <EnrollNodes+0x364>)
    2cde:	400b      	ands	r3, r1
    2ce0:	4313      	orrs	r3, r2
    2ce2:	9317      	str	r3, [sp, #92]	; 0x5c
		sd_filter.S0.bit.SFID2 = CAN_FILTER_REGULAR_REC;
    2ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2ce6:	0adb      	lsrs	r3, r3, #11
    2ce8:	02db      	lsls	r3, r3, #11
    2cea:	432b      	orrs	r3, r5
    2cec:	9317      	str	r3, [sp, #92]	; 0x5c
		sd_filter.S0.bit.SFEC =
    2cee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    2cf0:	23e0      	movs	r3, #224	; 0xe0
    2cf2:	059b      	lsls	r3, r3, #22
    2cf4:	4313      	orrs	r3, r2
    2cf6:	9317      	str	r3, [sp, #92]	; 0x5c
		can_set_rx_standard_filter(can_inst, &sd_filter,
    2cf8:	002a      	movs	r2, r5
    2cfa:	a917      	add	r1, sp, #92	; 0x5c
    2cfc:	4658      	mov	r0, fp
    2cfe:	4b4f      	ldr	r3, [pc, #316]	; (2e3c <EnrollNodes+0x380>)
    2d00:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
    2d02:	465b      	mov	r3, fp
    2d04:	681a      	ldr	r2, [r3, #0]
    2d06:	6d51      	ldr	r1, [r2, #84]	; 0x54
    2d08:	2380      	movs	r3, #128	; 0x80
    2d0a:	031b      	lsls	r3, r3, #12
    2d0c:	430b      	orrs	r3, r1
    2d0e:	6553      	str	r3, [r2, #84]	; 0x54
	tx_element->T0.reg = 0;
    2d10:	2300      	movs	r3, #0
    2d12:	9305      	str	r3, [sp, #20]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    2d14:	2388      	movs	r3, #136	; 0x88
    2d16:	041b      	lsls	r3, r3, #16
    2d18:	9306      	str	r3, [sp, #24]
		tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x100+i);
    2d1a:	9a05      	ldr	r2, [sp, #20]
    2d1c:	464b      	mov	r3, r9
    2d1e:	3301      	adds	r3, #1
    2d20:	33ff      	adds	r3, #255	; 0xff
    2d22:	049b      	lsls	r3, r3, #18
    2d24:	4946      	ldr	r1, [pc, #280]	; (2e40 <EnrollNodes+0x384>)
    2d26:	400b      	ands	r3, r1
    2d28:	4313      	orrs	r3, r2
    2d2a:	9305      	str	r3, [sp, #20]
		tx_element.T1.reg = CAN_TX_ELEMENT_T1_FDF | CAN_TX_ELEMENT_T1_BRS |
    2d2c:	23e0      	movs	r3, #224	; 0xe0
    2d2e:	039b      	lsls	r3, r3, #14
    2d30:	9306      	str	r3, [sp, #24]
		memcpy(tx_element.data,&StoredPublicKeys[0][24],8);
    2d32:	9901      	ldr	r1, [sp, #4]
    2d34:	3118      	adds	r1, #24
    2d36:	2208      	movs	r2, #8
    2d38:	a807      	add	r0, sp, #28
    2d3a:	4b37      	ldr	r3, [pc, #220]	; (2e18 <EnrollNodes+0x35c>)
    2d3c:	4798      	blx	r3
		can_set_tx_buffer_element(can_inst, &tx_element,
    2d3e:	2201      	movs	r2, #1
    2d40:	a905      	add	r1, sp, #20
    2d42:	4658      	mov	r0, fp
    2d44:	4b31      	ldr	r3, [pc, #196]	; (2e0c <EnrollNodes+0x350>)
    2d46:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    2d48:	465b      	mov	r3, fp
    2d4a:	681b      	ldr	r3, [r3, #0]
    2d4c:	699a      	ldr	r2, [r3, #24]
    2d4e:	4215      	tst	r5, r2
    2d50:	d000      	beq.n	2d54 <EnrollNodes+0x298>
    2d52:	e775      	b.n	2c40 <EnrollNodes+0x184>
	module_inst->hw->TXBAR.reg = trig_mask;
    2d54:	22d0      	movs	r2, #208	; 0xd0
    2d56:	509d      	str	r5, [r3, r2]
    2d58:	e772      	b.n	2c40 <EnrollNodes+0x184>
	if (buff->last_write == buff->last_read) return NULL;
    2d5a:	2300      	movs	r3, #0
    2d5c:	e794      	b.n	2c88 <EnrollNodes+0x1cc>
			printf("Enrollment: Failed Node %i Public Key Generation\r\n",i);
    2d5e:	4649      	mov	r1, r9
    2d60:	4838      	ldr	r0, [pc, #224]	; (2e44 <EnrollNodes+0x388>)
    2d62:	4b20      	ldr	r3, [pc, #128]	; (2de4 <EnrollNodes+0x328>)
    2d64:	4798      	blx	r3
    2d66:	e7fe      	b.n	2d66 <EnrollNodes+0x2aa>
    2d68:	465c      	mov	r4, fp
		}
		//printf("Completed node %i enrollment\r\n",i);
	}
	
	// We're finished listening
	sd_filter.S0.bit.SFEC =
    2d6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2d6c:	4a36      	ldr	r2, [pc, #216]	; (2e48 <EnrollNodes+0x38c>)
    2d6e:	4013      	ands	r3, r2
    2d70:	9317      	str	r3, [sp, #92]	; 0x5c
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_DISABLE_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    2d72:	2202      	movs	r2, #2
    2d74:	a917      	add	r1, sp, #92	; 0x5c
    2d76:	0020      	movs	r0, r4
    2d78:	4b30      	ldr	r3, [pc, #192]	; (2e3c <EnrollNodes+0x380>)
    2d7a:	4798      	blx	r3
	tx_element->T0.reg = 0;
    2d7c:	ad05      	add	r5, sp, #20
    2d7e:	2300      	movs	r3, #0
    2d80:	9305      	str	r3, [sp, #20]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    2d82:	2388      	movs	r3, #136	; 0x88
    2d84:	041b      	lsls	r3, r3, #16
    2d86:	9306      	str	r3, [sp, #24]
		CAN_FILTER_REGULAR_REC);
		
	// Send one last 0x411 to show that enrollment has ended
	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x411);
    2d88:	9a05      	ldr	r2, [sp, #20]
    2d8a:	4b1f      	ldr	r3, [pc, #124]	; (2e08 <EnrollNodes+0x34c>)
    2d8c:	4313      	orrs	r3, r2
    2d8e:	9305      	str	r3, [sp, #20]
	tx_element.T1.reg = CAN_TX_ELEMENT_T1_FDF | CAN_TX_ELEMENT_T1_BRS |
    2d90:	23e0      	movs	r3, #224	; 0xe0
    2d92:	039b      	lsls	r3, r3, #14
    2d94:	9306      	str	r3, [sp, #24]
		CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA8_Val);
	memset(tx_element.data,hardcoded,8);
    2d96:	2208      	movs	r2, #8
    2d98:	2101      	movs	r1, #1
    2d9a:	a807      	add	r0, sp, #28
    2d9c:	4b19      	ldr	r3, [pc, #100]	; (2e04 <EnrollNodes+0x348>)
    2d9e:	4798      	blx	r3
	tx_element.data[0] = (uint8_t)hardcoded;
    2da0:	2301      	movs	r3, #1
    2da2:	722b      	strb	r3, [r5, #8]
	can_set_tx_buffer_element(can_inst, &tx_element,
    2da4:	2201      	movs	r2, #1
    2da6:	0029      	movs	r1, r5
    2da8:	0020      	movs	r0, r4
    2daa:	4b18      	ldr	r3, [pc, #96]	; (2e0c <EnrollNodes+0x350>)
    2dac:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    2dae:	6823      	ldr	r3, [r4, #0]
    2db0:	699a      	ldr	r2, [r3, #24]
    2db2:	0792      	lsls	r2, r2, #30
    2db4:	d402      	bmi.n	2dbc <EnrollNodes+0x300>
	module_inst->hw->TXBAR.reg = trig_mask;
    2db6:	2102      	movs	r1, #2
    2db8:	22d0      	movs	r2, #208	; 0xd0
    2dba:	5099      	str	r1, [r3, r2]
	return module_inst->hw->TXBTO.reg;
    2dbc:	6821      	ldr	r1, [r4, #0]
    2dbe:	22d8      	movs	r2, #216	; 0xd8
	CAN_FILTER_REGULAR_SEND);
	can_tx_transfer_request(can_inst, 1 << CAN_FILTER_REGULAR_SEND);
	
	while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_FILTER_REGULAR_SEND)));
    2dc0:	2302      	movs	r3, #2
    2dc2:	5888      	ldr	r0, [r1, r2]
    2dc4:	4203      	tst	r3, r0
    2dc6:	d0fc      	beq.n	2dc2 <EnrollNodes+0x306>
	
	return hardcoded;
}
    2dc8:	2001      	movs	r0, #1
    2dca:	b01d      	add	sp, #116	; 0x74
    2dcc:	bc3c      	pop	{r2, r3, r4, r5}
    2dce:	4690      	mov	r8, r2
    2dd0:	4699      	mov	r9, r3
    2dd2:	46a2      	mov	sl, r4
    2dd4:	46ab      	mov	fp, r5
    2dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dd8:	00008650 	.word	0x00008650
    2ddc:	00006acd 	.word	0x00006acd
    2de0:	00008680 	.word	0x00008680
    2de4:	000069d9 	.word	0x000069d9
    2de8:	000086ac 	.word	0x000086ac
    2dec:	00006b05 	.word	0x00006b05
    2df0:	000086b0 	.word	0x000086b0
    2df4:	000086c4 	.word	0x000086c4
    2df8:	20002538 	.word	0x20002538
    2dfc:	20003814 	.word	0x20003814
    2e00:	00008710 	.word	0x00008710
    2e04:	00006877 	.word	0x00006877
    2e08:	10440000 	.word	0x10440000
    2e0c:	000017c1 	.word	0x000017c1
    2e10:	00005441 	.word	0x00005441
    2e14:	0000871c 	.word	0x0000871c
    2e18:	00006841 	.word	0x00006841
    2e1c:	880007ff 	.word	0x880007ff
    2e20:	f800ffff 	.word	0xf800ffff
    2e24:	03010000 	.word	0x03010000
    2e28:	00000201 	.word	0x00000201
    2e2c:	2000253c 	.word	0x2000253c
    2e30:	200025d4 	.word	0x200025d4
    2e34:	00000249 	.word	0x00000249
    2e38:	00005751 	.word	0x00005751
    2e3c:	0000172d 	.word	0x0000172d
    2e40:	1ffc0000 	.word	0x1ffc0000
    2e44:	00008750 	.word	0x00008750
    2e48:	c7ffffff 	.word	0xc7ffffff

00002e4c <is_zero_ct>:
static digit_t mask4000 = (digit_t)1 << (sizeof(digit_t)*8 - 2);
static digit_t mask7fff = (digit_t)(-1) >> 1;


bool is_zero_ct(digit_t* a, unsigned int nwords)
{ // Check if multiprecision element is zero
    2e4c:	b510      	push	{r4, lr}
    digit_t x;
    unsigned int i;

    x = a[0];
    2e4e:	6802      	ldr	r2, [r0, #0]
    for (i = 1; i < nwords; i++) {
    2e50:	2901      	cmp	r1, #1
    2e52:	d906      	bls.n	2e62 <is_zero_ct+0x16>
    2e54:	1d03      	adds	r3, r0, #4
    2e56:	0089      	lsls	r1, r1, #2
    2e58:	1840      	adds	r0, r0, r1
        x |= a[i];
    2e5a:	cb10      	ldmia	r3!, {r4}
    2e5c:	4322      	orrs	r2, r4
    for (i = 1; i < nwords; i++) {
    2e5e:	4283      	cmp	r3, r0
    2e60:	d1fb      	bne.n	2e5a <is_zero_ct+0xe>
    }

    return (bool)(1 ^ ((x | (0-x)) >> (RADIX-1)));
    2e62:	4250      	negs	r0, r2
    2e64:	4310      	orrs	r0, r2
    2e66:	0fc0      	lsrs	r0, r0, #31
    2e68:	3801      	subs	r0, #1
    2e6a:	4240      	negs	r0, r0
}
    2e6c:	bd10      	pop	{r4, pc}
	...

00002e70 <encode>:


void encode(point_t P, unsigned char* Pencoded)
{ // Encode point P
    2e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e72:	0005      	movs	r5, r0
    2e74:	000e      	movs	r6, r1
  // SECURITY NOTE: this function does not run in constant time.
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    2e76:	69c7      	ldr	r7, [r0, #28]
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    2e78:	68c4      	ldr	r4, [r0, #12]

    memmove(Pencoded, P->y, 32);
    2e7a:	0001      	movs	r1, r0
    2e7c:	3120      	adds	r1, #32
    2e7e:	2220      	movs	r2, #32
    2e80:	0030      	movs	r0, r6
    2e82:	4b0b      	ldr	r3, [pc, #44]	; (2eb0 <encode+0x40>)
    2e84:	4798      	blx	r3
    if (is_zero_ct((digit_t*)P->x, NWORDS_FIELD) == true) {
    2e86:	2104      	movs	r1, #4
    2e88:	0028      	movs	r0, r5
    2e8a:	4b0a      	ldr	r3, [pc, #40]	; (2eb4 <encode+0x44>)
    2e8c:	4798      	blx	r3
    2e8e:	2800      	cmp	r0, #0
    2e90:	d106      	bne.n	2ea0 <encode+0x30>
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    2e92:	0064      	lsls	r4, r4, #1
    2e94:	0fe4      	lsrs	r4, r4, #31
    2e96:	07e4      	lsls	r4, r4, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    } else {
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp2;
    2e98:	69f3      	ldr	r3, [r6, #28]
    2e9a:	431c      	orrs	r4, r3
    2e9c:	61f4      	str	r4, [r6, #28]
    }
}
    2e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    2ea0:	007f      	lsls	r7, r7, #1
    2ea2:	0fff      	lsrs	r7, r7, #31
    2ea4:	07ff      	lsls	r7, r7, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    2ea6:	69f3      	ldr	r3, [r6, #28]
    2ea8:	431f      	orrs	r7, r3
    2eaa:	61f7      	str	r7, [r6, #28]
    2eac:	e7f7      	b.n	2e9e <encode+0x2e>
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	00006853 	.word	0x00006853
    2eb4:	00002e4d 	.word	0x00002e4d

00002eb8 <decode>:


ECCRYPTO_STATUS decode(const unsigned char* Pencoded, point_t P)
{ // Decode point P
    2eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eba:	46c6      	mov	lr, r8
    2ebc:	b500      	push	{lr}
    2ebe:	4c87      	ldr	r4, [pc, #540]	; (30dc <decode+0x224>)
    2ec0:	44a5      	add	sp, r4
    2ec2:	0004      	movs	r4, r0
    2ec4:	000f      	movs	r7, r1
  // SECURITY NOTE: this function does not run in constant time.
    velm_t r, t, t0, t1, t2, t3, t4;
    v2elm_t u, v, one = {0};
    2ec6:	2228      	movs	r2, #40	; 0x28
    2ec8:	2100      	movs	r1, #0
    2eca:	a849      	add	r0, sp, #292	; 0x124
    2ecc:	4b84      	ldr	r3, [pc, #528]	; (30e0 <decode+0x228>)
    2ece:	4798      	blx	r3
    digit_t sign_dec;
    vpoint_extproj_t R;
    vpoint_t VP;
    unsigned int i, sign;

    one[0] = 1;
    2ed0:	2301      	movs	r3, #1
    2ed2:	9349      	str	r3, [sp, #292]	; 0x124
    memmove((unsigned char*)P->y, Pencoded, 32);   // Decoding y-coordinate and sign
    2ed4:	331f      	adds	r3, #31
    2ed6:	469c      	mov	ip, r3
    2ed8:	44bc      	add	ip, r7
    2eda:	4663      	mov	r3, ip
    2edc:	4665      	mov	r5, ip
    2ede:	9301      	str	r3, [sp, #4]
    2ee0:	2220      	movs	r2, #32
    2ee2:	0021      	movs	r1, r4
    2ee4:	0018      	movs	r0, r3
    2ee6:	4b7f      	ldr	r3, [pc, #508]	; (30e4 <decode+0x22c>)
    2ee8:	4798      	blx	r3
    sign = (unsigned int)(Pencoded[31] >> 7);
    2eea:	7fe3      	ldrb	r3, [r4, #31]
    2eec:	09db      	lsrs	r3, r3, #7
    2eee:	4698      	mov	r8, r3
    P->y[1][NWORDS_FIELD-1] &= mask7fff;
    2ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ef2:	005b      	lsls	r3, r3, #1
    2ef4:	085b      	lsrs	r3, r3, #1
    2ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
    from_std_to_ext(P->y, VP->y);
    2ef8:	a90d      	add	r1, sp, #52	; 0x34
    2efa:	0028      	movs	r0, r5
    2efc:	4b7a      	ldr	r3, [pc, #488]	; (30e8 <decode+0x230>)
    2efe:	4798      	blx	r3

    v2sqr1271(VP->y, u);
    2f00:	a95d      	add	r1, sp, #372	; 0x174
    2f02:	a80d      	add	r0, sp, #52	; 0x34
    2f04:	4b79      	ldr	r3, [pc, #484]	; (30ec <decode+0x234>)
    2f06:	4798      	blx	r3
    v2mul1271(u, (digit_t*)&PARAMETER_d, v);
    2f08:	aa53      	add	r2, sp, #332	; 0x14c
    2f0a:	4979      	ldr	r1, [pc, #484]	; (30f0 <decode+0x238>)
    2f0c:	a85d      	add	r0, sp, #372	; 0x174
    2f0e:	4b79      	ldr	r3, [pc, #484]	; (30f4 <decode+0x23c>)
    2f10:	4798      	blx	r3
    v2sub1271(u, one, u);
    2f12:	aa5d      	add	r2, sp, #372	; 0x174
    2f14:	a949      	add	r1, sp, #292	; 0x124
    2f16:	0010      	movs	r0, r2
    2f18:	4b77      	ldr	r3, [pc, #476]	; (30f8 <decode+0x240>)
    2f1a:	4798      	blx	r3
    v2add1271(v, one, v);
    2f1c:	aa53      	add	r2, sp, #332	; 0x14c
    2f1e:	a949      	add	r1, sp, #292	; 0x124
    2f20:	0010      	movs	r0, r2
    2f22:	4b76      	ldr	r3, [pc, #472]	; (30fc <decode+0x244>)
    2f24:	4798      	blx	r3

    vsqr1271(&v[0], t0);                              // t0 = v0^2
    2f26:	a97b      	add	r1, sp, #492	; 0x1ec
    2f28:	a853      	add	r0, sp, #332	; 0x14c
    2f2a:	4c75      	ldr	r4, [pc, #468]	; (3100 <decode+0x248>)
    2f2c:	47a0      	blx	r4
    vsqr1271(&v[VWORDS_FIELD], t1);                   // t1 = v1^2
    2f2e:	a976      	add	r1, sp, #472	; 0x1d8
    2f30:	a858      	add	r0, sp, #352	; 0x160
    2f32:	47a0      	blx	r4
    vadd1271(t0, t1, t0);                             // t0 = t0+t1
    2f34:	aa7b      	add	r2, sp, #492	; 0x1ec
    2f36:	a976      	add	r1, sp, #472	; 0x1d8
    2f38:	0010      	movs	r0, r2
    2f3a:	4e72      	ldr	r6, [pc, #456]	; (3104 <decode+0x24c>)
    2f3c:	47b0      	blx	r6
    vmul1271(&u[0], &v[0], t1);                       // t1 = u0*v0
    2f3e:	aa76      	add	r2, sp, #472	; 0x1d8
    2f40:	a953      	add	r1, sp, #332	; 0x14c
    2f42:	a85d      	add	r0, sp, #372	; 0x174
    2f44:	4d70      	ldr	r5, [pc, #448]	; (3108 <decode+0x250>)
    2f46:	47a8      	blx	r5
    vmul1271(&u[VWORDS_FIELD], &v[VWORDS_FIELD], t2); // t2 = u1*v1 
    2f48:	aa71      	add	r2, sp, #452	; 0x1c4
    2f4a:	a958      	add	r1, sp, #352	; 0x160
    2f4c:	a862      	add	r0, sp, #392	; 0x188
    2f4e:	47a8      	blx	r5
    vadd1271(t1, t2, t1);                             // t1 = t1+t2 
    2f50:	aa76      	add	r2, sp, #472	; 0x1d8
    2f52:	a971      	add	r1, sp, #452	; 0x1c4
    2f54:	0010      	movs	r0, r2
    2f56:	47b0      	blx	r6
    vmul1271(&u[VWORDS_FIELD], &v[0], t2);            // t2 = u1*v0
    2f58:	aa71      	add	r2, sp, #452	; 0x1c4
    2f5a:	a953      	add	r1, sp, #332	; 0x14c
    2f5c:	a862      	add	r0, sp, #392	; 0x188
    2f5e:	47a8      	blx	r5
    vmul1271(&u[0], &v[VWORDS_FIELD], t3);            // t3 = u0*v1
    2f60:	aa6c      	add	r2, sp, #432	; 0x1b0
    2f62:	a958      	add	r1, sp, #352	; 0x160
    2f64:	a85d      	add	r0, sp, #372	; 0x174
    2f66:	47a8      	blx	r5
    vsub1271(t2, t3, t2);                             // t2 = t2-t3 
    2f68:	aa71      	add	r2, sp, #452	; 0x1c4
    2f6a:	a96c      	add	r1, sp, #432	; 0x1b0
    2f6c:	0010      	movs	r0, r2
    2f6e:	4b67      	ldr	r3, [pc, #412]	; (310c <decode+0x254>)
    2f70:	4798      	blx	r3
    vsqr1271(t1, t3);                                 // t3 = t1^2    
    2f72:	a96c      	add	r1, sp, #432	; 0x1b0
    2f74:	a876      	add	r0, sp, #472	; 0x1d8
    2f76:	47a0      	blx	r4
    vsqr1271(t2, t4);                                 // t4 = t2^2                   
    2f78:	a967      	add	r1, sp, #412	; 0x19c
    2f7a:	a871      	add	r0, sp, #452	; 0x1c4
    2f7c:	47a0      	blx	r4
    vadd1271(t3, t4, t3);                             // t3 = t3+t4
    2f7e:	aa6c      	add	r2, sp, #432	; 0x1b0
    2f80:	a967      	add	r1, sp, #412	; 0x19c
    2f82:	0010      	movs	r0, r2
    2f84:	47b0      	blx	r6
    2f86:	247d      	movs	r4, #125	; 0x7d
    for (i = 0; i < 125; i++) {                       // t3 = t3^(2^125)
        vsqr1271(t3, t3);
    2f88:	4d5d      	ldr	r5, [pc, #372]	; (3100 <decode+0x248>)
    2f8a:	a96c      	add	r1, sp, #432	; 0x1b0
    2f8c:	0008      	movs	r0, r1
    2f8e:	47a8      	blx	r5
    2f90:	3c01      	subs	r4, #1
    for (i = 0; i < 125; i++) {                       // t3 = t3^(2^125)
    2f92:	2c00      	cmp	r4, #0
    2f94:	d1f9      	bne.n	2f8a <decode+0xd2>
    }

    vadd1271(t1, t3, t);                           // t = t1+t3
    2f96:	aa80      	add	r2, sp, #512	; 0x200
    2f98:	a96c      	add	r1, sp, #432	; 0x1b0
    2f9a:	a876      	add	r0, sp, #472	; 0x1d8
    2f9c:	4b59      	ldr	r3, [pc, #356]	; (3104 <decode+0x24c>)
    2f9e:	4798      	blx	r3
    vmod1271(t, t);
    2fa0:	a980      	add	r1, sp, #512	; 0x200
    2fa2:	0008      	movs	r0, r1
    2fa4:	4b5a      	ldr	r3, [pc, #360]	; (3110 <decode+0x258>)
    2fa6:	4798      	blx	r3
    if (is_zero_ct(t, VWORDS_FIELD) == true) {
    2fa8:	2105      	movs	r1, #5
    2faa:	a880      	add	r0, sp, #512	; 0x200
    2fac:	4b59      	ldr	r3, [pc, #356]	; (3114 <decode+0x25c>)
    2fae:	4798      	blx	r3
    2fb0:	2800      	cmp	r0, #0
    2fb2:	d000      	beq.n	2fb6 <decode+0xfe>
    2fb4:	e073      	b.n	309e <decode+0x1e6>
        vsub1271(t1, t3, t);                       // t = t1-t3
    }
    vadd1271(t, t, t);                             // t = 2*t 
    2fb6:	aa80      	add	r2, sp, #512	; 0x200
    2fb8:	0011      	movs	r1, r2
    2fba:	0010      	movs	r0, r2
    2fbc:	4b51      	ldr	r3, [pc, #324]	; (3104 <decode+0x24c>)
    2fbe:	4798      	blx	r3
    vsqr1271(t0, t3);                              // t3 = t0^2      
    2fc0:	a96c      	add	r1, sp, #432	; 0x1b0
    2fc2:	a87b      	add	r0, sp, #492	; 0x1ec
    2fc4:	4d4e      	ldr	r5, [pc, #312]	; (3100 <decode+0x248>)
    2fc6:	47a8      	blx	r5
    vmul1271(t0, t3, t3);                          // t3 = t3*t0   
    2fc8:	aa6c      	add	r2, sp, #432	; 0x1b0
    2fca:	0011      	movs	r1, r2
    2fcc:	a87b      	add	r0, sp, #492	; 0x1ec
    2fce:	4c4e      	ldr	r4, [pc, #312]	; (3108 <decode+0x250>)
    2fd0:	47a0      	blx	r4
    vmul1271(t, t3, t3);                           // t3 = t3*t
    2fd2:	aa6c      	add	r2, sp, #432	; 0x1b0
    2fd4:	0011      	movs	r1, r2
    2fd6:	a880      	add	r0, sp, #512	; 0x200
    2fd8:	47a0      	blx	r4
    vexp1251(t3, r);                               // r = t3^(2^125-1)  
    2fda:	a985      	add	r1, sp, #532	; 0x214
    2fdc:	a86c      	add	r0, sp, #432	; 0x1b0
    2fde:	4b4e      	ldr	r3, [pc, #312]	; (3118 <decode+0x260>)
    2fe0:	4798      	blx	r3
    vmul1271(t0, r, t3);                           // t3 = t0*r          
    2fe2:	aa6c      	add	r2, sp, #432	; 0x1b0
    2fe4:	a985      	add	r1, sp, #532	; 0x214
    2fe6:	a87b      	add	r0, sp, #492	; 0x1ec
    2fe8:	47a0      	blx	r4
    vmul1271(t, t3, &VP->x[0]);                    // x0 = t*t3 
    2fea:	aa03      	add	r2, sp, #12
    2fec:	a96c      	add	r1, sp, #432	; 0x1b0
    2fee:	a880      	add	r0, sp, #512	; 0x200
    2ff0:	47a0      	blx	r4
    vsqr1271(&VP->x[0], t1);
    2ff2:	a976      	add	r1, sp, #472	; 0x1d8
    2ff4:	a803      	add	r0, sp, #12
    2ff6:	47a8      	blx	r5
    vmul1271(t0, t1, t1);                          // t1 = t0*x0^2 
    2ff8:	aa76      	add	r2, sp, #472	; 0x1d8
    2ffa:	0011      	movs	r1, r2
    2ffc:	a87b      	add	r0, sp, #492	; 0x1ec
    2ffe:	47a0      	blx	r4
    vdiv1271(&VP->x[0]);                           // x0 = x0/2
    3000:	a803      	add	r0, sp, #12
    3002:	4b46      	ldr	r3, [pc, #280]	; (311c <decode+0x264>)
    3004:	4798      	blx	r3
    vmul1271(t2, t3, &VP->x[VWORDS_FIELD]);        // x1 = t3*t2  
    3006:	aa08      	add	r2, sp, #32
    3008:	a96c      	add	r1, sp, #432	; 0x1b0
    300a:	a871      	add	r0, sp, #452	; 0x1c4
    300c:	47a0      	blx	r4

    vsub1271(t, t1, t);
    300e:	aa80      	add	r2, sp, #512	; 0x200
    3010:	a976      	add	r1, sp, #472	; 0x1d8
    3012:	0010      	movs	r0, r2
    3014:	4b3d      	ldr	r3, [pc, #244]	; (310c <decode+0x254>)
    3016:	4798      	blx	r3
    vmod1271(t, t);
    3018:	a980      	add	r1, sp, #512	; 0x200
    301a:	0008      	movs	r0, r1
    301c:	4b3c      	ldr	r3, [pc, #240]	; (3110 <decode+0x258>)
    301e:	4798      	blx	r3
    if (is_zero_ct(t, VWORDS_FIELD) == false) {        // If t != t1 then swap x0 and x1       
    3020:	2105      	movs	r1, #5
    3022:	a880      	add	r0, sp, #512	; 0x200
    3024:	4b3b      	ldr	r3, [pc, #236]	; (3114 <decode+0x25c>)
    3026:	4798      	blx	r3
    3028:	2800      	cmp	r0, #0
    302a:	d03e      	beq.n	30aa <decode+0x1f2>
        memmove((unsigned char*)t0, (unsigned char*)&VP->x[0], 20);
        memmove((unsigned char*)&VP->x[0], (unsigned char*)&VP->x[VWORDS_FIELD], 20);
        memmove((unsigned char*)&VP->x[VWORDS_FIELD], (unsigned char*)t0, 20);
    }

    v2mod1271(VP->x, VP->x);
    302c:	a903      	add	r1, sp, #12
    302e:	0008      	movs	r0, r1
    3030:	4b3b      	ldr	r3, [pc, #236]	; (3120 <decode+0x268>)
    3032:	4798      	blx	r3
    if (is_zero_ct(VP->x, VWORDS_FIELD) == true) {
    3034:	2105      	movs	r1, #5
    3036:	a803      	add	r0, sp, #12
    3038:	4b36      	ldr	r3, [pc, #216]	; (3114 <decode+0x25c>)
    303a:	4798      	blx	r3
    303c:	2800      	cmp	r0, #0
    303e:	d049      	beq.n	30d4 <decode+0x21c>
        sign_dec = VP->x[2*VWORDS_FIELD-1] >> 22;
    3040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3042:	0d9b      	lsrs	r3, r3, #22
    } else {
        sign_dec = VP->x[VWORDS_FIELD-1] >> 22;
    }

    if (sign != (unsigned int)sign_dec) {           // If sign of x-coordinate decoded != input sign bit, then negate x-coordinate
    3044:	4543      	cmp	r3, r8
    3046:	d002      	beq.n	304e <decode+0x196>
        v2neg1271(VP->x);         
    3048:	a803      	add	r0, sp, #12
    304a:	4b36      	ldr	r3, [pc, #216]	; (3124 <decode+0x26c>)
    304c:	4798      	blx	r3
    }

    v2mod1271(VP->x, R->x);
    304e:	a917      	add	r1, sp, #92	; 0x5c
    3050:	a803      	add	r0, sp, #12
    3052:	4c33      	ldr	r4, [pc, #204]	; (3120 <decode+0x268>)
    3054:	47a0      	blx	r4
    v2mod1271(VP->y, R->y);
    3056:	a921      	add	r1, sp, #132	; 0x84
    3058:	a80d      	add	r0, sp, #52	; 0x34
    305a:	47a0      	blx	r4
    if (ecc_point_validate(R) == false) {
    305c:	a817      	add	r0, sp, #92	; 0x5c
    305e:	4b32      	ldr	r3, [pc, #200]	; (3128 <decode+0x270>)
    3060:	4798      	blx	r3
    3062:	2800      	cmp	r0, #0
    3064:	d108      	bne.n	3078 <decode+0x1c0>
        vneg1271(&R->x[VWORDS_FIELD]);
    3066:	a81c      	add	r0, sp, #112	; 0x70
    3068:	4b30      	ldr	r3, [pc, #192]	; (312c <decode+0x274>)
    306a:	4798      	blx	r3
        if (ecc_point_validate(R) == false) {       // Final point validation
    306c:	a817      	add	r0, sp, #92	; 0x5c
    306e:	4b2e      	ldr	r3, [pc, #184]	; (3128 <decode+0x270>)
    3070:	4798      	blx	r3
            return ECCRYPTO_ERROR;
    3072:	2300      	movs	r3, #0
        if (ecc_point_validate(R) == false) {       // Final point validation
    3074:	2800      	cmp	r0, #0
    3076:	d00b      	beq.n	3090 <decode+0x1d8>
        }
    }

    v2mod1271(R->x, R->x);
    3078:	a917      	add	r1, sp, #92	; 0x5c
    307a:	0008      	movs	r0, r1
    307c:	4b28      	ldr	r3, [pc, #160]	; (3120 <decode+0x268>)
    307e:	4798      	blx	r3
    from_ext_to_std(R->x, P->x);
    3080:	0039      	movs	r1, r7
    3082:	a817      	add	r0, sp, #92	; 0x5c
    3084:	4c2a      	ldr	r4, [pc, #168]	; (3130 <decode+0x278>)
    3086:	47a0      	blx	r4
    from_ext_to_std(R->y, P->y);
    3088:	9901      	ldr	r1, [sp, #4]
    308a:	a821      	add	r0, sp, #132	; 0x84
    308c:	47a0      	blx	r4

    return ECCRYPTO_SUCCESS;
    308e:	2301      	movs	r3, #1
}
    3090:	0018      	movs	r0, r3
    3092:	238a      	movs	r3, #138	; 0x8a
    3094:	009b      	lsls	r3, r3, #2
    3096:	449d      	add	sp, r3
    3098:	bc04      	pop	{r2}
    309a:	4690      	mov	r8, r2
    309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vsub1271(t1, t3, t);                       // t = t1-t3
    309e:	aa80      	add	r2, sp, #512	; 0x200
    30a0:	a96c      	add	r1, sp, #432	; 0x1b0
    30a2:	a876      	add	r0, sp, #472	; 0x1d8
    30a4:	4b19      	ldr	r3, [pc, #100]	; (310c <decode+0x254>)
    30a6:	4798      	blx	r3
    30a8:	e785      	b.n	2fb6 <decode+0xfe>
        memmove((unsigned char*)t0, (unsigned char*)&VP->x[0], 20);
    30aa:	ab7b      	add	r3, sp, #492	; 0x1ec
    30ac:	aa03      	add	r2, sp, #12
    30ae:	0019      	movs	r1, r3
    30b0:	ca31      	ldmia	r2!, {r0, r4, r5}
    30b2:	c131      	stmia	r1!, {r0, r4, r5}
    30b4:	ca11      	ldmia	r2!, {r0, r4}
    30b6:	c111      	stmia	r1!, {r0, r4}
        memmove((unsigned char*)&VP->x[0], (unsigned char*)&VP->x[VWORDS_FIELD], 20);
    30b8:	ac03      	add	r4, sp, #12
    30ba:	aa08      	add	r2, sp, #32
    30bc:	0021      	movs	r1, r4
    30be:	0010      	movs	r0, r2
    30c0:	c870      	ldmia	r0!, {r4, r5, r6}
    30c2:	c170      	stmia	r1!, {r4, r5, r6}
    30c4:	c830      	ldmia	r0!, {r4, r5}
    30c6:	c130      	stmia	r1!, {r4, r5}
        memmove((unsigned char*)&VP->x[VWORDS_FIELD], (unsigned char*)t0, 20);
    30c8:	cb13      	ldmia	r3!, {r0, r1, r4}
    30ca:	c213      	stmia	r2!, {r0, r1, r4}
    30cc:	0011      	movs	r1, r2
    30ce:	cb05      	ldmia	r3!, {r0, r2}
    30d0:	c105      	stmia	r1!, {r0, r2}
    30d2:	e7ab      	b.n	302c <decode+0x174>
        sign_dec = VP->x[VWORDS_FIELD-1] >> 22;
    30d4:	9b07      	ldr	r3, [sp, #28]
    30d6:	0d9b      	lsrs	r3, r3, #22
    30d8:	e7b4      	b.n	3044 <decode+0x18c>
    30da:	46c0      	nop			; (mov r8, r8)
    30dc:	fffffdd8 	.word	0xfffffdd8
    30e0:	00006877 	.word	0x00006877
    30e4:	00006853 	.word	0x00006853
    30e8:	00003a01 	.word	0x00003a01
    30ec:	000044b9 	.word	0x000044b9
    30f0:	00008784 	.word	0x00008784
    30f4:	00004445 	.word	0x00004445
    30f8:	00004285 	.word	0x00004285
    30fc:	00004265 	.word	0x00004265
    3100:	000034b1 	.word	0x000034b1
    3104:	00003187 	.word	0x00003187
    3108:	0000321d 	.word	0x0000321d
    310c:	000031c3 	.word	0x000031c3
    3110:	000036f5 	.word	0x000036f5
    3114:	00002e4d 	.word	0x00002e4d
    3118:	00003785 	.word	0x00003785
    311c:	00003d55 	.word	0x00003d55
    3120:	00004429 	.word	0x00004429
    3124:	0000430d 	.word	0x0000430d
    3128:	00004a71 	.word	0x00004a71
    312c:	000031f1 	.word	0x000031f1
    3130:	00003a89 	.word	0x00003a89

00003134 <digit_x_digit>:
#define mask_26        (((uint32_t)1 << 26) - 1)
#define mask_23        (((uint32_t)1 << 23) - 1)


void digit_x_digit(digit_t a, digit_t b, digit_t* c)
{ // Digit multiplication, digit * digit -> 2-digit result    
    3134:	b570      	push	{r4, r5, r6, lr}
    register digit_t al, ah, bl, bh, temp;
    digit_t albl, albh, ahbl, ahbh, res1, res2, res3, carry;
    digit_t mask_low = (digit_t)(-1) >> (sizeof(digit_t)*4), mask_high = (digit_t)(-1) << (sizeof(digit_t)*4);

    al = a & mask_low;                        // Low part
    3136:	0403      	lsls	r3, r0, #16
    3138:	0c1b      	lsrs	r3, r3, #16
    ah = a >> (sizeof(digit_t) * 4);          // High part
    313a:	0c00      	lsrs	r0, r0, #16
    bl = b & mask_low;
    313c:	040c      	lsls	r4, r1, #16
    313e:	0c24      	lsrs	r4, r4, #16
    bh = b >> (sizeof(digit_t) * 4);
    3140:	0c09      	lsrs	r1, r1, #16

    albl = al*bl;
    3142:	0025      	movs	r5, r4
    3144:	435d      	muls	r5, r3
    albh = al*bh;
    3146:	434b      	muls	r3, r1
    ahbl = ah*bl;
    3148:	4344      	muls	r4, r0
    ahbh = ah*bh;
    314a:	4341      	muls	r1, r0
    c[0] = albl & mask_low;                   // C00

    res1 = albl >> (sizeof(digit_t) * 4);
    314c:	0c28      	lsrs	r0, r5, #16
    res2 = ahbl & mask_low;
    314e:	0426      	lsls	r6, r4, #16
    3150:	0c36      	lsrs	r6, r6, #16
    res3 = albh & mask_low;  
    temp = res1 + res2 + res3;
    3152:	1980      	adds	r0, r0, r6
    res3 = albh & mask_low;  
    3154:	041e      	lsls	r6, r3, #16
    3156:	0c36      	lsrs	r6, r6, #16
    temp = res1 + res2 + res3;
    3158:	1980      	adds	r0, r0, r6
    carry = temp >> (sizeof(digit_t) * 4);
    315a:	0c06      	lsrs	r6, r0, #16
    c[0] = albl & mask_low;                   // C00
    315c:	042d      	lsls	r5, r5, #16
    315e:	0c2d      	lsrs	r5, r5, #16
    c[0] ^= temp << (sizeof(digit_t) * 4);    // C01   
    3160:	0400      	lsls	r0, r0, #16
    3162:	4045      	eors	r5, r0
    3164:	6015      	str	r5, [r2, #0]

    res1 = ahbl >> (sizeof(digit_t) * 4);
    3166:	0c24      	lsrs	r4, r4, #16
    res2 = albh >> (sizeof(digit_t) * 4);
    3168:	0c1b      	lsrs	r3, r3, #16
    res3 = ahbh & mask_low;
    temp = res1 + res2 + res3 + carry;
    316a:	18e3      	adds	r3, r4, r3
    res3 = ahbh & mask_low;
    316c:	040c      	lsls	r4, r1, #16
    316e:	0c24      	lsrs	r4, r4, #16
    temp = res1 + res2 + res3 + carry;
    3170:	191b      	adds	r3, r3, r4
    3172:	199b      	adds	r3, r3, r6
    c[1] = temp & mask_low;                   // C10 
    carry = temp & mask_high; 
    3174:	0c18      	lsrs	r0, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    3176:	0c09      	lsrs	r1, r1, #16
    3178:	1809      	adds	r1, r1, r0
    317a:	0409      	lsls	r1, r1, #16
    c[1] = temp & mask_low;                   // C10 
    317c:	041b      	lsls	r3, r3, #16
    317e:	0c1b      	lsrs	r3, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    3180:	404b      	eors	r3, r1
    3182:	6053      	str	r3, [r2, #4]
}
    3184:	bd70      	pop	{r4, r5, r6, pc}

00003186 <vadd1271>:
        c[i] = a[i];
}


void vadd1271(velm_t a, velm_t b, velm_t c) 
{ // Field addition over GF(2^127-1)
    3186:	b510      	push	{r4, lr}
  // Redundant representation: 23/26/26/26/26-bit
    
    c[0] = a[0] + b[0];
    3188:	6803      	ldr	r3, [r0, #0]
    318a:	001c      	movs	r4, r3
    318c:	680b      	ldr	r3, [r1, #0]
    318e:	469c      	mov	ip, r3
    3190:	4464      	add	r4, ip
    3192:	6014      	str	r4, [r2, #0]
    c[1] = a[1] + b[1];
    3194:	6843      	ldr	r3, [r0, #4]
    3196:	001c      	movs	r4, r3
    3198:	684b      	ldr	r3, [r1, #4]
    319a:	469c      	mov	ip, r3
    319c:	4464      	add	r4, ip
    319e:	6054      	str	r4, [r2, #4]
    c[2] = a[2] + b[2];
    31a0:	6883      	ldr	r3, [r0, #8]
    31a2:	001c      	movs	r4, r3
    31a4:	688b      	ldr	r3, [r1, #8]
    31a6:	469c      	mov	ip, r3
    31a8:	4464      	add	r4, ip
    31aa:	6094      	str	r4, [r2, #8]
    c[3] = a[3] + b[3];
    31ac:	68c3      	ldr	r3, [r0, #12]
    31ae:	001c      	movs	r4, r3
    31b0:	68cb      	ldr	r3, [r1, #12]
    31b2:	469c      	mov	ip, r3
    31b4:	4464      	add	r4, ip
    31b6:	60d4      	str	r4, [r2, #12]
    c[4] = a[4] + b[4];
    31b8:	6903      	ldr	r3, [r0, #16]
    31ba:	6909      	ldr	r1, [r1, #16]
    31bc:	185b      	adds	r3, r3, r1
    31be:	6113      	str	r3, [r2, #16]
}
    31c0:	bd10      	pop	{r4, pc}

000031c2 <vsub1271>:


void vsub1271(velm_t a, velm_t b, velm_t c) 
{ // Field subtraction over GF(2^127-1)
    31c2:	b510      	push	{r4, lr}
  // Redundant representation: 23/26/26/26/26-bit
    
    c[0] = a[0] - b[0];
    31c4:	6803      	ldr	r3, [r0, #0]
    31c6:	680c      	ldr	r4, [r1, #0]
    31c8:	1b1b      	subs	r3, r3, r4
    31ca:	6013      	str	r3, [r2, #0]
    c[1] = a[1] - b[1];
    31cc:	6843      	ldr	r3, [r0, #4]
    31ce:	684c      	ldr	r4, [r1, #4]
    31d0:	1b1b      	subs	r3, r3, r4
    31d2:	6053      	str	r3, [r2, #4]
    c[2] = a[2] - b[2];
    31d4:	6883      	ldr	r3, [r0, #8]
    31d6:	688c      	ldr	r4, [r1, #8]
    31d8:	1b1b      	subs	r3, r3, r4
    31da:	6093      	str	r3, [r2, #8]
    c[3] = a[3] - b[3];
    31dc:	68c3      	ldr	r3, [r0, #12]
    31de:	68cc      	ldr	r4, [r1, #12]
    31e0:	1b1b      	subs	r3, r3, r4
    31e2:	60d3      	str	r3, [r2, #12]
    c[4] = a[4] - b[4];
    31e4:	6903      	ldr	r3, [r0, #16]
    31e6:	6909      	ldr	r1, [r1, #16]
    31e8:	1a5b      	subs	r3, r3, r1
    31ea:	6113      	str	r3, [r2, #16]
}
    31ec:	bd10      	pop	{r4, pc}
	...

000031f0 <vneg1271>:

void vneg1271(velm_t a) 
{ // Field negation over GF(2^127-1)
  // Redundant representation: 23/26/26/26/26-bit
    
    a[0] = mask_26 - a[0];
    31f0:	4b08      	ldr	r3, [pc, #32]	; (3214 <vneg1271+0x24>)
    31f2:	6802      	ldr	r2, [r0, #0]
    31f4:	1a9a      	subs	r2, r3, r2
    31f6:	6002      	str	r2, [r0, #0]
    a[1] = mask_26 - a[1];
    31f8:	6842      	ldr	r2, [r0, #4]
    31fa:	1a9a      	subs	r2, r3, r2
    31fc:	6042      	str	r2, [r0, #4]
    a[2] = mask_26 - a[2];
    31fe:	6882      	ldr	r2, [r0, #8]
    3200:	1a9a      	subs	r2, r3, r2
    3202:	6082      	str	r2, [r0, #8]
    a[3] = mask_26 - a[3];
    3204:	68c2      	ldr	r2, [r0, #12]
    3206:	1a9b      	subs	r3, r3, r2
    3208:	60c3      	str	r3, [r0, #12]
    a[4] = mask_23 - a[4];
    320a:	4b03      	ldr	r3, [pc, #12]	; (3218 <vneg1271+0x28>)
    320c:	6902      	ldr	r2, [r0, #16]
    320e:	1a9b      	subs	r3, r3, r2
    3210:	6103      	str	r3, [r0, #16]
}
    3212:	4770      	bx	lr
    3214:	03ffffff 	.word	0x03ffffff
    3218:	007fffff 	.word	0x007fffff

0000321c <vmul1271>:


void vmul1271(velm_t a, velm_t b, velm_t c)
{ // Field multiplication, c = a*b mod p
    321c:	b5f0      	push	{r4, r5, r6, r7, lr}
    321e:	46de      	mov	lr, fp
    3220:	4657      	mov	r7, sl
    3222:	464e      	mov	r6, r9
    3224:	4645      	mov	r5, r8
    3226:	b5e0      	push	{r5, r6, r7, lr}
    3228:	b09d      	sub	sp, #116	; 0x74
    322a:	4691      	mov	r9, r2
   int64_t t1, t2, t3, t4;

   a0 = a[0]; a1 = a[1]; a2 = a[2]; a3 = a[3]; a4 = a[4]; 
   b0 = b[0]; b1 = b[1]; b2 = b[2]; b3 = b[3]; b4 = b[4];

   t1 = (int64_t)a1 << 3;
    322c:	6844      	ldr	r4, [r0, #4]
    322e:	17e3      	asrs	r3, r4, #31
    3230:	9301      	str	r3, [sp, #4]
   t2 = (int64_t)a2 << 3;
    3232:	6882      	ldr	r2, [r0, #8]
    3234:	4690      	mov	r8, r2
    3236:	17d2      	asrs	r2, r2, #31
    3238:	9213      	str	r2, [sp, #76]	; 0x4c
    323a:	4645      	mov	r5, r8
    323c:	176d      	asrs	r5, r5, #29
    323e:	951a      	str	r5, [sp, #104]	; 0x68
    3240:	4646      	mov	r6, r8
    3242:	00f6      	lsls	r6, r6, #3
    3244:	9618      	str	r6, [sp, #96]	; 0x60
   t3 = (int64_t)a3 << 3;
    3246:	68c7      	ldr	r7, [r0, #12]
    3248:	46ba      	mov	sl, r7
    324a:	17ff      	asrs	r7, r7, #31
    324c:	9717      	str	r7, [sp, #92]	; 0x5c
    324e:	4653      	mov	r3, sl
    3250:	175d      	asrs	r5, r3, #29
    3252:	9516      	str	r5, [sp, #88]	; 0x58
    3254:	00de      	lsls	r6, r3, #3
    3256:	9614      	str	r6, [sp, #80]	; 0x50
   t4 = (int64_t)a4 << 3;
    3258:	6903      	ldr	r3, [r0, #16]
    325a:	469b      	mov	fp, r3
    325c:	17db      	asrs	r3, r3, #31
    325e:	931b      	str	r3, [sp, #108]	; 0x6c
    3260:	465a      	mov	r2, fp
    3262:	1752      	asrs	r2, r2, #29
    3264:	9212      	str	r2, [sp, #72]	; 0x48
    3266:	465f      	mov	r7, fp
    3268:	00fd      	lsls	r5, r7, #3
    326a:	950e      	str	r5, [sp, #56]	; 0x38

   c0 = (int64_t)a0*b0 + (int64_t)t1*b4 + (int64_t)t4*b1 + (int64_t)t2*b3 + (int64_t)t3*b2;
    326c:	6803      	ldr	r3, [r0, #0]
    326e:	9302      	str	r3, [sp, #8]
    3270:	17da      	asrs	r2, r3, #31
    3272:	9203      	str	r2, [sp, #12]
    3274:	680a      	ldr	r2, [r1, #0]
    3276:	9204      	str	r2, [sp, #16]
    3278:	17d0      	asrs	r0, r2, #31
    327a:	9005      	str	r0, [sp, #20]
    327c:	6908      	ldr	r0, [r1, #16]
    327e:	0006      	movs	r6, r0
    3280:	17c5      	asrs	r5, r0, #31
    3282:	9506      	str	r5, [sp, #24]
    3284:	6848      	ldr	r0, [r1, #4]
    3286:	9007      	str	r0, [sp, #28]
    3288:	17c7      	asrs	r7, r0, #31
    328a:	9708      	str	r7, [sp, #32]
    328c:	68cd      	ldr	r5, [r1, #12]
    328e:	9509      	str	r5, [sp, #36]	; 0x24
    3290:	17ef      	asrs	r7, r5, #31
    3292:	970a      	str	r7, [sp, #40]	; 0x28
    3294:	688f      	ldr	r7, [r1, #8]
    3296:	970b      	str	r7, [sp, #44]	; 0x2c
    3298:	17f9      	asrs	r1, r7, #31
    329a:	910c      	str	r1, [sp, #48]	; 0x30
   t1 = (int64_t)a1 << 3;
    329c:	0f63      	lsrs	r3, r4, #29
    329e:	9901      	ldr	r1, [sp, #4]
    32a0:	00c9      	lsls	r1, r1, #3
    32a2:	4319      	orrs	r1, r3
    32a4:	00e0      	lsls	r0, r4, #3
   c0 = (int64_t)a0*b0 + (int64_t)t1*b4 + (int64_t)t4*b1 + (int64_t)t2*b3 + (int64_t)t3*b2;
    32a6:	4d81      	ldr	r5, [pc, #516]	; (34ac <vmul1271+0x290>)
    32a8:	960d      	str	r6, [sp, #52]	; 0x34
    32aa:	0032      	movs	r2, r6
    32ac:	9b06      	ldr	r3, [sp, #24]
    32ae:	47a8      	blx	r5
    32b0:	0006      	movs	r6, r0
    32b2:	000f      	movs	r7, r1
    32b4:	9a04      	ldr	r2, [sp, #16]
    32b6:	9b05      	ldr	r3, [sp, #20]
    32b8:	9802      	ldr	r0, [sp, #8]
    32ba:	9903      	ldr	r1, [sp, #12]
    32bc:	47a8      	blx	r5
    32be:	1836      	adds	r6, r6, r0
    32c0:	414f      	adcs	r7, r1
    32c2:	9a07      	ldr	r2, [sp, #28]
    32c4:	9b08      	ldr	r3, [sp, #32]
    32c6:	980e      	ldr	r0, [sp, #56]	; 0x38
    32c8:	9912      	ldr	r1, [sp, #72]	; 0x48
    32ca:	47a8      	blx	r5
    32cc:	1836      	adds	r6, r6, r0
    32ce:	414f      	adcs	r7, r1
    32d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    32d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    32d4:	9818      	ldr	r0, [sp, #96]	; 0x60
    32d6:	991a      	ldr	r1, [sp, #104]	; 0x68
    32d8:	47a8      	blx	r5
    32da:	1836      	adds	r6, r6, r0
    32dc:	414f      	adcs	r7, r1
    32de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    32e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    32e2:	9814      	ldr	r0, [sp, #80]	; 0x50
    32e4:	9916      	ldr	r1, [sp, #88]	; 0x58
    32e6:	47a8      	blx	r5
    32e8:	1836      	adds	r6, r6, r0
    32ea:	414f      	adcs	r7, r1
    32ec:	9610      	str	r6, [sp, #64]	; 0x40
    32ee:	9711      	str	r7, [sp, #68]	; 0x44
   c1 = (int64_t)a0*b1 + (int64_t)a1*b0 + (int64_t)t2*b4 + (int64_t)t4*b2 + (int64_t)t3*b3;
    32f0:	9a07      	ldr	r2, [sp, #28]
    32f2:	9b08      	ldr	r3, [sp, #32]
    32f4:	9802      	ldr	r0, [sp, #8]
    32f6:	9903      	ldr	r1, [sp, #12]
    32f8:	47a8      	blx	r5
    32fa:	0006      	movs	r6, r0
    32fc:	000f      	movs	r7, r1
    32fe:	9a04      	ldr	r2, [sp, #16]
    3300:	9b05      	ldr	r3, [sp, #20]
    3302:	0020      	movs	r0, r4
    3304:	9901      	ldr	r1, [sp, #4]
    3306:	47a8      	blx	r5
    3308:	1836      	adds	r6, r6, r0
    330a:	414f      	adcs	r7, r1
    330c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    330e:	9b06      	ldr	r3, [sp, #24]
    3310:	9818      	ldr	r0, [sp, #96]	; 0x60
    3312:	991a      	ldr	r1, [sp, #104]	; 0x68
    3314:	47a8      	blx	r5
    3316:	1836      	adds	r6, r6, r0
    3318:	414f      	adcs	r7, r1
    331a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    331c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    331e:	980e      	ldr	r0, [sp, #56]	; 0x38
    3320:	9912      	ldr	r1, [sp, #72]	; 0x48
    3322:	47a8      	blx	r5
    3324:	1836      	adds	r6, r6, r0
    3326:	414f      	adcs	r7, r1
    3328:	9a09      	ldr	r2, [sp, #36]	; 0x24
    332a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    332c:	9814      	ldr	r0, [sp, #80]	; 0x50
    332e:	9916      	ldr	r1, [sp, #88]	; 0x58
    3330:	47a8      	blx	r5
    3332:	1836      	adds	r6, r6, r0
    3334:	414f      	adcs	r7, r1
    3336:	9618      	str	r6, [sp, #96]	; 0x60
    3338:	9719      	str	r7, [sp, #100]	; 0x64
   c2 = (int64_t)a0*b2 + (int64_t)a2*b0 + (int64_t)a1*b1 + (int64_t)t3*b4 + (int64_t)t4*b3;
    333a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    333c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    333e:	9802      	ldr	r0, [sp, #8]
    3340:	9903      	ldr	r1, [sp, #12]
    3342:	47a8      	blx	r5
    3344:	0006      	movs	r6, r0
    3346:	000f      	movs	r7, r1
    3348:	9a04      	ldr	r2, [sp, #16]
    334a:	9b05      	ldr	r3, [sp, #20]
    334c:	4640      	mov	r0, r8
    334e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3350:	47a8      	blx	r5
    3352:	1836      	adds	r6, r6, r0
    3354:	414f      	adcs	r7, r1
    3356:	9a07      	ldr	r2, [sp, #28]
    3358:	9b08      	ldr	r3, [sp, #32]
    335a:	0020      	movs	r0, r4
    335c:	9901      	ldr	r1, [sp, #4]
    335e:	47a8      	blx	r5
    3360:	1836      	adds	r6, r6, r0
    3362:	414f      	adcs	r7, r1
    3364:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3366:	9b06      	ldr	r3, [sp, #24]
    3368:	9814      	ldr	r0, [sp, #80]	; 0x50
    336a:	9916      	ldr	r1, [sp, #88]	; 0x58
    336c:	47a8      	blx	r5
    336e:	1836      	adds	r6, r6, r0
    3370:	414f      	adcs	r7, r1
    3372:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3376:	980e      	ldr	r0, [sp, #56]	; 0x38
    3378:	9912      	ldr	r1, [sp, #72]	; 0x48
    337a:	47a8      	blx	r5
    337c:	0032      	movs	r2, r6
    337e:	003b      	movs	r3, r7
    3380:	1812      	adds	r2, r2, r0
    3382:	414b      	adcs	r3, r1
    3384:	9214      	str	r2, [sp, #80]	; 0x50
    3386:	9315      	str	r3, [sp, #84]	; 0x54
   c3 = (int64_t)a0*b3 + (int64_t)a3*b0 + (int64_t)a1*b2 + (int64_t)a2*b1 + (int64_t)t4*b4;
    3388:	9a09      	ldr	r2, [sp, #36]	; 0x24
    338a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    338c:	9802      	ldr	r0, [sp, #8]
    338e:	9903      	ldr	r1, [sp, #12]
    3390:	47a8      	blx	r5
    3392:	0006      	movs	r6, r0
    3394:	000f      	movs	r7, r1
    3396:	9a04      	ldr	r2, [sp, #16]
    3398:	9b05      	ldr	r3, [sp, #20]
    339a:	4650      	mov	r0, sl
    339c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    339e:	47a8      	blx	r5
    33a0:	1836      	adds	r6, r6, r0
    33a2:	414f      	adcs	r7, r1
    33a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    33a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    33a8:	0020      	movs	r0, r4
    33aa:	9901      	ldr	r1, [sp, #4]
    33ac:	47a8      	blx	r5
    33ae:	1836      	adds	r6, r6, r0
    33b0:	414f      	adcs	r7, r1
    33b2:	9a07      	ldr	r2, [sp, #28]
    33b4:	9b08      	ldr	r3, [sp, #32]
    33b6:	4640      	mov	r0, r8
    33b8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    33ba:	47a8      	blx	r5
    33bc:	1836      	adds	r6, r6, r0
    33be:	414f      	adcs	r7, r1
    33c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    33c2:	9b06      	ldr	r3, [sp, #24]
    33c4:	980e      	ldr	r0, [sp, #56]	; 0x38
    33c6:	9912      	ldr	r1, [sp, #72]	; 0x48
    33c8:	47a8      	blx	r5
    33ca:	1836      	adds	r6, r6, r0
    33cc:	414f      	adcs	r7, r1
    33ce:	960e      	str	r6, [sp, #56]	; 0x38
    33d0:	970f      	str	r7, [sp, #60]	; 0x3c
   c4 = (int64_t)a0*b4 + (int64_t)a4*b0 + (int64_t)a1*b3 + (int64_t)a3*b1 + (int64_t)a2*b2;
    33d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    33d4:	9b06      	ldr	r3, [sp, #24]
    33d6:	9802      	ldr	r0, [sp, #8]
    33d8:	9903      	ldr	r1, [sp, #12]
    33da:	47a8      	blx	r5
    33dc:	0006      	movs	r6, r0
    33de:	000f      	movs	r7, r1
    33e0:	9a04      	ldr	r2, [sp, #16]
    33e2:	9b05      	ldr	r3, [sp, #20]
    33e4:	4658      	mov	r0, fp
    33e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    33e8:	47a8      	blx	r5
    33ea:	1836      	adds	r6, r6, r0
    33ec:	414f      	adcs	r7, r1
    33ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    33f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    33f2:	0020      	movs	r0, r4
    33f4:	9901      	ldr	r1, [sp, #4]
    33f6:	47a8      	blx	r5
    33f8:	1836      	adds	r6, r6, r0
    33fa:	414f      	adcs	r7, r1
    33fc:	9a07      	ldr	r2, [sp, #28]
    33fe:	9b08      	ldr	r3, [sp, #32]
    3400:	4650      	mov	r0, sl
    3402:	9917      	ldr	r1, [sp, #92]	; 0x5c
    3404:	47a8      	blx	r5
    3406:	1836      	adds	r6, r6, r0
    3408:	414f      	adcs	r7, r1
    340a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    340c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    340e:	4640      	mov	r0, r8
    3410:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3412:	47a8      	blx	r5
    3414:	1836      	adds	r6, r6, r0
    3416:	414f      	adcs	r7, r1
#endif
   
                    r0   = c0 & mask_26; 
    c1 += c0 >> 26; r1   = c1 & mask_26;
    3418:	9c10      	ldr	r4, [sp, #64]	; 0x40
    341a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    341c:	01ab      	lsls	r3, r5, #6
    341e:	0ea0      	lsrs	r0, r4, #26
    3420:	4318      	orrs	r0, r3
    3422:	16a9      	asrs	r1, r5, #26
    3424:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3426:	9c19      	ldr	r4, [sp, #100]	; 0x64
    3428:	18c0      	adds	r0, r0, r3
    342a:	4161      	adcs	r1, r4
    c2 += c1 >> 26; c[2] = c2 & mask_26; 
    342c:	018b      	lsls	r3, r1, #6
    342e:	0e84      	lsrs	r4, r0, #26
    3430:	431c      	orrs	r4, r3
    3432:	168d      	asrs	r5, r1, #26
    3434:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3436:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3438:	18a4      	adds	r4, r4, r2
    343a:	415d      	adcs	r5, r3
    343c:	01a3      	lsls	r3, r4, #6
    343e:	099b      	lsrs	r3, r3, #6
    3440:	464a      	mov	r2, r9
    3442:	6093      	str	r3, [r2, #8]
    c3 += c2 >> 26; c[3] = c3 & mask_26; 
    3444:	01a9      	lsls	r1, r5, #6
    3446:	0ea2      	lsrs	r2, r4, #26
    3448:	430a      	orrs	r2, r1
    344a:	16ab      	asrs	r3, r5, #26
    344c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    344e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    3450:	1912      	adds	r2, r2, r4
    3452:	416b      	adcs	r3, r5
    3454:	0191      	lsls	r1, r2, #6
    3456:	0989      	lsrs	r1, r1, #6
    3458:	464d      	mov	r5, r9
    345a:	60e9      	str	r1, [r5, #12]
    c4 += c3 >> 26; c[4] = c4 & mask_23; 
    345c:	0199      	lsls	r1, r3, #6
    345e:	0e94      	lsrs	r4, r2, #26
    3460:	430c      	orrs	r4, r1
    3462:	169d      	asrs	r5, r3, #26
    3464:	19a4      	adds	r4, r4, r6
    3466:	417d      	adcs	r5, r7
    3468:	0263      	lsls	r3, r4, #9
    346a:	0a5b      	lsrs	r3, r3, #9
    346c:	464a      	mov	r2, r9
    346e:	6113      	str	r3, [r2, #16]
                    r0   = c0 & mask_26; 
    3470:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3472:	019b      	lsls	r3, r3, #6
    3474:	099b      	lsrs	r3, r3, #6
//    c4 += c3 >> 26; c[4] = c4 & mask_26; 
    
    c0   = r0 + (c4 >> 23);
    3476:	001e      	movs	r6, r3
    3478:	2700      	movs	r7, #0
    347a:	0269      	lsls	r1, r5, #9
    347c:	0de2      	lsrs	r2, r4, #23
    347e:	430a      	orrs	r2, r1
    3480:	15eb      	asrs	r3, r5, #23
    3482:	1992      	adds	r2, r2, r6
    3484:	417b      	adcs	r3, r7
//    c0   = r0 + ((c4 >> 26) << 3);                  
    c[0] = (int32_t)c0 & mask_26;
    3486:	0191      	lsls	r1, r2, #6
    3488:	0989      	lsrs	r1, r1, #6
    348a:	464c      	mov	r4, r9
    348c:	6021      	str	r1, [r4, #0]
    c1 += c0 >> 26; r1   = c1 & mask_26;
    348e:	0180      	lsls	r0, r0, #6
    3490:	0980      	lsrs	r0, r0, #6
    c[1] = r1 + (int32_t)(c0 >> 26);
    3492:	019b      	lsls	r3, r3, #6
    3494:	0e92      	lsrs	r2, r2, #26
    3496:	431a      	orrs	r2, r3
    3498:	1880      	adds	r0, r0, r2
    349a:	6060      	str	r0, [r4, #4]
}
    349c:	b01d      	add	sp, #116	; 0x74
    349e:	bc3c      	pop	{r2, r3, r4, r5}
    34a0:	4690      	mov	r8, r2
    34a2:	4699      	mov	r9, r3
    34a4:	46a2      	mov	sl, r4
    34a6:	46ab      	mov	fp, r5
    34a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34aa:	46c0      	nop			; (mov r8, r8)
    34ac:	00006791 	.word	0x00006791

000034b0 <vsqr1271>:


void vsqr1271(velm_t a, velm_t c)
{ // Field squaring, c = a*b mod p
    34b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34b2:	46de      	mov	lr, fp
    34b4:	4657      	mov	r7, sl
    34b6:	464e      	mov	r6, r9
    34b8:	4645      	mov	r5, r8
    34ba:	b5e0      	push	{r5, r6, r7, lr}
    34bc:	b091      	sub	sp, #68	; 0x44
    34be:	4689      	mov	r9, r1
#else
   int64_t t0, t1, t2, t3, t4;

   a0 = a[0]; a1 = a[1]; a2 = a[2]; a3 = a[3]; a4 = a[4];

   t0 = (int64_t)a0 << 1;
    34c0:	6801      	ldr	r1, [r0, #0]
    34c2:	17cb      	asrs	r3, r1, #31
    34c4:	004a      	lsls	r2, r1, #1
    34c6:	9205      	str	r2, [sp, #20]
   t1 = (int64_t)a1 << 1;
    34c8:	6844      	ldr	r4, [r0, #4]
    34ca:	17e2      	asrs	r2, r4, #31
    34cc:	9201      	str	r2, [sp, #4]
    34ce:	9408      	str	r4, [sp, #32]
    34d0:	0065      	lsls	r5, r4, #1
    34d2:	950d      	str	r5, [sp, #52]	; 0x34
   t2 = (int64_t)a2 << 4;
    34d4:	6886      	ldr	r6, [r0, #8]
    34d6:	46b3      	mov	fp, r6
    34d8:	17f4      	asrs	r4, r6, #31
    34da:	9403      	str	r4, [sp, #12]
   t3 = (int64_t)a3 << 3;
    34dc:	68c6      	ldr	r6, [r0, #12]
    34de:	46b2      	mov	sl, r6
    34e0:	17f5      	asrs	r5, r6, #31
    34e2:	9502      	str	r5, [sp, #8]
   t4 = (int64_t)a4 << 4;
    34e4:	6904      	ldr	r4, [r0, #16]
    34e6:	17e6      	asrs	r6, r4, #31
    34e8:	46b0      	mov	r8, r6
    34ea:	1726      	asrs	r6, r4, #28
    34ec:	960c      	str	r6, [sp, #48]	; 0x30
    34ee:	0120      	lsls	r0, r4, #4
    34f0:	900a      	str	r0, [sp, #40]	; 0x28

   c0 = (int64_t)a0*a0 + (int64_t)t4*a1 + (int64_t)t2*a3;
    34f2:	4d65      	ldr	r5, [pc, #404]	; (3688 <vsqr1271+0x1d8>)
    34f4:	000a      	movs	r2, r1
    34f6:	0008      	movs	r0, r1
    34f8:	9304      	str	r3, [sp, #16]
    34fa:	0019      	movs	r1, r3
    34fc:	47a8      	blx	r5
    34fe:	0006      	movs	r6, r0
    3500:	000f      	movs	r7, r1
    3502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3506:	9808      	ldr	r0, [sp, #32]
    3508:	9901      	ldr	r1, [sp, #4]
    350a:	47a8      	blx	r5
    350c:	1836      	adds	r6, r6, r0
    350e:	414f      	adcs	r7, r1
   t2 = (int64_t)a2 << 4;
    3510:	465b      	mov	r3, fp
    3512:	0f1b      	lsrs	r3, r3, #28
    3514:	9803      	ldr	r0, [sp, #12]
    3516:	0101      	lsls	r1, r0, #4
    3518:	4319      	orrs	r1, r3
    351a:	465b      	mov	r3, fp
    351c:	0118      	lsls	r0, r3, #4
   c0 = (int64_t)a0*a0 + (int64_t)t4*a1 + (int64_t)t2*a3;
    351e:	4652      	mov	r2, sl
    3520:	9b02      	ldr	r3, [sp, #8]
    3522:	47a8      	blx	r5
    3524:	1836      	adds	r6, r6, r0
    3526:	414f      	adcs	r7, r1
    3528:	9606      	str	r6, [sp, #24]
    352a:	9707      	str	r7, [sp, #28]
   t3 = (int64_t)a3 << 3;
    352c:	4653      	mov	r3, sl
    352e:	0f5b      	lsrs	r3, r3, #29
    3530:	9f02      	ldr	r7, [sp, #8]
    3532:	00f9      	lsls	r1, r7, #3
    3534:	4319      	orrs	r1, r3
    3536:	4653      	mov	r3, sl
    3538:	00d8      	lsls	r0, r3, #3
   c1 = (int64_t)t0*a1 + (int64_t)t3*a3 + (int64_t)t4*a2;
    353a:	4652      	mov	r2, sl
    353c:	003b      	movs	r3, r7
    353e:	47a8      	blx	r5
    3540:	0006      	movs	r6, r0
    3542:	000f      	movs	r7, r1
    3544:	9a08      	ldr	r2, [sp, #32]
    3546:	9b01      	ldr	r3, [sp, #4]
    3548:	9805      	ldr	r0, [sp, #20]
    354a:	9904      	ldr	r1, [sp, #16]
    354c:	47a8      	blx	r5
    354e:	1836      	adds	r6, r6, r0
    3550:	414f      	adcs	r7, r1
    3552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3556:	4658      	mov	r0, fp
    3558:	9903      	ldr	r1, [sp, #12]
    355a:	47a8      	blx	r5
    355c:	1836      	adds	r6, r6, r0
    355e:	414f      	adcs	r7, r1
    3560:	960e      	str	r6, [sp, #56]	; 0x38
    3562:	970f      	str	r7, [sp, #60]	; 0x3c
   c2 = (int64_t)t0*a2 + (int64_t)a1*a1 + (int64_t)t4*a3;
    3564:	465a      	mov	r2, fp
    3566:	9b03      	ldr	r3, [sp, #12]
    3568:	9805      	ldr	r0, [sp, #20]
    356a:	9904      	ldr	r1, [sp, #16]
    356c:	47a8      	blx	r5
    356e:	0006      	movs	r6, r0
    3570:	000f      	movs	r7, r1
    3572:	9808      	ldr	r0, [sp, #32]
    3574:	0002      	movs	r2, r0
    3576:	9901      	ldr	r1, [sp, #4]
    3578:	000b      	movs	r3, r1
    357a:	47a8      	blx	r5
    357c:	1836      	adds	r6, r6, r0
    357e:	414f      	adcs	r7, r1
    3580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3584:	4650      	mov	r0, sl
    3586:	9902      	ldr	r1, [sp, #8]
    3588:	47a8      	blx	r5
    358a:	0032      	movs	r2, r6
    358c:	003b      	movs	r3, r7
    358e:	1812      	adds	r2, r2, r0
    3590:	414b      	adcs	r3, r1
    3592:	9208      	str	r2, [sp, #32]
    3594:	9309      	str	r3, [sp, #36]	; 0x24
   c3 = (int64_t)t0*a3 + (int64_t)t1*a2 + ((int64_t)a4 << 3)*a4;
    3596:	4652      	mov	r2, sl
    3598:	9b02      	ldr	r3, [sp, #8]
    359a:	9805      	ldr	r0, [sp, #20]
    359c:	9904      	ldr	r1, [sp, #16]
    359e:	47a8      	blx	r5
    35a0:	0006      	movs	r6, r0
    35a2:	000f      	movs	r7, r1
    35a4:	465a      	mov	r2, fp
    35a6:	9b03      	ldr	r3, [sp, #12]
    35a8:	980d      	ldr	r0, [sp, #52]	; 0x34
    35aa:	9901      	ldr	r1, [sp, #4]
    35ac:	47a8      	blx	r5
    35ae:	1836      	adds	r6, r6, r0
    35b0:	414f      	adcs	r7, r1
    35b2:	0f63      	lsrs	r3, r4, #29
    35b4:	4640      	mov	r0, r8
    35b6:	00c1      	lsls	r1, r0, #3
    35b8:	4319      	orrs	r1, r3
    35ba:	00e0      	lsls	r0, r4, #3
    35bc:	0022      	movs	r2, r4
    35be:	4643      	mov	r3, r8
    35c0:	47a8      	blx	r5
    35c2:	1836      	adds	r6, r6, r0
    35c4:	414f      	adcs	r7, r1
    35c6:	960a      	str	r6, [sp, #40]	; 0x28
    35c8:	970b      	str	r7, [sp, #44]	; 0x2c
   c4 = (int64_t)t0*a4 + (int64_t)t1*a3 + (int64_t)a2*a2;
    35ca:	0022      	movs	r2, r4
    35cc:	4643      	mov	r3, r8
    35ce:	9805      	ldr	r0, [sp, #20]
    35d0:	9904      	ldr	r1, [sp, #16]
    35d2:	47a8      	blx	r5
    35d4:	0006      	movs	r6, r0
    35d6:	000f      	movs	r7, r1
    35d8:	4652      	mov	r2, sl
    35da:	9b02      	ldr	r3, [sp, #8]
    35dc:	980d      	ldr	r0, [sp, #52]	; 0x34
    35de:	9901      	ldr	r1, [sp, #4]
    35e0:	47a8      	blx	r5
    35e2:	1836      	adds	r6, r6, r0
    35e4:	414f      	adcs	r7, r1
    35e6:	465a      	mov	r2, fp
    35e8:	9903      	ldr	r1, [sp, #12]
    35ea:	000b      	movs	r3, r1
    35ec:	4658      	mov	r0, fp
    35ee:	47a8      	blx	r5
    35f0:	1836      	adds	r6, r6, r0
    35f2:	414f      	adcs	r7, r1
#endif
   
                    r0   = c0 & mask_26; 
    c1 += c0 >> 26; r1   = c1 & mask_26;
    35f4:	9c06      	ldr	r4, [sp, #24]
    35f6:	9d07      	ldr	r5, [sp, #28]
    35f8:	01ab      	lsls	r3, r5, #6
    35fa:	0ea0      	lsrs	r0, r4, #26
    35fc:	4318      	orrs	r0, r3
    35fe:	16a9      	asrs	r1, r5, #26
    3600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3602:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    3604:	18c0      	adds	r0, r0, r3
    3606:	4161      	adcs	r1, r4
    c2 += c1 >> 26; c[2] = c2 & mask_26; 
    3608:	018b      	lsls	r3, r1, #6
    360a:	0e84      	lsrs	r4, r0, #26
    360c:	431c      	orrs	r4, r3
    360e:	168d      	asrs	r5, r1, #26
    3610:	9a08      	ldr	r2, [sp, #32]
    3612:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3614:	18a4      	adds	r4, r4, r2
    3616:	415d      	adcs	r5, r3
    3618:	01a3      	lsls	r3, r4, #6
    361a:	099b      	lsrs	r3, r3, #6
    361c:	464a      	mov	r2, r9
    361e:	6093      	str	r3, [r2, #8]
    c3 += c2 >> 26; c[3] = c3 & mask_26; 
    3620:	01a9      	lsls	r1, r5, #6
    3622:	0ea2      	lsrs	r2, r4, #26
    3624:	430a      	orrs	r2, r1
    3626:	16ab      	asrs	r3, r5, #26
    3628:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    362a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    362c:	1912      	adds	r2, r2, r4
    362e:	416b      	adcs	r3, r5
    3630:	0191      	lsls	r1, r2, #6
    3632:	0989      	lsrs	r1, r1, #6
    3634:	464d      	mov	r5, r9
    3636:	60e9      	str	r1, [r5, #12]
    c4 += c3 >> 26; c[4] = c4 & mask_23; 
    3638:	0199      	lsls	r1, r3, #6
    363a:	0e94      	lsrs	r4, r2, #26
    363c:	430c      	orrs	r4, r1
    363e:	169d      	asrs	r5, r3, #26
    3640:	19a4      	adds	r4, r4, r6
    3642:	417d      	adcs	r5, r7
    3644:	0263      	lsls	r3, r4, #9
    3646:	0a5b      	lsrs	r3, r3, #9
    3648:	464a      	mov	r2, r9
    364a:	6113      	str	r3, [r2, #16]
                    r0   = c0 & mask_26; 
    364c:	9b06      	ldr	r3, [sp, #24]
    364e:	019b      	lsls	r3, r3, #6
    3650:	099b      	lsrs	r3, r3, #6
//    c4 += c3 >> 26; c[4] = c4 & mask_26; 
    
    c0   = r0 + (c4 >> 23);
    3652:	001e      	movs	r6, r3
    3654:	2700      	movs	r7, #0
    3656:	0269      	lsls	r1, r5, #9
    3658:	0de2      	lsrs	r2, r4, #23
    365a:	430a      	orrs	r2, r1
    365c:	15eb      	asrs	r3, r5, #23
    365e:	1992      	adds	r2, r2, r6
    3660:	417b      	adcs	r3, r7
//    c0   = r0 + ((c4 >> 26) << 3);                  
    c[0] = (int32_t)c0 & mask_26;
    3662:	0191      	lsls	r1, r2, #6
    3664:	0989      	lsrs	r1, r1, #6
    3666:	464c      	mov	r4, r9
    3668:	6021      	str	r1, [r4, #0]
    c1 += c0 >> 26; r1   = c1 & mask_26;
    366a:	0180      	lsls	r0, r0, #6
    366c:	0980      	lsrs	r0, r0, #6
    c[1] = r1 + (int32_t)(c0 >> 26);
    366e:	019b      	lsls	r3, r3, #6
    3670:	0e92      	lsrs	r2, r2, #26
    3672:	431a      	orrs	r2, r3
    3674:	1880      	adds	r0, r0, r2
    3676:	6060      	str	r0, [r4, #4]
}
    3678:	b011      	add	sp, #68	; 0x44
    367a:	bc3c      	pop	{r2, r3, r4, r5}
    367c:	4690      	mov	r8, r2
    367e:	4699      	mov	r9, r3
    3680:	46a2      	mov	sl, r4
    3682:	46ab      	mov	fp, r5
    3684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	00006791 	.word	0x00006791

0000368c <vmod1271_incomplete>:


void vmod1271_incomplete(velm_t a, velm_t c)
{ // Reduce field element modulo 2^127-1
    368c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Redundant representation: 23/26/26/26/26-bit
  // Output is in the range [0, 2^127-1]
    int32_t t0, t1, t2, t3, t4;
    uint32_t rem;

    t0 = a[0]; t1 = a[1]; t2 = a[2]; t3 = a[3]; t4 = a[4];   
    368e:	6805      	ldr	r5, [r0, #0]
    3690:	6847      	ldr	r7, [r0, #4]
    3692:	6882      	ldr	r2, [r0, #8]
    3694:	68c6      	ldr	r6, [r0, #12]
    3696:	6903      	ldr	r3, [r0, #16]

    // Carry propagation
    t1 += (t0 >> 26); t0 &= mask_26; 
    3698:	16ac      	asrs	r4, r5, #26
    369a:	19e4      	adds	r4, r4, r7
    t2 += (t1 >> 26); t1 &= mask_26; 
    369c:	16a0      	asrs	r0, r4, #26
    369e:	1880      	adds	r0, r0, r2
    36a0:	01a4      	lsls	r4, r4, #6
    36a2:	09a4      	lsrs	r4, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    36a4:	1682      	asrs	r2, r0, #26
    36a6:	1992      	adds	r2, r2, r6
    36a8:	0180      	lsls	r0, r0, #6
    36aa:	0980      	lsrs	r0, r0, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    36ac:	1696      	asrs	r6, r2, #26
    36ae:	18f6      	adds	r6, r6, r3
    36b0:	0192      	lsls	r2, r2, #6
    36b2:	0992      	lsrs	r2, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    36b4:	0277      	lsls	r7, r6, #9
    36b6:	0a7f      	lsrs	r7, r7, #9
    36b8:	15f6      	asrs	r6, r6, #23
    t1 += (t0 >> 26); t0 &= mask_26; 
    36ba:	01ad      	lsls	r5, r5, #6
    36bc:	09ad      	lsrs	r5, r5, #6
    
    // Correction
    t0 += rem; 
    36be:	1973      	adds	r3, r6, r5
    t1 += (t0 >> 26); t0 &= mask_26; 
    36c0:	169d      	asrs	r5, r3, #26
    36c2:	192c      	adds	r4, r5, r4
    t2 += (t1 >> 26); t1 &= mask_26; 
    36c4:	16a5      	asrs	r5, r4, #26
    36c6:	1828      	adds	r0, r5, r0
    t3 += (t2 >> 26); t2 &= mask_26; 
    36c8:	1685      	asrs	r5, r0, #26
    36ca:	18aa      	adds	r2, r5, r2
    t4 += (t3 >> 26); t3 &= mask_26;
    36cc:	1696      	asrs	r6, r2, #26
    36ce:	19f6      	adds	r6, r6, r7
    rem = (t4 >> 23); t4 &= mask_23;
    36d0:	15f7      	asrs	r7, r6, #23
    t1 += (t0 >> 26); t0 &= mask_26; 
    36d2:	019d      	lsls	r5, r3, #6
    36d4:	09ad      	lsrs	r5, r5, #6
    t0 += rem; 
    36d6:	197d      	adds	r5, r7, r5

    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    36d8:	600d      	str	r5, [r1, #0]
    t2 += (t1 >> 26); t1 &= mask_26; 
    36da:	01a4      	lsls	r4, r4, #6
    36dc:	09a4      	lsrs	r4, r4, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    36de:	604c      	str	r4, [r1, #4]
    t3 += (t2 >> 26); t2 &= mask_26; 
    36e0:	0180      	lsls	r0, r0, #6
    36e2:	0980      	lsrs	r0, r0, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    36e4:	6088      	str	r0, [r1, #8]
    t4 += (t3 >> 26); t3 &= mask_26;
    36e6:	0192      	lsls	r2, r2, #6
    36e8:	0992      	lsrs	r2, r2, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    36ea:	60ca      	str	r2, [r1, #12]
    rem = (t4 >> 23); t4 &= mask_23;
    36ec:	0273      	lsls	r3, r6, #9
    36ee:	0a5b      	lsrs	r3, r3, #9
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    36f0:	610b      	str	r3, [r1, #16]
}
    36f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000036f4 <vmod1271>:


void vmod1271(velm_t a, velm_t c)
{ // Reduce field element modulo 2^127-1
    36f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Output is in the range [0, 2^127-2]
  // Redundant representation: 23/26/26/26/26-bit
    int32_t t0, t1, t2, t3, t4;
    uint32_t mask, rem;

    t0 = a[0]; t1 = a[1]; t2 = a[2]; t3 = a[3]; t4 = a[4];   
    36f6:	6803      	ldr	r3, [r0, #0]
    36f8:	6847      	ldr	r7, [r0, #4]
    36fa:	6882      	ldr	r2, [r0, #8]
    36fc:	68c6      	ldr	r6, [r0, #12]
    36fe:	6905      	ldr	r5, [r0, #16]

    // First carry propagation
    t1 += (t0 >> 26); t0 &= mask_26; 
    3700:	169c      	asrs	r4, r3, #26
    3702:	19e4      	adds	r4, r4, r7
    t2 += (t1 >> 26); t1 &= mask_26; 
    3704:	16a7      	asrs	r7, r4, #26
    3706:	18bf      	adds	r7, r7, r2
    3708:	01a4      	lsls	r4, r4, #6
    370a:	09a4      	lsrs	r4, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    370c:	16ba      	asrs	r2, r7, #26
    370e:	1992      	adds	r2, r2, r6
    3710:	01bf      	lsls	r7, r7, #6
    3712:	09bf      	lsrs	r7, r7, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    3714:	1690      	asrs	r0, r2, #26
    3716:	1940      	adds	r0, r0, r5
    3718:	0192      	lsls	r2, r2, #6
    371a:	0992      	lsrs	r2, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    371c:	0246      	lsls	r6, r0, #9
    371e:	0a76      	lsrs	r6, r6, #9
    t1 += (t0 >> 26); t0 &= mask_26; 
    3720:	019b      	lsls	r3, r3, #6
    3722:	099b      	lsrs	r3, r3, #6
    
    // First correction adding rem+1
    t0 += rem + 1; 
    3724:	3301      	adds	r3, #1
    rem = (t4 >> 23); t4 &= mask_23;
    3726:	15c0      	asrs	r0, r0, #23
    t0 += rem + 1; 
    3728:	181b      	adds	r3, r3, r0
    t1 += (t0 >> 26); t0 &= mask_26; 
    372a:	1698      	asrs	r0, r3, #26
    372c:	1904      	adds	r4, r0, r4
    t2 += (t1 >> 26); t1 &= mask_26; 
    372e:	16a0      	asrs	r0, r4, #26
    3730:	19c7      	adds	r7, r0, r7
    3732:	01a4      	lsls	r4, r4, #6
    3734:	09a0      	lsrs	r0, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    3736:	16bc      	asrs	r4, r7, #26
    3738:	18a2      	adds	r2, r4, r2
    373a:	01bf      	lsls	r7, r7, #6
    373c:	09bf      	lsrs	r7, r7, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    373e:	1695      	asrs	r5, r2, #26
    3740:	19ad      	adds	r5, r5, r6
    3742:	0192      	lsls	r2, r2, #6
    3744:	0996      	lsrs	r6, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    3746:	026c      	lsls	r4, r5, #9
    3748:	0a64      	lsrs	r4, r4, #9
    t1 += (t0 >> 26); t0 &= mask_26; 
    374a:	019b      	lsls	r3, r3, #6
    374c:	099b      	lsrs	r3, r3, #6
    rem = (t4 >> 23); t4 &= mask_23;
    374e:	15ed      	asrs	r5, r5, #23

    // If final carry = 0 then subtract 1
    mask = rem - 1;
    3750:	3d01      	subs	r5, #1
    t0 -= (mask & 1);
    3752:	2201      	movs	r2, #1
    3754:	4015      	ands	r5, r2
    3756:	1b5b      	subs	r3, r3, r5
    t1 += (t0 >> 26); t0 &= mask_26; 
    3758:	169d      	asrs	r5, r3, #26
    375a:	182d      	adds	r5, r5, r0
    t2 += (t1 >> 26); t1 &= mask_26; 
    375c:	16a8      	asrs	r0, r5, #26
    375e:	19c0      	adds	r0, r0, r7
    t3 += (t2 >> 26); t2 &= mask_26; 
    3760:	1682      	asrs	r2, r0, #26
    3762:	1992      	adds	r2, r2, r6
    t1 += (t0 >> 26); t0 &= mask_26; 
    3764:	019b      	lsls	r3, r3, #6
    3766:	099b      	lsrs	r3, r3, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    3768:	600b      	str	r3, [r1, #0]
    t2 += (t1 >> 26); t1 &= mask_26; 
    376a:	01ad      	lsls	r5, r5, #6
    376c:	09ad      	lsrs	r5, r5, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    376e:	604d      	str	r5, [r1, #4]
    t3 += (t2 >> 26); t2 &= mask_26; 
    3770:	0180      	lsls	r0, r0, #6
    3772:	0980      	lsrs	r0, r0, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    3774:	6088      	str	r0, [r1, #8]
    t4 += (t3 >> 26); t3 &= mask_26;
    3776:	0193      	lsls	r3, r2, #6
    3778:	099b      	lsrs	r3, r3, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    377a:	60cb      	str	r3, [r1, #12]
    t4 += (t3 >> 26); t3 &= mask_26;
    377c:	1692      	asrs	r2, r2, #26
    377e:	1914      	adds	r4, r2, r4
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    3780:	610c      	str	r4, [r1, #16]
}
    3782:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003784 <vexp1251>:


__inline void vexp1251(felm_t a, felm_t af)
{ // Exponentiation over GF(p), af = a^(125-1)
    3784:	b5f0      	push	{r4, r5, r6, r7, lr}
    3786:	b09b      	sub	sp, #108	; 0x6c
    3788:	0005      	movs	r5, r0
    378a:	000e      	movs	r6, r1
	int i;
	velm_t t1, t2, t3, t4, t5;

	vsqr1271(a, t2);
    378c:	a910      	add	r1, sp, #64	; 0x40
    378e:	4c48      	ldr	r4, [pc, #288]	; (38b0 <vexp1251+0x12c>)
    3790:	47a0      	blx	r4
	vmul1271(a, t2, t2);
    3792:	aa10      	add	r2, sp, #64	; 0x40
    3794:	0011      	movs	r1, r2
    3796:	0028      	movs	r0, r5
    3798:	4f46      	ldr	r7, [pc, #280]	; (38b4 <vexp1251+0x130>)
    379a:	47b8      	blx	r7
	vsqr1271(t2, t3);
    379c:	a90b      	add	r1, sp, #44	; 0x2c
    379e:	a810      	add	r0, sp, #64	; 0x40
    37a0:	47a0      	blx	r4
	vsqr1271(t3, t3);
    37a2:	a90b      	add	r1, sp, #44	; 0x2c
    37a4:	0008      	movs	r0, r1
    37a6:	47a0      	blx	r4
	vmul1271(t2, t3, t3);
    37a8:	aa0b      	add	r2, sp, #44	; 0x2c
    37aa:	0011      	movs	r1, r2
    37ac:	a810      	add	r0, sp, #64	; 0x40
    37ae:	47b8      	blx	r7
	vsqr1271(t3, t4);
    37b0:	a906      	add	r1, sp, #24
    37b2:	a80b      	add	r0, sp, #44	; 0x2c
    37b4:	47a0      	blx	r4
	vsqr1271(t4, t4);
    37b6:	a906      	add	r1, sp, #24
    37b8:	0008      	movs	r0, r1
    37ba:	47a0      	blx	r4
	vsqr1271(t4, t4);
    37bc:	a906      	add	r1, sp, #24
    37be:	0008      	movs	r0, r1
    37c0:	47a0      	blx	r4
	vsqr1271(t4, t4);
    37c2:	a906      	add	r1, sp, #24
    37c4:	0008      	movs	r0, r1
    37c6:	47a0      	blx	r4
	vmul1271(t3, t4, t4);
    37c8:	aa06      	add	r2, sp, #24
    37ca:	0011      	movs	r1, r2
    37cc:	a80b      	add	r0, sp, #44	; 0x2c
    37ce:	47b8      	blx	r7
	vsqr1271(t4, t5);
    37d0:	a901      	add	r1, sp, #4
    37d2:	a806      	add	r0, sp, #24
    37d4:	47a0      	blx	r4
    37d6:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) vsqr1271(t5, t5);
    37d8:	4f35      	ldr	r7, [pc, #212]	; (38b0 <vexp1251+0x12c>)
    37da:	a901      	add	r1, sp, #4
    37dc:	0008      	movs	r0, r1
    37de:	47b8      	blx	r7
    37e0:	3c01      	subs	r4, #1
    37e2:	2c00      	cmp	r4, #0
    37e4:	d1f9      	bne.n	37da <vexp1251+0x56>
	vmul1271(t4, t5, t5);
    37e6:	aa01      	add	r2, sp, #4
    37e8:	0011      	movs	r1, r2
    37ea:	a806      	add	r0, sp, #24
    37ec:	4b31      	ldr	r3, [pc, #196]	; (38b4 <vexp1251+0x130>)
    37ee:	4798      	blx	r3
	vsqr1271(t5, t2);
    37f0:	a910      	add	r1, sp, #64	; 0x40
    37f2:	a801      	add	r0, sp, #4
    37f4:	4b2e      	ldr	r3, [pc, #184]	; (38b0 <vexp1251+0x12c>)
    37f6:	4798      	blx	r3
    37f8:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) vsqr1271(t2, t2);
    37fa:	4f2d      	ldr	r7, [pc, #180]	; (38b0 <vexp1251+0x12c>)
    37fc:	a910      	add	r1, sp, #64	; 0x40
    37fe:	0008      	movs	r0, r1
    3800:	47b8      	blx	r7
    3802:	3c01      	subs	r4, #1
    3804:	2c00      	cmp	r4, #0
    3806:	d1f9      	bne.n	37fc <vexp1251+0x78>
	vmul1271(t5, t2, t2);
    3808:	aa10      	add	r2, sp, #64	; 0x40
    380a:	0011      	movs	r1, r2
    380c:	a801      	add	r0, sp, #4
    380e:	4b29      	ldr	r3, [pc, #164]	; (38b4 <vexp1251+0x130>)
    3810:	4798      	blx	r3
	vsqr1271(t2, t1);
    3812:	a915      	add	r1, sp, #84	; 0x54
    3814:	a810      	add	r0, sp, #64	; 0x40
    3816:	4b26      	ldr	r3, [pc, #152]	; (38b0 <vexp1251+0x12c>)
    3818:	4798      	blx	r3
    381a:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) vsqr1271(t1, t1);
    381c:	4f24      	ldr	r7, [pc, #144]	; (38b0 <vexp1251+0x12c>)
    381e:	a915      	add	r1, sp, #84	; 0x54
    3820:	0008      	movs	r0, r1
    3822:	47b8      	blx	r7
    3824:	3c01      	subs	r4, #1
    3826:	2c00      	cmp	r4, #0
    3828:	d1f9      	bne.n	381e <vexp1251+0x9a>
	vmul1271(t2, t1, t1);
    382a:	aa15      	add	r2, sp, #84	; 0x54
    382c:	0011      	movs	r1, r2
    382e:	a810      	add	r0, sp, #64	; 0x40
    3830:	4b20      	ldr	r3, [pc, #128]	; (38b4 <vexp1251+0x130>)
    3832:	4798      	blx	r3
    3834:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) vsqr1271(t1, t1);
    3836:	4f1e      	ldr	r7, [pc, #120]	; (38b0 <vexp1251+0x12c>)
    3838:	a915      	add	r1, sp, #84	; 0x54
    383a:	0008      	movs	r0, r1
    383c:	47b8      	blx	r7
    383e:	3c01      	subs	r4, #1
    3840:	2c00      	cmp	r4, #0
    3842:	d1f9      	bne.n	3838 <vexp1251+0xb4>
	vmul1271(t1, t2, t1);
    3844:	aa15      	add	r2, sp, #84	; 0x54
    3846:	a910      	add	r1, sp, #64	; 0x40
    3848:	0010      	movs	r0, r2
    384a:	4b1a      	ldr	r3, [pc, #104]	; (38b4 <vexp1251+0x130>)
    384c:	4798      	blx	r3
    384e:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) vsqr1271(t1, t1);
    3850:	4f17      	ldr	r7, [pc, #92]	; (38b0 <vexp1251+0x12c>)
    3852:	a915      	add	r1, sp, #84	; 0x54
    3854:	0008      	movs	r0, r1
    3856:	47b8      	blx	r7
    3858:	3c01      	subs	r4, #1
    385a:	2c00      	cmp	r4, #0
    385c:	d1f9      	bne.n	3852 <vexp1251+0xce>
	vmul1271(t5, t1, t1);
    385e:	aa15      	add	r2, sp, #84	; 0x54
    3860:	0011      	movs	r1, r2
    3862:	a801      	add	r0, sp, #4
    3864:	4b13      	ldr	r3, [pc, #76]	; (38b4 <vexp1251+0x130>)
    3866:	4798      	blx	r3
    3868:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) vsqr1271(t1, t1);
    386a:	4f11      	ldr	r7, [pc, #68]	; (38b0 <vexp1251+0x12c>)
    386c:	a915      	add	r1, sp, #84	; 0x54
    386e:	0008      	movs	r0, r1
    3870:	47b8      	blx	r7
    3872:	3c01      	subs	r4, #1
    3874:	2c00      	cmp	r4, #0
    3876:	d1f9      	bne.n	386c <vexp1251+0xe8>
	vmul1271(t4, t1, t1);
    3878:	aa15      	add	r2, sp, #84	; 0x54
    387a:	0011      	movs	r1, r2
    387c:	a806      	add	r0, sp, #24
    387e:	4b0d      	ldr	r3, [pc, #52]	; (38b4 <vexp1251+0x130>)
    3880:	4798      	blx	r3
    3882:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) vsqr1271(t1, t1);
    3884:	4f0a      	ldr	r7, [pc, #40]	; (38b0 <vexp1251+0x12c>)
    3886:	a915      	add	r1, sp, #84	; 0x54
    3888:	0008      	movs	r0, r1
    388a:	47b8      	blx	r7
    388c:	3c01      	subs	r4, #1
    388e:	2c00      	cmp	r4, #0
    3890:	d1f9      	bne.n	3886 <vexp1251+0x102>
	vmul1271(t3, t1, t1);
    3892:	aa15      	add	r2, sp, #84	; 0x54
    3894:	0011      	movs	r1, r2
    3896:	a80b      	add	r0, sp, #44	; 0x2c
    3898:	4c06      	ldr	r4, [pc, #24]	; (38b4 <vexp1251+0x130>)
    389a:	47a0      	blx	r4
	vsqr1271(t1, t1);
    389c:	a915      	add	r1, sp, #84	; 0x54
    389e:	0008      	movs	r0, r1
    38a0:	4b03      	ldr	r3, [pc, #12]	; (38b0 <vexp1251+0x12c>)
    38a2:	4798      	blx	r3
	vmul1271(a, t1, af);
    38a4:	0032      	movs	r2, r6
    38a6:	a915      	add	r1, sp, #84	; 0x54
    38a8:	0028      	movs	r0, r5
    38aa:	47a0      	blx	r4
}
    38ac:	b01b      	add	sp, #108	; 0x6c
    38ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38b0:	000034b1 	.word	0x000034b1
    38b4:	0000321d 	.word	0x0000321d

000038b8 <vinv1271>:


void vinv1271(felm_t a)
{ // Field inversion, af = a^-1 = a^(p-2) mod p
    38b8:	b570      	push	{r4, r5, r6, lr}
    38ba:	b09e      	sub	sp, #120	; 0x78
    38bc:	0005      	movs	r5, r0
	vsqr1271(a, t2);
    38be:	a905      	add	r1, sp, #20
    38c0:	4c4d      	ldr	r4, [pc, #308]	; (39f8 <vinv1271+0x140>)
    38c2:	47a0      	blx	r4
	vmul1271(a, t2, t2);
    38c4:	aa05      	add	r2, sp, #20
    38c6:	0011      	movs	r1, r2
    38c8:	0028      	movs	r0, r5
    38ca:	4e4c      	ldr	r6, [pc, #304]	; (39fc <vinv1271+0x144>)
    38cc:	47b0      	blx	r6
	vsqr1271(t2, t3);
    38ce:	a90a      	add	r1, sp, #40	; 0x28
    38d0:	a805      	add	r0, sp, #20
    38d2:	47a0      	blx	r4
	vsqr1271(t3, t3);
    38d4:	a90a      	add	r1, sp, #40	; 0x28
    38d6:	0008      	movs	r0, r1
    38d8:	47a0      	blx	r4
	vmul1271(t2, t3, t3);
    38da:	aa0a      	add	r2, sp, #40	; 0x28
    38dc:	0011      	movs	r1, r2
    38de:	a805      	add	r0, sp, #20
    38e0:	47b0      	blx	r6
	vsqr1271(t3, t4);
    38e2:	a90f      	add	r1, sp, #60	; 0x3c
    38e4:	a80a      	add	r0, sp, #40	; 0x28
    38e6:	47a0      	blx	r4
	vsqr1271(t4, t4);
    38e8:	a90f      	add	r1, sp, #60	; 0x3c
    38ea:	0008      	movs	r0, r1
    38ec:	47a0      	blx	r4
	vsqr1271(t4, t4);
    38ee:	a90f      	add	r1, sp, #60	; 0x3c
    38f0:	0008      	movs	r0, r1
    38f2:	47a0      	blx	r4
	vsqr1271(t4, t4);
    38f4:	a90f      	add	r1, sp, #60	; 0x3c
    38f6:	0008      	movs	r0, r1
    38f8:	47a0      	blx	r4
	vmul1271(t3, t4, t4);
    38fa:	aa0f      	add	r2, sp, #60	; 0x3c
    38fc:	0011      	movs	r1, r2
    38fe:	a80a      	add	r0, sp, #40	; 0x28
    3900:	47b0      	blx	r6
	vsqr1271(t4, t5);
    3902:	a914      	add	r1, sp, #80	; 0x50
    3904:	a80f      	add	r0, sp, #60	; 0x3c
    3906:	47a0      	blx	r4
    3908:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) vsqr1271(t5, t5);
    390a:	4e3b      	ldr	r6, [pc, #236]	; (39f8 <vinv1271+0x140>)
    390c:	a914      	add	r1, sp, #80	; 0x50
    390e:	0008      	movs	r0, r1
    3910:	47b0      	blx	r6
    3912:	3c01      	subs	r4, #1
    3914:	2c00      	cmp	r4, #0
    3916:	d1f9      	bne.n	390c <vinv1271+0x54>
	vmul1271(t4, t5, t5);
    3918:	aa14      	add	r2, sp, #80	; 0x50
    391a:	0011      	movs	r1, r2
    391c:	a80f      	add	r0, sp, #60	; 0x3c
    391e:	4b37      	ldr	r3, [pc, #220]	; (39fc <vinv1271+0x144>)
    3920:	4798      	blx	r3
	vsqr1271(t5, t2);
    3922:	a905      	add	r1, sp, #20
    3924:	a814      	add	r0, sp, #80	; 0x50
    3926:	4b34      	ldr	r3, [pc, #208]	; (39f8 <vinv1271+0x140>)
    3928:	4798      	blx	r3
    392a:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) vsqr1271(t2, t2);
    392c:	4e32      	ldr	r6, [pc, #200]	; (39f8 <vinv1271+0x140>)
    392e:	a905      	add	r1, sp, #20
    3930:	0008      	movs	r0, r1
    3932:	47b0      	blx	r6
    3934:	3c01      	subs	r4, #1
    3936:	2c00      	cmp	r4, #0
    3938:	d1f9      	bne.n	392e <vinv1271+0x76>
	vmul1271(t5, t2, t2);
    393a:	aa05      	add	r2, sp, #20
    393c:	0011      	movs	r1, r2
    393e:	a814      	add	r0, sp, #80	; 0x50
    3940:	4b2e      	ldr	r3, [pc, #184]	; (39fc <vinv1271+0x144>)
    3942:	4798      	blx	r3
	vsqr1271(t2, t1);
    3944:	4669      	mov	r1, sp
    3946:	a805      	add	r0, sp, #20
    3948:	4b2b      	ldr	r3, [pc, #172]	; (39f8 <vinv1271+0x140>)
    394a:	4798      	blx	r3
    394c:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) vsqr1271(t1, t1);
    394e:	4e2a      	ldr	r6, [pc, #168]	; (39f8 <vinv1271+0x140>)
    3950:	4669      	mov	r1, sp
    3952:	4668      	mov	r0, sp
    3954:	47b0      	blx	r6
    3956:	3c01      	subs	r4, #1
    3958:	2c00      	cmp	r4, #0
    395a:	d1f9      	bne.n	3950 <vinv1271+0x98>
	vmul1271(t2, t1, t1);
    395c:	466a      	mov	r2, sp
    395e:	4669      	mov	r1, sp
    3960:	a805      	add	r0, sp, #20
    3962:	4b26      	ldr	r3, [pc, #152]	; (39fc <vinv1271+0x144>)
    3964:	4798      	blx	r3
    3966:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) vsqr1271(t1, t1);
    3968:	4e23      	ldr	r6, [pc, #140]	; (39f8 <vinv1271+0x140>)
    396a:	4669      	mov	r1, sp
    396c:	4668      	mov	r0, sp
    396e:	47b0      	blx	r6
    3970:	3c01      	subs	r4, #1
    3972:	2c00      	cmp	r4, #0
    3974:	d1f9      	bne.n	396a <vinv1271+0xb2>
	vmul1271(t1, t2, t1);
    3976:	466a      	mov	r2, sp
    3978:	a905      	add	r1, sp, #20
    397a:	4668      	mov	r0, sp
    397c:	4b1f      	ldr	r3, [pc, #124]	; (39fc <vinv1271+0x144>)
    397e:	4798      	blx	r3
    3980:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) vsqr1271(t1, t1);
    3982:	4e1d      	ldr	r6, [pc, #116]	; (39f8 <vinv1271+0x140>)
    3984:	4669      	mov	r1, sp
    3986:	4668      	mov	r0, sp
    3988:	47b0      	blx	r6
    398a:	3c01      	subs	r4, #1
    398c:	2c00      	cmp	r4, #0
    398e:	d1f9      	bne.n	3984 <vinv1271+0xcc>
	vmul1271(t5, t1, t1);
    3990:	466a      	mov	r2, sp
    3992:	4669      	mov	r1, sp
    3994:	a814      	add	r0, sp, #80	; 0x50
    3996:	4b19      	ldr	r3, [pc, #100]	; (39fc <vinv1271+0x144>)
    3998:	4798      	blx	r3
    399a:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) vsqr1271(t1, t1);
    399c:	4e16      	ldr	r6, [pc, #88]	; (39f8 <vinv1271+0x140>)
    399e:	4669      	mov	r1, sp
    39a0:	4668      	mov	r0, sp
    39a2:	47b0      	blx	r6
    39a4:	3c01      	subs	r4, #1
    39a6:	2c00      	cmp	r4, #0
    39a8:	d1f9      	bne.n	399e <vinv1271+0xe6>
	vmul1271(t4, t1, t1);
    39aa:	466a      	mov	r2, sp
    39ac:	4669      	mov	r1, sp
    39ae:	a80f      	add	r0, sp, #60	; 0x3c
    39b0:	4b12      	ldr	r3, [pc, #72]	; (39fc <vinv1271+0x144>)
    39b2:	4798      	blx	r3
    39b4:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) vsqr1271(t1, t1);
    39b6:	4e10      	ldr	r6, [pc, #64]	; (39f8 <vinv1271+0x140>)
    39b8:	4669      	mov	r1, sp
    39ba:	4668      	mov	r0, sp
    39bc:	47b0      	blx	r6
    39be:	3c01      	subs	r4, #1
    39c0:	2c00      	cmp	r4, #0
    39c2:	d1f9      	bne.n	39b8 <vinv1271+0x100>
	vmul1271(t3, t1, t1);
    39c4:	466a      	mov	r2, sp
    39c6:	4669      	mov	r1, sp
    39c8:	a80a      	add	r0, sp, #40	; 0x28
    39ca:	4c0c      	ldr	r4, [pc, #48]	; (39fc <vinv1271+0x144>)
    39cc:	47a0      	blx	r4
	vsqr1271(t1, t1);
    39ce:	4669      	mov	r1, sp
    39d0:	4668      	mov	r0, sp
    39d2:	4e09      	ldr	r6, [pc, #36]	; (39f8 <vinv1271+0x140>)
    39d4:	47b0      	blx	r6
	vmul1271(a, t1, af);
    39d6:	aa19      	add	r2, sp, #100	; 0x64
    39d8:	4669      	mov	r1, sp
    39da:	0028      	movs	r0, r5
    39dc:	47a0      	blx	r4
  // Hardcoded for p = 2^127-1
	velm_t t;

	vexp1251(a, t);
	vsqr1271(t, t);
    39de:	a919      	add	r1, sp, #100	; 0x64
    39e0:	0008      	movs	r0, r1
    39e2:	47b0      	blx	r6
	vsqr1271(t, t);
    39e4:	a919      	add	r1, sp, #100	; 0x64
    39e6:	0008      	movs	r0, r1
    39e8:	47b0      	blx	r6
	vmul1271(a, t, a);
    39ea:	002a      	movs	r2, r5
    39ec:	a919      	add	r1, sp, #100	; 0x64
    39ee:	0028      	movs	r0, r5
    39f0:	47a0      	blx	r4
}
    39f2:	b01e      	add	sp, #120	; 0x78
    39f4:	bd70      	pop	{r4, r5, r6, pc}
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	000034b1 	.word	0x000034b1
    39fc:	0000321d 	.word	0x0000321d

00003a00 <from_std_to_ext>:


void from_std_to_ext(f2elm_t a, v2elm_t c)
{ // Expand GF(p^2) element represented with two 4 32-bit digits to 23/26/26/26/26/23/26/26/26/26-bit vector representation
    3a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Assumes fully reduced input in [0, 2^127-1]  
    const uint32_t mask_8  = ((uint32_t)1 <<  8) - 1;   
    const uint32_t mask_14 = ((uint32_t)1 << 14) - 1;  
    const uint32_t mask_20 = ((uint32_t)1 << 20) - 1; 

    c[0] = a[0][0] & mask_26;
    3a02:	6803      	ldr	r3, [r0, #0]
    3a04:	019b      	lsls	r3, r3, #6
    3a06:	099b      	lsrs	r3, r3, #6
    3a08:	600b      	str	r3, [r1, #0]
    c[1] = (a[0][0] >> 26) | ((a[0][1] & mask_20) <<  6);
    3a0a:	6843      	ldr	r3, [r0, #4]
    3a0c:	019b      	lsls	r3, r3, #6
    3a0e:	4a1c      	ldr	r2, [pc, #112]	; (3a80 <from_std_to_ext+0x80>)
    3a10:	4013      	ands	r3, r2
    3a12:	6804      	ldr	r4, [r0, #0]
    3a14:	0ea4      	lsrs	r4, r4, #26
    3a16:	4323      	orrs	r3, r4
    3a18:	604b      	str	r3, [r1, #4]
    c[2] = (a[0][1] >> 20) | ((a[0][2] & mask_14) << 12);
    3a1a:	6883      	ldr	r3, [r0, #8]
    3a1c:	031b      	lsls	r3, r3, #12
    3a1e:	4f19      	ldr	r7, [pc, #100]	; (3a84 <from_std_to_ext+0x84>)
    3a20:	403b      	ands	r3, r7
    3a22:	6844      	ldr	r4, [r0, #4]
    3a24:	0d24      	lsrs	r4, r4, #20
    3a26:	4323      	orrs	r3, r4
    3a28:	608b      	str	r3, [r1, #8]
    c[3] = (a[0][2] >> 14) | ((a[0][3] & mask_8 ) << 18);
    3a2a:	68c3      	ldr	r3, [r0, #12]
    3a2c:	049d      	lsls	r5, r3, #18
    3a2e:	26ff      	movs	r6, #255	; 0xff
    3a30:	04b6      	lsls	r6, r6, #18
    3a32:	4035      	ands	r5, r6
    3a34:	6883      	ldr	r3, [r0, #8]
    3a36:	0b9b      	lsrs	r3, r3, #14
    3a38:	431d      	orrs	r5, r3
    3a3a:	60cd      	str	r5, [r1, #12]
    c[4] = (a[0][3] >>  8) & mask_23;
    3a3c:	68c3      	ldr	r3, [r0, #12]
    3a3e:	005b      	lsls	r3, r3, #1
    3a40:	0a5b      	lsrs	r3, r3, #9
    3a42:	610b      	str	r3, [r1, #16]

    c[5] = a[1][0] & mask_26;
    3a44:	6903      	ldr	r3, [r0, #16]
    3a46:	019b      	lsls	r3, r3, #6
    3a48:	099b      	lsrs	r3, r3, #6
    3a4a:	614b      	str	r3, [r1, #20]
    c[6] = (a[1][0] >> 26) | ((a[1][1] & mask_20) <<  6);
    3a4c:	6943      	ldr	r3, [r0, #20]
    3a4e:	019c      	lsls	r4, r3, #6
    3a50:	4014      	ands	r4, r2
    3a52:	6903      	ldr	r3, [r0, #16]
    3a54:	0e9b      	lsrs	r3, r3, #26
    3a56:	431c      	orrs	r4, r3
    3a58:	618c      	str	r4, [r1, #24]
    c[7] = (a[1][1] >> 20) | ((a[1][2] & mask_14) << 12);
    3a5a:	6983      	ldr	r3, [r0, #24]
    3a5c:	031a      	lsls	r2, r3, #12
    3a5e:	403a      	ands	r2, r7
    3a60:	6943      	ldr	r3, [r0, #20]
    3a62:	0d1b      	lsrs	r3, r3, #20
    3a64:	431a      	orrs	r2, r3
    3a66:	61ca      	str	r2, [r1, #28]
    c[8] = (a[1][2] >> 14) | ((a[1][3] & mask_8 ) << 18);
    3a68:	69c3      	ldr	r3, [r0, #28]
    3a6a:	049b      	lsls	r3, r3, #18
    3a6c:	4033      	ands	r3, r6
    3a6e:	6982      	ldr	r2, [r0, #24]
    3a70:	0b92      	lsrs	r2, r2, #14
    3a72:	4313      	orrs	r3, r2
    3a74:	620b      	str	r3, [r1, #32]
    c[9] = (a[1][3] >>  8) & mask_23;
    3a76:	69c3      	ldr	r3, [r0, #28]
    3a78:	005b      	lsls	r3, r3, #1
    3a7a:	0a5b      	lsrs	r3, r3, #9
    3a7c:	624b      	str	r3, [r1, #36]	; 0x24
}
    3a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a80:	03ffffc0 	.word	0x03ffffc0
    3a84:	03fff000 	.word	0x03fff000

00003a88 <from_ext_to_std>:

void from_ext_to_std(v2elm_t a, f2elm_t c)
{ // Contract GF(p^2) element in 23/26/26/26/26/23/26/26/26/26-bit vector representation to two 4 32-bit digits
  // Assumes fully reduced input in [0, 2^127-1]
        
    c[0][0]  = (a[1] << 26) |  a[0];
    3a88:	6843      	ldr	r3, [r0, #4]
    3a8a:	069b      	lsls	r3, r3, #26
    3a8c:	6802      	ldr	r2, [r0, #0]
    3a8e:	4313      	orrs	r3, r2
    3a90:	600b      	str	r3, [r1, #0]
    c[0][1]  = (a[2] << 20) | (a[1] >>  6);
    3a92:	6883      	ldr	r3, [r0, #8]
    3a94:	051b      	lsls	r3, r3, #20
    3a96:	6842      	ldr	r2, [r0, #4]
    3a98:	0992      	lsrs	r2, r2, #6
    3a9a:	4313      	orrs	r3, r2
    3a9c:	604b      	str	r3, [r1, #4]
    c[0][2]  = (a[3] << 14) | (a[2] >> 12);
    3a9e:	68c3      	ldr	r3, [r0, #12]
    3aa0:	039b      	lsls	r3, r3, #14
    3aa2:	6882      	ldr	r2, [r0, #8]
    3aa4:	0b12      	lsrs	r2, r2, #12
    3aa6:	4313      	orrs	r3, r2
    3aa8:	608b      	str	r3, [r1, #8]
    c[0][3]  = (a[4] <<  8) | (a[3] >> 18);
    3aaa:	6903      	ldr	r3, [r0, #16]
    3aac:	021b      	lsls	r3, r3, #8
    3aae:	68c2      	ldr	r2, [r0, #12]
    3ab0:	0c92      	lsrs	r2, r2, #18
    3ab2:	4313      	orrs	r3, r2
    3ab4:	60cb      	str	r3, [r1, #12]
        
    c[1][0]  = (a[6] << 26) |  a[5];
    3ab6:	6983      	ldr	r3, [r0, #24]
    3ab8:	069b      	lsls	r3, r3, #26
    3aba:	6942      	ldr	r2, [r0, #20]
    3abc:	4313      	orrs	r3, r2
    3abe:	610b      	str	r3, [r1, #16]
    c[1][1]  = (a[7] << 20) | (a[6] >>  6);
    3ac0:	69c3      	ldr	r3, [r0, #28]
    3ac2:	051b      	lsls	r3, r3, #20
    3ac4:	6982      	ldr	r2, [r0, #24]
    3ac6:	0992      	lsrs	r2, r2, #6
    3ac8:	4313      	orrs	r3, r2
    3aca:	614b      	str	r3, [r1, #20]
    c[1][2]  = (a[8] << 14) | (a[7] >> 12);
    3acc:	6a03      	ldr	r3, [r0, #32]
    3ace:	039b      	lsls	r3, r3, #14
    3ad0:	69c2      	ldr	r2, [r0, #28]
    3ad2:	0b12      	lsrs	r2, r2, #12
    3ad4:	4313      	orrs	r3, r2
    3ad6:	618b      	str	r3, [r1, #24]
    c[1][3]  = (a[9] <<  8) | (a[8] >> 18);
    3ad8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3ada:	021b      	lsls	r3, r3, #8
    3adc:	6a02      	ldr	r2, [r0, #32]
    3ade:	0c92      	lsrs	r2, r2, #18
    3ae0:	4313      	orrs	r3, r2
    3ae2:	61cb      	str	r3, [r1, #28]
}
    3ae4:	4770      	bx	lr
	...

00003ae8 <mp_mul>:


void mp_mul(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Schoolbook multiprecision multiply, c = a*b   
    3ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aea:	46de      	mov	lr, fp
    3aec:	4657      	mov	r7, sl
    3aee:	464e      	mov	r6, r9
    3af0:	4645      	mov	r5, r8
    3af2:	b5e0      	push	{r5, r6, r7, lr}
    3af4:	b087      	sub	sp, #28
    3af6:	9103      	str	r1, [sp, #12]
    3af8:	4699      	mov	r9, r3
    unsigned int i, j;
    digit_t u, v, UV[2];
    unsigned int carry = 0;

    for (i = 0; i < (2*nwords); i++) c[i] = 0;
    3afa:	0059      	lsls	r1, r3, #1
    3afc:	d006      	beq.n	3b0c <mp_mul+0x24>
    3afe:	0013      	movs	r3, r2
    3b00:	0089      	lsls	r1, r1, #2
    3b02:	1851      	adds	r1, r2, r1
    3b04:	2400      	movs	r4, #0
    3b06:	c310      	stmia	r3!, {r4}
    3b08:	428b      	cmp	r3, r1
    3b0a:	d1fc      	bne.n	3b06 <mp_mul+0x1e>

    for (i = 0; i < nwords; i++) {
    3b0c:	464b      	mov	r3, r9
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d035      	beq.n	3b7e <mp_mul+0x96>
    3b12:	9201      	str	r2, [sp, #4]
    3b14:	4680      	mov	r8, r0
    3b16:	009b      	lsls	r3, r3, #2
    3b18:	9302      	str	r3, [sp, #8]
    3b1a:	2300      	movs	r3, #0
    3b1c:	469b      	mov	fp, r3
        u = 0;
        for (j = 0; j < nwords; j++) {
            MUL(a[i], b[j], UV+1, UV[0]); 
    3b1e:	4b1b      	ldr	r3, [pc, #108]	; (3b8c <mp_mul+0xa4>)
    3b20:	469a      	mov	sl, r3
    3b22:	9f03      	ldr	r7, [sp, #12]
{ // Schoolbook multiprecision multiply, c = a*b   
    3b24:	9e01      	ldr	r6, [sp, #4]
    3b26:	2400      	movs	r4, #0
    3b28:	2500      	movs	r5, #0
            MUL(a[i], b[j], UV+1, UV[0]); 
    3b2a:	cf02      	ldmia	r7!, {r1}
    3b2c:	aa04      	add	r2, sp, #16
    3b2e:	4643      	mov	r3, r8
    3b30:	6818      	ldr	r0, [r3, #0]
    3b32:	47d0      	blx	sl
            ADDC(0, UV[0], u, carry, v); 
    3b34:	9a04      	ldr	r2, [sp, #16]
    3b36:	1913      	adds	r3, r2, r4
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
}

static __inline unsigned int is_digit_lessthan_ct(digit_t x, digit_t y)
{ // Is x < y?
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    3b38:	0011      	movs	r1, r2
    3b3a:	4059      	eors	r1, r3
    3b3c:	4054      	eors	r4, r2
    3b3e:	430c      	orrs	r4, r1
    3b40:	405c      	eors	r4, r3
    3b42:	0fe4      	lsrs	r4, r4, #31
            u = UV[1] + carry;
    3b44:	9a05      	ldr	r2, [sp, #20]
    3b46:	9200      	str	r2, [sp, #0]
    3b48:	18a1      	adds	r1, r4, r2
            ADDC(0, c[i+j], v, carry, v); 
    3b4a:	6830      	ldr	r0, [r6, #0]
    3b4c:	181a      	adds	r2, r3, r0
    3b4e:	4043      	eors	r3, r0
    3b50:	001c      	movs	r4, r3
    3b52:	4050      	eors	r0, r2
    3b54:	4304      	orrs	r4, r0
    3b56:	4054      	eors	r4, r2
    3b58:	0fe4      	lsrs	r4, r4, #31
            u = u + carry;
    3b5a:	1864      	adds	r4, r4, r1
            c[i+j] = v;
    3b5c:	c604      	stmia	r6!, {r2}
        for (j = 0; j < nwords; j++) {
    3b5e:	3501      	adds	r5, #1
    3b60:	45a9      	cmp	r9, r5
    3b62:	d1e2      	bne.n	3b2a <mp_mul+0x42>
        }
        c[nwords+i] = u;
    3b64:	9b01      	ldr	r3, [sp, #4]
    3b66:	9a02      	ldr	r2, [sp, #8]
    3b68:	509c      	str	r4, [r3, r2]
    for (i = 0; i < nwords; i++) {
    3b6a:	2201      	movs	r2, #1
    3b6c:	4694      	mov	ip, r2
    3b6e:	44e3      	add	fp, ip
    3b70:	3304      	adds	r3, #4
    3b72:	9301      	str	r3, [sp, #4]
    3b74:	2304      	movs	r3, #4
    3b76:	469c      	mov	ip, r3
    3b78:	44e0      	add	r8, ip
    3b7a:	455d      	cmp	r5, fp
    3b7c:	d1d1      	bne.n	3b22 <mp_mul+0x3a>
    }
}
    3b7e:	b007      	add	sp, #28
    3b80:	bc3c      	pop	{r2, r3, r4, r5}
    3b82:	4690      	mov	r8, r2
    3b84:	4699      	mov	r9, r3
    3b86:	46a2      	mov	sl, r4
    3b88:	46ab      	mov	fp, r5
    3b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b8c:	00003135 	.word	0x00003135

00003b90 <subtract>:
    return carry;
}


unsigned int subtract(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Multiprecision subtraction, c = a-b, where lng(a) = lng(b) = nwords. Returns the borrow bit
    3b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b92:	46d6      	mov	lr, sl
    3b94:	464f      	mov	r7, r9
    3b96:	4646      	mov	r6, r8
    3b98:	b5c0      	push	{r6, r7, lr}
    3b9a:	4684      	mov	ip, r0
    3b9c:	4691      	mov	r9, r2
    unsigned int i, borrow = 0;

    for (i = 0; i < nwords; i++) {
    3b9e:	2b00      	cmp	r3, #0
    3ba0:	d022      	beq.n	3be8 <subtract+0x58>
    3ba2:	009b      	lsls	r3, r3, #2
    3ba4:	4698      	mov	r8, r3
    3ba6:	2600      	movs	r6, #0
    3ba8:	2200      	movs	r2, #0
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    3baa:	2301      	movs	r3, #1
    3bac:	469a      	mov	sl, r3
        SUBC(borrow, a[i], b[i], borrow, c[i]);
    3bae:	4663      	mov	r3, ip
    3bb0:	599b      	ldr	r3, [r3, r6]
    3bb2:	598f      	ldr	r7, [r1, r6]
    3bb4:	1bdd      	subs	r5, r3, r7
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    3bb6:	426c      	negs	r4, r5
    3bb8:	432c      	orrs	r4, r5
    3bba:	0fe4      	lsrs	r4, r4, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    3bbc:	4650      	mov	r0, sl
    3bbe:	4044      	eors	r4, r0
    3bc0:	4014      	ands	r4, r2
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    3bc2:	0018      	movs	r0, r3
    3bc4:	4078      	eors	r0, r7
    3bc6:	406f      	eors	r7, r5
    3bc8:	4338      	orrs	r0, r7
    3bca:	4058      	eors	r0, r3
    3bcc:	0fc0      	lsrs	r0, r0, #31
    3bce:	4320      	orrs	r0, r4
    3bd0:	1aad      	subs	r5, r5, r2
    3bd2:	464b      	mov	r3, r9
    3bd4:	519d      	str	r5, [r3, r6]
    3bd6:	3604      	adds	r6, #4
    3bd8:	0002      	movs	r2, r0
    for (i = 0; i < nwords; i++) {
    3bda:	4546      	cmp	r6, r8
    3bdc:	d1e7      	bne.n	3bae <subtract+0x1e>
    }

    return borrow;
}
    3bde:	bc1c      	pop	{r2, r3, r4}
    3be0:	4690      	mov	r8, r2
    3be2:	4699      	mov	r9, r3
    3be4:	46a2      	mov	sl, r4
    3be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsigned int i, borrow = 0;
    3be8:	2000      	movs	r0, #0
    return borrow;
    3bea:	e7f8      	b.n	3bde <subtract+0x4e>

00003bec <Montgomery_multiply_mod_order>:
	subtract_mod_order(c, (digit_t*)&curve_order, c);  // if c >= order then c = c - order
}
 

void Montgomery_multiply_mod_order(const digit_t* ma, const digit_t* mb, digit_t* mc)
{ // 256-bit Montgomery multiplication modulo the curve order, mc = ma*mb*r' mod order, where ma,mb,mc in [0, order-1]
    3bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bee:	b0b1      	sub	sp, #196	; 0xc4
    3bf0:	0015      	movs	r5, r2
    mp_mul(a, b, c, NWORDS_ORDER);
    3bf2:	2308      	movs	r3, #8
    3bf4:	aa20      	add	r2, sp, #128	; 0x80
    3bf6:	4c2c      	ldr	r4, [pc, #176]	; (3ca8 <Montgomery_multiply_mod_order+0xbc>)
    3bf8:	47a0      	blx	r4
    3bfa:	2308      	movs	r3, #8
    3bfc:	aa10      	add	r2, sp, #64	; 0x40
    3bfe:	492b      	ldr	r1, [pc, #172]	; (3cac <Montgomery_multiply_mod_order+0xc0>)
    3c00:	a820      	add	r0, sp, #128	; 0x80
    3c02:	47a0      	blx	r4
    3c04:	2308      	movs	r3, #8
    3c06:	466a      	mov	r2, sp
    3c08:	4929      	ldr	r1, [pc, #164]	; (3cb0 <Montgomery_multiply_mod_order+0xc4>)
    3c0a:	a810      	add	r0, sp, #64	; 0x40
    3c0c:	47a0      	blx	r4
    3c0e:	2600      	movs	r6, #0
    unsigned int i, carry = 0;
    3c10:	2400      	movs	r4, #0
        ADDC(carry, a[i], b[i], carry, c[i]);
    3c12:	a920      	add	r1, sp, #128	; 0x80
    3c14:	5873      	ldr	r3, [r6, r1]
    3c16:	191a      	adds	r2, r3, r4
    3c18:	4668      	mov	r0, sp
    3c1a:	5830      	ldr	r0, [r6, r0]
    3c1c:	4684      	mov	ip, r0
    3c1e:	1817      	adds	r7, r2, r0
    3c20:	4668      	mov	r0, sp
    3c22:	5037      	str	r7, [r6, r0]
    3c24:	0010      	movs	r0, r2
    3c26:	4060      	eors	r0, r4
    3c28:	405c      	eors	r4, r3
    3c2a:	4320      	orrs	r0, r4
    3c2c:	4050      	eors	r0, r2
    3c2e:	0013      	movs	r3, r2
    3c30:	407b      	eors	r3, r7
    3c32:	4664      	mov	r4, ip
    3c34:	4054      	eors	r4, r2
    3c36:	431c      	orrs	r4, r3
    3c38:	407c      	eors	r4, r7
    3c3a:	4304      	orrs	r4, r0
    3c3c:	0fe4      	lsrs	r4, r4, #31
    3c3e:	3604      	adds	r6, #4
    for (i = 0; i < nwords; i++) {
    3c40:	2e40      	cmp	r6, #64	; 0x40
    3c42:	d1e7      	bne.n	3c14 <Montgomery_multiply_mod_order+0x28>
    3c44:	2300      	movs	r3, #0
    multiply(P, (digit_t*)&Montgomery_rprime, Q);      // Q = P * r' mod 2^(log_2(r))
    multiply(Q, (digit_t*)&curve_order, temp);         // temp = Q * r
    cout = add(P, temp, temp, 2*NWORDS_ORDER);         // (cout, temp) = P + Q * r     

    for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
        mc[i] = temp[NWORDS_ORDER + i];
    3c46:	001a      	movs	r2, r3
    3c48:	446a      	add	r2, sp
    3c4a:	6a12      	ldr	r2, [r2, #32]
    3c4c:	50ea      	str	r2, [r5, r3]
    3c4e:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
    3c50:	2b20      	cmp	r3, #32
    3c52:	d1f8      	bne.n	3c46 <Montgomery_multiply_mod_order+0x5a>
    }

    // Final, constant-time subtraction     
    bout = subtract(mc, (digit_t*)&curve_order, mc, NWORDS_ORDER);    // (cout, mc) = (cout, mc) - r
    3c54:	3b18      	subs	r3, #24
    3c56:	002a      	movs	r2, r5
    3c58:	4915      	ldr	r1, [pc, #84]	; (3cb0 <Montgomery_multiply_mod_order+0xc4>)
    3c5a:	0028      	movs	r0, r5
    3c5c:	4e15      	ldr	r6, [pc, #84]	; (3cb4 <Montgomery_multiply_mod_order+0xc8>)
    3c5e:	47b0      	blx	r6
    mask = (digit_t)cout - (digit_t)bout;              // if (cout, mc) >= 0 then mask = 0x00..0, else if (cout, mc) < 0 then mask = 0xFF..F
    3c60:	1a24      	subs	r4, r4, r0
    3c62:	2300      	movs	r3, #0

    for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
        temp[i] = (order[i] & mask);
    3c64:	4912      	ldr	r1, [pc, #72]	; (3cb0 <Montgomery_multiply_mod_order+0xc4>)
    3c66:	585a      	ldr	r2, [r3, r1]
    3c68:	4022      	ands	r2, r4
    3c6a:	4668      	mov	r0, sp
    3c6c:	501a      	str	r2, [r3, r0]
    3c6e:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
    3c70:	2b20      	cmp	r3, #32
    3c72:	d1f8      	bne.n	3c66 <Montgomery_multiply_mod_order+0x7a>
    3c74:	2600      	movs	r6, #0
    3c76:	2300      	movs	r3, #0
        ADDC(carry, a[i], b[i], carry, c[i]);
    3c78:	59aa      	ldr	r2, [r5, r6]
    3c7a:	18d1      	adds	r1, r2, r3
    3c7c:	4668      	mov	r0, sp
    3c7e:	5834      	ldr	r4, [r6, r0]
    3c80:	190f      	adds	r7, r1, r4
    3c82:	51af      	str	r7, [r5, r6]
    3c84:	0008      	movs	r0, r1
    3c86:	4058      	eors	r0, r3
    3c88:	4053      	eors	r3, r2
    3c8a:	4318      	orrs	r0, r3
    3c8c:	4048      	eors	r0, r1
    3c8e:	000a      	movs	r2, r1
    3c90:	407a      	eors	r2, r7
    3c92:	000b      	movs	r3, r1
    3c94:	4063      	eors	r3, r4
    3c96:	4313      	orrs	r3, r2
    3c98:	407b      	eors	r3, r7
    3c9a:	4303      	orrs	r3, r0
    3c9c:	0fdb      	lsrs	r3, r3, #31
    3c9e:	3604      	adds	r6, #4
    for (i = 0; i < nwords; i++) {
    3ca0:	2e20      	cmp	r6, #32
    3ca2:	d1e9      	bne.n	3c78 <Montgomery_multiply_mod_order+0x8c>
    }
    add(mc, temp, mc, NWORDS_ORDER);                   //  mc = mc + (mask & r)

    return;
}
    3ca4:	b031      	add	sp, #196	; 0xc4
    3ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ca8:	00003ae9 	.word	0x00003ae9
    3cac:	0000ad50 	.word	0x0000ad50
    3cb0:	0000ad98 	.word	0x0000ad98
    3cb4:	00003b91 	.word	0x00003b91

00003cb8 <modulo_order>:


void modulo_order(digit_t* a, digit_t* c)
{ // Reduction modulo the order using Montgomery arithmetic
    3cb8:	b530      	push	{r4, r5, lr}
    3cba:	b091      	sub	sp, #68	; 0x44
    3cbc:	0004      	movs	r4, r0
    3cbe:	000d      	movs	r5, r1
  // ma = a*Montgomery_Rprime mod r, where a,ma in [0, r-1], a,ma,r < 2^256
  // c = ma*1*Montgomery_Rprime^(-1) mod r, where ma,c in [0, r-1], ma,c,r < 2^256
	digit_t ma[NWORDS_ORDER], one[NWORDS_ORDER] = {0};
    3cc0:	2220      	movs	r2, #32
    3cc2:	2100      	movs	r1, #0
    3cc4:	4668      	mov	r0, sp
    3cc6:	4b07      	ldr	r3, [pc, #28]	; (3ce4 <modulo_order+0x2c>)
    3cc8:	4798      	blx	r3
    
    one[0] = 1;
    3cca:	2301      	movs	r3, #1
    3ccc:	9300      	str	r3, [sp, #0]
    Montgomery_multiply_mod_order(a, (digit_t*)&Montgomery_Rprime, ma);
    3cce:	aa08      	add	r2, sp, #32
    3cd0:	4905      	ldr	r1, [pc, #20]	; (3ce8 <modulo_order+0x30>)
    3cd2:	0020      	movs	r0, r4
    3cd4:	4c05      	ldr	r4, [pc, #20]	; (3cec <modulo_order+0x34>)
    3cd6:	47a0      	blx	r4
    Montgomery_multiply_mod_order(ma, one, c);
    3cd8:	002a      	movs	r2, r5
    3cda:	4669      	mov	r1, sp
    3cdc:	a808      	add	r0, sp, #32
    3cde:	47a0      	blx	r4
}
    3ce0:	b011      	add	sp, #68	; 0x44
    3ce2:	bd30      	pop	{r4, r5, pc}
    3ce4:	00006877 	.word	0x00006877
    3ce8:	0000ad30 	.word	0x0000ad30
    3cec:	00003bed 	.word	0x00003bed

00003cf0 <conversion_to_odd>:


void conversion_to_odd(digit_t* k, digit_t* k_odd)
{ // Convert scalar to odd if even using the prime subgroup order r
    3cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cf2:	46d6      	mov	lr, sl
    3cf4:	464f      	mov	r7, r9
    3cf6:	4646      	mov	r6, r8
    3cf8:	b5c0      	push	{r6, r7, lr}
    3cfa:	4689      	mov	r9, r1
    digit_t mask;
    digit_t* order = (digit_t*)curve_order;
    unsigned int i, carry = 0;

    mask = ~(0 - (k[0] & 1));     
    3cfc:	2601      	movs	r6, #1
    3cfe:	6803      	ldr	r3, [r0, #0]
    3d00:	401e      	ands	r6, r3
    3d02:	1e73      	subs	r3, r6, #1
    3d04:	469c      	mov	ip, r3
    3d06:	2500      	movs	r5, #0
    unsigned int i, carry = 0;
    3d08:	2300      	movs	r3, #0

    for (i = 0; i < NWORDS_ORDER; i++) {   // If (k is odd) then k_odd = k else k_odd = k + r
        ADDC(carry, order[i] & mask, k[i], carry, k_odd[i]);
    3d0a:	4a11      	ldr	r2, [pc, #68]	; (3d50 <conversion_to_odd+0x60>)
    3d0c:	4692      	mov	sl, r2
    3d0e:	4652      	mov	r2, sl
    3d10:	58aa      	ldr	r2, [r5, r2]
    3d12:	4661      	mov	r1, ip
    3d14:	400a      	ands	r2, r1
    3d16:	18d4      	adds	r4, r2, r3
    3d18:	5946      	ldr	r6, [r0, r5]
    3d1a:	19a1      	adds	r1, r4, r6
    3d1c:	464f      	mov	r7, r9
    3d1e:	5179      	str	r1, [r7, r5]
    3d20:	0027      	movs	r7, r4
    3d22:	405f      	eors	r7, r3
    3d24:	405a      	eors	r2, r3
    3d26:	433a      	orrs	r2, r7
    3d28:	4062      	eors	r2, r4
    3d2a:	4690      	mov	r8, r2
    3d2c:	0022      	movs	r2, r4
    3d2e:	404a      	eors	r2, r1
    3d30:	0023      	movs	r3, r4
    3d32:	4073      	eors	r3, r6
    3d34:	4313      	orrs	r3, r2
    3d36:	404b      	eors	r3, r1
    3d38:	4642      	mov	r2, r8
    3d3a:	4313      	orrs	r3, r2
    3d3c:	0fdb      	lsrs	r3, r3, #31
    3d3e:	3504      	adds	r5, #4
    for (i = 0; i < NWORDS_ORDER; i++) {   // If (k is odd) then k_odd = k else k_odd = k + r
    3d40:	2d20      	cmp	r5, #32
    3d42:	d1e4      	bne.n	3d0e <conversion_to_odd+0x1e>
    }
}
    3d44:	bc1c      	pop	{r2, r3, r4}
    3d46:	4690      	mov	r8, r2
    3d48:	4699      	mov	r9, r3
    3d4a:	46a2      	mov	sl, r4
    3d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d4e:	46c0      	nop			; (mov r8, r8)
    3d50:	0000ad98 	.word	0x0000ad98

00003d54 <vdiv1271>:


__inline void vdiv1271(uint32_t* a) 
{ // GF(p) division by two, c = a/2 mod p
    3d54:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Redundant representation: 23/26/26/26/26-bit
    digit_t mask;

    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    3d56:	6803      	ldr	r3, [r0, #0]
    3d58:	07dc      	lsls	r4, r3, #31
    3d5a:	17e4      	asrs	r4, r4, #31
    3d5c:	09a6      	lsrs	r6, r4, #6
    
    a[0] += mask;
    a[1] += mask;
    3d5e:	6842      	ldr	r2, [r0, #4]
    3d60:	18b1      	adds	r1, r6, r2
    a[2] += mask;
    3d62:	6882      	ldr	r2, [r0, #8]
    3d64:	18b2      	adds	r2, r6, r2
    a[3] += mask;
    3d66:	68c5      	ldr	r5, [r0, #12]
    3d68:	1975      	adds	r5, r6, r5
    a[4] += (mask >> 3);
    3d6a:	0a64      	lsrs	r4, r4, #9
    3d6c:	6907      	ldr	r7, [r0, #16]
    3d6e:	46bc      	mov	ip, r7
    3d70:	4464      	add	r4, ip
    a[0] += mask;
    3d72:	199b      	adds	r3, r3, r6

    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    3d74:	105b      	asrs	r3, r3, #1
    3d76:	064f      	lsls	r7, r1, #25
    3d78:	2680      	movs	r6, #128	; 0x80
    3d7a:	04b6      	lsls	r6, r6, #18
    3d7c:	4037      	ands	r7, r6
    3d7e:	19db      	adds	r3, r3, r7
    3d80:	6003      	str	r3, [r0, #0]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    3d82:	0653      	lsls	r3, r2, #25
    3d84:	4033      	ands	r3, r6
    3d86:	1049      	asrs	r1, r1, #1
    3d88:	1859      	adds	r1, r3, r1
    3d8a:	6041      	str	r1, [r0, #4]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    3d8c:	0669      	lsls	r1, r5, #25
    3d8e:	4031      	ands	r1, r6
    3d90:	1052      	asrs	r2, r2, #1
    3d92:	188a      	adds	r2, r1, r2
    3d94:	6082      	str	r2, [r0, #8]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    3d96:	0663      	lsls	r3, r4, #25
    3d98:	4033      	ands	r3, r6
    3d9a:	106d      	asrs	r5, r5, #1
    3d9c:	195d      	adds	r5, r3, r5
    3d9e:	60c5      	str	r5, [r0, #12]
    a[4] = ((sdigit_t)a[4] >> 1);
    3da0:	1064      	asrs	r4, r4, #1
    3da2:	6104      	str	r4, [r0, #16]
}
    3da4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003da6 <v2copy1271>:


void v2copy1271(v2elm_t a, v2elm_t c) 
{ // Copy vectorized GF(p^2) element, c <- a

    c[0] = a[0]; c[1] = a[1]; c[2] = a[2]; c[3] = a[3]; c[4] = a[4]; 
    3da6:	6803      	ldr	r3, [r0, #0]
    3da8:	600b      	str	r3, [r1, #0]
    3daa:	6843      	ldr	r3, [r0, #4]
    3dac:	604b      	str	r3, [r1, #4]
    3dae:	6883      	ldr	r3, [r0, #8]
    3db0:	608b      	str	r3, [r1, #8]
    3db2:	68c3      	ldr	r3, [r0, #12]
    3db4:	60cb      	str	r3, [r1, #12]
    3db6:	6903      	ldr	r3, [r0, #16]
    3db8:	610b      	str	r3, [r1, #16]
    c[5] = a[5]; c[6] = a[6]; c[7] = a[7]; c[8] = a[8]; c[9] = a[9];
    3dba:	6943      	ldr	r3, [r0, #20]
    3dbc:	614b      	str	r3, [r1, #20]
    3dbe:	6983      	ldr	r3, [r0, #24]
    3dc0:	618b      	str	r3, [r1, #24]
    3dc2:	69c3      	ldr	r3, [r0, #28]
    3dc4:	61cb      	str	r3, [r1, #28]
    3dc6:	6a03      	ldr	r3, [r0, #32]
    3dc8:	620b      	str	r3, [r1, #32]
    3dca:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3dcc:	624b      	str	r3, [r1, #36]	; 0x24
}
    3dce:	4770      	bx	lr

00003dd0 <table_lookup_1x8>:

#include "FourQ_internal.h"                        


void table_lookup_1x8(vpoint_extproj_precomp_t* table, vpoint_extproj_precomp_t P, unsigned int digit, unsigned int sign_mask)
{ // Constant-time table lookup to extract a point represented as (X+Y,Y-X,2Z,2dT) corresponding to extended twisted Edwards coordinates (X:Y:Z:T)
    3dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dd2:	46d6      	mov	lr, sl
    3dd4:	464f      	mov	r7, r9
    3dd6:	4646      	mov	r6, r8
    3dd8:	b5c0      	push	{r6, r7, lr}
    3dda:	b0d2      	sub	sp, #328	; 0x148
    3ddc:	0004      	movs	r4, r0
    3dde:	468a      	mov	sl, r1
    3de0:	4690      	mov	r8, r2
    3de2:	001e      	movs	r6, r3
#else
    vpoint_extproj_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                  
    ecccopy_precomp(table[0], point);                                        // point = table[0]
    3de4:	a92a      	add	r1, sp, #168	; 0xa8
    3de6:	4dcc      	ldr	r5, [pc, #816]	; (4118 <table_lookup_1x8+0x348>)
    3de8:	47a8      	blx	r5
    3dea:	0020      	movs	r0, r4
    3dec:	3028      	adds	r0, #40	; 0x28
    3dee:	a934      	add	r1, sp, #208	; 0xd0
    3df0:	47a8      	blx	r5
    3df2:	0020      	movs	r0, r4
    3df4:	3050      	adds	r0, #80	; 0x50
    3df6:	a93e      	add	r1, sp, #248	; 0xf8
    3df8:	47a8      	blx	r5
    3dfa:	0020      	movs	r0, r4
    3dfc:	3078      	adds	r0, #120	; 0x78
    3dfe:	a948      	add	r1, sp, #288	; 0x120
    3e00:	47a8      	blx	r5
    3e02:	0025      	movs	r5, r4
    3e04:	35a0      	adds	r5, #160	; 0xa0
    3e06:	23a0      	movs	r3, #160	; 0xa0
    3e08:	00db      	lsls	r3, r3, #3
    3e0a:	4699      	mov	r9, r3
    3e0c:	44a1      	add	r9, r4
    for (i = 1; i < 8; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    3e0e:	4fc2      	ldr	r7, [pc, #776]	; (4118 <table_lookup_1x8+0x348>)
        digit--;
    3e10:	2301      	movs	r3, #1
    3e12:	425b      	negs	r3, r3
    3e14:	469c      	mov	ip, r3
    3e16:	44e0      	add	r8, ip
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    3e18:	4643      	mov	r3, r8
    3e1a:	0fdc      	lsrs	r4, r3, #31
    3e1c:	4464      	add	r4, ip
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    3e1e:	a902      	add	r1, sp, #8
    3e20:	0028      	movs	r0, r5
    3e22:	47b8      	blx	r7
    3e24:	0028      	movs	r0, r5
    3e26:	3028      	adds	r0, #40	; 0x28
    3e28:	a90c      	add	r1, sp, #48	; 0x30
    3e2a:	47b8      	blx	r7
    3e2c:	0028      	movs	r0, r5
    3e2e:	3050      	adds	r0, #80	; 0x50
    3e30:	a916      	add	r1, sp, #88	; 0x58
    3e32:	47b8      	blx	r7
    3e34:	0028      	movs	r0, r5
    3e36:	3078      	adds	r0, #120	; 0x78
    3e38:	a920      	add	r1, sp, #128	; 0x80
    3e3a:	47b8      	blx	r7
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point            
        point->xy[0] = (mask & (point->xy[0] ^ temp_point->xy[0])) ^ point->xy[0];
    3e3c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    3e3e:	9b02      	ldr	r3, [sp, #8]
    3e40:	4053      	eors	r3, r2
    3e42:	4023      	ands	r3, r4
    3e44:	4053      	eors	r3, r2
    3e46:	932a      	str	r3, [sp, #168]	; 0xa8
        point->xy[1] = (mask & (point->xy[1] ^ temp_point->xy[1])) ^ point->xy[1];
    3e48:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    3e4a:	9b03      	ldr	r3, [sp, #12]
    3e4c:	4053      	eors	r3, r2
    3e4e:	4023      	ands	r3, r4
    3e50:	4053      	eors	r3, r2
    3e52:	932b      	str	r3, [sp, #172]	; 0xac
        point->xy[2] = (mask & (point->xy[2] ^ temp_point->xy[2])) ^ point->xy[2];
    3e54:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    3e56:	9b04      	ldr	r3, [sp, #16]
    3e58:	4053      	eors	r3, r2
    3e5a:	4023      	ands	r3, r4
    3e5c:	4053      	eors	r3, r2
    3e5e:	932c      	str	r3, [sp, #176]	; 0xb0
        point->xy[3] = (mask & (point->xy[3] ^ temp_point->xy[3])) ^ point->xy[3];
    3e60:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    3e62:	9b05      	ldr	r3, [sp, #20]
    3e64:	4053      	eors	r3, r2
    3e66:	4023      	ands	r3, r4
    3e68:	4053      	eors	r3, r2
    3e6a:	932d      	str	r3, [sp, #180]	; 0xb4
        point->xy[4] = (mask & (point->xy[4] ^ temp_point->xy[4])) ^ point->xy[4];
    3e6c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    3e6e:	9b06      	ldr	r3, [sp, #24]
    3e70:	4053      	eors	r3, r2
    3e72:	4023      	ands	r3, r4
    3e74:	4053      	eors	r3, r2
    3e76:	932e      	str	r3, [sp, #184]	; 0xb8
        point->xy[5] = (mask & (point->xy[5] ^ temp_point->xy[5])) ^ point->xy[5];
    3e78:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    3e7a:	9b07      	ldr	r3, [sp, #28]
    3e7c:	4053      	eors	r3, r2
    3e7e:	4023      	ands	r3, r4
    3e80:	4053      	eors	r3, r2
    3e82:	932f      	str	r3, [sp, #188]	; 0xbc
        point->xy[6] = (mask & (point->xy[6] ^ temp_point->xy[6])) ^ point->xy[6];
    3e84:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    3e86:	9b08      	ldr	r3, [sp, #32]
    3e88:	4053      	eors	r3, r2
    3e8a:	4023      	ands	r3, r4
    3e8c:	4053      	eors	r3, r2
    3e8e:	9330      	str	r3, [sp, #192]	; 0xc0
        point->xy[7] = (mask & (point->xy[7] ^ temp_point->xy[7])) ^ point->xy[7];
    3e90:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    3e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e94:	4053      	eors	r3, r2
    3e96:	4023      	ands	r3, r4
    3e98:	4053      	eors	r3, r2
    3e9a:	9331      	str	r3, [sp, #196]	; 0xc4
        point->xy[8] = (mask & (point->xy[8] ^ temp_point->xy[8])) ^ point->xy[8];
    3e9c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    3e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3ea0:	4053      	eors	r3, r2
    3ea2:	4023      	ands	r3, r4
    3ea4:	4053      	eors	r3, r2
    3ea6:	9332      	str	r3, [sp, #200]	; 0xc8
        point->xy[9] = (mask & (point->xy[9] ^ temp_point->xy[9])) ^ point->xy[9];
    3ea8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    3eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3eac:	4053      	eors	r3, r2
    3eae:	4023      	ands	r3, r4
    3eb0:	4053      	eors	r3, r2
    3eb2:	9333      	str	r3, [sp, #204]	; 0xcc
        point->yx[0] = (mask & (point->yx[0] ^ temp_point->yx[0])) ^ point->yx[0];
    3eb4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    3eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3eb8:	4053      	eors	r3, r2
    3eba:	4023      	ands	r3, r4
    3ebc:	4053      	eors	r3, r2
    3ebe:	9334      	str	r3, [sp, #208]	; 0xd0
        point->yx[1] = (mask & (point->yx[1] ^ temp_point->yx[1])) ^ point->yx[1];
    3ec0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
    3ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3ec4:	4053      	eors	r3, r2
    3ec6:	4023      	ands	r3, r4
    3ec8:	4053      	eors	r3, r2
    3eca:	9335      	str	r3, [sp, #212]	; 0xd4
        point->yx[2] = (mask & (point->yx[2] ^ temp_point->yx[2])) ^ point->yx[2];
    3ecc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    3ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3ed0:	4053      	eors	r3, r2
    3ed2:	4023      	ands	r3, r4
    3ed4:	4053      	eors	r3, r2
    3ed6:	9336      	str	r3, [sp, #216]	; 0xd8
        point->yx[3] = (mask & (point->yx[3] ^ temp_point->yx[3])) ^ point->yx[3];
    3ed8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    3eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3edc:	4053      	eors	r3, r2
    3ede:	4023      	ands	r3, r4
    3ee0:	4053      	eors	r3, r2
    3ee2:	9337      	str	r3, [sp, #220]	; 0xdc
        point->yx[4] = (mask & (point->yx[4] ^ temp_point->yx[4])) ^ point->yx[4];
    3ee4:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    3ee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3ee8:	4053      	eors	r3, r2
    3eea:	4023      	ands	r3, r4
    3eec:	4053      	eors	r3, r2
    3eee:	9338      	str	r3, [sp, #224]	; 0xe0
        point->yx[5] = (mask & (point->yx[5] ^ temp_point->yx[5])) ^ point->yx[5];
    3ef0:	9a39      	ldr	r2, [sp, #228]	; 0xe4
    3ef2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3ef4:	4053      	eors	r3, r2
    3ef6:	4023      	ands	r3, r4
    3ef8:	4053      	eors	r3, r2
    3efa:	9339      	str	r3, [sp, #228]	; 0xe4
        point->yx[6] = (mask & (point->yx[6] ^ temp_point->yx[6])) ^ point->yx[6];
    3efc:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    3efe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3f00:	4053      	eors	r3, r2
    3f02:	4023      	ands	r3, r4
    3f04:	4053      	eors	r3, r2
    3f06:	933a      	str	r3, [sp, #232]	; 0xe8
        point->yx[7] = (mask & (point->yx[7] ^ temp_point->yx[7])) ^ point->yx[7];
    3f08:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    3f0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3f0c:	4053      	eors	r3, r2
    3f0e:	4023      	ands	r3, r4
    3f10:	4053      	eors	r3, r2
    3f12:	933b      	str	r3, [sp, #236]	; 0xec
        point->yx[8] = (mask & (point->yx[8] ^ temp_point->yx[8])) ^ point->yx[8];
    3f14:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    3f16:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3f18:	4053      	eors	r3, r2
    3f1a:	4023      	ands	r3, r4
    3f1c:	4053      	eors	r3, r2
    3f1e:	933c      	str	r3, [sp, #240]	; 0xf0
        point->yx[9] = (mask & (point->yx[9] ^ temp_point->yx[9])) ^ point->yx[9];
    3f20:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    3f22:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3f24:	4053      	eors	r3, r2
    3f26:	4023      	ands	r3, r4
    3f28:	4053      	eors	r3, r2
    3f2a:	933d      	str	r3, [sp, #244]	; 0xf4
        point->z2[0] = (mask & (point->z2[0] ^ temp_point->z2[0])) ^ point->z2[0];
    3f2c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    3f2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3f30:	4053      	eors	r3, r2
    3f32:	4023      	ands	r3, r4
    3f34:	4053      	eors	r3, r2
    3f36:	933e      	str	r3, [sp, #248]	; 0xf8
        point->z2[1] = (mask & (point->z2[1] ^ temp_point->z2[1])) ^ point->z2[1];
    3f38:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    3f3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3f3c:	4053      	eors	r3, r2
    3f3e:	4023      	ands	r3, r4
    3f40:	4053      	eors	r3, r2
    3f42:	933f      	str	r3, [sp, #252]	; 0xfc
        point->z2[2] = (mask & (point->z2[2] ^ temp_point->z2[2])) ^ point->z2[2];
    3f44:	9a40      	ldr	r2, [sp, #256]	; 0x100
    3f46:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3f48:	4053      	eors	r3, r2
    3f4a:	4023      	ands	r3, r4
    3f4c:	4053      	eors	r3, r2
    3f4e:	9340      	str	r3, [sp, #256]	; 0x100
        point->z2[3] = (mask & (point->z2[3] ^ temp_point->z2[3])) ^ point->z2[3];
    3f50:	9a41      	ldr	r2, [sp, #260]	; 0x104
    3f52:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3f54:	4053      	eors	r3, r2
    3f56:	4023      	ands	r3, r4
    3f58:	4053      	eors	r3, r2
    3f5a:	9341      	str	r3, [sp, #260]	; 0x104
        point->z2[4] = (mask & (point->z2[4] ^ temp_point->z2[4])) ^ point->z2[4];
    3f5c:	9a42      	ldr	r2, [sp, #264]	; 0x108
    3f5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    3f60:	4053      	eors	r3, r2
    3f62:	4023      	ands	r3, r4
    3f64:	4053      	eors	r3, r2
    3f66:	9342      	str	r3, [sp, #264]	; 0x108
        point->z2[5] = (mask & (point->z2[5] ^ temp_point->z2[5])) ^ point->z2[5];
    3f68:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3f6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    3f6c:	4053      	eors	r3, r2
    3f6e:	4023      	ands	r3, r4
    3f70:	4053      	eors	r3, r2
    3f72:	9343      	str	r3, [sp, #268]	; 0x10c
        point->z2[6] = (mask & (point->z2[6] ^ temp_point->z2[6])) ^ point->z2[6];
    3f74:	9a44      	ldr	r2, [sp, #272]	; 0x110
    3f76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    3f78:	4053      	eors	r3, r2
    3f7a:	4023      	ands	r3, r4
    3f7c:	4053      	eors	r3, r2
    3f7e:	9344      	str	r3, [sp, #272]	; 0x110
        point->z2[7] = (mask & (point->z2[7] ^ temp_point->z2[7])) ^ point->z2[7];
    3f80:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3f82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    3f84:	4053      	eors	r3, r2
    3f86:	4023      	ands	r3, r4
    3f88:	4053      	eors	r3, r2
    3f8a:	9345      	str	r3, [sp, #276]	; 0x114
        point->z2[8] = (mask & (point->z2[8] ^ temp_point->z2[8])) ^ point->z2[8];
    3f8c:	9a46      	ldr	r2, [sp, #280]	; 0x118
    3f8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    3f90:	4053      	eors	r3, r2
    3f92:	4023      	ands	r3, r4
    3f94:	4053      	eors	r3, r2
    3f96:	9346      	str	r3, [sp, #280]	; 0x118
        point->z2[9] = (mask & (point->z2[9] ^ temp_point->z2[9])) ^ point->z2[9];
    3f98:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    3f9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    3f9c:	4053      	eors	r3, r2
    3f9e:	4023      	ands	r3, r4
    3fa0:	4053      	eors	r3, r2
    3fa2:	9347      	str	r3, [sp, #284]	; 0x11c
        point->t2[0] = (mask & (point->t2[0] ^ temp_point->t2[0])) ^ point->t2[0];
    3fa4:	9a48      	ldr	r2, [sp, #288]	; 0x120
    3fa6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3fa8:	4053      	eors	r3, r2
    3faa:	4023      	ands	r3, r4
    3fac:	4053      	eors	r3, r2
    3fae:	9348      	str	r3, [sp, #288]	; 0x120
        point->t2[1] = (mask & (point->t2[1] ^ temp_point->t2[1])) ^ point->t2[1];
    3fb0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    3fb4:	4053      	eors	r3, r2
    3fb6:	4023      	ands	r3, r4
    3fb8:	4053      	eors	r3, r2
    3fba:	9349      	str	r3, [sp, #292]	; 0x124
        point->t2[2] = (mask & (point->t2[2] ^ temp_point->t2[2])) ^ point->t2[2];
    3fbc:	2280      	movs	r2, #128	; 0x80
    3fbe:	ab02      	add	r3, sp, #8
    3fc0:	21a0      	movs	r1, #160	; 0xa0
    3fc2:	185b      	adds	r3, r3, r1
    3fc4:	5899      	ldr	r1, [r3, r2]
    3fc6:	ab02      	add	r3, sp, #8
    3fc8:	589b      	ldr	r3, [r3, r2]
    3fca:	404b      	eors	r3, r1
    3fcc:	4023      	ands	r3, r4
    3fce:	404b      	eors	r3, r1
    3fd0:	a902      	add	r1, sp, #8
    3fd2:	20a0      	movs	r0, #160	; 0xa0
    3fd4:	1809      	adds	r1, r1, r0
    3fd6:	508b      	str	r3, [r1, r2]
        point->t2[3] = (mask & (point->t2[3] ^ temp_point->t2[3])) ^ point->t2[3];
    3fd8:	3204      	adds	r2, #4
    3fda:	ab02      	add	r3, sp, #8
    3fdc:	21a0      	movs	r1, #160	; 0xa0
    3fde:	185b      	adds	r3, r3, r1
    3fe0:	5899      	ldr	r1, [r3, r2]
    3fe2:	ab02      	add	r3, sp, #8
    3fe4:	589b      	ldr	r3, [r3, r2]
    3fe6:	404b      	eors	r3, r1
    3fe8:	4023      	ands	r3, r4
    3fea:	404b      	eors	r3, r1
    3fec:	a902      	add	r1, sp, #8
    3fee:	1809      	adds	r1, r1, r0
    3ff0:	508b      	str	r3, [r1, r2]
        point->t2[4] = (mask & (point->t2[4] ^ temp_point->t2[4])) ^ point->t2[4];
    3ff2:	3204      	adds	r2, #4
    3ff4:	ab02      	add	r3, sp, #8
    3ff6:	21a0      	movs	r1, #160	; 0xa0
    3ff8:	185b      	adds	r3, r3, r1
    3ffa:	5899      	ldr	r1, [r3, r2]
    3ffc:	ab02      	add	r3, sp, #8
    3ffe:	589b      	ldr	r3, [r3, r2]
    4000:	404b      	eors	r3, r1
    4002:	4023      	ands	r3, r4
    4004:	404b      	eors	r3, r1
    4006:	a902      	add	r1, sp, #8
    4008:	1809      	adds	r1, r1, r0
    400a:	508b      	str	r3, [r1, r2]
        point->t2[5] = (mask & (point->t2[5] ^ temp_point->t2[5])) ^ point->t2[5];
    400c:	3204      	adds	r2, #4
    400e:	ab02      	add	r3, sp, #8
    4010:	21a0      	movs	r1, #160	; 0xa0
    4012:	185b      	adds	r3, r3, r1
    4014:	5899      	ldr	r1, [r3, r2]
    4016:	ab02      	add	r3, sp, #8
    4018:	589b      	ldr	r3, [r3, r2]
    401a:	404b      	eors	r3, r1
    401c:	4023      	ands	r3, r4
    401e:	404b      	eors	r3, r1
    4020:	a902      	add	r1, sp, #8
    4022:	1809      	adds	r1, r1, r0
    4024:	508b      	str	r3, [r1, r2]
        point->t2[6] = (mask & (point->t2[6] ^ temp_point->t2[6])) ^ point->t2[6];
    4026:	3204      	adds	r2, #4
    4028:	ab02      	add	r3, sp, #8
    402a:	21a0      	movs	r1, #160	; 0xa0
    402c:	185b      	adds	r3, r3, r1
    402e:	5899      	ldr	r1, [r3, r2]
    4030:	ab02      	add	r3, sp, #8
    4032:	589b      	ldr	r3, [r3, r2]
    4034:	404b      	eors	r3, r1
    4036:	4023      	ands	r3, r4
    4038:	404b      	eors	r3, r1
    403a:	a902      	add	r1, sp, #8
    403c:	1809      	adds	r1, r1, r0
    403e:	508b      	str	r3, [r1, r2]
        point->t2[7] = (mask & (point->t2[7] ^ temp_point->t2[7])) ^ point->t2[7];
    4040:	3204      	adds	r2, #4
    4042:	ab02      	add	r3, sp, #8
    4044:	21a0      	movs	r1, #160	; 0xa0
    4046:	185b      	adds	r3, r3, r1
    4048:	5899      	ldr	r1, [r3, r2]
    404a:	ab02      	add	r3, sp, #8
    404c:	589b      	ldr	r3, [r3, r2]
    404e:	404b      	eors	r3, r1
    4050:	4023      	ands	r3, r4
    4052:	404b      	eors	r3, r1
    4054:	a902      	add	r1, sp, #8
    4056:	1809      	adds	r1, r1, r0
    4058:	508b      	str	r3, [r1, r2]
        point->t2[8] = (mask & (point->t2[8] ^ temp_point->t2[8])) ^ point->t2[8];
    405a:	3204      	adds	r2, #4
    405c:	ab02      	add	r3, sp, #8
    405e:	21a0      	movs	r1, #160	; 0xa0
    4060:	185b      	adds	r3, r3, r1
    4062:	5899      	ldr	r1, [r3, r2]
    4064:	ab02      	add	r3, sp, #8
    4066:	589b      	ldr	r3, [r3, r2]
    4068:	404b      	eors	r3, r1
    406a:	4023      	ands	r3, r4
    406c:	404b      	eors	r3, r1
    406e:	a902      	add	r1, sp, #8
    4070:	1809      	adds	r1, r1, r0
    4072:	508b      	str	r3, [r1, r2]
        point->t2[9] = (mask & (point->t2[9] ^ temp_point->t2[9])) ^ point->t2[9];
    4074:	239c      	movs	r3, #156	; 0x9c
    4076:	aa02      	add	r2, sp, #8
    4078:	21a0      	movs	r1, #160	; 0xa0
    407a:	1852      	adds	r2, r2, r1
    407c:	58d1      	ldr	r1, [r2, r3]
    407e:	aa02      	add	r2, sp, #8
    4080:	58d2      	ldr	r2, [r2, r3]
    4082:	9201      	str	r2, [sp, #4]
    4084:	404a      	eors	r2, r1
    4086:	4014      	ands	r4, r2
    4088:	404c      	eors	r4, r1
    408a:	aa02      	add	r2, sp, #8
    408c:	21a0      	movs	r1, #160	; 0xa0
    408e:	1852      	adds	r2, r2, r1
    4090:	50d4      	str	r4, [r2, r3]
    4092:	35a0      	adds	r5, #160	; 0xa0
    for (i = 1; i < 8; i++)
    4094:	454d      	cmp	r5, r9
    4096:	d000      	beq.n	409a <table_lookup_1x8+0x2ca>
    4098:	e6ba      	b.n	3e10 <table_lookup_1x8+0x40>
    }
    
    v2copy1271(point->t2, temp_point->t2);
    409a:	a920      	add	r1, sp, #128	; 0x80
    409c:	a848      	add	r0, sp, #288	; 0x120
    409e:	4c1e      	ldr	r4, [pc, #120]	; (4118 <table_lookup_1x8+0x348>)
    40a0:	47a0      	blx	r4
    v2copy1271(point->xy, temp_point->yx);                                   // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    40a2:	a90c      	add	r1, sp, #48	; 0x30
    40a4:	a82a      	add	r0, sp, #168	; 0xa8
    40a6:	47a0      	blx	r4
    v2copy1271(point->yx, temp_point->xy);                                   
    40a8:	a902      	add	r1, sp, #8
    40aa:	a834      	add	r0, sp, #208	; 0xd0
    40ac:	47a0      	blx	r4
    vneg1271(&temp_point->t2[0]);                                            // Negate 2dt coordinate
    40ae:	a820      	add	r0, sp, #128	; 0x80
    40b0:	4c1a      	ldr	r4, [pc, #104]	; (411c <table_lookup_1x8+0x34c>)
    40b2:	47a0      	blx	r4
    vneg1271(&temp_point->t2[VWORDS_FIELD]);             
    40b4:	a825      	add	r0, sp, #148	; 0x94
    40b6:	47a0      	blx	r4
    40b8:	ab2a      	add	r3, sp, #168	; 0xa8
    40ba:	a902      	add	r1, sp, #8
    40bc:	a834      	add	r0, sp, #208	; 0xd0
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                   // If sign_mask = 0 then choose negative of the point
        point->xy[j] = ((digit_t)((int)sign_mask) & (point->xy[j] ^ temp_point->xy[j])) ^ temp_point->xy[j];
    40be:	680c      	ldr	r4, [r1, #0]
    40c0:	681a      	ldr	r2, [r3, #0]
    40c2:	4062      	eors	r2, r4
    40c4:	4032      	ands	r2, r6
    40c6:	4062      	eors	r2, r4
    40c8:	601a      	str	r2, [r3, #0]
        point->yx[j] = ((digit_t)((int)sign_mask) & (point->yx[j] ^ temp_point->yx[j])) ^ temp_point->yx[j];
    40ca:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    40cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40ce:	4062      	eors	r2, r4
    40d0:	4032      	ands	r2, r6
    40d2:	4062      	eors	r2, r4
    40d4:	629a      	str	r2, [r3, #40]	; 0x28
        point->t2[j] = ((digit_t)((int)sign_mask) & (point->t2[j] ^ temp_point->t2[j])) ^ temp_point->t2[j];
    40d6:	6f8c      	ldr	r4, [r1, #120]	; 0x78
    40d8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    40da:	4062      	eors	r2, r4
    40dc:	4032      	ands	r2, r6
    40de:	4062      	eors	r2, r4
    40e0:	679a      	str	r2, [r3, #120]	; 0x78
    40e2:	3304      	adds	r3, #4
    40e4:	3104      	adds	r1, #4
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                   // If sign_mask = 0 then choose negative of the point
    40e6:	4283      	cmp	r3, r0
    40e8:	d1e9      	bne.n	40be <table_lookup_1x8+0x2ee>
    }                                
    ecccopy_precomp(point, P); 
    40ea:	4651      	mov	r1, sl
    40ec:	a82a      	add	r0, sp, #168	; 0xa8
    40ee:	4c0a      	ldr	r4, [pc, #40]	; (4118 <table_lookup_1x8+0x348>)
    40f0:	47a0      	blx	r4
    40f2:	4651      	mov	r1, sl
    40f4:	3128      	adds	r1, #40	; 0x28
    40f6:	a834      	add	r0, sp, #208	; 0xd0
    40f8:	47a0      	blx	r4
    40fa:	4651      	mov	r1, sl
    40fc:	3150      	adds	r1, #80	; 0x50
    40fe:	a83e      	add	r0, sp, #248	; 0xf8
    4100:	47a0      	blx	r4
    4102:	4651      	mov	r1, sl
    4104:	3178      	adds	r1, #120	; 0x78
    4106:	a848      	add	r0, sp, #288	; 0x120
    4108:	47a0      	blx	r4
#endif
}
    410a:	b052      	add	sp, #328	; 0x148
    410c:	bc1c      	pop	{r2, r3, r4}
    410e:	4690      	mov	r8, r2
    4110:	4699      	mov	r9, r3
    4112:	46a2      	mov	sl, r4
    4114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4116:	46c0      	nop			; (mov r8, r8)
    4118:	00003da7 	.word	0x00003da7
    411c:	000031f1 	.word	0x000031f1

00004120 <table_lookup_fixed_base>:


void table_lookup_fixed_base(vpoint_precomp_t* table, vpoint_precomp_t P, unsigned int digit, unsigned int sign)
{ // Constant-time table lookup to extract a point represented as (x+y,y-x,2t) corresponding to extended twisted Edwards coordinates (X:Y:Z:T) with Z=1
    4120:	b5f0      	push	{r4, r5, r6, r7, lr}
    4122:	46de      	mov	lr, fp
    4124:	4657      	mov	r7, sl
    4126:	464e      	mov	r6, r9
    4128:	4645      	mov	r5, r8
    412a:	b5e0      	push	{r5, r6, r7, lr}
    412c:	b0bf      	sub	sp, #252	; 0xfc
    412e:	0004      	movs	r4, r0
    4130:	9101      	str	r1, [sp, #4]
    4132:	4692      	mov	sl, r2
    4134:	469b      	mov	fp, r3
#else
    vpoint_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                   
    ecccopy_precomp_fixed_base(table[0], point);                             // point = table[0]
    4136:	a920      	add	r1, sp, #128	; 0x80
    4138:	4d42      	ldr	r5, [pc, #264]	; (4244 <table_lookup_fixed_base+0x124>)
    413a:	47a8      	blx	r5
    413c:	0020      	movs	r0, r4
    413e:	3028      	adds	r0, #40	; 0x28
    4140:	a92a      	add	r1, sp, #168	; 0xa8
    4142:	47a8      	blx	r5
    4144:	0020      	movs	r0, r4
    4146:	3050      	adds	r0, #80	; 0x50
    4148:	a934      	add	r1, sp, #208	; 0xd0
    414a:	47a8      	blx	r5
    414c:	0027      	movs	r7, r4
    414e:	3778      	adds	r7, #120	; 0x78
    4150:	0023      	movs	r3, r4
    4152:	22f0      	movs	r2, #240	; 0xf0
    4154:	00d2      	lsls	r2, r2, #3
    4156:	4694      	mov	ip, r2
    4158:	4463      	add	r3, ip
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    415a:	4a3a      	ldr	r2, [pc, #232]	; (4244 <table_lookup_fixed_base+0x124>)
    415c:	4691      	mov	r9, r2
    415e:	4698      	mov	r8, r3
    4160:	4654      	mov	r4, sl
    4162:	e003      	b.n	416c <table_lookup_fixed_base+0x4c>
    4164:	4664      	mov	r4, ip
    4166:	3778      	adds	r7, #120	; 0x78
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    4168:	4547      	cmp	r7, r8
    416a:	d02e      	beq.n	41ca <table_lookup_fixed_base+0xaa>
        digit--;
    416c:	3c01      	subs	r4, #1
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    416e:	0fe5      	lsrs	r5, r4, #31
    4170:	3d01      	subs	r5, #1
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    4172:	a902      	add	r1, sp, #8
    4174:	0038      	movs	r0, r7
    4176:	47c8      	blx	r9
    4178:	0038      	movs	r0, r7
    417a:	3028      	adds	r0, #40	; 0x28
    417c:	a90c      	add	r1, sp, #48	; 0x30
    417e:	47c8      	blx	r9
    4180:	0038      	movs	r0, r7
    4182:	3050      	adds	r0, #80	; 0x50
    4184:	a916      	add	r1, sp, #88	; 0x58
    4186:	47c8      	blx	r9
    4188:	ae20      	add	r6, sp, #128	; 0x80
    418a:	ab02      	add	r3, sp, #8
    418c:	469a      	mov	sl, r3
    418e:	a82a      	add	r0, sp, #168	; 0xa8
    4190:	0019      	movs	r1, r3
    4192:	0032      	movs	r2, r6
    4194:	46a4      	mov	ip, r4
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point
        for (j = 0; j < 2*VWORDS_FIELD; j++) {
            point->xy[j] = (mask & (point->xy[j] ^ temp_point->xy[j])) ^ point->xy[j];
    4196:	6813      	ldr	r3, [r2, #0]
    4198:	680c      	ldr	r4, [r1, #0]
    419a:	4063      	eors	r3, r4
    419c:	402b      	ands	r3, r5
    419e:	6814      	ldr	r4, [r2, #0]
    41a0:	4063      	eors	r3, r4
    41a2:	6013      	str	r3, [r2, #0]
            point->yx[j] = (mask & (point->yx[j] ^ temp_point->yx[j])) ^ point->yx[j];
    41a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    41a6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    41a8:	4063      	eors	r3, r4
    41aa:	402b      	ands	r3, r5
    41ac:	6a94      	ldr	r4, [r2, #40]	; 0x28
    41ae:	4063      	eors	r3, r4
    41b0:	6293      	str	r3, [r2, #40]	; 0x28
            point->t2[j] = (mask & (point->t2[j] ^ temp_point->t2[j])) ^ point->t2[j];
    41b2:	6d13      	ldr	r3, [r2, #80]	; 0x50
    41b4:	6d0c      	ldr	r4, [r1, #80]	; 0x50
    41b6:	4063      	eors	r3, r4
    41b8:	402b      	ands	r3, r5
    41ba:	6d14      	ldr	r4, [r2, #80]	; 0x50
    41bc:	4063      	eors	r3, r4
    41be:	6513      	str	r3, [r2, #80]	; 0x50
    41c0:	3204      	adds	r2, #4
    41c2:	3104      	adds	r1, #4
        for (j = 0; j < 2*VWORDS_FIELD; j++) {
    41c4:	4282      	cmp	r2, r0
    41c6:	d1e6      	bne.n	4196 <table_lookup_fixed_base+0x76>
    41c8:	e7cc      	b.n	4164 <table_lookup_fixed_base+0x44>
    41ca:	0014      	movs	r4, r2
        }
    }
    
    v2copy1271(point->t2, temp_point->t2);
    41cc:	a916      	add	r1, sp, #88	; 0x58
    41ce:	a834      	add	r0, sp, #208	; 0xd0
    41d0:	4d1c      	ldr	r5, [pc, #112]	; (4244 <table_lookup_fixed_base+0x124>)
    41d2:	47a8      	blx	r5
    v2copy1271(point->xy, temp_point->yx);                                  // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    41d4:	a90c      	add	r1, sp, #48	; 0x30
    41d6:	a820      	add	r0, sp, #128	; 0x80
    41d8:	47a8      	blx	r5
    v2copy1271(point->yx, temp_point->xy);                                   
    41da:	a902      	add	r1, sp, #8
    41dc:	a82a      	add	r0, sp, #168	; 0xa8
    41de:	47a8      	blx	r5
    vneg1271(&temp_point->t2[0]);                                            // Negate 2dt coordinate
    41e0:	a816      	add	r0, sp, #88	; 0x58
    41e2:	4d19      	ldr	r5, [pc, #100]	; (4248 <table_lookup_fixed_base+0x128>)
    41e4:	47a8      	blx	r5
    vneg1271(&temp_point->t2[VWORDS_FIELD]);             
    41e6:	a81b      	add	r0, sp, #108	; 0x6c
    41e8:	47a8      	blx	r5
    41ea:	4652      	mov	r2, sl
    41ec:	4659      	mov	r1, fp
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
        point->xy[j] = ((digit_t)((int)sign) & (point->xy[j] ^ temp_point->xy[j])) ^ point->xy[j];
    41ee:	6830      	ldr	r0, [r6, #0]
    41f0:	6813      	ldr	r3, [r2, #0]
    41f2:	4043      	eors	r3, r0
    41f4:	400b      	ands	r3, r1
    41f6:	4043      	eors	r3, r0
    41f8:	6033      	str	r3, [r6, #0]
        point->yx[j] = ((digit_t)((int)sign) & (point->yx[j] ^ temp_point->yx[j])) ^ point->yx[j];
    41fa:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    41fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    41fe:	4043      	eors	r3, r0
    4200:	400b      	ands	r3, r1
    4202:	4043      	eors	r3, r0
    4204:	62b3      	str	r3, [r6, #40]	; 0x28
        point->t2[j] = ((digit_t)((int)sign) & (point->t2[j] ^ temp_point->t2[j])) ^ point->t2[j];
    4206:	6d30      	ldr	r0, [r6, #80]	; 0x50
    4208:	6d13      	ldr	r3, [r2, #80]	; 0x50
    420a:	4043      	eors	r3, r0
    420c:	400b      	ands	r3, r1
    420e:	4043      	eors	r3, r0
    4210:	6533      	str	r3, [r6, #80]	; 0x50
    4212:	3604      	adds	r6, #4
    4214:	3204      	adds	r2, #4
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
    4216:	42a6      	cmp	r6, r4
    4218:	d1e9      	bne.n	41ee <table_lookup_fixed_base+0xce>
    }                                  
    ecccopy_precomp_fixed_base(point, P);
    421a:	9d01      	ldr	r5, [sp, #4]
    421c:	0029      	movs	r1, r5
    421e:	a820      	add	r0, sp, #128	; 0x80
    4220:	4c08      	ldr	r4, [pc, #32]	; (4244 <table_lookup_fixed_base+0x124>)
    4222:	47a0      	blx	r4
    4224:	0029      	movs	r1, r5
    4226:	3128      	adds	r1, #40	; 0x28
    4228:	a82a      	add	r0, sp, #168	; 0xa8
    422a:	47a0      	blx	r4
    422c:	0029      	movs	r1, r5
    422e:	3150      	adds	r1, #80	; 0x50
    4230:	a834      	add	r0, sp, #208	; 0xd0
    4232:	47a0      	blx	r4
#endif
}
    4234:	b03f      	add	sp, #252	; 0xfc
    4236:	bc3c      	pop	{r2, r3, r4, r5}
    4238:	4690      	mov	r8, r2
    423a:	4699      	mov	r9, r3
    423c:	46a2      	mov	sl, r4
    423e:	46ab      	mov	fp, r5
    4240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4242:	46c0      	nop			; (mov r8, r8)
    4244:	00003da7 	.word	0x00003da7
    4248:	000031f1 	.word	0x000031f1

0000424c <v2zero1271>:


void v2zero1271(v2elm_t a) 
{ // Zeroing vectorized GF(p^2) element, a = 0
    
    a[0] = 0; a[1] = 0; a[2] = 0; a[3] = 0; a[4] = 0; 
    424c:	2300      	movs	r3, #0
    424e:	6003      	str	r3, [r0, #0]
    4250:	6043      	str	r3, [r0, #4]
    4252:	6083      	str	r3, [r0, #8]
    4254:	60c3      	str	r3, [r0, #12]
    4256:	6103      	str	r3, [r0, #16]
    a[5] = 0; a[6] = 0; a[7] = 0; a[8] = 0; a[9] = 0;
    4258:	6143      	str	r3, [r0, #20]
    425a:	6183      	str	r3, [r0, #24]
    425c:	61c3      	str	r3, [r0, #28]
    425e:	6203      	str	r3, [r0, #32]
    4260:	6243      	str	r3, [r0, #36]	; 0x24
}
    4262:	4770      	bx	lr

00004264 <v2add1271>:


__inline void v2add1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) addition, c = a+b in GF((2^127-1)^2)
    4264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4266:	0004      	movs	r4, r0
    4268:	000d      	movs	r5, r1
    426a:	0016      	movs	r6, r2
    vadd1271(&a[0], &b[0], &c[0]);
    426c:	4f04      	ldr	r7, [pc, #16]	; (4280 <v2add1271+0x1c>)
    426e:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4270:	0032      	movs	r2, r6
    4272:	3214      	adds	r2, #20
    4274:	0029      	movs	r1, r5
    4276:	3114      	adds	r1, #20
    4278:	0020      	movs	r0, r4
    427a:	3014      	adds	r0, #20
    427c:	47b8      	blx	r7
}
    427e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4280:	00003187 	.word	0x00003187

00004284 <v2sub1271>:


__inline void v2sub1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) subtraction, c = a-b in GF((2^127-1)^2)
    4284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4286:	0004      	movs	r4, r0
    4288:	000d      	movs	r5, r1
    428a:	0016      	movs	r6, r2
    vsub1271(&a[0], &b[0], &c[0]);
    428c:	4f04      	ldr	r7, [pc, #16]	; (42a0 <v2sub1271+0x1c>)
    428e:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4290:	0032      	movs	r2, r6
    4292:	3214      	adds	r2, #20
    4294:	0029      	movs	r1, r5
    4296:	3114      	adds	r1, #20
    4298:	0020      	movs	r0, r4
    429a:	3014      	adds	r0, #20
    429c:	47b8      	blx	r7
}
    429e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42a0:	000031c3 	.word	0x000031c3

000042a4 <v2dblsub1271>:


void v2dblsub1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) addition followed by subtraction, c = 2a-b in GF((2^127-1)^2) 
    42a4:	b510      	push	{r4, lr}
    
    c[0] = (a[0] << 1) - b[0];
    42a6:	6803      	ldr	r3, [r0, #0]
    42a8:	005b      	lsls	r3, r3, #1
    42aa:	680c      	ldr	r4, [r1, #0]
    42ac:	1b1b      	subs	r3, r3, r4
    42ae:	6013      	str	r3, [r2, #0]
    c[1] = (a[1] << 1) - b[1];
    42b0:	6843      	ldr	r3, [r0, #4]
    42b2:	005b      	lsls	r3, r3, #1
    42b4:	684c      	ldr	r4, [r1, #4]
    42b6:	1b1b      	subs	r3, r3, r4
    42b8:	6053      	str	r3, [r2, #4]
    c[2] = (a[2] << 1) - b[2];
    42ba:	6883      	ldr	r3, [r0, #8]
    42bc:	005b      	lsls	r3, r3, #1
    42be:	688c      	ldr	r4, [r1, #8]
    42c0:	1b1b      	subs	r3, r3, r4
    42c2:	6093      	str	r3, [r2, #8]
    c[3] = (a[3] << 1) - b[3];
    42c4:	68c3      	ldr	r3, [r0, #12]
    42c6:	005b      	lsls	r3, r3, #1
    42c8:	68cc      	ldr	r4, [r1, #12]
    42ca:	1b1b      	subs	r3, r3, r4
    42cc:	60d3      	str	r3, [r2, #12]
    c[4] = (a[4] << 1) - b[4];
    42ce:	6903      	ldr	r3, [r0, #16]
    42d0:	005b      	lsls	r3, r3, #1
    42d2:	690c      	ldr	r4, [r1, #16]
    42d4:	1b1b      	subs	r3, r3, r4
    42d6:	6113      	str	r3, [r2, #16]
    c[5] = (a[5] << 1) - b[5];
    42d8:	6943      	ldr	r3, [r0, #20]
    42da:	005b      	lsls	r3, r3, #1
    42dc:	694c      	ldr	r4, [r1, #20]
    42de:	1b1b      	subs	r3, r3, r4
    42e0:	6153      	str	r3, [r2, #20]
    c[6] = (a[6] << 1) - b[6];
    42e2:	6983      	ldr	r3, [r0, #24]
    42e4:	005b      	lsls	r3, r3, #1
    42e6:	698c      	ldr	r4, [r1, #24]
    42e8:	1b1b      	subs	r3, r3, r4
    42ea:	6193      	str	r3, [r2, #24]
    c[7] = (a[7] << 1) - b[7];
    42ec:	69c3      	ldr	r3, [r0, #28]
    42ee:	005b      	lsls	r3, r3, #1
    42f0:	69cc      	ldr	r4, [r1, #28]
    42f2:	1b1b      	subs	r3, r3, r4
    42f4:	61d3      	str	r3, [r2, #28]
    c[8] = (a[8] << 1) - b[8];
    42f6:	6a03      	ldr	r3, [r0, #32]
    42f8:	005b      	lsls	r3, r3, #1
    42fa:	6a0c      	ldr	r4, [r1, #32]
    42fc:	1b1b      	subs	r3, r3, r4
    42fe:	6213      	str	r3, [r2, #32]
    c[9] = (a[9] << 1) - b[9];
    4300:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4302:	005b      	lsls	r3, r3, #1
    4304:	6a49      	ldr	r1, [r1, #36]	; 0x24
    4306:	1a5b      	subs	r3, r3, r1
    4308:	6253      	str	r3, [r2, #36]	; 0x24
}
    430a:	bd10      	pop	{r4, pc}

0000430c <v2neg1271>:

void v2neg1271(v2elm_t a) 
{ // Vectorized GF(p^2) negation
  // Representation: 23/26/26/26/26/23/26/26/26/26-bit
    
    a[0] = mask_26 - a[0];
    430c:	4b10      	ldr	r3, [pc, #64]	; (4350 <v2neg1271+0x44>)
    430e:	6802      	ldr	r2, [r0, #0]
    4310:	1a9a      	subs	r2, r3, r2
    4312:	6002      	str	r2, [r0, #0]
    a[1] = mask_26 - a[1];
    4314:	6842      	ldr	r2, [r0, #4]
    4316:	1a9a      	subs	r2, r3, r2
    4318:	6042      	str	r2, [r0, #4]
    a[2] = mask_26 - a[2];
    431a:	6882      	ldr	r2, [r0, #8]
    431c:	1a9a      	subs	r2, r3, r2
    431e:	6082      	str	r2, [r0, #8]
    a[3] = mask_26 - a[3];
    4320:	68c2      	ldr	r2, [r0, #12]
    4322:	1a9a      	subs	r2, r3, r2
    4324:	60c2      	str	r2, [r0, #12]
    a[4] = mask_23 - a[4];
    4326:	4a0b      	ldr	r2, [pc, #44]	; (4354 <v2neg1271+0x48>)
    4328:	6901      	ldr	r1, [r0, #16]
    432a:	1a51      	subs	r1, r2, r1
    432c:	6101      	str	r1, [r0, #16]
    a[5] = mask_26 - a[5];
    432e:	6941      	ldr	r1, [r0, #20]
    4330:	1a59      	subs	r1, r3, r1
    4332:	6141      	str	r1, [r0, #20]
    a[6] = mask_26 - a[6];
    4334:	6981      	ldr	r1, [r0, #24]
    4336:	1a59      	subs	r1, r3, r1
    4338:	6181      	str	r1, [r0, #24]
    a[7] = mask_26 - a[7];
    433a:	69c1      	ldr	r1, [r0, #28]
    433c:	1a59      	subs	r1, r3, r1
    433e:	61c1      	str	r1, [r0, #28]
    a[8] = mask_26 - a[8];
    4340:	6a01      	ldr	r1, [r0, #32]
    4342:	1a5b      	subs	r3, r3, r1
    4344:	6203      	str	r3, [r0, #32]
    a[9] = mask_23 - a[9];
    4346:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4348:	1ad2      	subs	r2, r2, r3
    434a:	6242      	str	r2, [r0, #36]	; 0x24
}
    434c:	4770      	bx	lr
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	03ffffff 	.word	0x03ffffff
    4354:	007fffff 	.word	0x007fffff

00004358 <v2div1271>:


void v2div1271(uint32_t* a) 
{ // GF(p^2) division by two, c = a/2 mod p
    4358:	b5f0      	push	{r4, r5, r6, r7, lr}
    435a:	46c6      	mov	lr, r8
    435c:	b500      	push	{lr}
    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    435e:	6804      	ldr	r4, [r0, #0]
    4360:	2301      	movs	r3, #1
    4362:	4698      	mov	r8, r3
    4364:	001a      	movs	r2, r3
    4366:	4022      	ands	r2, r4
    4368:	4252      	negs	r2, r2
    436a:	0991      	lsrs	r1, r2, #6
    a[1] += mask;
    436c:	6843      	ldr	r3, [r0, #4]
    436e:	18ce      	adds	r6, r1, r3
    a[2] += mask;
    4370:	6883      	ldr	r3, [r0, #8]
    4372:	18cd      	adds	r5, r1, r3
    a[3] += mask;
    4374:	68c3      	ldr	r3, [r0, #12]
    4376:	18cf      	adds	r7, r1, r3
    a[4] += (mask >> 3);
    4378:	0a52      	lsrs	r2, r2, #9
    437a:	6903      	ldr	r3, [r0, #16]
    437c:	469c      	mov	ip, r3
    437e:	4462      	add	r2, ip
    a[0] += mask;
    4380:	1864      	adds	r4, r4, r1
    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    4382:	1064      	asrs	r4, r4, #1
    4384:	0673      	lsls	r3, r6, #25
    4386:	2180      	movs	r1, #128	; 0x80
    4388:	0489      	lsls	r1, r1, #18
    438a:	400b      	ands	r3, r1
    438c:	469c      	mov	ip, r3
    438e:	4464      	add	r4, ip
    4390:	6004      	str	r4, [r0, #0]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    4392:	066c      	lsls	r4, r5, #25
    4394:	400c      	ands	r4, r1
    4396:	1076      	asrs	r6, r6, #1
    4398:	19a6      	adds	r6, r4, r6
    439a:	6046      	str	r6, [r0, #4]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    439c:	067c      	lsls	r4, r7, #25
    439e:	400c      	ands	r4, r1
    43a0:	106d      	asrs	r5, r5, #1
    43a2:	1965      	adds	r5, r4, r5
    43a4:	6085      	str	r5, [r0, #8]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    43a6:	0654      	lsls	r4, r2, #25
    43a8:	400c      	ands	r4, r1
    43aa:	107f      	asrs	r7, r7, #1
    43ac:	19e7      	adds	r7, r4, r7
    43ae:	60c7      	str	r7, [r0, #12]
    a[4] = ((sdigit_t)a[4] >> 1);
    43b0:	1052      	asrs	r2, r2, #1
    43b2:	6102      	str	r2, [r0, #16]
    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    43b4:	6942      	ldr	r2, [r0, #20]
    43b6:	4643      	mov	r3, r8
    43b8:	4013      	ands	r3, r2
    43ba:	425b      	negs	r3, r3
    43bc:	099f      	lsrs	r7, r3, #6
    a[1] += mask;
    43be:	6984      	ldr	r4, [r0, #24]
    43c0:	193e      	adds	r6, r7, r4
    a[2] += mask;
    43c2:	69c4      	ldr	r4, [r0, #28]
    43c4:	193d      	adds	r5, r7, r4
    a[3] += mask;
    43c6:	6a04      	ldr	r4, [r0, #32]
    43c8:	193c      	adds	r4, r7, r4
    a[4] += (mask >> 3);
    43ca:	0a5b      	lsrs	r3, r3, #9
    43cc:	4698      	mov	r8, r3
    43ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
    43d0:	469c      	mov	ip, r3
    43d2:	4643      	mov	r3, r8
    43d4:	4463      	add	r3, ip
    a[0] += mask;
    43d6:	19d2      	adds	r2, r2, r7
    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    43d8:	1052      	asrs	r2, r2, #1
    43da:	0677      	lsls	r7, r6, #25
    43dc:	400f      	ands	r7, r1
    43de:	19d2      	adds	r2, r2, r7
    43e0:	6142      	str	r2, [r0, #20]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    43e2:	066a      	lsls	r2, r5, #25
    43e4:	400a      	ands	r2, r1
    43e6:	1076      	asrs	r6, r6, #1
    43e8:	1996      	adds	r6, r2, r6
    43ea:	6186      	str	r6, [r0, #24]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    43ec:	0662      	lsls	r2, r4, #25
    43ee:	400a      	ands	r2, r1
    43f0:	106d      	asrs	r5, r5, #1
    43f2:	1955      	adds	r5, r2, r5
    43f4:	61c5      	str	r5, [r0, #28]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    43f6:	065a      	lsls	r2, r3, #25
    43f8:	4011      	ands	r1, r2
    43fa:	1064      	asrs	r4, r4, #1
    43fc:	190c      	adds	r4, r1, r4
    43fe:	6204      	str	r4, [r0, #32]
    a[4] = ((sdigit_t)a[4] >> 1);
    4400:	105b      	asrs	r3, r3, #1
    4402:	6243      	str	r3, [r0, #36]	; 0x24
    vdiv1271(&a[0]);
    vdiv1271(&a[VWORDS_FIELD]);
}
    4404:	bc04      	pop	{r2}
    4406:	4690      	mov	r8, r2
    4408:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000440c <v2mod1271_incomplete>:


void v2mod1271_incomplete(uint32_t* a, uint32_t* c) 
{ // Reduction of GF(p^2) element
    440c:	b570      	push	{r4, r5, r6, lr}
    440e:	0004      	movs	r4, r0
    4410:	000d      	movs	r5, r1
    vmod1271_incomplete(&a[0], &c[0]);
    4412:	4e04      	ldr	r6, [pc, #16]	; (4424 <v2mod1271_incomplete+0x18>)
    4414:	47b0      	blx	r6
    vmod1271_incomplete(&a[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4416:	0029      	movs	r1, r5
    4418:	3114      	adds	r1, #20
    441a:	0020      	movs	r0, r4
    441c:	3014      	adds	r0, #20
    441e:	47b0      	blx	r6
}
    4420:	bd70      	pop	{r4, r5, r6, pc}
    4422:	46c0      	nop			; (mov r8, r8)
    4424:	0000368d 	.word	0x0000368d

00004428 <v2mod1271>:


void v2mod1271(uint32_t* a, uint32_t* c) 
{ // Reduction of GF(p^2) element
    4428:	b570      	push	{r4, r5, r6, lr}
    442a:	0004      	movs	r4, r0
    442c:	000d      	movs	r5, r1
    vmod1271(&a[0], &c[0]);
    442e:	4e04      	ldr	r6, [pc, #16]	; (4440 <v2mod1271+0x18>)
    4430:	47b0      	blx	r6
    vmod1271(&a[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4432:	0029      	movs	r1, r5
    4434:	3114      	adds	r1, #20
    4436:	0020      	movs	r0, r4
    4438:	3014      	adds	r0, #20
    443a:	47b0      	blx	r6
}
    443c:	bd70      	pop	{r4, r5, r6, pc}
    443e:	46c0      	nop			; (mov r8, r8)
    4440:	000036f5 	.word	0x000036f5

00004444 <v2mul1271>:


void v2mul1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // GF(p^2) multiplication, c = a*b in GF((2^127-1)^2) 
    4444:	b5f0      	push	{r4, r5, r6, r7, lr}
    4446:	b097      	sub	sp, #92	; 0x5c
    4448:	0006      	movs	r6, r0
    444a:	000d      	movs	r5, r1
    444c:	9201      	str	r2, [sp, #4]
    velm_t t1, t2, t3, t4;
    
    vmul1271(&a[0], &b[0], t1);                        // t1 = a0*b0
    444e:	ab11      	add	r3, sp, #68	; 0x44
    4450:	001a      	movs	r2, r3
    4452:	4c16      	ldr	r4, [pc, #88]	; (44ac <v2mul1271+0x68>)
    4454:	47a0      	blx	r4
    vmul1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], t2);  // t2 = a1*b1
    4456:	2314      	movs	r3, #20
    4458:	469c      	mov	ip, r3
    445a:	44b4      	add	ip, r6
    445c:	4663      	mov	r3, ip
    445e:	002f      	movs	r7, r5
    4460:	3714      	adds	r7, #20
    4462:	a90c      	add	r1, sp, #48	; 0x30
    4464:	000a      	movs	r2, r1
    4466:	0039      	movs	r1, r7
    4468:	9300      	str	r3, [sp, #0]
    446a:	4660      	mov	r0, ip
    446c:	47a0      	blx	r4
    vadd1271(&a[0], &a[VWORDS_FIELD], t3);             // t3 = a0+a1
    446e:	a807      	add	r0, sp, #28
    4470:	0002      	movs	r2, r0
    4472:	9900      	ldr	r1, [sp, #0]
    4474:	0030      	movs	r0, r6
    4476:	4e0e      	ldr	r6, [pc, #56]	; (44b0 <v2mul1271+0x6c>)
    4478:	47b0      	blx	r6
    vadd1271(&b[0], &b[VWORDS_FIELD], t4);             // t4 = b0+b1
    447a:	aa02      	add	r2, sp, #8
    447c:	0039      	movs	r1, r7
    447e:	0028      	movs	r0, r5
    4480:	47b0      	blx	r6
    vsub1271(t1, t2, &c[0]);                           // c[0] = a0*b0 - a1*b1
    4482:	9e01      	ldr	r6, [sp, #4]
    4484:	0032      	movs	r2, r6
    4486:	a90c      	add	r1, sp, #48	; 0x30
    4488:	a811      	add	r0, sp, #68	; 0x44
    448a:	4d0a      	ldr	r5, [pc, #40]	; (44b4 <v2mul1271+0x70>)
    448c:	47a8      	blx	r5
    vmul1271(t3, t4, t3);                              // t3 = (a0+a1)*(b0+b1)
    448e:	aa07      	add	r2, sp, #28
    4490:	a902      	add	r1, sp, #8
    4492:	0010      	movs	r0, r2
    4494:	47a0      	blx	r4
    vsub1271(t3, t1, t3);                              // t3 = (a0+a1)*(b0+b1) - a0*b0
    4496:	aa07      	add	r2, sp, #28
    4498:	a911      	add	r1, sp, #68	; 0x44
    449a:	0010      	movs	r0, r2
    449c:	47a8      	blx	r5
    vsub1271(t3, t2, &c[VWORDS_FIELD]);                // c[1] = (a0+a1)*(b0+b1) - a0*b0 - a1*b1
    449e:	0032      	movs	r2, r6
    44a0:	3214      	adds	r2, #20
    44a2:	a90c      	add	r1, sp, #48	; 0x30
    44a4:	a807      	add	r0, sp, #28
    44a6:	47a8      	blx	r5
}
    44a8:	b017      	add	sp, #92	; 0x5c
    44aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44ac:	0000321d 	.word	0x0000321d
    44b0:	00003187 	.word	0x00003187
    44b4:	000031c3 	.word	0x000031c3

000044b8 <v2sqr1271>:


void v2sqr1271(v2elm_t a, v2elm_t c)
{ // GF(p^2) squaring, c = a^2 in GF((2^127-1)^2) 
    44b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ba:	b091      	sub	sp, #68	; 0x44
    44bc:	0005      	movs	r5, r0
    44be:	000c      	movs	r4, r1
    velm_t t1, t2, t3;

    vadd1271(&a[0], &a[VWORDS_FIELD], t1);             // t1 = a0+a1 
    44c0:	0006      	movs	r6, r0
    44c2:	3614      	adds	r6, #20
    44c4:	aa0b      	add	r2, sp, #44	; 0x2c
    44c6:	0031      	movs	r1, r6
    44c8:	4f0b      	ldr	r7, [pc, #44]	; (44f8 <v2sqr1271+0x40>)
    44ca:	47b8      	blx	r7
    vsub1271(&a[0], &a[VWORDS_FIELD], t2);             // t2 = a0-a1
    44cc:	aa06      	add	r2, sp, #24
    44ce:	0031      	movs	r1, r6
    44d0:	0028      	movs	r0, r5
    44d2:	4b0a      	ldr	r3, [pc, #40]	; (44fc <v2sqr1271+0x44>)
    44d4:	4798      	blx	r3
    vmul1271(&a[0], &a[VWORDS_FIELD], t3);             // t3 = a0*a1
    44d6:	aa01      	add	r2, sp, #4
    44d8:	0031      	movs	r1, r6
    44da:	0028      	movs	r0, r5
    44dc:	4d08      	ldr	r5, [pc, #32]	; (4500 <v2sqr1271+0x48>)
    44de:	47a8      	blx	r5
    vmul1271(t1, t2, &c[0]);                           // c0 = (a0+a1)(a0-a1)
    44e0:	0022      	movs	r2, r4
    44e2:	a906      	add	r1, sp, #24
    44e4:	a80b      	add	r0, sp, #44	; 0x2c
    44e6:	47a8      	blx	r5
    vadd1271(t3, t3, &c[VWORDS_FIELD]);                // c1 = 2a0*a1
    44e8:	0022      	movs	r2, r4
    44ea:	3214      	adds	r2, #20
    44ec:	a901      	add	r1, sp, #4
    44ee:	0008      	movs	r0, r1
    44f0:	47b8      	blx	r7
}
    44f2:	b011      	add	sp, #68	; 0x44
    44f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44f6:	46c0      	nop			; (mov r8, r8)
    44f8:	00003187 	.word	0x00003187
    44fc:	000031c3 	.word	0x000031c3
    4500:	0000321d 	.word	0x0000321d

00004504 <v2inv1271>:


void v2inv1271(v2elm_t a)
{ // Vectorized GF(p^2) inversion, a = (a0-i*a1)/(a0^2+a1^2)
    4504:	b570      	push	{r4, r5, r6, lr}
    4506:	b08a      	sub	sp, #40	; 0x28
    4508:	0005      	movs	r5, r0
    velm_t t0, t1; 

    vsqr1271(&a[0], t0);                               // t0 = a0^2
    450a:	a905      	add	r1, sp, #20
    450c:	4e0e      	ldr	r6, [pc, #56]	; (4548 <v2inv1271+0x44>)
    450e:	47b0      	blx	r6
    vsqr1271(&a[VWORDS_FIELD], t1);                    // t1 = a1^2 
    4510:	002c      	movs	r4, r5
    4512:	3414      	adds	r4, #20
    4514:	4669      	mov	r1, sp
    4516:	0020      	movs	r0, r4
    4518:	47b0      	blx	r6
    vadd1271(t0, t1, t0);                              // t0 = a0^2+a1^2 
    451a:	aa05      	add	r2, sp, #20
    451c:	4669      	mov	r1, sp
    451e:	0010      	movs	r0, r2
    4520:	4b0a      	ldr	r3, [pc, #40]	; (454c <v2inv1271+0x48>)
    4522:	4798      	blx	r3
    vinv1271(t0);                                      // t0 = (a0^2+a1^2)^-1 
    4524:	a805      	add	r0, sp, #20
    4526:	4b0a      	ldr	r3, [pc, #40]	; (4550 <v2inv1271+0x4c>)
    4528:	4798      	blx	r3
    vneg1271(&a[VWORDS_FIELD]);                        // a = a0-i*a1 
    452a:	0020      	movs	r0, r4
    452c:	4b09      	ldr	r3, [pc, #36]	; (4554 <v2inv1271+0x50>)
    452e:	4798      	blx	r3
    vmul1271(&a[0], t0, &a[0]);
    4530:	002a      	movs	r2, r5
    4532:	a905      	add	r1, sp, #20
    4534:	0028      	movs	r0, r5
    4536:	4d08      	ldr	r5, [pc, #32]	; (4558 <v2inv1271+0x54>)
    4538:	47a8      	blx	r5
    vmul1271(&a[VWORDS_FIELD], t0, &a[VWORDS_FIELD]);  // a = (a0-i*a1)*(a0^2+a1^2)^-1
    453a:	0022      	movs	r2, r4
    453c:	a905      	add	r1, sp, #20
    453e:	0020      	movs	r0, r4
    4540:	47a8      	blx	r5
}
    4542:	b00a      	add	sp, #40	; 0x28
    4544:	bd70      	pop	{r4, r5, r6, pc}
    4546:	46c0      	nop			; (mov r8, r8)
    4548:	000034b1 	.word	0x000034b1
    454c:	00003187 	.word	0x00003187
    4550:	000038b9 	.word	0x000038b9
    4554:	000031f1 	.word	0x000031f1
    4558:	0000321d 	.word	0x0000321d

0000455c <clear_words>:
  // It has been tested with MSVS 2013 and GNU GCC 4.6.3, 4.7.3, 4.8.2 and 4.8.4. Users are responsible for verifying correctness with different compilers.  
  // See "Compliant Solution (C99)" at https://www.securecoding.cert.org/confluence/display/c/MSC06-C.+Beware+of+compiler+optimizations 
	unsigned int i;
	volatile unsigned int *v = mem;

	for (i = 0; i < nwords; i++)
    455c:	2900      	cmp	r1, #0
    455e:	d006      	beq.n	456e <clear_words+0x12>
    4560:	0003      	movs	r3, r0
    4562:	0089      	lsls	r1, r1, #2
    4564:	1840      	adds	r0, r0, r1
		v[i] = 0;
    4566:	2200      	movs	r2, #0
    4568:	c304      	stmia	r3!, {r2}
	for (i = 0; i < nwords; i++)
    456a:	4283      	cmp	r3, r0
    456c:	d1fc      	bne.n	4568 <clear_words+0xc>
}
    456e:	4770      	bx	lr

00004570 <eccnorm>:
	fp2copy1271((felm_t*)&GENERATOR_y, P->y);    // Y1
}


__inline void eccnorm(vpoint_extproj_t P, vpoint_t Q)
{ // Normalize a projective point (X1:Y1:Z1), including full reduction
    4570:	b5f0      	push	{r4, r5, r6, r7, lr}
    4572:	b083      	sub	sp, #12
    4574:	0004      	movs	r4, r0
    4576:	000d      	movs	r5, r1
  // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates    
  // Output: Q = (X1/Z1,Y1/Z1), corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    
    v2inv1271(P->z);                      // Z1 = Z1^-1
    4578:	0007      	movs	r7, r0
    457a:	3750      	adds	r7, #80	; 0x50
    457c:	0038      	movs	r0, r7
    457e:	4b0d      	ldr	r3, [pc, #52]	; (45b4 <eccnorm+0x44>)
    4580:	4798      	blx	r3
    v2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    4582:	002a      	movs	r2, r5
    4584:	0039      	movs	r1, r7
    4586:	0020      	movs	r0, r4
    4588:	4e0b      	ldr	r6, [pc, #44]	; (45b8 <eccnorm+0x48>)
    458a:	47b0      	blx	r6
    v2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    458c:	2328      	movs	r3, #40	; 0x28
    458e:	469c      	mov	ip, r3
    4590:	44ac      	add	ip, r5
    4592:	4663      	mov	r3, ip
    4594:	0020      	movs	r0, r4
    4596:	3028      	adds	r0, #40	; 0x28
    4598:	9301      	str	r3, [sp, #4]
    459a:	4662      	mov	r2, ip
    459c:	0039      	movs	r1, r7
    459e:	47b0      	blx	r6
    v2mod1271(Q->x, Q->x); 
    45a0:	0029      	movs	r1, r5
    45a2:	0028      	movs	r0, r5
    45a4:	4c05      	ldr	r4, [pc, #20]	; (45bc <eccnorm+0x4c>)
    45a6:	47a0      	blx	r4
    v2mod1271(Q->y, Q->y); 
    45a8:	9801      	ldr	r0, [sp, #4]
    45aa:	0001      	movs	r1, r0
    45ac:	47a0      	blx	r4
}
    45ae:	b003      	add	sp, #12
    45b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45b2:	46c0      	nop			; (mov r8, r8)
    45b4:	00004505 	.word	0x00004505
    45b8:	00004445 	.word	0x00004445
    45bc:	00004429 	.word	0x00004429

000045c0 <R1_to_R2>:


void R1_to_R2(vpoint_extproj_t P, vpoint_extproj_precomp_t Q) 
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT), where T = Ta*Tb
    45c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45c2:	b085      	sub	sp, #20
    45c4:	0005      	movs	r5, r0
    45c6:	000c      	movs	r4, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    
    v2add1271(P->ta, P->ta, Q->t2);              // T = 2*Ta
    45c8:	3078      	adds	r0, #120	; 0x78
    45ca:	2378      	movs	r3, #120	; 0x78
    45cc:	469c      	mov	ip, r3
    45ce:	448c      	add	ip, r1
    45d0:	4663      	mov	r3, ip
    vadd1271(&a[0], &b[0], &c[0]);
    45d2:	9301      	str	r3, [sp, #4]
    45d4:	4662      	mov	r2, ip
    45d6:	0001      	movs	r1, r0
    45d8:	4e20      	ldr	r6, [pc, #128]	; (465c <R1_to_R2+0x9c>)
    45da:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    45dc:	002a      	movs	r2, r5
    45de:	328c      	adds	r2, #140	; 0x8c
    45e0:	0010      	movs	r0, r2
    45e2:	0022      	movs	r2, r4
    45e4:	328c      	adds	r2, #140	; 0x8c
    45e6:	0001      	movs	r1, r0
    45e8:	47b0      	blx	r6
    v2add1271(P->x, P->y, Q->xy);                // QX = X+Y
    45ea:	002f      	movs	r7, r5
    45ec:	3728      	adds	r7, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    45ee:	0022      	movs	r2, r4
    45f0:	0039      	movs	r1, r7
    45f2:	0028      	movs	r0, r5
    45f4:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    45f6:	2214      	movs	r2, #20
    45f8:	4694      	mov	ip, r2
    45fa:	44ac      	add	ip, r5
    45fc:	4663      	mov	r3, ip
    45fe:	223c      	movs	r2, #60	; 0x3c
    4600:	4694      	mov	ip, r2
    4602:	44ac      	add	ip, r5
    4604:	4661      	mov	r1, ip
    4606:	0022      	movs	r2, r4
    4608:	3214      	adds	r2, #20
    460a:	9103      	str	r1, [sp, #12]
    460c:	9302      	str	r3, [sp, #8]
    460e:	0018      	movs	r0, r3
    4610:	47b0      	blx	r6
    v2sub1271(P->y, P->x, Q->yx);                // QY = Y-X 
    4612:	0022      	movs	r2, r4
    4614:	3228      	adds	r2, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    4616:	0029      	movs	r1, r5
    4618:	0038      	movs	r0, r7
    461a:	4f11      	ldr	r7, [pc, #68]	; (4660 <R1_to_R2+0xa0>)
    461c:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    461e:	0022      	movs	r2, r4
    4620:	323c      	adds	r2, #60	; 0x3c
    4622:	9902      	ldr	r1, [sp, #8]
    4624:	9803      	ldr	r0, [sp, #12]
    4626:	47b8      	blx	r7
    v2mul1271(Q->t2, P->tb, Q->t2);              // T = 2*T
    4628:	0029      	movs	r1, r5
    462a:	31a0      	adds	r1, #160	; 0xa0
    462c:	9801      	ldr	r0, [sp, #4]
    462e:	0002      	movs	r2, r0
    4630:	4f0c      	ldr	r7, [pc, #48]	; (4664 <R1_to_R2+0xa4>)
    4632:	47b8      	blx	r7
    v2add1271(P->z, P->z, Q->z2);                // QZ = 2*Z
    4634:	002a      	movs	r2, r5
    4636:	3250      	adds	r2, #80	; 0x50
    4638:	0010      	movs	r0, r2
    463a:	0022      	movs	r2, r4
    463c:	3250      	adds	r2, #80	; 0x50
    vadd1271(&a[0], &b[0], &c[0]);
    463e:	0001      	movs	r1, r0
    4640:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4642:	3564      	adds	r5, #100	; 0x64
    4644:	0028      	movs	r0, r5
    4646:	0022      	movs	r2, r4
    4648:	3264      	adds	r2, #100	; 0x64
    464a:	0029      	movs	r1, r5
    464c:	47b0      	blx	r6
    v2mul1271(Q->t2, (digit_t*)&PARAMETER_d, Q->t2);       // QT = 2d*T
    464e:	9801      	ldr	r0, [sp, #4]
    4650:	0002      	movs	r2, r0
    4652:	4905      	ldr	r1, [pc, #20]	; (4668 <R1_to_R2+0xa8>)
    4654:	47b8      	blx	r7
}
    4656:	b005      	add	sp, #20
    4658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    465a:	46c0      	nop			; (mov r8, r8)
    465c:	00003187 	.word	0x00003187
    4660:	000031c3 	.word	0x000031c3
    4664:	00004445 	.word	0x00004445
    4668:	0000ad70 	.word	0x0000ad70

0000466c <R1_to_R3>:


void R1_to_R3(vpoint_extproj_t P, vpoint_extproj_precomp_t Q)      
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T), where T = Ta*Tb 
    466c:	b5f0      	push	{r4, r5, r6, r7, lr}
    466e:	b083      	sub	sp, #12
    4670:	0004      	movs	r4, r0
    4672:	000d      	movs	r5, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,Z1,T1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates 
    
    v2add1271(P->x, P->y, Q->xy);            // XQ = (X1+Y1) 
    4674:	0007      	movs	r7, r0
    4676:	3728      	adds	r7, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    4678:	000a      	movs	r2, r1
    467a:	0039      	movs	r1, r7
    467c:	4e15      	ldr	r6, [pc, #84]	; (46d4 <R1_to_R3+0x68>)
    467e:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4680:	2314      	movs	r3, #20
    4682:	469c      	mov	ip, r3
    4684:	44a4      	add	ip, r4
    4686:	4663      	mov	r3, ip
    4688:	223c      	movs	r2, #60	; 0x3c
    468a:	4694      	mov	ip, r2
    468c:	44a4      	add	ip, r4
    468e:	4661      	mov	r1, ip
    4690:	002a      	movs	r2, r5
    4692:	3214      	adds	r2, #20
    4694:	9101      	str	r1, [sp, #4]
    4696:	9300      	str	r3, [sp, #0]
    4698:	0018      	movs	r0, r3
    469a:	47b0      	blx	r6
    v2sub1271(P->y, P->x, Q->yx);            // YQ = (Y1-X1) 
    469c:	002a      	movs	r2, r5
    469e:	3228      	adds	r2, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    46a0:	0021      	movs	r1, r4
    46a2:	0038      	movs	r0, r7
    46a4:	4f0c      	ldr	r7, [pc, #48]	; (46d8 <R1_to_R3+0x6c>)
    46a6:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    46a8:	002a      	movs	r2, r5
    46aa:	323c      	adds	r2, #60	; 0x3c
    46ac:	9900      	ldr	r1, [sp, #0]
    46ae:	9801      	ldr	r0, [sp, #4]
    46b0:	47b8      	blx	r7
    v2mul1271(P->ta, P->tb, Q->t2);          // TQ = T1
    46b2:	002a      	movs	r2, r5
    46b4:	3278      	adds	r2, #120	; 0x78
    46b6:	0021      	movs	r1, r4
    46b8:	31a0      	adds	r1, #160	; 0xa0
    46ba:	0020      	movs	r0, r4
    46bc:	3078      	adds	r0, #120	; 0x78
    46be:	4b07      	ldr	r3, [pc, #28]	; (46dc <R1_to_R3+0x70>)
    46c0:	4798      	blx	r3
    v2copy1271(P->z, Q->z2);                 // ZQ = Z1 
    46c2:	0029      	movs	r1, r5
    46c4:	3150      	adds	r1, #80	; 0x50
    46c6:	0020      	movs	r0, r4
    46c8:	3050      	adds	r0, #80	; 0x50
    46ca:	4b05      	ldr	r3, [pc, #20]	; (46e0 <R1_to_R3+0x74>)
    46cc:	4798      	blx	r3
}
    46ce:	b003      	add	sp, #12
    46d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	00003187 	.word	0x00003187
    46d8:	000031c3 	.word	0x000031c3
    46dc:	00004445 	.word	0x00004445
    46e0:	00003da7 	.word	0x00003da7

000046e4 <R2_to_R4>:


void R2_to_R4(vpoint_extproj_precomp_t P, vpoint_extproj_t Q)      
{ // Conversion from representation (X+Y,Y-X,2Z,2dT) to (2X,2Y,2Z,2dT) 
    46e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46e6:	b083      	sub	sp, #12
    46e8:	0006      	movs	r6, r0
    46ea:	000d      	movs	r5, r1
  // Input:  P = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (2X1,2Y1,2Z1) corresponding to (X1:Y1:Z1) in twisted Edwards coordinates 
    
    v2sub1271(P->xy, P->yx, Q->x);           // XQ = 2*X1
    46ec:	0007      	movs	r7, r0
    46ee:	3728      	adds	r7, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    46f0:	000a      	movs	r2, r1
    46f2:	0039      	movs	r1, r7
    46f4:	4c15      	ldr	r4, [pc, #84]	; (474c <R2_to_R4+0x68>)
    46f6:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    46f8:	2314      	movs	r3, #20
    46fa:	469c      	mov	ip, r3
    46fc:	44b4      	add	ip, r6
    46fe:	4663      	mov	r3, ip
    4700:	223c      	movs	r2, #60	; 0x3c
    4702:	4694      	mov	ip, r2
    4704:	44b4      	add	ip, r6
    4706:	4661      	mov	r1, ip
    4708:	002a      	movs	r2, r5
    470a:	3214      	adds	r2, #20
    470c:	9101      	str	r1, [sp, #4]
    470e:	9300      	str	r3, [sp, #0]
    4710:	0018      	movs	r0, r3
    4712:	47a0      	blx	r4
    v2add1271(P->xy, P->yx, Q->y);           // YQ = 2*Y1
    4714:	002c      	movs	r4, r5
    4716:	3428      	adds	r4, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    4718:	0022      	movs	r2, r4
    471a:	0039      	movs	r1, r7
    471c:	0030      	movs	r0, r6
    471e:	4f0c      	ldr	r7, [pc, #48]	; (4750 <R2_to_R4+0x6c>)
    4720:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4722:	002a      	movs	r2, r5
    4724:	323c      	adds	r2, #60	; 0x3c
    4726:	9901      	ldr	r1, [sp, #4]
    4728:	9800      	ldr	r0, [sp, #0]
    472a:	47b8      	blx	r7
    v2copy1271(P->z2, Q->z);                 // ZQ = 2*Z1
    472c:	0029      	movs	r1, r5
    472e:	3150      	adds	r1, #80	; 0x50
    4730:	0030      	movs	r0, r6
    4732:	3050      	adds	r0, #80	; 0x50
    4734:	4b07      	ldr	r3, [pc, #28]	; (4754 <R2_to_R4+0x70>)
    4736:	4798      	blx	r3
    v2mod1271_incomplete(Q->x, Q->x);   
    4738:	0029      	movs	r1, r5
    473a:	0028      	movs	r0, r5
    473c:	4d06      	ldr	r5, [pc, #24]	; (4758 <R2_to_R4+0x74>)
    473e:	47a8      	blx	r5
    v2mod1271_incomplete(Q->y, Q->y);   
    4740:	0021      	movs	r1, r4
    4742:	0020      	movs	r0, r4
    4744:	47a8      	blx	r5
}
    4746:	b003      	add	sp, #12
    4748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    474a:	46c0      	nop			; (mov r8, r8)
    474c:	000031c3 	.word	0x000031c3
    4750:	00003187 	.word	0x00003187
    4754:	00003da7 	.word	0x00003da7
    4758:	0000440d 	.word	0x0000440d

0000475c <eccdouble>:


void eccdouble(vpoint_extproj_t P)
{ // Point doubling 2P
    475c:	b5f0      	push	{r4, r5, r6, r7, lr}
    475e:	b099      	sub	sp, #100	; 0x64
    4760:	0007      	movs	r7, r0
  // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates
  // Output: 2P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    v2elm_t t1, t2; 
  
    v2sqr1271(P->x, t1);                              // t1 = X1^2 
    4762:	a90e      	add	r1, sp, #56	; 0x38
    4764:	4e2f      	ldr	r6, [pc, #188]	; (4824 <eccdouble+0xc8>)
    4766:	47b0      	blx	r6
    v2sqr1271(P->y, t2);                              // t2 = Y1^2
    4768:	2328      	movs	r3, #40	; 0x28
    476a:	469c      	mov	ip, r3
    476c:	44bc      	add	ip, r7
    476e:	4663      	mov	r3, ip
    4770:	4664      	mov	r4, ip
    4772:	a904      	add	r1, sp, #16
    4774:	0018      	movs	r0, r3
    4776:	47b0      	blx	r6
    vadd1271(&a[0], &b[0], &c[0]);
    4778:	003a      	movs	r2, r7
    477a:	9400      	str	r4, [sp, #0]
    477c:	0021      	movs	r1, r4
    477e:	0038      	movs	r0, r7
    4780:	4c29      	ldr	r4, [pc, #164]	; (4828 <eccdouble+0xcc>)
    4782:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4784:	0038      	movs	r0, r7
    4786:	3014      	adds	r0, #20
    4788:	0039      	movs	r1, r7
    478a:	313c      	adds	r1, #60	; 0x3c
    478c:	0002      	movs	r2, r0
    478e:	47a0      	blx	r4
    v2add1271(P->x, P->y, P->x);                      // X = X1+Y1
    v2add1271(t1, t2, P->tb);                         // Tbfinal = X1^2+Y1^2 
    4790:	23a0      	movs	r3, #160	; 0xa0
    4792:	469c      	mov	ip, r3
    4794:	44bc      	add	ip, r7
    4796:	4663      	mov	r3, ip
    vadd1271(&a[0], &b[0], &c[0]);
    4798:	9301      	str	r3, [sp, #4]
    479a:	4662      	mov	r2, ip
    479c:	a904      	add	r1, sp, #16
    479e:	a80e      	add	r0, sp, #56	; 0x38
    47a0:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    47a2:	21b4      	movs	r1, #180	; 0xb4
    47a4:	468c      	mov	ip, r1
    47a6:	44bc      	add	ip, r7
    47a8:	4661      	mov	r1, ip
    47aa:	9103      	str	r1, [sp, #12]
    47ac:	4662      	mov	r2, ip
    47ae:	a809      	add	r0, sp, #36	; 0x24
    47b0:	0001      	movs	r1, r0
    47b2:	a813      	add	r0, sp, #76	; 0x4c
    47b4:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    47b6:	aa0e      	add	r2, sp, #56	; 0x38
    47b8:	0011      	movs	r1, r2
    47ba:	a804      	add	r0, sp, #16
    47bc:	4d1b      	ldr	r5, [pc, #108]	; (482c <eccdouble+0xd0>)
    47be:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    47c0:	aa13      	add	r2, sp, #76	; 0x4c
    47c2:	0011      	movs	r1, r2
    47c4:	a809      	add	r0, sp, #36	; 0x24
    47c6:	47a8      	blx	r5
    v2sub1271(t2, t1, t1);                            // t1 = Y1^2-X1^2 
    v2sqr1271(P->z, t2);                              // t2 = Z1^2 
    47c8:	2050      	movs	r0, #80	; 0x50
    47ca:	4684      	mov	ip, r0
    47cc:	44bc      	add	ip, r7
    47ce:	4660      	mov	r0, ip
    47d0:	a904      	add	r1, sp, #16
    47d2:	9002      	str	r0, [sp, #8]
    47d4:	47b0      	blx	r6
    v2sqr1271(P->x, P->ta);                           // Ta = (X1+Y1)^2 
    47d6:	003c      	movs	r4, r7
    47d8:	3478      	adds	r4, #120	; 0x78
    47da:	0021      	movs	r1, r4
    47dc:	0038      	movs	r0, r7
    47de:	47b0      	blx	r6
    v2dblsub1271(t2, t1, t2);                         // t2 = 2Z1^2-(Y1^2-X1^2)
    47e0:	aa04      	add	r2, sp, #16
    47e2:	ae0e      	add	r6, sp, #56	; 0x38
    47e4:	0031      	movs	r1, r6
    47e6:	0010      	movs	r0, r2
    47e8:	4b11      	ldr	r3, [pc, #68]	; (4830 <eccdouble+0xd4>)
    47ea:	4798      	blx	r3
    vsub1271(&a[0], &b[0], &c[0]);
    47ec:	0022      	movs	r2, r4
    47ee:	9e01      	ldr	r6, [sp, #4]
    47f0:	0031      	movs	r1, r6
    47f2:	0020      	movs	r0, r4
    47f4:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    47f6:	003b      	movs	r3, r7
    47f8:	338c      	adds	r3, #140	; 0x8c
    47fa:	0018      	movs	r0, r3
    47fc:	001a      	movs	r2, r3
    47fe:	9903      	ldr	r1, [sp, #12]
    4800:	47a8      	blx	r5
    v2sub1271(P->ta, P->tb, P->ta);                   // Tafinal = 2X1*Y1 = (X1+Y1)^2-(X1^2+Y1^2)
    v2mul1271(t1, P->tb, P->y);                       // Yfinal = (X1^2+Y1^2)(Y1^2-X1^2) 
    4802:	9a00      	ldr	r2, [sp, #0]
    4804:	0031      	movs	r1, r6
    4806:	ab0e      	add	r3, sp, #56	; 0x38
    4808:	0018      	movs	r0, r3
    480a:	4d0a      	ldr	r5, [pc, #40]	; (4834 <eccdouble+0xd8>)
    480c:	47a8      	blx	r5
    v2mul1271(t2, P->ta, P->x);                       // Xfinal = 2X1*Y1*[2Z1^2-(Y1^2-X1^2)]
    480e:	003a      	movs	r2, r7
    4810:	0021      	movs	r1, r4
    4812:	a804      	add	r0, sp, #16
    4814:	47a8      	blx	r5
    v2mul1271(t1, t2, P->z);                          // Zfinal = (Y1^2-X1^2)[2Z1^2-(Y1^2-X1^2)] 
    4816:	9a02      	ldr	r2, [sp, #8]
    4818:	a904      	add	r1, sp, #16
    481a:	a80e      	add	r0, sp, #56	; 0x38
    481c:	47a8      	blx	r5
}
    481e:	b019      	add	sp, #100	; 0x64
    4820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4822:	46c0      	nop			; (mov r8, r8)
    4824:	000044b9 	.word	0x000044b9
    4828:	00003187 	.word	0x00003187
    482c:	000031c3 	.word	0x000031c3
    4830:	000042a5 	.word	0x000042a5
    4834:	00004445 	.word	0x00004445

00004838 <eccadd_core>:


__inline void eccadd_core(vpoint_extproj_precomp_t P, vpoint_extproj_precomp_t Q, vpoint_extproj_t R)      
{ // Basic point addition R = P+Q or R = P+P
    4838:	b5f0      	push	{r4, r5, r6, r7, lr}
    483a:	b09b      	sub	sp, #108	; 0x6c
    483c:	0006      	movs	r6, r0
    483e:	000f      	movs	r7, r1
    4840:	0015      	movs	r5, r2
  //         Q = (X2+Y2,Y2-X2,Z2,T2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates    
  // Output: R = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    v2elm_t t1, t2; 
          
    v2mul1271(P->t2, Q->t2, R->z);                            // Z = 2dT1*T2 
    4842:	2350      	movs	r3, #80	; 0x50
    4844:	469c      	mov	ip, r3
    4846:	4494      	add	ip, r2
    4848:	4663      	mov	r3, ip
    484a:	3178      	adds	r1, #120	; 0x78
    484c:	3078      	adds	r0, #120	; 0x78
    484e:	9301      	str	r3, [sp, #4]
    4850:	4662      	mov	r2, ip
    4852:	4c2f      	ldr	r4, [pc, #188]	; (4910 <eccadd_core+0xd8>)
    4854:	47a0      	blx	r4
    v2mul1271(P->z2, Q->z2, t1);                              // t1 = 2Z1*Z2 
    4856:	0039      	movs	r1, r7
    4858:	3150      	adds	r1, #80	; 0x50
    485a:	0030      	movs	r0, r6
    485c:	3050      	adds	r0, #80	; 0x50
    485e:	aa10      	add	r2, sp, #64	; 0x40
    4860:	47a0      	blx	r4
    v2mul1271(P->xy, Q->xy, R->x);                            // X = (X1+Y1)(X2+Y2)
    4862:	002a      	movs	r2, r5
    4864:	0039      	movs	r1, r7
    4866:	0030      	movs	r0, r6
    4868:	47a0      	blx	r4
    v2mul1271(P->yx, Q->yx, R->y);                            // Y = (Y1-X1)(Y2-X2)
    486a:	2228      	movs	r2, #40	; 0x28
    486c:	4694      	mov	ip, r2
    486e:	44ac      	add	ip, r5
    4870:	4662      	mov	r2, ip
    4872:	0039      	movs	r1, r7
    4874:	3128      	adds	r1, #40	; 0x28
    4876:	0030      	movs	r0, r6
    4878:	3028      	adds	r0, #40	; 0x28
    487a:	9202      	str	r2, [sp, #8]
    487c:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    487e:	aa06      	add	r2, sp, #24
    4880:	9f01      	ldr	r7, [sp, #4]
    4882:	0039      	movs	r1, r7
    4884:	a810      	add	r0, sp, #64	; 0x40
    4886:	4e23      	ldr	r6, [pc, #140]	; (4914 <eccadd_core+0xdc>)
    4888:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    488a:	2364      	movs	r3, #100	; 0x64
    488c:	469c      	mov	ip, r3
    488e:	44ac      	add	ip, r5
    4890:	4663      	mov	r3, ip
    4892:	aa0b      	add	r2, sp, #44	; 0x2c
    4894:	9303      	str	r3, [sp, #12]
    4896:	4661      	mov	r1, ip
    4898:	a815      	add	r0, sp, #84	; 0x54
    489a:	47b0      	blx	r6
    vadd1271(&a[0], &b[0], &c[0]);
    489c:	a810      	add	r0, sp, #64	; 0x40
    489e:	0002      	movs	r2, r0
    48a0:	9701      	str	r7, [sp, #4]
    48a2:	0039      	movs	r1, r7
    48a4:	4f1c      	ldr	r7, [pc, #112]	; (4918 <eccadd_core+0xe0>)
    48a6:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    48a8:	a815      	add	r0, sp, #84	; 0x54
    48aa:	0002      	movs	r2, r0
    48ac:	9903      	ldr	r1, [sp, #12]
    48ae:	47b8      	blx	r7
    v2sub1271(t1, R->z, t2);                                  // t2 = theta
    v2add1271(t1, R->z, t1);                                  // t1 = alpha
    v2sub1271(R->x, R->y, R->tb);                             // Tbfinal = beta
    48b0:	23a0      	movs	r3, #160	; 0xa0
    48b2:	469c      	mov	ip, r3
    48b4:	44ac      	add	ip, r5
    48b6:	4663      	mov	r3, ip
    vsub1271(&a[0], &b[0], &c[0]);
    48b8:	9303      	str	r3, [sp, #12]
    48ba:	4662      	mov	r2, ip
    48bc:	9902      	ldr	r1, [sp, #8]
    48be:	0028      	movs	r0, r5
    48c0:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    48c2:	2114      	movs	r1, #20
    48c4:	468c      	mov	ip, r1
    48c6:	44ac      	add	ip, r5
    48c8:	4660      	mov	r0, ip
    48ca:	213c      	movs	r1, #60	; 0x3c
    48cc:	468c      	mov	ip, r1
    48ce:	44ac      	add	ip, r5
    48d0:	4661      	mov	r1, ip
    48d2:	002a      	movs	r2, r5
    48d4:	32b4      	adds	r2, #180	; 0xb4
    48d6:	9105      	str	r1, [sp, #20]
    48d8:	9004      	str	r0, [sp, #16]
    48da:	47b0      	blx	r6
    v2add1271(R->x, R->y, R->ta);                             // Tafinal = omega
    48dc:	002e      	movs	r6, r5
    48de:	3678      	adds	r6, #120	; 0x78
    vadd1271(&a[0], &b[0], &c[0]);
    48e0:	0032      	movs	r2, r6
    48e2:	9902      	ldr	r1, [sp, #8]
    48e4:	0028      	movs	r0, r5
    48e6:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    48e8:	002a      	movs	r2, r5
    48ea:	328c      	adds	r2, #140	; 0x8c
    48ec:	9905      	ldr	r1, [sp, #20]
    48ee:	9804      	ldr	r0, [sp, #16]
    48f0:	47b8      	blx	r7
    v2mul1271(R->tb, t2, R->x);                               // Xfinal = beta*theta
    48f2:	002a      	movs	r2, r5
    48f4:	a906      	add	r1, sp, #24
    48f6:	9803      	ldr	r0, [sp, #12]
    48f8:	47a0      	blx	r4
    v2mul1271(t1, t2, R->z);                                  // Zfinal = theta*alpha
    48fa:	9a01      	ldr	r2, [sp, #4]
    48fc:	a906      	add	r1, sp, #24
    48fe:	a810      	add	r0, sp, #64	; 0x40
    4900:	47a0      	blx	r4
    v2mul1271(R->ta, t1, R->y);                               // Yfinal = alpha*omega
    4902:	9a02      	ldr	r2, [sp, #8]
    4904:	a910      	add	r1, sp, #64	; 0x40
    4906:	0030      	movs	r0, r6
    4908:	47a0      	blx	r4
}
    490a:	b01b      	add	sp, #108	; 0x6c
    490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    490e:	46c0      	nop			; (mov r8, r8)
    4910:	00004445 	.word	0x00004445
    4914:	000031c3 	.word	0x000031c3
    4918:	00003187 	.word	0x00003187

0000491c <eccadd>:


void eccadd(vpoint_extproj_precomp_t Q, vpoint_extproj_t P)      
{ // Complete point addition P = P+Q or P = P+P
    491c:	b5f0      	push	{r4, r5, r6, r7, lr}
    491e:	46de      	mov	lr, fp
    4920:	b500      	push	{lr}
    4922:	b0ae      	sub	sp, #184	; 0xb8
    4924:	0007      	movs	r7, r0
    4926:	000d      	movs	r5, r1
  // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal, 
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    vpoint_precomp_t R;
    v2elm_t t1; 

    v2add1271(P->y, P->x, R->xy);            // XR = (X1+Y1)
    4928:	2328      	movs	r3, #40	; 0x28
    492a:	469c      	mov	ip, r3
    492c:	448c      	add	ip, r1
    492e:	4663      	mov	r3, ip
    4930:	4666      	mov	r6, ip
    vadd1271(&a[0], &b[0], &c[0]);
    4932:	aa10      	add	r2, sp, #64	; 0x40
    4934:	0018      	movs	r0, r3
    4936:	4c3a      	ldr	r4, [pc, #232]	; (4a20 <eccadd+0x104>)
    4938:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    493a:	233c      	movs	r3, #60	; 0x3c
    493c:	469c      	mov	ip, r3
    493e:	44ac      	add	ip, r5
    4940:	4663      	mov	r3, ip
    4942:	2214      	movs	r2, #20
    4944:	4694      	mov	ip, r2
    4946:	44ac      	add	ip, r5
    4948:	4661      	mov	r1, ip
    494a:	aa15      	add	r2, sp, #84	; 0x54
    494c:	9102      	str	r1, [sp, #8]
    494e:	9301      	str	r3, [sp, #4]
    4950:	0018      	movs	r0, r3
    4952:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    4954:	aa1a      	add	r2, sp, #104	; 0x68
    4956:	0029      	movs	r1, r5
    4958:	9603      	str	r6, [sp, #12]
    495a:	0030      	movs	r0, r6
    495c:	4e31      	ldr	r6, [pc, #196]	; (4a24 <eccadd+0x108>)
    495e:	46b3      	mov	fp, r6
    4960:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4962:	aa1f      	add	r2, sp, #124	; 0x7c
    4964:	9902      	ldr	r1, [sp, #8]
    4966:	9801      	ldr	r0, [sp, #4]
    4968:	47b0      	blx	r6
    v2sub1271(P->y, P->x, R->yx);            // YR = (Y1-X1)
    v2mul1271(P->ta, P->tb, R->t2);          // TR = T1 
    496a:	2078      	movs	r0, #120	; 0x78
    496c:	4684      	mov	ip, r0
    496e:	44ac      	add	ip, r5
    4970:	4660      	mov	r0, ip
    4972:	22a0      	movs	r2, #160	; 0xa0
    4974:	4694      	mov	ip, r2
    4976:	44ac      	add	ip, r5
    4978:	4661      	mov	r1, ip
    497a:	aa24      	add	r2, sp, #144	; 0x90
    497c:	9105      	str	r1, [sp, #20]
    497e:	9004      	str	r0, [sp, #16]
    4980:	4e29      	ldr	r6, [pc, #164]	; (4a28 <eccadd+0x10c>)
    4982:	47b0      	blx	r6
    v2mul1271(Q->z2, P->z, t1);              // t1 = 2Z1*Z2      
    4984:	2350      	movs	r3, #80	; 0x50
    4986:	469c      	mov	ip, r3
    4988:	44ac      	add	ip, r5
    498a:	4663      	mov	r3, ip
    498c:	0038      	movs	r0, r7
    498e:	3050      	adds	r0, #80	; 0x50
    4990:	aa06      	add	r2, sp, #24
    4992:	9300      	str	r3, [sp, #0]
    4994:	4661      	mov	r1, ip
    4996:	47b0      	blx	r6
    v2mul1271(Q->t2, R->t2, P->z);           // Z = 2dT1*T2 
    4998:	0038      	movs	r0, r7
    499a:	3078      	adds	r0, #120	; 0x78
    499c:	9a00      	ldr	r2, [sp, #0]
    499e:	a924      	add	r1, sp, #144	; 0x90
    49a0:	47b0      	blx	r6
    v2mul1271(Q->xy, R->xy, P->x);           // X = (X1+Y1)(X2+Y2)
    49a2:	002a      	movs	r2, r5
    49a4:	a910      	add	r1, sp, #64	; 0x40
    49a6:	0038      	movs	r0, r7
    49a8:	47b0      	blx	r6
    v2mul1271(Q->yx, R->yx, P->y);           // Y = (Y1-X1)(Y2-X2)
    49aa:	3728      	adds	r7, #40	; 0x28
    49ac:	0038      	movs	r0, r7
    49ae:	9a03      	ldr	r2, [sp, #12]
    49b0:	a91a      	add	r1, sp, #104	; 0x68
    49b2:	47b0      	blx	r6
    vsub1271(&a[0], &b[0], &c[0]);
    49b4:	aa24      	add	r2, sp, #144	; 0x90
    49b6:	9900      	ldr	r1, [sp, #0]
    49b8:	a806      	add	r0, sp, #24
    49ba:	47d8      	blx	fp
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    49bc:	002f      	movs	r7, r5
    49be:	3764      	adds	r7, #100	; 0x64
    49c0:	aa29      	add	r2, sp, #164	; 0xa4
    49c2:	0039      	movs	r1, r7
    49c4:	a80b      	add	r0, sp, #44	; 0x2c
    49c6:	47d8      	blx	fp
    vadd1271(&a[0], &b[0], &c[0]);
    49c8:	aa06      	add	r2, sp, #24
    49ca:	9900      	ldr	r1, [sp, #0]
    49cc:	0010      	movs	r0, r2
    49ce:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    49d0:	aa0b      	add	r2, sp, #44	; 0x2c
    49d2:	0039      	movs	r1, r7
    49d4:	0010      	movs	r0, r2
    49d6:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    49d8:	9a05      	ldr	r2, [sp, #20]
    49da:	9f03      	ldr	r7, [sp, #12]
    49dc:	0039      	movs	r1, r7
    49de:	0028      	movs	r0, r5
    49e0:	47d8      	blx	fp
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    49e2:	002a      	movs	r2, r5
    49e4:	32b4      	adds	r2, #180	; 0xb4
    49e6:	9901      	ldr	r1, [sp, #4]
    49e8:	9802      	ldr	r0, [sp, #8]
    49ea:	47d8      	blx	fp
    vadd1271(&a[0], &b[0], &c[0]);
    49ec:	9a04      	ldr	r2, [sp, #16]
    49ee:	0039      	movs	r1, r7
    49f0:	0028      	movs	r0, r5
    49f2:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    49f4:	002a      	movs	r2, r5
    49f6:	328c      	adds	r2, #140	; 0x8c
    49f8:	9901      	ldr	r1, [sp, #4]
    49fa:	9802      	ldr	r0, [sp, #8]
    49fc:	47a0      	blx	r4
    v2sub1271(t1, P->z, R->t2);              // TR = theta
    v2add1271(t1, P->z, t1);                 // t1 = alpha
    v2sub1271(P->x, P->y, P->tb);            // Tbfinal = beta
    v2add1271(P->x, P->y, P->ta);            // Tafinal = omega
    v2mul1271(P->tb, R->t2, P->x);           // Xfinal = beta*theta
    49fe:	002a      	movs	r2, r5
    4a00:	a924      	add	r1, sp, #144	; 0x90
    4a02:	9805      	ldr	r0, [sp, #20]
    4a04:	47b0      	blx	r6
    v2mul1271(t1, R->t2, P->z);              // Zfinal = theta*alpha
    4a06:	9a00      	ldr	r2, [sp, #0]
    4a08:	a924      	add	r1, sp, #144	; 0x90
    4a0a:	a806      	add	r0, sp, #24
    4a0c:	47b0      	blx	r6
    v2mul1271(P->ta, t1, P->y);              // Yfinal = alpha*omega
    4a0e:	003a      	movs	r2, r7
    4a10:	a906      	add	r1, sp, #24
    4a12:	9804      	ldr	r0, [sp, #16]
    4a14:	47b0      	blx	r6
}
    4a16:	b02e      	add	sp, #184	; 0xb8
    4a18:	bc04      	pop	{r2}
    4a1a:	4693      	mov	fp, r2
    4a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	00003187 	.word	0x00003187
    4a24:	000031c3 	.word	0x000031c3
    4a28:	00004445 	.word	0x00004445

00004a2c <point_setup>:


void point_setup(point_t P, vpoint_extproj_t Q)
{ // Point conversion to vectorized representation (X,Y,Z,Ta,Tb) 
    4a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a2e:	0005      	movs	r5, r0
    4a30:	000c      	movs	r4, r1
  // Input: P = (x,y) in affine coordinates
  // Output: P = (X,Y,1,Ta,Tb), where Ta=X, Tb=Y and T=Ta*Tb, corresponding to (X:Y:Z:T) in extended twisted Edwards coordinates

    from_std_to_ext(P->x, Q->x);
    4a32:	4f0c      	ldr	r7, [pc, #48]	; (4a64 <point_setup+0x38>)
    4a34:	47b8      	blx	r7
    from_std_to_ext(P->y, Q->y);
    4a36:	0026      	movs	r6, r4
    4a38:	3628      	adds	r6, #40	; 0x28
    4a3a:	0028      	movs	r0, r5
    4a3c:	3020      	adds	r0, #32
    4a3e:	0031      	movs	r1, r6
    4a40:	47b8      	blx	r7
    v2copy1271(Q->x, Q->ta);              // Ta = X1
    4a42:	0021      	movs	r1, r4
    4a44:	3178      	adds	r1, #120	; 0x78
    4a46:	0020      	movs	r0, r4
    4a48:	4d07      	ldr	r5, [pc, #28]	; (4a68 <point_setup+0x3c>)
    4a4a:	47a8      	blx	r5
    v2copy1271(Q->y, Q->tb);              // Tb = Y1
    4a4c:	0021      	movs	r1, r4
    4a4e:	31a0      	adds	r1, #160	; 0xa0
    4a50:	0030      	movs	r0, r6
    4a52:	47a8      	blx	r5
    v2zero1271(Q->z); Q->z[0]=1;          // Z1 = 1
    4a54:	0020      	movs	r0, r4
    4a56:	3050      	adds	r0, #80	; 0x50
    4a58:	4b04      	ldr	r3, [pc, #16]	; (4a6c <point_setup+0x40>)
    4a5a:	4798      	blx	r3
    4a5c:	2301      	movs	r3, #1
    4a5e:	6523      	str	r3, [r4, #80]	; 0x50
}
    4a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a62:	46c0      	nop			; (mov r8, r8)
    4a64:	00003a01 	.word	0x00003a01
    4a68:	00003da7 	.word	0x00003da7
    4a6c:	0000424d 	.word	0x0000424d

00004a70 <ecc_point_validate>:


bool ecc_point_validate(vpoint_extproj_t P)
{ // Point validation: check if point lies on the curve
    4a70:	b530      	push	{r4, r5, lr}
    4a72:	b09f      	sub	sp, #124	; 0x7c
    4a74:	0005      	movs	r5, r0
  // Output: TRUE (1) if point lies on the curve E: -x^2+y^2-1-dx^2*y^2 = 0, FALSE (0) otherwise.
  // SECURITY NOTE: this function does not run in constant time (input point P is assumed to be public).
    v2elm_t t1, t2, t3;
    unsigned int i;

    v2sqr1271(P->y, t1);  
    4a76:	3028      	adds	r0, #40	; 0x28
    4a78:	a914      	add	r1, sp, #80	; 0x50
    4a7a:	4c21      	ldr	r4, [pc, #132]	; (4b00 <ecc_point_validate+0x90>)
    4a7c:	47a0      	blx	r4
    v2sqr1271(P->x, t2);
    4a7e:	a90a      	add	r1, sp, #40	; 0x28
    4a80:	0028      	movs	r0, r5
    4a82:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    4a84:	466a      	mov	r2, sp
    4a86:	a90a      	add	r1, sp, #40	; 0x28
    4a88:	a814      	add	r0, sp, #80	; 0x50
    4a8a:	4c1e      	ldr	r4, [pc, #120]	; (4b04 <ecc_point_validate+0x94>)
    4a8c:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4a8e:	aa05      	add	r2, sp, #20
    4a90:	a90f      	add	r1, sp, #60	; 0x3c
    4a92:	a819      	add	r0, sp, #100	; 0x64
    4a94:	47a0      	blx	r4
    v2sub1271(t1, t2, t3);                    // -x^2 + y^2 
    v2mul1271(t1, t2, t1);                    // x^2*y^2
    4a96:	aa14      	add	r2, sp, #80	; 0x50
    4a98:	a90a      	add	r1, sp, #40	; 0x28
    4a9a:	0010      	movs	r0, r2
    4a9c:	4d1a      	ldr	r5, [pc, #104]	; (4b08 <ecc_point_validate+0x98>)
    4a9e:	47a8      	blx	r5
    v2mul1271((digit_t*)&PARAMETER_d, t1, t2);          // dx^2*y^2
    4aa0:	aa0a      	add	r2, sp, #40	; 0x28
    4aa2:	a914      	add	r1, sp, #80	; 0x50
    4aa4:	4819      	ldr	r0, [pc, #100]	; (4b0c <ecc_point_validate+0x9c>)
    4aa6:	47a8      	blx	r5
    v2zero1271(t1);  t1[0] = 1;               // t1 = 1
    4aa8:	a814      	add	r0, sp, #80	; 0x50
    4aaa:	4b19      	ldr	r3, [pc, #100]	; (4b10 <ecc_point_validate+0xa0>)
    4aac:	4798      	blx	r3
    4aae:	2301      	movs	r3, #1
    4ab0:	9314      	str	r3, [sp, #80]	; 0x50
    vadd1271(&a[0], &b[0], &c[0]);
    4ab2:	aa0a      	add	r2, sp, #40	; 0x28
    4ab4:	a914      	add	r1, sp, #80	; 0x50
    4ab6:	0010      	movs	r0, r2
    4ab8:	4d16      	ldr	r5, [pc, #88]	; (4b14 <ecc_point_validate+0xa4>)
    4aba:	47a8      	blx	r5
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4abc:	aa0f      	add	r2, sp, #60	; 0x3c
    4abe:	a919      	add	r1, sp, #100	; 0x64
    4ac0:	0010      	movs	r0, r2
    4ac2:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    4ac4:	aa14      	add	r2, sp, #80	; 0x50
    4ac6:	a90a      	add	r1, sp, #40	; 0x28
    4ac8:	4668      	mov	r0, sp
    4aca:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4acc:	aa19      	add	r2, sp, #100	; 0x64
    4ace:	a90f      	add	r1, sp, #60	; 0x3c
    4ad0:	a805      	add	r0, sp, #20
    4ad2:	47a0      	blx	r4
    v2add1271(t2, t1, t2);                    // 1 + dx^2*y^2
    v2sub1271(t3, t2, t1);                    // -x^2 + y^2 - 1 - dx^2*y^2
    v2mod1271(t1, t1);
    4ad4:	a914      	add	r1, sp, #80	; 0x50
    4ad6:	0008      	movs	r0, r1
    4ad8:	4b0f      	ldr	r3, [pc, #60]	; (4b18 <ecc_point_validate+0xa8>)
    4ada:	4798      	blx	r3
    
    for (i = 0; i < 2*VWORDS_FIELD-1; i++) {
        if (t1[i] != 0) return false;
    4adc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d10a      	bne.n	4af8 <ecc_point_validate+0x88>
    4ae2:	ab14      	add	r3, sp, #80	; 0x50
    4ae4:	aa1c      	add	r2, sp, #112	; 0x70
    4ae6:	6859      	ldr	r1, [r3, #4]
    4ae8:	2900      	cmp	r1, #0
    4aea:	d107      	bne.n	4afc <ecc_point_validate+0x8c>
    4aec:	3304      	adds	r3, #4
    for (i = 0; i < 2*VWORDS_FIELD-1; i++) {
    4aee:	4293      	cmp	r3, r2
    4af0:	d1f9      	bne.n	4ae6 <ecc_point_validate+0x76>
    }
    return true; 
    4af2:	2001      	movs	r0, #1
}
    4af4:	b01f      	add	sp, #124	; 0x7c
    4af6:	bd30      	pop	{r4, r5, pc}
        if (t1[i] != 0) return false;
    4af8:	2000      	movs	r0, #0
    4afa:	e7fb      	b.n	4af4 <ecc_point_validate+0x84>
    4afc:	2000      	movs	r0, #0
    4afe:	e7f9      	b.n	4af4 <ecc_point_validate+0x84>
    4b00:	000044b9 	.word	0x000044b9
    4b04:	000031c3 	.word	0x000031c3
    4b08:	00004445 	.word	0x00004445
    4b0c:	0000ad70 	.word	0x0000ad70
    4b10:	0000424d 	.word	0x0000424d
    4b14:	00003187 	.word	0x00003187
    4b18:	00004429 	.word	0x00004429

00004b1c <mLSB_set_recode>:
    return true;
}


void mLSB_set_recode(uint64_t* scalar, unsigned int *digits)
{ // Computes the modified LSB-set representation of a scalar
    4b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b1e:	46de      	mov	lr, fp
    4b20:	4657      	mov	r7, sl
    4b22:	464e      	mov	r6, r9
    4b24:	4645      	mov	r5, r8
    4b26:	b5e0      	push	{r5, r6, r7, lr}
    4b28:	b087      	sub	sp, #28
    4b2a:	0005      	movs	r5, r0
    4b2c:	468b      	mov	fp, r1
  //         where l = d*w and d = ceil(bitlength(order)/(w*v))*v. The values v and w are fixed and must be in the range [1, 10] (see FourQ.h); they determine the size 
  //         of the precomputed table "FIXED_BASE_TABLE" used by ecc_mul_fixed(). 
    unsigned int i, j, d = D_FIXEDBASE, l = L_FIXEDBASE;
    uint64_t temp, carry;
    
    digits[d-1] = 0;
    4b2e:	2200      	movs	r2, #0
    4b30:	23c4      	movs	r3, #196	; 0xc4
    4b32:	50ca      	str	r2, [r1, r3]
    4b34:	9004      	str	r0, [sp, #16]
    4b36:	0004      	movs	r4, r0
    4b38:	3418      	adds	r4, #24
    4b3a:	0003      	movs	r3, r0

    // Shift scalar to the right by 1   
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
        SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    4b3c:	685a      	ldr	r2, [r3, #4]
    4b3e:	07d0      	lsls	r0, r2, #31
    4b40:	6819      	ldr	r1, [r3, #0]
    4b42:	0849      	lsrs	r1, r1, #1
    4b44:	4301      	orrs	r1, r0
    4b46:	0852      	lsrs	r2, r2, #1
    4b48:	6898      	ldr	r0, [r3, #8]
    4b4a:	07c0      	lsls	r0, r0, #31
    4b4c:	6019      	str	r1, [r3, #0]
    4b4e:	4042      	eors	r2, r0
    4b50:	605a      	str	r2, [r3, #4]
    4b52:	3308      	adds	r3, #8
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    4b54:	42a3      	cmp	r3, r4
    4b56:	d1f1      	bne.n	4b3c <mLSB_set_recode+0x20>
    4b58:	4699      	mov	r9, r3
    }
    scalar[NWORDS64_ORDER-1] >>= 1;
    4b5a:	69ea      	ldr	r2, [r5, #28]
    4b5c:	07d1      	lsls	r1, r2, #31
    4b5e:	69ab      	ldr	r3, [r5, #24]
    4b60:	085b      	lsrs	r3, r3, #1
    4b62:	430b      	orrs	r3, r1
    4b64:	61ab      	str	r3, [r5, #24]
    4b66:	0852      	lsrs	r2, r2, #1
    4b68:	61ea      	str	r2, [r5, #28]
    4b6a:	4659      	mov	r1, fp
    4b6c:	23c4      	movs	r3, #196	; 0xc4
    4b6e:	445b      	add	r3, fp
    4b70:	4698      	mov	r8, r3

    for (i = 0; i < (d-1); i++)
    {
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    4b72:	2301      	movs	r3, #1
    4b74:	469c      	mov	ip, r3
    4b76:	9600      	str	r6, [sp, #0]
    4b78:	9701      	str	r7, [sp, #4]
    4b7a:	4648      	mov	r0, r9
    4b7c:	e00a      	b.n	4b94 <mLSB_set_recode+0x78>
                                                          // if scalar_(i+1) = 0 then digit_i = -1 (negative), else if scalar_(i+1) = 1 then digit_i = 0 (positive)
        // Shift scalar to the right by 1   
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    4b7e:	69ef      	ldr	r7, [r5, #28]
    4b80:	07fb      	lsls	r3, r7, #31
    4b82:	69aa      	ldr	r2, [r5, #24]
    4b84:	0852      	lsrs	r2, r2, #1
    4b86:	431a      	orrs	r2, r3
    4b88:	61aa      	str	r2, [r5, #24]
    4b8a:	087b      	lsrs	r3, r7, #1
    4b8c:	61eb      	str	r3, [r5, #28]
    4b8e:	3104      	adds	r1, #4
    for (i = 0; i < (d-1); i++)
    4b90:	4541      	cmp	r1, r8
    4b92:	d014      	beq.n	4bbe <mLSB_set_recode+0xa2>
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    4b94:	682b      	ldr	r3, [r5, #0]
    4b96:	4662      	mov	r2, ip
    4b98:	4013      	ands	r3, r2
    4b9a:	3b01      	subs	r3, #1
    4b9c:	600b      	str	r3, [r1, #0]
    4b9e:	9c04      	ldr	r4, [sp, #16]
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    4ba0:	6863      	ldr	r3, [r4, #4]
    4ba2:	07de      	lsls	r6, r3, #31
    4ba4:	6822      	ldr	r2, [r4, #0]
    4ba6:	0852      	lsrs	r2, r2, #1
    4ba8:	4332      	orrs	r2, r6
    4baa:	085b      	lsrs	r3, r3, #1
    4bac:	68a6      	ldr	r6, [r4, #8]
    4bae:	07f6      	lsls	r6, r6, #31
    4bb0:	6022      	str	r2, [r4, #0]
    4bb2:	4073      	eors	r3, r6
    4bb4:	6063      	str	r3, [r4, #4]
    4bb6:	3408      	adds	r4, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    4bb8:	4284      	cmp	r4, r0
    4bba:	d1f1      	bne.n	4ba0 <mLSB_set_recode+0x84>
    4bbc:	e7df      	b.n	4b7e <mLSB_set_recode+0x62>
    4bbe:	9e00      	ldr	r6, [sp, #0]
    4bc0:	9f01      	ldr	r7, [sp, #4]
    4bc2:	23c8      	movs	r3, #200	; 0xc8
    4bc4:	445b      	add	r3, fp
    4bc6:	4698      	mov	r8, r3
    for (i = 0; i < (d-1); i++)
    4bc8:	2332      	movs	r3, #50	; 0x32
    4bca:	2220      	movs	r2, #32
    4bcc:	4691      	mov	r9, r2
    4bce:	44a9      	add	r9, r5
    4bd0:	46a2      	mov	sl, r4
    4bd2:	4644      	mov	r4, r8
    4bd4:	4698      	mov	r8, r3
    4bd6:	465b      	mov	r3, fp
    4bd8:	9305      	str	r3, [sp, #20]
    4bda:	e007      	b.n	4bec <mLSB_set_recode+0xd0>
    4bdc:	4681      	mov	r9, r0
    } 

    for (i = d; i < l; i++)
    4bde:	2301      	movs	r3, #1
    4be0:	469c      	mov	ip, r3
    4be2:	44e0      	add	r8, ip
    4be4:	3404      	adds	r4, #4
    4be6:	4643      	mov	r3, r8
    4be8:	2bfa      	cmp	r3, #250	; 0xfa
    4bea:	d056      	beq.n	4c9a <mLSB_set_recode+0x17e>
    4bec:	46a3      	mov	fp, r4
    {
        digits[i] = (unsigned int)(scalar[0] & 1);        // digits_i = k mod 2. Sign is determined by the "sign" row
    4bee:	2301      	movs	r3, #1
    4bf0:	682a      	ldr	r2, [r5, #0]
    4bf2:	4013      	ands	r3, r2
    4bf4:	6023      	str	r3, [r4, #0]
    4bf6:	9904      	ldr	r1, [sp, #16]
    4bf8:	9600      	str	r6, [sp, #0]
    4bfa:	9701      	str	r7, [sp, #4]
    4bfc:	4657      	mov	r7, sl

        // Shift scalar to the right by 1  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    4bfe:	684b      	ldr	r3, [r1, #4]
    4c00:	07d8      	lsls	r0, r3, #31
    4c02:	680a      	ldr	r2, [r1, #0]
    4c04:	0852      	lsrs	r2, r2, #1
    4c06:	4302      	orrs	r2, r0
    4c08:	085b      	lsrs	r3, r3, #1
    4c0a:	6888      	ldr	r0, [r1, #8]
    4c0c:	07c0      	lsls	r0, r0, #31
    4c0e:	600a      	str	r2, [r1, #0]
    4c10:	4043      	eors	r3, r0
    4c12:	604b      	str	r3, [r1, #4]
    4c14:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    4c16:	42b9      	cmp	r1, r7
    4c18:	d1f1      	bne.n	4bfe <mLSB_set_recode+0xe2>
    4c1a:	46ba      	mov	sl, r7
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    4c1c:	69ea      	ldr	r2, [r5, #28]
    4c1e:	07d1      	lsls	r1, r2, #31
    4c20:	69ab      	ldr	r3, [r5, #24]
    4c22:	085b      	lsrs	r3, r3, #1
    4c24:	430b      	orrs	r3, r1
    4c26:	61ab      	str	r3, [r5, #24]
    4c28:	0852      	lsrs	r2, r2, #1
    4c2a:	61ea      	str	r2, [r5, #28]

        temp = (0 - digits[i-(i/d)*d]) & digits[i];       // if (digits_i=0 \/ 1) then temp = 0, else if (digits_i=-1) then temp = 1 
    4c2c:	2132      	movs	r1, #50	; 0x32
    4c2e:	4640      	mov	r0, r8
    4c30:	4b1d      	ldr	r3, [pc, #116]	; (4ca8 <mLSB_set_recode+0x18c>)
    4c32:	4798      	blx	r3
    4c34:	0089      	lsls	r1, r1, #2
    4c36:	9b05      	ldr	r3, [sp, #20]
    4c38:	58cb      	ldr	r3, [r1, r3]
    4c3a:	425b      	negs	r3, r3
    4c3c:	465a      	mov	r2, fp
    4c3e:	6810      	ldr	r0, [r2, #0]
    4c40:	4018      	ands	r0, r3
    4c42:	4684      	mov	ip, r0
    4c44:	9002      	str	r0, [sp, #8]
    4c46:	2300      	movs	r3, #0
    4c48:	9303      	str	r3, [sp, #12]
            
        // floor(scalar/2) + temp
        scalar[0] = scalar[0] + temp;
    4c4a:	9a02      	ldr	r2, [sp, #8]
    4c4c:	9b03      	ldr	r3, [sp, #12]
    4c4e:	6828      	ldr	r0, [r5, #0]
    4c50:	6869      	ldr	r1, [r5, #4]
    4c52:	1812      	adds	r2, r2, r0
    4c54:	414b      	adcs	r3, r1
    4c56:	0029      	movs	r1, r5
    4c58:	c10c      	stmia	r1!, {r2, r3}
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    4c5a:	9200      	str	r2, [sp, #0]
    4c5c:	9301      	str	r3, [sp, #4]
    4c5e:	4253      	negs	r3, r2
    4c60:	9a00      	ldr	r2, [sp, #0]
    4c62:	4313      	orrs	r3, r2
    4c64:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    4c66:	2201      	movs	r2, #1
    4c68:	4053      	eors	r3, r2
        carry = (temp & (uint64_t)is_digit_zero_ct((digit_t)scalar[0]));       // carry = (scalar[0] < temp);
    4c6a:	4660      	mov	r0, ip
    4c6c:	4018      	ands	r0, r3
    4c6e:	0006      	movs	r6, r0
    4c70:	2700      	movs	r7, #0
    4c72:	4648      	mov	r0, r9
        for (j = 1; j < NWORDS64_ORDER; j++)
        {
            scalar[j] = scalar[j] + carry; 
    4c74:	680a      	ldr	r2, [r1, #0]
    4c76:	684b      	ldr	r3, [r1, #4]
    4c78:	1992      	adds	r2, r2, r6
    4c7a:	417b      	adcs	r3, r7
    4c7c:	c10c      	stmia	r1!, {r2, r3}
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    4c7e:	9200      	str	r2, [sp, #0]
    4c80:	9301      	str	r3, [sp, #4]
    4c82:	4253      	negs	r3, r2
    4c84:	9a00      	ldr	r2, [sp, #0]
    4c86:	4313      	orrs	r3, r2
    4c88:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    4c8a:	2201      	movs	r2, #1
    4c8c:	4053      	eors	r3, r2
            carry = (carry & (uint64_t)is_digit_zero_ct((digit_t)scalar[j]));  // carry = (scalar[j] < temp);
    4c8e:	4033      	ands	r3, r6
    4c90:	001e      	movs	r6, r3
    4c92:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    4c94:	4281      	cmp	r1, r0
    4c96:	d1ed      	bne.n	4c74 <mLSB_set_recode+0x158>
    4c98:	e7a0      	b.n	4bdc <mLSB_set_recode+0xc0>
        }
    } 
    return;              
}
    4c9a:	b007      	add	sp, #28
    4c9c:	bc3c      	pop	{r2, r3, r4, r5}
    4c9e:	4690      	mov	r8, r2
    4ca0:	4699      	mov	r9, r3
    4ca2:	46a2      	mov	sl, r4
    4ca4:	46ab      	mov	fp, r5
    4ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ca8:	000065b1 	.word	0x000065b1

00004cac <ecc_mul_fixed>:
{ // Fixed-base scalar multiplication Q = k*G, where G is the generator. FIXED_BASE_TABLE stores v*2^(w-1) = 80 multiples of G.
    4cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cae:	46de      	mov	lr, fp
    4cb0:	4657      	mov	r7, sl
    4cb2:	464e      	mov	r6, r9
    4cb4:	4645      	mov	r5, r8
    4cb6:	b5e0      	push	{r5, r6, r7, lr}
    4cb8:	4cce      	ldr	r4, [pc, #824]	; (4ff4 <ecc_mul_fixed+0x348>)
    4cba:	44a5      	add	sp, r4
    4cbc:	0005      	movs	r5, r0
    4cbe:	9103      	str	r1, [sp, #12]
    unsigned int digit = 0, digits[NBITS_ORDER_PLUS_ONE+(W_FIXEDBASE*V_FIXEDBASE)-1] = {0}; 
    4cc0:	ac85      	add	r4, sp, #532	; 0x214
    4cc2:	4acd      	ldr	r2, [pc, #820]	; (4ff8 <ecc_mul_fixed+0x34c>)
    4cc4:	2100      	movs	r1, #0
    4cc6:	0020      	movs	r0, r4
    4cc8:	4bcc      	ldr	r3, [pc, #816]	; (4ffc <ecc_mul_fixed+0x350>)
    4cca:	4798      	blx	r3
	modulo_order(k, temp);                                      // temp = k mod (order) 
    4ccc:	a97d      	add	r1, sp, #500	; 0x1f4
    4cce:	0028      	movs	r0, r5
    4cd0:	4bcb      	ldr	r3, [pc, #812]	; (5000 <ecc_mul_fixed+0x354>)
    4cd2:	4798      	blx	r3
	conversion_to_odd(temp, temp);                              // Converting scalar to odd using the prime subgroup order
    4cd4:	a97d      	add	r1, sp, #500	; 0x1f4
    4cd6:	0008      	movs	r0, r1
    4cd8:	4bca      	ldr	r3, [pc, #808]	; (5004 <ecc_mul_fixed+0x358>)
    4cda:	4798      	blx	r3
	mLSB_set_recode((uint64_t*)temp, digits);                   // Scalar recoding
    4cdc:	a985      	add	r1, sp, #532	; 0x214
    4cde:	a87d      	add	r0, sp, #500	; 0x1f4
    4ce0:	4bc9      	ldr	r3, [pc, #804]	; (5008 <ecc_mul_fixed+0x35c>)
    4ce2:	4798      	blx	r3
    digit = digits[w*d-1];
    4ce4:	23f9      	movs	r3, #249	; 0xf9
    4ce6:	009b      	lsls	r3, r3, #2
        digit = 2*digit + digits[i];
    4ce8:	58e2      	ldr	r2, [r4, r3]
    4cea:	0052      	lsls	r2, r2, #1
    4cec:	3bc8      	subs	r3, #200	; 0xc8
    4cee:	58e3      	ldr	r3, [r4, r3]
    4cf0:	18d2      	adds	r2, r2, r3
    4cf2:	0052      	lsls	r2, r2, #1
    4cf4:	2395      	movs	r3, #149	; 0x95
    4cf6:	009b      	lsls	r3, r3, #2
    4cf8:	58e3      	ldr	r3, [r4, r3]
    4cfa:	18d2      	adds	r2, r2, r3
    4cfc:	0052      	lsls	r2, r2, #1
    table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    4cfe:	23c4      	movs	r3, #196	; 0xc4
    4d00:	58e3      	ldr	r3, [r4, r3]
        digit = 2*digit + digits[i];
    4d02:	21c6      	movs	r1, #198	; 0xc6
    4d04:	0049      	lsls	r1, r1, #1
    4d06:	5861      	ldr	r1, [r4, r1]
    4d08:	1852      	adds	r2, r2, r1
    table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    4d0a:	4cc0      	ldr	r4, [pc, #768]	; (500c <ecc_mul_fixed+0x360>)
    4d0c:	21f0      	movs	r1, #240	; 0xf0
    4d0e:	0149      	lsls	r1, r1, #5
    4d10:	1860      	adds	r0, r4, r1
    4d12:	a919      	add	r1, sp, #100	; 0x64
    4d14:	4dbe      	ldr	r5, [pc, #760]	; (5010 <ecc_mul_fixed+0x364>)
    4d16:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    4d18:	aa37      	add	r2, sp, #220	; 0xdc
    4d1a:	a923      	add	r1, sp, #140	; 0x8c
    4d1c:	a819      	add	r0, sp, #100	; 0x64
    4d1e:	4dbd      	ldr	r5, [pc, #756]	; (5014 <ecc_mul_fixed+0x368>)
    4d20:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4d22:	aa3c      	add	r2, sp, #240	; 0xf0
    4d24:	a928      	add	r1, sp, #160	; 0xa0
    4d26:	a81e      	add	r0, sp, #120	; 0x78
    4d28:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    4d2a:	aa41      	add	r2, sp, #260	; 0x104
    4d2c:	a923      	add	r1, sp, #140	; 0x8c
    4d2e:	a819      	add	r0, sp, #100	; 0x64
    4d30:	4db9      	ldr	r5, [pc, #740]	; (5018 <ecc_mul_fixed+0x36c>)
    4d32:	47a8      	blx	r5
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4d34:	aa46      	add	r2, sp, #280	; 0x118
    4d36:	a928      	add	r1, sp, #160	; 0xa0
    4d38:	a81e      	add	r0, sp, #120	; 0x78
    4d3a:	47a8      	blx	r5
    v2zero1271(Q->z); Q->z[0]=1;             // ZQ = 1
    4d3c:	a84b      	add	r0, sp, #300	; 0x12c
    4d3e:	4bb7      	ldr	r3, [pc, #732]	; (501c <ecc_mul_fixed+0x370>)
    4d40:	4798      	blx	r3
    4d42:	2301      	movs	r3, #1
    4d44:	934b      	str	r3, [sp, #300]	; 0x12c
    v2div1271(Q->x);                         // XQ = x1
    4d46:	a837      	add	r0, sp, #220	; 0xdc
    4d48:	4db5      	ldr	r5, [pc, #724]	; (5020 <ecc_mul_fixed+0x374>)
    4d4a:	47a8      	blx	r5
    v2div1271(Q->y);                         // YQ = y1 
    4d4c:	a841      	add	r0, sp, #260	; 0x104
    4d4e:	47a8      	blx	r5
    v2copy1271(Q->x, Q->ta);                 // TaQ = x1
    4d50:	a955      	add	r1, sp, #340	; 0x154
    4d52:	a837      	add	r0, sp, #220	; 0xdc
    4d54:	4db3      	ldr	r5, [pc, #716]	; (5024 <ecc_mul_fixed+0x378>)
    4d56:	47a8      	blx	r5
    v2copy1271(Q->y, Q->tb);                 // TbQ = y1
    4d58:	a95f      	add	r1, sp, #380	; 0x17c
    4d5a:	a841      	add	r0, sp, #260	; 0x104
    4d5c:	47a8      	blx	r5
    4d5e:	23b4      	movs	r3, #180	; 0xb4
    4d60:	015b      	lsls	r3, r3, #5
    4d62:	4698      	mov	r8, r3
    4d64:	44a0      	add	r8, r4
    4d66:	23a1      	movs	r3, #161	; 0xa1
    4d68:	00db      	lsls	r3, r3, #3
    4d6a:	446b      	add	r3, sp
    4d6c:	469a      	mov	sl, r3
    4d6e:	26bd      	movs	r6, #189	; 0xbd
        table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);   
    4d70:	4ba7      	ldr	r3, [pc, #668]	; (5010 <ecc_mul_fixed+0x364>)
    4d72:	4699      	mov	r9, r3
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    4d74:	4dac      	ldr	r5, [pc, #688]	; (5028 <ecc_mul_fixed+0x37c>)
    vadd1271(&a[0], &b[0], &c[0]);
    4d76:	4ca8      	ldr	r4, [pc, #672]	; (5018 <ecc_mul_fixed+0x36c>)
    4d78:	46d3      	mov	fp, sl
    4d7a:	46dc      	mov	ip, fp
        digit = digits[w*d-(j+1)*e-1];
    4d7c:	465b      	mov	r3, fp
    4d7e:	33c8      	adds	r3, #200	; 0xc8
    4d80:	681a      	ldr	r2, [r3, #0]
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)           
    4d82:	0033      	movs	r3, r6
    4d84:	0030      	movs	r0, r6
    4d86:	3864      	subs	r0, #100	; 0x64
    4d88:	4286      	cmp	r6, r0
    4d8a:	db08      	blt.n	4d9e <ecc_mul_fixed+0xf2>
    4d8c:	4659      	mov	r1, fp
            digit = 2*digit + digits[i];
    4d8e:	0052      	lsls	r2, r2, #1
    4d90:	680f      	ldr	r7, [r1, #0]
    4d92:	46ba      	mov	sl, r7
    4d94:	4452      	add	r2, sl
    4d96:	3b32      	subs	r3, #50	; 0x32
    4d98:	39c8      	subs	r1, #200	; 0xc8
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)           
    4d9a:	4298      	cmp	r0, r3
    4d9c:	ddf7      	ble.n	4d8e <ecc_mul_fixed+0xe2>
        table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);   
    4d9e:	4ba3      	ldr	r3, [pc, #652]	; (502c <ecc_mul_fixed+0x380>)
    4da0:	4463      	add	r3, ip
    4da2:	681b      	ldr	r3, [r3, #0]
    4da4:	a919      	add	r1, sp, #100	; 0x64
    4da6:	4640      	mov	r0, r8
    4da8:	47c8      	blx	r9
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    4daa:	aa55      	add	r2, sp, #340	; 0x154
    4dac:	a95f      	add	r1, sp, #380	; 0x17c
    4dae:	0010      	movs	r0, r2
    4db0:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    4db2:	aa05      	add	r2, sp, #20
    4db4:	a94b      	add	r1, sp, #300	; 0x12c
    4db6:	0008      	movs	r0, r1
    4db8:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4dba:	aa0a      	add	r2, sp, #40	; 0x28
    4dbc:	a950      	add	r1, sp, #320	; 0x140
    4dbe:	0008      	movs	r0, r1
    4dc0:	47a0      	blx	r4
    v2mul1271(P->ta, Q->t2, P->ta);                       // Ta = 2dT1*t2 
    4dc2:	aa55      	add	r2, sp, #340	; 0x154
    4dc4:	a92d      	add	r1, sp, #180	; 0xb4
    4dc6:	0010      	movs	r0, r2
    4dc8:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    4dca:	aa4b      	add	r2, sp, #300	; 0x12c
    4dcc:	a941      	add	r1, sp, #260	; 0x104
    4dce:	a837      	add	r0, sp, #220	; 0xdc
    4dd0:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4dd2:	aa50      	add	r2, sp, #320	; 0x140
    4dd4:	a946      	add	r1, sp, #280	; 0x118
    4dd6:	a83c      	add	r0, sp, #240	; 0xf0
    4dd8:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    4dda:	aa5f      	add	r2, sp, #380	; 0x17c
    4ddc:	a937      	add	r1, sp, #220	; 0xdc
    4dde:	a841      	add	r0, sp, #260	; 0x104
    4de0:	4b8c      	ldr	r3, [pc, #560]	; (5014 <ecc_mul_fixed+0x368>)
    4de2:	469a      	mov	sl, r3
    4de4:	4798      	blx	r3
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4de6:	aa64      	add	r2, sp, #400	; 0x190
    4de8:	a93c      	add	r1, sp, #240	; 0xf0
    4dea:	a846      	add	r0, sp, #280	; 0x118
    4dec:	47d0      	blx	sl
    vsub1271(&a[0], &b[0], &c[0]);
    4dee:	aa0f      	add	r2, sp, #60	; 0x3c
    4df0:	a955      	add	r1, sp, #340	; 0x154
    4df2:	a805      	add	r0, sp, #20
    4df4:	47d0      	blx	sl
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4df6:	aa14      	add	r2, sp, #80	; 0x50
    4df8:	a95a      	add	r1, sp, #360	; 0x168
    4dfa:	a80a      	add	r0, sp, #40	; 0x28
    4dfc:	47d0      	blx	sl
    vadd1271(&a[0], &b[0], &c[0]);
    4dfe:	aa05      	add	r2, sp, #20
    4e00:	a955      	add	r1, sp, #340	; 0x154
    4e02:	0010      	movs	r0, r2
    4e04:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4e06:	aa0a      	add	r2, sp, #40	; 0x28
    4e08:	a95a      	add	r1, sp, #360	; 0x168
    4e0a:	0010      	movs	r0, r2
    4e0c:	47a0      	blx	r4
    v2mul1271(Q->xy, P->z, P->ta);                        // Ta = (X1+Y1)(x2+y2)
    4e0e:	aa55      	add	r2, sp, #340	; 0x154
    4e10:	a94b      	add	r1, sp, #300	; 0x12c
    4e12:	a819      	add	r0, sp, #100	; 0x64
    4e14:	47a8      	blx	r5
    v2mul1271(Q->yx, P->tb, P->x);                        // X = (Y1-X1)(y2-x2)
    4e16:	aa37      	add	r2, sp, #220	; 0xdc
    4e18:	a95f      	add	r1, sp, #380	; 0x17c
    4e1a:	a823      	add	r0, sp, #140	; 0x8c
    4e1c:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    4e1e:	aa5f      	add	r2, sp, #380	; 0x17c
    4e20:	a937      	add	r1, sp, #220	; 0xdc
    4e22:	a855      	add	r0, sp, #340	; 0x154
    4e24:	47d0      	blx	sl
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4e26:	aa64      	add	r2, sp, #400	; 0x190
    4e28:	a93c      	add	r1, sp, #240	; 0xf0
    4e2a:	a85a      	add	r0, sp, #360	; 0x168
    4e2c:	47d0      	blx	sl
    vadd1271(&a[0], &b[0], &c[0]);
    4e2e:	aa55      	add	r2, sp, #340	; 0x154
    4e30:	a937      	add	r1, sp, #220	; 0xdc
    4e32:	0010      	movs	r0, r2
    4e34:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4e36:	aa5a      	add	r2, sp, #360	; 0x168
    4e38:	a93c      	add	r1, sp, #240	; 0xf0
    4e3a:	0010      	movs	r0, r2
    4e3c:	47a0      	blx	r4
    v2mul1271(t1, t2, P->z);                              // Zfinal = theta*alpha
    4e3e:	aa4b      	add	r2, sp, #300	; 0x12c
    4e40:	a90f      	add	r1, sp, #60	; 0x3c
    4e42:	a805      	add	r0, sp, #20
    4e44:	47a8      	blx	r5
    v2mul1271(P->tb, t2, P->x);                           // Xfinal = beta*theta
    4e46:	aa37      	add	r2, sp, #220	; 0xdc
    4e48:	a90f      	add	r1, sp, #60	; 0x3c
    4e4a:	a85f      	add	r0, sp, #380	; 0x17c
    4e4c:	47a8      	blx	r5
    v2mul1271(P->ta, t1, P->y);                           // Yfinal = alpha*omega
    4e4e:	aa41      	add	r2, sp, #260	; 0x104
    4e50:	a905      	add	r1, sp, #20
    4e52:	a855      	add	r0, sp, #340	; 0x154
    4e54:	47a8      	blx	r5
    4e56:	3e0a      	subs	r6, #10
    4e58:	4b75      	ldr	r3, [pc, #468]	; (5030 <ecc_mul_fixed+0x384>)
    4e5a:	469c      	mov	ip, r3
    4e5c:	44e0      	add	r8, ip
    4e5e:	2328      	movs	r3, #40	; 0x28
    4e60:	425b      	negs	r3, r3
    4e62:	469c      	mov	ip, r3
    4e64:	44e3      	add	fp, ip
    for (j = 0; j < (v-1); j++)
    4e66:	2e95      	cmp	r6, #149	; 0x95
    4e68:	d187      	bne.n	4d7a <ecc_mul_fixed+0xce>
    4e6a:	4b72      	ldr	r3, [pc, #456]	; (5034 <ecc_mul_fixed+0x388>)
    4e6c:	aa04      	add	r2, sp, #16
    4e6e:	4694      	mov	ip, r2
    4e70:	4463      	add	r3, ip
    4e72:	9302      	str	r3, [sp, #8]
    4e74:	23c6      	movs	r3, #198	; 0xc6
    4e76:	9301      	str	r3, [sp, #4]
            table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]); 
    4e78:	4b65      	ldr	r3, [pc, #404]	; (5010 <ecc_mul_fixed+0x364>)
    4e7a:	469b      	mov	fp, r3
    4e7c:	e008      	b.n	4e90 <ecc_mul_fixed+0x1e4>
    4e7e:	9b01      	ldr	r3, [sp, #4]
    4e80:	3b01      	subs	r3, #1
    4e82:	9301      	str	r3, [sp, #4]
    4e84:	9a02      	ldr	r2, [sp, #8]
    4e86:	3a04      	subs	r2, #4
    4e88:	9202      	str	r2, [sp, #8]
    for (ii = (e-2); ii >= 0; ii--)
    4e8a:	2bbd      	cmp	r3, #189	; 0xbd
    4e8c:	d100      	bne.n	4e90 <ecc_mul_fixed+0x1e4>
    4e8e:	e08b      	b.n	4fa8 <ecc_mul_fixed+0x2fc>
        eccdouble(R);                                           // R = 2*R using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    4e90:	a837      	add	r0, sp, #220	; 0xdc
    4e92:	4b69      	ldr	r3, [pc, #420]	; (5038 <ecc_mul_fixed+0x38c>)
    4e94:	4798      	blx	r3
    4e96:	4b5d      	ldr	r3, [pc, #372]	; (500c <ecc_mul_fixed+0x360>)
    4e98:	22f0      	movs	r2, #240	; 0xf0
    4e9a:	0152      	lsls	r2, r2, #5
    4e9c:	4694      	mov	ip, r2
    4e9e:	4463      	add	r3, ip
    4ea0:	4699      	mov	r9, r3
    4ea2:	9f01      	ldr	r7, [sp, #4]
    4ea4:	003b      	movs	r3, r7
    4ea6:	2232      	movs	r2, #50	; 0x32
    4ea8:	4252      	negs	r2, r2
    4eaa:	4694      	mov	ip, r2
    4eac:	4463      	add	r3, ip
    4eae:	469a      	mov	sl, r3
    4eb0:	9b02      	ldr	r3, [sp, #8]
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    4eb2:	4d5d      	ldr	r5, [pc, #372]	; (5028 <ecc_mul_fixed+0x37c>)
    vadd1271(&a[0], &b[0], &c[0]);
    4eb4:	4c58      	ldr	r4, [pc, #352]	; (5018 <ecc_mul_fixed+0x36c>)
    4eb6:	001e      	movs	r6, r3
    4eb8:	46b4      	mov	ip, r6
            digit = digits[w*d-j*e+ii-e];
    4eba:	0033      	movs	r3, r6
    4ebc:	33c8      	adds	r3, #200	; 0xc8
    4ebe:	681a      	ldr	r2, [r3, #0]
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)           
    4ec0:	003b      	movs	r3, r7
    4ec2:	0038      	movs	r0, r7
    4ec4:	3864      	subs	r0, #100	; 0x64
    4ec6:	4287      	cmp	r7, r0
    4ec8:	db0a      	blt.n	4ee0 <ecc_mul_fixed+0x234>
    4eca:	0031      	movs	r1, r6
    4ecc:	9600      	str	r6, [sp, #0]
                digit = 2*digit + digits[i];
    4ece:	0052      	lsls	r2, r2, #1
    4ed0:	680e      	ldr	r6, [r1, #0]
    4ed2:	46b0      	mov	r8, r6
    4ed4:	4442      	add	r2, r8
    4ed6:	3b32      	subs	r3, #50	; 0x32
    4ed8:	39c8      	subs	r1, #200	; 0xc8
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)           
    4eda:	4283      	cmp	r3, r0
    4edc:	daf7      	bge.n	4ece <ecc_mul_fixed+0x222>
    4ede:	9e00      	ldr	r6, [sp, #0]
            table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]); 
    4ee0:	4b52      	ldr	r3, [pc, #328]	; (502c <ecc_mul_fixed+0x380>)
    4ee2:	4463      	add	r3, ip
    4ee4:	681b      	ldr	r3, [r3, #0]
    4ee6:	a919      	add	r1, sp, #100	; 0x64
    4ee8:	4648      	mov	r0, r9
    4eea:	47d8      	blx	fp
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    4eec:	aa55      	add	r2, sp, #340	; 0x154
    4eee:	a95f      	add	r1, sp, #380	; 0x17c
    4ef0:	0010      	movs	r0, r2
    4ef2:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    4ef4:	aa05      	add	r2, sp, #20
    4ef6:	a94b      	add	r1, sp, #300	; 0x12c
    4ef8:	0008      	movs	r0, r1
    4efa:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4efc:	aa0a      	add	r2, sp, #40	; 0x28
    4efe:	a950      	add	r1, sp, #320	; 0x140
    4f00:	0008      	movs	r0, r1
    4f02:	47a0      	blx	r4
    v2mul1271(P->ta, Q->t2, P->ta);                       // Ta = 2dT1*t2 
    4f04:	aa55      	add	r2, sp, #340	; 0x154
    4f06:	a92d      	add	r1, sp, #180	; 0xb4
    4f08:	0010      	movs	r0, r2
    4f0a:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    4f0c:	aa4b      	add	r2, sp, #300	; 0x12c
    4f0e:	a941      	add	r1, sp, #260	; 0x104
    4f10:	a837      	add	r0, sp, #220	; 0xdc
    4f12:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4f14:	aa50      	add	r2, sp, #320	; 0x140
    4f16:	a946      	add	r1, sp, #280	; 0x118
    4f18:	a83c      	add	r0, sp, #240	; 0xf0
    4f1a:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    4f1c:	aa5f      	add	r2, sp, #380	; 0x17c
    4f1e:	a937      	add	r1, sp, #220	; 0xdc
    4f20:	a841      	add	r0, sp, #260	; 0x104
    4f22:	4b3c      	ldr	r3, [pc, #240]	; (5014 <ecc_mul_fixed+0x368>)
    4f24:	4698      	mov	r8, r3
    4f26:	4798      	blx	r3
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4f28:	aa64      	add	r2, sp, #400	; 0x190
    4f2a:	a93c      	add	r1, sp, #240	; 0xf0
    4f2c:	a846      	add	r0, sp, #280	; 0x118
    4f2e:	47c0      	blx	r8
    vsub1271(&a[0], &b[0], &c[0]);
    4f30:	aa0f      	add	r2, sp, #60	; 0x3c
    4f32:	a955      	add	r1, sp, #340	; 0x154
    4f34:	a805      	add	r0, sp, #20
    4f36:	47c0      	blx	r8
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4f38:	aa14      	add	r2, sp, #80	; 0x50
    4f3a:	a95a      	add	r1, sp, #360	; 0x168
    4f3c:	a80a      	add	r0, sp, #40	; 0x28
    4f3e:	47c0      	blx	r8
    vadd1271(&a[0], &b[0], &c[0]);
    4f40:	aa05      	add	r2, sp, #20
    4f42:	a955      	add	r1, sp, #340	; 0x154
    4f44:	0010      	movs	r0, r2
    4f46:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4f48:	aa0a      	add	r2, sp, #40	; 0x28
    4f4a:	a95a      	add	r1, sp, #360	; 0x168
    4f4c:	0010      	movs	r0, r2
    4f4e:	47a0      	blx	r4
    v2mul1271(Q->xy, P->z, P->ta);                        // Ta = (X1+Y1)(x2+y2)
    4f50:	aa55      	add	r2, sp, #340	; 0x154
    4f52:	a94b      	add	r1, sp, #300	; 0x12c
    4f54:	a819      	add	r0, sp, #100	; 0x64
    4f56:	47a8      	blx	r5
    v2mul1271(Q->yx, P->tb, P->x);                        // X = (Y1-X1)(y2-x2)
    4f58:	aa37      	add	r2, sp, #220	; 0xdc
    4f5a:	a95f      	add	r1, sp, #380	; 0x17c
    4f5c:	a823      	add	r0, sp, #140	; 0x8c
    4f5e:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    4f60:	aa5f      	add	r2, sp, #380	; 0x17c
    4f62:	a937      	add	r1, sp, #220	; 0xdc
    4f64:	a855      	add	r0, sp, #340	; 0x154
    4f66:	47c0      	blx	r8
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4f68:	aa64      	add	r2, sp, #400	; 0x190
    4f6a:	a93c      	add	r1, sp, #240	; 0xf0
    4f6c:	a85a      	add	r0, sp, #360	; 0x168
    4f6e:	47c0      	blx	r8
    vadd1271(&a[0], &b[0], &c[0]);
    4f70:	aa55      	add	r2, sp, #340	; 0x154
    4f72:	a937      	add	r1, sp, #220	; 0xdc
    4f74:	0010      	movs	r0, r2
    4f76:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4f78:	aa5a      	add	r2, sp, #360	; 0x168
    4f7a:	a93c      	add	r1, sp, #240	; 0xf0
    4f7c:	0010      	movs	r0, r2
    4f7e:	47a0      	blx	r4
    v2mul1271(t1, t2, P->z);                              // Zfinal = theta*alpha
    4f80:	aa4b      	add	r2, sp, #300	; 0x12c
    4f82:	a90f      	add	r1, sp, #60	; 0x3c
    4f84:	a805      	add	r0, sp, #20
    4f86:	47a8      	blx	r5
    v2mul1271(P->tb, t2, P->x);                           // Xfinal = beta*theta
    4f88:	aa37      	add	r2, sp, #220	; 0xdc
    4f8a:	a90f      	add	r1, sp, #60	; 0x3c
    4f8c:	a85f      	add	r0, sp, #380	; 0x17c
    4f8e:	47a8      	blx	r5
    v2mul1271(P->ta, t1, P->y);                           // Yfinal = alpha*omega
    4f90:	aa41      	add	r2, sp, #260	; 0x104
    4f92:	a905      	add	r1, sp, #20
    4f94:	a855      	add	r0, sp, #340	; 0x154
    4f96:	47a8      	blx	r5
    4f98:	3f0a      	subs	r7, #10
    4f9a:	4b25      	ldr	r3, [pc, #148]	; (5030 <ecc_mul_fixed+0x384>)
    4f9c:	469c      	mov	ip, r3
    4f9e:	44e1      	add	r9, ip
    4fa0:	3e28      	subs	r6, #40	; 0x28
        for (j = 0; j < v; j++)
    4fa2:	4557      	cmp	r7, sl
    4fa4:	d188      	bne.n	4eb8 <ecc_mul_fixed+0x20c>
    4fa6:	e76a      	b.n	4e7e <ecc_mul_fixed+0x1d2>
    v2inv1271(P->z);                      // Z1 = Z1^-1
    4fa8:	a84b      	add	r0, sp, #300	; 0x12c
    4faa:	4b24      	ldr	r3, [pc, #144]	; (503c <ecc_mul_fixed+0x390>)
    4fac:	4798      	blx	r3
    v2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    4fae:	aa69      	add	r2, sp, #420	; 0x1a4
    4fb0:	a94b      	add	r1, sp, #300	; 0x12c
    4fb2:	a837      	add	r0, sp, #220	; 0xdc
    4fb4:	4c1c      	ldr	r4, [pc, #112]	; (5028 <ecc_mul_fixed+0x37c>)
    4fb6:	47a0      	blx	r4
    v2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    4fb8:	aa73      	add	r2, sp, #460	; 0x1cc
    4fba:	a94b      	add	r1, sp, #300	; 0x12c
    4fbc:	a841      	add	r0, sp, #260	; 0x104
    4fbe:	47a0      	blx	r4
    v2mod1271(Q->x, Q->x); 
    4fc0:	a969      	add	r1, sp, #420	; 0x1a4
    4fc2:	0008      	movs	r0, r1
    4fc4:	4c1e      	ldr	r4, [pc, #120]	; (5040 <ecc_mul_fixed+0x394>)
    4fc6:	47a0      	blx	r4
    v2mod1271(Q->y, Q->y); 
    4fc8:	a973      	add	r1, sp, #460	; 0x1cc
    4fca:	0008      	movs	r0, r1
    4fcc:	47a0      	blx	r4
    from_ext_to_std(A->x, Q->x);
    4fce:	9d03      	ldr	r5, [sp, #12]
    4fd0:	0029      	movs	r1, r5
    4fd2:	a869      	add	r0, sp, #420	; 0x1a4
    4fd4:	4c1b      	ldr	r4, [pc, #108]	; (5044 <ecc_mul_fixed+0x398>)
    4fd6:	47a0      	blx	r4
    from_ext_to_std(A->y, Q->y); 
    4fd8:	0029      	movs	r1, r5
    4fda:	3120      	adds	r1, #32
    4fdc:	a873      	add	r0, sp, #460	; 0x1cc
    4fde:	47a0      	blx	r4
}
    4fe0:	2001      	movs	r0, #1
    4fe2:	4b19      	ldr	r3, [pc, #100]	; (5048 <ecc_mul_fixed+0x39c>)
    4fe4:	449d      	add	sp, r3
    4fe6:	bc3c      	pop	{r2, r3, r4, r5}
    4fe8:	4690      	mov	r8, r2
    4fea:	4699      	mov	r9, r3
    4fec:	46a2      	mov	sl, r4
    4fee:	46ab      	mov	fp, r5
    4ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ff2:	46c0      	nop			; (mov r8, r8)
    4ff4:	fffff9ac 	.word	0xfffff9ac
    4ff8:	0000043c 	.word	0x0000043c
    4ffc:	00006877 	.word	0x00006877
    5000:	00003cb9 	.word	0x00003cb9
    5004:	00003cf1 	.word	0x00003cf1
    5008:	00004b1d 	.word	0x00004b1d
    500c:	000087ac 	.word	0x000087ac
    5010:	00004121 	.word	0x00004121
    5014:	000031c3 	.word	0x000031c3
    5018:	00003187 	.word	0x00003187
    501c:	0000424d 	.word	0x0000424d
    5020:	00004359 	.word	0x00004359
    5024:	00003da7 	.word	0x00003da7
    5028:	00004445 	.word	0x00004445
    502c:	fffffda8 	.word	0xfffffda8
    5030:	fffff880 	.word	0xfffff880
    5034:	0000051c 	.word	0x0000051c
    5038:	0000475d 	.word	0x0000475d
    503c:	00004505 	.word	0x00004505
    5040:	00004429 	.word	0x00004429
    5044:	00003a89 	.word	0x00003a89
    5048:	00000654 	.word	0x00000654

0000504c <fixed_window_recode>:

/***********************************************/
/**********  CURVE/SCALAR FUNCTIONS  ***********/

void fixed_window_recode(uint64_t* scalar, unsigned int* digits, unsigned int* sign_masks)
{ // Converting scalar to the fixed window representation used by the variable-base scalar multiplication
    504c:	b5f0      	push	{r4, r5, r6, r7, lr}
    504e:	46de      	mov	lr, fp
    5050:	4657      	mov	r7, sl
    5052:	464e      	mov	r6, r9
    5054:	4645      	mov	r5, r8
    5056:	b5e0      	push	{r5, r6, r7, lr}
    5058:	b089      	sub	sp, #36	; 0x24
    505a:	4692      	mov	sl, r2
    505c:	2300      	movs	r3, #0
    505e:	469c      	mov	ip, r3
    5060:	3320      	adds	r3, #32
    5062:	4699      	mov	r9, r3
    5064:	4481      	add	r9, r0
    5066:	3b08      	subs	r3, #8
    5068:	4698      	mov	r8, r3
    506a:	4480      	add	r8, r0
    506c:	4643      	mov	r3, r8
    506e:	9300      	str	r3, [sp, #0]
    5070:	9107      	str	r1, [sp, #28]
    5072:	4683      	mov	fp, r0
    5074:	e011      	b.n	509a <fixed_window_recode+0x4e>
    5076:	9400      	str	r4, [sp, #0]
        }    
  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] = scalar[NWORDS64_ORDER-1] >> (W_VARBASE-1);
    5078:	465b      	mov	r3, fp
    507a:	69db      	ldr	r3, [r3, #28]
    507c:	0719      	lsls	r1, r3, #28
    507e:	465a      	mov	r2, fp
    5080:	6992      	ldr	r2, [r2, #24]
    5082:	0912      	lsrs	r2, r2, #4
    5084:	430a      	orrs	r2, r1
    5086:	4659      	mov	r1, fp
    5088:	618a      	str	r2, [r1, #24]
    508a:	091b      	lsrs	r3, r3, #4
    508c:	61cb      	str	r3, [r1, #28]
    508e:	2304      	movs	r3, #4
    5090:	4698      	mov	r8, r3
    5092:	44c4      	add	ip, r8
    for (i = 0; i < t_VARBASE; i++)
    5094:	4663      	mov	r3, ip
    5096:	2bf8      	cmp	r3, #248	; 0xf8
    5098:	d069      	beq.n	516e <fixed_window_recode+0x122>
        temp = (scalar[0] & val1) - val2;    // ki = (k mod 2^w)/2^(w-1)
    509a:	465a      	mov	r2, fp
    509c:	231f      	movs	r3, #31
    509e:	6812      	ldr	r2, [r2, #0]
    50a0:	4013      	ands	r3, r2
    50a2:	9304      	str	r3, [sp, #16]
    50a4:	2300      	movs	r3, #0
    50a6:	9305      	str	r3, [sp, #20]
    50a8:	9a04      	ldr	r2, [sp, #16]
    50aa:	9b05      	ldr	r3, [sp, #20]
    50ac:	2010      	movs	r0, #16
    50ae:	4240      	negs	r0, r0
    50b0:	17c1      	asrs	r1, r0, #31
    50b2:	1812      	adds	r2, r2, r0
    50b4:	414b      	adcs	r3, r1
        sign_masks[i] = ~((unsigned int)(temp >> (RADIX64-1)));
    50b6:	17d9      	asrs	r1, r3, #31
    50b8:	9102      	str	r1, [sp, #8]
    50ba:	9103      	str	r1, [sp, #12]
    50bc:	43c9      	mvns	r1, r1
    50be:	4650      	mov	r0, sl
    50c0:	4665      	mov	r5, ip
    50c2:	5141      	str	r1, [r0, r5]
        digits[i] = ((sign_masks[i] & (unsigned int)(temp ^ -temp)) ^ (unsigned int)-temp) >> 1;        
    50c4:	4250      	negs	r0, r2
    50c6:	0004      	movs	r4, r0
    50c8:	4054      	eors	r4, r2
    50ca:	4021      	ands	r1, r4
    50cc:	4048      	eors	r0, r1
    50ce:	0840      	lsrs	r0, r0, #1
    50d0:	9907      	ldr	r1, [sp, #28]
    50d2:	5148      	str	r0, [r1, r5]
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    50d4:	4659      	mov	r1, fp
    50d6:	6809      	ldr	r1, [r1, #0]
    50d8:	1a8d      	subs	r5, r1, r2
    50da:	4055      	eors	r5, r2
    50dc:	4659      	mov	r1, fp
    50de:	6809      	ldr	r1, [r1, #0]
    50e0:	4051      	eors	r1, r2
    50e2:	000c      	movs	r4, r1
    50e4:	432c      	orrs	r4, r5
    50e6:	4659      	mov	r1, fp
    50e8:	6809      	ldr	r1, [r1, #0]
    50ea:	404c      	eors	r4, r1
    50ec:	0fe1      	lsrs	r1, r4, #31
    50ee:	4688      	mov	r8, r1
        borrow = ((temp >> (RADIX64-1)) - 1) & (uint64_t)is_digit_lessthan_ct((digit_t)scalar[0], (digit_t)temp);
    50f0:	9c02      	ldr	r4, [sp, #8]
    50f2:	9d03      	ldr	r5, [sp, #12]
    50f4:	2001      	movs	r0, #1
    50f6:	4240      	negs	r0, r0
    50f8:	17c1      	asrs	r1, r0, #31
    50fa:	1824      	adds	r4, r4, r0
    50fc:	414d      	adcs	r5, r1
    50fe:	4641      	mov	r1, r8
    5100:	4021      	ands	r1, r4
    5102:	000e      	movs	r6, r1
    5104:	2700      	movs	r7, #0
        res = scalar[0] - temp;              // k = (k - ki) / 2^(w-1) 
    5106:	4659      	mov	r1, fp
    5108:	6808      	ldr	r0, [r1, #0]
    510a:	6849      	ldr	r1, [r1, #4]
    510c:	1a80      	subs	r0, r0, r2
    510e:	4199      	sbcs	r1, r3
    5110:	0002      	movs	r2, r0
    5112:	000b      	movs	r3, r1
        scalar[0] = res;
    5114:	4659      	mov	r1, fp
    5116:	c10c      	stmia	r1!, {r2, r3}
    5118:	9b00      	ldr	r3, [sp, #0]
    511a:	4698      	mov	r8, r3
    511c:	4648      	mov	r0, r9
            res = scalar[j];
    511e:	680b      	ldr	r3, [r1, #0]
    5120:	684c      	ldr	r4, [r1, #4]
    5122:	001a      	movs	r2, r3
    5124:	0023      	movs	r3, r4
            scalar[j] = res - borrow;
    5126:	0014      	movs	r4, r2
    5128:	001d      	movs	r5, r3
    512a:	1ba4      	subs	r4, r4, r6
    512c:	41bd      	sbcs	r5, r7
    512e:	c130      	stmia	r1!, {r4, r5}
    5130:	9200      	str	r2, [sp, #0]
    5132:	9301      	str	r3, [sp, #4]
    5134:	1b93      	subs	r3, r2, r6
    5136:	4073      	eors	r3, r6
    5138:	0034      	movs	r4, r6
    513a:	9d00      	ldr	r5, [sp, #0]
    513c:	406c      	eors	r4, r5
    513e:	4323      	orrs	r3, r4
    5140:	406b      	eors	r3, r5
            borrow = (uint64_t)is_digit_lessthan_ct((digit_t)res, (digit_t)borrow); 
    5142:	0fde      	lsrs	r6, r3, #31
    5144:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    5146:	4281      	cmp	r1, r0
    5148:	d1e9      	bne.n	511e <fixed_window_recode+0xd2>
    514a:	4681      	mov	r9, r0
    514c:	4659      	mov	r1, fp
    514e:	4644      	mov	r4, r8
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
    5150:	684b      	ldr	r3, [r1, #4]
    5152:	0718      	lsls	r0, r3, #28
    5154:	680a      	ldr	r2, [r1, #0]
    5156:	0912      	lsrs	r2, r2, #4
    5158:	4302      	orrs	r2, r0
    515a:	091b      	lsrs	r3, r3, #4
    515c:	6888      	ldr	r0, [r1, #8]
    515e:	0700      	lsls	r0, r0, #28
    5160:	600a      	str	r2, [r1, #0]
    5162:	4043      	eors	r3, r0
    5164:	604b      	str	r3, [r1, #4]
    5166:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
    5168:	428c      	cmp	r4, r1
    516a:	d1f1      	bne.n	5150 <fixed_window_recode+0x104>
    516c:	e783      	b.n	5076 <fixed_window_recode+0x2a>
    516e:	4658      	mov	r0, fp
    5170:	9b07      	ldr	r3, [sp, #28]
    5172:	469b      	mov	fp, r3

    } 
    sign_masks[t_VARBASE] = ~((unsigned int)(scalar[0] >> (RADIX64-1)));
    5174:	684b      	ldr	r3, [r1, #4]
    5176:	0fdb      	lsrs	r3, r3, #31
    5178:	43db      	mvns	r3, r3
    517a:	21f8      	movs	r1, #248	; 0xf8
    517c:	4652      	mov	r2, sl
    517e:	5053      	str	r3, [r2, r1]
    digits[t_VARBASE] = ((sign_masks[t_VARBASE] & (unsigned int)(scalar[0] ^ (0-scalar[0]))) ^ (unsigned int)(0-scalar[0])) >> 1;    // kt = k  (t_VARBASE+1 digits)
    5180:	6802      	ldr	r2, [r0, #0]
    5182:	4250      	negs	r0, r2
    5184:	4042      	eors	r2, r0
    5186:	4013      	ands	r3, r2
    5188:	4043      	eors	r3, r0
    518a:	085b      	lsrs	r3, r3, #1
    518c:	465a      	mov	r2, fp
    518e:	5053      	str	r3, [r2, r1]
}
    5190:	b009      	add	sp, #36	; 0x24
    5192:	bc3c      	pop	{r2, r3, r4, r5}
    5194:	4690      	mov	r8, r2
    5196:	4699      	mov	r9, r3
    5198:	46a2      	mov	sl, r4
    519a:	46ab      	mov	fp, r5
    519c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000051a0 <ecc_precomp>:


void ecc_precomp(vpoint_extproj_t P, vpoint_extproj_precomp_t *T)
{ // Generation of the precomputation table used by the variable-base scalar multiplication ecc_mul().
    51a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    51a2:	b0db      	sub	sp, #364	; 0x16c
    51a4:	0004      	movs	r4, r0
    51a6:	000d      	movs	r5, r1
    vpoint_extproj_precomp_t P2;
    vpoint_extproj_t Q;
    unsigned int i; 

    // Generating P2 = 2(X1,Y1,Z1,T1a,T1b) = (XP2+YP2,Y2P-X2P,ZP2,TP2) and T[0] = P = (X1+Y1,Y1-X1,2*Z1,2*d*T1)
    ecccopy(P, Q);
    51a8:	4669      	mov	r1, sp
    51aa:	4e18      	ldr	r6, [pc, #96]	; (520c <ecc_precomp+0x6c>)
    51ac:	47b0      	blx	r6
    51ae:	0020      	movs	r0, r4
    51b0:	3028      	adds	r0, #40	; 0x28
    51b2:	a90a      	add	r1, sp, #40	; 0x28
    51b4:	47b0      	blx	r6
    51b6:	0020      	movs	r0, r4
    51b8:	3050      	adds	r0, #80	; 0x50
    51ba:	a914      	add	r1, sp, #80	; 0x50
    51bc:	47b0      	blx	r6
    51be:	0020      	movs	r0, r4
    51c0:	3078      	adds	r0, #120	; 0x78
    51c2:	a91e      	add	r1, sp, #120	; 0x78
    51c4:	47b0      	blx	r6
    51c6:	0020      	movs	r0, r4
    51c8:	30a0      	adds	r0, #160	; 0xa0
    51ca:	a928      	add	r1, sp, #160	; 0xa0
    51cc:	47b0      	blx	r6
    R1_to_R2(P, T[0]);
    51ce:	0029      	movs	r1, r5
    51d0:	0020      	movs	r0, r4
    51d2:	4b0f      	ldr	r3, [pc, #60]	; (5210 <ecc_precomp+0x70>)
    51d4:	4798      	blx	r3
    eccdouble(Q);
    51d6:	4668      	mov	r0, sp
    51d8:	4b0e      	ldr	r3, [pc, #56]	; (5214 <ecc_precomp+0x74>)
    51da:	4798      	blx	r3
    R1_to_R3(Q, P2);
    51dc:	a932      	add	r1, sp, #200	; 0xc8
    51de:	4668      	mov	r0, sp
    51e0:	4b0d      	ldr	r3, [pc, #52]	; (5218 <ecc_precomp+0x78>)
    51e2:	4798      	blx	r3
    51e4:	002c      	movs	r4, r5
    51e6:	238c      	movs	r3, #140	; 0x8c
    51e8:	00db      	lsls	r3, r3, #3
    51ea:	469c      	mov	ip, r3
    51ec:	4465      	add	r5, ip

    for (i = 1; i < NPOINTS_VARBASE; i++) {
        // T[i] = 2P+T[i-1] = (2*i+1)P = (XP2+YP2,Y2P-X2P,ZP2,TP2) + (X_(2*i-1)+Y_(2*i-1), Y_(2*i-1)-X_(2*i-1), 2Z_(2*i-1), 2T_(2*i-1)) = (X_(2*i+1)+Y_(2*i+1), Y_(2*i+1)-X_(2*i+1), 2Z_(2*i+1), 2dT_(2*i+1))
        eccadd_core(P2, T[i-1], Q);
    51ee:	4f0b      	ldr	r7, [pc, #44]	; (521c <ecc_precomp+0x7c>)
        R1_to_R2(Q, T[i]);
    51f0:	4e07      	ldr	r6, [pc, #28]	; (5210 <ecc_precomp+0x70>)
        eccadd_core(P2, T[i-1], Q);
    51f2:	466a      	mov	r2, sp
    51f4:	0021      	movs	r1, r4
    51f6:	a832      	add	r0, sp, #200	; 0xc8
    51f8:	47b8      	blx	r7
    51fa:	34a0      	adds	r4, #160	; 0xa0
        R1_to_R2(Q, T[i]);
    51fc:	0021      	movs	r1, r4
    51fe:	4668      	mov	r0, sp
    5200:	47b0      	blx	r6
    for (i = 1; i < NPOINTS_VARBASE; i++) {
    5202:	42ac      	cmp	r4, r5
    5204:	d1f5      	bne.n	51f2 <ecc_precomp+0x52>
    }
}
    5206:	b05b      	add	sp, #364	; 0x16c
    5208:	bdf0      	pop	{r4, r5, r6, r7, pc}
    520a:	46c0      	nop			; (mov r8, r8)
    520c:	00003da7 	.word	0x00003da7
    5210:	000045c1 	.word	0x000045c1
    5214:	0000475d 	.word	0x0000475d
    5218:	0000466d 	.word	0x0000466d
    521c:	00004839 	.word	0x00004839

00005220 <cofactor_clearing>:


void cofactor_clearing(vpoint_extproj_t P)
{ // Co-factor clearing
    5220:	b570      	push	{r4, r5, r6, lr}
    5222:	b0a8      	sub	sp, #160	; 0xa0
    5224:	0004      	movs	r4, r0
  // Input: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: P = 392*P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    vpoint_extproj_precomp_t Q;
     
    R1_to_R2(P, Q);                      // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
    5226:	4669      	mov	r1, sp
    5228:	4b0d      	ldr	r3, [pc, #52]	; (5260 <cofactor_clearing+0x40>)
    522a:	4798      	blx	r3
    eccdouble(P);                        // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    522c:	0020      	movs	r0, r4
    522e:	4d0d      	ldr	r5, [pc, #52]	; (5264 <cofactor_clearing+0x44>)
    5230:	47a8      	blx	r5
    eccadd(Q, P);                        // P = P+Q using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    5232:	0021      	movs	r1, r4
    5234:	4668      	mov	r0, sp
    5236:	4e0c      	ldr	r6, [pc, #48]	; (5268 <cofactor_clearing+0x48>)
    5238:	47b0      	blx	r6
    eccdouble(P);
    523a:	0020      	movs	r0, r4
    523c:	47a8      	blx	r5
    eccdouble(P);
    523e:	0020      	movs	r0, r4
    5240:	47a8      	blx	r5
    eccdouble(P);
    5242:	0020      	movs	r0, r4
    5244:	47a8      	blx	r5
    eccdouble(P);
    5246:	0020      	movs	r0, r4
    5248:	47a8      	blx	r5
    eccadd(Q, P);
    524a:	0021      	movs	r1, r4
    524c:	4668      	mov	r0, sp
    524e:	47b0      	blx	r6
    eccdouble(P);
    5250:	0020      	movs	r0, r4
    5252:	47a8      	blx	r5
    eccdouble(P);
    5254:	0020      	movs	r0, r4
    5256:	47a8      	blx	r5
    eccdouble(P);
    5258:	0020      	movs	r0, r4
    525a:	47a8      	blx	r5
}
    525c:	b028      	add	sp, #160	; 0xa0
    525e:	bd70      	pop	{r4, r5, r6, pc}
    5260:	000045c1 	.word	0x000045c1
    5264:	0000475d 	.word	0x0000475d
    5268:	0000491d 	.word	0x0000491d

0000526c <ecc_mul>:


bool ecc_mul(point_t P, digit_t* k, point_t Q, bool clear_cofactor)
{ // Scalar multiplication Q = k*P
    526c:	b5f0      	push	{r4, r5, r6, r7, lr}
    526e:	4c5a      	ldr	r4, [pc, #360]	; (53d8 <ecc_mul+0x16c>)
    5270:	44a5      	add	sp, r4
    5272:	0007      	movs	r7, r0
    5274:	000c      	movs	r4, r1
    5276:	9201      	str	r2, [sp, #4]
    5278:	001d      	movs	r5, r3
  // Output: Q = k*P in affine coordinates (x,y).
  // This function performs point validation and (if selected) cofactor clearing.
    vpoint_t A;
    vpoint_extproj_t R;
    vpoint_extproj_precomp_t S, Table[NPOINTS_VARBASE];
    unsigned int digits[t_VARBASE+1] = {0}, sign_masks[t_VARBASE+1] = {0};
    527a:	22fc      	movs	r2, #252	; 0xfc
    527c:	2100      	movs	r1, #0
    527e:	a849      	add	r0, sp, #292	; 0x124
    5280:	4e56      	ldr	r6, [pc, #344]	; (53dc <ecc_mul+0x170>)
    5282:	47b0      	blx	r6
    5284:	22fc      	movs	r2, #252	; 0xfc
    5286:	2100      	movs	r1, #0
    5288:	a80a      	add	r0, sp, #40	; 0x28
    528a:	47b0      	blx	r6
    digit_t k_odd[NWORDS_ORDER];
    int i;

    point_setup(P, R);                                         // Convert to representation (X,Y,1,Ta,Tb)
    528c:	23f7      	movs	r3, #247	; 0xf7
    528e:	00db      	lsls	r3, r3, #3
    5290:	aa02      	add	r2, sp, #8
    5292:	4694      	mov	ip, r2
    5294:	4463      	add	r3, ip
    5296:	0019      	movs	r1, r3
    5298:	0038      	movs	r0, r7
    529a:	4b51      	ldr	r3, [pc, #324]	; (53e0 <ecc_mul+0x174>)
    529c:	4798      	blx	r3

    if (ecc_point_validate(R) == false) {                      // Check if point lies on the curve
    529e:	23f7      	movs	r3, #247	; 0xf7
    52a0:	00db      	lsls	r3, r3, #3
    52a2:	aa02      	add	r2, sp, #8
    52a4:	4694      	mov	ip, r2
    52a6:	4463      	add	r3, ip
    52a8:	0018      	movs	r0, r3
    52aa:	4b4e      	ldr	r3, [pc, #312]	; (53e4 <ecc_mul+0x178>)
    52ac:	4798      	blx	r3
    52ae:	9000      	str	r0, [sp, #0]
    52b0:	2800      	cmp	r0, #0
    52b2:	d100      	bne.n	52b6 <ecc_mul+0x4a>
    52b4:	e083      	b.n	53be <ecc_mul+0x152>
        return false;
    }

    if (clear_cofactor == true) {
    52b6:	2d00      	cmp	r5, #0
    52b8:	d000      	beq.n	52bc <ecc_mul+0x50>
    52ba:	e084      	b.n	53c6 <ecc_mul+0x15a>
        cofactor_clearing(R);
    }

    modulo_order(k, k_odd);                                    // k_odd = k mod (order)      
    52bc:	a902      	add	r1, sp, #8
    52be:	0020      	movs	r0, r4
    52c0:	4b49      	ldr	r3, [pc, #292]	; (53e8 <ecc_mul+0x17c>)
    52c2:	4798      	blx	r3
    conversion_to_odd(k_odd, k_odd);                           // Converting scalar to odd using the prime subgroup order 
    52c4:	a902      	add	r1, sp, #8
    52c6:	0008      	movs	r0, r1
    52c8:	4b48      	ldr	r3, [pc, #288]	; (53ec <ecc_mul+0x180>)
    52ca:	4798      	blx	r3
    ecc_precomp(R, Table);                                     // Precomputation of points T[0],...,T[npoints-1] 
    52cc:	a988      	add	r1, sp, #544	; 0x220
    52ce:	23f7      	movs	r3, #247	; 0xf7
    52d0:	00db      	lsls	r3, r3, #3
    52d2:	aa02      	add	r2, sp, #8
    52d4:	4694      	mov	ip, r2
    52d6:	4463      	add	r3, ip
    52d8:	0018      	movs	r0, r3
    52da:	4b45      	ldr	r3, [pc, #276]	; (53f0 <ecc_mul+0x184>)
    52dc:	4798      	blx	r3
    fixed_window_recode((uint64_t*)k_odd, digits, sign_masks); // Scalar recoding
    52de:	aa0a      	add	r2, sp, #40	; 0x28
    52e0:	a949      	add	r1, sp, #292	; 0x124
    52e2:	a802      	add	r0, sp, #8
    52e4:	4b43      	ldr	r3, [pc, #268]	; (53f4 <ecc_mul+0x188>)
    52e6:	4798      	blx	r3
    table_lookup_1x8(Table, S, digits[t_VARBASE], sign_masks[t_VARBASE]);       
    52e8:	9b48      	ldr	r3, [sp, #288]	; 0x120
    52ea:	9a87      	ldr	r2, [sp, #540]	; 0x21c
    52ec:	21e3      	movs	r1, #227	; 0xe3
    52ee:	00c9      	lsls	r1, r1, #3
    52f0:	a802      	add	r0, sp, #8
    52f2:	4684      	mov	ip, r0
    52f4:	4461      	add	r1, ip
    52f6:	a888      	add	r0, sp, #544	; 0x220
    52f8:	4c3f      	ldr	r4, [pc, #252]	; (53f8 <ecc_mul+0x18c>)
    52fa:	47a0      	blx	r4
    R2_to_R4(S, R);                                            // Conversion to representation (2X,2Y,2Z)
    52fc:	23f7      	movs	r3, #247	; 0xf7
    52fe:	00db      	lsls	r3, r3, #3
    5300:	aa02      	add	r2, sp, #8
    5302:	4694      	mov	ip, r2
    5304:	4463      	add	r3, ip
    5306:	0019      	movs	r1, r3
    5308:	23e3      	movs	r3, #227	; 0xe3
    530a:	00db      	lsls	r3, r3, #3
    530c:	4463      	add	r3, ip
    530e:	0018      	movs	r0, r3
    5310:	4b3a      	ldr	r3, [pc, #232]	; (53fc <ecc_mul+0x190>)
    5312:	4798      	blx	r3
    5314:	24f4      	movs	r4, #244	; 0xf4
    
    for (i = (t_VARBASE-1); i >= 0; i--)
    {
        eccdouble(R);
    5316:	4d3a      	ldr	r5, [pc, #232]	; (5400 <ecc_mul+0x194>)
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    5318:	4f37      	ldr	r7, [pc, #220]	; (53f8 <ecc_mul+0x18c>)
        eccdouble(R);
        eccdouble(R);
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    531a:	4e3a      	ldr	r6, [pc, #232]	; (5404 <ecc_mul+0x198>)
        eccdouble(R);
    531c:	23f7      	movs	r3, #247	; 0xf7
    531e:	00db      	lsls	r3, r3, #3
    5320:	aa02      	add	r2, sp, #8
    5322:	4694      	mov	ip, r2
    5324:	4463      	add	r3, ip
    5326:	0018      	movs	r0, r3
    5328:	47a8      	blx	r5
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    532a:	ab0a      	add	r3, sp, #40	; 0x28
    532c:	58e3      	ldr	r3, [r4, r3]
    532e:	aa49      	add	r2, sp, #292	; 0x124
    5330:	58a2      	ldr	r2, [r4, r2]
    5332:	21e3      	movs	r1, #227	; 0xe3
    5334:	00c9      	lsls	r1, r1, #3
    5336:	a802      	add	r0, sp, #8
    5338:	4684      	mov	ip, r0
    533a:	4461      	add	r1, ip
    533c:	a888      	add	r0, sp, #544	; 0x220
    533e:	47b8      	blx	r7
        eccdouble(R);
    5340:	23f7      	movs	r3, #247	; 0xf7
    5342:	00db      	lsls	r3, r3, #3
    5344:	aa02      	add	r2, sp, #8
    5346:	4694      	mov	ip, r2
    5348:	4463      	add	r3, ip
    534a:	0018      	movs	r0, r3
    534c:	47a8      	blx	r5
        eccdouble(R);
    534e:	23f7      	movs	r3, #247	; 0xf7
    5350:	00db      	lsls	r3, r3, #3
    5352:	aa02      	add	r2, sp, #8
    5354:	4694      	mov	ip, r2
    5356:	4463      	add	r3, ip
    5358:	0018      	movs	r0, r3
    535a:	47a8      	blx	r5
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    535c:	23f7      	movs	r3, #247	; 0xf7
    535e:	00db      	lsls	r3, r3, #3
    5360:	aa02      	add	r2, sp, #8
    5362:	4694      	mov	ip, r2
    5364:	4463      	add	r3, ip
    5366:	0018      	movs	r0, r3
    5368:	47a8      	blx	r5
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    536a:	23f7      	movs	r3, #247	; 0xf7
    536c:	00db      	lsls	r3, r3, #3
    536e:	aa02      	add	r2, sp, #8
    5370:	4694      	mov	ip, r2
    5372:	4463      	add	r3, ip
    5374:	0019      	movs	r1, r3
    5376:	23e3      	movs	r3, #227	; 0xe3
    5378:	00db      	lsls	r3, r3, #3
    537a:	4463      	add	r3, ip
    537c:	0018      	movs	r0, r3
    537e:	47b0      	blx	r6
    5380:	3c04      	subs	r4, #4
    for (i = (t_VARBASE-1); i >= 0; i--)
    5382:	1d23      	adds	r3, r4, #4
    5384:	d1ca      	bne.n	531c <ecc_mul+0xb0>
    }
    eccnorm(R, A);                                             // Conversion to affine coordinates (x,y) and modular correction. 
    5386:	2388      	movs	r3, #136	; 0x88
    5388:	011b      	lsls	r3, r3, #4
    538a:	aa02      	add	r2, sp, #8
    538c:	4694      	mov	ip, r2
    538e:	4463      	add	r3, ip
    5390:	0019      	movs	r1, r3
    5392:	20f7      	movs	r0, #247	; 0xf7
    5394:	00c0      	lsls	r0, r0, #3
    5396:	4460      	add	r0, ip
    5398:	4b1b      	ldr	r3, [pc, #108]	; (5408 <ecc_mul+0x19c>)
    539a:	4798      	blx	r3
    from_ext_to_std(A->x, Q->x);
    539c:	9d01      	ldr	r5, [sp, #4]
    539e:	0029      	movs	r1, r5
    53a0:	2388      	movs	r3, #136	; 0x88
    53a2:	011b      	lsls	r3, r3, #4
    53a4:	aa02      	add	r2, sp, #8
    53a6:	4694      	mov	ip, r2
    53a8:	4463      	add	r3, ip
    53aa:	0018      	movs	r0, r3
    53ac:	4c17      	ldr	r4, [pc, #92]	; (540c <ecc_mul+0x1a0>)
    53ae:	47a0      	blx	r4
    from_ext_to_std(A->y, Q->y); 
    53b0:	0029      	movs	r1, r5
    53b2:	3120      	adds	r1, #32
    53b4:	4816      	ldr	r0, [pc, #88]	; (5410 <ecc_mul+0x1a4>)
    53b6:	ab02      	add	r3, sp, #8
    53b8:	469c      	mov	ip, r3
    53ba:	4460      	add	r0, ip
    53bc:	47a0      	blx	r4
    
    return true;
}
    53be:	9800      	ldr	r0, [sp, #0]
    53c0:	4b14      	ldr	r3, [pc, #80]	; (5414 <ecc_mul+0x1a8>)
    53c2:	449d      	add	sp, r3
    53c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cofactor_clearing(R);
    53c6:	20f7      	movs	r0, #247	; 0xf7
    53c8:	00c0      	lsls	r0, r0, #3
    53ca:	ab02      	add	r3, sp, #8
    53cc:	469c      	mov	ip, r3
    53ce:	4460      	add	r0, ip
    53d0:	4b11      	ldr	r3, [pc, #68]	; (5418 <ecc_mul+0x1ac>)
    53d2:	4798      	blx	r3
    53d4:	e772      	b.n	52bc <ecc_mul+0x50>
    53d6:	46c0      	nop			; (mov r8, r8)
    53d8:	fffff724 	.word	0xfffff724
    53dc:	00006877 	.word	0x00006877
    53e0:	00004a2d 	.word	0x00004a2d
    53e4:	00004a71 	.word	0x00004a71
    53e8:	00003cb9 	.word	0x00003cb9
    53ec:	00003cf1 	.word	0x00003cf1
    53f0:	000051a1 	.word	0x000051a1
    53f4:	0000504d 	.word	0x0000504d
    53f8:	00003dd1 	.word	0x00003dd1
    53fc:	000046e5 	.word	0x000046e5
    5400:	0000475d 	.word	0x0000475d
    5404:	0000491d 	.word	0x0000491d
    5408:	00004571 	.word	0x00004571
    540c:	00003a89 	.word	0x00003a89
    5410:	000008a8 	.word	0x000008a8
    5414:	000008dc 	.word	0x000008dc
    5418:	00005221 	.word	0x00005221

0000541c <CompressedPublicKeyGeneration>:


/*************** ECDH USING COMPRESSED, 32-BYTE PUBLIC KEYS ***************/

ECCRYPTO_STATUS CompressedPublicKeyGeneration(const unsigned char* SecretKey, unsigned char* PublicKey)
{ // Compressed public key generation for key exchange
    541c:	b510      	push	{r4, lr}
    541e:	b090      	sub	sp, #64	; 0x40
    5420:	000c      	movs	r4, r1
  // It produces a public key PublicKey, which is the encoding of P = SecretKey*G (G is the generator).
  // Input:  32-byte SecretKey
  // Output: 32-byte PublicKey
    point_t P;
    
    ecc_mul_fixed((digit_t*)SecretKey, P);  // Compute public key                                       
    5422:	4669      	mov	r1, sp
    5424:	4b04      	ldr	r3, [pc, #16]	; (5438 <CompressedPublicKeyGeneration+0x1c>)
    5426:	4798      	blx	r3
	encode(P, PublicKey);                   // Encode public key
    5428:	0021      	movs	r1, r4
    542a:	4668      	mov	r0, sp
    542c:	4b03      	ldr	r3, [pc, #12]	; (543c <CompressedPublicKeyGeneration+0x20>)
    542e:	4798      	blx	r3

    return ECCRYPTO_SUCCESS;
}
    5430:	2001      	movs	r0, #1
    5432:	b010      	add	sp, #64	; 0x40
    5434:	bd10      	pop	{r4, pc}
    5436:	46c0      	nop			; (mov r8, r8)
    5438:	00004cad 	.word	0x00004cad
    543c:	00002e71 	.word	0x00002e71

00005440 <CompressedKeyGeneration>:


ECCRYPTO_STATUS CompressedKeyGeneration(unsigned char* SecretKey, unsigned char* PublicKey)
{ // Keypair generation for key exchange. Public key is compressed to 32 bytes
    5440:	b570      	push	{r4, r5, r6, lr}
    5442:	0006      	movs	r6, r0
    5444:	000d      	movs	r5, r1
	//Status = RandomBytesFunction(SecretKey, 32);
	//if (Status != ECCRYPTO_SUCCESS) {
	//	goto cleanup;
	//}
  
    Status = CompressedPublicKeyGeneration(SecretKey, PublicKey);
    5446:	4b07      	ldr	r3, [pc, #28]	; (5464 <CompressedKeyGeneration+0x24>)
    5448:	4798      	blx	r3
    544a:	0004      	movs	r4, r0
    if (Status != ECCRYPTO_SUCCESS) {
    544c:	2801      	cmp	r0, #1
    544e:	d006      	beq.n	545e <CompressedKeyGeneration+0x1e>
    }

    return ECCRYPTO_SUCCESS;

cleanup:
    clear_words((unsigned int*)SecretKey, 256/(sizeof(unsigned int)*8));
    5450:	2108      	movs	r1, #8
    5452:	0030      	movs	r0, r6
    5454:	4e04      	ldr	r6, [pc, #16]	; (5468 <CompressedKeyGeneration+0x28>)
    5456:	47b0      	blx	r6
    clear_words((unsigned int*)PublicKey, 256/(sizeof(unsigned int)*8));
    5458:	2108      	movs	r1, #8
    545a:	0028      	movs	r0, r5
    545c:	47b0      	blx	r6

    return Status;
}
    545e:	0020      	movs	r0, r4
    5460:	bd70      	pop	{r4, r5, r6, pc}
    5462:	46c0      	nop			; (mov r8, r8)
    5464:	0000541d 	.word	0x0000541d
    5468:	0000455d 	.word	0x0000455d

0000546c <CompressedSecretAgreement>:


ECCRYPTO_STATUS CompressedSecretAgreement(const unsigned char* SecretKey, const unsigned char* PublicKey, unsigned char* SharedSecret)
{ // Secret agreement computation for key exchange using a compressed, 32-byte public key
    546c:	b570      	push	{r4, r5, r6, lr}
    546e:	b090      	sub	sp, #64	; 0x40
    5470:	0006      	movs	r6, r0
    5472:	0008      	movs	r0, r1
    5474:	0015      	movs	r5, r2
  // Inputs: 32-byte SecretKey and 32-byte PublicKey
  // Output: 32-byte SharedSecret
    point_t A;
    ECCRYPTO_STATUS Status = ECCRYPTO_ERROR_UNKNOWN;

    if ((PublicKey[15] & 0x80) != 0) {  // Is bit128(PublicKey) = 0?
    5476:	7bcb      	ldrb	r3, [r1, #15]
    5478:	2b7f      	cmp	r3, #127	; 0x7f
    547a:	d830      	bhi.n	54de <CompressedSecretAgreement+0x72>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
		goto cleanup;
    }

	Status = decode(PublicKey, A);    // Also verifies that A is on the curve. If it is not, it fails
    547c:	4669      	mov	r1, sp
    547e:	4b19      	ldr	r3, [pc, #100]	; (54e4 <CompressedSecretAgreement+0x78>)
    5480:	4798      	blx	r3
    5482:	0004      	movs	r4, r0
	if (Status != ECCRYPTO_SUCCESS) {
    5484:	2801      	cmp	r0, #1
    5486:	d006      	beq.n	5496 <CompressedSecretAgreement+0x2a>
	memmove(SharedSecret, (unsigned char*)A->y, 32);

	return ECCRYPTO_SUCCESS;
    
cleanup:
    clear_words((unsigned int*)SharedSecret, 256/(sizeof(unsigned int)*8));
    5488:	2108      	movs	r1, #8
    548a:	0028      	movs	r0, r5
    548c:	4b16      	ldr	r3, [pc, #88]	; (54e8 <CompressedSecretAgreement+0x7c>)
    548e:	4798      	blx	r3
    
    return Status;
}
    5490:	0020      	movs	r0, r4
    5492:	b010      	add	sp, #64	; 0x40
    5494:	bd70      	pop	{r4, r5, r6, pc}
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    5496:	2301      	movs	r3, #1
    5498:	466a      	mov	r2, sp
    549a:	0031      	movs	r1, r6
    549c:	4668      	mov	r0, sp
    549e:	4e13      	ldr	r6, [pc, #76]	; (54ec <CompressedSecretAgreement+0x80>)
    54a0:	47b0      	blx	r6
	if (Status != ECCRYPTO_SUCCESS) {
    54a2:	2800      	cmp	r0, #0
    54a4:	d101      	bne.n	54aa <CompressedSecretAgreement+0x3e>
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    54a6:	2400      	movs	r4, #0
    54a8:	e7ee      	b.n	5488 <CompressedSecretAgreement+0x1c>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    54aa:	2108      	movs	r1, #8
    54ac:	4668      	mov	r0, sp
    54ae:	4b10      	ldr	r3, [pc, #64]	; (54f0 <CompressedSecretAgreement+0x84>)
    54b0:	4798      	blx	r3
    54b2:	2800      	cmp	r0, #0
    54b4:	d105      	bne.n	54c2 <CompressedSecretAgreement+0x56>
	memmove(SharedSecret, (unsigned char*)A->y, 32);
    54b6:	2220      	movs	r2, #32
    54b8:	a908      	add	r1, sp, #32
    54ba:	0028      	movs	r0, r5
    54bc:	4b0d      	ldr	r3, [pc, #52]	; (54f4 <CompressedSecretAgreement+0x88>)
    54be:	4798      	blx	r3
	return ECCRYPTO_SUCCESS;
    54c0:	e7e6      	b.n	5490 <CompressedSecretAgreement+0x24>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    54c2:	2107      	movs	r1, #7
    54c4:	a809      	add	r0, sp, #36	; 0x24
    54c6:	4b0a      	ldr	r3, [pc, #40]	; (54f0 <CompressedSecretAgreement+0x84>)
    54c8:	4798      	blx	r3
    54ca:	2800      	cmp	r0, #0
    54cc:	d0f3      	beq.n	54b6 <CompressedSecretAgreement+0x4a>
    54ce:	9908      	ldr	r1, [sp, #32]
    54d0:	1e4b      	subs	r3, r1, #1
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    54d2:	2201      	movs	r2, #1
    54d4:	1a52      	subs	r2, r2, r1
    54d6:	4313      	orrs	r3, r2
    if (is_neutral_point(A)) {  // Is output = neutral point (0,1)?
    54d8:	d4ed      	bmi.n	54b6 <CompressedSecretAgreement+0x4a>
		Status = ECCRYPTO_ERROR_SHARED_KEY;
    54da:	2407      	movs	r4, #7
    54dc:	e7d4      	b.n	5488 <CompressedSecretAgreement+0x1c>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
    54de:	2406      	movs	r4, #6
    54e0:	e7d2      	b.n	5488 <CompressedSecretAgreement+0x1c>
    54e2:	46c0      	nop			; (mov r8, r8)
    54e4:	00002eb9 	.word	0x00002eb9
    54e8:	0000455d 	.word	0x0000455d
    54ec:	0000526d 	.word	0x0000526d
    54f0:	00002e4d 	.word	0x00002e4d
    54f4:	00006841 	.word	0x00006841

000054f8 <internalPermutation>:
static void messageFold(const uint8_t *message, uint8_t *cells){
    cells[0] ^= message[0];
    cells[1] ^= message[1];
}

static void internalPermutation(uint8_t *cells){
    54f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54fa:	46de      	mov	lr, fp
    54fc:	4657      	mov	r7, sl
    54fe:	464e      	mov	r6, r9
    5500:	4645      	mov	r5, r8
    5502:	b5e0      	push	{r5, r6, r7, lr}
    5504:	b08b      	sub	sp, #44	; 0x2c
    5506:	0007      	movs	r7, r0
    int round;
    for(round=0;round<12;round++){
    5508:	2300      	movs	r3, #0
    550a:	9307      	str	r3, [sp, #28]
    550c:	e0c6      	b.n	569c <internalPermutation+0x1a4>
    for(i=0;i<D_VAL;i++){
        tmp_cells[i]=0;
        for(j=0;j<D_VAL;j++){
            uint8_t nib = cells[(col+(D_VAL*j))/2];
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
            else{nib = (nib & 0x0F);}
    550e:	200f      	movs	r0, #15
    5510:	4002      	ands	r2, r0
    5512:	e03e      	b.n	5592 <internalPermutation+0x9a>
                ret=MMUL[loc];
                b=0;
            }
            else{
                // Account for odd value as (a x 3) is (a x (2 + 1))
                if(b&1){
    5514:	2301      	movs	r3, #1
    5516:	4223      	tst	r3, r4
    5518:	d003      	beq.n	5522 <internalPermutation+0x2a>
                    odd ^= ret;
    551a:	4661      	mov	r1, ip
    551c:	4051      	eors	r1, r2
    551e:	b2cb      	uxtb	r3, r1
    5520:	469c      	mov	ip, r3
                }

                loc=ret; // loc holds the current value to be multiplied by 2
                // (a x 2) not found
                if(MMUL[32 + loc] > 0xF){
    5522:	9204      	str	r2, [sp, #16]
    5524:	2320      	movs	r3, #32
    5526:	4698      	mov	r8, r3
    5528:	4490      	add	r8, r2
    552a:	4b83      	ldr	r3, [pc, #524]	; (5738 <internalPermutation+0x240>)
    552c:	4641      	mov	r1, r8
    552e:	5c59      	ldrb	r1, [r3, r1]
    5530:	290f      	cmp	r1, #15
    5532:	d912      	bls.n	555a <internalPermutation+0x62>
                    ret = ret << 1;
    5534:	0052      	lsls	r2, r2, #1
    5536:	b2d1      	uxtb	r1, r2
                    // XOR with constant if shifted results is larger than 4 bits
                    if(ret&0x10){ret^=G_CON;}
    5538:	2310      	movs	r3, #16
    553a:	420b      	tst	r3, r1
    553c:	d002      	beq.n	5544 <internalPermutation+0x4c>
    553e:	3b0d      	subs	r3, #13
    5540:	4059      	eors	r1, r3
    5542:	b2c9      	uxtb	r1, r1

                    ret &= 0xF; // Only care about lower nibble
    5544:	230f      	movs	r3, #15
    5546:	4019      	ands	r1, r3
                    MMUL[32 + loc] = ret;
    5548:	4b7b      	ldr	r3, [pc, #492]	; (5738 <internalPermutation+0x240>)
    554a:	4642      	mov	r2, r8
    554c:	5499      	strb	r1, [r3, r2]
                    MMUL[16*loc + 2] = ret;
    554e:	9b04      	ldr	r3, [sp, #16]
    5550:	011a      	lsls	r2, r3, #4
    5552:	4b79      	ldr	r3, [pc, #484]	; (5738 <internalPermutation+0x240>)
    5554:	4698      	mov	r8, r3
    5556:	4442      	add	r2, r8
    5558:	7091      	strb	r1, [r2, #2]
                }
                else{
                    ret = MMUL[32 + loc];
                }
                b = b >> 1;
    555a:	0864      	lsrs	r4, r4, #1
    555c:	b2e4      	uxtb	r4, r4
    555e:	000a      	movs	r2, r1
    5560:	e034      	b.n	55cc <internalPermutation+0xd4>
    5562:	9b01      	ldr	r3, [sp, #4]
        while(b>1){
    5564:	0011      	movs	r1, r2
    5566:	e03b      	b.n	55e0 <internalPermutation+0xe8>
        if(b==1){return a;} // Multiply a by 1 is a
    5568:	0003      	movs	r3, r0
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    556a:	aa08      	add	r2, sp, #32
    556c:	5cba      	ldrb	r2, [r7, r2]
    556e:	4053      	eors	r3, r2
    5570:	aa08      	add	r2, sp, #32
    5572:	54bb      	strb	r3, [r7, r2]
    5574:	3506      	adds	r5, #6
    5576:	3601      	adds	r6, #1
        for(j=0;j<D_VAL;j++){
    5578:	2d24      	cmp	r5, #36	; 0x24
    557a:	d03f      	beq.n	55fc <internalPermutation+0x104>
            uint8_t nib = cells[(col+(D_VAL*j))/2];
    557c:	4653      	mov	r3, sl
    557e:	18ea      	adds	r2, r5, r3
    5580:	0fd3      	lsrs	r3, r2, #31
    5582:	189b      	adds	r3, r3, r2
    5584:	105b      	asrs	r3, r3, #1
    5586:	465a      	mov	r2, fp
    5588:	5cd2      	ldrb	r2, [r2, r3]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    558a:	464b      	mov	r3, r9
    558c:	2b00      	cmp	r3, #0
    558e:	d1be      	bne.n	550e <internalPermutation+0x16>
    5590:	0912      	lsrs	r2, r2, #4
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    5592:	7831      	ldrb	r1, [r6, #0]
    uint8_t ret = MMUL[(16*a)+b];
    5594:	0108      	lsls	r0, r1, #4
    5596:	4b68      	ldr	r3, [pc, #416]	; (5738 <internalPermutation+0x240>)
    5598:	181b      	adds	r3, r3, r0
    559a:	5c9b      	ldrb	r3, [r3, r2]
    if(ret > 0x0F){
    559c:	2b0f      	cmp	r3, #15
    559e:	d9e4      	bls.n	556a <internalPermutation+0x72>
    a &= 0x0F;
    55a0:	230f      	movs	r3, #15
    55a2:	0018      	movs	r0, r3
    55a4:	4008      	ands	r0, r1
    b &= 0x0F;
    55a6:	4013      	ands	r3, r2
        if(a<b){SWAP(a,b);} // Want a to be larger to reduce computation
    55a8:	4298      	cmp	r0, r3
    55aa:	d206      	bcs.n	55ba <internalPermutation+0xc2>
    55ac:	4051      	eors	r1, r2
    55ae:	404a      	eors	r2, r1
    55b0:	200f      	movs	r0, #15
    55b2:	0003      	movs	r3, r0
    55b4:	4013      	ands	r3, r2
    55b6:	4051      	eors	r1, r2
    55b8:	4008      	ands	r0, r1
        if(b==0){return b;} // Multiply a by 0 is 0
    55ba:	2b00      	cmp	r3, #0
    55bc:	d0d5      	beq.n	556a <internalPermutation+0x72>
        if(b==1){return a;} // Multiply a by 1 is a
    55be:	2b01      	cmp	r3, #1
    55c0:	d0d2      	beq.n	5568 <internalPermutation+0x70>
    55c2:	0002      	movs	r2, r0
    55c4:	001c      	movs	r4, r3
    55c6:	2100      	movs	r1, #0
    55c8:	468c      	mov	ip, r1
    55ca:	9301      	str	r3, [sp, #4]
        while(b>1){
    55cc:	2c01      	cmp	r4, #1
    55ce:	d9c8      	bls.n	5562 <internalPermutation+0x6a>
            loc=(ret*16)+b;
    55d0:	0111      	lsls	r1, r2, #4
    55d2:	1861      	adds	r1, r4, r1
            if(MMUL[loc]<0x10){
    55d4:	b2c9      	uxtb	r1, r1
    55d6:	4b58      	ldr	r3, [pc, #352]	; (5738 <internalPermutation+0x240>)
    55d8:	5c59      	ldrb	r1, [r3, r1]
    55da:	290f      	cmp	r1, #15
    55dc:	d89a      	bhi.n	5514 <internalPermutation+0x1c>
    55de:	9b01      	ldr	r3, [sp, #4]
            }
        }
        ret ^= odd; // One last "add" if multiplying by odd number at any point
    55e0:	4662      	mov	r2, ip
    55e2:	404a      	eors	r2, r1
    55e4:	0011      	movs	r1, r2
        ret &= 0xF; // Only care about lower nibble
    55e6:	220f      	movs	r2, #15
    55e8:	4011      	ands	r1, r2

        // Update map so won't have to recompute a x b
        MMUL[(a*16)+b_orig]=ret;
    55ea:	4a53      	ldr	r2, [pc, #332]	; (5738 <internalPermutation+0x240>)
    55ec:	0104      	lsls	r4, r0, #4
    55ee:	1914      	adds	r4, r2, r4
    55f0:	54e1      	strb	r1, [r4, r3]
        MMUL[(b_orig*16)+a]=ret;
    55f2:	011b      	lsls	r3, r3, #4
    55f4:	18d2      	adds	r2, r2, r3
    55f6:	5411      	strb	r1, [r2, r0]
        ret &= 0xF; // Only care about lower nibble
    55f8:	000b      	movs	r3, r1
    55fa:	e7b6      	b.n	556a <internalPermutation+0x72>
    for(i=0;i<D_VAL;i++){
    55fc:	9b02      	ldr	r3, [sp, #8]
    55fe:	3301      	adds	r3, #1
    5600:	9302      	str	r3, [sp, #8]
    5602:	9a03      	ldr	r2, [sp, #12]
    5604:	3206      	adds	r2, #6
    5606:	9203      	str	r2, [sp, #12]
    5608:	2b06      	cmp	r3, #6
    560a:	d00b      	beq.n	5624 <internalPermutation+0x12c>
    560c:	9902      	ldr	r1, [sp, #8]
    560e:	000f      	movs	r7, r1
        tmp_cells[i]=0;
    5610:	2300      	movs	r3, #0
    5612:	aa08      	add	r2, sp, #32
    5614:	548b      	strb	r3, [r1, r2]
    5616:	9e03      	ldr	r6, [sp, #12]
    5618:	9d06      	ldr	r5, [sp, #24]
    561a:	33ff      	adds	r3, #255	; 0xff
    561c:	9a05      	ldr	r2, [sp, #20]
    561e:	401a      	ands	r2, r3
    5620:	4692      	mov	sl, r2
    5622:	e7ab      	b.n	557c <internalPermutation+0x84>
    5624:	9b05      	ldr	r3, [sp, #20]
    5626:	469c      	mov	ip, r3
    5628:	464f      	mov	r7, r9
    562a:	4650      	mov	r0, sl
    for(i=0;i<D_VAL;i++){
    562c:	2100      	movs	r1, #0
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    562e:	240f      	movs	r4, #15
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    5630:	465a      	mov	r2, fp
    5632:	e00d      	b.n	5650 <internalPermutation+0x158>
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    5634:	0fc3      	lsrs	r3, r0, #31
    5636:	181b      	adds	r3, r3, r0
    5638:	105b      	asrs	r3, r3, #1
    563a:	18d3      	adds	r3, r2, r3
    563c:	781d      	ldrb	r5, [r3, #0]
    563e:	43a5      	bics	r5, r4
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    5640:	ae08      	add	r6, sp, #32
    5642:	5d8e      	ldrb	r6, [r1, r6]
    5644:	4335      	orrs	r5, r6
    5646:	701d      	strb	r5, [r3, #0]
    for(i=0;i<D_VAL;i++){
    5648:	3101      	adds	r1, #1
    564a:	3006      	adds	r0, #6
    564c:	2906      	cmp	r1, #6
    564e:	d00d      	beq.n	566c <internalPermutation+0x174>
        if(col%2 == 0){
    5650:	2f00      	cmp	r7, #0
    5652:	d1ef      	bne.n	5634 <internalPermutation+0x13c>
            cells[(col+(D_VAL*i))/2] &= 0x0F;
    5654:	0fc3      	lsrs	r3, r0, #31
    5656:	181b      	adds	r3, r3, r0
    5658:	105b      	asrs	r3, r3, #1
    565a:	18d3      	adds	r3, r2, r3
    565c:	781d      	ldrb	r5, [r3, #0]
    565e:	4025      	ands	r5, r4
            cells[(col+(D_VAL*i))/2] |= (tmp_cells[i] << 4);
    5660:	ae08      	add	r6, sp, #32
    5662:	5d8e      	ldrb	r6, [r1, r6]
    5664:	0136      	lsls	r6, r6, #4
    5666:	4335      	orrs	r5, r6
    5668:	701d      	strb	r5, [r3, #0]
    566a:	e7ed      	b.n	5648 <internalPermutation+0x150>
    566c:	4693      	mov	fp, r2
    for(i=0;i<D_VAL;i++){
    566e:	2301      	movs	r3, #1
    5670:	4698      	mov	r8, r3
    5672:	44c4      	add	ip, r8
    5674:	4663      	mov	r3, ip
    5676:	2b06      	cmp	r3, #6
    5678:	d00a      	beq.n	5690 <internalPermutation+0x198>
    567a:	4b30      	ldr	r3, [pc, #192]	; (573c <internalPermutation+0x244>)
    567c:	9303      	str	r3, [sp, #12]
    for(i=0;i<D_VAL;i++){
    567e:	2300      	movs	r3, #0
    5680:	9302      	str	r3, [sp, #8]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    5682:	4667      	mov	r7, ip
    5684:	3301      	adds	r3, #1
    5686:	401f      	ands	r7, r3
    5688:	4663      	mov	r3, ip
    568a:	9305      	str	r3, [sp, #20]
    568c:	46b9      	mov	r9, r7
    568e:	e7bd      	b.n	560c <internalPermutation+0x114>
    5690:	0017      	movs	r7, r2
    for(round=0;round<12;round++){
    5692:	9b07      	ldr	r3, [sp, #28]
    5694:	3301      	adds	r3, #1
    5696:	9307      	str	r3, [sp, #28]
    5698:	2b0c      	cmp	r3, #12
    569a:	d046      	beq.n	572a <internalPermutation+0x232>
        cells[i*T_VAL/D_VAL] ^= (RC[round] ^ IC[i]) << 4;
    569c:	4b28      	ldr	r3, [pc, #160]	; (5740 <internalPermutation+0x248>)
    569e:	9a07      	ldr	r2, [sp, #28]
    56a0:	5cd3      	ldrb	r3, [r2, r3]
    56a2:	4698      	mov	r8, r3
    56a4:	4d27      	ldr	r5, [pc, #156]	; (5744 <internalPermutation+0x24c>)
    56a6:	2400      	movs	r4, #0
    56a8:	4e27      	ldr	r6, [pc, #156]	; (5748 <internalPermutation+0x250>)
    56aa:	003b      	movs	r3, r7
    56ac:	4647      	mov	r7, r8
    56ae:	4698      	mov	r8, r3
    56b0:	2106      	movs	r1, #6
    56b2:	0020      	movs	r0, r4
    56b4:	47b0      	blx	r6
    56b6:	4440      	add	r0, r8
    56b8:	782b      	ldrb	r3, [r5, #0]
    56ba:	407b      	eors	r3, r7
    56bc:	011b      	lsls	r3, r3, #4
    56be:	7802      	ldrb	r2, [r0, #0]
    56c0:	4053      	eors	r3, r2
    56c2:	7003      	strb	r3, [r0, #0]
    56c4:	3412      	adds	r4, #18
    56c6:	3501      	adds	r5, #1
    for(i=0;i<D_VAL;i++){
    56c8:	2c6c      	cmp	r4, #108	; 0x6c
    56ca:	d1f1      	bne.n	56b0 <internalPermutation+0x1b8>
    56cc:	4647      	mov	r7, r8
    56ce:	4641      	mov	r1, r8
    56d0:	4645      	mov	r5, r8
    56d2:	3512      	adds	r5, #18
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    56d4:	481d      	ldr	r0, [pc, #116]	; (574c <internalPermutation+0x254>)
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    56d6:	3c5d      	subs	r4, #93	; 0x5d
        uint16_t tmp=cells[i];
    56d8:	780a      	ldrb	r2, [r1, #0]
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    56da:	0913      	lsrs	r3, r2, #4
    56dc:	5cc3      	ldrb	r3, [r0, r3]
    56de:	011b      	lsls	r3, r3, #4
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    56e0:	4022      	ands	r2, r4
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    56e2:	5c82      	ldrb	r2, [r0, r2]
    56e4:	4313      	orrs	r3, r2
    56e6:	700b      	strb	r3, [r1, #0]
    56e8:	3101      	adds	r1, #1
    for(i=0;i<T_VAL;i++){
    56ea:	428d      	cmp	r5, r1
    56ec:	d1f4      	bne.n	56d8 <internalPermutation+0x1e0>
    56ee:	1cf9      	adds	r1, r7, #3
    56f0:	2314      	movs	r3, #20
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    56f2:	2018      	movs	r0, #24
    56f4:	001a      	movs	r2, r3
        tmp1|=(cells[i*3]<<16);
    56f6:	780b      	ldrb	r3, [r1, #0]
    56f8:	041b      	lsls	r3, r3, #16
        tmp1|=(cells[(i*3)+1]<<8);
    56fa:	784c      	ldrb	r4, [r1, #1]
    56fc:	0224      	lsls	r4, r4, #8
        tmp1|=(cells[(i*3)+2]);
    56fe:	4323      	orrs	r3, r4
    5700:	788c      	ldrb	r4, [r1, #2]
    5702:	4323      	orrs	r3, r4
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    5704:	1a84      	subs	r4, r0, r2
    5706:	001d      	movs	r5, r3
    5708:	40a5      	lsls	r5, r4
    570a:	40d3      	lsrs	r3, r2
    570c:	432b      	orrs	r3, r5
        cells[i*3]=(tmp1 & 0xFF0000) >> 16;
    570e:	0c1c      	lsrs	r4, r3, #16
    5710:	700c      	strb	r4, [r1, #0]
        cells[(i*3)+1] = (tmp1 & 0xFF00) >> 8;
    5712:	0a1c      	lsrs	r4, r3, #8
    5714:	704c      	strb	r4, [r1, #1]
        cells[(i*3)+2] = (tmp1 & 0xFF);
    5716:	708b      	strb	r3, [r1, #2]
    5718:	3103      	adds	r1, #3
    571a:	3a04      	subs	r2, #4
    for(i=1;i<D_VAL;i++){
    571c:	2a00      	cmp	r2, #0
    571e:	d1ea      	bne.n	56f6 <internalPermutation+0x1fe>
    5720:	9206      	str	r2, [sp, #24]
    5722:	2300      	movs	r3, #0
    5724:	469c      	mov	ip, r3
    5726:	46bb      	mov	fp, r7
    5728:	e7a7      	b.n	567a <internalPermutation+0x182>
}
    572a:	b00b      	add	sp, #44	; 0x2c
    572c:	bc3c      	pop	{r2, r3, r4, r5}
    572e:	4690      	mov	r8, r2
    5730:	4699      	mov	r9, r3
    5732:	46a2      	mov	sl, r4
    5734:	46ab      	mov	fp, r5
    5736:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5738:	20000004 	.word	0x20000004
    573c:	0000adb8 	.word	0x0000adb8
    5740:	0000ade4 	.word	0x0000ade4
    5744:	0000addc 	.word	0x0000addc
    5748:	000065b9 	.word	0x000065b9
    574c:	0000adf0 	.word	0x0000adf0

00005750 <photon128>:
void photon128(uint8_t *message, const int32_t message_bytes, uint8_t *hash){
    5750:	b5f0      	push	{r4, r5, r6, r7, lr}
    5752:	46d6      	mov	lr, sl
    5754:	464f      	mov	r7, r9
    5756:	4646      	mov	r6, r8
    5758:	b5c0      	push	{r6, r7, lr}
    575a:	b088      	sub	sp, #32
    575c:	0005      	movs	r5, r0
    575e:	9001      	str	r0, [sp, #4]
    5760:	4689      	mov	r9, r1
    5762:	0016      	movs	r6, r2
    memset((uint8_t *) cells,0,T_VAL-3);
    5764:	ac03      	add	r4, sp, #12
    5766:	220f      	movs	r2, #15
    5768:	2100      	movs	r1, #0
    576a:	0020      	movs	r0, r4
    576c:	4b30      	ldr	r3, [pc, #192]	; (5830 <photon128+0xe0>)
    576e:	4798      	blx	r3
    cells[15]=0x20;
    5770:	2320      	movs	r3, #32
    5772:	73e3      	strb	r3, [r4, #15]
    cells[16]=0x10;
    5774:	3b10      	subs	r3, #16
    5776:	7423      	strb	r3, [r4, #16]
    cells[17]=0x10;
    5778:	7463      	strb	r3, [r4, #17]
    for(i=0;i<message_bytes/R_VAL;i++){
    577a:	464b      	mov	r3, r9
    577c:	0fdb      	lsrs	r3, r3, #31
    577e:	444b      	add	r3, r9
    5780:	105b      	asrs	r3, r3, #1
    5782:	469a      	mov	sl, r3
    5784:	2b00      	cmp	r3, #0
    5786:	dd49      	ble.n	581c <photon128+0xcc>
    5788:	005b      	lsls	r3, r3, #1
    578a:	46a8      	mov	r8, r5
    578c:	4498      	add	r8, r3
    cells[0] ^= message[0];
    578e:	ac03      	add	r4, sp, #12
        internalPermutation(&cells[0]);
    5790:	4f28      	ldr	r7, [pc, #160]	; (5834 <photon128+0xe4>)
    cells[0] ^= message[0];
    5792:	7823      	ldrb	r3, [r4, #0]
    5794:	782a      	ldrb	r2, [r5, #0]
    5796:	4053      	eors	r3, r2
    5798:	7023      	strb	r3, [r4, #0]
    cells[1] ^= message[1];
    579a:	7863      	ldrb	r3, [r4, #1]
    579c:	786a      	ldrb	r2, [r5, #1]
    579e:	4053      	eors	r3, r2
    57a0:	7063      	strb	r3, [r4, #1]
        internalPermutation(&cells[0]);
    57a2:	0020      	movs	r0, r4
    57a4:	47b8      	blx	r7
    57a6:	3502      	adds	r5, #2
    for(i=0;i<message_bytes/R_VAL;i++){
    57a8:	4545      	cmp	r5, r8
    57aa:	d1f2      	bne.n	5792 <photon128+0x42>
    57ac:	4653      	mov	r3, sl
    if(message_bytes%2){
    57ae:	464a      	mov	r2, r9
    57b0:	07d2      	lsls	r2, r2, #31
    57b2:	d535      	bpl.n	5820 <photon128+0xd0>
        cells[0] ^= message[i*2];
    57b4:	aa03      	add	r2, sp, #12
    57b6:	005b      	lsls	r3, r3, #1
    57b8:	9901      	ldr	r1, [sp, #4]
    57ba:	5c5b      	ldrb	r3, [r3, r1]
    57bc:	7811      	ldrb	r1, [r2, #0]
    57be:	404b      	eors	r3, r1
    57c0:	7013      	strb	r3, [r2, #0]
        cells[1] ^= 0x80; //Padding
    57c2:	7851      	ldrb	r1, [r2, #1]
    57c4:	2380      	movs	r3, #128	; 0x80
    57c6:	425b      	negs	r3, r3
    57c8:	404b      	eors	r3, r1
    57ca:	7053      	strb	r3, [r2, #1]
    internalPermutation(&cells[0]);
    57cc:	ac03      	add	r4, sp, #12
    57ce:	0020      	movs	r0, r4
    57d0:	4b18      	ldr	r3, [pc, #96]	; (5834 <photon128+0xe4>)
    57d2:	4798      	blx	r3
    memset(hash,0,N_VAL);
    57d4:	2210      	movs	r2, #16
    57d6:	2100      	movs	r1, #0
    57d8:	0030      	movs	r0, r6
    57da:	4b15      	ldr	r3, [pc, #84]	; (5830 <photon128+0xe0>)
    57dc:	4798      	blx	r3
    hash[0] |= cells[0];
    57de:	7833      	ldrb	r3, [r6, #0]
    57e0:	7822      	ldrb	r2, [r4, #0]
    57e2:	4313      	orrs	r3, r2
    57e4:	7033      	strb	r3, [r6, #0]
    hash[1] |= cells[1];
    57e6:	7873      	ldrb	r3, [r6, #1]
    57e8:	7862      	ldrb	r2, [r4, #1]
    57ea:	4313      	orrs	r3, r2
    57ec:	7073      	strb	r3, [r6, #1]
    57ee:	1cb4      	adds	r4, r6, #2
    57f0:	3610      	adds	r6, #16
        internalPermutation(&cells[0]);
    57f2:	ad03      	add	r5, sp, #12
    57f4:	4f0f      	ldr	r7, [pc, #60]	; (5834 <photon128+0xe4>)
    57f6:	0028      	movs	r0, r5
    57f8:	47b8      	blx	r7
        hash[2*i] |= cells[0];
    57fa:	7823      	ldrb	r3, [r4, #0]
    57fc:	782a      	ldrb	r2, [r5, #0]
    57fe:	4313      	orrs	r3, r2
    5800:	7023      	strb	r3, [r4, #0]
        hash[(2*i)+1] |= cells[1];
    5802:	7863      	ldrb	r3, [r4, #1]
    5804:	786a      	ldrb	r2, [r5, #1]
    5806:	4313      	orrs	r3, r2
    5808:	7063      	strb	r3, [r4, #1]
    580a:	3402      	adds	r4, #2
    for(i=1;i<N_VAL/2;i++){
    580c:	42b4      	cmp	r4, r6
    580e:	d1f2      	bne.n	57f6 <photon128+0xa6>
}
    5810:	b008      	add	sp, #32
    5812:	bc1c      	pop	{r2, r3, r4}
    5814:	4690      	mov	r8, r2
    5816:	4699      	mov	r9, r3
    5818:	46a2      	mov	sl, r4
    581a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(i=0;i<message_bytes/R_VAL;i++){
    581c:	2300      	movs	r3, #0
    581e:	e7c6      	b.n	57ae <photon128+0x5e>
        cells[0] ^= 0x80;
    5820:	aa03      	add	r2, sp, #12
    5822:	7811      	ldrb	r1, [r2, #0]
    5824:	2380      	movs	r3, #128	; 0x80
    5826:	425b      	negs	r3, r3
    5828:	404b      	eors	r3, r1
    582a:	7013      	strb	r3, [r2, #0]
    582c:	e7ce      	b.n	57cc <photon128+0x7c>
    582e:	46c0      	nop			; (mov r8, r8)
    5830:	00006877 	.word	0x00006877
    5834:	000054f9 	.word	0x000054f9

00005838 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5838:	b570      	push	{r4, r5, r6, lr}
    583a:	b082      	sub	sp, #8
    583c:	0005      	movs	r5, r0
    583e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    5840:	2200      	movs	r2, #0
    5842:	466b      	mov	r3, sp
    5844:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5846:	4c06      	ldr	r4, [pc, #24]	; (5860 <usart_serial_getchar+0x28>)
    5848:	466b      	mov	r3, sp
    584a:	1d99      	adds	r1, r3, #6
    584c:	0028      	movs	r0, r5
    584e:	47a0      	blx	r4
    5850:	2800      	cmp	r0, #0
    5852:	d1f9      	bne.n	5848 <usart_serial_getchar+0x10>

	*c = temp;
    5854:	466b      	mov	r3, sp
    5856:	3306      	adds	r3, #6
    5858:	881b      	ldrh	r3, [r3, #0]
    585a:	7033      	strb	r3, [r6, #0]
}
    585c:	b002      	add	sp, #8
    585e:	bd70      	pop	{r4, r5, r6, pc}
    5860:	0000208b 	.word	0x0000208b

00005864 <usart_serial_putchar>:
{
    5864:	b570      	push	{r4, r5, r6, lr}
    5866:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    5868:	b28c      	uxth	r4, r1
    586a:	4e03      	ldr	r6, [pc, #12]	; (5878 <usart_serial_putchar+0x14>)
    586c:	0021      	movs	r1, r4
    586e:	0028      	movs	r0, r5
    5870:	47b0      	blx	r6
    5872:	2800      	cmp	r0, #0
    5874:	d1fa      	bne.n	586c <usart_serial_putchar+0x8>
}
    5876:	bd70      	pop	{r4, r5, r6, pc}
    5878:	00002065 	.word	0x00002065

0000587c <CAN0_Handler>:
	| CAN_PROTOCOL_ERROR_DATA);
}
//! [can_init_setup]


void CAN0_Handler(void) {
    587c:	b5f0      	push	{r4, r5, r6, r7, lr}
    587e:	46ce      	mov	lr, r9
    5880:	4647      	mov	r7, r8
    5882:	b580      	push	{r7, lr}
    5884:	b083      	sub	sp, #12
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
    5886:	4bb2      	ldr	r3, [pc, #712]	; (5b50 <CAN0_Handler+0x2d4>)
    5888:	6819      	ldr	r1, [r3, #0]
    588a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
volatile uint32_t rx_buffer_index;
volatile uint32_t status = can_read_interrupt_status(&can_instance);
    588c:	9300      	str	r3, [sp, #0]
//printf("Status = %i, Pubkey[2][6] = %02x",status,StoredPublicKeys[2][6]);

if ((status & CAN_PROTOCOL_ERROR_ARBITRATION)
    588e:	9b00      	ldr	r3, [sp, #0]
    5890:	011b      	lsls	r3, r3, #4
    5892:	d414      	bmi.n	58be <CAN0_Handler+0x42>
|| (status & CAN_PROTOCOL_ERROR_DATA)) {
    5894:	9b00      	ldr	r3, [sp, #0]
    5896:	00db      	lsls	r3, r3, #3
    5898:	d411      	bmi.n	58be <CAN0_Handler+0x42>
		| CAN_PROTOCOL_ERROR_DATA);
	//printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
}

// Enrollment stage:
else if (STAGE == ENROLLMENT) {
    589a:	4bae      	ldr	r3, [pc, #696]	; (5b54 <CAN0_Handler+0x2d8>)
    589c:	781b      	ldrb	r3, [r3, #0]
    589e:	2b00      	cmp	r3, #0
    58a0:	d14f      	bne.n	5942 <CAN0_Handler+0xc6>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    58a2:	9b00      	ldr	r3, [sp, #0]
    58a4:	031b      	lsls	r3, r3, #12
    58a6:	d50d      	bpl.n	58c4 <CAN0_Handler+0x48>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    58a8:	2380      	movs	r3, #128	; 0x80
    58aa:	031b      	lsls	r3, r3, #12
    58ac:	650b      	str	r3, [r1, #80]	; 0x50
    58ae:	2720      	movs	r7, #32
    58b0:	427f      	negs	r7, r7
		can_clear_interrupt_status(&can_instance,CAN_RX_BUFFER_NEW_MESSAGE);
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    58b2:	2400      	movs	r4, #0
			if (can_rx_get_buffer_status(&can_instance, i)) {
				rx_buffer_index = i;
				can_rx_clear_buffer_status(&can_instance, i);
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    58b4:	4ba8      	ldr	r3, [pc, #672]	; (5b58 <CAN0_Handler+0x2dc>)
    58b6:	4698      	mov	r8, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    58b8:	4ba8      	ldr	r3, [pc, #672]	; (5b5c <CAN0_Handler+0x2e0>)
    58ba:	4699      	mov	r9, r3
    58bc:	e014      	b.n	58e8 <CAN0_Handler+0x6c>
    58be:	23c0      	movs	r3, #192	; 0xc0
    58c0:	055b      	lsls	r3, r3, #21
    58c2:	650b      	str	r3, [r1, #80]	; 0x50
			}
		}
	}
}

}
    58c4:	b003      	add	sp, #12
    58c6:	bc0c      	pop	{r2, r3}
    58c8:	4690      	mov	r8, r2
    58ca:	4699      	mov	r9, r3
    58cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    58ce:	4ba0      	ldr	r3, [pc, #640]	; (5b50 <CAN0_Handler+0x2d4>)
    58d0:	681a      	ldr	r2, [r3, #0]
    58d2:	239c      	movs	r3, #156	; 0x9c
    58d4:	58d0      	ldr	r0, [r2, r3]
    58d6:	3b9b      	subs	r3, #155	; 0x9b
    58d8:	40bb      	lsls	r3, r7
			if (can_rx_get_buffer_status(&can_instance, i)) {
    58da:	4203      	tst	r3, r0
    58dc:	d000      	beq.n	58e0 <CAN0_Handler+0x64>
    58de:	e133      	b.n	5b48 <CAN0_Handler+0x2cc>
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    58e0:	3401      	adds	r4, #1
    58e2:	3701      	adds	r7, #1
    58e4:	2c10      	cmp	r4, #16
    58e6:	d0ed      	beq.n	58c4 <CAN0_Handler+0x48>
	if (index < 32) {
    58e8:	2c1f      	cmp	r4, #31
    58ea:	d8f0      	bhi.n	58ce <CAN0_Handler+0x52>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    58ec:	4b98      	ldr	r3, [pc, #608]	; (5b50 <CAN0_Handler+0x2d4>)
    58ee:	681a      	ldr	r2, [r3, #0]
    58f0:	2398      	movs	r3, #152	; 0x98
    58f2:	58d0      	ldr	r0, [r2, r3]
    58f4:	3b97      	subs	r3, #151	; 0x97
    58f6:	40a3      	lsls	r3, r4
			if (can_rx_get_buffer_status(&can_instance, i)) {
    58f8:	4203      	tst	r3, r0
    58fa:	d0f1      	beq.n	58e0 <CAN0_Handler+0x64>
				rx_buffer_index = i;
    58fc:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT1.reg = (1 << index);
    58fe:	2198      	movs	r1, #152	; 0x98
    5900:	5053      	str	r3, [r2, r1]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    5902:	9b01      	ldr	r3, [sp, #4]
    5904:	2592      	movs	r5, #146	; 0x92
    5906:	006d      	lsls	r5, r5, #1
    5908:	436b      	muls	r3, r5
    590a:	4642      	mov	r2, r8
    590c:	5c9e      	ldrb	r6, [r3, r2]
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    590e:	9901      	ldr	r1, [sp, #4]
    5910:	9a01      	ldr	r2, [sp, #4]
    5912:	4369      	muls	r1, r5
    5914:	3104      	adds	r1, #4
    5916:	00f3      	lsls	r3, r6, #3
    5918:	199b      	adds	r3, r3, r6
    591a:	00db      	lsls	r3, r3, #3
    591c:	18c9      	adds	r1, r1, r3
    591e:	4441      	add	r1, r8
    5920:	488b      	ldr	r0, [pc, #556]	; (5b50 <CAN0_Handler+0x2d4>)
    5922:	47c8      	blx	r9
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    5924:	9b01      	ldr	r3, [sp, #4]
    5926:	435d      	muls	r5, r3
    5928:	3601      	adds	r6, #1
    592a:	2303      	movs	r3, #3
    592c:	401e      	ands	r6, r3
    592e:	4643      	mov	r3, r8
    5930:	54ee      	strb	r6, [r5, r3]
				if (rx_buffer_index == CAN_FILTER_REGULAR_REC) g_received++;
    5932:	9b01      	ldr	r3, [sp, #4]
    5934:	2b02      	cmp	r3, #2
    5936:	d1d3      	bne.n	58e0 <CAN0_Handler+0x64>
    5938:	4a89      	ldr	r2, [pc, #548]	; (5b60 <CAN0_Handler+0x2e4>)
    593a:	6813      	ldr	r3, [r2, #0]
    593c:	3301      	adds	r3, #1
    593e:	6013      	str	r3, [r2, #0]
    5940:	e7ce      	b.n	58e0 <CAN0_Handler+0x64>
else if (STAGE == RECEIVE) {
    5942:	4b84      	ldr	r3, [pc, #528]	; (5b54 <CAN0_Handler+0x2d8>)
    5944:	781b      	ldrb	r3, [r3, #0]
    5946:	2b01      	cmp	r3, #1
    5948:	d020      	beq.n	598c <CAN0_Handler+0x110>
else if (STAGE == SEND) {
    594a:	4b82      	ldr	r3, [pc, #520]	; (5b54 <CAN0_Handler+0x2d8>)
    594c:	781b      	ldrb	r3, [r3, #0]
    594e:	2b02      	cmp	r3, #2
    5950:	d066      	beq.n	5a20 <CAN0_Handler+0x1a4>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    5952:	9b00      	ldr	r3, [sp, #0]
    5954:	031b      	lsls	r3, r3, #12
    5956:	d5b5      	bpl.n	58c4 <CAN0_Handler+0x48>
	module_inst->hw->IR.reg = source;
    5958:	2380      	movs	r3, #128	; 0x80
    595a:	031b      	lsls	r3, r3, #12
    595c:	650b      	str	r3, [r1, #80]	; 0x50
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    595e:	2000      	movs	r0, #0
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    5960:	239c      	movs	r3, #156	; 0x9c
    5962:	469c      	mov	ip, r3
    5964:	2401      	movs	r4, #1
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    5966:	2598      	movs	r5, #152	; 0x98
			if (can_rx_get_buffer_status(&can_instance, i)) {
    5968:	0002      	movs	r2, r0
	if (index < 32) {
    596a:	281f      	cmp	r0, #31
    596c:	d900      	bls.n	5970 <CAN0_Handler+0xf4>
    596e:	e0ad      	b.n	5acc <CAN0_Handler+0x250>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    5970:	594b      	ldr	r3, [r1, r5]
    5972:	0027      	movs	r7, r4
    5974:	4087      	lsls	r7, r0
    5976:	403b      	ands	r3, r7
    5978:	1e5f      	subs	r7, r3, #1
    597a:	41bb      	sbcs	r3, r7
    597c:	b2db      	uxtb	r3, r3
    597e:	2b00      	cmp	r3, #0
    5980:	d000      	beq.n	5984 <CAN0_Handler+0x108>
    5982:	e0ae      	b.n	5ae2 <CAN0_Handler+0x266>
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    5984:	3001      	adds	r0, #1
    5986:	2810      	cmp	r0, #16
    5988:	d1ee      	bne.n	5968 <CAN0_Handler+0xec>
    598a:	e79b      	b.n	58c4 <CAN0_Handler+0x48>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    598c:	9b00      	ldr	r3, [sp, #0]
    598e:	031b      	lsls	r3, r3, #12
    5990:	d598      	bpl.n	58c4 <CAN0_Handler+0x48>
	module_inst->hw->IR.reg = source;
    5992:	2380      	movs	r3, #128	; 0x80
    5994:	031b      	lsls	r3, r3, #12
    5996:	650b      	str	r3, [r1, #80]	; 0x50
    5998:	2720      	movs	r7, #32
    599a:	427f      	negs	r7, r7
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    599c:	2400      	movs	r4, #0
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    599e:	4b6e      	ldr	r3, [pc, #440]	; (5b58 <CAN0_Handler+0x2dc>)
    59a0:	4698      	mov	r8, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    59a2:	4b6e      	ldr	r3, [pc, #440]	; (5b5c <CAN0_Handler+0x2e0>)
    59a4:	4699      	mov	r9, r3
    59a6:	e02d      	b.n	5a04 <CAN0_Handler+0x188>
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    59a8:	4b69      	ldr	r3, [pc, #420]	; (5b50 <CAN0_Handler+0x2d4>)
    59aa:	681a      	ldr	r2, [r3, #0]
    59ac:	239c      	movs	r3, #156	; 0x9c
    59ae:	58d0      	ldr	r0, [r2, r3]
    59b0:	3b9b      	subs	r3, #155	; 0x9b
    59b2:	40bb      	lsls	r3, r7
			if (can_rx_get_buffer_status(&can_instance, i)) {
    59b4:	4203      	tst	r3, r0
    59b6:	d020      	beq.n	59fa <CAN0_Handler+0x17e>
				rx_buffer_index = i;
    59b8:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT2.reg = (1 << index);
    59ba:	219c      	movs	r1, #156	; 0x9c
    59bc:	5053      	str	r3, [r2, r1]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    59be:	9b01      	ldr	r3, [sp, #4]
    59c0:	2592      	movs	r5, #146	; 0x92
    59c2:	006d      	lsls	r5, r5, #1
    59c4:	436b      	muls	r3, r5
    59c6:	4642      	mov	r2, r8
    59c8:	5c9e      	ldrb	r6, [r3, r2]
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    59ca:	9901      	ldr	r1, [sp, #4]
    59cc:	9a01      	ldr	r2, [sp, #4]
    59ce:	4369      	muls	r1, r5
    59d0:	3104      	adds	r1, #4
    59d2:	00f3      	lsls	r3, r6, #3
    59d4:	199b      	adds	r3, r3, r6
    59d6:	00db      	lsls	r3, r3, #3
    59d8:	18c9      	adds	r1, r1, r3
    59da:	4441      	add	r1, r8
    59dc:	485c      	ldr	r0, [pc, #368]	; (5b50 <CAN0_Handler+0x2d4>)
    59de:	47c8      	blx	r9
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    59e0:	9b01      	ldr	r3, [sp, #4]
    59e2:	435d      	muls	r5, r3
    59e4:	3601      	adds	r6, #1
    59e6:	2303      	movs	r3, #3
    59e8:	401e      	ands	r6, r3
    59ea:	4643      	mov	r3, r8
    59ec:	54ee      	strb	r6, [r5, r3]
				g_hash_res[rx_buffer_index]++;
    59ee:	9b01      	ldr	r3, [sp, #4]
    59f0:	495c      	ldr	r1, [pc, #368]	; (5b64 <CAN0_Handler+0x2e8>)
    59f2:	009b      	lsls	r3, r3, #2
    59f4:	585a      	ldr	r2, [r3, r1]
    59f6:	3201      	adds	r2, #1
    59f8:	505a      	str	r2, [r3, r1]
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    59fa:	3401      	adds	r4, #1
    59fc:	3701      	adds	r7, #1
    59fe:	2c10      	cmp	r4, #16
    5a00:	d100      	bne.n	5a04 <CAN0_Handler+0x188>
    5a02:	e75f      	b.n	58c4 <CAN0_Handler+0x48>
	if (index < 32) {
    5a04:	2c1f      	cmp	r4, #31
    5a06:	d8cf      	bhi.n	59a8 <CAN0_Handler+0x12c>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    5a08:	4b51      	ldr	r3, [pc, #324]	; (5b50 <CAN0_Handler+0x2d4>)
    5a0a:	681a      	ldr	r2, [r3, #0]
    5a0c:	2398      	movs	r3, #152	; 0x98
    5a0e:	58d0      	ldr	r0, [r2, r3]
    5a10:	3b97      	subs	r3, #151	; 0x97
    5a12:	40a3      	lsls	r3, r4
			if (can_rx_get_buffer_status(&can_instance, i)) {
    5a14:	4203      	tst	r3, r0
    5a16:	d0f0      	beq.n	59fa <CAN0_Handler+0x17e>
				rx_buffer_index = i;
    5a18:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT1.reg = (1 << index);
    5a1a:	2198      	movs	r1, #152	; 0x98
    5a1c:	5053      	str	r3, [r2, r1]
    5a1e:	e7ce      	b.n	59be <CAN0_Handler+0x142>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    5a20:	9b00      	ldr	r3, [sp, #0]
    5a22:	031b      	lsls	r3, r3, #12
    5a24:	d400      	bmi.n	5a28 <CAN0_Handler+0x1ac>
    5a26:	e74d      	b.n	58c4 <CAN0_Handler+0x48>
	module_inst->hw->IR.reg = source;
    5a28:	2380      	movs	r3, #128	; 0x80
    5a2a:	031b      	lsls	r3, r3, #12
    5a2c:	650b      	str	r3, [r1, #80]	; 0x50
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    5a2e:	2000      	movs	r0, #0
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    5a30:	239c      	movs	r3, #156	; 0x9c
    5a32:	469c      	mov	ip, r3
    5a34:	2401      	movs	r4, #1
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    5a36:	2598      	movs	r5, #152	; 0x98
			if (can_rx_get_buffer_status(&can_instance, i)) {
    5a38:	0002      	movs	r2, r0
	if (index < 32) {
    5a3a:	281f      	cmp	r0, #31
    5a3c:	d80c      	bhi.n	5a58 <CAN0_Handler+0x1dc>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    5a3e:	594b      	ldr	r3, [r1, r5]
    5a40:	0027      	movs	r7, r4
    5a42:	4087      	lsls	r7, r0
    5a44:	403b      	ands	r3, r7
    5a46:	1e5f      	subs	r7, r3, #1
    5a48:	41bb      	sbcs	r3, r7
    5a4a:	b2db      	uxtb	r3, r3
    5a4c:	2b00      	cmp	r3, #0
    5a4e:	d10e      	bne.n	5a6e <CAN0_Handler+0x1f2>
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    5a50:	3001      	adds	r0, #1
    5a52:	2810      	cmp	r0, #16
    5a54:	d1f0      	bne.n	5a38 <CAN0_Handler+0x1bc>
    5a56:	e735      	b.n	58c4 <CAN0_Handler+0x48>
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    5a58:	4663      	mov	r3, ip
    5a5a:	58cb      	ldr	r3, [r1, r3]
    5a5c:	0007      	movs	r7, r0
    5a5e:	3f20      	subs	r7, #32
    5a60:	0026      	movs	r6, r4
    5a62:	40be      	lsls	r6, r7
    5a64:	4033      	ands	r3, r6
    5a66:	1e5f      	subs	r7, r3, #1
    5a68:	41bb      	sbcs	r3, r7
    5a6a:	b2db      	uxtb	r3, r3
    5a6c:	e7ee      	b.n	5a4c <CAN0_Handler+0x1d0>
				rx_buffer_index = i;
    5a6e:	9201      	str	r2, [sp, #4]
	if (index < 32) {
    5a70:	2a1f      	cmp	r2, #31
    5a72:	d825      	bhi.n	5ac0 <CAN0_Handler+0x244>
		module_inst->hw->NDAT1.reg = (1 << index);
    5a74:	2301      	movs	r3, #1
    5a76:	4093      	lsls	r3, r2
    5a78:	2298      	movs	r2, #152	; 0x98
    5a7a:	508b      	str	r3, [r1, r2]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    5a7c:	9b01      	ldr	r3, [sp, #4]
    5a7e:	4e36      	ldr	r6, [pc, #216]	; (5b58 <CAN0_Handler+0x2dc>)
    5a80:	2492      	movs	r4, #146	; 0x92
    5a82:	0064      	lsls	r4, r4, #1
    5a84:	4363      	muls	r3, r4
    5a86:	5d9d      	ldrb	r5, [r3, r6]
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    5a88:	9901      	ldr	r1, [sp, #4]
    5a8a:	9a01      	ldr	r2, [sp, #4]
    5a8c:	4361      	muls	r1, r4
    5a8e:	3104      	adds	r1, #4
    5a90:	00eb      	lsls	r3, r5, #3
    5a92:	195b      	adds	r3, r3, r5
    5a94:	00db      	lsls	r3, r3, #3
    5a96:	18c9      	adds	r1, r1, r3
    5a98:	1989      	adds	r1, r1, r6
    5a9a:	482d      	ldr	r0, [pc, #180]	; (5b50 <CAN0_Handler+0x2d4>)
    5a9c:	4b2f      	ldr	r3, [pc, #188]	; (5b5c <CAN0_Handler+0x2e0>)
    5a9e:	4798      	blx	r3
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    5aa0:	9b01      	ldr	r3, [sp, #4]
    5aa2:	435c      	muls	r4, r3
    5aa4:	3501      	adds	r5, #1
    5aa6:	2303      	movs	r3, #3
    5aa8:	401d      	ands	r5, r3
    5aaa:	55a5      	strb	r5, [r4, r6]
				g_session_res[rx_buffer_index]++;
    5aac:	9a01      	ldr	r2, [sp, #4]
    5aae:	4b2e      	ldr	r3, [pc, #184]	; (5b68 <CAN0_Handler+0x2ec>)
    5ab0:	0092      	lsls	r2, r2, #2
    5ab2:	58d1      	ldr	r1, [r2, r3]
    5ab4:	3101      	adds	r1, #1
    5ab6:	50d1      	str	r1, [r2, r3]
				g_session_res[0]++;
    5ab8:	681a      	ldr	r2, [r3, #0]
    5aba:	3201      	adds	r2, #1
    5abc:	601a      	str	r2, [r3, #0]
				break;
    5abe:	e701      	b.n	58c4 <CAN0_Handler+0x48>
		index -= 32;
    5ac0:	3a20      	subs	r2, #32
		module_inst->hw->NDAT2.reg = (1 << index);
    5ac2:	2301      	movs	r3, #1
    5ac4:	4093      	lsls	r3, r2
    5ac6:	229c      	movs	r2, #156	; 0x9c
    5ac8:	508b      	str	r3, [r1, r2]
    5aca:	e7d7      	b.n	5a7c <CAN0_Handler+0x200>
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    5acc:	4663      	mov	r3, ip
    5ace:	58cb      	ldr	r3, [r1, r3]
    5ad0:	0007      	movs	r7, r0
    5ad2:	3f20      	subs	r7, #32
    5ad4:	0026      	movs	r6, r4
    5ad6:	40be      	lsls	r6, r7
    5ad8:	4033      	ands	r3, r6
    5ada:	1e5f      	subs	r7, r3, #1
    5adc:	41bb      	sbcs	r3, r7
    5ade:	b2db      	uxtb	r3, r3
    5ae0:	e74d      	b.n	597e <CAN0_Handler+0x102>
				rx_buffer_index = i;
    5ae2:	9201      	str	r2, [sp, #4]
	if (index < 32) {
    5ae4:	2a1f      	cmp	r2, #31
    5ae6:	d829      	bhi.n	5b3c <CAN0_Handler+0x2c0>
		module_inst->hw->NDAT1.reg = (1 << index);
    5ae8:	2301      	movs	r3, #1
    5aea:	4093      	lsls	r3, r2
    5aec:	2298      	movs	r2, #152	; 0x98
    5aee:	508b      	str	r3, [r1, r2]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    5af0:	9b01      	ldr	r3, [sp, #4]
    5af2:	4e19      	ldr	r6, [pc, #100]	; (5b58 <CAN0_Handler+0x2dc>)
    5af4:	2492      	movs	r4, #146	; 0x92
    5af6:	0064      	lsls	r4, r4, #1
    5af8:	4363      	muls	r3, r4
    5afa:	5d9d      	ldrb	r5, [r3, r6]
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    5afc:	9901      	ldr	r1, [sp, #4]
    5afe:	9a01      	ldr	r2, [sp, #4]
    5b00:	4361      	muls	r1, r4
    5b02:	3104      	adds	r1, #4
    5b04:	00eb      	lsls	r3, r5, #3
    5b06:	195b      	adds	r3, r3, r5
    5b08:	00db      	lsls	r3, r3, #3
    5b0a:	18c9      	adds	r1, r1, r3
    5b0c:	1989      	adds	r1, r1, r6
    5b0e:	4810      	ldr	r0, [pc, #64]	; (5b50 <CAN0_Handler+0x2d4>)
    5b10:	4b12      	ldr	r3, [pc, #72]	; (5b5c <CAN0_Handler+0x2e0>)
    5b12:	4798      	blx	r3
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    5b14:	9b01      	ldr	r3, [sp, #4]
    5b16:	435c      	muls	r4, r3
    5b18:	3501      	adds	r5, #1
    5b1a:	2303      	movs	r3, #3
    5b1c:	401d      	ands	r5, r3
    5b1e:	55a5      	strb	r5, [r4, r6]
				g_normal_received_flags[rx_buffer_index]++;
    5b20:	9b01      	ldr	r3, [sp, #4]
    5b22:	4912      	ldr	r1, [pc, #72]	; (5b6c <CAN0_Handler+0x2f0>)
    5b24:	009b      	lsls	r3, r3, #2
    5b26:	585a      	ldr	r2, [r3, r1]
    5b28:	3201      	adds	r2, #1
    5b2a:	505a      	str	r2, [r3, r1]
				g_normal_received_mask |= (1<<rx_buffer_index);
    5b2c:	9801      	ldr	r0, [sp, #4]
    5b2e:	4a10      	ldr	r2, [pc, #64]	; (5b70 <CAN0_Handler+0x2f4>)
    5b30:	6811      	ldr	r1, [r2, #0]
    5b32:	2301      	movs	r3, #1
    5b34:	4083      	lsls	r3, r0
    5b36:	430b      	orrs	r3, r1
    5b38:	6013      	str	r3, [r2, #0]
				break;
    5b3a:	e6c3      	b.n	58c4 <CAN0_Handler+0x48>
		index -= 32;
    5b3c:	3a20      	subs	r2, #32
		module_inst->hw->NDAT2.reg = (1 << index);
    5b3e:	2301      	movs	r3, #1
    5b40:	4093      	lsls	r3, r2
    5b42:	229c      	movs	r2, #156	; 0x9c
    5b44:	508b      	str	r3, [r1, r2]
    5b46:	e7d3      	b.n	5af0 <CAN0_Handler+0x274>
				rx_buffer_index = i;
    5b48:	9401      	str	r4, [sp, #4]
    5b4a:	219c      	movs	r1, #156	; 0x9c
    5b4c:	5053      	str	r3, [r2, r1]
    5b4e:	e6d8      	b.n	5902 <CAN0_Handler+0x86>
    5b50:	20002544 	.word	0x20002544
    5b54:	20002538 	.word	0x20002538
    5b58:	200025d4 	.word	0x200025d4
    5b5c:	00001769 	.word	0x00001769
    5b60:	2000253c 	.word	0x2000253c
    5b64:	2000257c 	.word	0x2000257c
    5b68:	20002598 	.word	0x20002598
    5b6c:	20002588 	.word	0x20002588
    5b70:	20002594 	.word	0x20002594

00005b74 <InitKeys>:
			"  7: Send extended message with ID: 0x10000096 and 8 byte data 128 to 135. \r\n"
			"  h: Display menu \r\n\r\n");
}
//! [user_menu]

bool InitKeys(bool hardcoded, uint8_t * secret_key, uint8_t *ServerPublicKey, uint8_t *ec) {
    5b74:	b570      	push	{r4, r5, r6, lr}
    5b76:	0004      	movs	r4, r0
    5b78:	000d      	movs	r5, r1
    5b7a:	0016      	movs	r6, r2
	ECCRYPTO_STATUS Status;
	
	memset(secret_key+16,0,16);
    5b7c:	0008      	movs	r0, r1
    5b7e:	3010      	adds	r0, #16
    5b80:	2210      	movs	r2, #16
    5b82:	2100      	movs	r1, #0
    5b84:	4b0c      	ldr	r3, [pc, #48]	; (5bb8 <InitKeys+0x44>)
    5b86:	4798      	blx	r3
	
	if(hardcoded){
    5b88:	2c00      	cmp	r4, #0
    5b8a:	d010      	beq.n	5bae <InitKeys+0x3a>
		memset(secret_key,0xFF,16);
    5b8c:	2210      	movs	r2, #16
    5b8e:	21ff      	movs	r1, #255	; 0xff
    5b90:	0028      	movs	r0, r5
    5b92:	4b09      	ldr	r3, [pc, #36]	; (5bb8 <InitKeys+0x44>)
    5b94:	4798      	blx	r3
		printf("No PUF available\r\n");
		while(1);
	}
	
	Status = ECCRYPTO_SUCCESS;
	Status = CompressedKeyGeneration(secret_key, ServerPublicKey);
    5b96:	0031      	movs	r1, r6
    5b98:	0028      	movs	r0, r5
    5b9a:	4b08      	ldr	r3, [pc, #32]	; (5bbc <InitKeys+0x48>)
    5b9c:	4798      	blx	r3
	if (Status != ECCRYPTO_SUCCESS) {
    5b9e:	2801      	cmp	r0, #1
    5ba0:	d003      	beq.n	5baa <InitKeys+0x36>
		printf("Failed public key generation!\r\n");
    5ba2:	4807      	ldr	r0, [pc, #28]	; (5bc0 <InitKeys+0x4c>)
    5ba4:	4b07      	ldr	r3, [pc, #28]	; (5bc4 <InitKeys+0x50>)
    5ba6:	4798      	blx	r3
		return false;
    5ba8:	2400      	movs	r4, #0
		}
		printf("\r\n");
	}
	
	return true;
}
    5baa:	0020      	movs	r0, r4
    5bac:	bd70      	pop	{r4, r5, r6, pc}
		printf("No PUF available\r\n");
    5bae:	4806      	ldr	r0, [pc, #24]	; (5bc8 <InitKeys+0x54>)
    5bb0:	4b04      	ldr	r3, [pc, #16]	; (5bc4 <InitKeys+0x50>)
    5bb2:	4798      	blx	r3
    5bb4:	e7fe      	b.n	5bb4 <InitKeys+0x40>
    5bb6:	46c0      	nop			; (mov r8, r8)
    5bb8:	00006877 	.word	0x00006877
    5bbc:	00005441 	.word	0x00005441
    5bc0:	0000ae14 	.word	0x0000ae14
    5bc4:	00006acd 	.word	0x00006acd
    5bc8:	0000ae00 	.word	0x0000ae00

00005bcc <InitSharedSecrets>:

bool InitSharedSecrets(uint8_t *private_key, uint8_t (*StoredPublicKeys)[32], uint8_t (*NodeSharedSecrets)[16]) {
    5bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bce:	b089      	sub	sp, #36	; 0x24
    5bd0:	0006      	movs	r6, r0
    5bd2:	000d      	movs	r5, r1
    5bd4:	0017      	movs	r7, r2
				printf("%02x",private_key[i]);
			}
			printf("\r\n");
		}
		
		Status = CompressedSecretAgreement(private_key,StoredPublicKeys[i],shared_secret);
    5bd6:	3120      	adds	r1, #32
    5bd8:	466a      	mov	r2, sp
    5bda:	4b13      	ldr	r3, [pc, #76]	; (5c28 <InitSharedSecrets+0x5c>)
    5bdc:	4798      	blx	r3
    5bde:	0004      	movs	r4, r0
				printf("%02x",shared_secret[i]);
			}
			printf("\r\n");
		}
		
		if (Status != ECCRYPTO_SUCCESS) {
    5be0:	2801      	cmp	r0, #1
    5be2:	d118      	bne.n	5c16 <InitSharedSecrets+0x4a>
		}
		//else {
		//	printf("Node %i secret generation success!\r\n",i);
		//}
		
		photon128(shared_secret,32,NodeSharedSecrets[i]);
    5be4:	003a      	movs	r2, r7
    5be6:	3210      	adds	r2, #16
    5be8:	2120      	movs	r1, #32
    5bea:	4668      	mov	r0, sp
    5bec:	4b0f      	ldr	r3, [pc, #60]	; (5c2c <InitSharedSecrets+0x60>)
    5bee:	4798      	blx	r3
		Status = CompressedSecretAgreement(private_key,StoredPublicKeys[i],shared_secret);
    5bf0:	0029      	movs	r1, r5
    5bf2:	3140      	adds	r1, #64	; 0x40
    5bf4:	466a      	mov	r2, sp
    5bf6:	0030      	movs	r0, r6
    5bf8:	4b0b      	ldr	r3, [pc, #44]	; (5c28 <InitSharedSecrets+0x5c>)
    5bfa:	4798      	blx	r3
    5bfc:	0004      	movs	r4, r0
	for(int i = 1; i <= NODE_TOTAL; i++) {
    5bfe:	2102      	movs	r1, #2
		if (Status != ECCRYPTO_SUCCESS) {
    5c00:	2801      	cmp	r0, #1
    5c02:	d109      	bne.n	5c18 <InitSharedSecrets+0x4c>
		photon128(shared_secret,32,NodeSharedSecrets[i]);
    5c04:	003a      	movs	r2, r7
    5c06:	3220      	adds	r2, #32
    5c08:	2120      	movs	r1, #32
    5c0a:	4668      	mov	r0, sp
    5c0c:	4b07      	ldr	r3, [pc, #28]	; (5c2c <InitSharedSecrets+0x60>)
    5c0e:	4798      	blx	r3
	}
	return true;
    5c10:	2001      	movs	r0, #1
}
    5c12:	b009      	add	sp, #36	; 0x24
    5c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(int i = 1; i <= NODE_TOTAL; i++) {
    5c16:	2101      	movs	r1, #1
			printf("Failed node %i Shared Secret Generation\r\n",i);
    5c18:	4805      	ldr	r0, [pc, #20]	; (5c30 <InitSharedSecrets+0x64>)
    5c1a:	4d06      	ldr	r5, [pc, #24]	; (5c34 <InitSharedSecrets+0x68>)
    5c1c:	47a8      	blx	r5
			printf("Fail code: %i\r\n",Status);
    5c1e:	0021      	movs	r1, r4
    5c20:	4805      	ldr	r0, [pc, #20]	; (5c38 <InitSharedSecrets+0x6c>)
    5c22:	47a8      	blx	r5
			return false;
    5c24:	2000      	movs	r0, #0
    5c26:	e7f4      	b.n	5c12 <InitSharedSecrets+0x46>
    5c28:	0000546d 	.word	0x0000546d
    5c2c:	00005751 	.word	0x00005751
    5c30:	0000ae34 	.word	0x0000ae34
    5c34:	000069d9 	.word	0x000069d9
    5c38:	0000ae60 	.word	0x0000ae60

00005c3c <SysTick_Handler>:
//! [setup]

//! [setup]
void SysTick_Handler(void){
	
	ul_tickcount += 10;
    5c3c:	4a02      	ldr	r2, [pc, #8]	; (5c48 <SysTick_Handler+0xc>)
    5c3e:	6813      	ldr	r3, [r2, #0]
    5c40:	330a      	adds	r3, #10
    5c42:	6013      	str	r3, [r2, #0]
	// Toggle LEDs every second (i.e. 1000ms)
}
    5c44:	4770      	bx	lr
    5c46:	46c0      	nop			; (mov r8, r8)
    5c48:	20002540 	.word	0x20002540

00005c4c <main>:
uint8_t input_key[10] = {0x01,0x03,0x02,0x05,0x04,0x07,0x06,0x09,0x08,0x10};
uint8_t datas[8] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8};
unsigned char n[CRYPTO_NPUBBYTES] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
	
int main(void)
{
    5c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c4e:	46de      	mov	lr, fp
    5c50:	4657      	mov	r7, sl
    5c52:	464e      	mov	r6, r9
    5c54:	4645      	mov	r5, r8
    5c56:	b5e0      	push	{r5, r6, r7, lr}
    5c58:	4cbd      	ldr	r4, [pc, #756]	; (5f50 <main+0x304>)
    5c5a:	44a5      	add	sp, r4
	//uint8_t key;
//! [setup_init]
	system_init();
    5c5c:	4bbd      	ldr	r3, [pc, #756]	; (5f54 <main+0x308>)
    5c5e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5c60:	ab10      	add	r3, sp, #64	; 0x40
    5c62:	2280      	movs	r2, #128	; 0x80
    5c64:	05d2      	lsls	r2, r2, #23
    5c66:	9210      	str	r2, [sp, #64]	; 0x40
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5c68:	2200      	movs	r2, #0
    5c6a:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    5c6c:	21ff      	movs	r1, #255	; 0xff
    5c6e:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    5c70:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5c72:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5c74:	2401      	movs	r4, #1
    5c76:	39d3      	subs	r1, #211	; 0xd3
    5c78:	545c      	strb	r4, [r3, r1]
	config->transmitter_enable = true;
    5c7a:	3101      	adds	r1, #1
    5c7c:	545c      	strb	r4, [r3, r1]
	config->clock_polarity_inverted = false;
    5c7e:	3101      	adds	r1, #1
    5c80:	545a      	strb	r2, [r3, r1]
	config->use_external_clock = false;
    5c82:	3101      	adds	r1, #1
    5c84:	545a      	strb	r2, [r3, r1]
	config->ext_clock_freq   = 0;
    5c86:	631a      	str	r2, [r3, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    5c88:	3105      	adds	r1, #5
    5c8a:	545a      	strb	r2, [r3, r1]
	config->generator_source = GCLK_GENERATOR_0;
    5c8c:	3101      	adds	r1, #1
    5c8e:	545a      	strb	r2, [r3, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5c90:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5c92:	2100      	movs	r1, #0
    5c94:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5c96:	76d9      	strb	r1, [r3, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    5c98:	61da      	str	r2, [r3, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    5c9a:	841a      	strh	r2, [r3, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    5c9c:	845a      	strh	r2, [r3, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    5c9e:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    5ca0:	3224      	adds	r2, #36	; 0x24
    5ca2:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    5ca4:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    5ca6:	3a11      	subs	r2, #17
    5ca8:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    5caa:	3213      	adds	r2, #19
    5cac:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    5cae:	3a01      	subs	r2, #1
    5cb0:	5499      	strb	r1, [r3, r2]
	config_cdc.baudrate	 = 115200;
    5cb2:	22e1      	movs	r2, #225	; 0xe1
    5cb4:	0252      	lsls	r2, r2, #9
    5cb6:	629a      	str	r2, [r3, #40]	; 0x28
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    5cb8:	22c4      	movs	r2, #196	; 0xc4
    5cba:	0392      	lsls	r2, r2, #14
    5cbc:	60da      	str	r2, [r3, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5cbe:	2201      	movs	r2, #1
    5cc0:	4252      	negs	r2, r2
    5cc2:	639a      	str	r2, [r3, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    5cc4:	63da      	str	r2, [r3, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    5cc6:	4aa4      	ldr	r2, [pc, #656]	; (5f58 <main+0x30c>)
    5cc8:	641a      	str	r2, [r3, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5cca:	4aa4      	ldr	r2, [pc, #656]	; (5f5c <main+0x310>)
    5ccc:	645a      	str	r2, [r3, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    5cce:	4da4      	ldr	r5, [pc, #656]	; (5f60 <main+0x314>)
    5cd0:	4ba4      	ldr	r3, [pc, #656]	; (5f64 <main+0x318>)
    5cd2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    5cd4:	4aa4      	ldr	r2, [pc, #656]	; (5f68 <main+0x31c>)
    5cd6:	4ba5      	ldr	r3, [pc, #660]	; (5f6c <main+0x320>)
    5cd8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5cda:	4aa5      	ldr	r2, [pc, #660]	; (5f70 <main+0x324>)
    5cdc:	4ba5      	ldr	r3, [pc, #660]	; (5f74 <main+0x328>)
    5cde:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    5ce0:	aa10      	add	r2, sp, #64	; 0x40
    5ce2:	49a5      	ldr	r1, [pc, #660]	; (5f78 <main+0x32c>)
    5ce4:	0028      	movs	r0, r5
    5ce6:	4ba5      	ldr	r3, [pc, #660]	; (5f7c <main+0x330>)
    5ce8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    5cea:	4fa5      	ldr	r7, [pc, #660]	; (5f80 <main+0x334>)
    5cec:	683b      	ldr	r3, [r7, #0]
    5cee:	6898      	ldr	r0, [r3, #8]
    5cf0:	2100      	movs	r1, #0
    5cf2:	4ea4      	ldr	r6, [pc, #656]	; (5f84 <main+0x338>)
    5cf4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    5cf6:	683b      	ldr	r3, [r7, #0]
    5cf8:	6858      	ldr	r0, [r3, #4]
    5cfa:	2100      	movs	r1, #0
    5cfc:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5cfe:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5d00:	0030      	movs	r0, r6
    5d02:	4ba1      	ldr	r3, [pc, #644]	; (5f88 <main+0x33c>)
    5d04:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5d06:	231f      	movs	r3, #31
    5d08:	4018      	ands	r0, r3
    5d0a:	4084      	lsls	r4, r0
    5d0c:	4b9f      	ldr	r3, [pc, #636]	; (5f8c <main+0x340>)
    5d0e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d10:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5d12:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5d14:	2b00      	cmp	r3, #0
    5d16:	d1fc      	bne.n	5d12 <main+0xc6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5d18:	6833      	ldr	r3, [r6, #0]
    5d1a:	2202      	movs	r2, #2
    5d1c:	4313      	orrs	r3, r2
    5d1e:	6033      	str	r3, [r6, #0]
    5d20:	2340      	movs	r3, #64	; 0x40
    5d22:	3b01      	subs	r3, #1
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    5d24:	2b00      	cmp	r3, #0
    5d26:	d1fc      	bne.n	5d22 <main+0xd6>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5d28:	ae0f      	add	r6, sp, #60	; 0x3c
    5d2a:	2400      	movs	r4, #0
    5d2c:	7074      	strb	r4, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5d2e:	2501      	movs	r5, #1
    5d30:	70b5      	strb	r5, [r6, #2]
	config->powersave    = false;
    5d32:	70f4      	strb	r4, [r6, #3]
	pin_config.mux_position = CAN_TX_MUX_SETTING;
    5d34:	3306      	adds	r3, #6
    5d36:	4698      	mov	r8, r3
    5d38:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
    5d3a:	0031      	movs	r1, r6
    5d3c:	2018      	movs	r0, #24
    5d3e:	4f94      	ldr	r7, [pc, #592]	; (5f90 <main+0x344>)
    5d40:	47b8      	blx	r7
	pin_config.mux_position = CAN_RX_MUX_SETTING;
    5d42:	4643      	mov	r3, r8
    5d44:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
    5d46:	a90f      	add	r1, sp, #60	; 0x3c
    5d48:	2019      	movs	r0, #25
    5d4a:	47b8      	blx	r7
	config->clock_source = GCLK_GENERATOR_8;
    5d4c:	ab10      	add	r3, sp, #64	; 0x40
    5d4e:	2208      	movs	r2, #8
    5d50:	701a      	strb	r2, [r3, #0]
	config->run_in_standby = false;
    5d52:	705c      	strb	r4, [r3, #1]
	config->watchdog_configuration = 0x00;
    5d54:	709c      	strb	r4, [r3, #2]
	config->transmit_pause = true;
    5d56:	70dd      	strb	r5, [r3, #3]
	config->edge_filtering = true;
    5d58:	711d      	strb	r5, [r3, #4]
	config->protocol_exception_handling = true;
    5d5a:	715d      	strb	r5, [r3, #5]
	config->automatic_retransmission = true;
    5d5c:	719d      	strb	r5, [r3, #6]
	config->clock_stop_request = false;
    5d5e:	71dc      	strb	r4, [r3, #7]
	config->clock_stop_acknowledge = false;
    5d60:	721c      	strb	r4, [r3, #8]
	config->timestamp_prescaler = 0;
    5d62:	725c      	strb	r4, [r3, #9]
	config->timeout_period = 0xFFFF;
    5d64:	3a09      	subs	r2, #9
    5d66:	815a      	strh	r2, [r3, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
    5d68:	731c      	strb	r4, [r3, #12]
	config->timeout_enable = false;
    5d6a:	735c      	strb	r4, [r3, #13]
	config->tdc_enable = false;
    5d6c:	739c      	strb	r4, [r3, #14]
	config->delay_compensation_offset = 0;
    5d6e:	73dc      	strb	r4, [r3, #15]
	config->delay_compensation_filter_window_length = 0;
    5d70:	741c      	strb	r4, [r3, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
    5d72:	3203      	adds	r2, #3
    5d74:	745a      	strb	r2, [r3, #17]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
    5d76:	749a      	strb	r2, [r3, #18]
	config->remote_frames_standard_reject = true;
    5d78:	74dd      	strb	r5, [r3, #19]
	config->remote_frames_extended_reject = true;
    5d7a:	751d      	strb	r5, [r3, #20]
	config->extended_id_mask = 0x1FFFFFFF;
    5d7c:	4a85      	ldr	r2, [pc, #532]	; (5f94 <main+0x348>)
    5d7e:	619a      	str	r2, [r3, #24]
	config->rx_fifo_0_overwrite = true;
    5d80:	771d      	strb	r5, [r3, #28]
	config->rx_fifo_0_watermark = 0;
    5d82:	775c      	strb	r4, [r3, #29]
	config->rx_fifo_1_overwrite = true;
    5d84:	779d      	strb	r5, [r3, #30]
	config->rx_fifo_1_watermark = 0;
    5d86:	77dc      	strb	r4, [r3, #31]
	config->tx_queue_mode = false;
    5d88:	2220      	movs	r2, #32
    5d8a:	549c      	strb	r4, [r3, r2]
	config->tx_event_fifo_watermark = 0;
    5d8c:	3201      	adds	r2, #1
    5d8e:	549c      	strb	r4, [r3, r2]
	can_init(&can_instance, CAN_MODULE, &config_can);
    5d90:	4f81      	ldr	r7, [pc, #516]	; (5f98 <main+0x34c>)
    5d92:	001a      	movs	r2, r3
    5d94:	4981      	ldr	r1, [pc, #516]	; (5f9c <main+0x350>)
    5d96:	0038      	movs	r0, r7
    5d98:	4b81      	ldr	r3, [pc, #516]	; (5fa0 <main+0x354>)
    5d9a:	4798      	blx	r3
	can_enable_fd_mode(&can_instance);
    5d9c:	0038      	movs	r0, r7
    5d9e:	4b81      	ldr	r3, [pc, #516]	; (5fa4 <main+0x358>)
    5da0:	4798      	blx	r3
	can_start(&can_instance);
    5da2:	0038      	movs	r0, r7
    5da4:	4b80      	ldr	r3, [pc, #512]	; (5fa8 <main+0x35c>)
    5da6:	4798      	blx	r3
    5da8:	2280      	movs	r2, #128	; 0x80
    5daa:	0212      	lsls	r2, r2, #8
    5dac:	4b77      	ldr	r3, [pc, #476]	; (5f8c <main+0x340>)
    5dae:	601a      	str	r2, [r3, #0]
	module_inst->hw->IE.reg |= source;
    5db0:	683a      	ldr	r2, [r7, #0]
    5db2:	6d51      	ldr	r1, [r2, #84]	; 0x54
    5db4:	23c0      	movs	r3, #192	; 0xc0
    5db6:	055b      	lsls	r3, r3, #21
    5db8:	430b      	orrs	r3, r1
    5dba:	6553      	str	r3, [r2, #84]	; 0x54
	configure_can();
//! [configure_can]

//! [display_user_menu]
	//display_menu();
	printf("Starting.\r\n");
    5dbc:	487b      	ldr	r0, [pc, #492]	; (5fac <main+0x360>)
    5dbe:	4b7c      	ldr	r3, [pc, #496]	; (5fb0 <main+0x364>)
    5dc0:	4699      	mov	r9, r3
    5dc2:	4798      	blx	r3
	
//! [display_user_menu]

	SysTick->CTRL = 0;					// Disable SysTick
    5dc4:	4d7b      	ldr	r5, [pc, #492]	; (5fb4 <main+0x368>)
    5dc6:	602c      	str	r4, [r5, #0]
	SysTick->LOAD = 48000000UL-1;		// Set reload register for 1mS interrupts
    5dc8:	4e7b      	ldr	r6, [pc, #492]	; (5fb8 <main+0x36c>)
    5dca:	606e      	str	r6, [r5, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5dcc:	497b      	ldr	r1, [pc, #492]	; (5fbc <main+0x370>)
    5dce:	6a0b      	ldr	r3, [r1, #32]
    5dd0:	021b      	lsls	r3, r3, #8
    5dd2:	0a1b      	lsrs	r3, r3, #8
    5dd4:	22c0      	movs	r2, #192	; 0xc0
    5dd6:	0612      	lsls	r2, r2, #24
    5dd8:	4313      	orrs	r3, r2
    5dda:	620b      	str	r3, [r1, #32]
	NVIC_SetPriority(SysTick_IRQn, 3);	// Set interrupt priority to least urgency
	SysTick->VAL = 0;					// Reset the SysTick counter value
    5ddc:	60ac      	str	r4, [r5, #8]
	SysTick->CTRL = 0x00000007;			// Enable SysTick, Enable SysTick Exceptions, Use CPU Clock
    5dde:	2307      	movs	r3, #7
    5de0:	602b      	str	r3, [r5, #0]
	volatile uint8_t seed;
	bool check;
	bool hardcoded;
	uint8_t secret_key[32];
	uint8_t ec[16];
	unsigned long clen = 16;
    5de2:	3309      	adds	r3, #9
    5de4:	9378      	str	r3, [sp, #480]	; 0x1e0
	unsigned long mlen = 16;
    5de6:	9377      	str	r3, [sp, #476]	; 0x1dc
	//struct can_standard_message_filter_element sd_filter;
	struct can_standard_message_filter_element res_filter[NODE_TOTAL+1];
	struct can_tx_element tx_element;
	struct can_tx_element send_filter[NODE_TOTAL+1];
	
	memset(rx_element_buff,0,CONF_CAN0_RX_BUFFER_NUM*sizeof(multiBuffer));
    5de8:	2292      	movs	r2, #146	; 0x92
    5dea:	0152      	lsls	r2, r2, #5
    5dec:	2100      	movs	r1, #0
    5dee:	4874      	ldr	r0, [pc, #464]	; (5fc0 <main+0x374>)
    5df0:	4b74      	ldr	r3, [pc, #464]	; (5fc4 <main+0x378>)
    5df2:	4798      	blx	r3
	printf("\r\nPress any key to enter a random key seed: ");
    5df4:	4874      	ldr	r0, [pc, #464]	; (5fc8 <main+0x37c>)
    5df6:	4b75      	ldr	r3, [pc, #468]	; (5fcc <main+0x380>)
    5df8:	469b      	mov	fp, r3
    5dfa:	4798      	blx	r3
	scanf("%c", &seed);
    5dfc:	4974      	ldr	r1, [pc, #464]	; (5fd0 <main+0x384>)
    5dfe:	ab04      	add	r3, sp, #16
    5e00:	469c      	mov	ip, r3
    5e02:	4461      	add	r1, ip
    5e04:	4873      	ldr	r0, [pc, #460]	; (5fd4 <main+0x388>)
    5e06:	4b74      	ldr	r3, [pc, #464]	; (5fd8 <main+0x38c>)
    5e08:	4798      	blx	r3
	printf("\r\n");
    5e0a:	4874      	ldr	r0, [pc, #464]	; (5fdc <main+0x390>)
    5e0c:	47c8      	blx	r9
	
	uint32_t startupTime = TIMEVAL;
    5e0e:	68ab      	ldr	r3, [r5, #8]
    5e10:	4699      	mov	r9, r3
    5e12:	4c73      	ldr	r4, [pc, #460]	; (5fe0 <main+0x394>)
    5e14:	6823      	ldr	r3, [r4, #0]
    5e16:	469a      	mov	sl, r3
	hardcoded = EnrollNodes(NODE_TOTAL,StoredPublicKeys,StoredResponseHashes,ec,&can_instance);
    5e18:	9700      	str	r7, [sp, #0]
    5e1a:	ab79      	add	r3, sp, #484	; 0x1e4
    5e1c:	4a71      	ldr	r2, [pc, #452]	; (5fe4 <main+0x398>)
    5e1e:	4972      	ldr	r1, [pc, #456]	; (5fe8 <main+0x39c>)
    5e20:	2002      	movs	r0, #2
    5e22:	4f72      	ldr	r7, [pc, #456]	; (5fec <main+0x3a0>)
    5e24:	47b8      	blx	r7
    5e26:	900c      	str	r0, [sp, #48]	; 0x30
	printf("Completed enrollment phase with time: %d",TIMEVAL-startupTime);
    5e28:	68a8      	ldr	r0, [r5, #8]
    5e2a:	6824      	ldr	r4, [r4, #0]
    5e2c:	4653      	mov	r3, sl
    5e2e:	1ae4      	subs	r4, r4, r3
    5e30:	1a30      	subs	r0, r6, r0
    5e32:	4d6f      	ldr	r5, [pc, #444]	; (5ff0 <main+0x3a4>)
    5e34:	496f      	ldr	r1, [pc, #444]	; (5ff4 <main+0x3a8>)
    5e36:	47a8      	blx	r5
    5e38:	1824      	adds	r4, r4, r0
	uint32_t startupTime = TIMEVAL;
    5e3a:	464b      	mov	r3, r9
    5e3c:	1af0      	subs	r0, r6, r3
    5e3e:	496d      	ldr	r1, [pc, #436]	; (5ff4 <main+0x3a8>)
    5e40:	47a8      	blx	r5
	printf("Completed enrollment phase with time: %d",TIMEVAL-startupTime);
    5e42:	1a21      	subs	r1, r4, r0
    5e44:	486c      	ldr	r0, [pc, #432]	; (5ff8 <main+0x3ac>)
    5e46:	47d8      	blx	fp
	
	while(1) {
		startVal = TIMEVAL;
		// Need to change the handler stage
		STAGE = RECEIVE;
    5e48:	2701      	movs	r7, #1
    5e4a:	466b      	mov	r3, sp
    5e4c:	2237      	movs	r2, #55	; 0x37
    5e4e:	189b      	adds	r3, r3, r2
    5e50:	701f      	strb	r7, [r3, #0]
		
		for(int i = 0; i < TOTAL_MESSAGES; i++) {
			while(g_normal_received_mask==0);
			int flag;
			
			for(flag = 1; (g_normal_received_mask & (1<<flag))==0;flag++);
    5e52:	2302      	movs	r3, #2
    5e54:	930b      	str	r3, [sp, #44]	; 0x2c
    5e56:	e284      	b.n	6362 <main+0x716>
			printf("Failed server's authentication key generation!\r\n");
    5e58:	4868      	ldr	r0, [pc, #416]	; (5ffc <main+0x3b0>)
    5e5a:	4b55      	ldr	r3, [pc, #340]	; (5fb0 <main+0x364>)
    5e5c:	4798      	blx	r3
			g_normal_received_mask &= ~(1<<flag);
		}

		printf("Normal operation is over\r\n");
	}
}
    5e5e:	2001      	movs	r0, #1
    5e60:	2387      	movs	r3, #135	; 0x87
    5e62:	009b      	lsls	r3, r3, #2
    5e64:	449d      	add	sp, r3
    5e66:	bc3c      	pop	{r2, r3, r4, r5}
    5e68:	4690      	mov	r8, r2
    5e6a:	4699      	mov	r9, r3
    5e6c:	46a2      	mov	sl, r4
    5e6e:	46ab      	mov	fp, r5
    5e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Failed server's authentication shared secret generation!\r\n");
    5e72:	4863      	ldr	r0, [pc, #396]	; (6000 <main+0x3b4>)
    5e74:	4b4e      	ldr	r3, [pc, #312]	; (5fb0 <main+0x364>)
    5e76:	4798      	blx	r3
			return 1;
    5e78:	e7f1      	b.n	5e5e <main+0x212>
    5e7a:	464b      	mov	r3, r9
    5e7c:	e037      	b.n	5eee <main+0x2a2>
			if (j==16) {
    5e7e:	2b10      	cmp	r3, #16
    5e80:	d05e      	beq.n	5f40 <main+0x2f4>
				printf("Node %i not valid!\r\n",i);
    5e82:	0031      	movs	r1, r6
    5e84:	485f      	ldr	r0, [pc, #380]	; (6004 <main+0x3b8>)
    5e86:	4b51      	ldr	r3, [pc, #324]	; (5fcc <main+0x380>)
    5e88:	4798      	blx	r3
		for (int i = 1; i <= NODE_TOTAL; i++) {
    5e8a:	3601      	adds	r6, #1
    5e8c:	2392      	movs	r3, #146	; 0x92
    5e8e:	005b      	lsls	r3, r3, #1
    5e90:	469c      	mov	ip, r3
    5e92:	44e0      	add	r8, ip
    5e94:	3510      	adds	r5, #16
    5e96:	2e03      	cmp	r6, #3
    5e98:	d100      	bne.n	5e9c <main+0x250>
    5e9a:	e0c5      	b.n	6028 <main+0x3dc>
			res_filter[i].S0.bit.SFEC =
    5e9c:	a96a      	add	r1, sp, #424	; 0x1a8
    5e9e:	00b3      	lsls	r3, r6, #2
    5ea0:	585a      	ldr	r2, [r3, r1]
    5ea2:	4859      	ldr	r0, [pc, #356]	; (6008 <main+0x3bc>)
    5ea4:	4002      	ands	r2, r0
    5ea6:	505a      	str	r2, [r3, r1]
			can_set_rx_standard_filter(&can_instance, &(res_filter[i]),i);
    5ea8:	18c9      	adds	r1, r1, r3
    5eaa:	0032      	movs	r2, r6
    5eac:	483a      	ldr	r0, [pc, #232]	; (5f98 <main+0x34c>)
    5eae:	47d8      	blx	fp
			printf("Decrypt: Input to message_in size: %i\r\n",mlen);
    5eb0:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    5eb2:	4856      	ldr	r0, [pc, #344]	; (600c <main+0x3c0>)
    5eb4:	4b45      	ldr	r3, [pc, #276]	; (5fcc <main+0x380>)
    5eb6:	4798      	blx	r3
    5eb8:	4c55      	ldr	r4, [pc, #340]	; (6010 <main+0x3c4>)
    5eba:	192b      	adds	r3, r5, r4
    5ebc:	930a      	str	r3, [sp, #40]	; 0x28
    5ebe:	4a40      	ldr	r2, [pc, #256]	; (5fc0 <main+0x374>)
    5ec0:	4442      	add	r2, r8
    5ec2:	0013      	movs	r3, r2
    5ec4:	3326      	adds	r3, #38	; 0x26
    5ec6:	33ff      	adds	r3, #255	; 0xff
    5ec8:	7819      	ldrb	r1, [r3, #0]
    5eca:	3225      	adds	r2, #37	; 0x25
    5ecc:	32ff      	adds	r2, #255	; 0xff
    5ece:	7812      	ldrb	r2, [r2, #0]
    5ed0:	428a      	cmp	r2, r1
    5ed2:	d0d2      	beq.n	5e7a <main+0x22e>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    5ed4:	1c48      	adds	r0, r1, #1
    5ed6:	2203      	movs	r2, #3
    5ed8:	4002      	ands	r2, r0
    5eda:	701a      	strb	r2, [r3, #0]
	return &(buff->buffers[last_element]);
    5edc:	00cb      	lsls	r3, r1, #3
    5ede:	185b      	adds	r3, r3, r1
    5ee0:	00db      	lsls	r3, r3, #3
    5ee2:	4642      	mov	r2, r8
    5ee4:	3229      	adds	r2, #41	; 0x29
    5ee6:	32ff      	adds	r2, #255	; 0xff
    5ee8:	189b      	adds	r3, r3, r2
    5eea:	4a35      	ldr	r2, [pc, #212]	; (5fc0 <main+0x374>)
    5eec:	189b      	adds	r3, r3, r2
			crypto_aead_decrypt(ReceivedResponseHashes[i], &mlen, (void*)0, getNextBufferElement(&rx_element_buff[i])->data, 24, NULL, NULL, n, NodeSharedSecrets[i]);
    5eee:	3308      	adds	r3, #8
    5ef0:	4a48      	ldr	r2, [pc, #288]	; (6014 <main+0x3c8>)
    5ef2:	18aa      	adds	r2, r5, r2
    5ef4:	9207      	str	r2, [sp, #28]
    5ef6:	4a48      	ldr	r2, [pc, #288]	; (6018 <main+0x3cc>)
    5ef8:	9206      	str	r2, [sp, #24]
    5efa:	2000      	movs	r0, #0
    5efc:	2100      	movs	r1, #0
    5efe:	9004      	str	r0, [sp, #16]
    5f00:	9105      	str	r1, [sp, #20]
    5f02:	464a      	mov	r2, r9
    5f04:	9202      	str	r2, [sp, #8]
    5f06:	2018      	movs	r0, #24
    5f08:	2100      	movs	r1, #0
    5f0a:	9000      	str	r0, [sp, #0]
    5f0c:	9101      	str	r1, [sp, #4]
    5f0e:	a977      	add	r1, sp, #476	; 0x1dc
    5f10:	980a      	ldr	r0, [sp, #40]	; 0x28
    5f12:	4c42      	ldr	r4, [pc, #264]	; (601c <main+0x3d0>)
    5f14:	47a0      	blx	r4
			printf("Decrypt: Output to message_in size: %i\r\n",mlen);
    5f16:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    5f18:	4841      	ldr	r0, [pc, #260]	; (6020 <main+0x3d4>)
    5f1a:	4b2c      	ldr	r3, [pc, #176]	; (5fcc <main+0x380>)
    5f1c:	4798      	blx	r3
				if(ReceivedResponseHashes[i][j] != StoredResponseHashes[i][j]){
    5f1e:	4b3c      	ldr	r3, [pc, #240]	; (6010 <main+0x3c4>)
    5f20:	5d5a      	ldrb	r2, [r3, r5]
    5f22:	4b30      	ldr	r3, [pc, #192]	; (5fe4 <main+0x398>)
    5f24:	5d5b      	ldrb	r3, [r3, r5]
    5f26:	429a      	cmp	r2, r3
    5f28:	d1ab      	bne.n	5e82 <main+0x236>
    5f2a:	2301      	movs	r3, #1
    5f2c:	482d      	ldr	r0, [pc, #180]	; (5fe4 <main+0x398>)
    5f2e:	1828      	adds	r0, r5, r0
    5f30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5f32:	5ce1      	ldrb	r1, [r4, r3]
    5f34:	5cc2      	ldrb	r2, [r0, r3]
    5f36:	4291      	cmp	r1, r2
    5f38:	d1a1      	bne.n	5e7e <main+0x232>
			for(j=0;j<16;j++){
    5f3a:	3301      	adds	r3, #1
    5f3c:	2b10      	cmp	r3, #16
    5f3e:	d1f8      	bne.n	5f32 <main+0x2e6>
				g_valid_nodes_mask |= (1 << i);
    5f40:	4a38      	ldr	r2, [pc, #224]	; (6024 <main+0x3d8>)
    5f42:	6811      	ldr	r1, [r2, #0]
    5f44:	003b      	movs	r3, r7
    5f46:	40b3      	lsls	r3, r6
    5f48:	430b      	orrs	r3, r1
    5f4a:	6013      	str	r3, [r2, #0]
    5f4c:	e79d      	b.n	5e8a <main+0x23e>
    5f4e:	46c0      	nop			; (mov r8, r8)
    5f50:	fffffde4 	.word	0xfffffde4
    5f54:	00002931 	.word	0x00002931
    5f58:	002a0003 	.word	0x002a0003
    5f5c:	002b0003 	.word	0x002b0003
    5f60:	20002548 	.word	0x20002548
    5f64:	200025d0 	.word	0x200025d0
    5f68:	00005865 	.word	0x00005865
    5f6c:	200025cc 	.word	0x200025cc
    5f70:	00005839 	.word	0x00005839
    5f74:	200025c8 	.word	0x200025c8
    5f78:	42001400 	.word	0x42001400
    5f7c:	00001cb9 	.word	0x00001cb9
    5f80:	20000118 	.word	0x20000118
    5f84:	00006b39 	.word	0x00006b39
    5f88:	00001c29 	.word	0x00001c29
    5f8c:	e000e100 	.word	0xe000e100
    5f90:	00002901 	.word	0x00002901
    5f94:	1fffffff 	.word	0x1fffffff
    5f98:	20002544 	.word	0x20002544
    5f9c:	42001c00 	.word	0x42001c00
    5fa0:	000013dd 	.word	0x000013dd
    5fa4:	000016f7 	.word	0x000016f7
    5fa8:	000016e1 	.word	0x000016e1
    5fac:	0000ae70 	.word	0x0000ae70
    5fb0:	00006acd 	.word	0x00006acd
    5fb4:	e000e010 	.word	0xe000e010
    5fb8:	02dc6bff 	.word	0x02dc6bff
    5fbc:	e000ed00 	.word	0xe000ed00
    5fc0:	200025d4 	.word	0x200025d4
    5fc4:	00006877 	.word	0x00006877
    5fc8:	0000ae7c 	.word	0x0000ae7c
    5fcc:	000069d9 	.word	0x000069d9
    5fd0:	00000207 	.word	0x00000207
    5fd4:	000086ac 	.word	0x000086ac
    5fd8:	00006b05 	.word	0x00006b05
    5fdc:	0000af40 	.word	0x0000af40
    5fe0:	20002540 	.word	0x20002540
    5fe4:	200038a8 	.word	0x200038a8
    5fe8:	20003848 	.word	0x20003848
    5fec:	00002abd 	.word	0x00002abd
    5ff0:	000064a5 	.word	0x000064a5
    5ff4:	0000bb80 	.word	0x0000bb80
    5ff8:	0000aeac 	.word	0x0000aeac
    5ffc:	0000aed8 	.word	0x0000aed8
    6000:	0000af08 	.word	0x0000af08
    6004:	0000af98 	.word	0x0000af98
    6008:	c7ffffff 	.word	0xc7ffffff
    600c:	0000af44 	.word	0x0000af44
    6010:	200038d8 	.word	0x200038d8
    6014:	20003908 	.word	0x20003908
    6018:	20000108 	.word	0x20000108
    601c:	000009a5 	.word	0x000009a5
    6020:	0000af6c 	.word	0x0000af6c
    6024:	20000104 	.word	0x20000104
		STAGE = SEND;
    6028:	4bb0      	ldr	r3, [pc, #704]	; (62ec <main+0x6a0>)
    602a:	2202      	movs	r2, #2
    602c:	701a      	strb	r2, [r3, #0]
		photon128((uint8_t *)&seed,1,session_key);
    602e:	aa6d      	add	r2, sp, #436	; 0x1b4
    6030:	0039      	movs	r1, r7
    6032:	48af      	ldr	r0, [pc, #700]	; (62f0 <main+0x6a4>)
    6034:	ab04      	add	r3, sp, #16
    6036:	469c      	mov	ip, r3
    6038:	4460      	add	r0, ip
    603a:	4bae      	ldr	r3, [pc, #696]	; (62f4 <main+0x6a8>)
    603c:	4798      	blx	r3
		memset(&session_key[10],0,6);
    603e:	24d7      	movs	r4, #215	; 0xd7
    6040:	0064      	lsls	r4, r4, #1
    6042:	ab04      	add	r3, sp, #16
    6044:	469c      	mov	ip, r3
    6046:	4464      	add	r4, ip
    6048:	2206      	movs	r2, #6
    604a:	2100      	movs	r1, #0
    604c:	0020      	movs	r0, r4
    604e:	4baa      	ldr	r3, [pc, #680]	; (62f8 <main+0x6ac>)
    6050:	4798      	blx	r3
		*((uint32_t*) &session_key[10]) |= g_valid_nodes_mask;
    6052:	4aaa      	ldr	r2, [pc, #680]	; (62fc <main+0x6b0>)
    6054:	6813      	ldr	r3, [r2, #0]
    6056:	8023      	strh	r3, [r4, #0]
    6058:	0c1b      	lsrs	r3, r3, #16
    605a:	8063      	strh	r3, [r4, #2]
			if(g_valid_nodes_mask & (1<<i)) {
    605c:	6813      	ldr	r3, [r2, #0]
    605e:	2202      	movs	r2, #2
    6060:	421a      	tst	r2, r3
    6062:	d000      	beq.n	6066 <main+0x41a>
    6064:	e09c      	b.n	61a0 <main+0x554>
				g_session_res[i] = 2;
    6066:	4ba6      	ldr	r3, [pc, #664]	; (6300 <main+0x6b4>)
    6068:	605a      	str	r2, [r3, #4]
			if(g_valid_nodes_mask & (1<<i)) {
    606a:	4ba4      	ldr	r3, [pc, #656]	; (62fc <main+0x6b0>)
    606c:	681b      	ldr	r3, [r3, #0]
    606e:	075b      	lsls	r3, r3, #29
    6070:	d500      	bpl.n	6074 <main+0x428>
    6072:	e0c2      	b.n	61fa <main+0x5ae>
				g_session_res[i] = 2;
    6074:	4ba2      	ldr	r3, [pc, #648]	; (6300 <main+0x6b4>)
    6076:	2202      	movs	r2, #2
    6078:	609a      	str	r2, [r3, #8]
			if(g_session_res[i] == 2) continue;
    607a:	4ba1      	ldr	r3, [pc, #644]	; (6300 <main+0x6b4>)
    607c:	685b      	ldr	r3, [r3, #4]
    607e:	2b02      	cmp	r3, #2
    6080:	d010      	beq.n	60a4 <main+0x458>
			can_set_tx_buffer_element(&can_instance, &send_filter[i],i);
    6082:	4ca0      	ldr	r4, [pc, #640]	; (6304 <main+0x6b8>)
    6084:	003a      	movs	r2, r7
    6086:	a934      	add	r1, sp, #208	; 0xd0
    6088:	0020      	movs	r0, r4
    608a:	4b9f      	ldr	r3, [pc, #636]	; (6308 <main+0x6bc>)
    608c:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    608e:	6822      	ldr	r2, [r4, #0]
    6090:	6993      	ldr	r3, [r2, #24]
    6092:	2102      	movs	r1, #2
    6094:	4219      	tst	r1, r3
    6096:	d100      	bne.n	609a <main+0x44e>
    6098:	e0ec      	b.n	6274 <main+0x628>
	return module_inst->hw->TXBTO.reg;
    609a:	21d8      	movs	r1, #216	; 0xd8
    609c:	5853      	ldr	r3, [r2, r1]
			while(!(can_tx_get_transmission_status(&can_instance) & (1 << i)));
    609e:	2002      	movs	r0, #2
    60a0:	4218      	tst	r0, r3
    60a2:	d0fb      	beq.n	609c <main+0x450>
			if(g_session_res[i] == 2) continue;
    60a4:	4b96      	ldr	r3, [pc, #600]	; (6300 <main+0x6b4>)
    60a6:	689b      	ldr	r3, [r3, #8]
    60a8:	2b02      	cmp	r3, #2
    60aa:	d012      	beq.n	60d2 <main+0x486>
			can_set_tx_buffer_element(&can_instance, &send_filter[i],i);
    60ac:	4c95      	ldr	r4, [pc, #596]	; (6304 <main+0x6b8>)
    60ae:	2202      	movs	r2, #2
    60b0:	a946      	add	r1, sp, #280	; 0x118
    60b2:	0020      	movs	r0, r4
    60b4:	4b94      	ldr	r3, [pc, #592]	; (6308 <main+0x6bc>)
    60b6:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    60b8:	6822      	ldr	r2, [r4, #0]
    60ba:	6993      	ldr	r3, [r2, #24]
    60bc:	2102      	movs	r1, #2
    60be:	4219      	tst	r1, r3
    60c0:	d102      	bne.n	60c8 <main+0x47c>
	module_inst->hw->TXBAR.reg = trig_mask;
    60c2:	3102      	adds	r1, #2
    60c4:	23d0      	movs	r3, #208	; 0xd0
    60c6:	50d1      	str	r1, [r2, r3]
	return module_inst->hw->TXBTO.reg;
    60c8:	20d8      	movs	r0, #216	; 0xd8
			while(!(can_tx_get_transmission_status(&can_instance) & (1 << i)));
    60ca:	2104      	movs	r1, #4
    60cc:	5813      	ldr	r3, [r2, r0]
    60ce:	4219      	tst	r1, r3
    60d0:	d0fc      	beq.n	60cc <main+0x480>
				if(ReceivedResponseHashes[i][j] != StoredResponseHashes[i][j]){
    60d2:	4e8e      	ldr	r6, [pc, #568]	; (630c <main+0x6c0>)
    60d4:	2501      	movs	r5, #1
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    60d6:	ac6a      	add	r4, sp, #424	; 0x1a8
			can_set_rx_standard_filter(&can_instance, &res_filter[i],
    60d8:	4b8d      	ldr	r3, [pc, #564]	; (6310 <main+0x6c4>)
    60da:	4698      	mov	r8, r3
    60dc:	00a9      	lsls	r1, r5, #2
    60de:	4b8d      	ldr	r3, [pc, #564]	; (6314 <main+0x6c8>)
    60e0:	510b      	str	r3, [r1, r4]
			res_filter[i].S0.bit.SFID1 = 0x400+i;
    60e2:	590b      	ldr	r3, [r1, r4]
    60e4:	0432      	lsls	r2, r6, #16
    60e6:	488c      	ldr	r0, [pc, #560]	; (6318 <main+0x6cc>)
    60e8:	4003      	ands	r3, r0
    60ea:	4313      	orrs	r3, r2
    60ec:	510b      	str	r3, [r1, r4]
    60ee:	2380      	movs	r3, #128	; 0x80
    60f0:	00db      	lsls	r3, r3, #3
    60f2:	18f2      	adds	r2, r6, r3
			res_filter[i].S0.bit.SFID2 = i;
    60f4:	590b      	ldr	r3, [r1, r4]
    60f6:	0552      	lsls	r2, r2, #21
    60f8:	0d52      	lsrs	r2, r2, #21
    60fa:	0adb      	lsrs	r3, r3, #11
    60fc:	02db      	lsls	r3, r3, #11
    60fe:	4313      	orrs	r3, r2
    6100:	510b      	str	r3, [r1, r4]
			res_filter[i].S0.bit.SFEC =
    6102:	590a      	ldr	r2, [r1, r4]
    6104:	23e0      	movs	r3, #224	; 0xe0
    6106:	059b      	lsls	r3, r3, #22
    6108:	4313      	orrs	r3, r2
    610a:	510b      	str	r3, [r1, r4]
			can_set_rx_standard_filter(&can_instance, &res_filter[i],
    610c:	1861      	adds	r1, r4, r1
    610e:	002a      	movs	r2, r5
    6110:	487c      	ldr	r0, [pc, #496]	; (6304 <main+0x6b8>)
    6112:	47c0      	blx	r8
		for(int i = 1; i <= MAX_BUFFS; i++) {
    6114:	3501      	adds	r5, #1
    6116:	3601      	adds	r6, #1
    6118:	0576      	lsls	r6, r6, #21
    611a:	0d76      	lsrs	r6, r6, #21
    611c:	2d05      	cmp	r5, #5
    611e:	d1dd      	bne.n	60dc <main+0x490>
	module_inst->hw->IE.reg |= source;
    6120:	4d78      	ldr	r5, [pc, #480]	; (6304 <main+0x6b8>)
    6122:	682a      	ldr	r2, [r5, #0]
    6124:	6d51      	ldr	r1, [r2, #84]	; 0x54
    6126:	2380      	movs	r3, #128	; 0x80
    6128:	031b      	lsls	r3, r3, #12
    612a:	430b      	orrs	r3, r1
    612c:	6553      	str	r3, [r2, #84]	; 0x54
		STAGE = NORMAL;
    612e:	2203      	movs	r2, #3
    6130:	4b6e      	ldr	r3, [pc, #440]	; (62ec <main+0x6a0>)
    6132:	701a      	strb	r2, [r3, #0]
		g_normal_received_mask = 0;
    6134:	2600      	movs	r6, #0
    6136:	4b79      	ldr	r3, [pc, #484]	; (631c <main+0x6d0>)
    6138:	601e      	str	r6, [r3, #0]
		memset(message[0],0,8);
    613a:	ac71      	add	r4, sp, #452	; 0x1c4
    613c:	3205      	adds	r2, #5
    613e:	2100      	movs	r1, #0
    6140:	0020      	movs	r0, r4
    6142:	4b6d      	ldr	r3, [pc, #436]	; (62f8 <main+0x6ac>)
    6144:	4798      	blx	r3
	tx_element->T0.reg = 0;
    6146:	9658      	str	r6, [sp, #352]	; 0x160
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    6148:	2388      	movs	r3, #136	; 0x88
    614a:	041b      	lsls	r3, r3, #16
    614c:	9359      	str	r3, [sp, #356]	; 0x164
		tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x301);
    614e:	9a58      	ldr	r2, [sp, #352]	; 0x160
    6150:	4b73      	ldr	r3, [pc, #460]	; (6320 <main+0x6d4>)
    6152:	4313      	orrs	r3, r2
    6154:	9358      	str	r3, [sp, #352]	; 0x160
		tx_element.T1.reg = CAN_TX_ELEMENT_T1_FDF | CAN_TX_ELEMENT_T1_BRS |
    6156:	23e0      	movs	r3, #224	; 0xe0
    6158:	039b      	lsls	r3, r3, #14
    615a:	9359      	str	r3, [sp, #356]	; 0x164
		memcpy(tx_element.data,message[0],8);
    615c:	ab5a      	add	r3, sp, #360	; 0x168
    615e:	cc06      	ldmia	r4!, {r1, r2}
    6160:	c306      	stmia	r3!, {r1, r2}
		can_set_tx_buffer_element(&can_instance, &tx_element,
    6162:	003a      	movs	r2, r7
    6164:	a958      	add	r1, sp, #352	; 0x160
    6166:	0028      	movs	r0, r5
    6168:	4b67      	ldr	r3, [pc, #412]	; (6308 <main+0x6bc>)
    616a:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    616c:	682a      	ldr	r2, [r5, #0]
    616e:	6993      	ldr	r3, [r2, #24]
    6170:	2102      	movs	r1, #2
    6172:	4219      	tst	r1, r3
    6174:	d101      	bne.n	617a <main+0x52e>
	module_inst->hw->TXBAR.reg = trig_mask;
    6176:	23d0      	movs	r3, #208	; 0xd0
    6178:	50d1      	str	r1, [r2, r3]
	return module_inst->hw->TXBTO.reg;
    617a:	21d8      	movs	r1, #216	; 0xd8
    617c:	5853      	ldr	r3, [r2, r1]
		while(!(can_tx_get_transmission_status(&can_instance) & (1 << CAN_FILTER_REGULAR_SEND)));
    617e:	2002      	movs	r0, #2
    6180:	4218      	tst	r0, r3
    6182:	d0fb      	beq.n	617c <main+0x530>
		uint32_t endVal = TIMEVAL;
    6184:	4b67      	ldr	r3, [pc, #412]	; (6324 <main+0x6d8>)
    6186:	689b      	ldr	r3, [r3, #8]
    6188:	2314      	movs	r3, #20
    618a:	469c      	mov	ip, r3
			while(g_normal_received_mask==0);
    618c:	4963      	ldr	r1, [pc, #396]	; (631c <main+0x6d0>)
			for(flag = 1; (g_normal_received_mask & (1<<flag))==0;flag++);
    618e:	468b      	mov	fp, r1
    6190:	0008      	movs	r0, r1
	if (buff->last_write == buff->last_read) return NULL;
    6192:	4b65      	ldr	r3, [pc, #404]	; (6328 <main+0x6dc>)
    6194:	469a      	mov	sl, r3
			g_normal_received_flags[flag]--;
    6196:	4b65      	ldr	r3, [pc, #404]	; (632c <main+0x6e0>)
    6198:	4699      	mov	r9, r3
			g_normal_received_mask &= ~(1<<flag);
    619a:	4688      	mov	r8, r1
    619c:	4666      	mov	r6, ip
    619e:	e07f      	b.n	62a0 <main+0x654>
				g_session_res[i] = 0;
    61a0:	2400      	movs	r4, #0
    61a2:	4b57      	ldr	r3, [pc, #348]	; (6300 <main+0x6b4>)
    61a4:	605c      	str	r4, [r3, #4]
				crypto_aead_encrypt(EncryptedSessionKeys[i], &clen, session_key, 16, NULL, NULL, NULL, n, NodeSharedSecrets[i]);
    61a6:	4d62      	ldr	r5, [pc, #392]	; (6330 <main+0x6e4>)
    61a8:	4b62      	ldr	r3, [pc, #392]	; (6334 <main+0x6e8>)
    61aa:	9308      	str	r3, [sp, #32]
    61ac:	4b62      	ldr	r3, [pc, #392]	; (6338 <main+0x6ec>)
    61ae:	9307      	str	r3, [sp, #28]
    61b0:	9406      	str	r4, [sp, #24]
    61b2:	2200      	movs	r2, #0
    61b4:	2300      	movs	r3, #0
    61b6:	9204      	str	r2, [sp, #16]
    61b8:	9305      	str	r3, [sp, #20]
    61ba:	9402      	str	r4, [sp, #8]
    61bc:	2210      	movs	r2, #16
    61be:	2300      	movs	r3, #0
    61c0:	9200      	str	r2, [sp, #0]
    61c2:	9301      	str	r3, [sp, #4]
    61c4:	aa6d      	add	r2, sp, #436	; 0x1b4
    61c6:	a978      	add	r1, sp, #480	; 0x1e0
    61c8:	0028      	movs	r0, r5
    61ca:	4b5c      	ldr	r3, [pc, #368]	; (633c <main+0x6f0>)
    61cc:	4798      	blx	r3
				printf("Encrypt: Node %i, Output to tx_element size: %i\r\n",i,clen);
    61ce:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    61d0:	0039      	movs	r1, r7
    61d2:	485b      	ldr	r0, [pc, #364]	; (6340 <main+0x6f4>)
    61d4:	4b5b      	ldr	r3, [pc, #364]	; (6344 <main+0x6f8>)
    61d6:	4798      	blx	r3
	tx_element->T0.reg = 0;
    61d8:	9434      	str	r4, [sp, #208]	; 0xd0
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    61da:	2388      	movs	r3, #136	; 0x88
    61dc:	041b      	lsls	r3, r3, #16
    61de:	9335      	str	r3, [sp, #212]	; 0xd4
				send_filter[i].T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x200 + i);
    61e0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    61e2:	4b59      	ldr	r3, [pc, #356]	; (6348 <main+0x6fc>)
    61e4:	4313      	orrs	r3, r2
    61e6:	9334      	str	r3, [sp, #208]	; 0xd0
				send_filter[i].T1.reg = CAN_TX_ELEMENT_T1_FDF | CAN_TX_ELEMENT_T1_BRS |
    61e8:	23e8      	movs	r3, #232	; 0xe8
    61ea:	039b      	lsls	r3, r3, #14
    61ec:	9335      	str	r3, [sp, #212]	; 0xd4
				memcpy(send_filter[i].data,EncryptedSessionKeys[i],16);
    61ee:	2210      	movs	r2, #16
    61f0:	0029      	movs	r1, r5
    61f2:	a836      	add	r0, sp, #216	; 0xd8
    61f4:	4b55      	ldr	r3, [pc, #340]	; (634c <main+0x700>)
    61f6:	4798      	blx	r3
    61f8:	e737      	b.n	606a <main+0x41e>
				g_session_res[i] = 0;
    61fa:	2400      	movs	r4, #0
    61fc:	4b40      	ldr	r3, [pc, #256]	; (6300 <main+0x6b4>)
    61fe:	609c      	str	r4, [r3, #8]
				crypto_aead_encrypt(EncryptedSessionKeys[i], &clen, session_key, 16, NULL, NULL, NULL, n, NodeSharedSecrets[i]);
    6200:	4d53      	ldr	r5, [pc, #332]	; (6350 <main+0x704>)
    6202:	4b54      	ldr	r3, [pc, #336]	; (6354 <main+0x708>)
    6204:	9308      	str	r3, [sp, #32]
    6206:	4b4c      	ldr	r3, [pc, #304]	; (6338 <main+0x6ec>)
    6208:	9307      	str	r3, [sp, #28]
    620a:	9406      	str	r4, [sp, #24]
    620c:	2200      	movs	r2, #0
    620e:	2300      	movs	r3, #0
    6210:	9204      	str	r2, [sp, #16]
    6212:	9305      	str	r3, [sp, #20]
    6214:	9402      	str	r4, [sp, #8]
    6216:	2210      	movs	r2, #16
    6218:	2300      	movs	r3, #0
    621a:	9200      	str	r2, [sp, #0]
    621c:	9301      	str	r3, [sp, #4]
    621e:	aa6d      	add	r2, sp, #436	; 0x1b4
    6220:	a978      	add	r1, sp, #480	; 0x1e0
    6222:	0028      	movs	r0, r5
    6224:	4b45      	ldr	r3, [pc, #276]	; (633c <main+0x6f0>)
    6226:	4798      	blx	r3
				printf("Encrypt: Node %i, Output to tx_element size: %i\r\n",i,clen);
    6228:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    622a:	2102      	movs	r1, #2
    622c:	4844      	ldr	r0, [pc, #272]	; (6340 <main+0x6f4>)
    622e:	4b45      	ldr	r3, [pc, #276]	; (6344 <main+0x6f8>)
    6230:	4798      	blx	r3
	tx_element->T0.reg = 0;
    6232:	2390      	movs	r3, #144	; 0x90
    6234:	aa04      	add	r2, sp, #16
    6236:	2178      	movs	r1, #120	; 0x78
    6238:	1852      	adds	r2, r2, r1
    623a:	50d4      	str	r4, [r2, r3]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    623c:	311c      	adds	r1, #28
    623e:	2288      	movs	r2, #136	; 0x88
    6240:	0412      	lsls	r2, r2, #16
    6242:	a804      	add	r0, sp, #16
    6244:	3478      	adds	r4, #120	; 0x78
    6246:	1900      	adds	r0, r0, r4
    6248:	5042      	str	r2, [r0, r1]
				send_filter[i].T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x200 + i);
    624a:	aa04      	add	r2, sp, #16
    624c:	2078      	movs	r0, #120	; 0x78
    624e:	1812      	adds	r2, r2, r0
    6250:	58d0      	ldr	r0, [r2, r3]
    6252:	4a41      	ldr	r2, [pc, #260]	; (6358 <main+0x70c>)
    6254:	4302      	orrs	r2, r0
    6256:	a804      	add	r0, sp, #16
    6258:	1900      	adds	r0, r0, r4
    625a:	50c2      	str	r2, [r0, r3]
				send_filter[i].T1.reg = CAN_TX_ELEMENT_T1_FDF | CAN_TX_ELEMENT_T1_BRS |
    625c:	23e8      	movs	r3, #232	; 0xe8
    625e:	039b      	lsls	r3, r3, #14
    6260:	aa04      	add	r2, sp, #16
    6262:	2078      	movs	r0, #120	; 0x78
    6264:	1812      	adds	r2, r2, r0
    6266:	5053      	str	r3, [r2, r1]
				memcpy(send_filter[i].data,EncryptedSessionKeys[i],16);
    6268:	2210      	movs	r2, #16
    626a:	0029      	movs	r1, r5
    626c:	a848      	add	r0, sp, #288	; 0x120
    626e:	4b37      	ldr	r3, [pc, #220]	; (634c <main+0x700>)
    6270:	4798      	blx	r3
    6272:	e702      	b.n	607a <main+0x42e>
	module_inst->hw->TXBAR.reg = trig_mask;
    6274:	23d0      	movs	r3, #208	; 0xd0
    6276:	2102      	movs	r1, #2
    6278:	50d1      	str	r1, [r2, r3]
    627a:	e70e      	b.n	609a <main+0x44e>
			for(flag = 1; (g_normal_received_mask & (1<<flag))==0;flag++);
    627c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    627e:	930a      	str	r3, [sp, #40]	; 0x28
    6280:	2301      	movs	r3, #1
    6282:	e01d      	b.n	62c0 <main+0x674>
			g_normal_received_flags[flag]--;
    6284:	009b      	lsls	r3, r3, #2
    6286:	464a      	mov	r2, r9
    6288:	589c      	ldr	r4, [r3, r2]
    628a:	3c01      	subs	r4, #1
    628c:	509c      	str	r4, [r3, r2]
			g_normal_received_mask &= ~(1<<flag);
    628e:	4643      	mov	r3, r8
    6290:	681b      	ldr	r3, [r3, #0]
    6292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6294:	4393      	bics	r3, r2
    6296:	4642      	mov	r2, r8
    6298:	6013      	str	r3, [r2, #0]
    629a:	3e01      	subs	r6, #1
		for(int i = 0; i < TOTAL_MESSAGES; i++) {
    629c:	2e00      	cmp	r6, #0
    629e:	d05d      	beq.n	635c <main+0x710>
			while(g_normal_received_mask==0);
    62a0:	680b      	ldr	r3, [r1, #0]
    62a2:	2b00      	cmp	r3, #0
    62a4:	d0fc      	beq.n	62a0 <main+0x654>
			for(flag = 1; (g_normal_received_mask & (1<<flag))==0;flag++);
    62a6:	465b      	mov	r3, fp
    62a8:	681b      	ldr	r3, [r3, #0]
    62aa:	2202      	movs	r2, #2
    62ac:	421a      	tst	r2, r3
    62ae:	d1e5      	bne.n	627c <main+0x630>
    62b0:	2301      	movs	r3, #1
    62b2:	3301      	adds	r3, #1
    62b4:	003a      	movs	r2, r7
    62b6:	409a      	lsls	r2, r3
    62b8:	6804      	ldr	r4, [r0, #0]
    62ba:	4214      	tst	r4, r2
    62bc:	d0f9      	beq.n	62b2 <main+0x666>
    62be:	920a      	str	r2, [sp, #40]	; 0x28
    62c0:	2492      	movs	r4, #146	; 0x92
    62c2:	0064      	lsls	r4, r4, #1
    62c4:	435c      	muls	r4, r3
    62c6:	4655      	mov	r5, sl
    62c8:	192d      	adds	r5, r5, r4
    62ca:	786d      	ldrb	r5, [r5, #1]
    62cc:	4652      	mov	r2, sl
    62ce:	5ca4      	ldrb	r4, [r4, r2]
    62d0:	42ac      	cmp	r4, r5
    62d2:	d0d7      	beq.n	6284 <main+0x638>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    62d4:	2492      	movs	r4, #146	; 0x92
    62d6:	0064      	lsls	r4, r4, #1
    62d8:	435c      	muls	r4, r3
    62da:	4a13      	ldr	r2, [pc, #76]	; (6328 <main+0x6dc>)
    62dc:	4694      	mov	ip, r2
    62de:	4464      	add	r4, ip
    62e0:	3501      	adds	r5, #1
    62e2:	2203      	movs	r2, #3
    62e4:	4015      	ands	r5, r2
    62e6:	7065      	strb	r5, [r4, #1]
    62e8:	e7cc      	b.n	6284 <main+0x638>
    62ea:	46c0      	nop			; (mov r8, r8)
    62ec:	20002538 	.word	0x20002538
    62f0:	00000207 	.word	0x00000207
    62f4:	00005751 	.word	0x00005751
    62f8:	00006877 	.word	0x00006877
    62fc:	20000104 	.word	0x20000104
    6300:	20002598 	.word	0x20002598
    6304:	20002544 	.word	0x20002544
    6308:	000017c1 	.word	0x000017c1
    630c:	00000401 	.word	0x00000401
    6310:	0000172d 	.word	0x0000172d
    6314:	880007ff 	.word	0x880007ff
    6318:	f800ffff 	.word	0xf800ffff
    631c:	20002594 	.word	0x20002594
    6320:	0c040000 	.word	0x0c040000
    6324:	e000e010 	.word	0xe000e010
    6328:	200025d4 	.word	0x200025d4
    632c:	20002588 	.word	0x20002588
    6330:	20003828 	.word	0x20003828
    6334:	20003918 	.word	0x20003918
    6338:	20000108 	.word	0x20000108
    633c:	0000011d 	.word	0x0000011d
    6340:	0000afb0 	.word	0x0000afb0
    6344:	000069d9 	.word	0x000069d9
    6348:	08040000 	.word	0x08040000
    634c:	00006841 	.word	0x00006841
    6350:	20003838 	.word	0x20003838
    6354:	20003928 	.word	0x20003928
    6358:	08080000 	.word	0x08080000
		printf("Normal operation is over\r\n");
    635c:	483d      	ldr	r0, [pc, #244]	; (6454 <main+0x808>)
    635e:	4b3e      	ldr	r3, [pc, #248]	; (6458 <main+0x80c>)
    6360:	4798      	blx	r3
		startVal = TIMEVAL;
    6362:	4b3e      	ldr	r3, [pc, #248]	; (645c <main+0x810>)
    6364:	689b      	ldr	r3, [r3, #8]
    6366:	483e      	ldr	r0, [pc, #248]	; (6460 <main+0x814>)
    6368:	1ac0      	subs	r0, r0, r3
    636a:	493e      	ldr	r1, [pc, #248]	; (6464 <main+0x818>)
    636c:	4b3e      	ldr	r3, [pc, #248]	; (6468 <main+0x81c>)
    636e:	4798      	blx	r3
    6370:	4b3e      	ldr	r3, [pc, #248]	; (646c <main+0x820>)
    6372:	681b      	ldr	r3, [r3, #0]
    6374:	18c0      	adds	r0, r0, r3
    6376:	4b3e      	ldr	r3, [pc, #248]	; (6470 <main+0x824>)
    6378:	6018      	str	r0, [r3, #0]
		STAGE = RECEIVE;
    637a:	4b3e      	ldr	r3, [pc, #248]	; (6474 <main+0x828>)
    637c:	466a      	mov	r2, sp
    637e:	2137      	movs	r1, #55	; 0x37
    6380:	1852      	adds	r2, r2, r1
    6382:	7812      	ldrb	r2, [r2, #0]
    6384:	701a      	strb	r2, [r3, #0]
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    6386:	4b3c      	ldr	r3, [pc, #240]	; (6478 <main+0x82c>)
    6388:	469b      	mov	fp, r3
    638a:	936b      	str	r3, [sp, #428]	; 0x1ac
			res_filter[i].S0.bit.SFID1 = 0x100 + i;
    638c:	9a6b      	ldr	r2, [sp, #428]	; 0x1ac
    638e:	4b3b      	ldr	r3, [pc, #236]	; (647c <main+0x830>)
    6390:	469a      	mov	sl, r3
    6392:	401a      	ands	r2, r3
    6394:	4b3a      	ldr	r3, [pc, #232]	; (6480 <main+0x834>)
    6396:	4313      	orrs	r3, r2
    6398:	936b      	str	r3, [sp, #428]	; 0x1ac
			res_filter[i].S0.bit.SFID2 = i;
    639a:	9b6b      	ldr	r3, [sp, #428]	; 0x1ac
    639c:	0adb      	lsrs	r3, r3, #11
    639e:	02db      	lsls	r3, r3, #11
    63a0:	433b      	orrs	r3, r7
    63a2:	936b      	str	r3, [sp, #428]	; 0x1ac
			res_filter[i].S0.bit.SFEC =
    63a4:	9b6b      	ldr	r3, [sp, #428]	; 0x1ac
    63a6:	26e0      	movs	r6, #224	; 0xe0
    63a8:	05b6      	lsls	r6, r6, #22
    63aa:	4333      	orrs	r3, r6
    63ac:	936b      	str	r3, [sp, #428]	; 0x1ac
			g_hash_res[i] = 0;
    63ae:	4b35      	ldr	r3, [pc, #212]	; (6484 <main+0x838>)
    63b0:	4699      	mov	r9, r3
    63b2:	2200      	movs	r2, #0
    63b4:	605a      	str	r2, [r3, #4]
			can_set_rx_standard_filter(&can_instance, &(res_filter[i]),i);
    63b6:	4d34      	ldr	r5, [pc, #208]	; (6488 <main+0x83c>)
    63b8:	003a      	movs	r2, r7
    63ba:	a96b      	add	r1, sp, #428	; 0x1ac
    63bc:	0028      	movs	r0, r5
    63be:	4b33      	ldr	r3, [pc, #204]	; (648c <main+0x840>)
    63c0:	4698      	mov	r8, r3
    63c2:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    63c4:	682a      	ldr	r2, [r5, #0]
    63c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
    63c8:	2480      	movs	r4, #128	; 0x80
    63ca:	0324      	lsls	r4, r4, #12
    63cc:	4323      	orrs	r3, r4
    63ce:	6553      	str	r3, [r2, #84]	; 0x54
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    63d0:	465b      	mov	r3, fp
    63d2:	936c      	str	r3, [sp, #432]	; 0x1b0
			res_filter[i].S0.bit.SFID1 = 0x100 + i;
    63d4:	9a6c      	ldr	r2, [sp, #432]	; 0x1b0
    63d6:	4653      	mov	r3, sl
    63d8:	401a      	ands	r2, r3
    63da:	2381      	movs	r3, #129	; 0x81
    63dc:	045b      	lsls	r3, r3, #17
    63de:	4313      	orrs	r3, r2
    63e0:	936c      	str	r3, [sp, #432]	; 0x1b0
			res_filter[i].S0.bit.SFID2 = i;
    63e2:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
    63e4:	0adb      	lsrs	r3, r3, #11
    63e6:	02db      	lsls	r3, r3, #11
    63e8:	2202      	movs	r2, #2
    63ea:	4313      	orrs	r3, r2
    63ec:	936c      	str	r3, [sp, #432]	; 0x1b0
			res_filter[i].S0.bit.SFEC =
    63ee:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
    63f0:	431e      	orrs	r6, r3
    63f2:	966c      	str	r6, [sp, #432]	; 0x1b0
			g_hash_res[i] = 0;
    63f4:	464b      	mov	r3, r9
    63f6:	2200      	movs	r2, #0
    63f8:	609a      	str	r2, [r3, #8]
			can_set_rx_standard_filter(&can_instance, &(res_filter[i]),i);
    63fa:	3202      	adds	r2, #2
    63fc:	a96c      	add	r1, sp, #432	; 0x1b0
    63fe:	0028      	movs	r0, r5
    6400:	47c0      	blx	r8
	module_inst->hw->IE.reg |= source;
    6402:	682b      	ldr	r3, [r5, #0]
    6404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    6406:	4314      	orrs	r4, r2
    6408:	655c      	str	r4, [r3, #84]	; 0x54
		check = InitKeys(hardcoded,secret_key,StoredPublicKeys[0],ec);
    640a:	ab79      	add	r3, sp, #484	; 0x1e4
    640c:	4a20      	ldr	r2, [pc, #128]	; (6490 <main+0x844>)
    640e:	a97d      	add	r1, sp, #500	; 0x1f4
    6410:	980c      	ldr	r0, [sp, #48]	; 0x30
    6412:	4c20      	ldr	r4, [pc, #128]	; (6494 <main+0x848>)
    6414:	47a0      	blx	r4
		if(!check) {
    6416:	2800      	cmp	r0, #0
    6418:	d100      	bne.n	641c <main+0x7d0>
    641a:	e51d      	b.n	5e58 <main+0x20c>
		check = InitSharedSecrets(secret_key, StoredPublicKeys,NodeSharedSecrets);
    641c:	4a1e      	ldr	r2, [pc, #120]	; (6498 <main+0x84c>)
    641e:	491c      	ldr	r1, [pc, #112]	; (6490 <main+0x844>)
    6420:	a87d      	add	r0, sp, #500	; 0x1f4
    6422:	4b1e      	ldr	r3, [pc, #120]	; (649c <main+0x850>)
    6424:	4798      	blx	r3
		if (!check) {
    6426:	2800      	cmp	r0, #0
    6428:	d100      	bne.n	642c <main+0x7e0>
    642a:	e522      	b.n	5e72 <main+0x226>
			while(g_hash_res[i] == 0);
    642c:	4a15      	ldr	r2, [pc, #84]	; (6484 <main+0x838>)
    642e:	6853      	ldr	r3, [r2, #4]
    6430:	2b00      	cmp	r3, #0
    6432:	d0fc      	beq.n	642e <main+0x7e2>
    6434:	4a13      	ldr	r2, [pc, #76]	; (6484 <main+0x838>)
    6436:	6893      	ldr	r3, [r2, #8]
    6438:	2b00      	cmp	r3, #0
    643a:	d0fc      	beq.n	6436 <main+0x7ea>
		g_valid_nodes_mask = 0;
    643c:	2200      	movs	r2, #0
    643e:	4b18      	ldr	r3, [pc, #96]	; (64a0 <main+0x854>)
    6440:	601a      	str	r2, [r3, #0]
    6442:	2510      	movs	r5, #16
    6444:	2300      	movs	r3, #0
    6446:	4698      	mov	r8, r3
		for (int i = 1; i <= NODE_TOTAL; i++) {
    6448:	2601      	movs	r6, #1
			can_set_rx_standard_filter(&can_instance, &(res_filter[i]),i);
    644a:	4b10      	ldr	r3, [pc, #64]	; (648c <main+0x840>)
    644c:	469b      	mov	fp, r3
	if (buff->last_write == buff->last_read) return NULL;
    644e:	2300      	movs	r3, #0
    6450:	4699      	mov	r9, r3
    6452:	e523      	b.n	5e9c <main+0x250>
    6454:	0000afe4 	.word	0x0000afe4
    6458:	00006acd 	.word	0x00006acd
    645c:	e000e010 	.word	0xe000e010
    6460:	02dc6bff 	.word	0x02dc6bff
    6464:	0000bb80 	.word	0x0000bb80
    6468:	000064a5 	.word	0x000064a5
    646c:	20002540 	.word	0x20002540
    6470:	20003814 	.word	0x20003814
    6474:	20002538 	.word	0x20002538
    6478:	880007ff 	.word	0x880007ff
    647c:	f800ffff 	.word	0xf800ffff
    6480:	01010000 	.word	0x01010000
    6484:	2000257c 	.word	0x2000257c
    6488:	20002544 	.word	0x20002544
    648c:	0000172d 	.word	0x0000172d
    6490:	20003848 	.word	0x20003848
    6494:	00005b75 	.word	0x00005b75
    6498:	20003908 	.word	0x20003908
    649c:	00005bcd 	.word	0x00005bcd
    64a0:	20000104 	.word	0x20000104

000064a4 <__udivsi3>:
    64a4:	2200      	movs	r2, #0
    64a6:	0843      	lsrs	r3, r0, #1
    64a8:	428b      	cmp	r3, r1
    64aa:	d374      	bcc.n	6596 <__udivsi3+0xf2>
    64ac:	0903      	lsrs	r3, r0, #4
    64ae:	428b      	cmp	r3, r1
    64b0:	d35f      	bcc.n	6572 <__udivsi3+0xce>
    64b2:	0a03      	lsrs	r3, r0, #8
    64b4:	428b      	cmp	r3, r1
    64b6:	d344      	bcc.n	6542 <__udivsi3+0x9e>
    64b8:	0b03      	lsrs	r3, r0, #12
    64ba:	428b      	cmp	r3, r1
    64bc:	d328      	bcc.n	6510 <__udivsi3+0x6c>
    64be:	0c03      	lsrs	r3, r0, #16
    64c0:	428b      	cmp	r3, r1
    64c2:	d30d      	bcc.n	64e0 <__udivsi3+0x3c>
    64c4:	22ff      	movs	r2, #255	; 0xff
    64c6:	0209      	lsls	r1, r1, #8
    64c8:	ba12      	rev	r2, r2
    64ca:	0c03      	lsrs	r3, r0, #16
    64cc:	428b      	cmp	r3, r1
    64ce:	d302      	bcc.n	64d6 <__udivsi3+0x32>
    64d0:	1212      	asrs	r2, r2, #8
    64d2:	0209      	lsls	r1, r1, #8
    64d4:	d065      	beq.n	65a2 <__udivsi3+0xfe>
    64d6:	0b03      	lsrs	r3, r0, #12
    64d8:	428b      	cmp	r3, r1
    64da:	d319      	bcc.n	6510 <__udivsi3+0x6c>
    64dc:	e000      	b.n	64e0 <__udivsi3+0x3c>
    64de:	0a09      	lsrs	r1, r1, #8
    64e0:	0bc3      	lsrs	r3, r0, #15
    64e2:	428b      	cmp	r3, r1
    64e4:	d301      	bcc.n	64ea <__udivsi3+0x46>
    64e6:	03cb      	lsls	r3, r1, #15
    64e8:	1ac0      	subs	r0, r0, r3
    64ea:	4152      	adcs	r2, r2
    64ec:	0b83      	lsrs	r3, r0, #14
    64ee:	428b      	cmp	r3, r1
    64f0:	d301      	bcc.n	64f6 <__udivsi3+0x52>
    64f2:	038b      	lsls	r3, r1, #14
    64f4:	1ac0      	subs	r0, r0, r3
    64f6:	4152      	adcs	r2, r2
    64f8:	0b43      	lsrs	r3, r0, #13
    64fa:	428b      	cmp	r3, r1
    64fc:	d301      	bcc.n	6502 <__udivsi3+0x5e>
    64fe:	034b      	lsls	r3, r1, #13
    6500:	1ac0      	subs	r0, r0, r3
    6502:	4152      	adcs	r2, r2
    6504:	0b03      	lsrs	r3, r0, #12
    6506:	428b      	cmp	r3, r1
    6508:	d301      	bcc.n	650e <__udivsi3+0x6a>
    650a:	030b      	lsls	r3, r1, #12
    650c:	1ac0      	subs	r0, r0, r3
    650e:	4152      	adcs	r2, r2
    6510:	0ac3      	lsrs	r3, r0, #11
    6512:	428b      	cmp	r3, r1
    6514:	d301      	bcc.n	651a <__udivsi3+0x76>
    6516:	02cb      	lsls	r3, r1, #11
    6518:	1ac0      	subs	r0, r0, r3
    651a:	4152      	adcs	r2, r2
    651c:	0a83      	lsrs	r3, r0, #10
    651e:	428b      	cmp	r3, r1
    6520:	d301      	bcc.n	6526 <__udivsi3+0x82>
    6522:	028b      	lsls	r3, r1, #10
    6524:	1ac0      	subs	r0, r0, r3
    6526:	4152      	adcs	r2, r2
    6528:	0a43      	lsrs	r3, r0, #9
    652a:	428b      	cmp	r3, r1
    652c:	d301      	bcc.n	6532 <__udivsi3+0x8e>
    652e:	024b      	lsls	r3, r1, #9
    6530:	1ac0      	subs	r0, r0, r3
    6532:	4152      	adcs	r2, r2
    6534:	0a03      	lsrs	r3, r0, #8
    6536:	428b      	cmp	r3, r1
    6538:	d301      	bcc.n	653e <__udivsi3+0x9a>
    653a:	020b      	lsls	r3, r1, #8
    653c:	1ac0      	subs	r0, r0, r3
    653e:	4152      	adcs	r2, r2
    6540:	d2cd      	bcs.n	64de <__udivsi3+0x3a>
    6542:	09c3      	lsrs	r3, r0, #7
    6544:	428b      	cmp	r3, r1
    6546:	d301      	bcc.n	654c <__udivsi3+0xa8>
    6548:	01cb      	lsls	r3, r1, #7
    654a:	1ac0      	subs	r0, r0, r3
    654c:	4152      	adcs	r2, r2
    654e:	0983      	lsrs	r3, r0, #6
    6550:	428b      	cmp	r3, r1
    6552:	d301      	bcc.n	6558 <__udivsi3+0xb4>
    6554:	018b      	lsls	r3, r1, #6
    6556:	1ac0      	subs	r0, r0, r3
    6558:	4152      	adcs	r2, r2
    655a:	0943      	lsrs	r3, r0, #5
    655c:	428b      	cmp	r3, r1
    655e:	d301      	bcc.n	6564 <__udivsi3+0xc0>
    6560:	014b      	lsls	r3, r1, #5
    6562:	1ac0      	subs	r0, r0, r3
    6564:	4152      	adcs	r2, r2
    6566:	0903      	lsrs	r3, r0, #4
    6568:	428b      	cmp	r3, r1
    656a:	d301      	bcc.n	6570 <__udivsi3+0xcc>
    656c:	010b      	lsls	r3, r1, #4
    656e:	1ac0      	subs	r0, r0, r3
    6570:	4152      	adcs	r2, r2
    6572:	08c3      	lsrs	r3, r0, #3
    6574:	428b      	cmp	r3, r1
    6576:	d301      	bcc.n	657c <__udivsi3+0xd8>
    6578:	00cb      	lsls	r3, r1, #3
    657a:	1ac0      	subs	r0, r0, r3
    657c:	4152      	adcs	r2, r2
    657e:	0883      	lsrs	r3, r0, #2
    6580:	428b      	cmp	r3, r1
    6582:	d301      	bcc.n	6588 <__udivsi3+0xe4>
    6584:	008b      	lsls	r3, r1, #2
    6586:	1ac0      	subs	r0, r0, r3
    6588:	4152      	adcs	r2, r2
    658a:	0843      	lsrs	r3, r0, #1
    658c:	428b      	cmp	r3, r1
    658e:	d301      	bcc.n	6594 <__udivsi3+0xf0>
    6590:	004b      	lsls	r3, r1, #1
    6592:	1ac0      	subs	r0, r0, r3
    6594:	4152      	adcs	r2, r2
    6596:	1a41      	subs	r1, r0, r1
    6598:	d200      	bcs.n	659c <__udivsi3+0xf8>
    659a:	4601      	mov	r1, r0
    659c:	4152      	adcs	r2, r2
    659e:	4610      	mov	r0, r2
    65a0:	4770      	bx	lr
    65a2:	e7ff      	b.n	65a4 <__udivsi3+0x100>
    65a4:	b501      	push	{r0, lr}
    65a6:	2000      	movs	r0, #0
    65a8:	f000 f8f0 	bl	678c <__aeabi_idiv0>
    65ac:	bd02      	pop	{r1, pc}
    65ae:	46c0      	nop			; (mov r8, r8)

000065b0 <__aeabi_uidivmod>:
    65b0:	2900      	cmp	r1, #0
    65b2:	d0f7      	beq.n	65a4 <__udivsi3+0x100>
    65b4:	e776      	b.n	64a4 <__udivsi3>
    65b6:	4770      	bx	lr

000065b8 <__divsi3>:
    65b8:	4603      	mov	r3, r0
    65ba:	430b      	orrs	r3, r1
    65bc:	d47f      	bmi.n	66be <__divsi3+0x106>
    65be:	2200      	movs	r2, #0
    65c0:	0843      	lsrs	r3, r0, #1
    65c2:	428b      	cmp	r3, r1
    65c4:	d374      	bcc.n	66b0 <__divsi3+0xf8>
    65c6:	0903      	lsrs	r3, r0, #4
    65c8:	428b      	cmp	r3, r1
    65ca:	d35f      	bcc.n	668c <__divsi3+0xd4>
    65cc:	0a03      	lsrs	r3, r0, #8
    65ce:	428b      	cmp	r3, r1
    65d0:	d344      	bcc.n	665c <__divsi3+0xa4>
    65d2:	0b03      	lsrs	r3, r0, #12
    65d4:	428b      	cmp	r3, r1
    65d6:	d328      	bcc.n	662a <__divsi3+0x72>
    65d8:	0c03      	lsrs	r3, r0, #16
    65da:	428b      	cmp	r3, r1
    65dc:	d30d      	bcc.n	65fa <__divsi3+0x42>
    65de:	22ff      	movs	r2, #255	; 0xff
    65e0:	0209      	lsls	r1, r1, #8
    65e2:	ba12      	rev	r2, r2
    65e4:	0c03      	lsrs	r3, r0, #16
    65e6:	428b      	cmp	r3, r1
    65e8:	d302      	bcc.n	65f0 <__divsi3+0x38>
    65ea:	1212      	asrs	r2, r2, #8
    65ec:	0209      	lsls	r1, r1, #8
    65ee:	d065      	beq.n	66bc <__divsi3+0x104>
    65f0:	0b03      	lsrs	r3, r0, #12
    65f2:	428b      	cmp	r3, r1
    65f4:	d319      	bcc.n	662a <__divsi3+0x72>
    65f6:	e000      	b.n	65fa <__divsi3+0x42>
    65f8:	0a09      	lsrs	r1, r1, #8
    65fa:	0bc3      	lsrs	r3, r0, #15
    65fc:	428b      	cmp	r3, r1
    65fe:	d301      	bcc.n	6604 <__divsi3+0x4c>
    6600:	03cb      	lsls	r3, r1, #15
    6602:	1ac0      	subs	r0, r0, r3
    6604:	4152      	adcs	r2, r2
    6606:	0b83      	lsrs	r3, r0, #14
    6608:	428b      	cmp	r3, r1
    660a:	d301      	bcc.n	6610 <__divsi3+0x58>
    660c:	038b      	lsls	r3, r1, #14
    660e:	1ac0      	subs	r0, r0, r3
    6610:	4152      	adcs	r2, r2
    6612:	0b43      	lsrs	r3, r0, #13
    6614:	428b      	cmp	r3, r1
    6616:	d301      	bcc.n	661c <__divsi3+0x64>
    6618:	034b      	lsls	r3, r1, #13
    661a:	1ac0      	subs	r0, r0, r3
    661c:	4152      	adcs	r2, r2
    661e:	0b03      	lsrs	r3, r0, #12
    6620:	428b      	cmp	r3, r1
    6622:	d301      	bcc.n	6628 <__divsi3+0x70>
    6624:	030b      	lsls	r3, r1, #12
    6626:	1ac0      	subs	r0, r0, r3
    6628:	4152      	adcs	r2, r2
    662a:	0ac3      	lsrs	r3, r0, #11
    662c:	428b      	cmp	r3, r1
    662e:	d301      	bcc.n	6634 <__divsi3+0x7c>
    6630:	02cb      	lsls	r3, r1, #11
    6632:	1ac0      	subs	r0, r0, r3
    6634:	4152      	adcs	r2, r2
    6636:	0a83      	lsrs	r3, r0, #10
    6638:	428b      	cmp	r3, r1
    663a:	d301      	bcc.n	6640 <__divsi3+0x88>
    663c:	028b      	lsls	r3, r1, #10
    663e:	1ac0      	subs	r0, r0, r3
    6640:	4152      	adcs	r2, r2
    6642:	0a43      	lsrs	r3, r0, #9
    6644:	428b      	cmp	r3, r1
    6646:	d301      	bcc.n	664c <__divsi3+0x94>
    6648:	024b      	lsls	r3, r1, #9
    664a:	1ac0      	subs	r0, r0, r3
    664c:	4152      	adcs	r2, r2
    664e:	0a03      	lsrs	r3, r0, #8
    6650:	428b      	cmp	r3, r1
    6652:	d301      	bcc.n	6658 <__divsi3+0xa0>
    6654:	020b      	lsls	r3, r1, #8
    6656:	1ac0      	subs	r0, r0, r3
    6658:	4152      	adcs	r2, r2
    665a:	d2cd      	bcs.n	65f8 <__divsi3+0x40>
    665c:	09c3      	lsrs	r3, r0, #7
    665e:	428b      	cmp	r3, r1
    6660:	d301      	bcc.n	6666 <__divsi3+0xae>
    6662:	01cb      	lsls	r3, r1, #7
    6664:	1ac0      	subs	r0, r0, r3
    6666:	4152      	adcs	r2, r2
    6668:	0983      	lsrs	r3, r0, #6
    666a:	428b      	cmp	r3, r1
    666c:	d301      	bcc.n	6672 <__divsi3+0xba>
    666e:	018b      	lsls	r3, r1, #6
    6670:	1ac0      	subs	r0, r0, r3
    6672:	4152      	adcs	r2, r2
    6674:	0943      	lsrs	r3, r0, #5
    6676:	428b      	cmp	r3, r1
    6678:	d301      	bcc.n	667e <__divsi3+0xc6>
    667a:	014b      	lsls	r3, r1, #5
    667c:	1ac0      	subs	r0, r0, r3
    667e:	4152      	adcs	r2, r2
    6680:	0903      	lsrs	r3, r0, #4
    6682:	428b      	cmp	r3, r1
    6684:	d301      	bcc.n	668a <__divsi3+0xd2>
    6686:	010b      	lsls	r3, r1, #4
    6688:	1ac0      	subs	r0, r0, r3
    668a:	4152      	adcs	r2, r2
    668c:	08c3      	lsrs	r3, r0, #3
    668e:	428b      	cmp	r3, r1
    6690:	d301      	bcc.n	6696 <__divsi3+0xde>
    6692:	00cb      	lsls	r3, r1, #3
    6694:	1ac0      	subs	r0, r0, r3
    6696:	4152      	adcs	r2, r2
    6698:	0883      	lsrs	r3, r0, #2
    669a:	428b      	cmp	r3, r1
    669c:	d301      	bcc.n	66a2 <__divsi3+0xea>
    669e:	008b      	lsls	r3, r1, #2
    66a0:	1ac0      	subs	r0, r0, r3
    66a2:	4152      	adcs	r2, r2
    66a4:	0843      	lsrs	r3, r0, #1
    66a6:	428b      	cmp	r3, r1
    66a8:	d301      	bcc.n	66ae <__divsi3+0xf6>
    66aa:	004b      	lsls	r3, r1, #1
    66ac:	1ac0      	subs	r0, r0, r3
    66ae:	4152      	adcs	r2, r2
    66b0:	1a41      	subs	r1, r0, r1
    66b2:	d200      	bcs.n	66b6 <__divsi3+0xfe>
    66b4:	4601      	mov	r1, r0
    66b6:	4152      	adcs	r2, r2
    66b8:	4610      	mov	r0, r2
    66ba:	4770      	bx	lr
    66bc:	e05d      	b.n	677a <__divsi3+0x1c2>
    66be:	0fca      	lsrs	r2, r1, #31
    66c0:	d000      	beq.n	66c4 <__divsi3+0x10c>
    66c2:	4249      	negs	r1, r1
    66c4:	1003      	asrs	r3, r0, #32
    66c6:	d300      	bcc.n	66ca <__divsi3+0x112>
    66c8:	4240      	negs	r0, r0
    66ca:	4053      	eors	r3, r2
    66cc:	2200      	movs	r2, #0
    66ce:	469c      	mov	ip, r3
    66d0:	0903      	lsrs	r3, r0, #4
    66d2:	428b      	cmp	r3, r1
    66d4:	d32d      	bcc.n	6732 <__divsi3+0x17a>
    66d6:	0a03      	lsrs	r3, r0, #8
    66d8:	428b      	cmp	r3, r1
    66da:	d312      	bcc.n	6702 <__divsi3+0x14a>
    66dc:	22fc      	movs	r2, #252	; 0xfc
    66de:	0189      	lsls	r1, r1, #6
    66e0:	ba12      	rev	r2, r2
    66e2:	0a03      	lsrs	r3, r0, #8
    66e4:	428b      	cmp	r3, r1
    66e6:	d30c      	bcc.n	6702 <__divsi3+0x14a>
    66e8:	0189      	lsls	r1, r1, #6
    66ea:	1192      	asrs	r2, r2, #6
    66ec:	428b      	cmp	r3, r1
    66ee:	d308      	bcc.n	6702 <__divsi3+0x14a>
    66f0:	0189      	lsls	r1, r1, #6
    66f2:	1192      	asrs	r2, r2, #6
    66f4:	428b      	cmp	r3, r1
    66f6:	d304      	bcc.n	6702 <__divsi3+0x14a>
    66f8:	0189      	lsls	r1, r1, #6
    66fa:	d03a      	beq.n	6772 <__divsi3+0x1ba>
    66fc:	1192      	asrs	r2, r2, #6
    66fe:	e000      	b.n	6702 <__divsi3+0x14a>
    6700:	0989      	lsrs	r1, r1, #6
    6702:	09c3      	lsrs	r3, r0, #7
    6704:	428b      	cmp	r3, r1
    6706:	d301      	bcc.n	670c <__divsi3+0x154>
    6708:	01cb      	lsls	r3, r1, #7
    670a:	1ac0      	subs	r0, r0, r3
    670c:	4152      	adcs	r2, r2
    670e:	0983      	lsrs	r3, r0, #6
    6710:	428b      	cmp	r3, r1
    6712:	d301      	bcc.n	6718 <__divsi3+0x160>
    6714:	018b      	lsls	r3, r1, #6
    6716:	1ac0      	subs	r0, r0, r3
    6718:	4152      	adcs	r2, r2
    671a:	0943      	lsrs	r3, r0, #5
    671c:	428b      	cmp	r3, r1
    671e:	d301      	bcc.n	6724 <__divsi3+0x16c>
    6720:	014b      	lsls	r3, r1, #5
    6722:	1ac0      	subs	r0, r0, r3
    6724:	4152      	adcs	r2, r2
    6726:	0903      	lsrs	r3, r0, #4
    6728:	428b      	cmp	r3, r1
    672a:	d301      	bcc.n	6730 <__divsi3+0x178>
    672c:	010b      	lsls	r3, r1, #4
    672e:	1ac0      	subs	r0, r0, r3
    6730:	4152      	adcs	r2, r2
    6732:	08c3      	lsrs	r3, r0, #3
    6734:	428b      	cmp	r3, r1
    6736:	d301      	bcc.n	673c <__divsi3+0x184>
    6738:	00cb      	lsls	r3, r1, #3
    673a:	1ac0      	subs	r0, r0, r3
    673c:	4152      	adcs	r2, r2
    673e:	0883      	lsrs	r3, r0, #2
    6740:	428b      	cmp	r3, r1
    6742:	d301      	bcc.n	6748 <__divsi3+0x190>
    6744:	008b      	lsls	r3, r1, #2
    6746:	1ac0      	subs	r0, r0, r3
    6748:	4152      	adcs	r2, r2
    674a:	d2d9      	bcs.n	6700 <__divsi3+0x148>
    674c:	0843      	lsrs	r3, r0, #1
    674e:	428b      	cmp	r3, r1
    6750:	d301      	bcc.n	6756 <__divsi3+0x19e>
    6752:	004b      	lsls	r3, r1, #1
    6754:	1ac0      	subs	r0, r0, r3
    6756:	4152      	adcs	r2, r2
    6758:	1a41      	subs	r1, r0, r1
    675a:	d200      	bcs.n	675e <__divsi3+0x1a6>
    675c:	4601      	mov	r1, r0
    675e:	4663      	mov	r3, ip
    6760:	4152      	adcs	r2, r2
    6762:	105b      	asrs	r3, r3, #1
    6764:	4610      	mov	r0, r2
    6766:	d301      	bcc.n	676c <__divsi3+0x1b4>
    6768:	4240      	negs	r0, r0
    676a:	2b00      	cmp	r3, #0
    676c:	d500      	bpl.n	6770 <__divsi3+0x1b8>
    676e:	4249      	negs	r1, r1
    6770:	4770      	bx	lr
    6772:	4663      	mov	r3, ip
    6774:	105b      	asrs	r3, r3, #1
    6776:	d300      	bcc.n	677a <__divsi3+0x1c2>
    6778:	4240      	negs	r0, r0
    677a:	b501      	push	{r0, lr}
    677c:	2000      	movs	r0, #0
    677e:	f000 f805 	bl	678c <__aeabi_idiv0>
    6782:	bd02      	pop	{r1, pc}

00006784 <__aeabi_idivmod>:
    6784:	2900      	cmp	r1, #0
    6786:	d0f8      	beq.n	677a <__divsi3+0x1c2>
    6788:	e716      	b.n	65b8 <__divsi3>
    678a:	4770      	bx	lr

0000678c <__aeabi_idiv0>:
    678c:	4770      	bx	lr
    678e:	46c0      	nop			; (mov r8, r8)

00006790 <__aeabi_lmul>:
    6790:	b5f0      	push	{r4, r5, r6, r7, lr}
    6792:	46ce      	mov	lr, r9
    6794:	4647      	mov	r7, r8
    6796:	0415      	lsls	r5, r2, #16
    6798:	0c2d      	lsrs	r5, r5, #16
    679a:	002e      	movs	r6, r5
    679c:	b580      	push	{r7, lr}
    679e:	0407      	lsls	r7, r0, #16
    67a0:	0c14      	lsrs	r4, r2, #16
    67a2:	0c3f      	lsrs	r7, r7, #16
    67a4:	4699      	mov	r9, r3
    67a6:	0c03      	lsrs	r3, r0, #16
    67a8:	437e      	muls	r6, r7
    67aa:	435d      	muls	r5, r3
    67ac:	4367      	muls	r7, r4
    67ae:	4363      	muls	r3, r4
    67b0:	197f      	adds	r7, r7, r5
    67b2:	0c34      	lsrs	r4, r6, #16
    67b4:	19e4      	adds	r4, r4, r7
    67b6:	469c      	mov	ip, r3
    67b8:	42a5      	cmp	r5, r4
    67ba:	d903      	bls.n	67c4 <__aeabi_lmul+0x34>
    67bc:	2380      	movs	r3, #128	; 0x80
    67be:	025b      	lsls	r3, r3, #9
    67c0:	4698      	mov	r8, r3
    67c2:	44c4      	add	ip, r8
    67c4:	464b      	mov	r3, r9
    67c6:	4351      	muls	r1, r2
    67c8:	4343      	muls	r3, r0
    67ca:	0436      	lsls	r6, r6, #16
    67cc:	0c36      	lsrs	r6, r6, #16
    67ce:	0c25      	lsrs	r5, r4, #16
    67d0:	0424      	lsls	r4, r4, #16
    67d2:	4465      	add	r5, ip
    67d4:	19a4      	adds	r4, r4, r6
    67d6:	1859      	adds	r1, r3, r1
    67d8:	1949      	adds	r1, r1, r5
    67da:	0020      	movs	r0, r4
    67dc:	bc0c      	pop	{r2, r3}
    67de:	4690      	mov	r8, r2
    67e0:	4699      	mov	r9, r3
    67e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000067e4 <__libc_init_array>:
    67e4:	b570      	push	{r4, r5, r6, lr}
    67e6:	2600      	movs	r6, #0
    67e8:	4d0c      	ldr	r5, [pc, #48]	; (681c <__libc_init_array+0x38>)
    67ea:	4c0d      	ldr	r4, [pc, #52]	; (6820 <__libc_init_array+0x3c>)
    67ec:	1b64      	subs	r4, r4, r5
    67ee:	10a4      	asrs	r4, r4, #2
    67f0:	42a6      	cmp	r6, r4
    67f2:	d109      	bne.n	6808 <__libc_init_array+0x24>
    67f4:	2600      	movs	r6, #0
    67f6:	f004 fce9 	bl	b1cc <_init>
    67fa:	4d0a      	ldr	r5, [pc, #40]	; (6824 <__libc_init_array+0x40>)
    67fc:	4c0a      	ldr	r4, [pc, #40]	; (6828 <__libc_init_array+0x44>)
    67fe:	1b64      	subs	r4, r4, r5
    6800:	10a4      	asrs	r4, r4, #2
    6802:	42a6      	cmp	r6, r4
    6804:	d105      	bne.n	6812 <__libc_init_array+0x2e>
    6806:	bd70      	pop	{r4, r5, r6, pc}
    6808:	00b3      	lsls	r3, r6, #2
    680a:	58eb      	ldr	r3, [r5, r3]
    680c:	4798      	blx	r3
    680e:	3601      	adds	r6, #1
    6810:	e7ee      	b.n	67f0 <__libc_init_array+0xc>
    6812:	00b3      	lsls	r3, r6, #2
    6814:	58eb      	ldr	r3, [r5, r3]
    6816:	4798      	blx	r3
    6818:	3601      	adds	r6, #1
    681a:	e7f2      	b.n	6802 <__libc_init_array+0x1e>
    681c:	0000b1d8 	.word	0x0000b1d8
    6820:	0000b1d8 	.word	0x0000b1d8
    6824:	0000b1d8 	.word	0x0000b1d8
    6828:	0000b1dc 	.word	0x0000b1dc

0000682c <malloc>:
    682c:	b510      	push	{r4, lr}
    682e:	4b03      	ldr	r3, [pc, #12]	; (683c <malloc+0x10>)
    6830:	0001      	movs	r1, r0
    6832:	6818      	ldr	r0, [r3, #0]
    6834:	f000 f872 	bl	691c <_malloc_r>
    6838:	bd10      	pop	{r4, pc}
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	20000118 	.word	0x20000118

00006840 <memcpy>:
    6840:	2300      	movs	r3, #0
    6842:	b510      	push	{r4, lr}
    6844:	429a      	cmp	r2, r3
    6846:	d100      	bne.n	684a <memcpy+0xa>
    6848:	bd10      	pop	{r4, pc}
    684a:	5ccc      	ldrb	r4, [r1, r3]
    684c:	54c4      	strb	r4, [r0, r3]
    684e:	3301      	adds	r3, #1
    6850:	e7f8      	b.n	6844 <memcpy+0x4>

00006852 <memmove>:
    6852:	b510      	push	{r4, lr}
    6854:	4288      	cmp	r0, r1
    6856:	d902      	bls.n	685e <memmove+0xc>
    6858:	188b      	adds	r3, r1, r2
    685a:	4298      	cmp	r0, r3
    685c:	d308      	bcc.n	6870 <memmove+0x1e>
    685e:	2300      	movs	r3, #0
    6860:	429a      	cmp	r2, r3
    6862:	d007      	beq.n	6874 <memmove+0x22>
    6864:	5ccc      	ldrb	r4, [r1, r3]
    6866:	54c4      	strb	r4, [r0, r3]
    6868:	3301      	adds	r3, #1
    686a:	e7f9      	b.n	6860 <memmove+0xe>
    686c:	5c8b      	ldrb	r3, [r1, r2]
    686e:	5483      	strb	r3, [r0, r2]
    6870:	3a01      	subs	r2, #1
    6872:	d2fb      	bcs.n	686c <memmove+0x1a>
    6874:	bd10      	pop	{r4, pc}

00006876 <memset>:
    6876:	0003      	movs	r3, r0
    6878:	1882      	adds	r2, r0, r2
    687a:	4293      	cmp	r3, r2
    687c:	d100      	bne.n	6880 <memset+0xa>
    687e:	4770      	bx	lr
    6880:	7019      	strb	r1, [r3, #0]
    6882:	3301      	adds	r3, #1
    6884:	e7f9      	b.n	687a <memset+0x4>
	...

00006888 <_free_r>:
    6888:	b570      	push	{r4, r5, r6, lr}
    688a:	0005      	movs	r5, r0
    688c:	2900      	cmp	r1, #0
    688e:	d010      	beq.n	68b2 <_free_r+0x2a>
    6890:	1f0c      	subs	r4, r1, #4
    6892:	6823      	ldr	r3, [r4, #0]
    6894:	2b00      	cmp	r3, #0
    6896:	da00      	bge.n	689a <_free_r+0x12>
    6898:	18e4      	adds	r4, r4, r3
    689a:	0028      	movs	r0, r5
    689c:	f000 fcf8 	bl	7290 <__malloc_lock>
    68a0:	4a1d      	ldr	r2, [pc, #116]	; (6918 <_free_r+0x90>)
    68a2:	6813      	ldr	r3, [r2, #0]
    68a4:	2b00      	cmp	r3, #0
    68a6:	d105      	bne.n	68b4 <_free_r+0x2c>
    68a8:	6063      	str	r3, [r4, #4]
    68aa:	6014      	str	r4, [r2, #0]
    68ac:	0028      	movs	r0, r5
    68ae:	f000 fcf0 	bl	7292 <__malloc_unlock>
    68b2:	bd70      	pop	{r4, r5, r6, pc}
    68b4:	42a3      	cmp	r3, r4
    68b6:	d909      	bls.n	68cc <_free_r+0x44>
    68b8:	6821      	ldr	r1, [r4, #0]
    68ba:	1860      	adds	r0, r4, r1
    68bc:	4283      	cmp	r3, r0
    68be:	d1f3      	bne.n	68a8 <_free_r+0x20>
    68c0:	6818      	ldr	r0, [r3, #0]
    68c2:	685b      	ldr	r3, [r3, #4]
    68c4:	1841      	adds	r1, r0, r1
    68c6:	6021      	str	r1, [r4, #0]
    68c8:	e7ee      	b.n	68a8 <_free_r+0x20>
    68ca:	0013      	movs	r3, r2
    68cc:	685a      	ldr	r2, [r3, #4]
    68ce:	2a00      	cmp	r2, #0
    68d0:	d001      	beq.n	68d6 <_free_r+0x4e>
    68d2:	42a2      	cmp	r2, r4
    68d4:	d9f9      	bls.n	68ca <_free_r+0x42>
    68d6:	6819      	ldr	r1, [r3, #0]
    68d8:	1858      	adds	r0, r3, r1
    68da:	42a0      	cmp	r0, r4
    68dc:	d10b      	bne.n	68f6 <_free_r+0x6e>
    68de:	6820      	ldr	r0, [r4, #0]
    68e0:	1809      	adds	r1, r1, r0
    68e2:	1858      	adds	r0, r3, r1
    68e4:	6019      	str	r1, [r3, #0]
    68e6:	4282      	cmp	r2, r0
    68e8:	d1e0      	bne.n	68ac <_free_r+0x24>
    68ea:	6810      	ldr	r0, [r2, #0]
    68ec:	6852      	ldr	r2, [r2, #4]
    68ee:	1841      	adds	r1, r0, r1
    68f0:	6019      	str	r1, [r3, #0]
    68f2:	605a      	str	r2, [r3, #4]
    68f4:	e7da      	b.n	68ac <_free_r+0x24>
    68f6:	42a0      	cmp	r0, r4
    68f8:	d902      	bls.n	6900 <_free_r+0x78>
    68fa:	230c      	movs	r3, #12
    68fc:	602b      	str	r3, [r5, #0]
    68fe:	e7d5      	b.n	68ac <_free_r+0x24>
    6900:	6821      	ldr	r1, [r4, #0]
    6902:	1860      	adds	r0, r4, r1
    6904:	4282      	cmp	r2, r0
    6906:	d103      	bne.n	6910 <_free_r+0x88>
    6908:	6810      	ldr	r0, [r2, #0]
    690a:	6852      	ldr	r2, [r2, #4]
    690c:	1841      	adds	r1, r0, r1
    690e:	6021      	str	r1, [r4, #0]
    6910:	6062      	str	r2, [r4, #4]
    6912:	605c      	str	r4, [r3, #4]
    6914:	e7ca      	b.n	68ac <_free_r+0x24>
    6916:	46c0      	nop			; (mov r8, r8)
    6918:	200025a4 	.word	0x200025a4

0000691c <_malloc_r>:
    691c:	2303      	movs	r3, #3
    691e:	b570      	push	{r4, r5, r6, lr}
    6920:	1ccd      	adds	r5, r1, #3
    6922:	439d      	bics	r5, r3
    6924:	3508      	adds	r5, #8
    6926:	0006      	movs	r6, r0
    6928:	2d0c      	cmp	r5, #12
    692a:	d21e      	bcs.n	696a <_malloc_r+0x4e>
    692c:	250c      	movs	r5, #12
    692e:	42a9      	cmp	r1, r5
    6930:	d81d      	bhi.n	696e <_malloc_r+0x52>
    6932:	0030      	movs	r0, r6
    6934:	f000 fcac 	bl	7290 <__malloc_lock>
    6938:	4a25      	ldr	r2, [pc, #148]	; (69d0 <_malloc_r+0xb4>)
    693a:	6814      	ldr	r4, [r2, #0]
    693c:	0021      	movs	r1, r4
    693e:	2900      	cmp	r1, #0
    6940:	d119      	bne.n	6976 <_malloc_r+0x5a>
    6942:	4c24      	ldr	r4, [pc, #144]	; (69d4 <_malloc_r+0xb8>)
    6944:	6823      	ldr	r3, [r4, #0]
    6946:	2b00      	cmp	r3, #0
    6948:	d103      	bne.n	6952 <_malloc_r+0x36>
    694a:	0030      	movs	r0, r6
    694c:	f000 f8c8 	bl	6ae0 <_sbrk_r>
    6950:	6020      	str	r0, [r4, #0]
    6952:	0029      	movs	r1, r5
    6954:	0030      	movs	r0, r6
    6956:	f000 f8c3 	bl	6ae0 <_sbrk_r>
    695a:	1c43      	adds	r3, r0, #1
    695c:	d12c      	bne.n	69b8 <_malloc_r+0x9c>
    695e:	230c      	movs	r3, #12
    6960:	0030      	movs	r0, r6
    6962:	6033      	str	r3, [r6, #0]
    6964:	f000 fc95 	bl	7292 <__malloc_unlock>
    6968:	e003      	b.n	6972 <_malloc_r+0x56>
    696a:	2d00      	cmp	r5, #0
    696c:	dadf      	bge.n	692e <_malloc_r+0x12>
    696e:	230c      	movs	r3, #12
    6970:	6033      	str	r3, [r6, #0]
    6972:	2000      	movs	r0, #0
    6974:	bd70      	pop	{r4, r5, r6, pc}
    6976:	680b      	ldr	r3, [r1, #0]
    6978:	1b5b      	subs	r3, r3, r5
    697a:	d41a      	bmi.n	69b2 <_malloc_r+0x96>
    697c:	2b0b      	cmp	r3, #11
    697e:	d903      	bls.n	6988 <_malloc_r+0x6c>
    6980:	600b      	str	r3, [r1, #0]
    6982:	18cc      	adds	r4, r1, r3
    6984:	6025      	str	r5, [r4, #0]
    6986:	e003      	b.n	6990 <_malloc_r+0x74>
    6988:	428c      	cmp	r4, r1
    698a:	d10e      	bne.n	69aa <_malloc_r+0x8e>
    698c:	6863      	ldr	r3, [r4, #4]
    698e:	6013      	str	r3, [r2, #0]
    6990:	0030      	movs	r0, r6
    6992:	f000 fc7e 	bl	7292 <__malloc_unlock>
    6996:	0020      	movs	r0, r4
    6998:	2207      	movs	r2, #7
    699a:	300b      	adds	r0, #11
    699c:	1d23      	adds	r3, r4, #4
    699e:	4390      	bics	r0, r2
    69a0:	1ac3      	subs	r3, r0, r3
    69a2:	d0e7      	beq.n	6974 <_malloc_r+0x58>
    69a4:	425a      	negs	r2, r3
    69a6:	50e2      	str	r2, [r4, r3]
    69a8:	e7e4      	b.n	6974 <_malloc_r+0x58>
    69aa:	684b      	ldr	r3, [r1, #4]
    69ac:	6063      	str	r3, [r4, #4]
    69ae:	000c      	movs	r4, r1
    69b0:	e7ee      	b.n	6990 <_malloc_r+0x74>
    69b2:	000c      	movs	r4, r1
    69b4:	6849      	ldr	r1, [r1, #4]
    69b6:	e7c2      	b.n	693e <_malloc_r+0x22>
    69b8:	2303      	movs	r3, #3
    69ba:	1cc4      	adds	r4, r0, #3
    69bc:	439c      	bics	r4, r3
    69be:	42a0      	cmp	r0, r4
    69c0:	d0e0      	beq.n	6984 <_malloc_r+0x68>
    69c2:	1a21      	subs	r1, r4, r0
    69c4:	0030      	movs	r0, r6
    69c6:	f000 f88b 	bl	6ae0 <_sbrk_r>
    69ca:	1c43      	adds	r3, r0, #1
    69cc:	d1da      	bne.n	6984 <_malloc_r+0x68>
    69ce:	e7c6      	b.n	695e <_malloc_r+0x42>
    69d0:	200025a4 	.word	0x200025a4
    69d4:	200025a8 	.word	0x200025a8

000069d8 <iprintf>:
    69d8:	b40f      	push	{r0, r1, r2, r3}
    69da:	4b0b      	ldr	r3, [pc, #44]	; (6a08 <iprintf+0x30>)
    69dc:	b513      	push	{r0, r1, r4, lr}
    69de:	681c      	ldr	r4, [r3, #0]
    69e0:	2c00      	cmp	r4, #0
    69e2:	d005      	beq.n	69f0 <iprintf+0x18>
    69e4:	69a3      	ldr	r3, [r4, #24]
    69e6:	2b00      	cmp	r3, #0
    69e8:	d102      	bne.n	69f0 <iprintf+0x18>
    69ea:	0020      	movs	r0, r4
    69ec:	f000 fb32 	bl	7054 <__sinit>
    69f0:	ab05      	add	r3, sp, #20
    69f2:	9a04      	ldr	r2, [sp, #16]
    69f4:	68a1      	ldr	r1, [r4, #8]
    69f6:	0020      	movs	r0, r4
    69f8:	9301      	str	r3, [sp, #4]
    69fa:	f000 fc73 	bl	72e4 <_vfiprintf_r>
    69fe:	bc16      	pop	{r1, r2, r4}
    6a00:	bc08      	pop	{r3}
    6a02:	b004      	add	sp, #16
    6a04:	4718      	bx	r3
    6a06:	46c0      	nop			; (mov r8, r8)
    6a08:	20000118 	.word	0x20000118

00006a0c <_puts_r>:
    6a0c:	b570      	push	{r4, r5, r6, lr}
    6a0e:	0005      	movs	r5, r0
    6a10:	000e      	movs	r6, r1
    6a12:	2800      	cmp	r0, #0
    6a14:	d004      	beq.n	6a20 <_puts_r+0x14>
    6a16:	6983      	ldr	r3, [r0, #24]
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d101      	bne.n	6a20 <_puts_r+0x14>
    6a1c:	f000 fb1a 	bl	7054 <__sinit>
    6a20:	69ab      	ldr	r3, [r5, #24]
    6a22:	68ac      	ldr	r4, [r5, #8]
    6a24:	2b00      	cmp	r3, #0
    6a26:	d102      	bne.n	6a2e <_puts_r+0x22>
    6a28:	0028      	movs	r0, r5
    6a2a:	f000 fb13 	bl	7054 <__sinit>
    6a2e:	4b24      	ldr	r3, [pc, #144]	; (6ac0 <_puts_r+0xb4>)
    6a30:	429c      	cmp	r4, r3
    6a32:	d10f      	bne.n	6a54 <_puts_r+0x48>
    6a34:	686c      	ldr	r4, [r5, #4]
    6a36:	89a3      	ldrh	r3, [r4, #12]
    6a38:	071b      	lsls	r3, r3, #28
    6a3a:	d502      	bpl.n	6a42 <_puts_r+0x36>
    6a3c:	6923      	ldr	r3, [r4, #16]
    6a3e:	2b00      	cmp	r3, #0
    6a40:	d120      	bne.n	6a84 <_puts_r+0x78>
    6a42:	0021      	movs	r1, r4
    6a44:	0028      	movs	r0, r5
    6a46:	f000 f983 	bl	6d50 <__swsetup_r>
    6a4a:	2800      	cmp	r0, #0
    6a4c:	d01a      	beq.n	6a84 <_puts_r+0x78>
    6a4e:	2001      	movs	r0, #1
    6a50:	4240      	negs	r0, r0
    6a52:	bd70      	pop	{r4, r5, r6, pc}
    6a54:	4b1b      	ldr	r3, [pc, #108]	; (6ac4 <_puts_r+0xb8>)
    6a56:	429c      	cmp	r4, r3
    6a58:	d101      	bne.n	6a5e <_puts_r+0x52>
    6a5a:	68ac      	ldr	r4, [r5, #8]
    6a5c:	e7eb      	b.n	6a36 <_puts_r+0x2a>
    6a5e:	4b1a      	ldr	r3, [pc, #104]	; (6ac8 <_puts_r+0xbc>)
    6a60:	429c      	cmp	r4, r3
    6a62:	d1e8      	bne.n	6a36 <_puts_r+0x2a>
    6a64:	68ec      	ldr	r4, [r5, #12]
    6a66:	e7e6      	b.n	6a36 <_puts_r+0x2a>
    6a68:	3b01      	subs	r3, #1
    6a6a:	3601      	adds	r6, #1
    6a6c:	60a3      	str	r3, [r4, #8]
    6a6e:	2b00      	cmp	r3, #0
    6a70:	da04      	bge.n	6a7c <_puts_r+0x70>
    6a72:	69a2      	ldr	r2, [r4, #24]
    6a74:	4293      	cmp	r3, r2
    6a76:	db16      	blt.n	6aa6 <_puts_r+0x9a>
    6a78:	290a      	cmp	r1, #10
    6a7a:	d014      	beq.n	6aa6 <_puts_r+0x9a>
    6a7c:	6823      	ldr	r3, [r4, #0]
    6a7e:	1c5a      	adds	r2, r3, #1
    6a80:	6022      	str	r2, [r4, #0]
    6a82:	7019      	strb	r1, [r3, #0]
    6a84:	7831      	ldrb	r1, [r6, #0]
    6a86:	68a3      	ldr	r3, [r4, #8]
    6a88:	2900      	cmp	r1, #0
    6a8a:	d1ed      	bne.n	6a68 <_puts_r+0x5c>
    6a8c:	3b01      	subs	r3, #1
    6a8e:	60a3      	str	r3, [r4, #8]
    6a90:	2b00      	cmp	r3, #0
    6a92:	da0f      	bge.n	6ab4 <_puts_r+0xa8>
    6a94:	0022      	movs	r2, r4
    6a96:	310a      	adds	r1, #10
    6a98:	0028      	movs	r0, r5
    6a9a:	f000 f903 	bl	6ca4 <__swbuf_r>
    6a9e:	1c43      	adds	r3, r0, #1
    6aa0:	d0d5      	beq.n	6a4e <_puts_r+0x42>
    6aa2:	200a      	movs	r0, #10
    6aa4:	e7d5      	b.n	6a52 <_puts_r+0x46>
    6aa6:	0022      	movs	r2, r4
    6aa8:	0028      	movs	r0, r5
    6aaa:	f000 f8fb 	bl	6ca4 <__swbuf_r>
    6aae:	1c43      	adds	r3, r0, #1
    6ab0:	d1e8      	bne.n	6a84 <_puts_r+0x78>
    6ab2:	e7cc      	b.n	6a4e <_puts_r+0x42>
    6ab4:	200a      	movs	r0, #10
    6ab6:	6823      	ldr	r3, [r4, #0]
    6ab8:	1c5a      	adds	r2, r3, #1
    6aba:	6022      	str	r2, [r4, #0]
    6abc:	7018      	strb	r0, [r3, #0]
    6abe:	e7c8      	b.n	6a52 <_puts_r+0x46>
    6ac0:	0000b024 	.word	0x0000b024
    6ac4:	0000b044 	.word	0x0000b044
    6ac8:	0000b004 	.word	0x0000b004

00006acc <puts>:
    6acc:	b510      	push	{r4, lr}
    6ace:	4b03      	ldr	r3, [pc, #12]	; (6adc <puts+0x10>)
    6ad0:	0001      	movs	r1, r0
    6ad2:	6818      	ldr	r0, [r3, #0]
    6ad4:	f7ff ff9a 	bl	6a0c <_puts_r>
    6ad8:	bd10      	pop	{r4, pc}
    6ada:	46c0      	nop			; (mov r8, r8)
    6adc:	20000118 	.word	0x20000118

00006ae0 <_sbrk_r>:
    6ae0:	2300      	movs	r3, #0
    6ae2:	b570      	push	{r4, r5, r6, lr}
    6ae4:	4c06      	ldr	r4, [pc, #24]	; (6b00 <_sbrk_r+0x20>)
    6ae6:	0005      	movs	r5, r0
    6ae8:	0008      	movs	r0, r1
    6aea:	6023      	str	r3, [r4, #0]
    6aec:	f7fb ffc8 	bl	2a80 <_sbrk>
    6af0:	1c43      	adds	r3, r0, #1
    6af2:	d103      	bne.n	6afc <_sbrk_r+0x1c>
    6af4:	6823      	ldr	r3, [r4, #0]
    6af6:	2b00      	cmp	r3, #0
    6af8:	d000      	beq.n	6afc <_sbrk_r+0x1c>
    6afa:	602b      	str	r3, [r5, #0]
    6afc:	bd70      	pop	{r4, r5, r6, pc}
    6afe:	46c0      	nop			; (mov r8, r8)
    6b00:	20003938 	.word	0x20003938

00006b04 <iscanf>:
    6b04:	b40f      	push	{r0, r1, r2, r3}
    6b06:	4b0b      	ldr	r3, [pc, #44]	; (6b34 <iscanf+0x30>)
    6b08:	b513      	push	{r0, r1, r4, lr}
    6b0a:	681c      	ldr	r4, [r3, #0]
    6b0c:	2c00      	cmp	r4, #0
    6b0e:	d005      	beq.n	6b1c <iscanf+0x18>
    6b10:	69a3      	ldr	r3, [r4, #24]
    6b12:	2b00      	cmp	r3, #0
    6b14:	d102      	bne.n	6b1c <iscanf+0x18>
    6b16:	0020      	movs	r0, r4
    6b18:	f000 fa9c 	bl	7054 <__sinit>
    6b1c:	ab05      	add	r3, sp, #20
    6b1e:	9a04      	ldr	r2, [sp, #16]
    6b20:	6861      	ldr	r1, [r4, #4]
    6b22:	0020      	movs	r0, r4
    6b24:	9301      	str	r3, [sp, #4]
    6b26:	f001 f807 	bl	7b38 <_vfiscanf_r>
    6b2a:	bc16      	pop	{r1, r2, r4}
    6b2c:	bc08      	pop	{r3}
    6b2e:	b004      	add	sp, #16
    6b30:	4718      	bx	r3
    6b32:	46c0      	nop			; (mov r8, r8)
    6b34:	20000118 	.word	0x20000118

00006b38 <setbuf>:
    6b38:	424a      	negs	r2, r1
    6b3a:	414a      	adcs	r2, r1
    6b3c:	2380      	movs	r3, #128	; 0x80
    6b3e:	b510      	push	{r4, lr}
    6b40:	0052      	lsls	r2, r2, #1
    6b42:	00db      	lsls	r3, r3, #3
    6b44:	f000 f802 	bl	6b4c <setvbuf>
    6b48:	bd10      	pop	{r4, pc}
	...

00006b4c <setvbuf>:
    6b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b4e:	001d      	movs	r5, r3
    6b50:	4b4f      	ldr	r3, [pc, #316]	; (6c90 <setvbuf+0x144>)
    6b52:	b085      	sub	sp, #20
    6b54:	681e      	ldr	r6, [r3, #0]
    6b56:	0004      	movs	r4, r0
    6b58:	000f      	movs	r7, r1
    6b5a:	9200      	str	r2, [sp, #0]
    6b5c:	2e00      	cmp	r6, #0
    6b5e:	d005      	beq.n	6b6c <setvbuf+0x20>
    6b60:	69b3      	ldr	r3, [r6, #24]
    6b62:	2b00      	cmp	r3, #0
    6b64:	d102      	bne.n	6b6c <setvbuf+0x20>
    6b66:	0030      	movs	r0, r6
    6b68:	f000 fa74 	bl	7054 <__sinit>
    6b6c:	4b49      	ldr	r3, [pc, #292]	; (6c94 <setvbuf+0x148>)
    6b6e:	429c      	cmp	r4, r3
    6b70:	d150      	bne.n	6c14 <setvbuf+0xc8>
    6b72:	6874      	ldr	r4, [r6, #4]
    6b74:	9b00      	ldr	r3, [sp, #0]
    6b76:	2b02      	cmp	r3, #2
    6b78:	d005      	beq.n	6b86 <setvbuf+0x3a>
    6b7a:	2b01      	cmp	r3, #1
    6b7c:	d900      	bls.n	6b80 <setvbuf+0x34>
    6b7e:	e084      	b.n	6c8a <setvbuf+0x13e>
    6b80:	2d00      	cmp	r5, #0
    6b82:	da00      	bge.n	6b86 <setvbuf+0x3a>
    6b84:	e081      	b.n	6c8a <setvbuf+0x13e>
    6b86:	0021      	movs	r1, r4
    6b88:	0030      	movs	r0, r6
    6b8a:	f000 f9e1 	bl	6f50 <_fflush_r>
    6b8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6b90:	2900      	cmp	r1, #0
    6b92:	d008      	beq.n	6ba6 <setvbuf+0x5a>
    6b94:	0023      	movs	r3, r4
    6b96:	3344      	adds	r3, #68	; 0x44
    6b98:	4299      	cmp	r1, r3
    6b9a:	d002      	beq.n	6ba2 <setvbuf+0x56>
    6b9c:	0030      	movs	r0, r6
    6b9e:	f7ff fe73 	bl	6888 <_free_r>
    6ba2:	2300      	movs	r3, #0
    6ba4:	6363      	str	r3, [r4, #52]	; 0x34
    6ba6:	2300      	movs	r3, #0
    6ba8:	61a3      	str	r3, [r4, #24]
    6baa:	6063      	str	r3, [r4, #4]
    6bac:	89a3      	ldrh	r3, [r4, #12]
    6bae:	061b      	lsls	r3, r3, #24
    6bb0:	d503      	bpl.n	6bba <setvbuf+0x6e>
    6bb2:	6921      	ldr	r1, [r4, #16]
    6bb4:	0030      	movs	r0, r6
    6bb6:	f7ff fe67 	bl	6888 <_free_r>
    6bba:	89a3      	ldrh	r3, [r4, #12]
    6bbc:	4a36      	ldr	r2, [pc, #216]	; (6c98 <setvbuf+0x14c>)
    6bbe:	4013      	ands	r3, r2
    6bc0:	81a3      	strh	r3, [r4, #12]
    6bc2:	9b00      	ldr	r3, [sp, #0]
    6bc4:	2b02      	cmp	r3, #2
    6bc6:	d05a      	beq.n	6c7e <setvbuf+0x132>
    6bc8:	ab03      	add	r3, sp, #12
    6bca:	aa02      	add	r2, sp, #8
    6bcc:	0021      	movs	r1, r4
    6bce:	0030      	movs	r0, r6
    6bd0:	f000 faf2 	bl	71b8 <__swhatbuf_r>
    6bd4:	89a3      	ldrh	r3, [r4, #12]
    6bd6:	4318      	orrs	r0, r3
    6bd8:	81a0      	strh	r0, [r4, #12]
    6bda:	2d00      	cmp	r5, #0
    6bdc:	d124      	bne.n	6c28 <setvbuf+0xdc>
    6bde:	9d02      	ldr	r5, [sp, #8]
    6be0:	0028      	movs	r0, r5
    6be2:	f7ff fe23 	bl	682c <malloc>
    6be6:	9501      	str	r5, [sp, #4]
    6be8:	1e07      	subs	r7, r0, #0
    6bea:	d142      	bne.n	6c72 <setvbuf+0x126>
    6bec:	9b02      	ldr	r3, [sp, #8]
    6bee:	9301      	str	r3, [sp, #4]
    6bf0:	42ab      	cmp	r3, r5
    6bf2:	d139      	bne.n	6c68 <setvbuf+0x11c>
    6bf4:	2001      	movs	r0, #1
    6bf6:	4240      	negs	r0, r0
    6bf8:	2302      	movs	r3, #2
    6bfa:	89a2      	ldrh	r2, [r4, #12]
    6bfc:	4313      	orrs	r3, r2
    6bfe:	81a3      	strh	r3, [r4, #12]
    6c00:	2300      	movs	r3, #0
    6c02:	60a3      	str	r3, [r4, #8]
    6c04:	0023      	movs	r3, r4
    6c06:	3347      	adds	r3, #71	; 0x47
    6c08:	6023      	str	r3, [r4, #0]
    6c0a:	6123      	str	r3, [r4, #16]
    6c0c:	2301      	movs	r3, #1
    6c0e:	6163      	str	r3, [r4, #20]
    6c10:	b005      	add	sp, #20
    6c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c14:	4b21      	ldr	r3, [pc, #132]	; (6c9c <setvbuf+0x150>)
    6c16:	429c      	cmp	r4, r3
    6c18:	d101      	bne.n	6c1e <setvbuf+0xd2>
    6c1a:	68b4      	ldr	r4, [r6, #8]
    6c1c:	e7aa      	b.n	6b74 <setvbuf+0x28>
    6c1e:	4b20      	ldr	r3, [pc, #128]	; (6ca0 <setvbuf+0x154>)
    6c20:	429c      	cmp	r4, r3
    6c22:	d1a7      	bne.n	6b74 <setvbuf+0x28>
    6c24:	68f4      	ldr	r4, [r6, #12]
    6c26:	e7a5      	b.n	6b74 <setvbuf+0x28>
    6c28:	2f00      	cmp	r7, #0
    6c2a:	d0d9      	beq.n	6be0 <setvbuf+0x94>
    6c2c:	69b3      	ldr	r3, [r6, #24]
    6c2e:	2b00      	cmp	r3, #0
    6c30:	d102      	bne.n	6c38 <setvbuf+0xec>
    6c32:	0030      	movs	r0, r6
    6c34:	f000 fa0e 	bl	7054 <__sinit>
    6c38:	9b00      	ldr	r3, [sp, #0]
    6c3a:	2b01      	cmp	r3, #1
    6c3c:	d103      	bne.n	6c46 <setvbuf+0xfa>
    6c3e:	89a3      	ldrh	r3, [r4, #12]
    6c40:	9a00      	ldr	r2, [sp, #0]
    6c42:	431a      	orrs	r2, r3
    6c44:	81a2      	strh	r2, [r4, #12]
    6c46:	2008      	movs	r0, #8
    6c48:	89a3      	ldrh	r3, [r4, #12]
    6c4a:	6027      	str	r7, [r4, #0]
    6c4c:	6127      	str	r7, [r4, #16]
    6c4e:	6165      	str	r5, [r4, #20]
    6c50:	4018      	ands	r0, r3
    6c52:	d018      	beq.n	6c86 <setvbuf+0x13a>
    6c54:	2001      	movs	r0, #1
    6c56:	4018      	ands	r0, r3
    6c58:	2300      	movs	r3, #0
    6c5a:	4298      	cmp	r0, r3
    6c5c:	d011      	beq.n	6c82 <setvbuf+0x136>
    6c5e:	426d      	negs	r5, r5
    6c60:	60a3      	str	r3, [r4, #8]
    6c62:	61a5      	str	r5, [r4, #24]
    6c64:	0018      	movs	r0, r3
    6c66:	e7d3      	b.n	6c10 <setvbuf+0xc4>
    6c68:	9801      	ldr	r0, [sp, #4]
    6c6a:	f7ff fddf 	bl	682c <malloc>
    6c6e:	1e07      	subs	r7, r0, #0
    6c70:	d0c0      	beq.n	6bf4 <setvbuf+0xa8>
    6c72:	2380      	movs	r3, #128	; 0x80
    6c74:	89a2      	ldrh	r2, [r4, #12]
    6c76:	9d01      	ldr	r5, [sp, #4]
    6c78:	4313      	orrs	r3, r2
    6c7a:	81a3      	strh	r3, [r4, #12]
    6c7c:	e7d6      	b.n	6c2c <setvbuf+0xe0>
    6c7e:	2000      	movs	r0, #0
    6c80:	e7ba      	b.n	6bf8 <setvbuf+0xac>
    6c82:	60a5      	str	r5, [r4, #8]
    6c84:	e7c4      	b.n	6c10 <setvbuf+0xc4>
    6c86:	60a0      	str	r0, [r4, #8]
    6c88:	e7c2      	b.n	6c10 <setvbuf+0xc4>
    6c8a:	2001      	movs	r0, #1
    6c8c:	4240      	negs	r0, r0
    6c8e:	e7bf      	b.n	6c10 <setvbuf+0xc4>
    6c90:	20000118 	.word	0x20000118
    6c94:	0000b024 	.word	0x0000b024
    6c98:	fffff35c 	.word	0xfffff35c
    6c9c:	0000b044 	.word	0x0000b044
    6ca0:	0000b004 	.word	0x0000b004

00006ca4 <__swbuf_r>:
    6ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ca6:	0005      	movs	r5, r0
    6ca8:	000e      	movs	r6, r1
    6caa:	0014      	movs	r4, r2
    6cac:	2800      	cmp	r0, #0
    6cae:	d004      	beq.n	6cba <__swbuf_r+0x16>
    6cb0:	6983      	ldr	r3, [r0, #24]
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d101      	bne.n	6cba <__swbuf_r+0x16>
    6cb6:	f000 f9cd 	bl	7054 <__sinit>
    6cba:	4b22      	ldr	r3, [pc, #136]	; (6d44 <__swbuf_r+0xa0>)
    6cbc:	429c      	cmp	r4, r3
    6cbe:	d12d      	bne.n	6d1c <__swbuf_r+0x78>
    6cc0:	686c      	ldr	r4, [r5, #4]
    6cc2:	69a3      	ldr	r3, [r4, #24]
    6cc4:	60a3      	str	r3, [r4, #8]
    6cc6:	89a3      	ldrh	r3, [r4, #12]
    6cc8:	071b      	lsls	r3, r3, #28
    6cca:	d531      	bpl.n	6d30 <__swbuf_r+0x8c>
    6ccc:	6923      	ldr	r3, [r4, #16]
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d02e      	beq.n	6d30 <__swbuf_r+0x8c>
    6cd2:	6823      	ldr	r3, [r4, #0]
    6cd4:	6922      	ldr	r2, [r4, #16]
    6cd6:	b2f7      	uxtb	r7, r6
    6cd8:	1a98      	subs	r0, r3, r2
    6cda:	6963      	ldr	r3, [r4, #20]
    6cdc:	b2f6      	uxtb	r6, r6
    6cde:	4298      	cmp	r0, r3
    6ce0:	db05      	blt.n	6cee <__swbuf_r+0x4a>
    6ce2:	0021      	movs	r1, r4
    6ce4:	0028      	movs	r0, r5
    6ce6:	f000 f933 	bl	6f50 <_fflush_r>
    6cea:	2800      	cmp	r0, #0
    6cec:	d126      	bne.n	6d3c <__swbuf_r+0x98>
    6cee:	68a3      	ldr	r3, [r4, #8]
    6cf0:	3001      	adds	r0, #1
    6cf2:	3b01      	subs	r3, #1
    6cf4:	60a3      	str	r3, [r4, #8]
    6cf6:	6823      	ldr	r3, [r4, #0]
    6cf8:	1c5a      	adds	r2, r3, #1
    6cfa:	6022      	str	r2, [r4, #0]
    6cfc:	701f      	strb	r7, [r3, #0]
    6cfe:	6963      	ldr	r3, [r4, #20]
    6d00:	4298      	cmp	r0, r3
    6d02:	d004      	beq.n	6d0e <__swbuf_r+0x6a>
    6d04:	89a3      	ldrh	r3, [r4, #12]
    6d06:	07db      	lsls	r3, r3, #31
    6d08:	d51a      	bpl.n	6d40 <__swbuf_r+0x9c>
    6d0a:	2e0a      	cmp	r6, #10
    6d0c:	d118      	bne.n	6d40 <__swbuf_r+0x9c>
    6d0e:	0021      	movs	r1, r4
    6d10:	0028      	movs	r0, r5
    6d12:	f000 f91d 	bl	6f50 <_fflush_r>
    6d16:	2800      	cmp	r0, #0
    6d18:	d012      	beq.n	6d40 <__swbuf_r+0x9c>
    6d1a:	e00f      	b.n	6d3c <__swbuf_r+0x98>
    6d1c:	4b0a      	ldr	r3, [pc, #40]	; (6d48 <__swbuf_r+0xa4>)
    6d1e:	429c      	cmp	r4, r3
    6d20:	d101      	bne.n	6d26 <__swbuf_r+0x82>
    6d22:	68ac      	ldr	r4, [r5, #8]
    6d24:	e7cd      	b.n	6cc2 <__swbuf_r+0x1e>
    6d26:	4b09      	ldr	r3, [pc, #36]	; (6d4c <__swbuf_r+0xa8>)
    6d28:	429c      	cmp	r4, r3
    6d2a:	d1ca      	bne.n	6cc2 <__swbuf_r+0x1e>
    6d2c:	68ec      	ldr	r4, [r5, #12]
    6d2e:	e7c8      	b.n	6cc2 <__swbuf_r+0x1e>
    6d30:	0021      	movs	r1, r4
    6d32:	0028      	movs	r0, r5
    6d34:	f000 f80c 	bl	6d50 <__swsetup_r>
    6d38:	2800      	cmp	r0, #0
    6d3a:	d0ca      	beq.n	6cd2 <__swbuf_r+0x2e>
    6d3c:	2601      	movs	r6, #1
    6d3e:	4276      	negs	r6, r6
    6d40:	0030      	movs	r0, r6
    6d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d44:	0000b024 	.word	0x0000b024
    6d48:	0000b044 	.word	0x0000b044
    6d4c:	0000b004 	.word	0x0000b004

00006d50 <__swsetup_r>:
    6d50:	4b36      	ldr	r3, [pc, #216]	; (6e2c <__swsetup_r+0xdc>)
    6d52:	b570      	push	{r4, r5, r6, lr}
    6d54:	681d      	ldr	r5, [r3, #0]
    6d56:	0006      	movs	r6, r0
    6d58:	000c      	movs	r4, r1
    6d5a:	2d00      	cmp	r5, #0
    6d5c:	d005      	beq.n	6d6a <__swsetup_r+0x1a>
    6d5e:	69ab      	ldr	r3, [r5, #24]
    6d60:	2b00      	cmp	r3, #0
    6d62:	d102      	bne.n	6d6a <__swsetup_r+0x1a>
    6d64:	0028      	movs	r0, r5
    6d66:	f000 f975 	bl	7054 <__sinit>
    6d6a:	4b31      	ldr	r3, [pc, #196]	; (6e30 <__swsetup_r+0xe0>)
    6d6c:	429c      	cmp	r4, r3
    6d6e:	d10f      	bne.n	6d90 <__swsetup_r+0x40>
    6d70:	686c      	ldr	r4, [r5, #4]
    6d72:	230c      	movs	r3, #12
    6d74:	5ee2      	ldrsh	r2, [r4, r3]
    6d76:	b293      	uxth	r3, r2
    6d78:	0719      	lsls	r1, r3, #28
    6d7a:	d42d      	bmi.n	6dd8 <__swsetup_r+0x88>
    6d7c:	06d9      	lsls	r1, r3, #27
    6d7e:	d411      	bmi.n	6da4 <__swsetup_r+0x54>
    6d80:	2309      	movs	r3, #9
    6d82:	2001      	movs	r0, #1
    6d84:	6033      	str	r3, [r6, #0]
    6d86:	3337      	adds	r3, #55	; 0x37
    6d88:	4313      	orrs	r3, r2
    6d8a:	81a3      	strh	r3, [r4, #12]
    6d8c:	4240      	negs	r0, r0
    6d8e:	bd70      	pop	{r4, r5, r6, pc}
    6d90:	4b28      	ldr	r3, [pc, #160]	; (6e34 <__swsetup_r+0xe4>)
    6d92:	429c      	cmp	r4, r3
    6d94:	d101      	bne.n	6d9a <__swsetup_r+0x4a>
    6d96:	68ac      	ldr	r4, [r5, #8]
    6d98:	e7eb      	b.n	6d72 <__swsetup_r+0x22>
    6d9a:	4b27      	ldr	r3, [pc, #156]	; (6e38 <__swsetup_r+0xe8>)
    6d9c:	429c      	cmp	r4, r3
    6d9e:	d1e8      	bne.n	6d72 <__swsetup_r+0x22>
    6da0:	68ec      	ldr	r4, [r5, #12]
    6da2:	e7e6      	b.n	6d72 <__swsetup_r+0x22>
    6da4:	075b      	lsls	r3, r3, #29
    6da6:	d513      	bpl.n	6dd0 <__swsetup_r+0x80>
    6da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6daa:	2900      	cmp	r1, #0
    6dac:	d008      	beq.n	6dc0 <__swsetup_r+0x70>
    6dae:	0023      	movs	r3, r4
    6db0:	3344      	adds	r3, #68	; 0x44
    6db2:	4299      	cmp	r1, r3
    6db4:	d002      	beq.n	6dbc <__swsetup_r+0x6c>
    6db6:	0030      	movs	r0, r6
    6db8:	f7ff fd66 	bl	6888 <_free_r>
    6dbc:	2300      	movs	r3, #0
    6dbe:	6363      	str	r3, [r4, #52]	; 0x34
    6dc0:	2224      	movs	r2, #36	; 0x24
    6dc2:	89a3      	ldrh	r3, [r4, #12]
    6dc4:	4393      	bics	r3, r2
    6dc6:	81a3      	strh	r3, [r4, #12]
    6dc8:	2300      	movs	r3, #0
    6dca:	6063      	str	r3, [r4, #4]
    6dcc:	6923      	ldr	r3, [r4, #16]
    6dce:	6023      	str	r3, [r4, #0]
    6dd0:	2308      	movs	r3, #8
    6dd2:	89a2      	ldrh	r2, [r4, #12]
    6dd4:	4313      	orrs	r3, r2
    6dd6:	81a3      	strh	r3, [r4, #12]
    6dd8:	6923      	ldr	r3, [r4, #16]
    6dda:	2b00      	cmp	r3, #0
    6ddc:	d10b      	bne.n	6df6 <__swsetup_r+0xa6>
    6dde:	21a0      	movs	r1, #160	; 0xa0
    6de0:	2280      	movs	r2, #128	; 0x80
    6de2:	89a3      	ldrh	r3, [r4, #12]
    6de4:	0089      	lsls	r1, r1, #2
    6de6:	0092      	lsls	r2, r2, #2
    6de8:	400b      	ands	r3, r1
    6dea:	4293      	cmp	r3, r2
    6dec:	d003      	beq.n	6df6 <__swsetup_r+0xa6>
    6dee:	0021      	movs	r1, r4
    6df0:	0030      	movs	r0, r6
    6df2:	f000 fa09 	bl	7208 <__smakebuf_r>
    6df6:	2301      	movs	r3, #1
    6df8:	89a2      	ldrh	r2, [r4, #12]
    6dfa:	4013      	ands	r3, r2
    6dfc:	d011      	beq.n	6e22 <__swsetup_r+0xd2>
    6dfe:	2300      	movs	r3, #0
    6e00:	60a3      	str	r3, [r4, #8]
    6e02:	6963      	ldr	r3, [r4, #20]
    6e04:	425b      	negs	r3, r3
    6e06:	61a3      	str	r3, [r4, #24]
    6e08:	2000      	movs	r0, #0
    6e0a:	6923      	ldr	r3, [r4, #16]
    6e0c:	4283      	cmp	r3, r0
    6e0e:	d1be      	bne.n	6d8e <__swsetup_r+0x3e>
    6e10:	230c      	movs	r3, #12
    6e12:	5ee2      	ldrsh	r2, [r4, r3]
    6e14:	0613      	lsls	r3, r2, #24
    6e16:	d5ba      	bpl.n	6d8e <__swsetup_r+0x3e>
    6e18:	2340      	movs	r3, #64	; 0x40
    6e1a:	4313      	orrs	r3, r2
    6e1c:	81a3      	strh	r3, [r4, #12]
    6e1e:	3801      	subs	r0, #1
    6e20:	e7b5      	b.n	6d8e <__swsetup_r+0x3e>
    6e22:	0792      	lsls	r2, r2, #30
    6e24:	d400      	bmi.n	6e28 <__swsetup_r+0xd8>
    6e26:	6963      	ldr	r3, [r4, #20]
    6e28:	60a3      	str	r3, [r4, #8]
    6e2a:	e7ed      	b.n	6e08 <__swsetup_r+0xb8>
    6e2c:	20000118 	.word	0x20000118
    6e30:	0000b024 	.word	0x0000b024
    6e34:	0000b044 	.word	0x0000b044
    6e38:	0000b004 	.word	0x0000b004

00006e3c <__sflush_r>:
    6e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e3e:	898a      	ldrh	r2, [r1, #12]
    6e40:	0005      	movs	r5, r0
    6e42:	000c      	movs	r4, r1
    6e44:	0713      	lsls	r3, r2, #28
    6e46:	d460      	bmi.n	6f0a <__sflush_r+0xce>
    6e48:	684b      	ldr	r3, [r1, #4]
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	dc04      	bgt.n	6e58 <__sflush_r+0x1c>
    6e4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6e50:	2b00      	cmp	r3, #0
    6e52:	dc01      	bgt.n	6e58 <__sflush_r+0x1c>
    6e54:	2000      	movs	r0, #0
    6e56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6e58:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6e5a:	2f00      	cmp	r7, #0
    6e5c:	d0fa      	beq.n	6e54 <__sflush_r+0x18>
    6e5e:	2300      	movs	r3, #0
    6e60:	682e      	ldr	r6, [r5, #0]
    6e62:	602b      	str	r3, [r5, #0]
    6e64:	2380      	movs	r3, #128	; 0x80
    6e66:	015b      	lsls	r3, r3, #5
    6e68:	401a      	ands	r2, r3
    6e6a:	d034      	beq.n	6ed6 <__sflush_r+0x9a>
    6e6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6e6e:	89a3      	ldrh	r3, [r4, #12]
    6e70:	075b      	lsls	r3, r3, #29
    6e72:	d506      	bpl.n	6e82 <__sflush_r+0x46>
    6e74:	6863      	ldr	r3, [r4, #4]
    6e76:	1ac0      	subs	r0, r0, r3
    6e78:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6e7a:	2b00      	cmp	r3, #0
    6e7c:	d001      	beq.n	6e82 <__sflush_r+0x46>
    6e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6e80:	1ac0      	subs	r0, r0, r3
    6e82:	0002      	movs	r2, r0
    6e84:	6a21      	ldr	r1, [r4, #32]
    6e86:	2300      	movs	r3, #0
    6e88:	0028      	movs	r0, r5
    6e8a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6e8c:	47b8      	blx	r7
    6e8e:	89a1      	ldrh	r1, [r4, #12]
    6e90:	1c43      	adds	r3, r0, #1
    6e92:	d106      	bne.n	6ea2 <__sflush_r+0x66>
    6e94:	682b      	ldr	r3, [r5, #0]
    6e96:	2b1d      	cmp	r3, #29
    6e98:	d831      	bhi.n	6efe <__sflush_r+0xc2>
    6e9a:	4a2c      	ldr	r2, [pc, #176]	; (6f4c <__sflush_r+0x110>)
    6e9c:	40da      	lsrs	r2, r3
    6e9e:	07d3      	lsls	r3, r2, #31
    6ea0:	d52d      	bpl.n	6efe <__sflush_r+0xc2>
    6ea2:	2300      	movs	r3, #0
    6ea4:	6063      	str	r3, [r4, #4]
    6ea6:	6923      	ldr	r3, [r4, #16]
    6ea8:	6023      	str	r3, [r4, #0]
    6eaa:	04cb      	lsls	r3, r1, #19
    6eac:	d505      	bpl.n	6eba <__sflush_r+0x7e>
    6eae:	1c43      	adds	r3, r0, #1
    6eb0:	d102      	bne.n	6eb8 <__sflush_r+0x7c>
    6eb2:	682b      	ldr	r3, [r5, #0]
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d100      	bne.n	6eba <__sflush_r+0x7e>
    6eb8:	6560      	str	r0, [r4, #84]	; 0x54
    6eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6ebc:	602e      	str	r6, [r5, #0]
    6ebe:	2900      	cmp	r1, #0
    6ec0:	d0c8      	beq.n	6e54 <__sflush_r+0x18>
    6ec2:	0023      	movs	r3, r4
    6ec4:	3344      	adds	r3, #68	; 0x44
    6ec6:	4299      	cmp	r1, r3
    6ec8:	d002      	beq.n	6ed0 <__sflush_r+0x94>
    6eca:	0028      	movs	r0, r5
    6ecc:	f7ff fcdc 	bl	6888 <_free_r>
    6ed0:	2000      	movs	r0, #0
    6ed2:	6360      	str	r0, [r4, #52]	; 0x34
    6ed4:	e7bf      	b.n	6e56 <__sflush_r+0x1a>
    6ed6:	2301      	movs	r3, #1
    6ed8:	6a21      	ldr	r1, [r4, #32]
    6eda:	0028      	movs	r0, r5
    6edc:	47b8      	blx	r7
    6ede:	1c43      	adds	r3, r0, #1
    6ee0:	d1c5      	bne.n	6e6e <__sflush_r+0x32>
    6ee2:	682b      	ldr	r3, [r5, #0]
    6ee4:	2b00      	cmp	r3, #0
    6ee6:	d0c2      	beq.n	6e6e <__sflush_r+0x32>
    6ee8:	2b1d      	cmp	r3, #29
    6eea:	d001      	beq.n	6ef0 <__sflush_r+0xb4>
    6eec:	2b16      	cmp	r3, #22
    6eee:	d101      	bne.n	6ef4 <__sflush_r+0xb8>
    6ef0:	602e      	str	r6, [r5, #0]
    6ef2:	e7af      	b.n	6e54 <__sflush_r+0x18>
    6ef4:	2340      	movs	r3, #64	; 0x40
    6ef6:	89a2      	ldrh	r2, [r4, #12]
    6ef8:	4313      	orrs	r3, r2
    6efa:	81a3      	strh	r3, [r4, #12]
    6efc:	e7ab      	b.n	6e56 <__sflush_r+0x1a>
    6efe:	2340      	movs	r3, #64	; 0x40
    6f00:	430b      	orrs	r3, r1
    6f02:	2001      	movs	r0, #1
    6f04:	81a3      	strh	r3, [r4, #12]
    6f06:	4240      	negs	r0, r0
    6f08:	e7a5      	b.n	6e56 <__sflush_r+0x1a>
    6f0a:	690f      	ldr	r7, [r1, #16]
    6f0c:	2f00      	cmp	r7, #0
    6f0e:	d0a1      	beq.n	6e54 <__sflush_r+0x18>
    6f10:	680b      	ldr	r3, [r1, #0]
    6f12:	600f      	str	r7, [r1, #0]
    6f14:	1bdb      	subs	r3, r3, r7
    6f16:	9301      	str	r3, [sp, #4]
    6f18:	2300      	movs	r3, #0
    6f1a:	0792      	lsls	r2, r2, #30
    6f1c:	d100      	bne.n	6f20 <__sflush_r+0xe4>
    6f1e:	694b      	ldr	r3, [r1, #20]
    6f20:	60a3      	str	r3, [r4, #8]
    6f22:	9b01      	ldr	r3, [sp, #4]
    6f24:	2b00      	cmp	r3, #0
    6f26:	dc00      	bgt.n	6f2a <__sflush_r+0xee>
    6f28:	e794      	b.n	6e54 <__sflush_r+0x18>
    6f2a:	9b01      	ldr	r3, [sp, #4]
    6f2c:	003a      	movs	r2, r7
    6f2e:	6a21      	ldr	r1, [r4, #32]
    6f30:	0028      	movs	r0, r5
    6f32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6f34:	47b0      	blx	r6
    6f36:	2800      	cmp	r0, #0
    6f38:	dc03      	bgt.n	6f42 <__sflush_r+0x106>
    6f3a:	2340      	movs	r3, #64	; 0x40
    6f3c:	89a2      	ldrh	r2, [r4, #12]
    6f3e:	4313      	orrs	r3, r2
    6f40:	e7df      	b.n	6f02 <__sflush_r+0xc6>
    6f42:	9b01      	ldr	r3, [sp, #4]
    6f44:	183f      	adds	r7, r7, r0
    6f46:	1a1b      	subs	r3, r3, r0
    6f48:	9301      	str	r3, [sp, #4]
    6f4a:	e7ea      	b.n	6f22 <__sflush_r+0xe6>
    6f4c:	20400001 	.word	0x20400001

00006f50 <_fflush_r>:
    6f50:	690b      	ldr	r3, [r1, #16]
    6f52:	b570      	push	{r4, r5, r6, lr}
    6f54:	0005      	movs	r5, r0
    6f56:	000c      	movs	r4, r1
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d101      	bne.n	6f60 <_fflush_r+0x10>
    6f5c:	2000      	movs	r0, #0
    6f5e:	bd70      	pop	{r4, r5, r6, pc}
    6f60:	2800      	cmp	r0, #0
    6f62:	d004      	beq.n	6f6e <_fflush_r+0x1e>
    6f64:	6983      	ldr	r3, [r0, #24]
    6f66:	2b00      	cmp	r3, #0
    6f68:	d101      	bne.n	6f6e <_fflush_r+0x1e>
    6f6a:	f000 f873 	bl	7054 <__sinit>
    6f6e:	4b0b      	ldr	r3, [pc, #44]	; (6f9c <_fflush_r+0x4c>)
    6f70:	429c      	cmp	r4, r3
    6f72:	d109      	bne.n	6f88 <_fflush_r+0x38>
    6f74:	686c      	ldr	r4, [r5, #4]
    6f76:	220c      	movs	r2, #12
    6f78:	5ea3      	ldrsh	r3, [r4, r2]
    6f7a:	2b00      	cmp	r3, #0
    6f7c:	d0ee      	beq.n	6f5c <_fflush_r+0xc>
    6f7e:	0021      	movs	r1, r4
    6f80:	0028      	movs	r0, r5
    6f82:	f7ff ff5b 	bl	6e3c <__sflush_r>
    6f86:	e7ea      	b.n	6f5e <_fflush_r+0xe>
    6f88:	4b05      	ldr	r3, [pc, #20]	; (6fa0 <_fflush_r+0x50>)
    6f8a:	429c      	cmp	r4, r3
    6f8c:	d101      	bne.n	6f92 <_fflush_r+0x42>
    6f8e:	68ac      	ldr	r4, [r5, #8]
    6f90:	e7f1      	b.n	6f76 <_fflush_r+0x26>
    6f92:	4b04      	ldr	r3, [pc, #16]	; (6fa4 <_fflush_r+0x54>)
    6f94:	429c      	cmp	r4, r3
    6f96:	d1ee      	bne.n	6f76 <_fflush_r+0x26>
    6f98:	68ec      	ldr	r4, [r5, #12]
    6f9a:	e7ec      	b.n	6f76 <_fflush_r+0x26>
    6f9c:	0000b024 	.word	0x0000b024
    6fa0:	0000b044 	.word	0x0000b044
    6fa4:	0000b004 	.word	0x0000b004

00006fa8 <fflush>:
    6fa8:	b510      	push	{r4, lr}
    6faa:	1e01      	subs	r1, r0, #0
    6fac:	d105      	bne.n	6fba <fflush+0x12>
    6fae:	4b05      	ldr	r3, [pc, #20]	; (6fc4 <fflush+0x1c>)
    6fb0:	4905      	ldr	r1, [pc, #20]	; (6fc8 <fflush+0x20>)
    6fb2:	6818      	ldr	r0, [r3, #0]
    6fb4:	f000 f8de 	bl	7174 <_fwalk_reent>
    6fb8:	bd10      	pop	{r4, pc}
    6fba:	4b04      	ldr	r3, [pc, #16]	; (6fcc <fflush+0x24>)
    6fbc:	6818      	ldr	r0, [r3, #0]
    6fbe:	f7ff ffc7 	bl	6f50 <_fflush_r>
    6fc2:	e7f9      	b.n	6fb8 <fflush+0x10>
    6fc4:	0000b000 	.word	0x0000b000
    6fc8:	00006f51 	.word	0x00006f51
    6fcc:	20000118 	.word	0x20000118

00006fd0 <_cleanup_r>:
    6fd0:	b510      	push	{r4, lr}
    6fd2:	4902      	ldr	r1, [pc, #8]	; (6fdc <_cleanup_r+0xc>)
    6fd4:	f000 f8ce 	bl	7174 <_fwalk_reent>
    6fd8:	bd10      	pop	{r4, pc}
    6fda:	46c0      	nop			; (mov r8, r8)
    6fdc:	00006f51 	.word	0x00006f51

00006fe0 <std.isra.0>:
    6fe0:	2300      	movs	r3, #0
    6fe2:	b510      	push	{r4, lr}
    6fe4:	0004      	movs	r4, r0
    6fe6:	6003      	str	r3, [r0, #0]
    6fe8:	6043      	str	r3, [r0, #4]
    6fea:	6083      	str	r3, [r0, #8]
    6fec:	8181      	strh	r1, [r0, #12]
    6fee:	6643      	str	r3, [r0, #100]	; 0x64
    6ff0:	81c2      	strh	r2, [r0, #14]
    6ff2:	6103      	str	r3, [r0, #16]
    6ff4:	6143      	str	r3, [r0, #20]
    6ff6:	6183      	str	r3, [r0, #24]
    6ff8:	0019      	movs	r1, r3
    6ffa:	2208      	movs	r2, #8
    6ffc:	305c      	adds	r0, #92	; 0x5c
    6ffe:	f7ff fc3a 	bl	6876 <memset>
    7002:	4b05      	ldr	r3, [pc, #20]	; (7018 <std.isra.0+0x38>)
    7004:	6224      	str	r4, [r4, #32]
    7006:	6263      	str	r3, [r4, #36]	; 0x24
    7008:	4b04      	ldr	r3, [pc, #16]	; (701c <std.isra.0+0x3c>)
    700a:	62a3      	str	r3, [r4, #40]	; 0x28
    700c:	4b04      	ldr	r3, [pc, #16]	; (7020 <std.isra.0+0x40>)
    700e:	62e3      	str	r3, [r4, #44]	; 0x2c
    7010:	4b04      	ldr	r3, [pc, #16]	; (7024 <std.isra.0+0x44>)
    7012:	6323      	str	r3, [r4, #48]	; 0x30
    7014:	bd10      	pop	{r4, pc}
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	00007fed 	.word	0x00007fed
    701c:	00008015 	.word	0x00008015
    7020:	0000804d 	.word	0x0000804d
    7024:	00008079 	.word	0x00008079

00007028 <__sfmoreglue>:
    7028:	b570      	push	{r4, r5, r6, lr}
    702a:	2568      	movs	r5, #104	; 0x68
    702c:	1e4a      	subs	r2, r1, #1
    702e:	4355      	muls	r5, r2
    7030:	000e      	movs	r6, r1
    7032:	0029      	movs	r1, r5
    7034:	3174      	adds	r1, #116	; 0x74
    7036:	f7ff fc71 	bl	691c <_malloc_r>
    703a:	1e04      	subs	r4, r0, #0
    703c:	d008      	beq.n	7050 <__sfmoreglue+0x28>
    703e:	2100      	movs	r1, #0
    7040:	002a      	movs	r2, r5
    7042:	6001      	str	r1, [r0, #0]
    7044:	6046      	str	r6, [r0, #4]
    7046:	300c      	adds	r0, #12
    7048:	60a0      	str	r0, [r4, #8]
    704a:	3268      	adds	r2, #104	; 0x68
    704c:	f7ff fc13 	bl	6876 <memset>
    7050:	0020      	movs	r0, r4
    7052:	bd70      	pop	{r4, r5, r6, pc}

00007054 <__sinit>:
    7054:	6983      	ldr	r3, [r0, #24]
    7056:	b513      	push	{r0, r1, r4, lr}
    7058:	0004      	movs	r4, r0
    705a:	2b00      	cmp	r3, #0
    705c:	d128      	bne.n	70b0 <__sinit+0x5c>
    705e:	6483      	str	r3, [r0, #72]	; 0x48
    7060:	64c3      	str	r3, [r0, #76]	; 0x4c
    7062:	6503      	str	r3, [r0, #80]	; 0x50
    7064:	4b13      	ldr	r3, [pc, #76]	; (70b4 <__sinit+0x60>)
    7066:	4a14      	ldr	r2, [pc, #80]	; (70b8 <__sinit+0x64>)
    7068:	681b      	ldr	r3, [r3, #0]
    706a:	6282      	str	r2, [r0, #40]	; 0x28
    706c:	9301      	str	r3, [sp, #4]
    706e:	4298      	cmp	r0, r3
    7070:	d101      	bne.n	7076 <__sinit+0x22>
    7072:	2301      	movs	r3, #1
    7074:	6183      	str	r3, [r0, #24]
    7076:	0020      	movs	r0, r4
    7078:	f000 f820 	bl	70bc <__sfp>
    707c:	6060      	str	r0, [r4, #4]
    707e:	0020      	movs	r0, r4
    7080:	f000 f81c 	bl	70bc <__sfp>
    7084:	60a0      	str	r0, [r4, #8]
    7086:	0020      	movs	r0, r4
    7088:	f000 f818 	bl	70bc <__sfp>
    708c:	2200      	movs	r2, #0
    708e:	60e0      	str	r0, [r4, #12]
    7090:	2104      	movs	r1, #4
    7092:	6860      	ldr	r0, [r4, #4]
    7094:	f7ff ffa4 	bl	6fe0 <std.isra.0>
    7098:	2201      	movs	r2, #1
    709a:	2109      	movs	r1, #9
    709c:	68a0      	ldr	r0, [r4, #8]
    709e:	f7ff ff9f 	bl	6fe0 <std.isra.0>
    70a2:	2202      	movs	r2, #2
    70a4:	2112      	movs	r1, #18
    70a6:	68e0      	ldr	r0, [r4, #12]
    70a8:	f7ff ff9a 	bl	6fe0 <std.isra.0>
    70ac:	2301      	movs	r3, #1
    70ae:	61a3      	str	r3, [r4, #24]
    70b0:	bd13      	pop	{r0, r1, r4, pc}
    70b2:	46c0      	nop			; (mov r8, r8)
    70b4:	0000b000 	.word	0x0000b000
    70b8:	00006fd1 	.word	0x00006fd1

000070bc <__sfp>:
    70bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70be:	4b1e      	ldr	r3, [pc, #120]	; (7138 <__sfp+0x7c>)
    70c0:	0007      	movs	r7, r0
    70c2:	681e      	ldr	r6, [r3, #0]
    70c4:	69b3      	ldr	r3, [r6, #24]
    70c6:	2b00      	cmp	r3, #0
    70c8:	d102      	bne.n	70d0 <__sfp+0x14>
    70ca:	0030      	movs	r0, r6
    70cc:	f7ff ffc2 	bl	7054 <__sinit>
    70d0:	3648      	adds	r6, #72	; 0x48
    70d2:	68b4      	ldr	r4, [r6, #8]
    70d4:	6873      	ldr	r3, [r6, #4]
    70d6:	3b01      	subs	r3, #1
    70d8:	d504      	bpl.n	70e4 <__sfp+0x28>
    70da:	6833      	ldr	r3, [r6, #0]
    70dc:	2b00      	cmp	r3, #0
    70de:	d007      	beq.n	70f0 <__sfp+0x34>
    70e0:	6836      	ldr	r6, [r6, #0]
    70e2:	e7f6      	b.n	70d2 <__sfp+0x16>
    70e4:	220c      	movs	r2, #12
    70e6:	5ea5      	ldrsh	r5, [r4, r2]
    70e8:	2d00      	cmp	r5, #0
    70ea:	d00d      	beq.n	7108 <__sfp+0x4c>
    70ec:	3468      	adds	r4, #104	; 0x68
    70ee:	e7f2      	b.n	70d6 <__sfp+0x1a>
    70f0:	2104      	movs	r1, #4
    70f2:	0038      	movs	r0, r7
    70f4:	f7ff ff98 	bl	7028 <__sfmoreglue>
    70f8:	6030      	str	r0, [r6, #0]
    70fa:	2800      	cmp	r0, #0
    70fc:	d1f0      	bne.n	70e0 <__sfp+0x24>
    70fe:	230c      	movs	r3, #12
    7100:	0004      	movs	r4, r0
    7102:	603b      	str	r3, [r7, #0]
    7104:	0020      	movs	r0, r4
    7106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7108:	2301      	movs	r3, #1
    710a:	0020      	movs	r0, r4
    710c:	425b      	negs	r3, r3
    710e:	81e3      	strh	r3, [r4, #14]
    7110:	3302      	adds	r3, #2
    7112:	81a3      	strh	r3, [r4, #12]
    7114:	6665      	str	r5, [r4, #100]	; 0x64
    7116:	6025      	str	r5, [r4, #0]
    7118:	60a5      	str	r5, [r4, #8]
    711a:	6065      	str	r5, [r4, #4]
    711c:	6125      	str	r5, [r4, #16]
    711e:	6165      	str	r5, [r4, #20]
    7120:	61a5      	str	r5, [r4, #24]
    7122:	2208      	movs	r2, #8
    7124:	0029      	movs	r1, r5
    7126:	305c      	adds	r0, #92	; 0x5c
    7128:	f7ff fba5 	bl	6876 <memset>
    712c:	6365      	str	r5, [r4, #52]	; 0x34
    712e:	63a5      	str	r5, [r4, #56]	; 0x38
    7130:	64a5      	str	r5, [r4, #72]	; 0x48
    7132:	64e5      	str	r5, [r4, #76]	; 0x4c
    7134:	e7e6      	b.n	7104 <__sfp+0x48>
    7136:	46c0      	nop			; (mov r8, r8)
    7138:	0000b000 	.word	0x0000b000

0000713c <_fwalk>:
    713c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    713e:	3048      	adds	r0, #72	; 0x48
    7140:	0004      	movs	r4, r0
    7142:	2600      	movs	r6, #0
    7144:	9101      	str	r1, [sp, #4]
    7146:	2c00      	cmp	r4, #0
    7148:	d101      	bne.n	714e <_fwalk+0x12>
    714a:	0030      	movs	r0, r6
    714c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    714e:	68a5      	ldr	r5, [r4, #8]
    7150:	6867      	ldr	r7, [r4, #4]
    7152:	3f01      	subs	r7, #1
    7154:	d501      	bpl.n	715a <_fwalk+0x1e>
    7156:	6824      	ldr	r4, [r4, #0]
    7158:	e7f5      	b.n	7146 <_fwalk+0xa>
    715a:	89ab      	ldrh	r3, [r5, #12]
    715c:	2b01      	cmp	r3, #1
    715e:	d907      	bls.n	7170 <_fwalk+0x34>
    7160:	220e      	movs	r2, #14
    7162:	5eab      	ldrsh	r3, [r5, r2]
    7164:	3301      	adds	r3, #1
    7166:	d003      	beq.n	7170 <_fwalk+0x34>
    7168:	0028      	movs	r0, r5
    716a:	9b01      	ldr	r3, [sp, #4]
    716c:	4798      	blx	r3
    716e:	4306      	orrs	r6, r0
    7170:	3568      	adds	r5, #104	; 0x68
    7172:	e7ee      	b.n	7152 <_fwalk+0x16>

00007174 <_fwalk_reent>:
    7174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7176:	0004      	movs	r4, r0
    7178:	0007      	movs	r7, r0
    717a:	2600      	movs	r6, #0
    717c:	9101      	str	r1, [sp, #4]
    717e:	3448      	adds	r4, #72	; 0x48
    7180:	2c00      	cmp	r4, #0
    7182:	d101      	bne.n	7188 <_fwalk_reent+0x14>
    7184:	0030      	movs	r0, r6
    7186:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7188:	6863      	ldr	r3, [r4, #4]
    718a:	68a5      	ldr	r5, [r4, #8]
    718c:	9300      	str	r3, [sp, #0]
    718e:	9b00      	ldr	r3, [sp, #0]
    7190:	3b01      	subs	r3, #1
    7192:	9300      	str	r3, [sp, #0]
    7194:	d501      	bpl.n	719a <_fwalk_reent+0x26>
    7196:	6824      	ldr	r4, [r4, #0]
    7198:	e7f2      	b.n	7180 <_fwalk_reent+0xc>
    719a:	89ab      	ldrh	r3, [r5, #12]
    719c:	2b01      	cmp	r3, #1
    719e:	d908      	bls.n	71b2 <_fwalk_reent+0x3e>
    71a0:	220e      	movs	r2, #14
    71a2:	5eab      	ldrsh	r3, [r5, r2]
    71a4:	3301      	adds	r3, #1
    71a6:	d004      	beq.n	71b2 <_fwalk_reent+0x3e>
    71a8:	0029      	movs	r1, r5
    71aa:	0038      	movs	r0, r7
    71ac:	9b01      	ldr	r3, [sp, #4]
    71ae:	4798      	blx	r3
    71b0:	4306      	orrs	r6, r0
    71b2:	3568      	adds	r5, #104	; 0x68
    71b4:	e7eb      	b.n	718e <_fwalk_reent+0x1a>
	...

000071b8 <__swhatbuf_r>:
    71b8:	b570      	push	{r4, r5, r6, lr}
    71ba:	000e      	movs	r6, r1
    71bc:	001d      	movs	r5, r3
    71be:	230e      	movs	r3, #14
    71c0:	5ec9      	ldrsh	r1, [r1, r3]
    71c2:	b090      	sub	sp, #64	; 0x40
    71c4:	0014      	movs	r4, r2
    71c6:	2900      	cmp	r1, #0
    71c8:	da07      	bge.n	71da <__swhatbuf_r+0x22>
    71ca:	2300      	movs	r3, #0
    71cc:	602b      	str	r3, [r5, #0]
    71ce:	89b3      	ldrh	r3, [r6, #12]
    71d0:	061b      	lsls	r3, r3, #24
    71d2:	d411      	bmi.n	71f8 <__swhatbuf_r+0x40>
    71d4:	2380      	movs	r3, #128	; 0x80
    71d6:	00db      	lsls	r3, r3, #3
    71d8:	e00f      	b.n	71fa <__swhatbuf_r+0x42>
    71da:	aa01      	add	r2, sp, #4
    71dc:	f001 f956 	bl	848c <_fstat_r>
    71e0:	2800      	cmp	r0, #0
    71e2:	dbf2      	blt.n	71ca <__swhatbuf_r+0x12>
    71e4:	22f0      	movs	r2, #240	; 0xf0
    71e6:	9b02      	ldr	r3, [sp, #8]
    71e8:	0212      	lsls	r2, r2, #8
    71ea:	4013      	ands	r3, r2
    71ec:	4a05      	ldr	r2, [pc, #20]	; (7204 <__swhatbuf_r+0x4c>)
    71ee:	189b      	adds	r3, r3, r2
    71f0:	425a      	negs	r2, r3
    71f2:	4153      	adcs	r3, r2
    71f4:	602b      	str	r3, [r5, #0]
    71f6:	e7ed      	b.n	71d4 <__swhatbuf_r+0x1c>
    71f8:	2340      	movs	r3, #64	; 0x40
    71fa:	2000      	movs	r0, #0
    71fc:	6023      	str	r3, [r4, #0]
    71fe:	b010      	add	sp, #64	; 0x40
    7200:	bd70      	pop	{r4, r5, r6, pc}
    7202:	46c0      	nop			; (mov r8, r8)
    7204:	ffffe000 	.word	0xffffe000

00007208 <__smakebuf_r>:
    7208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    720a:	2602      	movs	r6, #2
    720c:	898b      	ldrh	r3, [r1, #12]
    720e:	0005      	movs	r5, r0
    7210:	000c      	movs	r4, r1
    7212:	4233      	tst	r3, r6
    7214:	d006      	beq.n	7224 <__smakebuf_r+0x1c>
    7216:	0023      	movs	r3, r4
    7218:	3347      	adds	r3, #71	; 0x47
    721a:	6023      	str	r3, [r4, #0]
    721c:	6123      	str	r3, [r4, #16]
    721e:	2301      	movs	r3, #1
    7220:	6163      	str	r3, [r4, #20]
    7222:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7224:	ab01      	add	r3, sp, #4
    7226:	466a      	mov	r2, sp
    7228:	f7ff ffc6 	bl	71b8 <__swhatbuf_r>
    722c:	9900      	ldr	r1, [sp, #0]
    722e:	0007      	movs	r7, r0
    7230:	0028      	movs	r0, r5
    7232:	f7ff fb73 	bl	691c <_malloc_r>
    7236:	2800      	cmp	r0, #0
    7238:	d108      	bne.n	724c <__smakebuf_r+0x44>
    723a:	220c      	movs	r2, #12
    723c:	5ea3      	ldrsh	r3, [r4, r2]
    723e:	059a      	lsls	r2, r3, #22
    7240:	d4ef      	bmi.n	7222 <__smakebuf_r+0x1a>
    7242:	2203      	movs	r2, #3
    7244:	4393      	bics	r3, r2
    7246:	431e      	orrs	r6, r3
    7248:	81a6      	strh	r6, [r4, #12]
    724a:	e7e4      	b.n	7216 <__smakebuf_r+0xe>
    724c:	4b0f      	ldr	r3, [pc, #60]	; (728c <__smakebuf_r+0x84>)
    724e:	62ab      	str	r3, [r5, #40]	; 0x28
    7250:	2380      	movs	r3, #128	; 0x80
    7252:	89a2      	ldrh	r2, [r4, #12]
    7254:	6020      	str	r0, [r4, #0]
    7256:	4313      	orrs	r3, r2
    7258:	81a3      	strh	r3, [r4, #12]
    725a:	9b00      	ldr	r3, [sp, #0]
    725c:	6120      	str	r0, [r4, #16]
    725e:	6163      	str	r3, [r4, #20]
    7260:	9b01      	ldr	r3, [sp, #4]
    7262:	2b00      	cmp	r3, #0
    7264:	d00d      	beq.n	7282 <__smakebuf_r+0x7a>
    7266:	230e      	movs	r3, #14
    7268:	5ee1      	ldrsh	r1, [r4, r3]
    726a:	0028      	movs	r0, r5
    726c:	f001 f920 	bl	84b0 <_isatty_r>
    7270:	2800      	cmp	r0, #0
    7272:	d006      	beq.n	7282 <__smakebuf_r+0x7a>
    7274:	2203      	movs	r2, #3
    7276:	89a3      	ldrh	r3, [r4, #12]
    7278:	4393      	bics	r3, r2
    727a:	001a      	movs	r2, r3
    727c:	2301      	movs	r3, #1
    727e:	4313      	orrs	r3, r2
    7280:	81a3      	strh	r3, [r4, #12]
    7282:	89a0      	ldrh	r0, [r4, #12]
    7284:	4338      	orrs	r0, r7
    7286:	81a0      	strh	r0, [r4, #12]
    7288:	e7cb      	b.n	7222 <__smakebuf_r+0x1a>
    728a:	46c0      	nop			; (mov r8, r8)
    728c:	00006fd1 	.word	0x00006fd1

00007290 <__malloc_lock>:
    7290:	4770      	bx	lr

00007292 <__malloc_unlock>:
    7292:	4770      	bx	lr

00007294 <__sfputc_r>:
    7294:	6893      	ldr	r3, [r2, #8]
    7296:	b510      	push	{r4, lr}
    7298:	3b01      	subs	r3, #1
    729a:	6093      	str	r3, [r2, #8]
    729c:	2b00      	cmp	r3, #0
    729e:	da05      	bge.n	72ac <__sfputc_r+0x18>
    72a0:	6994      	ldr	r4, [r2, #24]
    72a2:	42a3      	cmp	r3, r4
    72a4:	db08      	blt.n	72b8 <__sfputc_r+0x24>
    72a6:	b2cb      	uxtb	r3, r1
    72a8:	2b0a      	cmp	r3, #10
    72aa:	d005      	beq.n	72b8 <__sfputc_r+0x24>
    72ac:	6813      	ldr	r3, [r2, #0]
    72ae:	1c58      	adds	r0, r3, #1
    72b0:	6010      	str	r0, [r2, #0]
    72b2:	7019      	strb	r1, [r3, #0]
    72b4:	b2c8      	uxtb	r0, r1
    72b6:	bd10      	pop	{r4, pc}
    72b8:	f7ff fcf4 	bl	6ca4 <__swbuf_r>
    72bc:	e7fb      	b.n	72b6 <__sfputc_r+0x22>

000072be <__sfputs_r>:
    72be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72c0:	0006      	movs	r6, r0
    72c2:	000f      	movs	r7, r1
    72c4:	0014      	movs	r4, r2
    72c6:	18d5      	adds	r5, r2, r3
    72c8:	42ac      	cmp	r4, r5
    72ca:	d101      	bne.n	72d0 <__sfputs_r+0x12>
    72cc:	2000      	movs	r0, #0
    72ce:	e007      	b.n	72e0 <__sfputs_r+0x22>
    72d0:	7821      	ldrb	r1, [r4, #0]
    72d2:	003a      	movs	r2, r7
    72d4:	0030      	movs	r0, r6
    72d6:	f7ff ffdd 	bl	7294 <__sfputc_r>
    72da:	3401      	adds	r4, #1
    72dc:	1c43      	adds	r3, r0, #1
    72de:	d1f3      	bne.n	72c8 <__sfputs_r+0xa>
    72e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000072e4 <_vfiprintf_r>:
    72e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    72e6:	b09f      	sub	sp, #124	; 0x7c
    72e8:	0006      	movs	r6, r0
    72ea:	000f      	movs	r7, r1
    72ec:	0014      	movs	r4, r2
    72ee:	9305      	str	r3, [sp, #20]
    72f0:	2800      	cmp	r0, #0
    72f2:	d004      	beq.n	72fe <_vfiprintf_r+0x1a>
    72f4:	6983      	ldr	r3, [r0, #24]
    72f6:	2b00      	cmp	r3, #0
    72f8:	d101      	bne.n	72fe <_vfiprintf_r+0x1a>
    72fa:	f7ff feab 	bl	7054 <__sinit>
    72fe:	4b7f      	ldr	r3, [pc, #508]	; (74fc <_vfiprintf_r+0x218>)
    7300:	429f      	cmp	r7, r3
    7302:	d15c      	bne.n	73be <_vfiprintf_r+0xda>
    7304:	6877      	ldr	r7, [r6, #4]
    7306:	89bb      	ldrh	r3, [r7, #12]
    7308:	071b      	lsls	r3, r3, #28
    730a:	d562      	bpl.n	73d2 <_vfiprintf_r+0xee>
    730c:	693b      	ldr	r3, [r7, #16]
    730e:	2b00      	cmp	r3, #0
    7310:	d05f      	beq.n	73d2 <_vfiprintf_r+0xee>
    7312:	2300      	movs	r3, #0
    7314:	ad06      	add	r5, sp, #24
    7316:	616b      	str	r3, [r5, #20]
    7318:	3320      	adds	r3, #32
    731a:	766b      	strb	r3, [r5, #25]
    731c:	3310      	adds	r3, #16
    731e:	76ab      	strb	r3, [r5, #26]
    7320:	9402      	str	r4, [sp, #8]
    7322:	9c02      	ldr	r4, [sp, #8]
    7324:	7823      	ldrb	r3, [r4, #0]
    7326:	2b00      	cmp	r3, #0
    7328:	d15d      	bne.n	73e6 <_vfiprintf_r+0x102>
    732a:	9b02      	ldr	r3, [sp, #8]
    732c:	1ae3      	subs	r3, r4, r3
    732e:	9304      	str	r3, [sp, #16]
    7330:	d00d      	beq.n	734e <_vfiprintf_r+0x6a>
    7332:	9b04      	ldr	r3, [sp, #16]
    7334:	9a02      	ldr	r2, [sp, #8]
    7336:	0039      	movs	r1, r7
    7338:	0030      	movs	r0, r6
    733a:	f7ff ffc0 	bl	72be <__sfputs_r>
    733e:	1c43      	adds	r3, r0, #1
    7340:	d100      	bne.n	7344 <_vfiprintf_r+0x60>
    7342:	e0cc      	b.n	74de <_vfiprintf_r+0x1fa>
    7344:	696a      	ldr	r2, [r5, #20]
    7346:	9b04      	ldr	r3, [sp, #16]
    7348:	4694      	mov	ip, r2
    734a:	4463      	add	r3, ip
    734c:	616b      	str	r3, [r5, #20]
    734e:	7823      	ldrb	r3, [r4, #0]
    7350:	2b00      	cmp	r3, #0
    7352:	d100      	bne.n	7356 <_vfiprintf_r+0x72>
    7354:	e0c3      	b.n	74de <_vfiprintf_r+0x1fa>
    7356:	2201      	movs	r2, #1
    7358:	2300      	movs	r3, #0
    735a:	4252      	negs	r2, r2
    735c:	606a      	str	r2, [r5, #4]
    735e:	a902      	add	r1, sp, #8
    7360:	3254      	adds	r2, #84	; 0x54
    7362:	1852      	adds	r2, r2, r1
    7364:	3401      	adds	r4, #1
    7366:	602b      	str	r3, [r5, #0]
    7368:	60eb      	str	r3, [r5, #12]
    736a:	60ab      	str	r3, [r5, #8]
    736c:	7013      	strb	r3, [r2, #0]
    736e:	65ab      	str	r3, [r5, #88]	; 0x58
    7370:	7821      	ldrb	r1, [r4, #0]
    7372:	2205      	movs	r2, #5
    7374:	4862      	ldr	r0, [pc, #392]	; (7500 <_vfiprintf_r+0x21c>)
    7376:	f001 f8e5 	bl	8544 <memchr>
    737a:	1c63      	adds	r3, r4, #1
    737c:	469c      	mov	ip, r3
    737e:	2800      	cmp	r0, #0
    7380:	d135      	bne.n	73ee <_vfiprintf_r+0x10a>
    7382:	6829      	ldr	r1, [r5, #0]
    7384:	06cb      	lsls	r3, r1, #27
    7386:	d504      	bpl.n	7392 <_vfiprintf_r+0xae>
    7388:	2353      	movs	r3, #83	; 0x53
    738a:	aa02      	add	r2, sp, #8
    738c:	3020      	adds	r0, #32
    738e:	189b      	adds	r3, r3, r2
    7390:	7018      	strb	r0, [r3, #0]
    7392:	070b      	lsls	r3, r1, #28
    7394:	d504      	bpl.n	73a0 <_vfiprintf_r+0xbc>
    7396:	2353      	movs	r3, #83	; 0x53
    7398:	202b      	movs	r0, #43	; 0x2b
    739a:	aa02      	add	r2, sp, #8
    739c:	189b      	adds	r3, r3, r2
    739e:	7018      	strb	r0, [r3, #0]
    73a0:	7823      	ldrb	r3, [r4, #0]
    73a2:	2b2a      	cmp	r3, #42	; 0x2a
    73a4:	d02c      	beq.n	7400 <_vfiprintf_r+0x11c>
    73a6:	2000      	movs	r0, #0
    73a8:	210a      	movs	r1, #10
    73aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    73ac:	7822      	ldrb	r2, [r4, #0]
    73ae:	3a30      	subs	r2, #48	; 0x30
    73b0:	2a09      	cmp	r2, #9
    73b2:	d800      	bhi.n	73b6 <_vfiprintf_r+0xd2>
    73b4:	e06b      	b.n	748e <_vfiprintf_r+0x1aa>
    73b6:	2800      	cmp	r0, #0
    73b8:	d02a      	beq.n	7410 <_vfiprintf_r+0x12c>
    73ba:	9309      	str	r3, [sp, #36]	; 0x24
    73bc:	e028      	b.n	7410 <_vfiprintf_r+0x12c>
    73be:	4b51      	ldr	r3, [pc, #324]	; (7504 <_vfiprintf_r+0x220>)
    73c0:	429f      	cmp	r7, r3
    73c2:	d101      	bne.n	73c8 <_vfiprintf_r+0xe4>
    73c4:	68b7      	ldr	r7, [r6, #8]
    73c6:	e79e      	b.n	7306 <_vfiprintf_r+0x22>
    73c8:	4b4f      	ldr	r3, [pc, #316]	; (7508 <_vfiprintf_r+0x224>)
    73ca:	429f      	cmp	r7, r3
    73cc:	d19b      	bne.n	7306 <_vfiprintf_r+0x22>
    73ce:	68f7      	ldr	r7, [r6, #12]
    73d0:	e799      	b.n	7306 <_vfiprintf_r+0x22>
    73d2:	0039      	movs	r1, r7
    73d4:	0030      	movs	r0, r6
    73d6:	f7ff fcbb 	bl	6d50 <__swsetup_r>
    73da:	2800      	cmp	r0, #0
    73dc:	d099      	beq.n	7312 <_vfiprintf_r+0x2e>
    73de:	2001      	movs	r0, #1
    73e0:	4240      	negs	r0, r0
    73e2:	b01f      	add	sp, #124	; 0x7c
    73e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73e6:	2b25      	cmp	r3, #37	; 0x25
    73e8:	d09f      	beq.n	732a <_vfiprintf_r+0x46>
    73ea:	3401      	adds	r4, #1
    73ec:	e79a      	b.n	7324 <_vfiprintf_r+0x40>
    73ee:	4b44      	ldr	r3, [pc, #272]	; (7500 <_vfiprintf_r+0x21c>)
    73f0:	6829      	ldr	r1, [r5, #0]
    73f2:	1ac0      	subs	r0, r0, r3
    73f4:	2301      	movs	r3, #1
    73f6:	4083      	lsls	r3, r0
    73f8:	430b      	orrs	r3, r1
    73fa:	602b      	str	r3, [r5, #0]
    73fc:	4664      	mov	r4, ip
    73fe:	e7b7      	b.n	7370 <_vfiprintf_r+0x8c>
    7400:	9b05      	ldr	r3, [sp, #20]
    7402:	1d18      	adds	r0, r3, #4
    7404:	681b      	ldr	r3, [r3, #0]
    7406:	9005      	str	r0, [sp, #20]
    7408:	2b00      	cmp	r3, #0
    740a:	db3a      	blt.n	7482 <_vfiprintf_r+0x19e>
    740c:	9309      	str	r3, [sp, #36]	; 0x24
    740e:	4664      	mov	r4, ip
    7410:	7823      	ldrb	r3, [r4, #0]
    7412:	2b2e      	cmp	r3, #46	; 0x2e
    7414:	d10b      	bne.n	742e <_vfiprintf_r+0x14a>
    7416:	7863      	ldrb	r3, [r4, #1]
    7418:	1c62      	adds	r2, r4, #1
    741a:	2b2a      	cmp	r3, #42	; 0x2a
    741c:	d13f      	bne.n	749e <_vfiprintf_r+0x1ba>
    741e:	9b05      	ldr	r3, [sp, #20]
    7420:	3402      	adds	r4, #2
    7422:	1d1a      	adds	r2, r3, #4
    7424:	681b      	ldr	r3, [r3, #0]
    7426:	9205      	str	r2, [sp, #20]
    7428:	2b00      	cmp	r3, #0
    742a:	db35      	blt.n	7498 <_vfiprintf_r+0x1b4>
    742c:	9307      	str	r3, [sp, #28]
    742e:	7821      	ldrb	r1, [r4, #0]
    7430:	2203      	movs	r2, #3
    7432:	4836      	ldr	r0, [pc, #216]	; (750c <_vfiprintf_r+0x228>)
    7434:	f001 f886 	bl	8544 <memchr>
    7438:	2800      	cmp	r0, #0
    743a:	d007      	beq.n	744c <_vfiprintf_r+0x168>
    743c:	4b33      	ldr	r3, [pc, #204]	; (750c <_vfiprintf_r+0x228>)
    743e:	682a      	ldr	r2, [r5, #0]
    7440:	1ac0      	subs	r0, r0, r3
    7442:	2340      	movs	r3, #64	; 0x40
    7444:	4083      	lsls	r3, r0
    7446:	4313      	orrs	r3, r2
    7448:	602b      	str	r3, [r5, #0]
    744a:	3401      	adds	r4, #1
    744c:	7821      	ldrb	r1, [r4, #0]
    744e:	1c63      	adds	r3, r4, #1
    7450:	2206      	movs	r2, #6
    7452:	482f      	ldr	r0, [pc, #188]	; (7510 <_vfiprintf_r+0x22c>)
    7454:	9302      	str	r3, [sp, #8]
    7456:	7629      	strb	r1, [r5, #24]
    7458:	f001 f874 	bl	8544 <memchr>
    745c:	2800      	cmp	r0, #0
    745e:	d044      	beq.n	74ea <_vfiprintf_r+0x206>
    7460:	4b2c      	ldr	r3, [pc, #176]	; (7514 <_vfiprintf_r+0x230>)
    7462:	2b00      	cmp	r3, #0
    7464:	d12f      	bne.n	74c6 <_vfiprintf_r+0x1e2>
    7466:	6829      	ldr	r1, [r5, #0]
    7468:	9b05      	ldr	r3, [sp, #20]
    746a:	2207      	movs	r2, #7
    746c:	05c9      	lsls	r1, r1, #23
    746e:	d528      	bpl.n	74c2 <_vfiprintf_r+0x1de>
    7470:	189b      	adds	r3, r3, r2
    7472:	4393      	bics	r3, r2
    7474:	3308      	adds	r3, #8
    7476:	9305      	str	r3, [sp, #20]
    7478:	696b      	ldr	r3, [r5, #20]
    747a:	9a03      	ldr	r2, [sp, #12]
    747c:	189b      	adds	r3, r3, r2
    747e:	616b      	str	r3, [r5, #20]
    7480:	e74f      	b.n	7322 <_vfiprintf_r+0x3e>
    7482:	425b      	negs	r3, r3
    7484:	60eb      	str	r3, [r5, #12]
    7486:	2302      	movs	r3, #2
    7488:	430b      	orrs	r3, r1
    748a:	602b      	str	r3, [r5, #0]
    748c:	e7bf      	b.n	740e <_vfiprintf_r+0x12a>
    748e:	434b      	muls	r3, r1
    7490:	3401      	adds	r4, #1
    7492:	189b      	adds	r3, r3, r2
    7494:	2001      	movs	r0, #1
    7496:	e789      	b.n	73ac <_vfiprintf_r+0xc8>
    7498:	2301      	movs	r3, #1
    749a:	425b      	negs	r3, r3
    749c:	e7c6      	b.n	742c <_vfiprintf_r+0x148>
    749e:	2300      	movs	r3, #0
    74a0:	0014      	movs	r4, r2
    74a2:	200a      	movs	r0, #10
    74a4:	001a      	movs	r2, r3
    74a6:	606b      	str	r3, [r5, #4]
    74a8:	7821      	ldrb	r1, [r4, #0]
    74aa:	3930      	subs	r1, #48	; 0x30
    74ac:	2909      	cmp	r1, #9
    74ae:	d903      	bls.n	74b8 <_vfiprintf_r+0x1d4>
    74b0:	2b00      	cmp	r3, #0
    74b2:	d0bc      	beq.n	742e <_vfiprintf_r+0x14a>
    74b4:	9207      	str	r2, [sp, #28]
    74b6:	e7ba      	b.n	742e <_vfiprintf_r+0x14a>
    74b8:	4342      	muls	r2, r0
    74ba:	3401      	adds	r4, #1
    74bc:	1852      	adds	r2, r2, r1
    74be:	2301      	movs	r3, #1
    74c0:	e7f2      	b.n	74a8 <_vfiprintf_r+0x1c4>
    74c2:	3307      	adds	r3, #7
    74c4:	e7d5      	b.n	7472 <_vfiprintf_r+0x18e>
    74c6:	ab05      	add	r3, sp, #20
    74c8:	9300      	str	r3, [sp, #0]
    74ca:	003a      	movs	r2, r7
    74cc:	4b12      	ldr	r3, [pc, #72]	; (7518 <_vfiprintf_r+0x234>)
    74ce:	0029      	movs	r1, r5
    74d0:	0030      	movs	r0, r6
    74d2:	e000      	b.n	74d6 <_vfiprintf_r+0x1f2>
    74d4:	bf00      	nop
    74d6:	9003      	str	r0, [sp, #12]
    74d8:	9b03      	ldr	r3, [sp, #12]
    74da:	3301      	adds	r3, #1
    74dc:	d1cc      	bne.n	7478 <_vfiprintf_r+0x194>
    74de:	89bb      	ldrh	r3, [r7, #12]
    74e0:	065b      	lsls	r3, r3, #25
    74e2:	d500      	bpl.n	74e6 <_vfiprintf_r+0x202>
    74e4:	e77b      	b.n	73de <_vfiprintf_r+0xfa>
    74e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    74e8:	e77b      	b.n	73e2 <_vfiprintf_r+0xfe>
    74ea:	ab05      	add	r3, sp, #20
    74ec:	9300      	str	r3, [sp, #0]
    74ee:	003a      	movs	r2, r7
    74f0:	4b09      	ldr	r3, [pc, #36]	; (7518 <_vfiprintf_r+0x234>)
    74f2:	0029      	movs	r1, r5
    74f4:	0030      	movs	r0, r6
    74f6:	f000 f87f 	bl	75f8 <_printf_i>
    74fa:	e7ec      	b.n	74d6 <_vfiprintf_r+0x1f2>
    74fc:	0000b024 	.word	0x0000b024
    7500:	0000b064 	.word	0x0000b064
    7504:	0000b044 	.word	0x0000b044
    7508:	0000b004 	.word	0x0000b004
    750c:	0000b06a 	.word	0x0000b06a
    7510:	0000b06e 	.word	0x0000b06e
    7514:	00000000 	.word	0x00000000
    7518:	000072bf 	.word	0x000072bf

0000751c <_printf_common>:
    751c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    751e:	0015      	movs	r5, r2
    7520:	9301      	str	r3, [sp, #4]
    7522:	688a      	ldr	r2, [r1, #8]
    7524:	690b      	ldr	r3, [r1, #16]
    7526:	9000      	str	r0, [sp, #0]
    7528:	000c      	movs	r4, r1
    752a:	4293      	cmp	r3, r2
    752c:	da00      	bge.n	7530 <_printf_common+0x14>
    752e:	0013      	movs	r3, r2
    7530:	0022      	movs	r2, r4
    7532:	602b      	str	r3, [r5, #0]
    7534:	3243      	adds	r2, #67	; 0x43
    7536:	7812      	ldrb	r2, [r2, #0]
    7538:	2a00      	cmp	r2, #0
    753a:	d001      	beq.n	7540 <_printf_common+0x24>
    753c:	3301      	adds	r3, #1
    753e:	602b      	str	r3, [r5, #0]
    7540:	6823      	ldr	r3, [r4, #0]
    7542:	069b      	lsls	r3, r3, #26
    7544:	d502      	bpl.n	754c <_printf_common+0x30>
    7546:	682b      	ldr	r3, [r5, #0]
    7548:	3302      	adds	r3, #2
    754a:	602b      	str	r3, [r5, #0]
    754c:	2706      	movs	r7, #6
    754e:	6823      	ldr	r3, [r4, #0]
    7550:	401f      	ands	r7, r3
    7552:	d027      	beq.n	75a4 <_printf_common+0x88>
    7554:	0023      	movs	r3, r4
    7556:	3343      	adds	r3, #67	; 0x43
    7558:	781b      	ldrb	r3, [r3, #0]
    755a:	1e5a      	subs	r2, r3, #1
    755c:	4193      	sbcs	r3, r2
    755e:	6822      	ldr	r2, [r4, #0]
    7560:	0692      	lsls	r2, r2, #26
    7562:	d430      	bmi.n	75c6 <_printf_common+0xaa>
    7564:	0022      	movs	r2, r4
    7566:	9901      	ldr	r1, [sp, #4]
    7568:	3243      	adds	r2, #67	; 0x43
    756a:	9800      	ldr	r0, [sp, #0]
    756c:	9e08      	ldr	r6, [sp, #32]
    756e:	47b0      	blx	r6
    7570:	1c43      	adds	r3, r0, #1
    7572:	d025      	beq.n	75c0 <_printf_common+0xa4>
    7574:	2306      	movs	r3, #6
    7576:	6820      	ldr	r0, [r4, #0]
    7578:	682a      	ldr	r2, [r5, #0]
    757a:	68e1      	ldr	r1, [r4, #12]
    757c:	4003      	ands	r3, r0
    757e:	2500      	movs	r5, #0
    7580:	2b04      	cmp	r3, #4
    7582:	d103      	bne.n	758c <_printf_common+0x70>
    7584:	1a8d      	subs	r5, r1, r2
    7586:	43eb      	mvns	r3, r5
    7588:	17db      	asrs	r3, r3, #31
    758a:	401d      	ands	r5, r3
    758c:	68a3      	ldr	r3, [r4, #8]
    758e:	6922      	ldr	r2, [r4, #16]
    7590:	4293      	cmp	r3, r2
    7592:	dd01      	ble.n	7598 <_printf_common+0x7c>
    7594:	1a9b      	subs	r3, r3, r2
    7596:	18ed      	adds	r5, r5, r3
    7598:	2700      	movs	r7, #0
    759a:	42bd      	cmp	r5, r7
    759c:	d120      	bne.n	75e0 <_printf_common+0xc4>
    759e:	2000      	movs	r0, #0
    75a0:	e010      	b.n	75c4 <_printf_common+0xa8>
    75a2:	3701      	adds	r7, #1
    75a4:	68e3      	ldr	r3, [r4, #12]
    75a6:	682a      	ldr	r2, [r5, #0]
    75a8:	1a9b      	subs	r3, r3, r2
    75aa:	429f      	cmp	r7, r3
    75ac:	dad2      	bge.n	7554 <_printf_common+0x38>
    75ae:	0022      	movs	r2, r4
    75b0:	2301      	movs	r3, #1
    75b2:	3219      	adds	r2, #25
    75b4:	9901      	ldr	r1, [sp, #4]
    75b6:	9800      	ldr	r0, [sp, #0]
    75b8:	9e08      	ldr	r6, [sp, #32]
    75ba:	47b0      	blx	r6
    75bc:	1c43      	adds	r3, r0, #1
    75be:	d1f0      	bne.n	75a2 <_printf_common+0x86>
    75c0:	2001      	movs	r0, #1
    75c2:	4240      	negs	r0, r0
    75c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    75c6:	2030      	movs	r0, #48	; 0x30
    75c8:	18e1      	adds	r1, r4, r3
    75ca:	3143      	adds	r1, #67	; 0x43
    75cc:	7008      	strb	r0, [r1, #0]
    75ce:	0021      	movs	r1, r4
    75d0:	1c5a      	adds	r2, r3, #1
    75d2:	3145      	adds	r1, #69	; 0x45
    75d4:	7809      	ldrb	r1, [r1, #0]
    75d6:	18a2      	adds	r2, r4, r2
    75d8:	3243      	adds	r2, #67	; 0x43
    75da:	3302      	adds	r3, #2
    75dc:	7011      	strb	r1, [r2, #0]
    75de:	e7c1      	b.n	7564 <_printf_common+0x48>
    75e0:	0022      	movs	r2, r4
    75e2:	2301      	movs	r3, #1
    75e4:	321a      	adds	r2, #26
    75e6:	9901      	ldr	r1, [sp, #4]
    75e8:	9800      	ldr	r0, [sp, #0]
    75ea:	9e08      	ldr	r6, [sp, #32]
    75ec:	47b0      	blx	r6
    75ee:	1c43      	adds	r3, r0, #1
    75f0:	d0e6      	beq.n	75c0 <_printf_common+0xa4>
    75f2:	3701      	adds	r7, #1
    75f4:	e7d1      	b.n	759a <_printf_common+0x7e>
	...

000075f8 <_printf_i>:
    75f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    75fa:	b08b      	sub	sp, #44	; 0x2c
    75fc:	9206      	str	r2, [sp, #24]
    75fe:	000a      	movs	r2, r1
    7600:	3243      	adds	r2, #67	; 0x43
    7602:	9307      	str	r3, [sp, #28]
    7604:	9005      	str	r0, [sp, #20]
    7606:	9204      	str	r2, [sp, #16]
    7608:	7e0a      	ldrb	r2, [r1, #24]
    760a:	000c      	movs	r4, r1
    760c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    760e:	2a6e      	cmp	r2, #110	; 0x6e
    7610:	d100      	bne.n	7614 <_printf_i+0x1c>
    7612:	e08f      	b.n	7734 <_printf_i+0x13c>
    7614:	d817      	bhi.n	7646 <_printf_i+0x4e>
    7616:	2a63      	cmp	r2, #99	; 0x63
    7618:	d02c      	beq.n	7674 <_printf_i+0x7c>
    761a:	d808      	bhi.n	762e <_printf_i+0x36>
    761c:	2a00      	cmp	r2, #0
    761e:	d100      	bne.n	7622 <_printf_i+0x2a>
    7620:	e099      	b.n	7756 <_printf_i+0x15e>
    7622:	2a58      	cmp	r2, #88	; 0x58
    7624:	d054      	beq.n	76d0 <_printf_i+0xd8>
    7626:	0026      	movs	r6, r4
    7628:	3642      	adds	r6, #66	; 0x42
    762a:	7032      	strb	r2, [r6, #0]
    762c:	e029      	b.n	7682 <_printf_i+0x8a>
    762e:	2a64      	cmp	r2, #100	; 0x64
    7630:	d001      	beq.n	7636 <_printf_i+0x3e>
    7632:	2a69      	cmp	r2, #105	; 0x69
    7634:	d1f7      	bne.n	7626 <_printf_i+0x2e>
    7636:	6821      	ldr	r1, [r4, #0]
    7638:	681a      	ldr	r2, [r3, #0]
    763a:	0608      	lsls	r0, r1, #24
    763c:	d523      	bpl.n	7686 <_printf_i+0x8e>
    763e:	1d11      	adds	r1, r2, #4
    7640:	6019      	str	r1, [r3, #0]
    7642:	6815      	ldr	r5, [r2, #0]
    7644:	e025      	b.n	7692 <_printf_i+0x9a>
    7646:	2a73      	cmp	r2, #115	; 0x73
    7648:	d100      	bne.n	764c <_printf_i+0x54>
    764a:	e088      	b.n	775e <_printf_i+0x166>
    764c:	d808      	bhi.n	7660 <_printf_i+0x68>
    764e:	2a6f      	cmp	r2, #111	; 0x6f
    7650:	d029      	beq.n	76a6 <_printf_i+0xae>
    7652:	2a70      	cmp	r2, #112	; 0x70
    7654:	d1e7      	bne.n	7626 <_printf_i+0x2e>
    7656:	2220      	movs	r2, #32
    7658:	6809      	ldr	r1, [r1, #0]
    765a:	430a      	orrs	r2, r1
    765c:	6022      	str	r2, [r4, #0]
    765e:	e003      	b.n	7668 <_printf_i+0x70>
    7660:	2a75      	cmp	r2, #117	; 0x75
    7662:	d020      	beq.n	76a6 <_printf_i+0xae>
    7664:	2a78      	cmp	r2, #120	; 0x78
    7666:	d1de      	bne.n	7626 <_printf_i+0x2e>
    7668:	0022      	movs	r2, r4
    766a:	2178      	movs	r1, #120	; 0x78
    766c:	3245      	adds	r2, #69	; 0x45
    766e:	7011      	strb	r1, [r2, #0]
    7670:	4a6c      	ldr	r2, [pc, #432]	; (7824 <_printf_i+0x22c>)
    7672:	e030      	b.n	76d6 <_printf_i+0xde>
    7674:	000e      	movs	r6, r1
    7676:	681a      	ldr	r2, [r3, #0]
    7678:	3642      	adds	r6, #66	; 0x42
    767a:	1d11      	adds	r1, r2, #4
    767c:	6019      	str	r1, [r3, #0]
    767e:	6813      	ldr	r3, [r2, #0]
    7680:	7033      	strb	r3, [r6, #0]
    7682:	2301      	movs	r3, #1
    7684:	e079      	b.n	777a <_printf_i+0x182>
    7686:	0649      	lsls	r1, r1, #25
    7688:	d5d9      	bpl.n	763e <_printf_i+0x46>
    768a:	1d11      	adds	r1, r2, #4
    768c:	6019      	str	r1, [r3, #0]
    768e:	2300      	movs	r3, #0
    7690:	5ed5      	ldrsh	r5, [r2, r3]
    7692:	2d00      	cmp	r5, #0
    7694:	da03      	bge.n	769e <_printf_i+0xa6>
    7696:	232d      	movs	r3, #45	; 0x2d
    7698:	9a04      	ldr	r2, [sp, #16]
    769a:	426d      	negs	r5, r5
    769c:	7013      	strb	r3, [r2, #0]
    769e:	4b62      	ldr	r3, [pc, #392]	; (7828 <_printf_i+0x230>)
    76a0:	270a      	movs	r7, #10
    76a2:	9303      	str	r3, [sp, #12]
    76a4:	e02f      	b.n	7706 <_printf_i+0x10e>
    76a6:	6820      	ldr	r0, [r4, #0]
    76a8:	6819      	ldr	r1, [r3, #0]
    76aa:	0605      	lsls	r5, r0, #24
    76ac:	d503      	bpl.n	76b6 <_printf_i+0xbe>
    76ae:	1d08      	adds	r0, r1, #4
    76b0:	6018      	str	r0, [r3, #0]
    76b2:	680d      	ldr	r5, [r1, #0]
    76b4:	e005      	b.n	76c2 <_printf_i+0xca>
    76b6:	0640      	lsls	r0, r0, #25
    76b8:	d5f9      	bpl.n	76ae <_printf_i+0xb6>
    76ba:	680d      	ldr	r5, [r1, #0]
    76bc:	1d08      	adds	r0, r1, #4
    76be:	6018      	str	r0, [r3, #0]
    76c0:	b2ad      	uxth	r5, r5
    76c2:	4b59      	ldr	r3, [pc, #356]	; (7828 <_printf_i+0x230>)
    76c4:	2708      	movs	r7, #8
    76c6:	9303      	str	r3, [sp, #12]
    76c8:	2a6f      	cmp	r2, #111	; 0x6f
    76ca:	d018      	beq.n	76fe <_printf_i+0x106>
    76cc:	270a      	movs	r7, #10
    76ce:	e016      	b.n	76fe <_printf_i+0x106>
    76d0:	3145      	adds	r1, #69	; 0x45
    76d2:	700a      	strb	r2, [r1, #0]
    76d4:	4a54      	ldr	r2, [pc, #336]	; (7828 <_printf_i+0x230>)
    76d6:	9203      	str	r2, [sp, #12]
    76d8:	681a      	ldr	r2, [r3, #0]
    76da:	6821      	ldr	r1, [r4, #0]
    76dc:	1d10      	adds	r0, r2, #4
    76de:	6018      	str	r0, [r3, #0]
    76e0:	6815      	ldr	r5, [r2, #0]
    76e2:	0608      	lsls	r0, r1, #24
    76e4:	d522      	bpl.n	772c <_printf_i+0x134>
    76e6:	07cb      	lsls	r3, r1, #31
    76e8:	d502      	bpl.n	76f0 <_printf_i+0xf8>
    76ea:	2320      	movs	r3, #32
    76ec:	4319      	orrs	r1, r3
    76ee:	6021      	str	r1, [r4, #0]
    76f0:	2710      	movs	r7, #16
    76f2:	2d00      	cmp	r5, #0
    76f4:	d103      	bne.n	76fe <_printf_i+0x106>
    76f6:	2320      	movs	r3, #32
    76f8:	6822      	ldr	r2, [r4, #0]
    76fa:	439a      	bics	r2, r3
    76fc:	6022      	str	r2, [r4, #0]
    76fe:	0023      	movs	r3, r4
    7700:	2200      	movs	r2, #0
    7702:	3343      	adds	r3, #67	; 0x43
    7704:	701a      	strb	r2, [r3, #0]
    7706:	6863      	ldr	r3, [r4, #4]
    7708:	60a3      	str	r3, [r4, #8]
    770a:	2b00      	cmp	r3, #0
    770c:	db5c      	blt.n	77c8 <_printf_i+0x1d0>
    770e:	2204      	movs	r2, #4
    7710:	6821      	ldr	r1, [r4, #0]
    7712:	4391      	bics	r1, r2
    7714:	6021      	str	r1, [r4, #0]
    7716:	2d00      	cmp	r5, #0
    7718:	d158      	bne.n	77cc <_printf_i+0x1d4>
    771a:	9e04      	ldr	r6, [sp, #16]
    771c:	2b00      	cmp	r3, #0
    771e:	d064      	beq.n	77ea <_printf_i+0x1f2>
    7720:	0026      	movs	r6, r4
    7722:	9b03      	ldr	r3, [sp, #12]
    7724:	3642      	adds	r6, #66	; 0x42
    7726:	781b      	ldrb	r3, [r3, #0]
    7728:	7033      	strb	r3, [r6, #0]
    772a:	e05e      	b.n	77ea <_printf_i+0x1f2>
    772c:	0648      	lsls	r0, r1, #25
    772e:	d5da      	bpl.n	76e6 <_printf_i+0xee>
    7730:	b2ad      	uxth	r5, r5
    7732:	e7d8      	b.n	76e6 <_printf_i+0xee>
    7734:	6809      	ldr	r1, [r1, #0]
    7736:	681a      	ldr	r2, [r3, #0]
    7738:	0608      	lsls	r0, r1, #24
    773a:	d505      	bpl.n	7748 <_printf_i+0x150>
    773c:	1d11      	adds	r1, r2, #4
    773e:	6019      	str	r1, [r3, #0]
    7740:	6813      	ldr	r3, [r2, #0]
    7742:	6962      	ldr	r2, [r4, #20]
    7744:	601a      	str	r2, [r3, #0]
    7746:	e006      	b.n	7756 <_printf_i+0x15e>
    7748:	0649      	lsls	r1, r1, #25
    774a:	d5f7      	bpl.n	773c <_printf_i+0x144>
    774c:	1d11      	adds	r1, r2, #4
    774e:	6019      	str	r1, [r3, #0]
    7750:	6813      	ldr	r3, [r2, #0]
    7752:	8aa2      	ldrh	r2, [r4, #20]
    7754:	801a      	strh	r2, [r3, #0]
    7756:	2300      	movs	r3, #0
    7758:	9e04      	ldr	r6, [sp, #16]
    775a:	6123      	str	r3, [r4, #16]
    775c:	e054      	b.n	7808 <_printf_i+0x210>
    775e:	681a      	ldr	r2, [r3, #0]
    7760:	1d11      	adds	r1, r2, #4
    7762:	6019      	str	r1, [r3, #0]
    7764:	6816      	ldr	r6, [r2, #0]
    7766:	2100      	movs	r1, #0
    7768:	6862      	ldr	r2, [r4, #4]
    776a:	0030      	movs	r0, r6
    776c:	f000 feea 	bl	8544 <memchr>
    7770:	2800      	cmp	r0, #0
    7772:	d001      	beq.n	7778 <_printf_i+0x180>
    7774:	1b80      	subs	r0, r0, r6
    7776:	6060      	str	r0, [r4, #4]
    7778:	6863      	ldr	r3, [r4, #4]
    777a:	6123      	str	r3, [r4, #16]
    777c:	2300      	movs	r3, #0
    777e:	9a04      	ldr	r2, [sp, #16]
    7780:	7013      	strb	r3, [r2, #0]
    7782:	e041      	b.n	7808 <_printf_i+0x210>
    7784:	6923      	ldr	r3, [r4, #16]
    7786:	0032      	movs	r2, r6
    7788:	9906      	ldr	r1, [sp, #24]
    778a:	9805      	ldr	r0, [sp, #20]
    778c:	9d07      	ldr	r5, [sp, #28]
    778e:	47a8      	blx	r5
    7790:	1c43      	adds	r3, r0, #1
    7792:	d043      	beq.n	781c <_printf_i+0x224>
    7794:	6823      	ldr	r3, [r4, #0]
    7796:	2500      	movs	r5, #0
    7798:	079b      	lsls	r3, r3, #30
    779a:	d40f      	bmi.n	77bc <_printf_i+0x1c4>
    779c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    779e:	68e0      	ldr	r0, [r4, #12]
    77a0:	4298      	cmp	r0, r3
    77a2:	da3d      	bge.n	7820 <_printf_i+0x228>
    77a4:	0018      	movs	r0, r3
    77a6:	e03b      	b.n	7820 <_printf_i+0x228>
    77a8:	0022      	movs	r2, r4
    77aa:	2301      	movs	r3, #1
    77ac:	3219      	adds	r2, #25
    77ae:	9906      	ldr	r1, [sp, #24]
    77b0:	9805      	ldr	r0, [sp, #20]
    77b2:	9e07      	ldr	r6, [sp, #28]
    77b4:	47b0      	blx	r6
    77b6:	1c43      	adds	r3, r0, #1
    77b8:	d030      	beq.n	781c <_printf_i+0x224>
    77ba:	3501      	adds	r5, #1
    77bc:	68e3      	ldr	r3, [r4, #12]
    77be:	9a09      	ldr	r2, [sp, #36]	; 0x24
    77c0:	1a9b      	subs	r3, r3, r2
    77c2:	429d      	cmp	r5, r3
    77c4:	dbf0      	blt.n	77a8 <_printf_i+0x1b0>
    77c6:	e7e9      	b.n	779c <_printf_i+0x1a4>
    77c8:	2d00      	cmp	r5, #0
    77ca:	d0a9      	beq.n	7720 <_printf_i+0x128>
    77cc:	9e04      	ldr	r6, [sp, #16]
    77ce:	0028      	movs	r0, r5
    77d0:	0039      	movs	r1, r7
    77d2:	f7fe feed 	bl	65b0 <__aeabi_uidivmod>
    77d6:	9b03      	ldr	r3, [sp, #12]
    77d8:	3e01      	subs	r6, #1
    77da:	5c5b      	ldrb	r3, [r3, r1]
    77dc:	0028      	movs	r0, r5
    77de:	7033      	strb	r3, [r6, #0]
    77e0:	0039      	movs	r1, r7
    77e2:	f7fe fe5f 	bl	64a4 <__udivsi3>
    77e6:	1e05      	subs	r5, r0, #0
    77e8:	d1f1      	bne.n	77ce <_printf_i+0x1d6>
    77ea:	2f08      	cmp	r7, #8
    77ec:	d109      	bne.n	7802 <_printf_i+0x20a>
    77ee:	6823      	ldr	r3, [r4, #0]
    77f0:	07db      	lsls	r3, r3, #31
    77f2:	d506      	bpl.n	7802 <_printf_i+0x20a>
    77f4:	6863      	ldr	r3, [r4, #4]
    77f6:	6922      	ldr	r2, [r4, #16]
    77f8:	4293      	cmp	r3, r2
    77fa:	dc02      	bgt.n	7802 <_printf_i+0x20a>
    77fc:	2330      	movs	r3, #48	; 0x30
    77fe:	3e01      	subs	r6, #1
    7800:	7033      	strb	r3, [r6, #0]
    7802:	9b04      	ldr	r3, [sp, #16]
    7804:	1b9b      	subs	r3, r3, r6
    7806:	6123      	str	r3, [r4, #16]
    7808:	9b07      	ldr	r3, [sp, #28]
    780a:	aa09      	add	r2, sp, #36	; 0x24
    780c:	9300      	str	r3, [sp, #0]
    780e:	0021      	movs	r1, r4
    7810:	9b06      	ldr	r3, [sp, #24]
    7812:	9805      	ldr	r0, [sp, #20]
    7814:	f7ff fe82 	bl	751c <_printf_common>
    7818:	1c43      	adds	r3, r0, #1
    781a:	d1b3      	bne.n	7784 <_printf_i+0x18c>
    781c:	2001      	movs	r0, #1
    781e:	4240      	negs	r0, r0
    7820:	b00b      	add	sp, #44	; 0x2c
    7822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7824:	0000b086 	.word	0x0000b086
    7828:	0000b075 	.word	0x0000b075

0000782c <__svfiscanf_r>:
    782c:	b5f0      	push	{r4, r5, r6, r7, lr}
    782e:	4cbd      	ldr	r4, [pc, #756]	; (7b24 <__svfiscanf_r+0x2f8>)
    7830:	2586      	movs	r5, #134	; 0x86
    7832:	44a5      	add	sp, r4
    7834:	9303      	str	r3, [sp, #12]
    7836:	2300      	movs	r3, #0
    7838:	9348      	str	r3, [sp, #288]	; 0x120
    783a:	9349      	str	r3, [sp, #292]	; 0x124
    783c:	ab05      	add	r3, sp, #20
    783e:	934a      	str	r3, [sp, #296]	; 0x128
    7840:	23be      	movs	r3, #190	; 0xbe
    7842:	006d      	lsls	r5, r5, #1
    7844:	9000      	str	r0, [sp, #0]
    7846:	000c      	movs	r4, r1
    7848:	a802      	add	r0, sp, #8
    784a:	49b7      	ldr	r1, [pc, #732]	; (7b28 <__svfiscanf_r+0x2fc>)
    784c:	005b      	lsls	r3, r3, #1
    784e:	1940      	adds	r0, r0, r5
    7850:	27c0      	movs	r7, #192	; 0xc0
    7852:	50c1      	str	r1, [r0, r3]
    7854:	ab02      	add	r3, sp, #8
    7856:	195b      	adds	r3, r3, r5
    7858:	0015      	movs	r5, r2
    785a:	49b4      	ldr	r1, [pc, #720]	; (7b2c <__svfiscanf_r+0x300>)
    785c:	007f      	lsls	r7, r7, #1
    785e:	51d9      	str	r1, [r3, r7]
    7860:	782b      	ldrb	r3, [r5, #0]
    7862:	2b00      	cmp	r3, #0
    7864:	d100      	bne.n	7868 <__svfiscanf_r+0x3c>
    7866:	e15b      	b.n	7b20 <__svfiscanf_r+0x2f4>
    7868:	f000 fe38 	bl	84dc <__locale_ctype_ptr>
    786c:	2208      	movs	r2, #8
    786e:	782b      	ldrb	r3, [r5, #0]
    7870:	18c0      	adds	r0, r0, r3
    7872:	9301      	str	r3, [sp, #4]
    7874:	7843      	ldrb	r3, [r0, #1]
    7876:	4013      	ands	r3, r2
    7878:	d141      	bne.n	78fe <__svfiscanf_r+0xd2>
    787a:	9a01      	ldr	r2, [sp, #4]
    787c:	1c6e      	adds	r6, r5, #1
    787e:	2a25      	cmp	r2, #37	; 0x25
    7880:	d000      	beq.n	7884 <__svfiscanf_r+0x58>
    7882:	e0a8      	b.n	79d6 <__svfiscanf_r+0x1aa>
    7884:	9347      	str	r3, [sp, #284]	; 0x11c
    7886:	9345      	str	r3, [sp, #276]	; 0x114
    7888:	786b      	ldrb	r3, [r5, #1]
    788a:	2b2a      	cmp	r3, #42	; 0x2a
    788c:	d102      	bne.n	7894 <__svfiscanf_r+0x68>
    788e:	3b1a      	subs	r3, #26
    7890:	9345      	str	r3, [sp, #276]	; 0x114
    7892:	1cae      	adds	r6, r5, #2
    7894:	0035      	movs	r5, r6
    7896:	220a      	movs	r2, #10
    7898:	7829      	ldrb	r1, [r5, #0]
    789a:	000b      	movs	r3, r1
    789c:	3b30      	subs	r3, #48	; 0x30
    789e:	2b09      	cmp	r3, #9
    78a0:	d948      	bls.n	7934 <__svfiscanf_r+0x108>
    78a2:	4ea3      	ldr	r6, [pc, #652]	; (7b30 <__svfiscanf_r+0x304>)
    78a4:	2203      	movs	r2, #3
    78a6:	0030      	movs	r0, r6
    78a8:	f000 fe4c 	bl	8544 <memchr>
    78ac:	2800      	cmp	r0, #0
    78ae:	d007      	beq.n	78c0 <__svfiscanf_r+0x94>
    78b0:	2301      	movs	r3, #1
    78b2:	1b80      	subs	r0, r0, r6
    78b4:	4083      	lsls	r3, r0
    78b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
    78b8:	3501      	adds	r5, #1
    78ba:	4313      	orrs	r3, r2
    78bc:	9202      	str	r2, [sp, #8]
    78be:	9345      	str	r3, [sp, #276]	; 0x114
    78c0:	782b      	ldrb	r3, [r5, #0]
    78c2:	1c6e      	adds	r6, r5, #1
    78c4:	2b67      	cmp	r3, #103	; 0x67
    78c6:	d858      	bhi.n	797a <__svfiscanf_r+0x14e>
    78c8:	2b65      	cmp	r3, #101	; 0x65
    78ca:	d300      	bcc.n	78ce <__svfiscanf_r+0xa2>
    78cc:	e0dd      	b.n	7a8a <__svfiscanf_r+0x25e>
    78ce:	2b47      	cmp	r3, #71	; 0x47
    78d0:	d838      	bhi.n	7944 <__svfiscanf_r+0x118>
    78d2:	2b45      	cmp	r3, #69	; 0x45
    78d4:	d300      	bcc.n	78d8 <__svfiscanf_r+0xac>
    78d6:	e0d8      	b.n	7a8a <__svfiscanf_r+0x25e>
    78d8:	2b00      	cmp	r3, #0
    78da:	d100      	bne.n	78de <__svfiscanf_r+0xb2>
    78dc:	e11d      	b.n	7b1a <__svfiscanf_r+0x2ee>
    78de:	2b25      	cmp	r3, #37	; 0x25
    78e0:	d079      	beq.n	79d6 <__svfiscanf_r+0x1aa>
    78e2:	2303      	movs	r3, #3
    78e4:	934b      	str	r3, [sp, #300]	; 0x12c
    78e6:	3307      	adds	r3, #7
    78e8:	9346      	str	r3, [sp, #280]	; 0x118
    78ea:	e053      	b.n	7994 <__svfiscanf_r+0x168>
    78ec:	9a49      	ldr	r2, [sp, #292]	; 0x124
    78ee:	3301      	adds	r3, #1
    78f0:	9201      	str	r2, [sp, #4]
    78f2:	3201      	adds	r2, #1
    78f4:	9249      	str	r2, [sp, #292]	; 0x124
    78f6:	6862      	ldr	r2, [r4, #4]
    78f8:	6023      	str	r3, [r4, #0]
    78fa:	3a01      	subs	r2, #1
    78fc:	6062      	str	r2, [r4, #4]
    78fe:	6863      	ldr	r3, [r4, #4]
    7900:	2b00      	cmp	r3, #0
    7902:	dd0b      	ble.n	791c <__svfiscanf_r+0xf0>
    7904:	f000 fdea 	bl	84dc <__locale_ctype_ptr>
    7908:	2108      	movs	r1, #8
    790a:	6823      	ldr	r3, [r4, #0]
    790c:	781a      	ldrb	r2, [r3, #0]
    790e:	1880      	adds	r0, r0, r2
    7910:	7842      	ldrb	r2, [r0, #1]
    7912:	420a      	tst	r2, r1
    7914:	d1ea      	bne.n	78ec <__svfiscanf_r+0xc0>
    7916:	1c6e      	adds	r6, r5, #1
    7918:	0035      	movs	r5, r6
    791a:	e7a1      	b.n	7860 <__svfiscanf_r+0x34>
    791c:	2286      	movs	r2, #134	; 0x86
    791e:	ab02      	add	r3, sp, #8
    7920:	0052      	lsls	r2, r2, #1
    7922:	189b      	adds	r3, r3, r2
    7924:	59db      	ldr	r3, [r3, r7]
    7926:	0021      	movs	r1, r4
    7928:	9800      	ldr	r0, [sp, #0]
    792a:	9301      	str	r3, [sp, #4]
    792c:	4798      	blx	r3
    792e:	2800      	cmp	r0, #0
    7930:	d0e8      	beq.n	7904 <__svfiscanf_r+0xd8>
    7932:	e7f0      	b.n	7916 <__svfiscanf_r+0xea>
    7934:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    7936:	3501      	adds	r5, #1
    7938:	9302      	str	r3, [sp, #8]
    793a:	4353      	muls	r3, r2
    793c:	3b30      	subs	r3, #48	; 0x30
    793e:	1859      	adds	r1, r3, r1
    7940:	9147      	str	r1, [sp, #284]	; 0x11c
    7942:	e7a9      	b.n	7898 <__svfiscanf_r+0x6c>
    7944:	2b5b      	cmp	r3, #91	; 0x5b
    7946:	d100      	bne.n	794a <__svfiscanf_r+0x11e>
    7948:	e077      	b.n	7a3a <__svfiscanf_r+0x20e>
    794a:	d80f      	bhi.n	796c <__svfiscanf_r+0x140>
    794c:	2b58      	cmp	r3, #88	; 0x58
    794e:	d1c8      	bne.n	78e2 <__svfiscanf_r+0xb6>
    7950:	9a45      	ldr	r2, [sp, #276]	; 0x114
    7952:	9201      	str	r2, [sp, #4]
    7954:	2280      	movs	r2, #128	; 0x80
    7956:	9901      	ldr	r1, [sp, #4]
    7958:	0092      	lsls	r2, r2, #2
    795a:	430a      	orrs	r2, r1
    795c:	9245      	str	r2, [sp, #276]	; 0x114
    795e:	2210      	movs	r2, #16
    7960:	9246      	str	r2, [sp, #280]	; 0x118
    7962:	2203      	movs	r2, #3
    7964:	2b6e      	cmp	r3, #110	; 0x6e
    7966:	dd14      	ble.n	7992 <__svfiscanf_r+0x166>
    7968:	3201      	adds	r2, #1
    796a:	e012      	b.n	7992 <__svfiscanf_r+0x166>
    796c:	2b63      	cmp	r3, #99	; 0x63
    796e:	d100      	bne.n	7972 <__svfiscanf_r+0x146>
    7970:	e071      	b.n	7a56 <__svfiscanf_r+0x22a>
    7972:	2b64      	cmp	r3, #100	; 0x64
    7974:	d1b5      	bne.n	78e2 <__svfiscanf_r+0xb6>
    7976:	220a      	movs	r2, #10
    7978:	e7f2      	b.n	7960 <__svfiscanf_r+0x134>
    797a:	2b70      	cmp	r3, #112	; 0x70
    797c:	d052      	beq.n	7a24 <__svfiscanf_r+0x1f8>
    797e:	d822      	bhi.n	79c6 <__svfiscanf_r+0x19a>
    7980:	2b6e      	cmp	r3, #110	; 0x6e
    7982:	d100      	bne.n	7986 <__svfiscanf_r+0x15a>
    7984:	e06f      	b.n	7a66 <__svfiscanf_r+0x23a>
    7986:	d854      	bhi.n	7a32 <__svfiscanf_r+0x206>
    7988:	2b69      	cmp	r3, #105	; 0x69
    798a:	d1aa      	bne.n	78e2 <__svfiscanf_r+0xb6>
    798c:	2300      	movs	r3, #0
    798e:	2203      	movs	r2, #3
    7990:	9346      	str	r3, [sp, #280]	; 0x118
    7992:	924b      	str	r2, [sp, #300]	; 0x12c
    7994:	6863      	ldr	r3, [r4, #4]
    7996:	2b00      	cmp	r3, #0
    7998:	dc00      	bgt.n	799c <__svfiscanf_r+0x170>
    799a:	e078      	b.n	7a8e <__svfiscanf_r+0x262>
    799c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    799e:	9301      	str	r3, [sp, #4]
    79a0:	065b      	lsls	r3, r3, #25
    79a2:	d400      	bmi.n	79a6 <__svfiscanf_r+0x17a>
    79a4:	e08b      	b.n	7abe <__svfiscanf_r+0x292>
    79a6:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    79a8:	2b02      	cmp	r3, #2
    79aa:	dd00      	ble.n	79ae <__svfiscanf_r+0x182>
    79ac:	e09d      	b.n	7aea <__svfiscanf_r+0x2be>
    79ae:	ab03      	add	r3, sp, #12
    79b0:	0022      	movs	r2, r4
    79b2:	a945      	add	r1, sp, #276	; 0x114
    79b4:	9800      	ldr	r0, [sp, #0]
    79b6:	f000 f8e7 	bl	7b88 <_scanf_chars>
    79ba:	2801      	cmp	r0, #1
    79bc:	d100      	bne.n	79c0 <__svfiscanf_r+0x194>
    79be:	e0af      	b.n	7b20 <__svfiscanf_r+0x2f4>
    79c0:	2802      	cmp	r0, #2
    79c2:	d1a9      	bne.n	7918 <__svfiscanf_r+0xec>
    79c4:	e025      	b.n	7a12 <__svfiscanf_r+0x1e6>
    79c6:	2b75      	cmp	r3, #117	; 0x75
    79c8:	d0d5      	beq.n	7976 <__svfiscanf_r+0x14a>
    79ca:	2b78      	cmp	r3, #120	; 0x78
    79cc:	d0c0      	beq.n	7950 <__svfiscanf_r+0x124>
    79ce:	2b73      	cmp	r3, #115	; 0x73
    79d0:	d187      	bne.n	78e2 <__svfiscanf_r+0xb6>
    79d2:	2302      	movs	r3, #2
    79d4:	e03d      	b.n	7a52 <__svfiscanf_r+0x226>
    79d6:	6863      	ldr	r3, [r4, #4]
    79d8:	2b00      	cmp	r3, #0
    79da:	dd0f      	ble.n	79fc <__svfiscanf_r+0x1d0>
    79dc:	6823      	ldr	r3, [r4, #0]
    79de:	9901      	ldr	r1, [sp, #4]
    79e0:	781a      	ldrb	r2, [r3, #0]
    79e2:	4291      	cmp	r1, r2
    79e4:	d000      	beq.n	79e8 <__svfiscanf_r+0x1bc>
    79e6:	e09b      	b.n	7b20 <__svfiscanf_r+0x2f4>
    79e8:	3301      	adds	r3, #1
    79ea:	6862      	ldr	r2, [r4, #4]
    79ec:	6023      	str	r3, [r4, #0]
    79ee:	9b49      	ldr	r3, [sp, #292]	; 0x124
    79f0:	3a01      	subs	r2, #1
    79f2:	9301      	str	r3, [sp, #4]
    79f4:	3301      	adds	r3, #1
    79f6:	6062      	str	r2, [r4, #4]
    79f8:	9349      	str	r3, [sp, #292]	; 0x124
    79fa:	e78d      	b.n	7918 <__svfiscanf_r+0xec>
    79fc:	2286      	movs	r2, #134	; 0x86
    79fe:	ab02      	add	r3, sp, #8
    7a00:	0052      	lsls	r2, r2, #1
    7a02:	189b      	adds	r3, r3, r2
    7a04:	59db      	ldr	r3, [r3, r7]
    7a06:	0021      	movs	r1, r4
    7a08:	9800      	ldr	r0, [sp, #0]
    7a0a:	9302      	str	r3, [sp, #8]
    7a0c:	4798      	blx	r3
    7a0e:	2800      	cmp	r0, #0
    7a10:	d0e4      	beq.n	79dc <__svfiscanf_r+0x1b0>
    7a12:	9848      	ldr	r0, [sp, #288]	; 0x120
    7a14:	2800      	cmp	r0, #0
    7a16:	d000      	beq.n	7a1a <__svfiscanf_r+0x1ee>
    7a18:	e07b      	b.n	7b12 <__svfiscanf_r+0x2e6>
    7a1a:	3801      	subs	r0, #1
    7a1c:	23a7      	movs	r3, #167	; 0xa7
    7a1e:	009b      	lsls	r3, r3, #2
    7a20:	449d      	add	sp, r3
    7a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a24:	9a45      	ldr	r2, [sp, #276]	; 0x114
    7a26:	9201      	str	r2, [sp, #4]
    7a28:	2220      	movs	r2, #32
    7a2a:	9901      	ldr	r1, [sp, #4]
    7a2c:	430a      	orrs	r2, r1
    7a2e:	9245      	str	r2, [sp, #276]	; 0x114
    7a30:	e78e      	b.n	7950 <__svfiscanf_r+0x124>
    7a32:	2308      	movs	r3, #8
    7a34:	2204      	movs	r2, #4
    7a36:	9346      	str	r3, [sp, #280]	; 0x118
    7a38:	e7ab      	b.n	7992 <__svfiscanf_r+0x166>
    7a3a:	0031      	movs	r1, r6
    7a3c:	a805      	add	r0, sp, #20
    7a3e:	f000 faa3 	bl	7f88 <__sccl>
    7a42:	9b45      	ldr	r3, [sp, #276]	; 0x114
    7a44:	0006      	movs	r6, r0
    7a46:	9301      	str	r3, [sp, #4]
    7a48:	2340      	movs	r3, #64	; 0x40
    7a4a:	9a01      	ldr	r2, [sp, #4]
    7a4c:	4313      	orrs	r3, r2
    7a4e:	9345      	str	r3, [sp, #276]	; 0x114
    7a50:	2301      	movs	r3, #1
    7a52:	934b      	str	r3, [sp, #300]	; 0x12c
    7a54:	e79e      	b.n	7994 <__svfiscanf_r+0x168>
    7a56:	9b45      	ldr	r3, [sp, #276]	; 0x114
    7a58:	9301      	str	r3, [sp, #4]
    7a5a:	2340      	movs	r3, #64	; 0x40
    7a5c:	9a01      	ldr	r2, [sp, #4]
    7a5e:	4313      	orrs	r3, r2
    7a60:	9345      	str	r3, [sp, #276]	; 0x114
    7a62:	2300      	movs	r3, #0
    7a64:	e7f5      	b.n	7a52 <__svfiscanf_r+0x226>
    7a66:	9945      	ldr	r1, [sp, #276]	; 0x114
    7a68:	06cb      	lsls	r3, r1, #27
    7a6a:	d500      	bpl.n	7a6e <__svfiscanf_r+0x242>
    7a6c:	e754      	b.n	7918 <__svfiscanf_r+0xec>
    7a6e:	9b03      	ldr	r3, [sp, #12]
    7a70:	9a49      	ldr	r2, [sp, #292]	; 0x124
    7a72:	07c8      	lsls	r0, r1, #31
    7a74:	d504      	bpl.n	7a80 <__svfiscanf_r+0x254>
    7a76:	1d19      	adds	r1, r3, #4
    7a78:	9103      	str	r1, [sp, #12]
    7a7a:	681b      	ldr	r3, [r3, #0]
    7a7c:	801a      	strh	r2, [r3, #0]
    7a7e:	e74b      	b.n	7918 <__svfiscanf_r+0xec>
    7a80:	1d19      	adds	r1, r3, #4
    7a82:	9103      	str	r1, [sp, #12]
    7a84:	681b      	ldr	r3, [r3, #0]
    7a86:	601a      	str	r2, [r3, #0]
    7a88:	e746      	b.n	7918 <__svfiscanf_r+0xec>
    7a8a:	2305      	movs	r3, #5
    7a8c:	e7e1      	b.n	7a52 <__svfiscanf_r+0x226>
    7a8e:	2286      	movs	r2, #134	; 0x86
    7a90:	ab02      	add	r3, sp, #8
    7a92:	0052      	lsls	r2, r2, #1
    7a94:	189b      	adds	r3, r3, r2
    7a96:	59db      	ldr	r3, [r3, r7]
    7a98:	0021      	movs	r1, r4
    7a9a:	9800      	ldr	r0, [sp, #0]
    7a9c:	9301      	str	r3, [sp, #4]
    7a9e:	4798      	blx	r3
    7aa0:	2800      	cmp	r0, #0
    7aa2:	d100      	bne.n	7aa6 <__svfiscanf_r+0x27a>
    7aa4:	e77a      	b.n	799c <__svfiscanf_r+0x170>
    7aa6:	e7b4      	b.n	7a12 <__svfiscanf_r+0x1e6>
    7aa8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    7aaa:	9201      	str	r2, [sp, #4]
    7aac:	3201      	adds	r2, #1
    7aae:	9249      	str	r2, [sp, #292]	; 0x124
    7ab0:	6862      	ldr	r2, [r4, #4]
    7ab2:	3a01      	subs	r2, #1
    7ab4:	6062      	str	r2, [r4, #4]
    7ab6:	2a00      	cmp	r2, #0
    7ab8:	dd0b      	ble.n	7ad2 <__svfiscanf_r+0x2a6>
    7aba:	3301      	adds	r3, #1
    7abc:	6023      	str	r3, [r4, #0]
    7abe:	f000 fd0d 	bl	84dc <__locale_ctype_ptr>
    7ac2:	2108      	movs	r1, #8
    7ac4:	6823      	ldr	r3, [r4, #0]
    7ac6:	781a      	ldrb	r2, [r3, #0]
    7ac8:	1880      	adds	r0, r0, r2
    7aca:	7842      	ldrb	r2, [r0, #1]
    7acc:	420a      	tst	r2, r1
    7ace:	d1eb      	bne.n	7aa8 <__svfiscanf_r+0x27c>
    7ad0:	e769      	b.n	79a6 <__svfiscanf_r+0x17a>
    7ad2:	2286      	movs	r2, #134	; 0x86
    7ad4:	ab02      	add	r3, sp, #8
    7ad6:	0052      	lsls	r2, r2, #1
    7ad8:	189b      	adds	r3, r3, r2
    7ada:	59db      	ldr	r3, [r3, r7]
    7adc:	0021      	movs	r1, r4
    7ade:	9800      	ldr	r0, [sp, #0]
    7ae0:	9301      	str	r3, [sp, #4]
    7ae2:	4798      	blx	r3
    7ae4:	2800      	cmp	r0, #0
    7ae6:	d0ea      	beq.n	7abe <__svfiscanf_r+0x292>
    7ae8:	e793      	b.n	7a12 <__svfiscanf_r+0x1e6>
    7aea:	2b04      	cmp	r3, #4
    7aec:	dc06      	bgt.n	7afc <__svfiscanf_r+0x2d0>
    7aee:	ab03      	add	r3, sp, #12
    7af0:	0022      	movs	r2, r4
    7af2:	a945      	add	r1, sp, #276	; 0x114
    7af4:	9800      	ldr	r0, [sp, #0]
    7af6:	f000 f8ab 	bl	7c50 <_scanf_i>
    7afa:	e75e      	b.n	79ba <__svfiscanf_r+0x18e>
    7afc:	4b0d      	ldr	r3, [pc, #52]	; (7b34 <__svfiscanf_r+0x308>)
    7afe:	2b00      	cmp	r3, #0
    7b00:	d100      	bne.n	7b04 <__svfiscanf_r+0x2d8>
    7b02:	e709      	b.n	7918 <__svfiscanf_r+0xec>
    7b04:	ab03      	add	r3, sp, #12
    7b06:	0022      	movs	r2, r4
    7b08:	a945      	add	r1, sp, #276	; 0x114
    7b0a:	9800      	ldr	r0, [sp, #0]
    7b0c:	e000      	b.n	7b10 <__svfiscanf_r+0x2e4>
    7b0e:	bf00      	nop
    7b10:	e753      	b.n	79ba <__svfiscanf_r+0x18e>
    7b12:	89a3      	ldrh	r3, [r4, #12]
    7b14:	065b      	lsls	r3, r3, #25
    7b16:	d400      	bmi.n	7b1a <__svfiscanf_r+0x2ee>
    7b18:	e780      	b.n	7a1c <__svfiscanf_r+0x1f0>
    7b1a:	2001      	movs	r0, #1
    7b1c:	4240      	negs	r0, r0
    7b1e:	e77d      	b.n	7a1c <__svfiscanf_r+0x1f0>
    7b20:	9848      	ldr	r0, [sp, #288]	; 0x120
    7b22:	e77b      	b.n	7a1c <__svfiscanf_r+0x1f0>
    7b24:	fffffd64 	.word	0xfffffd64
    7b28:	0000835d 	.word	0x0000835d
    7b2c:	00007e69 	.word	0x00007e69
    7b30:	0000b06a 	.word	0x0000b06a
    7b34:	00000000 	.word	0x00000000

00007b38 <_vfiscanf_r>:
    7b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b3a:	0004      	movs	r4, r0
    7b3c:	000d      	movs	r5, r1
    7b3e:	0016      	movs	r6, r2
    7b40:	001f      	movs	r7, r3
    7b42:	2800      	cmp	r0, #0
    7b44:	d004      	beq.n	7b50 <_vfiscanf_r+0x18>
    7b46:	6983      	ldr	r3, [r0, #24]
    7b48:	2b00      	cmp	r3, #0
    7b4a:	d101      	bne.n	7b50 <_vfiscanf_r+0x18>
    7b4c:	f7ff fa82 	bl	7054 <__sinit>
    7b50:	4b0a      	ldr	r3, [pc, #40]	; (7b7c <_vfiscanf_r+0x44>)
    7b52:	429d      	cmp	r5, r3
    7b54:	d107      	bne.n	7b66 <_vfiscanf_r+0x2e>
    7b56:	6865      	ldr	r5, [r4, #4]
    7b58:	003b      	movs	r3, r7
    7b5a:	0032      	movs	r2, r6
    7b5c:	0029      	movs	r1, r5
    7b5e:	0020      	movs	r0, r4
    7b60:	f7ff fe64 	bl	782c <__svfiscanf_r>
    7b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b66:	4b06      	ldr	r3, [pc, #24]	; (7b80 <_vfiscanf_r+0x48>)
    7b68:	429d      	cmp	r5, r3
    7b6a:	d101      	bne.n	7b70 <_vfiscanf_r+0x38>
    7b6c:	68a5      	ldr	r5, [r4, #8]
    7b6e:	e7f3      	b.n	7b58 <_vfiscanf_r+0x20>
    7b70:	4b04      	ldr	r3, [pc, #16]	; (7b84 <_vfiscanf_r+0x4c>)
    7b72:	429d      	cmp	r5, r3
    7b74:	d1f0      	bne.n	7b58 <_vfiscanf_r+0x20>
    7b76:	68e5      	ldr	r5, [r4, #12]
    7b78:	e7ee      	b.n	7b58 <_vfiscanf_r+0x20>
    7b7a:	46c0      	nop			; (mov r8, r8)
    7b7c:	0000b024 	.word	0x0000b024
    7b80:	0000b044 	.word	0x0000b044
    7b84:	0000b004 	.word	0x0000b004

00007b88 <_scanf_chars>:
    7b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7b8a:	0015      	movs	r5, r2
    7b8c:	688a      	ldr	r2, [r1, #8]
    7b8e:	9001      	str	r0, [sp, #4]
    7b90:	000c      	movs	r4, r1
    7b92:	2a00      	cmp	r2, #0
    7b94:	d106      	bne.n	7ba4 <_scanf_chars+0x1c>
    7b96:	698a      	ldr	r2, [r1, #24]
    7b98:	1e51      	subs	r1, r2, #1
    7b9a:	418a      	sbcs	r2, r1
    7b9c:	2101      	movs	r1, #1
    7b9e:	4252      	negs	r2, r2
    7ba0:	430a      	orrs	r2, r1
    7ba2:	60a2      	str	r2, [r4, #8]
    7ba4:	6822      	ldr	r2, [r4, #0]
    7ba6:	06d2      	lsls	r2, r2, #27
    7ba8:	d403      	bmi.n	7bb2 <_scanf_chars+0x2a>
    7baa:	681a      	ldr	r2, [r3, #0]
    7bac:	1d11      	adds	r1, r2, #4
    7bae:	6019      	str	r1, [r3, #0]
    7bb0:	6817      	ldr	r7, [r2, #0]
    7bb2:	2600      	movs	r6, #0
    7bb4:	69a3      	ldr	r3, [r4, #24]
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	d01c      	beq.n	7bf4 <_scanf_chars+0x6c>
    7bba:	2b01      	cmp	r3, #1
    7bbc:	d108      	bne.n	7bd0 <_scanf_chars+0x48>
    7bbe:	682b      	ldr	r3, [r5, #0]
    7bc0:	6962      	ldr	r2, [r4, #20]
    7bc2:	781b      	ldrb	r3, [r3, #0]
    7bc4:	5cd3      	ldrb	r3, [r2, r3]
    7bc6:	2b00      	cmp	r3, #0
    7bc8:	d114      	bne.n	7bf4 <_scanf_chars+0x6c>
    7bca:	2e00      	cmp	r6, #0
    7bcc:	d130      	bne.n	7c30 <_scanf_chars+0xa8>
    7bce:	e006      	b.n	7bde <_scanf_chars+0x56>
    7bd0:	2b02      	cmp	r3, #2
    7bd2:	d006      	beq.n	7be2 <_scanf_chars+0x5a>
    7bd4:	2e00      	cmp	r6, #0
    7bd6:	d12b      	bne.n	7c30 <_scanf_chars+0xa8>
    7bd8:	69a3      	ldr	r3, [r4, #24]
    7bda:	2b01      	cmp	r3, #1
    7bdc:	d128      	bne.n	7c30 <_scanf_chars+0xa8>
    7bde:	2001      	movs	r0, #1
    7be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7be2:	f000 fc7b 	bl	84dc <__locale_ctype_ptr>
    7be6:	2208      	movs	r2, #8
    7be8:	682b      	ldr	r3, [r5, #0]
    7bea:	781b      	ldrb	r3, [r3, #0]
    7bec:	18c0      	adds	r0, r0, r3
    7bee:	7843      	ldrb	r3, [r0, #1]
    7bf0:	4213      	tst	r3, r2
    7bf2:	d1ef      	bne.n	7bd4 <_scanf_chars+0x4c>
    7bf4:	2210      	movs	r2, #16
    7bf6:	6823      	ldr	r3, [r4, #0]
    7bf8:	3601      	adds	r6, #1
    7bfa:	4213      	tst	r3, r2
    7bfc:	d103      	bne.n	7c06 <_scanf_chars+0x7e>
    7bfe:	682b      	ldr	r3, [r5, #0]
    7c00:	781b      	ldrb	r3, [r3, #0]
    7c02:	703b      	strb	r3, [r7, #0]
    7c04:	3701      	adds	r7, #1
    7c06:	682a      	ldr	r2, [r5, #0]
    7c08:	686b      	ldr	r3, [r5, #4]
    7c0a:	3201      	adds	r2, #1
    7c0c:	602a      	str	r2, [r5, #0]
    7c0e:	68a2      	ldr	r2, [r4, #8]
    7c10:	3b01      	subs	r3, #1
    7c12:	3a01      	subs	r2, #1
    7c14:	606b      	str	r3, [r5, #4]
    7c16:	60a2      	str	r2, [r4, #8]
    7c18:	2a00      	cmp	r2, #0
    7c1a:	d009      	beq.n	7c30 <_scanf_chars+0xa8>
    7c1c:	2b00      	cmp	r3, #0
    7c1e:	dcc9      	bgt.n	7bb4 <_scanf_chars+0x2c>
    7c20:	23c0      	movs	r3, #192	; 0xc0
    7c22:	005b      	lsls	r3, r3, #1
    7c24:	58e3      	ldr	r3, [r4, r3]
    7c26:	0029      	movs	r1, r5
    7c28:	9801      	ldr	r0, [sp, #4]
    7c2a:	4798      	blx	r3
    7c2c:	2800      	cmp	r0, #0
    7c2e:	d0c1      	beq.n	7bb4 <_scanf_chars+0x2c>
    7c30:	2310      	movs	r3, #16
    7c32:	6822      	ldr	r2, [r4, #0]
    7c34:	4013      	ands	r3, r2
    7c36:	d106      	bne.n	7c46 <_scanf_chars+0xbe>
    7c38:	68e2      	ldr	r2, [r4, #12]
    7c3a:	3201      	adds	r2, #1
    7c3c:	60e2      	str	r2, [r4, #12]
    7c3e:	69a2      	ldr	r2, [r4, #24]
    7c40:	2a00      	cmp	r2, #0
    7c42:	d000      	beq.n	7c46 <_scanf_chars+0xbe>
    7c44:	703b      	strb	r3, [r7, #0]
    7c46:	6923      	ldr	r3, [r4, #16]
    7c48:	2000      	movs	r0, #0
    7c4a:	199e      	adds	r6, r3, r6
    7c4c:	6126      	str	r6, [r4, #16]
    7c4e:	e7c7      	b.n	7be0 <_scanf_chars+0x58>

00007c50 <_scanf_i>:
    7c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c52:	000c      	movs	r4, r1
    7c54:	b08d      	sub	sp, #52	; 0x34
    7c56:	9302      	str	r3, [sp, #8]
    7c58:	4b77      	ldr	r3, [pc, #476]	; (7e38 <_scanf_i+0x1e8>)
    7c5a:	9005      	str	r0, [sp, #20]
    7c5c:	0016      	movs	r6, r2
    7c5e:	aa09      	add	r2, sp, #36	; 0x24
    7c60:	cb23      	ldmia	r3!, {r0, r1, r5}
    7c62:	c223      	stmia	r2!, {r0, r1, r5}
    7c64:	4b75      	ldr	r3, [pc, #468]	; (7e3c <_scanf_i+0x1ec>)
    7c66:	9306      	str	r3, [sp, #24]
    7c68:	69a3      	ldr	r3, [r4, #24]
    7c6a:	2b03      	cmp	r3, #3
    7c6c:	d001      	beq.n	7c72 <_scanf_i+0x22>
    7c6e:	4b74      	ldr	r3, [pc, #464]	; (7e40 <_scanf_i+0x1f0>)
    7c70:	9306      	str	r3, [sp, #24]
    7c72:	22ae      	movs	r2, #174	; 0xae
    7c74:	2000      	movs	r0, #0
    7c76:	68a3      	ldr	r3, [r4, #8]
    7c78:	0052      	lsls	r2, r2, #1
    7c7a:	1e59      	subs	r1, r3, #1
    7c7c:	9004      	str	r0, [sp, #16]
    7c7e:	4291      	cmp	r1, r2
    7c80:	d905      	bls.n	7c8e <_scanf_i+0x3e>
    7c82:	3b5e      	subs	r3, #94	; 0x5e
    7c84:	3bff      	subs	r3, #255	; 0xff
    7c86:	9304      	str	r3, [sp, #16]
    7c88:	235e      	movs	r3, #94	; 0x5e
    7c8a:	33ff      	adds	r3, #255	; 0xff
    7c8c:	60a3      	str	r3, [r4, #8]
    7c8e:	0023      	movs	r3, r4
    7c90:	331c      	adds	r3, #28
    7c92:	9301      	str	r3, [sp, #4]
    7c94:	23d0      	movs	r3, #208	; 0xd0
    7c96:	2700      	movs	r7, #0
    7c98:	6822      	ldr	r2, [r4, #0]
    7c9a:	011b      	lsls	r3, r3, #4
    7c9c:	4313      	orrs	r3, r2
    7c9e:	6023      	str	r3, [r4, #0]
    7ca0:	9b01      	ldr	r3, [sp, #4]
    7ca2:	9303      	str	r3, [sp, #12]
    7ca4:	6833      	ldr	r3, [r6, #0]
    7ca6:	a809      	add	r0, sp, #36	; 0x24
    7ca8:	7819      	ldrb	r1, [r3, #0]
    7caa:	00bb      	lsls	r3, r7, #2
    7cac:	2202      	movs	r2, #2
    7cae:	5818      	ldr	r0, [r3, r0]
    7cb0:	f000 fc48 	bl	8544 <memchr>
    7cb4:	2800      	cmp	r0, #0
    7cb6:	d02b      	beq.n	7d10 <_scanf_i+0xc0>
    7cb8:	2f01      	cmp	r7, #1
    7cba:	d15f      	bne.n	7d7c <_scanf_i+0x12c>
    7cbc:	6863      	ldr	r3, [r4, #4]
    7cbe:	2b00      	cmp	r3, #0
    7cc0:	d106      	bne.n	7cd0 <_scanf_i+0x80>
    7cc2:	3308      	adds	r3, #8
    7cc4:	6822      	ldr	r2, [r4, #0]
    7cc6:	6063      	str	r3, [r4, #4]
    7cc8:	33f9      	adds	r3, #249	; 0xf9
    7cca:	33ff      	adds	r3, #255	; 0xff
    7ccc:	4313      	orrs	r3, r2
    7cce:	6023      	str	r3, [r4, #0]
    7cd0:	4b5c      	ldr	r3, [pc, #368]	; (7e44 <_scanf_i+0x1f4>)
    7cd2:	6822      	ldr	r2, [r4, #0]
    7cd4:	4013      	ands	r3, r2
    7cd6:	6023      	str	r3, [r4, #0]
    7cd8:	68a3      	ldr	r3, [r4, #8]
    7cda:	1e5a      	subs	r2, r3, #1
    7cdc:	60a2      	str	r2, [r4, #8]
    7cde:	2b00      	cmp	r3, #0
    7ce0:	d016      	beq.n	7d10 <_scanf_i+0xc0>
    7ce2:	9b03      	ldr	r3, [sp, #12]
    7ce4:	1c5d      	adds	r5, r3, #1
    7ce6:	6833      	ldr	r3, [r6, #0]
    7ce8:	1c5a      	adds	r2, r3, #1
    7cea:	6032      	str	r2, [r6, #0]
    7cec:	781b      	ldrb	r3, [r3, #0]
    7cee:	9a03      	ldr	r2, [sp, #12]
    7cf0:	9503      	str	r5, [sp, #12]
    7cf2:	7013      	strb	r3, [r2, #0]
    7cf4:	6873      	ldr	r3, [r6, #4]
    7cf6:	3b01      	subs	r3, #1
    7cf8:	6073      	str	r3, [r6, #4]
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	dc08      	bgt.n	7d10 <_scanf_i+0xc0>
    7cfe:	23c0      	movs	r3, #192	; 0xc0
    7d00:	005b      	lsls	r3, r3, #1
    7d02:	58e3      	ldr	r3, [r4, r3]
    7d04:	0031      	movs	r1, r6
    7d06:	9805      	ldr	r0, [sp, #20]
    7d08:	9307      	str	r3, [sp, #28]
    7d0a:	4798      	blx	r3
    7d0c:	2800      	cmp	r0, #0
    7d0e:	d17d      	bne.n	7e0c <_scanf_i+0x1bc>
    7d10:	3701      	adds	r7, #1
    7d12:	2f03      	cmp	r7, #3
    7d14:	d1c6      	bne.n	7ca4 <_scanf_i+0x54>
    7d16:	6863      	ldr	r3, [r4, #4]
    7d18:	2b00      	cmp	r3, #0
    7d1a:	d101      	bne.n	7d20 <_scanf_i+0xd0>
    7d1c:	330a      	adds	r3, #10
    7d1e:	6063      	str	r3, [r4, #4]
    7d20:	2110      	movs	r1, #16
    7d22:	2700      	movs	r7, #0
    7d24:	6863      	ldr	r3, [r4, #4]
    7d26:	6960      	ldr	r0, [r4, #20]
    7d28:	1ac9      	subs	r1, r1, r3
    7d2a:	4b47      	ldr	r3, [pc, #284]	; (7e48 <_scanf_i+0x1f8>)
    7d2c:	18c9      	adds	r1, r1, r3
    7d2e:	f000 f92b 	bl	7f88 <__sccl>
    7d32:	9d03      	ldr	r5, [sp, #12]
    7d34:	68a3      	ldr	r3, [r4, #8]
    7d36:	2b00      	cmp	r3, #0
    7d38:	d041      	beq.n	7dbe <_scanf_i+0x16e>
    7d3a:	6832      	ldr	r2, [r6, #0]
    7d3c:	6960      	ldr	r0, [r4, #20]
    7d3e:	7811      	ldrb	r1, [r2, #0]
    7d40:	5c40      	ldrb	r0, [r0, r1]
    7d42:	2800      	cmp	r0, #0
    7d44:	d03b      	beq.n	7dbe <_scanf_i+0x16e>
    7d46:	2930      	cmp	r1, #48	; 0x30
    7d48:	d128      	bne.n	7d9c <_scanf_i+0x14c>
    7d4a:	2080      	movs	r0, #128	; 0x80
    7d4c:	6821      	ldr	r1, [r4, #0]
    7d4e:	0100      	lsls	r0, r0, #4
    7d50:	4201      	tst	r1, r0
    7d52:	d023      	beq.n	7d9c <_scanf_i+0x14c>
    7d54:	9a04      	ldr	r2, [sp, #16]
    7d56:	3701      	adds	r7, #1
    7d58:	2a00      	cmp	r2, #0
    7d5a:	d003      	beq.n	7d64 <_scanf_i+0x114>
    7d5c:	3a01      	subs	r2, #1
    7d5e:	3301      	adds	r3, #1
    7d60:	9204      	str	r2, [sp, #16]
    7d62:	60a3      	str	r3, [r4, #8]
    7d64:	6873      	ldr	r3, [r6, #4]
    7d66:	3b01      	subs	r3, #1
    7d68:	6073      	str	r3, [r6, #4]
    7d6a:	2b00      	cmp	r3, #0
    7d6c:	dd1e      	ble.n	7dac <_scanf_i+0x15c>
    7d6e:	6833      	ldr	r3, [r6, #0]
    7d70:	3301      	adds	r3, #1
    7d72:	6033      	str	r3, [r6, #0]
    7d74:	68a3      	ldr	r3, [r4, #8]
    7d76:	3b01      	subs	r3, #1
    7d78:	60a3      	str	r3, [r4, #8]
    7d7a:	e7db      	b.n	7d34 <_scanf_i+0xe4>
    7d7c:	2f02      	cmp	r7, #2
    7d7e:	d1ab      	bne.n	7cd8 <_scanf_i+0x88>
    7d80:	21c0      	movs	r1, #192	; 0xc0
    7d82:	2380      	movs	r3, #128	; 0x80
    7d84:	6822      	ldr	r2, [r4, #0]
    7d86:	00c9      	lsls	r1, r1, #3
    7d88:	4011      	ands	r1, r2
    7d8a:	009b      	lsls	r3, r3, #2
    7d8c:	4299      	cmp	r1, r3
    7d8e:	d1c2      	bne.n	7d16 <_scanf_i+0xc6>
    7d90:	3bf1      	subs	r3, #241	; 0xf1
    7d92:	3bff      	subs	r3, #255	; 0xff
    7d94:	6063      	str	r3, [r4, #4]
    7d96:	33f0      	adds	r3, #240	; 0xf0
    7d98:	4313      	orrs	r3, r2
    7d9a:	e79c      	b.n	7cd6 <_scanf_i+0x86>
    7d9c:	6821      	ldr	r1, [r4, #0]
    7d9e:	4b2b      	ldr	r3, [pc, #172]	; (7e4c <_scanf_i+0x1fc>)
    7da0:	400b      	ands	r3, r1
    7da2:	6023      	str	r3, [r4, #0]
    7da4:	7813      	ldrb	r3, [r2, #0]
    7da6:	702b      	strb	r3, [r5, #0]
    7da8:	3501      	adds	r5, #1
    7daa:	e7db      	b.n	7d64 <_scanf_i+0x114>
    7dac:	23c0      	movs	r3, #192	; 0xc0
    7dae:	005b      	lsls	r3, r3, #1
    7db0:	58e3      	ldr	r3, [r4, r3]
    7db2:	0031      	movs	r1, r6
    7db4:	9805      	ldr	r0, [sp, #20]
    7db6:	9303      	str	r3, [sp, #12]
    7db8:	4798      	blx	r3
    7dba:	2800      	cmp	r0, #0
    7dbc:	d0da      	beq.n	7d74 <_scanf_i+0x124>
    7dbe:	6823      	ldr	r3, [r4, #0]
    7dc0:	05db      	lsls	r3, r3, #23
    7dc2:	d50e      	bpl.n	7de2 <_scanf_i+0x192>
    7dc4:	9b01      	ldr	r3, [sp, #4]
    7dc6:	429d      	cmp	r5, r3
    7dc8:	d907      	bls.n	7dda <_scanf_i+0x18a>
    7dca:	23be      	movs	r3, #190	; 0xbe
    7dcc:	3d01      	subs	r5, #1
    7dce:	005b      	lsls	r3, r3, #1
    7dd0:	7829      	ldrb	r1, [r5, #0]
    7dd2:	58e3      	ldr	r3, [r4, r3]
    7dd4:	0032      	movs	r2, r6
    7dd6:	9805      	ldr	r0, [sp, #20]
    7dd8:	4798      	blx	r3
    7dda:	9b01      	ldr	r3, [sp, #4]
    7ddc:	2001      	movs	r0, #1
    7dde:	429d      	cmp	r5, r3
    7de0:	d027      	beq.n	7e32 <_scanf_i+0x1e2>
    7de2:	2210      	movs	r2, #16
    7de4:	6823      	ldr	r3, [r4, #0]
    7de6:	401a      	ands	r2, r3
    7de8:	d11c      	bne.n	7e24 <_scanf_i+0x1d4>
    7dea:	702a      	strb	r2, [r5, #0]
    7dec:	6863      	ldr	r3, [r4, #4]
    7dee:	9901      	ldr	r1, [sp, #4]
    7df0:	9805      	ldr	r0, [sp, #20]
    7df2:	9e06      	ldr	r6, [sp, #24]
    7df4:	47b0      	blx	r6
    7df6:	9b02      	ldr	r3, [sp, #8]
    7df8:	6822      	ldr	r2, [r4, #0]
    7dfa:	681b      	ldr	r3, [r3, #0]
    7dfc:	0691      	lsls	r1, r2, #26
    7dfe:	d507      	bpl.n	7e10 <_scanf_i+0x1c0>
    7e00:	9902      	ldr	r1, [sp, #8]
    7e02:	1d1a      	adds	r2, r3, #4
    7e04:	600a      	str	r2, [r1, #0]
    7e06:	681b      	ldr	r3, [r3, #0]
    7e08:	6018      	str	r0, [r3, #0]
    7e0a:	e008      	b.n	7e1e <_scanf_i+0x1ce>
    7e0c:	2700      	movs	r7, #0
    7e0e:	e7d6      	b.n	7dbe <_scanf_i+0x16e>
    7e10:	07d1      	lsls	r1, r2, #31
    7e12:	d5f5      	bpl.n	7e00 <_scanf_i+0x1b0>
    7e14:	9902      	ldr	r1, [sp, #8]
    7e16:	1d1a      	adds	r2, r3, #4
    7e18:	600a      	str	r2, [r1, #0]
    7e1a:	681b      	ldr	r3, [r3, #0]
    7e1c:	8018      	strh	r0, [r3, #0]
    7e1e:	68e3      	ldr	r3, [r4, #12]
    7e20:	3301      	adds	r3, #1
    7e22:	60e3      	str	r3, [r4, #12]
    7e24:	2000      	movs	r0, #0
    7e26:	9b01      	ldr	r3, [sp, #4]
    7e28:	1aed      	subs	r5, r5, r3
    7e2a:	6923      	ldr	r3, [r4, #16]
    7e2c:	19ef      	adds	r7, r5, r7
    7e2e:	19df      	adds	r7, r3, r7
    7e30:	6127      	str	r7, [r4, #16]
    7e32:	b00d      	add	sp, #52	; 0x34
    7e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e36:	46c0      	nop			; (mov r8, r8)
    7e38:	0000b098 	.word	0x0000b098
    7e3c:	00008191 	.word	0x00008191
    7e40:	000082c1 	.word	0x000082c1
    7e44:	fffffaff 	.word	0xfffffaff
    7e48:	0000b0a4 	.word	0x0000b0a4
    7e4c:	fffff6ff 	.word	0xfffff6ff

00007e50 <lflush>:
    7e50:	2209      	movs	r2, #9
    7e52:	b510      	push	{r4, lr}
    7e54:	8983      	ldrh	r3, [r0, #12]
    7e56:	4013      	ands	r3, r2
    7e58:	2200      	movs	r2, #0
    7e5a:	2b09      	cmp	r3, #9
    7e5c:	d102      	bne.n	7e64 <lflush+0x14>
    7e5e:	f7ff f8a3 	bl	6fa8 <fflush>
    7e62:	0002      	movs	r2, r0
    7e64:	0010      	movs	r0, r2
    7e66:	bd10      	pop	{r4, pc}

00007e68 <__srefill_r>:
    7e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e6a:	0005      	movs	r5, r0
    7e6c:	000c      	movs	r4, r1
    7e6e:	2800      	cmp	r0, #0
    7e70:	d004      	beq.n	7e7c <__srefill_r+0x14>
    7e72:	6983      	ldr	r3, [r0, #24]
    7e74:	2b00      	cmp	r3, #0
    7e76:	d101      	bne.n	7e7c <__srefill_r+0x14>
    7e78:	f7ff f8ec 	bl	7054 <__sinit>
    7e7c:	4b3d      	ldr	r3, [pc, #244]	; (7f74 <__srefill_r+0x10c>)
    7e7e:	429c      	cmp	r4, r3
    7e80:	d10a      	bne.n	7e98 <__srefill_r+0x30>
    7e82:	686c      	ldr	r4, [r5, #4]
    7e84:	2300      	movs	r3, #0
    7e86:	6063      	str	r3, [r4, #4]
    7e88:	230c      	movs	r3, #12
    7e8a:	5ee2      	ldrsh	r2, [r4, r3]
    7e8c:	b293      	uxth	r3, r2
    7e8e:	0699      	lsls	r1, r3, #26
    7e90:	d50c      	bpl.n	7eac <__srefill_r+0x44>
    7e92:	2001      	movs	r0, #1
    7e94:	4240      	negs	r0, r0
    7e96:	e068      	b.n	7f6a <__srefill_r+0x102>
    7e98:	4b37      	ldr	r3, [pc, #220]	; (7f78 <__srefill_r+0x110>)
    7e9a:	429c      	cmp	r4, r3
    7e9c:	d101      	bne.n	7ea2 <__srefill_r+0x3a>
    7e9e:	68ac      	ldr	r4, [r5, #8]
    7ea0:	e7f0      	b.n	7e84 <__srefill_r+0x1c>
    7ea2:	4b36      	ldr	r3, [pc, #216]	; (7f7c <__srefill_r+0x114>)
    7ea4:	429c      	cmp	r4, r3
    7ea6:	d1ed      	bne.n	7e84 <__srefill_r+0x1c>
    7ea8:	68ec      	ldr	r4, [r5, #12]
    7eaa:	e7eb      	b.n	7e84 <__srefill_r+0x1c>
    7eac:	0759      	lsls	r1, r3, #29
    7eae:	d44a      	bmi.n	7f46 <__srefill_r+0xde>
    7eb0:	06d9      	lsls	r1, r3, #27
    7eb2:	d405      	bmi.n	7ec0 <__srefill_r+0x58>
    7eb4:	2309      	movs	r3, #9
    7eb6:	602b      	str	r3, [r5, #0]
    7eb8:	3337      	adds	r3, #55	; 0x37
    7eba:	4313      	orrs	r3, r2
    7ebc:	81a3      	strh	r3, [r4, #12]
    7ebe:	e7e8      	b.n	7e92 <__srefill_r+0x2a>
    7ec0:	2608      	movs	r6, #8
    7ec2:	4233      	tst	r3, r6
    7ec4:	d00a      	beq.n	7edc <__srefill_r+0x74>
    7ec6:	0021      	movs	r1, r4
    7ec8:	0028      	movs	r0, r5
    7eca:	f7ff f841 	bl	6f50 <_fflush_r>
    7ece:	2800      	cmp	r0, #0
    7ed0:	d1df      	bne.n	7e92 <__srefill_r+0x2a>
    7ed2:	89a3      	ldrh	r3, [r4, #12]
    7ed4:	60a0      	str	r0, [r4, #8]
    7ed6:	43b3      	bics	r3, r6
    7ed8:	81a3      	strh	r3, [r4, #12]
    7eda:	61a0      	str	r0, [r4, #24]
    7edc:	2304      	movs	r3, #4
    7ede:	89a2      	ldrh	r2, [r4, #12]
    7ee0:	4313      	orrs	r3, r2
    7ee2:	81a3      	strh	r3, [r4, #12]
    7ee4:	6923      	ldr	r3, [r4, #16]
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	d103      	bne.n	7ef2 <__srefill_r+0x8a>
    7eea:	0021      	movs	r1, r4
    7eec:	0028      	movs	r0, r5
    7eee:	f7ff f98b 	bl	7208 <__smakebuf_r>
    7ef2:	230c      	movs	r3, #12
    7ef4:	5ee7      	ldrsh	r7, [r4, r3]
    7ef6:	b2be      	uxth	r6, r7
    7ef8:	07b3      	lsls	r3, r6, #30
    7efa:	d00f      	beq.n	7f1c <__srefill_r+0xb4>
    7efc:	2301      	movs	r3, #1
    7efe:	81a3      	strh	r3, [r4, #12]
    7f00:	4b1f      	ldr	r3, [pc, #124]	; (7f80 <__srefill_r+0x118>)
    7f02:	4920      	ldr	r1, [pc, #128]	; (7f84 <__srefill_r+0x11c>)
    7f04:	6818      	ldr	r0, [r3, #0]
    7f06:	f7ff f919 	bl	713c <_fwalk>
    7f0a:	2309      	movs	r3, #9
    7f0c:	81a7      	strh	r7, [r4, #12]
    7f0e:	401e      	ands	r6, r3
    7f10:	429e      	cmp	r6, r3
    7f12:	d103      	bne.n	7f1c <__srefill_r+0xb4>
    7f14:	0021      	movs	r1, r4
    7f16:	0028      	movs	r0, r5
    7f18:	f7fe ff90 	bl	6e3c <__sflush_r>
    7f1c:	6923      	ldr	r3, [r4, #16]
    7f1e:	6922      	ldr	r2, [r4, #16]
    7f20:	6023      	str	r3, [r4, #0]
    7f22:	0028      	movs	r0, r5
    7f24:	6963      	ldr	r3, [r4, #20]
    7f26:	6a21      	ldr	r1, [r4, #32]
    7f28:	6a65      	ldr	r5, [r4, #36]	; 0x24
    7f2a:	47a8      	blx	r5
    7f2c:	0002      	movs	r2, r0
    7f2e:	6060      	str	r0, [r4, #4]
    7f30:	2000      	movs	r0, #0
    7f32:	4282      	cmp	r2, r0
    7f34:	dc19      	bgt.n	7f6a <__srefill_r+0x102>
    7f36:	89a1      	ldrh	r1, [r4, #12]
    7f38:	4282      	cmp	r2, r0
    7f3a:	d117      	bne.n	7f6c <__srefill_r+0x104>
    7f3c:	2320      	movs	r3, #32
    7f3e:	430b      	orrs	r3, r1
    7f40:	81a3      	strh	r3, [r4, #12]
    7f42:	3801      	subs	r0, #1
    7f44:	e011      	b.n	7f6a <__srefill_r+0x102>
    7f46:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7f48:	2900      	cmp	r1, #0
    7f4a:	d0cb      	beq.n	7ee4 <__srefill_r+0x7c>
    7f4c:	0023      	movs	r3, r4
    7f4e:	3344      	adds	r3, #68	; 0x44
    7f50:	4299      	cmp	r1, r3
    7f52:	d002      	beq.n	7f5a <__srefill_r+0xf2>
    7f54:	0028      	movs	r0, r5
    7f56:	f7fe fc97 	bl	6888 <_free_r>
    7f5a:	2000      	movs	r0, #0
    7f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7f5e:	6360      	str	r0, [r4, #52]	; 0x34
    7f60:	6063      	str	r3, [r4, #4]
    7f62:	4283      	cmp	r3, r0
    7f64:	d0be      	beq.n	7ee4 <__srefill_r+0x7c>
    7f66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7f68:	6023      	str	r3, [r4, #0]
    7f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f6c:	2340      	movs	r3, #64	; 0x40
    7f6e:	6060      	str	r0, [r4, #4]
    7f70:	430b      	orrs	r3, r1
    7f72:	e7a3      	b.n	7ebc <__srefill_r+0x54>
    7f74:	0000b024 	.word	0x0000b024
    7f78:	0000b044 	.word	0x0000b044
    7f7c:	0000b004 	.word	0x0000b004
    7f80:	0000b000 	.word	0x0000b000
    7f84:	00007e51 	.word	0x00007e51

00007f88 <__sccl>:
    7f88:	b570      	push	{r4, r5, r6, lr}
    7f8a:	780b      	ldrb	r3, [r1, #0]
    7f8c:	2b5e      	cmp	r3, #94	; 0x5e
    7f8e:	d00d      	beq.n	7fac <__sccl+0x24>
    7f90:	1c4a      	adds	r2, r1, #1
    7f92:	2100      	movs	r1, #0
    7f94:	0004      	movs	r4, r0
    7f96:	1c45      	adds	r5, r0, #1
    7f98:	35ff      	adds	r5, #255	; 0xff
    7f9a:	7021      	strb	r1, [r4, #0]
    7f9c:	3401      	adds	r4, #1
    7f9e:	42a5      	cmp	r5, r4
    7fa0:	d1fb      	bne.n	7f9a <__sccl+0x12>
    7fa2:	2b00      	cmp	r3, #0
    7fa4:	d106      	bne.n	7fb4 <__sccl+0x2c>
    7fa6:	3a01      	subs	r2, #1
    7fa8:	0010      	movs	r0, r2
    7faa:	bd70      	pop	{r4, r5, r6, pc}
    7fac:	1c8a      	adds	r2, r1, #2
    7fae:	784b      	ldrb	r3, [r1, #1]
    7fb0:	2101      	movs	r1, #1
    7fb2:	e7ef      	b.n	7f94 <__sccl+0xc>
    7fb4:	2401      	movs	r4, #1
    7fb6:	404c      	eors	r4, r1
    7fb8:	0011      	movs	r1, r2
    7fba:	54c4      	strb	r4, [r0, r3]
    7fbc:	780d      	ldrb	r5, [r1, #0]
    7fbe:	1c4a      	adds	r2, r1, #1
    7fc0:	2d2d      	cmp	r5, #45	; 0x2d
    7fc2:	d007      	beq.n	7fd4 <__sccl+0x4c>
    7fc4:	2d5d      	cmp	r5, #93	; 0x5d
    7fc6:	d0ef      	beq.n	7fa8 <__sccl+0x20>
    7fc8:	2d00      	cmp	r5, #0
    7fca:	d101      	bne.n	7fd0 <__sccl+0x48>
    7fcc:	000a      	movs	r2, r1
    7fce:	e7eb      	b.n	7fa8 <__sccl+0x20>
    7fd0:	002b      	movs	r3, r5
    7fd2:	e7f1      	b.n	7fb8 <__sccl+0x30>
    7fd4:	784e      	ldrb	r6, [r1, #1]
    7fd6:	2e5d      	cmp	r6, #93	; 0x5d
    7fd8:	d0fa      	beq.n	7fd0 <__sccl+0x48>
    7fda:	42b3      	cmp	r3, r6
    7fdc:	dcf8      	bgt.n	7fd0 <__sccl+0x48>
    7fde:	3102      	adds	r1, #2
    7fe0:	3301      	adds	r3, #1
    7fe2:	54c4      	strb	r4, [r0, r3]
    7fe4:	429e      	cmp	r6, r3
    7fe6:	dcfb      	bgt.n	7fe0 <__sccl+0x58>
    7fe8:	e7e8      	b.n	7fbc <__sccl+0x34>
	...

00007fec <__sread>:
    7fec:	b570      	push	{r4, r5, r6, lr}
    7fee:	000c      	movs	r4, r1
    7ff0:	250e      	movs	r5, #14
    7ff2:	5f49      	ldrsh	r1, [r1, r5]
    7ff4:	f000 fad8 	bl	85a8 <_read_r>
    7ff8:	2800      	cmp	r0, #0
    7ffa:	db03      	blt.n	8004 <__sread+0x18>
    7ffc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7ffe:	181b      	adds	r3, r3, r0
    8000:	6563      	str	r3, [r4, #84]	; 0x54
    8002:	bd70      	pop	{r4, r5, r6, pc}
    8004:	89a3      	ldrh	r3, [r4, #12]
    8006:	4a02      	ldr	r2, [pc, #8]	; (8010 <__sread+0x24>)
    8008:	4013      	ands	r3, r2
    800a:	81a3      	strh	r3, [r4, #12]
    800c:	e7f9      	b.n	8002 <__sread+0x16>
    800e:	46c0      	nop			; (mov r8, r8)
    8010:	ffffefff 	.word	0xffffefff

00008014 <__swrite>:
    8014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8016:	001f      	movs	r7, r3
    8018:	898b      	ldrh	r3, [r1, #12]
    801a:	0005      	movs	r5, r0
    801c:	000c      	movs	r4, r1
    801e:	0016      	movs	r6, r2
    8020:	05db      	lsls	r3, r3, #23
    8022:	d505      	bpl.n	8030 <__swrite+0x1c>
    8024:	230e      	movs	r3, #14
    8026:	5ec9      	ldrsh	r1, [r1, r3]
    8028:	2200      	movs	r2, #0
    802a:	2302      	movs	r3, #2
    802c:	f000 fa64 	bl	84f8 <_lseek_r>
    8030:	89a3      	ldrh	r3, [r4, #12]
    8032:	4a05      	ldr	r2, [pc, #20]	; (8048 <__swrite+0x34>)
    8034:	0028      	movs	r0, r5
    8036:	4013      	ands	r3, r2
    8038:	81a3      	strh	r3, [r4, #12]
    803a:	0032      	movs	r2, r6
    803c:	230e      	movs	r3, #14
    803e:	5ee1      	ldrsh	r1, [r4, r3]
    8040:	003b      	movs	r3, r7
    8042:	f000 f9fd 	bl	8440 <_write_r>
    8046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8048:	ffffefff 	.word	0xffffefff

0000804c <__sseek>:
    804c:	b570      	push	{r4, r5, r6, lr}
    804e:	000c      	movs	r4, r1
    8050:	250e      	movs	r5, #14
    8052:	5f49      	ldrsh	r1, [r1, r5]
    8054:	f000 fa50 	bl	84f8 <_lseek_r>
    8058:	89a3      	ldrh	r3, [r4, #12]
    805a:	1c42      	adds	r2, r0, #1
    805c:	d103      	bne.n	8066 <__sseek+0x1a>
    805e:	4a05      	ldr	r2, [pc, #20]	; (8074 <__sseek+0x28>)
    8060:	4013      	ands	r3, r2
    8062:	81a3      	strh	r3, [r4, #12]
    8064:	bd70      	pop	{r4, r5, r6, pc}
    8066:	2280      	movs	r2, #128	; 0x80
    8068:	0152      	lsls	r2, r2, #5
    806a:	4313      	orrs	r3, r2
    806c:	81a3      	strh	r3, [r4, #12]
    806e:	6560      	str	r0, [r4, #84]	; 0x54
    8070:	e7f8      	b.n	8064 <__sseek+0x18>
    8072:	46c0      	nop			; (mov r8, r8)
    8074:	ffffefff 	.word	0xffffefff

00008078 <__sclose>:
    8078:	b510      	push	{r4, lr}
    807a:	230e      	movs	r3, #14
    807c:	5ec9      	ldrsh	r1, [r1, r3]
    807e:	f000 f9f3 	bl	8468 <_close_r>
    8082:	bd10      	pop	{r4, pc}

00008084 <_strtol_l.isra.0>:
    8084:	b5f0      	push	{r4, r5, r6, r7, lr}
    8086:	001f      	movs	r7, r3
    8088:	000e      	movs	r6, r1
    808a:	b087      	sub	sp, #28
    808c:	9005      	str	r0, [sp, #20]
    808e:	9103      	str	r1, [sp, #12]
    8090:	9202      	str	r2, [sp, #8]
    8092:	980c      	ldr	r0, [sp, #48]	; 0x30
    8094:	7834      	ldrb	r4, [r6, #0]
    8096:	f000 fa1d 	bl	84d4 <__locale_ctype_ptr_l>
    809a:	2208      	movs	r2, #8
    809c:	1900      	adds	r0, r0, r4
    809e:	7843      	ldrb	r3, [r0, #1]
    80a0:	1c75      	adds	r5, r6, #1
    80a2:	4013      	ands	r3, r2
    80a4:	d10c      	bne.n	80c0 <_strtol_l.isra.0+0x3c>
    80a6:	2c2d      	cmp	r4, #45	; 0x2d
    80a8:	d10c      	bne.n	80c4 <_strtol_l.isra.0+0x40>
    80aa:	3301      	adds	r3, #1
    80ac:	782c      	ldrb	r4, [r5, #0]
    80ae:	9301      	str	r3, [sp, #4]
    80b0:	1cb5      	adds	r5, r6, #2
    80b2:	2f00      	cmp	r7, #0
    80b4:	d00c      	beq.n	80d0 <_strtol_l.isra.0+0x4c>
    80b6:	2f10      	cmp	r7, #16
    80b8:	d114      	bne.n	80e4 <_strtol_l.isra.0+0x60>
    80ba:	2c30      	cmp	r4, #48	; 0x30
    80bc:	d00a      	beq.n	80d4 <_strtol_l.isra.0+0x50>
    80be:	e011      	b.n	80e4 <_strtol_l.isra.0+0x60>
    80c0:	002e      	movs	r6, r5
    80c2:	e7e6      	b.n	8092 <_strtol_l.isra.0+0xe>
    80c4:	9301      	str	r3, [sp, #4]
    80c6:	2c2b      	cmp	r4, #43	; 0x2b
    80c8:	d1f3      	bne.n	80b2 <_strtol_l.isra.0+0x2e>
    80ca:	782c      	ldrb	r4, [r5, #0]
    80cc:	1cb5      	adds	r5, r6, #2
    80ce:	e7f0      	b.n	80b2 <_strtol_l.isra.0+0x2e>
    80d0:	2c30      	cmp	r4, #48	; 0x30
    80d2:	d12f      	bne.n	8134 <_strtol_l.isra.0+0xb0>
    80d4:	2220      	movs	r2, #32
    80d6:	782b      	ldrb	r3, [r5, #0]
    80d8:	4393      	bics	r3, r2
    80da:	2b58      	cmp	r3, #88	; 0x58
    80dc:	d151      	bne.n	8182 <_strtol_l.isra.0+0xfe>
    80de:	2710      	movs	r7, #16
    80e0:	786c      	ldrb	r4, [r5, #1]
    80e2:	3502      	adds	r5, #2
    80e4:	9b01      	ldr	r3, [sp, #4]
    80e6:	4a29      	ldr	r2, [pc, #164]	; (818c <_strtol_l.isra.0+0x108>)
    80e8:	0039      	movs	r1, r7
    80ea:	189e      	adds	r6, r3, r2
    80ec:	0030      	movs	r0, r6
    80ee:	f7fe fa5f 	bl	65b0 <__aeabi_uidivmod>
    80f2:	0030      	movs	r0, r6
    80f4:	9104      	str	r1, [sp, #16]
    80f6:	0039      	movs	r1, r7
    80f8:	f7fe f9d4 	bl	64a4 <__udivsi3>
    80fc:	2101      	movs	r1, #1
    80fe:	2300      	movs	r3, #0
    8100:	4249      	negs	r1, r1
    8102:	0002      	movs	r2, r0
    8104:	468c      	mov	ip, r1
    8106:	0018      	movs	r0, r3
    8108:	0021      	movs	r1, r4
    810a:	3930      	subs	r1, #48	; 0x30
    810c:	2909      	cmp	r1, #9
    810e:	d813      	bhi.n	8138 <_strtol_l.isra.0+0xb4>
    8110:	000c      	movs	r4, r1
    8112:	42a7      	cmp	r7, r4
    8114:	dd1c      	ble.n	8150 <_strtol_l.isra.0+0xcc>
    8116:	1c59      	adds	r1, r3, #1
    8118:	d009      	beq.n	812e <_strtol_l.isra.0+0xaa>
    811a:	4663      	mov	r3, ip
    811c:	4282      	cmp	r2, r0
    811e:	d306      	bcc.n	812e <_strtol_l.isra.0+0xaa>
    8120:	d102      	bne.n	8128 <_strtol_l.isra.0+0xa4>
    8122:	9904      	ldr	r1, [sp, #16]
    8124:	42a1      	cmp	r1, r4
    8126:	db02      	blt.n	812e <_strtol_l.isra.0+0xaa>
    8128:	2301      	movs	r3, #1
    812a:	4378      	muls	r0, r7
    812c:	1820      	adds	r0, r4, r0
    812e:	782c      	ldrb	r4, [r5, #0]
    8130:	3501      	adds	r5, #1
    8132:	e7e9      	b.n	8108 <_strtol_l.isra.0+0x84>
    8134:	270a      	movs	r7, #10
    8136:	e7d5      	b.n	80e4 <_strtol_l.isra.0+0x60>
    8138:	0021      	movs	r1, r4
    813a:	3941      	subs	r1, #65	; 0x41
    813c:	2919      	cmp	r1, #25
    813e:	d801      	bhi.n	8144 <_strtol_l.isra.0+0xc0>
    8140:	3c37      	subs	r4, #55	; 0x37
    8142:	e7e6      	b.n	8112 <_strtol_l.isra.0+0x8e>
    8144:	0021      	movs	r1, r4
    8146:	3961      	subs	r1, #97	; 0x61
    8148:	2919      	cmp	r1, #25
    814a:	d801      	bhi.n	8150 <_strtol_l.isra.0+0xcc>
    814c:	3c57      	subs	r4, #87	; 0x57
    814e:	e7e0      	b.n	8112 <_strtol_l.isra.0+0x8e>
    8150:	1c5a      	adds	r2, r3, #1
    8152:	d108      	bne.n	8166 <_strtol_l.isra.0+0xe2>
    8154:	9a05      	ldr	r2, [sp, #20]
    8156:	3323      	adds	r3, #35	; 0x23
    8158:	6013      	str	r3, [r2, #0]
    815a:	9b02      	ldr	r3, [sp, #8]
    815c:	0030      	movs	r0, r6
    815e:	2b00      	cmp	r3, #0
    8160:	d10b      	bne.n	817a <_strtol_l.isra.0+0xf6>
    8162:	b007      	add	sp, #28
    8164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8166:	9a01      	ldr	r2, [sp, #4]
    8168:	2a00      	cmp	r2, #0
    816a:	d000      	beq.n	816e <_strtol_l.isra.0+0xea>
    816c:	4240      	negs	r0, r0
    816e:	9a02      	ldr	r2, [sp, #8]
    8170:	2a00      	cmp	r2, #0
    8172:	d0f6      	beq.n	8162 <_strtol_l.isra.0+0xde>
    8174:	9a03      	ldr	r2, [sp, #12]
    8176:	2b00      	cmp	r3, #0
    8178:	d000      	beq.n	817c <_strtol_l.isra.0+0xf8>
    817a:	1e6a      	subs	r2, r5, #1
    817c:	9b02      	ldr	r3, [sp, #8]
    817e:	601a      	str	r2, [r3, #0]
    8180:	e7ef      	b.n	8162 <_strtol_l.isra.0+0xde>
    8182:	2430      	movs	r4, #48	; 0x30
    8184:	2f00      	cmp	r7, #0
    8186:	d1ad      	bne.n	80e4 <_strtol_l.isra.0+0x60>
    8188:	3708      	adds	r7, #8
    818a:	e7ab      	b.n	80e4 <_strtol_l.isra.0+0x60>
    818c:	7fffffff 	.word	0x7fffffff

00008190 <_strtol_r>:
    8190:	b513      	push	{r0, r1, r4, lr}
    8192:	4c05      	ldr	r4, [pc, #20]	; (81a8 <_strtol_r+0x18>)
    8194:	6824      	ldr	r4, [r4, #0]
    8196:	6a24      	ldr	r4, [r4, #32]
    8198:	2c00      	cmp	r4, #0
    819a:	d100      	bne.n	819e <_strtol_r+0xe>
    819c:	4c03      	ldr	r4, [pc, #12]	; (81ac <_strtol_r+0x1c>)
    819e:	9400      	str	r4, [sp, #0]
    81a0:	f7ff ff70 	bl	8084 <_strtol_l.isra.0>
    81a4:	bd16      	pop	{r1, r2, r4, pc}
    81a6:	46c0      	nop			; (mov r8, r8)
    81a8:	20000118 	.word	0x20000118
    81ac:	2000017c 	.word	0x2000017c

000081b0 <_strtoul_l.isra.0>:
    81b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    81b2:	001f      	movs	r7, r3
    81b4:	000e      	movs	r6, r1
    81b6:	b087      	sub	sp, #28
    81b8:	9005      	str	r0, [sp, #20]
    81ba:	9103      	str	r1, [sp, #12]
    81bc:	9201      	str	r2, [sp, #4]
    81be:	980c      	ldr	r0, [sp, #48]	; 0x30
    81c0:	7834      	ldrb	r4, [r6, #0]
    81c2:	f000 f987 	bl	84d4 <__locale_ctype_ptr_l>
    81c6:	2208      	movs	r2, #8
    81c8:	1900      	adds	r0, r0, r4
    81ca:	7843      	ldrb	r3, [r0, #1]
    81cc:	1c75      	adds	r5, r6, #1
    81ce:	4013      	ands	r3, r2
    81d0:	d10c      	bne.n	81ec <_strtoul_l.isra.0+0x3c>
    81d2:	2c2d      	cmp	r4, #45	; 0x2d
    81d4:	d10c      	bne.n	81f0 <_strtoul_l.isra.0+0x40>
    81d6:	3301      	adds	r3, #1
    81d8:	782c      	ldrb	r4, [r5, #0]
    81da:	9302      	str	r3, [sp, #8]
    81dc:	1cb5      	adds	r5, r6, #2
    81de:	2f00      	cmp	r7, #0
    81e0:	d00c      	beq.n	81fc <_strtoul_l.isra.0+0x4c>
    81e2:	2f10      	cmp	r7, #16
    81e4:	d114      	bne.n	8210 <_strtoul_l.isra.0+0x60>
    81e6:	2c30      	cmp	r4, #48	; 0x30
    81e8:	d00a      	beq.n	8200 <_strtoul_l.isra.0+0x50>
    81ea:	e011      	b.n	8210 <_strtoul_l.isra.0+0x60>
    81ec:	002e      	movs	r6, r5
    81ee:	e7e6      	b.n	81be <_strtoul_l.isra.0+0xe>
    81f0:	9302      	str	r3, [sp, #8]
    81f2:	2c2b      	cmp	r4, #43	; 0x2b
    81f4:	d1f3      	bne.n	81de <_strtoul_l.isra.0+0x2e>
    81f6:	782c      	ldrb	r4, [r5, #0]
    81f8:	1cb5      	adds	r5, r6, #2
    81fa:	e7f0      	b.n	81de <_strtoul_l.isra.0+0x2e>
    81fc:	2c30      	cmp	r4, #48	; 0x30
    81fe:	d12f      	bne.n	8260 <_strtoul_l.isra.0+0xb0>
    8200:	2220      	movs	r2, #32
    8202:	782b      	ldrb	r3, [r5, #0]
    8204:	4393      	bics	r3, r2
    8206:	2b58      	cmp	r3, #88	; 0x58
    8208:	d154      	bne.n	82b4 <_strtoul_l.isra.0+0x104>
    820a:	2710      	movs	r7, #16
    820c:	786c      	ldrb	r4, [r5, #1]
    820e:	3502      	adds	r5, #2
    8210:	2001      	movs	r0, #1
    8212:	0039      	movs	r1, r7
    8214:	4240      	negs	r0, r0
    8216:	f7fe f945 	bl	64a4 <__udivsi3>
    821a:	0006      	movs	r6, r0
    821c:	2001      	movs	r0, #1
    821e:	0039      	movs	r1, r7
    8220:	4240      	negs	r0, r0
    8222:	f7fe f9c5 	bl	65b0 <__aeabi_uidivmod>
    8226:	2300      	movs	r3, #0
    8228:	9104      	str	r1, [sp, #16]
    822a:	2101      	movs	r1, #1
    822c:	2201      	movs	r2, #1
    822e:	0018      	movs	r0, r3
    8230:	468c      	mov	ip, r1
    8232:	4252      	negs	r2, r2
    8234:	0021      	movs	r1, r4
    8236:	3930      	subs	r1, #48	; 0x30
    8238:	2909      	cmp	r1, #9
    823a:	d813      	bhi.n	8264 <_strtoul_l.isra.0+0xb4>
    823c:	000c      	movs	r4, r1
    823e:	42a7      	cmp	r7, r4
    8240:	dd1e      	ble.n	8280 <_strtoul_l.isra.0+0xd0>
    8242:	2b00      	cmp	r3, #0
    8244:	db1a      	blt.n	827c <_strtoul_l.isra.0+0xcc>
    8246:	0013      	movs	r3, r2
    8248:	4286      	cmp	r6, r0
    824a:	d306      	bcc.n	825a <_strtoul_l.isra.0+0xaa>
    824c:	d102      	bne.n	8254 <_strtoul_l.isra.0+0xa4>
    824e:	9904      	ldr	r1, [sp, #16]
    8250:	42a1      	cmp	r1, r4
    8252:	db02      	blt.n	825a <_strtoul_l.isra.0+0xaa>
    8254:	4663      	mov	r3, ip
    8256:	4378      	muls	r0, r7
    8258:	1820      	adds	r0, r4, r0
    825a:	782c      	ldrb	r4, [r5, #0]
    825c:	3501      	adds	r5, #1
    825e:	e7e9      	b.n	8234 <_strtoul_l.isra.0+0x84>
    8260:	270a      	movs	r7, #10
    8262:	e7d5      	b.n	8210 <_strtoul_l.isra.0+0x60>
    8264:	0021      	movs	r1, r4
    8266:	3941      	subs	r1, #65	; 0x41
    8268:	2919      	cmp	r1, #25
    826a:	d801      	bhi.n	8270 <_strtoul_l.isra.0+0xc0>
    826c:	3c37      	subs	r4, #55	; 0x37
    826e:	e7e6      	b.n	823e <_strtoul_l.isra.0+0x8e>
    8270:	0021      	movs	r1, r4
    8272:	3961      	subs	r1, #97	; 0x61
    8274:	2919      	cmp	r1, #25
    8276:	d803      	bhi.n	8280 <_strtoul_l.isra.0+0xd0>
    8278:	3c57      	subs	r4, #87	; 0x57
    827a:	e7e0      	b.n	823e <_strtoul_l.isra.0+0x8e>
    827c:	0013      	movs	r3, r2
    827e:	e7ec      	b.n	825a <_strtoul_l.isra.0+0xaa>
    8280:	2b00      	cmp	r3, #0
    8282:	da09      	bge.n	8298 <_strtoul_l.isra.0+0xe8>
    8284:	2322      	movs	r3, #34	; 0x22
    8286:	2001      	movs	r0, #1
    8288:	9a05      	ldr	r2, [sp, #20]
    828a:	4240      	negs	r0, r0
    828c:	6013      	str	r3, [r2, #0]
    828e:	9b01      	ldr	r3, [sp, #4]
    8290:	2b00      	cmp	r3, #0
    8292:	d10b      	bne.n	82ac <_strtoul_l.isra.0+0xfc>
    8294:	b007      	add	sp, #28
    8296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8298:	9a02      	ldr	r2, [sp, #8]
    829a:	2a00      	cmp	r2, #0
    829c:	d000      	beq.n	82a0 <_strtoul_l.isra.0+0xf0>
    829e:	4240      	negs	r0, r0
    82a0:	9a01      	ldr	r2, [sp, #4]
    82a2:	2a00      	cmp	r2, #0
    82a4:	d0f6      	beq.n	8294 <_strtoul_l.isra.0+0xe4>
    82a6:	9a03      	ldr	r2, [sp, #12]
    82a8:	2b00      	cmp	r3, #0
    82aa:	d000      	beq.n	82ae <_strtoul_l.isra.0+0xfe>
    82ac:	1e6a      	subs	r2, r5, #1
    82ae:	9b01      	ldr	r3, [sp, #4]
    82b0:	601a      	str	r2, [r3, #0]
    82b2:	e7ef      	b.n	8294 <_strtoul_l.isra.0+0xe4>
    82b4:	2430      	movs	r4, #48	; 0x30
    82b6:	2f00      	cmp	r7, #0
    82b8:	d1aa      	bne.n	8210 <_strtoul_l.isra.0+0x60>
    82ba:	3708      	adds	r7, #8
    82bc:	e7a8      	b.n	8210 <_strtoul_l.isra.0+0x60>
	...

000082c0 <_strtoul_r>:
    82c0:	b513      	push	{r0, r1, r4, lr}
    82c2:	4c05      	ldr	r4, [pc, #20]	; (82d8 <_strtoul_r+0x18>)
    82c4:	6824      	ldr	r4, [r4, #0]
    82c6:	6a24      	ldr	r4, [r4, #32]
    82c8:	2c00      	cmp	r4, #0
    82ca:	d100      	bne.n	82ce <_strtoul_r+0xe>
    82cc:	4c03      	ldr	r4, [pc, #12]	; (82dc <_strtoul_r+0x1c>)
    82ce:	9400      	str	r4, [sp, #0]
    82d0:	f7ff ff6e 	bl	81b0 <_strtoul_l.isra.0>
    82d4:	bd16      	pop	{r1, r2, r4, pc}
    82d6:	46c0      	nop			; (mov r8, r8)
    82d8:	20000118 	.word	0x20000118
    82dc:	2000017c 	.word	0x2000017c

000082e0 <__submore>:
    82e0:	000b      	movs	r3, r1
    82e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    82e4:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    82e6:	3344      	adds	r3, #68	; 0x44
    82e8:	000c      	movs	r4, r1
    82ea:	429d      	cmp	r5, r3
    82ec:	d11c      	bne.n	8328 <__submore+0x48>
    82ee:	2680      	movs	r6, #128	; 0x80
    82f0:	00f6      	lsls	r6, r6, #3
    82f2:	0031      	movs	r1, r6
    82f4:	f7fe fb12 	bl	691c <_malloc_r>
    82f8:	2800      	cmp	r0, #0
    82fa:	d102      	bne.n	8302 <__submore+0x22>
    82fc:	2001      	movs	r0, #1
    82fe:	4240      	negs	r0, r0
    8300:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8302:	0023      	movs	r3, r4
    8304:	6360      	str	r0, [r4, #52]	; 0x34
    8306:	63a6      	str	r6, [r4, #56]	; 0x38
    8308:	3346      	adds	r3, #70	; 0x46
    830a:	781a      	ldrb	r2, [r3, #0]
    830c:	4b10      	ldr	r3, [pc, #64]	; (8350 <__submore+0x70>)
    830e:	54c2      	strb	r2, [r0, r3]
    8310:	0023      	movs	r3, r4
    8312:	3345      	adds	r3, #69	; 0x45
    8314:	781a      	ldrb	r2, [r3, #0]
    8316:	4b0f      	ldr	r3, [pc, #60]	; (8354 <__submore+0x74>)
    8318:	54c2      	strb	r2, [r0, r3]
    831a:	782a      	ldrb	r2, [r5, #0]
    831c:	4b0e      	ldr	r3, [pc, #56]	; (8358 <__submore+0x78>)
    831e:	54c2      	strb	r2, [r0, r3]
    8320:	18c0      	adds	r0, r0, r3
    8322:	6020      	str	r0, [r4, #0]
    8324:	2000      	movs	r0, #0
    8326:	e7eb      	b.n	8300 <__submore+0x20>
    8328:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    832a:	0029      	movs	r1, r5
    832c:	0073      	lsls	r3, r6, #1
    832e:	001a      	movs	r2, r3
    8330:	9301      	str	r3, [sp, #4]
    8332:	f000 f912 	bl	855a <_realloc_r>
    8336:	1e05      	subs	r5, r0, #0
    8338:	d0e0      	beq.n	82fc <__submore+0x1c>
    833a:	1987      	adds	r7, r0, r6
    833c:	0001      	movs	r1, r0
    833e:	0032      	movs	r2, r6
    8340:	0038      	movs	r0, r7
    8342:	f7fe fa7d 	bl	6840 <memcpy>
    8346:	9b01      	ldr	r3, [sp, #4]
    8348:	6027      	str	r7, [r4, #0]
    834a:	6365      	str	r5, [r4, #52]	; 0x34
    834c:	63a3      	str	r3, [r4, #56]	; 0x38
    834e:	e7e9      	b.n	8324 <__submore+0x44>
    8350:	000003ff 	.word	0x000003ff
    8354:	000003fe 	.word	0x000003fe
    8358:	000003fd 	.word	0x000003fd

0000835c <_ungetc_r>:
    835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    835e:	0005      	movs	r5, r0
    8360:	000e      	movs	r6, r1
    8362:	0014      	movs	r4, r2
    8364:	1c4b      	adds	r3, r1, #1
    8366:	d103      	bne.n	8370 <_ungetc_r+0x14>
    8368:	2601      	movs	r6, #1
    836a:	4276      	negs	r6, r6
    836c:	0030      	movs	r0, r6
    836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8370:	2800      	cmp	r0, #0
    8372:	d004      	beq.n	837e <_ungetc_r+0x22>
    8374:	6983      	ldr	r3, [r0, #24]
    8376:	2b00      	cmp	r3, #0
    8378:	d101      	bne.n	837e <_ungetc_r+0x22>
    837a:	f7fe fe6b 	bl	7054 <__sinit>
    837e:	4b2d      	ldr	r3, [pc, #180]	; (8434 <_ungetc_r+0xd8>)
    8380:	429c      	cmp	r4, r3
    8382:	d12d      	bne.n	83e0 <_ungetc_r+0x84>
    8384:	686c      	ldr	r4, [r5, #4]
    8386:	2220      	movs	r2, #32
    8388:	89a3      	ldrh	r3, [r4, #12]
    838a:	4393      	bics	r3, r2
    838c:	b21b      	sxth	r3, r3
    838e:	81a3      	strh	r3, [r4, #12]
    8390:	b29b      	uxth	r3, r3
    8392:	075a      	lsls	r2, r3, #29
    8394:	d413      	bmi.n	83be <_ungetc_r+0x62>
    8396:	06da      	lsls	r2, r3, #27
    8398:	d5e6      	bpl.n	8368 <_ungetc_r+0xc>
    839a:	2708      	movs	r7, #8
    839c:	423b      	tst	r3, r7
    839e:	d00a      	beq.n	83b6 <_ungetc_r+0x5a>
    83a0:	0021      	movs	r1, r4
    83a2:	0028      	movs	r0, r5
    83a4:	f7fe fdd4 	bl	6f50 <_fflush_r>
    83a8:	2800      	cmp	r0, #0
    83aa:	d1dd      	bne.n	8368 <_ungetc_r+0xc>
    83ac:	89a3      	ldrh	r3, [r4, #12]
    83ae:	60a0      	str	r0, [r4, #8]
    83b0:	43bb      	bics	r3, r7
    83b2:	81a3      	strh	r3, [r4, #12]
    83b4:	61a0      	str	r0, [r4, #24]
    83b6:	2304      	movs	r3, #4
    83b8:	89a2      	ldrh	r2, [r4, #12]
    83ba:	4313      	orrs	r3, r2
    83bc:	81a3      	strh	r3, [r4, #12]
    83be:	6b62      	ldr	r2, [r4, #52]	; 0x34
    83c0:	b2f7      	uxtb	r7, r6
    83c2:	6863      	ldr	r3, [r4, #4]
    83c4:	b2f6      	uxtb	r6, r6
    83c6:	2a00      	cmp	r2, #0
    83c8:	d01b      	beq.n	8402 <_ungetc_r+0xa6>
    83ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    83cc:	4293      	cmp	r3, r2
    83ce:	da11      	bge.n	83f4 <_ungetc_r+0x98>
    83d0:	6823      	ldr	r3, [r4, #0]
    83d2:	3b01      	subs	r3, #1
    83d4:	6023      	str	r3, [r4, #0]
    83d6:	701f      	strb	r7, [r3, #0]
    83d8:	6863      	ldr	r3, [r4, #4]
    83da:	3301      	adds	r3, #1
    83dc:	6063      	str	r3, [r4, #4]
    83de:	e7c5      	b.n	836c <_ungetc_r+0x10>
    83e0:	4b15      	ldr	r3, [pc, #84]	; (8438 <_ungetc_r+0xdc>)
    83e2:	429c      	cmp	r4, r3
    83e4:	d101      	bne.n	83ea <_ungetc_r+0x8e>
    83e6:	68ac      	ldr	r4, [r5, #8]
    83e8:	e7cd      	b.n	8386 <_ungetc_r+0x2a>
    83ea:	4b14      	ldr	r3, [pc, #80]	; (843c <_ungetc_r+0xe0>)
    83ec:	429c      	cmp	r4, r3
    83ee:	d1ca      	bne.n	8386 <_ungetc_r+0x2a>
    83f0:	68ec      	ldr	r4, [r5, #12]
    83f2:	e7c8      	b.n	8386 <_ungetc_r+0x2a>
    83f4:	0021      	movs	r1, r4
    83f6:	0028      	movs	r0, r5
    83f8:	f7ff ff72 	bl	82e0 <__submore>
    83fc:	2800      	cmp	r0, #0
    83fe:	d0e7      	beq.n	83d0 <_ungetc_r+0x74>
    8400:	e7b2      	b.n	8368 <_ungetc_r+0xc>
    8402:	6921      	ldr	r1, [r4, #16]
    8404:	6822      	ldr	r2, [r4, #0]
    8406:	2900      	cmp	r1, #0
    8408:	d007      	beq.n	841a <_ungetc_r+0xbe>
    840a:	4291      	cmp	r1, r2
    840c:	d205      	bcs.n	841a <_ungetc_r+0xbe>
    840e:	1e51      	subs	r1, r2, #1
    8410:	7808      	ldrb	r0, [r1, #0]
    8412:	4286      	cmp	r6, r0
    8414:	d101      	bne.n	841a <_ungetc_r+0xbe>
    8416:	6021      	str	r1, [r4, #0]
    8418:	e7df      	b.n	83da <_ungetc_r+0x7e>
    841a:	6423      	str	r3, [r4, #64]	; 0x40
    841c:	0023      	movs	r3, r4
    841e:	3344      	adds	r3, #68	; 0x44
    8420:	6363      	str	r3, [r4, #52]	; 0x34
    8422:	2303      	movs	r3, #3
    8424:	63a3      	str	r3, [r4, #56]	; 0x38
    8426:	0023      	movs	r3, r4
    8428:	3346      	adds	r3, #70	; 0x46
    842a:	63e2      	str	r2, [r4, #60]	; 0x3c
    842c:	701f      	strb	r7, [r3, #0]
    842e:	6023      	str	r3, [r4, #0]
    8430:	2301      	movs	r3, #1
    8432:	e7d3      	b.n	83dc <_ungetc_r+0x80>
    8434:	0000b024 	.word	0x0000b024
    8438:	0000b044 	.word	0x0000b044
    843c:	0000b004 	.word	0x0000b004

00008440 <_write_r>:
    8440:	b570      	push	{r4, r5, r6, lr}
    8442:	0005      	movs	r5, r0
    8444:	0008      	movs	r0, r1
    8446:	0011      	movs	r1, r2
    8448:	2200      	movs	r2, #0
    844a:	4c06      	ldr	r4, [pc, #24]	; (8464 <_write_r+0x24>)
    844c:	6022      	str	r2, [r4, #0]
    844e:	001a      	movs	r2, r3
    8450:	f7fa faee 	bl	2a30 <_write>
    8454:	1c43      	adds	r3, r0, #1
    8456:	d103      	bne.n	8460 <_write_r+0x20>
    8458:	6823      	ldr	r3, [r4, #0]
    845a:	2b00      	cmp	r3, #0
    845c:	d000      	beq.n	8460 <_write_r+0x20>
    845e:	602b      	str	r3, [r5, #0]
    8460:	bd70      	pop	{r4, r5, r6, pc}
    8462:	46c0      	nop			; (mov r8, r8)
    8464:	20003938 	.word	0x20003938

00008468 <_close_r>:
    8468:	2300      	movs	r3, #0
    846a:	b570      	push	{r4, r5, r6, lr}
    846c:	4c06      	ldr	r4, [pc, #24]	; (8488 <_close_r+0x20>)
    846e:	0005      	movs	r5, r0
    8470:	0008      	movs	r0, r1
    8472:	6023      	str	r3, [r4, #0]
    8474:	f7fa fb16 	bl	2aa4 <_close>
    8478:	1c43      	adds	r3, r0, #1
    847a:	d103      	bne.n	8484 <_close_r+0x1c>
    847c:	6823      	ldr	r3, [r4, #0]
    847e:	2b00      	cmp	r3, #0
    8480:	d000      	beq.n	8484 <_close_r+0x1c>
    8482:	602b      	str	r3, [r5, #0]
    8484:	bd70      	pop	{r4, r5, r6, pc}
    8486:	46c0      	nop			; (mov r8, r8)
    8488:	20003938 	.word	0x20003938

0000848c <_fstat_r>:
    848c:	2300      	movs	r3, #0
    848e:	b570      	push	{r4, r5, r6, lr}
    8490:	4c06      	ldr	r4, [pc, #24]	; (84ac <_fstat_r+0x20>)
    8492:	0005      	movs	r5, r0
    8494:	0008      	movs	r0, r1
    8496:	0011      	movs	r1, r2
    8498:	6023      	str	r3, [r4, #0]
    849a:	f7fa fb06 	bl	2aaa <_fstat>
    849e:	1c43      	adds	r3, r0, #1
    84a0:	d103      	bne.n	84aa <_fstat_r+0x1e>
    84a2:	6823      	ldr	r3, [r4, #0]
    84a4:	2b00      	cmp	r3, #0
    84a6:	d000      	beq.n	84aa <_fstat_r+0x1e>
    84a8:	602b      	str	r3, [r5, #0]
    84aa:	bd70      	pop	{r4, r5, r6, pc}
    84ac:	20003938 	.word	0x20003938

000084b0 <_isatty_r>:
    84b0:	2300      	movs	r3, #0
    84b2:	b570      	push	{r4, r5, r6, lr}
    84b4:	4c06      	ldr	r4, [pc, #24]	; (84d0 <_isatty_r+0x20>)
    84b6:	0005      	movs	r5, r0
    84b8:	0008      	movs	r0, r1
    84ba:	6023      	str	r3, [r4, #0]
    84bc:	f7fa fafa 	bl	2ab4 <_isatty>
    84c0:	1c43      	adds	r3, r0, #1
    84c2:	d103      	bne.n	84cc <_isatty_r+0x1c>
    84c4:	6823      	ldr	r3, [r4, #0]
    84c6:	2b00      	cmp	r3, #0
    84c8:	d000      	beq.n	84cc <_isatty_r+0x1c>
    84ca:	602b      	str	r3, [r5, #0]
    84cc:	bd70      	pop	{r4, r5, r6, pc}
    84ce:	46c0      	nop			; (mov r8, r8)
    84d0:	20003938 	.word	0x20003938

000084d4 <__locale_ctype_ptr_l>:
    84d4:	30ec      	adds	r0, #236	; 0xec
    84d6:	6800      	ldr	r0, [r0, #0]
    84d8:	4770      	bx	lr
	...

000084dc <__locale_ctype_ptr>:
    84dc:	4b04      	ldr	r3, [pc, #16]	; (84f0 <__locale_ctype_ptr+0x14>)
    84de:	681b      	ldr	r3, [r3, #0]
    84e0:	6a1b      	ldr	r3, [r3, #32]
    84e2:	2b00      	cmp	r3, #0
    84e4:	d100      	bne.n	84e8 <__locale_ctype_ptr+0xc>
    84e6:	4b03      	ldr	r3, [pc, #12]	; (84f4 <__locale_ctype_ptr+0x18>)
    84e8:	33ec      	adds	r3, #236	; 0xec
    84ea:	6818      	ldr	r0, [r3, #0]
    84ec:	4770      	bx	lr
    84ee:	46c0      	nop			; (mov r8, r8)
    84f0:	20000118 	.word	0x20000118
    84f4:	2000017c 	.word	0x2000017c

000084f8 <_lseek_r>:
    84f8:	b570      	push	{r4, r5, r6, lr}
    84fa:	0005      	movs	r5, r0
    84fc:	0008      	movs	r0, r1
    84fe:	0011      	movs	r1, r2
    8500:	2200      	movs	r2, #0
    8502:	4c06      	ldr	r4, [pc, #24]	; (851c <_lseek_r+0x24>)
    8504:	6022      	str	r2, [r4, #0]
    8506:	001a      	movs	r2, r3
    8508:	f7fa fad6 	bl	2ab8 <_lseek>
    850c:	1c43      	adds	r3, r0, #1
    850e:	d103      	bne.n	8518 <_lseek_r+0x20>
    8510:	6823      	ldr	r3, [r4, #0]
    8512:	2b00      	cmp	r3, #0
    8514:	d000      	beq.n	8518 <_lseek_r+0x20>
    8516:	602b      	str	r3, [r5, #0]
    8518:	bd70      	pop	{r4, r5, r6, pc}
    851a:	46c0      	nop			; (mov r8, r8)
    851c:	20003938 	.word	0x20003938

00008520 <__ascii_mbtowc>:
    8520:	b082      	sub	sp, #8
    8522:	2900      	cmp	r1, #0
    8524:	d100      	bne.n	8528 <__ascii_mbtowc+0x8>
    8526:	a901      	add	r1, sp, #4
    8528:	1e10      	subs	r0, r2, #0
    852a:	d006      	beq.n	853a <__ascii_mbtowc+0x1a>
    852c:	2b00      	cmp	r3, #0
    852e:	d006      	beq.n	853e <__ascii_mbtowc+0x1e>
    8530:	7813      	ldrb	r3, [r2, #0]
    8532:	600b      	str	r3, [r1, #0]
    8534:	7810      	ldrb	r0, [r2, #0]
    8536:	1e43      	subs	r3, r0, #1
    8538:	4198      	sbcs	r0, r3
    853a:	b002      	add	sp, #8
    853c:	4770      	bx	lr
    853e:	2002      	movs	r0, #2
    8540:	4240      	negs	r0, r0
    8542:	e7fa      	b.n	853a <__ascii_mbtowc+0x1a>

00008544 <memchr>:
    8544:	b2c9      	uxtb	r1, r1
    8546:	1882      	adds	r2, r0, r2
    8548:	4290      	cmp	r0, r2
    854a:	d101      	bne.n	8550 <memchr+0xc>
    854c:	2000      	movs	r0, #0
    854e:	4770      	bx	lr
    8550:	7803      	ldrb	r3, [r0, #0]
    8552:	428b      	cmp	r3, r1
    8554:	d0fb      	beq.n	854e <memchr+0xa>
    8556:	3001      	adds	r0, #1
    8558:	e7f6      	b.n	8548 <memchr+0x4>

0000855a <_realloc_r>:
    855a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    855c:	0007      	movs	r7, r0
    855e:	000d      	movs	r5, r1
    8560:	0016      	movs	r6, r2
    8562:	2900      	cmp	r1, #0
    8564:	d105      	bne.n	8572 <_realloc_r+0x18>
    8566:	0011      	movs	r1, r2
    8568:	f7fe f9d8 	bl	691c <_malloc_r>
    856c:	0004      	movs	r4, r0
    856e:	0020      	movs	r0, r4
    8570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8572:	2a00      	cmp	r2, #0
    8574:	d103      	bne.n	857e <_realloc_r+0x24>
    8576:	f7fe f987 	bl	6888 <_free_r>
    857a:	0034      	movs	r4, r6
    857c:	e7f7      	b.n	856e <_realloc_r+0x14>
    857e:	f000 f833 	bl	85e8 <_malloc_usable_size_r>
    8582:	002c      	movs	r4, r5
    8584:	4286      	cmp	r6, r0
    8586:	d9f2      	bls.n	856e <_realloc_r+0x14>
    8588:	0031      	movs	r1, r6
    858a:	0038      	movs	r0, r7
    858c:	f7fe f9c6 	bl	691c <_malloc_r>
    8590:	1e04      	subs	r4, r0, #0
    8592:	d0ec      	beq.n	856e <_realloc_r+0x14>
    8594:	0029      	movs	r1, r5
    8596:	0032      	movs	r2, r6
    8598:	f7fe f952 	bl	6840 <memcpy>
    859c:	0029      	movs	r1, r5
    859e:	0038      	movs	r0, r7
    85a0:	f7fe f972 	bl	6888 <_free_r>
    85a4:	e7e3      	b.n	856e <_realloc_r+0x14>
	...

000085a8 <_read_r>:
    85a8:	b570      	push	{r4, r5, r6, lr}
    85aa:	0005      	movs	r5, r0
    85ac:	0008      	movs	r0, r1
    85ae:	0011      	movs	r1, r2
    85b0:	2200      	movs	r2, #0
    85b2:	4c06      	ldr	r4, [pc, #24]	; (85cc <_read_r+0x24>)
    85b4:	6022      	str	r2, [r4, #0]
    85b6:	001a      	movs	r2, r3
    85b8:	f7fa fa18 	bl	29ec <_read>
    85bc:	1c43      	adds	r3, r0, #1
    85be:	d103      	bne.n	85c8 <_read_r+0x20>
    85c0:	6823      	ldr	r3, [r4, #0]
    85c2:	2b00      	cmp	r3, #0
    85c4:	d000      	beq.n	85c8 <_read_r+0x20>
    85c6:	602b      	str	r3, [r5, #0]
    85c8:	bd70      	pop	{r4, r5, r6, pc}
    85ca:	46c0      	nop			; (mov r8, r8)
    85cc:	20003938 	.word	0x20003938

000085d0 <__ascii_wctomb>:
    85d0:	1e0b      	subs	r3, r1, #0
    85d2:	d004      	beq.n	85de <__ascii_wctomb+0xe>
    85d4:	2aff      	cmp	r2, #255	; 0xff
    85d6:	d904      	bls.n	85e2 <__ascii_wctomb+0x12>
    85d8:	238a      	movs	r3, #138	; 0x8a
    85da:	6003      	str	r3, [r0, #0]
    85dc:	3b8b      	subs	r3, #139	; 0x8b
    85de:	0018      	movs	r0, r3
    85e0:	4770      	bx	lr
    85e2:	700a      	strb	r2, [r1, #0]
    85e4:	2301      	movs	r3, #1
    85e6:	e7fa      	b.n	85de <__ascii_wctomb+0xe>

000085e8 <_malloc_usable_size_r>:
    85e8:	1f0b      	subs	r3, r1, #4
    85ea:	681b      	ldr	r3, [r3, #0]
    85ec:	1f18      	subs	r0, r3, #4
    85ee:	2b00      	cmp	r3, #0
    85f0:	da01      	bge.n	85f6 <_malloc_usable_size_r+0xe>
    85f2:	580b      	ldr	r3, [r1, r0]
    85f4:	18c0      	adds	r0, r0, r3
    85f6:	4770      	bx	lr
    85f8:	42000400 	.word	0x42000400
    85fc:	42000800 	.word	0x42000800
    8600:	42000c00 	.word	0x42000c00
    8604:	42001000 	.word	0x42001000
    8608:	42001400 	.word	0x42001400
    860c:	42001800 	.word	0x42001800
    8610:	000022a2 	.word	0x000022a2
    8614:	0000229e 	.word	0x0000229e
    8618:	0000229e 	.word	0x0000229e
    861c:	000022d0 	.word	0x000022d0
    8620:	000022d0 	.word	0x000022d0
    8624:	000022ba 	.word	0x000022ba
    8628:	000022a8 	.word	0x000022a8
    862c:	000022c0 	.word	0x000022c0
    8630:	00002494 	.word	0x00002494
    8634:	00002474 	.word	0x00002474
    8638:	00002474 	.word	0x00002474
    863c:	000024ca 	.word	0x000024ca
    8640:	00002486 	.word	0x00002486
    8644:	000024a2 	.word	0x000024a2
    8648:	00002478 	.word	0x00002478
    864c:	000024b0 	.word	0x000024b0
    8650:	65570a0d 	.word	0x65570a0d
    8654:	6d6f636c 	.word	0x6d6f636c
    8658:	6f742065 	.word	0x6f742065
    865c:	65687420 	.word	0x65687420
    8660:	46555020 	.word	0x46555020
    8664:	7361622d 	.word	0x7361622d
    8668:	43206465 	.word	0x43206465
    866c:	53204e41 	.word	0x53204e41
    8670:	72756365 	.word	0x72756365
    8674:	20797469 	.word	0x20797469
    8678:	6f6d6544 	.word	0x6f6d6544
    867c:	00000d21 	.word	0x00000d21
    8680:	73657250 	.word	0x73657250
    8684:	68272073 	.word	0x68272073
    8688:	6f742027 	.word	0x6f742027
    868c:	67656220 	.word	0x67656220
    8690:	77206e69 	.word	0x77206e69
    8694:	20687469 	.word	0x20687469
    8698:	64726168 	.word	0x64726168
    869c:	65646f63 	.word	0x65646f63
    86a0:	61762064 	.word	0x61762064
    86a4:	7365756c 	.word	0x7365756c
    86a8:	0000203a 	.word	0x0000203a
    86ac:	00006325 	.word	0x00006325
    86b0:	20776f48 	.word	0x20776f48
    86b4:	6c756f63 	.word	0x6c756f63
    86b8:	6f792064 	.word	0x6f792064
    86bc:	2e2e2e75 	.word	0x2e2e2e75
    86c0:	0000000d 	.word	0x0000000d
    86c4:	55500a0d 	.word	0x55500a0d
    86c8:	65722046 	.word	0x65722046
    86cc:	6e6f7073 	.word	0x6e6f7073
    86d0:	20736573 	.word	0x20736573
    86d4:	6c6c6977 	.word	0x6c6c6977
    86d8:	20656220 	.word	0x20656220
    86dc:	64726168 	.word	0x64726168
    86e0:	65646f63 	.word	0x65646f63
    86e4:	61762064 	.word	0x61762064
    86e8:	7365756c 	.word	0x7365756c
    86ec:	726f6620 	.word	0x726f6620
    86f0:	726e6520 	.word	0x726e6520
    86f4:	6d6c6c6f 	.word	0x6d6c6c6f
    86f8:	20746e65 	.word	0x20746e65
    86fc:	20646e61 	.word	0x20646e61
    8700:	68747561 	.word	0x68747561
    8704:	69746e65 	.word	0x69746e65
    8708:	69746163 	.word	0x69746163
    870c:	000d6e6f 	.word	0x000d6e6f
    8710:	72617453 	.word	0x72617453
    8714:	25203a74 	.word	0x25203a74
    8718:	000a0d64 	.word	0x000a0d64
    871c:	6f726e45 	.word	0x6f726e45
    8720:	656d6c6c 	.word	0x656d6c6c
    8724:	203a746e 	.word	0x203a746e
    8728:	6c696146 	.word	0x6c696146
    872c:	73206465 	.word	0x73206465
    8730:	65767265 	.word	0x65767265
    8734:	75702072 	.word	0x75702072
    8738:	63696c62 	.word	0x63696c62
    873c:	79656b20 	.word	0x79656b20
    8740:	6e656720 	.word	0x6e656720
    8744:	74617265 	.word	0x74617265
    8748:	216e6f69 	.word	0x216e6f69
    874c:	0000000d 	.word	0x0000000d
    8750:	6f726e45 	.word	0x6f726e45
    8754:	656d6c6c 	.word	0x656d6c6c
    8758:	203a746e 	.word	0x203a746e
    875c:	6c696146 	.word	0x6c696146
    8760:	4e206465 	.word	0x4e206465
    8764:	2065646f 	.word	0x2065646f
    8768:	50206925 	.word	0x50206925
    876c:	696c6275 	.word	0x696c6275
    8770:	654b2063 	.word	0x654b2063
    8774:	65472079 	.word	0x65472079
    8778:	6172656e 	.word	0x6172656e
    877c:	6e6f6974 	.word	0x6e6f6974
    8780:	00000a0d 	.word	0x00000a0d

00008784 <PARAMETER_d>:
    8784:	00000142 00000000 000e4000 00000000     B........@......
    8794:	00000000 01fc0c8d 0085223c 020fcb38     ........<"..8...
    87a4:	0211995f 005e472f                       _.../G^.

000087ac <FIXED_BASE_TABLE>:
    87ac:	0303e631 028d3ce9 02b5fe18 02fc7540     1....<......@u..
    87bc:	00287460 00f90353 0398bdf9 02cdee02     `t(.S...........
    87cc:	00de2e1a 000c3ba0 00937edc 03c3e62c     .....;...~..,...
    87dc:	0055590b 01e093c3 00740b7c 03a01366     .YU.....|.t.f...
    87ec:	0048e448 017a5b32 02e4ea55 004ffcf5     H.H.2[z.U.....O.
    87fc:	03da42bb 02bf32ea 017c6297 00dd55b2     .B...2...b|..U..
    880c:	005948d1 0330684c 02268e4c 01f27a81     .HY.Lh0.L.&..z..
    881c:	01c828d0 000caf2b 01188787 02e8063f     .(..+.......?...
    882c:	012a83a8 02062374 00554612 009f9b77     ..*.t#...FU.w...
    883c:	00f30cf0 02049b0b 03e2e134 001baeea     ........4.......
    884c:	01faf900 01096984 03789006 004b869b     .....i....x...K.
    885c:	0018f7cd 02556066 033c2684 036eb6dc     ....f`U..&<...n.
    886c:	03bab39e 00448e05 012829b0 03ccda27     ......D..)(.'...
    887c:	03db4bf2 032ca55e 006d911d 003c03ee     .K..^.,...m...<.
    888c:	00d4f6f7 025019f2 0016eafb 0006c543     ......P.....C...
    889c:	01afa125 03d15c4f 0364d2ea 01619228     %...O\....d.(.a.
    88ac:	00729630 01313ef2 01ddc7e7 0306961b     0.r..>1.........
    88bc:	03e2ff8a 004f41c7 019790ac 0188eb96     .....AO.........
    88cc:	00a42408 021910cc 004d3385 00dd7487     .$.......3M..t..
    88dc:	01a59927 02114fc5 03839663 0074df72     '....O..c...r.t.
    88ec:	013c110b 0018c964 030d8c9a 00457f92     ..<.d.........E.
    88fc:	00076bd4 02bff3d9 00679975 03a08766     .k......u.g.f...
    890c:	0051f3b8 00249240 00965a73 016e5852     ..Q.@.$.sZ..RXn.
    891c:	03706d69 028a20a7 0028aac8 01f7a57b     imp.. ....(.{...
    892c:	007014ca 0200e41f 03a27c0f 00441ca9     ..p......|....D.
    893c:	03f7241e 028e2ae2 037f4e1a 02bf20ca     .$...*...N... ..
    894c:	0058f28c 025400c6 02be2e3e 0063ecad     ..X...T.>.....c.
    895c:	0018a13a 0034b6d1 02f15097 02632ace     :.....4..P...*c.
    896c:	01c49f54 024005f6 006dbe77 0048e8bc     T.....@.w.m...H.
    897c:	03ddaa05 0200663b 016fc8eb 00637192     ....;f....o..qc.
    898c:	01ed81fa 00b1c86f 016abc5e 03bb5a01     ....o...^.j..Z..
    899c:	004ede70 00975810 03366d6d 01aa88f3     p.N..X..mm6.....
    89ac:	0064bc2a 004752fd 03734414 01e53ac7     *.d..RG..Ds..:..
    89bc:	00662318 034b211a 0011ddf7 02b1a34e     .#f..!K.....N...
    89cc:	00ec1bdc 02770261 02cdeac1 00465575     ....a.w.....uUF.
    89dc:	02638d2b 026117e0 018ce40b 0141e40a     +.c...a.......A.
    89ec:	00488940 01b4f131 02e4e940 032fbbed     @.H.1...@...../.
    89fc:	0034a226 0004f356 015b278b 03761d44     &.4.V....'[.D.v.
    8a0c:	0058a457 0395364a 0056f25e 020c977e     W.X.J6..^.V.~...
    8a1c:	01307373 0099692d 01061f5d 00078fca     ss0.-i..].......
    8a2c:	02cc22a1 02cb7b5d 02bf63bb 0214f770     ."..]{...c..p...
    8a3c:	00117b28 01c2baa2 00dd9f2e 00a8f43f     ({..........?...
    8a4c:	009783aa 0073079e 0215796d 01e64ad6     ......s.my...J..
    8a5c:	02f92017 00520367 002e7772 03372916     . ..g.R.rw...)7.
    8a6c:	02620d59 0176dbe0 01adebdd 00258f17     Y.b...v.......%.
    8a7c:	0168391b 00ce3f58 013a4308 017e69cd     .9h.X?...C:..i~.
    8a8c:	00728592 03e85114 0303f413 02b51862     ..r..Q......b...
    8a9c:	039d08eb 0053259e 033b1a68 000c6a12     .....%S.h.;..j..
    8aac:	031fcfe0 01987e81 001a4f1d 01c928a7     .....~...O...(..
    8abc:	035505a3 02a6a2dd 006b7c65 0060185c     ..U.....e|k.\.`.
    8acc:	006da9b4 0025c5f7 03c03498 012d373f     ..m...%..4..?7-.
    8adc:	00606209 01fa7e8d 03a9be81 008a0a41     .b`..~......A...
    8aec:	01bc9dc5 004a4fe0 029e80f0 0094ea7b     .....OJ.....{...
    8afc:	017337bb 022f32c4 00419a92 029a039e     .7s..2/...A.....
    8b0c:	008ef99a 014bb843 02ba5ca0 0001b2d1     ....C.K..\......
    8b1c:	03051231 02216134 01dd7a75 0083325e     1...4a!.uz..^2..
    8b2c:	0054df1e 022f22dd 0241bf8f 01a0f91d     ..T.."/...A.....
    8b3c:	025d7f7c 004e36e9 03747634 021c5d1a     |.]..6N.4vt..]..
    8b4c:	03433d81 02ebbb84 003e5e31 0173baa3     .=C.....1^>...s.
    8b5c:	02a025e5 037c6e4d 0365f3f9 004b852a     .%..Mn|...e.*.K.
    8b6c:	00418b9e 02cd19c5 02f88e08 026cbf9b     ..A...........l.
    8b7c:	00283d71 005c180b 00e74b79 015c8b73     q=(...\.yK..s.\.
    8b8c:	03bc474b 0075acfc 00561876 001ddea3     KG....u.v.V.....
    8b9c:	00c4b8f4 01029c4d 000c54ac 02baee08     ....M....T......
    8bac:	038a1f59 008bfb92 01401a86 006f357e     Y.........@.~5o.
    8bbc:	011e6971 000cc67b 03d40c59 03be476b     qi..{...Y...kG..
    8bcc:	00747c45 012f816e 0021aa47 02f7dde4     E|t.n./.G.!.....
    8bdc:	03b6cecf 005dcb27 021dd2ee 03711b3e     ....'.].....>.q.
    8bec:	0249843f 027dc259 0051551f 01ed9bdc     ?.I.Y.}..UQ.....
    8bfc:	014d3dd8 0307fb54 02cc1cfe 00453455     .=M.T.......U4E.
    8c0c:	03cab70b 01dcf8e0 034dff24 0179d633     ........$.M.3.y.
    8c1c:	00679be2 003eee29 01fb7ca5 00f66da1     ..g.).>..|...m..
    8c2c:	02e35b70 003dc9e5 013fb75b 01432e90     p[....=.[.?...C.
    8c3c:	0137f56a 016f16a1 001e6531 002c7213     j.7...o.1e...r,.
    8c4c:	024090a0 0252e5ff 0323d094 0073c9d8     ..@...R...#...s.
    8c5c:	03198c8f 00dee18c 00f333c6 02cfb505     .........3......
    8c6c:	00534f84 02dd6902 004f9cb7 033afad3     .OS..i....O...:.
    8c7c:	0250737c 005ed57e 0257306e 03f8074a     |sP.~.^.n0W.J...
    8c8c:	013f95a6 03a8d11c 0073b63d 031c2bf3     ..?.....=.s..+..
    8c9c:	02dc15c3 018db39c 03927c68 002df8c6     ........h|....-.
    8cac:	037797e4 02f0d259 01062661 032efafa     ..w.Y...a&......
    8cbc:	00501ae7 00959643 00aa237a 01d515b5     ..P.C...z#......
    8ccc:	00a04700 00037275 001bb928 0315e88c     .G..ur..(.......
    8cdc:	00fc6010 01c55555 00378b31 01a02cf1     .`..UU..1.7..,..
    8cec:	00fe908a 01b29f88 02e1435f 005f0047     ........_C..G._.
    8cfc:	00402daa 011eb8ca 022bc4d2 009ea142     .-@.......+.B...
    8d0c:	000d0306 00a443f5 019766a2 03089b4e     .....C...f..N...
    8d1c:	01acb5b6 006ec968 02a1d987 000b823f     ....h.n.....?...
    8d2c:	03600de2 034fca35 005c64e1 0261bfb7     ..`.5.O..d\...a.
    8d3c:	0345efbd 0334c157 00db75d4 0056392d     ..E.W.4..u..-9V.
    8d4c:	0119155c 011e362f 02afde25 00b4f4cd     \.../6..%.......
    8d5c:	00146d4f 014e15e8 02f802fe 010c09bf     Om....N.........
    8d6c:	0269ab7c 002b185a 0152ab7b 0149ecfb     |.i.Z.+.{.R...I.
    8d7c:	01e80926 0051cc40 0067997e 007cc541     &...@.Q.~.g.A.|.
    8d8c:	03d3fd25 01a7ab58 031feb26 0036f800     %...X...&.....6.
    8d9c:	000456d9 000b8c90 0297bd03 00d902f1     .V..............
    8dac:	004372e4 0350d898 0132aed1 03cbf914     .rC...P...2.....
    8dbc:	03eb2688 0075d25a 0255cbfe 01645d9d     .&..Z.u...U..]d.
    8dcc:	00b07794 01985ff1 0074db21 0166d0c9     .w..._..!.t...f.
    8ddc:	01ec8909 03b23705 01642105 001d543b     .....7...!d.;T..
    8dec:	00428783 00a02d11 003ef19c 03f62db3     ..B..-....>..-..
    8dfc:	00352309 0068ae72 00cf5ab0 019f4378     .#5.r.h..Z..xC..
    8e0c:	00688f00 004ec067 03d05bb5 020db868     ..h.g.N..[..h...
    8e1c:	02fe39d9 037fc893 0044fe1a 017efb4a     .9........D.J.~.
    8e2c:	01af0f39 00150a29 01a0d685 002efec8     9...)...........
    8e3c:	03194bca 0067027e 012062fe 034e54f3     .K..~.g..b ..TN.
    8e4c:	0018cc07 01c0b9e0 03fc85f2 03cee5bd     ................
    8e5c:	0159606a 00671aa7 00f7d1a2 030ceb8a     j`Y...g.........
    8e6c:	023fee1c 0124de82 001b6f25 01babb83     ..?...$.%o......
    8e7c:	000f4599 01211515 00db5622 0074b956     .E....!."V..V.t.
    8e8c:	0296f869 025eb93a 010bdbdb 00627894     i...:.^......xb.
    8e9c:	001507ce 02b93b13 0393553e 00929796     .....;..>U......
    8eac:	017c1658 006a8176 01a833ed 01014879     X.|.v.j..3..yH..
    8ebc:	036442e9 00cac917 003bdea5 03d52693     .Bd.......;..&..
    8ecc:	01da5d7f 00ed6bea 0122e9b5 0064b948     .]...k....".H.d.
    8edc:	00e33ec7 014b4065 01f259db 0369558e     .>..e@K..Y...Ui.
    8eec:	0071cf65 035a8138 01cec7f6 01c22ede     e.q.8.Z.........
    8efc:	00edb18b 0012e4d1 01185517 026c3099     .........U...0l.
    8f0c:	03dd09d1 03495ed7 0077a011 02cd84e4     .....^I...w.....
    8f1c:	037172ab 012d11fe 005478d2 0046844e     .rq...-..xT.N.F.
    8f2c:	004220df 008e8c64 030997a4 031d1fa3     . B.d...........
    8f3c:	005b3165 0335e22e 0197bab7 0195b1c6     e1[...5.........
    8f4c:	015bf115 007802b5 015bd2de 00b7bd00     ..[...x...[.....
    8f5c:	026ad85a 021e55c5 0017f2ab 0060c1e5     Z.j..U........`.
    8f6c:	03db4d48 00e6a19c 0346f902 00122a7a     HM........F.z*..
    8f7c:	005bf766 026ef219 01acf5b7 0275342b     f.[...n.....+4u.
    8f8c:	0020fb00 03a28538 009a89ca 00bde975     .. .8.......u...
    8f9c:	03a43508 007041b4 00dab057 00044cd6     .5...Ap.W....L..
    8fac:	002433b3 019bc349 003d398b 03cd4708     .3$.I....9=..G..
    8fbc:	01666680 0009691a 0027364e 001eae24     .ff..i..N6'.$...
    8fcc:	0036108c 035ad813 0196866d 00de2420     ..6...Z.m... $..
    8fdc:	00171308 0125dcfd 02b5a45c 031ca57c     ......%.\...|...
    8fec:	02e25c13 0034b06c 0335abf2 03fa39c7     .\..l.4...5..9..
    8ffc:	00db9dca 00663551 00698331 03af075b     ....Q5f.1.i.[...
    900c:	01d9d990 02b6d628 03955674 00200950     ....(...tV..P. .
    901c:	00dd9074 018ff0fb 013a2d4f 01c50ab0     t.......O-:.....
    902c:	00747331 01319356 0000c201 038ba96b     1st.V.1.....k...
    903c:	0380910d 002c20ff 026ac01a 025446b4     ..... ,...j..FT.
    904c:	03cf6488 0086665f 004ee327 030bf8ea     .d.._f..'.N.....
    905c:	03f9b9c3 026d715f 02d29b42 006b617f     ...._qm.B....ak.
    906c:	012f7324 01b72871 00277491 03c2191a     $s/.q(...t'.....
    907c:	003c8269 0037e04b 00843132 0142cc24     i.<.K.7.21..$.B.
    908c:	013e4569 004e480b 027fe35e 03bcec26     iE>..HN.^...&...
    909c:	004b2c5f 037913f6 0031a501 00a407b9     _,K...y...1.....
    90ac:	00a79250 025ab79f 00f29733 000ba7e0     P.....Z.3.......
    90bc:	0274d8ea 022c8162 01adca7a 0204389b     ..t.b.,.z....8..
    90cc:	0046f4c7 00a1128a 01c6b3a5 02811461     ..F.........a...
    90dc:	00095256 0044db55 03f18d5c 02278692     VR..U.D.\.....'.
    90ec:	006b27f8 00a90fcc 004d4f17 031cffad     .'k......OM.....
    90fc:	0265d9ae 01aca33a 0164934e 00625477     ..e.:...N.d.wTb.
    910c:	0225136e 0148c3b0 0211dd85 0341e364     n.%...H.....d.A.
    911c:	001c544d 023f63ba 03a65a7d 0138212f     MT...c?.}Z../!8.
    912c:	03725277 00069af1 03e5c256 02f3d033     wRr.....V...3...
    913c:	03595305 02492eee 0063ae90 03b7de06     .SY...I...c.....
    914c:	00425de4 0043ee45 03ce7f00 0009780c     .]B.E.C......x..
    915c:	03798871 02be39fa 03a37827 01b1dd5d     q.y..9..'x..]...
    916c:	003ace8a 02e055ba 03c184cc 0292b79d     ..:..U..........
    917c:	01eaab3a 00561dc0 020d2673 0108b660     :.....V.s&..`...
    918c:	013487e4 020f82bd 006b85df 02d8526b     ..4.......k.kR..
    919c:	0146b077 002bd1f1 039455c5 0035ead8     w.F...+..U....5.
    91ac:	03c79dd4 01bbdb0c 03de46da 01349653     .........F..S.4.
    91bc:	005f2ea0 0027d5fa 00df4330 0331b910     .._...'.0C....1.
    91cc:	00401ec0 0053b540 014ba5a3 03c6628f     ..@.@.S...K..b..
    91dc:	00195810 00966ea5 004463bd 002acf9e     .X...n...cD...*.
    91ec:	02252b3b 009ce32b 0187590d 00787117     ;+%.+....Y...qx.
    91fc:	011fe211 02b86cfd 02463253 00fd4d6d     .....l..S2F.mM..
    920c:	00409e4b 025e49de 00db4436 0336a3a2     K.@..I^.6D....6.
    921c:	000a7084 0019d2b1 02aadd90 017d010d     .p............}.
    922c:	00b19283 00541464 000942a3 02828279     ....d.T..B..y...
    923c:	0244c61d 01f9cc18 030f2a38 003afe96     ..D.....8*....:.
    924c:	01230693 02006d24 010919f1 02e1897f     ..#.$m..........
    925c:	0039e28d 01d44c8e 02d40d57 0280d9fa     ..9..L..W.......
    926c:	0369ca6c 00145155 014d76d5 033e0407     l.i.UQ...vM...>.
    927c:	02c68d3c 006a30ad 005a0faa 0354ea8a     <....0j...Z...T.
    928c:	019b2132 007733cc 038fd59b 0051052c     2!...3w.....,.Q.
    929c:	01ae9ff5 03853799 030243be 02280733     .....7...C..3.(.
    92ac:	00758611 016bf15e 039e4722 013d6089     ..u.^.k."G...`=.
    92bc:	00b49876 0035ff02 037d1cf9 03384f63     v.....5...}.cO8.
    92cc:	038f6cd3 023e56de 004f1de9 02dc41b4     .l...V>...O..A..
    92dc:	01a28918 01d2951e 00f08fdb 0061ad9e     ..............a.
    92ec:	00ebdb51 03fa9920 02cf3584 001cfe77     Q... ....5..w...
    92fc:	005d52fe 01f336d5 03920fab 0296a9af     .R]..6..........
    930c:	032602c5 001dfa03 03819a19 01cf51ff     ..&..........Q..
    931c:	000ed55f 0174d844 00697bf5 02399419     _...D.t..{i...9.
    932c:	01201111 0259fded 0119ff38 00618c94     .. ...Y.8.....a.
    933c:	008ef50c 025ffc7c 033c0f25 02e63764     ....|._.%.<.d7..
    934c:	0007c935 00ded5f6 01632f1e 0148fbb7     5......../c...H.
    935c:	001abc4c 001e9a0d 034cd4db 0338515f     L.........L._Q8.
    936c:	00994879 028658b5 0028396c 017605c3     yH...X..l9(...v.
    937c:	02568f71 027b1f50 00f69314 001e570f     q.V.P.{......W..
    938c:	00935787 01a68e41 01cce2af 01dbf740     .W..A.......@...
    939c:	00591ee3 00bc8633 02d637e2 015d1f77     ..Y.3....7..w.].
    93ac:	0146cbce 005464d6 029a86ae 03025ac7     ..F..dT......Z..
    93bc:	02b28afb 012fd96d 006ce2df 029d3e08     ....m./...l..>..
    93cc:	02a0a34b 026d03b3 007634b5 00638201     K.....m..4v...c.
    93dc:	013d193d 021f2993 016af949 0034edb5     =.=..)..I.j...4.
    93ec:	0050ddf7 00ad15a9 037d9f32 01f928d5     ..P.....2.}..(..
    93fc:	0262f16c 00392080 03d5a4fb 027d4837     l.b.. 9.....7H}.
    940c:	03ba9ce9 021ee1a9 00323bbc 0003c789     .........;2.....
    941c:	03e22a36 00055e13 02f7c880 0056ffdc     6*...^........V.
    942c:	0324c72d 03c368c6 00c163af 01991830     -.$..h...c..0...
    943c:	00700115 02c46a13 01edfd4e 03bc276f     ..p..j..N...o'..
    944c:	03fadc1d 001c069b 014a3c36 01c64f28     ........6<J.(O..
    945c:	01e3d8f4 012bc223 006d73e3 017d6634     ....#.+..sm.4f}.
    946c:	02caf64c 01ec8634 00e2ddfc 005b4047     L...4.......G@[.
    947c:	00a1cb1d 03eaedc7 02a46f34 032b2951     ........4o..Q)+.
    948c:	00054abb 00eda660 0372b742 01ef1e8c     .J..`...B.r.....
    949c:	02fe562f 006971ab 01db4eaf 00e155f7     /V...qi..N...U..
    94ac:	0367c413 0216c1e6 001e1585 03a26068     ..g.........h`..
    94bc:	01c11d33 02469d22 00cacf3a 0053b36d     3...".F.:...m.S.
    94cc:	00543d08 0148f05b 0314e011 00b17dcc     .=T.[.H......}..
    94dc:	004668e9 0117acd1 03cfaf90 0131abae     .hF...........1.
    94ec:	006a9c4e 0004037d 0390c68d 00463938     N.j.}.......89F.
    94fc:	0157568e 01569130 006b80cd 0329c032     .VW.0.V...k.2.).
    950c:	01faa295 01ab2730 017fbba6 005cc547     ....0'......G.\.
    951c:	0014ac75 01439093 01cd8344 01f976cf     u.....C.D....v..
    952c:	003f0915 00588052 038ac6d4 02f8f62c     ..?.R.X.....,...
    953c:	03153994 0027a899 03c2a5ed 0340e7cb     .9....'.......@.
    954c:	03eec0ac 03775604 004b4044 00a75958     .....Vw.D@K.XY..
    955c:	034627a4 033a1c04 02f39c74 00242551     .'F...:.t...Q%$.
    956c:	01f87f05 02be5ad4 01815d95 0083e027     .....Z...]..'...
    957c:	00029888 039483c5 03d97dce 00b43b27     .........}..';..
    958c:	0117d0d9 002ef607 034fb8b9 01af724f     ..........O.Or..
    959c:	03b8acb6 02d21d5a 002b86c9 039867a1     ....Z.....+..g..
    95ac:	02f6b826 029aaf8e 006139bf 00441e70     &........9a.p.D.
    95bc:	00cc1289 0094c0cc 02992fdc 016a2d35     ........./..5-j.
    95cc:	0047d8d6 00ae74be 00edbe8c 019d58c0     ..G..t.......X..
    95dc:	00f30ef6 001ca869 0018f2a6 03ac5444     ....i.......DT..
    95ec:	03ff5699 019367d3 003da047 013aab59     .V...g..G.=.Y.:.
    95fc:	01c810cf 017ff361 0184b2e1 002fa911     ....a........./.
    960c:	002f1cac 015f6843 00619a40 02e4ce97     ../.Ch_.@.a.....
    961c:	0048a219 015f0bc5 01040834 01dad423     ..H..._.4...#...
    962c:	01411a82 0073f889 027421b8 0354c4b1     ..A...s..!t...T.
    963c:	0222e1ba 006cda39 00419477 004e0dff     ..".9.l.w.A...N.
    964c:	01c69e79 031c28cc 0391519f 004b4564     y....(...Q..dEK.
    965c:	03e52093 027c5aab 03ea9775 03735d7e     . ...Z|.u...~]s.
    966c:	00391b71 034ef798 0301a52a 0130d2a1     q.9...N.*.....0.
    967c:	01515110 00023087 03aa1aa1 02b87ff3     .QQ..0..........
    968c:	021e74b7 00cb5ccd 0064e26f 010b54b9     .t...\..o.d..T..
    969c:	011c0e2f 02e158da 01bfabb3 00148cfa     /....X..........
    96ac:	01c2cc3d 01b5351e 003de375 02a34c55     =....5..u.=.UL..
    96bc:	0025d44e 02bb2c43 0322fbc9 0337fd82     N.%.C,...."...7.
    96cc:	000cf49f 002c2047 03dad260 00cf660d     ....G ,.`....f..
    96dc:	03b7d5bd 005e8ce0 00779431 02a583f2     ......^.1.w.....
    96ec:	01c75a5f 01bf2120 009ca889 003c7c41     _Z.. !......A|<.
    96fc:	01f03ad3 02ef7ebc 0370492e 0031a2d8     .:...~...Ip...1.
    970c:	005d6103 02ee75d1 038a14ee 03636ca6     .a]..u.......lc.
    971c:	00d1dc68 0012404b 02667e4f 00f118c9     h...K@..O~f.....
    972c:	023b0be1 0245be6f 002bd261 01c80f89     ..;.o.E.a.+.....
    973c:	00fe32eb 00b4886e 02285e53 0074520d     .2..n...S^(..Rt.
    974c:	024cf97e 0171d140 02b021e1 0078794f     ~.L.@.q..!..Oyx.
    975c:	005cee74 0399cda1 0223782b 0062c8d0     t.\.....+x#...b.
    976c:	02587302 00625812 01c0e934 00d0dcc8     .sX..Xb.4.......
    977c:	037a4431 01a31093 0060bbc7 0010e143     1Dz.......`.C...
    978c:	01c7efcf 015b8aba 027c52a4 0037b8ea     ......[..R|...7.
    979c:	000213ff 01bb1971 0045c8d9 00a3fdde     ....q.....E.....
    97ac:	0074a088 02f607a3 02dc6536 00706bed     ..t.....6e...kp.
    97bc:	01c45872 0017e866 024059cf 02e63814     rX..f....Y@..8..
    97cc:	02f09ace 03125245 0068552a 031b3c47     ....ER..*Uh.G<..
    97dc:	00a5c6eb 01b704cd 02f37788 0068442e     .........w...Dh.
    97ec:	02867595 00a6e303 0247a196 034d8d7e     .u........G.~.M.
    97fc:	006a6955 02e393ad 02d1783c 010c46fa     Uij.....<x...F..
    980c:	03d3f3c1 0066dd3e 01dc7df1 02deaf3f     ....>.f..}..?...
    981c:	00f9cbb0 01d46c2f 0014eb5b 02fd411d     ..../l..[....A..
    982c:	01e7e728 0200a1cf 01cfffc1 005c496f     (...........oI\.
    983c:	01426d70 01236155 018a9496 01a88c8b     pmB.Ua#.........
    984c:	0046c101 019b6d4f 03f6e1c3 03633b57     ..F.Om......W;c.
    985c:	01482776 00609eb6 02dc82c5 03e459af     v'H...`......Y..
    986c:	02f27e70 02d722be 00772fb5 00227a20     p~...".../w. z".
    987c:	00a5366c 03c8d79a 010444b6 007f75b1     l6.......D...u..
    988c:	02070020 0071fe23 017b198d 02ab1208      ...#.q...{.....
    989c:	005953d0 015f33ff 0094faf8 00c45e28     .SY..3_.....(^..
    98ac:	03047985 00267d1d 019e2246 013d42ae     .y...}&.F"...B=.
    98bc:	01495be6 01720bf9 004eaaab 0260bed0     .[I...r...N...`.
    98cc:	0356b01f 01b4d927 01b79aa8 0067d378     ..V.'.......x.g.
    98dc:	036e2945 0258afc3 02a9ba71 01128d7b     E)n...X.q...{...
    98ec:	0063d938 026640ac 008a31f4 035a1b34     8.c..@f..1..4.Z.
    98fc:	034baca3 00169c38 0039dc22 025caccd     ..K.8...".9...\.
    990c:	01e144b7 015f36a8 00714784 001d58c7     .D...6_..Gq..X..
    991c:	01b8497b 014f1522 025b9e3f 00669d87     {I..".O.?.[...f.
    992c:	0244a07f 03746aaa 03ecf750 02d56bae     ..D..jt.P....k..
    993c:	00327c62 014fbd25 02e3a56d 0364e006     b|2.%.O.m.....d.
    994c:	017407ac 002ab3f9 00d5e196 03942030     ..t...*.....0 ..
    995c:	02725fcb 035d695f 002a1b9b 00139b5d     ._r._i]...*.]...
    996c:	02cad9d6 03a731d2 02be126d 00751cf4     .....1..m.....u.
    997c:	037d00a5 029f4b8c 024bc164 02932e0e     ..}..K..d.K.....
    998c:	0000cee3 01be28f9 02380d9b 00502349     .....(....8.I#P.
    999c:	0245234a 00053d89 02b0fb69 01975932     J#E..=..i...2Y..
    99ac:	00e74016 0088235a 004a9913 013f915d     .@..Z#....J.].?.
    99bc:	012ef52f 022bbba4 03e45c84 001d34b0     /.....+..\...4..
    99cc:	01e8a9f3 005371ca 00b605d1 00f754cd     .....qS......T..
    99dc:	0008e7a4 02f0f3e8 02e3a48c 00f6228d     ............."..
    99ec:	006e0099 005cb7be 02508f23 00b1e1e0     ..n...\.#.P.....
    99fc:	021b29af 0333df8e 00336ae7 01d194be     .)....3..j3.....
    9a0c:	00b53b8b 028727fe 006cae29 00573d2e     .;...'..).l..=W.
    9a1c:	03b2ea36 00ba8cd8 00243333 00dd6c7d     6.......33$.}l..
    9a2c:	00200bc1 02b3260d 011f2301 01c5e65c     .. ..&...#..\...
    9a3c:	03294e65 0042021f 03b19946 039b3d26     eN)...B.F...&=..
    9a4c:	02d2c2f7 01a88c65 00311fba 03e0d70d     ....e.....1.....
    9a5c:	0304ed8a 030dcc30 00509c46 0061eeac     ....0...F.P...a.
    9a6c:	017d35d4 009a6596 021d7885 032f9af4     .5}..e...x..../.
    9a7c:	0070169b 0129a510 006cb42b 0394da0f     ..p...).+.l.....
    9a8c:	0051cb06 002ade53 009873e7 00c83706     ..Q.S.*..s...7..
    9a9c:	01b3811e 0253a173 002d2a17 02f621e3     ....s.S..*-..!..
    9aac:	023114e9 036f7a0a 02d51497 004b06d5     ..1..zo.......K.
    9abc:	0048ec1c 02459a46 00730f42 0155755e     ..H.F.E.B.s.^uU.
    9acc:	001d4216 010a5b4e 018369ca 0165ff8c     .B..N[...i....e.
    9adc:	00e687cd 0066dd9f 03b474a0 030a764d     ......f..t..Mv..
    9aec:	01ee455a 01e928da 00429196 02e6bc89     ZE...(....B.....
    9afc:	036b2a84 00310918 02401947 003d46e8     .*k...1.G.@..F=.
    9b0c:	000e90b1 01550c28 00a39af0 03d5b697     ....(.U.........
    9b1c:	0016f62b 008c51e6 00870cd2 03cd51a0     +....Q.......Q..
    9b2c:	037d8fee 000d64da 01bfea7c 023b3967     ..}..d..|...g9;.
    9b3c:	0203a091 035f75d0 003b3319 039fa90c     .....u_..3;.....
    9b4c:	021516e2 019e61d8 03724231 0013b792     .....a..1Br.....
    9b5c:	003d0979 0364e6a7 031270a2 02fadd2f     y.=...d..p../...
    9b6c:	00321a5d 026d8470 0251fffd 03c995e5     ].2.p.m...Q.....
    9b7c:	032bf49a 0022ec9e 03b10536 01f2a0a4     ..+...".6.......
    9b8c:	01846de1 03015677 00593f56 01485023     .m..wV..V?Y.#PH.
    9b9c:	020dccdd 00b1c114 03f7dd12 0023c6b0     ..............#.
    9bac:	0227804f 02411162 02a70377 02589c9b     O.'.b.A.w.....X.
    9bbc:	00573e91 0235ac70 006c93cc 0385e35e     .>W.p.5...l.^...
    9bcc:	008127d3 0051ba08 00d47194 01246058     .'....Q..q..X`$.
    9bdc:	021dd4bc 0078cc23 005d29a2 026e4e33     ....#.x..)].3Nn.
    9bec:	016252cf 010fb7e1 00bd3cc7 0050dbbd     .Rb......<....P.
    9bfc:	01a9c9de 0122f48d 00710ef2 03486d8d     ......"...q..mH.
    9c0c:	003418ad 02363bd2 01c8ce94 0099f96c     ..4..;6.....l...
    9c1c:	02b66823 007c8414 00e6c05c 02b2d295     #h....|.\.......
    9c2c:	0179abc6 0068464d 00572902 0308fa1c     ..y.MFh..)W.....
    9c3c:	01f0f802 02a73062 03e785f0 003d0b4f     ....b0......O.=.
    9c4c:	0190317f 01fa1d56 03e48d50 02cef1ef     .1..V...P.......
    9c5c:	0075b27b 00e651f5 0203cb1b 02e4644a     {.u..Q......Jd..
    9c6c:	03f06dc1 007b9795 01f9a640 01d6f7bf     .m....{.@.......
    9c7c:	03aa89de 002aeaff 0075ade5 030889a0     ......*...u.....
    9c8c:	02ac45a1 02c6cce0 03f37567 006f3ddc     .E......gu...=o.
    9c9c:	00de0674 01a0cd62 020736e3 00a7a8a2     t...b....6......
    9cac:	00291d11 00884d61 02394e19 00d76f8b     ..).aM...N9..o..
    9cbc:	03c6ba15 00706ef8 03753069 02a31960     .....np.i0u.`...
    9ccc:	03966137 00731883 0001e45f 0376c7ba     7a....s._.....v.
    9cdc:	0387fe0b 01c54e28 02b38fa2 0036d29e     ....(N........6.
    9cec:	030b49cb 01e7c55f 03937833 0278aeb2     .I.._...3x....x.
    9cfc:	0065e9c3 030cda3e 008f1141 02de59b3     ..e.>...A....Y..
    9d0c:	00c6adf8 0016e02f 035122b7 033cd198     ..../...."Q...<.
    9d1c:	01e0953b 001f5b0b 001fd7e2 021e57ac     ;....[.......W..
    9d2c:	03d7e53a 034df3a5 03a343c2 000cba06     :.....M..C......
    9d3c:	03a9c392 011030e1 0180070b 010f7b87     .....0.......{..
    9d4c:	001e7dc1 0239912b 022e9b5c 02d14549     .}..+.9.\...IE..
    9d5c:	02805c60 00332870 032d794c 00c1bf19     `\..p(3.Ly-.....
    9d6c:	02b4e6be 0044916c 002c2ce2 012ba79f     ....l.D..,,...+.
    9d7c:	02dc8b23 0327a109 03ea717d 00268520     #.....'.}q.. .&.
    9d8c:	00fe78ee 02cc0149 02698515 03b32eba     .x..I.....i.....
    9d9c:	00736201 0210bf78 022b044c 01843460     .bs.x...L.+.`4..
    9dac:	02467110 0032d8fd 00b8f2d8 015f86c1     .qF...2......._.
    9dbc:	03459c95 03de6371 00775437 03a417f5     ..E.qc..7Tw.....
    9dcc:	003d5616 01304120 017cf9eb 002e00ec     .V=. A0...|.....
    9ddc:	03446288 01cf57ca 036e4fc8 024d8921     .bD..W...On.!.M.
    9dec:	0032270a 00789b22 01a91f02 016bec64     .'2.".x.....d.k.
    9dfc:	03fa4958 002370d9 01e671c4 02be8d86     XI...p#..q......
    9e0c:	01fb2430 033ab07d 00156468 02417635     0$..}.:.hd..5vA.
    9e1c:	0137b0bc 0258f3b8 02405f03 0031140e     ..7...X.._@...1.
    9e2c:	037443fa 017e2332 024ac5c8 01759361     .Ct.2#~...J.a.u.
    9e3c:	000da75f 01b0fb84 03fd121c 036c3295     _............2l.
    9e4c:	002eb4cc 001b79e1 012977b3 03e650b7     .....y...w)..P..
    9e5c:	01a23ffd 02343e68 004c1b19 0112864e     .?..h>4...L.N...
    9e6c:	01e28930 008d0ba7 025fc9b5 0074f668     0........._.h.t.
    9e7c:	027ab611 01701ba1 038b93fd 00cffde1     ..z...p.........
    9e8c:	004b98ce 01cb9165 02d3739d 01163f7d     ..K.e....s..}?..
    9e9c:	028267b1 0011665a 027118b9 0263c5ab     .g..Zf....q...c.
    9eac:	0109a2a4 036ed3ad 00265ec3 00ce2c86     ......n..^&..,..
    9ebc:	0108c19a 033853da 02aacb8c 0036e62b     .....S8.....+.6.
    9ecc:	01ab4478 001f529e 00875995 03f1047a     xD...R...Y..z...
    9edc:	0025bfb2 03022ce1 0307b24c 00466d7a     ..%..,..L...zmF.
    9eec:	02b80cf4 0023d341 0162bc00 016d197a     ....A.#...b.z.m.
    9efc:	03180d29 006e8b5c 0023d021 03922d4d     )...\.n.!.#.M-..
    9f0c:	03335ebf 01514a03 012378c0 001e7671     .^3..JQ..x#.qv..
    9f1c:	0094efab 006acdaa 01e58c24 03cd0ff0     ......j.$.......
    9f2c:	001c9fc2 03d27a87 02e5958a 03015ca3     .....z.......\..
    9f3c:	008a1775 0053623e 00219420 01047c07     u...>bS. .!..|..
    9f4c:	002f9557 01dc25ad 00192655 0323592f     W./..%..U&../Y#.
    9f5c:	004b6506 01c06d33 02870f14 0030a9a9     .eK.3m........0.
    9f6c:	026e8f79 026c2cfa 03cb23d8 0077171d     y.n..,l..#....w.
    9f7c:	007eab75 02df6e36 026c61b9 01694c0a     u.~.6n...al..Li.
    9f8c:	0160fc55 004f844d 0393dffa 000608c9     U.`.M.O.........
    9f9c:	0054d419 002daf4e 002add44 01df6e32     ..T.N.-.D.*.2n..
    9fac:	01203c4c 02417d55 0211ab8f 00318ce3     L< .U}A.......1.
    9fbc:	020984f4 01418b46 039f6056 018f4aff     ....F.A.V`...J..
    9fcc:	006ebaec 01e79790 01d7f9ca 024e7770     ..n.........pwN.
    9fdc:	01189322 000dd943 03a9b062 03c478b7     "...C...b....x..
    9fec:	03364bf8 00957ba2 001b17d8 032c6344     .K6..{......Dc,.
    9ffc:	0085433d 028dc62c 02034207 00281068     =C..,....B..h.(.
    a00c:	03ec91c1 012bc377 01f2ef4a 01b25df8     ....w.+.J....]..
    a01c:	001a8f0e 00b9316f 01e8e9ce 022ec72a     ....o1......*...
    a02c:	01ca3138 00323716 03a4af3b 001a4196     81...72.;....A..
    a03c:	01367c14 00922447 00081514 00b6c337     .|6.G$......7...
    a04c:	0352beaa 000e751b 026d44d0 0050e77a     ..R..u...Dm.z.P.
    a05c:	02822548 000146ca 01cfc46c 0390697b     H%...F..l...{i..
    a06c:	00024886 01cac17f 02c3be90 01675a06     .H...........Zg.
    a07c:	02c06e71 00336a30 02097626 02cb0432     qn..0j3.&v..2...
    a08c:	0098174f 02a923a4 002b204c 01a17b74     O....#..L +.t{..
    a09c:	00b254ae 0303b690 02dae488 0039c2e9     .T............9.
    a0ac:	00597419 005ae6cf 01f76b92 000993c5     .tY...Z..k......
    a0bc:	006d9293 02ae1427 00a5f57b 013077b1     ..m.'...{....w0.
    a0cc:	02b7f86f 000f0744 03e6a89d 015f8996     o...D........._.
    a0dc:	02c1033b 0394ccd5 00282fa2 01dc772c     ;......../(.,w..
    a0ec:	00e65718 00ff53a0 017a24f7 004f5d8f     .W...S...$z..]O.
    a0fc:	0048023f 03249fbf 005ae4bf 01075a9a     ?.H...$...Z..Z..
    a10c:	00596f22 0029b8a2 00f82bfb 038423cb     "oY...)..+...#..
    a11c:	00344194 0031018e 00575626 0003fa51     .A4...1.&VW.Q...
    a12c:	020112fd 01c1260b 001241d8 026781a7     .....&...A....g.
    a13c:	03559993 022ce970 02743cf7 001b05f4     ..U.p.,..<t.....
    a14c:	03717e66 013ff7d8 00e98a99 029daea2     f~q...?.........
    a15c:	00416374 03f1579a 020b3b54 02a4b8b0     tcA..W..T;......
    a16c:	03ead74a 0056781d 0065b318 0077bf46     J....xV...e.F.w.
    a17c:	001f7815 02103582 0064669b 0338e14e     .x...5...fd.N.8.
    a18c:	01bd2ed7 00b40e43 01042a5d 0043d438     ....C...]*..8.C.
    a19c:	0266be02 00b3acf5 0028e583 02786b86     ..f.......(..kx.
    a1ac:	0006347d 01e3ea86 0251c6ce 01ae4697     }4........Q..F..
    a1bc:	01872d2d 002cf2cf 025a6ee4 02ca7ab6     --....,..nZ..z..
    a1cc:	01768b7a 02ca6b29 0012e75c 030d1ffc     z.v.)k..\.......
    a1dc:	02c44274 00e5ae65 0335acc8 0071f9be     tB..e.....5...q.
    a1ec:	0247eed9 00a24099 0058fdc8 00143295     ..G..@....X..2..
    a1fc:	0031d62d 0254c1e5 02efd48e 01491ea2     -.1...T.......I.
    a20c:	02e78fb9 00602bf0 0380ad4b 029cd888     .....+`.K.......
    a21c:	01f5825a 00c9c77d 002b6b1e 02a0470d     Z...}....k+..G..
    a22c:	017bf61a 0354bdbc 0092e310 0005353c     ..{...T.....<5..
    a23c:	01e06bca 01f6cf3d 025f7a3c 023cad3a     .k..=...<z_.:.<.
    a24c:	00288a1c 02ce7ca1 014bd784 03c7dd61     ..(..|....K.a...
    a25c:	02d0d99c 0059d4c1 021fcb95 00955394     ......Y......S..
    a26c:	014401e0 003c902b 0066d398 01a4d9d1     ..D.+.<...f.....
    a27c:	005bdace 02f62abf 0072a530 007fea35     ..[..*..0.r.5...
    a28c:	009163ba 00adbcce 015ea3d6 013cb9e2     .c........^...<.
    a29c:	000fc6b4 01a7c669 019100f3 03193d5c     ....i.......\=..
    a2ac:	00243980 002e4099 01fa4c2f 0303ebc5     .9$..@../L......
    a2bc:	036399b5 0276384a 0046295c 025b331b     ..c.J8v.\)F..3[.
    a2cc:	012b758e 018795ce 01cdb131 005fa7bd     .u+.....1....._.
    a2dc:	03d1aef2 00d1c511 0173947b 007088c9     ........{.s...p.
    a2ec:	0028004c 023c5299 0210df66 027e8d58     L.(..R<.f...X.~.
    a2fc:	00604b34 002ab19c 00037802 01c03da0     4K`...*..x...=..
    a30c:	02b363ae 02002d08 001ad163 02bc2139     .c...-..c...9!..
    a31c:	01fbcdbe 03d1d45b 03fc8772 0044bcde     ....[...r.....D.
    a32c:	01e11c7b 01b6885c 00c1441c 01e7df13     {...\....D......
    a33c:	002c35ee 01c13849 00a509d6 0050a485     .5,.I8........P.
    a34c:	01bc42f8 006492d2 0050f0d9 0153a623     .B....d...P.#.S.
    a35c:	0181ba6f 02db7588 006a2db2 025e57a3     o....u...-j..W^.
    a36c:	02601aca 03d20f7d 036cee94 0057526b     ..`.}.....l.kRW.
    a37c:	0100e650 039b2c7d 0334517c 02c10be3     P...},..|Q4.....
    a38c:	0005d841 018de970 00029b1a 00b8eaa8     A...p...........
    a39c:	0166af8b 0004f4b5 019ce49d 0037f5c9     ..f...........7.
    a3ac:	03935c05 02f7e536 00213839 01306204     .\..6...98!..b0.
    a3bc:	00496195 0305ab37 022c67e5 007d323b     .aI.7....g,.;2}.
    a3cc:	02b6c618 01140ac5 0195b26d 01a6aa25     ........m...%...
    a3dc:	00797170 01b41872 01f038db 021d0f86     pqy.r....8......
    a3ec:	0361b1db 0013d601 031b7383 0322c34c     ..a......s..L.".
    a3fc:	000752df 03cf90ba 00185472 0310eba0     .R......rT......
    a40c:	0344f9ca 01b9505b 01d243de 00519a38     ..D.[P...C..8.Q.
    a41c:	03ad2500 02706cb4 037338d0 0174b3c3     .%...lp..8s...t.
    a42c:	00045da4 0062426c 0060655a 01b09640     .]..lBb.Ze`.@...
    a43c:	03d66ff8 00728d57 01a2c585 0267e1e3     .o..W.r.......g.
    a44c:	00e10f9a 00798771 004fc483 00394fe0     ....q.y...O..O9.
    a45c:	0180b315 028ae6dc 01ad9fa7 00048456     ............V...
    a46c:	0293809b 033c11d2 022bbc5f 00e963cf     ......<._.+..c..
    a47c:	0071c0c2 02fe6c43 003eaf8d 000a7b40     ..q.Cl....>.@{..
    a48c:	00fabb93 00614c2f 00e1c6c1 002a6034     ..../La.....4`*.
    a49c:	01dcc761 01f22221 001ce819 02c2cb2b     a...!"......+...
    a4ac:	038727ce 0341eead 01eebcbc 00471ad0     .'....A.......G.
    a4bc:	0301121b 02a0df1a 00b59d67 00a07d67     ........g...g}..
    a4cc:	002a8e64 033262ca 01c0790b 0058052e     d.*..b2..y....X.
    a4dc:	01f7b394 0019e0a2 03bda6ac 024705e9     ..............G.
    a4ec:	031f2b56 00c46e77 0043484c 03ae49ea     V+..wn..LHC..I..
    a4fc:	00555526 03ae5a68 03768897 0043a2c5     &UU.hZ....v...C.
    a50c:	01700eef 03a64abb 00856fa5 01588e46     ..p..J...o..F.X.
    a51c:	0058911f 008c4da9 02e06879 003bd648     ..X..M..yh..H.;.
    a52c:	0032f743 0066e6e3 029d266b 02882705     C.2...f.k&...'..
    a53c:	03685f3b 0188c111 0020f7a8 020c3d2e     ;_h....... ..=..
    a54c:	02d6aa86 011f1d1b 0210f444 00366c29     ........D...)l6.
    a55c:	01cc9013 01e2d90b 023fb06c 01938427     ........l.?.'...
    a56c:	0027484a 00677464 03ab2f29 00cc18f8     JH'.dtg.)/......
    a57c:	006c7709 000b6cb3 018f0fa0 027213e2     .wl..l........r.
    a58c:	032a2df6 01d12483 002dd426 014c5c69     .-*..$..&.-.i\L.
    a59c:	004a865f 018d6c09 01fdaa63 00489ade     _.J..l..c.....H.
    a5ac:	03203e28 01da7d1f 02c97458 008ff016     (> ..}..Xt......
    a5bc:	00124f41 016d7d67 024dbd2b 00ff83bb     AO..g}m.+.M.....
    a5cc:	03fb53c0 00330954 02f90eaf 03994011     .S..T.3......@..
    a5dc:	01ebdc2c 018b53e7 007bf947 006dfb83     ,....S..G.{...m.
    a5ec:	00c5ca96 03d962e9 018ad044 003c7a60     .....b..D...`z<.
    a5fc:	007f0d93 02c0e5c5 010345dd 01bf1a0e     .........E......
    a60c:	0008e359 03639bfa 0399ffd9 00232374     Y.....c.....t##.
    a61c:	00846622 0019021c 01d55efa 03d7413f     "f.......^..?A..
    a62c:	03aa3002 0381e786 0005b4c6 0174c84c     .0..........L.t.
    a63c:	01e3a8eb 0277de56 0209a962 001c42f7     ....V.w.b....B..
    a64c:	02cafacd 0119a2f4 0261ce05 034fb790     ..........a...O.
    a65c:	00237668 00aebb32 011a98dd 00ef4edf     hv#.2........N..
    a66c:	0164c73c 0031ec8c 035b5825 030ba570     <.d...1.%X[.p...
    a67c:	01603955 03a9a096 0027d8b0 027d1ec0     U9`.......'...}.
    a68c:	0225db90 03d13b7a 0301c54a 006b6cc5     ..%.z;..J....lk.
    a69c:	00b244cd 0223c328 0189703d 026a33fb     .D..(.#.=p...3j.
    a6ac:	00001cae 0293a7fd 012ce87d 02c96a84     ........}.,..j..
    a6bc:	032deaf7 00676c9a 00cdbd33 02daf578     ..-..lg.3...x...
    a6cc:	019b8631 03703377 0029f289 02fb2eff     1...w3p...).....
    a6dc:	01f55d4d 03059094 019438fa 001eb2ce     M].......8......
    a6ec:	028bf405 026ce903 02e8d213 03ece7d2     ......l.........
    a6fc:	004165ed 0270d6a6 007b699e 004f6e06     .eA...p..i{..nO.
    a70c:	00ca3242 002e3cc0 0056063f 020ca7b4     B2...<..?.V.....
    a71c:	033d51ef 033927a2 006d4d01 0256d34b     .Q=..'9..Mm.K.V.
    a72c:	00324bc5 029e0011 01385c20 006dad1c     .K2..... \8...m.
    a73c:	00b477be 0315b164 02935584 002b5497     .w..d....U...T+.
    a74c:	00597e5f 02b7d36d 02099363 0029e600     _~Y.m...c.....).
    a75c:	01526672 003f5867 01546a1d 03aa277d     rfR.gX?..jT.}'..
    a76c:	003643d7 01f668fd 0041754f 02f879a7     .C6..h..OuA..y..
    a77c:	01e5a08b 028723b0 02566098 001ab277     .....#...`V.w...
    a78c:	03ef7923 01f27c2e 02097dc3 0063b0d6     #y...|...}....c.
    a79c:	00256ec8 01dd5846 00b69702 0145c4a7     .n%.FX........E.
    a7ac:	0187b72b 0051df6c 035ce819 0093f373     +...l.Q...\.s...
    a7bc:	009f1aef 02566b9a 000ba6bb 017b3a9e     .....kV......:{.
    a7cc:	01ef5969 00e4ae66 02468a2a 0071ffd5     iY..f...*.F...q.
    a7dc:	03a7fadf 00c97e94 00f1306c 0261acb7     .....~..l0....a.
    a7ec:	006667f2 012a09e4 01d469b5 0074a3ef     .gf...*..i....t.
    a7fc:	010902e3 00517a10 008183f5 03377f63     .....zQ.....c.7.
    a80c:	007f1d08 031c6e05 0059237c 00395933     .....n..|#Y.3Y9.
    a81c:	0253f462 02f67fff 0164b443 00538acc     b.S.....C.d...S.
    a82c:	03f0eb1d 00738e1b 03e65ac5 02045317     ......s..Z...S..
    a83c:	0069d42b 01bfe8b9 03b68e65 02341a17     +.i.....e.....4.
    a84c:	023f7c16 005dc6d9 00e8be78 00134dd7     .|?...].x....M..
    a85c:	003caf23 0087b312 0031b585 0380222a     #.<.......1.*"..
    a86c:	00b60501 015c904d 00af8fb6 003dc18b     ....M.\.......=.
    a87c:	02d70d2b 03858e7c 038d0a48 029af03c     +...|...H...<...
    a88c:	004ffd54 02b7143b 00f196e9 03a9d8ae     T.O.;...........
    a89c:	007e45e3 00482eb4 03ad4f1d 02e2d3a1     .E~...H..O......
    a8ac:	02b40240 01080167 006d8532 00275132     @...g...2.m.2Q'.
    a8bc:	017ddf91 02349c13 01a836ab 00626107     ..}...4..6...ab.
    a8cc:	0042765c 005af6ce 03d92353 02e8ea2f     \vB...Z.S#../...
    a8dc:	00246165 01177a75 035dd2f5 023b61c2     ea$.uz....]..a;.
    a8ec:	0264591f 00045a2f 014671a8 02d648d6     .Yd./Z...qF..H..
    a8fc:	00db5ed3 03696b35 000514fa 00a0f50f     .^..5ki.........
    a90c:	025ff0d6 02a91e82 0373ca54 007cd2ba     .._.....T.s...|.
    a91c:	029ac266 01144c3a 009790da 00f07853     f...:L......Sx..
    a92c:	0026a0d4 0293a390 00adca7f 03ccbbb6     ..&.............
    a93c:	02bfdfd9 00360357 007c59e8 0120d747     ....W.6..Y|.G. .
    a94c:	0070b3ad 03f61be9 00570daf 03a3bd96     ..p.......W.....
    a95c:	012f9a63 02ffcd7c 03b0ab5d 0017e4bd     c./.|...].......
    a96c:	02d7dc51 0393aa7a 0118e43c 03835929     Q...z...<...)Y..
    a97c:	0058ba7a 00680555 01331f99 030b8e01     z.X.U.h...3.....
    a98c:	014f3898 0003abc9 0399be57 0218831d     .8O.....W.......
    a99c:	02952a31 028ba136 002b258f 023b2ffd     1*..6....%+../;.
    a9ac:	023f7141 02556dd8 035e68ea 0017371d     Aq?..mU..h^..7..
    a9bc:	00981299 02e0dd5e 02b2d927 00407642     ....^...'...Bv@.
    a9cc:	00554552 00e54bd0 00c18863 02235b45     REU..K..c...E[#.
    a9dc:	0197ff6d 0059109b 0180a515 00f83128     m.....Y.....(1..
    a9ec:	004f4866 03907198 0041467f 00b73878     fHO..q...FA.x8..
    a9fc:	0306a937 03517ae2 000b1b01 0019d3cb     7....zQ.........
    aa0c:	026745f1 011f25fa 0043caa1 0068c72b     .Eg..%....C.+.h.
    aa1c:	0070dac7 02f87dfa 004fb09a 03b25b92     ..p..}....O..[..
    aa2c:	03a7d839 0067f228 038df3df 0166e33d     9...(.g.....=.f.
    aa3c:	02fa3bfb 024a9095 00366877 03177544     .;....J.wh6.Du..
    aa4c:	039707c8 01c90e1b 006d912c 00786a9e     ........,.m..jx.
    aa5c:	03ca7f5b 00bd1ce4 02b59417 02d2e2ab     [...............
    aa6c:	0062ae5b 02631b6f 02710c7e 00c6dbcd     [.b.o.c.~.q.....
    aa7c:	02cbb727 001fbe20 000ee085 0360a7ef     '... .........`.
    aa8c:	01d595fd 0056b717 00241dd3 01f7dbb6     ......V...$.....
    aa9c:	01a23589 012d4b4b 03fb96fb 00595a82     .5..KK-......ZY.
    aaac:	0011880d 014eb833 02f76696 03fbf100     ....3.N..f......
    aabc:	002b9e85 03770a81 01256d41 00731bb2     ..+...w.Am%...s.
    aacc:	015d7ecd 0005d20c 02485ab2 03988d0d     .~]......ZH.....
    aadc:	03ebb9d9 025997cf 0027012a 00c04ff7     ......Y.*.'..O..
    aaec:	033fbd21 03fbe586 003303aa 0044a586     !.?.......3...D.
    aafc:	03532e80 03f9b8bc 020fe6fb 02eabcc8     ..S.............
    ab0c:	0005abea 03809678 03487cb2 03ed21be     ....x....|H..!..
    ab1c:	004adfab 002aa621 0210190b 0220df3d     ..J.!.*.....=. .
    ab2c:	018f8e29 02f3be45 001ec8fb 00f96f6b     )...E.......ko..
    ab3c:	03a6cea9 00ef31ef 00a81a2c 006a3b84     .....1..,....;j.
    ab4c:	03f827f7 0352df35 01c9792d 02efcff4     .'..5.R.-y......
    ab5c:	00605175 001f6d98 02ed9067 03310139     uQ`..m..g...9.1.
    ab6c:	03a65e36 003a3ab2 01d5dd0b 02565072     6^...::.....rPV.
    ab7c:	03ce0c5c 018096ca 0034c6c7 01bb8126     \.........4.&...
    ab8c:	01045692 036190d4 03ac476b 007622cb     .V....a.kG..."v.
    ab9c:	024ef5ad 02ffe4c5 0345d785 01f4d572     ..N.......E.r...
    abac:	00719164 00ce6e5c 03c95713 02e3e117     d.q.\n...W......
    abbc:	022c3a6a 00581b44 02225414 013cf2cd     j:,.D.X..T"...<.
    abcc:	0068554a 0314e6f1 00790180 03c6b96f     JUh.......y.o...
    abdc:	019010ed 0010b470 016ce8b0 0043cccf     ....p.....l...C.
    abec:	014c3731 02fcebf0 025741df 00c6555c     17L......AW.\U..
    abfc:	001c368f 01070b5a 030bb4ed 03f6000b     .6..Z...........
    ac0c:	03758ecd 000332d8 009bd8f0 012c6423     ..u..2......#d,.
    ac1c:	039ce074 018a36b2 002d258e 01c61e14     t....6...%-.....
    ac2c:	016d2f6e 02996bba 00a568d3 000bca12     n/m..k...h......
    ac3c:	032175d4 0321319b 03e78059 010e1e42     .u!..1!.Y...B...
    ac4c:	001a3bed 01abb5b0 0253d5df 033e4df3     .;........S..M>.
    ac5c:	0398ecf0 00304777 002c5a6a 00a753fa     ....wG0.jZ,..S..
    ac6c:	037a459a 0347a239 0072e421 03312959     .Ez.9.G.!.r.Y)1.
    ac7c:	0188c0c4 03bb869e 02b633ca 002da03a     .........3..:.-.
    ac8c:	03ecb0b6 02361823 003a6285 039e9009     ....#.6..b:.....
    ac9c:	00343099 029a8f63 026d9d74 01886ba2     .04.c...t.m..k..
    acac:	0293dbc5 003d2028 02047d0a 0238b4a1     ....( =..}....8.
    acbc:	00e20f06 0175b1dc 0014999b 0385da79     ......u.....y...
    accc:	01d29648 01cd9d18 014b0568 0078aeb5     H.......h.K...x.
    acdc:	03e9c06e 03733308 01745482 027ed52d     n....3s..Tt.-.~.
    acec:	007b18a1 029a7a06 03225bbf 01c13036     ..{..z...[".60..
    acfc:	0383461c 002f2c2c 025492c7 0366e7b5     .F..,,/...T...f.
    ad0c:	010773b2 03942067 000649c7 0365e3cb     .s..g ...I....e.
    ad1c:	02d9ba9e 0303fcda 010312ab 0049b15b     ............[.I.
    ad2c:	00000000                                ....

0000ad30 <Montgomery_Rprime>:
    ad30:	5ff3d621 c81db879 ea6b387d 173ea5aa     !.._y...}8k...>.
    ad40:	2136f61c 3d01b7c7 6ac8f9d3 0006a5f1     ..6!...=...j....

0000ad50 <Montgomery_rprime>:
    ad50:	79bc3929 e12fe5f0 d1fcdcf3 d75e78b8     )9.y../......x^.
    ad60:	76b5db21 bce409ed afc1c074 f32702fd     !..v....t.....'.

0000ad70 <PARAMETER_d>:
    ad70:	00000142 00000000 000e4000 00000000     B........@......
    ad80:	00000000 01fc0c8d 0085223c 020fcb38     ........<"..8...
    ad90:	0211995f 005e472f                       _.../G^.

0000ad98 <curve_order>:
    ad98:	c7768ce7 2fb2540e fe0f7999 dfbd004d     ..v..T./.y..M...
    ada8:	9cbc14e5 f0539782 4e5e0a72 0029cbc1     ......S.r.^N..).

0000adb8 <A144>:
    adb8:	05080201 05020208 0c060201 080f090c     ................
    adc8:	050d0d08 010a030b 0e0d0f01 0208080b     ................
    add8:	08020303                                ....

0000addc <IC>:
    addc:	07030100 00000406                       ........

0000ade4 <RC>:
    ade4:	0e070301 0c060b0d 0a050209              ............

0000adf0 <sbox>:
    adf0:	0b06050c 0d0a0009 080f0e03 02010704     ................
    ae00:	50206f4e 61204655 6c696176 656c6261     No PUF available
    ae10:	0000000d 6c696146 70206465 696c6275     ....Failed publi
    ae20:	656b2063 65672079 6172656e 6e6f6974     c key generation
    ae30:	00000d21 6c696146 6e206465 2065646f     !...Failed node 
    ae40:	53206925 65726168 65532064 74657263     %i Shared Secret
    ae50:	6e654720 74617265 0d6e6f69 0000000a      Generation.....
    ae60:	6c696146 646f6320 25203a65 000a0d69     Fail code: %i...
    ae70:	72617453 676e6974 00000d2e 72500a0d     Starting......Pr
    ae80:	20737365 20796e61 2079656b 65206f74     ess any key to e
    ae90:	7265746e 72206120 6f646e61 656b206d     nter a random ke
    aea0:	65732079 203a6465 00000000 706d6f43     y seed: ....Comp
    aeb0:	6574656c 6e652064 6c6c6f72 746e656d     leted enrollment
    aec0:	61687020 77206573 20687469 656d6974      phase with time
    aed0:	6425203a 00000000 6c696146 73206465     : %d....Failed s
    aee0:	65767265 20732772 68747561 69746e65     erver's authenti
    aef0:	69746163 6b206e6f 67207965 72656e65     cation key gener
    af00:	6f697461 000d216e 6c696146 73206465     ation!..Failed s
    af10:	65767265 20732772 68747561 69746e65     erver's authenti
    af20:	69746163 73206e6f 65726168 65732064     cation shared se
    af30:	74657263 6e656720 74617265 216e6f69     cret generation!
    af40:	0000000d 72636544 3a747079 706e4920     ....Decrypt: Inp
    af50:	74207475 656d206f 67617373 6e695f65     ut to message_in
    af60:	7a697320 25203a65 000a0d69 72636544      size: %i...Decr
    af70:	3a747079 74754f20 20747570 6d206f74     ypt: Output to m
    af80:	61737365 695f6567 6973206e 203a657a     essage_in size: 
    af90:	0a0d6925 00000000 65646f4e 20692520     %i......Node %i 
    afa0:	20746f6e 696c6176 0a0d2164 00000000     not valid!......
    afb0:	72636e45 3a747079 646f4e20 69252065     Encrypt: Node %i
    afc0:	754f202c 74757074 206f7420 655f7874     , Output to tx_e
    afd0:	656d656c 7320746e 3a657a69 0d692520     lement size: %i.
    afe0:	0000000a 6d726f4e 6f206c61 61726570     ....Normal opera
    aff0:	6e6f6974 20736920 7265766f 0000000d     tion is over....

0000b000 <_global_impure_ptr>:
    b000:	2000011c                                ... 

0000b004 <__sf_fake_stderr>:
	...

0000b024 <__sf_fake_stdin>:
	...

0000b044 <__sf_fake_stdout>:
	...
    b064:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    b074:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    b084:	31300046 35343332 39383736 64636261     F.0123456789abcd
    b094:	00006665 0000b0b6 0000b0b9 0000b0bc     ef..............
    b0a4:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    b0b4:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
    b0c4:	2e005849 20200000                                IX...

0000b0c9 <_ctype_>:
    b0c9:	20202000 20202020 28282020 20282828     .         ((((( 
    b0d9:	20202020 20202020 20202020 20202020                     
    b0e9:	10108820 10101010 10101010 10101010      ...............
    b0f9:	04040410 04040404 10040404 10101010     ................
    b109:	41411010 41414141 01010101 01010101     ..AAAAAA........
    b119:	01010101 01010101 01010101 10101010     ................
    b129:	42421010 42424242 02020202 02020202     ..BBBBBB........
    b139:	02020202 02020202 02020202 10101010     ................
    b149:	00000020 00000000 00000000 00000000      ...............
	...

0000b1cc <_init>:
    b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b1ce:	46c0      	nop			; (mov r8, r8)
    b1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b1d2:	bc08      	pop	{r3}
    b1d4:	469e      	mov	lr, r3
    b1d6:	4770      	bx	lr

0000b1d8 <__init_array_start>:
    b1d8:	000000e5 	.word	0x000000e5

0000b1dc <_fini>:
    b1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b1de:	46c0      	nop			; (mov r8, r8)
    b1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b1e2:	bc08      	pop	{r3}
    b1e4:	469e      	mov	lr, r3
    b1e6:	4770      	bx	lr

0000b1e8 <__fini_array_start>:
    b1e8:	000000bd 	.word	0x000000bd
