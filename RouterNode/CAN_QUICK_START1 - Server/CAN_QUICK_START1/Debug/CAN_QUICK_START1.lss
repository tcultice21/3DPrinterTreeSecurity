
CAN_QUICK_START1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008c14  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000168  20000000  00008c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c8c  20000168  00008d7c  00020168  2**2
                  ALLOC
  3 .stack        00002004  20000df4  00009a08  00020168  2**0
                  ALLOC
  4 .ARM.attributes 0000002d  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003dc02  00000000  00000000  000201ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004bcf  00000000  00000000  0005ddf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000007e0  00000000  00000000  000629c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000b20  00000000  00000000  000631a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00022a89  00000000  00000000  00063cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00011f56  00000000  00000000  00086749  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000a60ef  00000000  00000000  0009869f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001cf0  00000000  00000000  0013e790  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c7e2  00000000  00000000  00140480  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 2d 00 20 71 17 00 00 6d 17 00 00 6d 17 00 00     .-. q...m...m...
	...
      2c:	6d 17 00 00 00 00 00 00 00 00 00 00 6d 17 00 00     m...........m...
      3c:	6d 17 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     m...m...m...m...
      4c:	6d 17 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     m...m...m...m...
      5c:	6d 17 00 00 6d 17 00 00 69 0a 00 00 79 0a 00 00     m...m...i...y...
      6c:	89 0a 00 00 99 0a 00 00 a9 0a 00 00 b9 0a 00 00     ................
      7c:	85 46 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     .F..m...m...m...
      8c:	6d 17 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     m...m...m...m...
      9c:	6d 17 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     m...m...m...m...
      ac:	6d 17 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     m...m...m...m...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	f3af 8000 	nop.w
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000168 	.word	0x20000168
      dc:	00000000 	.word	0x00000000
      e0:	00008c14 	.word	0x00008c14

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	f3af 8000 	nop.w
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000016c 	.word	0x2000016c
     110:	00008c14 	.word	0x00008c14
     114:	00008c14 	.word	0x00008c14
     118:	00000000 	.word	0x00000000

0000011c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     11c:	4b0c      	ldr	r3, [pc, #48]	; (150 <cpu_irq_enter_critical+0x34>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2b00      	cmp	r3, #0
     122:	d106      	bne.n	132 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     124:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     128:	2b00      	cmp	r3, #0
     12a:	d007      	beq.n	13c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     12c:	2200      	movs	r2, #0
     12e:	4b09      	ldr	r3, [pc, #36]	; (154 <cpu_irq_enter_critical+0x38>)
     130:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     132:	4a07      	ldr	r2, [pc, #28]	; (150 <cpu_irq_enter_critical+0x34>)
     134:	6813      	ldr	r3, [r2, #0]
     136:	3301      	adds	r3, #1
     138:	6013      	str	r3, [r2, #0]
}
     13a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     13c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     13e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     142:	2200      	movs	r2, #0
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <cpu_irq_enter_critical+0x3c>)
     146:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     148:	3201      	adds	r2, #1
     14a:	4b02      	ldr	r3, [pc, #8]	; (154 <cpu_irq_enter_critical+0x38>)
     14c:	701a      	strb	r2, [r3, #0]
     14e:	e7f0      	b.n	132 <cpu_irq_enter_critical+0x16>
     150:	20000184 	.word	0x20000184
     154:	20000188 	.word	0x20000188
     158:	20000000 	.word	0x20000000

0000015c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     15c:	4b08      	ldr	r3, [pc, #32]	; (180 <cpu_irq_leave_critical+0x24>)
     15e:	681a      	ldr	r2, [r3, #0]
     160:	3a01      	subs	r2, #1
     162:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     164:	681b      	ldr	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d109      	bne.n	17e <cpu_irq_leave_critical+0x22>
     16a:	4b06      	ldr	r3, [pc, #24]	; (184 <cpu_irq_leave_critical+0x28>)
     16c:	781b      	ldrb	r3, [r3, #0]
     16e:	2b00      	cmp	r3, #0
     170:	d005      	beq.n	17e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     172:	2201      	movs	r2, #1
     174:	4b04      	ldr	r3, [pc, #16]	; (188 <cpu_irq_leave_critical+0x2c>)
     176:	701a      	strb	r2, [r3, #0]
     178:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     17c:	b662      	cpsie	i
	}
}
     17e:	4770      	bx	lr
     180:	20000184 	.word	0x20000184
     184:	20000188 	.word	0x20000188
     188:	20000000 	.word	0x20000000

0000018c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     190:	ac01      	add	r4, sp, #4
     192:	2501      	movs	r5, #1
     194:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     196:	2700      	movs	r7, #0
     198:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     19a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     19c:	0021      	movs	r1, r4
     19e:	200f      	movs	r0, #15
     1a0:	4e06      	ldr	r6, [pc, #24]	; (1bc <system_board_init+0x30>)
     1a2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1a4:	2280      	movs	r2, #128	; 0x80
     1a6:	0212      	lsls	r2, r2, #8
     1a8:	2382      	movs	r3, #130	; 0x82
     1aa:	05db      	lsls	r3, r3, #23
     1ac:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1ae:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1b0:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1b2:	0021      	movs	r1, r4
     1b4:	201c      	movs	r0, #28
     1b6:	47b0      	blx	r6
}
     1b8:	b003      	add	sp, #12
     1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1bc:	0000065d 	.word	0x0000065d

000001c0 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
     1c0:	6803      	ldr	r3, [r0, #0]
     1c2:	4a0a      	ldr	r2, [pc, #40]	; (1ec <_can_enable_peripheral_clock+0x2c>)
     1c4:	4293      	cmp	r3, r2
     1c6:	d003      	beq.n	1d0 <_can_enable_peripheral_clock+0x10>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
     1c8:	4a09      	ldr	r2, [pc, #36]	; (1f0 <_can_enable_peripheral_clock+0x30>)
     1ca:	4293      	cmp	r3, r2
     1cc:	d007      	beq.n	1de <_can_enable_peripheral_clock+0x1e>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
     1ce:	4770      	bx	lr
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	MCLK->AHBMASK.reg |= ahb_mask;
     1d0:	4a08      	ldr	r2, [pc, #32]	; (1f4 <_can_enable_peripheral_clock+0x34>)
     1d2:	6911      	ldr	r1, [r2, #16]
     1d4:	2380      	movs	r3, #128	; 0x80
     1d6:	005b      	lsls	r3, r3, #1
     1d8:	430b      	orrs	r3, r1
     1da:	6113      	str	r3, [r2, #16]
     1dc:	e7f7      	b.n	1ce <_can_enable_peripheral_clock+0xe>
     1de:	4a05      	ldr	r2, [pc, #20]	; (1f4 <_can_enable_peripheral_clock+0x34>)
     1e0:	6911      	ldr	r1, [r2, #16]
     1e2:	2380      	movs	r3, #128	; 0x80
     1e4:	009b      	lsls	r3, r3, #2
     1e6:	430b      	orrs	r3, r1
     1e8:	6113      	str	r3, [r2, #16]
     1ea:	e7f0      	b.n	1ce <_can_enable_peripheral_clock+0xe>
     1ec:	42001c00 	.word	0x42001c00
     1f0:	42002000 	.word	0x42002000
     1f4:	40000800 	.word	0x40000800

000001f8 <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
     1f8:	b570      	push	{r4, r5, r6, lr}
     1fa:	000c      	movs	r4, r1
     1fc:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1fe:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
     200:	4ba5      	ldr	r3, [pc, #660]	; (498 <can_init+0x2a0>)
     202:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     204:	4ba5      	ldr	r3, [pc, #660]	; (49c <can_init+0x2a4>)
     206:	2200      	movs	r2, #0
     208:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     20a:	782a      	ldrb	r2, [r5, #0]
     20c:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
     20e:	4ba4      	ldr	r3, [pc, #656]	; (4a0 <can_init+0x2a8>)
     210:	429c      	cmp	r4, r3
     212:	d100      	bne.n	216 <can_init+0x1e>
     214:	e0c6      	b.n	3a4 <can_init+0x1ac>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
     216:	4ba3      	ldr	r3, [pc, #652]	; (4a4 <can_init+0x2ac>)
     218:	429c      	cmp	r4, r3
     21a:	d100      	bne.n	21e <can_init+0x26>
     21c:	e0ff      	b.n	41e <can_init+0x226>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
     21e:	69a3      	ldr	r3, [r4, #24]
     220:	2202      	movs	r2, #2
     222:	4313      	orrs	r3, r2
     224:	61a3      	str	r3, [r4, #24]
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
     226:	2300      	movs	r3, #0
     228:	22bc      	movs	r2, #188	; 0xbc
     22a:	50a3      	str	r3, [r4, r2]
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
     22c:	320c      	adds	r2, #12
     22e:	50a3      	str	r3, [r4, r2]
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
     230:	4b9d      	ldr	r3, [pc, #628]	; (4a8 <can_init+0x2b0>)
     232:	61e3      	str	r3, [r4, #28]
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
     234:	4b9d      	ldr	r3, [pc, #628]	; (4ac <can_init+0x2b4>)
     236:	60e3      	str	r3, [r4, #12]
	if (config->tdc_enable) {
     238:	7bab      	ldrb	r3, [r5, #14]
     23a:	2b00      	cmp	r3, #0
     23c:	d004      	beq.n	248 <can_init+0x50>
		hw->DBTP.reg |= CAN_DBTP_TDC;
     23e:	68e2      	ldr	r2, [r4, #12]
     240:	2380      	movs	r3, #128	; 0x80
     242:	041b      	lsls	r3, r3, #16
     244:	4313      	orrs	r3, r2
     246:	60e3      	str	r3, [r4, #12]
	if (config->run_in_standby) {
     248:	786b      	ldrb	r3, [r5, #1]
     24a:	2b00      	cmp	r3, #0
     24c:	d003      	beq.n	256 <can_init+0x5e>
		hw->MRCFG.reg |= 0x01<<6;
     24e:	68a3      	ldr	r3, [r4, #8]
     250:	2240      	movs	r2, #64	; 0x40
     252:	4313      	orrs	r3, r2
     254:	60a3      	str	r3, [r4, #8]
	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
     256:	6962      	ldr	r2, [r4, #20]
     258:	78ab      	ldrb	r3, [r5, #2]
     25a:	4313      	orrs	r3, r2
     25c:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
     25e:	78eb      	ldrb	r3, [r5, #3]
     260:	2b00      	cmp	r3, #0
     262:	d004      	beq.n	26e <can_init+0x76>
		hw->CCCR.reg |= CAN_CCCR_TXP;
     264:	69a2      	ldr	r2, [r4, #24]
     266:	2380      	movs	r3, #128	; 0x80
     268:	01db      	lsls	r3, r3, #7
     26a:	4313      	orrs	r3, r2
     26c:	61a3      	str	r3, [r4, #24]
	if (config->edge_filtering) {
     26e:	792b      	ldrb	r3, [r5, #4]
     270:	2b00      	cmp	r3, #0
     272:	d004      	beq.n	27e <can_init+0x86>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
     274:	69a2      	ldr	r2, [r4, #24]
     276:	2380      	movs	r3, #128	; 0x80
     278:	019b      	lsls	r3, r3, #6
     27a:	4313      	orrs	r3, r2
     27c:	61a3      	str	r3, [r4, #24]
	if (config->protocol_exception_handling) {
     27e:	796b      	ldrb	r3, [r5, #5]
     280:	2b00      	cmp	r3, #0
     282:	d004      	beq.n	28e <can_init+0x96>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
     284:	69a2      	ldr	r2, [r4, #24]
     286:	2380      	movs	r3, #128	; 0x80
     288:	015b      	lsls	r3, r3, #5
     28a:	4313      	orrs	r3, r2
     28c:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
     28e:	79ab      	ldrb	r3, [r5, #6]
     290:	2b00      	cmp	r3, #0
     292:	d103      	bne.n	29c <can_init+0xa4>
		hw->CCCR.reg |= CAN_CCCR_DAR;
     294:	69a3      	ldr	r3, [r4, #24]
     296:	2240      	movs	r2, #64	; 0x40
     298:	4313      	orrs	r3, r2
     29a:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
     29c:	79eb      	ldrb	r3, [r5, #7]
     29e:	2b00      	cmp	r3, #0
     2a0:	d003      	beq.n	2aa <can_init+0xb2>
		hw->CCCR.reg |= CAN_CCCR_CSR;
     2a2:	69a3      	ldr	r3, [r4, #24]
     2a4:	2210      	movs	r2, #16
     2a6:	4313      	orrs	r3, r2
     2a8:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_acknowledge) {
     2aa:	7a2b      	ldrb	r3, [r5, #8]
     2ac:	2b00      	cmp	r3, #0
     2ae:	d003      	beq.n	2b8 <can_init+0xc0>
		hw->CCCR.reg |= CAN_CCCR_CSA;
     2b0:	69a3      	ldr	r3, [r4, #24]
     2b2:	2208      	movs	r2, #8
     2b4:	4313      	orrs	r3, r2
     2b6:	61a3      	str	r3, [r4, #24]
	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
     2b8:	7a6b      	ldrb	r3, [r5, #9]
     2ba:	041b      	lsls	r3, r3, #16
     2bc:	22f0      	movs	r2, #240	; 0xf0
     2be:	0312      	lsls	r2, r2, #12
     2c0:	4013      	ands	r3, r2
     2c2:	2201      	movs	r2, #1
     2c4:	4313      	orrs	r3, r2
     2c6:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
     2c8:	7b2b      	ldrb	r3, [r5, #12]
     2ca:	7b6a      	ldrb	r2, [r5, #13]
     2cc:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
     2ce:	896a      	ldrh	r2, [r5, #10]
     2d0:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
     2d2:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
     2d4:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
     2d6:	7beb      	ldrb	r3, [r5, #15]
     2d8:	021b      	lsls	r3, r3, #8
     2da:	22fe      	movs	r2, #254	; 0xfe
     2dc:	01d2      	lsls	r2, r2, #7
     2de:	4013      	ands	r3, r2
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
     2e0:	7c29      	ldrb	r1, [r5, #16]
     2e2:	227f      	movs	r2, #127	; 0x7f
     2e4:	400a      	ands	r2, r1
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
     2e6:	4313      	orrs	r3, r2
     2e8:	64a3      	str	r3, [r4, #72]	; 0x48
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
     2ea:	7c6a      	ldrb	r2, [r5, #17]
     2ec:	0112      	lsls	r2, r2, #4
     2ee:	2330      	movs	r3, #48	; 0x30
     2f0:	4013      	ands	r3, r2
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
     2f2:	7ca9      	ldrb	r1, [r5, #18]
     2f4:	0089      	lsls	r1, r1, #2
     2f6:	220c      	movs	r2, #12
     2f8:	400a      	ands	r2, r1
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
     2fa:	4313      	orrs	r3, r2
     2fc:	2280      	movs	r2, #128	; 0x80
     2fe:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_standard_reject) {
     300:	7ceb      	ldrb	r3, [r5, #19]
     302:	2b00      	cmp	r3, #0
     304:	d003      	beq.n	30e <can_init+0x116>
		hw->GFC.reg |= CAN_GFC_RRFS;
     306:	58a3      	ldr	r3, [r4, r2]
     308:	2102      	movs	r1, #2
     30a:	430b      	orrs	r3, r1
     30c:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_extended_reject) {
     30e:	7d2b      	ldrb	r3, [r5, #20]
     310:	2b00      	cmp	r3, #0
     312:	d004      	beq.n	31e <can_init+0x126>
		hw->GFC.reg |= CAN_GFC_RRFE;
     314:	2280      	movs	r2, #128	; 0x80
     316:	58a3      	ldr	r3, [r4, r2]
     318:	2101      	movs	r1, #1
     31a:	430b      	orrs	r3, r1
     31c:	50a3      	str	r3, [r4, r2]
	hw->XIDAM.reg = config->extended_id_mask;
     31e:	2390      	movs	r3, #144	; 0x90
     320:	69aa      	ldr	r2, [r5, #24]
     322:	50e2      	str	r2, [r4, r3]
	if (config->rx_fifo_0_overwrite) {
     324:	7f2b      	ldrb	r3, [r5, #28]
     326:	2b00      	cmp	r3, #0
     328:	d005      	beq.n	336 <can_init+0x13e>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
     32a:	22a0      	movs	r2, #160	; 0xa0
     32c:	58a1      	ldr	r1, [r4, r2]
     32e:	2380      	movs	r3, #128	; 0x80
     330:	061b      	lsls	r3, r3, #24
     332:	430b      	orrs	r3, r1
     334:	50a3      	str	r3, [r4, r2]
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
     336:	22a0      	movs	r2, #160	; 0xa0
     338:	58a1      	ldr	r1, [r4, r2]
     33a:	7f6b      	ldrb	r3, [r5, #29]
     33c:	061b      	lsls	r3, r3, #24
     33e:	20fe      	movs	r0, #254	; 0xfe
     340:	05c0      	lsls	r0, r0, #23
     342:	4003      	ands	r3, r0
     344:	430b      	orrs	r3, r1
     346:	50a3      	str	r3, [r4, r2]
	if (config->rx_fifo_1_overwrite) {
     348:	7fab      	ldrb	r3, [r5, #30]
     34a:	2b00      	cmp	r3, #0
     34c:	d005      	beq.n	35a <can_init+0x162>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
     34e:	3210      	adds	r2, #16
     350:	58a1      	ldr	r1, [r4, r2]
     352:	2380      	movs	r3, #128	; 0x80
     354:	061b      	lsls	r3, r3, #24
     356:	430b      	orrs	r3, r1
     358:	50a3      	str	r3, [r4, r2]
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
     35a:	22b0      	movs	r2, #176	; 0xb0
     35c:	58a1      	ldr	r1, [r4, r2]
     35e:	7feb      	ldrb	r3, [r5, #31]
     360:	061b      	lsls	r3, r3, #24
     362:	20fe      	movs	r0, #254	; 0xfe
     364:	05c0      	lsls	r0, r0, #23
     366:	4003      	ands	r3, r0
     368:	430b      	orrs	r3, r1
     36a:	50a3      	str	r3, [r4, r2]
	if (config->tx_queue_mode) {
     36c:	2320      	movs	r3, #32
     36e:	5ceb      	ldrb	r3, [r5, r3]
     370:	2b00      	cmp	r3, #0
     372:	d005      	beq.n	380 <can_init+0x188>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
     374:	3210      	adds	r2, #16
     376:	58a1      	ldr	r1, [r4, r2]
     378:	2380      	movs	r3, #128	; 0x80
     37a:	05db      	lsls	r3, r3, #23
     37c:	430b      	orrs	r3, r1
     37e:	50a3      	str	r3, [r4, r2]
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
     380:	22f0      	movs	r2, #240	; 0xf0
     382:	58a1      	ldr	r1, [r4, r2]
     384:	2321      	movs	r3, #33	; 0x21
     386:	5ceb      	ldrb	r3, [r5, r3]
     388:	061b      	lsls	r3, r3, #24
     38a:	20fc      	movs	r0, #252	; 0xfc
     38c:	0580      	lsls	r0, r0, #22
     38e:	4003      	ands	r3, r0
     390:	430b      	orrs	r3, r1
     392:	50a3      	str	r3, [r4, r2]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
     394:	2303      	movs	r3, #3
     396:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
     398:	3b04      	subs	r3, #4
     39a:	3a10      	subs	r2, #16
     39c:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
     39e:	3204      	adds	r2, #4
     3a0:	50a3      	str	r3, [r4, r2]
}
     3a2:	bd70      	pop	{r4, r5, r6, pc}
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
     3a4:	493d      	ldr	r1, [pc, #244]	; (49c <can_init+0x2a4>)
     3a6:	201a      	movs	r0, #26
     3a8:	4b41      	ldr	r3, [pc, #260]	; (4b0 <can_init+0x2b8>)
     3aa:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
     3ac:	201a      	movs	r0, #26
     3ae:	4b41      	ldr	r3, [pc, #260]	; (4b4 <can_init+0x2bc>)
     3b0:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
     3b2:	4b3b      	ldr	r3, [pc, #236]	; (4a0 <can_init+0x2a8>)
     3b4:	699a      	ldr	r2, [r3, #24]
     3b6:	2102      	movs	r1, #2
     3b8:	430a      	orrs	r2, r1
     3ba:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
     3bc:	4a3e      	ldr	r2, [pc, #248]	; (4b8 <can_init+0x2c0>)
     3be:	0412      	lsls	r2, r2, #16
     3c0:	0c12      	lsrs	r2, r2, #16
     3c2:	2180      	movs	r1, #128	; 0x80
     3c4:	0389      	lsls	r1, r1, #14
     3c6:	430a      	orrs	r2, r1
     3c8:	2184      	movs	r1, #132	; 0x84
     3ca:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
     3cc:	4a3b      	ldr	r2, [pc, #236]	; (4bc <can_init+0x2c4>)
     3ce:	0412      	lsls	r2, r2, #16
     3d0:	0c12      	lsrs	r2, r2, #16
     3d2:	2180      	movs	r1, #128	; 0x80
     3d4:	0349      	lsls	r1, r1, #13
     3d6:	430a      	orrs	r2, r1
     3d8:	2088      	movs	r0, #136	; 0x88
     3da:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
     3dc:	4a38      	ldr	r2, [pc, #224]	; (4c0 <can_init+0x2c8>)
     3de:	0412      	lsls	r2, r2, #16
     3e0:	0c12      	lsrs	r2, r2, #16
     3e2:	430a      	orrs	r2, r1
     3e4:	3018      	adds	r0, #24
     3e6:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
     3e8:	4a36      	ldr	r2, [pc, #216]	; (4c4 <can_init+0x2cc>)
     3ea:	0412      	lsls	r2, r2, #16
     3ec:	0c12      	lsrs	r2, r2, #16
     3ee:	4311      	orrs	r1, r2
     3f0:	22b0      	movs	r2, #176	; 0xb0
     3f2:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
     3f4:	4a34      	ldr	r2, [pc, #208]	; (4c8 <can_init+0x2d0>)
     3f6:	0412      	lsls	r2, r2, #16
     3f8:	0c12      	lsrs	r2, r2, #16
     3fa:	21ac      	movs	r1, #172	; 0xac
     3fc:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
     3fe:	4a33      	ldr	r2, [pc, #204]	; (4cc <can_init+0x2d4>)
     400:	0412      	lsls	r2, r2, #16
     402:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
     404:	4932      	ldr	r1, [pc, #200]	; (4d0 <can_init+0x2d8>)
     406:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
     408:	21c0      	movs	r1, #192	; 0xc0
     40a:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
     40c:	4a31      	ldr	r2, [pc, #196]	; (4d4 <can_init+0x2dc>)
     40e:	0412      	lsls	r2, r2, #16
     410:	0c12      	lsrs	r2, r2, #16
     412:	2180      	movs	r1, #128	; 0x80
     414:	0309      	lsls	r1, r1, #12
     416:	430a      	orrs	r2, r1
     418:	21f0      	movs	r1, #240	; 0xf0
     41a:	505a      	str	r2, [r3, r1]
     41c:	e703      	b.n	226 <can_init+0x2e>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
     41e:	491f      	ldr	r1, [pc, #124]	; (49c <can_init+0x2a4>)
     420:	201b      	movs	r0, #27
     422:	4b23      	ldr	r3, [pc, #140]	; (4b0 <can_init+0x2b8>)
     424:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
     426:	201b      	movs	r0, #27
     428:	4b22      	ldr	r3, [pc, #136]	; (4b4 <can_init+0x2bc>)
     42a:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
     42c:	4b1d      	ldr	r3, [pc, #116]	; (4a4 <can_init+0x2ac>)
     42e:	699a      	ldr	r2, [r3, #24]
     430:	2102      	movs	r1, #2
     432:	430a      	orrs	r2, r1
     434:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
     436:	4a28      	ldr	r2, [pc, #160]	; (4d8 <can_init+0x2e0>)
     438:	0412      	lsls	r2, r2, #16
     43a:	0c12      	lsrs	r2, r2, #16
     43c:	2180      	movs	r1, #128	; 0x80
     43e:	0389      	lsls	r1, r1, #14
     440:	430a      	orrs	r2, r1
     442:	2184      	movs	r1, #132	; 0x84
     444:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
     446:	4a25      	ldr	r2, [pc, #148]	; (4dc <can_init+0x2e4>)
     448:	0412      	lsls	r2, r2, #16
     44a:	0c12      	lsrs	r2, r2, #16
     44c:	2180      	movs	r1, #128	; 0x80
     44e:	0349      	lsls	r1, r1, #13
     450:	430a      	orrs	r2, r1
     452:	2088      	movs	r0, #136	; 0x88
     454:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
     456:	4a22      	ldr	r2, [pc, #136]	; (4e0 <can_init+0x2e8>)
     458:	0412      	lsls	r2, r2, #16
     45a:	0c12      	lsrs	r2, r2, #16
     45c:	430a      	orrs	r2, r1
     45e:	3018      	adds	r0, #24
     460:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
     462:	4a20      	ldr	r2, [pc, #128]	; (4e4 <can_init+0x2ec>)
     464:	0412      	lsls	r2, r2, #16
     466:	0c12      	lsrs	r2, r2, #16
     468:	4311      	orrs	r1, r2
     46a:	22b0      	movs	r2, #176	; 0xb0
     46c:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
     46e:	4a1e      	ldr	r2, [pc, #120]	; (4e8 <can_init+0x2f0>)
     470:	0412      	lsls	r2, r2, #16
     472:	0c12      	lsrs	r2, r2, #16
     474:	21ac      	movs	r1, #172	; 0xac
     476:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
     478:	4a1c      	ldr	r2, [pc, #112]	; (4ec <can_init+0x2f4>)
     47a:	0412      	lsls	r2, r2, #16
     47c:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
     47e:	4914      	ldr	r1, [pc, #80]	; (4d0 <can_init+0x2d8>)
     480:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
     482:	21c0      	movs	r1, #192	; 0xc0
     484:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
     486:	4a1a      	ldr	r2, [pc, #104]	; (4f0 <can_init+0x2f8>)
     488:	0412      	lsls	r2, r2, #16
     48a:	0c12      	lsrs	r2, r2, #16
     48c:	2180      	movs	r1, #128	; 0x80
     48e:	0309      	lsls	r1, r1, #12
     490:	430a      	orrs	r2, r1
     492:	21f0      	movs	r1, #240	; 0xf0
     494:	505a      	str	r2, [r3, r1]
     496:	e6c6      	b.n	226 <can_init+0x2e>
     498:	000001c1 	.word	0x000001c1
     49c:	20000dc8 	.word	0x20000dc8
     4a0:	42001c00 	.word	0x42001c00
     4a4:	42002000 	.word	0x42002000
     4a8:	06050a03 	.word	0x06050a03
     4ac:	00050a33 	.word	0x00050a33
     4b0:	00001615 	.word	0x00001615
     4b4:	000015a5 	.word	0x000015a5
     4b8:	2000050c 	.word	0x2000050c
     4bc:	2000028c 	.word	0x2000028c
     4c0:	2000030c 	.word	0x2000030c
     4c4:	2000040c 	.word	0x2000040c
     4c8:	2000018c 	.word	0x2000018c
     4cc:	2000058c 	.word	0x2000058c
     4d0:	04040000 	.word	0x04040000
     4d4:	2000060c 	.word	0x2000060c
     4d8:	200009cc 	.word	0x200009cc
     4dc:	2000074c 	.word	0x2000074c
     4e0:	200007cc 	.word	0x200007cc
     4e4:	200008cc 	.word	0x200008cc
     4e8:	2000064c 	.word	0x2000064c
     4ec:	20000a4c 	.word	0x20000a4c
     4f0:	20000acc 	.word	0x20000acc

000004f4 <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
     4f4:	6802      	ldr	r2, [r0, #0]
     4f6:	6993      	ldr	r3, [r2, #24]
     4f8:	2101      	movs	r1, #1
     4fa:	438b      	bics	r3, r1
     4fc:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
     4fe:	6801      	ldr	r1, [r0, #0]
     500:	2201      	movs	r2, #1
     502:	698b      	ldr	r3, [r1, #24]
     504:	421a      	tst	r2, r3
     506:	d1fc      	bne.n	502 <can_start+0xe>
}
     508:	4770      	bx	lr
	...

0000050c <can_set_rx_standard_filter>:
}

enum status_code can_set_rx_standard_filter(
		struct can_module *const module_inst,
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
     50c:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
     50e:	6803      	ldr	r3, [r0, #0]
     510:	4809      	ldr	r0, [pc, #36]	; (538 <can_set_rx_standard_filter+0x2c>)
     512:	4283      	cmp	r3, r0
     514:	d004      	beq.n	520 <can_set_rx_standard_filter+0x14>
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     516:	4c09      	ldr	r4, [pc, #36]	; (53c <can_set_rx_standard_filter+0x30>)
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     518:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     51a:	42a3      	cmp	r3, r4
     51c:	d006      	beq.n	52c <can_set_rx_standard_filter+0x20>
}
     51e:	bd10      	pop	{r4, pc}
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
     520:	6809      	ldr	r1, [r1, #0]
     522:	0092      	lsls	r2, r2, #2
     524:	4b06      	ldr	r3, [pc, #24]	; (540 <can_set_rx_standard_filter+0x34>)
     526:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     528:	2000      	movs	r0, #0
     52a:	e7f8      	b.n	51e <can_set_rx_standard_filter+0x12>
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
     52c:	6809      	ldr	r1, [r1, #0]
     52e:	0092      	lsls	r2, r2, #2
     530:	4b04      	ldr	r3, [pc, #16]	; (544 <can_set_rx_standard_filter+0x38>)
     532:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     534:	2000      	movs	r0, #0
     536:	e7f2      	b.n	51e <can_set_rx_standard_filter+0x12>
     538:	42001c00 	.word	0x42001c00
     53c:	42002000 	.word	0x42002000
     540:	2000050c 	.word	0x2000050c
     544:	200009cc 	.word	0x200009cc

00000548 <can_get_rx_buffer_element>:
}

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
     548:	b570      	push	{r4, r5, r6, lr}
     54a:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
     54c:	6803      	ldr	r3, [r0, #0]
     54e:	4c0d      	ldr	r4, [pc, #52]	; (584 <can_get_rx_buffer_element+0x3c>)
     550:	42a3      	cmp	r3, r4
     552:	d004      	beq.n	55e <can_get_rx_buffer_element+0x16>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     554:	4c0c      	ldr	r4, [pc, #48]	; (588 <can_get_rx_buffer_element+0x40>)
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     556:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     558:	42a3      	cmp	r3, r4
     55a:	d009      	beq.n	570 <can_get_rx_buffer_element+0x28>
}
     55c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
     55e:	0112      	lsls	r2, r2, #4
     560:	490a      	ldr	r1, [pc, #40]	; (58c <can_get_rx_buffer_element+0x44>)
     562:	1889      	adds	r1, r1, r2
     564:	2210      	movs	r2, #16
     566:	0028      	movs	r0, r5
     568:	4b09      	ldr	r3, [pc, #36]	; (590 <can_get_rx_buffer_element+0x48>)
     56a:	4798      	blx	r3
		return STATUS_OK;
     56c:	2000      	movs	r0, #0
     56e:	e7f5      	b.n	55c <can_get_rx_buffer_element+0x14>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
     570:	0112      	lsls	r2, r2, #4
     572:	4908      	ldr	r1, [pc, #32]	; (594 <can_get_rx_buffer_element+0x4c>)
     574:	1889      	adds	r1, r1, r2
     576:	2210      	movs	r2, #16
     578:	0028      	movs	r0, r5
     57a:	4b05      	ldr	r3, [pc, #20]	; (590 <can_get_rx_buffer_element+0x48>)
     57c:	4798      	blx	r3
		return STATUS_OK;
     57e:	2000      	movs	r0, #0
     580:	e7ec      	b.n	55c <can_get_rx_buffer_element+0x14>
     582:	46c0      	nop			; (mov r8, r8)
     584:	42001c00 	.word	0x42001c00
     588:	42002000 	.word	0x42002000
     58c:	2000018c 	.word	0x2000018c
     590:	0000546d 	.word	0x0000546d
     594:	2000064c 	.word	0x2000064c

00000598 <can_get_rx_fifo_0_element>:

enum status_code can_get_rx_fifo_0_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
     59c:	6803      	ldr	r3, [r0, #0]
     59e:	4c0d      	ldr	r4, [pc, #52]	; (5d4 <can_get_rx_fifo_0_element+0x3c>)
     5a0:	42a3      	cmp	r3, r4
     5a2:	d004      	beq.n	5ae <can_get_rx_fifo_0_element+0x16>
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     5a4:	4c0c      	ldr	r4, [pc, #48]	; (5d8 <can_get_rx_fifo_0_element+0x40>)
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     5a6:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     5a8:	42a3      	cmp	r3, r4
     5aa:	d009      	beq.n	5c0 <can_get_rx_fifo_0_element+0x28>
}
     5ac:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
     5ae:	0112      	lsls	r2, r2, #4
     5b0:	490a      	ldr	r1, [pc, #40]	; (5dc <can_get_rx_fifo_0_element+0x44>)
     5b2:	1889      	adds	r1, r1, r2
     5b4:	2210      	movs	r2, #16
     5b6:	0028      	movs	r0, r5
     5b8:	4b09      	ldr	r3, [pc, #36]	; (5e0 <can_get_rx_fifo_0_element+0x48>)
     5ba:	4798      	blx	r3
		return STATUS_OK;
     5bc:	2000      	movs	r0, #0
     5be:	e7f5      	b.n	5ac <can_get_rx_fifo_0_element+0x14>
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
     5c0:	0112      	lsls	r2, r2, #4
     5c2:	4908      	ldr	r1, [pc, #32]	; (5e4 <can_get_rx_fifo_0_element+0x4c>)
     5c4:	1889      	adds	r1, r1, r2
     5c6:	2210      	movs	r2, #16
     5c8:	0028      	movs	r0, r5
     5ca:	4b05      	ldr	r3, [pc, #20]	; (5e0 <can_get_rx_fifo_0_element+0x48>)
     5cc:	4798      	blx	r3
		return STATUS_OK;
     5ce:	2000      	movs	r0, #0
     5d0:	e7ec      	b.n	5ac <can_get_rx_fifo_0_element+0x14>
     5d2:	46c0      	nop			; (mov r8, r8)
     5d4:	42001c00 	.word	0x42001c00
     5d8:	42002000 	.word	0x42002000
     5dc:	2000030c 	.word	0x2000030c
     5e0:	0000546d 	.word	0x0000546d
     5e4:	200007cc 	.word	0x200007cc

000005e8 <can_set_tx_buffer_element>:
}

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
     5e8:	b510      	push	{r4, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
     5ea:	6803      	ldr	r3, [r0, #0]
     5ec:	4817      	ldr	r0, [pc, #92]	; (64c <can_set_tx_buffer_element+0x64>)
     5ee:	4283      	cmp	r3, r0
     5f0:	d004      	beq.n	5fc <can_set_tx_buffer_element+0x14>
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     5f2:	4c17      	ldr	r4, [pc, #92]	; (650 <can_set_tx_buffer_element+0x68>)
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     5f4:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     5f6:	42a3      	cmp	r3, r4
     5f8:	d014      	beq.n	624 <can_set_tx_buffer_element+0x3c>
}
     5fa:	bd10      	pop	{r4, pc}
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
     5fc:	680b      	ldr	r3, [r1, #0]
     5fe:	4815      	ldr	r0, [pc, #84]	; (654 <can_set_tx_buffer_element+0x6c>)
     600:	0112      	lsls	r2, r2, #4
     602:	5013      	str	r3, [r2, r0]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
     604:	684c      	ldr	r4, [r1, #4]
     606:	1883      	adds	r3, r0, r2
     608:	605c      	str	r4, [r3, #4]
     60a:	000b      	movs	r3, r1
     60c:	3308      	adds	r3, #8
     60e:	3208      	adds	r2, #8
     610:	1882      	adds	r2, r0, r2
     612:	3110      	adds	r1, #16
			can0_tx_buffer[index].data[i] = tx_element->data[i];
     614:	7818      	ldrb	r0, [r3, #0]
     616:	7010      	strb	r0, [r2, #0]
     618:	3301      	adds	r3, #1
     61a:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     61c:	428b      	cmp	r3, r1
     61e:	d1f9      	bne.n	614 <can_set_tx_buffer_element+0x2c>
		return STATUS_OK;
     620:	2000      	movs	r0, #0
     622:	e7ea      	b.n	5fa <can_set_tx_buffer_element+0x12>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
     624:	680b      	ldr	r3, [r1, #0]
     626:	480c      	ldr	r0, [pc, #48]	; (658 <can_set_tx_buffer_element+0x70>)
     628:	0112      	lsls	r2, r2, #4
     62a:	5013      	str	r3, [r2, r0]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
     62c:	684c      	ldr	r4, [r1, #4]
     62e:	1883      	adds	r3, r0, r2
     630:	605c      	str	r4, [r3, #4]
     632:	000b      	movs	r3, r1
     634:	3308      	adds	r3, #8
     636:	3208      	adds	r2, #8
     638:	1882      	adds	r2, r0, r2
     63a:	3110      	adds	r1, #16
			can1_tx_buffer[index].data[i] = tx_element->data[i];
     63c:	7818      	ldrb	r0, [r3, #0]
     63e:	7010      	strb	r0, [r2, #0]
     640:	3301      	adds	r3, #1
     642:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     644:	428b      	cmp	r3, r1
     646:	d1f9      	bne.n	63c <can_set_tx_buffer_element+0x54>
		return STATUS_OK;
     648:	2000      	movs	r0, #0
     64a:	e7d6      	b.n	5fa <can_set_tx_buffer_element+0x12>
     64c:	42001c00 	.word	0x42001c00
     650:	42002000 	.word	0x42002000
     654:	2000058c 	.word	0x2000058c
     658:	20000a4c 	.word	0x20000a4c

0000065c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     65c:	b500      	push	{lr}
     65e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     660:	ab01      	add	r3, sp, #4
     662:	2280      	movs	r2, #128	; 0x80
     664:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     666:	780a      	ldrb	r2, [r1, #0]
     668:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     66a:	784a      	ldrb	r2, [r1, #1]
     66c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     66e:	788a      	ldrb	r2, [r1, #2]
     670:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     672:	0019      	movs	r1, r3
     674:	4b01      	ldr	r3, [pc, #4]	; (67c <port_pin_set_config+0x20>)
     676:	4798      	blx	r3
}
     678:	b003      	add	sp, #12
     67a:	bd00      	pop	{pc}
     67c:	00001711 	.word	0x00001711

00000680 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     680:	b5f0      	push	{r4, r5, r6, r7, lr}
     682:	46de      	mov	lr, fp
     684:	4657      	mov	r7, sl
     686:	464e      	mov	r6, r9
     688:	4645      	mov	r5, r8
     68a:	b5e0      	push	{r5, r6, r7, lr}
     68c:	b087      	sub	sp, #28
     68e:	4680      	mov	r8, r0
     690:	9104      	str	r1, [sp, #16]
     692:	0016      	movs	r6, r2
     694:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     696:	2200      	movs	r2, #0
     698:	2300      	movs	r3, #0
     69a:	2100      	movs	r1, #0
     69c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     69e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     6a0:	2001      	movs	r0, #1
     6a2:	0021      	movs	r1, r4
     6a4:	9600      	str	r6, [sp, #0]
     6a6:	9701      	str	r7, [sp, #4]
     6a8:	465c      	mov	r4, fp
     6aa:	9403      	str	r4, [sp, #12]
     6ac:	4644      	mov	r4, r8
     6ae:	9405      	str	r4, [sp, #20]
     6b0:	e013      	b.n	6da <long_division+0x5a>
     6b2:	2420      	movs	r4, #32
     6b4:	1a64      	subs	r4, r4, r1
     6b6:	0005      	movs	r5, r0
     6b8:	40e5      	lsrs	r5, r4
     6ba:	46a8      	mov	r8, r5
     6bc:	e014      	b.n	6e8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     6be:	9c00      	ldr	r4, [sp, #0]
     6c0:	9d01      	ldr	r5, [sp, #4]
     6c2:	1b12      	subs	r2, r2, r4
     6c4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     6c6:	465c      	mov	r4, fp
     6c8:	464d      	mov	r5, r9
     6ca:	432c      	orrs	r4, r5
     6cc:	46a3      	mov	fp, r4
     6ce:	9c03      	ldr	r4, [sp, #12]
     6d0:	4645      	mov	r5, r8
     6d2:	432c      	orrs	r4, r5
     6d4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     6d6:	3901      	subs	r1, #1
     6d8:	d325      	bcc.n	726 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     6da:	2420      	movs	r4, #32
     6dc:	4264      	negs	r4, r4
     6de:	190c      	adds	r4, r1, r4
     6e0:	d4e7      	bmi.n	6b2 <long_division+0x32>
     6e2:	0005      	movs	r5, r0
     6e4:	40a5      	lsls	r5, r4
     6e6:	46a8      	mov	r8, r5
     6e8:	0004      	movs	r4, r0
     6ea:	408c      	lsls	r4, r1
     6ec:	46a1      	mov	r9, r4
		r = r << 1;
     6ee:	1892      	adds	r2, r2, r2
     6f0:	415b      	adcs	r3, r3
     6f2:	0014      	movs	r4, r2
     6f4:	001d      	movs	r5, r3
		if (n & bit_shift) {
     6f6:	9e05      	ldr	r6, [sp, #20]
     6f8:	464f      	mov	r7, r9
     6fa:	403e      	ands	r6, r7
     6fc:	46b4      	mov	ip, r6
     6fe:	9e04      	ldr	r6, [sp, #16]
     700:	4647      	mov	r7, r8
     702:	403e      	ands	r6, r7
     704:	46b2      	mov	sl, r6
     706:	4666      	mov	r6, ip
     708:	4657      	mov	r7, sl
     70a:	433e      	orrs	r6, r7
     70c:	d003      	beq.n	716 <long_division+0x96>
			r |= 0x01;
     70e:	0006      	movs	r6, r0
     710:	4326      	orrs	r6, r4
     712:	0032      	movs	r2, r6
     714:	002b      	movs	r3, r5
		if (r >= d) {
     716:	9c00      	ldr	r4, [sp, #0]
     718:	9d01      	ldr	r5, [sp, #4]
     71a:	429d      	cmp	r5, r3
     71c:	d8db      	bhi.n	6d6 <long_division+0x56>
     71e:	d1ce      	bne.n	6be <long_division+0x3e>
     720:	4294      	cmp	r4, r2
     722:	d8d8      	bhi.n	6d6 <long_division+0x56>
     724:	e7cb      	b.n	6be <long_division+0x3e>
     726:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     728:	4658      	mov	r0, fp
     72a:	0019      	movs	r1, r3
     72c:	b007      	add	sp, #28
     72e:	bc3c      	pop	{r2, r3, r4, r5}
     730:	4690      	mov	r8, r2
     732:	4699      	mov	r9, r3
     734:	46a2      	mov	sl, r4
     736:	46ab      	mov	fp, r5
     738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000073a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     73a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     73c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     73e:	2340      	movs	r3, #64	; 0x40
     740:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     742:	4281      	cmp	r1, r0
     744:	d202      	bcs.n	74c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     746:	0018      	movs	r0, r3
     748:	bd10      	pop	{r4, pc}
		baud_calculated++;
     74a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     74c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     74e:	1c63      	adds	r3, r4, #1
     750:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     752:	4288      	cmp	r0, r1
     754:	d9f9      	bls.n	74a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     756:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     758:	2cff      	cmp	r4, #255	; 0xff
     75a:	d8f4      	bhi.n	746 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     75c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     75e:	2300      	movs	r3, #0
     760:	e7f1      	b.n	746 <_sercom_get_sync_baud_val+0xc>
	...

00000764 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     764:	b5f0      	push	{r4, r5, r6, r7, lr}
     766:	b083      	sub	sp, #12
     768:	000f      	movs	r7, r1
     76a:	0016      	movs	r6, r2
     76c:	aa08      	add	r2, sp, #32
     76e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     770:	0004      	movs	r4, r0
     772:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     774:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     776:	42bc      	cmp	r4, r7
     778:	d902      	bls.n	780 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     77a:	0010      	movs	r0, r2
     77c:	b003      	add	sp, #12
     77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     780:	2b00      	cmp	r3, #0
     782:	d114      	bne.n	7ae <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     784:	0002      	movs	r2, r0
     786:	0008      	movs	r0, r1
     788:	2100      	movs	r1, #0
     78a:	4c19      	ldr	r4, [pc, #100]	; (7f0 <_sercom_get_async_baud_val+0x8c>)
     78c:	47a0      	blx	r4
     78e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     790:	003a      	movs	r2, r7
     792:	2300      	movs	r3, #0
     794:	2000      	movs	r0, #0
     796:	4c17      	ldr	r4, [pc, #92]	; (7f4 <_sercom_get_async_baud_val+0x90>)
     798:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     79a:	2200      	movs	r2, #0
     79c:	2301      	movs	r3, #1
     79e:	1a12      	subs	r2, r2, r0
     7a0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     7a2:	0c12      	lsrs	r2, r2, #16
     7a4:	041b      	lsls	r3, r3, #16
     7a6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     7a8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     7aa:	2200      	movs	r2, #0
     7ac:	e7e5      	b.n	77a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     7ae:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     7b0:	2b01      	cmp	r3, #1
     7b2:	d1f9      	bne.n	7a8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     7b4:	000a      	movs	r2, r1
     7b6:	2300      	movs	r3, #0
     7b8:	2100      	movs	r1, #0
     7ba:	4c0d      	ldr	r4, [pc, #52]	; (7f0 <_sercom_get_async_baud_val+0x8c>)
     7bc:	47a0      	blx	r4
     7be:	0002      	movs	r2, r0
     7c0:	000b      	movs	r3, r1
     7c2:	9200      	str	r2, [sp, #0]
     7c4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     7c6:	0038      	movs	r0, r7
     7c8:	2100      	movs	r1, #0
     7ca:	4c0a      	ldr	r4, [pc, #40]	; (7f4 <_sercom_get_async_baud_val+0x90>)
     7cc:	47a0      	blx	r4
     7ce:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     7d0:	2380      	movs	r3, #128	; 0x80
     7d2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7d4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     7d6:	4298      	cmp	r0, r3
     7d8:	d8cf      	bhi.n	77a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     7da:	0f79      	lsrs	r1, r7, #29
     7dc:	00f8      	lsls	r0, r7, #3
     7de:	9a00      	ldr	r2, [sp, #0]
     7e0:	9b01      	ldr	r3, [sp, #4]
     7e2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     7e4:	00ea      	lsls	r2, r5, #3
     7e6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     7e8:	b2d2      	uxtb	r2, r2
     7ea:	0352      	lsls	r2, r2, #13
     7ec:	432a      	orrs	r2, r5
     7ee:	e7db      	b.n	7a8 <_sercom_get_async_baud_val+0x44>
     7f0:	000053d1 	.word	0x000053d1
     7f4:	00000681 	.word	0x00000681

000007f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     7f8:	b510      	push	{r4, lr}
     7fa:	b082      	sub	sp, #8
     7fc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     7fe:	4b0e      	ldr	r3, [pc, #56]	; (838 <sercom_set_gclk_generator+0x40>)
     800:	781b      	ldrb	r3, [r3, #0]
     802:	2b00      	cmp	r3, #0
     804:	d007      	beq.n	816 <sercom_set_gclk_generator+0x1e>
     806:	2900      	cmp	r1, #0
     808:	d105      	bne.n	816 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     80a:	4b0b      	ldr	r3, [pc, #44]	; (838 <sercom_set_gclk_generator+0x40>)
     80c:	785b      	ldrb	r3, [r3, #1]
     80e:	4283      	cmp	r3, r0
     810:	d010      	beq.n	834 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     812:	201d      	movs	r0, #29
     814:	e00c      	b.n	830 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     816:	a901      	add	r1, sp, #4
     818:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     81a:	2012      	movs	r0, #18
     81c:	4b07      	ldr	r3, [pc, #28]	; (83c <sercom_set_gclk_generator+0x44>)
     81e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     820:	2012      	movs	r0, #18
     822:	4b07      	ldr	r3, [pc, #28]	; (840 <sercom_set_gclk_generator+0x48>)
     824:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     826:	4b04      	ldr	r3, [pc, #16]	; (838 <sercom_set_gclk_generator+0x40>)
     828:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     82a:	2201      	movs	r2, #1
     82c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     82e:	2000      	movs	r0, #0
}
     830:	b002      	add	sp, #8
     832:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     834:	2000      	movs	r0, #0
     836:	e7fb      	b.n	830 <sercom_set_gclk_generator+0x38>
     838:	20000b0c 	.word	0x20000b0c
     83c:	00001615 	.word	0x00001615
     840:	000015a5 	.word	0x000015a5

00000844 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     844:	4b40      	ldr	r3, [pc, #256]	; (948 <_sercom_get_default_pad+0x104>)
     846:	4298      	cmp	r0, r3
     848:	d031      	beq.n	8ae <_sercom_get_default_pad+0x6a>
     84a:	d90a      	bls.n	862 <_sercom_get_default_pad+0x1e>
     84c:	4b3f      	ldr	r3, [pc, #252]	; (94c <_sercom_get_default_pad+0x108>)
     84e:	4298      	cmp	r0, r3
     850:	d04d      	beq.n	8ee <_sercom_get_default_pad+0xaa>
     852:	4b3f      	ldr	r3, [pc, #252]	; (950 <_sercom_get_default_pad+0x10c>)
     854:	4298      	cmp	r0, r3
     856:	d05a      	beq.n	90e <_sercom_get_default_pad+0xca>
     858:	4b3e      	ldr	r3, [pc, #248]	; (954 <_sercom_get_default_pad+0x110>)
     85a:	4298      	cmp	r0, r3
     85c:	d037      	beq.n	8ce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     85e:	2000      	movs	r0, #0
}
     860:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     862:	4b3d      	ldr	r3, [pc, #244]	; (958 <_sercom_get_default_pad+0x114>)
     864:	4298      	cmp	r0, r3
     866:	d00c      	beq.n	882 <_sercom_get_default_pad+0x3e>
     868:	4b3c      	ldr	r3, [pc, #240]	; (95c <_sercom_get_default_pad+0x118>)
     86a:	4298      	cmp	r0, r3
     86c:	d1f7      	bne.n	85e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     86e:	2901      	cmp	r1, #1
     870:	d017      	beq.n	8a2 <_sercom_get_default_pad+0x5e>
     872:	2900      	cmp	r1, #0
     874:	d05d      	beq.n	932 <_sercom_get_default_pad+0xee>
     876:	2902      	cmp	r1, #2
     878:	d015      	beq.n	8a6 <_sercom_get_default_pad+0x62>
     87a:	2903      	cmp	r1, #3
     87c:	d015      	beq.n	8aa <_sercom_get_default_pad+0x66>
	return 0;
     87e:	2000      	movs	r0, #0
     880:	e7ee      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     882:	2901      	cmp	r1, #1
     884:	d007      	beq.n	896 <_sercom_get_default_pad+0x52>
     886:	2900      	cmp	r1, #0
     888:	d051      	beq.n	92e <_sercom_get_default_pad+0xea>
     88a:	2902      	cmp	r1, #2
     88c:	d005      	beq.n	89a <_sercom_get_default_pad+0x56>
     88e:	2903      	cmp	r1, #3
     890:	d005      	beq.n	89e <_sercom_get_default_pad+0x5a>
	return 0;
     892:	2000      	movs	r0, #0
     894:	e7e4      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     896:	4832      	ldr	r0, [pc, #200]	; (960 <_sercom_get_default_pad+0x11c>)
     898:	e7e2      	b.n	860 <_sercom_get_default_pad+0x1c>
     89a:	4832      	ldr	r0, [pc, #200]	; (964 <_sercom_get_default_pad+0x120>)
     89c:	e7e0      	b.n	860 <_sercom_get_default_pad+0x1c>
     89e:	4832      	ldr	r0, [pc, #200]	; (968 <_sercom_get_default_pad+0x124>)
     8a0:	e7de      	b.n	860 <_sercom_get_default_pad+0x1c>
     8a2:	4832      	ldr	r0, [pc, #200]	; (96c <_sercom_get_default_pad+0x128>)
     8a4:	e7dc      	b.n	860 <_sercom_get_default_pad+0x1c>
     8a6:	4832      	ldr	r0, [pc, #200]	; (970 <_sercom_get_default_pad+0x12c>)
     8a8:	e7da      	b.n	860 <_sercom_get_default_pad+0x1c>
     8aa:	4832      	ldr	r0, [pc, #200]	; (974 <_sercom_get_default_pad+0x130>)
     8ac:	e7d8      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ae:	2901      	cmp	r1, #1
     8b0:	d007      	beq.n	8c2 <_sercom_get_default_pad+0x7e>
     8b2:	2900      	cmp	r1, #0
     8b4:	d03f      	beq.n	936 <_sercom_get_default_pad+0xf2>
     8b6:	2902      	cmp	r1, #2
     8b8:	d005      	beq.n	8c6 <_sercom_get_default_pad+0x82>
     8ba:	2903      	cmp	r1, #3
     8bc:	d005      	beq.n	8ca <_sercom_get_default_pad+0x86>
	return 0;
     8be:	2000      	movs	r0, #0
     8c0:	e7ce      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8c2:	482d      	ldr	r0, [pc, #180]	; (978 <_sercom_get_default_pad+0x134>)
     8c4:	e7cc      	b.n	860 <_sercom_get_default_pad+0x1c>
     8c6:	482d      	ldr	r0, [pc, #180]	; (97c <_sercom_get_default_pad+0x138>)
     8c8:	e7ca      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ca:	482d      	ldr	r0, [pc, #180]	; (980 <_sercom_get_default_pad+0x13c>)
     8cc:	e7c8      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ce:	2901      	cmp	r1, #1
     8d0:	d007      	beq.n	8e2 <_sercom_get_default_pad+0x9e>
     8d2:	2900      	cmp	r1, #0
     8d4:	d031      	beq.n	93a <_sercom_get_default_pad+0xf6>
     8d6:	2902      	cmp	r1, #2
     8d8:	d005      	beq.n	8e6 <_sercom_get_default_pad+0xa2>
     8da:	2903      	cmp	r1, #3
     8dc:	d005      	beq.n	8ea <_sercom_get_default_pad+0xa6>
	return 0;
     8de:	2000      	movs	r0, #0
     8e0:	e7be      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e2:	4828      	ldr	r0, [pc, #160]	; (984 <_sercom_get_default_pad+0x140>)
     8e4:	e7bc      	b.n	860 <_sercom_get_default_pad+0x1c>
     8e6:	4828      	ldr	r0, [pc, #160]	; (988 <_sercom_get_default_pad+0x144>)
     8e8:	e7ba      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ea:	4828      	ldr	r0, [pc, #160]	; (98c <_sercom_get_default_pad+0x148>)
     8ec:	e7b8      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ee:	2901      	cmp	r1, #1
     8f0:	d007      	beq.n	902 <_sercom_get_default_pad+0xbe>
     8f2:	2900      	cmp	r1, #0
     8f4:	d023      	beq.n	93e <_sercom_get_default_pad+0xfa>
     8f6:	2902      	cmp	r1, #2
     8f8:	d005      	beq.n	906 <_sercom_get_default_pad+0xc2>
     8fa:	2903      	cmp	r1, #3
     8fc:	d005      	beq.n	90a <_sercom_get_default_pad+0xc6>
	return 0;
     8fe:	2000      	movs	r0, #0
     900:	e7ae      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     902:	4823      	ldr	r0, [pc, #140]	; (990 <_sercom_get_default_pad+0x14c>)
     904:	e7ac      	b.n	860 <_sercom_get_default_pad+0x1c>
     906:	4823      	ldr	r0, [pc, #140]	; (994 <_sercom_get_default_pad+0x150>)
     908:	e7aa      	b.n	860 <_sercom_get_default_pad+0x1c>
     90a:	4823      	ldr	r0, [pc, #140]	; (998 <_sercom_get_default_pad+0x154>)
     90c:	e7a8      	b.n	860 <_sercom_get_default_pad+0x1c>
     90e:	2901      	cmp	r1, #1
     910:	d007      	beq.n	922 <_sercom_get_default_pad+0xde>
     912:	2900      	cmp	r1, #0
     914:	d015      	beq.n	942 <_sercom_get_default_pad+0xfe>
     916:	2902      	cmp	r1, #2
     918:	d005      	beq.n	926 <_sercom_get_default_pad+0xe2>
     91a:	2903      	cmp	r1, #3
     91c:	d005      	beq.n	92a <_sercom_get_default_pad+0xe6>
	return 0;
     91e:	2000      	movs	r0, #0
     920:	e79e      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     922:	481e      	ldr	r0, [pc, #120]	; (99c <_sercom_get_default_pad+0x158>)
     924:	e79c      	b.n	860 <_sercom_get_default_pad+0x1c>
     926:	481e      	ldr	r0, [pc, #120]	; (9a0 <_sercom_get_default_pad+0x15c>)
     928:	e79a      	b.n	860 <_sercom_get_default_pad+0x1c>
     92a:	481e      	ldr	r0, [pc, #120]	; (9a4 <_sercom_get_default_pad+0x160>)
     92c:	e798      	b.n	860 <_sercom_get_default_pad+0x1c>
     92e:	481e      	ldr	r0, [pc, #120]	; (9a8 <_sercom_get_default_pad+0x164>)
     930:	e796      	b.n	860 <_sercom_get_default_pad+0x1c>
     932:	481e      	ldr	r0, [pc, #120]	; (9ac <_sercom_get_default_pad+0x168>)
     934:	e794      	b.n	860 <_sercom_get_default_pad+0x1c>
     936:	481e      	ldr	r0, [pc, #120]	; (9b0 <_sercom_get_default_pad+0x16c>)
     938:	e792      	b.n	860 <_sercom_get_default_pad+0x1c>
     93a:	481e      	ldr	r0, [pc, #120]	; (9b4 <_sercom_get_default_pad+0x170>)
     93c:	e790      	b.n	860 <_sercom_get_default_pad+0x1c>
     93e:	481e      	ldr	r0, [pc, #120]	; (9b8 <_sercom_get_default_pad+0x174>)
     940:	e78e      	b.n	860 <_sercom_get_default_pad+0x1c>
     942:	481e      	ldr	r0, [pc, #120]	; (9bc <_sercom_get_default_pad+0x178>)
     944:	e78c      	b.n	860 <_sercom_get_default_pad+0x1c>
     946:	46c0      	nop			; (mov r8, r8)
     948:	42000c00 	.word	0x42000c00
     94c:	42001400 	.word	0x42001400
     950:	42001800 	.word	0x42001800
     954:	42001000 	.word	0x42001000
     958:	42000400 	.word	0x42000400
     95c:	42000800 	.word	0x42000800
     960:	00050003 	.word	0x00050003
     964:	00060003 	.word	0x00060003
     968:	00070003 	.word	0x00070003
     96c:	00110002 	.word	0x00110002
     970:	00120002 	.word	0x00120002
     974:	00130002 	.word	0x00130002
     978:	000d0002 	.word	0x000d0002
     97c:	000e0002 	.word	0x000e0002
     980:	000f0002 	.word	0x000f0002
     984:	00170002 	.word	0x00170002
     988:	00180002 	.word	0x00180002
     98c:	00190002 	.word	0x00190002
     990:	00290003 	.word	0x00290003
     994:	002a0003 	.word	0x002a0003
     998:	002b0003 	.word	0x002b0003
     99c:	00230003 	.word	0x00230003
     9a0:	00200003 	.word	0x00200003
     9a4:	00210003 	.word	0x00210003
     9a8:	00040003 	.word	0x00040003
     9ac:	00100002 	.word	0x00100002
     9b0:	000c0002 	.word	0x000c0002
     9b4:	00160002 	.word	0x00160002
     9b8:	00280003 	.word	0x00280003
     9bc:	00220003 	.word	0x00220003

000009c0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     9c0:	b530      	push	{r4, r5, lr}
     9c2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     9c4:	4b0b      	ldr	r3, [pc, #44]	; (9f4 <_sercom_get_sercom_inst_index+0x34>)
     9c6:	466a      	mov	r2, sp
     9c8:	cb32      	ldmia	r3!, {r1, r4, r5}
     9ca:	c232      	stmia	r2!, {r1, r4, r5}
     9cc:	cb32      	ldmia	r3!, {r1, r4, r5}
     9ce:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     9d0:	9b00      	ldr	r3, [sp, #0]
     9d2:	4283      	cmp	r3, r0
     9d4:	d00b      	beq.n	9ee <_sercom_get_sercom_inst_index+0x2e>
     9d6:	2301      	movs	r3, #1
     9d8:	009a      	lsls	r2, r3, #2
     9da:	4669      	mov	r1, sp
     9dc:	5852      	ldr	r2, [r2, r1]
     9de:	4282      	cmp	r2, r0
     9e0:	d006      	beq.n	9f0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9e2:	3301      	adds	r3, #1
     9e4:	2b06      	cmp	r3, #6
     9e6:	d1f7      	bne.n	9d8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     9e8:	2000      	movs	r0, #0
}
     9ea:	b007      	add	sp, #28
     9ec:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9ee:	2300      	movs	r3, #0
			return i;
     9f0:	b2d8      	uxtb	r0, r3
     9f2:	e7fa      	b.n	9ea <_sercom_get_sercom_inst_index+0x2a>
     9f4:	0000656c 	.word	0x0000656c

000009f8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     9f8:	4770      	bx	lr
	...

000009fc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     9fe:	4b0a      	ldr	r3, [pc, #40]	; (a28 <_sercom_set_handler+0x2c>)
     a00:	781b      	ldrb	r3, [r3, #0]
     a02:	2b00      	cmp	r3, #0
     a04:	d10c      	bne.n	a20 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a06:	4f09      	ldr	r7, [pc, #36]	; (a2c <_sercom_set_handler+0x30>)
     a08:	4e09      	ldr	r6, [pc, #36]	; (a30 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     a0a:	4d0a      	ldr	r5, [pc, #40]	; (a34 <_sercom_set_handler+0x38>)
     a0c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a0e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     a10:	195a      	adds	r2, r3, r5
     a12:	6014      	str	r4, [r2, #0]
     a14:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a16:	2b18      	cmp	r3, #24
     a18:	d1f9      	bne.n	a0e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     a1a:	2201      	movs	r2, #1
     a1c:	4b02      	ldr	r3, [pc, #8]	; (a28 <_sercom_set_handler+0x2c>)
     a1e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     a20:	0080      	lsls	r0, r0, #2
     a22:	4b02      	ldr	r3, [pc, #8]	; (a2c <_sercom_set_handler+0x30>)
     a24:	50c1      	str	r1, [r0, r3]
}
     a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a28:	20000b0e 	.word	0x20000b0e
     a2c:	20000b10 	.word	0x20000b10
     a30:	000009f9 	.word	0x000009f9
     a34:	20000dcc 	.word	0x20000dcc

00000a38 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     a38:	b500      	push	{lr}
     a3a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     a3c:	2309      	movs	r3, #9
     a3e:	466a      	mov	r2, sp
     a40:	7013      	strb	r3, [r2, #0]
     a42:	3301      	adds	r3, #1
     a44:	7053      	strb	r3, [r2, #1]
     a46:	3301      	adds	r3, #1
     a48:	7093      	strb	r3, [r2, #2]
     a4a:	3301      	adds	r3, #1
     a4c:	70d3      	strb	r3, [r2, #3]
     a4e:	3301      	adds	r3, #1
     a50:	7113      	strb	r3, [r2, #4]
     a52:	3301      	adds	r3, #1
     a54:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     a56:	4b03      	ldr	r3, [pc, #12]	; (a64 <_sercom_get_interrupt_vector+0x2c>)
     a58:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     a5a:	466b      	mov	r3, sp
     a5c:	5618      	ldrsb	r0, [r3, r0]
}
     a5e:	b003      	add	sp, #12
     a60:	bd00      	pop	{pc}
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	000009c1 	.word	0x000009c1

00000a68 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     a68:	b510      	push	{r4, lr}
     a6a:	4b02      	ldr	r3, [pc, #8]	; (a74 <SERCOM0_Handler+0xc>)
     a6c:	681b      	ldr	r3, [r3, #0]
     a6e:	2000      	movs	r0, #0
     a70:	4798      	blx	r3
     a72:	bd10      	pop	{r4, pc}
     a74:	20000b10 	.word	0x20000b10

00000a78 <SERCOM1_Handler>:
     a78:	b510      	push	{r4, lr}
     a7a:	4b02      	ldr	r3, [pc, #8]	; (a84 <SERCOM1_Handler+0xc>)
     a7c:	685b      	ldr	r3, [r3, #4]
     a7e:	2001      	movs	r0, #1
     a80:	4798      	blx	r3
     a82:	bd10      	pop	{r4, pc}
     a84:	20000b10 	.word	0x20000b10

00000a88 <SERCOM2_Handler>:
     a88:	b510      	push	{r4, lr}
     a8a:	4b02      	ldr	r3, [pc, #8]	; (a94 <SERCOM2_Handler+0xc>)
     a8c:	689b      	ldr	r3, [r3, #8]
     a8e:	2002      	movs	r0, #2
     a90:	4798      	blx	r3
     a92:	bd10      	pop	{r4, pc}
     a94:	20000b10 	.word	0x20000b10

00000a98 <SERCOM3_Handler>:
     a98:	b510      	push	{r4, lr}
     a9a:	4b02      	ldr	r3, [pc, #8]	; (aa4 <SERCOM3_Handler+0xc>)
     a9c:	68db      	ldr	r3, [r3, #12]
     a9e:	2003      	movs	r0, #3
     aa0:	4798      	blx	r3
     aa2:	bd10      	pop	{r4, pc}
     aa4:	20000b10 	.word	0x20000b10

00000aa8 <SERCOM4_Handler>:
     aa8:	b510      	push	{r4, lr}
     aaa:	4b02      	ldr	r3, [pc, #8]	; (ab4 <SERCOM4_Handler+0xc>)
     aac:	691b      	ldr	r3, [r3, #16]
     aae:	2004      	movs	r0, #4
     ab0:	4798      	blx	r3
     ab2:	bd10      	pop	{r4, pc}
     ab4:	20000b10 	.word	0x20000b10

00000ab8 <SERCOM5_Handler>:
     ab8:	b510      	push	{r4, lr}
     aba:	4b02      	ldr	r3, [pc, #8]	; (ac4 <SERCOM5_Handler+0xc>)
     abc:	695b      	ldr	r3, [r3, #20]
     abe:	2005      	movs	r0, #5
     ac0:	4798      	blx	r3
     ac2:	bd10      	pop	{r4, pc}
     ac4:	20000b10 	.word	0x20000b10

00000ac8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aca:	46de      	mov	lr, fp
     acc:	4657      	mov	r7, sl
     ace:	464e      	mov	r6, r9
     ad0:	4645      	mov	r5, r8
     ad2:	b5e0      	push	{r5, r6, r7, lr}
     ad4:	b091      	sub	sp, #68	; 0x44
     ad6:	0005      	movs	r5, r0
     ad8:	000c      	movs	r4, r1
     ada:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     adc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ade:	0008      	movs	r0, r1
     ae0:	4bd2      	ldr	r3, [pc, #840]	; (e2c <usart_init+0x364>)
     ae2:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
     ae4:	2805      	cmp	r0, #5
     ae6:	d00d      	beq.n	b04 <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
     ae8:	0007      	movs	r7, r0
     aea:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     aec:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     aee:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     af0:	07d2      	lsls	r2, r2, #31
     af2:	d509      	bpl.n	b08 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     af4:	0018      	movs	r0, r3
     af6:	b011      	add	sp, #68	; 0x44
     af8:	bc3c      	pop	{r2, r3, r4, r5}
     afa:	4690      	mov	r8, r2
     afc:	4699      	mov	r9, r3
     afe:	46a2      	mov	sl, r4
     b00:	46ab      	mov	fp, r5
     b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
     b04:	2719      	movs	r7, #25
     b06:	e7f1      	b.n	aec <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b08:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     b0a:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b0c:	0792      	lsls	r2, r2, #30
     b0e:	d4f1      	bmi.n	af4 <usart_init+0x2c>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     b10:	4ac7      	ldr	r2, [pc, #796]	; (e30 <usart_init+0x368>)
     b12:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     b14:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b16:	3b1b      	subs	r3, #27
     b18:	4083      	lsls	r3, r0
     b1a:	430b      	orrs	r3, r1
     b1c:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
     b1e:	a90f      	add	r1, sp, #60	; 0x3c
     b20:	2335      	movs	r3, #53	; 0x35
     b22:	4698      	mov	r8, r3
     b24:	5cf3      	ldrb	r3, [r6, r3]
     b26:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b28:	b2ff      	uxtb	r7, r7
     b2a:	0038      	movs	r0, r7
     b2c:	4bc1      	ldr	r3, [pc, #772]	; (e34 <usart_init+0x36c>)
     b2e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b30:	0038      	movs	r0, r7
     b32:	4bc1      	ldr	r3, [pc, #772]	; (e38 <usart_init+0x370>)
     b34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b36:	4643      	mov	r3, r8
     b38:	5cf0      	ldrb	r0, [r6, r3]
     b3a:	2100      	movs	r1, #0
     b3c:	4bbf      	ldr	r3, [pc, #764]	; (e3c <usart_init+0x374>)
     b3e:	4798      	blx	r3
	module->character_size = config->character_size;
     b40:	7af3      	ldrb	r3, [r6, #11]
     b42:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     b44:	232c      	movs	r3, #44	; 0x2c
     b46:	5cf3      	ldrb	r3, [r6, r3]
     b48:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     b4a:	232d      	movs	r3, #45	; 0x2d
     b4c:	5cf3      	ldrb	r3, [r6, r3]
     b4e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     b50:	7ef3      	ldrb	r3, [r6, #27]
     b52:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b54:	2324      	movs	r3, #36	; 0x24
     b56:	5cf3      	ldrb	r3, [r6, r3]
     b58:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b5a:	682b      	ldr	r3, [r5, #0]
     b5c:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b5e:	0018      	movs	r0, r3
     b60:	4bb2      	ldr	r3, [pc, #712]	; (e2c <usart_init+0x364>)
     b62:	4798      	blx	r3
	if (sercom_index == 5) {
     b64:	2805      	cmp	r0, #5
     b66:	d01d      	beq.n	ba4 <usart_init+0xdc>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b68:	3013      	adds	r0, #19
	uint16_t baud  = 0;
     b6a:	2200      	movs	r2, #0
     b6c:	230e      	movs	r3, #14
     b6e:	a906      	add	r1, sp, #24
     b70:	468c      	mov	ip, r1
     b72:	4463      	add	r3, ip
     b74:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     b76:	8a33      	ldrh	r3, [r6, #16]
     b78:	4698      	mov	r8, r3
     b7a:	2380      	movs	r3, #128	; 0x80
     b7c:	01db      	lsls	r3, r3, #7
     b7e:	4598      	cmp	r8, r3
     b80:	d100      	bne.n	b84 <usart_init+0xbc>
     b82:	e0c3      	b.n	d0c <usart_init+0x244>
     b84:	d910      	bls.n	ba8 <usart_init+0xe0>
     b86:	23c0      	movs	r3, #192	; 0xc0
     b88:	01db      	lsls	r3, r3, #7
     b8a:	4598      	cmp	r8, r3
     b8c:	d100      	bne.n	b90 <usart_init+0xc8>
     b8e:	e0b8      	b.n	d02 <usart_init+0x23a>
     b90:	2380      	movs	r3, #128	; 0x80
     b92:	021b      	lsls	r3, r3, #8
     b94:	4598      	cmp	r8, r3
     b96:	d000      	beq.n	b9a <usart_init+0xd2>
     b98:	e166      	b.n	e68 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     b9a:	2303      	movs	r3, #3
     b9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b9e:	2300      	movs	r3, #0
     ba0:	9307      	str	r3, [sp, #28]
     ba2:	e00a      	b.n	bba <usart_init+0xf2>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     ba4:	2019      	movs	r0, #25
     ba6:	e7e0      	b.n	b6a <usart_init+0xa2>
	switch (config->sample_rate) {
     ba8:	2380      	movs	r3, #128	; 0x80
     baa:	019b      	lsls	r3, r3, #6
     bac:	4598      	cmp	r8, r3
     bae:	d000      	beq.n	bb2 <usart_init+0xea>
     bb0:	e15a      	b.n	e68 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     bb2:	2310      	movs	r3, #16
     bb4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     bb6:	3b0f      	subs	r3, #15
     bb8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     bba:	6833      	ldr	r3, [r6, #0]
     bbc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     bbe:	68f3      	ldr	r3, [r6, #12]
     bc0:	469b      	mov	fp, r3
		config->sample_adjustment |
     bc2:	6973      	ldr	r3, [r6, #20]
     bc4:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bc6:	7e33      	ldrb	r3, [r6, #24]
     bc8:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bca:	232e      	movs	r3, #46	; 0x2e
     bcc:	5cf3      	ldrb	r3, [r6, r3]
     bce:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     bd0:	6873      	ldr	r3, [r6, #4]
     bd2:	4699      	mov	r9, r3
	switch (transfer_mode)
     bd4:	2b00      	cmp	r3, #0
     bd6:	d100      	bne.n	bda <usart_init+0x112>
     bd8:	e0c5      	b.n	d66 <usart_init+0x29e>
     bda:	2380      	movs	r3, #128	; 0x80
     bdc:	055b      	lsls	r3, r3, #21
     bde:	4599      	cmp	r9, r3
     be0:	d100      	bne.n	be4 <usart_init+0x11c>
     be2:	e0a8      	b.n	d36 <usart_init+0x26e>
	if(config->encoding_format_enable) {
     be4:	7e73      	ldrb	r3, [r6, #25]
     be6:	2b00      	cmp	r3, #0
     be8:	d002      	beq.n	bf0 <usart_init+0x128>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     bea:	7eb3      	ldrb	r3, [r6, #26]
     bec:	9a02      	ldr	r2, [sp, #8]
     bee:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     bf0:	230e      	movs	r3, #14
     bf2:	aa06      	add	r2, sp, #24
     bf4:	4694      	mov	ip, r2
     bf6:	4463      	add	r3, ip
     bf8:	881b      	ldrh	r3, [r3, #0]
     bfa:	9a02      	ldr	r2, [sp, #8]
     bfc:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     bfe:	9a05      	ldr	r2, [sp, #20]
     c00:	465b      	mov	r3, fp
     c02:	431a      	orrs	r2, r3
     c04:	9b03      	ldr	r3, [sp, #12]
     c06:	431a      	orrs	r2, r3
     c08:	464b      	mov	r3, r9
     c0a:	431a      	orrs	r2, r3
     c0c:	4643      	mov	r3, r8
     c0e:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c10:	9b04      	ldr	r3, [sp, #16]
     c12:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     c14:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c16:	4653      	mov	r3, sl
     c18:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     c1a:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
     c1c:	232f      	movs	r3, #47	; 0x2f
     c1e:	5cf3      	ldrb	r3, [r6, r3]
     c20:	2b00      	cmp	r3, #0
     c22:	d101      	bne.n	c28 <usart_init+0x160>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     c24:	3304      	adds	r3, #4
     c26:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c28:	7e73      	ldrb	r3, [r6, #25]
     c2a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c2c:	2124      	movs	r1, #36	; 0x24
     c2e:	5c71      	ldrb	r1, [r6, r1]
     c30:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c32:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c34:	2126      	movs	r1, #38	; 0x26
     c36:	5c71      	ldrb	r1, [r6, r1]
     c38:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c3a:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c3c:	212c      	movs	r1, #44	; 0x2c
     c3e:	5c71      	ldrb	r1, [r6, r1]
     c40:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c42:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c44:	212d      	movs	r1, #45	; 0x2d
     c46:	5c71      	ldrb	r1, [r6, r1]
     c48:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c4a:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     c4c:	7ab0      	ldrb	r0, [r6, #10]
     c4e:	7af1      	ldrb	r1, [r6, #11]
     c50:	4308      	orrs	r0, r1
     c52:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
     c54:	8933      	ldrh	r3, [r6, #8]
     c56:	2bff      	cmp	r3, #255	; 0xff
     c58:	d100      	bne.n	c5c <usart_init+0x194>
     c5a:	e0aa      	b.n	db2 <usart_init+0x2ea>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c5c:	2180      	movs	r1, #128	; 0x80
     c5e:	0449      	lsls	r1, r1, #17
     c60:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
     c62:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     c64:	9902      	ldr	r1, [sp, #8]
     c66:	688b      	ldr	r3, [r1, #8]
     c68:	469c      	mov	ip, r3
						| config->lin_break_length;
     c6a:	8c33      	ldrh	r3, [r6, #32]
     c6c:	8c71      	ldrh	r1, [r6, #34]	; 0x22
     c6e:	430b      	orrs	r3, r1
     c70:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     c72:	2107      	movs	r1, #7
     c74:	4663      	mov	r3, ip
     c76:	4019      	ands	r1, r3
						| config->lin_break_length;
     c78:	003b      	movs	r3, r7
     c7a:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     c7c:	9902      	ldr	r1, [sp, #8]
     c7e:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
     c80:	69f3      	ldr	r3, [r6, #28]
     c82:	2b00      	cmp	r3, #0
     c84:	d002      	beq.n	c8c <usart_init+0x1c4>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
     c86:	496e      	ldr	r1, [pc, #440]	; (e40 <usart_init+0x378>)
     c88:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
     c8a:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     c8c:	2334      	movs	r3, #52	; 0x34
     c8e:	5cf3      	ldrb	r3, [r6, r3]
     c90:	2b00      	cmp	r3, #0
     c92:	d103      	bne.n	c9c <usart_init+0x1d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c94:	4b6b      	ldr	r3, [pc, #428]	; (e44 <usart_init+0x37c>)
     c96:	789b      	ldrb	r3, [r3, #2]
     c98:	079b      	lsls	r3, r3, #30
     c9a:	d501      	bpl.n	ca0 <usart_init+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c9c:	2380      	movs	r3, #128	; 0x80
     c9e:	431a      	orrs	r2, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ca0:	6829      	ldr	r1, [r5, #0]
     ca2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ca4:	69cb      	ldr	r3, [r1, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ca6:	2b00      	cmp	r3, #0
     ca8:	d1fc      	bne.n	ca4 <usart_init+0x1dc>
	usart_hw->CTRLB.reg = ctrlb;
     caa:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     cac:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     cae:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
     cb0:	2b00      	cmp	r3, #0
     cb2:	d1fc      	bne.n	cae <usart_init+0x1e6>
	usart_hw->CTRLA.reg = ctrla;
     cb4:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
     cb6:	683b      	ldr	r3, [r7, #0]
     cb8:	22f0      	movs	r2, #240	; 0xf0
     cba:	0512      	lsls	r2, r2, #20
     cbc:	4013      	ands	r3, r2
     cbe:	22e0      	movs	r2, #224	; 0xe0
     cc0:	04d2      	lsls	r2, r2, #19
     cc2:	4293      	cmp	r3, r2
     cc4:	d00a      	beq.n	cdc <usart_init+0x214>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
     cc6:	68bb      	ldr	r3, [r7, #8]
     cc8:	2207      	movs	r2, #7
     cca:	4393      	bics	r3, r2
     ccc:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
     cce:	68ba      	ldr	r2, [r7, #8]
     cd0:	2325      	movs	r3, #37	; 0x25
     cd2:	5cf1      	ldrb	r1, [r6, r3]
     cd4:	3b1e      	subs	r3, #30
     cd6:	400b      	ands	r3, r1
     cd8:	4313      	orrs	r3, r2
     cda:	60bb      	str	r3, [r7, #8]
     cdc:	ab0e      	add	r3, sp, #56	; 0x38
     cde:	2280      	movs	r2, #128	; 0x80
     ce0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ce2:	2200      	movs	r2, #0
     ce4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     ce6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ce8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     cea:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     cec:	930a      	str	r3, [sp, #40]	; 0x28
     cee:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     cf0:	930b      	str	r3, [sp, #44]	; 0x2c
     cf2:	6c33      	ldr	r3, [r6, #64]	; 0x40
     cf4:	930c      	str	r3, [sp, #48]	; 0x30
     cf6:	6c73      	ldr	r3, [r6, #68]	; 0x44
     cf8:	9302      	str	r3, [sp, #8]
     cfa:	930d      	str	r3, [sp, #52]	; 0x34
     cfc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     cfe:	ae0a      	add	r6, sp, #40	; 0x28
     d00:	e066      	b.n	dd0 <usart_init+0x308>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d02:	2308      	movs	r3, #8
     d04:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     d06:	3b07      	subs	r3, #7
     d08:	9307      	str	r3, [sp, #28]
     d0a:	e756      	b.n	bba <usart_init+0xf2>
	ctrla = (uint32_t)config->data_order |
     d0c:	6833      	ldr	r3, [r6, #0]
     d0e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     d10:	68f3      	ldr	r3, [r6, #12]
     d12:	469b      	mov	fp, r3
		config->sample_adjustment |
     d14:	6973      	ldr	r3, [r6, #20]
     d16:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     d18:	7e33      	ldrb	r3, [r6, #24]
     d1a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d1c:	232e      	movs	r3, #46	; 0x2e
     d1e:	5cf3      	ldrb	r3, [r6, r3]
     d20:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     d22:	6873      	ldr	r3, [r6, #4]
     d24:	4699      	mov	r9, r3
	switch (transfer_mode)
     d26:	2b00      	cmp	r3, #0
     d28:	d019      	beq.n	d5e <usart_init+0x296>
     d2a:	2380      	movs	r3, #128	; 0x80
     d2c:	055b      	lsls	r3, r3, #21
     d2e:	4599      	cmp	r9, r3
     d30:	d001      	beq.n	d36 <usart_init+0x26e>
	enum status_code status_code = STATUS_OK;
     d32:	2300      	movs	r3, #0
     d34:	e027      	b.n	d86 <usart_init+0x2be>
			if (!config->use_external_clock) {
     d36:	232f      	movs	r3, #47	; 0x2f
     d38:	5cf3      	ldrb	r3, [r6, r3]
     d3a:	2b00      	cmp	r3, #0
     d3c:	d000      	beq.n	d40 <usart_init+0x278>
     d3e:	e751      	b.n	be4 <usart_init+0x11c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     d40:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     d42:	001f      	movs	r7, r3
     d44:	b2c0      	uxtb	r0, r0
     d46:	4b40      	ldr	r3, [pc, #256]	; (e48 <usart_init+0x380>)
     d48:	4798      	blx	r3
     d4a:	0001      	movs	r1, r0
     d4c:	220e      	movs	r2, #14
     d4e:	ab06      	add	r3, sp, #24
     d50:	469c      	mov	ip, r3
     d52:	4462      	add	r2, ip
     d54:	0038      	movs	r0, r7
     d56:	4b3d      	ldr	r3, [pc, #244]	; (e4c <usart_init+0x384>)
     d58:	4798      	blx	r3
     d5a:	0003      	movs	r3, r0
     d5c:	e013      	b.n	d86 <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d5e:	2308      	movs	r3, #8
     d60:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d62:	2300      	movs	r3, #0
     d64:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     d66:	232f      	movs	r3, #47	; 0x2f
     d68:	5cf3      	ldrb	r3, [r6, r3]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d00f      	beq.n	d8e <usart_init+0x2c6>
				status_code =
     d6e:	9b06      	ldr	r3, [sp, #24]
     d70:	9300      	str	r3, [sp, #0]
     d72:	9b07      	ldr	r3, [sp, #28]
     d74:	220e      	movs	r2, #14
     d76:	a906      	add	r1, sp, #24
     d78:	468c      	mov	ip, r1
     d7a:	4462      	add	r2, ip
     d7c:	6b31      	ldr	r1, [r6, #48]	; 0x30
     d7e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     d80:	4f33      	ldr	r7, [pc, #204]	; (e50 <usart_init+0x388>)
     d82:	47b8      	blx	r7
     d84:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
     d86:	2b00      	cmp	r3, #0
     d88:	d000      	beq.n	d8c <usart_init+0x2c4>
     d8a:	e6b3      	b.n	af4 <usart_init+0x2c>
     d8c:	e72a      	b.n	be4 <usart_init+0x11c>
						_sercom_get_async_baud_val(config->baudrate,
     d8e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     d90:	001f      	movs	r7, r3
     d92:	b2c0      	uxtb	r0, r0
     d94:	4b2c      	ldr	r3, [pc, #176]	; (e48 <usart_init+0x380>)
     d96:	4798      	blx	r3
     d98:	0001      	movs	r1, r0
				status_code =
     d9a:	9b06      	ldr	r3, [sp, #24]
     d9c:	9300      	str	r3, [sp, #0]
     d9e:	9b07      	ldr	r3, [sp, #28]
     da0:	220e      	movs	r2, #14
     da2:	a806      	add	r0, sp, #24
     da4:	4684      	mov	ip, r0
     da6:	4462      	add	r2, ip
     da8:	0038      	movs	r0, r7
     daa:	4f29      	ldr	r7, [pc, #164]	; (e50 <usart_init+0x388>)
     dac:	47b8      	blx	r7
     dae:	0003      	movs	r3, r0
     db0:	e7e9      	b.n	d86 <usart_init+0x2be>
		if(config->lin_slave_enable) {
     db2:	7ef3      	ldrb	r3, [r6, #27]
     db4:	2b00      	cmp	r3, #0
     db6:	d100      	bne.n	dba <usart_init+0x2f2>
     db8:	e754      	b.n	c64 <usart_init+0x19c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     dba:	2380      	movs	r3, #128	; 0x80
     dbc:	04db      	lsls	r3, r3, #19
     dbe:	431a      	orrs	r2, r3
     dc0:	e750      	b.n	c64 <usart_init+0x19c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     dc2:	0020      	movs	r0, r4
     dc4:	4b23      	ldr	r3, [pc, #140]	; (e54 <usart_init+0x38c>)
     dc6:	4798      	blx	r3
     dc8:	e007      	b.n	dda <usart_init+0x312>
     dca:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     dcc:	2f04      	cmp	r7, #4
     dce:	d00d      	beq.n	dec <usart_init+0x324>
     dd0:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     dd2:	00bb      	lsls	r3, r7, #2
     dd4:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     dd6:	2800      	cmp	r0, #0
     dd8:	d0f3      	beq.n	dc2 <usart_init+0x2fa>
		if (current_pinmux != PINMUX_UNUSED) {
     dda:	1c43      	adds	r3, r0, #1
     ddc:	d0f5      	beq.n	dca <usart_init+0x302>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     dde:	a90e      	add	r1, sp, #56	; 0x38
     de0:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     de2:	0c00      	lsrs	r0, r0, #16
     de4:	b2c0      	uxtb	r0, r0
     de6:	4b1c      	ldr	r3, [pc, #112]	; (e58 <usart_init+0x390>)
     de8:	4798      	blx	r3
     dea:	e7ee      	b.n	dca <usart_init+0x302>
		module->callback[i]            = NULL;
     dec:	2300      	movs	r3, #0
     dee:	60eb      	str	r3, [r5, #12]
     df0:	612b      	str	r3, [r5, #16]
     df2:	616b      	str	r3, [r5, #20]
     df4:	61ab      	str	r3, [r5, #24]
     df6:	61eb      	str	r3, [r5, #28]
     df8:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     dfa:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     dfc:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     dfe:	2200      	movs	r2, #0
     e00:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     e02:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     e04:	3330      	adds	r3, #48	; 0x30
     e06:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     e08:	3301      	adds	r3, #1
     e0a:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     e0c:	3301      	adds	r3, #1
     e0e:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     e10:	3301      	adds	r3, #1
     e12:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     e14:	6828      	ldr	r0, [r5, #0]
     e16:	4b05      	ldr	r3, [pc, #20]	; (e2c <usart_init+0x364>)
     e18:	4798      	blx	r3
     e1a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     e1c:	490f      	ldr	r1, [pc, #60]	; (e5c <usart_init+0x394>)
     e1e:	4b10      	ldr	r3, [pc, #64]	; (e60 <usart_init+0x398>)
     e20:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     e22:	00a4      	lsls	r4, r4, #2
     e24:	4b0f      	ldr	r3, [pc, #60]	; (e64 <usart_init+0x39c>)
     e26:	50e5      	str	r5, [r4, r3]
	return status_code;
     e28:	2300      	movs	r3, #0
     e2a:	e663      	b.n	af4 <usart_init+0x2c>
     e2c:	000009c1 	.word	0x000009c1
     e30:	40000800 	.word	0x40000800
     e34:	00001615 	.word	0x00001615
     e38:	000015a5 	.word	0x000015a5
     e3c:	000007f9 	.word	0x000007f9
     e40:	f0ffffff 	.word	0xf0ffffff
     e44:	41002000 	.word	0x41002000
     e48:	00001639 	.word	0x00001639
     e4c:	0000073b 	.word	0x0000073b
     e50:	00000765 	.word	0x00000765
     e54:	00000845 	.word	0x00000845
     e58:	00001711 	.word	0x00001711
     e5c:	00000f05 	.word	0x00000f05
     e60:	000009fd 	.word	0x000009fd
     e64:	20000dcc 	.word	0x20000dcc
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e68:	2310      	movs	r3, #16
     e6a:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e6c:	2300      	movs	r3, #0
     e6e:	9307      	str	r3, [sp, #28]
     e70:	e6a3      	b.n	bba <usart_init+0xf2>
     e72:	46c0      	nop			; (mov r8, r8)

00000e74 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     e74:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     e76:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     e78:	2a00      	cmp	r2, #0
     e7a:	d101      	bne.n	e80 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     e7c:	0018      	movs	r0, r3
     e7e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     e80:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     e82:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e84:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     e86:	2a00      	cmp	r2, #0
     e88:	d1f8      	bne.n	e7c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e8a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     e8c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     e8e:	2102      	movs	r1, #2
     e90:	7e13      	ldrb	r3, [r2, #24]
     e92:	420b      	tst	r3, r1
     e94:	d0fc      	beq.n	e90 <usart_write_wait+0x1c>
	return STATUS_OK;
     e96:	2300      	movs	r3, #0
     e98:	e7f0      	b.n	e7c <usart_write_wait+0x8>

00000e9a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     e9a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     e9c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     e9e:	2a00      	cmp	r2, #0
     ea0:	d101      	bne.n	ea6 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     ea2:	0018      	movs	r0, r3
     ea4:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     ea6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     ea8:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     eaa:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     eac:	2a00      	cmp	r2, #0
     eae:	d1f8      	bne.n	ea2 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     eb0:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     eb2:	7e10      	ldrb	r0, [r2, #24]
     eb4:	0740      	lsls	r0, r0, #29
     eb6:	d5f4      	bpl.n	ea2 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     eb8:	8b53      	ldrh	r3, [r2, #26]
     eba:	b2db      	uxtb	r3, r3
	if (error_code) {
     ebc:	0658      	lsls	r0, r3, #25
     ebe:	d01d      	beq.n	efc <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     ec0:	0798      	lsls	r0, r3, #30
     ec2:	d503      	bpl.n	ecc <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     ec4:	2302      	movs	r3, #2
     ec6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     ec8:	3318      	adds	r3, #24
     eca:	e7ea      	b.n	ea2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ecc:	0758      	lsls	r0, r3, #29
     ece:	d503      	bpl.n	ed8 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     ed0:	2304      	movs	r3, #4
     ed2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     ed4:	331a      	adds	r3, #26
     ed6:	e7e4      	b.n	ea2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ed8:	07d8      	lsls	r0, r3, #31
     eda:	d503      	bpl.n	ee4 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     edc:	2301      	movs	r3, #1
     ede:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     ee0:	3312      	adds	r3, #18
     ee2:	e7de      	b.n	ea2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     ee4:	06d8      	lsls	r0, r3, #27
     ee6:	d503      	bpl.n	ef0 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     ee8:	2310      	movs	r3, #16
     eea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     eec:	3332      	adds	r3, #50	; 0x32
     eee:	e7d8      	b.n	ea2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     ef0:	069b      	lsls	r3, r3, #26
     ef2:	d503      	bpl.n	efc <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ef4:	2320      	movs	r3, #32
     ef6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     ef8:	3321      	adds	r3, #33	; 0x21
     efa:	e7d2      	b.n	ea2 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     efc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     efe:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     f00:	2300      	movs	r3, #0
     f02:	e7ce      	b.n	ea2 <usart_read_wait+0x8>

00000f04 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     f06:	0080      	lsls	r0, r0, #2
     f08:	4b64      	ldr	r3, [pc, #400]	; (109c <_usart_interrupt_handler+0x198>)
     f0a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     f0c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     f0e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     f10:	2b00      	cmp	r3, #0
     f12:	d1fc      	bne.n	f0e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     f14:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     f16:	7da6      	ldrb	r6, [r4, #22]
     f18:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     f1a:	2330      	movs	r3, #48	; 0x30
     f1c:	5ceb      	ldrb	r3, [r5, r3]
     f1e:	2231      	movs	r2, #49	; 0x31
     f20:	5caf      	ldrb	r7, [r5, r2]
     f22:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     f24:	07f3      	lsls	r3, r6, #31
     f26:	d522      	bpl.n	f6e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     f28:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f2a:	b29b      	uxth	r3, r3
     f2c:	2b00      	cmp	r3, #0
     f2e:	d01c      	beq.n	f6a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     f32:	7813      	ldrb	r3, [r2, #0]
     f34:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     f36:	1c51      	adds	r1, r2, #1
     f38:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f3a:	7969      	ldrb	r1, [r5, #5]
     f3c:	2901      	cmp	r1, #1
     f3e:	d00e      	beq.n	f5e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f40:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     f42:	05db      	lsls	r3, r3, #23
     f44:	0ddb      	lsrs	r3, r3, #23
     f46:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     f48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f4a:	3b01      	subs	r3, #1
     f4c:	b29b      	uxth	r3, r3
     f4e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     f50:	2b00      	cmp	r3, #0
     f52:	d10c      	bne.n	f6e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f54:	3301      	adds	r3, #1
     f56:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     f58:	3301      	adds	r3, #1
     f5a:	75a3      	strb	r3, [r4, #22]
     f5c:	e007      	b.n	f6e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     f5e:	7851      	ldrb	r1, [r2, #1]
     f60:	0209      	lsls	r1, r1, #8
     f62:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     f64:	3202      	adds	r2, #2
     f66:	62aa      	str	r2, [r5, #40]	; 0x28
     f68:	e7eb      	b.n	f42 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f6a:	2301      	movs	r3, #1
     f6c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     f6e:	07b3      	lsls	r3, r6, #30
     f70:	d506      	bpl.n	f80 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     f72:	2302      	movs	r3, #2
     f74:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     f76:	2200      	movs	r2, #0
     f78:	3331      	adds	r3, #49	; 0x31
     f7a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     f7c:	07fb      	lsls	r3, r7, #31
     f7e:	d41e      	bmi.n	fbe <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     f80:	0773      	lsls	r3, r6, #29
     f82:	d568      	bpl.n	1056 <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
     f84:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f86:	b29b      	uxth	r3, r3
     f88:	2b00      	cmp	r3, #0
     f8a:	d062      	beq.n	1052 <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f8c:	8b63      	ldrh	r3, [r4, #26]
     f8e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     f90:	071a      	lsls	r2, r3, #28
     f92:	d418      	bmi.n	fc6 <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f94:	227f      	movs	r2, #127	; 0x7f
     f96:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
     f98:	065a      	lsls	r2, r3, #25
     f9a:	d501      	bpl.n	fa0 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
     f9c:	2240      	movs	r2, #64	; 0x40
     f9e:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     fa0:	2b00      	cmp	r3, #0
     fa2:	d033      	beq.n	100c <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     fa4:	079a      	lsls	r2, r3, #30
     fa6:	d511      	bpl.n	fcc <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     fa8:	221a      	movs	r2, #26
     faa:	2332      	movs	r3, #50	; 0x32
     fac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     fae:	3b30      	subs	r3, #48	; 0x30
     fb0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     fb2:	077b      	lsls	r3, r7, #29
     fb4:	d54f      	bpl.n	1056 <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     fb6:	0028      	movs	r0, r5
     fb8:	696b      	ldr	r3, [r5, #20]
     fba:	4798      	blx	r3
     fbc:	e04b      	b.n	1056 <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     fbe:	0028      	movs	r0, r5
     fc0:	68eb      	ldr	r3, [r5, #12]
     fc2:	4798      	blx	r3
     fc4:	e7dc      	b.n	f80 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     fc6:	2277      	movs	r2, #119	; 0x77
     fc8:	4013      	ands	r3, r2
     fca:	e7e5      	b.n	f98 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     fcc:	075a      	lsls	r2, r3, #29
     fce:	d505      	bpl.n	fdc <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
     fd0:	221e      	movs	r2, #30
     fd2:	2332      	movs	r3, #50	; 0x32
     fd4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     fd6:	3b2e      	subs	r3, #46	; 0x2e
     fd8:	8363      	strh	r3, [r4, #26]
     fda:	e7ea      	b.n	fb2 <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     fdc:	07da      	lsls	r2, r3, #31
     fde:	d505      	bpl.n	fec <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
     fe0:	2213      	movs	r2, #19
     fe2:	2332      	movs	r3, #50	; 0x32
     fe4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     fe6:	3b31      	subs	r3, #49	; 0x31
     fe8:	8363      	strh	r3, [r4, #26]
     fea:	e7e2      	b.n	fb2 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     fec:	06da      	lsls	r2, r3, #27
     fee:	d505      	bpl.n	ffc <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
     ff0:	2242      	movs	r2, #66	; 0x42
     ff2:	2332      	movs	r3, #50	; 0x32
     ff4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     ff6:	3b22      	subs	r3, #34	; 0x22
     ff8:	8363      	strh	r3, [r4, #26]
     ffa:	e7da      	b.n	fb2 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     ffc:	069b      	lsls	r3, r3, #26
     ffe:	d5d8      	bpl.n	fb2 <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1000:	2241      	movs	r2, #65	; 0x41
    1002:	2332      	movs	r3, #50	; 0x32
    1004:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1006:	3b12      	subs	r3, #18
    1008:	8363      	strh	r3, [r4, #26]
    100a:	e7d2      	b.n	fb2 <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    100c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    100e:	05db      	lsls	r3, r3, #23
    1010:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1012:	b2da      	uxtb	r2, r3
    1014:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1016:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1018:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    101a:	1c51      	adds	r1, r2, #1
    101c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    101e:	7969      	ldrb	r1, [r5, #5]
    1020:	2901      	cmp	r1, #1
    1022:	d010      	beq.n	1046 <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1024:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1026:	3b01      	subs	r3, #1
    1028:	b29b      	uxth	r3, r3
    102a:	85ab      	strh	r3, [r5, #44]	; 0x2c
    102c:	2b00      	cmp	r3, #0
    102e:	d112      	bne.n	1056 <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1030:	3304      	adds	r3, #4
    1032:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1034:	2200      	movs	r2, #0
    1036:	332e      	adds	r3, #46	; 0x2e
    1038:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    103a:	07bb      	lsls	r3, r7, #30
    103c:	d50b      	bpl.n	1056 <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    103e:	0028      	movs	r0, r5
    1040:	692b      	ldr	r3, [r5, #16]
    1042:	4798      	blx	r3
    1044:	e007      	b.n	1056 <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1046:	0a1b      	lsrs	r3, r3, #8
    1048:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    104a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    104c:	3301      	adds	r3, #1
    104e:	626b      	str	r3, [r5, #36]	; 0x24
    1050:	e7e8      	b.n	1024 <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1052:	2304      	movs	r3, #4
    1054:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1056:	06f3      	lsls	r3, r6, #27
    1058:	d504      	bpl.n	1064 <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    105a:	2310      	movs	r3, #16
    105c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    105e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1060:	06fb      	lsls	r3, r7, #27
    1062:	d40e      	bmi.n	1082 <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1064:	06b3      	lsls	r3, r6, #26
    1066:	d504      	bpl.n	1072 <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1068:	2320      	movs	r3, #32
    106a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    106c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    106e:	073b      	lsls	r3, r7, #28
    1070:	d40b      	bmi.n	108a <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1072:	0733      	lsls	r3, r6, #28
    1074:	d504      	bpl.n	1080 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1076:	2308      	movs	r3, #8
    1078:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    107a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    107c:	06bb      	lsls	r3, r7, #26
    107e:	d408      	bmi.n	1092 <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1082:	0028      	movs	r0, r5
    1084:	69eb      	ldr	r3, [r5, #28]
    1086:	4798      	blx	r3
    1088:	e7ec      	b.n	1064 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    108a:	0028      	movs	r0, r5
    108c:	69ab      	ldr	r3, [r5, #24]
    108e:	4798      	blx	r3
    1090:	e7ef      	b.n	1072 <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1092:	6a2b      	ldr	r3, [r5, #32]
    1094:	0028      	movs	r0, r5
    1096:	4798      	blx	r3
}
    1098:	e7f2      	b.n	1080 <_usart_interrupt_handler+0x17c>
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	20000dcc 	.word	0x20000dcc

000010a0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    10a0:	b510      	push	{r4, lr}
	switch (clock_source) {
    10a2:	2807      	cmp	r0, #7
    10a4:	d803      	bhi.n	10ae <system_clock_source_get_hz+0xe>
    10a6:	0080      	lsls	r0, r0, #2
    10a8:	4b0f      	ldr	r3, [pc, #60]	; (10e8 <system_clock_source_get_hz+0x48>)
    10aa:	581b      	ldr	r3, [r3, r0]
    10ac:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    10ae:	2000      	movs	r0, #0
    10b0:	e018      	b.n	10e4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    10b2:	4b0e      	ldr	r3, [pc, #56]	; (10ec <system_clock_source_get_hz+0x4c>)
    10b4:	6858      	ldr	r0, [r3, #4]
    10b6:	e015      	b.n	10e4 <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    10b8:	4b0d      	ldr	r3, [pc, #52]	; (10f0 <system_clock_source_get_hz+0x50>)
    10ba:	7d59      	ldrb	r1, [r3, #21]
    10bc:	0709      	lsls	r1, r1, #28
    10be:	0f09      	lsrs	r1, r1, #28
    10c0:	3101      	adds	r1, #1
    10c2:	480c      	ldr	r0, [pc, #48]	; (10f4 <system_clock_source_get_hz+0x54>)
    10c4:	4b0c      	ldr	r3, [pc, #48]	; (10f8 <system_clock_source_get_hz+0x58>)
    10c6:	4798      	blx	r3
    10c8:	e00c      	b.n	10e4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    10ca:	4b08      	ldr	r3, [pc, #32]	; (10ec <system_clock_source_get_hz+0x4c>)
    10cc:	6898      	ldr	r0, [r3, #8]
    10ce:	e009      	b.n	10e4 <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    10d0:	4b07      	ldr	r3, [pc, #28]	; (10f0 <system_clock_source_get_hz+0x50>)
    10d2:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    10d4:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    10d6:	079b      	lsls	r3, r3, #30
    10d8:	d504      	bpl.n	10e4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    10da:	4b04      	ldr	r3, [pc, #16]	; (10ec <system_clock_source_get_hz+0x4c>)
    10dc:	6818      	ldr	r0, [r3, #0]
    10de:	e001      	b.n	10e4 <system_clock_source_get_hz+0x44>
		return 32768UL;
    10e0:	2080      	movs	r0, #128	; 0x80
    10e2:	0200      	lsls	r0, r0, #8
	}
}
    10e4:	bd10      	pop	{r4, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	00006584 	.word	0x00006584
    10ec:	20000b28 	.word	0x20000b28
    10f0:	40001000 	.word	0x40001000
    10f4:	02dc6c00 	.word	0x02dc6c00
    10f8:	000050e5 	.word	0x000050e5

000010fc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    10fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fe:	46de      	mov	lr, fp
    1100:	4657      	mov	r7, sl
    1102:	464e      	mov	r6, r9
    1104:	4645      	mov	r5, r8
    1106:	b5e0      	push	{r5, r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    1108:	4a25      	ldr	r2, [pc, #148]	; (11a0 <system_clock_source_xosc32k_set_config+0xa4>)
    110a:	8a93      	ldrh	r3, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    110c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    110e:	7801      	ldrb	r1, [r0, #0]
    1110:	424c      	negs	r4, r1
    1112:	414c      	adcs	r4, r1
    1114:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    1116:	7881      	ldrb	r1, [r0, #2]
    1118:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    111a:	78c1      	ldrb	r1, [r0, #3]
    111c:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    111e:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1120:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    1122:	7a81      	ldrb	r1, [r0, #10]
    1124:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1126:	491f      	ldr	r1, [pc, #124]	; (11a4 <system_clock_source_xosc32k_set_config+0xa8>)
    1128:	6844      	ldr	r4, [r0, #4]
    112a:	608c      	str	r4, [r1, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    112c:	7ac1      	ldrb	r1, [r0, #11]
    112e:	0089      	lsls	r1, r1, #2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    1130:	7b84      	ldrb	r4, [r0, #14]
    1132:	0064      	lsls	r4, r4, #1
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
    1134:	4321      	orrs	r1, r4
    1136:	7b44      	ldrb	r4, [r0, #13]
    1138:	4321      	orrs	r1, r4
    113a:	b2c9      	uxtb	r1, r1
	OSC32KCTRL->CFDCTRL.reg =
    113c:	7591      	strb	r1, [r2, #22]

	OSC32KCTRL->EVCTRL.reg =
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);
    113e:	7b01      	ldrb	r1, [r0, #12]
	OSC32KCTRL->EVCTRL.reg =
    1140:	75d1      	strb	r1, [r2, #23]

	OSC32KCTRL->XOSC32K = temp;
    1142:	2101      	movs	r1, #1
    1144:	4648      	mov	r0, r9
    1146:	0080      	lsls	r0, r0, #2
    1148:	2404      	movs	r4, #4
    114a:	43a3      	bics	r3, r4
    114c:	4303      	orrs	r3, r0
    114e:	4640      	mov	r0, r8
    1150:	4008      	ands	r0, r1
    1152:	00c0      	lsls	r0, r0, #3
    1154:	3404      	adds	r4, #4
    1156:	43a3      	bics	r3, r4
    1158:	4303      	orrs	r3, r0
    115a:	4660      	mov	r0, ip
    115c:	4008      	ands	r0, r1
    115e:	0100      	lsls	r0, r0, #4
    1160:	3408      	adds	r4, #8
    1162:	43a3      	bics	r3, r4
    1164:	4303      	orrs	r3, r0
    1166:	400f      	ands	r7, r1
    1168:	01bf      	lsls	r7, r7, #6
    116a:	2040      	movs	r0, #64	; 0x40
    116c:	4383      	bics	r3, r0
    116e:	433b      	orrs	r3, r7
    1170:	400e      	ands	r6, r1
    1172:	01f6      	lsls	r6, r6, #7
    1174:	3040      	adds	r0, #64	; 0x40
    1176:	4383      	bics	r3, r0
    1178:	4333      	orrs	r3, r6
    117a:	3879      	subs	r0, #121	; 0x79
    117c:	4005      	ands	r5, r0
    117e:	022d      	lsls	r5, r5, #8
    1180:	4809      	ldr	r0, [pc, #36]	; (11a8 <system_clock_source_xosc32k_set_config+0xac>)
    1182:	4003      	ands	r3, r0
    1184:	432b      	orrs	r3, r5
    1186:	4658      	mov	r0, fp
    1188:	4001      	ands	r1, r0
    118a:	0309      	lsls	r1, r1, #12
    118c:	4807      	ldr	r0, [pc, #28]	; (11ac <system_clock_source_xosc32k_set_config+0xb0>)
    118e:	4003      	ands	r3, r0
    1190:	430b      	orrs	r3, r1
    1192:	8293      	strh	r3, [r2, #20]
}
    1194:	bc3c      	pop	{r2, r3, r4, r5}
    1196:	4690      	mov	r8, r2
    1198:	4699      	mov	r9, r3
    119a:	46a2      	mov	sl, r4
    119c:	46ab      	mov	fp, r5
    119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11a0:	40001400 	.word	0x40001400
    11a4:	20000b28 	.word	0x20000b28
    11a8:	fffff8ff 	.word	0xfffff8ff
    11ac:	ffffefff 	.word	0xffffefff

000011b0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    11b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11b2:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    11b4:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    11b6:	7d03      	ldrb	r3, [r0, #20]
    11b8:	2b01      	cmp	r3, #1
    11ba:	d04d      	beq.n	1258 <system_clock_source_dpll_set_config+0xa8>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    11bc:	68a3      	ldr	r3, [r4, #8]
    11be:	0118      	lsls	r0, r3, #4
    11c0:	0029      	movs	r1, r5
    11c2:	4b29      	ldr	r3, [pc, #164]	; (1268 <system_clock_source_dpll_set_config+0xb8>)
    11c4:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    11c6:	220f      	movs	r2, #15
    11c8:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    11ca:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    11cc:	7821      	ldrb	r1, [r4, #0]
    11ce:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    11d0:	7866      	ldrb	r6, [r4, #1]
    11d2:	01b6      	lsls	r6, r6, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    11d4:	4331      	orrs	r1, r6
    11d6:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    11d8:	4e24      	ldr	r6, [pc, #144]	; (126c <system_clock_source_dpll_set_config+0xbc>)
    11da:	7731      	strb	r1, [r6, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    11dc:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    11de:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    11e0:	051b      	lsls	r3, r3, #20
    11e2:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    11e4:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    11e6:	6233      	str	r3, [r6, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    11e8:	0037      	movs	r7, r6
    11ea:	262c      	movs	r6, #44	; 0x2c
    11ec:	2104      	movs	r1, #4
    11ee:	5dbb      	ldrb	r3, [r7, r6]
    11f0:	420b      	tst	r3, r1
    11f2:	d1fc      	bne.n	11ee <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    11f4:	78a3      	ldrb	r3, [r4, #2]
    11f6:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    11f8:	78e1      	ldrb	r1, [r4, #3]
    11fa:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    11fc:	430b      	orrs	r3, r1
    11fe:	7921      	ldrb	r1, [r4, #4]
    1200:	0089      	lsls	r1, r1, #2
    1202:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    1204:	7ca1      	ldrb	r1, [r4, #18]
    1206:	2603      	movs	r6, #3
    1208:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    120a:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    120c:	8a21      	ldrh	r1, [r4, #16]
    120e:	0409      	lsls	r1, r1, #16
    1210:	4f17      	ldr	r7, [pc, #92]	; (1270 <system_clock_source_dpll_set_config+0xc0>)
    1212:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    1214:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    1216:	7ce1      	ldrb	r1, [r4, #19]
    1218:	0209      	lsls	r1, r1, #8
    121a:	27e0      	movs	r7, #224	; 0xe0
    121c:	00ff      	lsls	r7, r7, #3
    121e:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    1220:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    1222:	7d27      	ldrb	r7, [r4, #20]
    1224:	013f      	lsls	r7, r7, #4
    1226:	2130      	movs	r1, #48	; 0x30
    1228:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    122a:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    122c:	490f      	ldr	r1, [pc, #60]	; (126c <system_clock_source_dpll_set_config+0xbc>)
    122e:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    1230:	7d63      	ldrb	r3, [r4, #21]
    1232:	401e      	ands	r6, r3
    1234:	2328      	movs	r3, #40	; 0x28
    1236:	54ce      	strb	r6, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    1238:	000f      	movs	r7, r1
    123a:	262c      	movs	r6, #44	; 0x2c
    123c:	2108      	movs	r1, #8
    123e:	5dbb      	ldrb	r3, [r7, r6]
    1240:	420b      	tst	r3, r1
    1242:	d1fc      	bne.n	123e <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    1244:	230f      	movs	r3, #15
    1246:	4398      	bics	r0, r3
    1248:	1882      	adds	r2, r0, r2
			(refclk *
    124a:	436a      	muls	r2, r5
			) >> (4 + config->prescaler);
    124c:	7d63      	ldrb	r3, [r4, #21]
    124e:	3304      	adds	r3, #4
    1250:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    1252:	4b08      	ldr	r3, [pc, #32]	; (1274 <system_clock_source_dpll_set_config+0xc4>)
    1254:	601a      	str	r2, [r3, #0]
}
    1256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    1258:	8a01      	ldrh	r1, [r0, #16]
    125a:	3101      	adds	r1, #1
    125c:	0049      	lsls	r1, r1, #1
    125e:	0028      	movs	r0, r5
    1260:	4b01      	ldr	r3, [pc, #4]	; (1268 <system_clock_source_dpll_set_config+0xb8>)
    1262:	4798      	blx	r3
    1264:	0005      	movs	r5, r0
    1266:	e7a9      	b.n	11bc <system_clock_source_dpll_set_config+0xc>
    1268:	000050e5 	.word	0x000050e5
    126c:	40001000 	.word	0x40001000
    1270:	07ff0000 	.word	0x07ff0000
    1274:	20000b28 	.word	0x20000b28

00001278 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1278:	2807      	cmp	r0, #7
    127a:	d803      	bhi.n	1284 <system_clock_source_enable+0xc>
    127c:	0080      	lsls	r0, r0, #2
    127e:	4b18      	ldr	r3, [pc, #96]	; (12e0 <system_clock_source_enable+0x68>)
    1280:	581b      	ldr	r3, [r3, r0]
    1282:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1284:	2017      	movs	r0, #23
    1286:	e029      	b.n	12dc <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    1288:	4a16      	ldr	r2, [pc, #88]	; (12e4 <system_clock_source_enable+0x6c>)
    128a:	7d13      	ldrb	r3, [r2, #20]
    128c:	2102      	movs	r1, #2
    128e:	430b      	orrs	r3, r1
    1290:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    1292:	2000      	movs	r0, #0
    1294:	e022      	b.n	12dc <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    1296:	4a14      	ldr	r2, [pc, #80]	; (12e8 <system_clock_source_enable+0x70>)
    1298:	6993      	ldr	r3, [r2, #24]
    129a:	2102      	movs	r1, #2
    129c:	430b      	orrs	r3, r1
    129e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    12a0:	2000      	movs	r0, #0
		break;
    12a2:	e01b      	b.n	12dc <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    12a4:	4a0f      	ldr	r2, [pc, #60]	; (12e4 <system_clock_source_enable+0x6c>)
    12a6:	8a13      	ldrh	r3, [r2, #16]
    12a8:	2102      	movs	r1, #2
    12aa:	430b      	orrs	r3, r1
    12ac:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    12ae:	2000      	movs	r0, #0
		break;
    12b0:	e014      	b.n	12dc <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    12b2:	4a0d      	ldr	r2, [pc, #52]	; (12e8 <system_clock_source_enable+0x70>)
    12b4:	8a93      	ldrh	r3, [r2, #20]
    12b6:	2102      	movs	r1, #2
    12b8:	430b      	orrs	r3, r1
    12ba:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    12bc:	2000      	movs	r0, #0
		break;
    12be:	e00d      	b.n	12dc <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    12c0:	4a08      	ldr	r2, [pc, #32]	; (12e4 <system_clock_source_enable+0x6c>)
    12c2:	7f13      	ldrb	r3, [r2, #28]
    12c4:	2102      	movs	r1, #2
    12c6:	430b      	orrs	r3, r1
    12c8:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    12ca:	0010      	movs	r0, r2
    12cc:	312a      	adds	r1, #42	; 0x2a
    12ce:	2202      	movs	r2, #2
    12d0:	5c43      	ldrb	r3, [r0, r1]
    12d2:	4213      	tst	r3, r2
    12d4:	d1fc      	bne.n	12d0 <system_clock_source_enable+0x58>
	return STATUS_OK;
    12d6:	2000      	movs	r0, #0
    12d8:	e000      	b.n	12dc <system_clock_source_enable+0x64>
		return STATUS_OK;
    12da:	2000      	movs	r0, #0
}
    12dc:	4770      	bx	lr
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	000065a4 	.word	0x000065a4
    12e4:	40001000 	.word	0x40001000
    12e8:	40001400 	.word	0x40001400

000012ec <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    12ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ee:	46c6      	mov	lr, r8
    12f0:	b500      	push	{lr}
    12f2:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    12f4:	2203      	movs	r2, #3
    12f6:	4b3f      	ldr	r3, [pc, #252]	; (13f4 <system_clock_init+0x108>)
    12f8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    12fa:	4a3f      	ldr	r2, [pc, #252]	; (13f8 <system_clock_init+0x10c>)
    12fc:	6853      	ldr	r3, [r2, #4]
    12fe:	211e      	movs	r1, #30
    1300:	438b      	bics	r3, r1
    1302:	3918      	subs	r1, #24
    1304:	430b      	orrs	r3, r1
    1306:	6053      	str	r3, [r2, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1308:	a80a      	add	r0, sp, #40	; 0x28
    130a:	2300      	movs	r3, #0
    130c:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    130e:	2280      	movs	r2, #128	; 0x80
    1310:	0212      	lsls	r2, r2, #8
    1312:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    1314:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    1316:	2201      	movs	r2, #1
    1318:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    131a:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    131c:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    131e:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    1320:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    1322:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1324:	3902      	subs	r1, #2
    1326:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1328:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    132a:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    132c:	4b33      	ldr	r3, [pc, #204]	; (13fc <system_clock_init+0x110>)
    132e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1330:	2005      	movs	r0, #5
    1332:	4b33      	ldr	r3, [pc, #204]	; (1400 <system_clock_init+0x114>)
    1334:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    1336:	4933      	ldr	r1, [pc, #204]	; (1404 <system_clock_init+0x118>)
    1338:	2201      	movs	r2, #1
    133a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    133c:	421a      	tst	r2, r3
    133e:	d0fc      	beq.n	133a <system_clock_init+0x4e>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    1340:	4b31      	ldr	r3, [pc, #196]	; (1408 <system_clock_init+0x11c>)
    1342:	7d1a      	ldrb	r2, [r3, #20]
    1344:	2180      	movs	r1, #128	; 0x80
    1346:	430a      	orrs	r2, r1
    1348:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    134a:	2202      	movs	r2, #2
    134c:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    134e:	001a      	movs	r2, r3
    1350:	6993      	ldr	r3, [r2, #24]
    1352:	2b00      	cmp	r3, #0
    1354:	d1fc      	bne.n	1350 <system_clock_init+0x64>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1356:	4b2d      	ldr	r3, [pc, #180]	; (140c <system_clock_init+0x120>)
    1358:	4798      	blx	r3
	config->division_factor    = 1;
    135a:	ad01      	add	r5, sp, #4
    135c:	2601      	movs	r6, #1
    135e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1360:	2400      	movs	r4, #0
    1362:	706c      	strb	r4, [r5, #1]
	config->output_enable      = false;
    1364:	726c      	strb	r4, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1366:	2305      	movs	r3, #5
    1368:	702b      	strb	r3, [r5, #0]
    136a:	722e      	strb	r6, [r5, #8]
    136c:	0029      	movs	r1, r5
    136e:	2001      	movs	r0, #1
    1370:	4b27      	ldr	r3, [pc, #156]	; (1410 <system_clock_init+0x124>)
    1372:	4698      	mov	r8, r3
    1374:	4798      	blx	r3
    1376:	2001      	movs	r0, #1
    1378:	4f26      	ldr	r7, [pc, #152]	; (1414 <system_clock_init+0x128>)
    137a:	47b8      	blx	r7
	config->division_factor    = 1;
    137c:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    137e:	706c      	strb	r4, [r5, #1]
	config->run_in_standby     = false;
    1380:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    1382:	726c      	strb	r4, [r5, #9]
    1384:	2307      	movs	r3, #7
    1386:	702b      	strb	r3, [r5, #0]
    1388:	0029      	movs	r1, r5
    138a:	2008      	movs	r0, #8
    138c:	47c0      	blx	r8
    138e:	2008      	movs	r0, #8
    1390:	47b8      	blx	r7
	config->lock_bypass         = false;
    1392:	a804      	add	r0, sp, #16
    1394:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    1396:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    1398:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    139a:	4b1f      	ldr	r3, [pc, #124]	; (1418 <system_clock_init+0x12c>)
    139c:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    139e:	8206      	strh	r6, [r0, #16]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    13a0:	7544      	strb	r4, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    13a2:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    13a4:	7484      	strb	r4, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    13a6:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    13a8:	2301      	movs	r3, #1
    13aa:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    13ac:	7504      	strb	r4, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    13ae:	4b1b      	ldr	r3, [pc, #108]	; (141c <system_clock_init+0x130>)
    13b0:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    13b2:	4b1b      	ldr	r3, [pc, #108]	; (1420 <system_clock_init+0x134>)
    13b4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    13b6:	2007      	movs	r0, #7
    13b8:	4b11      	ldr	r3, [pc, #68]	; (1400 <system_clock_init+0x114>)
    13ba:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    13bc:	4812      	ldr	r0, [pc, #72]	; (1408 <system_clock_init+0x11c>)
    13be:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    13c0:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    13c2:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    13c4:	4013      	ands	r3, r2
    13c6:	2b03      	cmp	r3, #3
    13c8:	d1fb      	bne.n	13c2 <system_clock_init+0xd6>
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    13ca:	3b02      	subs	r3, #2
    13cc:	4a15      	ldr	r2, [pc, #84]	; (1424 <system_clock_init+0x138>)
    13ce:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    13d0:	a901      	add	r1, sp, #4
    13d2:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    13d4:	2200      	movs	r2, #0
    13d6:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    13d8:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    13da:	3207      	adds	r2, #7
    13dc:	700a      	strb	r2, [r1, #0]
    13de:	720b      	strb	r3, [r1, #8]
    13e0:	2000      	movs	r0, #0
    13e2:	4b0b      	ldr	r3, [pc, #44]	; (1410 <system_clock_init+0x124>)
    13e4:	4798      	blx	r3
    13e6:	2000      	movs	r0, #0
    13e8:	4b0a      	ldr	r3, [pc, #40]	; (1414 <system_clock_init+0x128>)
    13ea:	4798      	blx	r3
#endif

}
    13ec:	b00e      	add	sp, #56	; 0x38
    13ee:	bc04      	pop	{r2}
    13f0:	4690      	mov	r8, r2
    13f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13f4:	40001800 	.word	0x40001800
    13f8:	41004000 	.word	0x41004000
    13fc:	000010fd 	.word	0x000010fd
    1400:	00001279 	.word	0x00001279
    1404:	40001400 	.word	0x40001400
    1408:	40001000 	.word	0x40001000
    140c:	00001429 	.word	0x00001429
    1410:	0000144d 	.word	0x0000144d
    1414:	000014f9 	.word	0x000014f9
    1418:	02dc6c00 	.word	0x02dc6c00
    141c:	00007fff 	.word	0x00007fff
    1420:	000011b1 	.word	0x000011b1
    1424:	40000800 	.word	0x40000800

00001428 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    1428:	4a06      	ldr	r2, [pc, #24]	; (1444 <system_gclk_init+0x1c>)
    142a:	6953      	ldr	r3, [r2, #20]
    142c:	2180      	movs	r1, #128	; 0x80
    142e:	430b      	orrs	r3, r1
    1430:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    1432:	2201      	movs	r2, #1
    1434:	4b04      	ldr	r3, [pc, #16]	; (1448 <system_gclk_init+0x20>)
    1436:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1438:	0019      	movs	r1, r3
    143a:	780b      	ldrb	r3, [r1, #0]
    143c:	4213      	tst	r3, r2
    143e:	d1fc      	bne.n	143a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1440:	4770      	bx	lr
    1442:	46c0      	nop			; (mov r8, r8)
    1444:	40000800 	.word	0x40000800
    1448:	40001c00 	.word	0x40001c00

0000144c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    144c:	b570      	push	{r4, r5, r6, lr}
    144e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1450:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1452:	784b      	ldrb	r3, [r1, #1]
    1454:	2b00      	cmp	r3, #0
    1456:	d002      	beq.n	145e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1458:	2380      	movs	r3, #128	; 0x80
    145a:	00db      	lsls	r3, r3, #3
    145c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    145e:	7a4b      	ldrb	r3, [r1, #9]
    1460:	2b00      	cmp	r3, #0
    1462:	d002      	beq.n	146a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1464:	2380      	movs	r3, #128	; 0x80
    1466:	011b      	lsls	r3, r3, #4
    1468:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    146a:	6848      	ldr	r0, [r1, #4]
    146c:	2801      	cmp	r0, #1
    146e:	d90f      	bls.n	1490 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1470:	1e43      	subs	r3, r0, #1
    1472:	4218      	tst	r0, r3
    1474:	d131      	bne.n	14da <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1476:	2802      	cmp	r0, #2
    1478:	d92d      	bls.n	14d6 <system_gclk_gen_set_config+0x8a>
    147a:	2302      	movs	r3, #2
    147c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    147e:	3201      	adds	r2, #1
						mask <<= 1) {
    1480:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1482:	4298      	cmp	r0, r3
    1484:	d8fb      	bhi.n	147e <system_gclk_gen_set_config+0x32>
    1486:	2380      	movs	r3, #128	; 0x80
    1488:	015b      	lsls	r3, r3, #5
    148a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    148c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    148e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1490:	7a0b      	ldrb	r3, [r1, #8]
    1492:	2b00      	cmp	r3, #0
    1494:	d002      	beq.n	149c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1496:	2380      	movs	r3, #128	; 0x80
    1498:	019b      	lsls	r3, r3, #6
    149a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    149c:	2604      	movs	r6, #4
    149e:	40a6      	lsls	r6, r4
    14a0:	4911      	ldr	r1, [pc, #68]	; (14e8 <system_gclk_gen_set_config+0x9c>)
    14a2:	4a12      	ldr	r2, [pc, #72]	; (14ec <system_gclk_gen_set_config+0xa0>)
    14a4:	684b      	ldr	r3, [r1, #4]
    14a6:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    14a8:	421e      	tst	r6, r3
    14aa:	d1fb      	bne.n	14a4 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    14ac:	4b10      	ldr	r3, [pc, #64]	; (14f0 <system_gclk_gen_set_config+0xa4>)
    14ae:	4798      	blx	r3
    14b0:	00a4      	lsls	r4, r4, #2
    14b2:	4b0d      	ldr	r3, [pc, #52]	; (14e8 <system_gclk_gen_set_config+0x9c>)
    14b4:	469c      	mov	ip, r3
    14b6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    14b8:	6a22      	ldr	r2, [r4, #32]
    14ba:	2380      	movs	r3, #128	; 0x80
    14bc:	005b      	lsls	r3, r3, #1
    14be:	401a      	ands	r2, r3
    14c0:	432a      	orrs	r2, r5
    14c2:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    14c4:	4661      	mov	r1, ip
    14c6:	4a09      	ldr	r2, [pc, #36]	; (14ec <system_gclk_gen_set_config+0xa0>)
    14c8:	684b      	ldr	r3, [r1, #4]
    14ca:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    14cc:	421e      	tst	r6, r3
    14ce:	d1fb      	bne.n	14c8 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14d0:	4b08      	ldr	r3, [pc, #32]	; (14f4 <system_gclk_gen_set_config+0xa8>)
    14d2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    14d4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    14d6:	2200      	movs	r2, #0
    14d8:	e7d5      	b.n	1486 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    14da:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    14dc:	2380      	movs	r3, #128	; 0x80
    14de:	009b      	lsls	r3, r3, #2
    14e0:	4318      	orrs	r0, r3
    14e2:	4305      	orrs	r5, r0
    14e4:	e7d4      	b.n	1490 <system_gclk_gen_set_config+0x44>
    14e6:	46c0      	nop			; (mov r8, r8)
    14e8:	40001c00 	.word	0x40001c00
    14ec:	000007fc 	.word	0x000007fc
    14f0:	0000011d 	.word	0x0000011d
    14f4:	0000015d 	.word	0x0000015d

000014f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    14f8:	b510      	push	{r4, lr}
    14fa:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    14fc:	2204      	movs	r2, #4
    14fe:	4082      	lsls	r2, r0
    1500:	4809      	ldr	r0, [pc, #36]	; (1528 <system_gclk_gen_enable+0x30>)
    1502:	490a      	ldr	r1, [pc, #40]	; (152c <system_gclk_gen_enable+0x34>)
    1504:	6843      	ldr	r3, [r0, #4]
    1506:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1508:	421a      	tst	r2, r3
    150a:	d1fb      	bne.n	1504 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    150c:	4b08      	ldr	r3, [pc, #32]	; (1530 <system_gclk_gen_enable+0x38>)
    150e:	4798      	blx	r3
    1510:	00a4      	lsls	r4, r4, #2
    1512:	4b05      	ldr	r3, [pc, #20]	; (1528 <system_gclk_gen_enable+0x30>)
    1514:	469c      	mov	ip, r3
    1516:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1518:	6a22      	ldr	r2, [r4, #32]
    151a:	2380      	movs	r3, #128	; 0x80
    151c:	005b      	lsls	r3, r3, #1
    151e:	4313      	orrs	r3, r2
    1520:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    1522:	4b04      	ldr	r3, [pc, #16]	; (1534 <system_gclk_gen_enable+0x3c>)
    1524:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1526:	bd10      	pop	{r4, pc}
    1528:	40001c00 	.word	0x40001c00
    152c:	000007fc 	.word	0x000007fc
    1530:	0000011d 	.word	0x0000011d
    1534:	0000015d 	.word	0x0000015d

00001538 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    153a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    153c:	2204      	movs	r2, #4
    153e:	4082      	lsls	r2, r0
    1540:	4812      	ldr	r0, [pc, #72]	; (158c <system_gclk_gen_get_hz+0x54>)
    1542:	4913      	ldr	r1, [pc, #76]	; (1590 <system_gclk_gen_get_hz+0x58>)
    1544:	6843      	ldr	r3, [r0, #4]
    1546:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1548:	421a      	tst	r2, r3
    154a:	d1fb      	bne.n	1544 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    154c:	4b11      	ldr	r3, [pc, #68]	; (1594 <system_gclk_gen_get_hz+0x5c>)
    154e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1550:	4f0e      	ldr	r7, [pc, #56]	; (158c <system_gclk_gen_get_hz+0x54>)
    1552:	3408      	adds	r4, #8
    1554:	00a4      	lsls	r4, r4, #2
    1556:	59e0      	ldr	r0, [r4, r7]
    1558:	0740      	lsls	r0, r0, #29
    155a:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    155c:	4b0e      	ldr	r3, [pc, #56]	; (1598 <system_gclk_gen_get_hz+0x60>)
    155e:	4798      	blx	r3
    1560:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1562:	59e5      	ldr	r5, [r4, r7]
    1564:	04ed      	lsls	r5, r5, #19
    1566:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1568:	59e4      	ldr	r4, [r4, r7]
    156a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    156c:	4b0b      	ldr	r3, [pc, #44]	; (159c <system_gclk_gen_get_hz+0x64>)
    156e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1570:	2d00      	cmp	r5, #0
    1572:	d107      	bne.n	1584 <system_gclk_gen_get_hz+0x4c>
    1574:	2c01      	cmp	r4, #1
    1576:	d907      	bls.n	1588 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1578:	0021      	movs	r1, r4
    157a:	0030      	movs	r0, r6
    157c:	4b08      	ldr	r3, [pc, #32]	; (15a0 <system_gclk_gen_get_hz+0x68>)
    157e:	4798      	blx	r3
    1580:	0006      	movs	r6, r0
    1582:	e001      	b.n	1588 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1584:	3401      	adds	r4, #1
    1586:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1588:	0030      	movs	r0, r6
    158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    158c:	40001c00 	.word	0x40001c00
    1590:	000007fc 	.word	0x000007fc
    1594:	0000011d 	.word	0x0000011d
    1598:	000010a1 	.word	0x000010a1
    159c:	0000015d 	.word	0x0000015d
    15a0:	000050e5 	.word	0x000050e5

000015a4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    15a4:	b510      	push	{r4, lr}
    15a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    15a8:	4b09      	ldr	r3, [pc, #36]	; (15d0 <system_gclk_chan_enable+0x2c>)
    15aa:	4798      	blx	r3
    15ac:	00a0      	lsls	r0, r4, #2
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <system_gclk_chan_enable+0x30>)
    15b0:	469c      	mov	ip, r3
    15b2:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    15b4:	2280      	movs	r2, #128	; 0x80
    15b6:	5883      	ldr	r3, [r0, r2]
    15b8:	2140      	movs	r1, #64	; 0x40
    15ba:	430b      	orrs	r3, r1
    15bc:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    15be:	3140      	adds	r1, #64	; 0x40
    15c0:	3a40      	subs	r2, #64	; 0x40
    15c2:	5843      	ldr	r3, [r0, r1]
    15c4:	421a      	tst	r2, r3
    15c6:	d0fc      	beq.n	15c2 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    15c8:	4b03      	ldr	r3, [pc, #12]	; (15d8 <system_gclk_chan_enable+0x34>)
    15ca:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    15cc:	bd10      	pop	{r4, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	0000011d 	.word	0x0000011d
    15d4:	40001c00 	.word	0x40001c00
    15d8:	0000015d 	.word	0x0000015d

000015dc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    15dc:	b510      	push	{r4, lr}
    15de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    15e0:	4b09      	ldr	r3, [pc, #36]	; (1608 <system_gclk_chan_disable+0x2c>)
    15e2:	4798      	blx	r3
    15e4:	00a0      	lsls	r0, r4, #2
    15e6:	4b09      	ldr	r3, [pc, #36]	; (160c <system_gclk_chan_disable+0x30>)
    15e8:	469c      	mov	ip, r3
    15ea:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    15ec:	2280      	movs	r2, #128	; 0x80
    15ee:	5883      	ldr	r3, [r0, r2]
    15f0:	2140      	movs	r1, #64	; 0x40
    15f2:	438b      	bics	r3, r1
    15f4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    15f6:	3140      	adds	r1, #64	; 0x40
    15f8:	3a40      	subs	r2, #64	; 0x40
    15fa:	5843      	ldr	r3, [r0, r1]
    15fc:	421a      	tst	r2, r3
    15fe:	d1fc      	bne.n	15fa <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    1600:	4b03      	ldr	r3, [pc, #12]	; (1610 <system_gclk_chan_disable+0x34>)
    1602:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1604:	bd10      	pop	{r4, pc}
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	0000011d 	.word	0x0000011d
    160c:	40001c00 	.word	0x40001c00
    1610:	0000015d 	.word	0x0000015d

00001614 <system_gclk_chan_set_config>:
{
    1614:	b570      	push	{r4, r5, r6, lr}
    1616:	0004      	movs	r4, r0
    1618:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    161a:	4b05      	ldr	r3, [pc, #20]	; (1630 <system_gclk_chan_set_config+0x1c>)
    161c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    161e:	782a      	ldrb	r2, [r5, #0]
    1620:	230f      	movs	r3, #15
    1622:	4013      	ands	r3, r2
    1624:	3420      	adds	r4, #32
    1626:	00a4      	lsls	r4, r4, #2
    1628:	4a02      	ldr	r2, [pc, #8]	; (1634 <system_gclk_chan_set_config+0x20>)
    162a:	50a3      	str	r3, [r4, r2]
}
    162c:	bd70      	pop	{r4, r5, r6, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	000015dd 	.word	0x000015dd
    1634:	40001c00 	.word	0x40001c00

00001638 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1638:	b510      	push	{r4, lr}
    163a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    163c:	4b06      	ldr	r3, [pc, #24]	; (1658 <system_gclk_chan_get_hz+0x20>)
    163e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1640:	3420      	adds	r4, #32
    1642:	00a4      	lsls	r4, r4, #2
    1644:	4b05      	ldr	r3, [pc, #20]	; (165c <system_gclk_chan_get_hz+0x24>)
    1646:	58e4      	ldr	r4, [r4, r3]
    1648:	0724      	lsls	r4, r4, #28
    164a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    164c:	4b04      	ldr	r3, [pc, #16]	; (1660 <system_gclk_chan_get_hz+0x28>)
    164e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1650:	0020      	movs	r0, r4
    1652:	4b04      	ldr	r3, [pc, #16]	; (1664 <system_gclk_chan_get_hz+0x2c>)
    1654:	4798      	blx	r3
}
    1656:	bd10      	pop	{r4, pc}
    1658:	0000011d 	.word	0x0000011d
    165c:	40001c00 	.word	0x40001c00
    1660:	0000015d 	.word	0x0000015d
    1664:	00001539 	.word	0x00001539

00001668 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1668:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    166a:	78d3      	ldrb	r3, [r2, #3]
    166c:	2b00      	cmp	r3, #0
    166e:	d135      	bne.n	16dc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1670:	7813      	ldrb	r3, [r2, #0]
    1672:	2b80      	cmp	r3, #128	; 0x80
    1674:	d029      	beq.n	16ca <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1676:	061b      	lsls	r3, r3, #24
    1678:	2480      	movs	r4, #128	; 0x80
    167a:	0264      	lsls	r4, r4, #9
    167c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    167e:	7854      	ldrb	r4, [r2, #1]
    1680:	2502      	movs	r5, #2
    1682:	43ac      	bics	r4, r5
    1684:	d106      	bne.n	1694 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1686:	7894      	ldrb	r4, [r2, #2]
    1688:	2c00      	cmp	r4, #0
    168a:	d120      	bne.n	16ce <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    168c:	2480      	movs	r4, #128	; 0x80
    168e:	02a4      	lsls	r4, r4, #10
    1690:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1692:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1694:	7854      	ldrb	r4, [r2, #1]
    1696:	3c01      	subs	r4, #1
    1698:	2c01      	cmp	r4, #1
    169a:	d91c      	bls.n	16d6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    169c:	040d      	lsls	r5, r1, #16
    169e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    16a0:	24a0      	movs	r4, #160	; 0xa0
    16a2:	05e4      	lsls	r4, r4, #23
    16a4:	432c      	orrs	r4, r5
    16a6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    16a8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    16aa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    16ac:	24d0      	movs	r4, #208	; 0xd0
    16ae:	0624      	lsls	r4, r4, #24
    16b0:	432c      	orrs	r4, r5
    16b2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    16b4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    16b6:	78d4      	ldrb	r4, [r2, #3]
    16b8:	2c00      	cmp	r4, #0
    16ba:	d122      	bne.n	1702 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    16bc:	035b      	lsls	r3, r3, #13
    16be:	d51c      	bpl.n	16fa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    16c0:	7893      	ldrb	r3, [r2, #2]
    16c2:	2b01      	cmp	r3, #1
    16c4:	d01e      	beq.n	1704 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    16c6:	6141      	str	r1, [r0, #20]
    16c8:	e017      	b.n	16fa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    16ca:	2300      	movs	r3, #0
    16cc:	e7d7      	b.n	167e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    16ce:	24c0      	movs	r4, #192	; 0xc0
    16d0:	02e4      	lsls	r4, r4, #11
    16d2:	4323      	orrs	r3, r4
    16d4:	e7dd      	b.n	1692 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    16d6:	4c0d      	ldr	r4, [pc, #52]	; (170c <_system_pinmux_config+0xa4>)
    16d8:	4023      	ands	r3, r4
    16da:	e7df      	b.n	169c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    16dc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    16de:	040c      	lsls	r4, r1, #16
    16e0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    16e2:	23a0      	movs	r3, #160	; 0xa0
    16e4:	05db      	lsls	r3, r3, #23
    16e6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    16e8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    16ea:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    16ec:	23d0      	movs	r3, #208	; 0xd0
    16ee:	061b      	lsls	r3, r3, #24
    16f0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    16f2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    16f4:	78d3      	ldrb	r3, [r2, #3]
    16f6:	2b00      	cmp	r3, #0
    16f8:	d103      	bne.n	1702 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    16fa:	7853      	ldrb	r3, [r2, #1]
    16fc:	3b01      	subs	r3, #1
    16fe:	2b01      	cmp	r3, #1
    1700:	d902      	bls.n	1708 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1702:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1704:	6181      	str	r1, [r0, #24]
    1706:	e7f8      	b.n	16fa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1708:	6081      	str	r1, [r0, #8]
}
    170a:	e7fa      	b.n	1702 <_system_pinmux_config+0x9a>
    170c:	fffbffff 	.word	0xfffbffff

00001710 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1710:	b510      	push	{r4, lr}
    1712:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1714:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1716:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1718:	2900      	cmp	r1, #0
    171a:	d105      	bne.n	1728 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    171c:	0943      	lsrs	r3, r0, #5
    171e:	01db      	lsls	r3, r3, #7
    1720:	2182      	movs	r1, #130	; 0x82
    1722:	05c9      	lsls	r1, r1, #23
    1724:	468c      	mov	ip, r1
    1726:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1728:	241f      	movs	r4, #31
    172a:	4020      	ands	r0, r4
    172c:	2101      	movs	r1, #1
    172e:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1730:	0018      	movs	r0, r3
    1732:	4b01      	ldr	r3, [pc, #4]	; (1738 <system_pinmux_pin_set_config+0x28>)
    1734:	4798      	blx	r3
}
    1736:	bd10      	pop	{r4, pc}
    1738:	00001669 	.word	0x00001669

0000173c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    173c:	4770      	bx	lr
	...

00001740 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1740:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1742:	4b05      	ldr	r3, [pc, #20]	; (1758 <system_init+0x18>)
    1744:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1746:	4b05      	ldr	r3, [pc, #20]	; (175c <system_init+0x1c>)
    1748:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    174a:	4b05      	ldr	r3, [pc, #20]	; (1760 <system_init+0x20>)
    174c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    174e:	4b05      	ldr	r3, [pc, #20]	; (1764 <system_init+0x24>)
    1750:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1752:	4b05      	ldr	r3, [pc, #20]	; (1768 <system_init+0x28>)
    1754:	4798      	blx	r3
}
    1756:	bd10      	pop	{r4, pc}
    1758:	000012ed 	.word	0x000012ed
    175c:	0000018d 	.word	0x0000018d
    1760:	0000173d 	.word	0x0000173d
    1764:	0000173d 	.word	0x0000173d
    1768:	0000173d 	.word	0x0000173d

0000176c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    176c:	e7fe      	b.n	176c <Dummy_Handler>
	...

00001770 <Reset_Handler>:
{
    1770:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1772:	4a17      	ldr	r2, [pc, #92]	; (17d0 <Reset_Handler+0x60>)
    1774:	4b17      	ldr	r3, [pc, #92]	; (17d4 <Reset_Handler+0x64>)
    1776:	429a      	cmp	r2, r3
    1778:	d011      	beq.n	179e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    177a:	001a      	movs	r2, r3
    177c:	4b16      	ldr	r3, [pc, #88]	; (17d8 <Reset_Handler+0x68>)
    177e:	429a      	cmp	r2, r3
    1780:	d20d      	bcs.n	179e <Reset_Handler+0x2e>
    1782:	4a16      	ldr	r2, [pc, #88]	; (17dc <Reset_Handler+0x6c>)
    1784:	3303      	adds	r3, #3
    1786:	1a9b      	subs	r3, r3, r2
    1788:	089b      	lsrs	r3, r3, #2
    178a:	3301      	adds	r3, #1
    178c:	009b      	lsls	r3, r3, #2
    178e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1790:	4810      	ldr	r0, [pc, #64]	; (17d4 <Reset_Handler+0x64>)
    1792:	490f      	ldr	r1, [pc, #60]	; (17d0 <Reset_Handler+0x60>)
    1794:	588c      	ldr	r4, [r1, r2]
    1796:	5084      	str	r4, [r0, r2]
    1798:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    179a:	429a      	cmp	r2, r3
    179c:	d1fa      	bne.n	1794 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    179e:	4a10      	ldr	r2, [pc, #64]	; (17e0 <Reset_Handler+0x70>)
    17a0:	4b10      	ldr	r3, [pc, #64]	; (17e4 <Reset_Handler+0x74>)
    17a2:	429a      	cmp	r2, r3
    17a4:	d20a      	bcs.n	17bc <Reset_Handler+0x4c>
    17a6:	43d3      	mvns	r3, r2
    17a8:	490e      	ldr	r1, [pc, #56]	; (17e4 <Reset_Handler+0x74>)
    17aa:	185b      	adds	r3, r3, r1
    17ac:	2103      	movs	r1, #3
    17ae:	438b      	bics	r3, r1
    17b0:	3304      	adds	r3, #4
    17b2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    17b4:	2100      	movs	r1, #0
    17b6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    17b8:	4293      	cmp	r3, r2
    17ba:	d1fc      	bne.n	17b6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    17bc:	4a0a      	ldr	r2, [pc, #40]	; (17e8 <Reset_Handler+0x78>)
    17be:	21ff      	movs	r1, #255	; 0xff
    17c0:	4b0a      	ldr	r3, [pc, #40]	; (17ec <Reset_Handler+0x7c>)
    17c2:	438b      	bics	r3, r1
    17c4:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    17c6:	4b0a      	ldr	r3, [pc, #40]	; (17f0 <Reset_Handler+0x80>)
    17c8:	4798      	blx	r3
        main();
    17ca:	4b0a      	ldr	r3, [pc, #40]	; (17f4 <Reset_Handler+0x84>)
    17cc:	4798      	blx	r3
    17ce:	e7fe      	b.n	17ce <Reset_Handler+0x5e>
    17d0:	00008c14 	.word	0x00008c14
    17d4:	20000000 	.word	0x20000000
    17d8:	20000168 	.word	0x20000168
    17dc:	20000004 	.word	0x20000004
    17e0:	20000168 	.word	0x20000168
    17e4:	20000df4 	.word	0x20000df4
    17e8:	e000ed00 	.word	0xe000ed00
    17ec:	00000000 	.word	0x00000000
    17f0:	00005425 	.word	0x00005425
    17f4:	00004989 	.word	0x00004989

000017f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    17f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17fa:	46c6      	mov	lr, r8
    17fc:	b500      	push	{lr}
    17fe:	000c      	movs	r4, r1
    1800:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1802:	2800      	cmp	r0, #0
    1804:	d10f      	bne.n	1826 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1806:	2a00      	cmp	r2, #0
    1808:	dd11      	ble.n	182e <_read+0x36>
    180a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    180c:	4e09      	ldr	r6, [pc, #36]	; (1834 <_read+0x3c>)
    180e:	4d0a      	ldr	r5, [pc, #40]	; (1838 <_read+0x40>)
    1810:	6830      	ldr	r0, [r6, #0]
    1812:	0021      	movs	r1, r4
    1814:	682b      	ldr	r3, [r5, #0]
    1816:	4798      	blx	r3
		ptr++;
    1818:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    181a:	42bc      	cmp	r4, r7
    181c:	d1f8      	bne.n	1810 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    181e:	4640      	mov	r0, r8
    1820:	bc04      	pop	{r2}
    1822:	4690      	mov	r8, r2
    1824:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1826:	2301      	movs	r3, #1
    1828:	425b      	negs	r3, r3
    182a:	4698      	mov	r8, r3
    182c:	e7f7      	b.n	181e <_read+0x26>
	for (; len > 0; --len) {
    182e:	4680      	mov	r8, r0
    1830:	e7f5      	b.n	181e <_read+0x26>
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	20000dec 	.word	0x20000dec
    1838:	20000de4 	.word	0x20000de4

0000183c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    183c:	b5f0      	push	{r4, r5, r6, r7, lr}
    183e:	46c6      	mov	lr, r8
    1840:	b500      	push	{lr}
    1842:	000e      	movs	r6, r1
    1844:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1846:	3801      	subs	r0, #1
    1848:	2802      	cmp	r0, #2
    184a:	d810      	bhi.n	186e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    184c:	2a00      	cmp	r2, #0
    184e:	d011      	beq.n	1874 <_write+0x38>
    1850:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1852:	4b0c      	ldr	r3, [pc, #48]	; (1884 <_write+0x48>)
    1854:	4698      	mov	r8, r3
    1856:	4f0c      	ldr	r7, [pc, #48]	; (1888 <_write+0x4c>)
    1858:	4643      	mov	r3, r8
    185a:	6818      	ldr	r0, [r3, #0]
    185c:	5d31      	ldrb	r1, [r6, r4]
    185e:	683b      	ldr	r3, [r7, #0]
    1860:	4798      	blx	r3
    1862:	2800      	cmp	r0, #0
    1864:	db08      	blt.n	1878 <_write+0x3c>
			return -1;
		}
		++nChars;
    1866:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1868:	42a5      	cmp	r5, r4
    186a:	d1f5      	bne.n	1858 <_write+0x1c>
    186c:	e006      	b.n	187c <_write+0x40>
		return -1;
    186e:	2401      	movs	r4, #1
    1870:	4264      	negs	r4, r4
    1872:	e003      	b.n	187c <_write+0x40>
	for (; len != 0; --len) {
    1874:	0014      	movs	r4, r2
    1876:	e001      	b.n	187c <_write+0x40>
			return -1;
    1878:	2401      	movs	r4, #1
    187a:	4264      	negs	r4, r4
	}
	return nChars;
}
    187c:	0020      	movs	r0, r4
    187e:	bc04      	pop	{r2}
    1880:	4690      	mov	r8, r2
    1882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1884:	20000dec 	.word	0x20000dec
    1888:	20000de8 	.word	0x20000de8

0000188c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    188c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    188e:	4a06      	ldr	r2, [pc, #24]	; (18a8 <_sbrk+0x1c>)
    1890:	6812      	ldr	r2, [r2, #0]
    1892:	2a00      	cmp	r2, #0
    1894:	d004      	beq.n	18a0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1896:	4a04      	ldr	r2, [pc, #16]	; (18a8 <_sbrk+0x1c>)
    1898:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    189a:	18c3      	adds	r3, r0, r3
    189c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    189e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    18a0:	4902      	ldr	r1, [pc, #8]	; (18ac <_sbrk+0x20>)
    18a2:	4a01      	ldr	r2, [pc, #4]	; (18a8 <_sbrk+0x1c>)
    18a4:	6011      	str	r1, [r2, #0]
    18a6:	e7f6      	b.n	1896 <_sbrk+0xa>
    18a8:	20000b34 	.word	0x20000b34
    18ac:	20002df8 	.word	0x20002df8

000018b0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    18b0:	2001      	movs	r0, #1
    18b2:	4240      	negs	r0, r0
    18b4:	4770      	bx	lr

000018b6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    18b6:	2380      	movs	r3, #128	; 0x80
    18b8:	019b      	lsls	r3, r3, #6
    18ba:	604b      	str	r3, [r1, #4]

	return 0;
}
    18bc:	2000      	movs	r0, #0
    18be:	4770      	bx	lr

000018c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    18c0:	2001      	movs	r0, #1
    18c2:	4770      	bx	lr

000018c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    18c4:	2000      	movs	r0, #0
    18c6:	4770      	bx	lr

000018c8 <Enrollment>:
 *  Author: Marshmallow
 */ 

#include "Enrollment.h"

uint8_t Enrollment(uint8_t node_id, uint8_t *secret_key, uint8_t *ServerPublicKey, uint8_t *ec, struct can_module * can_inst) {
    18c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ca:	46d6      	mov	lr, sl
    18cc:	464f      	mov	r7, r9
    18ce:	b580      	push	{r7, lr}
    18d0:	b08b      	sub	sp, #44	; 0x2c
    18d2:	4681      	mov	r9, r0
    18d4:	9100      	str	r1, [sp, #0]
    18d6:	4692      	mov	sl, r2
    18d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
	// Recv_Obj - Buffer 4
	// Using filter 3
	bool hardcoded = true;
	uint8_t message[8];
	
	memset(message,0,8);
    18da:	2208      	movs	r2, #8
    18dc:	2100      	movs	r1, #0
    18de:	a808      	add	r0, sp, #32
    18e0:	4b9c      	ldr	r3, [pc, #624]	; (1b54 <Enrollment+0x28c>)
    18e2:	4798      	blx	r3
	STAGE = ENROLLMENT;
    18e4:	2200      	movs	r2, #0
    18e6:	4b9c      	ldr	r3, [pc, #624]	; (1b58 <Enrollment+0x290>)
    18e8:	701a      	strb	r2, [r3, #0]
 * \param[out] sd_filter  Pointer to standard filter element struct to initialize to default values
 */
static inline void can_get_standard_message_filter_element_default(
		struct can_standard_message_filter_element *sd_filter)
{
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    18ea:	4b9c      	ldr	r3, [pc, #624]	; (1b5c <Enrollment+0x294>)
    18ec:	9307      	str	r3, [sp, #28]
	
	struct can_standard_message_filter_element sd_filter;
	
	// Get Enrollment verification
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID2 = CAN_FILTER_ENROLLMENT;
    18ee:	9b07      	ldr	r3, [sp, #28]
    18f0:	0adb      	lsrs	r3, r3, #11
    18f2:	02db      	lsls	r3, r3, #11
    18f4:	3203      	adds	r2, #3
    18f6:	4313      	orrs	r3, r2
    18f8:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFID1 = 0x411;
    18fa:	9b07      	ldr	r3, [sp, #28]
    18fc:	4a98      	ldr	r2, [pc, #608]	; (1b60 <Enrollment+0x298>)
    18fe:	401a      	ands	r2, r3
    1900:	4b98      	ldr	r3, [pc, #608]	; (1b64 <Enrollment+0x29c>)
    1902:	4313      	orrs	r3, r2
    1904:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFEC =
    1906:	9a07      	ldr	r2, [sp, #28]
    1908:	23e0      	movs	r3, #224	; 0xe0
    190a:	059b      	lsls	r3, r3, #22
    190c:	4313      	orrs	r3, r2
    190e:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1910:	2203      	movs	r2, #3
    1912:	a907      	add	r1, sp, #28
    1914:	0030      	movs	r0, r6
    1916:	4b94      	ldr	r3, [pc, #592]	; (1b68 <Enrollment+0x2a0>)
    1918:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
    191a:	6832      	ldr	r2, [r6, #0]
    191c:	6d51      	ldr	r1, [r2, #84]	; 0x54
    191e:	2380      	movs	r3, #128	; 0x80
    1920:	031b      	lsls	r3, r3, #12
    1922:	430b      	orrs	r3, r1
    1924:	6553      	str	r3, [r2, #84]	; 0x54
		CAN_FILTER_ENROLLMENT);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);

	while(g_rec == 0) {}
    1926:	4a91      	ldr	r2, [pc, #580]	; (1b6c <Enrollment+0x2a4>)
    1928:	6813      	ldr	r3, [r2, #0]
    192a:	2b00      	cmp	r3, #0
    192c:	d0fc      	beq.n	1928 <Enrollment+0x60>
	g_rec = 0;
    192e:	2200      	movs	r2, #0
    1930:	4b8e      	ldr	r3, [pc, #568]	; (1b6c <Enrollment+0x2a4>)
    1932:	601a      	str	r2, [r3, #0]
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1934:	4d89      	ldr	r5, [pc, #548]	; (1b5c <Enrollment+0x294>)
    1936:	9507      	str	r5, [sp, #28]
	
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFEC =
    1938:	9b07      	ldr	r3, [sp, #28]
    193a:	4a8d      	ldr	r2, [pc, #564]	; (1b70 <Enrollment+0x2a8>)
    193c:	4013      	ands	r3, r2
    193e:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_DISABLE_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1940:	2203      	movs	r2, #3
    1942:	a907      	add	r1, sp, #28
    1944:	0030      	movs	r0, r6
    1946:	4c88      	ldr	r4, [pc, #544]	; (1b68 <Enrollment+0x2a0>)
    1948:	47a0      	blx	r4
		CAN_FILTER_ENROLLMENT);
		
	if(hardcoded) {
		printf("Using hardcoded values...\r\n");
    194a:	488a      	ldr	r0, [pc, #552]	; (1b74 <Enrollment+0x2ac>)
    194c:	4b8a      	ldr	r3, [pc, #552]	; (1b78 <Enrollment+0x2b0>)
    194e:	4798      	blx	r3
		
		memset(secret_key+16,0,16);
    1950:	9b00      	ldr	r3, [sp, #0]
    1952:	3310      	adds	r3, #16
    1954:	0018      	movs	r0, r3
    1956:	2210      	movs	r2, #16
    1958:	2100      	movs	r1, #0
    195a:	4f7e      	ldr	r7, [pc, #504]	; (1b54 <Enrollment+0x28c>)
    195c:	47b8      	blx	r7
		memset(secret_key,node_id,16);
    195e:	2210      	movs	r2, #16
    1960:	4649      	mov	r1, r9
    1962:	9800      	ldr	r0, [sp, #0]
    1964:	47b8      	blx	r7
    1966:	9507      	str	r5, [sp, #28]
		memset(secret_key,0,32);
	}
	
	// Get Public Key (3/4 parts of it)
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID2 = CAN_FILTER_PUBLICKEY;
    1968:	9b07      	ldr	r3, [sp, #28]
    196a:	0adb      	lsrs	r3, r3, #11
    196c:	02db      	lsls	r3, r3, #11
    196e:	2204      	movs	r2, #4
    1970:	4313      	orrs	r3, r2
    1972:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFID1 = 0x100;
    1974:	9b07      	ldr	r3, [sp, #28]
    1976:	4a7a      	ldr	r2, [pc, #488]	; (1b60 <Enrollment+0x298>)
    1978:	401a      	ands	r2, r3
    197a:	2380      	movs	r3, #128	; 0x80
    197c:	045b      	lsls	r3, r3, #17
    197e:	4313      	orrs	r3, r2
    1980:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFEC =
    1982:	9a07      	ldr	r2, [sp, #28]
    1984:	23e0      	movs	r3, #224	; 0xe0
    1986:	059b      	lsls	r3, r3, #22
    1988:	4313      	orrs	r3, r2
    198a:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    198c:	2204      	movs	r2, #4
    198e:	a907      	add	r1, sp, #28
    1990:	0030      	movs	r0, r6
    1992:	47a0      	blx	r4
	module_inst->hw->IE.reg |= source;
    1994:	6832      	ldr	r2, [r6, #0]
    1996:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1998:	2380      	movs	r3, #128	; 0x80
    199a:	031b      	lsls	r3, r3, #12
    199c:	430b      	orrs	r3, r1
    199e:	6553      	str	r3, [r2, #84]	; 0x54
		CAN_FILTER_PUBLICKEY);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);
	
	int i;
	for(i=0; i<3; i++) {
    19a0:	2400      	movs	r4, #0
		while(g_rec_public == (unsigned)i);
    19a2:	4d76      	ldr	r5, [pc, #472]	; (1b7c <Enrollment+0x2b4>)
		memcpy(&ServerPublicKey[i*8],rx_element_buff[CAN_FILTER_PUBLICKEY].data,8);
    19a4:	4f76      	ldr	r7, [pc, #472]	; (1b80 <Enrollment+0x2b8>)
    19a6:	3748      	adds	r7, #72	; 0x48
    19a8:	9701      	str	r7, [sp, #4]
    19aa:	4f76      	ldr	r7, [pc, #472]	; (1b84 <Enrollment+0x2bc>)
		while(g_rec_public == (unsigned)i);
    19ac:	0020      	movs	r0, r4
    19ae:	682b      	ldr	r3, [r5, #0]
    19b0:	42a3      	cmp	r3, r4
    19b2:	d0fc      	beq.n	19ae <Enrollment+0xe6>
		memcpy(&ServerPublicKey[i*8],rx_element_buff[CAN_FILTER_PUBLICKEY].data,8);
    19b4:	00c0      	lsls	r0, r0, #3
    19b6:	4450      	add	r0, sl
    19b8:	2208      	movs	r2, #8
    19ba:	9901      	ldr	r1, [sp, #4]
    19bc:	47b8      	blx	r7
	for(i=0; i<3; i++) {
    19be:	3401      	adds	r4, #1
    19c0:	2c03      	cmp	r4, #3
    19c2:	d1f3      	bne.n	19ac <Enrollment+0xe4>
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    19c4:	4b65      	ldr	r3, [pc, #404]	; (1b5c <Enrollment+0x294>)
    19c6:	9307      	str	r3, [sp, #28]
	}
	
	// Get last, special part of the server public key (4/4)
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID1 = 0x100 + node_id;
    19c8:	9b07      	ldr	r3, [sp, #28]
    19ca:	464a      	mov	r2, r9
    19cc:	3201      	adds	r2, #1
    19ce:	32ff      	adds	r2, #255	; 0xff
    19d0:	0412      	lsls	r2, r2, #16
    19d2:	4963      	ldr	r1, [pc, #396]	; (1b60 <Enrollment+0x298>)
    19d4:	400b      	ands	r3, r1
    19d6:	4313      	orrs	r3, r2
    19d8:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFID2 = CAN_FILTER_PUBLICKEY;
    19da:	9b07      	ldr	r3, [sp, #28]
    19dc:	0adb      	lsrs	r3, r3, #11
    19de:	02db      	lsls	r3, r3, #11
    19e0:	2204      	movs	r2, #4
    19e2:	4313      	orrs	r3, r2
    19e4:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFEC =
    19e6:	9a07      	ldr	r2, [sp, #28]
    19e8:	23e0      	movs	r3, #224	; 0xe0
    19ea:	059b      	lsls	r3, r3, #22
    19ec:	4313      	orrs	r3, r2
    19ee:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    19f0:	2204      	movs	r2, #4
    19f2:	a907      	add	r1, sp, #28
    19f4:	0030      	movs	r0, r6
    19f6:	4b5c      	ldr	r3, [pc, #368]	; (1b68 <Enrollment+0x2a0>)
    19f8:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    19fa:	6832      	ldr	r2, [r6, #0]
    19fc:	6d51      	ldr	r1, [r2, #84]	; 0x54
    19fe:	2380      	movs	r3, #128	; 0x80
    1a00:	031b      	lsls	r3, r3, #12
    1a02:	430b      	orrs	r3, r1
    1a04:	6553      	str	r3, [r2, #84]	; 0x54
		CAN_FILTER_PUBLICKEY);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);

	while(g_rec_public == i);
    1a06:	4a5d      	ldr	r2, [pc, #372]	; (1b7c <Enrollment+0x2b4>)
    1a08:	6813      	ldr	r3, [r2, #0]
    1a0a:	2b03      	cmp	r3, #3
    1a0c:	d0fc      	beq.n	1a08 <Enrollment+0x140>
	memcpy(&ServerPublicKey[i*8],rx_element_buff[CAN_FILTER_PUBLICKEY].data,8);
    1a0e:	4650      	mov	r0, sl
    1a10:	3018      	adds	r0, #24
    1a12:	2208      	movs	r2, #8
    1a14:	495a      	ldr	r1, [pc, #360]	; (1b80 <Enrollment+0x2b8>)
    1a16:	3148      	adds	r1, #72	; 0x48
    1a18:	4d5a      	ldr	r5, [pc, #360]	; (1b84 <Enrollment+0x2bc>)
    1a1a:	47a8      	blx	r5
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1a1c:	4b4f      	ldr	r3, [pc, #316]	; (1b5c <Enrollment+0x294>)
    1a1e:	9307      	str	r3, [sp, #28]
	
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFEC =
    1a20:	9b07      	ldr	r3, [sp, #28]
    1a22:	4a53      	ldr	r2, [pc, #332]	; (1b70 <Enrollment+0x2a8>)
    1a24:	4013      	ands	r3, r2
    1a26:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_DISABLE_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1a28:	2204      	movs	r2, #4
    1a2a:	a907      	add	r1, sp, #28
    1a2c:	0030      	movs	r0, r6
    1a2e:	4b4e      	ldr	r3, [pc, #312]	; (1b68 <Enrollment+0x2a0>)
    1a30:	4798      	blx	r3
		CAN_FILTER_PUBLICKEY);
	
	printf("Ready to transmit response\r\n");
    1a32:	4855      	ldr	r0, [pc, #340]	; (1b88 <Enrollment+0x2c0>)
    1a34:	4b50      	ldr	r3, [pc, #320]	; (1b78 <Enrollment+0x2b0>)
    1a36:	4798      	blx	r3
	tx_element->T0.reg = 0;
    1a38:	2300      	movs	r3, #0
    1a3a:	9303      	str	r3, [sp, #12]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    1a3c:	2388      	movs	r3, #136	; 0x88
    1a3e:	041b      	lsls	r3, r3, #16
    1a40:	9304      	str	r3, [sp, #16]
	// Send the response (2 packets)
	struct can_tx_element tx_element;

	// Part 1:
	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x200+node_id);
    1a42:	9b03      	ldr	r3, [sp, #12]
    1a44:	2480      	movs	r4, #128	; 0x80
    1a46:	00a4      	lsls	r4, r4, #2
    1a48:	444c      	add	r4, r9
    1a4a:	04a4      	lsls	r4, r4, #18
    1a4c:	4a4f      	ldr	r2, [pc, #316]	; (1b8c <Enrollment+0x2c4>)
    1a4e:	4014      	ands	r4, r2
    1a50:	4323      	orrs	r3, r4
    1a52:	9303      	str	r3, [sp, #12]
	tx_element.T1.bit.DLC = 8;
    1a54:	9b04      	ldr	r3, [sp, #16]
    1a56:	4a4e      	ldr	r2, [pc, #312]	; (1b90 <Enrollment+0x2c8>)
    1a58:	401a      	ands	r2, r3
    1a5a:	2380      	movs	r3, #128	; 0x80
    1a5c:	031b      	lsls	r3, r3, #12
    1a5e:	4313      	orrs	r3, r2
    1a60:	9304      	str	r3, [sp, #16]
	memcpy(tx_element.data,secret_key,8);
    1a62:	2208      	movs	r2, #8
    1a64:	9900      	ldr	r1, [sp, #0]
    1a66:	a805      	add	r0, sp, #20
    1a68:	47a8      	blx	r5
	can_set_tx_buffer_element(can_inst, &tx_element,
    1a6a:	2205      	movs	r2, #5
    1a6c:	a903      	add	r1, sp, #12
    1a6e:	0030      	movs	r0, r6
    1a70:	4b48      	ldr	r3, [pc, #288]	; (1b94 <Enrollment+0x2cc>)
    1a72:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    1a74:	6833      	ldr	r3, [r6, #0]
    1a76:	699a      	ldr	r2, [r3, #24]
    1a78:	0792      	lsls	r2, r2, #30
    1a7a:	d402      	bmi.n	1a82 <Enrollment+0x1ba>
	module_inst->hw->TXBAR.reg = trig_mask;
    1a7c:	2120      	movs	r1, #32
    1a7e:	22d0      	movs	r2, #208	; 0xd0
    1a80:	5099      	str	r1, [r3, r2]
	return module_inst->hw->TXBTO.reg;
    1a82:	6830      	ldr	r0, [r6, #0]
    1a84:	21d8      	movs	r1, #216	; 0xd8
		CAN_TX_FILTER_BUFFER_INDEX);
	can_tx_transfer_request(can_inst, 1 << CAN_TX_FILTER_BUFFER_INDEX);
	
	while(can_tx_get_transmission_status(can_inst) & (1 << CAN_TX_FILTER_BUFFER_INDEX));
    1a86:	2220      	movs	r2, #32
    1a88:	5843      	ldr	r3, [r0, r1]
    1a8a:	421a      	tst	r2, r3
    1a8c:	d1fc      	bne.n	1a88 <Enrollment+0x1c0>
    1a8e:	4b42      	ldr	r3, [pc, #264]	; (1b98 <Enrollment+0x2d0>)
    1a90:	3b01      	subs	r3, #1
	
	// best delay function 2021
	for(i = 0; i < 300000; i++);
    1a92:	2b00      	cmp	r3, #0
    1a94:	d1fc      	bne.n	1a90 <Enrollment+0x1c8>
	tx_element->T0.reg = 0;
    1a96:	9303      	str	r3, [sp, #12]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    1a98:	2388      	movs	r3, #136	; 0x88
    1a9a:	041b      	lsls	r3, r3, #16
    1a9c:	9304      	str	r3, [sp, #16]
	
	// Part 2:
	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x200+node_id);
    1a9e:	9b03      	ldr	r3, [sp, #12]
    1aa0:	431c      	orrs	r4, r3
    1aa2:	9403      	str	r4, [sp, #12]
	tx_element.T1.bit.DLC = 8;
    1aa4:	9b04      	ldr	r3, [sp, #16]
    1aa6:	4a3a      	ldr	r2, [pc, #232]	; (1b90 <Enrollment+0x2c8>)
    1aa8:	401a      	ands	r2, r3
    1aaa:	2380      	movs	r3, #128	; 0x80
    1aac:	031b      	lsls	r3, r3, #12
    1aae:	4313      	orrs	r3, r2
    1ab0:	9304      	str	r3, [sp, #16]
	memcpy(tx_element.data,&secret_key[8],8);
    1ab2:	9900      	ldr	r1, [sp, #0]
    1ab4:	3108      	adds	r1, #8
    1ab6:	2208      	movs	r2, #8
    1ab8:	a805      	add	r0, sp, #20
    1aba:	4b32      	ldr	r3, [pc, #200]	; (1b84 <Enrollment+0x2bc>)
    1abc:	4798      	blx	r3
	can_set_tx_buffer_element(can_inst, &tx_element,
    1abe:	2205      	movs	r2, #5
    1ac0:	a903      	add	r1, sp, #12
    1ac2:	0030      	movs	r0, r6
    1ac4:	4b33      	ldr	r3, [pc, #204]	; (1b94 <Enrollment+0x2cc>)
    1ac6:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    1ac8:	6833      	ldr	r3, [r6, #0]
    1aca:	699a      	ldr	r2, [r3, #24]
    1acc:	0792      	lsls	r2, r2, #30
    1ace:	d402      	bmi.n	1ad6 <Enrollment+0x20e>
	module_inst->hw->TXBAR.reg = trig_mask;
    1ad0:	2120      	movs	r1, #32
    1ad2:	22d0      	movs	r2, #208	; 0xd0
    1ad4:	5099      	str	r1, [r3, r2]
	return module_inst->hw->TXBTO.reg;
    1ad6:	6830      	ldr	r0, [r6, #0]
    1ad8:	21d8      	movs	r1, #216	; 0xd8
		CAN_TX_FILTER_BUFFER_INDEX);
	can_tx_transfer_request(can_inst, 1 << CAN_TX_FILTER_BUFFER_INDEX);
	
	while(can_tx_get_transmission_status(can_inst) & (1 << CAN_TX_FILTER_BUFFER_INDEX));
    1ada:	2220      	movs	r2, #32
    1adc:	5843      	ldr	r3, [r0, r1]
    1ade:	421a      	tst	r2, r3
    1ae0:	d1fc      	bne.n	1adc <Enrollment+0x214>
	
	
	// Wait for final message from server confirming enrollment has completed
	printf("Last part\r\n");
    1ae2:	482e      	ldr	r0, [pc, #184]	; (1b9c <Enrollment+0x2d4>)
    1ae4:	4b24      	ldr	r3, [pc, #144]	; (1b78 <Enrollment+0x2b0>)
    1ae6:	4798      	blx	r3
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1ae8:	4b1c      	ldr	r3, [pc, #112]	; (1b5c <Enrollment+0x294>)
    1aea:	9307      	str	r3, [sp, #28]
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID2 = CAN_FILTER_ENROLLMENT;
    1aec:	9b07      	ldr	r3, [sp, #28]
    1aee:	0adb      	lsrs	r3, r3, #11
    1af0:	02db      	lsls	r3, r3, #11
    1af2:	2203      	movs	r2, #3
    1af4:	4313      	orrs	r3, r2
    1af6:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFID1 = 0x411;
    1af8:	9b07      	ldr	r3, [sp, #28]
    1afa:	4a19      	ldr	r2, [pc, #100]	; (1b60 <Enrollment+0x298>)
    1afc:	401a      	ands	r2, r3
    1afe:	4b19      	ldr	r3, [pc, #100]	; (1b64 <Enrollment+0x29c>)
    1b00:	4313      	orrs	r3, r2
    1b02:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFEC =
    1b04:	9a07      	ldr	r2, [sp, #28]
    1b06:	23e0      	movs	r3, #224	; 0xe0
    1b08:	059b      	lsls	r3, r3, #22
    1b0a:	4313      	orrs	r3, r2
    1b0c:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1b0e:	2203      	movs	r2, #3
    1b10:	a907      	add	r1, sp, #28
    1b12:	0030      	movs	r0, r6
    1b14:	4b14      	ldr	r3, [pc, #80]	; (1b68 <Enrollment+0x2a0>)
    1b16:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    1b18:	6832      	ldr	r2, [r6, #0]
    1b1a:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1b1c:	2380      	movs	r3, #128	; 0x80
    1b1e:	031b      	lsls	r3, r3, #12
    1b20:	430b      	orrs	r3, r1
    1b22:	6553      	str	r3, [r2, #84]	; 0x54
		CAN_FILTER_ENROLLMENT);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);
	
	while(g_rec == 0);
    1b24:	4a11      	ldr	r2, [pc, #68]	; (1b6c <Enrollment+0x2a4>)
    1b26:	6813      	ldr	r3, [r2, #0]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d0fc      	beq.n	1b26 <Enrollment+0x25e>
	g_rec = 0;
    1b2c:	2200      	movs	r2, #0
    1b2e:	4b0f      	ldr	r3, [pc, #60]	; (1b6c <Enrollment+0x2a4>)
    1b30:	601a      	str	r2, [r3, #0]
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1b32:	4b0a      	ldr	r3, [pc, #40]	; (1b5c <Enrollment+0x294>)
    1b34:	9307      	str	r3, [sp, #28]
	
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFEC =
    1b36:	9b07      	ldr	r3, [sp, #28]
    1b38:	4a0d      	ldr	r2, [pc, #52]	; (1b70 <Enrollment+0x2a8>)
    1b3a:	4013      	ands	r3, r2
    1b3c:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_DISABLE_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1b3e:	2203      	movs	r2, #3
    1b40:	a907      	add	r1, sp, #28
    1b42:	0030      	movs	r0, r6
    1b44:	4b08      	ldr	r3, [pc, #32]	; (1b68 <Enrollment+0x2a0>)
    1b46:	4798      	blx	r3
		CAN_FILTER_ENROLLMENT);

	return hardcoded;
    1b48:	2001      	movs	r0, #1
    1b4a:	b00b      	add	sp, #44	; 0x2c
    1b4c:	bc0c      	pop	{r2, r3}
    1b4e:	4691      	mov	r9, r2
    1b50:	469a      	mov	sl, r3
    1b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b54:	000054a3 	.word	0x000054a3
    1b58:	20000b38 	.word	0x20000b38
    1b5c:	880007ff 	.word	0x880007ff
    1b60:	f800ffff 	.word	0xf800ffff
    1b64:	04110000 	.word	0x04110000
    1b68:	0000050d 	.word	0x0000050d
    1b6c:	20000b3c 	.word	0x20000b3c
    1b70:	c7ffffff 	.word	0xc7ffffff
    1b74:	000065c4 	.word	0x000065c4
    1b78:	000055a9 	.word	0x000055a9
    1b7c:	20000b40 	.word	0x20000b40
    1b80:	20000b44 	.word	0x20000b44
    1b84:	0000546d 	.word	0x0000546d
    1b88:	000065e0 	.word	0x000065e0
    1b8c:	1ffc0000 	.word	0x1ffc0000
    1b90:	fff0ffff 	.word	0xfff0ffff
    1b94:	000005e9 	.word	0x000005e9
    1b98:	000493e0 	.word	0x000493e0
    1b9c:	000065fc 	.word	0x000065fc

00001ba0 <is_zero_ct>:
static digit_t mask4000 = (digit_t)1 << (sizeof(digit_t)*8 - 2);
static digit_t mask7fff = (digit_t)(-1) >> 1;


bool is_zero_ct(digit_t* a, unsigned int nwords)
{ // Check if multiprecision element is zero
    1ba0:	b510      	push	{r4, lr}
    digit_t x;
    unsigned int i;

    x = a[0];
    1ba2:	6802      	ldr	r2, [r0, #0]
    for (i = 1; i < nwords; i++) {
    1ba4:	2901      	cmp	r1, #1
    1ba6:	d906      	bls.n	1bb6 <is_zero_ct+0x16>
    1ba8:	1d03      	adds	r3, r0, #4
    1baa:	0089      	lsls	r1, r1, #2
    1bac:	1840      	adds	r0, r0, r1
        x |= a[i];
    1bae:	cb10      	ldmia	r3!, {r4}
    1bb0:	4322      	orrs	r2, r4
    for (i = 1; i < nwords; i++) {
    1bb2:	4283      	cmp	r3, r0
    1bb4:	d1fb      	bne.n	1bae <is_zero_ct+0xe>
    }

    return (bool)(1 ^ ((x | (0-x)) >> (RADIX-1)));
    1bb6:	4250      	negs	r0, r2
    1bb8:	4310      	orrs	r0, r2
    1bba:	0fc0      	lsrs	r0, r0, #31
    1bbc:	3801      	subs	r0, #1
    1bbe:	4240      	negs	r0, r0
}
    1bc0:	bd10      	pop	{r4, pc}
	...

00001bc4 <encode>:


void encode(point_t P, unsigned char* Pencoded)
{ // Encode point P
    1bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bc6:	0005      	movs	r5, r0
    1bc8:	000e      	movs	r6, r1
  // SECURITY NOTE: this function does not run in constant time.
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    1bca:	69c7      	ldr	r7, [r0, #28]
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    1bcc:	68c4      	ldr	r4, [r0, #12]

    memmove(Pencoded, P->y, 32);
    1bce:	0001      	movs	r1, r0
    1bd0:	3120      	adds	r1, #32
    1bd2:	2220      	movs	r2, #32
    1bd4:	0030      	movs	r0, r6
    1bd6:	4b0b      	ldr	r3, [pc, #44]	; (1c04 <encode+0x40>)
    1bd8:	4798      	blx	r3
    if (is_zero_ct((digit_t*)P->x, NWORDS_FIELD) == true) {
    1bda:	2104      	movs	r1, #4
    1bdc:	0028      	movs	r0, r5
    1bde:	4b0a      	ldr	r3, [pc, #40]	; (1c08 <encode+0x44>)
    1be0:	4798      	blx	r3
    1be2:	2800      	cmp	r0, #0
    1be4:	d106      	bne.n	1bf4 <encode+0x30>
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    1be6:	0064      	lsls	r4, r4, #1
    1be8:	0fe4      	lsrs	r4, r4, #31
    1bea:	07e4      	lsls	r4, r4, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    } else {
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp2;
    1bec:	69f3      	ldr	r3, [r6, #28]
    1bee:	431c      	orrs	r4, r3
    1bf0:	61f4      	str	r4, [r6, #28]
    }
}
    1bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    1bf4:	007f      	lsls	r7, r7, #1
    1bf6:	0fff      	lsrs	r7, r7, #31
    1bf8:	07ff      	lsls	r7, r7, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    1bfa:	69f3      	ldr	r3, [r6, #28]
    1bfc:	431f      	orrs	r7, r3
    1bfe:	61f7      	str	r7, [r6, #28]
    1c00:	e7f7      	b.n	1bf2 <encode+0x2e>
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	0000547f 	.word	0x0000547f
    1c08:	00001ba1 	.word	0x00001ba1

00001c0c <decode>:


ECCRYPTO_STATUS decode(const unsigned char* Pencoded, point_t P)
{ // Decode point P
    1c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c0e:	46c6      	mov	lr, r8
    1c10:	b500      	push	{lr}
    1c12:	b0dc      	sub	sp, #368	; 0x170
    1c14:	0005      	movs	r5, r0
    1c16:	000e      	movs	r6, r1
  // SECURITY NOTE: this function does not run in constant time.
    felm_t r, t, t0, t1, t2, t3, t4;
    f2elm_t u, v, one = {0};
    1c18:	2220      	movs	r2, #32
    1c1a:	2100      	movs	r1, #0
    1c1c:	a828      	add	r0, sp, #160	; 0xa0
    1c1e:	4b73      	ldr	r3, [pc, #460]	; (1dec <decode+0x1e0>)
    1c20:	4798      	blx	r3
    digit_t sign_dec;
    point_extproj_t R;
    unsigned int i, sign;

    one[0][0] = 1;
    1c22:	2301      	movs	r3, #1
    1c24:	9328      	str	r3, [sp, #160]	; 0xa0
    memmove((unsigned char*)P->y, Pencoded, 32);    // Decoding y-coordinate and sign
    1c26:	0034      	movs	r4, r6
    1c28:	3420      	adds	r4, #32
    1c2a:	2220      	movs	r2, #32
    1c2c:	0029      	movs	r1, r5
    1c2e:	0020      	movs	r0, r4
    1c30:	4b6f      	ldr	r3, [pc, #444]	; (1df0 <decode+0x1e4>)
    1c32:	4798      	blx	r3
    sign = (unsigned int)(Pencoded[31] >> 7);
    1c34:	7fef      	ldrb	r7, [r5, #31]
    1c36:	09ff      	lsrs	r7, r7, #7
    P->y[1][NWORDS_FIELD-1] &= mask7fff;
    1c38:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1c3a:	005b      	lsls	r3, r3, #1
    1c3c:	085b      	lsrs	r3, r3, #1
    1c3e:	63f3      	str	r3, [r6, #60]	; 0x3c

    fp2sqr1271(P->y, u);
    1c40:	a938      	add	r1, sp, #224	; 0xe0
    1c42:	0020      	movs	r0, r4
    1c44:	4b6b      	ldr	r3, [pc, #428]	; (1df4 <decode+0x1e8>)
    1c46:	4798      	blx	r3
    fp2mul1271(u, (felm_t*)&PARAMETER_d, v);
    1c48:	aa30      	add	r2, sp, #192	; 0xc0
    1c4a:	496b      	ldr	r1, [pc, #428]	; (1df8 <decode+0x1ec>)
    1c4c:	a838      	add	r0, sp, #224	; 0xe0
    1c4e:	4b6b      	ldr	r3, [pc, #428]	; (1dfc <decode+0x1f0>)
    1c50:	4798      	blx	r3
    fp2sub1271(u, one, u);
    1c52:	aa38      	add	r2, sp, #224	; 0xe0
    1c54:	a928      	add	r1, sp, #160	; 0xa0
    1c56:	0010      	movs	r0, r2
    1c58:	4b69      	ldr	r3, [pc, #420]	; (1e00 <decode+0x1f4>)
    1c5a:	4798      	blx	r3
    fp2add1271(v, one, v);
    1c5c:	aa30      	add	r2, sp, #192	; 0xc0
    1c5e:	a928      	add	r1, sp, #160	; 0xa0
    1c60:	0010      	movs	r0, r2
    1c62:	4b68      	ldr	r3, [pc, #416]	; (1e04 <decode+0x1f8>)
    1c64:	4798      	blx	r3

    fpsqr1271(v[0], t0);                            // t0 = v0^2
    1c66:	a950      	add	r1, sp, #320	; 0x140
    1c68:	a830      	add	r0, sp, #192	; 0xc0
    1c6a:	4c67      	ldr	r4, [pc, #412]	; (1e08 <decode+0x1fc>)
    1c6c:	47a0      	blx	r4
    fpsqr1271(v[1], t1);                            // t1 = v1^2
    1c6e:	a94c      	add	r1, sp, #304	; 0x130
    1c70:	a834      	add	r0, sp, #208	; 0xd0
    1c72:	47a0      	blx	r4
    fpadd1271(t0, t1, t0);                          // t0 = t0+t1   
    1c74:	aa50      	add	r2, sp, #320	; 0x140
    1c76:	a94c      	add	r1, sp, #304	; 0x130
    1c78:	0010      	movs	r0, r2
    1c7a:	4b64      	ldr	r3, [pc, #400]	; (1e0c <decode+0x200>)
    1c7c:	4698      	mov	r8, r3
    1c7e:	4798      	blx	r3
    fpmul1271(u[0], v[0], t1);                      // t1 = u0*v0
    1c80:	aa4c      	add	r2, sp, #304	; 0x130
    1c82:	a930      	add	r1, sp, #192	; 0xc0
    1c84:	a838      	add	r0, sp, #224	; 0xe0
    1c86:	4d62      	ldr	r5, [pc, #392]	; (1e10 <decode+0x204>)
    1c88:	47a8      	blx	r5
    fpmul1271(u[1], v[1], t2);                      // t2 = u1*v1 
    1c8a:	aa48      	add	r2, sp, #288	; 0x120
    1c8c:	a934      	add	r1, sp, #208	; 0xd0
    1c8e:	a83c      	add	r0, sp, #240	; 0xf0
    1c90:	47a8      	blx	r5
    fpadd1271(t1, t2, t1);                          // t1 = t1+t2  
    1c92:	aa4c      	add	r2, sp, #304	; 0x130
    1c94:	a948      	add	r1, sp, #288	; 0x120
    1c96:	0010      	movs	r0, r2
    1c98:	47c0      	blx	r8
    fpmul1271(u[1], v[0], t2);                      // t2 = u1*v0
    1c9a:	aa48      	add	r2, sp, #288	; 0x120
    1c9c:	a930      	add	r1, sp, #192	; 0xc0
    1c9e:	a83c      	add	r0, sp, #240	; 0xf0
    1ca0:	47a8      	blx	r5
    fpmul1271(u[0], v[1], t3);                      // t3 = u0*v1
    1ca2:	aa44      	add	r2, sp, #272	; 0x110
    1ca4:	a934      	add	r1, sp, #208	; 0xd0
    1ca6:	a838      	add	r0, sp, #224	; 0xe0
    1ca8:	47a8      	blx	r5
    fpsub1271(t2, t3, t2);                          // t2 = t2-t3    
    1caa:	aa48      	add	r2, sp, #288	; 0x120
    1cac:	a944      	add	r1, sp, #272	; 0x110
    1cae:	0010      	movs	r0, r2
    1cb0:	4b58      	ldr	r3, [pc, #352]	; (1e14 <decode+0x208>)
    1cb2:	4798      	blx	r3
    fpsqr1271(t1, t3);                              // t3 = t1^2    
    1cb4:	a944      	add	r1, sp, #272	; 0x110
    1cb6:	a84c      	add	r0, sp, #304	; 0x130
    1cb8:	47a0      	blx	r4
    fpsqr1271(t2, t4);                              // t4 = t2^2
    1cba:	a940      	add	r1, sp, #256	; 0x100
    1cbc:	a848      	add	r0, sp, #288	; 0x120
    1cbe:	47a0      	blx	r4
    fpadd1271(t3, t4, t3);                          // t3 = t3+t4
    1cc0:	aa44      	add	r2, sp, #272	; 0x110
    1cc2:	a940      	add	r1, sp, #256	; 0x100
    1cc4:	0010      	movs	r0, r2
    1cc6:	47c0      	blx	r8
    1cc8:	247d      	movs	r4, #125	; 0x7d
    for (i = 0; i < 125; i++) {                     // t3 = t3^(2^125)
        fpsqr1271(t3, t3);
    1cca:	4d4f      	ldr	r5, [pc, #316]	; (1e08 <decode+0x1fc>)
    1ccc:	a944      	add	r1, sp, #272	; 0x110
    1cce:	0008      	movs	r0, r1
    1cd0:	47a8      	blx	r5
    1cd2:	3c01      	subs	r4, #1
    for (i = 0; i < 125; i++) {                     // t3 = t3^(2^125)
    1cd4:	2c00      	cmp	r4, #0
    1cd6:	d1f9      	bne.n	1ccc <decode+0xc0>
    }

    fpadd1271(t1, t3, t);                           // t = t1+t3
    1cd8:	aa54      	add	r2, sp, #336	; 0x150
    1cda:	a944      	add	r1, sp, #272	; 0x110
    1cdc:	a84c      	add	r0, sp, #304	; 0x130
    1cde:	4b4b      	ldr	r3, [pc, #300]	; (1e0c <decode+0x200>)
    1ce0:	4798      	blx	r3
    mod1271(t);
    1ce2:	a854      	add	r0, sp, #336	; 0x150
    1ce4:	4b4c      	ldr	r3, [pc, #304]	; (1e18 <decode+0x20c>)
    1ce6:	4798      	blx	r3
    if (is_zero_ct(t, NWORDS_FIELD) == true) {
    1ce8:	2104      	movs	r1, #4
    1cea:	a854      	add	r0, sp, #336	; 0x150
    1cec:	4b4b      	ldr	r3, [pc, #300]	; (1e1c <decode+0x210>)
    1cee:	4798      	blx	r3
    1cf0:	2800      	cmp	r0, #0
    1cf2:	d15a      	bne.n	1daa <decode+0x19e>
        fpsub1271(t1, t3, t);                       // t = t1-t3
    }
    fpadd1271(t, t, t);                             // t = 2*t            
    1cf4:	aa54      	add	r2, sp, #336	; 0x150
    1cf6:	0011      	movs	r1, r2
    1cf8:	0010      	movs	r0, r2
    1cfa:	4b44      	ldr	r3, [pc, #272]	; (1e0c <decode+0x200>)
    1cfc:	4798      	blx	r3
    fpsqr1271(t0, t3);                              // t3 = t0^2      
    1cfe:	a944      	add	r1, sp, #272	; 0x110
    1d00:	a850      	add	r0, sp, #320	; 0x140
    1d02:	4d41      	ldr	r5, [pc, #260]	; (1e08 <decode+0x1fc>)
    1d04:	47a8      	blx	r5
    fpmul1271(t0, t3, t3);                          // t3 = t3*t0   
    1d06:	aa44      	add	r2, sp, #272	; 0x110
    1d08:	0011      	movs	r1, r2
    1d0a:	a850      	add	r0, sp, #320	; 0x140
    1d0c:	4c40      	ldr	r4, [pc, #256]	; (1e10 <decode+0x204>)
    1d0e:	47a0      	blx	r4
    fpmul1271(t, t3, t3);                           // t3 = t3*t
    1d10:	aa44      	add	r2, sp, #272	; 0x110
    1d12:	0011      	movs	r1, r2
    1d14:	a854      	add	r0, sp, #336	; 0x150
    1d16:	47a0      	blx	r4
    fpexp1251(t3, r);                               // r = t3^(2^125-1)  
    1d18:	a958      	add	r1, sp, #352	; 0x160
    1d1a:	a844      	add	r0, sp, #272	; 0x110
    1d1c:	4b40      	ldr	r3, [pc, #256]	; (1e20 <decode+0x214>)
    1d1e:	4798      	blx	r3
    fpmul1271(t0, r, t3);                           // t3 = t0*r          
    1d20:	aa44      	add	r2, sp, #272	; 0x110
    1d22:	a958      	add	r1, sp, #352	; 0x160
    1d24:	a850      	add	r0, sp, #320	; 0x140
    1d26:	47a0      	blx	r4
    fpmul1271(t, t3, P->x[0]);                      // x0 = t*t3 
    1d28:	0032      	movs	r2, r6
    1d2a:	a944      	add	r1, sp, #272	; 0x110
    1d2c:	a854      	add	r0, sp, #336	; 0x150
    1d2e:	47a0      	blx	r4
    fpsqr1271(P->x[0], t1);
    1d30:	a94c      	add	r1, sp, #304	; 0x130
    1d32:	0030      	movs	r0, r6
    1d34:	47a8      	blx	r5
    fpmul1271(t0, t1, t1);                          // t1 = t0*x0^2 
    1d36:	aa4c      	add	r2, sp, #304	; 0x130
    1d38:	0011      	movs	r1, r2
    1d3a:	a850      	add	r0, sp, #320	; 0x140
    1d3c:	47a0      	blx	r4
    fpdiv1271(P->x[0]);                             // x0 = x0/2         
    1d3e:	0030      	movs	r0, r6
    1d40:	4b38      	ldr	r3, [pc, #224]	; (1e24 <decode+0x218>)
    1d42:	4798      	blx	r3
    fpmul1271(t2, t3, P->x[1]);                     // x1 = t3*t2  
    1d44:	0035      	movs	r5, r6
    1d46:	3510      	adds	r5, #16
    1d48:	002a      	movs	r2, r5
    1d4a:	a944      	add	r1, sp, #272	; 0x110
    1d4c:	a848      	add	r0, sp, #288	; 0x120
    1d4e:	47a0      	blx	r4

    fpsub1271(t, t1, t);
    1d50:	aa54      	add	r2, sp, #336	; 0x150
    1d52:	a94c      	add	r1, sp, #304	; 0x130
    1d54:	0010      	movs	r0, r2
    1d56:	4b2f      	ldr	r3, [pc, #188]	; (1e14 <decode+0x208>)
    1d58:	4798      	blx	r3
    mod1271(t);
    1d5a:	a854      	add	r0, sp, #336	; 0x150
    1d5c:	4b2e      	ldr	r3, [pc, #184]	; (1e18 <decode+0x20c>)
    1d5e:	4798      	blx	r3
    if (is_zero_ct(t, NWORDS_FIELD) == false) {        // If t != t1 then swap x0 and x1       
    1d60:	2104      	movs	r1, #4
    1d62:	a854      	add	r0, sp, #336	; 0x150
    1d64:	4b2d      	ldr	r3, [pc, #180]	; (1e1c <decode+0x210>)
    1d66:	4798      	blx	r3
    1d68:	2800      	cmp	r0, #0
    1d6a:	d024      	beq.n	1db6 <decode+0x1aa>
        fpcopy1271(P->x[0], t0);
        fpcopy1271(P->x[1], P->x[0]);
        fpcopy1271(t0, P->x[1]);
    }
    
    mod1271(P->x[0]);
    1d6c:	0030      	movs	r0, r6
    1d6e:	4b2a      	ldr	r3, [pc, #168]	; (1e18 <decode+0x20c>)
    1d70:	4798      	blx	r3
    if (is_zero_ct((digit_t*)P->x, NWORDS_FIELD) == true) {
    1d72:	2104      	movs	r1, #4
    1d74:	0030      	movs	r0, r6
    1d76:	4b29      	ldr	r3, [pc, #164]	; (1e1c <decode+0x210>)
    1d78:	4798      	blx	r3
    1d7a:	2800      	cmp	r0, #0
    1d7c:	d026      	beq.n	1dcc <decode+0x1c0>
        sign_dec = ((digit_t*)&P->x[1])[NWORDS_FIELD-1] >> (sizeof(digit_t)*8 - 2);
    1d7e:	69f3      	ldr	r3, [r6, #28]
    1d80:	0f9b      	lsrs	r3, r3, #30
    } else {
        sign_dec = ((digit_t*)&P->x[0])[NWORDS_FIELD-1] >> (sizeof(digit_t)*8 - 2);
    }

    if (sign != (unsigned int)sign_dec) {           // If sign of x-coordinate decoded != input sign bit, then negate x-coordinate
    1d82:	42bb      	cmp	r3, r7
    1d84:	d002      	beq.n	1d8c <decode+0x180>
        fp2neg1271(P->x);
    1d86:	0030      	movs	r0, r6
    1d88:	4b27      	ldr	r3, [pc, #156]	; (1e28 <decode+0x21c>)
    1d8a:	4798      	blx	r3
    }

    point_setup(P, R);
    1d8c:	4669      	mov	r1, sp
    1d8e:	0030      	movs	r0, r6
    1d90:	4b26      	ldr	r3, [pc, #152]	; (1e2c <decode+0x220>)
    1d92:	4798      	blx	r3
    if (ecc_point_validate(R) == false) {
    1d94:	4668      	mov	r0, sp
    1d96:	4b26      	ldr	r3, [pc, #152]	; (1e30 <decode+0x224>)
    1d98:	4798      	blx	r3
        if (ecc_point_validate(R) == false) {       // Final point validation
            return ECCRYPTO_ERROR;
        }
    }

    return ECCRYPTO_SUCCESS;
    1d9a:	2301      	movs	r3, #1
    if (ecc_point_validate(R) == false) {
    1d9c:	2800      	cmp	r0, #0
    1d9e:	d018      	beq.n	1dd2 <decode+0x1c6>
}
    1da0:	0018      	movs	r0, r3
    1da2:	b05c      	add	sp, #368	; 0x170
    1da4:	bc04      	pop	{r2}
    1da6:	4690      	mov	r8, r2
    1da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fpsub1271(t1, t3, t);                       // t = t1-t3
    1daa:	aa54      	add	r2, sp, #336	; 0x150
    1dac:	a944      	add	r1, sp, #272	; 0x110
    1dae:	a84c      	add	r0, sp, #304	; 0x130
    1db0:	4b18      	ldr	r3, [pc, #96]	; (1e14 <decode+0x208>)
    1db2:	4798      	blx	r3
    1db4:	e79e      	b.n	1cf4 <decode+0xe8>
        fpcopy1271(P->x[0], t0);
    1db6:	a950      	add	r1, sp, #320	; 0x140
    1db8:	0030      	movs	r0, r6
    1dba:	4c1e      	ldr	r4, [pc, #120]	; (1e34 <decode+0x228>)
    1dbc:	47a0      	blx	r4
        fpcopy1271(P->x[1], P->x[0]);
    1dbe:	0031      	movs	r1, r6
    1dc0:	0028      	movs	r0, r5
    1dc2:	47a0      	blx	r4
        fpcopy1271(t0, P->x[1]);
    1dc4:	0029      	movs	r1, r5
    1dc6:	a850      	add	r0, sp, #320	; 0x140
    1dc8:	47a0      	blx	r4
    1dca:	e7cf      	b.n	1d6c <decode+0x160>
        sign_dec = ((digit_t*)&P->x[0])[NWORDS_FIELD-1] >> (sizeof(digit_t)*8 - 2);
    1dcc:	68f3      	ldr	r3, [r6, #12]
    1dce:	0f9b      	lsrs	r3, r3, #30
    1dd0:	e7d7      	b.n	1d82 <decode+0x176>
        fpneg1271(R->x[1]);
    1dd2:	a804      	add	r0, sp, #16
    1dd4:	4b18      	ldr	r3, [pc, #96]	; (1e38 <decode+0x22c>)
    1dd6:	4798      	blx	r3
        fpcopy1271(R->x[1], P->x[1]);
    1dd8:	0029      	movs	r1, r5
    1dda:	a804      	add	r0, sp, #16
    1ddc:	4b15      	ldr	r3, [pc, #84]	; (1e34 <decode+0x228>)
    1dde:	4798      	blx	r3
        if (ecc_point_validate(R) == false) {       // Final point validation
    1de0:	4668      	mov	r0, sp
    1de2:	4b13      	ldr	r3, [pc, #76]	; (1e30 <decode+0x224>)
    1de4:	4798      	blx	r3
            return ECCRYPTO_ERROR;
    1de6:	0003      	movs	r3, r0
    1de8:	e7da      	b.n	1da0 <decode+0x194>
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	000054a3 	.word	0x000054a3
    1df0:	0000547f 	.word	0x0000547f
    1df4:	00002afd 	.word	0x00002afd
    1df8:	00006608 	.word	0x00006608
    1dfc:	00002b09 	.word	0x00002b09
    1e00:	00002b21 	.word	0x00002b21
    1e04:	00002b15 	.word	0x00002b15
    1e08:	00001f0d 	.word	0x00001f0d
    1e0c:	00001e9d 	.word	0x00001e9d
    1e10:	00001ed5 	.word	0x00001ed5
    1e14:	00001ea9 	.word	0x00001ea9
    1e18:	00001f1d 	.word	0x00001f1d
    1e1c:	00001ba1 	.word	0x00001ba1
    1e20:	000020d1 	.word	0x000020d1
    1e24:	000024c9 	.word	0x000024c9
    1e28:	00002ac5 	.word	0x00002ac5
    1e2c:	00002f1d 	.word	0x00002f1d
    1e30:	00002f59 	.word	0x00002f59
    1e34:	00001e8f 	.word	0x00001e8f
    1e38:	00001eb5 	.word	0x00001eb5

00001e3c <digit_x_digit>:
const digit_t prime1271_0 = (digit_t)(-1);
#define prime1271_1 mask_7fff


void digit_x_digit(digit_t a, digit_t b, digit_t* c)
{ // Digit multiplication, digit * digit -> 2-digit result    
    1e3c:	b570      	push	{r4, r5, r6, lr}
    register digit_t al, ah, bl, bh, temp;
    digit_t albl, albh, ahbl, ahbh, res1, res2, res3, carry;
    digit_t mask_low = (digit_t)(-1) >> (sizeof(digit_t)*4), mask_high = (digit_t)(-1) << (sizeof(digit_t)*4);

    al = a & mask_low;                        // Low part
    1e3e:	0403      	lsls	r3, r0, #16
    1e40:	0c1b      	lsrs	r3, r3, #16
    ah = a >> (sizeof(digit_t) * 4);          // High part
    1e42:	0c00      	lsrs	r0, r0, #16
    bl = b & mask_low;
    1e44:	040c      	lsls	r4, r1, #16
    1e46:	0c24      	lsrs	r4, r4, #16
    bh = b >> (sizeof(digit_t) * 4);
    1e48:	0c09      	lsrs	r1, r1, #16

    albl = al*bl;
    1e4a:	0025      	movs	r5, r4
    1e4c:	435d      	muls	r5, r3
    albh = al*bh;
    1e4e:	434b      	muls	r3, r1
    ahbl = ah*bl;
    1e50:	4344      	muls	r4, r0
    ahbh = ah*bh;
    1e52:	4341      	muls	r1, r0
    c[0] = albl & mask_low;                   // C00

    res1 = albl >> (sizeof(digit_t) * 4);
    1e54:	0c28      	lsrs	r0, r5, #16
    res2 = ahbl & mask_low;
    1e56:	0426      	lsls	r6, r4, #16
    1e58:	0c36      	lsrs	r6, r6, #16
    res3 = albh & mask_low;  
    temp = res1 + res2 + res3;
    1e5a:	1980      	adds	r0, r0, r6
    res3 = albh & mask_low;  
    1e5c:	041e      	lsls	r6, r3, #16
    1e5e:	0c36      	lsrs	r6, r6, #16
    temp = res1 + res2 + res3;
    1e60:	1980      	adds	r0, r0, r6
    carry = temp >> (sizeof(digit_t) * 4);
    1e62:	0c06      	lsrs	r6, r0, #16
    c[0] = albl & mask_low;                   // C00
    1e64:	042d      	lsls	r5, r5, #16
    1e66:	0c2d      	lsrs	r5, r5, #16
    c[0] ^= temp << (sizeof(digit_t) * 4);    // C01   
    1e68:	0400      	lsls	r0, r0, #16
    1e6a:	4045      	eors	r5, r0
    1e6c:	6015      	str	r5, [r2, #0]

    res1 = ahbl >> (sizeof(digit_t) * 4);
    1e6e:	0c24      	lsrs	r4, r4, #16
    res2 = albh >> (sizeof(digit_t) * 4);
    1e70:	0c1b      	lsrs	r3, r3, #16
    res3 = ahbh & mask_low;
    temp = res1 + res2 + res3 + carry;
    1e72:	18e3      	adds	r3, r4, r3
    res3 = ahbh & mask_low;
    1e74:	040c      	lsls	r4, r1, #16
    1e76:	0c24      	lsrs	r4, r4, #16
    temp = res1 + res2 + res3 + carry;
    1e78:	191b      	adds	r3, r3, r4
    1e7a:	199b      	adds	r3, r3, r6
    c[1] = temp & mask_low;                   // C10 
    carry = temp & mask_high; 
    1e7c:	0c18      	lsrs	r0, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    1e7e:	0c09      	lsrs	r1, r1, #16
    1e80:	1809      	adds	r1, r1, r0
    1e82:	0409      	lsls	r1, r1, #16
    c[1] = temp & mask_low;                   // C10 
    1e84:	041b      	lsls	r3, r3, #16
    1e86:	0c1b      	lsrs	r3, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    1e88:	404b      	eors	r3, r1
    1e8a:	6053      	str	r3, [r2, #4]
}
    1e8c:	bd70      	pop	{r4, r5, r6, pc}

00001e8e <fpcopy1271>:


__inline void fpcopy1271(felm_t a, felm_t c)
{ // Copy of a field element, c = a
    1e8e:	2300      	movs	r3, #0
    unsigned int i;

    for (i = 0; i < NWORDS_FIELD; i++)
        c[i] = a[i];
    1e90:	58c2      	ldr	r2, [r0, r3]
    1e92:	50ca      	str	r2, [r1, r3]
    1e94:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_FIELD; i++)
    1e96:	2b10      	cmp	r3, #16
    1e98:	d1fa      	bne.n	1e90 <fpcopy1271+0x2>
}
    1e9a:	4770      	bx	lr

00001e9c <fpadd1271>:
        a[i] = 0;
}


__inline void fpadd1271(felm_t a, felm_t b, felm_t c)
{ // Field addition, c = a+b mod p  
    1e9c:	b510      	push	{r4, lr}
     
    fpadd1271_a(a, b, c);
    1e9e:	4b01      	ldr	r3, [pc, #4]	; (1ea4 <fpadd1271+0x8>)
    1ea0:	4798      	blx	r3
}
    1ea2:	bd10      	pop	{r4, pc}
    1ea4:	00003e89 	.word	0x00003e89

00001ea8 <fpsub1271>:


__inline void fpsub1271(felm_t a, felm_t b, felm_t c)
{ // Field subtraction, c = a-b mod p 
    1ea8:	b510      	push	{r4, lr}
    
    fpsub1271_a(a, b, c);
    1eaa:	4b01      	ldr	r3, [pc, #4]	; (1eb0 <fpsub1271+0x8>)
    1eac:	4798      	blx	r3
}
    1eae:	bd10      	pop	{r4, pc}
    1eb0:	00003ebd 	.word	0x00003ebd

00001eb4 <fpneg1271>:
{ // Field negation, a = -a mod p
    unsigned int i;
    unsigned int borrow = 0;   

    for (i = 0; i < (NWORDS_FIELD-1); i++) {
        SUBC(borrow, prime1271_0, a[i], borrow, a[i]); 
    1eb4:	6803      	ldr	r3, [r0, #0]
    1eb6:	43db      	mvns	r3, r3
    1eb8:	6003      	str	r3, [r0, #0]
    1eba:	6843      	ldr	r3, [r0, #4]
    1ebc:	43db      	mvns	r3, r3
    1ebe:	6043      	str	r3, [r0, #4]
    1ec0:	6883      	ldr	r3, [r0, #8]
    1ec2:	43db      	mvns	r3, r3
    1ec4:	6083      	str	r3, [r0, #8]
    }
    a[NWORDS_FIELD-1] = prime1271_1 - a[NWORDS_FIELD-1];
    1ec6:	4b02      	ldr	r3, [pc, #8]	; (1ed0 <fpneg1271+0x1c>)
    1ec8:	68c2      	ldr	r2, [r0, #12]
    1eca:	1a9b      	subs	r3, r3, r2
    1ecc:	60c3      	str	r3, [r0, #12]
}
    1ece:	4770      	bx	lr
    1ed0:	7fffffff 	.word	0x7fffffff

00001ed4 <fpmul1271>:


void fpmul1271(felm_t a, felm_t b, felm_t c)
{ // Field multiplication using schoolbook method, c = a*b mod p  
    1ed4:	b570      	push	{r4, r5, r6, lr}
    1ed6:	b088      	sub	sp, #32
    1ed8:	0005      	movs	r5, r0
    1eda:	000e      	movs	r6, r1
    1edc:	0014      	movs	r4, r2
    digit_t t[2*NWORDS_FIELD] = {0};
    1ede:	2220      	movs	r2, #32
    1ee0:	2100      	movs	r1, #0
    1ee2:	4668      	mov	r0, sp
    1ee4:	4b06      	ldr	r3, [pc, #24]	; (1f00 <fpmul1271+0x2c>)
    1ee6:	4798      	blx	r3
  
    mul1271_a(a, b, t);
    1ee8:	466a      	mov	r2, sp
    1eea:	0031      	movs	r1, r6
    1eec:	0028      	movs	r0, r5
    1eee:	4b05      	ldr	r3, [pc, #20]	; (1f04 <fpmul1271+0x30>)
    1ef0:	4798      	blx	r3
    mod1271_a(t, c);
    1ef2:	0021      	movs	r1, r4
    1ef4:	4668      	mov	r0, sp
    1ef6:	4b04      	ldr	r3, [pc, #16]	; (1f08 <fpmul1271+0x34>)
    1ef8:	4798      	blx	r3
}
    1efa:	b008      	add	sp, #32
    1efc:	bd70      	pop	{r4, r5, r6, pc}
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	000054a3 	.word	0x000054a3
    1f04:	00003db9 	.word	0x00003db9
    1f08:	00003e35 	.word	0x00003e35

00001f0c <fpsqr1271>:


void fpsqr1271(felm_t a, felm_t c)
{ // Field squaring using schoolbook method, c = a^2 mod p  
    1f0c:	b510      	push	{r4, lr}
    1f0e:	000a      	movs	r2, r1
    
    fpmul1271(a, a, c);
    1f10:	0001      	movs	r1, r0
    1f12:	4b01      	ldr	r3, [pc, #4]	; (1f18 <fpsqr1271+0xc>)
    1f14:	4798      	blx	r3
}
    1f16:	bd10      	pop	{r4, pc}
    1f18:	00001ed5 	.word	0x00001ed5

00001f1c <mod1271>:


void mod1271(felm_t a)
{ // Modular correction, a = a mod (2^127-1)  
    1f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f1e:	46ce      	mov	lr, r9
    1f20:	4647      	mov	r7, r8
    1f22:	b580      	push	{r7, lr}
    1f24:	4681      	mov	r9, r0
    1f26:	0004      	movs	r4, r0
    1f28:	230c      	movs	r3, #12
    1f2a:	4698      	mov	r8, r3
    1f2c:	44c8      	add	r8, r9
    1f2e:	0001      	movs	r1, r0
    digit_t mask;
    unsigned int i;
    unsigned int borrow = 0;
    1f30:	2700      	movs	r7, #0
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
}

static __inline unsigned int is_digit_zero_ct(digit_t x)
{ // Is x = 0?
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    1f32:	3b0b      	subs	r3, #11
    1f34:	469c      	mov	ip, r3
    
    for (i = 0; i < (NWORDS_FIELD-1); i++) {
        SUBC(borrow, a[i], prime1271_0, borrow, a[i]); 
    1f36:	680d      	ldr	r5, [r1, #0]
    1f38:	1c6e      	adds	r6, r5, #1
}

static __inline unsigned int is_digit_lessthan_ct(digit_t x, digit_t y)
{ // Is x < y?
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    1f3a:	43eb      	mvns	r3, r5
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    1f3c:	4333      	orrs	r3, r6
    1f3e:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    1f40:	4662      	mov	r2, ip
    1f42:	4053      	eors	r3, r2
    1f44:	403b      	ands	r3, r7
    1f46:	001a      	movs	r2, r3
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    1f48:	43eb      	mvns	r3, r5
    1f4a:	4333      	orrs	r3, r6
    1f4c:	0fdb      	lsrs	r3, r3, #31
    1f4e:	4313      	orrs	r3, r2
    1f50:	1bf6      	subs	r6, r6, r7
    1f52:	c140      	stmia	r1!, {r6}
    1f54:	001f      	movs	r7, r3
    for (i = 0; i < (NWORDS_FIELD-1); i++) {
    1f56:	4541      	cmp	r1, r8
    1f58:	d1ed      	bne.n	1f36 <mod1271+0x1a>
    }
    SUBC(borrow, a[NWORDS_FIELD-1], prime1271_1, borrow, a[NWORDS_FIELD-1]); 
    1f5a:	464a      	mov	r2, r9
    1f5c:	68d2      	ldr	r2, [r2, #12]
    1f5e:	481b      	ldr	r0, [pc, #108]	; (1fcc <mod1271+0xb0>)
    1f60:	1815      	adds	r5, r2, r0
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    1f62:	481b      	ldr	r0, [pc, #108]	; (1fd0 <mod1271+0xb4>)
    1f64:	1a86      	subs	r6, r0, r2
    1f66:	432e      	orrs	r6, r5
    1f68:	0ff6      	lsrs	r6, r6, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    1f6a:	2701      	movs	r7, #1
    1f6c:	407e      	eors	r6, r7
    1f6e:	401e      	ands	r6, r3
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    1f70:	0007      	movs	r7, r0
    1f72:	4057      	eors	r7, r2
    1f74:	4068      	eors	r0, r5
    1f76:	4307      	orrs	r7, r0
    1f78:	407a      	eors	r2, r7
    1f7a:	0fd2      	lsrs	r2, r2, #31
    1f7c:	4316      	orrs	r6, r2
    1f7e:	46b4      	mov	ip, r6
    1f80:	1aeb      	subs	r3, r5, r3
    1f82:	464a      	mov	r2, r9
    1f84:	60d3      	str	r3, [r2, #12]

    mask = 0 - (digit_t)borrow;    // If result < 0 then mask = 0xFF...F else sign = 0x00...0
    1f86:	4277      	negs	r7, r6
    borrow = 0;
    1f88:	2300      	movs	r3, #0
    for (i = 0; i < (NWORDS_FIELD-1); i++) {
        ADDC(borrow, a[i], mask, borrow, a[i]); 
    1f8a:	6822      	ldr	r2, [r4, #0]
    1f8c:	4690      	mov	r8, r2
    1f8e:	18d2      	adds	r2, r2, r3
    1f90:	4665      	mov	r5, ip
    1f92:	1b56      	subs	r6, r2, r5
    1f94:	c440      	stmia	r4!, {r6}
    1f96:	0015      	movs	r5, r2
    1f98:	405d      	eors	r5, r3
    1f9a:	4640      	mov	r0, r8
    1f9c:	4043      	eors	r3, r0
    1f9e:	431d      	orrs	r5, r3
    1fa0:	4055      	eors	r5, r2
    1fa2:	0013      	movs	r3, r2
    1fa4:	4073      	eors	r3, r6
    1fa6:	407a      	eors	r2, r7
    1fa8:	4313      	orrs	r3, r2
    1faa:	4073      	eors	r3, r6
    1fac:	432b      	orrs	r3, r5
    1fae:	0fdb      	lsrs	r3, r3, #31
    for (i = 0; i < (NWORDS_FIELD-1); i++) {
    1fb0:	428c      	cmp	r4, r1
    1fb2:	d1ea      	bne.n	1f8a <mod1271+0x6e>
    }
    ADDC(borrow, a[NWORDS_FIELD-1], (mask >> 1), borrow, a[NWORDS_FIELD-1]); 
    1fb4:	087f      	lsrs	r7, r7, #1
    1fb6:	464a      	mov	r2, r9
    1fb8:	68d2      	ldr	r2, [r2, #12]
    1fba:	4694      	mov	ip, r2
    1fbc:	4467      	add	r7, ip
    1fbe:	18fb      	adds	r3, r7, r3
    1fc0:	464a      	mov	r2, r9
    1fc2:	60d3      	str	r3, [r2, #12]
}
    1fc4:	bc0c      	pop	{r2, r3}
    1fc6:	4690      	mov	r8, r2
    1fc8:	4699      	mov	r9, r3
    1fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fcc:	80000001 	.word	0x80000001
    1fd0:	7fffffff 	.word	0x7fffffff

00001fd4 <mp_mul>:


void mp_mul(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Schoolbook multiprecision multiply, c = a*b   
    1fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd6:	46de      	mov	lr, fp
    1fd8:	4657      	mov	r7, sl
    1fda:	464e      	mov	r6, r9
    1fdc:	4645      	mov	r5, r8
    1fde:	b5e0      	push	{r5, r6, r7, lr}
    1fe0:	b087      	sub	sp, #28
    1fe2:	9103      	str	r1, [sp, #12]
    1fe4:	4699      	mov	r9, r3
    unsigned int i, j;
    digit_t u, v, UV[2];
    unsigned int carry = 0;

     for (i = 0; i < (2*nwords); i++) c[i] = 0;
    1fe6:	0059      	lsls	r1, r3, #1
    1fe8:	d006      	beq.n	1ff8 <mp_mul+0x24>
    1fea:	0013      	movs	r3, r2
    1fec:	0089      	lsls	r1, r1, #2
    1fee:	1851      	adds	r1, r2, r1
    1ff0:	2400      	movs	r4, #0
    1ff2:	c310      	stmia	r3!, {r4}
    1ff4:	428b      	cmp	r3, r1
    1ff6:	d1fc      	bne.n	1ff2 <mp_mul+0x1e>

     for (i = 0; i < nwords; i++) {
    1ff8:	464b      	mov	r3, r9
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d035      	beq.n	206a <STACK_SIZE+0x6a>
    1ffe:	9201      	str	r2, [sp, #4]
    2000:	4680      	mov	r8, r0
    2002:	009b      	lsls	r3, r3, #2
    2004:	9302      	str	r3, [sp, #8]
    2006:	2300      	movs	r3, #0
    2008:	469b      	mov	fp, r3
          u = 0;
          for (j = 0; j < nwords; j++) {
               MUL(a[i], b[j], UV+1, UV[0]); 
    200a:	4b1b      	ldr	r3, [pc, #108]	; (2078 <STACK_SIZE+0x78>)
    200c:	469a      	mov	sl, r3
    200e:	9f03      	ldr	r7, [sp, #12]
{ // Schoolbook multiprecision multiply, c = a*b   
    2010:	9e01      	ldr	r6, [sp, #4]
    2012:	2400      	movs	r4, #0
    2014:	2500      	movs	r5, #0
               MUL(a[i], b[j], UV+1, UV[0]); 
    2016:	cf02      	ldmia	r7!, {r1}
    2018:	aa04      	add	r2, sp, #16
    201a:	4643      	mov	r3, r8
    201c:	6818      	ldr	r0, [r3, #0]
    201e:	47d0      	blx	sl
               ADDC(0, UV[0], u, carry, v); 
    2020:	9a04      	ldr	r2, [sp, #16]
    2022:	1913      	adds	r3, r2, r4
    2024:	0011      	movs	r1, r2
    2026:	4059      	eors	r1, r3
    2028:	4054      	eors	r4, r2
    202a:	430c      	orrs	r4, r1
    202c:	405c      	eors	r4, r3
    202e:	0fe4      	lsrs	r4, r4, #31
               u = UV[1] + carry;
    2030:	9a05      	ldr	r2, [sp, #20]
    2032:	9200      	str	r2, [sp, #0]
    2034:	18a1      	adds	r1, r4, r2
               ADDC(0, c[i+j], v, carry, v); 
    2036:	6830      	ldr	r0, [r6, #0]
    2038:	181a      	adds	r2, r3, r0
    203a:	4043      	eors	r3, r0
    203c:	001c      	movs	r4, r3
    203e:	4050      	eors	r0, r2
    2040:	4304      	orrs	r4, r0
    2042:	4054      	eors	r4, r2
    2044:	0fe4      	lsrs	r4, r4, #31
               u = u + carry;
    2046:	1864      	adds	r4, r4, r1
               c[i+j] = v;
    2048:	c604      	stmia	r6!, {r2}
          for (j = 0; j < nwords; j++) {
    204a:	3501      	adds	r5, #1
    204c:	45a9      	cmp	r9, r5
    204e:	d1e2      	bne.n	2016 <STACK_SIZE+0x16>
          }
          c[nwords+i] = u;
    2050:	9b01      	ldr	r3, [sp, #4]
    2052:	9a02      	ldr	r2, [sp, #8]
    2054:	509c      	str	r4, [r3, r2]
     for (i = 0; i < nwords; i++) {
    2056:	2201      	movs	r2, #1
    2058:	4694      	mov	ip, r2
    205a:	44e3      	add	fp, ip
    205c:	3304      	adds	r3, #4
    205e:	9301      	str	r3, [sp, #4]
    2060:	2304      	movs	r3, #4
    2062:	469c      	mov	ip, r3
    2064:	44e0      	add	r8, ip
    2066:	455d      	cmp	r5, fp
    2068:	d1d1      	bne.n	200e <STACK_SIZE+0xe>
     }
}
    206a:	b007      	add	sp, #28
    206c:	bc3c      	pop	{r2, r3, r4, r5}
    206e:	4690      	mov	r8, r2
    2070:	4699      	mov	r9, r3
    2072:	46a2      	mov	sl, r4
    2074:	46ab      	mov	fp, r5
    2076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2078:	00001e3d 	.word	0x00001e3d

0000207c <mp_add>:


unsigned int mp_add(digit_t* a, digit_t* b, digit_t* c, unsigned int nwords)
{ // Multiprecision addition, c = a+b, where lng(a) = lng(b) = nwords. Returns the carry bit 
    207c:	b5f0      	push	{r4, r5, r6, r7, lr}
    207e:	46ce      	mov	lr, r9
    2080:	4647      	mov	r7, r8
    2082:	b580      	push	{r7, lr}
    2084:	4688      	mov	r8, r1
    2086:	4691      	mov	r9, r2
    unsigned int i, carry = 0;

    for (i = 0; i < nwords; i++) {
    2088:	2b00      	cmp	r3, #0
    208a:	d01f      	beq.n	20cc <mp_add+0x50>
    208c:	009b      	lsls	r3, r3, #2
    208e:	469c      	mov	ip, r3
    2090:	2700      	movs	r7, #0
    2092:	2400      	movs	r4, #0
        ADDC(carry, a[i], b[i], carry, c[i]);
    2094:	59c5      	ldr	r5, [r0, r7]
    2096:	192e      	adds	r6, r5, r4
    2098:	4643      	mov	r3, r8
    209a:	59d9      	ldr	r1, [r3, r7]
    209c:	1872      	adds	r2, r6, r1
    209e:	464b      	mov	r3, r9
    20a0:	51da      	str	r2, [r3, r7]
    20a2:	0033      	movs	r3, r6
    20a4:	4063      	eors	r3, r4
    20a6:	406c      	eors	r4, r5
    20a8:	4323      	orrs	r3, r4
    20aa:	4073      	eors	r3, r6
    20ac:	0035      	movs	r5, r6
    20ae:	4055      	eors	r5, r2
    20b0:	0034      	movs	r4, r6
    20b2:	404c      	eors	r4, r1
    20b4:	432c      	orrs	r4, r5
    20b6:	4054      	eors	r4, r2
    20b8:	431c      	orrs	r4, r3
    20ba:	0fe4      	lsrs	r4, r4, #31
    20bc:	3704      	adds	r7, #4
    for (i = 0; i < nwords; i++) {
    20be:	4567      	cmp	r7, ip
    20c0:	d1e8      	bne.n	2094 <mp_add+0x18>
    }
    
    return carry;
}
    20c2:	0020      	movs	r0, r4
    20c4:	bc0c      	pop	{r2, r3}
    20c6:	4690      	mov	r8, r2
    20c8:	4699      	mov	r9, r3
    20ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsigned int i, carry = 0;
    20cc:	001c      	movs	r4, r3
    return carry;
    20ce:	e7f8      	b.n	20c2 <mp_add+0x46>

000020d0 <fpexp1251>:


__inline void fpexp1251(felm_t a, felm_t af)
{ // Exponentiation over GF(p), af = a^(125-1)
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20d2:	b095      	sub	sp, #84	; 0x54
    20d4:	0005      	movs	r5, r0
    20d6:	000e      	movs	r6, r1
	int i;
	felm_t t1, t2, t3, t4, t5;

	fpsqr1271(a, t2);
    20d8:	a90c      	add	r1, sp, #48	; 0x30
    20da:	4c48      	ldr	r4, [pc, #288]	; (21fc <fpexp1251+0x12c>)
    20dc:	47a0      	blx	r4
	fpmul1271(a, t2, t2);
    20de:	aa0c      	add	r2, sp, #48	; 0x30
    20e0:	0011      	movs	r1, r2
    20e2:	0028      	movs	r0, r5
    20e4:	4f46      	ldr	r7, [pc, #280]	; (2200 <fpexp1251+0x130>)
    20e6:	47b8      	blx	r7
	fpsqr1271(t2, t3);
    20e8:	a908      	add	r1, sp, #32
    20ea:	a80c      	add	r0, sp, #48	; 0x30
    20ec:	47a0      	blx	r4
	fpsqr1271(t3, t3);
    20ee:	a908      	add	r1, sp, #32
    20f0:	0008      	movs	r0, r1
    20f2:	47a0      	blx	r4
	fpmul1271(t2, t3, t3);
    20f4:	aa08      	add	r2, sp, #32
    20f6:	0011      	movs	r1, r2
    20f8:	a80c      	add	r0, sp, #48	; 0x30
    20fa:	47b8      	blx	r7
	fpsqr1271(t3, t4);
    20fc:	a904      	add	r1, sp, #16
    20fe:	a808      	add	r0, sp, #32
    2100:	47a0      	blx	r4
	fpsqr1271(t4, t4);
    2102:	a904      	add	r1, sp, #16
    2104:	0008      	movs	r0, r1
    2106:	47a0      	blx	r4
	fpsqr1271(t4, t4);
    2108:	a904      	add	r1, sp, #16
    210a:	0008      	movs	r0, r1
    210c:	47a0      	blx	r4
	fpsqr1271(t4, t4);
    210e:	a904      	add	r1, sp, #16
    2110:	0008      	movs	r0, r1
    2112:	47a0      	blx	r4
	fpmul1271(t3, t4, t4);
    2114:	aa04      	add	r2, sp, #16
    2116:	0011      	movs	r1, r2
    2118:	a808      	add	r0, sp, #32
    211a:	47b8      	blx	r7
	fpsqr1271(t4, t5);
    211c:	4669      	mov	r1, sp
    211e:	a804      	add	r0, sp, #16
    2120:	47a0      	blx	r4
    2122:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) fpsqr1271(t5, t5);
    2124:	4f35      	ldr	r7, [pc, #212]	; (21fc <fpexp1251+0x12c>)
    2126:	4669      	mov	r1, sp
    2128:	4668      	mov	r0, sp
    212a:	47b8      	blx	r7
    212c:	3c01      	subs	r4, #1
    212e:	2c00      	cmp	r4, #0
    2130:	d1f9      	bne.n	2126 <fpexp1251+0x56>
	fpmul1271(t4, t5, t5);
    2132:	466a      	mov	r2, sp
    2134:	4669      	mov	r1, sp
    2136:	a804      	add	r0, sp, #16
    2138:	4b31      	ldr	r3, [pc, #196]	; (2200 <fpexp1251+0x130>)
    213a:	4798      	blx	r3
	fpsqr1271(t5, t2);
    213c:	a90c      	add	r1, sp, #48	; 0x30
    213e:	4668      	mov	r0, sp
    2140:	4b2e      	ldr	r3, [pc, #184]	; (21fc <fpexp1251+0x12c>)
    2142:	4798      	blx	r3
    2144:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) fpsqr1271(t2, t2);
    2146:	4f2d      	ldr	r7, [pc, #180]	; (21fc <fpexp1251+0x12c>)
    2148:	a90c      	add	r1, sp, #48	; 0x30
    214a:	0008      	movs	r0, r1
    214c:	47b8      	blx	r7
    214e:	3c01      	subs	r4, #1
    2150:	2c00      	cmp	r4, #0
    2152:	d1f9      	bne.n	2148 <fpexp1251+0x78>
	fpmul1271(t5, t2, t2);
    2154:	aa0c      	add	r2, sp, #48	; 0x30
    2156:	0011      	movs	r1, r2
    2158:	4668      	mov	r0, sp
    215a:	4b29      	ldr	r3, [pc, #164]	; (2200 <fpexp1251+0x130>)
    215c:	4798      	blx	r3
	fpsqr1271(t2, t1);
    215e:	a910      	add	r1, sp, #64	; 0x40
    2160:	a80c      	add	r0, sp, #48	; 0x30
    2162:	4b26      	ldr	r3, [pc, #152]	; (21fc <fpexp1251+0x12c>)
    2164:	4798      	blx	r3
    2166:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) fpsqr1271(t1, t1);
    2168:	4f24      	ldr	r7, [pc, #144]	; (21fc <fpexp1251+0x12c>)
    216a:	a910      	add	r1, sp, #64	; 0x40
    216c:	0008      	movs	r0, r1
    216e:	47b8      	blx	r7
    2170:	3c01      	subs	r4, #1
    2172:	2c00      	cmp	r4, #0
    2174:	d1f9      	bne.n	216a <fpexp1251+0x9a>
	fpmul1271(t2, t1, t1);
    2176:	aa10      	add	r2, sp, #64	; 0x40
    2178:	0011      	movs	r1, r2
    217a:	a80c      	add	r0, sp, #48	; 0x30
    217c:	4b20      	ldr	r3, [pc, #128]	; (2200 <fpexp1251+0x130>)
    217e:	4798      	blx	r3
    2180:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) fpsqr1271(t1, t1);
    2182:	4f1e      	ldr	r7, [pc, #120]	; (21fc <fpexp1251+0x12c>)
    2184:	a910      	add	r1, sp, #64	; 0x40
    2186:	0008      	movs	r0, r1
    2188:	47b8      	blx	r7
    218a:	3c01      	subs	r4, #1
    218c:	2c00      	cmp	r4, #0
    218e:	d1f9      	bne.n	2184 <fpexp1251+0xb4>
	fpmul1271(t1, t2, t1);
    2190:	aa10      	add	r2, sp, #64	; 0x40
    2192:	a90c      	add	r1, sp, #48	; 0x30
    2194:	0010      	movs	r0, r2
    2196:	4b1a      	ldr	r3, [pc, #104]	; (2200 <fpexp1251+0x130>)
    2198:	4798      	blx	r3
    219a:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) fpsqr1271(t1, t1);
    219c:	4f17      	ldr	r7, [pc, #92]	; (21fc <fpexp1251+0x12c>)
    219e:	a910      	add	r1, sp, #64	; 0x40
    21a0:	0008      	movs	r0, r1
    21a2:	47b8      	blx	r7
    21a4:	3c01      	subs	r4, #1
    21a6:	2c00      	cmp	r4, #0
    21a8:	d1f9      	bne.n	219e <fpexp1251+0xce>
	fpmul1271(t5, t1, t1);
    21aa:	aa10      	add	r2, sp, #64	; 0x40
    21ac:	0011      	movs	r1, r2
    21ae:	4668      	mov	r0, sp
    21b0:	4b13      	ldr	r3, [pc, #76]	; (2200 <fpexp1251+0x130>)
    21b2:	4798      	blx	r3
    21b4:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) fpsqr1271(t1, t1);
    21b6:	4f11      	ldr	r7, [pc, #68]	; (21fc <fpexp1251+0x12c>)
    21b8:	a910      	add	r1, sp, #64	; 0x40
    21ba:	0008      	movs	r0, r1
    21bc:	47b8      	blx	r7
    21be:	3c01      	subs	r4, #1
    21c0:	2c00      	cmp	r4, #0
    21c2:	d1f9      	bne.n	21b8 <fpexp1251+0xe8>
	fpmul1271(t4, t1, t1);
    21c4:	aa10      	add	r2, sp, #64	; 0x40
    21c6:	0011      	movs	r1, r2
    21c8:	a804      	add	r0, sp, #16
    21ca:	4b0d      	ldr	r3, [pc, #52]	; (2200 <fpexp1251+0x130>)
    21cc:	4798      	blx	r3
    21ce:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) fpsqr1271(t1, t1);
    21d0:	4f0a      	ldr	r7, [pc, #40]	; (21fc <fpexp1251+0x12c>)
    21d2:	a910      	add	r1, sp, #64	; 0x40
    21d4:	0008      	movs	r0, r1
    21d6:	47b8      	blx	r7
    21d8:	3c01      	subs	r4, #1
    21da:	2c00      	cmp	r4, #0
    21dc:	d1f9      	bne.n	21d2 <fpexp1251+0x102>
	fpmul1271(t3, t1, t1);
    21de:	aa10      	add	r2, sp, #64	; 0x40
    21e0:	0011      	movs	r1, r2
    21e2:	a808      	add	r0, sp, #32
    21e4:	4c06      	ldr	r4, [pc, #24]	; (2200 <fpexp1251+0x130>)
    21e6:	47a0      	blx	r4
	fpsqr1271(t1, t1);
    21e8:	a910      	add	r1, sp, #64	; 0x40
    21ea:	0008      	movs	r0, r1
    21ec:	4b03      	ldr	r3, [pc, #12]	; (21fc <fpexp1251+0x12c>)
    21ee:	4798      	blx	r3
	fpmul1271(a, t1, af);
    21f0:	0032      	movs	r2, r6
    21f2:	a910      	add	r1, sp, #64	; 0x40
    21f4:	0028      	movs	r0, r5
    21f6:	47a0      	blx	r4
}
    21f8:	b015      	add	sp, #84	; 0x54
    21fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21fc:	00001f0d 	.word	0x00001f0d
    2200:	00001ed5 	.word	0x00001ed5

00002204 <fpinv1271>:


void fpinv1271(felm_t a)
{ // Field inversion, af = a^-1 = a^(p-2) mod p
    2204:	b570      	push	{r4, r5, r6, lr}
    2206:	b098      	sub	sp, #96	; 0x60
    2208:	0005      	movs	r5, r0
	fpsqr1271(a, t2);
    220a:	a904      	add	r1, sp, #16
    220c:	4c4d      	ldr	r4, [pc, #308]	; (2344 <fpinv1271+0x140>)
    220e:	47a0      	blx	r4
	fpmul1271(a, t2, t2);
    2210:	aa04      	add	r2, sp, #16
    2212:	0011      	movs	r1, r2
    2214:	0028      	movs	r0, r5
    2216:	4e4c      	ldr	r6, [pc, #304]	; (2348 <fpinv1271+0x144>)
    2218:	47b0      	blx	r6
	fpsqr1271(t2, t3);
    221a:	a908      	add	r1, sp, #32
    221c:	a804      	add	r0, sp, #16
    221e:	47a0      	blx	r4
	fpsqr1271(t3, t3);
    2220:	a908      	add	r1, sp, #32
    2222:	0008      	movs	r0, r1
    2224:	47a0      	blx	r4
	fpmul1271(t2, t3, t3);
    2226:	aa08      	add	r2, sp, #32
    2228:	0011      	movs	r1, r2
    222a:	a804      	add	r0, sp, #16
    222c:	47b0      	blx	r6
	fpsqr1271(t3, t4);
    222e:	a90c      	add	r1, sp, #48	; 0x30
    2230:	a808      	add	r0, sp, #32
    2232:	47a0      	blx	r4
	fpsqr1271(t4, t4);
    2234:	a90c      	add	r1, sp, #48	; 0x30
    2236:	0008      	movs	r0, r1
    2238:	47a0      	blx	r4
	fpsqr1271(t4, t4);
    223a:	a90c      	add	r1, sp, #48	; 0x30
    223c:	0008      	movs	r0, r1
    223e:	47a0      	blx	r4
	fpsqr1271(t4, t4);
    2240:	a90c      	add	r1, sp, #48	; 0x30
    2242:	0008      	movs	r0, r1
    2244:	47a0      	blx	r4
	fpmul1271(t3, t4, t4);
    2246:	aa0c      	add	r2, sp, #48	; 0x30
    2248:	0011      	movs	r1, r2
    224a:	a808      	add	r0, sp, #32
    224c:	47b0      	blx	r6
	fpsqr1271(t4, t5);
    224e:	a910      	add	r1, sp, #64	; 0x40
    2250:	a80c      	add	r0, sp, #48	; 0x30
    2252:	47a0      	blx	r4
    2254:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) fpsqr1271(t5, t5);
    2256:	4e3b      	ldr	r6, [pc, #236]	; (2344 <fpinv1271+0x140>)
    2258:	a910      	add	r1, sp, #64	; 0x40
    225a:	0008      	movs	r0, r1
    225c:	47b0      	blx	r6
    225e:	3c01      	subs	r4, #1
    2260:	2c00      	cmp	r4, #0
    2262:	d1f9      	bne.n	2258 <fpinv1271+0x54>
	fpmul1271(t4, t5, t5);
    2264:	aa10      	add	r2, sp, #64	; 0x40
    2266:	0011      	movs	r1, r2
    2268:	a80c      	add	r0, sp, #48	; 0x30
    226a:	4b37      	ldr	r3, [pc, #220]	; (2348 <fpinv1271+0x144>)
    226c:	4798      	blx	r3
	fpsqr1271(t5, t2);
    226e:	a904      	add	r1, sp, #16
    2270:	a810      	add	r0, sp, #64	; 0x40
    2272:	4b34      	ldr	r3, [pc, #208]	; (2344 <fpinv1271+0x140>)
    2274:	4798      	blx	r3
    2276:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) fpsqr1271(t2, t2);
    2278:	4e32      	ldr	r6, [pc, #200]	; (2344 <fpinv1271+0x140>)
    227a:	a904      	add	r1, sp, #16
    227c:	0008      	movs	r0, r1
    227e:	47b0      	blx	r6
    2280:	3c01      	subs	r4, #1
    2282:	2c00      	cmp	r4, #0
    2284:	d1f9      	bne.n	227a <fpinv1271+0x76>
	fpmul1271(t5, t2, t2);
    2286:	aa04      	add	r2, sp, #16
    2288:	0011      	movs	r1, r2
    228a:	a810      	add	r0, sp, #64	; 0x40
    228c:	4b2e      	ldr	r3, [pc, #184]	; (2348 <fpinv1271+0x144>)
    228e:	4798      	blx	r3
	fpsqr1271(t2, t1);
    2290:	4669      	mov	r1, sp
    2292:	a804      	add	r0, sp, #16
    2294:	4b2b      	ldr	r3, [pc, #172]	; (2344 <fpinv1271+0x140>)
    2296:	4798      	blx	r3
    2298:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) fpsqr1271(t1, t1);
    229a:	4e2a      	ldr	r6, [pc, #168]	; (2344 <fpinv1271+0x140>)
    229c:	4669      	mov	r1, sp
    229e:	4668      	mov	r0, sp
    22a0:	47b0      	blx	r6
    22a2:	3c01      	subs	r4, #1
    22a4:	2c00      	cmp	r4, #0
    22a6:	d1f9      	bne.n	229c <fpinv1271+0x98>
	fpmul1271(t2, t1, t1);
    22a8:	466a      	mov	r2, sp
    22aa:	4669      	mov	r1, sp
    22ac:	a804      	add	r0, sp, #16
    22ae:	4b26      	ldr	r3, [pc, #152]	; (2348 <fpinv1271+0x144>)
    22b0:	4798      	blx	r3
    22b2:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) fpsqr1271(t1, t1);
    22b4:	4e23      	ldr	r6, [pc, #140]	; (2344 <fpinv1271+0x140>)
    22b6:	4669      	mov	r1, sp
    22b8:	4668      	mov	r0, sp
    22ba:	47b0      	blx	r6
    22bc:	3c01      	subs	r4, #1
    22be:	2c00      	cmp	r4, #0
    22c0:	d1f9      	bne.n	22b6 <fpinv1271+0xb2>
	fpmul1271(t1, t2, t1);
    22c2:	466a      	mov	r2, sp
    22c4:	a904      	add	r1, sp, #16
    22c6:	4668      	mov	r0, sp
    22c8:	4b1f      	ldr	r3, [pc, #124]	; (2348 <fpinv1271+0x144>)
    22ca:	4798      	blx	r3
    22cc:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) fpsqr1271(t1, t1);
    22ce:	4e1d      	ldr	r6, [pc, #116]	; (2344 <fpinv1271+0x140>)
    22d0:	4669      	mov	r1, sp
    22d2:	4668      	mov	r0, sp
    22d4:	47b0      	blx	r6
    22d6:	3c01      	subs	r4, #1
    22d8:	2c00      	cmp	r4, #0
    22da:	d1f9      	bne.n	22d0 <fpinv1271+0xcc>
	fpmul1271(t5, t1, t1);
    22dc:	466a      	mov	r2, sp
    22de:	4669      	mov	r1, sp
    22e0:	a810      	add	r0, sp, #64	; 0x40
    22e2:	4b19      	ldr	r3, [pc, #100]	; (2348 <fpinv1271+0x144>)
    22e4:	4798      	blx	r3
    22e6:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) fpsqr1271(t1, t1);
    22e8:	4e16      	ldr	r6, [pc, #88]	; (2344 <fpinv1271+0x140>)
    22ea:	4669      	mov	r1, sp
    22ec:	4668      	mov	r0, sp
    22ee:	47b0      	blx	r6
    22f0:	3c01      	subs	r4, #1
    22f2:	2c00      	cmp	r4, #0
    22f4:	d1f9      	bne.n	22ea <fpinv1271+0xe6>
	fpmul1271(t4, t1, t1);
    22f6:	466a      	mov	r2, sp
    22f8:	4669      	mov	r1, sp
    22fa:	a80c      	add	r0, sp, #48	; 0x30
    22fc:	4b12      	ldr	r3, [pc, #72]	; (2348 <fpinv1271+0x144>)
    22fe:	4798      	blx	r3
    2300:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) fpsqr1271(t1, t1);
    2302:	4e10      	ldr	r6, [pc, #64]	; (2344 <fpinv1271+0x140>)
    2304:	4669      	mov	r1, sp
    2306:	4668      	mov	r0, sp
    2308:	47b0      	blx	r6
    230a:	3c01      	subs	r4, #1
    230c:	2c00      	cmp	r4, #0
    230e:	d1f9      	bne.n	2304 <fpinv1271+0x100>
	fpmul1271(t3, t1, t1);
    2310:	466a      	mov	r2, sp
    2312:	4669      	mov	r1, sp
    2314:	a808      	add	r0, sp, #32
    2316:	4c0c      	ldr	r4, [pc, #48]	; (2348 <fpinv1271+0x144>)
    2318:	47a0      	blx	r4
	fpsqr1271(t1, t1);
    231a:	4669      	mov	r1, sp
    231c:	4668      	mov	r0, sp
    231e:	4e09      	ldr	r6, [pc, #36]	; (2344 <fpinv1271+0x140>)
    2320:	47b0      	blx	r6
	fpmul1271(a, t1, af);
    2322:	aa14      	add	r2, sp, #80	; 0x50
    2324:	4669      	mov	r1, sp
    2326:	0028      	movs	r0, r5
    2328:	47a0      	blx	r4
  // Hardcoded for p = 2^127-1
	felm_t t;

	fpexp1251(a, t);
	fpsqr1271(t, t);
    232a:	a914      	add	r1, sp, #80	; 0x50
    232c:	0008      	movs	r0, r1
    232e:	47b0      	blx	r6
	fpsqr1271(t, t);
    2330:	a914      	add	r1, sp, #80	; 0x50
    2332:	0008      	movs	r0, r1
    2334:	47b0      	blx	r6
	fpmul1271(a, t, a);
    2336:	002a      	movs	r2, r5
    2338:	a914      	add	r1, sp, #80	; 0x50
    233a:	0028      	movs	r0, r5
    233c:	47a0      	blx	r4
}
    233e:	b018      	add	sp, #96	; 0x60
    2340:	bd70      	pop	{r4, r5, r6, pc}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	00001f0d 	.word	0x00001f0d
    2348:	00001ed5 	.word	0x00001ed5

0000234c <subtract>:
    return mp_add((digit_t*)a, (digit_t*)b, c, (unsigned int)nwords);
}


unsigned int subtract(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Multiprecision subtraction, c = a-b, where lng(a) = lng(b) = nwords. Returns the borrow bit 
    234c:	b5f0      	push	{r4, r5, r6, r7, lr}
    234e:	46d6      	mov	lr, sl
    2350:	464f      	mov	r7, r9
    2352:	4646      	mov	r6, r8
    2354:	b5c0      	push	{r6, r7, lr}
    2356:	4684      	mov	ip, r0
    2358:	4691      	mov	r9, r2
    unsigned int i;
    unsigned int borrow = 0;

    for (i = 0; i < nwords; i++) {
    235a:	2b00      	cmp	r3, #0
    235c:	d022      	beq.n	23a4 <subtract+0x58>
    235e:	009b      	lsls	r3, r3, #2
    2360:	4698      	mov	r8, r3
    2362:	2600      	movs	r6, #0
    2364:	2200      	movs	r2, #0
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    2366:	2301      	movs	r3, #1
    2368:	469a      	mov	sl, r3
        SUBC(borrow, a[i], b[i], borrow, c[i]);
    236a:	4663      	mov	r3, ip
    236c:	599b      	ldr	r3, [r3, r6]
    236e:	598f      	ldr	r7, [r1, r6]
    2370:	1bdd      	subs	r5, r3, r7
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    2372:	426c      	negs	r4, r5
    2374:	432c      	orrs	r4, r5
    2376:	0fe4      	lsrs	r4, r4, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    2378:	4650      	mov	r0, sl
    237a:	4044      	eors	r4, r0
    237c:	4014      	ands	r4, r2
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    237e:	0018      	movs	r0, r3
    2380:	4078      	eors	r0, r7
    2382:	406f      	eors	r7, r5
    2384:	4338      	orrs	r0, r7
    2386:	4058      	eors	r0, r3
    2388:	0fc0      	lsrs	r0, r0, #31
    238a:	4320      	orrs	r0, r4
    238c:	1aad      	subs	r5, r5, r2
    238e:	464b      	mov	r3, r9
    2390:	519d      	str	r5, [r3, r6]
    2392:	3604      	adds	r6, #4
    2394:	0002      	movs	r2, r0
    for (i = 0; i < nwords; i++) {
    2396:	4546      	cmp	r6, r8
    2398:	d1e7      	bne.n	236a <subtract+0x1e>
    }

    return borrow;
}
    239a:	bc1c      	pop	{r2, r3, r4}
    239c:	4690      	mov	r8, r2
    239e:	4699      	mov	r9, r3
    23a0:	46a2      	mov	sl, r4
    23a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsigned int borrow = 0;
    23a4:	2000      	movs	r0, #0
    return borrow;
    23a6:	e7f8      	b.n	239a <subtract+0x4e>

000023a8 <Montgomery_multiply_mod_order>:
	subtract_mod_order(c, (digit_t*)&curve_order, c);  // if c >= order then c = c - order
}


void Montgomery_multiply_mod_order(const digit_t* ma, const digit_t* mb, digit_t* mc)
{ // 256-bit Montgomery multiplication modulo the curve order, mc = ma*mb*r' mod order, where ma,mb,mc in [0, order-1]
    23a8:	b570      	push	{r4, r5, r6, lr}
    23aa:	b0b0      	sub	sp, #192	; 0xc0
    23ac:	0014      	movs	r4, r2
    mp_mul(a, b, c, NWORDS_ORDER);
    23ae:	2308      	movs	r3, #8
    23b0:	aa20      	add	r2, sp, #128	; 0x80
    23b2:	4d19      	ldr	r5, [pc, #100]	; (2418 <Montgomery_multiply_mod_order+0x70>)
    23b4:	47a8      	blx	r5
    23b6:	2308      	movs	r3, #8
    23b8:	aa10      	add	r2, sp, #64	; 0x40
    23ba:	4918      	ldr	r1, [pc, #96]	; (241c <Montgomery_multiply_mod_order+0x74>)
    23bc:	a820      	add	r0, sp, #128	; 0x80
    23be:	47a8      	blx	r5
    23c0:	2308      	movs	r3, #8
    23c2:	466a      	mov	r2, sp
    23c4:	4916      	ldr	r1, [pc, #88]	; (2420 <Montgomery_multiply_mod_order+0x78>)
    23c6:	a810      	add	r0, sp, #64	; 0x40
    23c8:	47a8      	blx	r5
    return mp_add((digit_t*)a, (digit_t*)b, c, (unsigned int)nwords);
    23ca:	2310      	movs	r3, #16
    23cc:	466a      	mov	r2, sp
    23ce:	4669      	mov	r1, sp
    23d0:	a820      	add	r0, sp, #128	; 0x80
    23d2:	4d14      	ldr	r5, [pc, #80]	; (2424 <Montgomery_multiply_mod_order+0x7c>)
    23d4:	47a8      	blx	r5
    23d6:	0005      	movs	r5, r0
    23d8:	2300      	movs	r3, #0
	multiply(P, (digit_t*)&Montgomery_rprime, Q);      // Q = P * r' mod 2^(log_2(r))
	multiply(Q, (digit_t*)&curve_order, temp);         // temp = Q * r
	cout = add(P, temp, temp, 2*NWORDS_ORDER);         // (cout, temp) = P + Q * r     

	for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
		mc[i] = temp[NWORDS_ORDER + i];
    23da:	001a      	movs	r2, r3
    23dc:	446a      	add	r2, sp
    23de:	6a12      	ldr	r2, [r2, #32]
    23e0:	50e2      	str	r2, [r4, r3]
    23e2:	3304      	adds	r3, #4
	for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
    23e4:	2b20      	cmp	r3, #32
    23e6:	d1f8      	bne.n	23da <Montgomery_multiply_mod_order+0x32>
	}

	// Final, constant-time subtraction
	bout = subtract(mc, (digit_t*)&curve_order, mc, NWORDS_ORDER);    // (cout, mc) = (cout, mc) - r
    23e8:	3b18      	subs	r3, #24
    23ea:	0022      	movs	r2, r4
    23ec:	490c      	ldr	r1, [pc, #48]	; (2420 <Montgomery_multiply_mod_order+0x78>)
    23ee:	0020      	movs	r0, r4
    23f0:	4e0d      	ldr	r6, [pc, #52]	; (2428 <Montgomery_multiply_mod_order+0x80>)
    23f2:	47b0      	blx	r6
	mask = (digit_t)cout - (digit_t)bout;              // if (cout, mc) >= 0 then mask = 0x00..0, else if (cout, mc) < 0 then mask = 0xFF..F
    23f4:	1a28      	subs	r0, r5, r0
    23f6:	2300      	movs	r3, #0

	for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
		temp[i] = (order[i] & mask);
    23f8:	4909      	ldr	r1, [pc, #36]	; (2420 <Montgomery_multiply_mod_order+0x78>)
    23fa:	585a      	ldr	r2, [r3, r1]
    23fc:	4002      	ands	r2, r0
    23fe:	466d      	mov	r5, sp
    2400:	515a      	str	r2, [r3, r5]
    2402:	3304      	adds	r3, #4
	for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
    2404:	2b20      	cmp	r3, #32
    2406:	d1f8      	bne.n	23fa <Montgomery_multiply_mod_order+0x52>
    return mp_add((digit_t*)a, (digit_t*)b, c, (unsigned int)nwords);
    2408:	3b18      	subs	r3, #24
    240a:	0022      	movs	r2, r4
    240c:	4669      	mov	r1, sp
    240e:	0020      	movs	r0, r4
    2410:	4c04      	ldr	r4, [pc, #16]	; (2424 <Montgomery_multiply_mod_order+0x7c>)
    2412:	47a0      	blx	r4
	}
	add(mc, temp, mc, NWORDS_ORDER);                   //  mc = mc + (mask & r)

	return;
}
    2414:	b030      	add	sp, #192	; 0xc0
    2416:	bd70      	pop	{r4, r5, r6, pc}
    2418:	00001fd5 	.word	0x00001fd5
    241c:	00008448 	.word	0x00008448
    2420:	00008488 	.word	0x00008488
    2424:	0000207d 	.word	0x0000207d
    2428:	0000234d 	.word	0x0000234d

0000242c <modulo_order>:


void modulo_order(digit_t* a, digit_t* c)
{ // Reduction modulo the order using Montgomery arithmetic
    242c:	b530      	push	{r4, r5, lr}
    242e:	b091      	sub	sp, #68	; 0x44
    2430:	0004      	movs	r4, r0
    2432:	000d      	movs	r5, r1
  // ma = a*Montgomery_Rprime mod r, where a,ma in [0, r-1], a,ma,r < 2^256
  // c = ma*1*Montgomery_Rprime^(-1) mod r, where ma,c in [0, r-1], ma,c,r < 2^256
	digit_t ma[NWORDS_ORDER], one[NWORDS_ORDER] = {0};
    2434:	2220      	movs	r2, #32
    2436:	2100      	movs	r1, #0
    2438:	4668      	mov	r0, sp
    243a:	4b07      	ldr	r3, [pc, #28]	; (2458 <modulo_order+0x2c>)
    243c:	4798      	blx	r3

	one[0] = 1;
    243e:	2301      	movs	r3, #1
    2440:	9300      	str	r3, [sp, #0]
	Montgomery_multiply_mod_order(a, (digit_t*)&Montgomery_Rprime, ma);
    2442:	aa08      	add	r2, sp, #32
    2444:	4905      	ldr	r1, [pc, #20]	; (245c <modulo_order+0x30>)
    2446:	0020      	movs	r0, r4
    2448:	4c05      	ldr	r4, [pc, #20]	; (2460 <modulo_order+0x34>)
    244a:	47a0      	blx	r4
	Montgomery_multiply_mod_order(ma, one, c);
    244c:	002a      	movs	r2, r5
    244e:	4669      	mov	r1, sp
    2450:	a808      	add	r0, sp, #32
    2452:	47a0      	blx	r4
}
    2454:	b011      	add	sp, #68	; 0x44
    2456:	bd30      	pop	{r4, r5, pc}
    2458:	000054a3 	.word	0x000054a3
    245c:	00008428 	.word	0x00008428
    2460:	000023a9 	.word	0x000023a9

00002464 <conversion_to_odd>:


void conversion_to_odd(digit_t* k, digit_t* k_odd)
{// Convert scalar to odd if even using the prime subgroup order r
    2464:	b5f0      	push	{r4, r5, r6, r7, lr}
    2466:	46d6      	mov	lr, sl
    2468:	464f      	mov	r7, r9
    246a:	4646      	mov	r6, r8
    246c:	b5c0      	push	{r6, r7, lr}
    246e:	4689      	mov	r9, r1
	digit_t i, mask;
	digit_t* order = (digit_t*)curve_order;
	unsigned int carry = 0;

	mask = ~(0 - (k[0] & 1));
    2470:	2601      	movs	r6, #1
    2472:	6803      	ldr	r3, [r0, #0]
    2474:	401e      	ands	r6, r3
    2476:	1e73      	subs	r3, r6, #1
    2478:	469c      	mov	ip, r3
    247a:	2500      	movs	r5, #0
	unsigned int carry = 0;
    247c:	2300      	movs	r3, #0

	for (i = 0; i < NWORDS_ORDER; i++) {  // If (k is odd) then k_odd = k else k_odd = k + r 
		ADDC(carry, order[i] & mask, k[i], carry, k_odd[i]);
    247e:	4a11      	ldr	r2, [pc, #68]	; (24c4 <conversion_to_odd+0x60>)
    2480:	4692      	mov	sl, r2
    2482:	4652      	mov	r2, sl
    2484:	58aa      	ldr	r2, [r5, r2]
    2486:	4661      	mov	r1, ip
    2488:	400a      	ands	r2, r1
    248a:	18d4      	adds	r4, r2, r3
    248c:	5946      	ldr	r6, [r0, r5]
    248e:	19a1      	adds	r1, r4, r6
    2490:	464f      	mov	r7, r9
    2492:	5179      	str	r1, [r7, r5]
    2494:	0027      	movs	r7, r4
    2496:	405f      	eors	r7, r3
    2498:	405a      	eors	r2, r3
    249a:	433a      	orrs	r2, r7
    249c:	4062      	eors	r2, r4
    249e:	4690      	mov	r8, r2
    24a0:	0022      	movs	r2, r4
    24a2:	404a      	eors	r2, r1
    24a4:	0023      	movs	r3, r4
    24a6:	4073      	eors	r3, r6
    24a8:	4313      	orrs	r3, r2
    24aa:	404b      	eors	r3, r1
    24ac:	4642      	mov	r2, r8
    24ae:	4313      	orrs	r3, r2
    24b0:	0fdb      	lsrs	r3, r3, #31
    24b2:	3504      	adds	r5, #4
	for (i = 0; i < NWORDS_ORDER; i++) {  // If (k is odd) then k_odd = k else k_odd = k + r 
    24b4:	2d20      	cmp	r5, #32
    24b6:	d1e4      	bne.n	2482 <conversion_to_odd+0x1e>
	}
}
    24b8:	bc1c      	pop	{r2, r3, r4}
    24ba:	4690      	mov	r8, r2
    24bc:	4699      	mov	r9, r3
    24be:	46a2      	mov	sl, r4
    24c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24c2:	46c0      	nop			; (mov r8, r8)
    24c4:	00008488 	.word	0x00008488

000024c8 <fpdiv1271>:


__inline void fpdiv1271(felm_t a)
{ // Field division by two, c = a/2 mod p
    24c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ca:	46d6      	mov	lr, sl
    24cc:	464f      	mov	r7, r9
    24ce:	4646      	mov	r6, r8
    24d0:	b5c0      	push	{r6, r7, lr}
    digit_t mask;
    unsigned int carry = 0;
    unsigned int i;

    mask = 0 - (a[0] & 1);  // if a is odd then mask = 0xFF...FF, else mask = 0
    24d2:	2601      	movs	r6, #1
    24d4:	6803      	ldr	r3, [r0, #0]
    24d6:	401e      	ands	r6, r3
    24d8:	46b2      	mov	sl, r6
    24da:	4273      	negs	r3, r6
    24dc:	4699      	mov	r9, r3
    24de:	0001      	movs	r1, r0
    24e0:	230c      	movs	r3, #12
    24e2:	4698      	mov	r8, r3
    24e4:	4480      	add	r8, r0
    24e6:	0004      	movs	r4, r0
    unsigned int carry = 0;
    24e8:	2700      	movs	r7, #0
    
    for (i = 0; i < (NWORDS_FIELD-1); i++) {
        ADDC(carry, mask, a[i], carry, a[i]);
    24ea:	4653      	mov	r3, sl
    24ec:	1afa      	subs	r2, r7, r3
    24ee:	6823      	ldr	r3, [r4, #0]
    24f0:	18d5      	adds	r5, r2, r3
    24f2:	c420      	stmia	r4!, {r5}
    24f4:	0016      	movs	r6, r2
    24f6:	407e      	eors	r6, r7
    24f8:	46b4      	mov	ip, r6
    24fa:	464e      	mov	r6, r9
    24fc:	4077      	eors	r7, r6
    24fe:	4666      	mov	r6, ip
    2500:	4337      	orrs	r7, r6
    2502:	4057      	eors	r7, r2
    2504:	4053      	eors	r3, r2
    2506:	406a      	eors	r2, r5
    2508:	4313      	orrs	r3, r2
    250a:	406b      	eors	r3, r5
    250c:	433b      	orrs	r3, r7
    250e:	0fdf      	lsrs	r7, r3, #31
    for (i = 0; i < (NWORDS_FIELD-1); i++) {
    2510:	4544      	cmp	r4, r8
    2512:	d1ea      	bne.n	24ea <fpdiv1271+0x22>
    }
    ADDC(carry, (mask >> 1), a[NWORDS_FIELD-1], carry, a[NWORDS_FIELD-1]);
    2514:	464b      	mov	r3, r9
    2516:	085b      	lsrs	r3, r3, #1
    2518:	68c2      	ldr	r2, [r0, #12]
    251a:	4694      	mov	ip, r2
    251c:	4463      	add	r3, ip
    251e:	19db      	adds	r3, r3, r7
    2520:	60c3      	str	r3, [r0, #12]

    for (i = 0; i < (NWORDS_FIELD-1); i++) {
        SHIFTR(a[i+1], a[i], 1, a[i], RADIX);
    2522:	680b      	ldr	r3, [r1, #0]
    2524:	085b      	lsrs	r3, r3, #1
    2526:	684a      	ldr	r2, [r1, #4]
    2528:	07d2      	lsls	r2, r2, #31
    252a:	4053      	eors	r3, r2
    252c:	c108      	stmia	r1!, {r3}
    for (i = 0; i < (NWORDS_FIELD-1); i++) {
    252e:	42a1      	cmp	r1, r4
    2530:	d1f7      	bne.n	2522 <fpdiv1271+0x5a>
    }
    a[NWORDS_FIELD-1] = (a[NWORDS_FIELD-1] >> 1);
    2532:	68c3      	ldr	r3, [r0, #12]
    2534:	085b      	lsrs	r3, r3, #1
    2536:	60c3      	str	r3, [r0, #12]
}
    2538:	bc1c      	pop	{r2, r3, r4}
    253a:	4690      	mov	r8, r2
    253c:	4699      	mov	r9, r3
    253e:	46a2      	mov	sl, r4
    2540:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002542 <fp2div1271>:


void fp2div1271(f2elm_t a)
{ // GF(p^2) division by two c = a/2 mod p
    2542:	b5f0      	push	{r4, r5, r6, r7, lr}
    2544:	46d6      	mov	lr, sl
    2546:	464f      	mov	r7, r9
    2548:	4646      	mov	r6, r8
    254a:	b5c0      	push	{r6, r7, lr}
    mask = 0 - (a[0] & 1);  // if a is odd then mask = 0xFF...FF, else mask = 0
    254c:	2701      	movs	r7, #1
    254e:	6803      	ldr	r3, [r0, #0]
    2550:	401f      	ands	r7, r3
    2552:	427b      	negs	r3, r7
    2554:	4698      	mov	r8, r3
    2556:	0004      	movs	r4, r0
    2558:	230c      	movs	r3, #12
    255a:	469c      	mov	ip, r3
    255c:	4484      	add	ip, r0
    255e:	0005      	movs	r5, r0
    unsigned int carry = 0;
    2560:	2300      	movs	r3, #0
        ADDC(carry, mask, a[i], carry, a[i]);
    2562:	1bd9      	subs	r1, r3, r7
    2564:	682a      	ldr	r2, [r5, #0]
    2566:	4692      	mov	sl, r2
    2568:	188e      	adds	r6, r1, r2
    256a:	c540      	stmia	r5!, {r6}
    256c:	000a      	movs	r2, r1
    256e:	405a      	eors	r2, r3
    2570:	4691      	mov	r9, r2
    2572:	4642      	mov	r2, r8
    2574:	405a      	eors	r2, r3
    2576:	464b      	mov	r3, r9
    2578:	431a      	orrs	r2, r3
    257a:	404a      	eors	r2, r1
    257c:	4691      	mov	r9, r2
    257e:	000a      	movs	r2, r1
    2580:	4072      	eors	r2, r6
    2582:	4653      	mov	r3, sl
    2584:	404b      	eors	r3, r1
    2586:	4313      	orrs	r3, r2
    2588:	4073      	eors	r3, r6
    258a:	464a      	mov	r2, r9
    258c:	4313      	orrs	r3, r2
    258e:	0fdb      	lsrs	r3, r3, #31
    for (i = 0; i < (NWORDS_FIELD-1); i++) {
    2590:	4565      	cmp	r5, ip
    2592:	d1e6      	bne.n	2562 <fp2div1271+0x20>
    ADDC(carry, (mask >> 1), a[NWORDS_FIELD-1], carry, a[NWORDS_FIELD-1]);
    2594:	4642      	mov	r2, r8
    2596:	0856      	lsrs	r6, r2, #1
    2598:	68c2      	ldr	r2, [r0, #12]
    259a:	4694      	mov	ip, r2
    259c:	4466      	add	r6, ip
    259e:	18f3      	adds	r3, r6, r3
    25a0:	60c3      	str	r3, [r0, #12]
        SHIFTR(a[i+1], a[i], 1, a[i], RADIX);
    25a2:	6823      	ldr	r3, [r4, #0]
    25a4:	085b      	lsrs	r3, r3, #1
    25a6:	6862      	ldr	r2, [r4, #4]
    25a8:	07d2      	lsls	r2, r2, #31
    25aa:	4053      	eors	r3, r2
    25ac:	c408      	stmia	r4!, {r3}
    for (i = 0; i < (NWORDS_FIELD-1); i++) {
    25ae:	42ac      	cmp	r4, r5
    25b0:	d1f7      	bne.n	25a2 <fp2div1271+0x60>
    a[NWORDS_FIELD-1] = (a[NWORDS_FIELD-1] >> 1);
    25b2:	68c3      	ldr	r3, [r0, #12]
    25b4:	085b      	lsrs	r3, r3, #1
    25b6:	60c3      	str	r3, [r0, #12]
    mask = 0 - (a[0] & 1);  // if a is odd then mask = 0xFF...FF, else mask = 0
    25b8:	2701      	movs	r7, #1
    25ba:	6903      	ldr	r3, [r0, #16]
    25bc:	401f      	ands	r7, r3
    25be:	427b      	negs	r3, r7
    25c0:	4698      	mov	r8, r3
    fpdiv1271(a[0]);
    fpdiv1271(a[1]);
    25c2:	0004      	movs	r4, r0
    25c4:	3410      	adds	r4, #16
    25c6:	231c      	movs	r3, #28
    25c8:	469c      	mov	ip, r3
    25ca:	4484      	add	ip, r0
    mask = 0 - (a[0] & 1);  // if a is odd then mask = 0xFF...FF, else mask = 0
    25cc:	0025      	movs	r5, r4
    unsigned int carry = 0;
    25ce:	2300      	movs	r3, #0
        ADDC(carry, mask, a[i], carry, a[i]);
    25d0:	1bd9      	subs	r1, r3, r7
    25d2:	682a      	ldr	r2, [r5, #0]
    25d4:	4692      	mov	sl, r2
    25d6:	188e      	adds	r6, r1, r2
    25d8:	c540      	stmia	r5!, {r6}
    25da:	000a      	movs	r2, r1
    25dc:	405a      	eors	r2, r3
    25de:	4691      	mov	r9, r2
    25e0:	4642      	mov	r2, r8
    25e2:	405a      	eors	r2, r3
    25e4:	464b      	mov	r3, r9
    25e6:	431a      	orrs	r2, r3
    25e8:	404a      	eors	r2, r1
    25ea:	4691      	mov	r9, r2
    25ec:	000a      	movs	r2, r1
    25ee:	4072      	eors	r2, r6
    25f0:	4653      	mov	r3, sl
    25f2:	404b      	eors	r3, r1
    25f4:	4313      	orrs	r3, r2
    25f6:	4073      	eors	r3, r6
    25f8:	464a      	mov	r2, r9
    25fa:	4313      	orrs	r3, r2
    25fc:	0fdb      	lsrs	r3, r3, #31
    for (i = 0; i < (NWORDS_FIELD-1); i++) {
    25fe:	4565      	cmp	r5, ip
    2600:	d1e6      	bne.n	25d0 <fp2div1271+0x8e>
    ADDC(carry, (mask >> 1), a[NWORDS_FIELD-1], carry, a[NWORDS_FIELD-1]);
    2602:	4642      	mov	r2, r8
    2604:	0856      	lsrs	r6, r2, #1
    2606:	69c2      	ldr	r2, [r0, #28]
    2608:	4694      	mov	ip, r2
    260a:	4466      	add	r6, ip
    260c:	18f3      	adds	r3, r6, r3
    260e:	61c3      	str	r3, [r0, #28]
        SHIFTR(a[i+1], a[i], 1, a[i], RADIX);
    2610:	6823      	ldr	r3, [r4, #0]
    2612:	085b      	lsrs	r3, r3, #1
    2614:	6862      	ldr	r2, [r4, #4]
    2616:	07d2      	lsls	r2, r2, #31
    2618:	4053      	eors	r3, r2
    261a:	c408      	stmia	r4!, {r3}
    for (i = 0; i < (NWORDS_FIELD-1); i++) {
    261c:	42ac      	cmp	r4, r5
    261e:	d1f7      	bne.n	2610 <fp2div1271+0xce>
    a[NWORDS_FIELD-1] = (a[NWORDS_FIELD-1] >> 1);
    2620:	69c3      	ldr	r3, [r0, #28]
    2622:	085b      	lsrs	r3, r3, #1
    2624:	61c3      	str	r3, [r0, #28]
}
    2626:	bc1c      	pop	{r2, r3, r4}
    2628:	4690      	mov	r8, r2
    262a:	4699      	mov	r9, r3
    262c:	46a2      	mov	sl, r4
    262e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002630 <fp2copy1271>:

/***********************************************/
/************* GF(p^2) FUNCTIONS ***************/

void fp2copy1271(f2elm_t a, f2elm_t c)
{// Copy of a GF(p^2) element, c = a
    2630:	2300      	movs	r3, #0
        c[i] = a[i];
    2632:	58c2      	ldr	r2, [r0, r3]
    2634:	50ca      	str	r2, [r1, r3]
    2636:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_FIELD; i++)
    2638:	2b10      	cmp	r3, #16
    263a:	d1fa      	bne.n	2632 <fp2copy1271+0x2>
        c[i] = a[i];
    263c:	58c2      	ldr	r2, [r0, r3]
    263e:	50ca      	str	r2, [r1, r3]
    2640:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_FIELD; i++)
    2642:	2b20      	cmp	r3, #32
    2644:	d1fa      	bne.n	263c <fp2copy1271+0xc>
    fpcopy1271(a[0], c[0]);
    fpcopy1271(a[1], c[1]);
}
    2646:	4770      	bx	lr

00002648 <table_lookup_1x8>:

#include "FourQ_internal.h"


void table_lookup_1x8(point_extproj_precomp_t* table, point_extproj_precomp_t P, unsigned int digit, unsigned int sign_mask)
{ // Constant-time table lookup to extract a point represented as (X+Y,Y-X,2Z,2dT) corresponding to extended twisted Edwards coordinates (X:Y:Z:T)
    2648:	b5f0      	push	{r4, r5, r6, r7, lr}
    264a:	46d6      	mov	lr, sl
    264c:	464f      	mov	r7, r9
    264e:	4646      	mov	r6, r8
    2650:	b5c0      	push	{r6, r7, lr}
    2652:	b0c2      	sub	sp, #264	; 0x108
    2654:	0004      	movs	r4, r0
    2656:	468a      	mov	sl, r1
    2658:	4690      	mov	r8, r2
    265a:	001f      	movs	r7, r3
#else
    point_extproj_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                  
    ecccopy_precomp(table[0], point);                                        // point = table[0]
    265c:	a922      	add	r1, sp, #136	; 0x88
    265e:	4daa      	ldr	r5, [pc, #680]	; (2908 <table_lookup_1x8+0x2c0>)
    2660:	47a8      	blx	r5
    2662:	0020      	movs	r0, r4
    2664:	3020      	adds	r0, #32
    2666:	a92a      	add	r1, sp, #168	; 0xa8
    2668:	47a8      	blx	r5
    266a:	0020      	movs	r0, r4
    266c:	3040      	adds	r0, #64	; 0x40
    266e:	a932      	add	r1, sp, #200	; 0xc8
    2670:	47a8      	blx	r5
    2672:	0020      	movs	r0, r4
    2674:	3060      	adds	r0, #96	; 0x60
    2676:	a93a      	add	r1, sp, #232	; 0xe8
    2678:	47a8      	blx	r5
    267a:	0025      	movs	r5, r4
    267c:	3580      	adds	r5, #128	; 0x80
    267e:	2380      	movs	r3, #128	; 0x80
    2680:	00db      	lsls	r3, r3, #3
    2682:	4699      	mov	r9, r3
    2684:	44a1      	add	r9, r4
    for (i = 1; i < 8; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    2686:	4ea0      	ldr	r6, [pc, #640]	; (2908 <table_lookup_1x8+0x2c0>)
        digit--;
    2688:	2301      	movs	r3, #1
    268a:	425b      	negs	r3, r3
    268c:	469c      	mov	ip, r3
    268e:	44e0      	add	r8, ip
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    2690:	4643      	mov	r3, r8
    2692:	0fdc      	lsrs	r4, r3, #31
    2694:	4464      	add	r4, ip
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    2696:	a902      	add	r1, sp, #8
    2698:	0028      	movs	r0, r5
    269a:	47b0      	blx	r6
    269c:	0028      	movs	r0, r5
    269e:	3020      	adds	r0, #32
    26a0:	a90a      	add	r1, sp, #40	; 0x28
    26a2:	47b0      	blx	r6
    26a4:	0028      	movs	r0, r5
    26a6:	3040      	adds	r0, #64	; 0x40
    26a8:	a912      	add	r1, sp, #72	; 0x48
    26aa:	47b0      	blx	r6
    26ac:	0028      	movs	r0, r5
    26ae:	3060      	adds	r0, #96	; 0x60
    26b0:	a91a      	add	r1, sp, #104	; 0x68
    26b2:	47b0      	blx	r6
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point            
        point->xy[0][0] = (mask & (point->xy[0][0] ^ temp_point->xy[0][0])) ^ point->xy[0][0];
    26b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    26b6:	9b02      	ldr	r3, [sp, #8]
    26b8:	4053      	eors	r3, r2
    26ba:	4023      	ands	r3, r4
    26bc:	4053      	eors	r3, r2
    26be:	9322      	str	r3, [sp, #136]	; 0x88
        point->xy[0][1] = (mask & (point->xy[0][1] ^ temp_point->xy[0][1])) ^ point->xy[0][1];
    26c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    26c2:	9b03      	ldr	r3, [sp, #12]
    26c4:	4053      	eors	r3, r2
    26c6:	4023      	ands	r3, r4
    26c8:	4053      	eors	r3, r2
    26ca:	9323      	str	r3, [sp, #140]	; 0x8c
        point->xy[0][2] = (mask & (point->xy[0][2] ^ temp_point->xy[0][2])) ^ point->xy[0][2];
    26cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
    26ce:	9b04      	ldr	r3, [sp, #16]
    26d0:	4053      	eors	r3, r2
    26d2:	4023      	ands	r3, r4
    26d4:	4053      	eors	r3, r2
    26d6:	9324      	str	r3, [sp, #144]	; 0x90
        point->xy[0][3] = (mask & (point->xy[0][3] ^ temp_point->xy[0][3])) ^ point->xy[0][3];
    26d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    26da:	9b05      	ldr	r3, [sp, #20]
    26dc:	4053      	eors	r3, r2
    26de:	4023      	ands	r3, r4
    26e0:	4053      	eors	r3, r2
    26e2:	9325      	str	r3, [sp, #148]	; 0x94
        point->xy[1][0] = (mask & (point->xy[1][0] ^ temp_point->xy[1][0])) ^ point->xy[1][0];
    26e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    26e6:	9b06      	ldr	r3, [sp, #24]
    26e8:	4053      	eors	r3, r2
    26ea:	4023      	ands	r3, r4
    26ec:	4053      	eors	r3, r2
    26ee:	9326      	str	r3, [sp, #152]	; 0x98
        point->xy[1][1] = (mask & (point->xy[1][1] ^ temp_point->xy[1][1])) ^ point->xy[1][1];
    26f0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    26f2:	9b07      	ldr	r3, [sp, #28]
    26f4:	4053      	eors	r3, r2
    26f6:	4023      	ands	r3, r4
    26f8:	4053      	eors	r3, r2
    26fa:	9327      	str	r3, [sp, #156]	; 0x9c
        point->xy[1][2] = (mask & (point->xy[1][2] ^ temp_point->xy[1][2])) ^ point->xy[1][2];
    26fc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    26fe:	9b08      	ldr	r3, [sp, #32]
    2700:	4053      	eors	r3, r2
    2702:	4023      	ands	r3, r4
    2704:	4053      	eors	r3, r2
    2706:	9328      	str	r3, [sp, #160]	; 0xa0
        point->xy[1][3] = (mask & (point->xy[1][3] ^ temp_point->xy[1][3])) ^ point->xy[1][3];
    2708:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    270a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    270c:	4053      	eors	r3, r2
    270e:	4023      	ands	r3, r4
    2710:	4053      	eors	r3, r2
    2712:	9329      	str	r3, [sp, #164]	; 0xa4
        point->yx[0][0] = (mask & (point->yx[0][0] ^ temp_point->yx[0][0])) ^ point->yx[0][0];
    2714:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    2716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2718:	4053      	eors	r3, r2
    271a:	4023      	ands	r3, r4
    271c:	4053      	eors	r3, r2
    271e:	932a      	str	r3, [sp, #168]	; 0xa8
        point->yx[0][1] = (mask & (point->yx[0][1] ^ temp_point->yx[0][1])) ^ point->yx[0][1];
    2720:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    2722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2724:	4053      	eors	r3, r2
    2726:	4023      	ands	r3, r4
    2728:	4053      	eors	r3, r2
    272a:	932b      	str	r3, [sp, #172]	; 0xac
        point->yx[0][2] = (mask & (point->yx[0][2] ^ temp_point->yx[0][2])) ^ point->yx[0][2];
    272c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    272e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2730:	4053      	eors	r3, r2
    2732:	4023      	ands	r3, r4
    2734:	4053      	eors	r3, r2
    2736:	932c      	str	r3, [sp, #176]	; 0xb0
        point->yx[0][3] = (mask & (point->yx[0][3] ^ temp_point->yx[0][3])) ^ point->yx[0][3];
    2738:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    273a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    273c:	4053      	eors	r3, r2
    273e:	4023      	ands	r3, r4
    2740:	4053      	eors	r3, r2
    2742:	932d      	str	r3, [sp, #180]	; 0xb4
        point->yx[1][0] = (mask & (point->yx[1][0] ^ temp_point->yx[1][0])) ^ point->yx[1][0];
    2744:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    2746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2748:	4053      	eors	r3, r2
    274a:	4023      	ands	r3, r4
    274c:	4053      	eors	r3, r2
    274e:	932e      	str	r3, [sp, #184]	; 0xb8
        point->yx[1][1] = (mask & (point->yx[1][1] ^ temp_point->yx[1][1])) ^ point->yx[1][1];
    2750:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    2752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2754:	4053      	eors	r3, r2
    2756:	4023      	ands	r3, r4
    2758:	4053      	eors	r3, r2
    275a:	932f      	str	r3, [sp, #188]	; 0xbc
        point->yx[1][2] = (mask & (point->yx[1][2] ^ temp_point->yx[1][2])) ^ point->yx[1][2];
    275c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    275e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2760:	4053      	eors	r3, r2
    2762:	4023      	ands	r3, r4
    2764:	4053      	eors	r3, r2
    2766:	9330      	str	r3, [sp, #192]	; 0xc0
        point->yx[1][3] = (mask & (point->yx[1][3] ^ temp_point->yx[1][3])) ^ point->yx[1][3];
    2768:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    276a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    276c:	4053      	eors	r3, r2
    276e:	4023      	ands	r3, r4
    2770:	4053      	eors	r3, r2
    2772:	9331      	str	r3, [sp, #196]	; 0xc4
        point->z2[0][0] = (mask & (point->z2[0][0] ^ temp_point->z2[0][0])) ^ point->z2[0][0];
    2774:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    2776:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2778:	4053      	eors	r3, r2
    277a:	4023      	ands	r3, r4
    277c:	4053      	eors	r3, r2
    277e:	9332      	str	r3, [sp, #200]	; 0xc8
        point->z2[0][1] = (mask & (point->z2[0][1] ^ temp_point->z2[0][1])) ^ point->z2[0][1];
    2780:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    2782:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2784:	4053      	eors	r3, r2
    2786:	4023      	ands	r3, r4
    2788:	4053      	eors	r3, r2
    278a:	9333      	str	r3, [sp, #204]	; 0xcc
        point->z2[0][2] = (mask & (point->z2[0][2] ^ temp_point->z2[0][2])) ^ point->z2[0][2];
    278c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    278e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2790:	4053      	eors	r3, r2
    2792:	4023      	ands	r3, r4
    2794:	4053      	eors	r3, r2
    2796:	9334      	str	r3, [sp, #208]	; 0xd0
        point->z2[0][3] = (mask & (point->z2[0][3] ^ temp_point->z2[0][3])) ^ point->z2[0][3];
    2798:	9a35      	ldr	r2, [sp, #212]	; 0xd4
    279a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    279c:	4053      	eors	r3, r2
    279e:	4023      	ands	r3, r4
    27a0:	4053      	eors	r3, r2
    27a2:	9335      	str	r3, [sp, #212]	; 0xd4
        point->z2[1][0] = (mask & (point->z2[1][0] ^ temp_point->z2[1][0])) ^ point->z2[1][0];
    27a4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    27a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    27a8:	4053      	eors	r3, r2
    27aa:	4023      	ands	r3, r4
    27ac:	4053      	eors	r3, r2
    27ae:	9336      	str	r3, [sp, #216]	; 0xd8
        point->z2[1][1] = (mask & (point->z2[1][1] ^ temp_point->z2[1][1])) ^ point->z2[1][1];
    27b0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    27b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    27b4:	4053      	eors	r3, r2
    27b6:	4023      	ands	r3, r4
    27b8:	4053      	eors	r3, r2
    27ba:	9337      	str	r3, [sp, #220]	; 0xdc
        point->z2[1][2] = (mask & (point->z2[1][2] ^ temp_point->z2[1][2])) ^ point->z2[1][2];
    27bc:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    27be:	9b18      	ldr	r3, [sp, #96]	; 0x60
    27c0:	4053      	eors	r3, r2
    27c2:	4023      	ands	r3, r4
    27c4:	4053      	eors	r3, r2
    27c6:	9338      	str	r3, [sp, #224]	; 0xe0
        point->z2[1][3] = (mask & (point->z2[1][3] ^ temp_point->z2[1][3])) ^ point->z2[1][3];
    27c8:	9a39      	ldr	r2, [sp, #228]	; 0xe4
    27ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
    27cc:	4053      	eors	r3, r2
    27ce:	4023      	ands	r3, r4
    27d0:	4053      	eors	r3, r2
    27d2:	9339      	str	r3, [sp, #228]	; 0xe4
        point->t2[0][0] = (mask & (point->t2[0][0] ^ temp_point->t2[0][0])) ^ point->t2[0][0];
    27d4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    27d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    27d8:	4053      	eors	r3, r2
    27da:	4023      	ands	r3, r4
    27dc:	4053      	eors	r3, r2
    27de:	933a      	str	r3, [sp, #232]	; 0xe8
        point->t2[0][1] = (mask & (point->t2[0][1] ^ temp_point->t2[0][1])) ^ point->t2[0][1];
    27e0:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    27e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    27e4:	4053      	eors	r3, r2
    27e6:	4023      	ands	r3, r4
    27e8:	4053      	eors	r3, r2
    27ea:	933b      	str	r3, [sp, #236]	; 0xec
        point->t2[0][2] = (mask & (point->t2[0][2] ^ temp_point->t2[0][2])) ^ point->t2[0][2];
    27ec:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    27ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    27f0:	4053      	eors	r3, r2
    27f2:	4023      	ands	r3, r4
    27f4:	4053      	eors	r3, r2
    27f6:	933c      	str	r3, [sp, #240]	; 0xf0
        point->t2[0][3] = (mask & (point->t2[0][3] ^ temp_point->t2[0][3])) ^ point->t2[0][3];
    27f8:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    27fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    27fc:	4053      	eors	r3, r2
    27fe:	4023      	ands	r3, r4
    2800:	4053      	eors	r3, r2
    2802:	933d      	str	r3, [sp, #244]	; 0xf4
        point->t2[1][0] = (mask & (point->t2[1][0] ^ temp_point->t2[1][0])) ^ point->t2[1][0];
    2804:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    2806:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2808:	4053      	eors	r3, r2
    280a:	4023      	ands	r3, r4
    280c:	4053      	eors	r3, r2
    280e:	933e      	str	r3, [sp, #248]	; 0xf8
        point->t2[1][1] = (mask & (point->t2[1][1] ^ temp_point->t2[1][1])) ^ point->t2[1][1];
    2810:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    2812:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2814:	4053      	eors	r3, r2
    2816:	4023      	ands	r3, r4
    2818:	4053      	eors	r3, r2
    281a:	933f      	str	r3, [sp, #252]	; 0xfc
        point->t2[1][2] = (mask & (point->t2[1][2] ^ temp_point->t2[1][2])) ^ point->t2[1][2];
    281c:	9a40      	ldr	r2, [sp, #256]	; 0x100
    281e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2820:	4053      	eors	r3, r2
    2822:	4023      	ands	r3, r4
    2824:	4053      	eors	r3, r2
    2826:	9340      	str	r3, [sp, #256]	; 0x100
        point->t2[1][3] = (mask & (point->t2[1][3] ^ temp_point->t2[1][3])) ^ point->t2[1][3];
    2828:	9a41      	ldr	r2, [sp, #260]	; 0x104
    282a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    282c:	9301      	str	r3, [sp, #4]
    282e:	4053      	eors	r3, r2
    2830:	401c      	ands	r4, r3
    2832:	4054      	eors	r4, r2
    2834:	9441      	str	r4, [sp, #260]	; 0x104
    2836:	3580      	adds	r5, #128	; 0x80
    for (i = 1; i < 8; i++)
    2838:	454d      	cmp	r5, r9
    283a:	d000      	beq.n	283e <table_lookup_1x8+0x1f6>
    283c:	e724      	b.n	2688 <table_lookup_1x8+0x40>
    }
    
    fp2copy1271(point->t2, temp_point->t2);
    283e:	a91a      	add	r1, sp, #104	; 0x68
    2840:	a83a      	add	r0, sp, #232	; 0xe8
    2842:	4c31      	ldr	r4, [pc, #196]	; (2908 <table_lookup_1x8+0x2c0>)
    2844:	47a0      	blx	r4
    fp2copy1271(point->xy, temp_point->yx);                                  // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    2846:	a90a      	add	r1, sp, #40	; 0x28
    2848:	a822      	add	r0, sp, #136	; 0x88
    284a:	47a0      	blx	r4
    fp2copy1271(point->yx, temp_point->xy);                                   
    284c:	a902      	add	r1, sp, #8
    284e:	a82a      	add	r0, sp, #168	; 0xa8
    2850:	47a0      	blx	r4
        SUBC(borrow, prime1271_0, a[i], borrow, a[i]); 
    2852:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    2854:	43db      	mvns	r3, r3
    2856:	931a      	str	r3, [sp, #104]	; 0x68
    2858:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    285a:	43db      	mvns	r3, r3
    285c:	931b      	str	r3, [sp, #108]	; 0x6c
    285e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2860:	43db      	mvns	r3, r3
    2862:	931c      	str	r3, [sp, #112]	; 0x70
    a[NWORDS_FIELD-1] = prime1271_1 - a[NWORDS_FIELD-1];
    2864:	4b29      	ldr	r3, [pc, #164]	; (290c <table_lookup_1x8+0x2c4>)
    2866:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    2868:	1a9a      	subs	r2, r3, r2
    286a:	921d      	str	r2, [sp, #116]	; 0x74
        SUBC(borrow, prime1271_0, a[i], borrow, a[i]); 
    286c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    286e:	43d2      	mvns	r2, r2
    2870:	921e      	str	r2, [sp, #120]	; 0x78
    2872:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    2874:	43d2      	mvns	r2, r2
    2876:	921f      	str	r2, [sp, #124]	; 0x7c
    2878:	9a20      	ldr	r2, [sp, #128]	; 0x80
    287a:	43d2      	mvns	r2, r2
    287c:	9220      	str	r2, [sp, #128]	; 0x80
    a[NWORDS_FIELD-1] = prime1271_1 - a[NWORDS_FIELD-1];
    287e:	9a21      	ldr	r2, [sp, #132]	; 0x84
    2880:	1a9b      	subs	r3, r3, r2
    2882:	9321      	str	r3, [sp, #132]	; 0x84
    2884:	ab22      	add	r3, sp, #136	; 0x88
    2886:	aa02      	add	r2, sp, #8
    2888:	a826      	add	r0, sp, #152	; 0x98
    fpneg1271(temp_point->t2[0]);                                            // Negate 2dt coordinate
    fpneg1271(temp_point->t2[1]);             
    for (j = 0; j < NWORDS_FIELD; j++) {                                     // If sign_mask = 0 then choose negative of the point
        point->xy[0][j] = ((digit_t)((int)sign_mask) & (point->xy[0][j] ^ temp_point->xy[0][j])) ^ temp_point->xy[0][j];
    288a:	6814      	ldr	r4, [r2, #0]
    288c:	6819      	ldr	r1, [r3, #0]
    288e:	4061      	eors	r1, r4
    2890:	4039      	ands	r1, r7
    2892:	4061      	eors	r1, r4
    2894:	6019      	str	r1, [r3, #0]
        point->xy[1][j] = ((digit_t)((int)sign_mask) & (point->xy[1][j] ^ temp_point->xy[1][j])) ^ temp_point->xy[1][j];
    2896:	6914      	ldr	r4, [r2, #16]
    2898:	6919      	ldr	r1, [r3, #16]
    289a:	4061      	eors	r1, r4
    289c:	4039      	ands	r1, r7
    289e:	4061      	eors	r1, r4
    28a0:	6119      	str	r1, [r3, #16]
        point->yx[0][j] = ((digit_t)((int)sign_mask) & (point->yx[0][j] ^ temp_point->yx[0][j])) ^ temp_point->yx[0][j];
    28a2:	6a14      	ldr	r4, [r2, #32]
    28a4:	6a19      	ldr	r1, [r3, #32]
    28a6:	4061      	eors	r1, r4
    28a8:	4039      	ands	r1, r7
    28aa:	4061      	eors	r1, r4
    28ac:	6219      	str	r1, [r3, #32]
        point->yx[1][j] = ((digit_t)((int)sign_mask) & (point->yx[1][j] ^ temp_point->yx[1][j])) ^ temp_point->yx[1][j];
    28ae:	6b14      	ldr	r4, [r2, #48]	; 0x30
    28b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
    28b2:	4061      	eors	r1, r4
    28b4:	4039      	ands	r1, r7
    28b6:	4061      	eors	r1, r4
    28b8:	6319      	str	r1, [r3, #48]	; 0x30
        point->t2[0][j] = ((digit_t)((int)sign_mask) & (point->t2[0][j] ^ temp_point->t2[0][j])) ^ temp_point->t2[0][j];
    28ba:	6e14      	ldr	r4, [r2, #96]	; 0x60
    28bc:	6e19      	ldr	r1, [r3, #96]	; 0x60
    28be:	4061      	eors	r1, r4
    28c0:	4039      	ands	r1, r7
    28c2:	4061      	eors	r1, r4
    28c4:	6619      	str	r1, [r3, #96]	; 0x60
        point->t2[1][j] = ((digit_t)((int)sign_mask) & (point->t2[1][j] ^ temp_point->t2[1][j])) ^ temp_point->t2[1][j];
    28c6:	6f14      	ldr	r4, [r2, #112]	; 0x70
    28c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
    28ca:	4061      	eors	r1, r4
    28cc:	4039      	ands	r1, r7
    28ce:	4061      	eors	r1, r4
    28d0:	6719      	str	r1, [r3, #112]	; 0x70
    28d2:	3304      	adds	r3, #4
    28d4:	3204      	adds	r2, #4
    for (j = 0; j < NWORDS_FIELD; j++) {                                     // If sign_mask = 0 then choose negative of the point
    28d6:	4283      	cmp	r3, r0
    28d8:	d1d7      	bne.n	288a <table_lookup_1x8+0x242>
    }                                
    ecccopy_precomp(point, P); 
    28da:	4651      	mov	r1, sl
    28dc:	a822      	add	r0, sp, #136	; 0x88
    28de:	4c0a      	ldr	r4, [pc, #40]	; (2908 <table_lookup_1x8+0x2c0>)
    28e0:	47a0      	blx	r4
    28e2:	4651      	mov	r1, sl
    28e4:	3120      	adds	r1, #32
    28e6:	a82a      	add	r0, sp, #168	; 0xa8
    28e8:	47a0      	blx	r4
    28ea:	4651      	mov	r1, sl
    28ec:	3140      	adds	r1, #64	; 0x40
    28ee:	a832      	add	r0, sp, #200	; 0xc8
    28f0:	47a0      	blx	r4
    28f2:	4651      	mov	r1, sl
    28f4:	3160      	adds	r1, #96	; 0x60
    28f6:	a83a      	add	r0, sp, #232	; 0xe8
    28f8:	47a0      	blx	r4
#endif
}
    28fa:	b042      	add	sp, #264	; 0x108
    28fc:	bc1c      	pop	{r2, r3, r4}
    28fe:	4690      	mov	r8, r2
    2900:	4699      	mov	r9, r3
    2902:	46a2      	mov	sl, r4
    2904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	00002631 	.word	0x00002631
    290c:	7fffffff 	.word	0x7fffffff

00002910 <table_lookup_fixed_base>:


void table_lookup_fixed_base(point_precomp_t* table, point_precomp_t P, unsigned int digit, unsigned int sign)
{ // Constant-time table lookup to extract a point represented as (x+y,y-x,2t) corresponding to extended twisted Edwards coordinates (X:Y:Z:T) with Z=1
    2910:	b5f0      	push	{r4, r5, r6, r7, lr}
    2912:	46de      	mov	lr, fp
    2914:	4657      	mov	r7, sl
    2916:	464e      	mov	r6, r9
    2918:	4645      	mov	r5, r8
    291a:	b5e0      	push	{r5, r6, r7, lr}
    291c:	b0b3      	sub	sp, #204	; 0xcc
    291e:	0004      	movs	r4, r0
    2920:	9101      	str	r1, [sp, #4]
    2922:	4692      	mov	sl, r2
    2924:	469b      	mov	fp, r3
#else
    point_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                   
    ecccopy_precomp_fixed_base(table[0], point);                             // point = table[0]
    2926:	a91a      	add	r1, sp, #104	; 0x68
    2928:	4d5f      	ldr	r5, [pc, #380]	; (2aa8 <table_lookup_fixed_base+0x198>)
    292a:	47a8      	blx	r5
    292c:	0020      	movs	r0, r4
    292e:	3020      	adds	r0, #32
    2930:	a922      	add	r1, sp, #136	; 0x88
    2932:	47a8      	blx	r5
    2934:	0020      	movs	r0, r4
    2936:	3040      	adds	r0, #64	; 0x40
    2938:	a92a      	add	r1, sp, #168	; 0xa8
    293a:	47a8      	blx	r5
    293c:	0026      	movs	r6, r4
    293e:	3660      	adds	r6, #96	; 0x60
    2940:	0023      	movs	r3, r4
    2942:	22c0      	movs	r2, #192	; 0xc0
    2944:	00d2      	lsls	r2, r2, #3
    2946:	4694      	mov	ip, r2
    2948:	4463      	add	r3, ip
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    294a:	4a57      	ldr	r2, [pc, #348]	; (2aa8 <table_lookup_fixed_base+0x198>)
    294c:	4691      	mov	r9, r2
    294e:	4698      	mov	r8, r3
    2950:	4657      	mov	r7, sl
    2952:	e002      	b.n	295a <table_lookup_fixed_base+0x4a>
    2954:	3660      	adds	r6, #96	; 0x60
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    2956:	4546      	cmp	r6, r8
    2958:	d043      	beq.n	29e2 <table_lookup_fixed_base+0xd2>
        digit--;
    295a:	3f01      	subs	r7, #1
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    295c:	0ffd      	lsrs	r5, r7, #31
    295e:	3d01      	subs	r5, #1
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    2960:	a902      	add	r1, sp, #8
    2962:	0030      	movs	r0, r6
    2964:	47c8      	blx	r9
    2966:	0030      	movs	r0, r6
    2968:	3020      	adds	r0, #32
    296a:	a90a      	add	r1, sp, #40	; 0x28
    296c:	47c8      	blx	r9
    296e:	0030      	movs	r0, r6
    2970:	3040      	adds	r0, #64	; 0x40
    2972:	a912      	add	r1, sp, #72	; 0x48
    2974:	47c8      	blx	r9
    2976:	a81a      	add	r0, sp, #104	; 0x68
    2978:	ab02      	add	r3, sp, #8
    297a:	469a      	mov	sl, r3
    297c:	a91e      	add	r1, sp, #120	; 0x78
    297e:	001a      	movs	r2, r3
    2980:	0004      	movs	r4, r0
    2982:	4684      	mov	ip, r0
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point
        for (j = 0; j < NWORDS_FIELD; j++) {
            point->xy[0][j] = (mask & (point->xy[0][j] ^ temp_point->xy[0][j])) ^ point->xy[0][j];
    2984:	6823      	ldr	r3, [r4, #0]
    2986:	6810      	ldr	r0, [r2, #0]
    2988:	4043      	eors	r3, r0
    298a:	402b      	ands	r3, r5
    298c:	6820      	ldr	r0, [r4, #0]
    298e:	4043      	eors	r3, r0
    2990:	6023      	str	r3, [r4, #0]
            point->xy[1][j] = (mask & (point->xy[1][j] ^ temp_point->xy[1][j])) ^ point->xy[1][j];
    2992:	6923      	ldr	r3, [r4, #16]
    2994:	6910      	ldr	r0, [r2, #16]
    2996:	4043      	eors	r3, r0
    2998:	402b      	ands	r3, r5
    299a:	6920      	ldr	r0, [r4, #16]
    299c:	4043      	eors	r3, r0
    299e:	6123      	str	r3, [r4, #16]
            point->yx[0][j] = (mask & (point->yx[0][j] ^ temp_point->yx[0][j])) ^ point->yx[0][j];
    29a0:	6a23      	ldr	r3, [r4, #32]
    29a2:	6a10      	ldr	r0, [r2, #32]
    29a4:	4043      	eors	r3, r0
    29a6:	402b      	ands	r3, r5
    29a8:	6a20      	ldr	r0, [r4, #32]
    29aa:	4043      	eors	r3, r0
    29ac:	6223      	str	r3, [r4, #32]
            point->yx[1][j] = (mask & (point->yx[1][j] ^ temp_point->yx[1][j])) ^ point->yx[1][j];
    29ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    29b0:	6b10      	ldr	r0, [r2, #48]	; 0x30
    29b2:	4043      	eors	r3, r0
    29b4:	402b      	ands	r3, r5
    29b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    29b8:	4043      	eors	r3, r0
    29ba:	6323      	str	r3, [r4, #48]	; 0x30
            point->t2[0][j] = (mask & (point->t2[0][j] ^ temp_point->t2[0][j])) ^ point->t2[0][j];
    29bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    29be:	6c10      	ldr	r0, [r2, #64]	; 0x40
    29c0:	4043      	eors	r3, r0
    29c2:	402b      	ands	r3, r5
    29c4:	6c20      	ldr	r0, [r4, #64]	; 0x40
    29c6:	4043      	eors	r3, r0
    29c8:	6423      	str	r3, [r4, #64]	; 0x40
            point->t2[1][j] = (mask & (point->t2[1][j] ^ temp_point->t2[1][j])) ^ point->t2[1][j];
    29ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
    29cc:	6d10      	ldr	r0, [r2, #80]	; 0x50
    29ce:	4043      	eors	r3, r0
    29d0:	402b      	ands	r3, r5
    29d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    29d4:	4043      	eors	r3, r0
    29d6:	6523      	str	r3, [r4, #80]	; 0x50
    29d8:	3404      	adds	r4, #4
    29da:	3204      	adds	r2, #4
        for (j = 0; j < NWORDS_FIELD; j++) {
    29dc:	428c      	cmp	r4, r1
    29de:	d1d1      	bne.n	2984 <table_lookup_fixed_base+0x74>
    29e0:	e7b8      	b.n	2954 <table_lookup_fixed_base+0x44>
    29e2:	4667      	mov	r7, ip
        }
    }
    
    fp2copy1271(point->t2, temp_point->t2);
    29e4:	a912      	add	r1, sp, #72	; 0x48
    29e6:	a82a      	add	r0, sp, #168	; 0xa8
    29e8:	4d2f      	ldr	r5, [pc, #188]	; (2aa8 <table_lookup_fixed_base+0x198>)
    29ea:	47a8      	blx	r5
    fp2copy1271(point->xy, temp_point->yx);                                  // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    29ec:	a90a      	add	r1, sp, #40	; 0x28
    29ee:	a81a      	add	r0, sp, #104	; 0x68
    29f0:	47a8      	blx	r5
    fp2copy1271(point->yx, temp_point->xy);                                   
    29f2:	a902      	add	r1, sp, #8
    29f4:	a822      	add	r0, sp, #136	; 0x88
    29f6:	47a8      	blx	r5
        SUBC(borrow, prime1271_0, a[i], borrow, a[i]); 
    29f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    29fa:	43db      	mvns	r3, r3
    29fc:	9312      	str	r3, [sp, #72]	; 0x48
    29fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2a00:	43db      	mvns	r3, r3
    2a02:	9313      	str	r3, [sp, #76]	; 0x4c
    2a04:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2a06:	43db      	mvns	r3, r3
    2a08:	9314      	str	r3, [sp, #80]	; 0x50
    a[NWORDS_FIELD-1] = prime1271_1 - a[NWORDS_FIELD-1];
    2a0a:	4b28      	ldr	r3, [pc, #160]	; (2aac <table_lookup_fixed_base+0x19c>)
    2a0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    2a0e:	1a9a      	subs	r2, r3, r2
    2a10:	9215      	str	r2, [sp, #84]	; 0x54
        SUBC(borrow, prime1271_0, a[i], borrow, a[i]); 
    2a12:	9a16      	ldr	r2, [sp, #88]	; 0x58
    2a14:	43d2      	mvns	r2, r2
    2a16:	9216      	str	r2, [sp, #88]	; 0x58
    2a18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    2a1a:	43d2      	mvns	r2, r2
    2a1c:	9217      	str	r2, [sp, #92]	; 0x5c
    2a1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2a20:	43d2      	mvns	r2, r2
    2a22:	9218      	str	r2, [sp, #96]	; 0x60
    a[NWORDS_FIELD-1] = prime1271_1 - a[NWORDS_FIELD-1];
    2a24:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2a26:	1a9b      	subs	r3, r3, r2
    2a28:	9319      	str	r3, [sp, #100]	; 0x64
    2a2a:	4653      	mov	r3, sl
    2a2c:	4659      	mov	r1, fp
    fpneg1271(temp_point->t2[0]);                                            // Negate 2dt coordinate
    fpneg1271(temp_point->t2[1]);             
    for (j = 0; j < NWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
        point->xy[0][j] = ((digit_t)((int)sign) & (point->xy[0][j] ^ temp_point->xy[0][j])) ^ point->xy[0][j];
    2a2e:	6838      	ldr	r0, [r7, #0]
    2a30:	681a      	ldr	r2, [r3, #0]
    2a32:	4042      	eors	r2, r0
    2a34:	400a      	ands	r2, r1
    2a36:	4042      	eors	r2, r0
    2a38:	603a      	str	r2, [r7, #0]
        point->xy[1][j] = ((digit_t)((int)sign) & (point->xy[1][j] ^ temp_point->xy[1][j])) ^ point->xy[1][j];
    2a3a:	6938      	ldr	r0, [r7, #16]
    2a3c:	691a      	ldr	r2, [r3, #16]
    2a3e:	4042      	eors	r2, r0
    2a40:	400a      	ands	r2, r1
    2a42:	4042      	eors	r2, r0
    2a44:	613a      	str	r2, [r7, #16]
        point->yx[0][j] = ((digit_t)((int)sign) & (point->yx[0][j] ^ temp_point->yx[0][j])) ^ point->yx[0][j];
    2a46:	6a38      	ldr	r0, [r7, #32]
    2a48:	6a1a      	ldr	r2, [r3, #32]
    2a4a:	4042      	eors	r2, r0
    2a4c:	400a      	ands	r2, r1
    2a4e:	4042      	eors	r2, r0
    2a50:	623a      	str	r2, [r7, #32]
        point->yx[1][j] = ((digit_t)((int)sign) & (point->yx[1][j] ^ temp_point->yx[1][j])) ^ point->yx[1][j];
    2a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
    2a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2a56:	4042      	eors	r2, r0
    2a58:	400a      	ands	r2, r1
    2a5a:	4042      	eors	r2, r0
    2a5c:	633a      	str	r2, [r7, #48]	; 0x30
        point->t2[0][j] = ((digit_t)((int)sign) & (point->t2[0][j] ^ temp_point->t2[0][j])) ^ point->t2[0][j];
    2a5e:	6c38      	ldr	r0, [r7, #64]	; 0x40
    2a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2a62:	4042      	eors	r2, r0
    2a64:	400a      	ands	r2, r1
    2a66:	4042      	eors	r2, r0
    2a68:	643a      	str	r2, [r7, #64]	; 0x40
        point->t2[1][j] = ((digit_t)((int)sign) & (point->t2[1][j] ^ temp_point->t2[1][j])) ^ point->t2[1][j];
    2a6a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    2a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2a6e:	4042      	eors	r2, r0
    2a70:	400a      	ands	r2, r1
    2a72:	4042      	eors	r2, r0
    2a74:	653a      	str	r2, [r7, #80]	; 0x50
    2a76:	3704      	adds	r7, #4
    2a78:	3304      	adds	r3, #4
    for (j = 0; j < NWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
    2a7a:	42a7      	cmp	r7, r4
    2a7c:	d1d7      	bne.n	2a2e <table_lookup_fixed_base+0x11e>
    }                                  
    ecccopy_precomp_fixed_base(point, P);
    2a7e:	9d01      	ldr	r5, [sp, #4]
    2a80:	0029      	movs	r1, r5
    2a82:	a81a      	add	r0, sp, #104	; 0x68
    2a84:	4c08      	ldr	r4, [pc, #32]	; (2aa8 <table_lookup_fixed_base+0x198>)
    2a86:	47a0      	blx	r4
    2a88:	0029      	movs	r1, r5
    2a8a:	3120      	adds	r1, #32
    2a8c:	a822      	add	r0, sp, #136	; 0x88
    2a8e:	47a0      	blx	r4
    2a90:	0029      	movs	r1, r5
    2a92:	3140      	adds	r1, #64	; 0x40
    2a94:	a82a      	add	r0, sp, #168	; 0xa8
    2a96:	47a0      	blx	r4
#endif
}
    2a98:	b033      	add	sp, #204	; 0xcc
    2a9a:	bc3c      	pop	{r2, r3, r4, r5}
    2a9c:	4690      	mov	r8, r2
    2a9e:	4699      	mov	r9, r3
    2aa0:	46a2      	mov	sl, r4
    2aa2:	46ab      	mov	fp, r5
    2aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aa6:	46c0      	nop			; (mov r8, r8)
    2aa8:	00002631 	.word	0x00002631
    2aac:	7fffffff 	.word	0x7fffffff

00002ab0 <fp2zero1271>:
        a[i] = 0;
    2ab0:	2300      	movs	r3, #0
    2ab2:	6003      	str	r3, [r0, #0]
    2ab4:	6043      	str	r3, [r0, #4]
    2ab6:	6083      	str	r3, [r0, #8]
    2ab8:	60c3      	str	r3, [r0, #12]
    2aba:	6103      	str	r3, [r0, #16]
    2abc:	6143      	str	r3, [r0, #20]
    2abe:	6183      	str	r3, [r0, #24]
    2ac0:	61c3      	str	r3, [r0, #28]

void fp2zero1271(f2elm_t a)
{// Zeroing a GF(p^2) element, a = 0
    fpzero1271(a[0]);
    fpzero1271(a[1]);
}
    2ac2:	4770      	bx	lr

00002ac4 <fp2neg1271>:
        SUBC(borrow, prime1271_0, a[i], borrow, a[i]); 
    2ac4:	6803      	ldr	r3, [r0, #0]
    2ac6:	43db      	mvns	r3, r3
    2ac8:	6003      	str	r3, [r0, #0]
    2aca:	6843      	ldr	r3, [r0, #4]
    2acc:	43db      	mvns	r3, r3
    2ace:	6043      	str	r3, [r0, #4]
    2ad0:	6883      	ldr	r3, [r0, #8]
    2ad2:	43db      	mvns	r3, r3
    2ad4:	6083      	str	r3, [r0, #8]
    a[NWORDS_FIELD-1] = prime1271_1 - a[NWORDS_FIELD-1];
    2ad6:	4b08      	ldr	r3, [pc, #32]	; (2af8 <fp2neg1271+0x34>)
    2ad8:	68c2      	ldr	r2, [r0, #12]
    2ada:	1a9a      	subs	r2, r3, r2
    2adc:	60c2      	str	r2, [r0, #12]
        SUBC(borrow, prime1271_0, a[i], borrow, a[i]); 
    2ade:	6902      	ldr	r2, [r0, #16]
    2ae0:	43d2      	mvns	r2, r2
    2ae2:	6102      	str	r2, [r0, #16]
    2ae4:	6942      	ldr	r2, [r0, #20]
    2ae6:	43d2      	mvns	r2, r2
    2ae8:	6142      	str	r2, [r0, #20]
    2aea:	6982      	ldr	r2, [r0, #24]
    2aec:	43d2      	mvns	r2, r2
    2aee:	6182      	str	r2, [r0, #24]
    a[NWORDS_FIELD-1] = prime1271_1 - a[NWORDS_FIELD-1];
    2af0:	69c2      	ldr	r2, [r0, #28]
    2af2:	1a9b      	subs	r3, r3, r2
    2af4:	61c3      	str	r3, [r0, #28]

void fp2neg1271(f2elm_t a)
{// GF(p^2) negation, a = -a in GF((2^127-1)^2)
    fpneg1271(a[0]);
    fpneg1271(a[1]);
}
    2af6:	4770      	bx	lr
    2af8:	7fffffff 	.word	0x7fffffff

00002afc <fp2sqr1271>:


void fp2sqr1271(f2elm_t a, f2elm_t c)
{// GF(p^2) squaring, c = a^2 in GF((2^127-1)^2)
    2afc:	b510      	push	{r4, lr}

    fp2sqr1271_a(a, c);
    2afe:	4b01      	ldr	r3, [pc, #4]	; (2b04 <fp2sqr1271+0x8>)
    2b00:	4798      	blx	r3
}
    2b02:	bd10      	pop	{r4, pc}
    2b04:	00003b2d 	.word	0x00003b2d

00002b08 <fp2mul1271>:


void fp2mul1271(f2elm_t a, f2elm_t b, f2elm_t c)
{// GF(p^2) multiplication, c = a*b in GF((2^127-1)^2)
    2b08:	b510      	push	{r4, lr}
       
    fp2mul1271_a(a, b, c);
    2b0a:	4b01      	ldr	r3, [pc, #4]	; (2b10 <fp2mul1271+0x8>)
    2b0c:	4798      	blx	r3
}
    2b0e:	bd10      	pop	{r4, pc}
    2b10:	00003841 	.word	0x00003841

00002b14 <fp2add1271>:


void fp2add1271(f2elm_t a, f2elm_t b, f2elm_t c)
{// GF(p^2) addition, c = a+b in GF((2^127-1)^2)
    2b14:	b510      	push	{r4, lr}

    fp2add1271_a(a, b, c);
    2b16:	4b01      	ldr	r3, [pc, #4]	; (2b1c <fp2add1271+0x8>)
    2b18:	4798      	blx	r3
}
    2b1a:	bd10      	pop	{r4, pc}
    2b1c:	00003cfd 	.word	0x00003cfd

00002b20 <fp2sub1271>:


void fp2sub1271(f2elm_t a, f2elm_t b, f2elm_t c)
{// GF(p^2) subtraction, c = a-b in GF((2^127-1)^2) 
    2b20:	b510      	push	{r4, lr}

    fp2sub1271_a(a, b, c); 
    2b22:	4b01      	ldr	r3, [pc, #4]	; (2b28 <fp2sub1271+0x8>)
    2b24:	4798      	blx	r3
}
    2b26:	bd10      	pop	{r4, pc}
    2b28:	00003d5b 	.word	0x00003d5b

00002b2c <fp2inv1271>:


void fp2inv1271(f2elm_t a)
{// GF(p^2) inversion, a = (a0-i*a1)/(a0^2+a1^2)
    2b2c:	b570      	push	{r4, r5, r6, lr}
    2b2e:	b088      	sub	sp, #32
    2b30:	0004      	movs	r4, r0
    f2elm_t t1;

    fpsqr1271(a[0], t1[0]);             // t10 = a0^2
    2b32:	4669      	mov	r1, sp
    2b34:	4e13      	ldr	r6, [pc, #76]	; (2b84 <fp2inv1271+0x58>)
    2b36:	47b0      	blx	r6
    fpsqr1271(a[1], t1[1]);             // t11 = a1^2
    2b38:	0025      	movs	r5, r4
    2b3a:	3510      	adds	r5, #16
    2b3c:	a904      	add	r1, sp, #16
    2b3e:	0028      	movs	r0, r5
    2b40:	47b0      	blx	r6
    fpadd1271_a(a, b, c);
    2b42:	466a      	mov	r2, sp
    2b44:	a904      	add	r1, sp, #16
    2b46:	4668      	mov	r0, sp
    2b48:	4b0f      	ldr	r3, [pc, #60]	; (2b88 <fp2inv1271+0x5c>)
    2b4a:	4798      	blx	r3
    fpadd1271(t1[0], t1[1], t1[0]);     // t10 = a0^2+a1^2
    fpinv1271(t1[0]);                   // t10 = (a0^2+a1^2)^-1
    2b4c:	4668      	mov	r0, sp
    2b4e:	4b0f      	ldr	r3, [pc, #60]	; (2b8c <fp2inv1271+0x60>)
    2b50:	4798      	blx	r3
        SUBC(borrow, prime1271_0, a[i], borrow, a[i]); 
    2b52:	6923      	ldr	r3, [r4, #16]
    2b54:	43db      	mvns	r3, r3
    2b56:	6123      	str	r3, [r4, #16]
    2b58:	6963      	ldr	r3, [r4, #20]
    2b5a:	43db      	mvns	r3, r3
    2b5c:	6163      	str	r3, [r4, #20]
    2b5e:	69a3      	ldr	r3, [r4, #24]
    2b60:	43db      	mvns	r3, r3
    2b62:	61a3      	str	r3, [r4, #24]
    a[NWORDS_FIELD-1] = prime1271_1 - a[NWORDS_FIELD-1];
    2b64:	4b0a      	ldr	r3, [pc, #40]	; (2b90 <fp2inv1271+0x64>)
    2b66:	69e2      	ldr	r2, [r4, #28]
    2b68:	1a9b      	subs	r3, r3, r2
    2b6a:	61e3      	str	r3, [r4, #28]
    fpneg1271(a[1]);                    // a = a0-i*a1
    fpmul1271(a[0], t1[0], a[0]);
    2b6c:	0022      	movs	r2, r4
    2b6e:	4669      	mov	r1, sp
    2b70:	0020      	movs	r0, r4
    2b72:	4c08      	ldr	r4, [pc, #32]	; (2b94 <fp2inv1271+0x68>)
    2b74:	47a0      	blx	r4
    fpmul1271(a[1], t1[0], a[1]);       // a = (a0-i*a1)*(a0^2+a1^2)^-1
    2b76:	002a      	movs	r2, r5
    2b78:	4669      	mov	r1, sp
    2b7a:	0028      	movs	r0, r5
    2b7c:	47a0      	blx	r4
}
    2b7e:	b008      	add	sp, #32
    2b80:	bd70      	pop	{r4, r5, r6, pc}
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	00001f0d 	.word	0x00001f0d
    2b88:	00003e89 	.word	0x00003e89
    2b8c:	00002205 	.word	0x00002205
    2b90:	7fffffff 	.word	0x7fffffff
    2b94:	00001ed5 	.word	0x00001ed5

00002b98 <clear_words>:
  // It has been tested with MSVS 2013 and GNU GCC 4.6.3, 4.7.3, 4.8.2 and 4.8.4. Users are responsible for verifying correctness with different compilers.  
  // See "Compliant Solution (C99)" at https://www.securecoding.cert.org/confluence/display/c/MSC06-C.+Beware+of+compiler+optimizations 
    unsigned int i;
    volatile unsigned int *v = mem;

    for (i = 0; i < nwords; i++)
    2b98:	2900      	cmp	r1, #0
    2b9a:	d006      	beq.n	2baa <clear_words+0x12>
    2b9c:	0003      	movs	r3, r0
    2b9e:	0089      	lsls	r1, r1, #2
    2ba0:	1840      	adds	r0, r0, r1
        v[i] = 0;
    2ba2:	2200      	movs	r2, #0
    2ba4:	c304      	stmia	r3!, {r2}
    for (i = 0; i < nwords; i++)
    2ba6:	4283      	cmp	r3, r0
    2ba8:	d1fc      	bne.n	2ba4 <clear_words+0xc>
}
    2baa:	4770      	bx	lr

00002bac <eccnorm>:
    fp2copy1271((felm_t*)&GENERATOR_y, P->y);    // Y1
}


void eccnorm(point_extproj_t P, point_t Q)
{ // Normalize a projective point (X1:Y1:Z1), including full reduction
    2bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bae:	b083      	sub	sp, #12
    2bb0:	0005      	movs	r5, r0
    2bb2:	000c      	movs	r4, r1
  // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates    
  // Output: Q = (X1/Z1,Y1/Z1), corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    
    fp2inv1271(P->z);                      // Z1 = Z1^-1
    2bb4:	0006      	movs	r6, r0
    2bb6:	3640      	adds	r6, #64	; 0x40
    2bb8:	0030      	movs	r0, r6
    2bba:	4b0f      	ldr	r3, [pc, #60]	; (2bf8 <eccnorm+0x4c>)
    2bbc:	4798      	blx	r3
    fp2mul1271_a(a, b, c);
    2bbe:	0022      	movs	r2, r4
    2bc0:	0031      	movs	r1, r6
    2bc2:	0028      	movs	r0, r5
    2bc4:	4f0d      	ldr	r7, [pc, #52]	; (2bfc <eccnorm+0x50>)
    2bc6:	47b8      	blx	r7
    fp2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    fp2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    2bc8:	2320      	movs	r3, #32
    2bca:	469c      	mov	ip, r3
    2bcc:	44a4      	add	ip, r4
    2bce:	4663      	mov	r3, ip
    2bd0:	0028      	movs	r0, r5
    2bd2:	3020      	adds	r0, #32
    fp2mul1271_a(a, b, c);
    2bd4:	9301      	str	r3, [sp, #4]
    2bd6:	4662      	mov	r2, ip
    2bd8:	0031      	movs	r1, r6
    2bda:	47b8      	blx	r7
    mod1271(Q->x[0]); mod1271(Q->x[1]); 
    2bdc:	0020      	movs	r0, r4
    2bde:	4d08      	ldr	r5, [pc, #32]	; (2c00 <eccnorm+0x54>)
    2be0:	47a8      	blx	r5
    2be2:	0022      	movs	r2, r4
    2be4:	3210      	adds	r2, #16
    2be6:	0010      	movs	r0, r2
    2be8:	47a8      	blx	r5
    mod1271(Q->y[0]); mod1271(Q->y[1]); 
    2bea:	9801      	ldr	r0, [sp, #4]
    2bec:	47a8      	blx	r5
    2bee:	0020      	movs	r0, r4
    2bf0:	3030      	adds	r0, #48	; 0x30
    2bf2:	47a8      	blx	r5
}
    2bf4:	b003      	add	sp, #12
    2bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bf8:	00002b2d 	.word	0x00002b2d
    2bfc:	00003841 	.word	0x00003841
    2c00:	00001f1d 	.word	0x00001f1d

00002c04 <R1_to_R2>:


void R1_to_R2(point_extproj_t P, point_extproj_precomp_t Q)
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT), where T = Ta*Tb
    2c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c06:	b083      	sub	sp, #12
    2c08:	0004      	movs	r4, r0
    2c0a:	000d      	movs	r5, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates

    fp2add1271(P->ta, P->ta, Q->t2);                  // T = 2*Ta
    2c0c:	3060      	adds	r0, #96	; 0x60
    2c0e:	2360      	movs	r3, #96	; 0x60
    2c10:	469c      	mov	ip, r3
    2c12:	448c      	add	ip, r1
    2c14:	4663      	mov	r3, ip
    fp2add1271_a(a, b, c);
    2c16:	9301      	str	r3, [sp, #4]
    2c18:	4662      	mov	r2, ip
    2c1a:	0001      	movs	r1, r0
    2c1c:	4e0f      	ldr	r6, [pc, #60]	; (2c5c <R1_to_R2+0x58>)
    2c1e:	47b0      	blx	r6
    fp2add1271(P->x, P->y, Q->xy);                    // QX = X+Y
    2c20:	0027      	movs	r7, r4
    2c22:	3720      	adds	r7, #32
    fp2add1271_a(a, b, c);
    2c24:	002a      	movs	r2, r5
    2c26:	0039      	movs	r1, r7
    2c28:	0020      	movs	r0, r4
    2c2a:	47b0      	blx	r6
    fp2sub1271(P->y, P->x, Q->yx);                    // QY = Y-X 
    2c2c:	002a      	movs	r2, r5
    2c2e:	3220      	adds	r2, #32
    fp2sub1271_a(a, b, c); 
    2c30:	0021      	movs	r1, r4
    2c32:	0038      	movs	r0, r7
    2c34:	4b0a      	ldr	r3, [pc, #40]	; (2c60 <R1_to_R2+0x5c>)
    2c36:	4798      	blx	r3
    fp2mul1271(Q->t2, P->tb, Q->t2);                  // T = 2*T
    2c38:	0021      	movs	r1, r4
    2c3a:	3180      	adds	r1, #128	; 0x80
    fp2mul1271_a(a, b, c);
    2c3c:	9801      	ldr	r0, [sp, #4]
    2c3e:	0002      	movs	r2, r0
    2c40:	4f08      	ldr	r7, [pc, #32]	; (2c64 <R1_to_R2+0x60>)
    2c42:	47b8      	blx	r7
    fp2add1271(P->z, P->z, Q->z2);                    // QZ = 2*Z
    2c44:	3440      	adds	r4, #64	; 0x40
    2c46:	0020      	movs	r0, r4
    2c48:	002a      	movs	r2, r5
    2c4a:	3240      	adds	r2, #64	; 0x40
    fp2add1271_a(a, b, c);
    2c4c:	0021      	movs	r1, r4
    2c4e:	47b0      	blx	r6
    fp2mul1271_a(a, b, c);
    2c50:	9801      	ldr	r0, [sp, #4]
    2c52:	0002      	movs	r2, r0
    2c54:	4904      	ldr	r1, [pc, #16]	; (2c68 <R1_to_R2+0x64>)
    2c56:	47b8      	blx	r7
    fp2mul1271(Q->t2, (felm_t*)&PARAMETER_d, Q->t2);  // QT = 2d*T
}
    2c58:	b003      	add	sp, #12
    2c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c5c:	00003cfd 	.word	0x00003cfd
    2c60:	00003d5b 	.word	0x00003d5b
    2c64:	00003841 	.word	0x00003841
    2c68:	00008468 	.word	0x00008468

00002c6c <R1_to_R3>:


__inline void R1_to_R3(point_extproj_t P, point_extproj_precomp_t Q)      
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T), where T = Ta*Tb 
    2c6c:	b570      	push	{r4, r5, r6, lr}
    2c6e:	0004      	movs	r4, r0
    2c70:	000d      	movs	r5, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,Z1,T1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates 
    
    fp2add1271(P->x, P->y, Q->xy);         // XQ = (X1+Y1) 
    2c72:	0006      	movs	r6, r0
    2c74:	3620      	adds	r6, #32
    fp2add1271_a(a, b, c);
    2c76:	000a      	movs	r2, r1
    2c78:	0031      	movs	r1, r6
    2c7a:	4b0b      	ldr	r3, [pc, #44]	; (2ca8 <R1_to_R3+0x3c>)
    2c7c:	4798      	blx	r3
    fp2sub1271(P->y, P->x, Q->yx);         // YQ = (Y1-X1) 
    2c7e:	002a      	movs	r2, r5
    2c80:	3220      	adds	r2, #32
    fp2sub1271_a(a, b, c); 
    2c82:	0021      	movs	r1, r4
    2c84:	0030      	movs	r0, r6
    2c86:	4b09      	ldr	r3, [pc, #36]	; (2cac <R1_to_R3+0x40>)
    2c88:	4798      	blx	r3
    fp2mul1271(P->ta, P->tb, Q->t2);       // TQ = T1
    2c8a:	002a      	movs	r2, r5
    2c8c:	3260      	adds	r2, #96	; 0x60
    2c8e:	0021      	movs	r1, r4
    2c90:	3180      	adds	r1, #128	; 0x80
    2c92:	0020      	movs	r0, r4
    2c94:	3060      	adds	r0, #96	; 0x60
    fp2mul1271_a(a, b, c);
    2c96:	4b06      	ldr	r3, [pc, #24]	; (2cb0 <R1_to_R3+0x44>)
    2c98:	4798      	blx	r3
    fp2copy1271(P->z, Q->z2);              // ZQ = Z1 
    2c9a:	0029      	movs	r1, r5
    2c9c:	3140      	adds	r1, #64	; 0x40
    2c9e:	0020      	movs	r0, r4
    2ca0:	3040      	adds	r0, #64	; 0x40
    2ca2:	4b04      	ldr	r3, [pc, #16]	; (2cb4 <R1_to_R3+0x48>)
    2ca4:	4798      	blx	r3
}
    2ca6:	bd70      	pop	{r4, r5, r6, pc}
    2ca8:	00003cfd 	.word	0x00003cfd
    2cac:	00003d5b 	.word	0x00003d5b
    2cb0:	00003841 	.word	0x00003841
    2cb4:	00002631 	.word	0x00002631

00002cb8 <R2_to_R4>:


void R2_to_R4(point_extproj_precomp_t P, point_extproj_t Q)      
{ // Conversion from representation (X+Y,Y-X,2Z,2dT) to (2X,2Y,2Z,2dT) 
    2cb8:	b570      	push	{r4, r5, r6, lr}
    2cba:	0004      	movs	r4, r0
    2cbc:	000d      	movs	r5, r1
  // Input:  P = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (2X1,2Y1,2Z1) corresponding to (X1:Y1:Z1) in twisted Edwards coordinates 
    
    fp2sub1271(P->xy, P->yx, Q->x);        // XQ = 2*X1
    2cbe:	0006      	movs	r6, r0
    2cc0:	3620      	adds	r6, #32
    fp2sub1271_a(a, b, c); 
    2cc2:	000a      	movs	r2, r1
    2cc4:	0031      	movs	r1, r6
    2cc6:	4b07      	ldr	r3, [pc, #28]	; (2ce4 <R2_to_R4+0x2c>)
    2cc8:	4798      	blx	r3
    fp2add1271(P->xy, P->yx, Q->y);        // YQ = 2*Y1
    2cca:	002a      	movs	r2, r5
    2ccc:	3220      	adds	r2, #32
    fp2add1271_a(a, b, c);
    2cce:	0031      	movs	r1, r6
    2cd0:	0020      	movs	r0, r4
    2cd2:	4b05      	ldr	r3, [pc, #20]	; (2ce8 <R2_to_R4+0x30>)
    2cd4:	4798      	blx	r3
    fp2copy1271(P->z2, Q->z);              // ZQ = 2*Z1
    2cd6:	0029      	movs	r1, r5
    2cd8:	3140      	adds	r1, #64	; 0x40
    2cda:	0020      	movs	r0, r4
    2cdc:	3040      	adds	r0, #64	; 0x40
    2cde:	4b03      	ldr	r3, [pc, #12]	; (2cec <R2_to_R4+0x34>)
    2ce0:	4798      	blx	r3
}
    2ce2:	bd70      	pop	{r4, r5, r6, pc}
    2ce4:	00003d5b 	.word	0x00003d5b
    2ce8:	00003cfd 	.word	0x00003cfd
    2cec:	00002631 	.word	0x00002631

00002cf0 <eccdouble>:


void eccdouble(point_extproj_t P)
{ // Point doubling 2P
    2cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cf2:	b095      	sub	sp, #84	; 0x54
    2cf4:	0004      	movs	r4, r0
    fp2sqr1271_a(a, c);
    2cf6:	a90c      	add	r1, sp, #48	; 0x30
    2cf8:	4d25      	ldr	r5, [pc, #148]	; (2d90 <eccdouble+0xa0>)
    2cfa:	47a8      	blx	r5
  // Output: 2P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    f2elm_t t1, t2;  

    fp2sqr1271(P->x, t1);                  // t1 = X1^2
    fp2sqr1271(P->y, t2);                  // t2 = Y1^2
    2cfc:	2320      	movs	r3, #32
    2cfe:	469c      	mov	ip, r3
    2d00:	44a4      	add	ip, r4
    2d02:	4663      	mov	r3, ip
    2d04:	4666      	mov	r6, ip
    fp2sqr1271_a(a, c);
    2d06:	a904      	add	r1, sp, #16
    2d08:	0018      	movs	r0, r3
    2d0a:	47a8      	blx	r5
    fp2add1271_a(a, b, c);
    2d0c:	0022      	movs	r2, r4
    2d0e:	9600      	str	r6, [sp, #0]
    2d10:	0031      	movs	r1, r6
    2d12:	0020      	movs	r0, r4
    2d14:	4f1f      	ldr	r7, [pc, #124]	; (2d94 <eccdouble+0xa4>)
    2d16:	47b8      	blx	r7
    fp2add1271(P->x, P->y, P->x);          // t3 = X1+Y1
    fp2add1271(t1, t2, P->tb);             // Tbfinal = X1^2+Y1^2      
    2d18:	2380      	movs	r3, #128	; 0x80
    2d1a:	469c      	mov	ip, r3
    2d1c:	44a4      	add	ip, r4
    2d1e:	4663      	mov	r3, ip
    fp2add1271_a(a, b, c);
    2d20:	9301      	str	r3, [sp, #4]
    2d22:	4662      	mov	r2, ip
    2d24:	a904      	add	r1, sp, #16
    2d26:	a80c      	add	r0, sp, #48	; 0x30
    2d28:	47b8      	blx	r7
    fp2sub1271_a(a, b, c); 
    2d2a:	aa0c      	add	r2, sp, #48	; 0x30
    2d2c:	0011      	movs	r1, r2
    2d2e:	a804      	add	r0, sp, #16
    2d30:	4e19      	ldr	r6, [pc, #100]	; (2d98 <eccdouble+0xa8>)
    2d32:	47b0      	blx	r6
    fp2sub1271(t2, t1, t1);                // t1 = Y1^2-X1^2  
    fp2sqr1271(P->z, t2);                  // t2 = Z1^2       
    2d34:	2140      	movs	r1, #64	; 0x40
    2d36:	468c      	mov	ip, r1
    2d38:	44a4      	add	ip, r4
    2d3a:	4660      	mov	r0, ip
    fp2sqr1271_a(a, c);
    2d3c:	a904      	add	r1, sp, #16
    2d3e:	9002      	str	r0, [sp, #8]
    2d40:	47a8      	blx	r5
    fp2sqr1271(P->x, P->ta);               // Ta = (X1+Y1)^2 
    2d42:	2160      	movs	r1, #96	; 0x60
    2d44:	468c      	mov	ip, r1
    2d46:	44a4      	add	ip, r4
    2d48:	4663      	mov	r3, ip
    fp2sqr1271_a(a, c);
    2d4a:	9303      	str	r3, [sp, #12]
    2d4c:	4661      	mov	r1, ip
    2d4e:	0020      	movs	r0, r4
    2d50:	47a8      	blx	r5
    fp2add1271_a(a, b, c);
    2d52:	aa04      	add	r2, sp, #16
    2d54:	0011      	movs	r1, r2
    2d56:	0010      	movs	r0, r2
    2d58:	47b8      	blx	r7
    fp2sub1271_a(a, b, c); 
    2d5a:	9d03      	ldr	r5, [sp, #12]
    2d5c:	002a      	movs	r2, r5
    2d5e:	9f01      	ldr	r7, [sp, #4]
    2d60:	0039      	movs	r1, r7
    2d62:	0028      	movs	r0, r5
    2d64:	47b0      	blx	r6
    2d66:	aa04      	add	r2, sp, #16
    2d68:	a90c      	add	r1, sp, #48	; 0x30
    2d6a:	0010      	movs	r0, r2
    2d6c:	47b0      	blx	r6
    fp2mul1271_a(a, b, c);
    2d6e:	9a00      	ldr	r2, [sp, #0]
    2d70:	0039      	movs	r1, r7
    2d72:	ab0c      	add	r3, sp, #48	; 0x30
    2d74:	0018      	movs	r0, r3
    2d76:	4e09      	ldr	r6, [pc, #36]	; (2d9c <eccdouble+0xac>)
    2d78:	47b0      	blx	r6
    2d7a:	0022      	movs	r2, r4
    2d7c:	0029      	movs	r1, r5
    2d7e:	a804      	add	r0, sp, #16
    2d80:	47b0      	blx	r6
    2d82:	9a02      	ldr	r2, [sp, #8]
    2d84:	a904      	add	r1, sp, #16
    2d86:	a80c      	add	r0, sp, #48	; 0x30
    2d88:	47b0      	blx	r6
    fp2sub1271(P->ta, P->tb, P->ta);       // Tafinal = 2X1*Y1 = (X1+Y1)^2-(X1^2+Y1^2) 
    fp2sub1271(t2, t1, t2);                // t2 = 2Z1^2-(Y1^2-X1^2) 
    fp2mul1271(t1, P->tb, P->y);           // Yfinal = (X1^2+Y1^2)(Y1^2-X1^2)  
    fp2mul1271(t2, P->ta, P->x);           // Xfinal = 2X1*Y1*[2Z1^2-(Y1^2-X1^2)]
    fp2mul1271(t1, t2, P->z);              // Zfinal = (Y1^2-X1^2)[2Z1^2-(Y1^2-X1^2)]
}
    2d8a:	b015      	add	sp, #84	; 0x54
    2d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d8e:	46c0      	nop			; (mov r8, r8)
    2d90:	00003b2d 	.word	0x00003b2d
    2d94:	00003cfd 	.word	0x00003cfd
    2d98:	00003d5b 	.word	0x00003d5b
    2d9c:	00003841 	.word	0x00003841

00002da0 <eccadd_core>:


__inline void eccadd_core(point_extproj_precomp_t P, point_extproj_precomp_t Q, point_extproj_t R)      
{ // Basic point addition R = P+Q or R = P+P
    2da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2da2:	b095      	sub	sp, #84	; 0x54
    2da4:	0006      	movs	r6, r0
    2da6:	000f      	movs	r7, r1
    2da8:	0015      	movs	r5, r2
  //         Q = (X2+Y2,Y2-X2,Z2,T2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates    
  // Output: R = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    f2elm_t t1, t2; 
          
    fp2mul1271(P->t2, Q->t2, R->z);        // Z = 2dT1*T2 
    2daa:	2340      	movs	r3, #64	; 0x40
    2dac:	469c      	mov	ip, r3
    2dae:	4494      	add	ip, r2
    2db0:	4663      	mov	r3, ip
    2db2:	3160      	adds	r1, #96	; 0x60
    2db4:	3060      	adds	r0, #96	; 0x60
    fp2mul1271_a(a, b, c);
    2db6:	9301      	str	r3, [sp, #4]
    2db8:	4662      	mov	r2, ip
    2dba:	4c20      	ldr	r4, [pc, #128]	; (2e3c <eccadd_core+0x9c>)
    2dbc:	47a0      	blx	r4
    fp2mul1271(P->z2, Q->z2, t1);          // t1 = 2Z1*Z2  
    2dbe:	0039      	movs	r1, r7
    2dc0:	3140      	adds	r1, #64	; 0x40
    2dc2:	0030      	movs	r0, r6
    2dc4:	3040      	adds	r0, #64	; 0x40
    fp2mul1271_a(a, b, c);
    2dc6:	aa0c      	add	r2, sp, #48	; 0x30
    2dc8:	47a0      	blx	r4
    2dca:	002a      	movs	r2, r5
    2dcc:	0039      	movs	r1, r7
    2dce:	0030      	movs	r0, r6
    2dd0:	47a0      	blx	r4
    fp2mul1271(P->xy, Q->xy, R->x);        // X = (X1+Y1)(X2+Y2) 
    fp2mul1271(P->yx, Q->yx, R->y);        // Y = (Y1-X1)(Y2-X2) 
    2dd2:	2220      	movs	r2, #32
    2dd4:	4694      	mov	ip, r2
    2dd6:	44ac      	add	ip, r5
    2dd8:	4662      	mov	r2, ip
    2dda:	0039      	movs	r1, r7
    2ddc:	3120      	adds	r1, #32
    2dde:	0030      	movs	r0, r6
    2de0:	3020      	adds	r0, #32
    fp2mul1271_a(a, b, c);
    2de2:	9202      	str	r2, [sp, #8]
    2de4:	47a0      	blx	r4
    fp2sub1271_a(a, b, c); 
    2de6:	aa04      	add	r2, sp, #16
    2de8:	9f01      	ldr	r7, [sp, #4]
    2dea:	0039      	movs	r1, r7
    2dec:	a80c      	add	r0, sp, #48	; 0x30
    2dee:	4e14      	ldr	r6, [pc, #80]	; (2e40 <eccadd_core+0xa0>)
    2df0:	47b0      	blx	r6
    fp2add1271_a(a, b, c);
    2df2:	ab0c      	add	r3, sp, #48	; 0x30
    2df4:	001a      	movs	r2, r3
    2df6:	9701      	str	r7, [sp, #4]
    2df8:	0039      	movs	r1, r7
    2dfa:	0018      	movs	r0, r3
    2dfc:	4f11      	ldr	r7, [pc, #68]	; (2e44 <eccadd_core+0xa4>)
    2dfe:	47b8      	blx	r7
    fp2sub1271(t1, R->z, t2);              // t2 = theta
    fp2add1271(t1, R->z, t1);              // t1 = alpha
    fp2sub1271(R->x, R->y, R->tb);         // Tbfinal = beta
    2e00:	2380      	movs	r3, #128	; 0x80
    2e02:	469c      	mov	ip, r3
    2e04:	44ac      	add	ip, r5
    2e06:	4663      	mov	r3, ip
    fp2sub1271_a(a, b, c); 
    2e08:	9303      	str	r3, [sp, #12]
    2e0a:	4662      	mov	r2, ip
    2e0c:	9902      	ldr	r1, [sp, #8]
    2e0e:	0028      	movs	r0, r5
    2e10:	47b0      	blx	r6
    fp2add1271(R->x, R->y, R->ta);         // Tafinal = omega
    2e12:	002e      	movs	r6, r5
    2e14:	3660      	adds	r6, #96	; 0x60
    fp2add1271_a(a, b, c);
    2e16:	0032      	movs	r2, r6
    2e18:	9902      	ldr	r1, [sp, #8]
    2e1a:	0028      	movs	r0, r5
    2e1c:	47b8      	blx	r7
    fp2mul1271_a(a, b, c);
    2e1e:	002a      	movs	r2, r5
    2e20:	a904      	add	r1, sp, #16
    2e22:	9803      	ldr	r0, [sp, #12]
    2e24:	47a0      	blx	r4
    2e26:	9a01      	ldr	r2, [sp, #4]
    2e28:	a904      	add	r1, sp, #16
    2e2a:	a80c      	add	r0, sp, #48	; 0x30
    2e2c:	47a0      	blx	r4
    2e2e:	9a02      	ldr	r2, [sp, #8]
    2e30:	a90c      	add	r1, sp, #48	; 0x30
    2e32:	0030      	movs	r0, r6
    2e34:	47a0      	blx	r4
    fp2mul1271(R->tb, t2, R->x);           // Xfinal = beta*theta
    fp2mul1271(t1, t2, R->z);              // Zfinal = theta*alpha
    fp2mul1271(R->ta, t1, R->y);           // Yfinal = alpha*omega
}
    2e36:	b015      	add	sp, #84	; 0x54
    2e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	00003841 	.word	0x00003841
    2e40:	00003d5b 	.word	0x00003d5b
    2e44:	00003cfd 	.word	0x00003cfd

00002e48 <eccadd>:


void eccadd(point_extproj_precomp_t Q, point_extproj_t P)      
{ // Complete point addition P = P+Q or P = P+P
    2e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e4a:	46ce      	mov	lr, r9
    2e4c:	b500      	push	{lr}
    2e4e:	b0b4      	sub	sp, #208	; 0xd0
    2e50:	4681      	mov	r9, r0
    2e52:	000c      	movs	r4, r1
    fp2add1271(P->x, P->y, Q->xy);         // XQ = (X1+Y1) 
    2e54:	2320      	movs	r3, #32
    2e56:	469c      	mov	ip, r3
    2e58:	448c      	add	ip, r1
    2e5a:	4663      	mov	r3, ip
    2e5c:	4665      	mov	r5, ip
    fp2add1271_a(a, b, c);
    2e5e:	aa14      	add	r2, sp, #80	; 0x50
    2e60:	0019      	movs	r1, r3
    2e62:	0020      	movs	r0, r4
    2e64:	4e29      	ldr	r6, [pc, #164]	; (2f0c <eccadd+0xc4>)
    2e66:	47b0      	blx	r6
    fp2sub1271_a(a, b, c); 
    2e68:	aa1c      	add	r2, sp, #112	; 0x70
    2e6a:	0021      	movs	r1, r4
    2e6c:	9501      	str	r5, [sp, #4]
    2e6e:	0028      	movs	r0, r5
    2e70:	4d27      	ldr	r5, [pc, #156]	; (2f10 <eccadd+0xc8>)
    2e72:	47a8      	blx	r5
    fp2mul1271(P->ta, P->tb, Q->t2);       // TQ = T1
    2e74:	2260      	movs	r2, #96	; 0x60
    2e76:	4694      	mov	ip, r2
    2e78:	44a4      	add	ip, r4
    2e7a:	4660      	mov	r0, ip
    2e7c:	2280      	movs	r2, #128	; 0x80
    2e7e:	4694      	mov	ip, r2
    2e80:	44a4      	add	ip, r4
    2e82:	4661      	mov	r1, ip
    fp2mul1271_a(a, b, c);
    2e84:	aa2c      	add	r2, sp, #176	; 0xb0
    2e86:	9103      	str	r1, [sp, #12]
    2e88:	9002      	str	r0, [sp, #8]
    2e8a:	4f22      	ldr	r7, [pc, #136]	; (2f14 <eccadd+0xcc>)
    2e8c:	47b8      	blx	r7
    fp2copy1271(P->z, Q->z2);              // ZQ = Z1 
    2e8e:	2340      	movs	r3, #64	; 0x40
    2e90:	469c      	mov	ip, r3
    2e92:	44a4      	add	ip, r4
    2e94:	4662      	mov	r2, ip
    2e96:	a924      	add	r1, sp, #144	; 0x90
    2e98:	9200      	str	r2, [sp, #0]
    2e9a:	4660      	mov	r0, ip
    2e9c:	4b1e      	ldr	r3, [pc, #120]	; (2f18 <eccadd+0xd0>)
    2e9e:	4798      	blx	r3
    fp2mul1271(P->t2, Q->t2, R->z);        // Z = 2dT1*T2 
    2ea0:	4648      	mov	r0, r9
    2ea2:	3060      	adds	r0, #96	; 0x60
    fp2mul1271_a(a, b, c);
    2ea4:	9a00      	ldr	r2, [sp, #0]
    2ea6:	a92c      	add	r1, sp, #176	; 0xb0
    2ea8:	47b8      	blx	r7
    fp2mul1271(P->z2, Q->z2, t1);          // t1 = 2Z1*Z2  
    2eaa:	4648      	mov	r0, r9
    2eac:	3040      	adds	r0, #64	; 0x40
    fp2mul1271_a(a, b, c);
    2eae:	aa04      	add	r2, sp, #16
    2eb0:	a924      	add	r1, sp, #144	; 0x90
    2eb2:	47b8      	blx	r7
    2eb4:	0022      	movs	r2, r4
    2eb6:	a914      	add	r1, sp, #80	; 0x50
    2eb8:	4648      	mov	r0, r9
    2eba:	47b8      	blx	r7
    fp2mul1271(P->yx, Q->yx, R->y);        // Y = (Y1-X1)(Y2-X2) 
    2ebc:	4648      	mov	r0, r9
    2ebe:	3020      	adds	r0, #32
    fp2mul1271_a(a, b, c);
    2ec0:	9a01      	ldr	r2, [sp, #4]
    2ec2:	a91c      	add	r1, sp, #112	; 0x70
    2ec4:	47b8      	blx	r7
    fp2sub1271_a(a, b, c); 
    2ec6:	ab0c      	add	r3, sp, #48	; 0x30
    2ec8:	001a      	movs	r2, r3
    2eca:	9900      	ldr	r1, [sp, #0]
    2ecc:	a804      	add	r0, sp, #16
    2ece:	47a8      	blx	r5
    fp2add1271_a(a, b, c);
    2ed0:	aa04      	add	r2, sp, #16
    2ed2:	9900      	ldr	r1, [sp, #0]
    2ed4:	0010      	movs	r0, r2
    2ed6:	47b0      	blx	r6
    fp2sub1271_a(a, b, c); 
    2ed8:	9a03      	ldr	r2, [sp, #12]
    2eda:	9901      	ldr	r1, [sp, #4]
    2edc:	0020      	movs	r0, r4
    2ede:	47a8      	blx	r5
    fp2add1271_a(a, b, c);
    2ee0:	9a02      	ldr	r2, [sp, #8]
    2ee2:	9d01      	ldr	r5, [sp, #4]
    2ee4:	0029      	movs	r1, r5
    2ee6:	0020      	movs	r0, r4
    2ee8:	47b0      	blx	r6
    fp2mul1271_a(a, b, c);
    2eea:	0022      	movs	r2, r4
    2eec:	a90c      	add	r1, sp, #48	; 0x30
    2eee:	9803      	ldr	r0, [sp, #12]
    2ef0:	47b8      	blx	r7
    2ef2:	9a00      	ldr	r2, [sp, #0]
    2ef4:	a90c      	add	r1, sp, #48	; 0x30
    2ef6:	a804      	add	r0, sp, #16
    2ef8:	47b8      	blx	r7
    2efa:	002a      	movs	r2, r5
    2efc:	a904      	add	r1, sp, #16
    2efe:	9802      	ldr	r0, [sp, #8]
    2f00:	47b8      	blx	r7
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    point_extproj_precomp_t R;
    
    R1_to_R3(P, R);                        // R = (X1+Y1,Y1-Z1,Z1,T1)
    eccadd_core(Q, R, P);                  // P = (X2+Y2,Y2-X2,2Z2,2dT2) + (X1+Y1,Y1-Z1,Z1,T1)
}
    2f02:	b034      	add	sp, #208	; 0xd0
    2f04:	bc04      	pop	{r2}
    2f06:	4691      	mov	r9, r2
    2f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	00003cfd 	.word	0x00003cfd
    2f10:	00003d5b 	.word	0x00003d5b
    2f14:	00003841 	.word	0x00003841
    2f18:	00002631 	.word	0x00002631

00002f1c <point_setup>:


void point_setup(point_t P, point_extproj_t Q)
{ // Point conversion to representation (X,Y,Z,Ta,Tb) 
    2f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f1e:	0006      	movs	r6, r0
    2f20:	000c      	movs	r4, r1
  // Input: P = (x,y) in affine coordinates
  // Output: P = (X,Y,1,Ta,Tb), where Ta=X, Tb=Y and T=Ta*Tb, corresponding to (X:Y:Z:T) in extended twisted Edwards coordinates

    fp2copy1271(P->x, Q->x);
    2f22:	4d0b      	ldr	r5, [pc, #44]	; (2f50 <point_setup+0x34>)
    2f24:	47a8      	blx	r5
    fp2copy1271(P->y, Q->y);
    2f26:	0027      	movs	r7, r4
    2f28:	3720      	adds	r7, #32
    2f2a:	0030      	movs	r0, r6
    2f2c:	3020      	adds	r0, #32
    2f2e:	0039      	movs	r1, r7
    2f30:	47a8      	blx	r5
    fp2copy1271(Q->x, Q->ta);              // Ta = X1
    2f32:	0021      	movs	r1, r4
    2f34:	3160      	adds	r1, #96	; 0x60
    2f36:	0020      	movs	r0, r4
    2f38:	47a8      	blx	r5
    fp2copy1271(Q->y, Q->tb);              // Tb = Y1
    2f3a:	0021      	movs	r1, r4
    2f3c:	3180      	adds	r1, #128	; 0x80
    2f3e:	0038      	movs	r0, r7
    2f40:	47a8      	blx	r5
    fp2zero1271(Q->z); Q->z[0][0]=1;       // Z1 = 1
    2f42:	0020      	movs	r0, r4
    2f44:	3040      	adds	r0, #64	; 0x40
    2f46:	4b03      	ldr	r3, [pc, #12]	; (2f54 <point_setup+0x38>)
    2f48:	4798      	blx	r3
    2f4a:	2301      	movs	r3, #1
    2f4c:	6423      	str	r3, [r4, #64]	; 0x40
}
    2f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f50:	00002631 	.word	0x00002631
    2f54:	00002ab1 	.word	0x00002ab1

00002f58 <ecc_point_validate>:


bool ecc_point_validate(point_extproj_t P)
{ // Point validation: check if point lies on the curve
    2f58:	b570      	push	{r4, r5, r6, lr}
    2f5a:	b098      	sub	sp, #96	; 0x60
    2f5c:	0005      	movs	r5, r0
  // Input: P = (x,y) in affine coordinates, where x, y in [0, 2^127-1]. 
  // Output: TRUE (1) if point lies on the curve E: -x^2+y^2-1-dx^2*y^2 = 0, FALSE (0) otherwise. 
  // SECURITY NOTE: this function does not run in constant time (input point P is assumed to be public).
    f2elm_t t1, t2, t3;

    fp2sqr1271(P->y, t1);
    2f5e:	3020      	adds	r0, #32
    fp2sqr1271_a(a, c);
    2f60:	a910      	add	r1, sp, #64	; 0x40
    2f62:	4c2a      	ldr	r4, [pc, #168]	; (300c <ecc_point_validate+0xb4>)
    2f64:	47a0      	blx	r4
    2f66:	a908      	add	r1, sp, #32
    2f68:	0028      	movs	r0, r5
    2f6a:	47a0      	blx	r4
    fp2sub1271_a(a, b, c); 
    2f6c:	466a      	mov	r2, sp
    2f6e:	a908      	add	r1, sp, #32
    2f70:	a810      	add	r0, sp, #64	; 0x40
    2f72:	4c27      	ldr	r4, [pc, #156]	; (3010 <ecc_point_validate+0xb8>)
    2f74:	47a0      	blx	r4
    fp2mul1271_a(a, b, c);
    2f76:	aa10      	add	r2, sp, #64	; 0x40
    2f78:	a908      	add	r1, sp, #32
    2f7a:	0010      	movs	r0, r2
    2f7c:	4d25      	ldr	r5, [pc, #148]	; (3014 <ecc_point_validate+0xbc>)
    2f7e:	47a8      	blx	r5
    2f80:	aa08      	add	r2, sp, #32
    2f82:	a910      	add	r1, sp, #64	; 0x40
    2f84:	4824      	ldr	r0, [pc, #144]	; (3018 <ecc_point_validate+0xc0>)
    2f86:	47a8      	blx	r5
    fp2sqr1271(P->x, t2);
    fp2sub1271(t1, t2, t3);                     // -x^2 + y^2 
    fp2mul1271(t1, t2, t1);                     // x^2*y^2
    fp2mul1271((felm_t*)&PARAMETER_d, t1, t2);  // dx^2*y^2
    fp2zero1271(t1);  t1[0][0] = 1;             // t1 = 1
    2f88:	a810      	add	r0, sp, #64	; 0x40
    2f8a:	4b24      	ldr	r3, [pc, #144]	; (301c <ecc_point_validate+0xc4>)
    2f8c:	4798      	blx	r3
    2f8e:	2301      	movs	r3, #1
    2f90:	9310      	str	r3, [sp, #64]	; 0x40
    fp2add1271_a(a, b, c);
    2f92:	aa08      	add	r2, sp, #32
    2f94:	a910      	add	r1, sp, #64	; 0x40
    2f96:	0010      	movs	r0, r2
    2f98:	4b21      	ldr	r3, [pc, #132]	; (3020 <ecc_point_validate+0xc8>)
    2f9a:	4798      	blx	r3
    fp2sub1271_a(a, b, c); 
    2f9c:	aa10      	add	r2, sp, #64	; 0x40
    2f9e:	a908      	add	r1, sp, #32
    2fa0:	4668      	mov	r0, sp
    2fa2:	47a0      	blx	r4
    fp2add1271(t2, t1, t2);                     // 1 + dx^2*y^2
    fp2sub1271(t3, t2, t1);                     // -x^2 + y^2 - 1 - dx^2*y^2 
    
    return ((is_digit_zero_ct(t1[0][0] | t1[0][1] | t1[0][2] | t1[0][3]) || is_digit_zero_ct((t1[0][0]+1) | (t1[0][1]+1) | (t1[0][2]+1) | (t1[0][3]+1))) &&
    2fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2fa6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    2fa8:	9c12      	ldr	r4, [sp, #72]	; 0x48
    2faa:	9813      	ldr	r0, [sp, #76]	; 0x4c
    2fac:	0013      	movs	r3, r2
    2fae:	432b      	orrs	r3, r5
    2fb0:	4323      	orrs	r3, r4
    2fb2:	4303      	orrs	r3, r0
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    2fb4:	4259      	negs	r1, r3
    2fb6:	430b      	orrs	r3, r1
    2fb8:	d40e      	bmi.n	2fd8 <ecc_point_validate+0x80>
            (is_digit_zero_ct(t1[1][0] | t1[1][1] | t1[1][2] | t1[1][3]) || is_digit_zero_ct((t1[1][0]+1) | (t1[1][1]+1) | (t1[1][2]+1) | (t1[1][3]+1))));
    2fba:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2fbc:	9e15      	ldr	r6, [sp, #84]	; 0x54
    2fbe:	9d16      	ldr	r5, [sp, #88]	; 0x58
    2fc0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    2fc2:	0013      	movs	r3, r2
    2fc4:	4333      	orrs	r3, r6
    2fc6:	432b      	orrs	r3, r5
    2fc8:	4323      	orrs	r3, r4
    2fca:	4259      	negs	r1, r3
    2fcc:	430b      	orrs	r3, r1
    return ((is_digit_zero_ct(t1[0][0] | t1[0][1] | t1[0][2] | t1[0][3]) || is_digit_zero_ct((t1[0][0]+1) | (t1[0][1]+1) | (t1[0][2]+1) | (t1[0][3]+1))) &&
    2fce:	2001      	movs	r0, #1
    2fd0:	2b00      	cmp	r3, #0
    2fd2:	db0d      	blt.n	2ff0 <ecc_point_validate+0x98>
}
    2fd4:	b018      	add	sp, #96	; 0x60
    2fd6:	bd70      	pop	{r4, r5, r6, pc}
    return ((is_digit_zero_ct(t1[0][0] | t1[0][1] | t1[0][2] | t1[0][3]) || is_digit_zero_ct((t1[0][0]+1) | (t1[0][1]+1) | (t1[0][2]+1) | (t1[0][3]+1))) &&
    2fd8:	3201      	adds	r2, #1
    2fda:	3501      	adds	r5, #1
    2fdc:	432a      	orrs	r2, r5
    2fde:	3401      	adds	r4, #1
    2fe0:	4322      	orrs	r2, r4
    2fe2:	3001      	adds	r0, #1
    2fe4:	4302      	orrs	r2, r0
    2fe6:	4253      	negs	r3, r2
    2fe8:	431a      	orrs	r2, r3
    2fea:	d5e6      	bpl.n	2fba <ecc_point_validate+0x62>
    2fec:	2000      	movs	r0, #0
    2fee:	e7f1      	b.n	2fd4 <ecc_point_validate+0x7c>
            (is_digit_zero_ct(t1[1][0] | t1[1][1] | t1[1][2] | t1[1][3]) || is_digit_zero_ct((t1[1][0]+1) | (t1[1][1]+1) | (t1[1][2]+1) | (t1[1][3]+1))));
    2ff0:	3201      	adds	r2, #1
    2ff2:	3601      	adds	r6, #1
    2ff4:	4332      	orrs	r2, r6
    2ff6:	1c68      	adds	r0, r5, #1
    2ff8:	4310      	orrs	r0, r2
    2ffa:	1c62      	adds	r2, r4, #1
    2ffc:	4302      	orrs	r2, r0
    2ffe:	4250      	negs	r0, r2
    3000:	4310      	orrs	r0, r2
    3002:	0fc0      	lsrs	r0, r0, #31
    3004:	3801      	subs	r0, #1
    return ((is_digit_zero_ct(t1[0][0] | t1[0][1] | t1[0][2] | t1[0][3]) || is_digit_zero_ct((t1[0][0]+1) | (t1[0][1]+1) | (t1[0][2]+1) | (t1[0][3]+1))) &&
    3006:	1e43      	subs	r3, r0, #1
    3008:	4198      	sbcs	r0, r3
    300a:	e7e3      	b.n	2fd4 <ecc_point_validate+0x7c>
    300c:	00003b2d 	.word	0x00003b2d
    3010:	00003d5b 	.word	0x00003d5b
    3014:	00003841 	.word	0x00003841
    3018:	00008468 	.word	0x00008468
    301c:	00002ab1 	.word	0x00002ab1
    3020:	00003cfd 	.word	0x00003cfd

00003024 <mLSB_set_recode>:
    return true;
}


void mLSB_set_recode(uint64_t* scalar, unsigned int *digits)
{ // Computes the modified LSB-set representation of a scalar
    3024:	b5f0      	push	{r4, r5, r6, r7, lr}
    3026:	46de      	mov	lr, fp
    3028:	4657      	mov	r7, sl
    302a:	464e      	mov	r6, r9
    302c:	4645      	mov	r5, r8
    302e:	b5e0      	push	{r5, r6, r7, lr}
    3030:	b087      	sub	sp, #28
    3032:	0005      	movs	r5, r0
    3034:	468b      	mov	fp, r1
  //         where l = d*w and d = ceil(bitlength(order)/(w*v))*v. The values v and w are fixed and must be in the range [1, 10] (see FourQ.h); they determine the size 
  //         of the precomputed table "FIXED_BASE_TABLE" used by ecc_mul_fixed(). 
    unsigned int i, j, d = D_FIXEDBASE, l = L_FIXEDBASE;
    uint64_t temp, carry;
    
    digits[d-1] = 0;
    3036:	2200      	movs	r2, #0
    3038:	23c4      	movs	r3, #196	; 0xc4
    303a:	50ca      	str	r2, [r1, r3]
    303c:	9004      	str	r0, [sp, #16]
    303e:	0004      	movs	r4, r0
    3040:	3418      	adds	r4, #24
    3042:	0003      	movs	r3, r0

    // Shift scalar to the right by 1   
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
        SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    3044:	685a      	ldr	r2, [r3, #4]
    3046:	07d0      	lsls	r0, r2, #31
    3048:	6819      	ldr	r1, [r3, #0]
    304a:	0849      	lsrs	r1, r1, #1
    304c:	4301      	orrs	r1, r0
    304e:	0852      	lsrs	r2, r2, #1
    3050:	6898      	ldr	r0, [r3, #8]
    3052:	07c0      	lsls	r0, r0, #31
    3054:	6019      	str	r1, [r3, #0]
    3056:	4042      	eors	r2, r0
    3058:	605a      	str	r2, [r3, #4]
    305a:	3308      	adds	r3, #8
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    305c:	42a3      	cmp	r3, r4
    305e:	d1f1      	bne.n	3044 <mLSB_set_recode+0x20>
    3060:	4699      	mov	r9, r3
    }
    scalar[NWORDS64_ORDER-1] >>= 1;
    3062:	69ea      	ldr	r2, [r5, #28]
    3064:	07d1      	lsls	r1, r2, #31
    3066:	69ab      	ldr	r3, [r5, #24]
    3068:	085b      	lsrs	r3, r3, #1
    306a:	430b      	orrs	r3, r1
    306c:	61ab      	str	r3, [r5, #24]
    306e:	0852      	lsrs	r2, r2, #1
    3070:	61ea      	str	r2, [r5, #28]
    3072:	4659      	mov	r1, fp
    3074:	23c4      	movs	r3, #196	; 0xc4
    3076:	445b      	add	r3, fp
    3078:	4698      	mov	r8, r3

    for (i = 0; i < (d-1); i++)
    {
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    307a:	2301      	movs	r3, #1
    307c:	469c      	mov	ip, r3
    307e:	9600      	str	r6, [sp, #0]
    3080:	9701      	str	r7, [sp, #4]
    3082:	4648      	mov	r0, r9
    3084:	e00a      	b.n	309c <mLSB_set_recode+0x78>
                                                          // if scalar_(i+1) = 0 then digit_i = -1 (negative), else if scalar_(i+1) = 1 then digit_i = 0 (positive)
        // Shift scalar to the right by 1   
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    3086:	69ef      	ldr	r7, [r5, #28]
    3088:	07fb      	lsls	r3, r7, #31
    308a:	69aa      	ldr	r2, [r5, #24]
    308c:	0852      	lsrs	r2, r2, #1
    308e:	431a      	orrs	r2, r3
    3090:	61aa      	str	r2, [r5, #24]
    3092:	087b      	lsrs	r3, r7, #1
    3094:	61eb      	str	r3, [r5, #28]
    3096:	3104      	adds	r1, #4
    for (i = 0; i < (d-1); i++)
    3098:	4541      	cmp	r1, r8
    309a:	d014      	beq.n	30c6 <mLSB_set_recode+0xa2>
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    309c:	682b      	ldr	r3, [r5, #0]
    309e:	4662      	mov	r2, ip
    30a0:	4013      	ands	r3, r2
    30a2:	3b01      	subs	r3, #1
    30a4:	600b      	str	r3, [r1, #0]
    30a6:	9c04      	ldr	r4, [sp, #16]
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    30a8:	6863      	ldr	r3, [r4, #4]
    30aa:	07de      	lsls	r6, r3, #31
    30ac:	6822      	ldr	r2, [r4, #0]
    30ae:	0852      	lsrs	r2, r2, #1
    30b0:	4332      	orrs	r2, r6
    30b2:	085b      	lsrs	r3, r3, #1
    30b4:	68a6      	ldr	r6, [r4, #8]
    30b6:	07f6      	lsls	r6, r6, #31
    30b8:	6022      	str	r2, [r4, #0]
    30ba:	4073      	eors	r3, r6
    30bc:	6063      	str	r3, [r4, #4]
    30be:	3408      	adds	r4, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    30c0:	4284      	cmp	r4, r0
    30c2:	d1f1      	bne.n	30a8 <mLSB_set_recode+0x84>
    30c4:	e7df      	b.n	3086 <mLSB_set_recode+0x62>
    30c6:	9e00      	ldr	r6, [sp, #0]
    30c8:	9f01      	ldr	r7, [sp, #4]
    30ca:	23c8      	movs	r3, #200	; 0xc8
    30cc:	445b      	add	r3, fp
    30ce:	4698      	mov	r8, r3
    for (i = 0; i < (d-1); i++)
    30d0:	2332      	movs	r3, #50	; 0x32
    30d2:	2220      	movs	r2, #32
    30d4:	4691      	mov	r9, r2
    30d6:	44a9      	add	r9, r5
    30d8:	46a2      	mov	sl, r4
    30da:	4644      	mov	r4, r8
    30dc:	4698      	mov	r8, r3
    30de:	465b      	mov	r3, fp
    30e0:	9305      	str	r3, [sp, #20]
    30e2:	e007      	b.n	30f4 <mLSB_set_recode+0xd0>
    30e4:	4681      	mov	r9, r0
    } 

    for (i = d; i < l; i++)
    30e6:	2301      	movs	r3, #1
    30e8:	469c      	mov	ip, r3
    30ea:	44e0      	add	r8, ip
    30ec:	3404      	adds	r4, #4
    30ee:	4643      	mov	r3, r8
    30f0:	2bfa      	cmp	r3, #250	; 0xfa
    30f2:	d056      	beq.n	31a2 <mLSB_set_recode+0x17e>
    30f4:	46a3      	mov	fp, r4
    {
        digits[i] = (unsigned int)(scalar[0] & 1);        // digits_i = k mod 2. Sign is determined by the "sign" row
    30f6:	2301      	movs	r3, #1
    30f8:	682a      	ldr	r2, [r5, #0]
    30fa:	4013      	ands	r3, r2
    30fc:	6023      	str	r3, [r4, #0]
    30fe:	9904      	ldr	r1, [sp, #16]
    3100:	9600      	str	r6, [sp, #0]
    3102:	9701      	str	r7, [sp, #4]
    3104:	4657      	mov	r7, sl

        // Shift scalar to the right by 1  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    3106:	684b      	ldr	r3, [r1, #4]
    3108:	07d8      	lsls	r0, r3, #31
    310a:	680a      	ldr	r2, [r1, #0]
    310c:	0852      	lsrs	r2, r2, #1
    310e:	4302      	orrs	r2, r0
    3110:	085b      	lsrs	r3, r3, #1
    3112:	6888      	ldr	r0, [r1, #8]
    3114:	07c0      	lsls	r0, r0, #31
    3116:	600a      	str	r2, [r1, #0]
    3118:	4043      	eors	r3, r0
    311a:	604b      	str	r3, [r1, #4]
    311c:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    311e:	42b9      	cmp	r1, r7
    3120:	d1f1      	bne.n	3106 <mLSB_set_recode+0xe2>
    3122:	46ba      	mov	sl, r7
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    3124:	69ea      	ldr	r2, [r5, #28]
    3126:	07d1      	lsls	r1, r2, #31
    3128:	69ab      	ldr	r3, [r5, #24]
    312a:	085b      	lsrs	r3, r3, #1
    312c:	430b      	orrs	r3, r1
    312e:	61ab      	str	r3, [r5, #24]
    3130:	0852      	lsrs	r2, r2, #1
    3132:	61ea      	str	r2, [r5, #28]

        temp = (0 - digits[i-(i/d)*d]) & digits[i];       // if (digits_i=0 \/ 1) then temp = 0, else if (digits_i=-1) then temp = 1 
    3134:	2132      	movs	r1, #50	; 0x32
    3136:	4640      	mov	r0, r8
    3138:	4b1d      	ldr	r3, [pc, #116]	; (31b0 <mLSB_set_recode+0x18c>)
    313a:	4798      	blx	r3
    313c:	0089      	lsls	r1, r1, #2
    313e:	9b05      	ldr	r3, [sp, #20]
    3140:	58cb      	ldr	r3, [r1, r3]
    3142:	425b      	negs	r3, r3
    3144:	465a      	mov	r2, fp
    3146:	6810      	ldr	r0, [r2, #0]
    3148:	4018      	ands	r0, r3
    314a:	4684      	mov	ip, r0
    314c:	9002      	str	r0, [sp, #8]
    314e:	2300      	movs	r3, #0
    3150:	9303      	str	r3, [sp, #12]
            
        // floor(scalar/2) + temp
        scalar[0] = scalar[0] + temp;
    3152:	9a02      	ldr	r2, [sp, #8]
    3154:	9b03      	ldr	r3, [sp, #12]
    3156:	6828      	ldr	r0, [r5, #0]
    3158:	6869      	ldr	r1, [r5, #4]
    315a:	1812      	adds	r2, r2, r0
    315c:	414b      	adcs	r3, r1
    315e:	0029      	movs	r1, r5
    3160:	c10c      	stmia	r1!, {r2, r3}
    3162:	9200      	str	r2, [sp, #0]
    3164:	9301      	str	r3, [sp, #4]
    3166:	4253      	negs	r3, r2
    3168:	9a00      	ldr	r2, [sp, #0]
    316a:	4313      	orrs	r3, r2
    316c:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    316e:	2201      	movs	r2, #1
    3170:	4053      	eors	r3, r2
        carry = (temp & (uint64_t)is_digit_zero_ct((digit_t)scalar[0]));       // carry = (scalar[0] < temp);
    3172:	4660      	mov	r0, ip
    3174:	4018      	ands	r0, r3
    3176:	0006      	movs	r6, r0
    3178:	2700      	movs	r7, #0
    317a:	4648      	mov	r0, r9
        for (j = 1; j < NWORDS64_ORDER; j++)
        {
            scalar[j] = scalar[j] + carry; 
    317c:	680a      	ldr	r2, [r1, #0]
    317e:	684b      	ldr	r3, [r1, #4]
    3180:	1992      	adds	r2, r2, r6
    3182:	417b      	adcs	r3, r7
    3184:	c10c      	stmia	r1!, {r2, r3}
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    3186:	9200      	str	r2, [sp, #0]
    3188:	9301      	str	r3, [sp, #4]
    318a:	4253      	negs	r3, r2
    318c:	9a00      	ldr	r2, [sp, #0]
    318e:	4313      	orrs	r3, r2
    3190:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    3192:	2201      	movs	r2, #1
    3194:	4053      	eors	r3, r2
            carry = (carry & (uint64_t)is_digit_zero_ct((digit_t)scalar[j]));  // carry = (scalar[j] < temp);
    3196:	4033      	ands	r3, r6
    3198:	001e      	movs	r6, r3
    319a:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    319c:	4281      	cmp	r1, r0
    319e:	d1ed      	bne.n	317c <mLSB_set_recode+0x158>
    31a0:	e7a0      	b.n	30e4 <mLSB_set_recode+0xc0>
        }
    } 
    return;              
}
    31a2:	b007      	add	sp, #28
    31a4:	bc3c      	pop	{r2, r3, r4, r5}
    31a6:	4690      	mov	r8, r2
    31a8:	4699      	mov	r9, r3
    31aa:	46a2      	mov	sl, r4
    31ac:	46ab      	mov	fp, r5
    31ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31b0:	000051f1 	.word	0x000051f1

000031b4 <ecc_mul_fixed>:
{ // Fixed-base scalar multiplication Q = k*G, where G is the generator. FIXED_BASE_TABLE stores v*2^(w-1) = 80 multiples of G.
    31b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31b6:	46de      	mov	lr, fp
    31b8:	4657      	mov	r7, sl
    31ba:	464e      	mov	r6, r9
    31bc:	4645      	mov	r5, r8
    31be:	b5e0      	push	{r5, r6, r7, lr}
    31c0:	4ca5      	ldr	r4, [pc, #660]	; (3458 <ecc_mul_fixed+0x2a4>)
    31c2:	44a5      	add	sp, r4
    31c4:	0004      	movs	r4, r0
    31c6:	9103      	str	r1, [sp, #12]
    unsigned int digit = 0, digits[NBITS_ORDER_PLUS_ONE + (W_FIXEDBASE*V_FIXEDBASE) - 1] = {0};
    31c8:	4aa4      	ldr	r2, [pc, #656]	; (345c <ecc_mul_fixed+0x2a8>)
    31ca:	2100      	movs	r1, #0
    31cc:	a85d      	add	r0, sp, #372	; 0x174
    31ce:	4ba4      	ldr	r3, [pc, #656]	; (3460 <ecc_mul_fixed+0x2ac>)
    31d0:	4798      	blx	r3
    modulo_order(k, temp);                                      // temp = k mod (order) 
    31d2:	a955      	add	r1, sp, #340	; 0x154
    31d4:	0020      	movs	r0, r4
    31d6:	4ba3      	ldr	r3, [pc, #652]	; (3464 <ecc_mul_fixed+0x2b0>)
    31d8:	4798      	blx	r3
    conversion_to_odd(temp, temp);                              // Converting scalar to odd using the prime subgroup order
    31da:	a955      	add	r1, sp, #340	; 0x154
    31dc:	0008      	movs	r0, r1
    31de:	4ba2      	ldr	r3, [pc, #648]	; (3468 <ecc_mul_fixed+0x2b4>)
    31e0:	4798      	blx	r3
    mLSB_set_recode((uint64_t*)temp, digits);                   // Scalar recoding
    31e2:	a95d      	add	r1, sp, #372	; 0x174
    31e4:	a855      	add	r0, sp, #340	; 0x154
    31e6:	4ba1      	ldr	r3, [pc, #644]	; (346c <ecc_mul_fixed+0x2b8>)
    31e8:	4798      	blx	r3
    digit = digits[w*d-1];
    31ea:	23f9      	movs	r3, #249	; 0xf9
    31ec:	009b      	lsls	r3, r3, #2
        digit = 2*digit + digits[i];
    31ee:	aa04      	add	r2, sp, #16
    31f0:	21b2      	movs	r1, #178	; 0xb2
    31f2:	0049      	lsls	r1, r1, #1
    31f4:	1852      	adds	r2, r2, r1
    31f6:	58d2      	ldr	r2, [r2, r3]
    31f8:	0052      	lsls	r2, r2, #1
    31fa:	3bc8      	subs	r3, #200	; 0xc8
    31fc:	a904      	add	r1, sp, #16
    31fe:	20b2      	movs	r0, #178	; 0xb2
    3200:	0040      	lsls	r0, r0, #1
    3202:	1809      	adds	r1, r1, r0
    3204:	58cb      	ldr	r3, [r1, r3]
    3206:	18d2      	adds	r2, r2, r3
    3208:	0052      	lsls	r2, r2, #1
    320a:	2395      	movs	r3, #149	; 0x95
    320c:	009b      	lsls	r3, r3, #2
    320e:	a904      	add	r1, sp, #16
    3210:	1809      	adds	r1, r1, r0
    3212:	58cb      	ldr	r3, [r1, r3]
    3214:	18d2      	adds	r2, r2, r3
    3216:	0052      	lsls	r2, r2, #1
    table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    3218:	23c4      	movs	r3, #196	; 0xc4
    321a:	a904      	add	r1, sp, #16
    321c:	1809      	adds	r1, r1, r0
    321e:	58cb      	ldr	r3, [r1, r3]
        digit = 2*digit + digits[i];
    3220:	21c6      	movs	r1, #198	; 0xc6
    3222:	0049      	lsls	r1, r1, #1
    3224:	a804      	add	r0, sp, #16
    3226:	24b2      	movs	r4, #178	; 0xb2
    3228:	0064      	lsls	r4, r4, #1
    322a:	1900      	adds	r0, r0, r4
    322c:	5841      	ldr	r1, [r0, r1]
    322e:	1852      	adds	r2, r2, r1
    table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    3230:	4c8f      	ldr	r4, [pc, #572]	; (3470 <ecc_mul_fixed+0x2bc>)
    3232:	21c0      	movs	r1, #192	; 0xc0
    3234:	0149      	lsls	r1, r1, #5
    3236:	1860      	adds	r0, r4, r1
    3238:	a915      	add	r1, sp, #84	; 0x54
    323a:	4d8e      	ldr	r5, [pc, #568]	; (3474 <ecc_mul_fixed+0x2c0>)
    323c:	47a8      	blx	r5
    fp2sub1271_a(a, b, c); 
    323e:	aa2d      	add	r2, sp, #180	; 0xb4
    3240:	a91d      	add	r1, sp, #116	; 0x74
    3242:	a815      	add	r0, sp, #84	; 0x54
    3244:	4b8c      	ldr	r3, [pc, #560]	; (3478 <ecc_mul_fixed+0x2c4>)
    3246:	4798      	blx	r3
    fp2add1271_a(a, b, c);
    3248:	aa35      	add	r2, sp, #212	; 0xd4
    324a:	a91d      	add	r1, sp, #116	; 0x74
    324c:	a815      	add	r0, sp, #84	; 0x54
    324e:	4b8b      	ldr	r3, [pc, #556]	; (347c <ecc_mul_fixed+0x2c8>)
    3250:	4798      	blx	r3
    fp2div1271(Q->x);                      // XQ = x1
    3252:	a82d      	add	r0, sp, #180	; 0xb4
    3254:	4d8a      	ldr	r5, [pc, #552]	; (3480 <ecc_mul_fixed+0x2cc>)
    3256:	47a8      	blx	r5
    fp2div1271(Q->y);                      // YQ = y1 
    3258:	a835      	add	r0, sp, #212	; 0xd4
    325a:	47a8      	blx	r5
    fp2zero1271(Q->z); Q->z[0][0] = 1;     // ZQ = 1
    325c:	a83d      	add	r0, sp, #244	; 0xf4
    325e:	4b89      	ldr	r3, [pc, #548]	; (3484 <ecc_mul_fixed+0x2d0>)
    3260:	4798      	blx	r3
    3262:	2301      	movs	r3, #1
    3264:	933d      	str	r3, [sp, #244]	; 0xf4
    fp2copy1271(Q->x, Q->ta);              // TaQ = x1
    3266:	a945      	add	r1, sp, #276	; 0x114
    3268:	a82d      	add	r0, sp, #180	; 0xb4
    326a:	4d87      	ldr	r5, [pc, #540]	; (3488 <ecc_mul_fixed+0x2d4>)
    326c:	47a8      	blx	r5
    fp2copy1271(Q->y, Q->tb);              // TbQ = y1
    326e:	a94d      	add	r1, sp, #308	; 0x134
    3270:	a835      	add	r0, sp, #212	; 0xd4
    3272:	47a8      	blx	r5
    3274:	2390      	movs	r3, #144	; 0x90
    3276:	015b      	lsls	r3, r3, #5
    3278:	4698      	mov	r8, r3
    327a:	44a0      	add	r8, r4
    327c:	aeff      	add	r6, sp, #1020	; 0x3fc
    327e:	366c      	adds	r6, #108	; 0x6c
    3280:	25bd      	movs	r5, #189	; 0xbd
        table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);
    3282:	4b7c      	ldr	r3, [pc, #496]	; (3474 <ecc_mul_fixed+0x2c0>)
    3284:	4699      	mov	r9, r3
    fp2mul1271_a(a, b, c);
    3286:	4c81      	ldr	r4, [pc, #516]	; (348c <ecc_mul_fixed+0x2d8>)
    fp2add1271_a(a, b, c);
    3288:	4b7c      	ldr	r3, [pc, #496]	; (347c <ecc_mul_fixed+0x2c8>)
    328a:	469b      	mov	fp, r3
    328c:	46b4      	mov	ip, r6
        digit = digits[w*d-(j+1)*e-1];
    328e:	0033      	movs	r3, r6
    3290:	33c8      	adds	r3, #200	; 0xc8
    3292:	681a      	ldr	r2, [r3, #0]
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)
    3294:	002b      	movs	r3, r5
    3296:	0028      	movs	r0, r5
    3298:	3864      	subs	r0, #100	; 0x64
    329a:	4285      	cmp	r5, r0
    329c:	db08      	blt.n	32b0 <ecc_mul_fixed+0xfc>
    329e:	0031      	movs	r1, r6
            digit = 2*digit + digits[i];
    32a0:	0052      	lsls	r2, r2, #1
    32a2:	680f      	ldr	r7, [r1, #0]
    32a4:	46ba      	mov	sl, r7
    32a6:	4452      	add	r2, sl
    32a8:	3b32      	subs	r3, #50	; 0x32
    32aa:	39c8      	subs	r1, #200	; 0xc8
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)
    32ac:	4283      	cmp	r3, r0
    32ae:	daf7      	bge.n	32a0 <ecc_mul_fixed+0xec>
        table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);
    32b0:	4b77      	ldr	r3, [pc, #476]	; (3490 <ecc_mul_fixed+0x2dc>)
    32b2:	4463      	add	r3, ip
    32b4:	681b      	ldr	r3, [r3, #0]
    32b6:	a915      	add	r1, sp, #84	; 0x54
    32b8:	4640      	mov	r0, r8
    32ba:	47c8      	blx	r9
    fp2mul1271_a(a, b, c);
    32bc:	aa45      	add	r2, sp, #276	; 0x114
    32be:	a94d      	add	r1, sp, #308	; 0x134
    32c0:	0010      	movs	r0, r2
    32c2:	47a0      	blx	r4
    fp2add1271_a(a, b, c);
    32c4:	aa05      	add	r2, sp, #20
    32c6:	a93d      	add	r1, sp, #244	; 0xf4
    32c8:	0008      	movs	r0, r1
    32ca:	47d8      	blx	fp
    fp2mul1271_a(a, b, c);
    32cc:	aa45      	add	r2, sp, #276	; 0x114
    32ce:	a925      	add	r1, sp, #148	; 0x94
    32d0:	0010      	movs	r0, r2
    32d2:	47a0      	blx	r4
    fp2add1271_a(a, b, c);
    32d4:	aa3d      	add	r2, sp, #244	; 0xf4
    32d6:	a935      	add	r1, sp, #212	; 0xd4
    32d8:	a82d      	add	r0, sp, #180	; 0xb4
    32da:	47d8      	blx	fp
    fp2sub1271_a(a, b, c); 
    32dc:	aa4d      	add	r2, sp, #308	; 0x134
    32de:	a92d      	add	r1, sp, #180	; 0xb4
    32e0:	a835      	add	r0, sp, #212	; 0xd4
    32e2:	4b65      	ldr	r3, [pc, #404]	; (3478 <ecc_mul_fixed+0x2c4>)
    32e4:	469a      	mov	sl, r3
    32e6:	4798      	blx	r3
    32e8:	aa0d      	add	r2, sp, #52	; 0x34
    32ea:	a945      	add	r1, sp, #276	; 0x114
    32ec:	a805      	add	r0, sp, #20
    32ee:	47d0      	blx	sl
    fp2add1271_a(a, b, c);
    32f0:	aa05      	add	r2, sp, #20
    32f2:	a945      	add	r1, sp, #276	; 0x114
    32f4:	0010      	movs	r0, r2
    32f6:	47d8      	blx	fp
    fp2mul1271_a(a, b, c);
    32f8:	aa45      	add	r2, sp, #276	; 0x114
    32fa:	a93d      	add	r1, sp, #244	; 0xf4
    32fc:	a815      	add	r0, sp, #84	; 0x54
    32fe:	47a0      	blx	r4
    3300:	aa2d      	add	r2, sp, #180	; 0xb4
    3302:	a94d      	add	r1, sp, #308	; 0x134
    3304:	a81d      	add	r0, sp, #116	; 0x74
    3306:	47a0      	blx	r4
    3308:	aa3d      	add	r2, sp, #244	; 0xf4
    330a:	a90d      	add	r1, sp, #52	; 0x34
    330c:	a805      	add	r0, sp, #20
    330e:	47a0      	blx	r4
    fp2sub1271_a(a, b, c); 
    3310:	aa4d      	add	r2, sp, #308	; 0x134
    3312:	a92d      	add	r1, sp, #180	; 0xb4
    3314:	a845      	add	r0, sp, #276	; 0x114
    3316:	47d0      	blx	sl
    fp2add1271_a(a, b, c);
    3318:	aa45      	add	r2, sp, #276	; 0x114
    331a:	a92d      	add	r1, sp, #180	; 0xb4
    331c:	0010      	movs	r0, r2
    331e:	47d8      	blx	fp
    fp2mul1271_a(a, b, c);
    3320:	aa2d      	add	r2, sp, #180	; 0xb4
    3322:	a90d      	add	r1, sp, #52	; 0x34
    3324:	a84d      	add	r0, sp, #308	; 0x134
    3326:	47a0      	blx	r4
    3328:	aa35      	add	r2, sp, #212	; 0xd4
    332a:	a905      	add	r1, sp, #20
    332c:	a845      	add	r0, sp, #276	; 0x114
    332e:	47a0      	blx	r4
    3330:	3d0a      	subs	r5, #10
    3332:	4b58      	ldr	r3, [pc, #352]	; (3494 <ecc_mul_fixed+0x2e0>)
    3334:	469c      	mov	ip, r3
    3336:	44e0      	add	r8, ip
    3338:	3e28      	subs	r6, #40	; 0x28
    for (j = 0; j < (v-1); j++)
    333a:	2d95      	cmp	r5, #149	; 0x95
    333c:	d1a6      	bne.n	328c <ecc_mul_fixed+0xd8>
    333e:	abff      	add	r3, sp, #1020	; 0x3fc
    3340:	3390      	adds	r3, #144	; 0x90
    3342:	9302      	str	r3, [sp, #8]
    3344:	23c6      	movs	r3, #198	; 0xc6
    3346:	9301      	str	r3, [sp, #4]
            table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]);
    3348:	4b4a      	ldr	r3, [pc, #296]	; (3474 <ecc_mul_fixed+0x2c0>)
    334a:	469b      	mov	fp, r3
    334c:	e007      	b.n	335e <ecc_mul_fixed+0x1aa>
    334e:	9b01      	ldr	r3, [sp, #4]
    3350:	3b01      	subs	r3, #1
    3352:	9301      	str	r3, [sp, #4]
    3354:	9a02      	ldr	r2, [sp, #8]
    3356:	3a04      	subs	r2, #4
    3358:	9202      	str	r2, [sp, #8]
    for (ii = (e-2); ii >= 0; ii--)
    335a:	2bbd      	cmp	r3, #189	; 0xbd
    335c:	d06e      	beq.n	343c <ecc_mul_fixed+0x288>
        eccdouble(R);                                           // R = 2*R using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    335e:	a82d      	add	r0, sp, #180	; 0xb4
    3360:	4b4d      	ldr	r3, [pc, #308]	; (3498 <ecc_mul_fixed+0x2e4>)
    3362:	4798      	blx	r3
    3364:	4b42      	ldr	r3, [pc, #264]	; (3470 <ecc_mul_fixed+0x2bc>)
    3366:	22c0      	movs	r2, #192	; 0xc0
    3368:	0152      	lsls	r2, r2, #5
    336a:	4694      	mov	ip, r2
    336c:	4463      	add	r3, ip
    336e:	4699      	mov	r9, r3
    3370:	9d01      	ldr	r5, [sp, #4]
    3372:	002b      	movs	r3, r5
    3374:	2232      	movs	r2, #50	; 0x32
    3376:	4252      	negs	r2, r2
    3378:	4694      	mov	ip, r2
    337a:	4463      	add	r3, ip
    337c:	469a      	mov	sl, r3
    337e:	9e02      	ldr	r6, [sp, #8]
    fp2mul1271_a(a, b, c);
    3380:	4c42      	ldr	r4, [pc, #264]	; (348c <ecc_mul_fixed+0x2d8>)
    fp2add1271_a(a, b, c);
    3382:	4f3e      	ldr	r7, [pc, #248]	; (347c <ecc_mul_fixed+0x2c8>)
    3384:	46b4      	mov	ip, r6
            digit = digits[w*d-j*e+ii-e];
    3386:	0033      	movs	r3, r6
    3388:	33c8      	adds	r3, #200	; 0xc8
    338a:	681a      	ldr	r2, [r3, #0]
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)
    338c:	002b      	movs	r3, r5
    338e:	0028      	movs	r0, r5
    3390:	3864      	subs	r0, #100	; 0x64
    3392:	4285      	cmp	r5, r0
    3394:	db0a      	blt.n	33ac <ecc_mul_fixed+0x1f8>
    3396:	0031      	movs	r1, r6
    3398:	9500      	str	r5, [sp, #0]
                digit = 2*digit + digits[i];
    339a:	0052      	lsls	r2, r2, #1
    339c:	680d      	ldr	r5, [r1, #0]
    339e:	46a8      	mov	r8, r5
    33a0:	4442      	add	r2, r8
    33a2:	3b32      	subs	r3, #50	; 0x32
    33a4:	39c8      	subs	r1, #200	; 0xc8
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)
    33a6:	4283      	cmp	r3, r0
    33a8:	daf7      	bge.n	339a <ecc_mul_fixed+0x1e6>
    33aa:	9d00      	ldr	r5, [sp, #0]
            table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]);
    33ac:	4b38      	ldr	r3, [pc, #224]	; (3490 <ecc_mul_fixed+0x2dc>)
    33ae:	4463      	add	r3, ip
    33b0:	681b      	ldr	r3, [r3, #0]
    33b2:	a915      	add	r1, sp, #84	; 0x54
    33b4:	4648      	mov	r0, r9
    33b6:	47d8      	blx	fp
    fp2mul1271_a(a, b, c);
    33b8:	aa45      	add	r2, sp, #276	; 0x114
    33ba:	a94d      	add	r1, sp, #308	; 0x134
    33bc:	0010      	movs	r0, r2
    33be:	47a0      	blx	r4
    fp2add1271_a(a, b, c);
    33c0:	aa05      	add	r2, sp, #20
    33c2:	a93d      	add	r1, sp, #244	; 0xf4
    33c4:	0008      	movs	r0, r1
    33c6:	47b8      	blx	r7
    fp2mul1271_a(a, b, c);
    33c8:	aa45      	add	r2, sp, #276	; 0x114
    33ca:	a925      	add	r1, sp, #148	; 0x94
    33cc:	0010      	movs	r0, r2
    33ce:	47a0      	blx	r4
    fp2add1271_a(a, b, c);
    33d0:	aa3d      	add	r2, sp, #244	; 0xf4
    33d2:	a935      	add	r1, sp, #212	; 0xd4
    33d4:	a82d      	add	r0, sp, #180	; 0xb4
    33d6:	47b8      	blx	r7
    fp2sub1271_a(a, b, c); 
    33d8:	aa4d      	add	r2, sp, #308	; 0x134
    33da:	a92d      	add	r1, sp, #180	; 0xb4
    33dc:	a835      	add	r0, sp, #212	; 0xd4
    33de:	4b26      	ldr	r3, [pc, #152]	; (3478 <ecc_mul_fixed+0x2c4>)
    33e0:	4698      	mov	r8, r3
    33e2:	4798      	blx	r3
    33e4:	aa0d      	add	r2, sp, #52	; 0x34
    33e6:	a945      	add	r1, sp, #276	; 0x114
    33e8:	a805      	add	r0, sp, #20
    33ea:	47c0      	blx	r8
    fp2add1271_a(a, b, c);
    33ec:	aa05      	add	r2, sp, #20
    33ee:	a945      	add	r1, sp, #276	; 0x114
    33f0:	0010      	movs	r0, r2
    33f2:	47b8      	blx	r7
    fp2mul1271_a(a, b, c);
    33f4:	aa45      	add	r2, sp, #276	; 0x114
    33f6:	a93d      	add	r1, sp, #244	; 0xf4
    33f8:	a815      	add	r0, sp, #84	; 0x54
    33fa:	47a0      	blx	r4
    33fc:	aa2d      	add	r2, sp, #180	; 0xb4
    33fe:	a94d      	add	r1, sp, #308	; 0x134
    3400:	a81d      	add	r0, sp, #116	; 0x74
    3402:	47a0      	blx	r4
    3404:	aa3d      	add	r2, sp, #244	; 0xf4
    3406:	a90d      	add	r1, sp, #52	; 0x34
    3408:	a805      	add	r0, sp, #20
    340a:	47a0      	blx	r4
    fp2sub1271_a(a, b, c); 
    340c:	aa4d      	add	r2, sp, #308	; 0x134
    340e:	a92d      	add	r1, sp, #180	; 0xb4
    3410:	a845      	add	r0, sp, #276	; 0x114
    3412:	47c0      	blx	r8
    fp2add1271_a(a, b, c);
    3414:	aa45      	add	r2, sp, #276	; 0x114
    3416:	a92d      	add	r1, sp, #180	; 0xb4
    3418:	0010      	movs	r0, r2
    341a:	47b8      	blx	r7
    fp2mul1271_a(a, b, c);
    341c:	aa2d      	add	r2, sp, #180	; 0xb4
    341e:	a90d      	add	r1, sp, #52	; 0x34
    3420:	a84d      	add	r0, sp, #308	; 0x134
    3422:	47a0      	blx	r4
    3424:	aa35      	add	r2, sp, #212	; 0xd4
    3426:	a905      	add	r1, sp, #20
    3428:	a845      	add	r0, sp, #276	; 0x114
    342a:	47a0      	blx	r4
    342c:	3d0a      	subs	r5, #10
    342e:	4b19      	ldr	r3, [pc, #100]	; (3494 <ecc_mul_fixed+0x2e0>)
    3430:	469c      	mov	ip, r3
    3432:	44e1      	add	r9, ip
    3434:	3e28      	subs	r6, #40	; 0x28
        for (j = 0; j < v; j++)
    3436:	4555      	cmp	r5, sl
    3438:	d1a4      	bne.n	3384 <ecc_mul_fixed+0x1d0>
    343a:	e788      	b.n	334e <ecc_mul_fixed+0x19a>
    eccnorm(R, Q);                                              // Conversion to affine coordinates (x,y) and modular correction.
    343c:	9903      	ldr	r1, [sp, #12]
    343e:	a82d      	add	r0, sp, #180	; 0xb4
    3440:	4b16      	ldr	r3, [pc, #88]	; (349c <ecc_mul_fixed+0x2e8>)
    3442:	4798      	blx	r3
}
    3444:	2001      	movs	r0, #1
    3446:	4b16      	ldr	r3, [pc, #88]	; (34a0 <ecc_mul_fixed+0x2ec>)
    3448:	449d      	add	sp, r3
    344a:	bc3c      	pop	{r2, r3, r4, r5}
    344c:	4690      	mov	r8, r2
    344e:	4699      	mov	r9, r3
    3450:	46a2      	mov	sl, r4
    3452:	46ab      	mov	fp, r5
    3454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3456:	46c0      	nop			; (mov r8, r8)
    3458:	fffffa4c 	.word	0xfffffa4c
    345c:	0000043c 	.word	0x0000043c
    3460:	000054a3 	.word	0x000054a3
    3464:	0000242d 	.word	0x0000242d
    3468:	00002465 	.word	0x00002465
    346c:	00003025 	.word	0x00003025
    3470:	00006628 	.word	0x00006628
    3474:	00002911 	.word	0x00002911
    3478:	00003d5b 	.word	0x00003d5b
    347c:	00003cfd 	.word	0x00003cfd
    3480:	00002543 	.word	0x00002543
    3484:	00002ab1 	.word	0x00002ab1
    3488:	00002631 	.word	0x00002631
    348c:	00003841 	.word	0x00003841
    3490:	fffffda8 	.word	0xfffffda8
    3494:	fffffa00 	.word	0xfffffa00
    3498:	00002cf1 	.word	0x00002cf1
    349c:	00002bad 	.word	0x00002bad
    34a0:	000005b4 	.word	0x000005b4

000034a4 <fixed_window_recode>:

/***********************************************/
/**********  CURVE/SCALAR FUNCTIONS  ***********/

void fixed_window_recode(uint64_t* scalar, unsigned int* digits, unsigned int* sign_masks)
{ // Converting scalar to the fixed window representation used by the variable-base scalar multiplication
    34a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34a6:	46de      	mov	lr, fp
    34a8:	4657      	mov	r7, sl
    34aa:	464e      	mov	r6, r9
    34ac:	4645      	mov	r5, r8
    34ae:	b5e0      	push	{r5, r6, r7, lr}
    34b0:	b089      	sub	sp, #36	; 0x24
    34b2:	4692      	mov	sl, r2
    34b4:	2300      	movs	r3, #0
    34b6:	469c      	mov	ip, r3
    34b8:	3320      	adds	r3, #32
    34ba:	4699      	mov	r9, r3
    34bc:	4481      	add	r9, r0
    34be:	3b08      	subs	r3, #8
    34c0:	4698      	mov	r8, r3
    34c2:	4480      	add	r8, r0
    34c4:	4643      	mov	r3, r8
    34c6:	9300      	str	r3, [sp, #0]
    34c8:	9107      	str	r1, [sp, #28]
    34ca:	4683      	mov	fp, r0
    34cc:	e011      	b.n	34f2 <fixed_window_recode+0x4e>
    34ce:	9400      	str	r4, [sp, #0]
        }    
  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] = scalar[NWORDS64_ORDER-1] >> (W_VARBASE-1);
    34d0:	465b      	mov	r3, fp
    34d2:	69db      	ldr	r3, [r3, #28]
    34d4:	0719      	lsls	r1, r3, #28
    34d6:	465a      	mov	r2, fp
    34d8:	6992      	ldr	r2, [r2, #24]
    34da:	0912      	lsrs	r2, r2, #4
    34dc:	430a      	orrs	r2, r1
    34de:	4659      	mov	r1, fp
    34e0:	618a      	str	r2, [r1, #24]
    34e2:	091b      	lsrs	r3, r3, #4
    34e4:	61cb      	str	r3, [r1, #28]
    34e6:	2304      	movs	r3, #4
    34e8:	4698      	mov	r8, r3
    34ea:	44c4      	add	ip, r8
    for (i = 0; i < t_VARBASE; i++)
    34ec:	4663      	mov	r3, ip
    34ee:	2bf8      	cmp	r3, #248	; 0xf8
    34f0:	d069      	beq.n	35c6 <fixed_window_recode+0x122>
        temp = (scalar[0] & val1) - val2;    // ki = (k mod 2^w)/2^(w-1)
    34f2:	465a      	mov	r2, fp
    34f4:	231f      	movs	r3, #31
    34f6:	6812      	ldr	r2, [r2, #0]
    34f8:	4013      	ands	r3, r2
    34fa:	9304      	str	r3, [sp, #16]
    34fc:	2300      	movs	r3, #0
    34fe:	9305      	str	r3, [sp, #20]
    3500:	9a04      	ldr	r2, [sp, #16]
    3502:	9b05      	ldr	r3, [sp, #20]
    3504:	2010      	movs	r0, #16
    3506:	4240      	negs	r0, r0
    3508:	17c1      	asrs	r1, r0, #31
    350a:	1812      	adds	r2, r2, r0
    350c:	414b      	adcs	r3, r1
        sign_masks[i] = ~((unsigned int)(temp >> (RADIX64-1)));
    350e:	17d9      	asrs	r1, r3, #31
    3510:	9102      	str	r1, [sp, #8]
    3512:	9103      	str	r1, [sp, #12]
    3514:	43c9      	mvns	r1, r1
    3516:	4650      	mov	r0, sl
    3518:	4665      	mov	r5, ip
    351a:	5141      	str	r1, [r0, r5]
        digits[i] = ((sign_masks[i] & (unsigned int)(temp ^ -temp)) ^ (unsigned int)-temp) >> 1;        
    351c:	4250      	negs	r0, r2
    351e:	0004      	movs	r4, r0
    3520:	4054      	eors	r4, r2
    3522:	4021      	ands	r1, r4
    3524:	4048      	eors	r0, r1
    3526:	0840      	lsrs	r0, r0, #1
    3528:	9907      	ldr	r1, [sp, #28]
    352a:	5148      	str	r0, [r1, r5]
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    352c:	4659      	mov	r1, fp
    352e:	6809      	ldr	r1, [r1, #0]
    3530:	1a8d      	subs	r5, r1, r2
    3532:	4055      	eors	r5, r2
    3534:	4659      	mov	r1, fp
    3536:	6809      	ldr	r1, [r1, #0]
    3538:	4051      	eors	r1, r2
    353a:	000c      	movs	r4, r1
    353c:	432c      	orrs	r4, r5
    353e:	4659      	mov	r1, fp
    3540:	6809      	ldr	r1, [r1, #0]
    3542:	404c      	eors	r4, r1
    3544:	0fe1      	lsrs	r1, r4, #31
    3546:	4688      	mov	r8, r1
        borrow = ((temp >> (RADIX64-1)) - 1) & (uint64_t)is_digit_lessthan_ct((digit_t)scalar[0], (digit_t)temp);
    3548:	9c02      	ldr	r4, [sp, #8]
    354a:	9d03      	ldr	r5, [sp, #12]
    354c:	2001      	movs	r0, #1
    354e:	4240      	negs	r0, r0
    3550:	17c1      	asrs	r1, r0, #31
    3552:	1824      	adds	r4, r4, r0
    3554:	414d      	adcs	r5, r1
    3556:	4641      	mov	r1, r8
    3558:	4021      	ands	r1, r4
    355a:	000e      	movs	r6, r1
    355c:	2700      	movs	r7, #0
        res = scalar[0] - temp;              // k = (k - ki) / 2^(w-1) 
    355e:	4659      	mov	r1, fp
    3560:	6808      	ldr	r0, [r1, #0]
    3562:	6849      	ldr	r1, [r1, #4]
    3564:	1a80      	subs	r0, r0, r2
    3566:	4199      	sbcs	r1, r3
    3568:	0002      	movs	r2, r0
    356a:	000b      	movs	r3, r1
        scalar[0] = res;
    356c:	4659      	mov	r1, fp
    356e:	c10c      	stmia	r1!, {r2, r3}
    3570:	9b00      	ldr	r3, [sp, #0]
    3572:	4698      	mov	r8, r3
    3574:	4648      	mov	r0, r9
            res = scalar[j];
    3576:	680b      	ldr	r3, [r1, #0]
    3578:	684c      	ldr	r4, [r1, #4]
    357a:	001a      	movs	r2, r3
    357c:	0023      	movs	r3, r4
            scalar[j] = res - borrow;
    357e:	0014      	movs	r4, r2
    3580:	001d      	movs	r5, r3
    3582:	1ba4      	subs	r4, r4, r6
    3584:	41bd      	sbcs	r5, r7
    3586:	c130      	stmia	r1!, {r4, r5}
    3588:	9200      	str	r2, [sp, #0]
    358a:	9301      	str	r3, [sp, #4]
    358c:	1b93      	subs	r3, r2, r6
    358e:	4073      	eors	r3, r6
    3590:	0034      	movs	r4, r6
    3592:	9d00      	ldr	r5, [sp, #0]
    3594:	406c      	eors	r4, r5
    3596:	4323      	orrs	r3, r4
    3598:	406b      	eors	r3, r5
            borrow = (uint64_t)is_digit_lessthan_ct((digit_t)res, (digit_t)borrow); 
    359a:	0fde      	lsrs	r6, r3, #31
    359c:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    359e:	4281      	cmp	r1, r0
    35a0:	d1e9      	bne.n	3576 <fixed_window_recode+0xd2>
    35a2:	4681      	mov	r9, r0
    35a4:	4659      	mov	r1, fp
    35a6:	4644      	mov	r4, r8
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
    35a8:	684b      	ldr	r3, [r1, #4]
    35aa:	0718      	lsls	r0, r3, #28
    35ac:	680a      	ldr	r2, [r1, #0]
    35ae:	0912      	lsrs	r2, r2, #4
    35b0:	4302      	orrs	r2, r0
    35b2:	091b      	lsrs	r3, r3, #4
    35b4:	6888      	ldr	r0, [r1, #8]
    35b6:	0700      	lsls	r0, r0, #28
    35b8:	600a      	str	r2, [r1, #0]
    35ba:	4043      	eors	r3, r0
    35bc:	604b      	str	r3, [r1, #4]
    35be:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
    35c0:	428c      	cmp	r4, r1
    35c2:	d1f1      	bne.n	35a8 <fixed_window_recode+0x104>
    35c4:	e783      	b.n	34ce <fixed_window_recode+0x2a>
    35c6:	4658      	mov	r0, fp
    35c8:	9b07      	ldr	r3, [sp, #28]
    35ca:	469b      	mov	fp, r3

    } 
    sign_masks[t_VARBASE] = ~((unsigned int)(scalar[0] >> (RADIX64-1)));
    35cc:	684b      	ldr	r3, [r1, #4]
    35ce:	0fdb      	lsrs	r3, r3, #31
    35d0:	43db      	mvns	r3, r3
    35d2:	21f8      	movs	r1, #248	; 0xf8
    35d4:	4652      	mov	r2, sl
    35d6:	5053      	str	r3, [r2, r1]
    digits[t_VARBASE] = ((sign_masks[t_VARBASE] & (unsigned int)(scalar[0] ^ (0-scalar[0]))) ^ (unsigned int)(0-scalar[0])) >> 1;    // kt = k  (t_VARBASE+1 digits)
    35d8:	6802      	ldr	r2, [r0, #0]
    35da:	4250      	negs	r0, r2
    35dc:	4042      	eors	r2, r0
    35de:	4013      	ands	r3, r2
    35e0:	4043      	eors	r3, r0
    35e2:	085b      	lsrs	r3, r3, #1
    35e4:	465a      	mov	r2, fp
    35e6:	5053      	str	r3, [r2, r1]
}
    35e8:	b009      	add	sp, #36	; 0x24
    35ea:	bc3c      	pop	{r2, r3, r4, r5}
    35ec:	4690      	mov	r8, r2
    35ee:	4699      	mov	r9, r3
    35f0:	46a2      	mov	sl, r4
    35f2:	46ab      	mov	fp, r5
    35f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000035f8 <ecc_precomp>:


void ecc_precomp(point_extproj_t P, point_extproj_precomp_t *T)
{ // Generation of the precomputation table used by the variable-base scalar multiplication ecc_mul().
    35f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35fa:	b0c9      	sub	sp, #292	; 0x124
    35fc:	0004      	movs	r4, r0
    35fe:	000d      	movs	r5, r1
    point_extproj_precomp_t P2;
    point_extproj_t Q;
    unsigned int i; 

    // Generating P2 = 2(X1,Y1,Z1,T1a,T1b) = (XP2+YP2,Y2P-X2P,ZP2,TP2) and T[0] = P = (X1+Y1,Y1-X1,2*Z1,2*d*T1)
    ecccopy(P, Q);
    3600:	4669      	mov	r1, sp
    3602:	4e18      	ldr	r6, [pc, #96]	; (3664 <ecc_precomp+0x6c>)
    3604:	47b0      	blx	r6
    3606:	0020      	movs	r0, r4
    3608:	3020      	adds	r0, #32
    360a:	a908      	add	r1, sp, #32
    360c:	47b0      	blx	r6
    360e:	0020      	movs	r0, r4
    3610:	3040      	adds	r0, #64	; 0x40
    3612:	a910      	add	r1, sp, #64	; 0x40
    3614:	47b0      	blx	r6
    3616:	0020      	movs	r0, r4
    3618:	3060      	adds	r0, #96	; 0x60
    361a:	a918      	add	r1, sp, #96	; 0x60
    361c:	47b0      	blx	r6
    361e:	0020      	movs	r0, r4
    3620:	3080      	adds	r0, #128	; 0x80
    3622:	a920      	add	r1, sp, #128	; 0x80
    3624:	47b0      	blx	r6
    R1_to_R2(P, T[0]);
    3626:	0029      	movs	r1, r5
    3628:	0020      	movs	r0, r4
    362a:	4b0f      	ldr	r3, [pc, #60]	; (3668 <ecc_precomp+0x70>)
    362c:	4798      	blx	r3
    eccdouble(Q);
    362e:	4668      	mov	r0, sp
    3630:	4b0e      	ldr	r3, [pc, #56]	; (366c <ecc_precomp+0x74>)
    3632:	4798      	blx	r3
    R1_to_R3(Q, P2);
    3634:	a928      	add	r1, sp, #160	; 0xa0
    3636:	4668      	mov	r0, sp
    3638:	4b0d      	ldr	r3, [pc, #52]	; (3670 <ecc_precomp+0x78>)
    363a:	4798      	blx	r3
    363c:	002c      	movs	r4, r5
    363e:	23e0      	movs	r3, #224	; 0xe0
    3640:	009b      	lsls	r3, r3, #2
    3642:	469c      	mov	ip, r3
    3644:	4465      	add	r5, ip

    for (i = 1; i < NPOINTS_VARBASE; i++) {
        // T[i] = 2P+T[i-1] = (2*i+1)P = (XP2+YP2,Y2P-X2P,ZP2,TP2) + (X_(2*i-1)+Y_(2*i-1), Y_(2*i-1)-X_(2*i-1), 2Z_(2*i-1), 2T_(2*i-1)) = (X_(2*i+1)+Y_(2*i+1), Y_(2*i+1)-X_(2*i+1), 2Z_(2*i+1), 2dT_(2*i+1))
        eccadd_core(P2, T[i-1], Q);
    3646:	4f0b      	ldr	r7, [pc, #44]	; (3674 <ecc_precomp+0x7c>)
        R1_to_R2(Q, T[i]);
    3648:	4e07      	ldr	r6, [pc, #28]	; (3668 <ecc_precomp+0x70>)
        eccadd_core(P2, T[i-1], Q);
    364a:	466a      	mov	r2, sp
    364c:	0021      	movs	r1, r4
    364e:	a828      	add	r0, sp, #160	; 0xa0
    3650:	47b8      	blx	r7
    3652:	3480      	adds	r4, #128	; 0x80
        R1_to_R2(Q, T[i]);
    3654:	0021      	movs	r1, r4
    3656:	4668      	mov	r0, sp
    3658:	47b0      	blx	r6
    for (i = 1; i < NPOINTS_VARBASE; i++) {
    365a:	42ac      	cmp	r4, r5
    365c:	d1f5      	bne.n	364a <ecc_precomp+0x52>
    }
}
    365e:	b049      	add	sp, #292	; 0x124
    3660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3662:	46c0      	nop			; (mov r8, r8)
    3664:	00002631 	.word	0x00002631
    3668:	00002c05 	.word	0x00002c05
    366c:	00002cf1 	.word	0x00002cf1
    3670:	00002c6d 	.word	0x00002c6d
    3674:	00002da1 	.word	0x00002da1

00003678 <cofactor_clearing>:


void cofactor_clearing(point_extproj_t P)
{ // Co-factor clearing
    3678:	b570      	push	{r4, r5, r6, lr}
    367a:	b0a0      	sub	sp, #128	; 0x80
    367c:	0004      	movs	r4, r0
  // Input: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: P = 392*P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    point_extproj_precomp_t Q;
     
    R1_to_R2(P, Q);                      // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
    367e:	4669      	mov	r1, sp
    3680:	4b0d      	ldr	r3, [pc, #52]	; (36b8 <cofactor_clearing+0x40>)
    3682:	4798      	blx	r3
    eccdouble(P);                        // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    3684:	0020      	movs	r0, r4
    3686:	4d0d      	ldr	r5, [pc, #52]	; (36bc <cofactor_clearing+0x44>)
    3688:	47a8      	blx	r5
    eccadd(Q, P);                        // P = P+Q using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    368a:	0021      	movs	r1, r4
    368c:	4668      	mov	r0, sp
    368e:	4e0c      	ldr	r6, [pc, #48]	; (36c0 <cofactor_clearing+0x48>)
    3690:	47b0      	blx	r6
    eccdouble(P);
    3692:	0020      	movs	r0, r4
    3694:	47a8      	blx	r5
    eccdouble(P);
    3696:	0020      	movs	r0, r4
    3698:	47a8      	blx	r5
    eccdouble(P);
    369a:	0020      	movs	r0, r4
    369c:	47a8      	blx	r5
    eccdouble(P);
    369e:	0020      	movs	r0, r4
    36a0:	47a8      	blx	r5
    eccadd(Q, P);
    36a2:	0021      	movs	r1, r4
    36a4:	4668      	mov	r0, sp
    36a6:	47b0      	blx	r6
    eccdouble(P);
    36a8:	0020      	movs	r0, r4
    36aa:	47a8      	blx	r5
    eccdouble(P);
    36ac:	0020      	movs	r0, r4
    36ae:	47a8      	blx	r5
    eccdouble(P);
    36b0:	0020      	movs	r0, r4
    36b2:	47a8      	blx	r5
}
    36b4:	b020      	add	sp, #128	; 0x80
    36b6:	bd70      	pop	{r4, r5, r6, pc}
    36b8:	00002c05 	.word	0x00002c05
    36bc:	00002cf1 	.word	0x00002cf1
    36c0:	00002e49 	.word	0x00002e49

000036c4 <ecc_mul>:


bool ecc_mul(point_t P, digit_t* k, point_t Q, bool clear_cofactor)
{ // Scalar multiplication Q = k*P
    36c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36c6:	4c4f      	ldr	r4, [pc, #316]	; (3804 <ecc_mul+0x140>)
    36c8:	44a5      	add	sp, r4
    36ca:	0006      	movs	r6, r0
    36cc:	000c      	movs	r4, r1
    36ce:	9201      	str	r2, [sp, #4]
    36d0:	001d      	movs	r5, r3
  //         clear_cofactor = 1 (TRUE) or 0 (FALSE) whether cofactor clearing is required or not, respectively.
  // Output: Q = k*P in affine coordinates (x,y).
  // This function performs point validation and (if selected) cofactor clearing.
    point_extproj_t R;
    point_extproj_precomp_t S, Table[NPOINTS_VARBASE];
    unsigned int digits[t_VARBASE+1] = {0}, sign_masks[t_VARBASE+1] = {0};
    36d2:	22fc      	movs	r2, #252	; 0xfc
    36d4:	2100      	movs	r1, #0
    36d6:	a849      	add	r0, sp, #292	; 0x124
    36d8:	4f4b      	ldr	r7, [pc, #300]	; (3808 <ecc_mul+0x144>)
    36da:	47b8      	blx	r7
    36dc:	22fc      	movs	r2, #252	; 0xfc
    36de:	2100      	movs	r1, #0
    36e0:	a80a      	add	r0, sp, #40	; 0x28
    36e2:	47b8      	blx	r7
    digit_t k_odd[NWORDS_ORDER];
    int i;

    DISABLE_CACHE;
    point_setup(P, R);                                         // Convert to representation (X,Y,1,Ta,Tb)
    36e4:	23d3      	movs	r3, #211	; 0xd3
    36e6:	00db      	lsls	r3, r3, #3
    36e8:	aa02      	add	r2, sp, #8
    36ea:	4694      	mov	ip, r2
    36ec:	4463      	add	r3, ip
    36ee:	0019      	movs	r1, r3
    36f0:	0030      	movs	r0, r6
    36f2:	4b46      	ldr	r3, [pc, #280]	; (380c <ecc_mul+0x148>)
    36f4:	4798      	blx	r3

    if (ecc_point_validate(R) == false) {                      // Check if point lies on the curve
    36f6:	23d3      	movs	r3, #211	; 0xd3
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	aa02      	add	r2, sp, #8
    36fc:	4694      	mov	ip, r2
    36fe:	4463      	add	r3, ip
    3700:	0018      	movs	r0, r3
    3702:	4b43      	ldr	r3, [pc, #268]	; (3810 <ecc_mul+0x14c>)
    3704:	4798      	blx	r3
    3706:	9000      	str	r0, [sp, #0]
    3708:	2800      	cmp	r0, #0
    370a:	d06f      	beq.n	37ec <ecc_mul+0x128>
        return false;
    }

    if (clear_cofactor == true) {
    370c:	2d00      	cmp	r5, #0
    370e:	d000      	beq.n	3712 <ecc_mul+0x4e>
    3710:	e070      	b.n	37f4 <ecc_mul+0x130>
        cofactor_clearing(R);
    }

    modulo_order(k, k_odd);                                    // k_odd = k mod (order)      
    3712:	a902      	add	r1, sp, #8
    3714:	0020      	movs	r0, r4
    3716:	4b3f      	ldr	r3, [pc, #252]	; (3814 <ecc_mul+0x150>)
    3718:	4798      	blx	r3
    conversion_to_odd(k_odd, k_odd);                           // Converting scalar to odd using the prime subgroup order 
    371a:	a902      	add	r1, sp, #8
    371c:	0008      	movs	r0, r1
    371e:	4b3e      	ldr	r3, [pc, #248]	; (3818 <ecc_mul+0x154>)
    3720:	4798      	blx	r3
    ecc_precomp(R, Table);                                     // Precomputation of points T[0],...,T[npoints-1] 
    3722:	a988      	add	r1, sp, #544	; 0x220
    3724:	23d3      	movs	r3, #211	; 0xd3
    3726:	00db      	lsls	r3, r3, #3
    3728:	aa02      	add	r2, sp, #8
    372a:	4694      	mov	ip, r2
    372c:	4463      	add	r3, ip
    372e:	0018      	movs	r0, r3
    3730:	4b3a      	ldr	r3, [pc, #232]	; (381c <ecc_mul+0x158>)
    3732:	4798      	blx	r3
    fixed_window_recode((uint64_t*)k_odd, digits, sign_masks); // Scalar recoding
    3734:	aa0a      	add	r2, sp, #40	; 0x28
    3736:	a949      	add	r1, sp, #292	; 0x124
    3738:	a802      	add	r0, sp, #8
    373a:	4b39      	ldr	r3, [pc, #228]	; (3820 <ecc_mul+0x15c>)
    373c:	4798      	blx	r3
    table_lookup_1x8(Table, S, digits[t_VARBASE], sign_masks[t_VARBASE]);       
    373e:	9b48      	ldr	r3, [sp, #288]	; 0x120
    3740:	9a87      	ldr	r2, [sp, #540]	; 0x21c
    3742:	21c3      	movs	r1, #195	; 0xc3
    3744:	00c9      	lsls	r1, r1, #3
    3746:	a802      	add	r0, sp, #8
    3748:	4684      	mov	ip, r0
    374a:	4461      	add	r1, ip
    374c:	a888      	add	r0, sp, #544	; 0x220
    374e:	4c35      	ldr	r4, [pc, #212]	; (3824 <ecc_mul+0x160>)
    3750:	47a0      	blx	r4
    R2_to_R4(S, R);                                            // Conversion to representation (2X,2Y,2Z)
    3752:	23d3      	movs	r3, #211	; 0xd3
    3754:	00db      	lsls	r3, r3, #3
    3756:	aa02      	add	r2, sp, #8
    3758:	4694      	mov	ip, r2
    375a:	4463      	add	r3, ip
    375c:	0019      	movs	r1, r3
    375e:	23c3      	movs	r3, #195	; 0xc3
    3760:	00db      	lsls	r3, r3, #3
    3762:	4463      	add	r3, ip
    3764:	0018      	movs	r0, r3
    3766:	4b30      	ldr	r3, [pc, #192]	; (3828 <ecc_mul+0x164>)
    3768:	4798      	blx	r3
    376a:	24f4      	movs	r4, #244	; 0xf4
    
    for (i = (t_VARBASE-1); i >= 0; i--)
    {
        eccdouble(R);
    376c:	4d2f      	ldr	r5, [pc, #188]	; (382c <ecc_mul+0x168>)
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    376e:	4e2d      	ldr	r6, [pc, #180]	; (3824 <ecc_mul+0x160>)
        eccdouble(R);
        eccdouble(R);
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    3770:	4f2f      	ldr	r7, [pc, #188]	; (3830 <ecc_mul+0x16c>)
        eccdouble(R);
    3772:	23d3      	movs	r3, #211	; 0xd3
    3774:	00db      	lsls	r3, r3, #3
    3776:	aa02      	add	r2, sp, #8
    3778:	4694      	mov	ip, r2
    377a:	4463      	add	r3, ip
    377c:	0018      	movs	r0, r3
    377e:	47a8      	blx	r5
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    3780:	ab0a      	add	r3, sp, #40	; 0x28
    3782:	58e3      	ldr	r3, [r4, r3]
    3784:	aa49      	add	r2, sp, #292	; 0x124
    3786:	58a2      	ldr	r2, [r4, r2]
    3788:	21c3      	movs	r1, #195	; 0xc3
    378a:	00c9      	lsls	r1, r1, #3
    378c:	a802      	add	r0, sp, #8
    378e:	4684      	mov	ip, r0
    3790:	4461      	add	r1, ip
    3792:	a888      	add	r0, sp, #544	; 0x220
    3794:	47b0      	blx	r6
        eccdouble(R);
    3796:	23d3      	movs	r3, #211	; 0xd3
    3798:	00db      	lsls	r3, r3, #3
    379a:	aa02      	add	r2, sp, #8
    379c:	4694      	mov	ip, r2
    379e:	4463      	add	r3, ip
    37a0:	0018      	movs	r0, r3
    37a2:	47a8      	blx	r5
        eccdouble(R);
    37a4:	23d3      	movs	r3, #211	; 0xd3
    37a6:	00db      	lsls	r3, r3, #3
    37a8:	aa02      	add	r2, sp, #8
    37aa:	4694      	mov	ip, r2
    37ac:	4463      	add	r3, ip
    37ae:	0018      	movs	r0, r3
    37b0:	47a8      	blx	r5
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    37b2:	23d3      	movs	r3, #211	; 0xd3
    37b4:	00db      	lsls	r3, r3, #3
    37b6:	aa02      	add	r2, sp, #8
    37b8:	4694      	mov	ip, r2
    37ba:	4463      	add	r3, ip
    37bc:	0018      	movs	r0, r3
    37be:	47a8      	blx	r5
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    37c0:	23d3      	movs	r3, #211	; 0xd3
    37c2:	00db      	lsls	r3, r3, #3
    37c4:	aa02      	add	r2, sp, #8
    37c6:	4694      	mov	ip, r2
    37c8:	4463      	add	r3, ip
    37ca:	0019      	movs	r1, r3
    37cc:	23c3      	movs	r3, #195	; 0xc3
    37ce:	00db      	lsls	r3, r3, #3
    37d0:	4463      	add	r3, ip
    37d2:	0018      	movs	r0, r3
    37d4:	47b8      	blx	r7
    37d6:	3c04      	subs	r4, #4
    for (i = (t_VARBASE-1); i >= 0; i--)
    37d8:	1d23      	adds	r3, r4, #4
    37da:	d1ca      	bne.n	3772 <ecc_mul+0xae>
    }
    eccnorm(R, Q);                                             // Convert to affine coordinates (x,y) 
    37dc:	9901      	ldr	r1, [sp, #4]
    37de:	20d3      	movs	r0, #211	; 0xd3
    37e0:	00c0      	lsls	r0, r0, #3
    37e2:	ab02      	add	r3, sp, #8
    37e4:	469c      	mov	ip, r3
    37e6:	4460      	add	r0, ip
    37e8:	4b12      	ldr	r3, [pc, #72]	; (3834 <ecc_mul+0x170>)
    37ea:	4798      	blx	r3
    
    return true;
}
    37ec:	9800      	ldr	r0, [sp, #0]
    37ee:	4b12      	ldr	r3, [pc, #72]	; (3838 <ecc_mul+0x174>)
    37f0:	449d      	add	sp, r3
    37f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cofactor_clearing(R);
    37f4:	20d3      	movs	r0, #211	; 0xd3
    37f6:	00c0      	lsls	r0, r0, #3
    37f8:	ab02      	add	r3, sp, #8
    37fa:	469c      	mov	ip, r3
    37fc:	4460      	add	r0, ip
    37fe:	4b0f      	ldr	r3, [pc, #60]	; (383c <ecc_mul+0x178>)
    3800:	4798      	blx	r3
    3802:	e786      	b.n	3712 <ecc_mul+0x4e>
    3804:	fffff8bc 	.word	0xfffff8bc
    3808:	000054a3 	.word	0x000054a3
    380c:	00002f1d 	.word	0x00002f1d
    3810:	00002f59 	.word	0x00002f59
    3814:	0000242d 	.word	0x0000242d
    3818:	00002465 	.word	0x00002465
    381c:	000035f9 	.word	0x000035f9
    3820:	000034a5 	.word	0x000034a5
    3824:	00002649 	.word	0x00002649
    3828:	00002cb9 	.word	0x00002cb9
    382c:	00002cf1 	.word	0x00002cf1
    3830:	00002e49 	.word	0x00002e49
    3834:	00002bad 	.word	0x00002bad
    3838:	00000744 	.word	0x00000744
    383c:	00003679 	.word	0x00003679

00003840 <fp2mul1271_a>:
//  Restriction : b != c
//*********************************************************************** 
.global fp2mul1271_a
.type	fp2mul1271_a, %function
fp2mul1271_a:
  push   {r4-r12}
    3840:	e92d 1ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
  sub    r13, r13, #44        // Allocating space in the stack
    3844:	b08b      	sub	sp, #44	; 0x2c
  
  // T0 = a0 * b0
  ldm    r0!, {r3-r6}
    3846:	c878      	ldmia	r0!, {r3, r4, r5, r6}
  ldr    r7, [r1]    
    3848:	680f      	ldr	r7, [r1, #0]
  mov    r10, #0
    384a:	f04f 0a00 	mov.w	sl, #0
  mov    r11, #0
    384e:	f04f 0b00 	mov.w	fp, #0
  mov    r12, #0
    3852:	f04f 0c00 	mov.w	ip, #0
  umull  r9, r8, r7, r3      
    3856:	fba7 9803 	umull	r9, r8, r7, r3
  umlal  r8, r10, r7, r4
    385a:	fbe7 8a04 	umlal	r8, sl, r7, r4
  umlal  r10, r11, r7, r5
    385e:	fbe7 ab05 	umlal	sl, fp, r7, r5
  umlal  r11, r12, r7, r6
    3862:	fbe7 bc06 	umlal	fp, ip, r7, r6
  ldr    r7, [r1, #4]
    3866:	684f      	ldr	r7, [r1, #4]
  str    r9, [r13], #4        // Store in stack
    3868:	f84d 9b04 	str.w	r9, [sp], #4
  mov    r9, #0
    386c:	f04f 0900 	mov.w	r9, #0
  
  umlal  r8, r9, r7, r3      
    3870:	fbe7 8903 	umlal	r8, r9, r7, r3
  umaal  r9, r10, r7, r4 
    3874:	fbe7 9a64 	umaal	r9, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3878:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    387c:	fbe7 bc66 	umaal	fp, ip, r7, r6
  ldr    r7, [r1, #8]
    3880:	688f      	ldr	r7, [r1, #8]
  str    r8, [r13], #4        // Store in stack
    3882:	f84d 8b04 	str.w	r8, [sp], #4
  mov    r8, #0
    3886:	f04f 0800 	mov.w	r8, #0
  
  umlal  r9, r8, r7, r3      
    388a:	fbe7 9803 	umlal	r9, r8, r7, r3
  umaal  r8, r10, r7, r4 
    388e:	fbe7 8a64 	umaal	r8, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3892:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    3896:	fbe7 bc66 	umaal	fp, ip, r7, r6
  ldr    r7, [r1, #12]
    389a:	68cf      	ldr	r7, [r1, #12]
  str    r9, [r13], #4        // Store in stack
    389c:	f84d 9b04 	str.w	r9, [sp], #4
  mov    r9, #0
    38a0:	f04f 0900 	mov.w	r9, #0
  
  umlal  r8, r9, r7, r3      
    38a4:	fbe7 8903 	umlal	r8, r9, r7, r3
  umaal  r9, r10, r7, r4 
    38a8:	fbe7 9a64 	umaal	r9, sl, r7, r4
  umaal  r10, r11, r7, r5 
    38ac:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6
    38b0:	fbe7 bc66 	umaal	fp, ip, r7, r6
  
  // T1 = a1 * b1
  ldm    r0!, {r3-r6}
    38b4:	c878      	ldmia	r0!, {r3, r4, r5, r6}
  ldr    r7, [r1, #16]   
    38b6:	690f      	ldr	r7, [r1, #16]
  stmia  r13!, {r8-r12}       // Store in stack  
    38b8:	e8ad 1f00 	stmia.w	sp!, {r8, r9, sl, fp, ip}
  mov    r10, #0
    38bc:	f04f 0a00 	mov.w	sl, #0
  mov    r11, #0
    38c0:	f04f 0b00 	mov.w	fp, #0
  mov    r12, #0
    38c4:	f04f 0c00 	mov.w	ip, #0
  umull  r9, r8, r7, r3      
    38c8:	fba7 9803 	umull	r9, r8, r7, r3
  umlal  r8, r10, r7, r4
    38cc:	fbe7 8a04 	umlal	r8, sl, r7, r4
  umlal  r10, r11, r7, r5
    38d0:	fbe7 ab05 	umlal	sl, fp, r7, r5
  umlal  r11, r12, r7, r6
    38d4:	fbe7 bc06 	umlal	fp, ip, r7, r6
  ldr    r7, [r1, #20]
    38d8:	694f      	ldr	r7, [r1, #20]
  str    r9, [r13], #4        // Store in stack
    38da:	f84d 9b04 	str.w	r9, [sp], #4
  mov    r9, #0
    38de:	f04f 0900 	mov.w	r9, #0
  
  umlal  r8, r9, r7, r3      
    38e2:	fbe7 8903 	umlal	r8, r9, r7, r3
  umaal  r9, r10, r7, r4 
    38e6:	fbe7 9a64 	umaal	r9, sl, r7, r4
  umaal  r10, r11, r7, r5 
    38ea:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    38ee:	fbe7 bc66 	umaal	fp, ip, r7, r6
  ldr    r7, [r1, #24]
    38f2:	698f      	ldr	r7, [r1, #24]
  str    r8, [r13], #4        // Store in stack
    38f4:	f84d 8b04 	str.w	r8, [sp], #4
  mov    r8, #0
    38f8:	f04f 0800 	mov.w	r8, #0
  
  umlal  r9, r8, r7, r3      
    38fc:	fbe7 9803 	umlal	r9, r8, r7, r3
  umaal  r8, r10, r7, r4 
    3900:	fbe7 8a64 	umaal	r8, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3904:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    3908:	fbe7 bc66 	umaal	fp, ip, r7, r6
  ldr    r7, [r1, #28]
    390c:	69cf      	ldr	r7, [r1, #28]
  str    r9, [r13], #4        // Store in stack
    390e:	f84d 9b04 	str.w	r9, [sp], #4
  mov    r9, #0
    3912:	f04f 0900 	mov.w	r9, #0
   
  sub    r13, r13, #52 
    3916:	b08d      	sub	sp, #52	; 0x34
  str    r0, [r13], #4 
    3918:	f84d 0b04 	str.w	r0, [sp], #4
  str    r1, [r13], #4 
    391c:	f84d 1b04 	str.w	r1, [sp], #4
  umlal  r8, r9, r7, r3      
    3920:	fbe7 8903 	umlal	r8, r9, r7, r3
  umaal  r9, r10, r7, r4 
    3924:	fbe7 9a64 	umaal	r9, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3928:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    392c:	fbe7 bc66 	umaal	fp, ip, r7, r6

  // c0 = T0 - T1 = a0*b0 - a1*b1
  ldmia  r13!, {r3-r6}
    3930:	bc78      	pop	{r3, r4, r5, r6}
  ldr    r0, [r13, #16]
    3932:	9804      	ldr	r0, [sp, #16]
  ldr    r1, [r13, #20]
    3934:	9905      	ldr	r1, [sp, #20]
  ldr    r7, [r13, #24]
    3936:	9f06      	ldr	r7, [sp, #24]
  subs   r3, r3, r0
    3938:	1a1b      	subs	r3, r3, r0
  sbcs   r4, r4, r1 
    393a:	418c      	sbcs	r4, r1
  sbcs   r5, r5, r7   
    393c:	41bd      	sbcs	r5, r7
  sbcs   r6, r6, r8
    393e:	eb76 0608 	sbcs.w	r6, r6, r8
  ldmia  r13!, {r7-r8}
    3942:	e8bd 0180 	ldmia.w	sp!, {r7, r8}
  ldmia  r13!, {r0-r1}
    3946:	bc03      	pop	{r0, r1}
  sbcs   r7, r7, r9
    3948:	eb77 0709 	sbcs.w	r7, r7, r9
  sbcs   r8, r8, r10
    394c:	eb78 080a 	sbcs.w	r8, r8, sl
  sbcs   r9, r0, r11
    3950:	eb70 090b 	sbcs.w	r9, r0, fp
  sbcs   r10, r1, r12
    3954:	eb71 0a0c 	sbcs.w	sl, r1, ip
  sub    r13, #40
    3958:	b08a      	sub	sp, #40	; 0x28
  pop    {r0-r1}
    395a:	bc03      	pop	{r0, r1}

  // Reducing and storing c0
  lsl    r10, r10, #1
    395c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
  orr    r10, r10, r9, lsr #31
    3960:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
  lsl    r9, r9, #1
    3964:	ea4f 0949 	mov.w	r9, r9, lsl #1
  orr    r9, r9, r8, lsr #31
    3968:	ea49 79d8 	orr.w	r9, r9, r8, lsr #31
  lsl    r8, r8, #1
    396c:	ea4f 0848 	mov.w	r8, r8, lsl #1
  orr    r8, r8, r7, lsr #31
    3970:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
  lsl    r7, r7, #1
    3974:	ea4f 0747 	mov.w	r7, r7, lsl #1
  orr    r7, r7, r6, lsr #31    
    3978:	ea47 77d6 	orr.w	r7, r7, r6, lsr #31
  and    r6, r6, #0x7FFFFFFF
    397c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
  
  subs   r7, r7, r10, lsr #31        
    3980:	ebb7 77da 	subs.w	r7, r7, sl, lsr #31
  sbcs   r8, r8, #0                 
    3984:	f178 0800 	sbcs.w	r8, r8, #0
  sbcs   r9, r9, #0 
    3988:	f179 0900 	sbcs.w	r9, r9, #0
  sbcs   r10, r10, #0
    398c:	f17a 0a00 	sbcs.w	sl, sl, #0
  and    r10, r10, #0x7FFFFFFF 
    3990:	f02a 4a00 	bic.w	sl, sl, #2147483648	; 0x80000000

  adds   r3, r3, r7
    3994:	19db      	adds	r3, r3, r7
  adcs   r4, r4, r8                 
    3996:	eb54 0408 	adcs.w	r4, r4, r8
  adcs   r5, r5, r9 
    399a:	eb55 0509 	adcs.w	r5, r5, r9
  adcs   r6, r6, r10
    399e:	eb56 060a 	adcs.w	r6, r6, sl
  
  and    r7, r6, #0x7FFFFFFF 
    39a2:	f026 4700 	bic.w	r7, r6, #2147483648	; 0x80000000
  adds   r3, r3, r6, lsr #31        
    39a6:	eb13 73d6 	adds.w	r3, r3, r6, lsr #31
  adcs   r4, r4, #0                 
    39aa:	f154 0400 	adcs.w	r4, r4, #0
  adcs   r5, r5, #0 
    39ae:	f155 0500 	adcs.w	r5, r5, #0
  adcs   r6, r7, #0  
    39b2:	f157 0600 	adcs.w	r6, r7, #0
  stm    r13, {r3-r6}
    39b6:	e88d 0078 	stmia.w	sp, {r3, r4, r5, r6}
  add    r13, r13, #16       
    39ba:	b004      	add	sp, #16
  
  // T2 = a0 * b1
  sub    r0, r0, #32
    39bc:	f1a0 0020 	sub.w	r0, r0, #32
  ldm    r0!, {r3-r6}
    39c0:	c878      	ldmia	r0!, {r3, r4, r5, r6}
  ldr    r7, [r1, #16]    
    39c2:	690f      	ldr	r7, [r1, #16]
  mov    r10, #0
    39c4:	f04f 0a00 	mov.w	sl, #0
  mov    r11, #0
    39c8:	f04f 0b00 	mov.w	fp, #0
  mov    r12, #0
    39cc:	f04f 0c00 	mov.w	ip, #0
  umull  r9, r8, r7, r3      
    39d0:	fba7 9803 	umull	r9, r8, r7, r3
  umlal  r8, r10, r7, r4
    39d4:	fbe7 8a04 	umlal	r8, sl, r7, r4
  umlal  r10, r11, r7, r5
    39d8:	fbe7 ab05 	umlal	sl, fp, r7, r5
  umlal  r11, r12, r7, r6
    39dc:	fbe7 bc06 	umlal	fp, ip, r7, r6
  ldr    r7, [r1, #20]
    39e0:	694f      	ldr	r7, [r1, #20]
  str    r9, [r13], #4         // Store in stack
    39e2:	f84d 9b04 	str.w	r9, [sp], #4
  mov    r9, #0
    39e6:	f04f 0900 	mov.w	r9, #0
  
  umlal  r8, r9, r7, r3      
    39ea:	fbe7 8903 	umlal	r8, r9, r7, r3
  umaal  r9, r10, r7, r4 
    39ee:	fbe7 9a64 	umaal	r9, sl, r7, r4
  umaal  r10, r11, r7, r5 
    39f2:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    39f6:	fbe7 bc66 	umaal	fp, ip, r7, r6
  ldr    r7, [r1, #24]
    39fa:	698f      	ldr	r7, [r1, #24]
  str    r8, [r13], #4        // Store in stack
    39fc:	f84d 8b04 	str.w	r8, [sp], #4
  mov    r8, #0
    3a00:	f04f 0800 	mov.w	r8, #0
  
  umlal  r9, r8, r7, r3      
    3a04:	fbe7 9803 	umlal	r9, r8, r7, r3
  umaal  r8, r10, r7, r4 
    3a08:	fbe7 8a64 	umaal	r8, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3a0c:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    3a10:	fbe7 bc66 	umaal	fp, ip, r7, r6
  ldr    r7, [r1, #28]
    3a14:	69cf      	ldr	r7, [r1, #28]
  str    r9, [r13], #4        // Store in stack
    3a16:	f84d 9b04 	str.w	r9, [sp], #4
  mov    r9, #0
    3a1a:	f04f 0900 	mov.w	r9, #0
  
  umlal  r8, r9, r7, r3      
    3a1e:	fbe7 8903 	umlal	r8, r9, r7, r3
  umaal  r9, r10, r7, r4 
    3a22:	fbe7 9a64 	umaal	r9, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3a26:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    3a2a:	fbe7 bc66 	umaal	fp, ip, r7, r6
  str    r8, [r13], #4
    3a2e:	f84d 8b04 	str.w	r8, [sp], #4
  
  sub    r13, r13, #32
    3a32:	b088      	sub	sp, #32
  ldm    r13, {r3-r6}
    3a34:	e89d 0078 	ldmia.w	sp, {r3, r4, r5, r6}
  stmia  r13!, {r9-r12}       // Store in stack 
    3a38:	e8ad 1e00 	stmia.w	sp!, {r9, sl, fp, ip}
  ldr    r7, [r1]    
    3a3c:	680f      	ldr	r7, [r1, #0]
  stmia  r2!, {r3-r6}         // Storing c0  
    3a3e:	c278      	stmia	r2!, {r3, r4, r5, r6}
    
  // T3 = a1 * b0
  add    r13, r13, #16
    3a40:	b004      	add	sp, #16
  ldm    r0!, {r3-r6}
    3a42:	c878      	ldmia	r0!, {r3, r4, r5, r6}
  mov    r10, #0
    3a44:	f04f 0a00 	mov.w	sl, #0
  mov    r11, #0
    3a48:	f04f 0b00 	mov.w	fp, #0
  mov    r12, #0
    3a4c:	f04f 0c00 	mov.w	ip, #0
  umull  r9, r8, r7, r3      
    3a50:	fba7 9803 	umull	r9, r8, r7, r3
  umlal  r8, r10, r7, r4
    3a54:	fbe7 8a04 	umlal	r8, sl, r7, r4
  umlal  r10, r11, r7, r5
    3a58:	fbe7 ab05 	umlal	sl, fp, r7, r5
  umlal  r11, r12, r7, r6
    3a5c:	fbe7 bc06 	umlal	fp, ip, r7, r6
  ldr    r7, [r1, #4]
    3a60:	684f      	ldr	r7, [r1, #4]
  str    r9, [r13], #4        // Store in stack
    3a62:	f84d 9b04 	str.w	r9, [sp], #4
  mov    r9, #0
    3a66:	f04f 0900 	mov.w	r9, #0
  
  umlal  r8, r9, r7, r3      
    3a6a:	fbe7 8903 	umlal	r8, r9, r7, r3
  umaal  r9, r10, r7, r4 
    3a6e:	fbe7 9a64 	umaal	r9, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3a72:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6
    3a76:	fbe7 bc66 	umaal	fp, ip, r7, r6
  ldr    r7, [r1, #8] 
    3a7a:	688f      	ldr	r7, [r1, #8]
  str    r8, [r13], #4        // Store in stack
    3a7c:	f84d 8b04 	str.w	r8, [sp], #4
  mov    r8, #0
    3a80:	f04f 0800 	mov.w	r8, #0
  
  umlal  r9, r8, r7, r3      
    3a84:	fbe7 9803 	umlal	r9, r8, r7, r3
  umaal  r8, r10, r7, r4 
    3a88:	fbe7 8a64 	umaal	r8, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3a8c:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    3a90:	fbe7 bc66 	umaal	fp, ip, r7, r6
  ldr    r7, [r1, #12]
    3a94:	68cf      	ldr	r7, [r1, #12]
  str    r9, [r13], #4        // Store in stack
    3a96:	f84d 9b04 	str.w	r9, [sp], #4
  mov    r9, #0
    3a9a:	f04f 0900 	mov.w	r9, #0
  
  umlal  r8, r9, r7, r3      
    3a9e:	fbe7 8903 	umlal	r8, r9, r7, r3
  umaal  r9, r10, r7, r4 
    3aa2:	fbe7 9a64 	umaal	r9, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3aa6:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    3aaa:	fbe7 bc66 	umaal	fp, ip, r7, r6
    
  // c1 = T2 + T3 = a0*b1 + a1*b0 
  sub    r13, r13, #28           
    3aae:	b087      	sub	sp, #28
  ldmia  r13!, {r3-r6}
    3ab0:	bc78      	pop	{r3, r4, r5, r6}
  ldm    r13, {r0-r1,r7}
    3ab2:	e89d 0083 	ldmia.w	sp, {r0, r1, r7}
  sub    r13, r13, #32
    3ab6:	b088      	sub	sp, #32
  adds   r3, r3, r0
    3ab8:	181b      	adds	r3, r3, r0
  adcs   r4, r4, r1
    3aba:	414c      	adcs	r4, r1
  adcs   r5, r5, r7   
    3abc:	417d      	adcs	r5, r7
  adcs   r6, r6, r8
    3abe:	eb56 0608 	adcs.w	r6, r6, r8
  ldmia  r13!, {r7-r8}
    3ac2:	e8bd 0180 	ldmia.w	sp!, {r7, r8}
  ldmia  r13!, {r0-r1}
    3ac6:	bc03      	pop	{r0, r1}
  adcs   r7, r7, r9
    3ac8:	eb57 0709 	adcs.w	r7, r7, r9
  adcs   r8, r8, r10
    3acc:	eb58 080a 	adcs.w	r8, r8, sl
  adcs   r9, r0, r11
    3ad0:	eb50 090b 	adcs.w	r9, r0, fp
  adcs   r10, r1, r12
    3ad4:	eb51 0a0c 	adcs.w	sl, r1, ip
    
  // Reducing and storing c1
  lsl    r10, r10, #1
    3ad8:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
  orr    r10, r10, r9, lsr #31
    3adc:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
  lsl    r9, r9, #1
    3ae0:	ea4f 0949 	mov.w	r9, r9, lsl #1
  orr    r9, r9, r8, lsr #31
    3ae4:	ea49 79d8 	orr.w	r9, r9, r8, lsr #31
  lsl    r8, r8, #1
    3ae8:	ea4f 0848 	mov.w	r8, r8, lsl #1
  orr    r8, r8, r7, lsr #31
    3aec:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
  lsl    r7, r7, #1
    3af0:	ea4f 0747 	mov.w	r7, r7, lsl #1
  orr    r7, r7, r6, lsr #31    
    3af4:	ea47 77d6 	orr.w	r7, r7, r6, lsr #31
  and    r6, r6, #0x7FFFFFFF
    3af8:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
  
  lsls   r10, r10, #1
    3afc:	ea5f 0a4a 	movs.w	sl, sl, lsl #1
  adcs   r3, r3, r7      
    3b00:	417b      	adcs	r3, r7
  adcs   r4, r4, r8                 
    3b02:	eb54 0408 	adcs.w	r4, r4, r8
  adcs   r5, r5, r9
    3b06:	eb55 0509 	adcs.w	r5, r5, r9
  adcs   r6, r6, r10, lsr #1 
    3b0a:	eb56 065a 	adcs.w	r6, r6, sl, lsr #1
  
  and    r7, r6, #0x7FFFFFFF 
    3b0e:	f026 4700 	bic.w	r7, r6, #2147483648	; 0x80000000
  adds   r3, r3, r6, lsr #31        
    3b12:	eb13 73d6 	adds.w	r3, r3, r6, lsr #31
  adcs   r4, r4, #0                 
    3b16:	f154 0400 	adcs.w	r4, r4, #0
  adcs   r5, r5, #0 
    3b1a:	f155 0500 	adcs.w	r5, r5, #0
  adcs   r6, r7, #0    
    3b1e:	f157 0600 	adcs.w	r6, r7, #0
  stmia  r2!, {r3-r6}         // Storing c1 
    3b22:	c278      	stmia	r2!, {r3, r4, r5, r6}
  
  add    r13, r13, #28        // Restoring stack  
    3b24:	b007      	add	sp, #28
  pop    {r4-r12}
    3b26:	e8bd 1ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
  bx     lr
    3b2a:	4770      	bx	lr

00003b2c <fp2sqr1271_a>:
//  Operation: c [reg_p2] = a^2 [reg_p1]
//*********************************************************************** 
.global fp2sqr1271_a
.type	fp2sqr1271_a, %function
fp2sqr1271_a:
  push   {r4-r12}
    3b2c:	e92d 1ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
  sub    r13, r13, #16        // Allocating space in the stack
    3b30:	b084      	sub	sp, #16
  
  // t0 = a0 + a1
  ldm    r0, {r2-r9}
    3b32:	e890 03fc 	ldmia.w	r0, {r2, r3, r4, r5, r6, r7, r8, r9}
  adds   r2, r2, r6
    3b36:	1992      	adds	r2, r2, r6
  adcs   r3, r3, r7
    3b38:	417b      	adcs	r3, r7
  adcs   r4, r4, r8
    3b3a:	eb54 0408 	adcs.w	r4, r4, r8
  adcs   r5, r5, r9
    3b3e:	eb55 0509 	adcs.w	r5, r5, r9
  stm    r13, {r2-r5}         // Store in stack
    3b42:	e88d 003c 	stmia.w	sp, {r2, r3, r4, r5}
  
  // t1 = a0 - a1
  ldm    r0, {r2-r5}
    3b46:	e890 003c 	ldmia.w	r0, {r2, r3, r4, r5}
  subs   r2, r2, r6
    3b4a:	1b92      	subs	r2, r2, r6
  sbcs   r3, r3, r7
    3b4c:	41bb      	sbcs	r3, r7
  sbcs   r4, r4, r8
    3b4e:	eb74 0408 	sbcs.w	r4, r4, r8
  sbcs   r5, r5, r9 
    3b52:	eb75 0509 	sbcs.w	r5, r5, r9
  
  and    r6, r5, #0x7FFFFFFF 
    3b56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
  subs   r2, r2, r5, lsr #31        
    3b5a:	ebb2 72d5 	subs.w	r2, r2, r5, lsr #31
  sbcs   r3, r3, #0                 
    3b5e:	f173 0300 	sbcs.w	r3, r3, #0
  sbcs   r4, r4, #0 
    3b62:	f174 0400 	sbcs.w	r4, r4, #0
  sbcs   r5, r6, #0
    3b66:	f176 0500 	sbcs.w	r5, r6, #0
  
  // T0 = t0 * t1 = (a0 + a1)*(a0 - a1)
  ldr    r12, [r13]    
    3b6a:	f8dd c000 	ldr.w	ip, [sp]
  mov    r9, #0
    3b6e:	f04f 0900 	mov.w	r9, #0
  mov    r10, #0
    3b72:	f04f 0a00 	mov.w	sl, #0
  mov    r11, #0
    3b76:	f04f 0b00 	mov.w	fp, #0
  umull  r6, r7, r12, r2      
    3b7a:	fbac 6702 	umull	r6, r7, ip, r2
  umlal  r7, r9, r12, r3
    3b7e:	fbec 7903 	umlal	r7, r9, ip, r3
  umlal  r9, r10, r12, r4
    3b82:	fbec 9a04 	umlal	r9, sl, ip, r4
  umlal  r10, r11, r12, r5
    3b86:	fbec ab05 	umlal	sl, fp, ip, r5
  ldr    r12, [r13, #4]
    3b8a:	f8dd c004 	ldr.w	ip, [sp, #4]
  str    r6, [r13]            // Store in stack
    3b8e:	9600      	str	r6, [sp, #0]
  mov    r6, #0
    3b90:	f04f 0600 	mov.w	r6, #0
  
  umlal  r7, r6, r12, r2      
    3b94:	fbec 7602 	umlal	r7, r6, ip, r2
  umaal  r6, r9, r12, r3 
    3b98:	fbec 6963 	umaal	r6, r9, ip, r3
  umaal  r9, r10, r12, r4 
    3b9c:	fbec 9a64 	umaal	r9, sl, ip, r4
  umaal  r10, r11, r12, r5 
    3ba0:	fbec ab65 	umaal	sl, fp, ip, r5
  ldr    r12, [r13, #8]
    3ba4:	f8dd c008 	ldr.w	ip, [sp, #8]
  str    r7, [r13, #4]        // Store in stack
    3ba8:	9701      	str	r7, [sp, #4]
  mov    r7, #0
    3baa:	f04f 0700 	mov.w	r7, #0
  
  umlal  r6, r7, r12, r2      
    3bae:	fbec 6702 	umlal	r6, r7, ip, r2
  umaal  r7, r9, r12, r3 
    3bb2:	fbec 7963 	umaal	r7, r9, ip, r3
  umaal  r9, r10, r12, r4 
    3bb6:	fbec 9a64 	umaal	r9, sl, ip, r4
  umaal  r10, r11, r12, r5 
    3bba:	fbec ab65 	umaal	sl, fp, ip, r5
  ldr    r12, [r13, #12]
    3bbe:	f8dd c00c 	ldr.w	ip, [sp, #12]
  mov    r8, #0
    3bc2:	f04f 0800 	mov.w	r8, #0
  
  umlal  r7, r8, r12, r2    
    3bc6:	fbec 7802 	umlal	r7, r8, ip, r2
  umaal  r8, r9, r12, r3 
    3bca:	fbec 8963 	umaal	r8, r9, ip, r3
  umaal  r9, r10, r12, r4 
    3bce:	fbec 9a64 	umaal	r9, sl, ip, r4
  umaal  r10, r11, r12, r5 
    3bd2:	fbec ab65 	umaal	sl, fp, ip, r5
  
  // Reduction
  lsl    r11, r11, #1
    3bd6:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
  orr    r11, r11, r10, lsr #31
    3bda:	ea4b 7bda 	orr.w	fp, fp, sl, lsr #31
  lsl    r10, r10, #1
    3bde:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
  orr    r10, r10, r9, lsr #31
    3be2:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
  lsl    r9, r9, #1
    3be6:	ea4f 0949 	mov.w	r9, r9, lsl #1
  orr    r9, r9, r8, lsr #31
    3bea:	ea49 79d8 	orr.w	r9, r9, r8, lsr #31
  lsl    r8, r8, #1
    3bee:	ea4f 0848 	mov.w	r8, r8, lsl #1
  orr    r8, r8, r7, lsr #31 
    3bf2:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
  ldm    r13, {r4,r5}  
    3bf6:	e89d 0030 	ldmia.w	sp, {r4, r5}
  and    r7, r7, #0x7FFFFFFF
    3bfa:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
  
  lsls   r11, r11, #1 
    3bfe:	ea5f 0b4b 	movs.w	fp, fp, lsl #1
  adcs   r4, r4, r8      
    3c02:	eb54 0408 	adcs.w	r4, r4, r8
  adcs   r5, r5, r9                 
    3c06:	eb55 0509 	adcs.w	r5, r5, r9
  adcs   r6, r6, r10
    3c0a:	eb56 060a 	adcs.w	r6, r6, sl
  adcs   r7, r7, r11, lsr #1 
    3c0e:	eb57 075b 	adcs.w	r7, r7, fp, lsr #1
  
  and    r8, r7, #0x7FFFFFFF 
    3c12:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
  adds   r9, r4, r7, lsr #31        
    3c16:	eb14 79d7 	adds.w	r9, r4, r7, lsr #31
  adcs   r10, r5, #0 
    3c1a:	f155 0a00 	adcs.w	sl, r5, #0
  ldm    r0, {r2-r5}                
    3c1e:	e890 003c 	ldmia.w	r0, {r2, r3, r4, r5}
  adcs   r11, r6, #0 
    3c22:	f156 0b00 	adcs.w	fp, r6, #0
  adcs   r12, r8, #0 
    3c26:	f158 0c00 	adcs.w	ip, r8, #0
  
  // t0 = 2*a0
  adds   r2, r2, r2
    3c2a:	1892      	adds	r2, r2, r2
  adcs   r3, r3, r3
    3c2c:	415b      	adcs	r3, r3
  adcs   r4, r4, r4
    3c2e:	4164      	adcs	r4, r4
  adcs   r5, r5, r5
    3c30:	416d      	adcs	r5, r5
  
  stmia  r1!, {r9-r12}        // Storing c0
    3c32:	e8a1 1e00 	stmia.w	r1!, {r9, sl, fp, ip}
  
  // T1 = 2a0 * a1
  ldr    r12, [r0, #16]    
    3c36:	f8d0 c010 	ldr.w	ip, [r0, #16]
  mov    r9, #0
    3c3a:	f04f 0900 	mov.w	r9, #0
  mov    r10, #0
    3c3e:	f04f 0a00 	mov.w	sl, #0
  mov    r11, #0
    3c42:	f04f 0b00 	mov.w	fp, #0
  umull  r6, r7, r12, r2      
    3c46:	fbac 6702 	umull	r6, r7, ip, r2
  umlal  r7, r9, r12, r3
    3c4a:	fbec 7903 	umlal	r7, r9, ip, r3
  umlal  r9, r10, r12, r4
    3c4e:	fbec 9a04 	umlal	r9, sl, ip, r4
  umlal  r10, r11, r12, r5
    3c52:	fbec ab05 	umlal	sl, fp, ip, r5
  ldr    r12, [r0, #20]
    3c56:	f8d0 c014 	ldr.w	ip, [r0, #20]
  str    r6, [r13]            // Store in stack
    3c5a:	9600      	str	r6, [sp, #0]
  mov    r6, #0
    3c5c:	f04f 0600 	mov.w	r6, #0
  
  umlal  r7, r6, r12, r2      
    3c60:	fbec 7602 	umlal	r7, r6, ip, r2
  umaal  r6, r9, r12, r3 
    3c64:	fbec 6963 	umaal	r6, r9, ip, r3
  umaal  r9, r10, r12, r4 
    3c68:	fbec 9a64 	umaal	r9, sl, ip, r4
  umaal  r10, r11, r12, r5 
    3c6c:	fbec ab65 	umaal	sl, fp, ip, r5
  ldr    r12, [r0, #24]
    3c70:	f8d0 c018 	ldr.w	ip, [r0, #24]
  str    r7, [r13, #4]        // Store in stack
    3c74:	9701      	str	r7, [sp, #4]
  mov    r7, #0
    3c76:	f04f 0700 	mov.w	r7, #0
  
  umlal  r6, r7, r12, r2      
    3c7a:	fbec 6702 	umlal	r6, r7, ip, r2
  umaal  r7, r9, r12, r3 
    3c7e:	fbec 7963 	umaal	r7, r9, ip, r3
  umaal  r9, r10, r12, r4 
    3c82:	fbec 9a64 	umaal	r9, sl, ip, r4
  umaal  r10, r11, r12, r5 
    3c86:	fbec ab65 	umaal	sl, fp, ip, r5
  ldr    r12, [r0, #28]
    3c8a:	f8d0 c01c 	ldr.w	ip, [r0, #28]
  mov    r8, #0
    3c8e:	f04f 0800 	mov.w	r8, #0
  
  umlal  r7, r8, r12, r2    
    3c92:	fbec 7802 	umlal	r7, r8, ip, r2
  umaal  r8, r9, r12, r3 
    3c96:	fbec 8963 	umaal	r8, r9, ip, r3
  umaal  r9, r10, r12, r4 
    3c9a:	fbec 9a64 	umaal	r9, sl, ip, r4
  umaal  r10, r11, r12, r5 
    3c9e:	fbec ab65 	umaal	sl, fp, ip, r5
  
  // Reduction
  lsl    r11, r11, #1
    3ca2:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
  orr    r11, r11, r10, lsr #31
    3ca6:	ea4b 7bda 	orr.w	fp, fp, sl, lsr #31
  lsl    r10, r10, #1
    3caa:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
  orr    r10, r10, r9, lsr #31
    3cae:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
  lsl    r9, r9, #1
    3cb2:	ea4f 0949 	mov.w	r9, r9, lsl #1
  orr    r9, r9, r8, lsr #31
    3cb6:	ea49 79d8 	orr.w	r9, r9, r8, lsr #31
  lsl    r8, r8, #1
    3cba:	ea4f 0848 	mov.w	r8, r8, lsl #1
  orr    r8, r8, r7, lsr #31 
    3cbe:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
  ldm    r13, {r4,r5}  
    3cc2:	e89d 0030 	ldmia.w	sp, {r4, r5}
  and    r7, r7, #0x7FFFFFFF
    3cc6:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
  
  lsls   r11, r11, #1
    3cca:	ea5f 0b4b 	movs.w	fp, fp, lsl #1
  adcs   r4, r4, r8      
    3cce:	eb54 0408 	adcs.w	r4, r4, r8
  adcs   r5, r5, r9                 
    3cd2:	eb55 0509 	adcs.w	r5, r5, r9
  adcs   r6, r6, r10
    3cd6:	eb56 060a 	adcs.w	r6, r6, sl
  adcs   r7, r7, r11, lsr #1 
    3cda:	eb57 075b 	adcs.w	r7, r7, fp, lsr #1
  
  and    r8, r7, #0x7FFFFFFF 
    3cde:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
  adds   r4, r4, r7, lsr #31        
    3ce2:	eb14 74d7 	adds.w	r4, r4, r7, lsr #31
  adcs   r5, r5, #0                 
    3ce6:	f155 0500 	adcs.w	r5, r5, #0
  adcs   r6, r6, #0 
    3cea:	f156 0600 	adcs.w	r6, r6, #0
  adcs   r7, r8, #0 
    3cee:	f158 0700 	adcs.w	r7, r8, #0
  stmia  r1!, {r4-r7}         // Storing c1  
    3cf2:	c1f0      	stmia	r1!, {r4, r5, r6, r7}
  
  add    r13, r13, #16        // Restoring stack  
    3cf4:	b004      	add	sp, #16
  pop    {r4-r12}
    3cf6:	e8bd 1ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
  bx     lr
    3cfa:	4770      	bx	lr

00003cfc <fp2add1271_a>:
//  Operation: c [reg_p3] = a [reg_p1] + b [reg_p2] mod p, p = 2^127-1
//*********************************************************************** 
.global fp2add1271_a
.type	fp2add1271_a, %function
fp2add1271_a:
  push   {r4-r10}
    3cfc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  ldm    r0!, {r3-r6}
    3d00:	c878      	ldmia	r0!, {r3, r4, r5, r6}
  ldm    r1!, {r7-r10}
    3d02:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
  adds   r3, r3, r7
    3d06:	19db      	adds	r3, r3, r7
  adcs   r4, r4, r8
    3d08:	eb54 0408 	adcs.w	r4, r4, r8
  adcs   r5, r5, r9
    3d0c:	eb55 0509 	adcs.w	r5, r5, r9
  adcs   r6, r6, r10 
    3d10:	eb56 060a 	adcs.w	r6, r6, sl
  
  ldm    r1!, {r7-r10}
    3d14:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
  adds   r3, r3, r6, lsr #31        
    3d18:	eb13 73d6 	adds.w	r3, r3, r6, lsr #31
  adcs   r4, r4, #0                 
    3d1c:	f154 0400 	adcs.w	r4, r4, #0
  adcs   r5, r5, #0 
    3d20:	f155 0500 	adcs.w	r5, r5, #0
  adcs   r6, r6, #0
    3d24:	f156 0600 	adcs.w	r6, r6, #0
  and    r6, r6, #0x7FFFFFFF 
    3d28:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000

  stmia  r2!, {r3-r6} 
    3d2c:	c278      	stmia	r2!, {r3, r4, r5, r6}
  ldm    r0!, {r3-r6}
    3d2e:	c878      	ldmia	r0!, {r3, r4, r5, r6}
  adds   r3, r3, r7
    3d30:	19db      	adds	r3, r3, r7
  adcs   r4, r4, r8
    3d32:	eb54 0408 	adcs.w	r4, r4, r8
  adcs   r5, r5, r9
    3d36:	eb55 0509 	adcs.w	r5, r5, r9
  adcs   r6, r6, r10 
    3d3a:	eb56 060a 	adcs.w	r6, r6, sl
  
  and    r7, r6, #0x7FFFFFFF 
    3d3e:	f026 4700 	bic.w	r7, r6, #2147483648	; 0x80000000
  adds   r3, r3, r6, lsr #31        
    3d42:	eb13 73d6 	adds.w	r3, r3, r6, lsr #31
  adcs   r4, r4, #0                 
    3d46:	f154 0400 	adcs.w	r4, r4, #0
  adcs   r5, r5, #0 
    3d4a:	f155 0500 	adcs.w	r5, r5, #0
  adcs   r6, r7, #0
    3d4e:	f157 0600 	adcs.w	r6, r7, #0
  stmia  r2!, {r3-r6}
    3d52:	c278      	stmia	r2!, {r3, r4, r5, r6}
  pop    {r4-r10}
    3d54:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  bx     lr
    3d58:	4770      	bx	lr

00003d5a <fp2sub1271_a>:
//  Operation: c [reg_p3] = a [reg_p1] - b [reg_p2] mod p, p = 2^127-1
//*********************************************************************** 
.global fp2sub1271_a
.type	fp2sub1271_a, %function
fp2sub1271_a:
  push   {r4-r10}
    3d5a:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  ldm    r0!, {r3-r6}
    3d5e:	c878      	ldmia	r0!, {r3, r4, r5, r6}
  ldm    r1!, {r7-r10}
    3d60:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
  subs   r3, r3, r7
    3d64:	1bdb      	subs	r3, r3, r7
  sbcs   r4, r4, r8
    3d66:	eb74 0408 	sbcs.w	r4, r4, r8
  sbcs   r5, r5, r9
    3d6a:	eb75 0509 	sbcs.w	r5, r5, r9
  sbcs   r6, r6, r10 
    3d6e:	eb76 060a 	sbcs.w	r6, r6, sl
  
  ldm    r1!, {r7-r10}
    3d72:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
  subs   r3, r3, r6, lsr #31
    3d76:	ebb3 73d6 	subs.w	r3, r3, r6, lsr #31
  sbcs   r4, r4, #0 
    3d7a:	f174 0400 	sbcs.w	r4, r4, #0
  sbcs   r5, r5, #0 
    3d7e:	f175 0500 	sbcs.w	r5, r5, #0
  sbcs   r6, r6, #0
    3d82:	f176 0600 	sbcs.w	r6, r6, #0
  and    r6, r6, #0x7FFFFFFF 
    3d86:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000

  stmia  r2!, {r3-r6} 
    3d8a:	c278      	stmia	r2!, {r3, r4, r5, r6}
  ldm    r0!, {r3-r6} 
    3d8c:	c878      	ldmia	r0!, {r3, r4, r5, r6}
  subs   r3, r3, r7
    3d8e:	1bdb      	subs	r3, r3, r7
  sbcs   r4, r4, r8
    3d90:	eb74 0408 	sbcs.w	r4, r4, r8
  sbcs   r5, r5, r9
    3d94:	eb75 0509 	sbcs.w	r5, r5, r9
  sbcs   r6, r6, r10 
    3d98:	eb76 060a 	sbcs.w	r6, r6, sl
  
  and    r7, r6, #0x7FFFFFFF 
    3d9c:	f026 4700 	bic.w	r7, r6, #2147483648	; 0x80000000
  subs   r3, r3, r6, lsr #31
    3da0:	ebb3 73d6 	subs.w	r3, r3, r6, lsr #31
  sbcs   r4, r4, #0 
    3da4:	f174 0400 	sbcs.w	r4, r4, #0
  sbcs   r5, r5, #0 
    3da8:	f175 0500 	sbcs.w	r5, r5, #0
  sbcs   r6, r7, #0
    3dac:	f177 0600 	sbcs.w	r6, r7, #0
  stmia  r2!, {r3-r6}
    3db0:	c278      	stmia	r2!, {r3, r4, r5, r6}
  pop    {r4-r10}
    3db2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  bx     lr
    3db6:	4770      	bx	lr

00003db8 <mul1271_a>:
//  Restriction : b != c
//*********************************************************************** 
.global mul1271_a
.type	mul1271_a, %function
mul1271_a:
  push   {r4-r12}
    3db8:	e92d 1ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
  ldm    r0!, {r3-r6}
    3dbc:	c878      	ldmia	r0!, {r3, r4, r5, r6}
  ldr    r7, [r1]
    3dbe:	680f      	ldr	r7, [r1, #0]
  mov    r10, #0
    3dc0:	f04f 0a00 	mov.w	sl, #0
  mov    r11, #0
    3dc4:	f04f 0b00 	mov.w	fp, #0
  mov    r12, #0
    3dc8:	f04f 0c00 	mov.w	ip, #0
  umull  r9, r8, r7, r3      
    3dcc:	fba7 9803 	umull	r9, r8, r7, r3
  umlal  r8, r10, r7, r4
    3dd0:	fbe7 8a04 	umlal	r8, sl, r7, r4
  umlal  r10, r11, r7, r5
    3dd4:	fbe7 ab05 	umlal	sl, fp, r7, r5
  umlal  r11, r12, r7, r6
    3dd8:	fbe7 bc06 	umlal	fp, ip, r7, r6
  ldr    r7, [r1, #4]
    3ddc:	684f      	ldr	r7, [r1, #4]
  str    r9, [r2], #4
    3dde:	f842 9b04 	str.w	r9, [r2], #4
  mov    r9, #0
    3de2:	f04f 0900 	mov.w	r9, #0
  
  umlal  r8, r9, r7, r3      
    3de6:	fbe7 8903 	umlal	r8, r9, r7, r3
  umaal  r9, r10, r7, r4 
    3dea:	fbe7 9a64 	umaal	r9, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3dee:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    3df2:	fbe7 bc66 	umaal	fp, ip, r7, r6
  ldr    r7, [r1, #8]
    3df6:	688f      	ldr	r7, [r1, #8]
  str    r8, [r2], #4
    3df8:	f842 8b04 	str.w	r8, [r2], #4
  mov    r8, #0
    3dfc:	f04f 0800 	mov.w	r8, #0
  
  umlal  r9, r8, r7, r3      
    3e00:	fbe7 9803 	umlal	r9, r8, r7, r3
  umaal  r8, r10, r7, r4 
    3e04:	fbe7 8a64 	umaal	r8, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3e08:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    3e0c:	fbe7 bc66 	umaal	fp, ip, r7, r6
  ldr    r7, [r1, #12] 
    3e10:	68cf      	ldr	r7, [r1, #12]
  str    r9, [r2], #4
    3e12:	f842 9b04 	str.w	r9, [r2], #4
  mov    r9, #0
    3e16:	f04f 0900 	mov.w	r9, #0
  
  umlal  r8, r9, r7, r3      
    3e1a:	fbe7 8903 	umlal	r8, r9, r7, r3
  umaal  r9, r10, r7, r4 
    3e1e:	fbe7 9a64 	umaal	r9, sl, r7, r4
  umaal  r10, r11, r7, r5 
    3e22:	fbe7 ab65 	umaal	sl, fp, r7, r5
  umaal  r11, r12, r7, r6 
    3e26:	fbe7 bc66 	umaal	fp, ip, r7, r6
  stmia  r2!, {r8-r12}
    3e2a:	e8a2 1f00 	stmia.w	r2!, {r8, r9, sl, fp, ip}
  pop    {r4-r12}
    3e2e:	e8bd 1ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
  bx     lr
    3e32:	4770      	bx	lr

00003e34 <mod1271_a>:
//  Operation: c [reg_p3] = a [reg_p1] mod p, p = 2^127-1
//*********************************************************************** 
.global mod1271_a
.type	mod1271_a, %function
mod1271_a:
  push   {r4-r9}
    3e34:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  ldm    r0!, {r2-r9}
    3e38:	e8b0 03fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
  lsl    r9, r9, #1
    3e3c:	ea4f 0949 	mov.w	r9, r9, lsl #1
  orr    r9, r9, r8, lsr #31
    3e40:	ea49 79d8 	orr.w	r9, r9, r8, lsr #31
  lsl    r8, r8, #1
    3e44:	ea4f 0848 	mov.w	r8, r8, lsl #1
  orr    r8, r8, r7, lsr #31
    3e48:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
  lsl    r7, r7, #1
    3e4c:	ea4f 0747 	mov.w	r7, r7, lsl #1
  orr    r7, r7, r6, lsr #31
    3e50:	ea47 77d6 	orr.w	r7, r7, r6, lsr #31
  lsl    r6, r6, #1
    3e54:	ea4f 0646 	mov.w	r6, r6, lsl #1
  orr    r6, r6, r5, lsr #31
    3e58:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
    
  and    r5, r5, #0x7FFFFFFF 
    3e5c:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
  adds   r2, r2, r6
    3e60:	1992      	adds	r2, r2, r6
  adcs   r3, r3, r7                 
    3e62:	417b      	adcs	r3, r7
  adcs   r4, r4, r8 
    3e64:	eb54 0408 	adcs.w	r4, r4, r8
  adcs   r5, r5, r9
    3e68:	eb55 0509 	adcs.w	r5, r5, r9
  
  and    r6, r5, #0x7FFFFFFF 
    3e6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
  adds   r2, r2, r5, lsr #31        
    3e70:	eb12 72d5 	adds.w	r2, r2, r5, lsr #31
  adcs   r3, r3, #0                 
    3e74:	f153 0300 	adcs.w	r3, r3, #0
  adcs   r4, r4, #0 
    3e78:	f154 0400 	adcs.w	r4, r4, #0
  adcs   r5, r6, #0   
    3e7c:	f156 0500 	adcs.w	r5, r6, #0
  stmia  r1!, {r2-r5}
    3e80:	c13c      	stmia	r1!, {r2, r3, r4, r5}
  pop    {r4-r9}
    3e82:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  bx     lr
    3e86:	4770      	bx	lr

00003e88 <fpadd1271_a>:
//  Operation: c [reg_p3] = a [reg_p1] + b [reg_p2] mod p, p = 2^127-1
//*********************************************************************** 
.global fpadd1271_a
.type	fpadd1271_a, %function
fpadd1271_a:
  push   {r4-r10}
    3e88:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  ldm    r0!, {r3-r6}
    3e8c:	c878      	ldmia	r0!, {r3, r4, r5, r6}
  ldm    r1!, {r7-r10}
    3e8e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
  adds   r3, r3, r7
    3e92:	19db      	adds	r3, r3, r7
  adcs   r4, r4, r8
    3e94:	eb54 0408 	adcs.w	r4, r4, r8
  adcs   r5, r5, r9
    3e98:	eb55 0509 	adcs.w	r5, r5, r9
  adcs   r6, r6, r10 
    3e9c:	eb56 060a 	adcs.w	r6, r6, sl
  
  and    r7, r6, #0x7FFFFFFF 
    3ea0:	f026 4700 	bic.w	r7, r6, #2147483648	; 0x80000000
  adds   r3, r3, r6, lsr #31        
    3ea4:	eb13 73d6 	adds.w	r3, r3, r6, lsr #31
  adcs   r4, r4, #0                 
    3ea8:	f154 0400 	adcs.w	r4, r4, #0
  adcs   r5, r5, #0 
    3eac:	f155 0500 	adcs.w	r5, r5, #0
  adcs   r6, r7, #0
    3eb0:	f157 0600 	adcs.w	r6, r7, #0
  stmia  r2!, {r3-r6}
    3eb4:	c278      	stmia	r2!, {r3, r4, r5, r6}
  pop    {r4-r10}
    3eb6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  bx     lr
    3eba:	4770      	bx	lr

00003ebc <fpsub1271_a>:
//  Operation: c [reg_p3] = a [reg_p1] - b [reg_p2] mod p, p = 2^127-1
//*********************************************************************** 
.global fpsub1271_a
.type	fpsub1271_a, %function
fpsub1271_a:
  push   {r4-r10}
    3ebc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  ldm    r0!, {r3-r6}
    3ec0:	c878      	ldmia	r0!, {r3, r4, r5, r6}
  ldm    r1!, {r7-r10}
    3ec2:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
  subs   r3, r3, r7
    3ec6:	1bdb      	subs	r3, r3, r7
  sbcs   r4, r4, r8
    3ec8:	eb74 0408 	sbcs.w	r4, r4, r8
  sbcs   r5, r5, r9
    3ecc:	eb75 0509 	sbcs.w	r5, r5, r9
  sbcs   r6, r6, r10 
    3ed0:	eb76 060a 	sbcs.w	r6, r6, sl
  
  and    r7, r6, #0x7FFFFFFF 
    3ed4:	f026 4700 	bic.w	r7, r6, #2147483648	; 0x80000000
  subs   r3, r3, r6, lsr #31
    3ed8:	ebb3 73d6 	subs.w	r3, r3, r6, lsr #31
  sbcs   r4, r4, #0 
    3edc:	f174 0400 	sbcs.w	r4, r4, #0
  sbcs   r5, r5, #0 
    3ee0:	f175 0500 	sbcs.w	r5, r5, #0
  sbcs   r6, r7, #0
    3ee4:	f177 0600 	sbcs.w	r6, r7, #0
  stmia  r2!, {r3-r6}
    3ee8:	c278      	stmia	r2!, {r3, r4, r5, r6}
  pop    {r4-r10}
    3eea:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    3eee:	4770      	bx	lr

00003ef0 <CompressedPublicKeyGeneration>:


/*************** ECDH USING COMPRESSED, 32-BYTE PUBLIC KEYS ***************/

ECCRYPTO_STATUS CompressedPublicKeyGeneration(const unsigned char* SecretKey, unsigned char* PublicKey)
{ // Compressed public key generation for key exchange
    3ef0:	b510      	push	{r4, lr}
    3ef2:	b090      	sub	sp, #64	; 0x40
    3ef4:	000c      	movs	r4, r1
  // It produces a public key PublicKey, which is the encoding of P = SecretKey*G (G is the generator).
  // Input:  32-byte SecretKey
  // Output: 32-byte PublicKey
    point_t P;
    ecc_mul_fixed((digit_t*)SecretKey, P);  // Compute public key
    3ef6:	4669      	mov	r1, sp
    3ef8:	4b04      	ldr	r3, [pc, #16]	; (3f0c <CompressedPublicKeyGeneration+0x1c>)
    3efa:	4798      	blx	r3
	encode(P, PublicKey);                   // Encode public key
    3efc:	0021      	movs	r1, r4
    3efe:	4668      	mov	r0, sp
    3f00:	4b03      	ldr	r3, [pc, #12]	; (3f10 <CompressedPublicKeyGeneration+0x20>)
    3f02:	4798      	blx	r3
    return ECCRYPTO_SUCCESS;
}
    3f04:	2001      	movs	r0, #1
    3f06:	b010      	add	sp, #64	; 0x40
    3f08:	bd10      	pop	{r4, pc}
    3f0a:	46c0      	nop			; (mov r8, r8)
    3f0c:	000031b5 	.word	0x000031b5
    3f10:	00001bc5 	.word	0x00001bc5

00003f14 <CompressedKeyGeneration>:


ECCRYPTO_STATUS CompressedKeyGeneration(unsigned char* SecretKey, unsigned char* PublicKey)
{ // Keypair generation for key exchange. Public key is compressed to 32 bytes
    3f14:	b570      	push	{r4, r5, r6, lr}
    3f16:	0006      	movs	r6, r0
    3f18:	000d      	movs	r5, r1

	//Status = RandomBytesFunction(SecretKey, 32);
	//if (Status != ECCRYPTO_SUCCESS) {
		//goto cleanup;
	//}
    Status = CompressedPublicKeyGeneration(SecretKey, PublicKey);
    3f1a:	4b07      	ldr	r3, [pc, #28]	; (3f38 <CompressedKeyGeneration+0x24>)
    3f1c:	4798      	blx	r3
    3f1e:	0004      	movs	r4, r0
    if (Status != ECCRYPTO_SUCCESS) {
    3f20:	2801      	cmp	r0, #1
    3f22:	d006      	beq.n	3f32 <CompressedKeyGeneration+0x1e>
    }

    return ECCRYPTO_SUCCESS;

cleanup:
    clear_words((unsigned int*)SecretKey, 256/(sizeof(unsigned int)*8));
    3f24:	2108      	movs	r1, #8
    3f26:	0030      	movs	r0, r6
    3f28:	4e04      	ldr	r6, [pc, #16]	; (3f3c <CompressedKeyGeneration+0x28>)
    3f2a:	47b0      	blx	r6
    clear_words((unsigned int*)PublicKey, 256/(sizeof(unsigned int)*8));
    3f2c:	2108      	movs	r1, #8
    3f2e:	0028      	movs	r0, r5
    3f30:	47b0      	blx	r6

    return Status;
}
    3f32:	0020      	movs	r0, r4
    3f34:	bd70      	pop	{r4, r5, r6, pc}
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	00003ef1 	.word	0x00003ef1
    3f3c:	00002b99 	.word	0x00002b99

00003f40 <CompressedSecretAgreement>:


ECCRYPTO_STATUS CompressedSecretAgreement(const unsigned char* SecretKey, const unsigned char* PublicKey, unsigned char* SharedSecret)
{ // Secret agreement computation for key exchange using a compressed, 32-byte public key
    3f40:	b570      	push	{r4, r5, r6, lr}
    3f42:	b090      	sub	sp, #64	; 0x40
    3f44:	0006      	movs	r6, r0
    3f46:	0008      	movs	r0, r1
    3f48:	0015      	movs	r5, r2
  // Inputs: 32-byte SecretKey and 32-byte PublicKey
  // Output: 32-byte SharedSecret
    point_t A;
    ECCRYPTO_STATUS Status = ECCRYPTO_ERROR_UNKNOWN;

    if ((PublicKey[15] & 0x80) != 0) {  // Is bit128(PublicKey) = 0?
    3f4a:	7bcb      	ldrb	r3, [r1, #15]
    3f4c:	2b7f      	cmp	r3, #127	; 0x7f
    3f4e:	d830      	bhi.n	3fb2 <CompressedSecretAgreement+0x72>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
		goto cleanup;
    }

	Status = decode(PublicKey, A);    // Also verifies that A is on the curve. If it is not, it fails
    3f50:	4669      	mov	r1, sp
    3f52:	4b19      	ldr	r3, [pc, #100]	; (3fb8 <CompressedSecretAgreement+0x78>)
    3f54:	4798      	blx	r3
    3f56:	0004      	movs	r4, r0
	if (Status != ECCRYPTO_SUCCESS) {
    3f58:	2801      	cmp	r0, #1
    3f5a:	d006      	beq.n	3f6a <CompressedSecretAgreement+0x2a>
	memmove(SharedSecret, (unsigned char*)A->y, 32);

	return ECCRYPTO_SUCCESS;
    
cleanup:
    clear_words((unsigned int*)SharedSecret, 256/(sizeof(unsigned int)*8));
    3f5c:	2108      	movs	r1, #8
    3f5e:	0028      	movs	r0, r5
    3f60:	4b16      	ldr	r3, [pc, #88]	; (3fbc <CompressedSecretAgreement+0x7c>)
    3f62:	4798      	blx	r3
    
    return Status;
}
    3f64:	0020      	movs	r0, r4
    3f66:	b010      	add	sp, #64	; 0x40
    3f68:	bd70      	pop	{r4, r5, r6, pc}
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    3f6a:	2301      	movs	r3, #1
    3f6c:	466a      	mov	r2, sp
    3f6e:	0031      	movs	r1, r6
    3f70:	4668      	mov	r0, sp
    3f72:	4e13      	ldr	r6, [pc, #76]	; (3fc0 <CompressedSecretAgreement+0x80>)
    3f74:	47b0      	blx	r6
	if (Status != ECCRYPTO_SUCCESS) {
    3f76:	2800      	cmp	r0, #0
    3f78:	d101      	bne.n	3f7e <CompressedSecretAgreement+0x3e>
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    3f7a:	2400      	movs	r4, #0
    3f7c:	e7ee      	b.n	3f5c <CompressedSecretAgreement+0x1c>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    3f7e:	2108      	movs	r1, #8
    3f80:	4668      	mov	r0, sp
    3f82:	4b10      	ldr	r3, [pc, #64]	; (3fc4 <CompressedSecretAgreement+0x84>)
    3f84:	4798      	blx	r3
    3f86:	2800      	cmp	r0, #0
    3f88:	d105      	bne.n	3f96 <CompressedSecretAgreement+0x56>
	memmove(SharedSecret, (unsigned char*)A->y, 32);
    3f8a:	2220      	movs	r2, #32
    3f8c:	a908      	add	r1, sp, #32
    3f8e:	0028      	movs	r0, r5
    3f90:	4b0d      	ldr	r3, [pc, #52]	; (3fc8 <CompressedSecretAgreement+0x88>)
    3f92:	4798      	blx	r3
	return ECCRYPTO_SUCCESS;
    3f94:	e7e6      	b.n	3f64 <CompressedSecretAgreement+0x24>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    3f96:	2107      	movs	r1, #7
    3f98:	a809      	add	r0, sp, #36	; 0x24
    3f9a:	4b0a      	ldr	r3, [pc, #40]	; (3fc4 <CompressedSecretAgreement+0x84>)
    3f9c:	4798      	blx	r3
    3f9e:	2800      	cmp	r0, #0
    3fa0:	d0f3      	beq.n	3f8a <CompressedSecretAgreement+0x4a>
    3fa2:	9908      	ldr	r1, [sp, #32]
    3fa4:	1e4b      	subs	r3, r1, #1
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    3fa6:	2201      	movs	r2, #1
    3fa8:	1a52      	subs	r2, r2, r1
    3faa:	4313      	orrs	r3, r2
    if (is_neutral_point(A)) {  // Is output = neutral point (0,1)?
    3fac:	d4ed      	bmi.n	3f8a <CompressedSecretAgreement+0x4a>
		Status = ECCRYPTO_ERROR_SHARED_KEY;
    3fae:	2407      	movs	r4, #7
    3fb0:	e7d4      	b.n	3f5c <CompressedSecretAgreement+0x1c>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
    3fb2:	2406      	movs	r4, #6
    3fb4:	e7d2      	b.n	3f5c <CompressedSecretAgreement+0x1c>
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	00001c0d 	.word	0x00001c0d
    3fbc:	00002b99 	.word	0x00002b99
    3fc0:	000036c5 	.word	0x000036c5
    3fc4:	00001ba1 	.word	0x00001ba1
    3fc8:	0000546d 	.word	0x0000546d

00003fcc <internalPermutation>:
static void messageFold(const uint8_t *message, uint8_t *cells){
    cells[0] ^= message[0];
    cells[1] ^= message[1];
}

static void internalPermutation(uint8_t *cells){
    3fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fce:	46de      	mov	lr, fp
    3fd0:	4657      	mov	r7, sl
    3fd2:	464e      	mov	r6, r9
    3fd4:	4645      	mov	r5, r8
    3fd6:	b5e0      	push	{r5, r6, r7, lr}
    3fd8:	b08b      	sub	sp, #44	; 0x2c
    3fda:	0007      	movs	r7, r0
    int round;
    for(round=0;round<12;round++){
    3fdc:	2300      	movs	r3, #0
    3fde:	9307      	str	r3, [sp, #28]
    3fe0:	e0c6      	b.n	4170 <internalPermutation+0x1a4>
    for(i=0;i<D_VAL;i++){
        tmp_cells[i]=0;
        for(j=0;j<D_VAL;j++){
            uint8_t nib = cells[(col+(D_VAL*j))/2];
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
            else{nib = (nib & 0x0F);}
    3fe2:	200f      	movs	r0, #15
    3fe4:	4002      	ands	r2, r0
    3fe6:	e03e      	b.n	4066 <internalPermutation+0x9a>
                ret=MMUL[loc];
                b=0;
            }
            else{
                // Account for odd value as (a x 3) is (a x (2 + 1))
                if(b&1){
    3fe8:	2301      	movs	r3, #1
    3fea:	4223      	tst	r3, r4
    3fec:	d003      	beq.n	3ff6 <internalPermutation+0x2a>
                    odd ^= ret;
    3fee:	4661      	mov	r1, ip
    3ff0:	4051      	eors	r1, r2
    3ff2:	b2cb      	uxtb	r3, r1
    3ff4:	469c      	mov	ip, r3
                }

                loc=ret; // loc holds the current value to be multiplied by 2
                // (a x 2) not found
                if(MMUL[32 + loc] > 0xF){
    3ff6:	9204      	str	r2, [sp, #16]
    3ff8:	2320      	movs	r3, #32
    3ffa:	4698      	mov	r8, r3
    3ffc:	4490      	add	r8, r2
    3ffe:	4b83      	ldr	r3, [pc, #524]	; (420c <internalPermutation+0x240>)
    4000:	4641      	mov	r1, r8
    4002:	5c59      	ldrb	r1, [r3, r1]
    4004:	290f      	cmp	r1, #15
    4006:	d912      	bls.n	402e <internalPermutation+0x62>
                    ret = ret << 1;
    4008:	0052      	lsls	r2, r2, #1
    400a:	b2d1      	uxtb	r1, r2
                    // XOR with constant if shifted results is larger than 4 bits
                    if(ret&0x10){ret^=G_CON;}
    400c:	2310      	movs	r3, #16
    400e:	420b      	tst	r3, r1
    4010:	d002      	beq.n	4018 <internalPermutation+0x4c>
    4012:	3b0d      	subs	r3, #13
    4014:	4059      	eors	r1, r3
    4016:	b2c9      	uxtb	r1, r1

                    ret &= 0xF; // Only care about lower nibble
    4018:	230f      	movs	r3, #15
    401a:	4019      	ands	r1, r3
                    MMUL[32 + loc] = ret;
    401c:	4b7b      	ldr	r3, [pc, #492]	; (420c <internalPermutation+0x240>)
    401e:	4642      	mov	r2, r8
    4020:	5499      	strb	r1, [r3, r2]
                    MMUL[16*loc + 2] = ret;
    4022:	9b04      	ldr	r3, [sp, #16]
    4024:	011a      	lsls	r2, r3, #4
    4026:	4b79      	ldr	r3, [pc, #484]	; (420c <internalPermutation+0x240>)
    4028:	4698      	mov	r8, r3
    402a:	4442      	add	r2, r8
    402c:	7091      	strb	r1, [r2, #2]
                }
                else{
                    ret = MMUL[32 + loc];
                }
                b = b >> 1;
    402e:	0864      	lsrs	r4, r4, #1
    4030:	b2e4      	uxtb	r4, r4
    4032:	000a      	movs	r2, r1
    4034:	e034      	b.n	40a0 <internalPermutation+0xd4>
    4036:	9b01      	ldr	r3, [sp, #4]
        while(b>1){
    4038:	0011      	movs	r1, r2
    403a:	e03b      	b.n	40b4 <internalPermutation+0xe8>
        if(b==1){return a;} // Multiply a by 1 is a
    403c:	0003      	movs	r3, r0
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    403e:	aa08      	add	r2, sp, #32
    4040:	5cba      	ldrb	r2, [r7, r2]
    4042:	4053      	eors	r3, r2
    4044:	aa08      	add	r2, sp, #32
    4046:	54bb      	strb	r3, [r7, r2]
    4048:	3506      	adds	r5, #6
    404a:	3601      	adds	r6, #1
        for(j=0;j<D_VAL;j++){
    404c:	2d24      	cmp	r5, #36	; 0x24
    404e:	d03f      	beq.n	40d0 <internalPermutation+0x104>
            uint8_t nib = cells[(col+(D_VAL*j))/2];
    4050:	4653      	mov	r3, sl
    4052:	18ea      	adds	r2, r5, r3
    4054:	0fd3      	lsrs	r3, r2, #31
    4056:	189b      	adds	r3, r3, r2
    4058:	105b      	asrs	r3, r3, #1
    405a:	465a      	mov	r2, fp
    405c:	5cd2      	ldrb	r2, [r2, r3]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    405e:	464b      	mov	r3, r9
    4060:	2b00      	cmp	r3, #0
    4062:	d1be      	bne.n	3fe2 <internalPermutation+0x16>
    4064:	0912      	lsrs	r2, r2, #4
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    4066:	7831      	ldrb	r1, [r6, #0]
    uint8_t ret = MMUL[(16*a)+b];
    4068:	0108      	lsls	r0, r1, #4
    406a:	4b68      	ldr	r3, [pc, #416]	; (420c <internalPermutation+0x240>)
    406c:	181b      	adds	r3, r3, r0
    406e:	5c9b      	ldrb	r3, [r3, r2]
    if(ret > 0x0F){
    4070:	2b0f      	cmp	r3, #15
    4072:	d9e4      	bls.n	403e <internalPermutation+0x72>
    a &= 0x0F;
    4074:	230f      	movs	r3, #15
    4076:	0018      	movs	r0, r3
    4078:	4008      	ands	r0, r1
    b &= 0x0F;
    407a:	4013      	ands	r3, r2
        if(a<b){SWAP(a,b);} // Want a to be larger to reduce computation
    407c:	4298      	cmp	r0, r3
    407e:	d206      	bcs.n	408e <internalPermutation+0xc2>
    4080:	4051      	eors	r1, r2
    4082:	404a      	eors	r2, r1
    4084:	200f      	movs	r0, #15
    4086:	0003      	movs	r3, r0
    4088:	4013      	ands	r3, r2
    408a:	4051      	eors	r1, r2
    408c:	4008      	ands	r0, r1
        if(b==0){return b;} // Multiply a by 0 is 0
    408e:	2b00      	cmp	r3, #0
    4090:	d0d5      	beq.n	403e <internalPermutation+0x72>
        if(b==1){return a;} // Multiply a by 1 is a
    4092:	2b01      	cmp	r3, #1
    4094:	d0d2      	beq.n	403c <internalPermutation+0x70>
    4096:	0002      	movs	r2, r0
    4098:	001c      	movs	r4, r3
    409a:	2100      	movs	r1, #0
    409c:	468c      	mov	ip, r1
    409e:	9301      	str	r3, [sp, #4]
        while(b>1){
    40a0:	2c01      	cmp	r4, #1
    40a2:	d9c8      	bls.n	4036 <internalPermutation+0x6a>
            loc=(ret*16)+b;
    40a4:	0111      	lsls	r1, r2, #4
    40a6:	1861      	adds	r1, r4, r1
            if(MMUL[loc]<0x10){
    40a8:	b2c9      	uxtb	r1, r1
    40aa:	4b58      	ldr	r3, [pc, #352]	; (420c <internalPermutation+0x240>)
    40ac:	5c59      	ldrb	r1, [r3, r1]
    40ae:	290f      	cmp	r1, #15
    40b0:	d89a      	bhi.n	3fe8 <internalPermutation+0x1c>
    40b2:	9b01      	ldr	r3, [sp, #4]
            }
        }
        ret ^= odd; // One last "add" if multiplying by odd number at any point
    40b4:	4662      	mov	r2, ip
    40b6:	404a      	eors	r2, r1
    40b8:	0011      	movs	r1, r2
        ret &= 0xF; // Only care about lower nibble
    40ba:	220f      	movs	r2, #15
    40bc:	4011      	ands	r1, r2

        // Update map so won't have to recompute a x b
        MMUL[(a*16)+b_orig]=ret;
    40be:	4a53      	ldr	r2, [pc, #332]	; (420c <internalPermutation+0x240>)
    40c0:	0104      	lsls	r4, r0, #4
    40c2:	1914      	adds	r4, r2, r4
    40c4:	54e1      	strb	r1, [r4, r3]
        MMUL[(b_orig*16)+a]=ret;
    40c6:	011b      	lsls	r3, r3, #4
    40c8:	18d2      	adds	r2, r2, r3
    40ca:	5411      	strb	r1, [r2, r0]
        ret &= 0xF; // Only care about lower nibble
    40cc:	000b      	movs	r3, r1
    40ce:	e7b6      	b.n	403e <internalPermutation+0x72>
    for(i=0;i<D_VAL;i++){
    40d0:	9b02      	ldr	r3, [sp, #8]
    40d2:	3301      	adds	r3, #1
    40d4:	9302      	str	r3, [sp, #8]
    40d6:	9a03      	ldr	r2, [sp, #12]
    40d8:	3206      	adds	r2, #6
    40da:	9203      	str	r2, [sp, #12]
    40dc:	2b06      	cmp	r3, #6
    40de:	d00b      	beq.n	40f8 <internalPermutation+0x12c>
    40e0:	9902      	ldr	r1, [sp, #8]
    40e2:	000f      	movs	r7, r1
        tmp_cells[i]=0;
    40e4:	2300      	movs	r3, #0
    40e6:	aa08      	add	r2, sp, #32
    40e8:	548b      	strb	r3, [r1, r2]
    40ea:	9e03      	ldr	r6, [sp, #12]
    40ec:	9d06      	ldr	r5, [sp, #24]
    40ee:	33ff      	adds	r3, #255	; 0xff
    40f0:	9a05      	ldr	r2, [sp, #20]
    40f2:	401a      	ands	r2, r3
    40f4:	4692      	mov	sl, r2
    40f6:	e7ab      	b.n	4050 <internalPermutation+0x84>
    40f8:	9b05      	ldr	r3, [sp, #20]
    40fa:	469c      	mov	ip, r3
    40fc:	464f      	mov	r7, r9
    40fe:	4650      	mov	r0, sl
    for(i=0;i<D_VAL;i++){
    4100:	2100      	movs	r1, #0
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    4102:	240f      	movs	r4, #15
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    4104:	465a      	mov	r2, fp
    4106:	e00d      	b.n	4124 <internalPermutation+0x158>
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    4108:	0fc3      	lsrs	r3, r0, #31
    410a:	181b      	adds	r3, r3, r0
    410c:	105b      	asrs	r3, r3, #1
    410e:	18d3      	adds	r3, r2, r3
    4110:	781d      	ldrb	r5, [r3, #0]
    4112:	43a5      	bics	r5, r4
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    4114:	ae08      	add	r6, sp, #32
    4116:	5d8e      	ldrb	r6, [r1, r6]
    4118:	4335      	orrs	r5, r6
    411a:	701d      	strb	r5, [r3, #0]
    for(i=0;i<D_VAL;i++){
    411c:	3101      	adds	r1, #1
    411e:	3006      	adds	r0, #6
    4120:	2906      	cmp	r1, #6
    4122:	d00d      	beq.n	4140 <internalPermutation+0x174>
        if(col%2 == 0){
    4124:	2f00      	cmp	r7, #0
    4126:	d1ef      	bne.n	4108 <internalPermutation+0x13c>
            cells[(col+(D_VAL*i))/2] &= 0x0F;
    4128:	0fc3      	lsrs	r3, r0, #31
    412a:	181b      	adds	r3, r3, r0
    412c:	105b      	asrs	r3, r3, #1
    412e:	18d3      	adds	r3, r2, r3
    4130:	781d      	ldrb	r5, [r3, #0]
    4132:	4025      	ands	r5, r4
            cells[(col+(D_VAL*i))/2] |= (tmp_cells[i] << 4);
    4134:	ae08      	add	r6, sp, #32
    4136:	5d8e      	ldrb	r6, [r1, r6]
    4138:	0136      	lsls	r6, r6, #4
    413a:	4335      	orrs	r5, r6
    413c:	701d      	strb	r5, [r3, #0]
    413e:	e7ed      	b.n	411c <internalPermutation+0x150>
    4140:	4693      	mov	fp, r2
    for(i=0;i<D_VAL;i++){
    4142:	2301      	movs	r3, #1
    4144:	4698      	mov	r8, r3
    4146:	44c4      	add	ip, r8
    4148:	4663      	mov	r3, ip
    414a:	2b06      	cmp	r3, #6
    414c:	d00a      	beq.n	4164 <internalPermutation+0x198>
    414e:	4b30      	ldr	r3, [pc, #192]	; (4210 <internalPermutation+0x244>)
    4150:	9303      	str	r3, [sp, #12]
    for(i=0;i<D_VAL;i++){
    4152:	2300      	movs	r3, #0
    4154:	9302      	str	r3, [sp, #8]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    4156:	4667      	mov	r7, ip
    4158:	3301      	adds	r3, #1
    415a:	401f      	ands	r7, r3
    415c:	4663      	mov	r3, ip
    415e:	9305      	str	r3, [sp, #20]
    4160:	46b9      	mov	r9, r7
    4162:	e7bd      	b.n	40e0 <internalPermutation+0x114>
    4164:	0017      	movs	r7, r2
    for(round=0;round<12;round++){
    4166:	9b07      	ldr	r3, [sp, #28]
    4168:	3301      	adds	r3, #1
    416a:	9307      	str	r3, [sp, #28]
    416c:	2b0c      	cmp	r3, #12
    416e:	d046      	beq.n	41fe <internalPermutation+0x232>
        cells[i*T_VAL/D_VAL] ^= (RC[round] ^ IC[i]) << 4;
    4170:	4b28      	ldr	r3, [pc, #160]	; (4214 <internalPermutation+0x248>)
    4172:	9a07      	ldr	r2, [sp, #28]
    4174:	5cd3      	ldrb	r3, [r2, r3]
    4176:	4698      	mov	r8, r3
    4178:	4d27      	ldr	r5, [pc, #156]	; (4218 <internalPermutation+0x24c>)
    417a:	2400      	movs	r4, #0
    417c:	4e27      	ldr	r6, [pc, #156]	; (421c <internalPermutation+0x250>)
    417e:	003b      	movs	r3, r7
    4180:	4647      	mov	r7, r8
    4182:	4698      	mov	r8, r3
    4184:	2106      	movs	r1, #6
    4186:	0020      	movs	r0, r4
    4188:	47b0      	blx	r6
    418a:	4440      	add	r0, r8
    418c:	782b      	ldrb	r3, [r5, #0]
    418e:	407b      	eors	r3, r7
    4190:	011b      	lsls	r3, r3, #4
    4192:	7802      	ldrb	r2, [r0, #0]
    4194:	4053      	eors	r3, r2
    4196:	7003      	strb	r3, [r0, #0]
    4198:	3412      	adds	r4, #18
    419a:	3501      	adds	r5, #1
    for(i=0;i<D_VAL;i++){
    419c:	2c6c      	cmp	r4, #108	; 0x6c
    419e:	d1f1      	bne.n	4184 <internalPermutation+0x1b8>
    41a0:	4647      	mov	r7, r8
    41a2:	4641      	mov	r1, r8
    41a4:	4645      	mov	r5, r8
    41a6:	3512      	adds	r5, #18
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    41a8:	481d      	ldr	r0, [pc, #116]	; (4220 <internalPermutation+0x254>)
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    41aa:	3c5d      	subs	r4, #93	; 0x5d
        uint16_t tmp=cells[i];
    41ac:	780a      	ldrb	r2, [r1, #0]
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    41ae:	0913      	lsrs	r3, r2, #4
    41b0:	5cc3      	ldrb	r3, [r0, r3]
    41b2:	011b      	lsls	r3, r3, #4
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    41b4:	4022      	ands	r2, r4
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    41b6:	5c82      	ldrb	r2, [r0, r2]
    41b8:	4313      	orrs	r3, r2
    41ba:	700b      	strb	r3, [r1, #0]
    41bc:	3101      	adds	r1, #1
    for(i=0;i<T_VAL;i++){
    41be:	428d      	cmp	r5, r1
    41c0:	d1f4      	bne.n	41ac <internalPermutation+0x1e0>
    41c2:	1cf9      	adds	r1, r7, #3
    41c4:	2314      	movs	r3, #20
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    41c6:	2018      	movs	r0, #24
    41c8:	001a      	movs	r2, r3
        tmp1|=(cells[i*3]<<16);
    41ca:	780b      	ldrb	r3, [r1, #0]
    41cc:	041b      	lsls	r3, r3, #16
        tmp1|=(cells[(i*3)+1]<<8);
    41ce:	784c      	ldrb	r4, [r1, #1]
    41d0:	0224      	lsls	r4, r4, #8
        tmp1|=(cells[(i*3)+2]);
    41d2:	4323      	orrs	r3, r4
    41d4:	788c      	ldrb	r4, [r1, #2]
    41d6:	4323      	orrs	r3, r4
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    41d8:	1a84      	subs	r4, r0, r2
    41da:	001d      	movs	r5, r3
    41dc:	40a5      	lsls	r5, r4
    41de:	40d3      	lsrs	r3, r2
    41e0:	432b      	orrs	r3, r5
        cells[i*3]=(tmp1 & 0xFF0000) >> 16;
    41e2:	0c1c      	lsrs	r4, r3, #16
    41e4:	700c      	strb	r4, [r1, #0]
        cells[(i*3)+1] = (tmp1 & 0xFF00) >> 8;
    41e6:	0a1c      	lsrs	r4, r3, #8
    41e8:	704c      	strb	r4, [r1, #1]
        cells[(i*3)+2] = (tmp1 & 0xFF);
    41ea:	708b      	strb	r3, [r1, #2]
    41ec:	3103      	adds	r1, #3
    41ee:	3a04      	subs	r2, #4
    for(i=1;i<D_VAL;i++){
    41f0:	2a00      	cmp	r2, #0
    41f2:	d1ea      	bne.n	41ca <internalPermutation+0x1fe>
    41f4:	9206      	str	r2, [sp, #24]
    41f6:	2300      	movs	r3, #0
    41f8:	469c      	mov	ip, r3
    41fa:	46bb      	mov	fp, r7
    41fc:	e7a7      	b.n	414e <internalPermutation+0x182>
}
    41fe:	b00b      	add	sp, #44	; 0x2c
    4200:	bc3c      	pop	{r2, r3, r4, r5}
    4202:	4690      	mov	r8, r2
    4204:	4699      	mov	r9, r3
    4206:	46a2      	mov	sl, r4
    4208:	46ab      	mov	fp, r5
    420a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    420c:	20000004 	.word	0x20000004
    4210:	000084a8 	.word	0x000084a8
    4214:	000084d4 	.word	0x000084d4
    4218:	000084cc 	.word	0x000084cc
    421c:	000051f9 	.word	0x000051f9
    4220:	000084e0 	.word	0x000084e0

00004224 <photon128>:
void photon128(uint8_t *message, const int32_t message_bytes, uint8_t *hash){
    4224:	b5f0      	push	{r4, r5, r6, r7, lr}
    4226:	46d6      	mov	lr, sl
    4228:	464f      	mov	r7, r9
    422a:	4646      	mov	r6, r8
    422c:	b5c0      	push	{r6, r7, lr}
    422e:	b088      	sub	sp, #32
    4230:	0005      	movs	r5, r0
    4232:	9001      	str	r0, [sp, #4]
    4234:	4689      	mov	r9, r1
    4236:	0016      	movs	r6, r2
    memset((uint8_t *) cells,0,T_VAL-3);
    4238:	ac03      	add	r4, sp, #12
    423a:	220f      	movs	r2, #15
    423c:	2100      	movs	r1, #0
    423e:	0020      	movs	r0, r4
    4240:	4b30      	ldr	r3, [pc, #192]	; (4304 <photon128+0xe0>)
    4242:	4798      	blx	r3
    cells[15]=0x20;
    4244:	2320      	movs	r3, #32
    4246:	73e3      	strb	r3, [r4, #15]
    cells[16]=0x10;
    4248:	3b10      	subs	r3, #16
    424a:	7423      	strb	r3, [r4, #16]
    cells[17]=0x10;
    424c:	7463      	strb	r3, [r4, #17]
    for(i=0;i<message_bytes/R_VAL;i++){
    424e:	464b      	mov	r3, r9
    4250:	0fdb      	lsrs	r3, r3, #31
    4252:	444b      	add	r3, r9
    4254:	105b      	asrs	r3, r3, #1
    4256:	469a      	mov	sl, r3
    4258:	2b00      	cmp	r3, #0
    425a:	dd49      	ble.n	42f0 <photon128+0xcc>
    425c:	005b      	lsls	r3, r3, #1
    425e:	46a8      	mov	r8, r5
    4260:	4498      	add	r8, r3
    cells[0] ^= message[0];
    4262:	ac03      	add	r4, sp, #12
        internalPermutation(&cells[0]);
    4264:	4f28      	ldr	r7, [pc, #160]	; (4308 <photon128+0xe4>)
    cells[0] ^= message[0];
    4266:	7823      	ldrb	r3, [r4, #0]
    4268:	782a      	ldrb	r2, [r5, #0]
    426a:	4053      	eors	r3, r2
    426c:	7023      	strb	r3, [r4, #0]
    cells[1] ^= message[1];
    426e:	7863      	ldrb	r3, [r4, #1]
    4270:	786a      	ldrb	r2, [r5, #1]
    4272:	4053      	eors	r3, r2
    4274:	7063      	strb	r3, [r4, #1]
        internalPermutation(&cells[0]);
    4276:	0020      	movs	r0, r4
    4278:	47b8      	blx	r7
    427a:	3502      	adds	r5, #2
    for(i=0;i<message_bytes/R_VAL;i++){
    427c:	4545      	cmp	r5, r8
    427e:	d1f2      	bne.n	4266 <photon128+0x42>
    4280:	4653      	mov	r3, sl
    if(message_bytes%2){
    4282:	464a      	mov	r2, r9
    4284:	07d2      	lsls	r2, r2, #31
    4286:	d535      	bpl.n	42f4 <photon128+0xd0>
        cells[0] ^= message[i*2];
    4288:	aa03      	add	r2, sp, #12
    428a:	005b      	lsls	r3, r3, #1
    428c:	9901      	ldr	r1, [sp, #4]
    428e:	5c5b      	ldrb	r3, [r3, r1]
    4290:	7811      	ldrb	r1, [r2, #0]
    4292:	404b      	eors	r3, r1
    4294:	7013      	strb	r3, [r2, #0]
        cells[1] ^= 0x80; //Padding
    4296:	7851      	ldrb	r1, [r2, #1]
    4298:	2380      	movs	r3, #128	; 0x80
    429a:	425b      	negs	r3, r3
    429c:	404b      	eors	r3, r1
    429e:	7053      	strb	r3, [r2, #1]
    internalPermutation(&cells[0]);
    42a0:	ac03      	add	r4, sp, #12
    42a2:	0020      	movs	r0, r4
    42a4:	4b18      	ldr	r3, [pc, #96]	; (4308 <photon128+0xe4>)
    42a6:	4798      	blx	r3
    memset(hash,0,N_VAL);
    42a8:	2210      	movs	r2, #16
    42aa:	2100      	movs	r1, #0
    42ac:	0030      	movs	r0, r6
    42ae:	4b15      	ldr	r3, [pc, #84]	; (4304 <photon128+0xe0>)
    42b0:	4798      	blx	r3
    hash[0] |= cells[0];
    42b2:	7833      	ldrb	r3, [r6, #0]
    42b4:	7822      	ldrb	r2, [r4, #0]
    42b6:	4313      	orrs	r3, r2
    42b8:	7033      	strb	r3, [r6, #0]
    hash[1] |= cells[1];
    42ba:	7873      	ldrb	r3, [r6, #1]
    42bc:	7862      	ldrb	r2, [r4, #1]
    42be:	4313      	orrs	r3, r2
    42c0:	7073      	strb	r3, [r6, #1]
    42c2:	1cb4      	adds	r4, r6, #2
    42c4:	3610      	adds	r6, #16
        internalPermutation(&cells[0]);
    42c6:	ad03      	add	r5, sp, #12
    42c8:	4f0f      	ldr	r7, [pc, #60]	; (4308 <photon128+0xe4>)
    42ca:	0028      	movs	r0, r5
    42cc:	47b8      	blx	r7
        hash[2*i] |= cells[0];
    42ce:	7823      	ldrb	r3, [r4, #0]
    42d0:	782a      	ldrb	r2, [r5, #0]
    42d2:	4313      	orrs	r3, r2
    42d4:	7023      	strb	r3, [r4, #0]
        hash[(2*i)+1] |= cells[1];
    42d6:	7863      	ldrb	r3, [r4, #1]
    42d8:	786a      	ldrb	r2, [r5, #1]
    42da:	4313      	orrs	r3, r2
    42dc:	7063      	strb	r3, [r4, #1]
    42de:	3402      	adds	r4, #2
    for(i=1;i<N_VAL/2;i++){
    42e0:	42b4      	cmp	r4, r6
    42e2:	d1f2      	bne.n	42ca <photon128+0xa6>
}
    42e4:	b008      	add	sp, #32
    42e6:	bc1c      	pop	{r2, r3, r4}
    42e8:	4690      	mov	r8, r2
    42ea:	4699      	mov	r9, r3
    42ec:	46a2      	mov	sl, r4
    42ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(i=0;i<message_bytes/R_VAL;i++){
    42f0:	2300      	movs	r3, #0
    42f2:	e7c6      	b.n	4282 <photon128+0x5e>
        cells[0] ^= 0x80;
    42f4:	aa03      	add	r2, sp, #12
    42f6:	7811      	ldrb	r1, [r2, #0]
    42f8:	2380      	movs	r3, #128	; 0x80
    42fa:	425b      	negs	r3, r3
    42fc:	404b      	eors	r3, r1
    42fe:	7013      	strb	r3, [r2, #0]
    4300:	e7ce      	b.n	42a0 <photon128+0x7c>
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	000054a3 	.word	0x000054a3
    4308:	00003fcd 	.word	0x00003fcd

0000430c <addRoundKey>:

    printf("\nEnd PRESENT-80 Test\n\n");

}

static void addRoundKey(uint8_t *state, uint8_t *round_key){
    430c:	b510      	push	{r4, lr}
  int i;
  for(i=0;i<8;i++){
    430e:	2300      	movs	r3, #0
    state[i]=(state[i])^(round_key[i]);
    4310:	5cc2      	ldrb	r2, [r0, r3]
    4312:	5ccc      	ldrb	r4, [r1, r3]
    4314:	4062      	eors	r2, r4
    4316:	54c2      	strb	r2, [r0, r3]
  for(i=0;i<8;i++){
    4318:	3301      	adds	r3, #1
    431a:	2b08      	cmp	r3, #8
    431c:	d1f8      	bne.n	4310 <addRoundKey+0x4>
  }
}
    431e:	bd10      	pop	{r4, pc}

00004320 <updateKey80>:
    state[i] |= dummy2[(i*8)+6] << 6;
    state[i] |= dummy2[(i*8)+7] << 7;
  }
}

static void updateKey80(uint8_t *key, uint8_t *round_key, int round){
    4320:	b5f0      	push	{r4, r5, r6, r7, lr}
    4322:	46c6      	mov	lr, r8
    4324:	b500      	push	{lr}
    4326:	b086      	sub	sp, #24
    4328:	0007      	movs	r7, r0
    432a:	9101      	str	r1, [sp, #4]
    432c:	4690      	mov	r8, r2
  uint8_t new_key[10];
  int i;
  uint8_t box_out;
  uint8_t xor_out;

  for(i=0;i<10;i++){
    432e:	2300      	movs	r3, #0
    new_key[i]=0;
    4330:	a903      	add	r1, sp, #12
    4332:	2200      	movs	r2, #0
    4334:	545a      	strb	r2, [r3, r1]
  for(i=0;i<10;i++){
    4336:	3301      	adds	r3, #1
    4338:	2b0a      	cmp	r3, #10
    433a:	d1fb      	bne.n	4334 <updateKey80+0x14>
    433c:	2400      	movs	r4, #0
  }

  //Rotate by 61 bits to the left
  //Bit 0 becomes bit 19, bit 1 becomes bit 20, etc.
  for(i=0;i<10;i++){
    new_key[i] = (key[(i+3)%10] << 5) & 0xE0;     //Upper 5 bits
    433e:	4e21      	ldr	r6, [pc, #132]	; (43c4 <updateKey80+0xa4>)
    4340:	1ce0      	adds	r0, r4, #3
    4342:	210a      	movs	r1, #10
    4344:	47b0      	blx	r6
    4346:	5c7d      	ldrb	r5, [r7, r1]
    4348:	016d      	lsls	r5, r5, #5
    new_key[i] |= ((key[(i+2)%10] >> 3) & 0x1F);  //Lower 3 bits
    434a:	1ca0      	adds	r0, r4, #2
    434c:	210a      	movs	r1, #10
    434e:	47b0      	blx	r6
    4350:	5c7b      	ldrb	r3, [r7, r1]
    4352:	08db      	lsrs	r3, r3, #3
    4354:	431d      	orrs	r5, r3
    4356:	ab03      	add	r3, sp, #12
    4358:	551d      	strb	r5, [r3, r4]
  for(i=0;i<10;i++){
    435a:	3401      	adds	r4, #1
    435c:	2c0a      	cmp	r4, #10
    435e:	d1ef      	bne.n	4340 <updateKey80+0x20>
  }

  //Get the sbox values for bits 79 through 76
  box_out = sbox[(new_key[9]&0xF0)>>4];
    4360:	a903      	add	r1, sp, #12
    4362:	7a48      	ldrb	r0, [r1, #9]
    4364:	0903      	lsrs	r3, r0, #4
  new_key[9] &= 0x0F;
  new_key[9] |= box_out << 4;
    4366:	4a18      	ldr	r2, [pc, #96]	; (43c8 <updateKey80+0xa8>)
    4368:	5cd2      	ldrb	r2, [r2, r3]
    436a:	0112      	lsls	r2, r2, #4
  new_key[9] &= 0x0F;
    436c:	230f      	movs	r3, #15
    436e:	4018      	ands	r0, r3
  new_key[9] |= box_out << 4;
    4370:	4302      	orrs	r2, r0
    4372:	724a      	strb	r2, [r1, #9]

  //XOR bits 19 through 16
  xor_out = (round & 0x1E) >> 1;
    4374:	4642      	mov	r2, r8
    4376:	1052      	asrs	r2, r2, #1
    4378:	4013      	ands	r3, r2
  new_key[2] ^= xor_out;
    437a:	788a      	ldrb	r2, [r1, #2]
    437c:	4053      	eors	r3, r2
    437e:	708b      	strb	r3, [r1, #2]
  //See if bit 15 needs to be xor'd with 1
  if(round%2 == 1){new_key[1] ^= 0x80;}
    4380:	4643      	mov	r3, r8
    4382:	0fd9      	lsrs	r1, r3, #31
    4384:	185a      	adds	r2, r3, r1
    4386:	2301      	movs	r3, #1
    4388:	4013      	ands	r3, r2
    438a:	1a5b      	subs	r3, r3, r1
    438c:	2b01      	cmp	r3, #1
    438e:	d012      	beq.n	43b6 <updateKey80+0x96>

  //Update the keys
  key[0]=new_key[0];
    4390:	ab03      	add	r3, sp, #12
    4392:	781a      	ldrb	r2, [r3, #0]
    4394:	703a      	strb	r2, [r7, #0]
  key[1]=new_key[1];
    4396:	785b      	ldrb	r3, [r3, #1]
    4398:	707b      	strb	r3, [r7, #1]
    439a:	9e01      	ldr	r6, [sp, #4]
  for(i=2;i<10;i++){
    439c:	2302      	movs	r3, #2
    key[i]=new_key[i];
    439e:	a903      	add	r1, sp, #12
    43a0:	5c5a      	ldrb	r2, [r3, r1]
    43a2:	54fa      	strb	r2, [r7, r3]
    round_key[i-2]=key[i];
    43a4:	7032      	strb	r2, [r6, #0]
  for(i=2;i<10;i++){
    43a6:	3301      	adds	r3, #1
    43a8:	3601      	adds	r6, #1
    43aa:	2b0a      	cmp	r3, #10
    43ac:	d1f8      	bne.n	43a0 <updateKey80+0x80>
  }
}// end updateKey80()
    43ae:	b006      	add	sp, #24
    43b0:	bc04      	pop	{r2}
    43b2:	4690      	mov	r8, r2
    43b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(round%2 == 1){new_key[1] ^= 0x80;}
    43b6:	aa03      	add	r2, sp, #12
    43b8:	7851      	ldrb	r1, [r2, #1]
    43ba:	3b81      	subs	r3, #129	; 0x81
    43bc:	404b      	eors	r3, r1
    43be:	7053      	strb	r3, [r2, #1]
    43c0:	e7e6      	b.n	4390 <updateKey80+0x70>
    43c2:	46c0      	nop			; (mov r8, r8)
    43c4:	000053c5 	.word	0x000053c5
    43c8:	00008580 	.word	0x00008580

000043cc <present80Encrypt>:
void present80Encrypt(uint8_t *key_in, uint8_t *text){
    43cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    43ce:	46de      	mov	lr, fp
    43d0:	4657      	mov	r7, sl
    43d2:	464e      	mov	r6, r9
    43d4:	4645      	mov	r5, r8
    43d6:	b5e0      	push	{r5, r6, r7, lr}
    43d8:	b0a9      	sub	sp, #164	; 0xa4
    43da:	000c      	movs	r4, r1
  memmove(key,key_in,10);
    43dc:	220a      	movs	r2, #10
    43de:	0001      	movs	r1, r0
    43e0:	a825      	add	r0, sp, #148	; 0x94
    43e2:	4d3f      	ldr	r5, [pc, #252]	; (44e0 <present80Encrypt+0x114>)
    43e4:	47a8      	blx	r5
  memmove(round_key,&key[2],8);
    43e6:	2208      	movs	r2, #8
    43e8:	218e      	movs	r1, #142	; 0x8e
    43ea:	ab02      	add	r3, sp, #8
    43ec:	469c      	mov	ip, r3
    43ee:	4461      	add	r1, ip
    43f0:	a823      	add	r0, sp, #140	; 0x8c
    43f2:	47a8      	blx	r5
  for(round=1;round<32;round++){
    43f4:	2301      	movs	r3, #1
    43f6:	4699      	mov	r9, r3
    addRoundKey(STATE, round_key);
    43f8:	4b3a      	ldr	r3, [pc, #232]	; (44e4 <present80Encrypt+0x118>)
    43fa:	9301      	str	r3, [sp, #4]
    dummy |= (sbox[(state[i] & 0xF0) >> 4] << 4);
    43fc:	4b3a      	ldr	r3, [pc, #232]	; (44e8 <present80Encrypt+0x11c>)
    43fe:	469a      	mov	sl, r3
    4400:	e00a      	b.n	4418 <present80Encrypt+0x4c>
    updateKey80(key,round_key,round);
    4402:	464a      	mov	r2, r9
    4404:	a923      	add	r1, sp, #140	; 0x8c
    4406:	a825      	add	r0, sp, #148	; 0x94
    4408:	4b38      	ldr	r3, [pc, #224]	; (44ec <present80Encrypt+0x120>)
    440a:	4798      	blx	r3
  for(round=1;round<32;round++){
    440c:	2301      	movs	r3, #1
    440e:	469c      	mov	ip, r3
    4410:	44e1      	add	r9, ip
    4412:	464b      	mov	r3, r9
    4414:	2b20      	cmp	r3, #32
    4416:	d057      	beq.n	44c8 <present80Encrypt+0xfc>
    addRoundKey(STATE, round_key);
    4418:	a923      	add	r1, sp, #140	; 0x8c
    441a:	0020      	movs	r0, r4
    441c:	9b01      	ldr	r3, [sp, #4]
    441e:	4798      	blx	r3
    4420:	46a4      	mov	ip, r4
    4422:	0020      	movs	r0, r4
    4424:	3008      	adds	r0, #8
    4426:	46a3      	mov	fp, r4
    dummy |= sbox[state[i] & 0x0F];
    4428:	210f      	movs	r1, #15
    442a:	465b      	mov	r3, fp
    442c:	781a      	ldrb	r2, [r3, #0]
    dummy |= (sbox[(state[i] & 0xF0) >> 4] << 4);
    442e:	0913      	lsrs	r3, r2, #4
    4430:	4655      	mov	r5, sl
    4432:	5ceb      	ldrb	r3, [r5, r3]
    4434:	011b      	lsls	r3, r3, #4
    dummy |= sbox[state[i] & 0x0F];
    4436:	400a      	ands	r2, r1
    dummy |= (sbox[(state[i] & 0xF0) >> 4] << 4);
    4438:	5caa      	ldrb	r2, [r5, r2]
    443a:	4313      	orrs	r3, r2
    state[i]=dummy;
    443c:	465a      	mov	r2, fp
    443e:	7013      	strb	r3, [r2, #0]
    4440:	2301      	movs	r3, #1
    4442:	4698      	mov	r8, r3
    4444:	44c3      	add	fp, r8
  for(i=0;i<8;i++){
    4446:	4583      	cmp	fp, r0
    4448:	d1ef      	bne.n	442a <present80Encrypt+0x5e>
    444a:	2200      	movs	r2, #0
    dummy1[i]=(state[i/8]&(1<<(i%8)))>>(i%8);
    444c:	2707      	movs	r7, #7
    444e:	a903      	add	r1, sp, #12
    4450:	2501      	movs	r5, #1
    4452:	17d3      	asrs	r3, r2, #31
    4454:	0f5e      	lsrs	r6, r3, #29
    4456:	1990      	adds	r0, r2, r6
    4458:	4038      	ands	r0, r7
    445a:	1b80      	subs	r0, r0, r6
    445c:	403b      	ands	r3, r7
    445e:	189b      	adds	r3, r3, r2
    4460:	10db      	asrs	r3, r3, #3
    4462:	5ce6      	ldrb	r6, [r4, r3]
    4464:	002b      	movs	r3, r5
    4466:	4083      	lsls	r3, r0
    4468:	4033      	ands	r3, r6
    446a:	4103      	asrs	r3, r0
    446c:	5453      	strb	r3, [r2, r1]
  for(i=0;i<64;i++){
    446e:	3201      	adds	r2, #1
    4470:	2a40      	cmp	r2, #64	; 0x40
    4472:	d1ee      	bne.n	4452 <present80Encrypt+0x86>
    4474:	2100      	movs	r1, #0
    dummy2[pbox[i]]=dummy1[i];
    4476:	aa13      	add	r2, sp, #76	; 0x4c
    4478:	4d1d      	ldr	r5, [pc, #116]	; (44f0 <present80Encrypt+0x124>)
    447a:	ab03      	add	r3, sp, #12
    447c:	5d48      	ldrb	r0, [r1, r5]
    447e:	5ccf      	ldrb	r7, [r1, r3]
    4480:	5417      	strb	r7, [r2, r0]
  for(i=0;i<64;i++){
    4482:	3101      	adds	r1, #1
    4484:	2940      	cmp	r1, #64	; 0x40
    4486:	d1f9      	bne.n	447c <present80Encrypt+0xb0>
    4488:	aa13      	add	r2, sp, #76	; 0x4c
    state[i] |= dummy2[(i*8)+1] << 1;
    448a:	7853      	ldrb	r3, [r2, #1]
    448c:	005b      	lsls	r3, r3, #1
    state[i] |= dummy2[(i*8)+2] << 2;
    448e:	7891      	ldrb	r1, [r2, #2]
    4490:	0089      	lsls	r1, r1, #2
    4492:	430b      	orrs	r3, r1
    4494:	7811      	ldrb	r1, [r2, #0]
    4496:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+3] << 3;
    4498:	78d1      	ldrb	r1, [r2, #3]
    449a:	00c9      	lsls	r1, r1, #3
    449c:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+4] << 4;
    449e:	7911      	ldrb	r1, [r2, #4]
    44a0:	0109      	lsls	r1, r1, #4
    44a2:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+5] << 5;
    44a4:	7951      	ldrb	r1, [r2, #5]
    44a6:	0149      	lsls	r1, r1, #5
    44a8:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+6] << 6;
    44aa:	7991      	ldrb	r1, [r2, #6]
    44ac:	0189      	lsls	r1, r1, #6
    44ae:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+7] << 7;
    44b0:	79d1      	ldrb	r1, [r2, #7]
    44b2:	01c9      	lsls	r1, r1, #7
    44b4:	430b      	orrs	r3, r1
    44b6:	4661      	mov	r1, ip
    44b8:	700b      	strb	r3, [r1, #0]
    44ba:	3208      	adds	r2, #8
    44bc:	2301      	movs	r3, #1
    44be:	4698      	mov	r8, r3
    44c0:	44c4      	add	ip, r8
  for(i=0;i<8;i++){
    44c2:	45dc      	cmp	ip, fp
    44c4:	d1e1      	bne.n	448a <present80Encrypt+0xbe>
    44c6:	e79c      	b.n	4402 <present80Encrypt+0x36>
  addRoundKey(STATE, round_key);
    44c8:	a923      	add	r1, sp, #140	; 0x8c
    44ca:	0020      	movs	r0, r4
    44cc:	4b05      	ldr	r3, [pc, #20]	; (44e4 <present80Encrypt+0x118>)
    44ce:	4798      	blx	r3
}
    44d0:	b029      	add	sp, #164	; 0xa4
    44d2:	bc3c      	pop	{r2, r3, r4, r5}
    44d4:	4690      	mov	r8, r2
    44d6:	4699      	mov	r9, r3
    44d8:	46a2      	mov	sl, r4
    44da:	46ab      	mov	fp, r5
    44dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44de:	46c0      	nop			; (mov r8, r8)
    44e0:	0000546d 	.word	0x0000546d
    44e4:	0000430d 	.word	0x0000430d
    44e8:	00008580 	.word	0x00008580
    44ec:	00004321 	.word	0x00004321
    44f0:	00008540 	.word	0x00008540

000044f4 <present80Decrypt>:
void present80Decrypt(uint8_t *key_in, uint8_t *text){
    44f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    44f6:	46d6      	mov	lr, sl
    44f8:	464f      	mov	r7, r9
    44fa:	4646      	mov	r6, r8
    44fc:	b5c0      	push	{r6, r7, lr}
    44fe:	4c49      	ldr	r4, [pc, #292]	; (4624 <present80Decrypt+0x130>)
    4500:	44a5      	add	sp, r4
    4502:	0006      	movs	r6, r0
    4504:	000c      	movs	r4, r1
    memmove(round_key[0],&key_in[2],8);
    4506:	1c81      	adds	r1, r0, #2
    4508:	2208      	movs	r2, #8
    450a:	a820      	add	r0, sp, #128	; 0x80
    450c:	4d46      	ldr	r5, [pc, #280]	; (4628 <present80Decrypt+0x134>)
    450e:	47a8      	blx	r5
    memmove(key[0],key_in,10);
    4510:	220a      	movs	r2, #10
    4512:	0031      	movs	r1, r6
    4514:	a860      	add	r0, sp, #384	; 0x180
    4516:	47a8      	blx	r5
    4518:	ae22      	add	r6, sp, #136	; 0x88
    451a:	25c5      	movs	r5, #197	; 0xc5
    451c:	006d      	lsls	r5, r5, #1
    451e:	446d      	add	r5, sp
    for(round=1;round<32;round++){
    4520:	2701      	movs	r7, #1
        memmove(round_key[round],round_key[round-1],8);
    4522:	4b42      	ldr	r3, [pc, #264]	; (462c <present80Decrypt+0x138>)
    4524:	4698      	mov	r8, r3
        updateKey80(key[round],round_key[round],round);
    4526:	4b42      	ldr	r3, [pc, #264]	; (4630 <present80Decrypt+0x13c>)
    4528:	4699      	mov	r9, r3
        memmove(round_key[round],round_key[round-1],8);
    452a:	0031      	movs	r1, r6
    452c:	3908      	subs	r1, #8
    452e:	2208      	movs	r2, #8
    4530:	0030      	movs	r0, r6
    4532:	47c0      	blx	r8
        memmove(key[round],key[round-1],10);
    4534:	0029      	movs	r1, r5
    4536:	390a      	subs	r1, #10
    4538:	220a      	movs	r2, #10
    453a:	0028      	movs	r0, r5
    453c:	47c0      	blx	r8
        updateKey80(key[round],round_key[round],round);
    453e:	003a      	movs	r2, r7
    4540:	0031      	movs	r1, r6
    4542:	0028      	movs	r0, r5
    4544:	47c8      	blx	r9
    for(round=1;round<32;round++){
    4546:	3701      	adds	r7, #1
    4548:	3608      	adds	r6, #8
    454a:	350a      	adds	r5, #10
    454c:	2f20      	cmp	r7, #32
    454e:	d1ec      	bne.n	452a <present80Decrypt+0x36>
    4550:	ab5e      	add	r3, sp, #376	; 0x178
    4552:	469a      	mov	sl, r3
    4554:	ab20      	add	r3, sp, #128	; 0x80
    4556:	4698      	mov	r8, r3
        addRoundKey(STATE, round_key[round]);
    4558:	4b36      	ldr	r3, [pc, #216]	; (4634 <present80Decrypt+0x140>)
    455a:	4699      	mov	r9, r3
    dummy2[inv_pbox[i]]=dummy1[i];
    455c:	4d36      	ldr	r5, [pc, #216]	; (4638 <present80Decrypt+0x144>)
    455e:	e005      	b.n	456c <present80Decrypt+0x78>
    4560:	2308      	movs	r3, #8
    4562:	425b      	negs	r3, r3
    4564:	469c      	mov	ip, r3
    4566:	44e2      	add	sl, ip
    for(round=31;round>0;round--){
    4568:	45c2      	cmp	sl, r8
    456a:	d04e      	beq.n	460a <present80Decrypt+0x116>
        addRoundKey(STATE, round_key[round]);
    456c:	4651      	mov	r1, sl
    456e:	0020      	movs	r0, r4
    4570:	47c8      	blx	r9
  for(i=0;i<64;i++){
    4572:	2200      	movs	r2, #0
    dummy1[i]=(state[i/8]&(1<<(i%8)))>>(i%8);
    4574:	2007      	movs	r0, #7
    4576:	2601      	movs	r6, #1
    4578:	17d3      	asrs	r3, r2, #31
    457a:	0f5f      	lsrs	r7, r3, #29
    457c:	19d1      	adds	r1, r2, r7
    457e:	4001      	ands	r1, r0
    4580:	1bc9      	subs	r1, r1, r7
    4582:	4003      	ands	r3, r0
    4584:	189b      	adds	r3, r3, r2
    4586:	10db      	asrs	r3, r3, #3
    4588:	5ce7      	ldrb	r7, [r4, r3]
    458a:	0033      	movs	r3, r6
    458c:	408b      	lsls	r3, r1
    458e:	403b      	ands	r3, r7
    4590:	410b      	asrs	r3, r1
    4592:	4669      	mov	r1, sp
    4594:	5453      	strb	r3, [r2, r1]
  for(i=0;i<64;i++){
    4596:	3201      	adds	r2, #1
    4598:	2a40      	cmp	r2, #64	; 0x40
    459a:	d1ed      	bne.n	4578 <present80Decrypt+0x84>
    459c:	2300      	movs	r3, #0
    dummy2[inv_pbox[i]]=dummy1[i];
    459e:	a810      	add	r0, sp, #64	; 0x40
    45a0:	5d5a      	ldrb	r2, [r3, r5]
    45a2:	4669      	mov	r1, sp
    45a4:	5c59      	ldrb	r1, [r3, r1]
    45a6:	5481      	strb	r1, [r0, r2]
  for(i=0;i<64;i++){
    45a8:	3301      	adds	r3, #1
    45aa:	2b40      	cmp	r3, #64	; 0x40
    45ac:	d1f8      	bne.n	45a0 <present80Decrypt+0xac>
    45ae:	aa10      	add	r2, sp, #64	; 0x40
    45b0:	0021      	movs	r1, r4
    45b2:	0026      	movs	r6, r4
    45b4:	3608      	adds	r6, #8
    45b6:	0020      	movs	r0, r4
    state[i] |= dummy2[(i*8)+1] << 1;
    45b8:	7853      	ldrb	r3, [r2, #1]
    45ba:	005b      	lsls	r3, r3, #1
    state[i] |= dummy2[(i*8)+2] << 2;
    45bc:	7897      	ldrb	r7, [r2, #2]
    45be:	00bf      	lsls	r7, r7, #2
    45c0:	433b      	orrs	r3, r7
    45c2:	7817      	ldrb	r7, [r2, #0]
    45c4:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+3] << 3;
    45c6:	78d7      	ldrb	r7, [r2, #3]
    45c8:	00ff      	lsls	r7, r7, #3
    45ca:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+4] << 4;
    45cc:	7917      	ldrb	r7, [r2, #4]
    45ce:	013f      	lsls	r7, r7, #4
    45d0:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+5] << 5;
    45d2:	7957      	ldrb	r7, [r2, #5]
    45d4:	017f      	lsls	r7, r7, #5
    45d6:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+6] << 6;
    45d8:	7997      	ldrb	r7, [r2, #6]
    45da:	01bf      	lsls	r7, r7, #6
    45dc:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+7] << 7;
    45de:	79d7      	ldrb	r7, [r2, #7]
    45e0:	01ff      	lsls	r7, r7, #7
    45e2:	433b      	orrs	r3, r7
    45e4:	7003      	strb	r3, [r0, #0]
    45e6:	3208      	adds	r2, #8
    45e8:	3001      	adds	r0, #1
  for(i=0;i<8;i++){
    45ea:	42b0      	cmp	r0, r6
    45ec:	d1e4      	bne.n	45b8 <present80Decrypt+0xc4>
    dummy |= (inv_sbox[(state[i] & 0xF0) >> 4] << 4);
    45ee:	4e13      	ldr	r6, [pc, #76]	; (463c <present80Decrypt+0x148>)
    dummy |= inv_sbox[state[i] & 0x0F];
    45f0:	270f      	movs	r7, #15
    45f2:	780a      	ldrb	r2, [r1, #0]
    dummy |= (inv_sbox[(state[i] & 0xF0) >> 4] << 4);
    45f4:	0913      	lsrs	r3, r2, #4
    45f6:	5cf3      	ldrb	r3, [r6, r3]
    45f8:	011b      	lsls	r3, r3, #4
    dummy |= inv_sbox[state[i] & 0x0F];
    45fa:	403a      	ands	r2, r7
    dummy |= (inv_sbox[(state[i] & 0xF0) >> 4] << 4);
    45fc:	5cb2      	ldrb	r2, [r6, r2]
    45fe:	4313      	orrs	r3, r2
    state[i]=dummy;
    4600:	700b      	strb	r3, [r1, #0]
    4602:	3101      	adds	r1, #1
  for(i=0;i<8;i++){
    4604:	4281      	cmp	r1, r0
    4606:	d1f4      	bne.n	45f2 <present80Decrypt+0xfe>
    4608:	e7aa      	b.n	4560 <present80Decrypt+0x6c>
    addRoundKey(STATE, round_key[0]);
    460a:	a920      	add	r1, sp, #128	; 0x80
    460c:	0020      	movs	r0, r4
    460e:	4b09      	ldr	r3, [pc, #36]	; (4634 <present80Decrypt+0x140>)
    4610:	4798      	blx	r3
} // end present80Decrypt()
    4612:	23b0      	movs	r3, #176	; 0xb0
    4614:	009b      	lsls	r3, r3, #2
    4616:	449d      	add	sp, r3
    4618:	bc1c      	pop	{r2, r3, r4}
    461a:	4690      	mov	r8, r2
    461c:	4699      	mov	r9, r3
    461e:	46a2      	mov	sl, r4
    4620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4622:	46c0      	nop			; (mov r8, r8)
    4624:	fffffd40 	.word	0xfffffd40
    4628:	0000546d 	.word	0x0000546d
    462c:	0000547f 	.word	0x0000547f
    4630:	00004321 	.word	0x00004321
    4634:	0000430d 	.word	0x0000430d
    4638:	000084f0 	.word	0x000084f0
    463c:	00008530 	.word	0x00008530

00004640 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4640:	b570      	push	{r4, r5, r6, lr}
    4642:	b082      	sub	sp, #8
    4644:	0005      	movs	r5, r0
    4646:	000e      	movs	r6, r1
	uint16_t temp = 0;
    4648:	2200      	movs	r2, #0
    464a:	466b      	mov	r3, sp
    464c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    464e:	4c06      	ldr	r4, [pc, #24]	; (4668 <usart_serial_getchar+0x28>)
    4650:	466b      	mov	r3, sp
    4652:	1d99      	adds	r1, r3, #6
    4654:	0028      	movs	r0, r5
    4656:	47a0      	blx	r4
    4658:	2800      	cmp	r0, #0
    465a:	d1f9      	bne.n	4650 <usart_serial_getchar+0x10>

	*c = temp;
    465c:	466b      	mov	r3, sp
    465e:	3306      	adds	r3, #6
    4660:	881b      	ldrh	r3, [r3, #0]
    4662:	7033      	strb	r3, [r6, #0]
}
    4664:	b002      	add	sp, #8
    4666:	bd70      	pop	{r4, r5, r6, pc}
    4668:	00000e9b 	.word	0x00000e9b

0000466c <usart_serial_putchar>:
{
    466c:	b570      	push	{r4, r5, r6, lr}
    466e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    4670:	b28c      	uxth	r4, r1
    4672:	4e03      	ldr	r6, [pc, #12]	; (4680 <usart_serial_putchar+0x14>)
    4674:	0021      	movs	r1, r4
    4676:	0028      	movs	r0, r5
    4678:	47b0      	blx	r6
    467a:	2800      	cmp	r0, #0
    467c:	d1fa      	bne.n	4674 <usart_serial_putchar+0x8>
}
    467e:	bd70      	pop	{r4, r5, r6, pc}
    4680:	00000e75 	.word	0x00000e75

00004684 <CAN0_Handler>:
			CAN_TX_BUFFER_INDEX);
	can_tx_transfer_request(&can_instance, 1 << CAN_TX_BUFFER_INDEX);
}
*/
//! [can_transfer_message_setup]
void CAN0_Handler(void) {
    4684:	b5f0      	push	{r4, r5, r6, r7, lr}
    4686:	46ce      	mov	lr, r9
    4688:	4647      	mov	r7, r8
    468a:	b580      	push	{r7, lr}
    468c:	b083      	sub	sp, #12
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
    468e:	4ba8      	ldr	r3, [pc, #672]	; (4930 <CAN0_Handler+0x2ac>)
    4690:	681b      	ldr	r3, [r3, #0]
    4692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
volatile uint32_t rx_buffer_index;
volatile uint32_t status = can_read_interrupt_status(&can_instance);
    4694:	9200      	str	r2, [sp, #0]

if ((status & CAN_PROTOCOL_ERROR_ARBITRATION)
    4696:	9a00      	ldr	r2, [sp, #0]
    4698:	0112      	lsls	r2, r2, #4
    469a:	d413      	bmi.n	46c4 <CAN0_Handler+0x40>
|| (status & CAN_PROTOCOL_ERROR_DATA)) {
    469c:	9a00      	ldr	r2, [sp, #0]
    469e:	00d2      	lsls	r2, r2, #3
    46a0:	d410      	bmi.n	46c4 <CAN0_Handler+0x40>
		| CAN_PROTOCOL_ERROR_DATA);
	printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
}

// Enrollment stage:
else if (STAGE == ENROLLMENT) {
    46a2:	4aa4      	ldr	r2, [pc, #656]	; (4934 <CAN0_Handler+0x2b0>)
    46a4:	7812      	ldrb	r2, [r2, #0]
    46a6:	2a00      	cmp	r2, #0
    46a8:	d000      	beq.n	46ac <CAN0_Handler+0x28>
    46aa:	e077      	b.n	479c <CAN0_Handler+0x118>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    46ac:	9a00      	ldr	r2, [sp, #0]
    46ae:	0312      	lsls	r2, r2, #12
    46b0:	d50e      	bpl.n	46d0 <CAN0_Handler+0x4c>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    46b2:	2280      	movs	r2, #128	; 0x80
    46b4:	0312      	lsls	r2, r2, #12
    46b6:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance,CAN_RX_BUFFER_NEW_MESSAGE);
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    46b8:	2400      	movs	r4, #0
			if (can_rx_get_buffer_status(&can_instance, i)) {
				rx_buffer_index = i;
				can_rx_clear_buffer_status(&can_instance, i);
				can_get_rx_buffer_element(&can_instance, &rx_element_buff[rx_buffer_index],
    46ba:	4b9f      	ldr	r3, [pc, #636]	; (4938 <CAN0_Handler+0x2b4>)
    46bc:	4698      	mov	r8, r3
    46be:	4b9f      	ldr	r3, [pc, #636]	; (493c <CAN0_Handler+0x2b8>)
    46c0:	4699      	mov	r9, r3
    46c2:	e04f      	b.n	4764 <CAN0_Handler+0xe0>
    46c4:	22c0      	movs	r2, #192	; 0xc0
    46c6:	0552      	lsls	r2, r2, #21
    46c8:	651a      	str	r2, [r3, #80]	; 0x50
	printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
    46ca:	489d      	ldr	r0, [pc, #628]	; (4940 <CAN0_Handler+0x2bc>)
    46cc:	4b9d      	ldr	r3, [pc, #628]	; (4944 <CAN0_Handler+0x2c0>)
    46ce:	4798      	blx	r3
		
		// Do thing here
		g_received++;
	}
}
}
    46d0:	b003      	add	sp, #12
    46d2:	bc0c      	pop	{r2, r3}
    46d4:	4690      	mov	r8, r2
    46d6:	4699      	mov	r9, r3
    46d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    46da:	4b95      	ldr	r3, [pc, #596]	; (4930 <CAN0_Handler+0x2ac>)
    46dc:	6819      	ldr	r1, [r3, #0]
    46de:	239c      	movs	r3, #156	; 0x9c
    46e0:	58c8      	ldr	r0, [r1, r3]
		index -= 32;
    46e2:	0025      	movs	r5, r4
    46e4:	3d20      	subs	r5, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    46e6:	3b9b      	subs	r3, #155	; 0x9b
    46e8:	40ab      	lsls	r3, r5
			if (can_rx_get_buffer_status(&can_instance, i)) {
    46ea:	4203      	tst	r3, r0
    46ec:	d037      	beq.n	475e <CAN0_Handler+0xda>
				rx_buffer_index = i;
    46ee:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT2.reg = (1 << index);
    46f0:	229c      	movs	r2, #156	; 0x9c
    46f2:	508b      	str	r3, [r1, r2]
				can_get_rx_buffer_element(&can_instance, &rx_element_buff[rx_buffer_index],
    46f4:	9901      	ldr	r1, [sp, #4]
    46f6:	9a01      	ldr	r2, [sp, #4]
    46f8:	0109      	lsls	r1, r1, #4
    46fa:	4441      	add	r1, r8
    46fc:	488c      	ldr	r0, [pc, #560]	; (4930 <CAN0_Handler+0x2ac>)
    46fe:	47c8      	blx	r9
				if (rx_element_buff[rx_buffer_index].R0.bit.XTD) {
    4700:	9b01      	ldr	r3, [sp, #4]
    4702:	011b      	lsls	r3, r3, #4
    4704:	4642      	mov	r2, r8
    4706:	589b      	ldr	r3, [r3, r2]
    4708:	005b      	lsls	r3, r3, #1
    470a:	d539      	bpl.n	4780 <CAN0_Handler+0xfc>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
    470c:	488e      	ldr	r0, [pc, #568]	; (4948 <CAN0_Handler+0x2c4>)
    470e:	4b8d      	ldr	r3, [pc, #564]	; (4944 <CAN0_Handler+0x2c0>)
    4710:	4798      	blx	r3
				for (i = 0; i < rx_element_buff[rx_buffer_index].R1.bit.DLC; i++) {
    4712:	9a01      	ldr	r2, [sp, #4]
    4714:	0112      	lsls	r2, r2, #4
    4716:	4b88      	ldr	r3, [pc, #544]	; (4938 <CAN0_Handler+0x2b4>)
    4718:	189b      	adds	r3, r3, r2
    471a:	685b      	ldr	r3, [r3, #4]
    471c:	031b      	lsls	r3, r3, #12
    471e:	0f1b      	lsrs	r3, r3, #28
    4720:	2400      	movs	r4, #0
    4722:	2b00      	cmp	r3, #0
    4724:	dd12      	ble.n	474c <CAN0_Handler+0xc8>
					printf("  %d",rx_element_buff[rx_buffer_index].data[i]);
    4726:	4e84      	ldr	r6, [pc, #528]	; (4938 <CAN0_Handler+0x2b4>)
    4728:	4d88      	ldr	r5, [pc, #544]	; (494c <CAN0_Handler+0x2c8>)
    472a:	4f89      	ldr	r7, [pc, #548]	; (4950 <CAN0_Handler+0x2cc>)
    472c:	9b01      	ldr	r3, [sp, #4]
    472e:	011b      	lsls	r3, r3, #4
    4730:	18f3      	adds	r3, r6, r3
    4732:	191b      	adds	r3, r3, r4
    4734:	7a19      	ldrb	r1, [r3, #8]
    4736:	0028      	movs	r0, r5
    4738:	47b8      	blx	r7
				for (i = 0; i < rx_element_buff[rx_buffer_index].R1.bit.DLC; i++) {
    473a:	3401      	adds	r4, #1
    473c:	9b01      	ldr	r3, [sp, #4]
    473e:	011b      	lsls	r3, r3, #4
    4740:	18f3      	adds	r3, r6, r3
    4742:	685b      	ldr	r3, [r3, #4]
    4744:	031b      	lsls	r3, r3, #12
    4746:	0f1b      	lsrs	r3, r3, #28
    4748:	42a3      	cmp	r3, r4
    474a:	dcef      	bgt.n	472c <CAN0_Handler+0xa8>
				printf("\r\n\r\n");
    474c:	4881      	ldr	r0, [pc, #516]	; (4954 <CAN0_Handler+0x2d0>)
    474e:	4b7d      	ldr	r3, [pc, #500]	; (4944 <CAN0_Handler+0x2c0>)
    4750:	4798      	blx	r3
				if (rx_buffer_index == CAN_FILTER_ENROLLMENT) g_rec = 1;
    4752:	9b01      	ldr	r3, [sp, #4]
    4754:	2b03      	cmp	r3, #3
    4756:	d018      	beq.n	478a <CAN0_Handler+0x106>
				else if (rx_buffer_index == CAN_FILTER_PUBLICKEY) g_rec_public++;
    4758:	9b01      	ldr	r3, [sp, #4]
    475a:	2b04      	cmp	r3, #4
    475c:	d019      	beq.n	4792 <CAN0_Handler+0x10e>
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    475e:	3401      	adds	r4, #1
    4760:	2c0f      	cmp	r4, #15
    4762:	dcb5      	bgt.n	46d0 <CAN0_Handler+0x4c>
	if (index < 32) {
    4764:	2c1f      	cmp	r4, #31
    4766:	d8b8      	bhi.n	46da <CAN0_Handler+0x56>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    4768:	4b71      	ldr	r3, [pc, #452]	; (4930 <CAN0_Handler+0x2ac>)
    476a:	6819      	ldr	r1, [r3, #0]
    476c:	2398      	movs	r3, #152	; 0x98
    476e:	58c8      	ldr	r0, [r1, r3]
    4770:	3b97      	subs	r3, #151	; 0x97
    4772:	40a3      	lsls	r3, r4
			if (can_rx_get_buffer_status(&can_instance, i)) {
    4774:	4203      	tst	r3, r0
    4776:	d0f2      	beq.n	475e <CAN0_Handler+0xda>
				rx_buffer_index = i;
    4778:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT1.reg = (1 << index);
    477a:	2298      	movs	r2, #152	; 0x98
    477c:	508b      	str	r3, [r1, r2]
    477e:	e7b9      	b.n	46f4 <CAN0_Handler+0x70>
					printf("\n\r Standard message received in Rx buffer %d. The received data is: \r\n",rx_buffer_index);
    4780:	9901      	ldr	r1, [sp, #4]
    4782:	4875      	ldr	r0, [pc, #468]	; (4958 <CAN0_Handler+0x2d4>)
    4784:	4b72      	ldr	r3, [pc, #456]	; (4950 <CAN0_Handler+0x2cc>)
    4786:	4798      	blx	r3
    4788:	e7c3      	b.n	4712 <CAN0_Handler+0x8e>
				if (rx_buffer_index == CAN_FILTER_ENROLLMENT) g_rec = 1;
    478a:	2201      	movs	r2, #1
    478c:	4b73      	ldr	r3, [pc, #460]	; (495c <CAN0_Handler+0x2d8>)
    478e:	601a      	str	r2, [r3, #0]
    4790:	e7e5      	b.n	475e <CAN0_Handler+0xda>
				else if (rx_buffer_index == CAN_FILTER_PUBLICKEY) g_rec_public++;
    4792:	4a73      	ldr	r2, [pc, #460]	; (4960 <CAN0_Handler+0x2dc>)
    4794:	6813      	ldr	r3, [r2, #0]
    4796:	3301      	adds	r3, #1
    4798:	6013      	str	r3, [r2, #0]
    479a:	e7e0      	b.n	475e <CAN0_Handler+0xda>
else if (STAGE == AUTHENTICATION) {
    479c:	4a65      	ldr	r2, [pc, #404]	; (4934 <CAN0_Handler+0x2b0>)
    479e:	7812      	ldrb	r2, [r2, #0]
    47a0:	2a01      	cmp	r2, #1
    47a2:	d037      	beq.n	4814 <CAN0_Handler+0x190>
	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
    47a4:	9a00      	ldr	r2, [sp, #0]
    47a6:	07d2      	lsls	r2, r2, #31
    47a8:	d592      	bpl.n	46d0 <CAN0_Handler+0x4c>
	module_inst->hw->IR.reg = source;
    47aa:	2201      	movs	r2, #1
    47ac:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
    47ae:	4c6d      	ldr	r4, [pc, #436]	; (4964 <CAN0_Handler+0x2e0>)
    47b0:	6822      	ldr	r2, [r4, #0]
    47b2:	4d5f      	ldr	r5, [pc, #380]	; (4930 <CAN0_Handler+0x2ac>)
    47b4:	496c      	ldr	r1, [pc, #432]	; (4968 <CAN0_Handler+0x2e4>)
    47b6:	0028      	movs	r0, r5
    47b8:	4b6c      	ldr	r3, [pc, #432]	; (496c <CAN0_Handler+0x2e8>)
    47ba:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
    47bc:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    47be:	6829      	ldr	r1, [r5, #0]
    47c0:	233f      	movs	r3, #63	; 0x3f
    47c2:	4013      	ands	r3, r2
    47c4:	22a8      	movs	r2, #168	; 0xa8
    47c6:	508b      	str	r3, [r1, r2]
		standard_receive_index++;
    47c8:	6823      	ldr	r3, [r4, #0]
    47ca:	3301      	adds	r3, #1
    47cc:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
    47ce:	6823      	ldr	r3, [r4, #0]
    47d0:	2b10      	cmp	r3, #16
    47d2:	d100      	bne.n	47d6 <CAN0_Handler+0x152>
    47d4:	e0a3      	b.n	491e <CAN0_Handler+0x29a>
		printf("\n\r Standard message received in FIFO 0. The received data is: \r\n");
    47d6:	4866      	ldr	r0, [pc, #408]	; (4970 <CAN0_Handler+0x2ec>)
    47d8:	4b5a      	ldr	r3, [pc, #360]	; (4944 <CAN0_Handler+0x2c0>)
    47da:	4798      	blx	r3
		for (int i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    47dc:	4b62      	ldr	r3, [pc, #392]	; (4968 <CAN0_Handler+0x2e4>)
    47de:	685b      	ldr	r3, [r3, #4]
    47e0:	031b      	lsls	r3, r3, #12
    47e2:	0f1b      	lsrs	r3, r3, #28
    47e4:	2b00      	cmp	r3, #0
    47e6:	dd0d      	ble.n	4804 <CAN0_Handler+0x180>
    47e8:	2500      	movs	r5, #0
			printf("  %d",rx_element_fifo_0.data[i]);
    47ea:	4e5f      	ldr	r6, [pc, #380]	; (4968 <CAN0_Handler+0x2e4>)
    47ec:	4c57      	ldr	r4, [pc, #348]	; (494c <CAN0_Handler+0x2c8>)
    47ee:	4f58      	ldr	r7, [pc, #352]	; (4950 <CAN0_Handler+0x2cc>)
    47f0:	1973      	adds	r3, r6, r5
    47f2:	7a19      	ldrb	r1, [r3, #8]
    47f4:	0020      	movs	r0, r4
    47f6:	47b8      	blx	r7
		for (int i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    47f8:	3501      	adds	r5, #1
    47fa:	6873      	ldr	r3, [r6, #4]
    47fc:	031b      	lsls	r3, r3, #12
    47fe:	0f1b      	lsrs	r3, r3, #28
    4800:	42ab      	cmp	r3, r5
    4802:	dcf5      	bgt.n	47f0 <CAN0_Handler+0x16c>
		printf("\r\n\r\n");
    4804:	4853      	ldr	r0, [pc, #332]	; (4954 <CAN0_Handler+0x2d0>)
    4806:	4b4f      	ldr	r3, [pc, #316]	; (4944 <CAN0_Handler+0x2c0>)
    4808:	4798      	blx	r3
		g_received++;
    480a:	4a5a      	ldr	r2, [pc, #360]	; (4974 <CAN0_Handler+0x2f0>)
    480c:	6813      	ldr	r3, [r2, #0]
    480e:	3301      	adds	r3, #1
    4810:	6013      	str	r3, [r2, #0]
}
    4812:	e75d      	b.n	46d0 <CAN0_Handler+0x4c>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    4814:	9a00      	ldr	r2, [sp, #0]
    4816:	0312      	lsls	r2, r2, #12
    4818:	d400      	bmi.n	481c <CAN0_Handler+0x198>
    481a:	e759      	b.n	46d0 <CAN0_Handler+0x4c>
	module_inst->hw->IR.reg = source;
    481c:	2280      	movs	r2, #128	; 0x80
    481e:	0312      	lsls	r2, r2, #12
    4820:	651a      	str	r2, [r3, #80]	; 0x50
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4822:	2400      	movs	r4, #0
				can_get_rx_buffer_element(&can_instance, &rx_element_buff[rx_buffer_index],
    4824:	4b44      	ldr	r3, [pc, #272]	; (4938 <CAN0_Handler+0x2b4>)
    4826:	4698      	mov	r8, r3
    4828:	4b44      	ldr	r3, [pc, #272]	; (493c <CAN0_Handler+0x2b8>)
    482a:	4699      	mov	r9, r3
    482c:	e00d      	b.n	484a <CAN0_Handler+0x1c6>
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    482e:	4b40      	ldr	r3, [pc, #256]	; (4930 <CAN0_Handler+0x2ac>)
    4830:	6819      	ldr	r1, [r3, #0]
    4832:	239c      	movs	r3, #156	; 0x9c
    4834:	58c8      	ldr	r0, [r1, r3]
		index -= 32;
    4836:	0025      	movs	r5, r4
    4838:	3d20      	subs	r5, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    483a:	3b9b      	subs	r3, #155	; 0x9b
    483c:	40ab      	lsls	r3, r5
			if (can_rx_get_buffer_status(&can_instance, i)) {
    483e:	4203      	tst	r3, r0
    4840:	d171      	bne.n	4926 <CAN0_Handler+0x2a2>
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4842:	3401      	adds	r4, #1
    4844:	2c0f      	cmp	r4, #15
    4846:	dd00      	ble.n	484a <CAN0_Handler+0x1c6>
    4848:	e742      	b.n	46d0 <CAN0_Handler+0x4c>
	if (index < 32) {
    484a:	2c1f      	cmp	r4, #31
    484c:	d8ef      	bhi.n	482e <CAN0_Handler+0x1aa>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    484e:	4b38      	ldr	r3, [pc, #224]	; (4930 <CAN0_Handler+0x2ac>)
    4850:	6819      	ldr	r1, [r3, #0]
    4852:	2398      	movs	r3, #152	; 0x98
    4854:	58c8      	ldr	r0, [r1, r3]
    4856:	3b97      	subs	r3, #151	; 0x97
    4858:	40a3      	lsls	r3, r4
			if (can_rx_get_buffer_status(&can_instance, i)) {
    485a:	4203      	tst	r3, r0
    485c:	d0f1      	beq.n	4842 <CAN0_Handler+0x1be>
				rx_buffer_index = i;
    485e:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT1.reg = (1 << index);
    4860:	2298      	movs	r2, #152	; 0x98
    4862:	508b      	str	r3, [r1, r2]
				can_get_rx_buffer_element(&can_instance, &rx_element_buff[rx_buffer_index],
    4864:	9901      	ldr	r1, [sp, #4]
    4866:	9a01      	ldr	r2, [sp, #4]
    4868:	0109      	lsls	r1, r1, #4
    486a:	4441      	add	r1, r8
    486c:	4830      	ldr	r0, [pc, #192]	; (4930 <CAN0_Handler+0x2ac>)
    486e:	47c8      	blx	r9
				if (rx_element_buff[rx_buffer_index].R0.bit.XTD) {
    4870:	9b01      	ldr	r3, [sp, #4]
    4872:	011b      	lsls	r3, r3, #4
    4874:	4642      	mov	r2, r8
    4876:	589b      	ldr	r3, [r3, r2]
    4878:	005b      	lsls	r3, r3, #1
    487a:	d534      	bpl.n	48e6 <CAN0_Handler+0x262>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
    487c:	4832      	ldr	r0, [pc, #200]	; (4948 <CAN0_Handler+0x2c4>)
    487e:	4b31      	ldr	r3, [pc, #196]	; (4944 <CAN0_Handler+0x2c0>)
    4880:	4798      	blx	r3
				for (i = 0; i < rx_element_buff[rx_buffer_index].R1.bit.DLC; i++) {
    4882:	9a01      	ldr	r2, [sp, #4]
    4884:	0112      	lsls	r2, r2, #4
    4886:	4b2c      	ldr	r3, [pc, #176]	; (4938 <CAN0_Handler+0x2b4>)
    4888:	189b      	adds	r3, r3, r2
    488a:	685b      	ldr	r3, [r3, #4]
    488c:	031b      	lsls	r3, r3, #12
    488e:	0f1b      	lsrs	r3, r3, #28
    4890:	2400      	movs	r4, #0
    4892:	2b00      	cmp	r3, #0
    4894:	dd12      	ble.n	48bc <CAN0_Handler+0x238>
					printf("  %d",rx_element_buff[rx_buffer_index].data[i]);
    4896:	4e28      	ldr	r6, [pc, #160]	; (4938 <CAN0_Handler+0x2b4>)
    4898:	4d2c      	ldr	r5, [pc, #176]	; (494c <CAN0_Handler+0x2c8>)
    489a:	4f2d      	ldr	r7, [pc, #180]	; (4950 <CAN0_Handler+0x2cc>)
    489c:	9b01      	ldr	r3, [sp, #4]
    489e:	011b      	lsls	r3, r3, #4
    48a0:	18f3      	adds	r3, r6, r3
    48a2:	191b      	adds	r3, r3, r4
    48a4:	7a19      	ldrb	r1, [r3, #8]
    48a6:	0028      	movs	r0, r5
    48a8:	47b8      	blx	r7
				for (i = 0; i < rx_element_buff[rx_buffer_index].R1.bit.DLC; i++) {
    48aa:	3401      	adds	r4, #1
    48ac:	9b01      	ldr	r3, [sp, #4]
    48ae:	011b      	lsls	r3, r3, #4
    48b0:	18f3      	adds	r3, r6, r3
    48b2:	685b      	ldr	r3, [r3, #4]
    48b4:	031b      	lsls	r3, r3, #12
    48b6:	0f1b      	lsrs	r3, r3, #28
    48b8:	42a3      	cmp	r3, r4
    48ba:	dcef      	bgt.n	489c <CAN0_Handler+0x218>
				printf("\r\n\r\n");
    48bc:	4825      	ldr	r0, [pc, #148]	; (4954 <CAN0_Handler+0x2d0>)
    48be:	4b21      	ldr	r3, [pc, #132]	; (4944 <CAN0_Handler+0x2c0>)
    48c0:	4798      	blx	r3
				if (rx_buffer_index == CAN_FILTER_WAIT) g_waitFlag++;
    48c2:	9b01      	ldr	r3, [sp, #4]
    48c4:	2b02      	cmp	r3, #2
    48c6:	d013      	beq.n	48f0 <CAN0_Handler+0x26c>
				else if (rx_buffer_index == CAN_FILTER_MONITOR) g_normalFlag++;
    48c8:	9b01      	ldr	r3, [sp, #4]
    48ca:	2b01      	cmp	r3, #1
    48cc:	d015      	beq.n	48fa <CAN0_Handler+0x276>
				else if (rx_buffer_index == CAN_FILTER_MSG2)  {
    48ce:	9b01      	ldr	r3, [sp, #4]
    48d0:	2b04      	cmp	r3, #4
    48d2:	d1b6      	bne.n	4842 <CAN0_Handler+0x1be>
					if(g_sharedReceived == 0) {
    48d4:	4b28      	ldr	r3, [pc, #160]	; (4978 <CAN0_Handler+0x2f4>)
    48d6:	681b      	ldr	r3, [r3, #0]
    48d8:	2b00      	cmp	r3, #0
    48da:	d113      	bne.n	4904 <CAN0_Handler+0x280>
						g_sharedReceived++;
    48dc:	4a26      	ldr	r2, [pc, #152]	; (4978 <CAN0_Handler+0x2f4>)
    48de:	6813      	ldr	r3, [r2, #0]
    48e0:	3301      	adds	r3, #1
    48e2:	6013      	str	r3, [r2, #0]
    48e4:	e7ad      	b.n	4842 <CAN0_Handler+0x1be>
					printf("\n\r Standard message received in Rx buffer %d. The received data is: \r\n",rx_buffer_index);
    48e6:	9901      	ldr	r1, [sp, #4]
    48e8:	481b      	ldr	r0, [pc, #108]	; (4958 <CAN0_Handler+0x2d4>)
    48ea:	4b19      	ldr	r3, [pc, #100]	; (4950 <CAN0_Handler+0x2cc>)
    48ec:	4798      	blx	r3
    48ee:	e7c8      	b.n	4882 <CAN0_Handler+0x1fe>
				if (rx_buffer_index == CAN_FILTER_WAIT) g_waitFlag++;
    48f0:	4a22      	ldr	r2, [pc, #136]	; (497c <CAN0_Handler+0x2f8>)
    48f2:	6813      	ldr	r3, [r2, #0]
    48f4:	3301      	adds	r3, #1
    48f6:	6013      	str	r3, [r2, #0]
    48f8:	e7a3      	b.n	4842 <CAN0_Handler+0x1be>
				else if (rx_buffer_index == CAN_FILTER_MONITOR) g_normalFlag++;
    48fa:	4a21      	ldr	r2, [pc, #132]	; (4980 <CAN0_Handler+0x2fc>)
    48fc:	6813      	ldr	r3, [r2, #0]
    48fe:	3301      	adds	r3, #1
    4900:	6013      	str	r3, [r2, #0]
    4902:	e79e      	b.n	4842 <CAN0_Handler+0x1be>
					else if ((g_sharedReceived == 1) && (g_recComplete == 1)) {
    4904:	4b1c      	ldr	r3, [pc, #112]	; (4978 <CAN0_Handler+0x2f4>)
    4906:	681b      	ldr	r3, [r3, #0]
    4908:	2b01      	cmp	r3, #1
    490a:	d19a      	bne.n	4842 <CAN0_Handler+0x1be>
    490c:	4b1d      	ldr	r3, [pc, #116]	; (4984 <CAN0_Handler+0x300>)
    490e:	681b      	ldr	r3, [r3, #0]
    4910:	2b01      	cmp	r3, #1
    4912:	d196      	bne.n	4842 <CAN0_Handler+0x1be>
						g_sharedReceived++;
    4914:	4a18      	ldr	r2, [pc, #96]	; (4978 <CAN0_Handler+0x2f4>)
    4916:	6813      	ldr	r3, [r2, #0]
    4918:	3301      	adds	r3, #1
    491a:	6013      	str	r3, [r2, #0]
    491c:	e791      	b.n	4842 <CAN0_Handler+0x1be>
			standard_receive_index = 0;
    491e:	2200      	movs	r2, #0
    4920:	4b10      	ldr	r3, [pc, #64]	; (4964 <CAN0_Handler+0x2e0>)
    4922:	601a      	str	r2, [r3, #0]
    4924:	e757      	b.n	47d6 <CAN0_Handler+0x152>
				rx_buffer_index = i;
    4926:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT2.reg = (1 << index);
    4928:	229c      	movs	r2, #156	; 0x9c
    492a:	508b      	str	r3, [r1, r2]
    492c:	e79a      	b.n	4864 <CAN0_Handler+0x1e0>
    492e:	46c0      	nop			; (mov r8, r8)
    4930:	20000c48 	.word	0x20000c48
    4934:	20000c44 	.word	0x20000c44
    4938:	20000cac 	.word	0x20000cac
    493c:	00000549 	.word	0x00000549
    4940:	00008590 	.word	0x00008590
    4944:	000055a9 	.word	0x000055a9
    4948:	000085d4 	.word	0x000085d4
    494c:	00008660 	.word	0x00008660
    4950:	000054b5 	.word	0x000054b5
    4954:	00008668 	.word	0x00008668
    4958:	00008618 	.word	0x00008618
    495c:	20000c8c 	.word	0x20000c8c
    4960:	20000c94 	.word	0x20000c94
    4964:	20000dbc 	.word	0x20000dbc
    4968:	20000dac 	.word	0x20000dac
    496c:	00000599 	.word	0x00000599
    4970:	0000866c 	.word	0x0000866c
    4974:	20000c98 	.word	0x20000c98
    4978:	20000ca4 	.word	0x20000ca4
    497c:	20000ca8 	.word	0x20000ca8
    4980:	20000c84 	.word	0x20000c84
    4984:	20000c90 	.word	0x20000c90

00004988 <main>:
//! [user_menu]

//! [setup]

int main(void)
{
    4988:	b5f0      	push	{r4, r5, r6, r7, lr}
    498a:	46de      	mov	lr, fp
    498c:	4657      	mov	r7, sl
    498e:	464e      	mov	r6, r9
    4990:	4645      	mov	r5, r8
    4992:	b5e0      	push	{r5, r6, r7, lr}
    4994:	b0d9      	sub	sp, #356	; 0x164
	//uint8_t key;

//! [setup_init]
	system_init();
    4996:	4b91      	ldr	r3, [pc, #580]	; (4bdc <main+0x254>)
    4998:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    499a:	ab07      	add	r3, sp, #28
    499c:	2280      	movs	r2, #128	; 0x80
    499e:	05d2      	lsls	r2, r2, #23
    49a0:	9207      	str	r2, [sp, #28]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    49a2:	2200      	movs	r2, #0
    49a4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    49a6:	21ff      	movs	r1, #255	; 0xff
    49a8:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    49aa:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    49ac:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    49ae:	2401      	movs	r4, #1
    49b0:	39d3      	subs	r1, #211	; 0xd3
    49b2:	545c      	strb	r4, [r3, r1]
	config->transmitter_enable = true;
    49b4:	3101      	adds	r1, #1
    49b6:	545c      	strb	r4, [r3, r1]
	config->clock_polarity_inverted = false;
    49b8:	3101      	adds	r1, #1
    49ba:	545a      	strb	r2, [r3, r1]
	config->use_external_clock = false;
    49bc:	3101      	adds	r1, #1
    49be:	545a      	strb	r2, [r3, r1]
	config->ext_clock_freq   = 0;
    49c0:	631a      	str	r2, [r3, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    49c2:	3105      	adds	r1, #5
    49c4:	545a      	strb	r2, [r3, r1]
	config->generator_source = GCLK_GENERATOR_0;
    49c6:	3101      	adds	r1, #1
    49c8:	545a      	strb	r2, [r3, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    49ca:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    49cc:	2100      	movs	r1, #0
    49ce:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    49d0:	76d9      	strb	r1, [r3, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    49d2:	61da      	str	r2, [r3, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    49d4:	841a      	strh	r2, [r3, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    49d6:	845a      	strh	r2, [r3, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    49d8:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    49da:	3224      	adds	r2, #36	; 0x24
    49dc:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    49de:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    49e0:	3a11      	subs	r2, #17
    49e2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    49e4:	3213      	adds	r2, #19
    49e6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    49e8:	3a01      	subs	r2, #1
    49ea:	5499      	strb	r1, [r3, r2]
	config_cdc.baudrate	 = 38400;
    49ec:	2296      	movs	r2, #150	; 0x96
    49ee:	0212      	lsls	r2, r2, #8
    49f0:	629a      	str	r2, [r3, #40]	; 0x28
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    49f2:	22c4      	movs	r2, #196	; 0xc4
    49f4:	0392      	lsls	r2, r2, #14
    49f6:	60da      	str	r2, [r3, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    49f8:	2201      	movs	r2, #1
    49fa:	4252      	negs	r2, r2
    49fc:	639a      	str	r2, [r3, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    49fe:	63da      	str	r2, [r3, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    4a00:	4a77      	ldr	r2, [pc, #476]	; (4be0 <main+0x258>)
    4a02:	641a      	str	r2, [r3, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    4a04:	4a77      	ldr	r2, [pc, #476]	; (4be4 <main+0x25c>)
    4a06:	645a      	str	r2, [r3, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    4a08:	4d77      	ldr	r5, [pc, #476]	; (4be8 <main+0x260>)
    4a0a:	4b78      	ldr	r3, [pc, #480]	; (4bec <main+0x264>)
    4a0c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4a0e:	4a78      	ldr	r2, [pc, #480]	; (4bf0 <main+0x268>)
    4a10:	4b78      	ldr	r3, [pc, #480]	; (4bf4 <main+0x26c>)
    4a12:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4a14:	4a78      	ldr	r2, [pc, #480]	; (4bf8 <main+0x270>)
    4a16:	4b79      	ldr	r3, [pc, #484]	; (4bfc <main+0x274>)
    4a18:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4a1a:	aa07      	add	r2, sp, #28
    4a1c:	4978      	ldr	r1, [pc, #480]	; (4c00 <main+0x278>)
    4a1e:	0028      	movs	r0, r5
    4a20:	4b78      	ldr	r3, [pc, #480]	; (4c04 <main+0x27c>)
    4a22:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4a24:	4f78      	ldr	r7, [pc, #480]	; (4c08 <main+0x280>)
    4a26:	683b      	ldr	r3, [r7, #0]
    4a28:	6898      	ldr	r0, [r3, #8]
    4a2a:	2100      	movs	r1, #0
    4a2c:	4e77      	ldr	r6, [pc, #476]	; (4c0c <main+0x284>)
    4a2e:	47b0      	blx	r6
	setbuf(stdin, NULL);
    4a30:	683b      	ldr	r3, [r7, #0]
    4a32:	6858      	ldr	r0, [r3, #4]
    4a34:	2100      	movs	r1, #0
    4a36:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4a38:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4a3a:	0030      	movs	r0, r6
    4a3c:	4b74      	ldr	r3, [pc, #464]	; (4c10 <main+0x288>)
    4a3e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4a40:	231f      	movs	r3, #31
    4a42:	4018      	ands	r0, r3
    4a44:	4084      	lsls	r4, r0
    4a46:	4b73      	ldr	r3, [pc, #460]	; (4c14 <main+0x28c>)
    4a48:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4a4a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4a4c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d1fc      	bne.n	4a4c <main+0xc4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4a52:	6833      	ldr	r3, [r6, #0]
    4a54:	2702      	movs	r7, #2
    4a56:	433b      	orrs	r3, r7
    4a58:	6033      	str	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4a5a:	ae06      	add	r6, sp, #24
    4a5c:	2400      	movs	r4, #0
    4a5e:	7074      	strb	r4, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4a60:	2501      	movs	r5, #1
    4a62:	70b5      	strb	r5, [r6, #2]
	config->powersave    = false;
    4a64:	70f4      	strb	r4, [r6, #3]
	pin_config.mux_position = CAN_TX_MUX_SETTING;
    4a66:	2306      	movs	r3, #6
    4a68:	4699      	mov	r9, r3
    4a6a:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
    4a6c:	0031      	movs	r1, r6
    4a6e:	2018      	movs	r0, #24
    4a70:	4b69      	ldr	r3, [pc, #420]	; (4c18 <main+0x290>)
    4a72:	4698      	mov	r8, r3
    4a74:	4798      	blx	r3
	pin_config.mux_position = CAN_RX_MUX_SETTING;
    4a76:	464b      	mov	r3, r9
    4a78:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
    4a7a:	a906      	add	r1, sp, #24
    4a7c:	2019      	movs	r0, #25
    4a7e:	47c0      	blx	r8
	config->clock_source = GCLK_GENERATOR_8;
    4a80:	ab07      	add	r3, sp, #28
    4a82:	2208      	movs	r2, #8
    4a84:	701a      	strb	r2, [r3, #0]
	config->run_in_standby = false;
    4a86:	705c      	strb	r4, [r3, #1]
	config->watchdog_configuration = 0x00;
    4a88:	709c      	strb	r4, [r3, #2]
	config->transmit_pause = true;
    4a8a:	70dd      	strb	r5, [r3, #3]
	config->edge_filtering = true;
    4a8c:	711d      	strb	r5, [r3, #4]
	config->protocol_exception_handling = true;
    4a8e:	715d      	strb	r5, [r3, #5]
	config->automatic_retransmission = true;
    4a90:	719d      	strb	r5, [r3, #6]
	config->clock_stop_request = false;
    4a92:	71dc      	strb	r4, [r3, #7]
	config->clock_stop_acknowledge = false;
    4a94:	721c      	strb	r4, [r3, #8]
	config->timestamp_prescaler = 0;
    4a96:	725c      	strb	r4, [r3, #9]
	config->timeout_period = 0xFFFF;
    4a98:	3a09      	subs	r2, #9
    4a9a:	815a      	strh	r2, [r3, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
    4a9c:	731c      	strb	r4, [r3, #12]
	config->timeout_enable = false;
    4a9e:	735c      	strb	r4, [r3, #13]
	config->tdc_enable = false;
    4aa0:	739c      	strb	r4, [r3, #14]
	config->delay_compensation_offset = 0;
    4aa2:	73dc      	strb	r4, [r3, #15]
	config->delay_compensation_filter_window_length = 0;
    4aa4:	741c      	strb	r4, [r3, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
    4aa6:	745f      	strb	r7, [r3, #17]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
    4aa8:	749f      	strb	r7, [r3, #18]
	config->remote_frames_standard_reject = true;
    4aaa:	74dd      	strb	r5, [r3, #19]
	config->remote_frames_extended_reject = true;
    4aac:	751d      	strb	r5, [r3, #20]
	config->extended_id_mask = 0x1FFFFFFF;
    4aae:	4a5b      	ldr	r2, [pc, #364]	; (4c1c <main+0x294>)
    4ab0:	619a      	str	r2, [r3, #24]
	config->rx_fifo_0_overwrite = true;
    4ab2:	771d      	strb	r5, [r3, #28]
	config->rx_fifo_0_watermark = 0;
    4ab4:	775c      	strb	r4, [r3, #29]
	config->rx_fifo_1_overwrite = true;
    4ab6:	779d      	strb	r5, [r3, #30]
	config->rx_fifo_1_watermark = 0;
    4ab8:	77dc      	strb	r4, [r3, #31]
	config->tx_queue_mode = false;
    4aba:	2220      	movs	r2, #32
    4abc:	549c      	strb	r4, [r3, r2]
	config->tx_event_fifo_watermark = 0;
    4abe:	3201      	adds	r2, #1
    4ac0:	549c      	strb	r4, [r3, r2]
	can_init(&can_instance, CAN_MODULE, &config_can);
    4ac2:	4c57      	ldr	r4, [pc, #348]	; (4c20 <main+0x298>)
    4ac4:	001a      	movs	r2, r3
    4ac6:	4957      	ldr	r1, [pc, #348]	; (4c24 <main+0x29c>)
    4ac8:	0020      	movs	r0, r4
    4aca:	4b57      	ldr	r3, [pc, #348]	; (4c28 <main+0x2a0>)
    4acc:	4798      	blx	r3
	can_start(&can_instance);
    4ace:	0020      	movs	r0, r4
    4ad0:	4b56      	ldr	r3, [pc, #344]	; (4c2c <main+0x2a4>)
    4ad2:	4798      	blx	r3
    4ad4:	2280      	movs	r2, #128	; 0x80
    4ad6:	0212      	lsls	r2, r2, #8
    4ad8:	4b4e      	ldr	r3, [pc, #312]	; (4c14 <main+0x28c>)
    4ada:	601a      	str	r2, [r3, #0]
	module_inst->hw->IE.reg |= source;
    4adc:	6822      	ldr	r2, [r4, #0]
    4ade:	6d51      	ldr	r1, [r2, #84]	; 0x54
    4ae0:	23c0      	movs	r3, #192	; 0xc0
    4ae2:	055b      	lsls	r3, r3, #21
    4ae4:	430b      	orrs	r3, r1
    4ae6:	6553      	str	r3, [r2, #84]	; 0x54
	printf("Menu :\r\n"
    4ae8:	4851      	ldr	r0, [pc, #324]	; (4c30 <main+0x2a8>)
    4aea:	4d52      	ldr	r5, [pc, #328]	; (4c34 <main+0x2ac>)
    4aec:	47a8      	blx	r5
uint8_t encrypted_response_hash[16];
uint8_t server_reply[16];
ECCRYPTO_STATUS Status;


printf("Time for enrollment\r\n");
    4aee:	4852      	ldr	r0, [pc, #328]	; (4c38 <main+0x2b0>)
    4af0:	47a8      	blx	r5
bool hardcoded = (bool)Enrollment(NODE_ID, secret_key, ServerPublicKey, ec,&can_instance);
    4af2:	9400      	str	r4, [sp, #0]
    4af4:	ab30      	add	r3, sp, #192	; 0xc0
    4af6:	aa38      	add	r2, sp, #224	; 0xe0
    4af8:	a950      	add	r1, sp, #320	; 0x140
    4afa:	2002      	movs	r0, #2
    4afc:	4c4f      	ldr	r4, [pc, #316]	; (4c3c <main+0x2b4>)
    4afe:	47a0      	blx	r4
    4b00:	9003      	str	r0, [sp, #12]

printf("Enrollment complete\n");
    4b02:	484f      	ldr	r0, [pc, #316]	; (4c40 <main+0x2b8>)
    4b04:	47a8      	blx	r5

//! [main_setup]
}

static void resetFlags(void) {
	g_bErrFlag = 0;
    4b06:	2300      	movs	r3, #0
    4b08:	9304      	str	r3, [sp, #16]
	STAGE = AUTHENTICATION;
    4b0a:	2301      	movs	r3, #1
    4b0c:	466a      	mov	r2, sp
    4b0e:	75d3      	strb	r3, [r2, #23]
				g_sent = 0;
    4b10:	4b4c      	ldr	r3, [pc, #304]	; (4c44 <main+0x2bc>)
    4b12:	4698      	mov	r8, r3
    4b14:	e0b1      	b.n	4c7a <main+0x2f2>
		printf("Generating Response\r\n");
    4b16:	484c      	ldr	r0, [pc, #304]	; (4c48 <main+0x2c0>)
    4b18:	4b46      	ldr	r3, [pc, #280]	; (4c34 <main+0x2ac>)
    4b1a:	4798      	blx	r3
    4b1c:	e0da      	b.n	4cd4 <main+0x34c>
    4b1e:	0004      	movs	r4, r0
		printf("Failed Public Key Generation\r\n");
    4b20:	484a      	ldr	r0, [pc, #296]	; (4c4c <main+0x2c4>)
    4b22:	4b44      	ldr	r3, [pc, #272]	; (4c34 <main+0x2ac>)
    4b24:	4798      	blx	r3
		return Status;
    4b26:	0020      	movs	r0, r4
}
    4b28:	b059      	add	sp, #356	; 0x164
    4b2a:	bc3c      	pop	{r2, r3, r4, r5}
    4b2c:	4690      	mov	r8, r2
    4b2e:	4699      	mov	r9, r3
    4b30:	46a2      	mov	sl, r4
    4b32:	46ab      	mov	fp, r5
    4b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b36:	0004      	movs	r4, r0
		printf("Failed Shared Secret Creation\r\n");
    4b38:	4845      	ldr	r0, [pc, #276]	; (4c50 <main+0x2c8>)
    4b3a:	4b3e      	ldr	r3, [pc, #248]	; (4c34 <main+0x2ac>)
    4b3c:	4798      	blx	r3
		return Status;
    4b3e:	0020      	movs	r0, r4
    4b40:	e7f2      	b.n	4b28 <main+0x1a0>
		while(g_received == 0);
    4b42:	4a44      	ldr	r2, [pc, #272]	; (4c54 <main+0x2cc>)
    4b44:	6813      	ldr	r3, [r2, #0]
    4b46:	2b00      	cmp	r3, #0
    4b48:	d0fc      	beq.n	4b44 <main+0x1bc>
		g_received = 0;
    4b4a:	4b42      	ldr	r3, [pc, #264]	; (4c54 <main+0x2cc>)
    4b4c:	2200      	movs	r2, #0
    4b4e:	601a      	str	r2, [r3, #0]
		memcpy(message_in,rx_element_fifo_0.data,8);
    4b50:	4b41      	ldr	r3, [pc, #260]	; (4c58 <main+0x2d0>)
    4b52:	3308      	adds	r3, #8
    4b54:	aa2b      	add	r2, sp, #172	; 0xac
    4b56:	cb03      	ldmia	r3!, {r0, r1}
    4b58:	c203      	stmia	r2!, {r0, r1}
		present80Decrypt(session_key,message_in);
    4b5a:	a92b      	add	r1, sp, #172	; 0xac
    4b5c:	a82d      	add	r0, sp, #180	; 0xb4
    4b5e:	4b3f      	ldr	r3, [pc, #252]	; (4c5c <main+0x2d4>)
    4b60:	4798      	blx	r3
		printf("Received: 0x%08x.%08x\r\n",*((uint32_t *)&message_in[4]),*((uint32_t *)message_in));
    4b62:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    4b64:	992c      	ldr	r1, [sp, #176]	; 0xb0
    4b66:	483e      	ldr	r0, [pc, #248]	; (4c60 <main+0x2d8>)
    4b68:	4b3e      	ldr	r3, [pc, #248]	; (4c64 <main+0x2dc>)
    4b6a:	469b      	mov	fp, r3
    4b6c:	4798      	blx	r3
		*((uint32_t *)message_in) += NODE_ID;
    4b6e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    4b70:	3302      	adds	r3, #2
    4b72:	932b      	str	r3, [sp, #172]	; 0xac
		memmove(message_out,message_in,8);
    4b74:	af29      	add	r7, sp, #164	; 0xa4
    4b76:	003b      	movs	r3, r7
    4b78:	aa2b      	add	r2, sp, #172	; 0xac
    4b7a:	ca03      	ldmia	r2!, {r0, r1}
    4b7c:	c303      	stmia	r3!, {r0, r1}
	g_received = 0;
	g_sent = 0;
}

static void Delay_ms(uint32_t Delay) {
	printf("Delayed here");
    4b7e:	483a      	ldr	r0, [pc, #232]	; (4c68 <main+0x2e0>)
    4b80:	47d8      	blx	fp
			present80Encrypt(session_key,message_out);
    4b82:	0039      	movs	r1, r7
    4b84:	a82d      	add	r0, sp, #180	; 0xb4
    4b86:	4b39      	ldr	r3, [pc, #228]	; (4c6c <main+0x2e4>)
    4b88:	4798      	blx	r3
			memcpy(tx_element.data,message_out,8);
    4b8a:	ab09      	add	r3, sp, #36	; 0x24
    4b8c:	cf06      	ldmia	r7!, {r1, r2}
    4b8e:	c306      	stmia	r3!, {r1, r2}
			can_set_tx_buffer_element(&can_instance, &tx_element,
    4b90:	4f23      	ldr	r7, [pc, #140]	; (4c20 <main+0x298>)
    4b92:	2205      	movs	r2, #5
    4b94:	a907      	add	r1, sp, #28
    4b96:	0038      	movs	r0, r7
    4b98:	4b35      	ldr	r3, [pc, #212]	; (4c70 <main+0x2e8>)
    4b9a:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    4b9c:	683b      	ldr	r3, [r7, #0]
    4b9e:	699a      	ldr	r2, [r3, #24]
    4ba0:	0792      	lsls	r2, r2, #30
    4ba2:	d401      	bmi.n	4ba8 <main+0x220>
	module_inst->hw->TXBAR.reg = trig_mask;
    4ba4:	22d0      	movs	r2, #208	; 0xd0
    4ba6:	509d      	str	r5, [r3, r2]
			g_sent=1;
    4ba8:	4b26      	ldr	r3, [pc, #152]	; (4c44 <main+0x2bc>)
    4baa:	2201      	movs	r2, #1
    4bac:	601a      	str	r2, [r3, #0]
	printf("Delayed here");
    4bae:	482e      	ldr	r0, [pc, #184]	; (4c68 <main+0x2e0>)
    4bb0:	4b2c      	ldr	r3, [pc, #176]	; (4c64 <main+0x2dc>)
    4bb2:	4798      	blx	r3
    4bb4:	2301      	movs	r3, #1
    4bb6:	425b      	negs	r3, r3
    4bb8:	469c      	mov	ip, r3
    4bba:	44e2      	add	sl, ip
	for (int i = 0; i < TOTAL_SENDS; i++) {
    4bbc:	4653      	mov	r3, sl
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	d058      	beq.n	4c74 <main+0x2ec>
	return module_inst->hw->TXBTO.reg;
    4bc2:	464b      	mov	r3, r9
    4bc4:	681a      	ldr	r2, [r3, #0]
		while(g_sent != 0) {
    4bc6:	6823      	ldr	r3, [r4, #0]
    4bc8:	2b00      	cmp	r3, #0
    4bca:	d0ba      	beq.n	4b42 <main+0x1ba>
    4bcc:	5993      	ldr	r3, [r2, r6]
			if (can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX))
    4bce:	421d      	tst	r5, r3
    4bd0:	d0f9      	beq.n	4bc6 <main+0x23e>
				g_sent = 0;
    4bd2:	4643      	mov	r3, r8
    4bd4:	2100      	movs	r1, #0
    4bd6:	6019      	str	r1, [r3, #0]
    4bd8:	e7f5      	b.n	4bc6 <main+0x23e>
    4bda:	46c0      	nop			; (mov r8, r8)
    4bdc:	00001741 	.word	0x00001741
    4be0:	002a0003 	.word	0x002a0003
    4be4:	002b0003 	.word	0x002b0003
    4be8:	20000c4c 	.word	0x20000c4c
    4bec:	20000dec 	.word	0x20000dec
    4bf0:	0000466d 	.word	0x0000466d
    4bf4:	20000de8 	.word	0x20000de8
    4bf8:	00004641 	.word	0x00004641
    4bfc:	20000de4 	.word	0x20000de4
    4c00:	42001400 	.word	0x42001400
    4c04:	00000ac9 	.word	0x00000ac9
    4c08:	20000104 	.word	0x20000104
    4c0c:	000055bd 	.word	0x000055bd
    4c10:	00000a39 	.word	0x00000a39
    4c14:	e000e100 	.word	0xe000e100
    4c18:	00001711 	.word	0x00001711
    4c1c:	1fffffff 	.word	0x1fffffff
    4c20:	20000c48 	.word	0x20000c48
    4c24:	42001c00 	.word	0x42001c00
    4c28:	000001f9 	.word	0x000001f9
    4c2c:	000004f5 	.word	0x000004f5
    4c30:	000086ac 	.word	0x000086ac
    4c34:	000055a9 	.word	0x000055a9
    4c38:	00008908 	.word	0x00008908
    4c3c:	000018c9 	.word	0x000018c9
    4c40:	00008920 	.word	0x00008920
    4c44:	20000ca0 	.word	0x20000ca0
    4c48:	00008988 	.word	0x00008988
    4c4c:	000089a0 	.word	0x000089a0
    4c50:	000089c0 	.word	0x000089c0
    4c54:	20000c98 	.word	0x20000c98
    4c58:	20000dac 	.word	0x20000dac
    4c5c:	000044f5 	.word	0x000044f5
    4c60:	00008b24 	.word	0x00008b24
    4c64:	000054b5 	.word	0x000054b5
    4c68:	000089f8 	.word	0x000089f8
    4c6c:	000043cd 	.word	0x000043cd
    4c70:	000005e9 	.word	0x000005e9
	printf("Normal Operation Completed!\r\n");
    4c74:	48e8      	ldr	r0, [pc, #928]	; (5018 <main+0x690>)
    4c76:	4be9      	ldr	r3, [pc, #932]	; (501c <main+0x694>)
    4c78:	4798      	blx	r3
	g_bErrFlag = 0;
    4c7a:	49e9      	ldr	r1, [pc, #932]	; (5020 <main+0x698>)
    4c7c:	9a04      	ldr	r2, [sp, #16]
    4c7e:	600a      	str	r2, [r1, #0]
	g_recComplete = 0;
    4c80:	49e8      	ldr	r1, [pc, #928]	; (5024 <main+0x69c>)
    4c82:	600a      	str	r2, [r1, #0]
	g_resSend = 0;
    4c84:	4be8      	ldr	r3, [pc, #928]	; (5028 <main+0x6a0>)
    4c86:	601a      	str	r2, [r3, #0]
	g_sharedReceived = 0;
    4c88:	4be8      	ldr	r3, [pc, #928]	; (502c <main+0x6a4>)
    4c8a:	601a      	str	r2, [r3, #0]
	g_normalOp = 0;
    4c8c:	4be8      	ldr	r3, [pc, #928]	; (5030 <main+0x6a8>)
    4c8e:	601a      	str	r2, [r3, #0]
	g_waitFlag = 0;
    4c90:	4be8      	ldr	r3, [pc, #928]	; (5034 <main+0x6ac>)
    4c92:	601a      	str	r2, [r3, #0]
	g_normalFlag = 0;
    4c94:	4be8      	ldr	r3, [pc, #928]	; (5038 <main+0x6b0>)
    4c96:	601a      	str	r2, [r3, #0]
	g_received = 0;
    4c98:	4be8      	ldr	r3, [pc, #928]	; (503c <main+0x6b4>)
    4c9a:	601a      	str	r2, [r3, #0]
	g_sent = 0;
    4c9c:	4be8      	ldr	r3, [pc, #928]	; (5040 <main+0x6b8>)
    4c9e:	601a      	str	r2, [r3, #0]
	STAGE = AUTHENTICATION;
    4ca0:	4be8      	ldr	r3, [pc, #928]	; (5044 <main+0x6bc>)
    4ca2:	466a      	mov	r2, sp
    4ca4:	7dd2      	ldrb	r2, [r2, #23]
    4ca6:	701a      	strb	r2, [r3, #0]
	printf("Initialization Complete...\r\n");
    4ca8:	48e7      	ldr	r0, [pc, #924]	; (5048 <main+0x6c0>)
    4caa:	4cdc      	ldr	r4, [pc, #880]	; (501c <main+0x694>)
    4cac:	47a0      	blx	r4
	printf("Trying to test this THANG...\r\n");
    4cae:	48e7      	ldr	r0, [pc, #924]	; (504c <main+0x6c4>)
    4cb0:	47a0      	blx	r4
	memset(secret_key+16,0,16);
    4cb2:	2210      	movs	r2, #16
    4cb4:	2100      	movs	r1, #0
    4cb6:	a854      	add	r0, sp, #336	; 0x150
    4cb8:	4be5      	ldr	r3, [pc, #916]	; (5050 <main+0x6c8>)
    4cba:	4798      	blx	r3
	if(hardcoded) {
    4cbc:	9b03      	ldr	r3, [sp, #12]
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	d100      	bne.n	4cc4 <main+0x33c>
    4cc2:	e728      	b.n	4b16 <main+0x18e>
		printf("Hardcoding Response\r\n");
    4cc4:	48e3      	ldr	r0, [pc, #908]	; (5054 <main+0x6cc>)
    4cc6:	4bd5      	ldr	r3, [pc, #852]	; (501c <main+0x694>)
    4cc8:	4798      	blx	r3
		memset(response,NODE_ID,16);
    4cca:	2210      	movs	r2, #16
    4ccc:	2102      	movs	r1, #2
    4cce:	a834      	add	r0, sp, #208	; 0xd0
    4cd0:	4bdf      	ldr	r3, [pc, #892]	; (5050 <main+0x6c8>)
    4cd2:	4798      	blx	r3
	memmove(secret_key,response,16);
    4cd4:	2210      	movs	r2, #16
    4cd6:	a934      	add	r1, sp, #208	; 0xd0
    4cd8:	a850      	add	r0, sp, #320	; 0x140
    4cda:	4bdf      	ldr	r3, [pc, #892]	; (5058 <main+0x6d0>)
    4cdc:	4798      	blx	r3
	photon128(response,16,response_hash);
    4cde:	aa25      	add	r2, sp, #148	; 0x94
    4ce0:	2110      	movs	r1, #16
    4ce2:	a834      	add	r0, sp, #208	; 0xd0
    4ce4:	4bdd      	ldr	r3, [pc, #884]	; (505c <main+0x6d4>)
    4ce6:	4798      	blx	r3
	Status = CompressedKeyGeneration(secret_key,public_key);
    4ce8:	a948      	add	r1, sp, #288	; 0x120
    4cea:	a850      	add	r0, sp, #320	; 0x140
    4cec:	4bdc      	ldr	r3, [pc, #880]	; (5060 <main+0x6d8>)
    4cee:	4798      	blx	r3
	if (Status != ECCRYPTO_SUCCESS) {
    4cf0:	2801      	cmp	r0, #1
    4cf2:	d000      	beq.n	4cf6 <main+0x36e>
    4cf4:	e713      	b.n	4b1e <main+0x196>
	Status = CompressedSecretAgreement(secret_key,ServerPublicKey,shared_secret);
    4cf6:	aa40      	add	r2, sp, #256	; 0x100
    4cf8:	a938      	add	r1, sp, #224	; 0xe0
    4cfa:	a850      	add	r0, sp, #320	; 0x140
    4cfc:	4bd9      	ldr	r3, [pc, #868]	; (5064 <main+0x6dc>)
    4cfe:	4798      	blx	r3
	if (Status != ECCRYPTO_SUCCESS) {
    4d00:	2801      	cmp	r0, #1
    4d02:	d000      	beq.n	4d06 <main+0x37e>
    4d04:	e717      	b.n	4b36 <main+0x1ae>
	photon128(shared_secret,32,shared_hash);
    4d06:	aa21      	add	r2, sp, #132	; 0x84
    4d08:	2120      	movs	r1, #32
    4d0a:	a840      	add	r0, sp, #256	; 0x100
    4d0c:	4bd3      	ldr	r3, [pc, #844]	; (505c <main+0x6d4>)
    4d0e:	4798      	blx	r3
	memmove(encrypted_response_hash,response_hash,16);
    4d10:	a91d      	add	r1, sp, #116	; 0x74
    4d12:	ab25      	add	r3, sp, #148	; 0x94
    4d14:	000a      	movs	r2, r1
    4d16:	cb31      	ldmia	r3!, {r0, r4, r5}
    4d18:	c231      	stmia	r2!, {r0, r4, r5}
    4d1a:	681b      	ldr	r3, [r3, #0]
    4d1c:	6013      	str	r3, [r2, #0]
	present80Encrypt(shared_hash,encrypted_response_hash);
    4d1e:	a821      	add	r0, sp, #132	; 0x84
    4d20:	4cd1      	ldr	r4, [pc, #836]	; (5068 <main+0x6e0>)
    4d22:	47a0      	blx	r4
	present80Encrypt(shared_hash,&encrypted_response_hash[8]);
    4d24:	a91f      	add	r1, sp, #124	; 0x7c
    4d26:	a821      	add	r0, sp, #132	; 0x84
    4d28:	47a0      	blx	r4
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    4d2a:	4bd0      	ldr	r3, [pc, #832]	; (506c <main+0x6e4>)
    4d2c:	4699      	mov	r9, r3
    4d2e:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID1 = 0x301;
    4d30:	9a06      	ldr	r2, [sp, #24]
    4d32:	4fcf      	ldr	r7, [pc, #828]	; (5070 <main+0x6e8>)
    4d34:	403a      	ands	r2, r7
    4d36:	4bcf      	ldr	r3, [pc, #828]	; (5074 <main+0x6ec>)
    4d38:	4313      	orrs	r3, r2
    4d3a:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID2 = CAN_FILTER_MONITOR;
    4d3c:	9b06      	ldr	r3, [sp, #24]
    4d3e:	0adb      	lsrs	r3, r3, #11
    4d40:	02db      	lsls	r3, r3, #11
    4d42:	2201      	movs	r2, #1
    4d44:	4313      	orrs	r3, r2
    4d46:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFEC =
    4d48:	9b06      	ldr	r3, [sp, #24]
    4d4a:	24e0      	movs	r4, #224	; 0xe0
    4d4c:	05a4      	lsls	r4, r4, #22
    4d4e:	4323      	orrs	r3, r4
    4d50:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    4d52:	4dc9      	ldr	r5, [pc, #804]	; (5078 <main+0x6f0>)
    4d54:	a906      	add	r1, sp, #24
    4d56:	0028      	movs	r0, r5
    4d58:	4ec8      	ldr	r6, [pc, #800]	; (507c <main+0x6f4>)
    4d5a:	47b0      	blx	r6
	module_inst->hw->IE.reg |= source;
    4d5c:	682a      	ldr	r2, [r5, #0]
    4d5e:	6d51      	ldr	r1, [r2, #84]	; 0x54
    4d60:	2380      	movs	r3, #128	; 0x80
    4d62:	031b      	lsls	r3, r3, #12
    4d64:	430b      	orrs	r3, r1
    4d66:	6553      	str	r3, [r2, #84]	; 0x54
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    4d68:	464b      	mov	r3, r9
    4d6a:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID1 = 0x0;
    4d6c:	9b06      	ldr	r3, [sp, #24]
    4d6e:	401f      	ands	r7, r3
    4d70:	9706      	str	r7, [sp, #24]
	sd_filter.S0.bit.SFID2 = CAN_FILTER_WAIT;
    4d72:	9b06      	ldr	r3, [sp, #24]
    4d74:	0adb      	lsrs	r3, r3, #11
    4d76:	02db      	lsls	r3, r3, #11
    4d78:	2202      	movs	r2, #2
    4d7a:	4313      	orrs	r3, r2
    4d7c:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFEC =
    4d7e:	9b06      	ldr	r3, [sp, #24]
    4d80:	431c      	orrs	r4, r3
    4d82:	9406      	str	r4, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    4d84:	a906      	add	r1, sp, #24
    4d86:	0028      	movs	r0, r5
    4d88:	47b0      	blx	r6
	printf("Waiting\r\n");
    4d8a:	48bd      	ldr	r0, [pc, #756]	; (5080 <main+0x6f8>)
    4d8c:	4ba3      	ldr	r3, [pc, #652]	; (501c <main+0x694>)
    4d8e:	4798      	blx	r3
	while(g_waitFlag < 2*(NODE_ID-1));
    4d90:	4aa8      	ldr	r2, [pc, #672]	; (5034 <main+0x6ac>)
    4d92:	6813      	ldr	r3, [r2, #0]
    4d94:	2b01      	cmp	r3, #1
    4d96:	d9fc      	bls.n	4d92 <main+0x40a>
	sd_filter.S0.bit.SFEC =
    4d98:	9b06      	ldr	r3, [sp, #24]
    4d9a:	4aba      	ldr	r2, [pc, #744]	; (5084 <main+0x6fc>)
    4d9c:	4013      	ands	r3, r2
    4d9e:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    4da0:	4cb5      	ldr	r4, [pc, #724]	; (5078 <main+0x6f0>)
    4da2:	2202      	movs	r2, #2
    4da4:	a906      	add	r1, sp, #24
    4da6:	0020      	movs	r0, r4
    4da8:	4bb4      	ldr	r3, [pc, #720]	; (507c <main+0x6f4>)
    4daa:	4798      	blx	r3
	printf("My Turn!\r\n");
    4dac:	48b6      	ldr	r0, [pc, #728]	; (5088 <main+0x700>)
    4dae:	4b9b      	ldr	r3, [pc, #620]	; (501c <main+0x694>)
    4db0:	4798      	blx	r3
	printf("Delayed here");
    4db2:	48b6      	ldr	r0, [pc, #728]	; (508c <main+0x704>)
    4db4:	4bb6      	ldr	r3, [pc, #728]	; (5090 <main+0x708>)
    4db6:	4798      	blx	r3
	tx_element->T0.reg = 0;
    4db8:	2300      	movs	r3, #0
    4dba:	9307      	str	r3, [sp, #28]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    4dbc:	2388      	movs	r3, #136	; 0x88
    4dbe:	041b      	lsls	r3, r3, #16
    4dc0:	9308      	str	r3, [sp, #32]
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x100+NODE_ID);
    4dc2:	9a07      	ldr	r2, [sp, #28]
    4dc4:	2381      	movs	r3, #129	; 0x81
    4dc6:	04db      	lsls	r3, r3, #19
    4dc8:	4313      	orrs	r3, r2
    4dca:	9307      	str	r3, [sp, #28]
	tx_element.T1.bit.DLC = 8;
    4dcc:	9b08      	ldr	r3, [sp, #32]
    4dce:	4ab1      	ldr	r2, [pc, #708]	; (5094 <main+0x70c>)
    4dd0:	401a      	ands	r2, r3
    4dd2:	2380      	movs	r3, #128	; 0x80
    4dd4:	031b      	lsls	r3, r3, #12
    4dd6:	4313      	orrs	r3, r2
    4dd8:	9308      	str	r3, [sp, #32]
	memcpy(tx_element.data,encrypted_response_hash,8);
    4dda:	aa1d      	add	r2, sp, #116	; 0x74
    4ddc:	ab09      	add	r3, sp, #36	; 0x24
    4dde:	ca03      	ldmia	r2!, {r0, r1}
    4de0:	c303      	stmia	r3!, {r0, r1}
	can_set_tx_buffer_element(&can_instance, &tx_element,
    4de2:	2205      	movs	r2, #5
    4de4:	a907      	add	r1, sp, #28
    4de6:	0020      	movs	r0, r4
    4de8:	4bab      	ldr	r3, [pc, #684]	; (5098 <main+0x710>)
    4dea:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    4dec:	6822      	ldr	r2, [r4, #0]
    4dee:	6993      	ldr	r3, [r2, #24]
    4df0:	079b      	lsls	r3, r3, #30
    4df2:	d402      	bmi.n	4dfa <main+0x472>
	module_inst->hw->TXBAR.reg = trig_mask;
    4df4:	2120      	movs	r1, #32
    4df6:	23d0      	movs	r3, #208	; 0xd0
    4df8:	50d1      	str	r1, [r2, r3]
	return module_inst->hw->TXBTO.reg;
    4dfa:	20d8      	movs	r0, #216	; 0xd8
	while(can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX));
    4dfc:	2120      	movs	r1, #32
    4dfe:	5813      	ldr	r3, [r2, r0]
    4e00:	4219      	tst	r1, r3
    4e02:	d1fc      	bne.n	4dfe <main+0x476>
	printf("First message sent!\r\n");
    4e04:	48a5      	ldr	r0, [pc, #660]	; (509c <main+0x714>)
    4e06:	4b85      	ldr	r3, [pc, #532]	; (501c <main+0x694>)
    4e08:	4798      	blx	r3
	printf("Delayed here");
    4e0a:	48a0      	ldr	r0, [pc, #640]	; (508c <main+0x704>)
    4e0c:	4ba0      	ldr	r3, [pc, #640]	; (5090 <main+0x708>)
    4e0e:	4798      	blx	r3
	tx_element->T0.reg = 0;
    4e10:	2300      	movs	r3, #0
    4e12:	9307      	str	r3, [sp, #28]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    4e14:	2388      	movs	r3, #136	; 0x88
    4e16:	041b      	lsls	r3, r3, #16
    4e18:	9308      	str	r3, [sp, #32]
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x100+NODE_ID);
    4e1a:	9a07      	ldr	r2, [sp, #28]
    4e1c:	2381      	movs	r3, #129	; 0x81
    4e1e:	04db      	lsls	r3, r3, #19
    4e20:	4313      	orrs	r3, r2
    4e22:	9307      	str	r3, [sp, #28]
	tx_element.T1.bit.DLC = 8;
    4e24:	9b08      	ldr	r3, [sp, #32]
    4e26:	4a9b      	ldr	r2, [pc, #620]	; (5094 <main+0x70c>)
    4e28:	401a      	ands	r2, r3
    4e2a:	2380      	movs	r3, #128	; 0x80
    4e2c:	031b      	lsls	r3, r3, #12
    4e2e:	4313      	orrs	r3, r2
    4e30:	9308      	str	r3, [sp, #32]
	memcpy(tx_element.data,&encrypted_response_hash[8],8);
    4e32:	ab09      	add	r3, sp, #36	; 0x24
    4e34:	aa1f      	add	r2, sp, #124	; 0x7c
    4e36:	ca03      	ldmia	r2!, {r0, r1}
    4e38:	c303      	stmia	r3!, {r0, r1}
	can_set_tx_buffer_element(&can_instance, &tx_element,
    4e3a:	4c8f      	ldr	r4, [pc, #572]	; (5078 <main+0x6f0>)
    4e3c:	2205      	movs	r2, #5
    4e3e:	a907      	add	r1, sp, #28
    4e40:	0020      	movs	r0, r4
    4e42:	4b95      	ldr	r3, [pc, #596]	; (5098 <main+0x710>)
    4e44:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    4e46:	6822      	ldr	r2, [r4, #0]
    4e48:	6993      	ldr	r3, [r2, #24]
    4e4a:	079b      	lsls	r3, r3, #30
    4e4c:	d402      	bmi.n	4e54 <main+0x4cc>
	module_inst->hw->TXBAR.reg = trig_mask;
    4e4e:	2120      	movs	r1, #32
    4e50:	23d0      	movs	r3, #208	; 0xd0
    4e52:	50d1      	str	r1, [r2, r3]
	return module_inst->hw->TXBTO.reg;
    4e54:	20d8      	movs	r0, #216	; 0xd8
	while(can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX));
    4e56:	2120      	movs	r1, #32
    4e58:	5813      	ldr	r3, [r2, r0]
    4e5a:	4219      	tst	r1, r3
    4e5c:	d1fc      	bne.n	4e58 <main+0x4d0>
	printf("Second message sent!\r\n");
    4e5e:	4890      	ldr	r0, [pc, #576]	; (50a0 <main+0x718>)
    4e60:	4c6e      	ldr	r4, [pc, #440]	; (501c <main+0x694>)
    4e62:	47a0      	blx	r4
	g_waitFlag += 2;
    4e64:	4a73      	ldr	r2, [pc, #460]	; (5034 <main+0x6ac>)
    4e66:	6813      	ldr	r3, [r2, #0]
    4e68:	3302      	adds	r3, #2
    4e6a:	6013      	str	r3, [r2, #0]
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    4e6c:	4b7f      	ldr	r3, [pc, #508]	; (506c <main+0x6e4>)
    4e6e:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID1 = 0x0;
    4e70:	9b06      	ldr	r3, [sp, #24]
    4e72:	4a7f      	ldr	r2, [pc, #508]	; (5070 <main+0x6e8>)
    4e74:	4013      	ands	r3, r2
    4e76:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID2 = CAN_FILTER_WAIT;
    4e78:	9b06      	ldr	r3, [sp, #24]
    4e7a:	0adb      	lsrs	r3, r3, #11
    4e7c:	02db      	lsls	r3, r3, #11
    4e7e:	2202      	movs	r2, #2
    4e80:	4313      	orrs	r3, r2
    4e82:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFEC =
    4e84:	9a06      	ldr	r2, [sp, #24]
    4e86:	23e0      	movs	r3, #224	; 0xe0
    4e88:	059b      	lsls	r3, r3, #22
    4e8a:	4313      	orrs	r3, r2
    4e8c:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    4e8e:	2202      	movs	r2, #2
    4e90:	a906      	add	r1, sp, #24
    4e92:	4879      	ldr	r0, [pc, #484]	; (5078 <main+0x6f0>)
    4e94:	4b79      	ldr	r3, [pc, #484]	; (507c <main+0x6f4>)
    4e96:	4798      	blx	r3
	printf("Waiting for others\r\n");
    4e98:	4882      	ldr	r0, [pc, #520]	; (50a4 <main+0x71c>)
    4e9a:	47a0      	blx	r4
	while(g_waitFlag < 2*(NODE_TOTAL));
    4e9c:	4a65      	ldr	r2, [pc, #404]	; (5034 <main+0x6ac>)
    4e9e:	6813      	ldr	r3, [r2, #0]
    4ea0:	2b03      	cmp	r3, #3
    4ea2:	d9fc      	bls.n	4e9e <main+0x516>
	sd_filter.S0.bit.SFEC =
    4ea4:	9b06      	ldr	r3, [sp, #24]
    4ea6:	4a77      	ldr	r2, [pc, #476]	; (5084 <main+0x6fc>)
    4ea8:	4013      	ands	r3, r2
    4eaa:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    4eac:	4c72      	ldr	r4, [pc, #456]	; (5078 <main+0x6f0>)
    4eae:	2202      	movs	r2, #2
    4eb0:	a906      	add	r1, sp, #24
    4eb2:	0020      	movs	r0, r4
    4eb4:	4d71      	ldr	r5, [pc, #452]	; (507c <main+0x6f4>)
    4eb6:	47a8      	blx	r5
	printf("All nodes finished sending hashed responses\r\n");
    4eb8:	487b      	ldr	r0, [pc, #492]	; (50a8 <main+0x720>)
    4eba:	4b58      	ldr	r3, [pc, #352]	; (501c <main+0x694>)
    4ebc:	4798      	blx	r3
    4ebe:	4b6b      	ldr	r3, [pc, #428]	; (506c <main+0x6e4>)
    4ec0:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID1 = 0x200 + NODE_ID;
    4ec2:	9b06      	ldr	r3, [sp, #24]
    4ec4:	4a6a      	ldr	r2, [pc, #424]	; (5070 <main+0x6e8>)
    4ec6:	401a      	ands	r2, r3
    4ec8:	4b78      	ldr	r3, [pc, #480]	; (50ac <main+0x724>)
    4eca:	4313      	orrs	r3, r2
    4ecc:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID2 = CAN_FILTER_MSG2;
    4ece:	9b06      	ldr	r3, [sp, #24]
    4ed0:	0adb      	lsrs	r3, r3, #11
    4ed2:	02db      	lsls	r3, r3, #11
    4ed4:	2204      	movs	r2, #4
    4ed6:	4313      	orrs	r3, r2
    4ed8:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFEC =
    4eda:	9a06      	ldr	r2, [sp, #24]
    4edc:	23e0      	movs	r3, #224	; 0xe0
    4ede:	059b      	lsls	r3, r3, #22
    4ee0:	4313      	orrs	r3, r2
    4ee2:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    4ee4:	2204      	movs	r2, #4
    4ee6:	a906      	add	r1, sp, #24
    4ee8:	0020      	movs	r0, r4
    4eea:	47a8      	blx	r5
	while(g_sharedReceived==0);
    4eec:	4a4f      	ldr	r2, [pc, #316]	; (502c <main+0x6a4>)
    4eee:	6813      	ldr	r3, [r2, #0]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d0fc      	beq.n	4eee <main+0x566>
	memcpy(server_reply,rx_element_buff[CAN_FILTER_MSG2].data,8);
    4ef4:	aa19      	add	r2, sp, #100	; 0x64
    4ef6:	4b6e      	ldr	r3, [pc, #440]	; (50b0 <main+0x728>)
    4ef8:	3348      	adds	r3, #72	; 0x48
    4efa:	cb03      	ldmia	r3!, {r0, r1}
    4efc:	c203      	stmia	r2!, {r0, r1}
	g_recComplete++;
    4efe:	4a49      	ldr	r2, [pc, #292]	; (5024 <main+0x69c>)
    4f00:	6813      	ldr	r3, [r2, #0]
    4f02:	3301      	adds	r3, #1
    4f04:	6013      	str	r3, [r2, #0]
	printf("Received first message\r\n");
    4f06:	486b      	ldr	r0, [pc, #428]	; (50b4 <main+0x72c>)
    4f08:	4b44      	ldr	r3, [pc, #272]	; (501c <main+0x694>)
    4f0a:	4798      	blx	r3
	while(g_sharedReceived==1);
    4f0c:	4a47      	ldr	r2, [pc, #284]	; (502c <main+0x6a4>)
    4f0e:	6813      	ldr	r3, [r2, #0]
    4f10:	2b01      	cmp	r3, #1
    4f12:	d0fc      	beq.n	4f0e <main+0x586>
	printf("Received second message\r\n");
    4f14:	4868      	ldr	r0, [pc, #416]	; (50b8 <main+0x730>)
    4f16:	4b41      	ldr	r3, [pc, #260]	; (501c <main+0x694>)
    4f18:	4798      	blx	r3
	memcpy(server_reply,rx_element_buff[CAN_FILTER_MSG2].data,8);
    4f1a:	aa19      	add	r2, sp, #100	; 0x64
    4f1c:	4964      	ldr	r1, [pc, #400]	; (50b0 <main+0x728>)
    4f1e:	000b      	movs	r3, r1
    4f20:	3348      	adds	r3, #72	; 0x48
    4f22:	cb11      	ldmia	r3!, {r0, r4}
    4f24:	c211      	stmia	r2!, {r0, r4}
	printf("Msg ID=0x%04x received: ",(uint32_t)(rx_element_buff[CAN_FILTER_MSG2].R0.bit.ID));
    4f26:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4f28:	00c9      	lsls	r1, r1, #3
    4f2a:	08c9      	lsrs	r1, r1, #3
    4f2c:	4863      	ldr	r0, [pc, #396]	; (50bc <main+0x734>)
    4f2e:	4b58      	ldr	r3, [pc, #352]	; (5090 <main+0x708>)
    4f30:	4798      	blx	r3
	for(int i=0;i<16;i++){printf("%02x ",server_reply[i]);}
    4f32:	2600      	movs	r6, #0
    4f34:	ad19      	add	r5, sp, #100	; 0x64
    4f36:	4c62      	ldr	r4, [pc, #392]	; (50c0 <main+0x738>)
    4f38:	4f55      	ldr	r7, [pc, #340]	; (5090 <main+0x708>)
    4f3a:	5d71      	ldrb	r1, [r6, r5]
    4f3c:	0020      	movs	r0, r4
    4f3e:	47b8      	blx	r7
    4f40:	3601      	adds	r6, #1
    4f42:	2e10      	cmp	r6, #16
    4f44:	d1f9      	bne.n	4f3a <main+0x5b2>
	printf("\r\n");
    4f46:	485f      	ldr	r0, [pc, #380]	; (50c4 <main+0x73c>)
    4f48:	4d34      	ldr	r5, [pc, #208]	; (501c <main+0x694>)
    4f4a:	47a8      	blx	r5
	present80Decrypt(shared_hash,server_reply);
    4f4c:	ac19      	add	r4, sp, #100	; 0x64
    4f4e:	0021      	movs	r1, r4
    4f50:	a821      	add	r0, sp, #132	; 0x84
    4f52:	4e5d      	ldr	r6, [pc, #372]	; (50c8 <main+0x740>)
    4f54:	47b0      	blx	r6
	present80Decrypt(shared_hash,&server_reply[8]);
    4f56:	a91b      	add	r1, sp, #108	; 0x6c
    4f58:	a821      	add	r0, sp, #132	; 0x84
    4f5a:	47b0      	blx	r6
	memmove(session_key,server_reply,10);
    4f5c:	ab2d      	add	r3, sp, #180	; 0xb4
    4f5e:	cc06      	ldmia	r4!, {r1, r2}
    4f60:	c306      	stmia	r3!, {r1, r2}
    4f62:	001a      	movs	r2, r3
    4f64:	8823      	ldrh	r3, [r4, #0]
    4f66:	8013      	strh	r3, [r2, #0]
	printf("Finished Decrypting!\r\n");
    4f68:	4858      	ldr	r0, [pc, #352]	; (50cc <main+0x744>)
    4f6a:	47a8      	blx	r5
	printf("Sessions key is: 0x");
    4f6c:	4858      	ldr	r0, [pc, #352]	; (50d0 <main+0x748>)
    4f6e:	4b48      	ldr	r3, [pc, #288]	; (5090 <main+0x708>)
    4f70:	4798      	blx	r3
	for(int i=9;i>=0;i--){printf("%02x",session_key[i]);}
    4f72:	2609      	movs	r6, #9
    4f74:	ad2d      	add	r5, sp, #180	; 0xb4
    4f76:	4c57      	ldr	r4, [pc, #348]	; (50d4 <main+0x74c>)
    4f78:	4f45      	ldr	r7, [pc, #276]	; (5090 <main+0x708>)
    4f7a:	5d71      	ldrb	r1, [r6, r5]
    4f7c:	0020      	movs	r0, r4
    4f7e:	47b8      	blx	r7
    4f80:	3e01      	subs	r6, #1
    4f82:	d2fa      	bcs.n	4f7a <main+0x5f2>
	while(g_normalFlag == 0);
    4f84:	4a2c      	ldr	r2, [pc, #176]	; (5038 <main+0x6b0>)
    4f86:	6813      	ldr	r3, [r2, #0]
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d0fc      	beq.n	4f86 <main+0x5fe>
	STAGE = NORMAL;
    4f8c:	2202      	movs	r2, #2
    4f8e:	4b2d      	ldr	r3, [pc, #180]	; (5044 <main+0x6bc>)
    4f90:	701a      	strb	r2, [r3, #0]
	sd_filter.S0.bit.SFEC =
    4f92:	9b06      	ldr	r3, [sp, #24]
    4f94:	4a3b      	ldr	r2, [pc, #236]	; (5084 <main+0x6fc>)
    4f96:	4013      	ands	r3, r2
    4f98:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    4f9a:	4c37      	ldr	r4, [pc, #220]	; (5078 <main+0x6f0>)
    4f9c:	2204      	movs	r2, #4
    4f9e:	a906      	add	r1, sp, #24
    4fa0:	0020      	movs	r0, r4
    4fa2:	4d36      	ldr	r5, [pc, #216]	; (507c <main+0x6f4>)
    4fa4:	47a8      	blx	r5
	printf("\r\nNormal Operation Time\r\n");
    4fa6:	484c      	ldr	r0, [pc, #304]	; (50d8 <main+0x750>)
    4fa8:	4b1c      	ldr	r3, [pc, #112]	; (501c <main+0x694>)
    4faa:	4798      	blx	r3
    4fac:	4b2f      	ldr	r3, [pc, #188]	; (506c <main+0x6e4>)
    4fae:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID1 = 0x400 + NODE_ID;
    4fb0:	9b06      	ldr	r3, [sp, #24]
    4fb2:	4a2f      	ldr	r2, [pc, #188]	; (5070 <main+0x6e8>)
    4fb4:	401a      	ands	r2, r3
    4fb6:	4b49      	ldr	r3, [pc, #292]	; (50dc <main+0x754>)
    4fb8:	4313      	orrs	r3, r2
    4fba:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID2 = 0x7F0;
    4fbc:	9b06      	ldr	r3, [sp, #24]
    4fbe:	0adb      	lsrs	r3, r3, #11
    4fc0:	02db      	lsls	r3, r3, #11
    4fc2:	22fe      	movs	r2, #254	; 0xfe
    4fc4:	00d2      	lsls	r2, r2, #3
    4fc6:	4313      	orrs	r3, r2
    4fc8:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    4fca:	2201      	movs	r2, #1
    4fcc:	a906      	add	r1, sp, #24
    4fce:	0020      	movs	r0, r4
    4fd0:	47a8      	blx	r5
	module_inst->hw->IE.reg |= source;
    4fd2:	6822      	ldr	r2, [r4, #0]
    4fd4:	6d53      	ldr	r3, [r2, #84]	; 0x54
    4fd6:	2101      	movs	r1, #1
    4fd8:	430b      	orrs	r3, r1
    4fda:	6553      	str	r3, [r2, #84]	; 0x54
	tx_element->T0.reg = 0;
    4fdc:	2300      	movs	r3, #0
    4fde:	9307      	str	r3, [sp, #28]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    4fe0:	2388      	movs	r3, #136	; 0x88
    4fe2:	041b      	lsls	r3, r3, #16
    4fe4:	9308      	str	r3, [sp, #32]
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x400+NODE_ID);
    4fe6:	9a07      	ldr	r2, [sp, #28]
    4fe8:	4b3d      	ldr	r3, [pc, #244]	; (50e0 <main+0x758>)
    4fea:	4313      	orrs	r3, r2
    4fec:	9307      	str	r3, [sp, #28]
	tx_element.T1.bit.DLC = 8;
    4fee:	9b08      	ldr	r3, [sp, #32]
    4ff0:	4a28      	ldr	r2, [pc, #160]	; (5094 <main+0x70c>)
    4ff2:	401a      	ands	r2, r3
    4ff4:	2380      	movs	r3, #128	; 0x80
    4ff6:	031b      	lsls	r3, r3, #12
    4ff8:	4313      	orrs	r3, r2
    4ffa:	9308      	str	r3, [sp, #32]
	memset(message_out,0,8);
    4ffc:	2208      	movs	r2, #8
    4ffe:	2100      	movs	r1, #0
    5000:	a829      	add	r0, sp, #164	; 0xa4
    5002:	4b13      	ldr	r3, [pc, #76]	; (5050 <main+0x6c8>)
    5004:	4798      	blx	r3
    5006:	230a      	movs	r3, #10
    5008:	469a      	mov	sl, r3
	return module_inst->hw->TXBTO.reg;
    500a:	4b1b      	ldr	r3, [pc, #108]	; (5078 <main+0x6f0>)
    500c:	4699      	mov	r9, r3
		while(g_sent != 0) {
    500e:	4c0c      	ldr	r4, [pc, #48]	; (5040 <main+0x6b8>)
    5010:	26d8      	movs	r6, #216	; 0xd8
			if (can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX))
    5012:	2520      	movs	r5, #32
    5014:	e5d5      	b.n	4bc2 <main+0x23a>
    5016:	46c0      	nop			; (mov r8, r8)
    5018:	00008b3c 	.word	0x00008b3c
    501c:	000055a9 	.word	0x000055a9
    5020:	20000c80 	.word	0x20000c80
    5024:	20000c90 	.word	0x20000c90
    5028:	20000c9c 	.word	0x20000c9c
    502c:	20000ca4 	.word	0x20000ca4
    5030:	20000c88 	.word	0x20000c88
    5034:	20000ca8 	.word	0x20000ca8
    5038:	20000c84 	.word	0x20000c84
    503c:	20000c98 	.word	0x20000c98
    5040:	20000ca0 	.word	0x20000ca0
    5044:	20000c44 	.word	0x20000c44
    5048:	00008934 	.word	0x00008934
    504c:	00008950 	.word	0x00008950
    5050:	000054a3 	.word	0x000054a3
    5054:	00008970 	.word	0x00008970
    5058:	0000546d 	.word	0x0000546d
    505c:	00004225 	.word	0x00004225
    5060:	00003f15 	.word	0x00003f15
    5064:	00003f41 	.word	0x00003f41
    5068:	000043cd 	.word	0x000043cd
    506c:	880007ff 	.word	0x880007ff
    5070:	f800ffff 	.word	0xf800ffff
    5074:	03010000 	.word	0x03010000
    5078:	20000c48 	.word	0x20000c48
    507c:	0000050d 	.word	0x0000050d
    5080:	000089e0 	.word	0x000089e0
    5084:	c7ffffff 	.word	0xc7ffffff
    5088:	000089ec 	.word	0x000089ec
    508c:	000089f8 	.word	0x000089f8
    5090:	000054b5 	.word	0x000054b5
    5094:	fff0ffff 	.word	0xfff0ffff
    5098:	000005e9 	.word	0x000005e9
    509c:	00008a08 	.word	0x00008a08
    50a0:	00008a20 	.word	0x00008a20
    50a4:	00008a38 	.word	0x00008a38
    50a8:	00008a4c 	.word	0x00008a4c
    50ac:	02020000 	.word	0x02020000
    50b0:	20000cac 	.word	0x20000cac
    50b4:	00008a7c 	.word	0x00008a7c
    50b8:	00008a94 	.word	0x00008a94
    50bc:	00008ab0 	.word	0x00008ab0
    50c0:	00008acc 	.word	0x00008acc
    50c4:	00008ae8 	.word	0x00008ae8
    50c8:	000044f5 	.word	0x000044f5
    50cc:	00008ad4 	.word	0x00008ad4
    50d0:	00008aec 	.word	0x00008aec
    50d4:	00008b00 	.word	0x00008b00
    50d8:	00008b08 	.word	0x00008b08
    50dc:	04020000 	.word	0x04020000
    50e0:	10080000 	.word	0x10080000

000050e4 <__udivsi3>:
    50e4:	2200      	movs	r2, #0
    50e6:	0843      	lsrs	r3, r0, #1
    50e8:	428b      	cmp	r3, r1
    50ea:	d374      	bcc.n	51d6 <__udivsi3+0xf2>
    50ec:	0903      	lsrs	r3, r0, #4
    50ee:	428b      	cmp	r3, r1
    50f0:	d35f      	bcc.n	51b2 <__udivsi3+0xce>
    50f2:	0a03      	lsrs	r3, r0, #8
    50f4:	428b      	cmp	r3, r1
    50f6:	d344      	bcc.n	5182 <__udivsi3+0x9e>
    50f8:	0b03      	lsrs	r3, r0, #12
    50fa:	428b      	cmp	r3, r1
    50fc:	d328      	bcc.n	5150 <__udivsi3+0x6c>
    50fe:	0c03      	lsrs	r3, r0, #16
    5100:	428b      	cmp	r3, r1
    5102:	d30d      	bcc.n	5120 <__udivsi3+0x3c>
    5104:	22ff      	movs	r2, #255	; 0xff
    5106:	0209      	lsls	r1, r1, #8
    5108:	ba12      	rev	r2, r2
    510a:	0c03      	lsrs	r3, r0, #16
    510c:	428b      	cmp	r3, r1
    510e:	d302      	bcc.n	5116 <__udivsi3+0x32>
    5110:	1212      	asrs	r2, r2, #8
    5112:	0209      	lsls	r1, r1, #8
    5114:	d065      	beq.n	51e2 <__udivsi3+0xfe>
    5116:	0b03      	lsrs	r3, r0, #12
    5118:	428b      	cmp	r3, r1
    511a:	d319      	bcc.n	5150 <__udivsi3+0x6c>
    511c:	e000      	b.n	5120 <__udivsi3+0x3c>
    511e:	0a09      	lsrs	r1, r1, #8
    5120:	0bc3      	lsrs	r3, r0, #15
    5122:	428b      	cmp	r3, r1
    5124:	d301      	bcc.n	512a <__udivsi3+0x46>
    5126:	03cb      	lsls	r3, r1, #15
    5128:	1ac0      	subs	r0, r0, r3
    512a:	4152      	adcs	r2, r2
    512c:	0b83      	lsrs	r3, r0, #14
    512e:	428b      	cmp	r3, r1
    5130:	d301      	bcc.n	5136 <__udivsi3+0x52>
    5132:	038b      	lsls	r3, r1, #14
    5134:	1ac0      	subs	r0, r0, r3
    5136:	4152      	adcs	r2, r2
    5138:	0b43      	lsrs	r3, r0, #13
    513a:	428b      	cmp	r3, r1
    513c:	d301      	bcc.n	5142 <__udivsi3+0x5e>
    513e:	034b      	lsls	r3, r1, #13
    5140:	1ac0      	subs	r0, r0, r3
    5142:	4152      	adcs	r2, r2
    5144:	0b03      	lsrs	r3, r0, #12
    5146:	428b      	cmp	r3, r1
    5148:	d301      	bcc.n	514e <__udivsi3+0x6a>
    514a:	030b      	lsls	r3, r1, #12
    514c:	1ac0      	subs	r0, r0, r3
    514e:	4152      	adcs	r2, r2
    5150:	0ac3      	lsrs	r3, r0, #11
    5152:	428b      	cmp	r3, r1
    5154:	d301      	bcc.n	515a <__udivsi3+0x76>
    5156:	02cb      	lsls	r3, r1, #11
    5158:	1ac0      	subs	r0, r0, r3
    515a:	4152      	adcs	r2, r2
    515c:	0a83      	lsrs	r3, r0, #10
    515e:	428b      	cmp	r3, r1
    5160:	d301      	bcc.n	5166 <__udivsi3+0x82>
    5162:	028b      	lsls	r3, r1, #10
    5164:	1ac0      	subs	r0, r0, r3
    5166:	4152      	adcs	r2, r2
    5168:	0a43      	lsrs	r3, r0, #9
    516a:	428b      	cmp	r3, r1
    516c:	d301      	bcc.n	5172 <__udivsi3+0x8e>
    516e:	024b      	lsls	r3, r1, #9
    5170:	1ac0      	subs	r0, r0, r3
    5172:	4152      	adcs	r2, r2
    5174:	0a03      	lsrs	r3, r0, #8
    5176:	428b      	cmp	r3, r1
    5178:	d301      	bcc.n	517e <__udivsi3+0x9a>
    517a:	020b      	lsls	r3, r1, #8
    517c:	1ac0      	subs	r0, r0, r3
    517e:	4152      	adcs	r2, r2
    5180:	d2cd      	bcs.n	511e <__udivsi3+0x3a>
    5182:	09c3      	lsrs	r3, r0, #7
    5184:	428b      	cmp	r3, r1
    5186:	d301      	bcc.n	518c <__udivsi3+0xa8>
    5188:	01cb      	lsls	r3, r1, #7
    518a:	1ac0      	subs	r0, r0, r3
    518c:	4152      	adcs	r2, r2
    518e:	0983      	lsrs	r3, r0, #6
    5190:	428b      	cmp	r3, r1
    5192:	d301      	bcc.n	5198 <__udivsi3+0xb4>
    5194:	018b      	lsls	r3, r1, #6
    5196:	1ac0      	subs	r0, r0, r3
    5198:	4152      	adcs	r2, r2
    519a:	0943      	lsrs	r3, r0, #5
    519c:	428b      	cmp	r3, r1
    519e:	d301      	bcc.n	51a4 <__udivsi3+0xc0>
    51a0:	014b      	lsls	r3, r1, #5
    51a2:	1ac0      	subs	r0, r0, r3
    51a4:	4152      	adcs	r2, r2
    51a6:	0903      	lsrs	r3, r0, #4
    51a8:	428b      	cmp	r3, r1
    51aa:	d301      	bcc.n	51b0 <__udivsi3+0xcc>
    51ac:	010b      	lsls	r3, r1, #4
    51ae:	1ac0      	subs	r0, r0, r3
    51b0:	4152      	adcs	r2, r2
    51b2:	08c3      	lsrs	r3, r0, #3
    51b4:	428b      	cmp	r3, r1
    51b6:	d301      	bcc.n	51bc <__udivsi3+0xd8>
    51b8:	00cb      	lsls	r3, r1, #3
    51ba:	1ac0      	subs	r0, r0, r3
    51bc:	4152      	adcs	r2, r2
    51be:	0883      	lsrs	r3, r0, #2
    51c0:	428b      	cmp	r3, r1
    51c2:	d301      	bcc.n	51c8 <__udivsi3+0xe4>
    51c4:	008b      	lsls	r3, r1, #2
    51c6:	1ac0      	subs	r0, r0, r3
    51c8:	4152      	adcs	r2, r2
    51ca:	0843      	lsrs	r3, r0, #1
    51cc:	428b      	cmp	r3, r1
    51ce:	d301      	bcc.n	51d4 <__udivsi3+0xf0>
    51d0:	004b      	lsls	r3, r1, #1
    51d2:	1ac0      	subs	r0, r0, r3
    51d4:	4152      	adcs	r2, r2
    51d6:	1a41      	subs	r1, r0, r1
    51d8:	d200      	bcs.n	51dc <__udivsi3+0xf8>
    51da:	4601      	mov	r1, r0
    51dc:	4152      	adcs	r2, r2
    51de:	4610      	mov	r0, r2
    51e0:	4770      	bx	lr
    51e2:	e7ff      	b.n	51e4 <__udivsi3+0x100>
    51e4:	b501      	push	{r0, lr}
    51e6:	2000      	movs	r0, #0
    51e8:	f000 f8f0 	bl	53cc <__aeabi_idiv0>
    51ec:	bd02      	pop	{r1, pc}
    51ee:	46c0      	nop			; (mov r8, r8)

000051f0 <__aeabi_uidivmod>:
    51f0:	2900      	cmp	r1, #0
    51f2:	d0f7      	beq.n	51e4 <__udivsi3+0x100>
    51f4:	e776      	b.n	50e4 <__udivsi3>
    51f6:	4770      	bx	lr

000051f8 <__divsi3>:
    51f8:	4603      	mov	r3, r0
    51fa:	430b      	orrs	r3, r1
    51fc:	d47f      	bmi.n	52fe <__divsi3+0x106>
    51fe:	2200      	movs	r2, #0
    5200:	0843      	lsrs	r3, r0, #1
    5202:	428b      	cmp	r3, r1
    5204:	d374      	bcc.n	52f0 <__divsi3+0xf8>
    5206:	0903      	lsrs	r3, r0, #4
    5208:	428b      	cmp	r3, r1
    520a:	d35f      	bcc.n	52cc <__divsi3+0xd4>
    520c:	0a03      	lsrs	r3, r0, #8
    520e:	428b      	cmp	r3, r1
    5210:	d344      	bcc.n	529c <__divsi3+0xa4>
    5212:	0b03      	lsrs	r3, r0, #12
    5214:	428b      	cmp	r3, r1
    5216:	d328      	bcc.n	526a <__divsi3+0x72>
    5218:	0c03      	lsrs	r3, r0, #16
    521a:	428b      	cmp	r3, r1
    521c:	d30d      	bcc.n	523a <__divsi3+0x42>
    521e:	22ff      	movs	r2, #255	; 0xff
    5220:	0209      	lsls	r1, r1, #8
    5222:	ba12      	rev	r2, r2
    5224:	0c03      	lsrs	r3, r0, #16
    5226:	428b      	cmp	r3, r1
    5228:	d302      	bcc.n	5230 <__divsi3+0x38>
    522a:	1212      	asrs	r2, r2, #8
    522c:	0209      	lsls	r1, r1, #8
    522e:	d065      	beq.n	52fc <__divsi3+0x104>
    5230:	0b03      	lsrs	r3, r0, #12
    5232:	428b      	cmp	r3, r1
    5234:	d319      	bcc.n	526a <__divsi3+0x72>
    5236:	e000      	b.n	523a <__divsi3+0x42>
    5238:	0a09      	lsrs	r1, r1, #8
    523a:	0bc3      	lsrs	r3, r0, #15
    523c:	428b      	cmp	r3, r1
    523e:	d301      	bcc.n	5244 <__divsi3+0x4c>
    5240:	03cb      	lsls	r3, r1, #15
    5242:	1ac0      	subs	r0, r0, r3
    5244:	4152      	adcs	r2, r2
    5246:	0b83      	lsrs	r3, r0, #14
    5248:	428b      	cmp	r3, r1
    524a:	d301      	bcc.n	5250 <__divsi3+0x58>
    524c:	038b      	lsls	r3, r1, #14
    524e:	1ac0      	subs	r0, r0, r3
    5250:	4152      	adcs	r2, r2
    5252:	0b43      	lsrs	r3, r0, #13
    5254:	428b      	cmp	r3, r1
    5256:	d301      	bcc.n	525c <__divsi3+0x64>
    5258:	034b      	lsls	r3, r1, #13
    525a:	1ac0      	subs	r0, r0, r3
    525c:	4152      	adcs	r2, r2
    525e:	0b03      	lsrs	r3, r0, #12
    5260:	428b      	cmp	r3, r1
    5262:	d301      	bcc.n	5268 <__divsi3+0x70>
    5264:	030b      	lsls	r3, r1, #12
    5266:	1ac0      	subs	r0, r0, r3
    5268:	4152      	adcs	r2, r2
    526a:	0ac3      	lsrs	r3, r0, #11
    526c:	428b      	cmp	r3, r1
    526e:	d301      	bcc.n	5274 <__divsi3+0x7c>
    5270:	02cb      	lsls	r3, r1, #11
    5272:	1ac0      	subs	r0, r0, r3
    5274:	4152      	adcs	r2, r2
    5276:	0a83      	lsrs	r3, r0, #10
    5278:	428b      	cmp	r3, r1
    527a:	d301      	bcc.n	5280 <__divsi3+0x88>
    527c:	028b      	lsls	r3, r1, #10
    527e:	1ac0      	subs	r0, r0, r3
    5280:	4152      	adcs	r2, r2
    5282:	0a43      	lsrs	r3, r0, #9
    5284:	428b      	cmp	r3, r1
    5286:	d301      	bcc.n	528c <__divsi3+0x94>
    5288:	024b      	lsls	r3, r1, #9
    528a:	1ac0      	subs	r0, r0, r3
    528c:	4152      	adcs	r2, r2
    528e:	0a03      	lsrs	r3, r0, #8
    5290:	428b      	cmp	r3, r1
    5292:	d301      	bcc.n	5298 <__divsi3+0xa0>
    5294:	020b      	lsls	r3, r1, #8
    5296:	1ac0      	subs	r0, r0, r3
    5298:	4152      	adcs	r2, r2
    529a:	d2cd      	bcs.n	5238 <__divsi3+0x40>
    529c:	09c3      	lsrs	r3, r0, #7
    529e:	428b      	cmp	r3, r1
    52a0:	d301      	bcc.n	52a6 <__divsi3+0xae>
    52a2:	01cb      	lsls	r3, r1, #7
    52a4:	1ac0      	subs	r0, r0, r3
    52a6:	4152      	adcs	r2, r2
    52a8:	0983      	lsrs	r3, r0, #6
    52aa:	428b      	cmp	r3, r1
    52ac:	d301      	bcc.n	52b2 <__divsi3+0xba>
    52ae:	018b      	lsls	r3, r1, #6
    52b0:	1ac0      	subs	r0, r0, r3
    52b2:	4152      	adcs	r2, r2
    52b4:	0943      	lsrs	r3, r0, #5
    52b6:	428b      	cmp	r3, r1
    52b8:	d301      	bcc.n	52be <__divsi3+0xc6>
    52ba:	014b      	lsls	r3, r1, #5
    52bc:	1ac0      	subs	r0, r0, r3
    52be:	4152      	adcs	r2, r2
    52c0:	0903      	lsrs	r3, r0, #4
    52c2:	428b      	cmp	r3, r1
    52c4:	d301      	bcc.n	52ca <__divsi3+0xd2>
    52c6:	010b      	lsls	r3, r1, #4
    52c8:	1ac0      	subs	r0, r0, r3
    52ca:	4152      	adcs	r2, r2
    52cc:	08c3      	lsrs	r3, r0, #3
    52ce:	428b      	cmp	r3, r1
    52d0:	d301      	bcc.n	52d6 <__divsi3+0xde>
    52d2:	00cb      	lsls	r3, r1, #3
    52d4:	1ac0      	subs	r0, r0, r3
    52d6:	4152      	adcs	r2, r2
    52d8:	0883      	lsrs	r3, r0, #2
    52da:	428b      	cmp	r3, r1
    52dc:	d301      	bcc.n	52e2 <__divsi3+0xea>
    52de:	008b      	lsls	r3, r1, #2
    52e0:	1ac0      	subs	r0, r0, r3
    52e2:	4152      	adcs	r2, r2
    52e4:	0843      	lsrs	r3, r0, #1
    52e6:	428b      	cmp	r3, r1
    52e8:	d301      	bcc.n	52ee <__divsi3+0xf6>
    52ea:	004b      	lsls	r3, r1, #1
    52ec:	1ac0      	subs	r0, r0, r3
    52ee:	4152      	adcs	r2, r2
    52f0:	1a41      	subs	r1, r0, r1
    52f2:	d200      	bcs.n	52f6 <__divsi3+0xfe>
    52f4:	4601      	mov	r1, r0
    52f6:	4152      	adcs	r2, r2
    52f8:	4610      	mov	r0, r2
    52fa:	4770      	bx	lr
    52fc:	e05d      	b.n	53ba <__divsi3+0x1c2>
    52fe:	0fca      	lsrs	r2, r1, #31
    5300:	d000      	beq.n	5304 <__divsi3+0x10c>
    5302:	4249      	negs	r1, r1
    5304:	1003      	asrs	r3, r0, #32
    5306:	d300      	bcc.n	530a <__divsi3+0x112>
    5308:	4240      	negs	r0, r0
    530a:	4053      	eors	r3, r2
    530c:	2200      	movs	r2, #0
    530e:	469c      	mov	ip, r3
    5310:	0903      	lsrs	r3, r0, #4
    5312:	428b      	cmp	r3, r1
    5314:	d32d      	bcc.n	5372 <__divsi3+0x17a>
    5316:	0a03      	lsrs	r3, r0, #8
    5318:	428b      	cmp	r3, r1
    531a:	d312      	bcc.n	5342 <__divsi3+0x14a>
    531c:	22fc      	movs	r2, #252	; 0xfc
    531e:	0189      	lsls	r1, r1, #6
    5320:	ba12      	rev	r2, r2
    5322:	0a03      	lsrs	r3, r0, #8
    5324:	428b      	cmp	r3, r1
    5326:	d30c      	bcc.n	5342 <__divsi3+0x14a>
    5328:	0189      	lsls	r1, r1, #6
    532a:	1192      	asrs	r2, r2, #6
    532c:	428b      	cmp	r3, r1
    532e:	d308      	bcc.n	5342 <__divsi3+0x14a>
    5330:	0189      	lsls	r1, r1, #6
    5332:	1192      	asrs	r2, r2, #6
    5334:	428b      	cmp	r3, r1
    5336:	d304      	bcc.n	5342 <__divsi3+0x14a>
    5338:	0189      	lsls	r1, r1, #6
    533a:	d03a      	beq.n	53b2 <__divsi3+0x1ba>
    533c:	1192      	asrs	r2, r2, #6
    533e:	e000      	b.n	5342 <__divsi3+0x14a>
    5340:	0989      	lsrs	r1, r1, #6
    5342:	09c3      	lsrs	r3, r0, #7
    5344:	428b      	cmp	r3, r1
    5346:	d301      	bcc.n	534c <__divsi3+0x154>
    5348:	01cb      	lsls	r3, r1, #7
    534a:	1ac0      	subs	r0, r0, r3
    534c:	4152      	adcs	r2, r2
    534e:	0983      	lsrs	r3, r0, #6
    5350:	428b      	cmp	r3, r1
    5352:	d301      	bcc.n	5358 <__divsi3+0x160>
    5354:	018b      	lsls	r3, r1, #6
    5356:	1ac0      	subs	r0, r0, r3
    5358:	4152      	adcs	r2, r2
    535a:	0943      	lsrs	r3, r0, #5
    535c:	428b      	cmp	r3, r1
    535e:	d301      	bcc.n	5364 <__divsi3+0x16c>
    5360:	014b      	lsls	r3, r1, #5
    5362:	1ac0      	subs	r0, r0, r3
    5364:	4152      	adcs	r2, r2
    5366:	0903      	lsrs	r3, r0, #4
    5368:	428b      	cmp	r3, r1
    536a:	d301      	bcc.n	5370 <__divsi3+0x178>
    536c:	010b      	lsls	r3, r1, #4
    536e:	1ac0      	subs	r0, r0, r3
    5370:	4152      	adcs	r2, r2
    5372:	08c3      	lsrs	r3, r0, #3
    5374:	428b      	cmp	r3, r1
    5376:	d301      	bcc.n	537c <__divsi3+0x184>
    5378:	00cb      	lsls	r3, r1, #3
    537a:	1ac0      	subs	r0, r0, r3
    537c:	4152      	adcs	r2, r2
    537e:	0883      	lsrs	r3, r0, #2
    5380:	428b      	cmp	r3, r1
    5382:	d301      	bcc.n	5388 <__divsi3+0x190>
    5384:	008b      	lsls	r3, r1, #2
    5386:	1ac0      	subs	r0, r0, r3
    5388:	4152      	adcs	r2, r2
    538a:	d2d9      	bcs.n	5340 <__divsi3+0x148>
    538c:	0843      	lsrs	r3, r0, #1
    538e:	428b      	cmp	r3, r1
    5390:	d301      	bcc.n	5396 <__divsi3+0x19e>
    5392:	004b      	lsls	r3, r1, #1
    5394:	1ac0      	subs	r0, r0, r3
    5396:	4152      	adcs	r2, r2
    5398:	1a41      	subs	r1, r0, r1
    539a:	d200      	bcs.n	539e <__divsi3+0x1a6>
    539c:	4601      	mov	r1, r0
    539e:	4663      	mov	r3, ip
    53a0:	4152      	adcs	r2, r2
    53a2:	105b      	asrs	r3, r3, #1
    53a4:	4610      	mov	r0, r2
    53a6:	d301      	bcc.n	53ac <__divsi3+0x1b4>
    53a8:	4240      	negs	r0, r0
    53aa:	2b00      	cmp	r3, #0
    53ac:	d500      	bpl.n	53b0 <__divsi3+0x1b8>
    53ae:	4249      	negs	r1, r1
    53b0:	4770      	bx	lr
    53b2:	4663      	mov	r3, ip
    53b4:	105b      	asrs	r3, r3, #1
    53b6:	d300      	bcc.n	53ba <__divsi3+0x1c2>
    53b8:	4240      	negs	r0, r0
    53ba:	b501      	push	{r0, lr}
    53bc:	2000      	movs	r0, #0
    53be:	f000 f805 	bl	53cc <__aeabi_idiv0>
    53c2:	bd02      	pop	{r1, pc}

000053c4 <__aeabi_idivmod>:
    53c4:	2900      	cmp	r1, #0
    53c6:	d0f8      	beq.n	53ba <__divsi3+0x1c2>
    53c8:	e716      	b.n	51f8 <__divsi3>
    53ca:	4770      	bx	lr

000053cc <__aeabi_idiv0>:
    53cc:	4770      	bx	lr
    53ce:	46c0      	nop			; (mov r8, r8)

000053d0 <__aeabi_lmul>:
    53d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53d2:	46ce      	mov	lr, r9
    53d4:	4647      	mov	r7, r8
    53d6:	0415      	lsls	r5, r2, #16
    53d8:	0c2d      	lsrs	r5, r5, #16
    53da:	002e      	movs	r6, r5
    53dc:	b580      	push	{r7, lr}
    53de:	0407      	lsls	r7, r0, #16
    53e0:	0c14      	lsrs	r4, r2, #16
    53e2:	0c3f      	lsrs	r7, r7, #16
    53e4:	4699      	mov	r9, r3
    53e6:	0c03      	lsrs	r3, r0, #16
    53e8:	437e      	muls	r6, r7
    53ea:	435d      	muls	r5, r3
    53ec:	4367      	muls	r7, r4
    53ee:	4363      	muls	r3, r4
    53f0:	197f      	adds	r7, r7, r5
    53f2:	0c34      	lsrs	r4, r6, #16
    53f4:	19e4      	adds	r4, r4, r7
    53f6:	469c      	mov	ip, r3
    53f8:	42a5      	cmp	r5, r4
    53fa:	d903      	bls.n	5404 <__aeabi_lmul+0x34>
    53fc:	2380      	movs	r3, #128	; 0x80
    53fe:	025b      	lsls	r3, r3, #9
    5400:	4698      	mov	r8, r3
    5402:	44c4      	add	ip, r8
    5404:	464b      	mov	r3, r9
    5406:	4351      	muls	r1, r2
    5408:	4343      	muls	r3, r0
    540a:	0436      	lsls	r6, r6, #16
    540c:	0c36      	lsrs	r6, r6, #16
    540e:	0c25      	lsrs	r5, r4, #16
    5410:	0424      	lsls	r4, r4, #16
    5412:	4465      	add	r5, ip
    5414:	19a4      	adds	r4, r4, r6
    5416:	1859      	adds	r1, r3, r1
    5418:	1949      	adds	r1, r1, r5
    541a:	0020      	movs	r0, r4
    541c:	bc0c      	pop	{r2, r3}
    541e:	4690      	mov	r8, r2
    5420:	4699      	mov	r9, r3
    5422:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005424 <__libc_init_array>:
    5424:	b570      	push	{r4, r5, r6, lr}
    5426:	2600      	movs	r6, #0
    5428:	4d0c      	ldr	r5, [pc, #48]	; (545c <__libc_init_array+0x38>)
    542a:	4c0d      	ldr	r4, [pc, #52]	; (5460 <__libc_init_array+0x3c>)
    542c:	1b64      	subs	r4, r4, r5
    542e:	10a4      	asrs	r4, r4, #2
    5430:	42a6      	cmp	r6, r4
    5432:	d109      	bne.n	5448 <__libc_init_array+0x24>
    5434:	2600      	movs	r6, #0
    5436:	f003 fbdd 	bl	8bf4 <_init>
    543a:	4d0a      	ldr	r5, [pc, #40]	; (5464 <__libc_init_array+0x40>)
    543c:	4c0a      	ldr	r4, [pc, #40]	; (5468 <__libc_init_array+0x44>)
    543e:	1b64      	subs	r4, r4, r5
    5440:	10a4      	asrs	r4, r4, #2
    5442:	42a6      	cmp	r6, r4
    5444:	d105      	bne.n	5452 <__libc_init_array+0x2e>
    5446:	bd70      	pop	{r4, r5, r6, pc}
    5448:	00b3      	lsls	r3, r6, #2
    544a:	58eb      	ldr	r3, [r5, r3]
    544c:	4798      	blx	r3
    544e:	3601      	adds	r6, #1
    5450:	e7ee      	b.n	5430 <__libc_init_array+0xc>
    5452:	00b3      	lsls	r3, r6, #2
    5454:	58eb      	ldr	r3, [r5, r3]
    5456:	4798      	blx	r3
    5458:	3601      	adds	r6, #1
    545a:	e7f2      	b.n	5442 <__libc_init_array+0x1e>
    545c:	00008c00 	.word	0x00008c00
    5460:	00008c00 	.word	0x00008c00
    5464:	00008c00 	.word	0x00008c00
    5468:	00008c04 	.word	0x00008c04

0000546c <memcpy>:
    546c:	2300      	movs	r3, #0
    546e:	b510      	push	{r4, lr}
    5470:	429a      	cmp	r2, r3
    5472:	d100      	bne.n	5476 <memcpy+0xa>
    5474:	bd10      	pop	{r4, pc}
    5476:	5ccc      	ldrb	r4, [r1, r3]
    5478:	54c4      	strb	r4, [r0, r3]
    547a:	3301      	adds	r3, #1
    547c:	e7f8      	b.n	5470 <memcpy+0x4>

0000547e <memmove>:
    547e:	b510      	push	{r4, lr}
    5480:	4288      	cmp	r0, r1
    5482:	d902      	bls.n	548a <memmove+0xc>
    5484:	188b      	adds	r3, r1, r2
    5486:	4298      	cmp	r0, r3
    5488:	d308      	bcc.n	549c <memmove+0x1e>
    548a:	2300      	movs	r3, #0
    548c:	429a      	cmp	r2, r3
    548e:	d007      	beq.n	54a0 <memmove+0x22>
    5490:	5ccc      	ldrb	r4, [r1, r3]
    5492:	54c4      	strb	r4, [r0, r3]
    5494:	3301      	adds	r3, #1
    5496:	e7f9      	b.n	548c <memmove+0xe>
    5498:	5c8b      	ldrb	r3, [r1, r2]
    549a:	5483      	strb	r3, [r0, r2]
    549c:	3a01      	subs	r2, #1
    549e:	d2fb      	bcs.n	5498 <memmove+0x1a>
    54a0:	bd10      	pop	{r4, pc}

000054a2 <memset>:
    54a2:	0003      	movs	r3, r0
    54a4:	1882      	adds	r2, r0, r2
    54a6:	4293      	cmp	r3, r2
    54a8:	d100      	bne.n	54ac <memset+0xa>
    54aa:	4770      	bx	lr
    54ac:	7019      	strb	r1, [r3, #0]
    54ae:	3301      	adds	r3, #1
    54b0:	e7f9      	b.n	54a6 <memset+0x4>
	...

000054b4 <iprintf>:
    54b4:	b40f      	push	{r0, r1, r2, r3}
    54b6:	4b0b      	ldr	r3, [pc, #44]	; (54e4 <iprintf+0x30>)
    54b8:	b513      	push	{r0, r1, r4, lr}
    54ba:	681c      	ldr	r4, [r3, #0]
    54bc:	2c00      	cmp	r4, #0
    54be:	d005      	beq.n	54cc <iprintf+0x18>
    54c0:	69a3      	ldr	r3, [r4, #24]
    54c2:	2b00      	cmp	r3, #0
    54c4:	d102      	bne.n	54cc <iprintf+0x18>
    54c6:	0020      	movs	r0, r4
    54c8:	f000 faf2 	bl	5ab0 <__sinit>
    54cc:	ab05      	add	r3, sp, #20
    54ce:	9a04      	ldr	r2, [sp, #16]
    54d0:	68a1      	ldr	r1, [r4, #8]
    54d2:	0020      	movs	r0, r4
    54d4:	9301      	str	r3, [sp, #4]
    54d6:	f000 fcc7 	bl	5e68 <_vfiprintf_r>
    54da:	bc16      	pop	{r1, r2, r4}
    54dc:	bc08      	pop	{r3}
    54de:	b004      	add	sp, #16
    54e0:	4718      	bx	r3
    54e2:	46c0      	nop			; (mov r8, r8)
    54e4:	20000104 	.word	0x20000104

000054e8 <_puts_r>:
    54e8:	b570      	push	{r4, r5, r6, lr}
    54ea:	0005      	movs	r5, r0
    54ec:	000e      	movs	r6, r1
    54ee:	2800      	cmp	r0, #0
    54f0:	d004      	beq.n	54fc <_puts_r+0x14>
    54f2:	6983      	ldr	r3, [r0, #24]
    54f4:	2b00      	cmp	r3, #0
    54f6:	d101      	bne.n	54fc <_puts_r+0x14>
    54f8:	f000 fada 	bl	5ab0 <__sinit>
    54fc:	69ab      	ldr	r3, [r5, #24]
    54fe:	68ac      	ldr	r4, [r5, #8]
    5500:	2b00      	cmp	r3, #0
    5502:	d102      	bne.n	550a <_puts_r+0x22>
    5504:	0028      	movs	r0, r5
    5506:	f000 fad3 	bl	5ab0 <__sinit>
    550a:	4b24      	ldr	r3, [pc, #144]	; (559c <_puts_r+0xb4>)
    550c:	429c      	cmp	r4, r3
    550e:	d10f      	bne.n	5530 <_puts_r+0x48>
    5510:	686c      	ldr	r4, [r5, #4]
    5512:	89a3      	ldrh	r3, [r4, #12]
    5514:	071b      	lsls	r3, r3, #28
    5516:	d502      	bpl.n	551e <_puts_r+0x36>
    5518:	6923      	ldr	r3, [r4, #16]
    551a:	2b00      	cmp	r3, #0
    551c:	d120      	bne.n	5560 <_puts_r+0x78>
    551e:	0021      	movs	r1, r4
    5520:	0028      	movs	r0, r5
    5522:	f000 f957 	bl	57d4 <__swsetup_r>
    5526:	2800      	cmp	r0, #0
    5528:	d01a      	beq.n	5560 <_puts_r+0x78>
    552a:	2001      	movs	r0, #1
    552c:	4240      	negs	r0, r0
    552e:	bd70      	pop	{r4, r5, r6, pc}
    5530:	4b1b      	ldr	r3, [pc, #108]	; (55a0 <_puts_r+0xb8>)
    5532:	429c      	cmp	r4, r3
    5534:	d101      	bne.n	553a <_puts_r+0x52>
    5536:	68ac      	ldr	r4, [r5, #8]
    5538:	e7eb      	b.n	5512 <_puts_r+0x2a>
    553a:	4b1a      	ldr	r3, [pc, #104]	; (55a4 <_puts_r+0xbc>)
    553c:	429c      	cmp	r4, r3
    553e:	d1e8      	bne.n	5512 <_puts_r+0x2a>
    5540:	68ec      	ldr	r4, [r5, #12]
    5542:	e7e6      	b.n	5512 <_puts_r+0x2a>
    5544:	3b01      	subs	r3, #1
    5546:	3601      	adds	r6, #1
    5548:	60a3      	str	r3, [r4, #8]
    554a:	2b00      	cmp	r3, #0
    554c:	da04      	bge.n	5558 <_puts_r+0x70>
    554e:	69a2      	ldr	r2, [r4, #24]
    5550:	4293      	cmp	r3, r2
    5552:	db16      	blt.n	5582 <_puts_r+0x9a>
    5554:	290a      	cmp	r1, #10
    5556:	d014      	beq.n	5582 <_puts_r+0x9a>
    5558:	6823      	ldr	r3, [r4, #0]
    555a:	1c5a      	adds	r2, r3, #1
    555c:	6022      	str	r2, [r4, #0]
    555e:	7019      	strb	r1, [r3, #0]
    5560:	7831      	ldrb	r1, [r6, #0]
    5562:	68a3      	ldr	r3, [r4, #8]
    5564:	2900      	cmp	r1, #0
    5566:	d1ed      	bne.n	5544 <_puts_r+0x5c>
    5568:	3b01      	subs	r3, #1
    556a:	60a3      	str	r3, [r4, #8]
    556c:	2b00      	cmp	r3, #0
    556e:	da0f      	bge.n	5590 <_puts_r+0xa8>
    5570:	0022      	movs	r2, r4
    5572:	310a      	adds	r1, #10
    5574:	0028      	movs	r0, r5
    5576:	f000 f8d7 	bl	5728 <__swbuf_r>
    557a:	1c43      	adds	r3, r0, #1
    557c:	d0d5      	beq.n	552a <_puts_r+0x42>
    557e:	200a      	movs	r0, #10
    5580:	e7d5      	b.n	552e <_puts_r+0x46>
    5582:	0022      	movs	r2, r4
    5584:	0028      	movs	r0, r5
    5586:	f000 f8cf 	bl	5728 <__swbuf_r>
    558a:	1c43      	adds	r3, r0, #1
    558c:	d1e8      	bne.n	5560 <_puts_r+0x78>
    558e:	e7cc      	b.n	552a <_puts_r+0x42>
    5590:	200a      	movs	r0, #10
    5592:	6823      	ldr	r3, [r4, #0]
    5594:	1c5a      	adds	r2, r3, #1
    5596:	6022      	str	r2, [r4, #0]
    5598:	7018      	strb	r0, [r3, #0]
    559a:	e7c8      	b.n	552e <_puts_r+0x46>
    559c:	00008b80 	.word	0x00008b80
    55a0:	00008ba0 	.word	0x00008ba0
    55a4:	00008b60 	.word	0x00008b60

000055a8 <puts>:
    55a8:	b510      	push	{r4, lr}
    55aa:	4b03      	ldr	r3, [pc, #12]	; (55b8 <puts+0x10>)
    55ac:	0001      	movs	r1, r0
    55ae:	6818      	ldr	r0, [r3, #0]
    55b0:	f7ff ff9a 	bl	54e8 <_puts_r>
    55b4:	bd10      	pop	{r4, pc}
    55b6:	46c0      	nop			; (mov r8, r8)
    55b8:	20000104 	.word	0x20000104

000055bc <setbuf>:
    55bc:	424a      	negs	r2, r1
    55be:	414a      	adcs	r2, r1
    55c0:	2380      	movs	r3, #128	; 0x80
    55c2:	b510      	push	{r4, lr}
    55c4:	0052      	lsls	r2, r2, #1
    55c6:	00db      	lsls	r3, r3, #3
    55c8:	f000 f802 	bl	55d0 <setvbuf>
    55cc:	bd10      	pop	{r4, pc}
	...

000055d0 <setvbuf>:
    55d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55d2:	001d      	movs	r5, r3
    55d4:	4b4f      	ldr	r3, [pc, #316]	; (5714 <setvbuf+0x144>)
    55d6:	b085      	sub	sp, #20
    55d8:	681e      	ldr	r6, [r3, #0]
    55da:	0004      	movs	r4, r0
    55dc:	000f      	movs	r7, r1
    55de:	9200      	str	r2, [sp, #0]
    55e0:	2e00      	cmp	r6, #0
    55e2:	d005      	beq.n	55f0 <setvbuf+0x20>
    55e4:	69b3      	ldr	r3, [r6, #24]
    55e6:	2b00      	cmp	r3, #0
    55e8:	d102      	bne.n	55f0 <setvbuf+0x20>
    55ea:	0030      	movs	r0, r6
    55ec:	f000 fa60 	bl	5ab0 <__sinit>
    55f0:	4b49      	ldr	r3, [pc, #292]	; (5718 <setvbuf+0x148>)
    55f2:	429c      	cmp	r4, r3
    55f4:	d150      	bne.n	5698 <setvbuf+0xc8>
    55f6:	6874      	ldr	r4, [r6, #4]
    55f8:	9b00      	ldr	r3, [sp, #0]
    55fa:	2b02      	cmp	r3, #2
    55fc:	d005      	beq.n	560a <setvbuf+0x3a>
    55fe:	2b01      	cmp	r3, #1
    5600:	d900      	bls.n	5604 <setvbuf+0x34>
    5602:	e084      	b.n	570e <setvbuf+0x13e>
    5604:	2d00      	cmp	r5, #0
    5606:	da00      	bge.n	560a <setvbuf+0x3a>
    5608:	e081      	b.n	570e <setvbuf+0x13e>
    560a:	0021      	movs	r1, r4
    560c:	0030      	movs	r0, r6
    560e:	f000 f9e1 	bl	59d4 <_fflush_r>
    5612:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5614:	2900      	cmp	r1, #0
    5616:	d008      	beq.n	562a <setvbuf+0x5a>
    5618:	0023      	movs	r3, r4
    561a:	3344      	adds	r3, #68	; 0x44
    561c:	4299      	cmp	r1, r3
    561e:	d002      	beq.n	5626 <setvbuf+0x56>
    5620:	0030      	movs	r0, r6
    5622:	f000 fb51 	bl	5cc8 <_free_r>
    5626:	2300      	movs	r3, #0
    5628:	6363      	str	r3, [r4, #52]	; 0x34
    562a:	2300      	movs	r3, #0
    562c:	61a3      	str	r3, [r4, #24]
    562e:	6063      	str	r3, [r4, #4]
    5630:	89a3      	ldrh	r3, [r4, #12]
    5632:	061b      	lsls	r3, r3, #24
    5634:	d503      	bpl.n	563e <setvbuf+0x6e>
    5636:	6921      	ldr	r1, [r4, #16]
    5638:	0030      	movs	r0, r6
    563a:	f000 fb45 	bl	5cc8 <_free_r>
    563e:	89a3      	ldrh	r3, [r4, #12]
    5640:	4a36      	ldr	r2, [pc, #216]	; (571c <setvbuf+0x14c>)
    5642:	4013      	ands	r3, r2
    5644:	81a3      	strh	r3, [r4, #12]
    5646:	9b00      	ldr	r3, [sp, #0]
    5648:	2b02      	cmp	r3, #2
    564a:	d05a      	beq.n	5702 <setvbuf+0x132>
    564c:	ab03      	add	r3, sp, #12
    564e:	aa02      	add	r2, sp, #8
    5650:	0021      	movs	r1, r4
    5652:	0030      	movs	r0, r6
    5654:	f000 fac2 	bl	5bdc <__swhatbuf_r>
    5658:	89a3      	ldrh	r3, [r4, #12]
    565a:	4318      	orrs	r0, r3
    565c:	81a0      	strh	r0, [r4, #12]
    565e:	2d00      	cmp	r5, #0
    5660:	d124      	bne.n	56ac <setvbuf+0xdc>
    5662:	9d02      	ldr	r5, [sp, #8]
    5664:	0028      	movs	r0, r5
    5666:	f000 fb25 	bl	5cb4 <malloc>
    566a:	9501      	str	r5, [sp, #4]
    566c:	1e07      	subs	r7, r0, #0
    566e:	d142      	bne.n	56f6 <setvbuf+0x126>
    5670:	9b02      	ldr	r3, [sp, #8]
    5672:	9301      	str	r3, [sp, #4]
    5674:	42ab      	cmp	r3, r5
    5676:	d139      	bne.n	56ec <setvbuf+0x11c>
    5678:	2001      	movs	r0, #1
    567a:	4240      	negs	r0, r0
    567c:	2302      	movs	r3, #2
    567e:	89a2      	ldrh	r2, [r4, #12]
    5680:	4313      	orrs	r3, r2
    5682:	81a3      	strh	r3, [r4, #12]
    5684:	2300      	movs	r3, #0
    5686:	60a3      	str	r3, [r4, #8]
    5688:	0023      	movs	r3, r4
    568a:	3347      	adds	r3, #71	; 0x47
    568c:	6023      	str	r3, [r4, #0]
    568e:	6123      	str	r3, [r4, #16]
    5690:	2301      	movs	r3, #1
    5692:	6163      	str	r3, [r4, #20]
    5694:	b005      	add	sp, #20
    5696:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5698:	4b21      	ldr	r3, [pc, #132]	; (5720 <setvbuf+0x150>)
    569a:	429c      	cmp	r4, r3
    569c:	d101      	bne.n	56a2 <setvbuf+0xd2>
    569e:	68b4      	ldr	r4, [r6, #8]
    56a0:	e7aa      	b.n	55f8 <setvbuf+0x28>
    56a2:	4b20      	ldr	r3, [pc, #128]	; (5724 <setvbuf+0x154>)
    56a4:	429c      	cmp	r4, r3
    56a6:	d1a7      	bne.n	55f8 <setvbuf+0x28>
    56a8:	68f4      	ldr	r4, [r6, #12]
    56aa:	e7a5      	b.n	55f8 <setvbuf+0x28>
    56ac:	2f00      	cmp	r7, #0
    56ae:	d0d9      	beq.n	5664 <setvbuf+0x94>
    56b0:	69b3      	ldr	r3, [r6, #24]
    56b2:	2b00      	cmp	r3, #0
    56b4:	d102      	bne.n	56bc <setvbuf+0xec>
    56b6:	0030      	movs	r0, r6
    56b8:	f000 f9fa 	bl	5ab0 <__sinit>
    56bc:	9b00      	ldr	r3, [sp, #0]
    56be:	2b01      	cmp	r3, #1
    56c0:	d103      	bne.n	56ca <setvbuf+0xfa>
    56c2:	89a3      	ldrh	r3, [r4, #12]
    56c4:	9a00      	ldr	r2, [sp, #0]
    56c6:	431a      	orrs	r2, r3
    56c8:	81a2      	strh	r2, [r4, #12]
    56ca:	2008      	movs	r0, #8
    56cc:	89a3      	ldrh	r3, [r4, #12]
    56ce:	6027      	str	r7, [r4, #0]
    56d0:	6127      	str	r7, [r4, #16]
    56d2:	6165      	str	r5, [r4, #20]
    56d4:	4018      	ands	r0, r3
    56d6:	d018      	beq.n	570a <setvbuf+0x13a>
    56d8:	2001      	movs	r0, #1
    56da:	4018      	ands	r0, r3
    56dc:	2300      	movs	r3, #0
    56de:	4298      	cmp	r0, r3
    56e0:	d011      	beq.n	5706 <setvbuf+0x136>
    56e2:	426d      	negs	r5, r5
    56e4:	60a3      	str	r3, [r4, #8]
    56e6:	61a5      	str	r5, [r4, #24]
    56e8:	0018      	movs	r0, r3
    56ea:	e7d3      	b.n	5694 <setvbuf+0xc4>
    56ec:	9801      	ldr	r0, [sp, #4]
    56ee:	f000 fae1 	bl	5cb4 <malloc>
    56f2:	1e07      	subs	r7, r0, #0
    56f4:	d0c0      	beq.n	5678 <setvbuf+0xa8>
    56f6:	2380      	movs	r3, #128	; 0x80
    56f8:	89a2      	ldrh	r2, [r4, #12]
    56fa:	9d01      	ldr	r5, [sp, #4]
    56fc:	4313      	orrs	r3, r2
    56fe:	81a3      	strh	r3, [r4, #12]
    5700:	e7d6      	b.n	56b0 <setvbuf+0xe0>
    5702:	2000      	movs	r0, #0
    5704:	e7ba      	b.n	567c <setvbuf+0xac>
    5706:	60a5      	str	r5, [r4, #8]
    5708:	e7c4      	b.n	5694 <setvbuf+0xc4>
    570a:	60a0      	str	r0, [r4, #8]
    570c:	e7c2      	b.n	5694 <setvbuf+0xc4>
    570e:	2001      	movs	r0, #1
    5710:	4240      	negs	r0, r0
    5712:	e7bf      	b.n	5694 <setvbuf+0xc4>
    5714:	20000104 	.word	0x20000104
    5718:	00008b80 	.word	0x00008b80
    571c:	fffff35c 	.word	0xfffff35c
    5720:	00008ba0 	.word	0x00008ba0
    5724:	00008b60 	.word	0x00008b60

00005728 <__swbuf_r>:
    5728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    572a:	0005      	movs	r5, r0
    572c:	000e      	movs	r6, r1
    572e:	0014      	movs	r4, r2
    5730:	2800      	cmp	r0, #0
    5732:	d004      	beq.n	573e <__swbuf_r+0x16>
    5734:	6983      	ldr	r3, [r0, #24]
    5736:	2b00      	cmp	r3, #0
    5738:	d101      	bne.n	573e <__swbuf_r+0x16>
    573a:	f000 f9b9 	bl	5ab0 <__sinit>
    573e:	4b22      	ldr	r3, [pc, #136]	; (57c8 <__swbuf_r+0xa0>)
    5740:	429c      	cmp	r4, r3
    5742:	d12d      	bne.n	57a0 <__swbuf_r+0x78>
    5744:	686c      	ldr	r4, [r5, #4]
    5746:	69a3      	ldr	r3, [r4, #24]
    5748:	60a3      	str	r3, [r4, #8]
    574a:	89a3      	ldrh	r3, [r4, #12]
    574c:	071b      	lsls	r3, r3, #28
    574e:	d531      	bpl.n	57b4 <__swbuf_r+0x8c>
    5750:	6923      	ldr	r3, [r4, #16]
    5752:	2b00      	cmp	r3, #0
    5754:	d02e      	beq.n	57b4 <__swbuf_r+0x8c>
    5756:	6823      	ldr	r3, [r4, #0]
    5758:	6922      	ldr	r2, [r4, #16]
    575a:	b2f7      	uxtb	r7, r6
    575c:	1a98      	subs	r0, r3, r2
    575e:	6963      	ldr	r3, [r4, #20]
    5760:	b2f6      	uxtb	r6, r6
    5762:	4298      	cmp	r0, r3
    5764:	db05      	blt.n	5772 <__swbuf_r+0x4a>
    5766:	0021      	movs	r1, r4
    5768:	0028      	movs	r0, r5
    576a:	f000 f933 	bl	59d4 <_fflush_r>
    576e:	2800      	cmp	r0, #0
    5770:	d126      	bne.n	57c0 <__swbuf_r+0x98>
    5772:	68a3      	ldr	r3, [r4, #8]
    5774:	3001      	adds	r0, #1
    5776:	3b01      	subs	r3, #1
    5778:	60a3      	str	r3, [r4, #8]
    577a:	6823      	ldr	r3, [r4, #0]
    577c:	1c5a      	adds	r2, r3, #1
    577e:	6022      	str	r2, [r4, #0]
    5780:	701f      	strb	r7, [r3, #0]
    5782:	6963      	ldr	r3, [r4, #20]
    5784:	4298      	cmp	r0, r3
    5786:	d004      	beq.n	5792 <__swbuf_r+0x6a>
    5788:	89a3      	ldrh	r3, [r4, #12]
    578a:	07db      	lsls	r3, r3, #31
    578c:	d51a      	bpl.n	57c4 <__swbuf_r+0x9c>
    578e:	2e0a      	cmp	r6, #10
    5790:	d118      	bne.n	57c4 <__swbuf_r+0x9c>
    5792:	0021      	movs	r1, r4
    5794:	0028      	movs	r0, r5
    5796:	f000 f91d 	bl	59d4 <_fflush_r>
    579a:	2800      	cmp	r0, #0
    579c:	d012      	beq.n	57c4 <__swbuf_r+0x9c>
    579e:	e00f      	b.n	57c0 <__swbuf_r+0x98>
    57a0:	4b0a      	ldr	r3, [pc, #40]	; (57cc <__swbuf_r+0xa4>)
    57a2:	429c      	cmp	r4, r3
    57a4:	d101      	bne.n	57aa <__swbuf_r+0x82>
    57a6:	68ac      	ldr	r4, [r5, #8]
    57a8:	e7cd      	b.n	5746 <__swbuf_r+0x1e>
    57aa:	4b09      	ldr	r3, [pc, #36]	; (57d0 <__swbuf_r+0xa8>)
    57ac:	429c      	cmp	r4, r3
    57ae:	d1ca      	bne.n	5746 <__swbuf_r+0x1e>
    57b0:	68ec      	ldr	r4, [r5, #12]
    57b2:	e7c8      	b.n	5746 <__swbuf_r+0x1e>
    57b4:	0021      	movs	r1, r4
    57b6:	0028      	movs	r0, r5
    57b8:	f000 f80c 	bl	57d4 <__swsetup_r>
    57bc:	2800      	cmp	r0, #0
    57be:	d0ca      	beq.n	5756 <__swbuf_r+0x2e>
    57c0:	2601      	movs	r6, #1
    57c2:	4276      	negs	r6, r6
    57c4:	0030      	movs	r0, r6
    57c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57c8:	00008b80 	.word	0x00008b80
    57cc:	00008ba0 	.word	0x00008ba0
    57d0:	00008b60 	.word	0x00008b60

000057d4 <__swsetup_r>:
    57d4:	4b36      	ldr	r3, [pc, #216]	; (58b0 <__swsetup_r+0xdc>)
    57d6:	b570      	push	{r4, r5, r6, lr}
    57d8:	681d      	ldr	r5, [r3, #0]
    57da:	0006      	movs	r6, r0
    57dc:	000c      	movs	r4, r1
    57de:	2d00      	cmp	r5, #0
    57e0:	d005      	beq.n	57ee <__swsetup_r+0x1a>
    57e2:	69ab      	ldr	r3, [r5, #24]
    57e4:	2b00      	cmp	r3, #0
    57e6:	d102      	bne.n	57ee <__swsetup_r+0x1a>
    57e8:	0028      	movs	r0, r5
    57ea:	f000 f961 	bl	5ab0 <__sinit>
    57ee:	4b31      	ldr	r3, [pc, #196]	; (58b4 <__swsetup_r+0xe0>)
    57f0:	429c      	cmp	r4, r3
    57f2:	d10f      	bne.n	5814 <__swsetup_r+0x40>
    57f4:	686c      	ldr	r4, [r5, #4]
    57f6:	230c      	movs	r3, #12
    57f8:	5ee2      	ldrsh	r2, [r4, r3]
    57fa:	b293      	uxth	r3, r2
    57fc:	0719      	lsls	r1, r3, #28
    57fe:	d42d      	bmi.n	585c <__swsetup_r+0x88>
    5800:	06d9      	lsls	r1, r3, #27
    5802:	d411      	bmi.n	5828 <__swsetup_r+0x54>
    5804:	2309      	movs	r3, #9
    5806:	2001      	movs	r0, #1
    5808:	6033      	str	r3, [r6, #0]
    580a:	3337      	adds	r3, #55	; 0x37
    580c:	4313      	orrs	r3, r2
    580e:	81a3      	strh	r3, [r4, #12]
    5810:	4240      	negs	r0, r0
    5812:	bd70      	pop	{r4, r5, r6, pc}
    5814:	4b28      	ldr	r3, [pc, #160]	; (58b8 <__swsetup_r+0xe4>)
    5816:	429c      	cmp	r4, r3
    5818:	d101      	bne.n	581e <__swsetup_r+0x4a>
    581a:	68ac      	ldr	r4, [r5, #8]
    581c:	e7eb      	b.n	57f6 <__swsetup_r+0x22>
    581e:	4b27      	ldr	r3, [pc, #156]	; (58bc <__swsetup_r+0xe8>)
    5820:	429c      	cmp	r4, r3
    5822:	d1e8      	bne.n	57f6 <__swsetup_r+0x22>
    5824:	68ec      	ldr	r4, [r5, #12]
    5826:	e7e6      	b.n	57f6 <__swsetup_r+0x22>
    5828:	075b      	lsls	r3, r3, #29
    582a:	d513      	bpl.n	5854 <__swsetup_r+0x80>
    582c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    582e:	2900      	cmp	r1, #0
    5830:	d008      	beq.n	5844 <__swsetup_r+0x70>
    5832:	0023      	movs	r3, r4
    5834:	3344      	adds	r3, #68	; 0x44
    5836:	4299      	cmp	r1, r3
    5838:	d002      	beq.n	5840 <__swsetup_r+0x6c>
    583a:	0030      	movs	r0, r6
    583c:	f000 fa44 	bl	5cc8 <_free_r>
    5840:	2300      	movs	r3, #0
    5842:	6363      	str	r3, [r4, #52]	; 0x34
    5844:	2224      	movs	r2, #36	; 0x24
    5846:	89a3      	ldrh	r3, [r4, #12]
    5848:	4393      	bics	r3, r2
    584a:	81a3      	strh	r3, [r4, #12]
    584c:	2300      	movs	r3, #0
    584e:	6063      	str	r3, [r4, #4]
    5850:	6923      	ldr	r3, [r4, #16]
    5852:	6023      	str	r3, [r4, #0]
    5854:	2308      	movs	r3, #8
    5856:	89a2      	ldrh	r2, [r4, #12]
    5858:	4313      	orrs	r3, r2
    585a:	81a3      	strh	r3, [r4, #12]
    585c:	6923      	ldr	r3, [r4, #16]
    585e:	2b00      	cmp	r3, #0
    5860:	d10b      	bne.n	587a <__swsetup_r+0xa6>
    5862:	21a0      	movs	r1, #160	; 0xa0
    5864:	2280      	movs	r2, #128	; 0x80
    5866:	89a3      	ldrh	r3, [r4, #12]
    5868:	0089      	lsls	r1, r1, #2
    586a:	0092      	lsls	r2, r2, #2
    586c:	400b      	ands	r3, r1
    586e:	4293      	cmp	r3, r2
    5870:	d003      	beq.n	587a <__swsetup_r+0xa6>
    5872:	0021      	movs	r1, r4
    5874:	0030      	movs	r0, r6
    5876:	f000 f9d9 	bl	5c2c <__smakebuf_r>
    587a:	2301      	movs	r3, #1
    587c:	89a2      	ldrh	r2, [r4, #12]
    587e:	4013      	ands	r3, r2
    5880:	d011      	beq.n	58a6 <__swsetup_r+0xd2>
    5882:	2300      	movs	r3, #0
    5884:	60a3      	str	r3, [r4, #8]
    5886:	6963      	ldr	r3, [r4, #20]
    5888:	425b      	negs	r3, r3
    588a:	61a3      	str	r3, [r4, #24]
    588c:	2000      	movs	r0, #0
    588e:	6923      	ldr	r3, [r4, #16]
    5890:	4283      	cmp	r3, r0
    5892:	d1be      	bne.n	5812 <__swsetup_r+0x3e>
    5894:	230c      	movs	r3, #12
    5896:	5ee2      	ldrsh	r2, [r4, r3]
    5898:	0613      	lsls	r3, r2, #24
    589a:	d5ba      	bpl.n	5812 <__swsetup_r+0x3e>
    589c:	2340      	movs	r3, #64	; 0x40
    589e:	4313      	orrs	r3, r2
    58a0:	81a3      	strh	r3, [r4, #12]
    58a2:	3801      	subs	r0, #1
    58a4:	e7b5      	b.n	5812 <__swsetup_r+0x3e>
    58a6:	0792      	lsls	r2, r2, #30
    58a8:	d400      	bmi.n	58ac <__swsetup_r+0xd8>
    58aa:	6963      	ldr	r3, [r4, #20]
    58ac:	60a3      	str	r3, [r4, #8]
    58ae:	e7ed      	b.n	588c <__swsetup_r+0xb8>
    58b0:	20000104 	.word	0x20000104
    58b4:	00008b80 	.word	0x00008b80
    58b8:	00008ba0 	.word	0x00008ba0
    58bc:	00008b60 	.word	0x00008b60

000058c0 <__sflush_r>:
    58c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    58c2:	898a      	ldrh	r2, [r1, #12]
    58c4:	0005      	movs	r5, r0
    58c6:	000c      	movs	r4, r1
    58c8:	0713      	lsls	r3, r2, #28
    58ca:	d460      	bmi.n	598e <__sflush_r+0xce>
    58cc:	684b      	ldr	r3, [r1, #4]
    58ce:	2b00      	cmp	r3, #0
    58d0:	dc04      	bgt.n	58dc <__sflush_r+0x1c>
    58d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    58d4:	2b00      	cmp	r3, #0
    58d6:	dc01      	bgt.n	58dc <__sflush_r+0x1c>
    58d8:	2000      	movs	r0, #0
    58da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    58dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    58de:	2f00      	cmp	r7, #0
    58e0:	d0fa      	beq.n	58d8 <__sflush_r+0x18>
    58e2:	2300      	movs	r3, #0
    58e4:	682e      	ldr	r6, [r5, #0]
    58e6:	602b      	str	r3, [r5, #0]
    58e8:	2380      	movs	r3, #128	; 0x80
    58ea:	015b      	lsls	r3, r3, #5
    58ec:	401a      	ands	r2, r3
    58ee:	d034      	beq.n	595a <__sflush_r+0x9a>
    58f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    58f2:	89a3      	ldrh	r3, [r4, #12]
    58f4:	075b      	lsls	r3, r3, #29
    58f6:	d506      	bpl.n	5906 <__sflush_r+0x46>
    58f8:	6863      	ldr	r3, [r4, #4]
    58fa:	1ac0      	subs	r0, r0, r3
    58fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58fe:	2b00      	cmp	r3, #0
    5900:	d001      	beq.n	5906 <__sflush_r+0x46>
    5902:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5904:	1ac0      	subs	r0, r0, r3
    5906:	0002      	movs	r2, r0
    5908:	6a21      	ldr	r1, [r4, #32]
    590a:	2300      	movs	r3, #0
    590c:	0028      	movs	r0, r5
    590e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5910:	47b8      	blx	r7
    5912:	89a1      	ldrh	r1, [r4, #12]
    5914:	1c43      	adds	r3, r0, #1
    5916:	d106      	bne.n	5926 <__sflush_r+0x66>
    5918:	682b      	ldr	r3, [r5, #0]
    591a:	2b1d      	cmp	r3, #29
    591c:	d831      	bhi.n	5982 <__sflush_r+0xc2>
    591e:	4a2c      	ldr	r2, [pc, #176]	; (59d0 <__sflush_r+0x110>)
    5920:	40da      	lsrs	r2, r3
    5922:	07d3      	lsls	r3, r2, #31
    5924:	d52d      	bpl.n	5982 <__sflush_r+0xc2>
    5926:	2300      	movs	r3, #0
    5928:	6063      	str	r3, [r4, #4]
    592a:	6923      	ldr	r3, [r4, #16]
    592c:	6023      	str	r3, [r4, #0]
    592e:	04cb      	lsls	r3, r1, #19
    5930:	d505      	bpl.n	593e <__sflush_r+0x7e>
    5932:	1c43      	adds	r3, r0, #1
    5934:	d102      	bne.n	593c <__sflush_r+0x7c>
    5936:	682b      	ldr	r3, [r5, #0]
    5938:	2b00      	cmp	r3, #0
    593a:	d100      	bne.n	593e <__sflush_r+0x7e>
    593c:	6560      	str	r0, [r4, #84]	; 0x54
    593e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5940:	602e      	str	r6, [r5, #0]
    5942:	2900      	cmp	r1, #0
    5944:	d0c8      	beq.n	58d8 <__sflush_r+0x18>
    5946:	0023      	movs	r3, r4
    5948:	3344      	adds	r3, #68	; 0x44
    594a:	4299      	cmp	r1, r3
    594c:	d002      	beq.n	5954 <__sflush_r+0x94>
    594e:	0028      	movs	r0, r5
    5950:	f000 f9ba 	bl	5cc8 <_free_r>
    5954:	2000      	movs	r0, #0
    5956:	6360      	str	r0, [r4, #52]	; 0x34
    5958:	e7bf      	b.n	58da <__sflush_r+0x1a>
    595a:	2301      	movs	r3, #1
    595c:	6a21      	ldr	r1, [r4, #32]
    595e:	0028      	movs	r0, r5
    5960:	47b8      	blx	r7
    5962:	1c43      	adds	r3, r0, #1
    5964:	d1c5      	bne.n	58f2 <__sflush_r+0x32>
    5966:	682b      	ldr	r3, [r5, #0]
    5968:	2b00      	cmp	r3, #0
    596a:	d0c2      	beq.n	58f2 <__sflush_r+0x32>
    596c:	2b1d      	cmp	r3, #29
    596e:	d001      	beq.n	5974 <__sflush_r+0xb4>
    5970:	2b16      	cmp	r3, #22
    5972:	d101      	bne.n	5978 <__sflush_r+0xb8>
    5974:	602e      	str	r6, [r5, #0]
    5976:	e7af      	b.n	58d8 <__sflush_r+0x18>
    5978:	2340      	movs	r3, #64	; 0x40
    597a:	89a2      	ldrh	r2, [r4, #12]
    597c:	4313      	orrs	r3, r2
    597e:	81a3      	strh	r3, [r4, #12]
    5980:	e7ab      	b.n	58da <__sflush_r+0x1a>
    5982:	2340      	movs	r3, #64	; 0x40
    5984:	430b      	orrs	r3, r1
    5986:	2001      	movs	r0, #1
    5988:	81a3      	strh	r3, [r4, #12]
    598a:	4240      	negs	r0, r0
    598c:	e7a5      	b.n	58da <__sflush_r+0x1a>
    598e:	690f      	ldr	r7, [r1, #16]
    5990:	2f00      	cmp	r7, #0
    5992:	d0a1      	beq.n	58d8 <__sflush_r+0x18>
    5994:	680b      	ldr	r3, [r1, #0]
    5996:	600f      	str	r7, [r1, #0]
    5998:	1bdb      	subs	r3, r3, r7
    599a:	9301      	str	r3, [sp, #4]
    599c:	2300      	movs	r3, #0
    599e:	0792      	lsls	r2, r2, #30
    59a0:	d100      	bne.n	59a4 <__sflush_r+0xe4>
    59a2:	694b      	ldr	r3, [r1, #20]
    59a4:	60a3      	str	r3, [r4, #8]
    59a6:	9b01      	ldr	r3, [sp, #4]
    59a8:	2b00      	cmp	r3, #0
    59aa:	dc00      	bgt.n	59ae <__sflush_r+0xee>
    59ac:	e794      	b.n	58d8 <__sflush_r+0x18>
    59ae:	9b01      	ldr	r3, [sp, #4]
    59b0:	003a      	movs	r2, r7
    59b2:	6a21      	ldr	r1, [r4, #32]
    59b4:	0028      	movs	r0, r5
    59b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    59b8:	47b0      	blx	r6
    59ba:	2800      	cmp	r0, #0
    59bc:	dc03      	bgt.n	59c6 <__sflush_r+0x106>
    59be:	2340      	movs	r3, #64	; 0x40
    59c0:	89a2      	ldrh	r2, [r4, #12]
    59c2:	4313      	orrs	r3, r2
    59c4:	e7df      	b.n	5986 <__sflush_r+0xc6>
    59c6:	9b01      	ldr	r3, [sp, #4]
    59c8:	183f      	adds	r7, r7, r0
    59ca:	1a1b      	subs	r3, r3, r0
    59cc:	9301      	str	r3, [sp, #4]
    59ce:	e7ea      	b.n	59a6 <__sflush_r+0xe6>
    59d0:	20400001 	.word	0x20400001

000059d4 <_fflush_r>:
    59d4:	690b      	ldr	r3, [r1, #16]
    59d6:	b570      	push	{r4, r5, r6, lr}
    59d8:	0005      	movs	r5, r0
    59da:	000c      	movs	r4, r1
    59dc:	2b00      	cmp	r3, #0
    59de:	d101      	bne.n	59e4 <_fflush_r+0x10>
    59e0:	2000      	movs	r0, #0
    59e2:	bd70      	pop	{r4, r5, r6, pc}
    59e4:	2800      	cmp	r0, #0
    59e6:	d004      	beq.n	59f2 <_fflush_r+0x1e>
    59e8:	6983      	ldr	r3, [r0, #24]
    59ea:	2b00      	cmp	r3, #0
    59ec:	d101      	bne.n	59f2 <_fflush_r+0x1e>
    59ee:	f000 f85f 	bl	5ab0 <__sinit>
    59f2:	4b0b      	ldr	r3, [pc, #44]	; (5a20 <_fflush_r+0x4c>)
    59f4:	429c      	cmp	r4, r3
    59f6:	d109      	bne.n	5a0c <_fflush_r+0x38>
    59f8:	686c      	ldr	r4, [r5, #4]
    59fa:	220c      	movs	r2, #12
    59fc:	5ea3      	ldrsh	r3, [r4, r2]
    59fe:	2b00      	cmp	r3, #0
    5a00:	d0ee      	beq.n	59e0 <_fflush_r+0xc>
    5a02:	0021      	movs	r1, r4
    5a04:	0028      	movs	r0, r5
    5a06:	f7ff ff5b 	bl	58c0 <__sflush_r>
    5a0a:	e7ea      	b.n	59e2 <_fflush_r+0xe>
    5a0c:	4b05      	ldr	r3, [pc, #20]	; (5a24 <_fflush_r+0x50>)
    5a0e:	429c      	cmp	r4, r3
    5a10:	d101      	bne.n	5a16 <_fflush_r+0x42>
    5a12:	68ac      	ldr	r4, [r5, #8]
    5a14:	e7f1      	b.n	59fa <_fflush_r+0x26>
    5a16:	4b04      	ldr	r3, [pc, #16]	; (5a28 <_fflush_r+0x54>)
    5a18:	429c      	cmp	r4, r3
    5a1a:	d1ee      	bne.n	59fa <_fflush_r+0x26>
    5a1c:	68ec      	ldr	r4, [r5, #12]
    5a1e:	e7ec      	b.n	59fa <_fflush_r+0x26>
    5a20:	00008b80 	.word	0x00008b80
    5a24:	00008ba0 	.word	0x00008ba0
    5a28:	00008b60 	.word	0x00008b60

00005a2c <_cleanup_r>:
    5a2c:	b510      	push	{r4, lr}
    5a2e:	4902      	ldr	r1, [pc, #8]	; (5a38 <_cleanup_r+0xc>)
    5a30:	f000 f8b2 	bl	5b98 <_fwalk_reent>
    5a34:	bd10      	pop	{r4, pc}
    5a36:	46c0      	nop			; (mov r8, r8)
    5a38:	000059d5 	.word	0x000059d5

00005a3c <std.isra.0>:
    5a3c:	2300      	movs	r3, #0
    5a3e:	b510      	push	{r4, lr}
    5a40:	0004      	movs	r4, r0
    5a42:	6003      	str	r3, [r0, #0]
    5a44:	6043      	str	r3, [r0, #4]
    5a46:	6083      	str	r3, [r0, #8]
    5a48:	8181      	strh	r1, [r0, #12]
    5a4a:	6643      	str	r3, [r0, #100]	; 0x64
    5a4c:	81c2      	strh	r2, [r0, #14]
    5a4e:	6103      	str	r3, [r0, #16]
    5a50:	6143      	str	r3, [r0, #20]
    5a52:	6183      	str	r3, [r0, #24]
    5a54:	0019      	movs	r1, r3
    5a56:	2208      	movs	r2, #8
    5a58:	305c      	adds	r0, #92	; 0x5c
    5a5a:	f7ff fd22 	bl	54a2 <memset>
    5a5e:	4b05      	ldr	r3, [pc, #20]	; (5a74 <std.isra.0+0x38>)
    5a60:	6224      	str	r4, [r4, #32]
    5a62:	6263      	str	r3, [r4, #36]	; 0x24
    5a64:	4b04      	ldr	r3, [pc, #16]	; (5a78 <std.isra.0+0x3c>)
    5a66:	62a3      	str	r3, [r4, #40]	; 0x28
    5a68:	4b04      	ldr	r3, [pc, #16]	; (5a7c <std.isra.0+0x40>)
    5a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
    5a6c:	4b04      	ldr	r3, [pc, #16]	; (5a80 <std.isra.0+0x44>)
    5a6e:	6323      	str	r3, [r4, #48]	; 0x30
    5a70:	bd10      	pop	{r4, pc}
    5a72:	46c0      	nop			; (mov r8, r8)
    5a74:	000063d5 	.word	0x000063d5
    5a78:	000063fd 	.word	0x000063fd
    5a7c:	00006435 	.word	0x00006435
    5a80:	00006461 	.word	0x00006461

00005a84 <__sfmoreglue>:
    5a84:	b570      	push	{r4, r5, r6, lr}
    5a86:	2568      	movs	r5, #104	; 0x68
    5a88:	1e4a      	subs	r2, r1, #1
    5a8a:	4355      	muls	r5, r2
    5a8c:	000e      	movs	r6, r1
    5a8e:	0029      	movs	r1, r5
    5a90:	3174      	adds	r1, #116	; 0x74
    5a92:	f000 f963 	bl	5d5c <_malloc_r>
    5a96:	1e04      	subs	r4, r0, #0
    5a98:	d008      	beq.n	5aac <__sfmoreglue+0x28>
    5a9a:	2100      	movs	r1, #0
    5a9c:	002a      	movs	r2, r5
    5a9e:	6001      	str	r1, [r0, #0]
    5aa0:	6046      	str	r6, [r0, #4]
    5aa2:	300c      	adds	r0, #12
    5aa4:	60a0      	str	r0, [r4, #8]
    5aa6:	3268      	adds	r2, #104	; 0x68
    5aa8:	f7ff fcfb 	bl	54a2 <memset>
    5aac:	0020      	movs	r0, r4
    5aae:	bd70      	pop	{r4, r5, r6, pc}

00005ab0 <__sinit>:
    5ab0:	6983      	ldr	r3, [r0, #24]
    5ab2:	b513      	push	{r0, r1, r4, lr}
    5ab4:	0004      	movs	r4, r0
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	d128      	bne.n	5b0c <__sinit+0x5c>
    5aba:	6483      	str	r3, [r0, #72]	; 0x48
    5abc:	64c3      	str	r3, [r0, #76]	; 0x4c
    5abe:	6503      	str	r3, [r0, #80]	; 0x50
    5ac0:	4b13      	ldr	r3, [pc, #76]	; (5b10 <__sinit+0x60>)
    5ac2:	4a14      	ldr	r2, [pc, #80]	; (5b14 <__sinit+0x64>)
    5ac4:	681b      	ldr	r3, [r3, #0]
    5ac6:	6282      	str	r2, [r0, #40]	; 0x28
    5ac8:	9301      	str	r3, [sp, #4]
    5aca:	4298      	cmp	r0, r3
    5acc:	d101      	bne.n	5ad2 <__sinit+0x22>
    5ace:	2301      	movs	r3, #1
    5ad0:	6183      	str	r3, [r0, #24]
    5ad2:	0020      	movs	r0, r4
    5ad4:	f000 f820 	bl	5b18 <__sfp>
    5ad8:	6060      	str	r0, [r4, #4]
    5ada:	0020      	movs	r0, r4
    5adc:	f000 f81c 	bl	5b18 <__sfp>
    5ae0:	60a0      	str	r0, [r4, #8]
    5ae2:	0020      	movs	r0, r4
    5ae4:	f000 f818 	bl	5b18 <__sfp>
    5ae8:	2200      	movs	r2, #0
    5aea:	60e0      	str	r0, [r4, #12]
    5aec:	2104      	movs	r1, #4
    5aee:	6860      	ldr	r0, [r4, #4]
    5af0:	f7ff ffa4 	bl	5a3c <std.isra.0>
    5af4:	2201      	movs	r2, #1
    5af6:	2109      	movs	r1, #9
    5af8:	68a0      	ldr	r0, [r4, #8]
    5afa:	f7ff ff9f 	bl	5a3c <std.isra.0>
    5afe:	2202      	movs	r2, #2
    5b00:	2112      	movs	r1, #18
    5b02:	68e0      	ldr	r0, [r4, #12]
    5b04:	f7ff ff9a 	bl	5a3c <std.isra.0>
    5b08:	2301      	movs	r3, #1
    5b0a:	61a3      	str	r3, [r4, #24]
    5b0c:	bd13      	pop	{r0, r1, r4, pc}
    5b0e:	46c0      	nop			; (mov r8, r8)
    5b10:	00008b5c 	.word	0x00008b5c
    5b14:	00005a2d 	.word	0x00005a2d

00005b18 <__sfp>:
    5b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b1a:	4b1e      	ldr	r3, [pc, #120]	; (5b94 <__sfp+0x7c>)
    5b1c:	0007      	movs	r7, r0
    5b1e:	681e      	ldr	r6, [r3, #0]
    5b20:	69b3      	ldr	r3, [r6, #24]
    5b22:	2b00      	cmp	r3, #0
    5b24:	d102      	bne.n	5b2c <__sfp+0x14>
    5b26:	0030      	movs	r0, r6
    5b28:	f7ff ffc2 	bl	5ab0 <__sinit>
    5b2c:	3648      	adds	r6, #72	; 0x48
    5b2e:	68b4      	ldr	r4, [r6, #8]
    5b30:	6873      	ldr	r3, [r6, #4]
    5b32:	3b01      	subs	r3, #1
    5b34:	d504      	bpl.n	5b40 <__sfp+0x28>
    5b36:	6833      	ldr	r3, [r6, #0]
    5b38:	2b00      	cmp	r3, #0
    5b3a:	d007      	beq.n	5b4c <__sfp+0x34>
    5b3c:	6836      	ldr	r6, [r6, #0]
    5b3e:	e7f6      	b.n	5b2e <__sfp+0x16>
    5b40:	220c      	movs	r2, #12
    5b42:	5ea5      	ldrsh	r5, [r4, r2]
    5b44:	2d00      	cmp	r5, #0
    5b46:	d00d      	beq.n	5b64 <__sfp+0x4c>
    5b48:	3468      	adds	r4, #104	; 0x68
    5b4a:	e7f2      	b.n	5b32 <__sfp+0x1a>
    5b4c:	2104      	movs	r1, #4
    5b4e:	0038      	movs	r0, r7
    5b50:	f7ff ff98 	bl	5a84 <__sfmoreglue>
    5b54:	6030      	str	r0, [r6, #0]
    5b56:	2800      	cmp	r0, #0
    5b58:	d1f0      	bne.n	5b3c <__sfp+0x24>
    5b5a:	230c      	movs	r3, #12
    5b5c:	0004      	movs	r4, r0
    5b5e:	603b      	str	r3, [r7, #0]
    5b60:	0020      	movs	r0, r4
    5b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b64:	2301      	movs	r3, #1
    5b66:	0020      	movs	r0, r4
    5b68:	425b      	negs	r3, r3
    5b6a:	81e3      	strh	r3, [r4, #14]
    5b6c:	3302      	adds	r3, #2
    5b6e:	81a3      	strh	r3, [r4, #12]
    5b70:	6665      	str	r5, [r4, #100]	; 0x64
    5b72:	6025      	str	r5, [r4, #0]
    5b74:	60a5      	str	r5, [r4, #8]
    5b76:	6065      	str	r5, [r4, #4]
    5b78:	6125      	str	r5, [r4, #16]
    5b7a:	6165      	str	r5, [r4, #20]
    5b7c:	61a5      	str	r5, [r4, #24]
    5b7e:	2208      	movs	r2, #8
    5b80:	0029      	movs	r1, r5
    5b82:	305c      	adds	r0, #92	; 0x5c
    5b84:	f7ff fc8d 	bl	54a2 <memset>
    5b88:	6365      	str	r5, [r4, #52]	; 0x34
    5b8a:	63a5      	str	r5, [r4, #56]	; 0x38
    5b8c:	64a5      	str	r5, [r4, #72]	; 0x48
    5b8e:	64e5      	str	r5, [r4, #76]	; 0x4c
    5b90:	e7e6      	b.n	5b60 <__sfp+0x48>
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	00008b5c 	.word	0x00008b5c

00005b98 <_fwalk_reent>:
    5b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b9a:	0004      	movs	r4, r0
    5b9c:	0007      	movs	r7, r0
    5b9e:	2600      	movs	r6, #0
    5ba0:	9101      	str	r1, [sp, #4]
    5ba2:	3448      	adds	r4, #72	; 0x48
    5ba4:	2c00      	cmp	r4, #0
    5ba6:	d101      	bne.n	5bac <_fwalk_reent+0x14>
    5ba8:	0030      	movs	r0, r6
    5baa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5bac:	6863      	ldr	r3, [r4, #4]
    5bae:	68a5      	ldr	r5, [r4, #8]
    5bb0:	9300      	str	r3, [sp, #0]
    5bb2:	9b00      	ldr	r3, [sp, #0]
    5bb4:	3b01      	subs	r3, #1
    5bb6:	9300      	str	r3, [sp, #0]
    5bb8:	d501      	bpl.n	5bbe <_fwalk_reent+0x26>
    5bba:	6824      	ldr	r4, [r4, #0]
    5bbc:	e7f2      	b.n	5ba4 <_fwalk_reent+0xc>
    5bbe:	89ab      	ldrh	r3, [r5, #12]
    5bc0:	2b01      	cmp	r3, #1
    5bc2:	d908      	bls.n	5bd6 <_fwalk_reent+0x3e>
    5bc4:	220e      	movs	r2, #14
    5bc6:	5eab      	ldrsh	r3, [r5, r2]
    5bc8:	3301      	adds	r3, #1
    5bca:	d004      	beq.n	5bd6 <_fwalk_reent+0x3e>
    5bcc:	0029      	movs	r1, r5
    5bce:	0038      	movs	r0, r7
    5bd0:	9b01      	ldr	r3, [sp, #4]
    5bd2:	4798      	blx	r3
    5bd4:	4306      	orrs	r6, r0
    5bd6:	3568      	adds	r5, #104	; 0x68
    5bd8:	e7eb      	b.n	5bb2 <_fwalk_reent+0x1a>
	...

00005bdc <__swhatbuf_r>:
    5bdc:	b570      	push	{r4, r5, r6, lr}
    5bde:	000e      	movs	r6, r1
    5be0:	001d      	movs	r5, r3
    5be2:	230e      	movs	r3, #14
    5be4:	5ec9      	ldrsh	r1, [r1, r3]
    5be6:	b090      	sub	sp, #64	; 0x40
    5be8:	0014      	movs	r4, r2
    5bea:	2900      	cmp	r1, #0
    5bec:	da07      	bge.n	5bfe <__swhatbuf_r+0x22>
    5bee:	2300      	movs	r3, #0
    5bf0:	602b      	str	r3, [r5, #0]
    5bf2:	89b3      	ldrh	r3, [r6, #12]
    5bf4:	061b      	lsls	r3, r3, #24
    5bf6:	d411      	bmi.n	5c1c <__swhatbuf_r+0x40>
    5bf8:	2380      	movs	r3, #128	; 0x80
    5bfa:	00db      	lsls	r3, r3, #3
    5bfc:	e00f      	b.n	5c1e <__swhatbuf_r+0x42>
    5bfe:	aa01      	add	r2, sp, #4
    5c00:	f000 fc5a 	bl	64b8 <_fstat_r>
    5c04:	2800      	cmp	r0, #0
    5c06:	dbf2      	blt.n	5bee <__swhatbuf_r+0x12>
    5c08:	22f0      	movs	r2, #240	; 0xf0
    5c0a:	9b02      	ldr	r3, [sp, #8]
    5c0c:	0212      	lsls	r2, r2, #8
    5c0e:	4013      	ands	r3, r2
    5c10:	4a05      	ldr	r2, [pc, #20]	; (5c28 <__swhatbuf_r+0x4c>)
    5c12:	189b      	adds	r3, r3, r2
    5c14:	425a      	negs	r2, r3
    5c16:	4153      	adcs	r3, r2
    5c18:	602b      	str	r3, [r5, #0]
    5c1a:	e7ed      	b.n	5bf8 <__swhatbuf_r+0x1c>
    5c1c:	2340      	movs	r3, #64	; 0x40
    5c1e:	2000      	movs	r0, #0
    5c20:	6023      	str	r3, [r4, #0]
    5c22:	b010      	add	sp, #64	; 0x40
    5c24:	bd70      	pop	{r4, r5, r6, pc}
    5c26:	46c0      	nop			; (mov r8, r8)
    5c28:	ffffe000 	.word	0xffffe000

00005c2c <__smakebuf_r>:
    5c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5c2e:	2602      	movs	r6, #2
    5c30:	898b      	ldrh	r3, [r1, #12]
    5c32:	0005      	movs	r5, r0
    5c34:	000c      	movs	r4, r1
    5c36:	4233      	tst	r3, r6
    5c38:	d006      	beq.n	5c48 <__smakebuf_r+0x1c>
    5c3a:	0023      	movs	r3, r4
    5c3c:	3347      	adds	r3, #71	; 0x47
    5c3e:	6023      	str	r3, [r4, #0]
    5c40:	6123      	str	r3, [r4, #16]
    5c42:	2301      	movs	r3, #1
    5c44:	6163      	str	r3, [r4, #20]
    5c46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5c48:	ab01      	add	r3, sp, #4
    5c4a:	466a      	mov	r2, sp
    5c4c:	f7ff ffc6 	bl	5bdc <__swhatbuf_r>
    5c50:	9900      	ldr	r1, [sp, #0]
    5c52:	0007      	movs	r7, r0
    5c54:	0028      	movs	r0, r5
    5c56:	f000 f881 	bl	5d5c <_malloc_r>
    5c5a:	2800      	cmp	r0, #0
    5c5c:	d108      	bne.n	5c70 <__smakebuf_r+0x44>
    5c5e:	220c      	movs	r2, #12
    5c60:	5ea3      	ldrsh	r3, [r4, r2]
    5c62:	059a      	lsls	r2, r3, #22
    5c64:	d4ef      	bmi.n	5c46 <__smakebuf_r+0x1a>
    5c66:	2203      	movs	r2, #3
    5c68:	4393      	bics	r3, r2
    5c6a:	431e      	orrs	r6, r3
    5c6c:	81a6      	strh	r6, [r4, #12]
    5c6e:	e7e4      	b.n	5c3a <__smakebuf_r+0xe>
    5c70:	4b0f      	ldr	r3, [pc, #60]	; (5cb0 <__smakebuf_r+0x84>)
    5c72:	62ab      	str	r3, [r5, #40]	; 0x28
    5c74:	2380      	movs	r3, #128	; 0x80
    5c76:	89a2      	ldrh	r2, [r4, #12]
    5c78:	6020      	str	r0, [r4, #0]
    5c7a:	4313      	orrs	r3, r2
    5c7c:	81a3      	strh	r3, [r4, #12]
    5c7e:	9b00      	ldr	r3, [sp, #0]
    5c80:	6120      	str	r0, [r4, #16]
    5c82:	6163      	str	r3, [r4, #20]
    5c84:	9b01      	ldr	r3, [sp, #4]
    5c86:	2b00      	cmp	r3, #0
    5c88:	d00d      	beq.n	5ca6 <__smakebuf_r+0x7a>
    5c8a:	230e      	movs	r3, #14
    5c8c:	5ee1      	ldrsh	r1, [r4, r3]
    5c8e:	0028      	movs	r0, r5
    5c90:	f000 fc24 	bl	64dc <_isatty_r>
    5c94:	2800      	cmp	r0, #0
    5c96:	d006      	beq.n	5ca6 <__smakebuf_r+0x7a>
    5c98:	2203      	movs	r2, #3
    5c9a:	89a3      	ldrh	r3, [r4, #12]
    5c9c:	4393      	bics	r3, r2
    5c9e:	001a      	movs	r2, r3
    5ca0:	2301      	movs	r3, #1
    5ca2:	4313      	orrs	r3, r2
    5ca4:	81a3      	strh	r3, [r4, #12]
    5ca6:	89a0      	ldrh	r0, [r4, #12]
    5ca8:	4338      	orrs	r0, r7
    5caa:	81a0      	strh	r0, [r4, #12]
    5cac:	e7cb      	b.n	5c46 <__smakebuf_r+0x1a>
    5cae:	46c0      	nop			; (mov r8, r8)
    5cb0:	00005a2d 	.word	0x00005a2d

00005cb4 <malloc>:
    5cb4:	b510      	push	{r4, lr}
    5cb6:	4b03      	ldr	r3, [pc, #12]	; (5cc4 <malloc+0x10>)
    5cb8:	0001      	movs	r1, r0
    5cba:	6818      	ldr	r0, [r3, #0]
    5cbc:	f000 f84e 	bl	5d5c <_malloc_r>
    5cc0:	bd10      	pop	{r4, pc}
    5cc2:	46c0      	nop			; (mov r8, r8)
    5cc4:	20000104 	.word	0x20000104

00005cc8 <_free_r>:
    5cc8:	b570      	push	{r4, r5, r6, lr}
    5cca:	0005      	movs	r5, r0
    5ccc:	2900      	cmp	r1, #0
    5cce:	d010      	beq.n	5cf2 <_free_r+0x2a>
    5cd0:	1f0c      	subs	r4, r1, #4
    5cd2:	6823      	ldr	r3, [r4, #0]
    5cd4:	2b00      	cmp	r3, #0
    5cd6:	da00      	bge.n	5cda <_free_r+0x12>
    5cd8:	18e4      	adds	r4, r4, r3
    5cda:	0028      	movs	r0, r5
    5cdc:	f000 fc2f 	bl	653e <__malloc_lock>
    5ce0:	4a1d      	ldr	r2, [pc, #116]	; (5d58 <_free_r+0x90>)
    5ce2:	6813      	ldr	r3, [r2, #0]
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d105      	bne.n	5cf4 <_free_r+0x2c>
    5ce8:	6063      	str	r3, [r4, #4]
    5cea:	6014      	str	r4, [r2, #0]
    5cec:	0028      	movs	r0, r5
    5cee:	f000 fc27 	bl	6540 <__malloc_unlock>
    5cf2:	bd70      	pop	{r4, r5, r6, pc}
    5cf4:	42a3      	cmp	r3, r4
    5cf6:	d909      	bls.n	5d0c <_free_r+0x44>
    5cf8:	6821      	ldr	r1, [r4, #0]
    5cfa:	1860      	adds	r0, r4, r1
    5cfc:	4283      	cmp	r3, r0
    5cfe:	d1f3      	bne.n	5ce8 <_free_r+0x20>
    5d00:	6818      	ldr	r0, [r3, #0]
    5d02:	685b      	ldr	r3, [r3, #4]
    5d04:	1841      	adds	r1, r0, r1
    5d06:	6021      	str	r1, [r4, #0]
    5d08:	e7ee      	b.n	5ce8 <_free_r+0x20>
    5d0a:	0013      	movs	r3, r2
    5d0c:	685a      	ldr	r2, [r3, #4]
    5d0e:	2a00      	cmp	r2, #0
    5d10:	d001      	beq.n	5d16 <_free_r+0x4e>
    5d12:	42a2      	cmp	r2, r4
    5d14:	d9f9      	bls.n	5d0a <_free_r+0x42>
    5d16:	6819      	ldr	r1, [r3, #0]
    5d18:	1858      	adds	r0, r3, r1
    5d1a:	42a0      	cmp	r0, r4
    5d1c:	d10b      	bne.n	5d36 <_free_r+0x6e>
    5d1e:	6820      	ldr	r0, [r4, #0]
    5d20:	1809      	adds	r1, r1, r0
    5d22:	1858      	adds	r0, r3, r1
    5d24:	6019      	str	r1, [r3, #0]
    5d26:	4282      	cmp	r2, r0
    5d28:	d1e0      	bne.n	5cec <_free_r+0x24>
    5d2a:	6810      	ldr	r0, [r2, #0]
    5d2c:	6852      	ldr	r2, [r2, #4]
    5d2e:	1841      	adds	r1, r0, r1
    5d30:	6019      	str	r1, [r3, #0]
    5d32:	605a      	str	r2, [r3, #4]
    5d34:	e7da      	b.n	5cec <_free_r+0x24>
    5d36:	42a0      	cmp	r0, r4
    5d38:	d902      	bls.n	5d40 <_free_r+0x78>
    5d3a:	230c      	movs	r3, #12
    5d3c:	602b      	str	r3, [r5, #0]
    5d3e:	e7d5      	b.n	5cec <_free_r+0x24>
    5d40:	6821      	ldr	r1, [r4, #0]
    5d42:	1860      	adds	r0, r4, r1
    5d44:	4282      	cmp	r2, r0
    5d46:	d103      	bne.n	5d50 <_free_r+0x88>
    5d48:	6810      	ldr	r0, [r2, #0]
    5d4a:	6852      	ldr	r2, [r2, #4]
    5d4c:	1841      	adds	r1, r0, r1
    5d4e:	6021      	str	r1, [r4, #0]
    5d50:	6062      	str	r2, [r4, #4]
    5d52:	605c      	str	r4, [r3, #4]
    5d54:	e7ca      	b.n	5cec <_free_r+0x24>
    5d56:	46c0      	nop			; (mov r8, r8)
    5d58:	20000dc0 	.word	0x20000dc0

00005d5c <_malloc_r>:
    5d5c:	2303      	movs	r3, #3
    5d5e:	b570      	push	{r4, r5, r6, lr}
    5d60:	1ccd      	adds	r5, r1, #3
    5d62:	439d      	bics	r5, r3
    5d64:	3508      	adds	r5, #8
    5d66:	0006      	movs	r6, r0
    5d68:	2d0c      	cmp	r5, #12
    5d6a:	d21e      	bcs.n	5daa <_malloc_r+0x4e>
    5d6c:	250c      	movs	r5, #12
    5d6e:	42a9      	cmp	r1, r5
    5d70:	d81d      	bhi.n	5dae <_malloc_r+0x52>
    5d72:	0030      	movs	r0, r6
    5d74:	f000 fbe3 	bl	653e <__malloc_lock>
    5d78:	4a25      	ldr	r2, [pc, #148]	; (5e10 <_malloc_r+0xb4>)
    5d7a:	6814      	ldr	r4, [r2, #0]
    5d7c:	0021      	movs	r1, r4
    5d7e:	2900      	cmp	r1, #0
    5d80:	d119      	bne.n	5db6 <_malloc_r+0x5a>
    5d82:	4c24      	ldr	r4, [pc, #144]	; (5e14 <_malloc_r+0xb8>)
    5d84:	6823      	ldr	r3, [r4, #0]
    5d86:	2b00      	cmp	r3, #0
    5d88:	d103      	bne.n	5d92 <_malloc_r+0x36>
    5d8a:	0030      	movs	r0, r6
    5d8c:	f000 fb10 	bl	63b0 <_sbrk_r>
    5d90:	6020      	str	r0, [r4, #0]
    5d92:	0029      	movs	r1, r5
    5d94:	0030      	movs	r0, r6
    5d96:	f000 fb0b 	bl	63b0 <_sbrk_r>
    5d9a:	1c43      	adds	r3, r0, #1
    5d9c:	d12c      	bne.n	5df8 <_malloc_r+0x9c>
    5d9e:	230c      	movs	r3, #12
    5da0:	0030      	movs	r0, r6
    5da2:	6033      	str	r3, [r6, #0]
    5da4:	f000 fbcc 	bl	6540 <__malloc_unlock>
    5da8:	e003      	b.n	5db2 <_malloc_r+0x56>
    5daa:	2d00      	cmp	r5, #0
    5dac:	dadf      	bge.n	5d6e <_malloc_r+0x12>
    5dae:	230c      	movs	r3, #12
    5db0:	6033      	str	r3, [r6, #0]
    5db2:	2000      	movs	r0, #0
    5db4:	bd70      	pop	{r4, r5, r6, pc}
    5db6:	680b      	ldr	r3, [r1, #0]
    5db8:	1b5b      	subs	r3, r3, r5
    5dba:	d41a      	bmi.n	5df2 <_malloc_r+0x96>
    5dbc:	2b0b      	cmp	r3, #11
    5dbe:	d903      	bls.n	5dc8 <_malloc_r+0x6c>
    5dc0:	600b      	str	r3, [r1, #0]
    5dc2:	18cc      	adds	r4, r1, r3
    5dc4:	6025      	str	r5, [r4, #0]
    5dc6:	e003      	b.n	5dd0 <_malloc_r+0x74>
    5dc8:	428c      	cmp	r4, r1
    5dca:	d10e      	bne.n	5dea <_malloc_r+0x8e>
    5dcc:	6863      	ldr	r3, [r4, #4]
    5dce:	6013      	str	r3, [r2, #0]
    5dd0:	0030      	movs	r0, r6
    5dd2:	f000 fbb5 	bl	6540 <__malloc_unlock>
    5dd6:	0020      	movs	r0, r4
    5dd8:	2207      	movs	r2, #7
    5dda:	300b      	adds	r0, #11
    5ddc:	1d23      	adds	r3, r4, #4
    5dde:	4390      	bics	r0, r2
    5de0:	1ac3      	subs	r3, r0, r3
    5de2:	d0e7      	beq.n	5db4 <_malloc_r+0x58>
    5de4:	425a      	negs	r2, r3
    5de6:	50e2      	str	r2, [r4, r3]
    5de8:	e7e4      	b.n	5db4 <_malloc_r+0x58>
    5dea:	684b      	ldr	r3, [r1, #4]
    5dec:	6063      	str	r3, [r4, #4]
    5dee:	000c      	movs	r4, r1
    5df0:	e7ee      	b.n	5dd0 <_malloc_r+0x74>
    5df2:	000c      	movs	r4, r1
    5df4:	6849      	ldr	r1, [r1, #4]
    5df6:	e7c2      	b.n	5d7e <_malloc_r+0x22>
    5df8:	2303      	movs	r3, #3
    5dfa:	1cc4      	adds	r4, r0, #3
    5dfc:	439c      	bics	r4, r3
    5dfe:	42a0      	cmp	r0, r4
    5e00:	d0e0      	beq.n	5dc4 <_malloc_r+0x68>
    5e02:	1a21      	subs	r1, r4, r0
    5e04:	0030      	movs	r0, r6
    5e06:	f000 fad3 	bl	63b0 <_sbrk_r>
    5e0a:	1c43      	adds	r3, r0, #1
    5e0c:	d1da      	bne.n	5dc4 <_malloc_r+0x68>
    5e0e:	e7c6      	b.n	5d9e <_malloc_r+0x42>
    5e10:	20000dc0 	.word	0x20000dc0
    5e14:	20000dc4 	.word	0x20000dc4

00005e18 <__sfputc_r>:
    5e18:	6893      	ldr	r3, [r2, #8]
    5e1a:	b510      	push	{r4, lr}
    5e1c:	3b01      	subs	r3, #1
    5e1e:	6093      	str	r3, [r2, #8]
    5e20:	2b00      	cmp	r3, #0
    5e22:	da05      	bge.n	5e30 <__sfputc_r+0x18>
    5e24:	6994      	ldr	r4, [r2, #24]
    5e26:	42a3      	cmp	r3, r4
    5e28:	db08      	blt.n	5e3c <__sfputc_r+0x24>
    5e2a:	b2cb      	uxtb	r3, r1
    5e2c:	2b0a      	cmp	r3, #10
    5e2e:	d005      	beq.n	5e3c <__sfputc_r+0x24>
    5e30:	6813      	ldr	r3, [r2, #0]
    5e32:	1c58      	adds	r0, r3, #1
    5e34:	6010      	str	r0, [r2, #0]
    5e36:	7019      	strb	r1, [r3, #0]
    5e38:	b2c8      	uxtb	r0, r1
    5e3a:	bd10      	pop	{r4, pc}
    5e3c:	f7ff fc74 	bl	5728 <__swbuf_r>
    5e40:	e7fb      	b.n	5e3a <__sfputc_r+0x22>

00005e42 <__sfputs_r>:
    5e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e44:	0006      	movs	r6, r0
    5e46:	000f      	movs	r7, r1
    5e48:	0014      	movs	r4, r2
    5e4a:	18d5      	adds	r5, r2, r3
    5e4c:	42ac      	cmp	r4, r5
    5e4e:	d101      	bne.n	5e54 <__sfputs_r+0x12>
    5e50:	2000      	movs	r0, #0
    5e52:	e007      	b.n	5e64 <__sfputs_r+0x22>
    5e54:	7821      	ldrb	r1, [r4, #0]
    5e56:	003a      	movs	r2, r7
    5e58:	0030      	movs	r0, r6
    5e5a:	f7ff ffdd 	bl	5e18 <__sfputc_r>
    5e5e:	3401      	adds	r4, #1
    5e60:	1c43      	adds	r3, r0, #1
    5e62:	d1f3      	bne.n	5e4c <__sfputs_r+0xa>
    5e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005e68 <_vfiprintf_r>:
    5e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e6a:	b09f      	sub	sp, #124	; 0x7c
    5e6c:	0006      	movs	r6, r0
    5e6e:	000f      	movs	r7, r1
    5e70:	0014      	movs	r4, r2
    5e72:	9305      	str	r3, [sp, #20]
    5e74:	2800      	cmp	r0, #0
    5e76:	d004      	beq.n	5e82 <_vfiprintf_r+0x1a>
    5e78:	6983      	ldr	r3, [r0, #24]
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	d101      	bne.n	5e82 <_vfiprintf_r+0x1a>
    5e7e:	f7ff fe17 	bl	5ab0 <__sinit>
    5e82:	4b7f      	ldr	r3, [pc, #508]	; (6080 <_vfiprintf_r+0x218>)
    5e84:	429f      	cmp	r7, r3
    5e86:	d15c      	bne.n	5f42 <_vfiprintf_r+0xda>
    5e88:	6877      	ldr	r7, [r6, #4]
    5e8a:	89bb      	ldrh	r3, [r7, #12]
    5e8c:	071b      	lsls	r3, r3, #28
    5e8e:	d562      	bpl.n	5f56 <_vfiprintf_r+0xee>
    5e90:	693b      	ldr	r3, [r7, #16]
    5e92:	2b00      	cmp	r3, #0
    5e94:	d05f      	beq.n	5f56 <_vfiprintf_r+0xee>
    5e96:	2300      	movs	r3, #0
    5e98:	ad06      	add	r5, sp, #24
    5e9a:	616b      	str	r3, [r5, #20]
    5e9c:	3320      	adds	r3, #32
    5e9e:	766b      	strb	r3, [r5, #25]
    5ea0:	3310      	adds	r3, #16
    5ea2:	76ab      	strb	r3, [r5, #26]
    5ea4:	9402      	str	r4, [sp, #8]
    5ea6:	9c02      	ldr	r4, [sp, #8]
    5ea8:	7823      	ldrb	r3, [r4, #0]
    5eaa:	2b00      	cmp	r3, #0
    5eac:	d15d      	bne.n	5f6a <_vfiprintf_r+0x102>
    5eae:	9b02      	ldr	r3, [sp, #8]
    5eb0:	1ae3      	subs	r3, r4, r3
    5eb2:	9304      	str	r3, [sp, #16]
    5eb4:	d00d      	beq.n	5ed2 <_vfiprintf_r+0x6a>
    5eb6:	9b04      	ldr	r3, [sp, #16]
    5eb8:	9a02      	ldr	r2, [sp, #8]
    5eba:	0039      	movs	r1, r7
    5ebc:	0030      	movs	r0, r6
    5ebe:	f7ff ffc0 	bl	5e42 <__sfputs_r>
    5ec2:	1c43      	adds	r3, r0, #1
    5ec4:	d100      	bne.n	5ec8 <_vfiprintf_r+0x60>
    5ec6:	e0cc      	b.n	6062 <_vfiprintf_r+0x1fa>
    5ec8:	696a      	ldr	r2, [r5, #20]
    5eca:	9b04      	ldr	r3, [sp, #16]
    5ecc:	4694      	mov	ip, r2
    5ece:	4463      	add	r3, ip
    5ed0:	616b      	str	r3, [r5, #20]
    5ed2:	7823      	ldrb	r3, [r4, #0]
    5ed4:	2b00      	cmp	r3, #0
    5ed6:	d100      	bne.n	5eda <_vfiprintf_r+0x72>
    5ed8:	e0c3      	b.n	6062 <_vfiprintf_r+0x1fa>
    5eda:	2201      	movs	r2, #1
    5edc:	2300      	movs	r3, #0
    5ede:	4252      	negs	r2, r2
    5ee0:	606a      	str	r2, [r5, #4]
    5ee2:	a902      	add	r1, sp, #8
    5ee4:	3254      	adds	r2, #84	; 0x54
    5ee6:	1852      	adds	r2, r2, r1
    5ee8:	3401      	adds	r4, #1
    5eea:	602b      	str	r3, [r5, #0]
    5eec:	60eb      	str	r3, [r5, #12]
    5eee:	60ab      	str	r3, [r5, #8]
    5ef0:	7013      	strb	r3, [r2, #0]
    5ef2:	65ab      	str	r3, [r5, #88]	; 0x58
    5ef4:	7821      	ldrb	r1, [r4, #0]
    5ef6:	2205      	movs	r2, #5
    5ef8:	4862      	ldr	r0, [pc, #392]	; (6084 <_vfiprintf_r+0x21c>)
    5efa:	f000 fb15 	bl	6528 <memchr>
    5efe:	1c63      	adds	r3, r4, #1
    5f00:	469c      	mov	ip, r3
    5f02:	2800      	cmp	r0, #0
    5f04:	d135      	bne.n	5f72 <_vfiprintf_r+0x10a>
    5f06:	6829      	ldr	r1, [r5, #0]
    5f08:	06cb      	lsls	r3, r1, #27
    5f0a:	d504      	bpl.n	5f16 <_vfiprintf_r+0xae>
    5f0c:	2353      	movs	r3, #83	; 0x53
    5f0e:	aa02      	add	r2, sp, #8
    5f10:	3020      	adds	r0, #32
    5f12:	189b      	adds	r3, r3, r2
    5f14:	7018      	strb	r0, [r3, #0]
    5f16:	070b      	lsls	r3, r1, #28
    5f18:	d504      	bpl.n	5f24 <_vfiprintf_r+0xbc>
    5f1a:	2353      	movs	r3, #83	; 0x53
    5f1c:	202b      	movs	r0, #43	; 0x2b
    5f1e:	aa02      	add	r2, sp, #8
    5f20:	189b      	adds	r3, r3, r2
    5f22:	7018      	strb	r0, [r3, #0]
    5f24:	7823      	ldrb	r3, [r4, #0]
    5f26:	2b2a      	cmp	r3, #42	; 0x2a
    5f28:	d02c      	beq.n	5f84 <_vfiprintf_r+0x11c>
    5f2a:	2000      	movs	r0, #0
    5f2c:	210a      	movs	r1, #10
    5f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5f30:	7822      	ldrb	r2, [r4, #0]
    5f32:	3a30      	subs	r2, #48	; 0x30
    5f34:	2a09      	cmp	r2, #9
    5f36:	d800      	bhi.n	5f3a <_vfiprintf_r+0xd2>
    5f38:	e06b      	b.n	6012 <_vfiprintf_r+0x1aa>
    5f3a:	2800      	cmp	r0, #0
    5f3c:	d02a      	beq.n	5f94 <_vfiprintf_r+0x12c>
    5f3e:	9309      	str	r3, [sp, #36]	; 0x24
    5f40:	e028      	b.n	5f94 <_vfiprintf_r+0x12c>
    5f42:	4b51      	ldr	r3, [pc, #324]	; (6088 <_vfiprintf_r+0x220>)
    5f44:	429f      	cmp	r7, r3
    5f46:	d101      	bne.n	5f4c <_vfiprintf_r+0xe4>
    5f48:	68b7      	ldr	r7, [r6, #8]
    5f4a:	e79e      	b.n	5e8a <_vfiprintf_r+0x22>
    5f4c:	4b4f      	ldr	r3, [pc, #316]	; (608c <_vfiprintf_r+0x224>)
    5f4e:	429f      	cmp	r7, r3
    5f50:	d19b      	bne.n	5e8a <_vfiprintf_r+0x22>
    5f52:	68f7      	ldr	r7, [r6, #12]
    5f54:	e799      	b.n	5e8a <_vfiprintf_r+0x22>
    5f56:	0039      	movs	r1, r7
    5f58:	0030      	movs	r0, r6
    5f5a:	f7ff fc3b 	bl	57d4 <__swsetup_r>
    5f5e:	2800      	cmp	r0, #0
    5f60:	d099      	beq.n	5e96 <_vfiprintf_r+0x2e>
    5f62:	2001      	movs	r0, #1
    5f64:	4240      	negs	r0, r0
    5f66:	b01f      	add	sp, #124	; 0x7c
    5f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f6a:	2b25      	cmp	r3, #37	; 0x25
    5f6c:	d09f      	beq.n	5eae <_vfiprintf_r+0x46>
    5f6e:	3401      	adds	r4, #1
    5f70:	e79a      	b.n	5ea8 <_vfiprintf_r+0x40>
    5f72:	4b44      	ldr	r3, [pc, #272]	; (6084 <_vfiprintf_r+0x21c>)
    5f74:	6829      	ldr	r1, [r5, #0]
    5f76:	1ac0      	subs	r0, r0, r3
    5f78:	2301      	movs	r3, #1
    5f7a:	4083      	lsls	r3, r0
    5f7c:	430b      	orrs	r3, r1
    5f7e:	602b      	str	r3, [r5, #0]
    5f80:	4664      	mov	r4, ip
    5f82:	e7b7      	b.n	5ef4 <_vfiprintf_r+0x8c>
    5f84:	9b05      	ldr	r3, [sp, #20]
    5f86:	1d18      	adds	r0, r3, #4
    5f88:	681b      	ldr	r3, [r3, #0]
    5f8a:	9005      	str	r0, [sp, #20]
    5f8c:	2b00      	cmp	r3, #0
    5f8e:	db3a      	blt.n	6006 <_vfiprintf_r+0x19e>
    5f90:	9309      	str	r3, [sp, #36]	; 0x24
    5f92:	4664      	mov	r4, ip
    5f94:	7823      	ldrb	r3, [r4, #0]
    5f96:	2b2e      	cmp	r3, #46	; 0x2e
    5f98:	d10b      	bne.n	5fb2 <_vfiprintf_r+0x14a>
    5f9a:	7863      	ldrb	r3, [r4, #1]
    5f9c:	1c62      	adds	r2, r4, #1
    5f9e:	2b2a      	cmp	r3, #42	; 0x2a
    5fa0:	d13f      	bne.n	6022 <_vfiprintf_r+0x1ba>
    5fa2:	9b05      	ldr	r3, [sp, #20]
    5fa4:	3402      	adds	r4, #2
    5fa6:	1d1a      	adds	r2, r3, #4
    5fa8:	681b      	ldr	r3, [r3, #0]
    5faa:	9205      	str	r2, [sp, #20]
    5fac:	2b00      	cmp	r3, #0
    5fae:	db35      	blt.n	601c <_vfiprintf_r+0x1b4>
    5fb0:	9307      	str	r3, [sp, #28]
    5fb2:	7821      	ldrb	r1, [r4, #0]
    5fb4:	2203      	movs	r2, #3
    5fb6:	4836      	ldr	r0, [pc, #216]	; (6090 <_vfiprintf_r+0x228>)
    5fb8:	f000 fab6 	bl	6528 <memchr>
    5fbc:	2800      	cmp	r0, #0
    5fbe:	d007      	beq.n	5fd0 <_vfiprintf_r+0x168>
    5fc0:	4b33      	ldr	r3, [pc, #204]	; (6090 <_vfiprintf_r+0x228>)
    5fc2:	682a      	ldr	r2, [r5, #0]
    5fc4:	1ac0      	subs	r0, r0, r3
    5fc6:	2340      	movs	r3, #64	; 0x40
    5fc8:	4083      	lsls	r3, r0
    5fca:	4313      	orrs	r3, r2
    5fcc:	602b      	str	r3, [r5, #0]
    5fce:	3401      	adds	r4, #1
    5fd0:	7821      	ldrb	r1, [r4, #0]
    5fd2:	1c63      	adds	r3, r4, #1
    5fd4:	2206      	movs	r2, #6
    5fd6:	482f      	ldr	r0, [pc, #188]	; (6094 <_vfiprintf_r+0x22c>)
    5fd8:	9302      	str	r3, [sp, #8]
    5fda:	7629      	strb	r1, [r5, #24]
    5fdc:	f000 faa4 	bl	6528 <memchr>
    5fe0:	2800      	cmp	r0, #0
    5fe2:	d044      	beq.n	606e <_vfiprintf_r+0x206>
    5fe4:	4b2c      	ldr	r3, [pc, #176]	; (6098 <_vfiprintf_r+0x230>)
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d12f      	bne.n	604a <_vfiprintf_r+0x1e2>
    5fea:	6829      	ldr	r1, [r5, #0]
    5fec:	9b05      	ldr	r3, [sp, #20]
    5fee:	2207      	movs	r2, #7
    5ff0:	05c9      	lsls	r1, r1, #23
    5ff2:	d528      	bpl.n	6046 <_vfiprintf_r+0x1de>
    5ff4:	189b      	adds	r3, r3, r2
    5ff6:	4393      	bics	r3, r2
    5ff8:	3308      	adds	r3, #8
    5ffa:	9305      	str	r3, [sp, #20]
    5ffc:	696b      	ldr	r3, [r5, #20]
    5ffe:	9a03      	ldr	r2, [sp, #12]
    6000:	189b      	adds	r3, r3, r2
    6002:	616b      	str	r3, [r5, #20]
    6004:	e74f      	b.n	5ea6 <_vfiprintf_r+0x3e>
    6006:	425b      	negs	r3, r3
    6008:	60eb      	str	r3, [r5, #12]
    600a:	2302      	movs	r3, #2
    600c:	430b      	orrs	r3, r1
    600e:	602b      	str	r3, [r5, #0]
    6010:	e7bf      	b.n	5f92 <_vfiprintf_r+0x12a>
    6012:	434b      	muls	r3, r1
    6014:	3401      	adds	r4, #1
    6016:	189b      	adds	r3, r3, r2
    6018:	2001      	movs	r0, #1
    601a:	e789      	b.n	5f30 <_vfiprintf_r+0xc8>
    601c:	2301      	movs	r3, #1
    601e:	425b      	negs	r3, r3
    6020:	e7c6      	b.n	5fb0 <_vfiprintf_r+0x148>
    6022:	2300      	movs	r3, #0
    6024:	0014      	movs	r4, r2
    6026:	200a      	movs	r0, #10
    6028:	001a      	movs	r2, r3
    602a:	606b      	str	r3, [r5, #4]
    602c:	7821      	ldrb	r1, [r4, #0]
    602e:	3930      	subs	r1, #48	; 0x30
    6030:	2909      	cmp	r1, #9
    6032:	d903      	bls.n	603c <_vfiprintf_r+0x1d4>
    6034:	2b00      	cmp	r3, #0
    6036:	d0bc      	beq.n	5fb2 <_vfiprintf_r+0x14a>
    6038:	9207      	str	r2, [sp, #28]
    603a:	e7ba      	b.n	5fb2 <_vfiprintf_r+0x14a>
    603c:	4342      	muls	r2, r0
    603e:	3401      	adds	r4, #1
    6040:	1852      	adds	r2, r2, r1
    6042:	2301      	movs	r3, #1
    6044:	e7f2      	b.n	602c <_vfiprintf_r+0x1c4>
    6046:	3307      	adds	r3, #7
    6048:	e7d5      	b.n	5ff6 <_vfiprintf_r+0x18e>
    604a:	ab05      	add	r3, sp, #20
    604c:	9300      	str	r3, [sp, #0]
    604e:	003a      	movs	r2, r7
    6050:	4b12      	ldr	r3, [pc, #72]	; (609c <_vfiprintf_r+0x234>)
    6052:	0029      	movs	r1, r5
    6054:	0030      	movs	r0, r6
    6056:	f3af 8000 	nop.w
    605a:	9003      	str	r0, [sp, #12]
    605c:	9b03      	ldr	r3, [sp, #12]
    605e:	3301      	adds	r3, #1
    6060:	d1cc      	bne.n	5ffc <_vfiprintf_r+0x194>
    6062:	89bb      	ldrh	r3, [r7, #12]
    6064:	065b      	lsls	r3, r3, #25
    6066:	d500      	bpl.n	606a <_vfiprintf_r+0x202>
    6068:	e77b      	b.n	5f62 <_vfiprintf_r+0xfa>
    606a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    606c:	e77b      	b.n	5f66 <_vfiprintf_r+0xfe>
    606e:	ab05      	add	r3, sp, #20
    6070:	9300      	str	r3, [sp, #0]
    6072:	003a      	movs	r2, r7
    6074:	4b09      	ldr	r3, [pc, #36]	; (609c <_vfiprintf_r+0x234>)
    6076:	0029      	movs	r1, r5
    6078:	0030      	movs	r0, r6
    607a:	f000 f87f 	bl	617c <_printf_i>
    607e:	e7ec      	b.n	605a <_vfiprintf_r+0x1f2>
    6080:	00008b80 	.word	0x00008b80
    6084:	00008bc0 	.word	0x00008bc0
    6088:	00008ba0 	.word	0x00008ba0
    608c:	00008b60 	.word	0x00008b60
    6090:	00008bc6 	.word	0x00008bc6
    6094:	00008bca 	.word	0x00008bca
    6098:	00000000 	.word	0x00000000
    609c:	00005e43 	.word	0x00005e43

000060a0 <_printf_common>:
    60a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    60a2:	0015      	movs	r5, r2
    60a4:	9301      	str	r3, [sp, #4]
    60a6:	688a      	ldr	r2, [r1, #8]
    60a8:	690b      	ldr	r3, [r1, #16]
    60aa:	9000      	str	r0, [sp, #0]
    60ac:	000c      	movs	r4, r1
    60ae:	4293      	cmp	r3, r2
    60b0:	da00      	bge.n	60b4 <_printf_common+0x14>
    60b2:	0013      	movs	r3, r2
    60b4:	0022      	movs	r2, r4
    60b6:	602b      	str	r3, [r5, #0]
    60b8:	3243      	adds	r2, #67	; 0x43
    60ba:	7812      	ldrb	r2, [r2, #0]
    60bc:	2a00      	cmp	r2, #0
    60be:	d001      	beq.n	60c4 <_printf_common+0x24>
    60c0:	3301      	adds	r3, #1
    60c2:	602b      	str	r3, [r5, #0]
    60c4:	6823      	ldr	r3, [r4, #0]
    60c6:	069b      	lsls	r3, r3, #26
    60c8:	d502      	bpl.n	60d0 <_printf_common+0x30>
    60ca:	682b      	ldr	r3, [r5, #0]
    60cc:	3302      	adds	r3, #2
    60ce:	602b      	str	r3, [r5, #0]
    60d0:	2706      	movs	r7, #6
    60d2:	6823      	ldr	r3, [r4, #0]
    60d4:	401f      	ands	r7, r3
    60d6:	d027      	beq.n	6128 <_printf_common+0x88>
    60d8:	0023      	movs	r3, r4
    60da:	3343      	adds	r3, #67	; 0x43
    60dc:	781b      	ldrb	r3, [r3, #0]
    60de:	1e5a      	subs	r2, r3, #1
    60e0:	4193      	sbcs	r3, r2
    60e2:	6822      	ldr	r2, [r4, #0]
    60e4:	0692      	lsls	r2, r2, #26
    60e6:	d430      	bmi.n	614a <_printf_common+0xaa>
    60e8:	0022      	movs	r2, r4
    60ea:	9901      	ldr	r1, [sp, #4]
    60ec:	3243      	adds	r2, #67	; 0x43
    60ee:	9800      	ldr	r0, [sp, #0]
    60f0:	9e08      	ldr	r6, [sp, #32]
    60f2:	47b0      	blx	r6
    60f4:	1c43      	adds	r3, r0, #1
    60f6:	d025      	beq.n	6144 <_printf_common+0xa4>
    60f8:	2306      	movs	r3, #6
    60fa:	6820      	ldr	r0, [r4, #0]
    60fc:	682a      	ldr	r2, [r5, #0]
    60fe:	68e1      	ldr	r1, [r4, #12]
    6100:	4003      	ands	r3, r0
    6102:	2500      	movs	r5, #0
    6104:	2b04      	cmp	r3, #4
    6106:	d103      	bne.n	6110 <_printf_common+0x70>
    6108:	1a8d      	subs	r5, r1, r2
    610a:	43eb      	mvns	r3, r5
    610c:	17db      	asrs	r3, r3, #31
    610e:	401d      	ands	r5, r3
    6110:	68a3      	ldr	r3, [r4, #8]
    6112:	6922      	ldr	r2, [r4, #16]
    6114:	4293      	cmp	r3, r2
    6116:	dd01      	ble.n	611c <_printf_common+0x7c>
    6118:	1a9b      	subs	r3, r3, r2
    611a:	18ed      	adds	r5, r5, r3
    611c:	2700      	movs	r7, #0
    611e:	42bd      	cmp	r5, r7
    6120:	d120      	bne.n	6164 <_printf_common+0xc4>
    6122:	2000      	movs	r0, #0
    6124:	e010      	b.n	6148 <_printf_common+0xa8>
    6126:	3701      	adds	r7, #1
    6128:	68e3      	ldr	r3, [r4, #12]
    612a:	682a      	ldr	r2, [r5, #0]
    612c:	1a9b      	subs	r3, r3, r2
    612e:	429f      	cmp	r7, r3
    6130:	dad2      	bge.n	60d8 <_printf_common+0x38>
    6132:	0022      	movs	r2, r4
    6134:	2301      	movs	r3, #1
    6136:	3219      	adds	r2, #25
    6138:	9901      	ldr	r1, [sp, #4]
    613a:	9800      	ldr	r0, [sp, #0]
    613c:	9e08      	ldr	r6, [sp, #32]
    613e:	47b0      	blx	r6
    6140:	1c43      	adds	r3, r0, #1
    6142:	d1f0      	bne.n	6126 <_printf_common+0x86>
    6144:	2001      	movs	r0, #1
    6146:	4240      	negs	r0, r0
    6148:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    614a:	2030      	movs	r0, #48	; 0x30
    614c:	18e1      	adds	r1, r4, r3
    614e:	3143      	adds	r1, #67	; 0x43
    6150:	7008      	strb	r0, [r1, #0]
    6152:	0021      	movs	r1, r4
    6154:	1c5a      	adds	r2, r3, #1
    6156:	3145      	adds	r1, #69	; 0x45
    6158:	7809      	ldrb	r1, [r1, #0]
    615a:	18a2      	adds	r2, r4, r2
    615c:	3243      	adds	r2, #67	; 0x43
    615e:	3302      	adds	r3, #2
    6160:	7011      	strb	r1, [r2, #0]
    6162:	e7c1      	b.n	60e8 <_printf_common+0x48>
    6164:	0022      	movs	r2, r4
    6166:	2301      	movs	r3, #1
    6168:	321a      	adds	r2, #26
    616a:	9901      	ldr	r1, [sp, #4]
    616c:	9800      	ldr	r0, [sp, #0]
    616e:	9e08      	ldr	r6, [sp, #32]
    6170:	47b0      	blx	r6
    6172:	1c43      	adds	r3, r0, #1
    6174:	d0e6      	beq.n	6144 <_printf_common+0xa4>
    6176:	3701      	adds	r7, #1
    6178:	e7d1      	b.n	611e <_printf_common+0x7e>
	...

0000617c <_printf_i>:
    617c:	b5f0      	push	{r4, r5, r6, r7, lr}
    617e:	b08b      	sub	sp, #44	; 0x2c
    6180:	9206      	str	r2, [sp, #24]
    6182:	000a      	movs	r2, r1
    6184:	3243      	adds	r2, #67	; 0x43
    6186:	9307      	str	r3, [sp, #28]
    6188:	9005      	str	r0, [sp, #20]
    618a:	9204      	str	r2, [sp, #16]
    618c:	7e0a      	ldrb	r2, [r1, #24]
    618e:	000c      	movs	r4, r1
    6190:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6192:	2a6e      	cmp	r2, #110	; 0x6e
    6194:	d100      	bne.n	6198 <_printf_i+0x1c>
    6196:	e08f      	b.n	62b8 <_printf_i+0x13c>
    6198:	d817      	bhi.n	61ca <_printf_i+0x4e>
    619a:	2a63      	cmp	r2, #99	; 0x63
    619c:	d02c      	beq.n	61f8 <_printf_i+0x7c>
    619e:	d808      	bhi.n	61b2 <_printf_i+0x36>
    61a0:	2a00      	cmp	r2, #0
    61a2:	d100      	bne.n	61a6 <_printf_i+0x2a>
    61a4:	e099      	b.n	62da <_printf_i+0x15e>
    61a6:	2a58      	cmp	r2, #88	; 0x58
    61a8:	d054      	beq.n	6254 <_printf_i+0xd8>
    61aa:	0026      	movs	r6, r4
    61ac:	3642      	adds	r6, #66	; 0x42
    61ae:	7032      	strb	r2, [r6, #0]
    61b0:	e029      	b.n	6206 <_printf_i+0x8a>
    61b2:	2a64      	cmp	r2, #100	; 0x64
    61b4:	d001      	beq.n	61ba <_printf_i+0x3e>
    61b6:	2a69      	cmp	r2, #105	; 0x69
    61b8:	d1f7      	bne.n	61aa <_printf_i+0x2e>
    61ba:	6821      	ldr	r1, [r4, #0]
    61bc:	681a      	ldr	r2, [r3, #0]
    61be:	0608      	lsls	r0, r1, #24
    61c0:	d523      	bpl.n	620a <_printf_i+0x8e>
    61c2:	1d11      	adds	r1, r2, #4
    61c4:	6019      	str	r1, [r3, #0]
    61c6:	6815      	ldr	r5, [r2, #0]
    61c8:	e025      	b.n	6216 <_printf_i+0x9a>
    61ca:	2a73      	cmp	r2, #115	; 0x73
    61cc:	d100      	bne.n	61d0 <_printf_i+0x54>
    61ce:	e088      	b.n	62e2 <_printf_i+0x166>
    61d0:	d808      	bhi.n	61e4 <_printf_i+0x68>
    61d2:	2a6f      	cmp	r2, #111	; 0x6f
    61d4:	d029      	beq.n	622a <_printf_i+0xae>
    61d6:	2a70      	cmp	r2, #112	; 0x70
    61d8:	d1e7      	bne.n	61aa <_printf_i+0x2e>
    61da:	2220      	movs	r2, #32
    61dc:	6809      	ldr	r1, [r1, #0]
    61de:	430a      	orrs	r2, r1
    61e0:	6022      	str	r2, [r4, #0]
    61e2:	e003      	b.n	61ec <_printf_i+0x70>
    61e4:	2a75      	cmp	r2, #117	; 0x75
    61e6:	d020      	beq.n	622a <_printf_i+0xae>
    61e8:	2a78      	cmp	r2, #120	; 0x78
    61ea:	d1de      	bne.n	61aa <_printf_i+0x2e>
    61ec:	0022      	movs	r2, r4
    61ee:	2178      	movs	r1, #120	; 0x78
    61f0:	3245      	adds	r2, #69	; 0x45
    61f2:	7011      	strb	r1, [r2, #0]
    61f4:	4a6c      	ldr	r2, [pc, #432]	; (63a8 <_printf_i+0x22c>)
    61f6:	e030      	b.n	625a <_printf_i+0xde>
    61f8:	000e      	movs	r6, r1
    61fa:	681a      	ldr	r2, [r3, #0]
    61fc:	3642      	adds	r6, #66	; 0x42
    61fe:	1d11      	adds	r1, r2, #4
    6200:	6019      	str	r1, [r3, #0]
    6202:	6813      	ldr	r3, [r2, #0]
    6204:	7033      	strb	r3, [r6, #0]
    6206:	2301      	movs	r3, #1
    6208:	e079      	b.n	62fe <_printf_i+0x182>
    620a:	0649      	lsls	r1, r1, #25
    620c:	d5d9      	bpl.n	61c2 <_printf_i+0x46>
    620e:	1d11      	adds	r1, r2, #4
    6210:	6019      	str	r1, [r3, #0]
    6212:	2300      	movs	r3, #0
    6214:	5ed5      	ldrsh	r5, [r2, r3]
    6216:	2d00      	cmp	r5, #0
    6218:	da03      	bge.n	6222 <_printf_i+0xa6>
    621a:	232d      	movs	r3, #45	; 0x2d
    621c:	9a04      	ldr	r2, [sp, #16]
    621e:	426d      	negs	r5, r5
    6220:	7013      	strb	r3, [r2, #0]
    6222:	4b62      	ldr	r3, [pc, #392]	; (63ac <_printf_i+0x230>)
    6224:	270a      	movs	r7, #10
    6226:	9303      	str	r3, [sp, #12]
    6228:	e02f      	b.n	628a <_printf_i+0x10e>
    622a:	6820      	ldr	r0, [r4, #0]
    622c:	6819      	ldr	r1, [r3, #0]
    622e:	0605      	lsls	r5, r0, #24
    6230:	d503      	bpl.n	623a <_printf_i+0xbe>
    6232:	1d08      	adds	r0, r1, #4
    6234:	6018      	str	r0, [r3, #0]
    6236:	680d      	ldr	r5, [r1, #0]
    6238:	e005      	b.n	6246 <_printf_i+0xca>
    623a:	0640      	lsls	r0, r0, #25
    623c:	d5f9      	bpl.n	6232 <_printf_i+0xb6>
    623e:	680d      	ldr	r5, [r1, #0]
    6240:	1d08      	adds	r0, r1, #4
    6242:	6018      	str	r0, [r3, #0]
    6244:	b2ad      	uxth	r5, r5
    6246:	4b59      	ldr	r3, [pc, #356]	; (63ac <_printf_i+0x230>)
    6248:	2708      	movs	r7, #8
    624a:	9303      	str	r3, [sp, #12]
    624c:	2a6f      	cmp	r2, #111	; 0x6f
    624e:	d018      	beq.n	6282 <_printf_i+0x106>
    6250:	270a      	movs	r7, #10
    6252:	e016      	b.n	6282 <_printf_i+0x106>
    6254:	3145      	adds	r1, #69	; 0x45
    6256:	700a      	strb	r2, [r1, #0]
    6258:	4a54      	ldr	r2, [pc, #336]	; (63ac <_printf_i+0x230>)
    625a:	9203      	str	r2, [sp, #12]
    625c:	681a      	ldr	r2, [r3, #0]
    625e:	6821      	ldr	r1, [r4, #0]
    6260:	1d10      	adds	r0, r2, #4
    6262:	6018      	str	r0, [r3, #0]
    6264:	6815      	ldr	r5, [r2, #0]
    6266:	0608      	lsls	r0, r1, #24
    6268:	d522      	bpl.n	62b0 <_printf_i+0x134>
    626a:	07cb      	lsls	r3, r1, #31
    626c:	d502      	bpl.n	6274 <_printf_i+0xf8>
    626e:	2320      	movs	r3, #32
    6270:	4319      	orrs	r1, r3
    6272:	6021      	str	r1, [r4, #0]
    6274:	2710      	movs	r7, #16
    6276:	2d00      	cmp	r5, #0
    6278:	d103      	bne.n	6282 <_printf_i+0x106>
    627a:	2320      	movs	r3, #32
    627c:	6822      	ldr	r2, [r4, #0]
    627e:	439a      	bics	r2, r3
    6280:	6022      	str	r2, [r4, #0]
    6282:	0023      	movs	r3, r4
    6284:	2200      	movs	r2, #0
    6286:	3343      	adds	r3, #67	; 0x43
    6288:	701a      	strb	r2, [r3, #0]
    628a:	6863      	ldr	r3, [r4, #4]
    628c:	60a3      	str	r3, [r4, #8]
    628e:	2b00      	cmp	r3, #0
    6290:	db5c      	blt.n	634c <_printf_i+0x1d0>
    6292:	2204      	movs	r2, #4
    6294:	6821      	ldr	r1, [r4, #0]
    6296:	4391      	bics	r1, r2
    6298:	6021      	str	r1, [r4, #0]
    629a:	2d00      	cmp	r5, #0
    629c:	d158      	bne.n	6350 <_printf_i+0x1d4>
    629e:	9e04      	ldr	r6, [sp, #16]
    62a0:	2b00      	cmp	r3, #0
    62a2:	d064      	beq.n	636e <_printf_i+0x1f2>
    62a4:	0026      	movs	r6, r4
    62a6:	9b03      	ldr	r3, [sp, #12]
    62a8:	3642      	adds	r6, #66	; 0x42
    62aa:	781b      	ldrb	r3, [r3, #0]
    62ac:	7033      	strb	r3, [r6, #0]
    62ae:	e05e      	b.n	636e <_printf_i+0x1f2>
    62b0:	0648      	lsls	r0, r1, #25
    62b2:	d5da      	bpl.n	626a <_printf_i+0xee>
    62b4:	b2ad      	uxth	r5, r5
    62b6:	e7d8      	b.n	626a <_printf_i+0xee>
    62b8:	6809      	ldr	r1, [r1, #0]
    62ba:	681a      	ldr	r2, [r3, #0]
    62bc:	0608      	lsls	r0, r1, #24
    62be:	d505      	bpl.n	62cc <_printf_i+0x150>
    62c0:	1d11      	adds	r1, r2, #4
    62c2:	6019      	str	r1, [r3, #0]
    62c4:	6813      	ldr	r3, [r2, #0]
    62c6:	6962      	ldr	r2, [r4, #20]
    62c8:	601a      	str	r2, [r3, #0]
    62ca:	e006      	b.n	62da <_printf_i+0x15e>
    62cc:	0649      	lsls	r1, r1, #25
    62ce:	d5f7      	bpl.n	62c0 <_printf_i+0x144>
    62d0:	1d11      	adds	r1, r2, #4
    62d2:	6019      	str	r1, [r3, #0]
    62d4:	6813      	ldr	r3, [r2, #0]
    62d6:	8aa2      	ldrh	r2, [r4, #20]
    62d8:	801a      	strh	r2, [r3, #0]
    62da:	2300      	movs	r3, #0
    62dc:	9e04      	ldr	r6, [sp, #16]
    62de:	6123      	str	r3, [r4, #16]
    62e0:	e054      	b.n	638c <_printf_i+0x210>
    62e2:	681a      	ldr	r2, [r3, #0]
    62e4:	1d11      	adds	r1, r2, #4
    62e6:	6019      	str	r1, [r3, #0]
    62e8:	6816      	ldr	r6, [r2, #0]
    62ea:	2100      	movs	r1, #0
    62ec:	6862      	ldr	r2, [r4, #4]
    62ee:	0030      	movs	r0, r6
    62f0:	f000 f91a 	bl	6528 <memchr>
    62f4:	2800      	cmp	r0, #0
    62f6:	d001      	beq.n	62fc <_printf_i+0x180>
    62f8:	1b80      	subs	r0, r0, r6
    62fa:	6060      	str	r0, [r4, #4]
    62fc:	6863      	ldr	r3, [r4, #4]
    62fe:	6123      	str	r3, [r4, #16]
    6300:	2300      	movs	r3, #0
    6302:	9a04      	ldr	r2, [sp, #16]
    6304:	7013      	strb	r3, [r2, #0]
    6306:	e041      	b.n	638c <_printf_i+0x210>
    6308:	6923      	ldr	r3, [r4, #16]
    630a:	0032      	movs	r2, r6
    630c:	9906      	ldr	r1, [sp, #24]
    630e:	9805      	ldr	r0, [sp, #20]
    6310:	9d07      	ldr	r5, [sp, #28]
    6312:	47a8      	blx	r5
    6314:	1c43      	adds	r3, r0, #1
    6316:	d043      	beq.n	63a0 <_printf_i+0x224>
    6318:	6823      	ldr	r3, [r4, #0]
    631a:	2500      	movs	r5, #0
    631c:	079b      	lsls	r3, r3, #30
    631e:	d40f      	bmi.n	6340 <_printf_i+0x1c4>
    6320:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6322:	68e0      	ldr	r0, [r4, #12]
    6324:	4298      	cmp	r0, r3
    6326:	da3d      	bge.n	63a4 <_printf_i+0x228>
    6328:	0018      	movs	r0, r3
    632a:	e03b      	b.n	63a4 <_printf_i+0x228>
    632c:	0022      	movs	r2, r4
    632e:	2301      	movs	r3, #1
    6330:	3219      	adds	r2, #25
    6332:	9906      	ldr	r1, [sp, #24]
    6334:	9805      	ldr	r0, [sp, #20]
    6336:	9e07      	ldr	r6, [sp, #28]
    6338:	47b0      	blx	r6
    633a:	1c43      	adds	r3, r0, #1
    633c:	d030      	beq.n	63a0 <_printf_i+0x224>
    633e:	3501      	adds	r5, #1
    6340:	68e3      	ldr	r3, [r4, #12]
    6342:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6344:	1a9b      	subs	r3, r3, r2
    6346:	429d      	cmp	r5, r3
    6348:	dbf0      	blt.n	632c <_printf_i+0x1b0>
    634a:	e7e9      	b.n	6320 <_printf_i+0x1a4>
    634c:	2d00      	cmp	r5, #0
    634e:	d0a9      	beq.n	62a4 <_printf_i+0x128>
    6350:	9e04      	ldr	r6, [sp, #16]
    6352:	0028      	movs	r0, r5
    6354:	0039      	movs	r1, r7
    6356:	f7fe ff4b 	bl	51f0 <__aeabi_uidivmod>
    635a:	9b03      	ldr	r3, [sp, #12]
    635c:	3e01      	subs	r6, #1
    635e:	5c5b      	ldrb	r3, [r3, r1]
    6360:	0028      	movs	r0, r5
    6362:	7033      	strb	r3, [r6, #0]
    6364:	0039      	movs	r1, r7
    6366:	f7fe febd 	bl	50e4 <__udivsi3>
    636a:	1e05      	subs	r5, r0, #0
    636c:	d1f1      	bne.n	6352 <_printf_i+0x1d6>
    636e:	2f08      	cmp	r7, #8
    6370:	d109      	bne.n	6386 <_printf_i+0x20a>
    6372:	6823      	ldr	r3, [r4, #0]
    6374:	07db      	lsls	r3, r3, #31
    6376:	d506      	bpl.n	6386 <_printf_i+0x20a>
    6378:	6863      	ldr	r3, [r4, #4]
    637a:	6922      	ldr	r2, [r4, #16]
    637c:	4293      	cmp	r3, r2
    637e:	dc02      	bgt.n	6386 <_printf_i+0x20a>
    6380:	2330      	movs	r3, #48	; 0x30
    6382:	3e01      	subs	r6, #1
    6384:	7033      	strb	r3, [r6, #0]
    6386:	9b04      	ldr	r3, [sp, #16]
    6388:	1b9b      	subs	r3, r3, r6
    638a:	6123      	str	r3, [r4, #16]
    638c:	9b07      	ldr	r3, [sp, #28]
    638e:	aa09      	add	r2, sp, #36	; 0x24
    6390:	9300      	str	r3, [sp, #0]
    6392:	0021      	movs	r1, r4
    6394:	9b06      	ldr	r3, [sp, #24]
    6396:	9805      	ldr	r0, [sp, #20]
    6398:	f7ff fe82 	bl	60a0 <_printf_common>
    639c:	1c43      	adds	r3, r0, #1
    639e:	d1b3      	bne.n	6308 <_printf_i+0x18c>
    63a0:	2001      	movs	r0, #1
    63a2:	4240      	negs	r0, r0
    63a4:	b00b      	add	sp, #44	; 0x2c
    63a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63a8:	00008be2 	.word	0x00008be2
    63ac:	00008bd1 	.word	0x00008bd1

000063b0 <_sbrk_r>:
    63b0:	2300      	movs	r3, #0
    63b2:	b570      	push	{r4, r5, r6, lr}
    63b4:	4c06      	ldr	r4, [pc, #24]	; (63d0 <_sbrk_r+0x20>)
    63b6:	0005      	movs	r5, r0
    63b8:	0008      	movs	r0, r1
    63ba:	6023      	str	r3, [r4, #0]
    63bc:	f7fb fa66 	bl	188c <_sbrk>
    63c0:	1c43      	adds	r3, r0, #1
    63c2:	d103      	bne.n	63cc <_sbrk_r+0x1c>
    63c4:	6823      	ldr	r3, [r4, #0]
    63c6:	2b00      	cmp	r3, #0
    63c8:	d000      	beq.n	63cc <_sbrk_r+0x1c>
    63ca:	602b      	str	r3, [r5, #0]
    63cc:	bd70      	pop	{r4, r5, r6, pc}
    63ce:	46c0      	nop			; (mov r8, r8)
    63d0:	20000df0 	.word	0x20000df0

000063d4 <__sread>:
    63d4:	b570      	push	{r4, r5, r6, lr}
    63d6:	000c      	movs	r4, r1
    63d8:	250e      	movs	r5, #14
    63da:	5f49      	ldrsh	r1, [r1, r5]
    63dc:	f000 f8b2 	bl	6544 <_read_r>
    63e0:	2800      	cmp	r0, #0
    63e2:	db03      	blt.n	63ec <__sread+0x18>
    63e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    63e6:	181b      	adds	r3, r3, r0
    63e8:	6563      	str	r3, [r4, #84]	; 0x54
    63ea:	bd70      	pop	{r4, r5, r6, pc}
    63ec:	89a3      	ldrh	r3, [r4, #12]
    63ee:	4a02      	ldr	r2, [pc, #8]	; (63f8 <__sread+0x24>)
    63f0:	4013      	ands	r3, r2
    63f2:	81a3      	strh	r3, [r4, #12]
    63f4:	e7f9      	b.n	63ea <__sread+0x16>
    63f6:	46c0      	nop			; (mov r8, r8)
    63f8:	ffffefff 	.word	0xffffefff

000063fc <__swrite>:
    63fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63fe:	001f      	movs	r7, r3
    6400:	898b      	ldrh	r3, [r1, #12]
    6402:	0005      	movs	r5, r0
    6404:	000c      	movs	r4, r1
    6406:	0016      	movs	r6, r2
    6408:	05db      	lsls	r3, r3, #23
    640a:	d505      	bpl.n	6418 <__swrite+0x1c>
    640c:	230e      	movs	r3, #14
    640e:	5ec9      	ldrsh	r1, [r1, r3]
    6410:	2200      	movs	r2, #0
    6412:	2302      	movs	r3, #2
    6414:	f000 f874 	bl	6500 <_lseek_r>
    6418:	89a3      	ldrh	r3, [r4, #12]
    641a:	4a05      	ldr	r2, [pc, #20]	; (6430 <__swrite+0x34>)
    641c:	0028      	movs	r0, r5
    641e:	4013      	ands	r3, r2
    6420:	81a3      	strh	r3, [r4, #12]
    6422:	0032      	movs	r2, r6
    6424:	230e      	movs	r3, #14
    6426:	5ee1      	ldrsh	r1, [r4, r3]
    6428:	003b      	movs	r3, r7
    642a:	f000 f81f 	bl	646c <_write_r>
    642e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6430:	ffffefff 	.word	0xffffefff

00006434 <__sseek>:
    6434:	b570      	push	{r4, r5, r6, lr}
    6436:	000c      	movs	r4, r1
    6438:	250e      	movs	r5, #14
    643a:	5f49      	ldrsh	r1, [r1, r5]
    643c:	f000 f860 	bl	6500 <_lseek_r>
    6440:	89a3      	ldrh	r3, [r4, #12]
    6442:	1c42      	adds	r2, r0, #1
    6444:	d103      	bne.n	644e <__sseek+0x1a>
    6446:	4a05      	ldr	r2, [pc, #20]	; (645c <__sseek+0x28>)
    6448:	4013      	ands	r3, r2
    644a:	81a3      	strh	r3, [r4, #12]
    644c:	bd70      	pop	{r4, r5, r6, pc}
    644e:	2280      	movs	r2, #128	; 0x80
    6450:	0152      	lsls	r2, r2, #5
    6452:	4313      	orrs	r3, r2
    6454:	81a3      	strh	r3, [r4, #12]
    6456:	6560      	str	r0, [r4, #84]	; 0x54
    6458:	e7f8      	b.n	644c <__sseek+0x18>
    645a:	46c0      	nop			; (mov r8, r8)
    645c:	ffffefff 	.word	0xffffefff

00006460 <__sclose>:
    6460:	b510      	push	{r4, lr}
    6462:	230e      	movs	r3, #14
    6464:	5ec9      	ldrsh	r1, [r1, r3]
    6466:	f000 f815 	bl	6494 <_close_r>
    646a:	bd10      	pop	{r4, pc}

0000646c <_write_r>:
    646c:	b570      	push	{r4, r5, r6, lr}
    646e:	0005      	movs	r5, r0
    6470:	0008      	movs	r0, r1
    6472:	0011      	movs	r1, r2
    6474:	2200      	movs	r2, #0
    6476:	4c06      	ldr	r4, [pc, #24]	; (6490 <_write_r+0x24>)
    6478:	6022      	str	r2, [r4, #0]
    647a:	001a      	movs	r2, r3
    647c:	f7fb f9de 	bl	183c <_write>
    6480:	1c43      	adds	r3, r0, #1
    6482:	d103      	bne.n	648c <_write_r+0x20>
    6484:	6823      	ldr	r3, [r4, #0]
    6486:	2b00      	cmp	r3, #0
    6488:	d000      	beq.n	648c <_write_r+0x20>
    648a:	602b      	str	r3, [r5, #0]
    648c:	bd70      	pop	{r4, r5, r6, pc}
    648e:	46c0      	nop			; (mov r8, r8)
    6490:	20000df0 	.word	0x20000df0

00006494 <_close_r>:
    6494:	2300      	movs	r3, #0
    6496:	b570      	push	{r4, r5, r6, lr}
    6498:	4c06      	ldr	r4, [pc, #24]	; (64b4 <_close_r+0x20>)
    649a:	0005      	movs	r5, r0
    649c:	0008      	movs	r0, r1
    649e:	6023      	str	r3, [r4, #0]
    64a0:	f7fb fa06 	bl	18b0 <_close>
    64a4:	1c43      	adds	r3, r0, #1
    64a6:	d103      	bne.n	64b0 <_close_r+0x1c>
    64a8:	6823      	ldr	r3, [r4, #0]
    64aa:	2b00      	cmp	r3, #0
    64ac:	d000      	beq.n	64b0 <_close_r+0x1c>
    64ae:	602b      	str	r3, [r5, #0]
    64b0:	bd70      	pop	{r4, r5, r6, pc}
    64b2:	46c0      	nop			; (mov r8, r8)
    64b4:	20000df0 	.word	0x20000df0

000064b8 <_fstat_r>:
    64b8:	2300      	movs	r3, #0
    64ba:	b570      	push	{r4, r5, r6, lr}
    64bc:	4c06      	ldr	r4, [pc, #24]	; (64d8 <_fstat_r+0x20>)
    64be:	0005      	movs	r5, r0
    64c0:	0008      	movs	r0, r1
    64c2:	0011      	movs	r1, r2
    64c4:	6023      	str	r3, [r4, #0]
    64c6:	f7fb f9f6 	bl	18b6 <_fstat>
    64ca:	1c43      	adds	r3, r0, #1
    64cc:	d103      	bne.n	64d6 <_fstat_r+0x1e>
    64ce:	6823      	ldr	r3, [r4, #0]
    64d0:	2b00      	cmp	r3, #0
    64d2:	d000      	beq.n	64d6 <_fstat_r+0x1e>
    64d4:	602b      	str	r3, [r5, #0]
    64d6:	bd70      	pop	{r4, r5, r6, pc}
    64d8:	20000df0 	.word	0x20000df0

000064dc <_isatty_r>:
    64dc:	2300      	movs	r3, #0
    64de:	b570      	push	{r4, r5, r6, lr}
    64e0:	4c06      	ldr	r4, [pc, #24]	; (64fc <_isatty_r+0x20>)
    64e2:	0005      	movs	r5, r0
    64e4:	0008      	movs	r0, r1
    64e6:	6023      	str	r3, [r4, #0]
    64e8:	f7fb f9ea 	bl	18c0 <_isatty>
    64ec:	1c43      	adds	r3, r0, #1
    64ee:	d103      	bne.n	64f8 <_isatty_r+0x1c>
    64f0:	6823      	ldr	r3, [r4, #0]
    64f2:	2b00      	cmp	r3, #0
    64f4:	d000      	beq.n	64f8 <_isatty_r+0x1c>
    64f6:	602b      	str	r3, [r5, #0]
    64f8:	bd70      	pop	{r4, r5, r6, pc}
    64fa:	46c0      	nop			; (mov r8, r8)
    64fc:	20000df0 	.word	0x20000df0

00006500 <_lseek_r>:
    6500:	b570      	push	{r4, r5, r6, lr}
    6502:	0005      	movs	r5, r0
    6504:	0008      	movs	r0, r1
    6506:	0011      	movs	r1, r2
    6508:	2200      	movs	r2, #0
    650a:	4c06      	ldr	r4, [pc, #24]	; (6524 <_lseek_r+0x24>)
    650c:	6022      	str	r2, [r4, #0]
    650e:	001a      	movs	r2, r3
    6510:	f7fb f9d8 	bl	18c4 <_lseek>
    6514:	1c43      	adds	r3, r0, #1
    6516:	d103      	bne.n	6520 <_lseek_r+0x20>
    6518:	6823      	ldr	r3, [r4, #0]
    651a:	2b00      	cmp	r3, #0
    651c:	d000      	beq.n	6520 <_lseek_r+0x20>
    651e:	602b      	str	r3, [r5, #0]
    6520:	bd70      	pop	{r4, r5, r6, pc}
    6522:	46c0      	nop			; (mov r8, r8)
    6524:	20000df0 	.word	0x20000df0

00006528 <memchr>:
    6528:	b2c9      	uxtb	r1, r1
    652a:	1882      	adds	r2, r0, r2
    652c:	4290      	cmp	r0, r2
    652e:	d101      	bne.n	6534 <memchr+0xc>
    6530:	2000      	movs	r0, #0
    6532:	4770      	bx	lr
    6534:	7803      	ldrb	r3, [r0, #0]
    6536:	428b      	cmp	r3, r1
    6538:	d0fb      	beq.n	6532 <memchr+0xa>
    653a:	3001      	adds	r0, #1
    653c:	e7f6      	b.n	652c <memchr+0x4>

0000653e <__malloc_lock>:
    653e:	4770      	bx	lr

00006540 <__malloc_unlock>:
    6540:	4770      	bx	lr
	...

00006544 <_read_r>:
    6544:	b570      	push	{r4, r5, r6, lr}
    6546:	0005      	movs	r5, r0
    6548:	0008      	movs	r0, r1
    654a:	0011      	movs	r1, r2
    654c:	2200      	movs	r2, #0
    654e:	4c06      	ldr	r4, [pc, #24]	; (6568 <_read_r+0x24>)
    6550:	6022      	str	r2, [r4, #0]
    6552:	001a      	movs	r2, r3
    6554:	f7fb f950 	bl	17f8 <_read>
    6558:	1c43      	adds	r3, r0, #1
    655a:	d103      	bne.n	6564 <_read_r+0x20>
    655c:	6823      	ldr	r3, [r4, #0]
    655e:	2b00      	cmp	r3, #0
    6560:	d000      	beq.n	6564 <_read_r+0x20>
    6562:	602b      	str	r3, [r5, #0]
    6564:	bd70      	pop	{r4, r5, r6, pc}
    6566:	46c0      	nop			; (mov r8, r8)
    6568:	20000df0 	.word	0x20000df0
    656c:	42000400 	.word	0x42000400
    6570:	42000800 	.word	0x42000800
    6574:	42000c00 	.word	0x42000c00
    6578:	42001000 	.word	0x42001000
    657c:	42001400 	.word	0x42001400
    6580:	42001800 	.word	0x42001800
    6584:	000010b2 	.word	0x000010b2
    6588:	000010ae 	.word	0x000010ae
    658c:	000010ae 	.word	0x000010ae
    6590:	000010e0 	.word	0x000010e0
    6594:	000010e0 	.word	0x000010e0
    6598:	000010ca 	.word	0x000010ca
    659c:	000010b8 	.word	0x000010b8
    65a0:	000010d0 	.word	0x000010d0
    65a4:	000012a4 	.word	0x000012a4
    65a8:	00001284 	.word	0x00001284
    65ac:	00001284 	.word	0x00001284
    65b0:	000012da 	.word	0x000012da
    65b4:	00001296 	.word	0x00001296
    65b8:	000012b2 	.word	0x000012b2
    65bc:	00001288 	.word	0x00001288
    65c0:	000012c0 	.word	0x000012c0
    65c4:	6e697355 	.word	0x6e697355
    65c8:	61682067 	.word	0x61682067
    65cc:	6f636472 	.word	0x6f636472
    65d0:	20646564 	.word	0x20646564
    65d4:	756c6176 	.word	0x756c6176
    65d8:	2e2e7365 	.word	0x2e2e7365
    65dc:	00000d2e 	.word	0x00000d2e
    65e0:	64616552 	.word	0x64616552
    65e4:	6f742079 	.word	0x6f742079
    65e8:	61727420 	.word	0x61727420
    65ec:	696d736e 	.word	0x696d736e
    65f0:	65722074 	.word	0x65722074
    65f4:	6e6f7073 	.word	0x6e6f7073
    65f8:	000d6573 	.word	0x000d6573
    65fc:	7473614c 	.word	0x7473614c
    6600:	72617020 	.word	0x72617020
    6604:	00000d74 	.word	0x00000d74

00006608 <PARAMETER_d>:
    6608:	00000142 00000000 000000e4 00000000     B...............
    6618:	f1fc0c8d b3821488 6657e0fc 5e472f84     ..........Wf./G^

00006628 <FIXED_BASE_TABLE>:
    6628:	a703e631 e18a34f3 1d502b5f 287460bf     1....4.._+P..`t(
    6638:	e4f90353 e02e62f7 8b86acde 0c3ba037     S....b......7.;.
    6648:	b0937edc 90bf0f98 24f0c555 740b7c78     .~......U..$x|.t
    6658:	23a01366 b3212391 3a9557a5 4ffcf5b9     f..#.#!..W.:...O
    6668:	abda42bb 297afccb 556c97c6 5948d137     .B....z)..lU7.HY
    6678:	3330684c a8189a39 0a341f27 0caf2b72     Lh039...'.4.r+..
    6688:	fd188787 3a8ba018 88dd12a8 55461281     .......:......FU
    6698:	c09f9b77 b0b3cc33 b84d2049 1baeeaf8     w...3...I M.....
    66a8:	11faf900 006425a6 e1a6f789 18f7cd12     .....%d.........
    66b8:	12556066 6dccf09a ace7b6eb 448e05ee     f`U....m.......D
    66c8:	9d2829b0 bf2f3368 2957bdb4 6d911dcb     .)(.h3/...W)...m
    66d8:	dc3c03ee 9f2353db babee501 06c54305     ..<..S#......C..
    66e8:	3dafa125 2eaf4571 648a364d 72963058     %..=qE..M6.dX0.r
    66f8:	9d313ef2 61b7771f bfe2b069 4f41c7f8     .>1..w.ai.....AO
    6708:	599790ac 408623ae 44330a42 4d338586     ...Y.#.@B.3D..3M
    6718:	9cdd7487 fc569664 e598e114 74df72e0     .t..d.V......r.t
    6728:	913c110b c9a06325 5fe4b0d8 076bd411     ..<.%c....._..k.
    6738:	d6bff3d9 76619e65 7cee3a08 24924014     ....e.av.:.|.@.$
    6748:	48965a73 d695b961 8829f706 28aac8a2     sZ.Ha.....)....(
    6758:	29f7a57b 41f1c053 9f03e00e 441ca9e8     {..)S..A.......D
    6768:	8bf7241e e1aa38ab c832b7f4 58f28caf     .$...8....2....X
    6778:	fa5400c6 cadaf8b8 284e863e 34b6d106     ..T.....>.N(...4
    6788:	3af15097 f5498cab 017d9c49 6dbe7790     .P.:..I.I.}..w.m
    6798:	1448e8bc 63bf76a8 f23ae006 6371925b     ..H..v.c..:.[.qc
    67a8:	bded81fa c5e2c721 d68056ab 4ede70ee     ....!....V...p.N
    67b8:	b4975810 8f3cd9b5 2f0a9aa8 4752fd19     .X....<..../..RG
    67c8:	1f734414 318794eb c8468662 11ddf7d2     .Ds....1b.F.....
    67d8:	72b1a34e 2613b06f 7ab06770 465575b3     N..ro..&pg.z.uUF
    67e8:	82638d2b 40b9845f 790298ce 48894050     +.c._..@...yP@.H
    67f8:	01b4f131 bedb93a5 2889b2fb 04f3560d     1..........(.V..
    6808:	115b278b 457dd875 4d92858a 56f25ee5     .'[.u.}E...M.^.V
    6818:	ce0c977e 92d4c1cd 87d74996 078fca41     ~........I..A...
    6828:	76cc22a1 3bbb2ded 3ddc2bf6 117b2885     .".v.-.;.+.=.({.
    6838:	b9c2baa2 43f3767c e0ea8a8f 73079e25     ....|v.C....%..s
    6848:	5a15796d 0177992b 80d9ef92 2e777214     my.Z+.w......rw.
    6858:	67372916 be098835 7af7576d 258f176b     .)7g5...mW.zk..%
    6868:	6168391b 308338fd 9a7353a4 7285925f     .9ha.8.0.Ss._..r
    6878:	4fe85114 862c0fd0 423aeb51 53259ee7     .Q.O..,.Q.:B..%S
    6888:	4b3b1a68 fe0031a8 1fa071fc 1a4f1d66     h.;K.1...q..f.O.
    6898:	8dc928a7 2ddd5416 df196a6a 60185c1a     .(...T.-jj...\.`
    68a8:	dc6da9b4 49809717 4dcffc03 6062094b     ..m....I...MK.b`
    68b8:	05fa7e8d a41ea6fa 277148a0 4a4fe06f     .~.......Hq'o.OJ
    68c8:	ee9e80f0 7bb253a9 ccb11733 419a928b     .....S.{3......A
    68d8:	6a9a039e 84323be6 972814bb 01b2d1ae     ...j.;2...(.....
    68e8:	d3051231 a7588584 cc979dd7 54df1e20     1.....X..... ..T
    68f8:	3e2f22dd 91d906fe 5fdf1a0f 4e36e997     ."/>......._..6N
    6908:	6b747634 d8187174 eee13433 3e5e31ba     4vtktq..34...1^>
    6918:	9573baa3 e4da8097 7cfe77c6 4b852ad9     ..s......w.|.*.K
    6928:	14418b9e e08b3467 2fe6ef88 283d719b     ..A.g4...../.q=(
    6938:	e45c180b b7339d2d 11d2d5c8 75acfcef     ..\.-.3........u
    6948:	8c561876 8f40777a a7134c4b 0c54ac40     v.V.zw@.KL..@.T.
    6958:	66baee08 b92e287d 06a188bf 6f357e50     ...f}(......P~5o
    6968:	ed1e6971 c5903319 91dafd40 747c45ef     qi...3..@....E|t
    6978:	1d2f816e de4086a9 b3b3ef7d 5dcb27ed     n./...@.}....'.]
    6988:	fa1dd2ee 43fdc46c 70966498 51551f9f     ....l..C.d.p..UQ
    6998:	61ed9bdc b54534f7 073fb07f 453455b3     ...a.4E...?..U4E
    69a8:	83cab70b f24773e3 758cf4df 679be25e     .....sG....u^..g
    69b8:	943eee29 da17edf2 d6dc0f66 3dc9e5b8     ).>.....f......=
    69c8:	413fb75b 56a50cba c5a8537f 1e65315b     [.?A...V.S..[1e.
    69d8:	802c7213 5ff90242 f425252e 73c9d8c8     .r,.B.._.%%....s
    69e8:	33198c8f 3c637b86 ed414f33 534f84b3     ...3.{c<3OA...OS
    69f8:	dedd6902 ad313e72 1cdf33af 5ed57e94     .i..r>1..3...~.^
    6a08:	2a57306e 5a6fe01d 344713f9 73b63dea     n0W*..oZ..G4.=.s
    6a18:	0f1c2bf3 39cb7057 9f1a18db 2df8c6e4     .+..Wp.9.......-
    6a28:	677797e4 661bc349 bebe9062 501ae7cb     ..wgI..fb......P
    6a38:	e8959643 5b52a88d 11c01d51 03727528     C.....R[Q...(ur.
    6a48:	301bb928 010c57a2 55554fc6 378b3171     (..0.W...OUUq1.7
    6a58:	29a02cf1 f883fa42 50d7db29 5f0047b8     .,.)B...)..P.G._
    6a68:	28402daa 4d247ae3 a850a2bc 0d030627     .-@(.z$M..P.'...
    6a78:	88a443f5 b4e65d9a 2d6db089 6ec9686b     .C...]....m-kh.n
    6a88:	fea1d987 de202e08 f28d7600 5c64e1d3     ...... ..v....d\
    6a98:	f661bfb7 157d17be dd75334c 56392d36     ..a...}.L3u.6-9V
    6aa8:	bd19155c e25478d8 3d336afd 146d4f2d     \....xT..j3=-Om.
    6ab8:	f94e15e8 9bfbe00b 6adf10c0 2b185a9a     ..N........j.Z.+
    6ac8:	ed52ab7b 926527b3 73101e80 67997e14     {.R..'e....s.~.g
    6ad8:	947cc541 b58f4ff4 fac99a7a 36f800c7     A.|..O..z......6
    6ae8:	400456d9 d0302e32 40bc697b 4372e436     .V.@2.0.{i.@6.rC
    6af8:	4750d898 9144cabb c9a23cbf 75d25afa     ..PG..D..<...Z.u
    6b08:	7655cbfe 79459176 17fc4b07 74db2166     ..Uvv.Ey.K..f!.t
    6b18:	2566d0c9 7057b224 08417b23 1d543b59     ..f%$.Wp#{A.Y;T.
    6b28:	44428783 19c280b4 8b6cc3ef 352309fd     ..BD......l...#5
    6b38:	c068ae72 37833d6a 23c019f4 4ec0671a     r.h.j=.7...#.g.N
    6b48:	a3d05bb5 9d9836e1 f224efe3 44fe1adf     .[...6....$....D
    6b58:	e57efb4a a296bc3c 35a14150 2efec868     J.~.<...PA.5h...
    6b68:	fb194bca 2fe19c09 953cd206 18cc07d3     .K...../..<.....
    6b78:	c9c0b9e0 5bdff217 581abcee 671aa756     .......[...XV..g
    6b88:	28f7d1a2 e1cc33ae 37a0a3fe 1b6f2549     ...(.3.....7I%o.
    6b98:	65babb83 51503d16 d5889211 74b95636     ...e.=PQ....6V.t
    6ba8:	ea96f869 bdb97ae4 9e2510bd 1507ce18     i....z....%.....
    6bb8:	fab93b13 796e4d54 05960929 6a81765f     .;..TMny)..._v.j
    6bc8:	e5a833ed 2e940521 b245f644 3bdea532     .3..!...D.E.2..;
    6bd8:	ffd52693 bea76975 ba6d4ed6 64b94848     .&..ui...Nm.HH.d
    6be8:	94e33ec7 9db52d01 55639f25 71cf65da     .>...-..%.cU.e.q
    6bf8:	db5a8138 ede73b1f 6c62dc22 12e4d13b     8.Z..;..".bl;...
    6c08:	65185517 9d19b0c2 57b5fdd0 77a011d2     .U.e.......W...w
    6c18:	aecd84e4 1fedc5ca 1e3492d1 46844e15     ..........4..N.F
    6c28:	904220df 7a423a31 47e8f099 5b3165c7     . B.1:Bz...G.e1[
    6c38:	df35e22e 1c665eea fc45595b 7802b556     ..5..^f.[YE.V..x
    6c48:	015bd2de 85a2def4 957166ad 17f2ab87     ..[......fq.....
    6c58:	2060c1e5 19cf6d35 be408e6a 122a7ad1     ..` 5m..j.@..z*.
    6c68:	645bf766 5b79bbc8 4d0adacf 20fb009d     f.[d..y[...M... 
    6c78:	2ba28538 97526a27 0d420bde 7041b4e9     8..+'jR...B...Ap
    6c88:	58dab057 3b301133 f0d24243 3d398b66     W..X3.0;CB..f.9=
    6c98:	03cd4708 91a5999a cd938096 1eae2409     .G...........$..
    6ca8:	4c36108c 66dd6b60 89081968 17130837     ..6L`k.fh...7...
    6cb8:	7125dcfd 57cad691 9704f1ca 34b06cb8     ..%q...W.....l.4
    6cc8:	1f35abf2 dcafe8e7 8d544db9 69833119     ..5......MT..1.i
    6cd8:	43af075b 62876766 559d2b6d 200950e5     [..Cfg.bm+.U.P. 
    6ce8:	ecdd9074 d4f63fc3 42ac13a2 74733171     t....?.....Bq1st
    6cf8:	05319356 96b00308 244378ba 2c20ffe0     V.1......xC$.. ,
    6d08:	d26ac01a 4889511a 9997fcf6 4ee32721     ..j..Q.H....!'.N
    6d18:	0f0bf8ea 15ffe6e7 a6d0a6d7 6b617fb4     ..............ak
    6d28:	c52f7324 4916dca1 86468277 3c8269f0     $s/....Iw.F..i.<
    6d38:	c837e04b c24210c4 915a542c 4e480b4f     K.7...B.,TZ.O.HN
    6d48:	9a7fe35e c5fef3b0 44fd84b2 31a501de     ^..........D...1
    6d58:	40a407b9 79f29e49 a5cce5ab 0ba7e03c     ...@I..y....<...
    6d68:	8a74d8ea a7a8b205 0e26dadc 46f4c781     ..t.......&....F
    6d78:	94a1128a 46171ace 5495a811 44db5502     .......F...T.U.D
    6d88:	4bf18d5c 7f889e1a 43f306b2 4d4f172a     \..K.......C*.OM
    6d98:	bb1cffad 33a99766 24d39aca 62547759     ....f..3...$YwTb
    6da8:	c225136e d855230e 78d9211d 1c544dd0     n.%..#U..!.x.MT.
    6db8:	f63f63ba 12fe9969 949dd382 069af1dc     .c?.i...........
    6dc8:	cfe5c256 305bcf40 4bbbb595 63ae9092     V...@.[0...K...c
    6dd8:	93b7de06 e4510977 9fc0043e 09780cf3     ....w.Q.>.....x.
    6de8:	eb798871 827af8e7 77577a37 3ace8a6c     q.y...z.7zWwl..:
    6df8:	32e055ba 79df0613 aacea92b 561dc07a     .U.2...y+...z..V
    6e08:	820d2673 7e4422d9 e0af5348 6b85df83     s&..."D~HS.....k
    6e18:	ded8526b 1f151ac1 157142bd 35ead8e5     kR.......Bq....5
    6e28:	33c79dd4 6da6ef6c 2594fde4 5f2ea04d     ...3l..m...%M.._
    6e38:	c027d5fa 91037d0c 07b0331b 53b54010     ..'..}...3...@.S
    6e48:	3d4ba5a3 810f198a 9ba94195 4463bd25     ..K=.....A..%.cD
    6e58:	ec2acf9e 32b894ac d64349ce 78711761     ..*....2.IC.a.qx
    6e68:	f51fe211 253ae1b3 535b6463 409e4b3f     ......:%cd[S?K.@
    6e78:	da5e49de 3a236d10 9c21336a 19d2b102     .I^..m#:j3!.....
    6e88:	36aadd90 2835f404 05190b19 0942a315     ...6..5(......B.
    6e98:	76828279 c1891318 ca8e1f9c 3afe96c3     y..v...........:
    6ea8:	91230693 9f1801b4 625fd091 39e28db8     ..#......._b...9
    6eb8:	5dd44c8e 9fab5035 729b280d 145155da     .L.]5P...(.r.UQ.
    6ec8:	1d4d76d5 d3ccf810 8c2b6c68 5a0faa1a     .vM.....hl+....Z
    6ed8:	cb54ea8a 3cc66c84 f566c773 51052ce3     ..T..l.<s.f..,.Q
    6ee8:	65ae9ff5 3bee14de 01ccf024 7586118a     ...e...;$......u
    6ef8:	896bf15e 089e791c 261d93d6 35ff022d     ^.k..y.....&-..5
    6f08:	8f7d1cf9 cd3ce13d 95b7b8f6 4f1de98f     ..}.=.<........O
    6f18:	62dc41b4 51e68a24 23f6dd29 61ad9e3c     .A.b$..Q)..#<..a
    6f28:	80ebdb51 584fea64 3f9decf3 5d52fe07     Q...d.OX...?..R]
    6f38:	adf336d5 9afe483e 80b1696a 1dfa03c9     .6..>H..ji......
    6f48:	ff819a19 55f73d47 361100ed 697bf55d     ....G=.U...6].{i
    6f58:	46399419 ded48044 7fce259f 618c9446     ..9FD....%..F..a
    6f68:	f08ef50c f2597ff1 8dd933c0 07c935b9     ......Y..3...5..
    6f78:	78ded5f6 bb758cbc af13148f 1e9a0d06     ...x..u.........
    6f88:	7f4cd4db 879ce145 962d4994 28396ca1     ..L.E....I-..l9(
    6f98:	c57605c3 f5095a3d a4c527b1 1e570f3d     ..v.=Z...'..=.W.
    6fa8:	04935787 2af69a39 fdd01cce 591ee376     .W..9..*....v..Y
    6fb8:	88bc8633 f77b58df b2f395d1 5464d651     3....X{.....Q.dT
    6fc8:	1e9a86ae afbc096b f65b6b28 6ce2df4b     ....k...(k[.K..l
    6fd8:	2e9d3e08 3b3a828d 8d2d66d0 6382011d     .>....:;.f-....c
    6fe8:	4d3d193d 94987ca6 3b6d56af 50ddf70d     =.=M.|...Vm;...P
    6ff8:	c8ad15a9 8d5df67c bc5b1f92 39208098     ....|.]...[... 9
    7008:	dfd5a4fb ce99f520 b86a7ba9 323bbc87     .... ....{j...;2
    7018:	d803c789 e13f88a8 f2200055 56ffdcbd     ......?.U. ....V
    7028:	1b24c72d 3aff0da3 460c0c16 70011566     -.$....:...Ff..p
    7038:	3ac46a13 76f7b7f5 b7077bc2 1c069bfe     .j.:...v.{......
    7048:	a14a3c36 8f47193c f088de3d 6d73e34a     6<J.<.G.=...J.sm
    7058:	317d6634 634b2bd9 b77f1ec8 5b404738     4f}1.+Kc....8G@[
    7068:	1ca1cb1d f34fabb7 ca546a46 054abbca     ......O.FjT...J.
    7078:	08eda660 e8cdcadd 958bdef1 6971abbf     `.............qi
    7088:	dddb4eaf 41338557 b079b67c 1e158585     .N..W.3A|.y.....
    7098:	cfa26068 d2270474 b3cea469 53b36d32     h`..t.'.i...2m.S
    70a8:	6c543d08 011523c1 5f73314e 4668e92c     .=Tl.#..N1s_,.hF
    70b8:	4117acd1 baef3ebe a713931a 04037d1a     ...A.>.......}..
    70c8:	e390c68d 68e118e4 a44c1575 6b80cd55     .......hu.L.U..k
    70d8:	5729c032 7307ea8a eee99ab2 5cc5475f     2.)W...s...._G.\
    70e8:	4c14ac75 34450e42 5db3dcd8 3f09157e     u..LB.E4...]~..?
    70f8:	50588052 62ce2b1b 4e652f8f 27a899c5     R.XP.+.b./eN...'
    7108:	2fc2a5ed 0acd039f d5813eec 4b4044dd     .../.....>...D@K
    7118:	90a75958 c04d189e e71d33a1 242551bc     XY....M..3...Q%$
    7128:	51f87f05 d95af96b f809d815 02988820     ...Qk.Z..... ...
    7138:	3b9483c5 b27f65f7 f4364b43 2ef60745     ...;.e..CK6.E...
    7148:	3f4fb8b9 cb66bdc9 8756bb8a 2b86c9b4     ..O?..f...V....+
    7158:	9b9867a1 f8ebdae0 4e6fe9aa 441e7018     .g........oN.p.D
    7168:	30cc1289 fdc25303 8b4d6992 47d8d65a     ...0.S...iM.Z..G
    7178:	30ae74be 8c03b6fa c3bd99d5 1ca8693c     .t.0........<i..
    7188:	1018f2a6 699eb151 d9f4fff5 3da04764     ....Q..i....dG.=
    7198:	3d3aab59 36172043 2cb857ff 2fa91161     Y.:=C .6.W.,a../
    71a8:	0c2f1cac a4057da1 33a5c619 48a219b9     ../..}.....3...H
    71b8:	d15f0bc5 42341020 46a09dad 73f88950     .._. .4B...FP..s
    71c8:	c67421b8 1bad5312 368e622e 4194771b     .!t..S...b.6.w.A
    71d8:	e44e0dff 8cc71a79 5467f1c2 4b4564e4     ..N.y.....gT.dEK
    71e8:	afe52093 7759f16a d75fbea9 391b71dc     . ..j.Yw.._..q.9
    71f8:	ab4ef798 2a1c0694 5444130d 02308754     ..N....*..DTT.0.
    7208:	cfaa1aa1 4b7ae1ff d73361e7 64e26f32     ......zK.a3.2o.d
    7218:	bd0b54b9 8da47038 eaecee15 148cfa6f     .T..8p......o...
    7228:	79c2cc3d 3756d4d4 d31543de 25d44ea8     =..y..V7.C...N.%
    7238:	26bb2c43 d82c8bef 3d27f37f 2c204703     C,.&..,...'=.G ,
    7248:	37dad260 5bd33d98 a3383b7d 77943117     `..7.=.[};8..1.w
    7258:	7ea583f2 12071d69 2a225bf2 3c7c4127     ...~i....["*'A|<
    7268:	f1f03ad3 92ebbdfa 68b63704 5d61030c     .:.......7.h..a]
    7278:	baee75d1 ca6e2853 771a3636 12404b34     .u..S(n.66.w4K@.
    7288:	26667e4f be13c463 6f9be3b0 2bd26191     O~f&c......o.a.+
    7298:	adc80f89 86e3f8cb 1794cb48 74520d8a     ........H.....Rt
    72a8:	024cf97e 1e15c745 1e53eb02 5cee741e     ~.L.E.....S..t.\
    72b8:	af99cda1 8d088de0 1cc0862c 62581296     ........,.....Xb
    72c8:	21c0e934 43134373 c424f7a4 60bbc768     4..!sC.C..$.h..`
    72d8:	3c10e143 aba71fbf 14a915b8 37b8ea9f     C..<...........7
    72e8:	c40213ff 8d96ec65 ff77845c 74a08828     ....e...\.w.(..t
    72f8:	daf607a3 bedb7194 161c8706 17e86671     .....q......qf..
    7308:	524059cf aceb98e0 94916f09 68552ac4     .Y@R.....o...*Uh
    7318:	af1b3c47 4cd2971b dde21b70 68442ebc     G<.....Lp.....Dh
    7328:	0e867595 19629b8c 635fa47a 6a6955d3     .u....b.z._c.Uij
    7338:	f2e393ad 6fab45e0 fcf050c4 66dd3ef4     .....E.o.P...>.f
    7348:	fddc7df1 bb0b7abc 1b0bcf9c 14eb5b75     .}...z......u[..
    7358:	a2fd411d 1cf79f9c fff0600a 5c496f73     .A.......`..soI\
    7368:	55426d70 49648d85 2322d8a9 46c1016a     pmBU..dI.."#j..F
    7378:	0d9b6d4f b57fdb87 09ddb633 609eb652     Om......3...R..`
    7388:	bedc82c5 e70f9166 c8afaf27 772fb5b5     ....f...'...../w
    7398:	b0227a20 79a294d9 112dbc8d 7f75b141      z"....y..-.A.u.
    73a8:	8e070020 98d1c7f8 c48217b1 5953d0aa      .............SY
    73b8:	e15f33ff e28253eb 1e614c45 267d1dc1     .3_..S..ELa...}&
    73c8:	b99e2246 be64f50a 82fe5495 4eaaab5c     F"....d..T..\..N
    73d8:	7e60bed0 927d5ac0 e6aa1b4d 67d3786d     ..`~.Z}.M...mx.g
    73e8:	0f6e2945 a71962bf a35eea9b 63d93844     E)n..b....^.D8.c
    73f8:	d26640ac b34228c7 eb28f5a1 169c38d2     .@f..(B...(..8..
    7408:	3439dc22 4b7972b3 cdaa1e14 71478457     ".94.ryK....W.Gq
    7418:	ec1d58c7 5226e125 e78fd4f1 669d8796     .X..%.&R.......f
    7428:	aa44a07f 750dd1aa 5aebbecf 327c62b5     ..D....u...Z.b|2
    7438:	b54fbd25 006b8e95 01eb364e 2ab3f95d     %.O...k.N6..]..*
    7448:	c0d5e196 fcbe5080 5a57e725 2a1b9bd7     .....P..%.WZ...*
    7458:	58139b5d 1d2b2b67 849b7a73 751cf4af     ]..Xg++.sz.....u
    7468:	337d00a5 164a7d2e cb83a4bc 00cee3a4     ..}3.}J.........
    7478:	6dbe28f9 3498e036 48d28502 053d8991     .(.m6..4...H..=.
    7488:	cab0fb69 01665d64 08d68e74 4a991322     i...d]f.t..."..J
    7498:	bd3f915d ba44bbd4 172122bb 1d34b0f9     ].?...D.."!...4.
    74a8:	29e8a9f3 5d114dc7 d5334b60 08e7a43d     ...).M.]`K3.=...
    74b8:	32f0f3e8 28db8e92 80264f62 5cb7be1b     ...2...(bO&....\
    74c8:	82508f23 9af2c787 f7e3a1b2 336ae7cc     #.P...........j3
    74d8:	2dd194be 7fe2d4ee 2b8a6872 573d2e1b     ...-....rh.+..=W
    74e8:	63b2ea36 3332ea33 5b1f4243 200bc137     6..c3.23CB.[7.. 
    74f8:	06b3260d 65c47c8c 53995c5e 42021fca     .&...|.e^\.S...B
    7508:	9bb19946 2f7e6cf4 23196d2c 311fba6a     F....l~/,m.#j..1
    7518:	2be0d70d c30c13b6 2711b0dc 61eeac14     ...+.......'...a
    7528:	597d35d4 88526996 e6bd21d7 70169bcb     .5}Y.iR..!.....p
    7538:	ad29a510 a0f1b2d0 72c1b94d 2ade5314     ..).....M..r.S.*
    7548:	189873e7 11e320dc e85cdb38 2d2a1794     .s... ..8.\...*-
    7558:	a6f621e3 a0a8c453 4525f6f7 4b06d5b5     .!..S.....%E...K
    7568:	1848ec1c f4291669 5d578730 1d421655     ..H.i.).0.W]U.B.
    7578:	290a5b4e f8c60da7 a1f3565f 66dd9f39     N[.)...._V..9..f
    7588:	37b474a0 55ac29d9 4a369ee4 4291967a     .t.7.).U..6Jz..B
    7598:	12e6bc89 918dacaa 0651c310 3d46e890     ..........Q...F=
    75a8:	a00e90b1 af055430 6da5ca39 16f62bf5     ....0T..9..m.+..
    75b8:	488c51e6 1a021c33 63fbbcd5 0d64dadf     .Q.H3......c..d.
    75c8:	9dbfea7c 0918ece5 dd74203a 3b3319d7     |.......: t...3;
    75d8:	8b9fa90c 1d88545b 908c59e6 13b792dc     ....[T...Y......
    75e8:	9c3d0979 0a2d939a b74bf127 321a5dbe     y.=...-.'.K..].2
    75f8:	f66d8470 5e5947ff fd26bc99 22ec9eca     p.m..GY^..&...."
    7608:	93b10536 de17ca82 559dd846 593f56c0     6.......F..U.V?Y
    7618:	75485023 11483733 f7448b1c 23c6b0fd     #PHu37H...D....#
    7628:	8a27804f 37790445 2726ea70 573e9196     O.'.E.y7p.&'..>W
    7638:	3235ac70 35e1b24f 49f4f85e 51ba0820     p.52O..5^..I ..Q
    7648:	60d47194 4bc49181 3308e1dd 5d29a21e     .q.`...K...3..)]
    7658:	3e6e4e33 7e15894b 4f31d0fb 50dbbd2f     3Nn>K..~..1O/..P
    7668:	35a9c9de ef248bd2 1b634710 3418add2     ...5..$..Gc....4
    7678:	52363bd2 96c7233a 9a08c99f 7c8414ad     .;6R:#.........|
    7688:	54e6c05c bc6acb4a 1193579a 5729021a     \..TJ.j..W....)W
    7698:	0b08fa1c 0627c3e0 e17c2a73 3d0b4ff9     ......'.s*|..O.=
    76a8:	5990317f d507e875 bc7bfe48 75b27bb3     .1.Yu...H.{..{.u
    76b8:	6ce651f5 44a80f2c 1b706e46 7b9795fc     .Q.l,..DFnp....{
    76c8:	fdf9a640 9de75bde babffaa8 75ade50a     @....[.........u
    76d8:	870889a0 ce0ab116 dd59ec6c 6f3ddcfc     ........l.Y...=o
    76e8:	88de0674 6e368335 ea28a073 291d1129     t...5.6ns.(.)..)
    76f8:	64884d61 f8b8e538 ae854d76 706ef8f1     aM.d8...vM....np
    7708:	83753069 137a8c65 c620f966 01e45f1c     i0u.e.z.f. .._..
    7718:	2f76c7ba e28e1ff8 e3e89c54 36d29eac     ..v/....T......6
    7728:	7f0b49cb 83379f15 2bacb937 65e9c39e     .I....7.7..+...e
    7738:	070cda3e 9b323c45 ab7e2de5 16e02f31     >...E<2..-~.1/..
    7748:	635122b7 53bcf346 d6c2de09 1fd7e207     ."QcF..S........
    7758:	ea1e57ac 3a5f5f94 d0f0b4df 0cba06e8     .W...__:........
    7768:	87a9c392 70b440c3 dee1d800 1e7dc143     .....@.p....C.}.
    7778:	7239912b 5498ba6d 17182d14 332870a0     +.9rm..T.-...p(3
    7788:	672d794c 6be306fc 245b2b4e 2c2ce211     Ly-g...kN+[$..,,
    7798:	8d2ba79f 109b722c 9c5f727a 268520fa     ..+.,r..zr_.. .&
    77a8:	24fe78ee 515b3005 cbaea698 736201ec     .x.$.0[Q......bs
    77b8:	3210bf78 4608ac11 9c441843 32d8fd91     x..2...FC.D....2
    77c8:	04b8f2d8 c9557e1b 98dc7459 775437f7     .....~U.Yt...7Tw
    77d8:	5ba417f5 1200f558 3e7ad304 2e00ec5f     ...[X.....z>_...
    77e8:	2b446288 fc873d5f 624876e4 32270a93     .bD+_=...vHb..'2
    77f8:	08789b22 c646a47c 925616be 2370d9fe     ".x.|.F...V...p#
    7808:	19e671c4 430afa36 ac1f5fb2 156468ce     .q..6..C._...hd.
    7818:	f2417635 3b84dec2 17c0e58f 31140e90     5vA....;.......1
    7828:	cb7443fa 5c85f88c 64d864ac 0da75f5d     .Ct....\.d.d]_..
    7838:	71b0fb84 295ff448 ad3336c3 1b79e10b     ...qH._).63...y.
    7848:	dd2977b3 ffdf9942 0f9a1a23 4c1b198d     .w).B...#......L
    7858:	c112864e ba778a24 f26d48d0 74f66897     N...$.w..Hm..h.t
    7868:	867ab611 3fd5c06e ff7878b9 4b98ce33     ..z.n..?.xx.3..K
    7878:	75cb9165 f7db4dce 99ec5163 11665aa0     e..u.M..cQ...Zf.
    7888:	ae7118b9 2a498f16 b4eb509a 265ec3db     ..q...I*.P....^&
    7898:	68ce2c86 3da42306 b2e33385 36e62baa     .,.h.#.=.3...+.6
    78a8:	79ab4478 99507d4a 411e8875 25bfb2fc     xD.yJ}P.u..A...%
    78b8:	33022ce1 d7ac1ec9 033d0466 23d341ae     .,.3....f.=..A.#
    78c8:	e962bc00 d295b465 a2d73180 23d0211b     ..b.e....1...!.#
    78d8:	ff922d4d a03ccd7a de301514 1e767148     M-..z.<...0.Hqv.
    78e8:	a894efab c241ab36 43fc1e58 1c9fc2f3     ....6.A.X..C....
    78f8:	2bd27a87 ca3b9656 85dd7015 53623e22     .z.+V.;..p..">bS
    7908:	1c219420 557411f0 096b42f9 19265577      .!...tU.Bk.wU&.
    7918:	1b23592f d3312d94 c3c51c06 30a9a9a1     /Y#..-1........0
    7928:	ea6e8f79 3d89b0b3 c5c77cb2 7eab751d     y.n....=.|...u.~
    7938:	e6df6e36 c0a9b186 3f155694 4f844d58     6n.......V.?XM.O
    7948:	2793dffa 41901823 6bd3854d 2add440b     ...'#..AM..k.D.*
    7958:	31df6e32 d55480f1 6ae3e417 318ce384     2n.1..T....j...1
    7968:	1a0984f4 0565062d d2bff9f6 6ebaec63     ....-.e.....c..n
    7978:	29e79790 77075fe7 24c8a4e7 0dd94346     ...)._.w...$FC..
    7988:	dfa9b062 bf8f11e2 5ee8b364 1b17d825     b.......d..^%...
    7998:	f72c6344 62c2150c d081e8dc 28106880     Dc,....b.....h.(
    79a8:	dfec91c1 f4a4af0d 977e1f2e 1a8f0e6c     ..........~.l...
    79b8:	38b9316f 72a7a3a7 8c4e22ec 32371672     o1.8...r."N.r.72
    79c8:	5ba4af3b c1406906 8911d367 08151424     ;..[.i@.g...$...
    79d8:	a8b6c337 51bd4afa 513400e7 50e77a9b     7....J.Q..4Q.z.P
    79e8:	2a822548 46c0051b 1a5edcfc 024886e4     H%.*...F..^...H.
    79f8:	41cac17f a06b0efa 1b9c5675 336a30b0     ...A..k.uV...0j3
    7a08:	ca097626 74fb2c10 48e90981 2b204caa     &v...,.t...H.L +
    7a18:	b9a17b74 6902c952 b922303b 39c2e9b6     t{..R..i;0"....9
    7a28:	3c597419 b9216b9b 64f15f76 6d929302     .tY<.k!.v_.d...m
    7a38:	eeae1427 7b1297d5 fe1bd307 0f0744ad     '......{.....D..
    7a48:	5be6a89d 33b57e26 33356c10 282fa2e5     ...[&~.3.l53../(
    7a58:	61dc772c 3a03995c 893dcff5 4f5d8f5e     ,w.a\..:..=.^.]O
    7a68:	fc48023f 4bfc927e d6a685ae 596f2241     ?.H.~..K....A"oY
    7a78:	ec29b8a2 3cb3e0af 10653842 31018e0d     ..)....<B8e....1
    7a88:	44575626 2fd00fe9 4982e011 1241d870     &VWD.../...Ip.A.
    7a98:	4e6781a7 970d5666 0f3de2ce 1b05f49d     ..gNfV....=.....
    7aa8:	63717e66 a994ffdf 6ba88e98 416374a7     f~qc.......k.tcA
    7ab8:	53f1579a 8b082ced b5d2aa4b 56781dfa     .W.S.,..K.....xV
    7ac8:	1865b318 8151defd 0d6081f7 64669b84     ..e...Q...`...fd
    7ad8:	5f38e14e e436f4bb 0a974b40 43d43841     N.8_..6.@K..A8.C
    7ae8:	d666be02 5832ceb3 1ae1828e 06347d9e     ..f...2X.....}4.
    7af8:	39e3ea86 6979471b cb4b5ae4 2cf2cf61     ...9.Gyi.ZK.a..,
    7b08:	da5a6ee4 b7ab29ea 9aca5768 12e75cb2     .nZ..)..hW...\..
    7b18:	d30d1ffc e65b1109 6b320e5a 71f9becd     ......[.Z.2k...q
    7b28:	6647eed9 dc828902 0ca5458f 31d62d05     ..Gf.....E...-.1
    7b38:	3a54c1e5 ea2bbf52 e3ee5491 602bf0b9     ..T:R.+..T....+`
    7b48:	2380ad4b 25aa7362 71df5f58 2b6b1e32     K..#bs.%X_.q2.k+
    7b58:	6aa0470d dbc5efd8 b8c4354b 05353c24     .G.j....K5..$<5.
    7b68:	f5e06bca a3c7db3c 2b4ea5f7 288a1c8f     .k..<.....N+...(
    7b78:	12ce7ca1 d6152f5e 36673c7d 59d4c1b4     .|..^/..}<g6...Y
    7b88:	521fcb95 1e02554e 240ad440 66d3980f     ...RNU..@..$...f
    7b98:	39a4d9d1 abf16f6b a94c2f62 7fea351c     ...9ko..b/L..5..
    7ba8:	389163ba 3d62b6f3 2e7895ea 0fc6b44f     .c.8..b=..x.O...
    7bb8:	cda7c669 d5c64403 0e603193 2e409909     i....D...1`...@.
    7bc8:	15fa4c2f 9b5c0faf 8e12b639 46295c9d     /L....\.9....\)F
    7bd8:	3a5b331b 5ce4add6 6c4c5879 5fa7bd73     .3[:...\yXLls.._
    7be8:	47d1aef2 47b34714 22325739 28004c1c     ...G.G.G9W2".L.(
    7bf8:	9a3c5299 d588437d 12cd27e8 2ab19c18     .R<.}C...'.....*
    7c08:	80037802 3ae700f6 0b422b36 1ad16380     .x.....:6+B..c..
    7c18:	fabc2139 45b7ef36 21dcbd1d 44bcdeff     9!..6..E...!...D
    7c28:	71e11c7b 41c6da21 f7c4cc14 2c35ee79     {..q!..A....y.5,
    7c38:	59c13849 48529427 10be050a 6492d26f     I8.Y'.RH....o..d
    7c48:	8c50f0d9 a6f54e98 dd62181b 6a2db2b6     ..P..N....b...-j
    7c58:	2a5e57a3 f7d9806b 3ba53d20 57526bdb     .W^*k... =.;.kRW
    7c68:	f500e650 17ce6cb1 42f8f345 05d841b0     P....l..E..B.A..
    7c78:	698de970 aa800a6c abe2cb8e 04f4b559     p..il.......Y...
    7c88:	259ce49d c050dfd7 f94db935 213839bd     ...%..P.5.M..98!
    7c98:	55306204 b3712586 19f9705a 7d323b8b     .b0U.%q.Zp...;2}
    7ca8:	16b6c618 26d4502b aa89595b 79717069     ....+P.&[Y..ipqy
    7cb8:	6db41872 f867c0e3 6c76e1d0 13d601d8     r..m..g...vl....
    7cc8:	331b7383 2dfc8b0d e42e8075 185472f3     .s.3...-u....rT.
    7cd8:	2b10eba0 05bd13e7 90f79b95 519a3874     ...+........t8.Q
    7ce8:	d3ad2500 8d09c1b2 2cf0f733 045da45d     .%......3..,].].
    7cf8:	6862426c 64018195 9bfe1b09 728d57f5     lBbh...d.....W.r
    7d08:	8da2c585 f9a99f87 61dc4e10 4fc4831e     .........N.a...O
    7d18:	54394fe0 6dc602cc 67e9e8ae 0484566b     .O9T...m...gkV..
    7d28:	4a93809b c5fcf047 58f3e2bb 71c0c23a     ...JG......X:..q
    7d38:	36fe6c43 b400fabe aee4c0a7 614c2f3e     Cl.6........>/La
    7d48:	d0e1c6c1 7610a980 88885dcc 1ce8197c     .......v.]..|...
    7d58:	3ac2cb2b eade1c9f af2f341e 471ad07b     +..:.....4/.{..G
    7d68:	6b01121b d67a837c 1f59cb59 2a8e6428     ...k|.z.Y.Y.(d.*
    7d78:	2f3262ca 52e701e4 ece50580 19e0a27d     .b2/...R....}...
    7d88:	a7bda6ac b5691c17 1b9df1f2 43484c31     ......i.....1LHC
    7d98:	9bae49ea a6815554 a225fae5 43a2c5dd     .I..TU....%....C
    7da8:	ed700eef fa5e992a 23918856 58911f56     ..p.*.^.V..#V..X
    7db8:	e48c4da9 648b81a1 bdd0c3bd 66e6e30c     .M.....d.......f
    7dc8:	169d266b f3ba209c 30447685 20f7a862     k&... ...vD0b.. 
    7dd8:	1a0c3d2e d1bb5aaa 3d1111f1 366c2984     .=...Z.....=.)l6
    7de8:	2dcc9013 06c78b64 e109e3fb 27484a64     ...-d.......dJH'
    7df8:	a4677464 8f8eacbc 1dc24cc1 0b6cb31b     dtg......L....l.
    7e08:	898f0fa0 df69c84f 4920f2a2 2dd42674     ....O.i... It&.-
    7e18:	7d4c5c69 c0912a19 6a98d8d6 489ade7f     i\L}.*.....j...H
    7e28:	7f203e28 458769f4 fc05ac97 124f4123     (> ..i.E....#AO.
    7e38:	ad6d7d67 3bb936f4 d4f00ff8 330954fe     g}m..6.;.....T.3
    7e48:	46f90eaf c2ce6500 d4f9debd 7bf94762     ...F.e......bG.{
    7e58:	586dfb83 2e93172a b4113d96 3c7a6062     ..mX*....=..b`z<
    7e68:	147f0d93 5ddb0397 c6839034 08e3596f     .......]4...oY..
    7e78:	67639bfa 374e67ff 19888232 19021c21     ..cg.gN72...!...
    7e88:	fdd55efa 002f5d04 79e1baa3 05b4c6e0     .^...]/....y....
    7e98:	ad74c84c e5678ea3 6a58a77d 1c42f782     L.t...g.}.Xj..B.
    7ea8:	d2cafacd e054668b ede4261c 237668d3     .....fT..&...hv#
    7eb8:	74aebb32 edf46a63 31cf0ef4 31ec8c59     2..tcj.....1Y..1
    7ec8:	c35b5825 955c2e95 68259603 27d8b0ea     %X[...\...%h...'
    7ed8:	427d1ec0 b7a8976e 7152bd13 6b6cc5c0     ..}Bn.....Rq..lk
    7ee8:	a0b244cd 03d88f0c 8cfed897 001cae9a     .D..............
    7ef8:	f693a7fd a844b3a1 7abdec96 676c9acb     ......D....z..lg
    7f08:	e0cdbd33 631b6bd5 0cddd9b8 29f289dc     3....k.c.......)
    7f18:	36fb2eff 0947d575 0e3eb059 1eb2ce65     ...6u.G.Y.>.e...
    7f28:	0e8bf405 2139b3a4 39f4ae8d 4165edfb     ......9!...9..eA
    7f38:	7a70d6a6 e061eda6 8c9084f6 2e3cc032     ..pz..a.....2.<.
    7f48:	d056063f 1ef8329e 49e8b3d5 6d4d01ce     ?.V..2.....I..Mm
    7f58:	1656d34b 0110c92f 170829e0 6dad1c4e     K.V./....)..N..m
    7f68:	90b477be 584c56c5 d525e935 597e5f0a     .w...VLX5.%.._~Y
    7f78:	8eb7d36d 6008264d 999c829e 3f586754     m...M&.`....TgX?
    7f88:	f5546a1d 3d7ea89d 9a3f4364 41754f7d     .jT...~=dC?.}OuA
    7f98:	2ef879a7 3b079682 98262872 1ab27795     .y.....;r(&..w..
    7fa8:	bbef7923 dc37c9f0 ec35a097 256ec818     #y....7...5...n%
    7fb8:	09dd5846 4a72da5c edcad45c 51df6c61     FX..\.rJ\...al.Q
    7fc8:	cf5ce819 aef24fcd 9ae689f1 0ba6bb95     ..\..O..........
    7fd8:	a57b3a9e e667bd65 a28a8e4a 71ffd591     .:{.e.g.J......q
    7fe8:	53a7fadf 06c325fa 6b2dcf13 6667f298     ...S.%....-k..gf
    7ff8:	d52a09e4 3ef751a6 40b8c74a 517a1042     ..*..Q.>J..@B.zQ
    8008:	8c8183f5 d08cddfd 1b8147f1 59237cc7     .........G...|#Y
    8018:	88395933 fff94fd1 2d10ef67 538acc59     3Y9..O..g..-Y..S
    8028:	6ff0eb1d ac51ce38 14c5fe65 69d42b81     ...o8.Q.e....+.i
    8038:	95bfe8b9 a17eda39 df05a341 5dc6d98f     ....9.~.A......]
    8048:	5ce8be78 f2304d37 ecc483ca 31b58521     x..\7M0.....!..1
    8058:	0780222a 04d2d814 e3ed95c9 3dc18b2b     *"..........+..=
    8068:	f2d70d2b a48e1639 bc0f38d0 4ffd54a6     +...9....8...T.O
    8078:	a6b7143b 8ae3c65b 9178fa9d 482eb41f     ;...[.....x....H
    8088:	87ad4f1d 240b8b4e 0059eb40 6d853242     .O..N..$@.Y.B2.m
    8098:	44275132 c135f77e 0daae349 6261076a     2Q'D~.5.I...j.ab
    80a8:	3842765c 35316bdb 3a8bfd92 246165ba     \vB8.k15...:.ea$
    80b8:	d5177a75 1c2d774b 1647e3b6 045a2f99     uz..Kw-...G../Z.
    80c8:	594671a8 ed3b5923 5acd4db5 0514fada     .qFY#Y;..M.Z....
    80d8:	58a0f50f e8297fc3 f2952a91 7cd2badc     ...X..)..*.....|
    80e8:	ea9ac266 0da45130 1e14c979 26a0d43c     f...0Q..y...<..&
    80f8:	fe93a390 bb62b729 f7f67ccb 360357af     ....).b..|...W.6
    8108:	1c7c59e8 3ad4835d 86fa470b 570daffd     .Y|.]..:.G.....W
    8118:	8fa3bd96 d7c4be69 2ad76ffc 17e4bdec     ....i....o.*....
    8128:	ead7dc51 43ce4ea9 d64a518e 58ba7ae0     Q....N.C.QJ..z.X
    8138:	64680555 e014cc7e ce2630b8 03abc953     U.hd~....0&.S...
    8148:	7799be57 a318620c e84da952 2b258fa2     W..w.b..R.M...%+
    8158:	063b2ffd dd88fdc5 9a3aa556 17371dd7     ./;.....V.:...7.
    8168:	78981299 927b8375 1d90ab2d 55455210     ...xu.{.-....REU
    8178:	8ce54bd0 b4530621 ffdb6235 59109b65     .K..!.S.5b..e..Y
    8188:	a180a515 8663e0c4 1c6604f4 41467fe4     ......c...f...FA
    8198:	dcb73878 ae2c1aa4 c6c07517 19d3cb02     x8....,..u......
    81a8:	ea6745f1 aa147c97 31cac43c 70dac71a     .Eg..|..<..1...p
    81b8:	6af87dfa b9213ec2 f60e7b25 67f228e9     .}.j.>!.%{...(.g
    81c8:	f78df3df bfb59b8c a4256fa3 36687792     .........o%..wh6
    81d8:	23177544 e1be5c1f 644b1c90 786a9e1b     Du.#.\....Kd..jx
    81e8:	93ca7f5b 4172f473 b8aaeb59 62ae5bb4     [...s.rAY....[.b
    81f8:	fa631b6f bcd9c431 edc9cc6d 1fbe20b2     o.c.1...m.... ..
    8208:	bc0ee085 5fdd829f adc5dd59 241dd315     ......._Y......$
    8218:	25f7dbb6 b4b688d6 e5bed2d4 595a82fe     ...%..........ZY
    8228:	cc11880d 69653ae0 fc402f76 2b9e85fe     .....:eiv/@....+
    8238:	07770a81 bb2495b5 5fb34731 05d20c57     ..w...$.1G._W...
    8248:	36485ab2 9d9e6234 65f3febb 27012a96     .ZH64b.....e.*.'
    8258:	84c04ff7 586cfef4 c0eabfbe 44a5860c     .O....lX.......D
    8268:	f3532e80 6fbfe6e2 af3220fe 05abeaba     ..S....o. 2.....
    8278:	cb809678 1bed21f2 b7eafed2 2aa62112     x....!.......!.*
    8288:	f610190b e298837c ef9158f8 1ec8fbbc     ....|....X......
    8298:	a4f96f6b 1efe9b3a 068b0ef3 6a3b842a     ko..:.......*.;j
    82a8:	d7f827f7 92dd4b7c f3fd1c97 605175bb     .'..|K.......uQ`
    82b8:	9c1f6d98 139bb641 978db310 3a3ab2e9     .m..A.........::
    82c8:	c9d5dd0b c5c95941 25b2bce0 34c6c760     ....AY.....%`..4
    82d8:	49bb8126 0d44115a 11daf619 7622cbeb     &..IZ.D......."v
    82e8:	164ef5ad 785bff93 355cb45d 7191647d     ..N...[x].\5}d.q
    82f8:	4cce6e5c 117f255c 0e9aae3e 581b448b     \n.L\%..>....D.X
    8308:	36225414 54a4f3cb 39bc4685 790180c5     .T"6...T.F.9...y
    8318:	b7c6b96f 47064043 3a2c010b 43cccf5b     o...C@.G..,:[..C
    8328:	c14c3731 1dfbf3af 95572574 1c368f31     17L.....t%W.1.6.
    8338:	b5070b5a 00bc2ed3 63b37f60 0332d8dd     Z.......`..c..2.
    8348:	8c9bd8f0 0744b190 8dacb9ce 2d258e62     ......D.....b.%-
    8358:	b9c61e14 bba5b4bd 5a34e996 0bca1229     ..........4Z)...
    8368:	6f2175d4 059c84c6 8790be78 1a3bed43     .u!o....x...C.;.
    8378:	7dabb5b0 df394f57 3b3c33e4 304777e6     ...}WO9..3<;.wG0
    8388:	e82c5a6a 59a29d4f e88e77a4 72e421d1     jZ,.O..Y.w...!.r
    8398:	13312959 69e62303 8cf2bbb8 2da03aad     Y)1..#.i.....:.-
    83a8:	8fecb0b6 2858d860 a40243a6 343099e7     ....`.X(.C....04
    83b8:	d29a8f63 ba29b675 f6f15886 3d2028a4     c...u.)..X...( =
    83c8:	86047d0a f068e2d2 6c770e20 14999b5d     .}....h. .wl]...
    83d8:	2385da79 d1874a59 c15a1cd9 78aeb552     y..#YJ....Z.R..x
    83e8:	23e9c06e 482dcccc b54b5745 7b18a19f     n..#..-HEWK....{
    83f8:	fe9a7a06 036c896e d1871c13 2f2c2ce0     .z..n.l......,,/
    8408:	d65492c7 3b2d9b9e 0819d077 0649c7e5     ..T...-;w.....I.
    8418:	7b65e3cb cdab66ea c4aaf03f 49b15b40     ..e{.f..?...@[.I

00008428 <Montgomery_Rprime>:
    8428:	5ff3d621 c81db879 ea6b387d 173ea5aa     !.._y...}8k...>.
    8438:	2136f61c 3d01b7c7 6ac8f9d3 0006a5f1     ..6!...=...j....

00008448 <Montgomery_rprime>:
    8448:	79bc3929 e12fe5f0 d1fcdcf3 d75e78b8     )9.y../......x^.
    8458:	76b5db21 bce409ed afc1c074 f32702fd     !..v....t.....'.

00008468 <PARAMETER_d>:
    8468:	00000142 00000000 000000e4 00000000     B...............
    8478:	f1fc0c8d b3821488 6657e0fc 5e472f84     ..........Wf./G^

00008488 <curve_order>:
    8488:	c7768ce7 2fb2540e fe0f7999 dfbd004d     ..v..T./.y..M...
    8498:	9cbc14e5 f0539782 4e5e0a72 0029cbc1     ......S.r.^N..).

000084a8 <A144>:
    84a8:	05080201 05020208 0c060201 080f090c     ................
    84b8:	050d0d08 010a030b 0e0d0f01 0208080b     ................
    84c8:	08020303                                ....

000084cc <IC>:
    84cc:	07030100 00000406                       ........

000084d4 <RC>:
    84d4:	0e070301 0c060b0d 0a050209              ............

000084e0 <sbox>:
    84e0:	0b06050c 0d0a0009 080f0e03 02010704     ................

000084f0 <inv_pbox>:
    84f0:	0c080400 1c181410 2c282420 3c383430     ........ $(,048<
    8500:	0d090501 1d191511 2d292521 3d393531     ........!%)-159=
    8510:	0e0a0602 1e1a1612 2e2a2622 3e3a3632     ........"&*.26:>
    8520:	0f0b0703 1f1b1713 2f2b2723 3f3b3733     ........#'+/37;?

00008530 <inv_sbox>:
    8530:	080f0e05 0d02010c 0306040b 0a090700     ................

00008540 <pbox>:
    8540:	30201000 31211101 32221202 33231303     .. 0..!1.."2..#3
    8550:	34241404 35251505 36261606 37271707     ..$4..%5..&6..'7
    8560:	38281808 39291909 3a2a1a0a 3b2b1b0b     ..(8..)9..*:..+;
    8570:	3c2c1c0c 3d2d1d0d 3e2e1e0e 3f2f1f0f     ..,<..-=...>../?

00008580 <sbox>:
    8580:	0b06050c 0d0a0009 080f0e03 02010704     ................
    8590:	746f7250 6c6f636f 72726520 202c726f     Protocol error, 
    85a0:	61656c70 64206573 6c62756f 68632065     please double ch
    85b0:	206b6365 20656874 636f6c63 6e69206b     eck the clock in
    85c0:	6f777420 616f6220 2e736472 0d0a0d20      two boards. ...
    85d0:	00000000 45200d0a 6e657478 20646564     ...... Extended 
    85e0:	7373656d 20656761 65636572 64657669     message received
    85f0:	206e6920 62207852 65666675 54202e72      in Rx buffer. T
    8600:	72206568 69656365 20646576 61746164     he received data
    8610:	3a736920 00000d20 53200d0a 646e6174      is: ..... Stand
    8620:	20647261 7373656d 20656761 65636572     ard message rece
    8630:	64657669 206e6920 62207852 65666675     ived in Rx buffe
    8640:	64252072 6854202e 65722065 76696563     r %d. The receiv
    8650:	64206465 20617461 203a7369 00000a0d     ed data is: ....
    8660:	64252020 00000000 000d0a0d 53200d0a       %d.......... S
    8670:	646e6174 20647261 7373656d 20656761     tandard message 
    8680:	65636572 64657669 206e6920 4f464946     received in FIFO
    8690:	202e3020 20656854 65636572 64657669      0. The received
    86a0:	74616420 73692061 000d203a 756e654d      data is: ..Menu
    86b0:	0a0d3a20 2d2d2020 6c655320 20746365      :..  -- Select 
    86c0:	20656874 69746361 0d3a6e6f 3020200a     the action:..  0
    86d0:	6553203a 74732074 61646e61 66206472     : Set standard f
    86e0:	65746c69 44492072 203a3020 35347830     ilter ID 0: 0x45
    86f0:	73202c41 65726f74 746e6920 7852206f     A, store into Rx
    8700:	66756220 2e726566 200a0d20 203a3120      buffer. ..  1: 
    8710:	20746553 6e617473 64726164 6c696620     Set standard fil
    8720:	20726574 31204449 7830203a 2c393634     ter ID 1: 0x469,
    8730:	6f747320 69206572 206f746e 46207852      store into Rx F
    8740:	204f4649 0d202e30 3220200a 6553203a     IFO 0. ..  2: Se
    8750:	7320646e 646e6174 20647261 7373656d     nd standard mess
    8760:	20656761 68746977 3a444920 34783020     age with ID: 0x4
    8770:	61204135 3420646e 74796220 61642065     5A and 4 byte da
    8780:	30206174 206f7420 0d202e33 3320200a     ta 0 to 3. ..  3
    8790:	6553203a 7320646e 646e6174 20647261     : Send standard 
    87a0:	7373656d 20656761 68746977 3a444920     message with ID:
    87b0:	34783020 61203936 3420646e 74796220      0x469 and 4 byt
    87c0:	61642065 31206174 74203832 3331206f     e data 128 to 13
    87d0:	0d202e31 3420200a 6553203a 78652074     1. ..  4: Set ex
    87e0:	646e6574 66206465 65746c69 44492072     tended filter ID
    87f0:	203a3020 30317830 30303030 202c3541      0: 0x100000A5, 
    8800:	726f7473 6e692065 52206f74 75622078     store into Rx bu
    8810:	72656666 0a0d202e 3a352020 74655320     ffer. ..  5: Set
    8820:	74786520 65646e65 69662064 7265746c      extended filter
    8830:	20444920 30203a31 30303178 39303030      ID 1: 0x1000009
    8840:	73202c36 65726f74 746e6920 7852206f     6, store into Rx
    8850:	46494620 2e31204f 200a0d20 203a3620      FIFO 1. ..  6: 
    8860:	646e6553 74786520 65646e65 656d2064     Send extended me
    8870:	67617373 69772065 49206874 30203a44     ssage with ID: 0
    8880:	30303178 41303030 6e612035 20382064     x100000A5 and 8 
    8890:	65747962 74616420 20302061 37206f74     byte data 0 to 7
    88a0:	0a0d202e 3a372020 6e655320 78652064     . ..  7: Send ex
    88b0:	646e6574 6d206465 61737365 77206567     tended message w
    88c0:	20687469 203a4449 30317830 30303030     ith ID: 0x100000
    88d0:	61203639 3820646e 74796220 61642065     96 and 8 byte da
    88e0:	31206174 74203832 3331206f 0d202e35     ta 128 to 135. .
    88f0:	6820200a 6944203a 616c7073 656d2079     .  h: Display me
    8900:	0d20756e 00000d0a 656d6954 726f6620     nu .....Time for
    8910:	726e6520 6d6c6c6f 0d746e65 00000000      enrollment.....
    8920:	6f726e45 656d6c6c 6320746e 6c706d6f     Enrollment compl
    8930:	00657465 74696e49 696c6169 6974617a     ete.Initializati
    8940:	43206e6f 6c706d6f 2e657465 000d2e2e     on Complete.....
    8950:	69797254 7420676e 6574206f 74207473     Trying to test t
    8960:	20736968 4e414854 2e2e2e47 0000000d     his THANG.......
    8970:	64726148 69646f63 5220676e 6f707365     Hardcoding Respo
    8980:	0d65736e 00000000 656e6547 69746172     nse.....Generati
    8990:	5220676e 6f707365 0d65736e 00000000     ng Response.....
    89a0:	6c696146 50206465 696c6275 654b2063     Failed Public Ke
    89b0:	65472079 6172656e 6e6f6974 0000000d     y Generation....
    89c0:	6c696146 53206465 65726168 65532064     Failed Shared Se
    89d0:	74657263 65724320 6f697461 00000d6e     cret Creation...
    89e0:	74696157 0d676e69 00000000 5420794d     Waiting.....My T
    89f0:	216e7275 0000000d 616c6544 20646579     urn!....Delayed 
    8a00:	65726568 00000000 73726946 656d2074     here....First me
    8a10:	67617373 65732065 0d21746e 00000000     ssage sent!.....
    8a20:	6f636553 6d20646e 61737365 73206567     Second message s
    8a30:	21746e65 0000000d 74696157 20676e69     ent!....Waiting 
    8a40:	20726f66 6568746f 000d7372 206c6c41     for others..All 
    8a50:	65646f6e 69662073 6873696e 73206465     nodes finished s
    8a60:	69646e65 6820676e 65687361 65722064     ending hashed re
    8a70:	6e6f7073 0d736573 00000000 65636552     sponses.....Rece
    8a80:	64657669 72696620 6d207473 61737365     ived first messa
    8a90:	000d6567 65636552 64657669 63657320     ge..Received sec
    8aa0:	20646e6f 7373656d 0d656761 00000000     ond message.....
    8ab0:	2067734d 303d4449 34302578 65722078     Msg ID=0x%04x re
    8ac0:	76696563 203a6465 00000000 78323025     ceived: ....%02x
    8ad0:	00000020 696e6946 64656873 63654420      ...Finished Dec
    8ae0:	74707972 21676e69 0000000d 73736553     rypting!....Sess
    8af0:	736e6f69 79656b20 3a736920 00783020     ions key is: 0x.
    8b00:	78323025 00000000 6f4e0a0d 6c616d72     %02x......Normal
    8b10:	65704f20 69746172 54206e6f 0d656d69      Operation Time.
    8b20:	00000000 65636552 64657669 7830203a     ....Received: 0x
    8b30:	78383025 3830252e 000a0d78 6d726f4e     %08x.%08x...Norm
    8b40:	4f206c61 61726570 6e6f6974 6d6f4320     al Operation Com
    8b50:	74656c70 0d216465 00000000              pleted!.....

00008b5c <_global_impure_ptr>:
    8b5c:	20000108                                ... 

00008b60 <__sf_fake_stderr>:
	...

00008b80 <__sf_fake_stdin>:
	...

00008ba0 <__sf_fake_stdout>:
	...
    8bc0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8bd0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8be0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8bf0:	00006665                                ef..

00008bf4 <_init>:
    8bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8bf6:	46c0      	nop			; (mov r8, r8)
    8bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8bfa:	bc08      	pop	{r3}
    8bfc:	469e      	mov	lr, r3
    8bfe:	4770      	bx	lr

00008c00 <__init_array_start>:
    8c00:	000000e5 	.word	0x000000e5

00008c04 <_fini>:
    8c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c06:	46c0      	nop			; (mov r8, r8)
    8c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8c0a:	bc08      	pop	{r3}
    8c0c:	469e      	mov	lr, r3
    8c0e:	4770      	bx	lr

00008c10 <__fini_array_start>:
    8c10:	000000bd 	.word	0x000000bd
