
CAN_QUICK_START1 Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000af1c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002d8  20000000  0000af1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000fcc  200002d8  0000b1f4  000202d8  2**2
                  ALLOC
  3 .stack        00002004  200012a4  0000c1c0  000202d8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003f455  00000000  00000000  00020359  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b5b  00000000  00000000  0005f7ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000818  00000000  00000000  00064309  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000d18  00000000  00000000  00064b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00020983  00000000  00000000  00065839  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010a82  00000000  00000000  000861bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000a60d6  00000000  00000000  00096c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022d8  00000000  00000000  0013cd14  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cc46  00000000  00000000  0013efec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 32 00 20 25 17 00 00 1d 17 00 00 1d 17 00 00     .2. %...........
	...
      2c:	1d 17 00 00 00 00 00 00 00 00 00 00 1d 17 00 00     ................
      3c:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
      4c:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
      5c:	1d 17 00 00 1d 17 00 00 19 0a 00 00 29 0a 00 00     ............)...
      6c:	39 0a 00 00 49 0a 00 00 59 0a 00 00 69 0a 00 00     9...I...Y...i...
      7c:	a9 4a 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     .J..............
      8c:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
      9c:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
      ac:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	200002d8 	.word	0x200002d8
      dc:	00000000 	.word	0x00000000
      e0:	0000af1c 	.word	0x0000af1c

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	200002dc 	.word	0x200002dc
     110:	0000af1c 	.word	0x0000af1c
     114:	0000af1c 	.word	0x0000af1c
     118:	00000000 	.word	0x00000000

0000011c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     11c:	4b0c      	ldr	r3, [pc, #48]	; (150 <cpu_irq_enter_critical+0x34>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2b00      	cmp	r3, #0
     122:	d106      	bne.n	132 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     124:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     128:	2b00      	cmp	r3, #0
     12a:	d007      	beq.n	13c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     12c:	2200      	movs	r2, #0
     12e:	4b09      	ldr	r3, [pc, #36]	; (154 <cpu_irq_enter_critical+0x38>)
     130:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     132:	4a07      	ldr	r2, [pc, #28]	; (150 <cpu_irq_enter_critical+0x34>)
     134:	6813      	ldr	r3, [r2, #0]
     136:	3301      	adds	r3, #1
     138:	6013      	str	r3, [r2, #0]
}
     13a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     13c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     13e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     142:	2200      	movs	r2, #0
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <cpu_irq_enter_critical+0x3c>)
     146:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     148:	3201      	adds	r2, #1
     14a:	4b02      	ldr	r3, [pc, #8]	; (154 <cpu_irq_enter_critical+0x38>)
     14c:	701a      	strb	r2, [r3, #0]
     14e:	e7f0      	b.n	132 <cpu_irq_enter_critical+0x16>
     150:	200002f4 	.word	0x200002f4
     154:	200002f8 	.word	0x200002f8
     158:	20000000 	.word	0x20000000

0000015c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     15c:	4b08      	ldr	r3, [pc, #32]	; (180 <cpu_irq_leave_critical+0x24>)
     15e:	681a      	ldr	r2, [r3, #0]
     160:	3a01      	subs	r2, #1
     162:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     164:	681b      	ldr	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d109      	bne.n	17e <cpu_irq_leave_critical+0x22>
     16a:	4b06      	ldr	r3, [pc, #24]	; (184 <cpu_irq_leave_critical+0x28>)
     16c:	781b      	ldrb	r3, [r3, #0]
     16e:	2b00      	cmp	r3, #0
     170:	d005      	beq.n	17e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     172:	2201      	movs	r2, #1
     174:	4b04      	ldr	r3, [pc, #16]	; (188 <cpu_irq_leave_critical+0x2c>)
     176:	701a      	strb	r2, [r3, #0]
     178:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     17c:	b662      	cpsie	i
	}
}
     17e:	4770      	bx	lr
     180:	200002f4 	.word	0x200002f4
     184:	200002f8 	.word	0x200002f8
     188:	20000000 	.word	0x20000000

0000018c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     190:	ac01      	add	r4, sp, #4
     192:	2501      	movs	r5, #1
     194:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     196:	2700      	movs	r7, #0
     198:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     19a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     19c:	0021      	movs	r1, r4
     19e:	200f      	movs	r0, #15
     1a0:	4e06      	ldr	r6, [pc, #24]	; (1bc <system_board_init+0x30>)
     1a2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1a4:	2280      	movs	r2, #128	; 0x80
     1a6:	0212      	lsls	r2, r2, #8
     1a8:	2382      	movs	r3, #130	; 0x82
     1aa:	05db      	lsls	r3, r3, #23
     1ac:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1ae:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1b0:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1b2:	0021      	movs	r1, r4
     1b4:	201c      	movs	r0, #28
     1b6:	47b0      	blx	r6
}
     1b8:	b003      	add	sp, #12
     1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1bc:	0000060d 	.word	0x0000060d

000001c0 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
     1c0:	6803      	ldr	r3, [r0, #0]
     1c2:	4a0a      	ldr	r2, [pc, #40]	; (1ec <_can_enable_peripheral_clock+0x2c>)
     1c4:	4293      	cmp	r3, r2
     1c6:	d003      	beq.n	1d0 <_can_enable_peripheral_clock+0x10>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
     1c8:	4a09      	ldr	r2, [pc, #36]	; (1f0 <_can_enable_peripheral_clock+0x30>)
     1ca:	4293      	cmp	r3, r2
     1cc:	d007      	beq.n	1de <_can_enable_peripheral_clock+0x1e>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
     1ce:	4770      	bx	lr
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	MCLK->AHBMASK.reg |= ahb_mask;
     1d0:	4a08      	ldr	r2, [pc, #32]	; (1f4 <_can_enable_peripheral_clock+0x34>)
     1d2:	6911      	ldr	r1, [r2, #16]
     1d4:	2380      	movs	r3, #128	; 0x80
     1d6:	005b      	lsls	r3, r3, #1
     1d8:	430b      	orrs	r3, r1
     1da:	6113      	str	r3, [r2, #16]
     1dc:	e7f7      	b.n	1ce <_can_enable_peripheral_clock+0xe>
     1de:	4a05      	ldr	r2, [pc, #20]	; (1f4 <_can_enable_peripheral_clock+0x34>)
     1e0:	6911      	ldr	r1, [r2, #16]
     1e2:	2380      	movs	r3, #128	; 0x80
     1e4:	009b      	lsls	r3, r3, #2
     1e6:	430b      	orrs	r3, r1
     1e8:	6113      	str	r3, [r2, #16]
     1ea:	e7f0      	b.n	1ce <_can_enable_peripheral_clock+0xe>
     1ec:	42001c00 	.word	0x42001c00
     1f0:	42002000 	.word	0x42002000
     1f4:	40000800 	.word	0x40000800

000001f8 <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
     1f8:	b570      	push	{r4, r5, r6, lr}
     1fa:	000c      	movs	r4, r1
     1fc:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1fe:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
     200:	4ba5      	ldr	r3, [pc, #660]	; (498 <can_init+0x2a0>)
     202:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     204:	4ba5      	ldr	r3, [pc, #660]	; (49c <can_init+0x2a4>)
     206:	2200      	movs	r2, #0
     208:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     20a:	782a      	ldrb	r2, [r5, #0]
     20c:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
     20e:	4ba4      	ldr	r3, [pc, #656]	; (4a0 <can_init+0x2a8>)
     210:	429c      	cmp	r4, r3
     212:	d100      	bne.n	216 <can_init+0x1e>
     214:	e0c6      	b.n	3a4 <can_init+0x1ac>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
     216:	4ba3      	ldr	r3, [pc, #652]	; (4a4 <can_init+0x2ac>)
     218:	429c      	cmp	r4, r3
     21a:	d100      	bne.n	21e <can_init+0x26>
     21c:	e0ff      	b.n	41e <can_init+0x226>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
     21e:	69a3      	ldr	r3, [r4, #24]
     220:	2202      	movs	r2, #2
     222:	4313      	orrs	r3, r2
     224:	61a3      	str	r3, [r4, #24]
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
     226:	2300      	movs	r3, #0
     228:	22bc      	movs	r2, #188	; 0xbc
     22a:	50a3      	str	r3, [r4, r2]
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
     22c:	320c      	adds	r2, #12
     22e:	50a3      	str	r3, [r4, r2]
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
     230:	4b9d      	ldr	r3, [pc, #628]	; (4a8 <can_init+0x2b0>)
     232:	61e3      	str	r3, [r4, #28]
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
     234:	4b9d      	ldr	r3, [pc, #628]	; (4ac <can_init+0x2b4>)
     236:	60e3      	str	r3, [r4, #12]
	if (config->tdc_enable) {
     238:	7bab      	ldrb	r3, [r5, #14]
     23a:	2b00      	cmp	r3, #0
     23c:	d004      	beq.n	248 <can_init+0x50>
		hw->DBTP.reg |= CAN_DBTP_TDC;
     23e:	68e2      	ldr	r2, [r4, #12]
     240:	2380      	movs	r3, #128	; 0x80
     242:	041b      	lsls	r3, r3, #16
     244:	4313      	orrs	r3, r2
     246:	60e3      	str	r3, [r4, #12]
	if (config->run_in_standby) {
     248:	786b      	ldrb	r3, [r5, #1]
     24a:	2b00      	cmp	r3, #0
     24c:	d003      	beq.n	256 <can_init+0x5e>
		hw->MRCFG.reg |= 0x01<<6;
     24e:	68a3      	ldr	r3, [r4, #8]
     250:	2240      	movs	r2, #64	; 0x40
     252:	4313      	orrs	r3, r2
     254:	60a3      	str	r3, [r4, #8]
	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
     256:	6962      	ldr	r2, [r4, #20]
     258:	78ab      	ldrb	r3, [r5, #2]
     25a:	4313      	orrs	r3, r2
     25c:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
     25e:	78eb      	ldrb	r3, [r5, #3]
     260:	2b00      	cmp	r3, #0
     262:	d004      	beq.n	26e <can_init+0x76>
		hw->CCCR.reg |= CAN_CCCR_TXP;
     264:	69a2      	ldr	r2, [r4, #24]
     266:	2380      	movs	r3, #128	; 0x80
     268:	01db      	lsls	r3, r3, #7
     26a:	4313      	orrs	r3, r2
     26c:	61a3      	str	r3, [r4, #24]
	if (config->edge_filtering) {
     26e:	792b      	ldrb	r3, [r5, #4]
     270:	2b00      	cmp	r3, #0
     272:	d004      	beq.n	27e <can_init+0x86>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
     274:	69a2      	ldr	r2, [r4, #24]
     276:	2380      	movs	r3, #128	; 0x80
     278:	019b      	lsls	r3, r3, #6
     27a:	4313      	orrs	r3, r2
     27c:	61a3      	str	r3, [r4, #24]
	if (config->protocol_exception_handling) {
     27e:	796b      	ldrb	r3, [r5, #5]
     280:	2b00      	cmp	r3, #0
     282:	d004      	beq.n	28e <can_init+0x96>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
     284:	69a2      	ldr	r2, [r4, #24]
     286:	2380      	movs	r3, #128	; 0x80
     288:	015b      	lsls	r3, r3, #5
     28a:	4313      	orrs	r3, r2
     28c:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
     28e:	79ab      	ldrb	r3, [r5, #6]
     290:	2b00      	cmp	r3, #0
     292:	d103      	bne.n	29c <can_init+0xa4>
		hw->CCCR.reg |= CAN_CCCR_DAR;
     294:	69a3      	ldr	r3, [r4, #24]
     296:	2240      	movs	r2, #64	; 0x40
     298:	4313      	orrs	r3, r2
     29a:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
     29c:	79eb      	ldrb	r3, [r5, #7]
     29e:	2b00      	cmp	r3, #0
     2a0:	d003      	beq.n	2aa <can_init+0xb2>
		hw->CCCR.reg |= CAN_CCCR_CSR;
     2a2:	69a3      	ldr	r3, [r4, #24]
     2a4:	2210      	movs	r2, #16
     2a6:	4313      	orrs	r3, r2
     2a8:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_acknowledge) {
     2aa:	7a2b      	ldrb	r3, [r5, #8]
     2ac:	2b00      	cmp	r3, #0
     2ae:	d003      	beq.n	2b8 <can_init+0xc0>
		hw->CCCR.reg |= CAN_CCCR_CSA;
     2b0:	69a3      	ldr	r3, [r4, #24]
     2b2:	2208      	movs	r2, #8
     2b4:	4313      	orrs	r3, r2
     2b6:	61a3      	str	r3, [r4, #24]
	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
     2b8:	7a6b      	ldrb	r3, [r5, #9]
     2ba:	041b      	lsls	r3, r3, #16
     2bc:	22f0      	movs	r2, #240	; 0xf0
     2be:	0312      	lsls	r2, r2, #12
     2c0:	4013      	ands	r3, r2
     2c2:	2201      	movs	r2, #1
     2c4:	4313      	orrs	r3, r2
     2c6:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
     2c8:	7b2b      	ldrb	r3, [r5, #12]
     2ca:	7b6a      	ldrb	r2, [r5, #13]
     2cc:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
     2ce:	896a      	ldrh	r2, [r5, #10]
     2d0:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
     2d2:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
     2d4:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
     2d6:	7beb      	ldrb	r3, [r5, #15]
     2d8:	021b      	lsls	r3, r3, #8
     2da:	22fe      	movs	r2, #254	; 0xfe
     2dc:	01d2      	lsls	r2, r2, #7
     2de:	4013      	ands	r3, r2
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
     2e0:	7c29      	ldrb	r1, [r5, #16]
     2e2:	227f      	movs	r2, #127	; 0x7f
     2e4:	400a      	ands	r2, r1
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
     2e6:	4313      	orrs	r3, r2
     2e8:	64a3      	str	r3, [r4, #72]	; 0x48
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
     2ea:	7c6a      	ldrb	r2, [r5, #17]
     2ec:	0112      	lsls	r2, r2, #4
     2ee:	2330      	movs	r3, #48	; 0x30
     2f0:	4013      	ands	r3, r2
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
     2f2:	7ca9      	ldrb	r1, [r5, #18]
     2f4:	0089      	lsls	r1, r1, #2
     2f6:	220c      	movs	r2, #12
     2f8:	400a      	ands	r2, r1
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
     2fa:	4313      	orrs	r3, r2
     2fc:	2280      	movs	r2, #128	; 0x80
     2fe:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_standard_reject) {
     300:	7ceb      	ldrb	r3, [r5, #19]
     302:	2b00      	cmp	r3, #0
     304:	d003      	beq.n	30e <can_init+0x116>
		hw->GFC.reg |= CAN_GFC_RRFS;
     306:	58a3      	ldr	r3, [r4, r2]
     308:	2102      	movs	r1, #2
     30a:	430b      	orrs	r3, r1
     30c:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_extended_reject) {
     30e:	7d2b      	ldrb	r3, [r5, #20]
     310:	2b00      	cmp	r3, #0
     312:	d004      	beq.n	31e <can_init+0x126>
		hw->GFC.reg |= CAN_GFC_RRFE;
     314:	2280      	movs	r2, #128	; 0x80
     316:	58a3      	ldr	r3, [r4, r2]
     318:	2101      	movs	r1, #1
     31a:	430b      	orrs	r3, r1
     31c:	50a3      	str	r3, [r4, r2]
	hw->XIDAM.reg = config->extended_id_mask;
     31e:	2390      	movs	r3, #144	; 0x90
     320:	69aa      	ldr	r2, [r5, #24]
     322:	50e2      	str	r2, [r4, r3]
	if (config->rx_fifo_0_overwrite) {
     324:	7f2b      	ldrb	r3, [r5, #28]
     326:	2b00      	cmp	r3, #0
     328:	d005      	beq.n	336 <can_init+0x13e>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
     32a:	22a0      	movs	r2, #160	; 0xa0
     32c:	58a1      	ldr	r1, [r4, r2]
     32e:	2380      	movs	r3, #128	; 0x80
     330:	061b      	lsls	r3, r3, #24
     332:	430b      	orrs	r3, r1
     334:	50a3      	str	r3, [r4, r2]
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
     336:	22a0      	movs	r2, #160	; 0xa0
     338:	58a1      	ldr	r1, [r4, r2]
     33a:	7f6b      	ldrb	r3, [r5, #29]
     33c:	061b      	lsls	r3, r3, #24
     33e:	20fe      	movs	r0, #254	; 0xfe
     340:	05c0      	lsls	r0, r0, #23
     342:	4003      	ands	r3, r0
     344:	430b      	orrs	r3, r1
     346:	50a3      	str	r3, [r4, r2]
	if (config->rx_fifo_1_overwrite) {
     348:	7fab      	ldrb	r3, [r5, #30]
     34a:	2b00      	cmp	r3, #0
     34c:	d005      	beq.n	35a <can_init+0x162>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
     34e:	3210      	adds	r2, #16
     350:	58a1      	ldr	r1, [r4, r2]
     352:	2380      	movs	r3, #128	; 0x80
     354:	061b      	lsls	r3, r3, #24
     356:	430b      	orrs	r3, r1
     358:	50a3      	str	r3, [r4, r2]
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
     35a:	22b0      	movs	r2, #176	; 0xb0
     35c:	58a1      	ldr	r1, [r4, r2]
     35e:	7feb      	ldrb	r3, [r5, #31]
     360:	061b      	lsls	r3, r3, #24
     362:	20fe      	movs	r0, #254	; 0xfe
     364:	05c0      	lsls	r0, r0, #23
     366:	4003      	ands	r3, r0
     368:	430b      	orrs	r3, r1
     36a:	50a3      	str	r3, [r4, r2]
	if (config->tx_queue_mode) {
     36c:	2320      	movs	r3, #32
     36e:	5ceb      	ldrb	r3, [r5, r3]
     370:	2b00      	cmp	r3, #0
     372:	d005      	beq.n	380 <can_init+0x188>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
     374:	3210      	adds	r2, #16
     376:	58a1      	ldr	r1, [r4, r2]
     378:	2380      	movs	r3, #128	; 0x80
     37a:	05db      	lsls	r3, r3, #23
     37c:	430b      	orrs	r3, r1
     37e:	50a3      	str	r3, [r4, r2]
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
     380:	22f0      	movs	r2, #240	; 0xf0
     382:	58a1      	ldr	r1, [r4, r2]
     384:	2321      	movs	r3, #33	; 0x21
     386:	5ceb      	ldrb	r3, [r5, r3]
     388:	061b      	lsls	r3, r3, #24
     38a:	20fc      	movs	r0, #252	; 0xfc
     38c:	0580      	lsls	r0, r0, #22
     38e:	4003      	ands	r3, r0
     390:	430b      	orrs	r3, r1
     392:	50a3      	str	r3, [r4, r2]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
     394:	2303      	movs	r3, #3
     396:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
     398:	3b04      	subs	r3, #4
     39a:	3a10      	subs	r2, #16
     39c:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
     39e:	3204      	adds	r2, #4
     3a0:	50a3      	str	r3, [r4, r2]
}
     3a2:	bd70      	pop	{r4, r5, r6, pc}
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
     3a4:	493d      	ldr	r1, [pc, #244]	; (49c <can_init+0x2a4>)
     3a6:	201a      	movs	r0, #26
     3a8:	4b41      	ldr	r3, [pc, #260]	; (4b0 <can_init+0x2b8>)
     3aa:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
     3ac:	201a      	movs	r0, #26
     3ae:	4b41      	ldr	r3, [pc, #260]	; (4b4 <can_init+0x2bc>)
     3b0:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
     3b2:	4b3b      	ldr	r3, [pc, #236]	; (4a0 <can_init+0x2a8>)
     3b4:	699a      	ldr	r2, [r3, #24]
     3b6:	2102      	movs	r1, #2
     3b8:	430a      	orrs	r2, r1
     3ba:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
     3bc:	4a3e      	ldr	r2, [pc, #248]	; (4b8 <can_init+0x2c0>)
     3be:	0412      	lsls	r2, r2, #16
     3c0:	0c12      	lsrs	r2, r2, #16
     3c2:	2180      	movs	r1, #128	; 0x80
     3c4:	0389      	lsls	r1, r1, #14
     3c6:	430a      	orrs	r2, r1
     3c8:	2184      	movs	r1, #132	; 0x84
     3ca:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
     3cc:	4a3b      	ldr	r2, [pc, #236]	; (4bc <can_init+0x2c4>)
     3ce:	0412      	lsls	r2, r2, #16
     3d0:	0c12      	lsrs	r2, r2, #16
     3d2:	2180      	movs	r1, #128	; 0x80
     3d4:	0349      	lsls	r1, r1, #13
     3d6:	430a      	orrs	r2, r1
     3d8:	2088      	movs	r0, #136	; 0x88
     3da:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
     3dc:	4a38      	ldr	r2, [pc, #224]	; (4c0 <can_init+0x2c8>)
     3de:	0412      	lsls	r2, r2, #16
     3e0:	0c12      	lsrs	r2, r2, #16
     3e2:	430a      	orrs	r2, r1
     3e4:	3018      	adds	r0, #24
     3e6:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
     3e8:	4a36      	ldr	r2, [pc, #216]	; (4c4 <can_init+0x2cc>)
     3ea:	0412      	lsls	r2, r2, #16
     3ec:	0c12      	lsrs	r2, r2, #16
     3ee:	4311      	orrs	r1, r2
     3f0:	22b0      	movs	r2, #176	; 0xb0
     3f2:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
     3f4:	4a34      	ldr	r2, [pc, #208]	; (4c8 <can_init+0x2d0>)
     3f6:	0412      	lsls	r2, r2, #16
     3f8:	0c12      	lsrs	r2, r2, #16
     3fa:	21ac      	movs	r1, #172	; 0xac
     3fc:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
     3fe:	4a33      	ldr	r2, [pc, #204]	; (4cc <can_init+0x2d4>)
     400:	0412      	lsls	r2, r2, #16
     402:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
     404:	4932      	ldr	r1, [pc, #200]	; (4d0 <can_init+0x2d8>)
     406:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
     408:	21c0      	movs	r1, #192	; 0xc0
     40a:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
     40c:	4a31      	ldr	r2, [pc, #196]	; (4d4 <can_init+0x2dc>)
     40e:	0412      	lsls	r2, r2, #16
     410:	0c12      	lsrs	r2, r2, #16
     412:	2180      	movs	r1, #128	; 0x80
     414:	0309      	lsls	r1, r1, #12
     416:	430a      	orrs	r2, r1
     418:	21f0      	movs	r1, #240	; 0xf0
     41a:	505a      	str	r2, [r3, r1]
     41c:	e703      	b.n	226 <can_init+0x2e>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
     41e:	491f      	ldr	r1, [pc, #124]	; (49c <can_init+0x2a4>)
     420:	201b      	movs	r0, #27
     422:	4b23      	ldr	r3, [pc, #140]	; (4b0 <can_init+0x2b8>)
     424:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
     426:	201b      	movs	r0, #27
     428:	4b22      	ldr	r3, [pc, #136]	; (4b4 <can_init+0x2bc>)
     42a:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
     42c:	4b1d      	ldr	r3, [pc, #116]	; (4a4 <can_init+0x2ac>)
     42e:	699a      	ldr	r2, [r3, #24]
     430:	2102      	movs	r1, #2
     432:	430a      	orrs	r2, r1
     434:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
     436:	4a28      	ldr	r2, [pc, #160]	; (4d8 <can_init+0x2e0>)
     438:	0412      	lsls	r2, r2, #16
     43a:	0c12      	lsrs	r2, r2, #16
     43c:	2180      	movs	r1, #128	; 0x80
     43e:	0389      	lsls	r1, r1, #14
     440:	430a      	orrs	r2, r1
     442:	2184      	movs	r1, #132	; 0x84
     444:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
     446:	4a25      	ldr	r2, [pc, #148]	; (4dc <can_init+0x2e4>)
     448:	0412      	lsls	r2, r2, #16
     44a:	0c12      	lsrs	r2, r2, #16
     44c:	2180      	movs	r1, #128	; 0x80
     44e:	0349      	lsls	r1, r1, #13
     450:	430a      	orrs	r2, r1
     452:	2088      	movs	r0, #136	; 0x88
     454:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
     456:	4a22      	ldr	r2, [pc, #136]	; (4e0 <can_init+0x2e8>)
     458:	0412      	lsls	r2, r2, #16
     45a:	0c12      	lsrs	r2, r2, #16
     45c:	430a      	orrs	r2, r1
     45e:	3018      	adds	r0, #24
     460:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
     462:	4a20      	ldr	r2, [pc, #128]	; (4e4 <can_init+0x2ec>)
     464:	0412      	lsls	r2, r2, #16
     466:	0c12      	lsrs	r2, r2, #16
     468:	4311      	orrs	r1, r2
     46a:	22b0      	movs	r2, #176	; 0xb0
     46c:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
     46e:	4a1e      	ldr	r2, [pc, #120]	; (4e8 <can_init+0x2f0>)
     470:	0412      	lsls	r2, r2, #16
     472:	0c12      	lsrs	r2, r2, #16
     474:	21ac      	movs	r1, #172	; 0xac
     476:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
     478:	4a1c      	ldr	r2, [pc, #112]	; (4ec <can_init+0x2f4>)
     47a:	0412      	lsls	r2, r2, #16
     47c:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
     47e:	4914      	ldr	r1, [pc, #80]	; (4d0 <can_init+0x2d8>)
     480:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
     482:	21c0      	movs	r1, #192	; 0xc0
     484:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
     486:	4a1a      	ldr	r2, [pc, #104]	; (4f0 <can_init+0x2f8>)
     488:	0412      	lsls	r2, r2, #16
     48a:	0c12      	lsrs	r2, r2, #16
     48c:	2180      	movs	r1, #128	; 0x80
     48e:	0309      	lsls	r1, r1, #12
     490:	430a      	orrs	r2, r1
     492:	21f0      	movs	r1, #240	; 0xf0
     494:	505a      	str	r2, [r3, r1]
     496:	e6c6      	b.n	226 <can_init+0x2e>
     498:	000001c1 	.word	0x000001c1
     49c:	20000d18 	.word	0x20000d18
     4a0:	42001c00 	.word	0x42001c00
     4a4:	42002000 	.word	0x42002000
     4a8:	06050a03 	.word	0x06050a03
     4ac:	00050a33 	.word	0x00050a33
     4b0:	000015c5 	.word	0x000015c5
     4b4:	00001555 	.word	0x00001555
     4b8:	2000067c 	.word	0x2000067c
     4bc:	200003fc 	.word	0x200003fc
     4c0:	2000047c 	.word	0x2000047c
     4c4:	2000057c 	.word	0x2000057c
     4c8:	200002fc 	.word	0x200002fc
     4cc:	200006fc 	.word	0x200006fc
     4d0:	04040000 	.word	0x04040000
     4d4:	2000077c 	.word	0x2000077c
     4d8:	20000b3c 	.word	0x20000b3c
     4dc:	200008bc 	.word	0x200008bc
     4e0:	2000093c 	.word	0x2000093c
     4e4:	20000a3c 	.word	0x20000a3c
     4e8:	200007bc 	.word	0x200007bc
     4ec:	20000bbc 	.word	0x20000bbc
     4f0:	20000c3c 	.word	0x20000c3c

000004f4 <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
     4f4:	6802      	ldr	r2, [r0, #0]
     4f6:	6993      	ldr	r3, [r2, #24]
     4f8:	2101      	movs	r1, #1
     4fa:	438b      	bics	r3, r1
     4fc:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
     4fe:	6801      	ldr	r1, [r0, #0]
     500:	2201      	movs	r2, #1
     502:	698b      	ldr	r3, [r1, #24]
     504:	421a      	tst	r2, r3
     506:	d1fc      	bne.n	502 <can_start+0xe>
}
     508:	4770      	bx	lr
	...

0000050c <can_set_rx_standard_filter>:
}

enum status_code can_set_rx_standard_filter(
		struct can_module *const module_inst,
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
     50c:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
     50e:	6803      	ldr	r3, [r0, #0]
     510:	4809      	ldr	r0, [pc, #36]	; (538 <can_set_rx_standard_filter+0x2c>)
     512:	4283      	cmp	r3, r0
     514:	d004      	beq.n	520 <can_set_rx_standard_filter+0x14>
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     516:	4c09      	ldr	r4, [pc, #36]	; (53c <can_set_rx_standard_filter+0x30>)
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     518:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     51a:	42a3      	cmp	r3, r4
     51c:	d006      	beq.n	52c <can_set_rx_standard_filter+0x20>
}
     51e:	bd10      	pop	{r4, pc}
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
     520:	6809      	ldr	r1, [r1, #0]
     522:	0092      	lsls	r2, r2, #2
     524:	4b06      	ldr	r3, [pc, #24]	; (540 <can_set_rx_standard_filter+0x34>)
     526:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     528:	2000      	movs	r0, #0
     52a:	e7f8      	b.n	51e <can_set_rx_standard_filter+0x12>
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
     52c:	6809      	ldr	r1, [r1, #0]
     52e:	0092      	lsls	r2, r2, #2
     530:	4b04      	ldr	r3, [pc, #16]	; (544 <can_set_rx_standard_filter+0x38>)
     532:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     534:	2000      	movs	r0, #0
     536:	e7f2      	b.n	51e <can_set_rx_standard_filter+0x12>
     538:	42001c00 	.word	0x42001c00
     53c:	42002000 	.word	0x42002000
     540:	2000067c 	.word	0x2000067c
     544:	20000b3c 	.word	0x20000b3c

00000548 <can_get_rx_buffer_element>:
}

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
     548:	b570      	push	{r4, r5, r6, lr}
     54a:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
     54c:	6803      	ldr	r3, [r0, #0]
     54e:	4c0d      	ldr	r4, [pc, #52]	; (584 <can_get_rx_buffer_element+0x3c>)
     550:	42a3      	cmp	r3, r4
     552:	d004      	beq.n	55e <can_get_rx_buffer_element+0x16>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     554:	4c0c      	ldr	r4, [pc, #48]	; (588 <can_get_rx_buffer_element+0x40>)
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     556:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     558:	42a3      	cmp	r3, r4
     55a:	d009      	beq.n	570 <can_get_rx_buffer_element+0x28>
}
     55c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
     55e:	0112      	lsls	r2, r2, #4
     560:	490a      	ldr	r1, [pc, #40]	; (58c <can_get_rx_buffer_element+0x44>)
     562:	1889      	adds	r1, r1, r2
     564:	2210      	movs	r2, #16
     566:	0028      	movs	r0, r5
     568:	4b09      	ldr	r3, [pc, #36]	; (590 <can_get_rx_buffer_element+0x48>)
     56a:	4798      	blx	r3
		return STATUS_OK;
     56c:	2000      	movs	r0, #0
     56e:	e7f5      	b.n	55c <can_get_rx_buffer_element+0x14>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
     570:	0112      	lsls	r2, r2, #4
     572:	4908      	ldr	r1, [pc, #32]	; (594 <can_get_rx_buffer_element+0x4c>)
     574:	1889      	adds	r1, r1, r2
     576:	2210      	movs	r2, #16
     578:	0028      	movs	r0, r5
     57a:	4b05      	ldr	r3, [pc, #20]	; (590 <can_get_rx_buffer_element+0x48>)
     57c:	4798      	blx	r3
		return STATUS_OK;
     57e:	2000      	movs	r0, #0
     580:	e7ec      	b.n	55c <can_get_rx_buffer_element+0x14>
     582:	46c0      	nop			; (mov r8, r8)
     584:	42001c00 	.word	0x42001c00
     588:	42002000 	.word	0x42002000
     58c:	200002fc 	.word	0x200002fc
     590:	00005ec9 	.word	0x00005ec9
     594:	200007bc 	.word	0x200007bc

00000598 <can_set_tx_buffer_element>:
}

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
     598:	b510      	push	{r4, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
     59a:	6803      	ldr	r3, [r0, #0]
     59c:	4817      	ldr	r0, [pc, #92]	; (5fc <can_set_tx_buffer_element+0x64>)
     59e:	4283      	cmp	r3, r0
     5a0:	d004      	beq.n	5ac <can_set_tx_buffer_element+0x14>
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     5a2:	4c17      	ldr	r4, [pc, #92]	; (600 <can_set_tx_buffer_element+0x68>)
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     5a4:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     5a6:	42a3      	cmp	r3, r4
     5a8:	d014      	beq.n	5d4 <can_set_tx_buffer_element+0x3c>
}
     5aa:	bd10      	pop	{r4, pc}
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
     5ac:	680b      	ldr	r3, [r1, #0]
     5ae:	4815      	ldr	r0, [pc, #84]	; (604 <can_set_tx_buffer_element+0x6c>)
     5b0:	0112      	lsls	r2, r2, #4
     5b2:	5013      	str	r3, [r2, r0]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
     5b4:	684c      	ldr	r4, [r1, #4]
     5b6:	1883      	adds	r3, r0, r2
     5b8:	605c      	str	r4, [r3, #4]
     5ba:	000b      	movs	r3, r1
     5bc:	3308      	adds	r3, #8
     5be:	3208      	adds	r2, #8
     5c0:	1882      	adds	r2, r0, r2
     5c2:	3110      	adds	r1, #16
			can0_tx_buffer[index].data[i] = tx_element->data[i];
     5c4:	7818      	ldrb	r0, [r3, #0]
     5c6:	7010      	strb	r0, [r2, #0]
     5c8:	3301      	adds	r3, #1
     5ca:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     5cc:	428b      	cmp	r3, r1
     5ce:	d1f9      	bne.n	5c4 <can_set_tx_buffer_element+0x2c>
		return STATUS_OK;
     5d0:	2000      	movs	r0, #0
     5d2:	e7ea      	b.n	5aa <can_set_tx_buffer_element+0x12>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
     5d4:	680b      	ldr	r3, [r1, #0]
     5d6:	480c      	ldr	r0, [pc, #48]	; (608 <can_set_tx_buffer_element+0x70>)
     5d8:	0112      	lsls	r2, r2, #4
     5da:	5013      	str	r3, [r2, r0]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
     5dc:	684c      	ldr	r4, [r1, #4]
     5de:	1883      	adds	r3, r0, r2
     5e0:	605c      	str	r4, [r3, #4]
     5e2:	000b      	movs	r3, r1
     5e4:	3308      	adds	r3, #8
     5e6:	3208      	adds	r2, #8
     5e8:	1882      	adds	r2, r0, r2
     5ea:	3110      	adds	r1, #16
			can1_tx_buffer[index].data[i] = tx_element->data[i];
     5ec:	7818      	ldrb	r0, [r3, #0]
     5ee:	7010      	strb	r0, [r2, #0]
     5f0:	3301      	adds	r3, #1
     5f2:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     5f4:	428b      	cmp	r3, r1
     5f6:	d1f9      	bne.n	5ec <can_set_tx_buffer_element+0x54>
		return STATUS_OK;
     5f8:	2000      	movs	r0, #0
     5fa:	e7d6      	b.n	5aa <can_set_tx_buffer_element+0x12>
     5fc:	42001c00 	.word	0x42001c00
     600:	42002000 	.word	0x42002000
     604:	200006fc 	.word	0x200006fc
     608:	20000bbc 	.word	0x20000bbc

0000060c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     60c:	b500      	push	{lr}
     60e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     610:	ab01      	add	r3, sp, #4
     612:	2280      	movs	r2, #128	; 0x80
     614:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     616:	780a      	ldrb	r2, [r1, #0]
     618:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     61a:	784a      	ldrb	r2, [r1, #1]
     61c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     61e:	788a      	ldrb	r2, [r1, #2]
     620:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     622:	0019      	movs	r1, r3
     624:	4b01      	ldr	r3, [pc, #4]	; (62c <port_pin_set_config+0x20>)
     626:	4798      	blx	r3
}
     628:	b003      	add	sp, #12
     62a:	bd00      	pop	{pc}
     62c:	000016c1 	.word	0x000016c1

00000630 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     630:	b5f0      	push	{r4, r5, r6, r7, lr}
     632:	46de      	mov	lr, fp
     634:	4657      	mov	r7, sl
     636:	464e      	mov	r6, r9
     638:	4645      	mov	r5, r8
     63a:	b5e0      	push	{r5, r6, r7, lr}
     63c:	b087      	sub	sp, #28
     63e:	4680      	mov	r8, r0
     640:	9104      	str	r1, [sp, #16]
     642:	0016      	movs	r6, r2
     644:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     646:	2200      	movs	r2, #0
     648:	2300      	movs	r3, #0
     64a:	2100      	movs	r1, #0
     64c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     64e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     650:	2001      	movs	r0, #1
     652:	0021      	movs	r1, r4
     654:	9600      	str	r6, [sp, #0]
     656:	9701      	str	r7, [sp, #4]
     658:	465c      	mov	r4, fp
     65a:	9403      	str	r4, [sp, #12]
     65c:	4644      	mov	r4, r8
     65e:	9405      	str	r4, [sp, #20]
     660:	e013      	b.n	68a <long_division+0x5a>
     662:	2420      	movs	r4, #32
     664:	1a64      	subs	r4, r4, r1
     666:	0005      	movs	r5, r0
     668:	40e5      	lsrs	r5, r4
     66a:	46a8      	mov	r8, r5
     66c:	e014      	b.n	698 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     66e:	9c00      	ldr	r4, [sp, #0]
     670:	9d01      	ldr	r5, [sp, #4]
     672:	1b12      	subs	r2, r2, r4
     674:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     676:	465c      	mov	r4, fp
     678:	464d      	mov	r5, r9
     67a:	432c      	orrs	r4, r5
     67c:	46a3      	mov	fp, r4
     67e:	9c03      	ldr	r4, [sp, #12]
     680:	4645      	mov	r5, r8
     682:	432c      	orrs	r4, r5
     684:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     686:	3901      	subs	r1, #1
     688:	d325      	bcc.n	6d6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     68a:	2420      	movs	r4, #32
     68c:	4264      	negs	r4, r4
     68e:	190c      	adds	r4, r1, r4
     690:	d4e7      	bmi.n	662 <long_division+0x32>
     692:	0005      	movs	r5, r0
     694:	40a5      	lsls	r5, r4
     696:	46a8      	mov	r8, r5
     698:	0004      	movs	r4, r0
     69a:	408c      	lsls	r4, r1
     69c:	46a1      	mov	r9, r4
		r = r << 1;
     69e:	1892      	adds	r2, r2, r2
     6a0:	415b      	adcs	r3, r3
     6a2:	0014      	movs	r4, r2
     6a4:	001d      	movs	r5, r3
		if (n & bit_shift) {
     6a6:	9e05      	ldr	r6, [sp, #20]
     6a8:	464f      	mov	r7, r9
     6aa:	403e      	ands	r6, r7
     6ac:	46b4      	mov	ip, r6
     6ae:	9e04      	ldr	r6, [sp, #16]
     6b0:	4647      	mov	r7, r8
     6b2:	403e      	ands	r6, r7
     6b4:	46b2      	mov	sl, r6
     6b6:	4666      	mov	r6, ip
     6b8:	4657      	mov	r7, sl
     6ba:	433e      	orrs	r6, r7
     6bc:	d003      	beq.n	6c6 <long_division+0x96>
			r |= 0x01;
     6be:	0006      	movs	r6, r0
     6c0:	4326      	orrs	r6, r4
     6c2:	0032      	movs	r2, r6
     6c4:	002b      	movs	r3, r5
		if (r >= d) {
     6c6:	9c00      	ldr	r4, [sp, #0]
     6c8:	9d01      	ldr	r5, [sp, #4]
     6ca:	429d      	cmp	r5, r3
     6cc:	d8db      	bhi.n	686 <long_division+0x56>
     6ce:	d1ce      	bne.n	66e <long_division+0x3e>
     6d0:	4294      	cmp	r4, r2
     6d2:	d8d8      	bhi.n	686 <long_division+0x56>
     6d4:	e7cb      	b.n	66e <long_division+0x3e>
     6d6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     6d8:	4658      	mov	r0, fp
     6da:	0019      	movs	r1, r3
     6dc:	b007      	add	sp, #28
     6de:	bc3c      	pop	{r2, r3, r4, r5}
     6e0:	4690      	mov	r8, r2
     6e2:	4699      	mov	r9, r3
     6e4:	46a2      	mov	sl, r4
     6e6:	46ab      	mov	fp, r5
     6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000006ea <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     6ea:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     6ec:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6ee:	2340      	movs	r3, #64	; 0x40
     6f0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     6f2:	4281      	cmp	r1, r0
     6f4:	d202      	bcs.n	6fc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     6f6:	0018      	movs	r0, r3
     6f8:	bd10      	pop	{r4, pc}
		baud_calculated++;
     6fa:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     6fc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     6fe:	1c63      	adds	r3, r4, #1
     700:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     702:	4288      	cmp	r0, r1
     704:	d9f9      	bls.n	6fa <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     706:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     708:	2cff      	cmp	r4, #255	; 0xff
     70a:	d8f4      	bhi.n	6f6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     70c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     70e:	2300      	movs	r3, #0
     710:	e7f1      	b.n	6f6 <_sercom_get_sync_baud_val+0xc>
	...

00000714 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     714:	b5f0      	push	{r4, r5, r6, r7, lr}
     716:	b083      	sub	sp, #12
     718:	000f      	movs	r7, r1
     71a:	0016      	movs	r6, r2
     71c:	aa08      	add	r2, sp, #32
     71e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     720:	0004      	movs	r4, r0
     722:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     724:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     726:	42bc      	cmp	r4, r7
     728:	d902      	bls.n	730 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     72a:	0010      	movs	r0, r2
     72c:	b003      	add	sp, #12
     72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     730:	2b00      	cmp	r3, #0
     732:	d114      	bne.n	75e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     734:	0002      	movs	r2, r0
     736:	0008      	movs	r0, r1
     738:	2100      	movs	r1, #0
     73a:	4c19      	ldr	r4, [pc, #100]	; (7a0 <_sercom_get_async_baud_val+0x8c>)
     73c:	47a0      	blx	r4
     73e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     740:	003a      	movs	r2, r7
     742:	2300      	movs	r3, #0
     744:	2000      	movs	r0, #0
     746:	4c17      	ldr	r4, [pc, #92]	; (7a4 <_sercom_get_async_baud_val+0x90>)
     748:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     74a:	2200      	movs	r2, #0
     74c:	2301      	movs	r3, #1
     74e:	1a12      	subs	r2, r2, r0
     750:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     752:	0c12      	lsrs	r2, r2, #16
     754:	041b      	lsls	r3, r3, #16
     756:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     758:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     75a:	2200      	movs	r2, #0
     75c:	e7e5      	b.n	72a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     75e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     760:	2b01      	cmp	r3, #1
     762:	d1f9      	bne.n	758 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     764:	000a      	movs	r2, r1
     766:	2300      	movs	r3, #0
     768:	2100      	movs	r1, #0
     76a:	4c0d      	ldr	r4, [pc, #52]	; (7a0 <_sercom_get_async_baud_val+0x8c>)
     76c:	47a0      	blx	r4
     76e:	0002      	movs	r2, r0
     770:	000b      	movs	r3, r1
     772:	9200      	str	r2, [sp, #0]
     774:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     776:	0038      	movs	r0, r7
     778:	2100      	movs	r1, #0
     77a:	4c0a      	ldr	r4, [pc, #40]	; (7a4 <_sercom_get_async_baud_val+0x90>)
     77c:	47a0      	blx	r4
     77e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     780:	2380      	movs	r3, #128	; 0x80
     782:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     784:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     786:	4298      	cmp	r0, r3
     788:	d8cf      	bhi.n	72a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     78a:	0f79      	lsrs	r1, r7, #29
     78c:	00f8      	lsls	r0, r7, #3
     78e:	9a00      	ldr	r2, [sp, #0]
     790:	9b01      	ldr	r3, [sp, #4]
     792:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     794:	00ea      	lsls	r2, r5, #3
     796:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     798:	b2d2      	uxtb	r2, r2
     79a:	0352      	lsls	r2, r2, #13
     79c:	432a      	orrs	r2, r5
     79e:	e7db      	b.n	758 <_sercom_get_async_baud_val+0x44>
     7a0:	00005e19 	.word	0x00005e19
     7a4:	00000631 	.word	0x00000631

000007a8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     7a8:	b510      	push	{r4, lr}
     7aa:	b082      	sub	sp, #8
     7ac:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     7ae:	4b0e      	ldr	r3, [pc, #56]	; (7e8 <sercom_set_gclk_generator+0x40>)
     7b0:	781b      	ldrb	r3, [r3, #0]
     7b2:	2b00      	cmp	r3, #0
     7b4:	d007      	beq.n	7c6 <sercom_set_gclk_generator+0x1e>
     7b6:	2900      	cmp	r1, #0
     7b8:	d105      	bne.n	7c6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     7ba:	4b0b      	ldr	r3, [pc, #44]	; (7e8 <sercom_set_gclk_generator+0x40>)
     7bc:	785b      	ldrb	r3, [r3, #1]
     7be:	4283      	cmp	r3, r0
     7c0:	d010      	beq.n	7e4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     7c2:	201d      	movs	r0, #29
     7c4:	e00c      	b.n	7e0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     7c6:	a901      	add	r1, sp, #4
     7c8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     7ca:	2012      	movs	r0, #18
     7cc:	4b07      	ldr	r3, [pc, #28]	; (7ec <sercom_set_gclk_generator+0x44>)
     7ce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     7d0:	2012      	movs	r0, #18
     7d2:	4b07      	ldr	r3, [pc, #28]	; (7f0 <sercom_set_gclk_generator+0x48>)
     7d4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     7d6:	4b04      	ldr	r3, [pc, #16]	; (7e8 <sercom_set_gclk_generator+0x40>)
     7d8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     7da:	2201      	movs	r2, #1
     7dc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     7de:	2000      	movs	r0, #0
}
     7e0:	b002      	add	sp, #8
     7e2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     7e4:	2000      	movs	r0, #0
     7e6:	e7fb      	b.n	7e0 <sercom_set_gclk_generator+0x38>
     7e8:	20000c7c 	.word	0x20000c7c
     7ec:	000015c5 	.word	0x000015c5
     7f0:	00001555 	.word	0x00001555

000007f4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     7f4:	4b40      	ldr	r3, [pc, #256]	; (8f8 <_sercom_get_default_pad+0x104>)
     7f6:	4298      	cmp	r0, r3
     7f8:	d031      	beq.n	85e <_sercom_get_default_pad+0x6a>
     7fa:	d90a      	bls.n	812 <_sercom_get_default_pad+0x1e>
     7fc:	4b3f      	ldr	r3, [pc, #252]	; (8fc <_sercom_get_default_pad+0x108>)
     7fe:	4298      	cmp	r0, r3
     800:	d04d      	beq.n	89e <_sercom_get_default_pad+0xaa>
     802:	4b3f      	ldr	r3, [pc, #252]	; (900 <_sercom_get_default_pad+0x10c>)
     804:	4298      	cmp	r0, r3
     806:	d05a      	beq.n	8be <_sercom_get_default_pad+0xca>
     808:	4b3e      	ldr	r3, [pc, #248]	; (904 <_sercom_get_default_pad+0x110>)
     80a:	4298      	cmp	r0, r3
     80c:	d037      	beq.n	87e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     80e:	2000      	movs	r0, #0
}
     810:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     812:	4b3d      	ldr	r3, [pc, #244]	; (908 <_sercom_get_default_pad+0x114>)
     814:	4298      	cmp	r0, r3
     816:	d00c      	beq.n	832 <_sercom_get_default_pad+0x3e>
     818:	4b3c      	ldr	r3, [pc, #240]	; (90c <_sercom_get_default_pad+0x118>)
     81a:	4298      	cmp	r0, r3
     81c:	d1f7      	bne.n	80e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     81e:	2901      	cmp	r1, #1
     820:	d017      	beq.n	852 <_sercom_get_default_pad+0x5e>
     822:	2900      	cmp	r1, #0
     824:	d05d      	beq.n	8e2 <_sercom_get_default_pad+0xee>
     826:	2902      	cmp	r1, #2
     828:	d015      	beq.n	856 <_sercom_get_default_pad+0x62>
     82a:	2903      	cmp	r1, #3
     82c:	d015      	beq.n	85a <_sercom_get_default_pad+0x66>
	return 0;
     82e:	2000      	movs	r0, #0
     830:	e7ee      	b.n	810 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     832:	2901      	cmp	r1, #1
     834:	d007      	beq.n	846 <_sercom_get_default_pad+0x52>
     836:	2900      	cmp	r1, #0
     838:	d051      	beq.n	8de <_sercom_get_default_pad+0xea>
     83a:	2902      	cmp	r1, #2
     83c:	d005      	beq.n	84a <_sercom_get_default_pad+0x56>
     83e:	2903      	cmp	r1, #3
     840:	d005      	beq.n	84e <_sercom_get_default_pad+0x5a>
	return 0;
     842:	2000      	movs	r0, #0
     844:	e7e4      	b.n	810 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     846:	4832      	ldr	r0, [pc, #200]	; (910 <_sercom_get_default_pad+0x11c>)
     848:	e7e2      	b.n	810 <_sercom_get_default_pad+0x1c>
     84a:	4832      	ldr	r0, [pc, #200]	; (914 <_sercom_get_default_pad+0x120>)
     84c:	e7e0      	b.n	810 <_sercom_get_default_pad+0x1c>
     84e:	4832      	ldr	r0, [pc, #200]	; (918 <_sercom_get_default_pad+0x124>)
     850:	e7de      	b.n	810 <_sercom_get_default_pad+0x1c>
     852:	4832      	ldr	r0, [pc, #200]	; (91c <_sercom_get_default_pad+0x128>)
     854:	e7dc      	b.n	810 <_sercom_get_default_pad+0x1c>
     856:	4832      	ldr	r0, [pc, #200]	; (920 <_sercom_get_default_pad+0x12c>)
     858:	e7da      	b.n	810 <_sercom_get_default_pad+0x1c>
     85a:	4832      	ldr	r0, [pc, #200]	; (924 <_sercom_get_default_pad+0x130>)
     85c:	e7d8      	b.n	810 <_sercom_get_default_pad+0x1c>
     85e:	2901      	cmp	r1, #1
     860:	d007      	beq.n	872 <_sercom_get_default_pad+0x7e>
     862:	2900      	cmp	r1, #0
     864:	d03f      	beq.n	8e6 <_sercom_get_default_pad+0xf2>
     866:	2902      	cmp	r1, #2
     868:	d005      	beq.n	876 <_sercom_get_default_pad+0x82>
     86a:	2903      	cmp	r1, #3
     86c:	d005      	beq.n	87a <_sercom_get_default_pad+0x86>
	return 0;
     86e:	2000      	movs	r0, #0
     870:	e7ce      	b.n	810 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     872:	482d      	ldr	r0, [pc, #180]	; (928 <_sercom_get_default_pad+0x134>)
     874:	e7cc      	b.n	810 <_sercom_get_default_pad+0x1c>
     876:	482d      	ldr	r0, [pc, #180]	; (92c <_sercom_get_default_pad+0x138>)
     878:	e7ca      	b.n	810 <_sercom_get_default_pad+0x1c>
     87a:	482d      	ldr	r0, [pc, #180]	; (930 <_sercom_get_default_pad+0x13c>)
     87c:	e7c8      	b.n	810 <_sercom_get_default_pad+0x1c>
     87e:	2901      	cmp	r1, #1
     880:	d007      	beq.n	892 <_sercom_get_default_pad+0x9e>
     882:	2900      	cmp	r1, #0
     884:	d031      	beq.n	8ea <_sercom_get_default_pad+0xf6>
     886:	2902      	cmp	r1, #2
     888:	d005      	beq.n	896 <_sercom_get_default_pad+0xa2>
     88a:	2903      	cmp	r1, #3
     88c:	d005      	beq.n	89a <_sercom_get_default_pad+0xa6>
	return 0;
     88e:	2000      	movs	r0, #0
     890:	e7be      	b.n	810 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     892:	4828      	ldr	r0, [pc, #160]	; (934 <_sercom_get_default_pad+0x140>)
     894:	e7bc      	b.n	810 <_sercom_get_default_pad+0x1c>
     896:	4828      	ldr	r0, [pc, #160]	; (938 <_sercom_get_default_pad+0x144>)
     898:	e7ba      	b.n	810 <_sercom_get_default_pad+0x1c>
     89a:	4828      	ldr	r0, [pc, #160]	; (93c <_sercom_get_default_pad+0x148>)
     89c:	e7b8      	b.n	810 <_sercom_get_default_pad+0x1c>
     89e:	2901      	cmp	r1, #1
     8a0:	d007      	beq.n	8b2 <_sercom_get_default_pad+0xbe>
     8a2:	2900      	cmp	r1, #0
     8a4:	d023      	beq.n	8ee <_sercom_get_default_pad+0xfa>
     8a6:	2902      	cmp	r1, #2
     8a8:	d005      	beq.n	8b6 <_sercom_get_default_pad+0xc2>
     8aa:	2903      	cmp	r1, #3
     8ac:	d005      	beq.n	8ba <_sercom_get_default_pad+0xc6>
	return 0;
     8ae:	2000      	movs	r0, #0
     8b0:	e7ae      	b.n	810 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8b2:	4823      	ldr	r0, [pc, #140]	; (940 <_sercom_get_default_pad+0x14c>)
     8b4:	e7ac      	b.n	810 <_sercom_get_default_pad+0x1c>
     8b6:	4823      	ldr	r0, [pc, #140]	; (944 <_sercom_get_default_pad+0x150>)
     8b8:	e7aa      	b.n	810 <_sercom_get_default_pad+0x1c>
     8ba:	4823      	ldr	r0, [pc, #140]	; (948 <_sercom_get_default_pad+0x154>)
     8bc:	e7a8      	b.n	810 <_sercom_get_default_pad+0x1c>
     8be:	2901      	cmp	r1, #1
     8c0:	d007      	beq.n	8d2 <_sercom_get_default_pad+0xde>
     8c2:	2900      	cmp	r1, #0
     8c4:	d015      	beq.n	8f2 <_sercom_get_default_pad+0xfe>
     8c6:	2902      	cmp	r1, #2
     8c8:	d005      	beq.n	8d6 <_sercom_get_default_pad+0xe2>
     8ca:	2903      	cmp	r1, #3
     8cc:	d005      	beq.n	8da <_sercom_get_default_pad+0xe6>
	return 0;
     8ce:	2000      	movs	r0, #0
     8d0:	e79e      	b.n	810 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8d2:	481e      	ldr	r0, [pc, #120]	; (94c <_sercom_get_default_pad+0x158>)
     8d4:	e79c      	b.n	810 <_sercom_get_default_pad+0x1c>
     8d6:	481e      	ldr	r0, [pc, #120]	; (950 <_sercom_get_default_pad+0x15c>)
     8d8:	e79a      	b.n	810 <_sercom_get_default_pad+0x1c>
     8da:	481e      	ldr	r0, [pc, #120]	; (954 <_sercom_get_default_pad+0x160>)
     8dc:	e798      	b.n	810 <_sercom_get_default_pad+0x1c>
     8de:	481e      	ldr	r0, [pc, #120]	; (958 <_sercom_get_default_pad+0x164>)
     8e0:	e796      	b.n	810 <_sercom_get_default_pad+0x1c>
     8e2:	481e      	ldr	r0, [pc, #120]	; (95c <_sercom_get_default_pad+0x168>)
     8e4:	e794      	b.n	810 <_sercom_get_default_pad+0x1c>
     8e6:	481e      	ldr	r0, [pc, #120]	; (960 <_sercom_get_default_pad+0x16c>)
     8e8:	e792      	b.n	810 <_sercom_get_default_pad+0x1c>
     8ea:	481e      	ldr	r0, [pc, #120]	; (964 <_sercom_get_default_pad+0x170>)
     8ec:	e790      	b.n	810 <_sercom_get_default_pad+0x1c>
     8ee:	481e      	ldr	r0, [pc, #120]	; (968 <_sercom_get_default_pad+0x174>)
     8f0:	e78e      	b.n	810 <_sercom_get_default_pad+0x1c>
     8f2:	481e      	ldr	r0, [pc, #120]	; (96c <_sercom_get_default_pad+0x178>)
     8f4:	e78c      	b.n	810 <_sercom_get_default_pad+0x1c>
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	42000c00 	.word	0x42000c00
     8fc:	42001400 	.word	0x42001400
     900:	42001800 	.word	0x42001800
     904:	42001000 	.word	0x42001000
     908:	42000400 	.word	0x42000400
     90c:	42000800 	.word	0x42000800
     910:	00050003 	.word	0x00050003
     914:	00060003 	.word	0x00060003
     918:	00070003 	.word	0x00070003
     91c:	00110002 	.word	0x00110002
     920:	00120002 	.word	0x00120002
     924:	00130002 	.word	0x00130002
     928:	000d0002 	.word	0x000d0002
     92c:	000e0002 	.word	0x000e0002
     930:	000f0002 	.word	0x000f0002
     934:	00170002 	.word	0x00170002
     938:	00180002 	.word	0x00180002
     93c:	00190002 	.word	0x00190002
     940:	00290003 	.word	0x00290003
     944:	002a0003 	.word	0x002a0003
     948:	002b0003 	.word	0x002b0003
     94c:	00230003 	.word	0x00230003
     950:	00200003 	.word	0x00200003
     954:	00210003 	.word	0x00210003
     958:	00040003 	.word	0x00040003
     95c:	00100002 	.word	0x00100002
     960:	000c0002 	.word	0x000c0002
     964:	00160002 	.word	0x00160002
     968:	00280003 	.word	0x00280003
     96c:	00220003 	.word	0x00220003

00000970 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     970:	b530      	push	{r4, r5, lr}
     972:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     974:	4b0b      	ldr	r3, [pc, #44]	; (9a4 <_sercom_get_sercom_inst_index+0x34>)
     976:	466a      	mov	r2, sp
     978:	cb32      	ldmia	r3!, {r1, r4, r5}
     97a:	c232      	stmia	r2!, {r1, r4, r5}
     97c:	cb32      	ldmia	r3!, {r1, r4, r5}
     97e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     980:	9b00      	ldr	r3, [sp, #0]
     982:	4283      	cmp	r3, r0
     984:	d00b      	beq.n	99e <_sercom_get_sercom_inst_index+0x2e>
     986:	2301      	movs	r3, #1
     988:	009a      	lsls	r2, r3, #2
     98a:	4669      	mov	r1, sp
     98c:	5852      	ldr	r2, [r2, r1]
     98e:	4282      	cmp	r2, r0
     990:	d006      	beq.n	9a0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     992:	3301      	adds	r3, #1
     994:	2b06      	cmp	r3, #6
     996:	d1f7      	bne.n	988 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     998:	2000      	movs	r0, #0
}
     99a:	b007      	add	sp, #28
     99c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     99e:	2300      	movs	r3, #0
			return i;
     9a0:	b2d8      	uxtb	r0, r3
     9a2:	e7fa      	b.n	99a <_sercom_get_sercom_inst_index+0x2a>
     9a4:	00007c80 	.word	0x00007c80

000009a8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     9a8:	4770      	bx	lr
	...

000009ac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     9ae:	4b0a      	ldr	r3, [pc, #40]	; (9d8 <_sercom_set_handler+0x2c>)
     9b0:	781b      	ldrb	r3, [r3, #0]
     9b2:	2b00      	cmp	r3, #0
     9b4:	d10c      	bne.n	9d0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     9b6:	4f09      	ldr	r7, [pc, #36]	; (9dc <_sercom_set_handler+0x30>)
     9b8:	4e09      	ldr	r6, [pc, #36]	; (9e0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     9ba:	4d0a      	ldr	r5, [pc, #40]	; (9e4 <_sercom_set_handler+0x38>)
     9bc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     9be:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     9c0:	195a      	adds	r2, r3, r5
     9c2:	6014      	str	r4, [r2, #0]
     9c4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9c6:	2b18      	cmp	r3, #24
     9c8:	d1f9      	bne.n	9be <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     9ca:	2201      	movs	r2, #1
     9cc:	4b02      	ldr	r3, [pc, #8]	; (9d8 <_sercom_set_handler+0x2c>)
     9ce:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     9d0:	0080      	lsls	r0, r0, #2
     9d2:	4b02      	ldr	r3, [pc, #8]	; (9dc <_sercom_set_handler+0x30>)
     9d4:	50c1      	str	r1, [r0, r3]
}
     9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d8:	20000c7e 	.word	0x20000c7e
     9dc:	20000c80 	.word	0x20000c80
     9e0:	000009a9 	.word	0x000009a9
     9e4:	20000d1c 	.word	0x20000d1c

000009e8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     9e8:	b500      	push	{lr}
     9ea:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     9ec:	2309      	movs	r3, #9
     9ee:	466a      	mov	r2, sp
     9f0:	7013      	strb	r3, [r2, #0]
     9f2:	3301      	adds	r3, #1
     9f4:	7053      	strb	r3, [r2, #1]
     9f6:	3301      	adds	r3, #1
     9f8:	7093      	strb	r3, [r2, #2]
     9fa:	3301      	adds	r3, #1
     9fc:	70d3      	strb	r3, [r2, #3]
     9fe:	3301      	adds	r3, #1
     a00:	7113      	strb	r3, [r2, #4]
     a02:	3301      	adds	r3, #1
     a04:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     a06:	4b03      	ldr	r3, [pc, #12]	; (a14 <_sercom_get_interrupt_vector+0x2c>)
     a08:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     a0a:	466b      	mov	r3, sp
     a0c:	5618      	ldrsb	r0, [r3, r0]
}
     a0e:	b003      	add	sp, #12
     a10:	bd00      	pop	{pc}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	00000971 	.word	0x00000971

00000a18 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     a18:	b510      	push	{r4, lr}
     a1a:	4b02      	ldr	r3, [pc, #8]	; (a24 <SERCOM0_Handler+0xc>)
     a1c:	681b      	ldr	r3, [r3, #0]
     a1e:	2000      	movs	r0, #0
     a20:	4798      	blx	r3
     a22:	bd10      	pop	{r4, pc}
     a24:	20000c80 	.word	0x20000c80

00000a28 <SERCOM1_Handler>:
     a28:	b510      	push	{r4, lr}
     a2a:	4b02      	ldr	r3, [pc, #8]	; (a34 <SERCOM1_Handler+0xc>)
     a2c:	685b      	ldr	r3, [r3, #4]
     a2e:	2001      	movs	r0, #1
     a30:	4798      	blx	r3
     a32:	bd10      	pop	{r4, pc}
     a34:	20000c80 	.word	0x20000c80

00000a38 <SERCOM2_Handler>:
     a38:	b510      	push	{r4, lr}
     a3a:	4b02      	ldr	r3, [pc, #8]	; (a44 <SERCOM2_Handler+0xc>)
     a3c:	689b      	ldr	r3, [r3, #8]
     a3e:	2002      	movs	r0, #2
     a40:	4798      	blx	r3
     a42:	bd10      	pop	{r4, pc}
     a44:	20000c80 	.word	0x20000c80

00000a48 <SERCOM3_Handler>:
     a48:	b510      	push	{r4, lr}
     a4a:	4b02      	ldr	r3, [pc, #8]	; (a54 <SERCOM3_Handler+0xc>)
     a4c:	68db      	ldr	r3, [r3, #12]
     a4e:	2003      	movs	r0, #3
     a50:	4798      	blx	r3
     a52:	bd10      	pop	{r4, pc}
     a54:	20000c80 	.word	0x20000c80

00000a58 <SERCOM4_Handler>:
     a58:	b510      	push	{r4, lr}
     a5a:	4b02      	ldr	r3, [pc, #8]	; (a64 <SERCOM4_Handler+0xc>)
     a5c:	691b      	ldr	r3, [r3, #16]
     a5e:	2004      	movs	r0, #4
     a60:	4798      	blx	r3
     a62:	bd10      	pop	{r4, pc}
     a64:	20000c80 	.word	0x20000c80

00000a68 <SERCOM5_Handler>:
     a68:	b510      	push	{r4, lr}
     a6a:	4b02      	ldr	r3, [pc, #8]	; (a74 <SERCOM5_Handler+0xc>)
     a6c:	695b      	ldr	r3, [r3, #20]
     a6e:	2005      	movs	r0, #5
     a70:	4798      	blx	r3
     a72:	bd10      	pop	{r4, pc}
     a74:	20000c80 	.word	0x20000c80

00000a78 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a78:	b5f0      	push	{r4, r5, r6, r7, lr}
     a7a:	46de      	mov	lr, fp
     a7c:	4657      	mov	r7, sl
     a7e:	464e      	mov	r6, r9
     a80:	4645      	mov	r5, r8
     a82:	b5e0      	push	{r5, r6, r7, lr}
     a84:	b091      	sub	sp, #68	; 0x44
     a86:	0005      	movs	r5, r0
     a88:	000c      	movs	r4, r1
     a8a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     a8c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a8e:	0008      	movs	r0, r1
     a90:	4bd2      	ldr	r3, [pc, #840]	; (ddc <usart_init+0x364>)
     a92:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
     a94:	2805      	cmp	r0, #5
     a96:	d00d      	beq.n	ab4 <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
     a98:	0007      	movs	r7, r0
     a9a:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a9c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     a9e:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     aa0:	07d2      	lsls	r2, r2, #31
     aa2:	d509      	bpl.n	ab8 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     aa4:	0018      	movs	r0, r3
     aa6:	b011      	add	sp, #68	; 0x44
     aa8:	bc3c      	pop	{r2, r3, r4, r5}
     aaa:	4690      	mov	r8, r2
     aac:	4699      	mov	r9, r3
     aae:	46a2      	mov	sl, r4
     ab0:	46ab      	mov	fp, r5
     ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
     ab4:	2719      	movs	r7, #25
     ab6:	e7f1      	b.n	a9c <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ab8:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     aba:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     abc:	0792      	lsls	r2, r2, #30
     abe:	d4f1      	bmi.n	aa4 <usart_init+0x2c>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     ac0:	4ac7      	ldr	r2, [pc, #796]	; (de0 <usart_init+0x368>)
     ac2:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     ac4:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ac6:	3b1b      	subs	r3, #27
     ac8:	4083      	lsls	r3, r0
     aca:	430b      	orrs	r3, r1
     acc:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
     ace:	a90f      	add	r1, sp, #60	; 0x3c
     ad0:	2335      	movs	r3, #53	; 0x35
     ad2:	4698      	mov	r8, r3
     ad4:	5cf3      	ldrb	r3, [r6, r3]
     ad6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ad8:	b2ff      	uxtb	r7, r7
     ada:	0038      	movs	r0, r7
     adc:	4bc1      	ldr	r3, [pc, #772]	; (de4 <usart_init+0x36c>)
     ade:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ae0:	0038      	movs	r0, r7
     ae2:	4bc1      	ldr	r3, [pc, #772]	; (de8 <usart_init+0x370>)
     ae4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ae6:	4643      	mov	r3, r8
     ae8:	5cf0      	ldrb	r0, [r6, r3]
     aea:	2100      	movs	r1, #0
     aec:	4bbf      	ldr	r3, [pc, #764]	; (dec <usart_init+0x374>)
     aee:	4798      	blx	r3
	module->character_size = config->character_size;
     af0:	7af3      	ldrb	r3, [r6, #11]
     af2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     af4:	232c      	movs	r3, #44	; 0x2c
     af6:	5cf3      	ldrb	r3, [r6, r3]
     af8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     afa:	232d      	movs	r3, #45	; 0x2d
     afc:	5cf3      	ldrb	r3, [r6, r3]
     afe:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     b00:	7ef3      	ldrb	r3, [r6, #27]
     b02:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b04:	2324      	movs	r3, #36	; 0x24
     b06:	5cf3      	ldrb	r3, [r6, r3]
     b08:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b0a:	682b      	ldr	r3, [r5, #0]
     b0c:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b0e:	0018      	movs	r0, r3
     b10:	4bb2      	ldr	r3, [pc, #712]	; (ddc <usart_init+0x364>)
     b12:	4798      	blx	r3
	if (sercom_index == 5) {
     b14:	2805      	cmp	r0, #5
     b16:	d01d      	beq.n	b54 <usart_init+0xdc>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b18:	3013      	adds	r0, #19
	uint16_t baud  = 0;
     b1a:	2200      	movs	r2, #0
     b1c:	230e      	movs	r3, #14
     b1e:	a906      	add	r1, sp, #24
     b20:	468c      	mov	ip, r1
     b22:	4463      	add	r3, ip
     b24:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     b26:	8a33      	ldrh	r3, [r6, #16]
     b28:	4698      	mov	r8, r3
     b2a:	2380      	movs	r3, #128	; 0x80
     b2c:	01db      	lsls	r3, r3, #7
     b2e:	4598      	cmp	r8, r3
     b30:	d100      	bne.n	b34 <usart_init+0xbc>
     b32:	e0c3      	b.n	cbc <usart_init+0x244>
     b34:	d910      	bls.n	b58 <usart_init+0xe0>
     b36:	23c0      	movs	r3, #192	; 0xc0
     b38:	01db      	lsls	r3, r3, #7
     b3a:	4598      	cmp	r8, r3
     b3c:	d100      	bne.n	b40 <usart_init+0xc8>
     b3e:	e0b8      	b.n	cb2 <usart_init+0x23a>
     b40:	2380      	movs	r3, #128	; 0x80
     b42:	021b      	lsls	r3, r3, #8
     b44:	4598      	cmp	r8, r3
     b46:	d000      	beq.n	b4a <usart_init+0xd2>
     b48:	e166      	b.n	e18 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     b4a:	2303      	movs	r3, #3
     b4c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b4e:	2300      	movs	r3, #0
     b50:	9307      	str	r3, [sp, #28]
     b52:	e00a      	b.n	b6a <usart_init+0xf2>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     b54:	2019      	movs	r0, #25
     b56:	e7e0      	b.n	b1a <usart_init+0xa2>
	switch (config->sample_rate) {
     b58:	2380      	movs	r3, #128	; 0x80
     b5a:	019b      	lsls	r3, r3, #6
     b5c:	4598      	cmp	r8, r3
     b5e:	d000      	beq.n	b62 <usart_init+0xea>
     b60:	e15a      	b.n	e18 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b62:	2310      	movs	r3, #16
     b64:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b66:	3b0f      	subs	r3, #15
     b68:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     b6a:	6833      	ldr	r3, [r6, #0]
     b6c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     b6e:	68f3      	ldr	r3, [r6, #12]
     b70:	469b      	mov	fp, r3
		config->sample_adjustment |
     b72:	6973      	ldr	r3, [r6, #20]
     b74:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b76:	7e33      	ldrb	r3, [r6, #24]
     b78:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b7a:	232e      	movs	r3, #46	; 0x2e
     b7c:	5cf3      	ldrb	r3, [r6, r3]
     b7e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     b80:	6873      	ldr	r3, [r6, #4]
     b82:	4699      	mov	r9, r3
	switch (transfer_mode)
     b84:	2b00      	cmp	r3, #0
     b86:	d100      	bne.n	b8a <usart_init+0x112>
     b88:	e0c5      	b.n	d16 <usart_init+0x29e>
     b8a:	2380      	movs	r3, #128	; 0x80
     b8c:	055b      	lsls	r3, r3, #21
     b8e:	4599      	cmp	r9, r3
     b90:	d100      	bne.n	b94 <usart_init+0x11c>
     b92:	e0a8      	b.n	ce6 <usart_init+0x26e>
	if(config->encoding_format_enable) {
     b94:	7e73      	ldrb	r3, [r6, #25]
     b96:	2b00      	cmp	r3, #0
     b98:	d002      	beq.n	ba0 <usart_init+0x128>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     b9a:	7eb3      	ldrb	r3, [r6, #26]
     b9c:	9a02      	ldr	r2, [sp, #8]
     b9e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     ba0:	230e      	movs	r3, #14
     ba2:	aa06      	add	r2, sp, #24
     ba4:	4694      	mov	ip, r2
     ba6:	4463      	add	r3, ip
     ba8:	881b      	ldrh	r3, [r3, #0]
     baa:	9a02      	ldr	r2, [sp, #8]
     bac:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     bae:	9a05      	ldr	r2, [sp, #20]
     bb0:	465b      	mov	r3, fp
     bb2:	431a      	orrs	r2, r3
     bb4:	9b03      	ldr	r3, [sp, #12]
     bb6:	431a      	orrs	r2, r3
     bb8:	464b      	mov	r3, r9
     bba:	431a      	orrs	r2, r3
     bbc:	4643      	mov	r3, r8
     bbe:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bc0:	9b04      	ldr	r3, [sp, #16]
     bc2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     bc4:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bc6:	4653      	mov	r3, sl
     bc8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     bca:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
     bcc:	232f      	movs	r3, #47	; 0x2f
     bce:	5cf3      	ldrb	r3, [r6, r3]
     bd0:	2b00      	cmp	r3, #0
     bd2:	d101      	bne.n	bd8 <usart_init+0x160>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     bd4:	3304      	adds	r3, #4
     bd6:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     bd8:	7e73      	ldrb	r3, [r6, #25]
     bda:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     bdc:	2124      	movs	r1, #36	; 0x24
     bde:	5c71      	ldrb	r1, [r6, r1]
     be0:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     be2:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     be4:	2126      	movs	r1, #38	; 0x26
     be6:	5c71      	ldrb	r1, [r6, r1]
     be8:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     bea:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     bec:	212c      	movs	r1, #44	; 0x2c
     bee:	5c71      	ldrb	r1, [r6, r1]
     bf0:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     bf2:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     bf4:	212d      	movs	r1, #45	; 0x2d
     bf6:	5c71      	ldrb	r1, [r6, r1]
     bf8:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     bfa:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     bfc:	7ab0      	ldrb	r0, [r6, #10]
     bfe:	7af1      	ldrb	r1, [r6, #11]
     c00:	4308      	orrs	r0, r1
     c02:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
     c04:	8933      	ldrh	r3, [r6, #8]
     c06:	2bff      	cmp	r3, #255	; 0xff
     c08:	d100      	bne.n	c0c <usart_init+0x194>
     c0a:	e0aa      	b.n	d62 <usart_init+0x2ea>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c0c:	2180      	movs	r1, #128	; 0x80
     c0e:	0449      	lsls	r1, r1, #17
     c10:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
     c12:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     c14:	9902      	ldr	r1, [sp, #8]
     c16:	688b      	ldr	r3, [r1, #8]
     c18:	469c      	mov	ip, r3
						| config->lin_break_length;
     c1a:	8c33      	ldrh	r3, [r6, #32]
     c1c:	8c71      	ldrh	r1, [r6, #34]	; 0x22
     c1e:	430b      	orrs	r3, r1
     c20:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     c22:	2107      	movs	r1, #7
     c24:	4663      	mov	r3, ip
     c26:	4019      	ands	r1, r3
						| config->lin_break_length;
     c28:	003b      	movs	r3, r7
     c2a:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     c2c:	9902      	ldr	r1, [sp, #8]
     c2e:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
     c30:	69f3      	ldr	r3, [r6, #28]
     c32:	2b00      	cmp	r3, #0
     c34:	d002      	beq.n	c3c <usart_init+0x1c4>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
     c36:	496e      	ldr	r1, [pc, #440]	; (df0 <usart_init+0x378>)
     c38:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
     c3a:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     c3c:	2334      	movs	r3, #52	; 0x34
     c3e:	5cf3      	ldrb	r3, [r6, r3]
     c40:	2b00      	cmp	r3, #0
     c42:	d103      	bne.n	c4c <usart_init+0x1d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c44:	4b6b      	ldr	r3, [pc, #428]	; (df4 <usart_init+0x37c>)
     c46:	789b      	ldrb	r3, [r3, #2]
     c48:	079b      	lsls	r3, r3, #30
     c4a:	d501      	bpl.n	c50 <usart_init+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c4c:	2380      	movs	r3, #128	; 0x80
     c4e:	431a      	orrs	r2, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c50:	6829      	ldr	r1, [r5, #0]
     c52:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c54:	69cb      	ldr	r3, [r1, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c56:	2b00      	cmp	r3, #0
     c58:	d1fc      	bne.n	c54 <usart_init+0x1dc>
	usart_hw->CTRLB.reg = ctrlb;
     c5a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     c5c:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c5e:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
     c60:	2b00      	cmp	r3, #0
     c62:	d1fc      	bne.n	c5e <usart_init+0x1e6>
	usart_hw->CTRLA.reg = ctrla;
     c64:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
     c66:	683b      	ldr	r3, [r7, #0]
     c68:	22f0      	movs	r2, #240	; 0xf0
     c6a:	0512      	lsls	r2, r2, #20
     c6c:	4013      	ands	r3, r2
     c6e:	22e0      	movs	r2, #224	; 0xe0
     c70:	04d2      	lsls	r2, r2, #19
     c72:	4293      	cmp	r3, r2
     c74:	d00a      	beq.n	c8c <usart_init+0x214>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
     c76:	68bb      	ldr	r3, [r7, #8]
     c78:	2207      	movs	r2, #7
     c7a:	4393      	bics	r3, r2
     c7c:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
     c7e:	68ba      	ldr	r2, [r7, #8]
     c80:	2325      	movs	r3, #37	; 0x25
     c82:	5cf1      	ldrb	r1, [r6, r3]
     c84:	3b1e      	subs	r3, #30
     c86:	400b      	ands	r3, r1
     c88:	4313      	orrs	r3, r2
     c8a:	60bb      	str	r3, [r7, #8]
     c8c:	ab0e      	add	r3, sp, #56	; 0x38
     c8e:	2280      	movs	r2, #128	; 0x80
     c90:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c92:	2200      	movs	r2, #0
     c94:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     c96:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c98:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     c9a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     c9c:	930a      	str	r3, [sp, #40]	; 0x28
     c9e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     ca0:	930b      	str	r3, [sp, #44]	; 0x2c
     ca2:	6c33      	ldr	r3, [r6, #64]	; 0x40
     ca4:	930c      	str	r3, [sp, #48]	; 0x30
     ca6:	6c73      	ldr	r3, [r6, #68]	; 0x44
     ca8:	9302      	str	r3, [sp, #8]
     caa:	930d      	str	r3, [sp, #52]	; 0x34
     cac:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     cae:	ae0a      	add	r6, sp, #40	; 0x28
     cb0:	e066      	b.n	d80 <usart_init+0x308>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     cb2:	2308      	movs	r3, #8
     cb4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     cb6:	3b07      	subs	r3, #7
     cb8:	9307      	str	r3, [sp, #28]
     cba:	e756      	b.n	b6a <usart_init+0xf2>
	ctrla = (uint32_t)config->data_order |
     cbc:	6833      	ldr	r3, [r6, #0]
     cbe:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     cc0:	68f3      	ldr	r3, [r6, #12]
     cc2:	469b      	mov	fp, r3
		config->sample_adjustment |
     cc4:	6973      	ldr	r3, [r6, #20]
     cc6:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     cc8:	7e33      	ldrb	r3, [r6, #24]
     cca:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ccc:	232e      	movs	r3, #46	; 0x2e
     cce:	5cf3      	ldrb	r3, [r6, r3]
     cd0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     cd2:	6873      	ldr	r3, [r6, #4]
     cd4:	4699      	mov	r9, r3
	switch (transfer_mode)
     cd6:	2b00      	cmp	r3, #0
     cd8:	d019      	beq.n	d0e <usart_init+0x296>
     cda:	2380      	movs	r3, #128	; 0x80
     cdc:	055b      	lsls	r3, r3, #21
     cde:	4599      	cmp	r9, r3
     ce0:	d001      	beq.n	ce6 <usart_init+0x26e>
	enum status_code status_code = STATUS_OK;
     ce2:	2300      	movs	r3, #0
     ce4:	e027      	b.n	d36 <usart_init+0x2be>
			if (!config->use_external_clock) {
     ce6:	232f      	movs	r3, #47	; 0x2f
     ce8:	5cf3      	ldrb	r3, [r6, r3]
     cea:	2b00      	cmp	r3, #0
     cec:	d000      	beq.n	cf0 <usart_init+0x278>
     cee:	e751      	b.n	b94 <usart_init+0x11c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     cf0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     cf2:	001f      	movs	r7, r3
     cf4:	b2c0      	uxtb	r0, r0
     cf6:	4b40      	ldr	r3, [pc, #256]	; (df8 <usart_init+0x380>)
     cf8:	4798      	blx	r3
     cfa:	0001      	movs	r1, r0
     cfc:	220e      	movs	r2, #14
     cfe:	ab06      	add	r3, sp, #24
     d00:	469c      	mov	ip, r3
     d02:	4462      	add	r2, ip
     d04:	0038      	movs	r0, r7
     d06:	4b3d      	ldr	r3, [pc, #244]	; (dfc <usart_init+0x384>)
     d08:	4798      	blx	r3
     d0a:	0003      	movs	r3, r0
     d0c:	e013      	b.n	d36 <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d0e:	2308      	movs	r3, #8
     d10:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d12:	2300      	movs	r3, #0
     d14:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     d16:	232f      	movs	r3, #47	; 0x2f
     d18:	5cf3      	ldrb	r3, [r6, r3]
     d1a:	2b00      	cmp	r3, #0
     d1c:	d00f      	beq.n	d3e <usart_init+0x2c6>
				status_code =
     d1e:	9b06      	ldr	r3, [sp, #24]
     d20:	9300      	str	r3, [sp, #0]
     d22:	9b07      	ldr	r3, [sp, #28]
     d24:	220e      	movs	r2, #14
     d26:	a906      	add	r1, sp, #24
     d28:	468c      	mov	ip, r1
     d2a:	4462      	add	r2, ip
     d2c:	6b31      	ldr	r1, [r6, #48]	; 0x30
     d2e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     d30:	4f33      	ldr	r7, [pc, #204]	; (e00 <usart_init+0x388>)
     d32:	47b8      	blx	r7
     d34:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
     d36:	2b00      	cmp	r3, #0
     d38:	d000      	beq.n	d3c <usart_init+0x2c4>
     d3a:	e6b3      	b.n	aa4 <usart_init+0x2c>
     d3c:	e72a      	b.n	b94 <usart_init+0x11c>
						_sercom_get_async_baud_val(config->baudrate,
     d3e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     d40:	001f      	movs	r7, r3
     d42:	b2c0      	uxtb	r0, r0
     d44:	4b2c      	ldr	r3, [pc, #176]	; (df8 <usart_init+0x380>)
     d46:	4798      	blx	r3
     d48:	0001      	movs	r1, r0
				status_code =
     d4a:	9b06      	ldr	r3, [sp, #24]
     d4c:	9300      	str	r3, [sp, #0]
     d4e:	9b07      	ldr	r3, [sp, #28]
     d50:	220e      	movs	r2, #14
     d52:	a806      	add	r0, sp, #24
     d54:	4684      	mov	ip, r0
     d56:	4462      	add	r2, ip
     d58:	0038      	movs	r0, r7
     d5a:	4f29      	ldr	r7, [pc, #164]	; (e00 <usart_init+0x388>)
     d5c:	47b8      	blx	r7
     d5e:	0003      	movs	r3, r0
     d60:	e7e9      	b.n	d36 <usart_init+0x2be>
		if(config->lin_slave_enable) {
     d62:	7ef3      	ldrb	r3, [r6, #27]
     d64:	2b00      	cmp	r3, #0
     d66:	d100      	bne.n	d6a <usart_init+0x2f2>
     d68:	e754      	b.n	c14 <usart_init+0x19c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     d6a:	2380      	movs	r3, #128	; 0x80
     d6c:	04db      	lsls	r3, r3, #19
     d6e:	431a      	orrs	r2, r3
     d70:	e750      	b.n	c14 <usart_init+0x19c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d72:	0020      	movs	r0, r4
     d74:	4b23      	ldr	r3, [pc, #140]	; (e04 <usart_init+0x38c>)
     d76:	4798      	blx	r3
     d78:	e007      	b.n	d8a <usart_init+0x312>
     d7a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     d7c:	2f04      	cmp	r7, #4
     d7e:	d00d      	beq.n	d9c <usart_init+0x324>
     d80:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d82:	00bb      	lsls	r3, r7, #2
     d84:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     d86:	2800      	cmp	r0, #0
     d88:	d0f3      	beq.n	d72 <usart_init+0x2fa>
		if (current_pinmux != PINMUX_UNUSED) {
     d8a:	1c43      	adds	r3, r0, #1
     d8c:	d0f5      	beq.n	d7a <usart_init+0x302>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     d8e:	a90e      	add	r1, sp, #56	; 0x38
     d90:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     d92:	0c00      	lsrs	r0, r0, #16
     d94:	b2c0      	uxtb	r0, r0
     d96:	4b1c      	ldr	r3, [pc, #112]	; (e08 <usart_init+0x390>)
     d98:	4798      	blx	r3
     d9a:	e7ee      	b.n	d7a <usart_init+0x302>
		module->callback[i]            = NULL;
     d9c:	2300      	movs	r3, #0
     d9e:	60eb      	str	r3, [r5, #12]
     da0:	612b      	str	r3, [r5, #16]
     da2:	616b      	str	r3, [r5, #20]
     da4:	61ab      	str	r3, [r5, #24]
     da6:	61eb      	str	r3, [r5, #28]
     da8:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     daa:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     dac:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     dae:	2200      	movs	r2, #0
     db0:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     db2:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     db4:	3330      	adds	r3, #48	; 0x30
     db6:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     db8:	3301      	adds	r3, #1
     dba:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     dbc:	3301      	adds	r3, #1
     dbe:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     dc0:	3301      	adds	r3, #1
     dc2:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     dc4:	6828      	ldr	r0, [r5, #0]
     dc6:	4b05      	ldr	r3, [pc, #20]	; (ddc <usart_init+0x364>)
     dc8:	4798      	blx	r3
     dca:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     dcc:	490f      	ldr	r1, [pc, #60]	; (e0c <usart_init+0x394>)
     dce:	4b10      	ldr	r3, [pc, #64]	; (e10 <usart_init+0x398>)
     dd0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     dd2:	00a4      	lsls	r4, r4, #2
     dd4:	4b0f      	ldr	r3, [pc, #60]	; (e14 <usart_init+0x39c>)
     dd6:	50e5      	str	r5, [r4, r3]
	return status_code;
     dd8:	2300      	movs	r3, #0
     dda:	e663      	b.n	aa4 <usart_init+0x2c>
     ddc:	00000971 	.word	0x00000971
     de0:	40000800 	.word	0x40000800
     de4:	000015c5 	.word	0x000015c5
     de8:	00001555 	.word	0x00001555
     dec:	000007a9 	.word	0x000007a9
     df0:	f0ffffff 	.word	0xf0ffffff
     df4:	41002000 	.word	0x41002000
     df8:	000015e9 	.word	0x000015e9
     dfc:	000006eb 	.word	0x000006eb
     e00:	00000715 	.word	0x00000715
     e04:	000007f5 	.word	0x000007f5
     e08:	000016c1 	.word	0x000016c1
     e0c:	00000eb5 	.word	0x00000eb5
     e10:	000009ad 	.word	0x000009ad
     e14:	20000d1c 	.word	0x20000d1c
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e18:	2310      	movs	r3, #16
     e1a:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e1c:	2300      	movs	r3, #0
     e1e:	9307      	str	r3, [sp, #28]
     e20:	e6a3      	b.n	b6a <usart_init+0xf2>
     e22:	46c0      	nop			; (mov r8, r8)

00000e24 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     e24:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     e26:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     e28:	2a00      	cmp	r2, #0
     e2a:	d101      	bne.n	e30 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     e2c:	0018      	movs	r0, r3
     e2e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     e30:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     e32:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e34:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     e36:	2a00      	cmp	r2, #0
     e38:	d1f8      	bne.n	e2c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e3a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     e3c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     e3e:	2102      	movs	r1, #2
     e40:	7e13      	ldrb	r3, [r2, #24]
     e42:	420b      	tst	r3, r1
     e44:	d0fc      	beq.n	e40 <usart_write_wait+0x1c>
	return STATUS_OK;
     e46:	2300      	movs	r3, #0
     e48:	e7f0      	b.n	e2c <usart_write_wait+0x8>

00000e4a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     e4a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     e4c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     e4e:	2a00      	cmp	r2, #0
     e50:	d101      	bne.n	e56 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     e52:	0018      	movs	r0, r3
     e54:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     e56:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     e58:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e5a:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     e5c:	2a00      	cmp	r2, #0
     e5e:	d1f8      	bne.n	e52 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e60:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     e62:	7e10      	ldrb	r0, [r2, #24]
     e64:	0740      	lsls	r0, r0, #29
     e66:	d5f4      	bpl.n	e52 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e68:	8b53      	ldrh	r3, [r2, #26]
     e6a:	b2db      	uxtb	r3, r3
	if (error_code) {
     e6c:	0658      	lsls	r0, r3, #25
     e6e:	d01d      	beq.n	eac <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     e70:	0798      	lsls	r0, r3, #30
     e72:	d503      	bpl.n	e7c <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     e74:	2302      	movs	r3, #2
     e76:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     e78:	3318      	adds	r3, #24
     e7a:	e7ea      	b.n	e52 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     e7c:	0758      	lsls	r0, r3, #29
     e7e:	d503      	bpl.n	e88 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     e80:	2304      	movs	r3, #4
     e82:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     e84:	331a      	adds	r3, #26
     e86:	e7e4      	b.n	e52 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     e88:	07d8      	lsls	r0, r3, #31
     e8a:	d503      	bpl.n	e94 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     e8c:	2301      	movs	r3, #1
     e8e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     e90:	3312      	adds	r3, #18
     e92:	e7de      	b.n	e52 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     e94:	06d8      	lsls	r0, r3, #27
     e96:	d503      	bpl.n	ea0 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     e98:	2310      	movs	r3, #16
     e9a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     e9c:	3332      	adds	r3, #50	; 0x32
     e9e:	e7d8      	b.n	e52 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     ea0:	069b      	lsls	r3, r3, #26
     ea2:	d503      	bpl.n	eac <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ea4:	2320      	movs	r3, #32
     ea6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     ea8:	3321      	adds	r3, #33	; 0x21
     eaa:	e7d2      	b.n	e52 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     eac:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     eae:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     eb0:	2300      	movs	r3, #0
     eb2:	e7ce      	b.n	e52 <usart_read_wait+0x8>

00000eb4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     eb6:	0080      	lsls	r0, r0, #2
     eb8:	4b64      	ldr	r3, [pc, #400]	; (104c <_usart_interrupt_handler+0x198>)
     eba:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     ebc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     ebe:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     ec0:	2b00      	cmp	r3, #0
     ec2:	d1fc      	bne.n	ebe <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     ec4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     ec6:	7da6      	ldrb	r6, [r4, #22]
     ec8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     eca:	2330      	movs	r3, #48	; 0x30
     ecc:	5ceb      	ldrb	r3, [r5, r3]
     ece:	2231      	movs	r2, #49	; 0x31
     ed0:	5caf      	ldrb	r7, [r5, r2]
     ed2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     ed4:	07f3      	lsls	r3, r6, #31
     ed6:	d522      	bpl.n	f1e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     ed8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     eda:	b29b      	uxth	r3, r3
     edc:	2b00      	cmp	r3, #0
     ede:	d01c      	beq.n	f1a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ee0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     ee2:	7813      	ldrb	r3, [r2, #0]
     ee4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     ee6:	1c51      	adds	r1, r2, #1
     ee8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     eea:	7969      	ldrb	r1, [r5, #5]
     eec:	2901      	cmp	r1, #1
     eee:	d00e      	beq.n	f0e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ef0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     ef2:	05db      	lsls	r3, r3, #23
     ef4:	0ddb      	lsrs	r3, r3, #23
     ef6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     ef8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     efa:	3b01      	subs	r3, #1
     efc:	b29b      	uxth	r3, r3
     efe:	85eb      	strh	r3, [r5, #46]	; 0x2e
     f00:	2b00      	cmp	r3, #0
     f02:	d10c      	bne.n	f1e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f04:	3301      	adds	r3, #1
     f06:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     f08:	3301      	adds	r3, #1
     f0a:	75a3      	strb	r3, [r4, #22]
     f0c:	e007      	b.n	f1e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     f0e:	7851      	ldrb	r1, [r2, #1]
     f10:	0209      	lsls	r1, r1, #8
     f12:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     f14:	3202      	adds	r2, #2
     f16:	62aa      	str	r2, [r5, #40]	; 0x28
     f18:	e7eb      	b.n	ef2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f1a:	2301      	movs	r3, #1
     f1c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     f1e:	07b3      	lsls	r3, r6, #30
     f20:	d506      	bpl.n	f30 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     f22:	2302      	movs	r3, #2
     f24:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     f26:	2200      	movs	r2, #0
     f28:	3331      	adds	r3, #49	; 0x31
     f2a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     f2c:	07fb      	lsls	r3, r7, #31
     f2e:	d41e      	bmi.n	f6e <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     f30:	0773      	lsls	r3, r6, #29
     f32:	d568      	bpl.n	1006 <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
     f34:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f36:	b29b      	uxth	r3, r3
     f38:	2b00      	cmp	r3, #0
     f3a:	d062      	beq.n	1002 <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f3c:	8b63      	ldrh	r3, [r4, #26]
     f3e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     f40:	071a      	lsls	r2, r3, #28
     f42:	d418      	bmi.n	f76 <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f44:	227f      	movs	r2, #127	; 0x7f
     f46:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
     f48:	065a      	lsls	r2, r3, #25
     f4a:	d501      	bpl.n	f50 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
     f4c:	2240      	movs	r2, #64	; 0x40
     f4e:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     f50:	2b00      	cmp	r3, #0
     f52:	d033      	beq.n	fbc <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     f54:	079a      	lsls	r2, r3, #30
     f56:	d511      	bpl.n	f7c <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     f58:	221a      	movs	r2, #26
     f5a:	2332      	movs	r3, #50	; 0x32
     f5c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     f5e:	3b30      	subs	r3, #48	; 0x30
     f60:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     f62:	077b      	lsls	r3, r7, #29
     f64:	d54f      	bpl.n	1006 <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     f66:	0028      	movs	r0, r5
     f68:	696b      	ldr	r3, [r5, #20]
     f6a:	4798      	blx	r3
     f6c:	e04b      	b.n	1006 <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     f6e:	0028      	movs	r0, r5
     f70:	68eb      	ldr	r3, [r5, #12]
     f72:	4798      	blx	r3
     f74:	e7dc      	b.n	f30 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     f76:	2277      	movs	r2, #119	; 0x77
     f78:	4013      	ands	r3, r2
     f7a:	e7e5      	b.n	f48 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     f7c:	075a      	lsls	r2, r3, #29
     f7e:	d505      	bpl.n	f8c <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
     f80:	221e      	movs	r2, #30
     f82:	2332      	movs	r3, #50	; 0x32
     f84:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     f86:	3b2e      	subs	r3, #46	; 0x2e
     f88:	8363      	strh	r3, [r4, #26]
     f8a:	e7ea      	b.n	f62 <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f8c:	07da      	lsls	r2, r3, #31
     f8e:	d505      	bpl.n	f9c <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
     f90:	2213      	movs	r2, #19
     f92:	2332      	movs	r3, #50	; 0x32
     f94:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     f96:	3b31      	subs	r3, #49	; 0x31
     f98:	8363      	strh	r3, [r4, #26]
     f9a:	e7e2      	b.n	f62 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     f9c:	06da      	lsls	r2, r3, #27
     f9e:	d505      	bpl.n	fac <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
     fa0:	2242      	movs	r2, #66	; 0x42
     fa2:	2332      	movs	r3, #50	; 0x32
     fa4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     fa6:	3b22      	subs	r3, #34	; 0x22
     fa8:	8363      	strh	r3, [r4, #26]
     faa:	e7da      	b.n	f62 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     fac:	069b      	lsls	r3, r3, #26
     fae:	d5d8      	bpl.n	f62 <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     fb0:	2241      	movs	r2, #65	; 0x41
     fb2:	2332      	movs	r3, #50	; 0x32
     fb4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     fb6:	3b12      	subs	r3, #18
     fb8:	8363      	strh	r3, [r4, #26]
     fba:	e7d2      	b.n	f62 <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     fbc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     fbe:	05db      	lsls	r3, r3, #23
     fc0:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     fc2:	b2da      	uxtb	r2, r3
     fc4:	6a69      	ldr	r1, [r5, #36]	; 0x24
     fc6:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     fc8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     fca:	1c51      	adds	r1, r2, #1
     fcc:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     fce:	7969      	ldrb	r1, [r5, #5]
     fd0:	2901      	cmp	r1, #1
     fd2:	d010      	beq.n	ff6 <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     fd4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     fd6:	3b01      	subs	r3, #1
     fd8:	b29b      	uxth	r3, r3
     fda:	85ab      	strh	r3, [r5, #44]	; 0x2c
     fdc:	2b00      	cmp	r3, #0
     fde:	d112      	bne.n	1006 <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     fe0:	3304      	adds	r3, #4
     fe2:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     fe4:	2200      	movs	r2, #0
     fe6:	332e      	adds	r3, #46	; 0x2e
     fe8:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     fea:	07bb      	lsls	r3, r7, #30
     fec:	d50b      	bpl.n	1006 <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     fee:	0028      	movs	r0, r5
     ff0:	692b      	ldr	r3, [r5, #16]
     ff2:	4798      	blx	r3
     ff4:	e007      	b.n	1006 <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     ff6:	0a1b      	lsrs	r3, r3, #8
     ff8:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     ffa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     ffc:	3301      	adds	r3, #1
     ffe:	626b      	str	r3, [r5, #36]	; 0x24
    1000:	e7e8      	b.n	fd4 <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1002:	2304      	movs	r3, #4
    1004:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1006:	06f3      	lsls	r3, r6, #27
    1008:	d504      	bpl.n	1014 <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    100a:	2310      	movs	r3, #16
    100c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    100e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1010:	06fb      	lsls	r3, r7, #27
    1012:	d40e      	bmi.n	1032 <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1014:	06b3      	lsls	r3, r6, #26
    1016:	d504      	bpl.n	1022 <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1018:	2320      	movs	r3, #32
    101a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    101c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    101e:	073b      	lsls	r3, r7, #28
    1020:	d40b      	bmi.n	103a <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1022:	0733      	lsls	r3, r6, #28
    1024:	d504      	bpl.n	1030 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1026:	2308      	movs	r3, #8
    1028:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    102a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    102c:	06bb      	lsls	r3, r7, #26
    102e:	d408      	bmi.n	1042 <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1032:	0028      	movs	r0, r5
    1034:	69eb      	ldr	r3, [r5, #28]
    1036:	4798      	blx	r3
    1038:	e7ec      	b.n	1014 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    103a:	0028      	movs	r0, r5
    103c:	69ab      	ldr	r3, [r5, #24]
    103e:	4798      	blx	r3
    1040:	e7ef      	b.n	1022 <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1042:	6a2b      	ldr	r3, [r5, #32]
    1044:	0028      	movs	r0, r5
    1046:	4798      	blx	r3
}
    1048:	e7f2      	b.n	1030 <_usart_interrupt_handler+0x17c>
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	20000d1c 	.word	0x20000d1c

00001050 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1050:	b510      	push	{r4, lr}
	switch (clock_source) {
    1052:	2807      	cmp	r0, #7
    1054:	d803      	bhi.n	105e <system_clock_source_get_hz+0xe>
    1056:	0080      	lsls	r0, r0, #2
    1058:	4b0f      	ldr	r3, [pc, #60]	; (1098 <system_clock_source_get_hz+0x48>)
    105a:	581b      	ldr	r3, [r3, r0]
    105c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    105e:	2000      	movs	r0, #0
    1060:	e018      	b.n	1094 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    1062:	4b0e      	ldr	r3, [pc, #56]	; (109c <system_clock_source_get_hz+0x4c>)
    1064:	6858      	ldr	r0, [r3, #4]
    1066:	e015      	b.n	1094 <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    1068:	4b0d      	ldr	r3, [pc, #52]	; (10a0 <system_clock_source_get_hz+0x50>)
    106a:	7d59      	ldrb	r1, [r3, #21]
    106c:	0709      	lsls	r1, r1, #28
    106e:	0f09      	lsrs	r1, r1, #28
    1070:	3101      	adds	r1, #1
    1072:	480c      	ldr	r0, [pc, #48]	; (10a4 <system_clock_source_get_hz+0x54>)
    1074:	4b0c      	ldr	r3, [pc, #48]	; (10a8 <system_clock_source_get_hz+0x58>)
    1076:	4798      	blx	r3
    1078:	e00c      	b.n	1094 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    107a:	4b08      	ldr	r3, [pc, #32]	; (109c <system_clock_source_get_hz+0x4c>)
    107c:	6898      	ldr	r0, [r3, #8]
    107e:	e009      	b.n	1094 <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1080:	4b07      	ldr	r3, [pc, #28]	; (10a0 <system_clock_source_get_hz+0x50>)
    1082:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    1084:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1086:	079b      	lsls	r3, r3, #30
    1088:	d504      	bpl.n	1094 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    108a:	4b04      	ldr	r3, [pc, #16]	; (109c <system_clock_source_get_hz+0x4c>)
    108c:	6818      	ldr	r0, [r3, #0]
    108e:	e001      	b.n	1094 <system_clock_source_get_hz+0x44>
		return 32768UL;
    1090:	2080      	movs	r0, #128	; 0x80
    1092:	0200      	lsls	r0, r0, #8
	}
}
    1094:	bd10      	pop	{r4, pc}
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	00007c98 	.word	0x00007c98
    109c:	20000c98 	.word	0x20000c98
    10a0:	40001000 	.word	0x40001000
    10a4:	02dc6c00 	.word	0x02dc6c00
    10a8:	00005b2d 	.word	0x00005b2d

000010ac <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    10ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ae:	46de      	mov	lr, fp
    10b0:	4657      	mov	r7, sl
    10b2:	464e      	mov	r6, r9
    10b4:	4645      	mov	r5, r8
    10b6:	b5e0      	push	{r5, r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    10b8:	4a25      	ldr	r2, [pc, #148]	; (1150 <system_clock_source_xosc32k_set_config+0xa4>)
    10ba:	8a93      	ldrh	r3, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    10bc:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    10be:	7801      	ldrb	r1, [r0, #0]
    10c0:	424c      	negs	r4, r1
    10c2:	414c      	adcs	r4, r1
    10c4:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    10c6:	7881      	ldrb	r1, [r0, #2]
    10c8:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    10ca:	78c1      	ldrb	r1, [r0, #3]
    10cc:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    10ce:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    10d0:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    10d2:	7a81      	ldrb	r1, [r0, #10]
    10d4:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    10d6:	491f      	ldr	r1, [pc, #124]	; (1154 <system_clock_source_xosc32k_set_config+0xa8>)
    10d8:	6844      	ldr	r4, [r0, #4]
    10da:	608c      	str	r4, [r1, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    10dc:	7ac1      	ldrb	r1, [r0, #11]
    10de:	0089      	lsls	r1, r1, #2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    10e0:	7b84      	ldrb	r4, [r0, #14]
    10e2:	0064      	lsls	r4, r4, #1
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
    10e4:	4321      	orrs	r1, r4
    10e6:	7b44      	ldrb	r4, [r0, #13]
    10e8:	4321      	orrs	r1, r4
    10ea:	b2c9      	uxtb	r1, r1
	OSC32KCTRL->CFDCTRL.reg =
    10ec:	7591      	strb	r1, [r2, #22]

	OSC32KCTRL->EVCTRL.reg =
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);
    10ee:	7b01      	ldrb	r1, [r0, #12]
	OSC32KCTRL->EVCTRL.reg =
    10f0:	75d1      	strb	r1, [r2, #23]

	OSC32KCTRL->XOSC32K = temp;
    10f2:	2101      	movs	r1, #1
    10f4:	4648      	mov	r0, r9
    10f6:	0080      	lsls	r0, r0, #2
    10f8:	2404      	movs	r4, #4
    10fa:	43a3      	bics	r3, r4
    10fc:	4303      	orrs	r3, r0
    10fe:	4640      	mov	r0, r8
    1100:	4008      	ands	r0, r1
    1102:	00c0      	lsls	r0, r0, #3
    1104:	3404      	adds	r4, #4
    1106:	43a3      	bics	r3, r4
    1108:	4303      	orrs	r3, r0
    110a:	4660      	mov	r0, ip
    110c:	4008      	ands	r0, r1
    110e:	0100      	lsls	r0, r0, #4
    1110:	3408      	adds	r4, #8
    1112:	43a3      	bics	r3, r4
    1114:	4303      	orrs	r3, r0
    1116:	400f      	ands	r7, r1
    1118:	01bf      	lsls	r7, r7, #6
    111a:	2040      	movs	r0, #64	; 0x40
    111c:	4383      	bics	r3, r0
    111e:	433b      	orrs	r3, r7
    1120:	400e      	ands	r6, r1
    1122:	01f6      	lsls	r6, r6, #7
    1124:	3040      	adds	r0, #64	; 0x40
    1126:	4383      	bics	r3, r0
    1128:	4333      	orrs	r3, r6
    112a:	3879      	subs	r0, #121	; 0x79
    112c:	4005      	ands	r5, r0
    112e:	022d      	lsls	r5, r5, #8
    1130:	4809      	ldr	r0, [pc, #36]	; (1158 <system_clock_source_xosc32k_set_config+0xac>)
    1132:	4003      	ands	r3, r0
    1134:	432b      	orrs	r3, r5
    1136:	4658      	mov	r0, fp
    1138:	4001      	ands	r1, r0
    113a:	0309      	lsls	r1, r1, #12
    113c:	4807      	ldr	r0, [pc, #28]	; (115c <system_clock_source_xosc32k_set_config+0xb0>)
    113e:	4003      	ands	r3, r0
    1140:	430b      	orrs	r3, r1
    1142:	8293      	strh	r3, [r2, #20]
}
    1144:	bc3c      	pop	{r2, r3, r4, r5}
    1146:	4690      	mov	r8, r2
    1148:	4699      	mov	r9, r3
    114a:	46a2      	mov	sl, r4
    114c:	46ab      	mov	fp, r5
    114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1150:	40001400 	.word	0x40001400
    1154:	20000c98 	.word	0x20000c98
    1158:	fffff8ff 	.word	0xfffff8ff
    115c:	ffffefff 	.word	0xffffefff

00001160 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    1160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1162:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    1164:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    1166:	7d03      	ldrb	r3, [r0, #20]
    1168:	2b01      	cmp	r3, #1
    116a:	d04d      	beq.n	1208 <system_clock_source_dpll_set_config+0xa8>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    116c:	68a3      	ldr	r3, [r4, #8]
    116e:	0118      	lsls	r0, r3, #4
    1170:	0029      	movs	r1, r5
    1172:	4b29      	ldr	r3, [pc, #164]	; (1218 <system_clock_source_dpll_set_config+0xb8>)
    1174:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    1176:	220f      	movs	r2, #15
    1178:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    117a:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    117c:	7821      	ldrb	r1, [r4, #0]
    117e:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    1180:	7866      	ldrb	r6, [r4, #1]
    1182:	01b6      	lsls	r6, r6, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    1184:	4331      	orrs	r1, r6
    1186:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    1188:	4e24      	ldr	r6, [pc, #144]	; (121c <system_clock_source_dpll_set_config+0xbc>)
    118a:	7731      	strb	r1, [r6, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    118c:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    118e:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    1190:	051b      	lsls	r3, r3, #20
    1192:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1194:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    1196:	6233      	str	r3, [r6, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    1198:	0037      	movs	r7, r6
    119a:	262c      	movs	r6, #44	; 0x2c
    119c:	2104      	movs	r1, #4
    119e:	5dbb      	ldrb	r3, [r7, r6]
    11a0:	420b      	tst	r3, r1
    11a2:	d1fc      	bne.n	119e <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    11a4:	78a3      	ldrb	r3, [r4, #2]
    11a6:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    11a8:	78e1      	ldrb	r1, [r4, #3]
    11aa:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    11ac:	430b      	orrs	r3, r1
    11ae:	7921      	ldrb	r1, [r4, #4]
    11b0:	0089      	lsls	r1, r1, #2
    11b2:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    11b4:	7ca1      	ldrb	r1, [r4, #18]
    11b6:	2603      	movs	r6, #3
    11b8:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    11ba:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    11bc:	8a21      	ldrh	r1, [r4, #16]
    11be:	0409      	lsls	r1, r1, #16
    11c0:	4f17      	ldr	r7, [pc, #92]	; (1220 <system_clock_source_dpll_set_config+0xc0>)
    11c2:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    11c4:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    11c6:	7ce1      	ldrb	r1, [r4, #19]
    11c8:	0209      	lsls	r1, r1, #8
    11ca:	27e0      	movs	r7, #224	; 0xe0
    11cc:	00ff      	lsls	r7, r7, #3
    11ce:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    11d0:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    11d2:	7d27      	ldrb	r7, [r4, #20]
    11d4:	013f      	lsls	r7, r7, #4
    11d6:	2130      	movs	r1, #48	; 0x30
    11d8:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    11da:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    11dc:	490f      	ldr	r1, [pc, #60]	; (121c <system_clock_source_dpll_set_config+0xbc>)
    11de:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    11e0:	7d63      	ldrb	r3, [r4, #21]
    11e2:	401e      	ands	r6, r3
    11e4:	2328      	movs	r3, #40	; 0x28
    11e6:	54ce      	strb	r6, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    11e8:	000f      	movs	r7, r1
    11ea:	262c      	movs	r6, #44	; 0x2c
    11ec:	2108      	movs	r1, #8
    11ee:	5dbb      	ldrb	r3, [r7, r6]
    11f0:	420b      	tst	r3, r1
    11f2:	d1fc      	bne.n	11ee <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    11f4:	230f      	movs	r3, #15
    11f6:	4398      	bics	r0, r3
    11f8:	1882      	adds	r2, r0, r2
			(refclk *
    11fa:	436a      	muls	r2, r5
			) >> (4 + config->prescaler);
    11fc:	7d63      	ldrb	r3, [r4, #21]
    11fe:	3304      	adds	r3, #4
    1200:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    1202:	4b08      	ldr	r3, [pc, #32]	; (1224 <system_clock_source_dpll_set_config+0xc4>)
    1204:	601a      	str	r2, [r3, #0]
}
    1206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    1208:	8a01      	ldrh	r1, [r0, #16]
    120a:	3101      	adds	r1, #1
    120c:	0049      	lsls	r1, r1, #1
    120e:	0028      	movs	r0, r5
    1210:	4b01      	ldr	r3, [pc, #4]	; (1218 <system_clock_source_dpll_set_config+0xb8>)
    1212:	4798      	blx	r3
    1214:	0005      	movs	r5, r0
    1216:	e7a9      	b.n	116c <system_clock_source_dpll_set_config+0xc>
    1218:	00005b2d 	.word	0x00005b2d
    121c:	40001000 	.word	0x40001000
    1220:	07ff0000 	.word	0x07ff0000
    1224:	20000c98 	.word	0x20000c98

00001228 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1228:	2807      	cmp	r0, #7
    122a:	d803      	bhi.n	1234 <system_clock_source_enable+0xc>
    122c:	0080      	lsls	r0, r0, #2
    122e:	4b18      	ldr	r3, [pc, #96]	; (1290 <system_clock_source_enable+0x68>)
    1230:	581b      	ldr	r3, [r3, r0]
    1232:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1234:	2017      	movs	r0, #23
    1236:	e029      	b.n	128c <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    1238:	4a16      	ldr	r2, [pc, #88]	; (1294 <system_clock_source_enable+0x6c>)
    123a:	7d13      	ldrb	r3, [r2, #20]
    123c:	2102      	movs	r1, #2
    123e:	430b      	orrs	r3, r1
    1240:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    1242:	2000      	movs	r0, #0
    1244:	e022      	b.n	128c <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    1246:	4a14      	ldr	r2, [pc, #80]	; (1298 <system_clock_source_enable+0x70>)
    1248:	6993      	ldr	r3, [r2, #24]
    124a:	2102      	movs	r1, #2
    124c:	430b      	orrs	r3, r1
    124e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1250:	2000      	movs	r0, #0
		break;
    1252:	e01b      	b.n	128c <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    1254:	4a0f      	ldr	r2, [pc, #60]	; (1294 <system_clock_source_enable+0x6c>)
    1256:	8a13      	ldrh	r3, [r2, #16]
    1258:	2102      	movs	r1, #2
    125a:	430b      	orrs	r3, r1
    125c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    125e:	2000      	movs	r0, #0
		break;
    1260:	e014      	b.n	128c <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    1262:	4a0d      	ldr	r2, [pc, #52]	; (1298 <system_clock_source_enable+0x70>)
    1264:	8a93      	ldrh	r3, [r2, #20]
    1266:	2102      	movs	r1, #2
    1268:	430b      	orrs	r3, r1
    126a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    126c:	2000      	movs	r0, #0
		break;
    126e:	e00d      	b.n	128c <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    1270:	4a08      	ldr	r2, [pc, #32]	; (1294 <system_clock_source_enable+0x6c>)
    1272:	7f13      	ldrb	r3, [r2, #28]
    1274:	2102      	movs	r1, #2
    1276:	430b      	orrs	r3, r1
    1278:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    127a:	0010      	movs	r0, r2
    127c:	312a      	adds	r1, #42	; 0x2a
    127e:	2202      	movs	r2, #2
    1280:	5c43      	ldrb	r3, [r0, r1]
    1282:	4213      	tst	r3, r2
    1284:	d1fc      	bne.n	1280 <system_clock_source_enable+0x58>
	return STATUS_OK;
    1286:	2000      	movs	r0, #0
    1288:	e000      	b.n	128c <system_clock_source_enable+0x64>
		return STATUS_OK;
    128a:	2000      	movs	r0, #0
}
    128c:	4770      	bx	lr
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	00007cb8 	.word	0x00007cb8
    1294:	40001000 	.word	0x40001000
    1298:	40001400 	.word	0x40001400

0000129c <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    129c:	b5f0      	push	{r4, r5, r6, r7, lr}
    129e:	46c6      	mov	lr, r8
    12a0:	b500      	push	{lr}
    12a2:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    12a4:	2203      	movs	r2, #3
    12a6:	4b3f      	ldr	r3, [pc, #252]	; (13a4 <system_clock_init+0x108>)
    12a8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    12aa:	4a3f      	ldr	r2, [pc, #252]	; (13a8 <system_clock_init+0x10c>)
    12ac:	6853      	ldr	r3, [r2, #4]
    12ae:	211e      	movs	r1, #30
    12b0:	438b      	bics	r3, r1
    12b2:	3918      	subs	r1, #24
    12b4:	430b      	orrs	r3, r1
    12b6:	6053      	str	r3, [r2, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    12b8:	a80a      	add	r0, sp, #40	; 0x28
    12ba:	2300      	movs	r3, #0
    12bc:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    12be:	2280      	movs	r2, #128	; 0x80
    12c0:	0212      	lsls	r2, r2, #8
    12c2:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    12c4:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    12c6:	2201      	movs	r2, #1
    12c8:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    12ca:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    12cc:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    12ce:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    12d0:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    12d2:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    12d4:	3902      	subs	r1, #2
    12d6:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    12d8:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    12da:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    12dc:	4b33      	ldr	r3, [pc, #204]	; (13ac <system_clock_init+0x110>)
    12de:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    12e0:	2005      	movs	r0, #5
    12e2:	4b33      	ldr	r3, [pc, #204]	; (13b0 <system_clock_init+0x114>)
    12e4:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    12e6:	4933      	ldr	r1, [pc, #204]	; (13b4 <system_clock_init+0x118>)
    12e8:	2201      	movs	r2, #1
    12ea:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    12ec:	421a      	tst	r2, r3
    12ee:	d0fc      	beq.n	12ea <system_clock_init+0x4e>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    12f0:	4b31      	ldr	r3, [pc, #196]	; (13b8 <system_clock_init+0x11c>)
    12f2:	7d1a      	ldrb	r2, [r3, #20]
    12f4:	2180      	movs	r1, #128	; 0x80
    12f6:	430a      	orrs	r2, r1
    12f8:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    12fa:	2202      	movs	r2, #2
    12fc:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    12fe:	001a      	movs	r2, r3
    1300:	6993      	ldr	r3, [r2, #24]
    1302:	2b00      	cmp	r3, #0
    1304:	d1fc      	bne.n	1300 <system_clock_init+0x64>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1306:	4b2d      	ldr	r3, [pc, #180]	; (13bc <system_clock_init+0x120>)
    1308:	4798      	blx	r3
	config->division_factor    = 1;
    130a:	ad01      	add	r5, sp, #4
    130c:	2601      	movs	r6, #1
    130e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1310:	2400      	movs	r4, #0
    1312:	706c      	strb	r4, [r5, #1]
	config->output_enable      = false;
    1314:	726c      	strb	r4, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1316:	2305      	movs	r3, #5
    1318:	702b      	strb	r3, [r5, #0]
    131a:	722e      	strb	r6, [r5, #8]
    131c:	0029      	movs	r1, r5
    131e:	2001      	movs	r0, #1
    1320:	4b27      	ldr	r3, [pc, #156]	; (13c0 <system_clock_init+0x124>)
    1322:	4698      	mov	r8, r3
    1324:	4798      	blx	r3
    1326:	2001      	movs	r0, #1
    1328:	4f26      	ldr	r7, [pc, #152]	; (13c4 <system_clock_init+0x128>)
    132a:	47b8      	blx	r7
	config->division_factor    = 1;
    132c:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    132e:	706c      	strb	r4, [r5, #1]
	config->run_in_standby     = false;
    1330:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    1332:	726c      	strb	r4, [r5, #9]
    1334:	2307      	movs	r3, #7
    1336:	702b      	strb	r3, [r5, #0]
    1338:	0029      	movs	r1, r5
    133a:	2008      	movs	r0, #8
    133c:	47c0      	blx	r8
    133e:	2008      	movs	r0, #8
    1340:	47b8      	blx	r7
	config->lock_bypass         = false;
    1342:	a804      	add	r0, sp, #16
    1344:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    1346:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    1348:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    134a:	4b1f      	ldr	r3, [pc, #124]	; (13c8 <system_clock_init+0x12c>)
    134c:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    134e:	8206      	strh	r6, [r0, #16]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    1350:	7544      	strb	r4, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    1352:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    1354:	7484      	strb	r4, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    1356:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    1358:	2301      	movs	r3, #1
    135a:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    135c:	7504      	strb	r4, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    135e:	4b1b      	ldr	r3, [pc, #108]	; (13cc <system_clock_init+0x130>)
    1360:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    1362:	4b1b      	ldr	r3, [pc, #108]	; (13d0 <system_clock_init+0x134>)
    1364:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    1366:	2007      	movs	r0, #7
    1368:	4b11      	ldr	r3, [pc, #68]	; (13b0 <system_clock_init+0x114>)
    136a:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    136c:	4812      	ldr	r0, [pc, #72]	; (13b8 <system_clock_init+0x11c>)
    136e:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    1370:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    1372:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    1374:	4013      	ands	r3, r2
    1376:	2b03      	cmp	r3, #3
    1378:	d1fb      	bne.n	1372 <system_clock_init+0xd6>
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    137a:	3b02      	subs	r3, #2
    137c:	4a15      	ldr	r2, [pc, #84]	; (13d4 <system_clock_init+0x138>)
    137e:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    1380:	a901      	add	r1, sp, #4
    1382:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    1384:	2200      	movs	r2, #0
    1386:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    1388:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    138a:	3207      	adds	r2, #7
    138c:	700a      	strb	r2, [r1, #0]
    138e:	720b      	strb	r3, [r1, #8]
    1390:	2000      	movs	r0, #0
    1392:	4b0b      	ldr	r3, [pc, #44]	; (13c0 <system_clock_init+0x124>)
    1394:	4798      	blx	r3
    1396:	2000      	movs	r0, #0
    1398:	4b0a      	ldr	r3, [pc, #40]	; (13c4 <system_clock_init+0x128>)
    139a:	4798      	blx	r3
#endif

}
    139c:	b00e      	add	sp, #56	; 0x38
    139e:	bc04      	pop	{r2}
    13a0:	4690      	mov	r8, r2
    13a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13a4:	40001800 	.word	0x40001800
    13a8:	41004000 	.word	0x41004000
    13ac:	000010ad 	.word	0x000010ad
    13b0:	00001229 	.word	0x00001229
    13b4:	40001400 	.word	0x40001400
    13b8:	40001000 	.word	0x40001000
    13bc:	000013d9 	.word	0x000013d9
    13c0:	000013fd 	.word	0x000013fd
    13c4:	000014a9 	.word	0x000014a9
    13c8:	02dc6c00 	.word	0x02dc6c00
    13cc:	00007fff 	.word	0x00007fff
    13d0:	00001161 	.word	0x00001161
    13d4:	40000800 	.word	0x40000800

000013d8 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    13d8:	4a06      	ldr	r2, [pc, #24]	; (13f4 <system_gclk_init+0x1c>)
    13da:	6953      	ldr	r3, [r2, #20]
    13dc:	2180      	movs	r1, #128	; 0x80
    13de:	430b      	orrs	r3, r1
    13e0:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    13e2:	2201      	movs	r2, #1
    13e4:	4b04      	ldr	r3, [pc, #16]	; (13f8 <system_gclk_init+0x20>)
    13e6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    13e8:	0019      	movs	r1, r3
    13ea:	780b      	ldrb	r3, [r1, #0]
    13ec:	4213      	tst	r3, r2
    13ee:	d1fc      	bne.n	13ea <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    13f0:	4770      	bx	lr
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	40000800 	.word	0x40000800
    13f8:	40001c00 	.word	0x40001c00

000013fc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    13fc:	b570      	push	{r4, r5, r6, lr}
    13fe:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1400:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1402:	784b      	ldrb	r3, [r1, #1]
    1404:	2b00      	cmp	r3, #0
    1406:	d002      	beq.n	140e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1408:	2380      	movs	r3, #128	; 0x80
    140a:	00db      	lsls	r3, r3, #3
    140c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    140e:	7a4b      	ldrb	r3, [r1, #9]
    1410:	2b00      	cmp	r3, #0
    1412:	d002      	beq.n	141a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1414:	2380      	movs	r3, #128	; 0x80
    1416:	011b      	lsls	r3, r3, #4
    1418:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    141a:	6848      	ldr	r0, [r1, #4]
    141c:	2801      	cmp	r0, #1
    141e:	d90f      	bls.n	1440 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1420:	1e43      	subs	r3, r0, #1
    1422:	4218      	tst	r0, r3
    1424:	d131      	bne.n	148a <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1426:	2802      	cmp	r0, #2
    1428:	d92d      	bls.n	1486 <system_gclk_gen_set_config+0x8a>
    142a:	2302      	movs	r3, #2
    142c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    142e:	3201      	adds	r2, #1
						mask <<= 1) {
    1430:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1432:	4298      	cmp	r0, r3
    1434:	d8fb      	bhi.n	142e <system_gclk_gen_set_config+0x32>
    1436:	2380      	movs	r3, #128	; 0x80
    1438:	015b      	lsls	r3, r3, #5
    143a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    143c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    143e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1440:	7a0b      	ldrb	r3, [r1, #8]
    1442:	2b00      	cmp	r3, #0
    1444:	d002      	beq.n	144c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1446:	2380      	movs	r3, #128	; 0x80
    1448:	019b      	lsls	r3, r3, #6
    144a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    144c:	2604      	movs	r6, #4
    144e:	40a6      	lsls	r6, r4
    1450:	4911      	ldr	r1, [pc, #68]	; (1498 <system_gclk_gen_set_config+0x9c>)
    1452:	4a12      	ldr	r2, [pc, #72]	; (149c <system_gclk_gen_set_config+0xa0>)
    1454:	684b      	ldr	r3, [r1, #4]
    1456:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    1458:	421e      	tst	r6, r3
    145a:	d1fb      	bne.n	1454 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    145c:	4b10      	ldr	r3, [pc, #64]	; (14a0 <system_gclk_gen_set_config+0xa4>)
    145e:	4798      	blx	r3
    1460:	00a4      	lsls	r4, r4, #2
    1462:	4b0d      	ldr	r3, [pc, #52]	; (1498 <system_gclk_gen_set_config+0x9c>)
    1464:	469c      	mov	ip, r3
    1466:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1468:	6a22      	ldr	r2, [r4, #32]
    146a:	2380      	movs	r3, #128	; 0x80
    146c:	005b      	lsls	r3, r3, #1
    146e:	401a      	ands	r2, r3
    1470:	432a      	orrs	r2, r5
    1472:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1474:	4661      	mov	r1, ip
    1476:	4a09      	ldr	r2, [pc, #36]	; (149c <system_gclk_gen_set_config+0xa0>)
    1478:	684b      	ldr	r3, [r1, #4]
    147a:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    147c:	421e      	tst	r6, r3
    147e:	d1fb      	bne.n	1478 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1480:	4b08      	ldr	r3, [pc, #32]	; (14a4 <system_gclk_gen_set_config+0xa8>)
    1482:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    1484:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1486:	2200      	movs	r2, #0
    1488:	e7d5      	b.n	1436 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    148a:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    148c:	2380      	movs	r3, #128	; 0x80
    148e:	009b      	lsls	r3, r3, #2
    1490:	4318      	orrs	r0, r3
    1492:	4305      	orrs	r5, r0
    1494:	e7d4      	b.n	1440 <system_gclk_gen_set_config+0x44>
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	40001c00 	.word	0x40001c00
    149c:	000007fc 	.word	0x000007fc
    14a0:	0000011d 	.word	0x0000011d
    14a4:	0000015d 	.word	0x0000015d

000014a8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    14a8:	b510      	push	{r4, lr}
    14aa:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    14ac:	2204      	movs	r2, #4
    14ae:	4082      	lsls	r2, r0
    14b0:	4809      	ldr	r0, [pc, #36]	; (14d8 <system_gclk_gen_enable+0x30>)
    14b2:	490a      	ldr	r1, [pc, #40]	; (14dc <system_gclk_gen_enable+0x34>)
    14b4:	6843      	ldr	r3, [r0, #4]
    14b6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    14b8:	421a      	tst	r2, r3
    14ba:	d1fb      	bne.n	14b4 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    14bc:	4b08      	ldr	r3, [pc, #32]	; (14e0 <system_gclk_gen_enable+0x38>)
    14be:	4798      	blx	r3
    14c0:	00a4      	lsls	r4, r4, #2
    14c2:	4b05      	ldr	r3, [pc, #20]	; (14d8 <system_gclk_gen_enable+0x30>)
    14c4:	469c      	mov	ip, r3
    14c6:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    14c8:	6a22      	ldr	r2, [r4, #32]
    14ca:	2380      	movs	r3, #128	; 0x80
    14cc:	005b      	lsls	r3, r3, #1
    14ce:	4313      	orrs	r3, r2
    14d0:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    14d2:	4b04      	ldr	r3, [pc, #16]	; (14e4 <system_gclk_gen_enable+0x3c>)
    14d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14d6:	bd10      	pop	{r4, pc}
    14d8:	40001c00 	.word	0x40001c00
    14dc:	000007fc 	.word	0x000007fc
    14e0:	0000011d 	.word	0x0000011d
    14e4:	0000015d 	.word	0x0000015d

000014e8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    14e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ea:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    14ec:	2204      	movs	r2, #4
    14ee:	4082      	lsls	r2, r0
    14f0:	4812      	ldr	r0, [pc, #72]	; (153c <system_gclk_gen_get_hz+0x54>)
    14f2:	4913      	ldr	r1, [pc, #76]	; (1540 <system_gclk_gen_get_hz+0x58>)
    14f4:	6843      	ldr	r3, [r0, #4]
    14f6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    14f8:	421a      	tst	r2, r3
    14fa:	d1fb      	bne.n	14f4 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    14fc:	4b11      	ldr	r3, [pc, #68]	; (1544 <system_gclk_gen_get_hz+0x5c>)
    14fe:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1500:	4f0e      	ldr	r7, [pc, #56]	; (153c <system_gclk_gen_get_hz+0x54>)
    1502:	3408      	adds	r4, #8
    1504:	00a4      	lsls	r4, r4, #2
    1506:	59e0      	ldr	r0, [r4, r7]
    1508:	0740      	lsls	r0, r0, #29
    150a:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    150c:	4b0e      	ldr	r3, [pc, #56]	; (1548 <system_gclk_gen_get_hz+0x60>)
    150e:	4798      	blx	r3
    1510:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1512:	59e5      	ldr	r5, [r4, r7]
    1514:	04ed      	lsls	r5, r5, #19
    1516:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1518:	59e4      	ldr	r4, [r4, r7]
    151a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    151c:	4b0b      	ldr	r3, [pc, #44]	; (154c <system_gclk_gen_get_hz+0x64>)
    151e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1520:	2d00      	cmp	r5, #0
    1522:	d107      	bne.n	1534 <system_gclk_gen_get_hz+0x4c>
    1524:	2c01      	cmp	r4, #1
    1526:	d907      	bls.n	1538 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1528:	0021      	movs	r1, r4
    152a:	0030      	movs	r0, r6
    152c:	4b08      	ldr	r3, [pc, #32]	; (1550 <system_gclk_gen_get_hz+0x68>)
    152e:	4798      	blx	r3
    1530:	0006      	movs	r6, r0
    1532:	e001      	b.n	1538 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1534:	3401      	adds	r4, #1
    1536:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1538:	0030      	movs	r0, r6
    153a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    153c:	40001c00 	.word	0x40001c00
    1540:	000007fc 	.word	0x000007fc
    1544:	0000011d 	.word	0x0000011d
    1548:	00001051 	.word	0x00001051
    154c:	0000015d 	.word	0x0000015d
    1550:	00005b2d 	.word	0x00005b2d

00001554 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1554:	b510      	push	{r4, lr}
    1556:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1558:	4b09      	ldr	r3, [pc, #36]	; (1580 <system_gclk_chan_enable+0x2c>)
    155a:	4798      	blx	r3
    155c:	00a0      	lsls	r0, r4, #2
    155e:	4b09      	ldr	r3, [pc, #36]	; (1584 <system_gclk_chan_enable+0x30>)
    1560:	469c      	mov	ip, r3
    1562:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1564:	2280      	movs	r2, #128	; 0x80
    1566:	5883      	ldr	r3, [r0, r2]
    1568:	2140      	movs	r1, #64	; 0x40
    156a:	430b      	orrs	r3, r1
    156c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    156e:	3140      	adds	r1, #64	; 0x40
    1570:	3a40      	subs	r2, #64	; 0x40
    1572:	5843      	ldr	r3, [r0, r1]
    1574:	421a      	tst	r2, r3
    1576:	d0fc      	beq.n	1572 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    1578:	4b03      	ldr	r3, [pc, #12]	; (1588 <system_gclk_chan_enable+0x34>)
    157a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    157c:	bd10      	pop	{r4, pc}
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	0000011d 	.word	0x0000011d
    1584:	40001c00 	.word	0x40001c00
    1588:	0000015d 	.word	0x0000015d

0000158c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    158c:	b510      	push	{r4, lr}
    158e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1590:	4b09      	ldr	r3, [pc, #36]	; (15b8 <system_gclk_chan_disable+0x2c>)
    1592:	4798      	blx	r3
    1594:	00a0      	lsls	r0, r4, #2
    1596:	4b09      	ldr	r3, [pc, #36]	; (15bc <system_gclk_chan_disable+0x30>)
    1598:	469c      	mov	ip, r3
    159a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    159c:	2280      	movs	r2, #128	; 0x80
    159e:	5883      	ldr	r3, [r0, r2]
    15a0:	2140      	movs	r1, #64	; 0x40
    15a2:	438b      	bics	r3, r1
    15a4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    15a6:	3140      	adds	r1, #64	; 0x40
    15a8:	3a40      	subs	r2, #64	; 0x40
    15aa:	5843      	ldr	r3, [r0, r1]
    15ac:	421a      	tst	r2, r3
    15ae:	d1fc      	bne.n	15aa <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    15b0:	4b03      	ldr	r3, [pc, #12]	; (15c0 <system_gclk_chan_disable+0x34>)
    15b2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    15b4:	bd10      	pop	{r4, pc}
    15b6:	46c0      	nop			; (mov r8, r8)
    15b8:	0000011d 	.word	0x0000011d
    15bc:	40001c00 	.word	0x40001c00
    15c0:	0000015d 	.word	0x0000015d

000015c4 <system_gclk_chan_set_config>:
{
    15c4:	b570      	push	{r4, r5, r6, lr}
    15c6:	0004      	movs	r4, r0
    15c8:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    15ca:	4b05      	ldr	r3, [pc, #20]	; (15e0 <system_gclk_chan_set_config+0x1c>)
    15cc:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    15ce:	782a      	ldrb	r2, [r5, #0]
    15d0:	230f      	movs	r3, #15
    15d2:	4013      	ands	r3, r2
    15d4:	3420      	adds	r4, #32
    15d6:	00a4      	lsls	r4, r4, #2
    15d8:	4a02      	ldr	r2, [pc, #8]	; (15e4 <system_gclk_chan_set_config+0x20>)
    15da:	50a3      	str	r3, [r4, r2]
}
    15dc:	bd70      	pop	{r4, r5, r6, pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	0000158d 	.word	0x0000158d
    15e4:	40001c00 	.word	0x40001c00

000015e8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    15e8:	b510      	push	{r4, lr}
    15ea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    15ec:	4b06      	ldr	r3, [pc, #24]	; (1608 <system_gclk_chan_get_hz+0x20>)
    15ee:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    15f0:	3420      	adds	r4, #32
    15f2:	00a4      	lsls	r4, r4, #2
    15f4:	4b05      	ldr	r3, [pc, #20]	; (160c <system_gclk_chan_get_hz+0x24>)
    15f6:	58e4      	ldr	r4, [r4, r3]
    15f8:	0724      	lsls	r4, r4, #28
    15fa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    15fc:	4b04      	ldr	r3, [pc, #16]	; (1610 <system_gclk_chan_get_hz+0x28>)
    15fe:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1600:	0020      	movs	r0, r4
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <system_gclk_chan_get_hz+0x2c>)
    1604:	4798      	blx	r3
}
    1606:	bd10      	pop	{r4, pc}
    1608:	0000011d 	.word	0x0000011d
    160c:	40001c00 	.word	0x40001c00
    1610:	0000015d 	.word	0x0000015d
    1614:	000014e9 	.word	0x000014e9

00001618 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1618:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    161a:	78d3      	ldrb	r3, [r2, #3]
    161c:	2b00      	cmp	r3, #0
    161e:	d135      	bne.n	168c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1620:	7813      	ldrb	r3, [r2, #0]
    1622:	2b80      	cmp	r3, #128	; 0x80
    1624:	d029      	beq.n	167a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1626:	061b      	lsls	r3, r3, #24
    1628:	2480      	movs	r4, #128	; 0x80
    162a:	0264      	lsls	r4, r4, #9
    162c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    162e:	7854      	ldrb	r4, [r2, #1]
    1630:	2502      	movs	r5, #2
    1632:	43ac      	bics	r4, r5
    1634:	d106      	bne.n	1644 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1636:	7894      	ldrb	r4, [r2, #2]
    1638:	2c00      	cmp	r4, #0
    163a:	d120      	bne.n	167e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    163c:	2480      	movs	r4, #128	; 0x80
    163e:	02a4      	lsls	r4, r4, #10
    1640:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1642:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1644:	7854      	ldrb	r4, [r2, #1]
    1646:	3c01      	subs	r4, #1
    1648:	2c01      	cmp	r4, #1
    164a:	d91c      	bls.n	1686 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    164c:	040d      	lsls	r5, r1, #16
    164e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1650:	24a0      	movs	r4, #160	; 0xa0
    1652:	05e4      	lsls	r4, r4, #23
    1654:	432c      	orrs	r4, r5
    1656:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1658:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    165a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    165c:	24d0      	movs	r4, #208	; 0xd0
    165e:	0624      	lsls	r4, r4, #24
    1660:	432c      	orrs	r4, r5
    1662:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1664:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1666:	78d4      	ldrb	r4, [r2, #3]
    1668:	2c00      	cmp	r4, #0
    166a:	d122      	bne.n	16b2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    166c:	035b      	lsls	r3, r3, #13
    166e:	d51c      	bpl.n	16aa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1670:	7893      	ldrb	r3, [r2, #2]
    1672:	2b01      	cmp	r3, #1
    1674:	d01e      	beq.n	16b4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1676:	6141      	str	r1, [r0, #20]
    1678:	e017      	b.n	16aa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    167a:	2300      	movs	r3, #0
    167c:	e7d7      	b.n	162e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    167e:	24c0      	movs	r4, #192	; 0xc0
    1680:	02e4      	lsls	r4, r4, #11
    1682:	4323      	orrs	r3, r4
    1684:	e7dd      	b.n	1642 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1686:	4c0d      	ldr	r4, [pc, #52]	; (16bc <_system_pinmux_config+0xa4>)
    1688:	4023      	ands	r3, r4
    168a:	e7df      	b.n	164c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    168c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    168e:	040c      	lsls	r4, r1, #16
    1690:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1692:	23a0      	movs	r3, #160	; 0xa0
    1694:	05db      	lsls	r3, r3, #23
    1696:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1698:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    169a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    169c:	23d0      	movs	r3, #208	; 0xd0
    169e:	061b      	lsls	r3, r3, #24
    16a0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    16a2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    16a4:	78d3      	ldrb	r3, [r2, #3]
    16a6:	2b00      	cmp	r3, #0
    16a8:	d103      	bne.n	16b2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    16aa:	7853      	ldrb	r3, [r2, #1]
    16ac:	3b01      	subs	r3, #1
    16ae:	2b01      	cmp	r3, #1
    16b0:	d902      	bls.n	16b8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    16b2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    16b4:	6181      	str	r1, [r0, #24]
    16b6:	e7f8      	b.n	16aa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    16b8:	6081      	str	r1, [r0, #8]
}
    16ba:	e7fa      	b.n	16b2 <_system_pinmux_config+0x9a>
    16bc:	fffbffff 	.word	0xfffbffff

000016c0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    16c0:	b510      	push	{r4, lr}
    16c2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    16c4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    16c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    16c8:	2900      	cmp	r1, #0
    16ca:	d105      	bne.n	16d8 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    16cc:	0943      	lsrs	r3, r0, #5
    16ce:	01db      	lsls	r3, r3, #7
    16d0:	2182      	movs	r1, #130	; 0x82
    16d2:	05c9      	lsls	r1, r1, #23
    16d4:	468c      	mov	ip, r1
    16d6:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    16d8:	241f      	movs	r4, #31
    16da:	4020      	ands	r0, r4
    16dc:	2101      	movs	r1, #1
    16de:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    16e0:	0018      	movs	r0, r3
    16e2:	4b01      	ldr	r3, [pc, #4]	; (16e8 <system_pinmux_pin_set_config+0x28>)
    16e4:	4798      	blx	r3
}
    16e6:	bd10      	pop	{r4, pc}
    16e8:	00001619 	.word	0x00001619

000016ec <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    16ec:	4770      	bx	lr
	...

000016f0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    16f0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    16f2:	4b05      	ldr	r3, [pc, #20]	; (1708 <system_init+0x18>)
    16f4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    16f6:	4b05      	ldr	r3, [pc, #20]	; (170c <system_init+0x1c>)
    16f8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    16fa:	4b05      	ldr	r3, [pc, #20]	; (1710 <system_init+0x20>)
    16fc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    16fe:	4b05      	ldr	r3, [pc, #20]	; (1714 <system_init+0x24>)
    1700:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1702:	4b05      	ldr	r3, [pc, #20]	; (1718 <system_init+0x28>)
    1704:	4798      	blx	r3
}
    1706:	bd10      	pop	{r4, pc}
    1708:	0000129d 	.word	0x0000129d
    170c:	0000018d 	.word	0x0000018d
    1710:	000016ed 	.word	0x000016ed
    1714:	000016ed 	.word	0x000016ed
    1718:	000016ed 	.word	0x000016ed

0000171c <Dummy_Handler>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    171c:	f3ef 8305 	mrs	r3, IPSR
    1720:	e7fc      	b.n	171c <Dummy_Handler>
	...

00001724 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1724:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1726:	4a17      	ldr	r2, [pc, #92]	; (1784 <Reset_Handler+0x60>)
    1728:	4b17      	ldr	r3, [pc, #92]	; (1788 <Reset_Handler+0x64>)
    172a:	429a      	cmp	r2, r3
    172c:	d011      	beq.n	1752 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    172e:	001a      	movs	r2, r3
    1730:	4b16      	ldr	r3, [pc, #88]	; (178c <Reset_Handler+0x68>)
    1732:	429a      	cmp	r2, r3
    1734:	d20d      	bcs.n	1752 <Reset_Handler+0x2e>
    1736:	4a16      	ldr	r2, [pc, #88]	; (1790 <Reset_Handler+0x6c>)
    1738:	3303      	adds	r3, #3
    173a:	1a9b      	subs	r3, r3, r2
    173c:	089b      	lsrs	r3, r3, #2
    173e:	3301      	adds	r3, #1
    1740:	009b      	lsls	r3, r3, #2
    1742:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1744:	4810      	ldr	r0, [pc, #64]	; (1788 <Reset_Handler+0x64>)
    1746:	490f      	ldr	r1, [pc, #60]	; (1784 <Reset_Handler+0x60>)
    1748:	588c      	ldr	r4, [r1, r2]
    174a:	5084      	str	r4, [r0, r2]
    174c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    174e:	429a      	cmp	r2, r3
    1750:	d1fa      	bne.n	1748 <Reset_Handler+0x24>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1752:	4a10      	ldr	r2, [pc, #64]	; (1794 <Reset_Handler+0x70>)
    1754:	4b10      	ldr	r3, [pc, #64]	; (1798 <Reset_Handler+0x74>)
    1756:	429a      	cmp	r2, r3
    1758:	d20a      	bcs.n	1770 <Reset_Handler+0x4c>
    175a:	43d3      	mvns	r3, r2
    175c:	490e      	ldr	r1, [pc, #56]	; (1798 <Reset_Handler+0x74>)
    175e:	185b      	adds	r3, r3, r1
    1760:	2103      	movs	r1, #3
    1762:	438b      	bics	r3, r1
    1764:	3304      	adds	r3, #4
    1766:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1768:	2100      	movs	r1, #0
    176a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    176c:	4293      	cmp	r3, r2
    176e:	d1fc      	bne.n	176a <Reset_Handler+0x46>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1770:	4a0a      	ldr	r2, [pc, #40]	; (179c <Reset_Handler+0x78>)
    1772:	21ff      	movs	r1, #255	; 0xff
    1774:	4b0a      	ldr	r3, [pc, #40]	; (17a0 <Reset_Handler+0x7c>)
    1776:	438b      	bics	r3, r1
    1778:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    177a:	4b0a      	ldr	r3, [pc, #40]	; (17a4 <Reset_Handler+0x80>)
    177c:	4798      	blx	r3

        /* Branch to main function */
        main();
    177e:	4b0a      	ldr	r3, [pc, #40]	; (17a8 <Reset_Handler+0x84>)
    1780:	4798      	blx	r3
    1782:	e7fe      	b.n	1782 <Reset_Handler+0x5e>
    1784:	0000af1c 	.word	0x0000af1c
    1788:	20000000 	.word	0x20000000
    178c:	200002d8 	.word	0x200002d8
    1790:	20000004 	.word	0x20000004
    1794:	200002d8 	.word	0x200002d8
    1798:	200012a4 	.word	0x200012a4
    179c:	e000ed00 	.word	0xe000ed00
    17a0:	00000000 	.word	0x00000000
    17a4:	00005e6d 	.word	0x00005e6d
    17a8:	00005205 	.word	0x00005205

000017ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    17ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ae:	46c6      	mov	lr, r8
    17b0:	b500      	push	{lr}
    17b2:	000c      	movs	r4, r1
    17b4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    17b6:	2800      	cmp	r0, #0
    17b8:	d10f      	bne.n	17da <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    17ba:	2a00      	cmp	r2, #0
    17bc:	dd11      	ble.n	17e2 <_read+0x36>
    17be:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    17c0:	4e09      	ldr	r6, [pc, #36]	; (17e8 <_read+0x3c>)
    17c2:	4d0a      	ldr	r5, [pc, #40]	; (17ec <_read+0x40>)
    17c4:	6830      	ldr	r0, [r6, #0]
    17c6:	0021      	movs	r1, r4
    17c8:	682b      	ldr	r3, [r5, #0]
    17ca:	4798      	blx	r3
		ptr++;
    17cc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    17ce:	42bc      	cmp	r4, r7
    17d0:	d1f8      	bne.n	17c4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    17d2:	4640      	mov	r0, r8
    17d4:	bc04      	pop	{r2}
    17d6:	4690      	mov	r8, r2
    17d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    17da:	2301      	movs	r3, #1
    17dc:	425b      	negs	r3, r3
    17de:	4698      	mov	r8, r3
    17e0:	e7f7      	b.n	17d2 <_read+0x26>
	for (; len > 0; --len) {
    17e2:	4680      	mov	r8, r0
    17e4:	e7f5      	b.n	17d2 <_read+0x26>
    17e6:	46c0      	nop			; (mov r8, r8)
    17e8:	20000d3c 	.word	0x20000d3c
    17ec:	20000d34 	.word	0x20000d34

000017f0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    17f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17f2:	46c6      	mov	lr, r8
    17f4:	b500      	push	{lr}
    17f6:	000e      	movs	r6, r1
    17f8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    17fa:	3801      	subs	r0, #1
    17fc:	2802      	cmp	r0, #2
    17fe:	d810      	bhi.n	1822 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1800:	2a00      	cmp	r2, #0
    1802:	d011      	beq.n	1828 <_write+0x38>
    1804:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1806:	4b0c      	ldr	r3, [pc, #48]	; (1838 <_write+0x48>)
    1808:	4698      	mov	r8, r3
    180a:	4f0c      	ldr	r7, [pc, #48]	; (183c <_write+0x4c>)
    180c:	4643      	mov	r3, r8
    180e:	6818      	ldr	r0, [r3, #0]
    1810:	5d31      	ldrb	r1, [r6, r4]
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	4798      	blx	r3
    1816:	2800      	cmp	r0, #0
    1818:	db08      	blt.n	182c <_write+0x3c>
			return -1;
		}
		++nChars;
    181a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    181c:	42a5      	cmp	r5, r4
    181e:	d1f5      	bne.n	180c <_write+0x1c>
    1820:	e006      	b.n	1830 <_write+0x40>
		return -1;
    1822:	2401      	movs	r4, #1
    1824:	4264      	negs	r4, r4
    1826:	e003      	b.n	1830 <_write+0x40>
	for (; len != 0; --len) {
    1828:	0014      	movs	r4, r2
    182a:	e001      	b.n	1830 <_write+0x40>
			return -1;
    182c:	2401      	movs	r4, #1
    182e:	4264      	negs	r4, r4
	}
	return nChars;
}
    1830:	0020      	movs	r0, r4
    1832:	bc04      	pop	{r2}
    1834:	4690      	mov	r8, r2
    1836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1838:	20000d3c 	.word	0x20000d3c
    183c:	20000d38 	.word	0x20000d38

00001840 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1840:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1842:	4a06      	ldr	r2, [pc, #24]	; (185c <_sbrk+0x1c>)
    1844:	6812      	ldr	r2, [r2, #0]
    1846:	2a00      	cmp	r2, #0
    1848:	d004      	beq.n	1854 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    184a:	4a04      	ldr	r2, [pc, #16]	; (185c <_sbrk+0x1c>)
    184c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    184e:	18c3      	adds	r3, r0, r3
    1850:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1852:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1854:	4902      	ldr	r1, [pc, #8]	; (1860 <_sbrk+0x20>)
    1856:	4a01      	ldr	r2, [pc, #4]	; (185c <_sbrk+0x1c>)
    1858:	6011      	str	r1, [r2, #0]
    185a:	e7f6      	b.n	184a <_sbrk+0xa>
    185c:	20000ca4 	.word	0x20000ca4
    1860:	200032a8 	.word	0x200032a8

00001864 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1864:	2001      	movs	r0, #1
    1866:	4240      	negs	r0, r0
    1868:	4770      	bx	lr

0000186a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    186a:	2380      	movs	r3, #128	; 0x80
    186c:	019b      	lsls	r3, r3, #6
    186e:	604b      	str	r3, [r1, #4]

	return 0;
}
    1870:	2000      	movs	r0, #0
    1872:	4770      	bx	lr

00001874 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1874:	2001      	movs	r0, #1
    1876:	4770      	bx	lr

00001878 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1878:	2000      	movs	r0, #0
    187a:	4770      	bx	lr

0000187c <Delay_ms>:
	while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_FILTER_REGULAR_SEND)));
	
	return hardcoded;
}

static void Delay_ms(uint32_t Delay) {
    187c:	b510      	push	{r4, lr}
    187e:	0004      	movs	r4, r0
	printf("Delayed here %d",Delay);
    1880:	0001      	movs	r1, r0
    1882:	4806      	ldr	r0, [pc, #24]	; (189c <Delay_ms+0x20>)
    1884:	4b06      	ldr	r3, [pc, #24]	; (18a0 <Delay_ms+0x24>)
    1886:	4798      	blx	r3
	for(uint32_t i = 0; i < Delay*10000; i++);
    1888:	4806      	ldr	r0, [pc, #24]	; (18a4 <Delay_ms+0x28>)
    188a:	4360      	muls	r0, r4
    188c:	2800      	cmp	r0, #0
    188e:	d003      	beq.n	1898 <Delay_ms+0x1c>
    1890:	2300      	movs	r3, #0
    1892:	3301      	adds	r3, #1
    1894:	4283      	cmp	r3, r0
    1896:	d1fc      	bne.n	1892 <Delay_ms+0x16>
    1898:	bd10      	pop	{r4, pc}
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	00007cd8 	.word	0x00007cd8
    18a0:	00006061 	.word	0x00006061
    18a4:	00002710 	.word	0x00002710

000018a8 <EnrollNodes>:
	uint8_t (*StoredResponseHashes)[16], uint8_t *ec, struct can_module * can_inst){
    18a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18aa:	46de      	mov	lr, fp
    18ac:	4657      	mov	r7, sl
    18ae:	464e      	mov	r6, r9
    18b0:	4645      	mov	r5, r8
    18b2:	b5e0      	push	{r5, r6, r7, lr}
    18b4:	b08f      	sub	sp, #60	; 0x3c
    18b6:	4682      	mov	sl, r0
    18b8:	9100      	str	r1, [sp, #0]
    18ba:	0017      	movs	r7, r2
    18bc:	9d18      	ldr	r5, [sp, #96]	; 0x60
	printf("\r\nWelcome to the PUF-based CAN Security Demo!\r\n");
    18be:	48dc      	ldr	r0, [pc, #880]	; (1c30 <EnrollNodes+0x388>)
    18c0:	4bdc      	ldr	r3, [pc, #880]	; (1c34 <EnrollNodes+0x38c>)
    18c2:	4798      	blx	r3
	printf("Press 'h' to begin with hardcoded values: ");
    18c4:	48dc      	ldr	r0, [pc, #880]	; (1c38 <EnrollNodes+0x390>)
    18c6:	4bdd      	ldr	r3, [pc, #884]	; (1c3c <EnrollNodes+0x394>)
    18c8:	4798      	blx	r3
	scanf("%c", &c);
    18ca:	ab04      	add	r3, sp, #16
    18cc:	1cdc      	adds	r4, r3, #3
    18ce:	0021      	movs	r1, r4
    18d0:	48db      	ldr	r0, [pc, #876]	; (1c40 <EnrollNodes+0x398>)
    18d2:	4bdc      	ldr	r3, [pc, #880]	; (1c44 <EnrollNodes+0x39c>)
    18d4:	4798      	blx	r3
	while((c != 'h')) {
    18d6:	7823      	ldrb	r3, [r4, #0]
    18d8:	2b68      	cmp	r3, #104	; 0x68
    18da:	d00f      	beq.n	18fc <EnrollNodes+0x54>
		printf("How could you...\r\n");
    18dc:	4bda      	ldr	r3, [pc, #872]	; (1c48 <EnrollNodes+0x3a0>)
    18de:	4699      	mov	r9, r3
    18e0:	4bd4      	ldr	r3, [pc, #848]	; (1c34 <EnrollNodes+0x38c>)
    18e2:	4698      	mov	r8, r3
		scanf("%c", &c);
    18e4:	4ed6      	ldr	r6, [pc, #856]	; (1c40 <EnrollNodes+0x398>)
		printf("How could you...\r\n");
    18e6:	4648      	mov	r0, r9
    18e8:	47c0      	blx	r8
		scanf("%c", &c);
    18ea:	ab04      	add	r3, sp, #16
    18ec:	1cdc      	adds	r4, r3, #3
    18ee:	0021      	movs	r1, r4
    18f0:	0030      	movs	r0, r6
    18f2:	4bd4      	ldr	r3, [pc, #848]	; (1c44 <EnrollNodes+0x39c>)
    18f4:	4798      	blx	r3
	while((c != 'h')) {
    18f6:	7823      	ldrb	r3, [r4, #0]
    18f8:	2b68      	cmp	r3, #104	; 0x68
    18fa:	d1f4      	bne.n	18e6 <EnrollNodes+0x3e>
		printf("\r\nPUF responses will be hardcoded values for enrollment and authentication\r\n");
    18fc:	48d3      	ldr	r0, [pc, #844]	; (1c4c <EnrollNodes+0x3a4>)
    18fe:	4bcd      	ldr	r3, [pc, #820]	; (1c34 <EnrollNodes+0x38c>)
    1900:	4798      	blx	r3
	STAGE = ENROLLMENT;
    1902:	2200      	movs	r2, #0
    1904:	4bd2      	ldr	r3, [pc, #840]	; (1c50 <EnrollNodes+0x3a8>)
    1906:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= total_nodes; i++) {
    1908:	4653      	mov	r3, sl
    190a:	2b00      	cmp	r3, #0
    190c:	db0b      	blt.n	1926 <EnrollNodes+0x7e>
    190e:	9e00      	ldr	r6, [sp, #0]
    1910:	2400      	movs	r4, #0
		memset(StoredPublicKeys[i],0,32);
    1912:	4bd0      	ldr	r3, [pc, #832]	; (1c54 <EnrollNodes+0x3ac>)
    1914:	4698      	mov	r8, r3
    1916:	2220      	movs	r2, #32
    1918:	2100      	movs	r1, #0
    191a:	0030      	movs	r0, r6
    191c:	47c0      	blx	r8
	for(int i = 0; i <= total_nodes; i++) {
    191e:	3401      	adds	r4, #1
    1920:	3620      	adds	r6, #32
    1922:	45a2      	cmp	sl, r4
    1924:	daf7      	bge.n	1916 <EnrollNodes+0x6e>
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void can_get_tx_buffer_element_defaults(
		struct can_tx_element *tx_element)
{
	tx_element->T0.reg = 0;
    1926:	a905      	add	r1, sp, #20
    1928:	2300      	movs	r3, #0
    192a:	9305      	str	r3, [sp, #20]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    192c:	2388      	movs	r3, #136	; 0x88
    192e:	041b      	lsls	r3, r3, #16
    1930:	604b      	str	r3, [r1, #4]
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x411);
    1932:	9a05      	ldr	r2, [sp, #20]
    1934:	4bc8      	ldr	r3, [pc, #800]	; (1c58 <EnrollNodes+0x3b0>)
    1936:	4313      	orrs	r3, r2
    1938:	9305      	str	r3, [sp, #20]
	tx_element.T1.bit.DLC = 1;
    193a:	684b      	ldr	r3, [r1, #4]
    193c:	4ac7      	ldr	r2, [pc, #796]	; (1c5c <EnrollNodes+0x3b4>)
    193e:	401a      	ands	r2, r3
    1940:	2380      	movs	r3, #128	; 0x80
    1942:	025b      	lsls	r3, r3, #9
    1944:	4313      	orrs	r3, r2
    1946:	604b      	str	r3, [r1, #4]
	tx_element.data[0] = (uint8_t)hardcoded;
    1948:	2301      	movs	r3, #1
    194a:	720b      	strb	r3, [r1, #8]
	can_set_tx_buffer_element(can_inst, &tx_element,
    194c:	2201      	movs	r2, #1
    194e:	0028      	movs	r0, r5
    1950:	4bc3      	ldr	r3, [pc, #780]	; (1c60 <EnrollNodes+0x3b8>)
    1952:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    1954:	682b      	ldr	r3, [r5, #0]
    1956:	699a      	ldr	r2, [r3, #24]
    1958:	0792      	lsls	r2, r2, #30
    195a:	d402      	bmi.n	1962 <EnrollNodes+0xba>
	module_inst->hw->TXBAR.reg = trig_mask;
    195c:	2102      	movs	r1, #2
    195e:	22d0      	movs	r2, #208	; 0xd0
    1960:	5099      	str	r1, [r3, r2]
	return module_inst->hw->TXBTO.reg;
    1962:	6829      	ldr	r1, [r5, #0]
    1964:	22d8      	movs	r2, #216	; 0xd8
	while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_FILTER_REGULAR_SEND)));
    1966:	2302      	movs	r3, #2
    1968:	5888      	ldr	r0, [r1, r2]
    196a:	4203      	tst	r3, r0
    196c:	d0fc      	beq.n	1968 <EnrollNodes+0xc0>
		printf("Hardcoding a response\r\n");
    196e:	48bd      	ldr	r0, [pc, #756]	; (1c64 <EnrollNodes+0x3bc>)
    1970:	4cb0      	ldr	r4, [pc, #704]	; (1c34 <EnrollNodes+0x38c>)
    1972:	47a0      	blx	r4
		memset(StoredPublicKeys[0],0xFF,16);
    1974:	2210      	movs	r2, #16
    1976:	21ff      	movs	r1, #255	; 0xff
    1978:	9e00      	ldr	r6, [sp, #0]
    197a:	0030      	movs	r0, r6
    197c:	4bb5      	ldr	r3, [pc, #724]	; (1c54 <EnrollNodes+0x3ac>)
    197e:	4798      	blx	r3
	Status = CompressedKeyGeneration(StoredPublicKeys[0], StoredPublicKeys[0]);
    1980:	0031      	movs	r1, r6
    1982:	0030      	movs	r0, r6
    1984:	4bb8      	ldr	r3, [pc, #736]	; (1c68 <EnrollNodes+0x3c0>)
    1986:	4798      	blx	r3
    1988:	0006      	movs	r6, r0
	printf("Something was supposed to happen here 1.\r\n");
    198a:	48b8      	ldr	r0, [pc, #736]	; (1c6c <EnrollNodes+0x3c4>)
    198c:	47a0      	blx	r4
	if (Status != ECCRYPTO_SUCCESS) {
    198e:	2e01      	cmp	r6, #1
    1990:	d003      	beq.n	199a <EnrollNodes+0xf2>
		printf("Enrollment: Failed server public key generation!\r\n");
    1992:	48b7      	ldr	r0, [pc, #732]	; (1c70 <EnrollNodes+0x3c8>)
    1994:	4ba7      	ldr	r3, [pc, #668]	; (1c34 <EnrollNodes+0x38c>)
    1996:	4798      	blx	r3
    1998:	e7fe      	b.n	1998 <EnrollNodes+0xf0>
	printf("Milestone 1\r\n");
    199a:	48b6      	ldr	r0, [pc, #728]	; (1c74 <EnrollNodes+0x3cc>)
    199c:	4ba5      	ldr	r3, [pc, #660]	; (1c34 <EnrollNodes+0x38c>)
    199e:	4798      	blx	r3
	Delay_ms(500);
    19a0:	20fa      	movs	r0, #250	; 0xfa
    19a2:	0040      	lsls	r0, r0, #1
    19a4:	4bb4      	ldr	r3, [pc, #720]	; (1c78 <EnrollNodes+0x3d0>)
    19a6:	4798      	blx	r3
	tx_element->T0.reg = 0;
    19a8:	2300      	movs	r3, #0
    19aa:	9305      	str	r3, [sp, #20]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    19ac:	2388      	movs	r3, #136	; 0x88
    19ae:	041b      	lsls	r3, r3, #16
    19b0:	9306      	str	r3, [sp, #24]
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x100);
    19b2:	9a05      	ldr	r2, [sp, #20]
    19b4:	2380      	movs	r3, #128	; 0x80
    19b6:	04db      	lsls	r3, r3, #19
    19b8:	4313      	orrs	r3, r2
    19ba:	9305      	str	r3, [sp, #20]
	tx_element.T1.bit.DLC = 8;
    19bc:	9b06      	ldr	r3, [sp, #24]
    19be:	4aa7      	ldr	r2, [pc, #668]	; (1c5c <EnrollNodes+0x3b4>)
    19c0:	401a      	ands	r2, r3
    19c2:	2380      	movs	r3, #128	; 0x80
    19c4:	031b      	lsls	r3, r3, #12
    19c6:	4313      	orrs	r3, r2
    19c8:	9306      	str	r3, [sp, #24]
    19ca:	9b00      	ldr	r3, [sp, #0]
    19cc:	001c      	movs	r4, r3
    19ce:	2218      	movs	r2, #24
    19d0:	4694      	mov	ip, r2
    19d2:	4463      	add	r3, ip
    19d4:	469b      	mov	fp, r3
		memcpy(tx_element.data,&StoredPublicKeys[0][i*8],8);
    19d6:	4ba9      	ldr	r3, [pc, #676]	; (1c7c <EnrollNodes+0x3d4>)
    19d8:	4699      	mov	r9, r3
		can_set_tx_buffer_element(can_inst, &tx_element,
    19da:	4ba1      	ldr	r3, [pc, #644]	; (1c60 <EnrollNodes+0x3b8>)
    19dc:	4698      	mov	r8, r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    19de:	2602      	movs	r6, #2
    19e0:	e005      	b.n	19ee <EnrollNodes+0x146>
		Delay_ms(50);
    19e2:	2032      	movs	r0, #50	; 0x32
    19e4:	4ba4      	ldr	r3, [pc, #656]	; (1c78 <EnrollNodes+0x3d0>)
    19e6:	4798      	blx	r3
    19e8:	3408      	adds	r4, #8
	for (int i = 0; i < 3; i++) {
    19ea:	455c      	cmp	r4, fp
    19ec:	d013      	beq.n	1a16 <EnrollNodes+0x16e>
		memcpy(tx_element.data,&StoredPublicKeys[0][i*8],8);
    19ee:	2208      	movs	r2, #8
    19f0:	0021      	movs	r1, r4
    19f2:	a807      	add	r0, sp, #28
    19f4:	47c8      	blx	r9
		can_set_tx_buffer_element(can_inst, &tx_element,
    19f6:	2201      	movs	r2, #1
    19f8:	a905      	add	r1, sp, #20
    19fa:	0028      	movs	r0, r5
    19fc:	47c0      	blx	r8
    19fe:	682b      	ldr	r3, [r5, #0]
    1a00:	699a      	ldr	r2, [r3, #24]
    1a02:	4216      	tst	r6, r2
    1a04:	d101      	bne.n	1a0a <EnrollNodes+0x162>
	module_inst->hw->TXBAR.reg = trig_mask;
    1a06:	22d0      	movs	r2, #208	; 0xd0
    1a08:	509e      	str	r6, [r3, r2]
	return module_inst->hw->TXBTO.reg;
    1a0a:	682a      	ldr	r2, [r5, #0]
    1a0c:	23d8      	movs	r3, #216	; 0xd8
    1a0e:	58d1      	ldr	r1, [r2, r3]
		while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_FILTER_REGULAR_SEND)));
    1a10:	420e      	tst	r6, r1
    1a12:	d0fc      	beq.n	1a0e <EnrollNodes+0x166>
    1a14:	e7e5      	b.n	19e2 <EnrollNodes+0x13a>
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1a16:	4b9a      	ldr	r3, [pc, #616]	; (1c80 <EnrollNodes+0x3d8>)
    1a18:	9309      	str	r3, [sp, #36]	; 0x24
	sd_filter.S0.bit.SFID1 = 0x301;
    1a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a1c:	4a99      	ldr	r2, [pc, #612]	; (1c84 <EnrollNodes+0x3dc>)
    1a1e:	401a      	ands	r2, r3
    1a20:	4b99      	ldr	r3, [pc, #612]	; (1c88 <EnrollNodes+0x3e0>)
    1a22:	4313      	orrs	r3, r2
    1a24:	9309      	str	r3, [sp, #36]	; 0x24
	sd_filter.S0.bit.SFID2 = CAN_FILTER_REGULAR_REC;
    1a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a28:	0adb      	lsrs	r3, r3, #11
    1a2a:	02db      	lsls	r3, r3, #11
    1a2c:	2202      	movs	r2, #2
    1a2e:	4313      	orrs	r3, r2
    1a30:	9309      	str	r3, [sp, #36]	; 0x24
	sd_filter.S0.bit.SFEC =
    1a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1a34:	23e0      	movs	r3, #224	; 0xe0
    1a36:	059b      	lsls	r3, r3, #22
    1a38:	4313      	orrs	r3, r2
    1a3a:	9309      	str	r3, [sp, #36]	; 0x24
	Delay_ms(500);
    1a3c:	20fa      	movs	r0, #250	; 0xfa
    1a3e:	0040      	lsls	r0, r0, #1
    1a40:	4b8d      	ldr	r3, [pc, #564]	; (1c78 <EnrollNodes+0x3d0>)
    1a42:	4798      	blx	r3
	for (int i = 1; i <= total_nodes; i++) {
    1a44:	4653      	mov	r3, sl
    1a46:	2b00      	cmp	r3, #0
    1a48:	dc00      	bgt.n	1a4c <EnrollNodes+0x1a4>
    1a4a:	e13c      	b.n	1cc6 <EnrollNodes+0x41e>
    1a4c:	9b00      	ldr	r3, [sp, #0]
    1a4e:	3320      	adds	r3, #32
    1a50:	9301      	str	r3, [sp, #4]
    1a52:	3710      	adds	r7, #16
    1a54:	9702      	str	r7, [sp, #8]
    1a56:	4b8d      	ldr	r3, [pc, #564]	; (1c8c <EnrollNodes+0x3e4>)
    1a58:	9303      	str	r3, [sp, #12]
    1a5a:	2301      	movs	r3, #1
    1a5c:	4699      	mov	r9, r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    1a5e:	3301      	adds	r3, #1
    1a60:	4698      	mov	r8, r3
		memcpy(&response[0],getNextBufferElement(&rx_element_buff[CAN_FILTER_REGULAR_REC])->data,8);
    1a62:	ae0a      	add	r6, sp, #40	; 0x28
    1a64:	46ab      	mov	fp, r5
    1a66:	e0ac      	b.n	1bc2 <EnrollNodes+0x31a>
	return module_inst->hw->TXBTO.reg;
    1a68:	465b      	mov	r3, fp
    1a6a:	6819      	ldr	r1, [r3, #0]
    1a6c:	22d8      	movs	r2, #216	; 0xd8
    1a6e:	588b      	ldr	r3, [r1, r2]
		while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_FILTER_REGULAR_SEND)));
    1a70:	4640      	mov	r0, r8
    1a72:	4218      	tst	r0, r3
    1a74:	d0fb      	beq.n	1a6e <EnrollNodes+0x1c6>
		g_received = 0;
    1a76:	4b86      	ldr	r3, [pc, #536]	; (1c90 <EnrollNodes+0x3e8>)
    1a78:	2200      	movs	r2, #0
    1a7a:	601a      	str	r2, [r3, #0]
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1a7c:	4b80      	ldr	r3, [pc, #512]	; (1c80 <EnrollNodes+0x3d8>)
    1a7e:	9309      	str	r3, [sp, #36]	; 0x24
		sd_filter.S0.bit.SFID1 = 0x200 + i;
    1a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a82:	9a03      	ldr	r2, [sp, #12]
    1a84:	0412      	lsls	r2, r2, #16
    1a86:	497f      	ldr	r1, [pc, #508]	; (1c84 <EnrollNodes+0x3dc>)
    1a88:	400b      	ands	r3, r1
    1a8a:	4313      	orrs	r3, r2
    1a8c:	9309      	str	r3, [sp, #36]	; 0x24
		sd_filter.S0.bit.SFID2 = CAN_FILTER_REGULAR_REC;
    1a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a90:	0adb      	lsrs	r3, r3, #11
    1a92:	02db      	lsls	r3, r3, #11
    1a94:	4303      	orrs	r3, r0
    1a96:	9309      	str	r3, [sp, #36]	; 0x24
		sd_filter.S0.bit.SFEC =
    1a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1a9a:	23e0      	movs	r3, #224	; 0xe0
    1a9c:	059b      	lsls	r3, r3, #22
    1a9e:	4313      	orrs	r3, r2
    1aa0:	9309      	str	r3, [sp, #36]	; 0x24
		can_set_rx_standard_filter(can_inst, &sd_filter,
    1aa2:	4642      	mov	r2, r8
    1aa4:	a909      	add	r1, sp, #36	; 0x24
    1aa6:	4658      	mov	r0, fp
    1aa8:	4b7a      	ldr	r3, [pc, #488]	; (1c94 <EnrollNodes+0x3ec>)
    1aaa:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
    1aac:	465b      	mov	r3, fp
    1aae:	681a      	ldr	r2, [r3, #0]
    1ab0:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1ab2:	2380      	movs	r3, #128	; 0x80
    1ab4:	031b      	lsls	r3, r3, #12
    1ab6:	430b      	orrs	r3, r1
    1ab8:	6553      	str	r3, [r2, #84]	; 0x54
		while(g_received == 0);
    1aba:	4a75      	ldr	r2, [pc, #468]	; (1c90 <EnrollNodes+0x3e8>)
    1abc:	6813      	ldr	r3, [r2, #0]
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d0fc      	beq.n	1abc <EnrollNodes+0x214>
	uint8_t (*StoredResponseHashes)[16], uint8_t *ec, struct can_module * can_inst);



inline struct can_rx_element_buffer * getNextBufferElement(struct multiBuffer * buff) {
	if (buff->last_write == buff->last_read) return NULL;
    1ac2:	4a75      	ldr	r2, [pc, #468]	; (1c98 <EnrollNodes+0x3f0>)
    1ac4:	2389      	movs	r3, #137	; 0x89
    1ac6:	5cd3      	ldrb	r3, [r2, r3]
    1ac8:	2188      	movs	r1, #136	; 0x88
    1aca:	5c52      	ldrb	r2, [r2, r1]
    1acc:	429a      	cmp	r2, r3
    1ace:	d100      	bne.n	1ad2 <EnrollNodes+0x22a>
    1ad0:	e0a5      	b.n	1c1e <EnrollNodes+0x376>
	register int last_element = buff->last_read;
	
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    1ad2:	4971      	ldr	r1, [pc, #452]	; (1c98 <EnrollNodes+0x3f0>)
    1ad4:	1c58      	adds	r0, r3, #1
    1ad6:	2203      	movs	r2, #3
    1ad8:	4002      	ands	r2, r0
    1ada:	2089      	movs	r0, #137	; 0x89
    1adc:	540a      	strb	r2, [r1, r0]
	
	return &(buff->buffers[last_element]);
    1ade:	011b      	lsls	r3, r3, #4
    1ae0:	338c      	adds	r3, #140	; 0x8c
    1ae2:	185b      	adds	r3, r3, r1
		memcpy(&response[0],getNextBufferElement(&rx_element_buff[CAN_FILTER_REGULAR_REC])->data,8);
    1ae4:	3308      	adds	r3, #8
    1ae6:	0032      	movs	r2, r6
    1ae8:	cb03      	ldmia	r3!, {r0, r1}
    1aea:	c203      	stmia	r2!, {r0, r1}
		can_set_rx_standard_filter(can_inst, &sd_filter,
    1aec:	4642      	mov	r2, r8
    1aee:	a909      	add	r1, sp, #36	; 0x24
    1af0:	4658      	mov	r0, fp
    1af2:	4b68      	ldr	r3, [pc, #416]	; (1c94 <EnrollNodes+0x3ec>)
    1af4:	4798      	blx	r3
		printf("Half two\r\n");
    1af6:	4869      	ldr	r0, [pc, #420]	; (1c9c <EnrollNodes+0x3f4>)
    1af8:	4b4e      	ldr	r3, [pc, #312]	; (1c34 <EnrollNodes+0x38c>)
    1afa:	4798      	blx	r3
		while(g_received == 1);
    1afc:	4a64      	ldr	r2, [pc, #400]	; (1c90 <EnrollNodes+0x3e8>)
    1afe:	6813      	ldr	r3, [r2, #0]
    1b00:	2b01      	cmp	r3, #1
    1b02:	d0fc      	beq.n	1afe <EnrollNodes+0x256>
		g_received = 0;
    1b04:	4b62      	ldr	r3, [pc, #392]	; (1c90 <EnrollNodes+0x3e8>)
    1b06:	2200      	movs	r2, #0
    1b08:	601a      	str	r2, [r3, #0]
	if (buff->last_write == buff->last_read) return NULL;
    1b0a:	4a63      	ldr	r2, [pc, #396]	; (1c98 <EnrollNodes+0x3f0>)
    1b0c:	2389      	movs	r3, #137	; 0x89
    1b0e:	5cd3      	ldrb	r3, [r2, r3]
    1b10:	2188      	movs	r1, #136	; 0x88
    1b12:	5c52      	ldrb	r2, [r2, r1]
    1b14:	429a      	cmp	r2, r3
    1b16:	d100      	bne.n	1b1a <EnrollNodes+0x272>
    1b18:	e083      	b.n	1c22 <EnrollNodes+0x37a>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    1b1a:	495f      	ldr	r1, [pc, #380]	; (1c98 <EnrollNodes+0x3f0>)
    1b1c:	1c58      	adds	r0, r3, #1
    1b1e:	2203      	movs	r2, #3
    1b20:	4002      	ands	r2, r0
    1b22:	2089      	movs	r0, #137	; 0x89
    1b24:	540a      	strb	r2, [r1, r0]
	return &(buff->buffers[last_element]);
    1b26:	011b      	lsls	r3, r3, #4
    1b28:	338c      	adds	r3, #140	; 0x8c
    1b2a:	185b      	adds	r3, r3, r1
		memcpy(&response[8],getNextBufferElement(&rx_element_buff[CAN_FILTER_REGULAR_REC])->data,8);
    1b2c:	aa0c      	add	r2, sp, #48	; 0x30
    1b2e:	3308      	adds	r3, #8
    1b30:	cb03      	ldmia	r3!, {r0, r1}
    1b32:	c203      	stmia	r2!, {r0, r1}
		printf("Received Response: ");
    1b34:	485a      	ldr	r0, [pc, #360]	; (1ca0 <EnrollNodes+0x3f8>)
    1b36:	4b41      	ldr	r3, [pc, #260]	; (1c3c <EnrollNodes+0x394>)
    1b38:	4798      	blx	r3
		for(int j = 0; j < 16; j++) {
    1b3a:	2500      	movs	r5, #0
			printf("%02x",response[j]);
    1b3c:	4c59      	ldr	r4, [pc, #356]	; (1ca4 <EnrollNodes+0x3fc>)
    1b3e:	4f3f      	ldr	r7, [pc, #252]	; (1c3c <EnrollNodes+0x394>)
    1b40:	5da9      	ldrb	r1, [r5, r6]
    1b42:	0020      	movs	r0, r4
    1b44:	47b8      	blx	r7
		for(int j = 0; j < 16; j++) {
    1b46:	3501      	adds	r5, #1
    1b48:	2d10      	cmp	r5, #16
    1b4a:	d1f9      	bne.n	1b40 <EnrollNodes+0x298>
		printf("\r\n");
    1b4c:	4856      	ldr	r0, [pc, #344]	; (1ca8 <EnrollNodes+0x400>)
    1b4e:	4b39      	ldr	r3, [pc, #228]	; (1c34 <EnrollNodes+0x38c>)
    1b50:	4798      	blx	r3
		memmove(StoredPublicKeys[i],response,16);
    1b52:	2210      	movs	r2, #16
    1b54:	0031      	movs	r1, r6
    1b56:	9c01      	ldr	r4, [sp, #4]
    1b58:	0020      	movs	r0, r4
    1b5a:	4b48      	ldr	r3, [pc, #288]	; (1c7c <EnrollNodes+0x3d4>)
    1b5c:	4798      	blx	r3
		photon128(response,16,StoredResponseHashes[i]);
    1b5e:	9a02      	ldr	r2, [sp, #8]
    1b60:	2110      	movs	r1, #16
    1b62:	0030      	movs	r0, r6
    1b64:	4b51      	ldr	r3, [pc, #324]	; (1cac <EnrollNodes+0x404>)
    1b66:	4798      	blx	r3
		Status = CompressedKeyGeneration(StoredPublicKeys[i],StoredPublicKeys[i]);
    1b68:	0021      	movs	r1, r4
    1b6a:	0020      	movs	r0, r4
    1b6c:	4b3e      	ldr	r3, [pc, #248]	; (1c68 <EnrollNodes+0x3c0>)
    1b6e:	4798      	blx	r3
		if (Status != ECCRYPTO_SUCCESS) {
    1b70:	2801      	cmp	r0, #1
    1b72:	d158      	bne.n	1c26 <EnrollNodes+0x37e>
			printf("Generated Node %i Key: 0x",i);
    1b74:	4649      	mov	r1, r9
    1b76:	484e      	ldr	r0, [pc, #312]	; (1cb0 <EnrollNodes+0x408>)
    1b78:	4b30      	ldr	r3, [pc, #192]	; (1c3c <EnrollNodes+0x394>)
    1b7a:	4798      	blx	r3
    1b7c:	9c01      	ldr	r4, [sp, #4]
    1b7e:	0025      	movs	r5, r4
    1b80:	3510      	adds	r5, #16
				printf("%02x",StoredPublicKeys[i][j]);
    1b82:	4f2e      	ldr	r7, [pc, #184]	; (1c3c <EnrollNodes+0x394>)
    1b84:	7821      	ldrb	r1, [r4, #0]
    1b86:	4847      	ldr	r0, [pc, #284]	; (1ca4 <EnrollNodes+0x3fc>)
    1b88:	47b8      	blx	r7
    1b8a:	3401      	adds	r4, #1
			for (int j = 0; j < 16; j++) {
    1b8c:	42ac      	cmp	r4, r5
    1b8e:	d1f9      	bne.n	1b84 <EnrollNodes+0x2dc>
			printf("\r\n");
    1b90:	4845      	ldr	r0, [pc, #276]	; (1ca8 <EnrollNodes+0x400>)
    1b92:	4b28      	ldr	r3, [pc, #160]	; (1c34 <EnrollNodes+0x38c>)
    1b94:	4798      	blx	r3
		printf("Completed node %i enrollment\r\n",i);
    1b96:	4649      	mov	r1, r9
    1b98:	4846      	ldr	r0, [pc, #280]	; (1cb4 <EnrollNodes+0x40c>)
    1b9a:	4b28      	ldr	r3, [pc, #160]	; (1c3c <EnrollNodes+0x394>)
    1b9c:	4798      	blx	r3
	for (int i = 1; i <= total_nodes; i++) {
    1b9e:	464b      	mov	r3, r9
    1ba0:	3301      	adds	r3, #1
    1ba2:	001a      	movs	r2, r3
    1ba4:	4699      	mov	r9, r3
    1ba6:	9b01      	ldr	r3, [sp, #4]
    1ba8:	3320      	adds	r3, #32
    1baa:	9301      	str	r3, [sp, #4]
    1bac:	9b02      	ldr	r3, [sp, #8]
    1bae:	3310      	adds	r3, #16
    1bb0:	9302      	str	r3, [sp, #8]
    1bb2:	9b03      	ldr	r3, [sp, #12]
    1bb4:	3301      	adds	r3, #1
    1bb6:	055b      	lsls	r3, r3, #21
    1bb8:	0d5b      	lsrs	r3, r3, #21
    1bba:	9303      	str	r3, [sp, #12]
    1bbc:	4592      	cmp	sl, r2
    1bbe:	da00      	bge.n	1bc2 <EnrollNodes+0x31a>
    1bc0:	e080      	b.n	1cc4 <EnrollNodes+0x41c>
		printf("Now on Node %d\r\n",i);
    1bc2:	4649      	mov	r1, r9
    1bc4:	483c      	ldr	r0, [pc, #240]	; (1cb8 <EnrollNodes+0x410>)
    1bc6:	4b1d      	ldr	r3, [pc, #116]	; (1c3c <EnrollNodes+0x394>)
    1bc8:	4798      	blx	r3
	tx_element->T0.reg = 0;
    1bca:	2300      	movs	r3, #0
    1bcc:	9305      	str	r3, [sp, #20]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    1bce:	2388      	movs	r3, #136	; 0x88
    1bd0:	041b      	lsls	r3, r3, #16
    1bd2:	9306      	str	r3, [sp, #24]
		tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x100+i);
    1bd4:	9a05      	ldr	r2, [sp, #20]
    1bd6:	464b      	mov	r3, r9
    1bd8:	3301      	adds	r3, #1
    1bda:	33ff      	adds	r3, #255	; 0xff
    1bdc:	049b      	lsls	r3, r3, #18
    1bde:	4937      	ldr	r1, [pc, #220]	; (1cbc <EnrollNodes+0x414>)
    1be0:	400b      	ands	r3, r1
    1be2:	4313      	orrs	r3, r2
    1be4:	9305      	str	r3, [sp, #20]
		tx_element.T1.bit.DLC = 8;
    1be6:	9b06      	ldr	r3, [sp, #24]
    1be8:	4a1c      	ldr	r2, [pc, #112]	; (1c5c <EnrollNodes+0x3b4>)
    1bea:	401a      	ands	r2, r3
    1bec:	2380      	movs	r3, #128	; 0x80
    1bee:	031b      	lsls	r3, r3, #12
    1bf0:	4313      	orrs	r3, r2
    1bf2:	9306      	str	r3, [sp, #24]
		memcpy(tx_element.data,&StoredPublicKeys[0][24],8);
    1bf4:	9900      	ldr	r1, [sp, #0]
    1bf6:	3118      	adds	r1, #24
    1bf8:	2208      	movs	r2, #8
    1bfa:	a807      	add	r0, sp, #28
    1bfc:	4b1f      	ldr	r3, [pc, #124]	; (1c7c <EnrollNodes+0x3d4>)
    1bfe:	4798      	blx	r3
		can_set_tx_buffer_element(can_inst, &tx_element,
    1c00:	2201      	movs	r2, #1
    1c02:	a905      	add	r1, sp, #20
    1c04:	4658      	mov	r0, fp
    1c06:	4b16      	ldr	r3, [pc, #88]	; (1c60 <EnrollNodes+0x3b8>)
    1c08:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    1c0a:	465b      	mov	r3, fp
    1c0c:	681b      	ldr	r3, [r3, #0]
    1c0e:	699a      	ldr	r2, [r3, #24]
    1c10:	4641      	mov	r1, r8
    1c12:	4211      	tst	r1, r2
    1c14:	d000      	beq.n	1c18 <EnrollNodes+0x370>
    1c16:	e727      	b.n	1a68 <EnrollNodes+0x1c0>
	module_inst->hw->TXBAR.reg = trig_mask;
    1c18:	22d0      	movs	r2, #208	; 0xd0
    1c1a:	5099      	str	r1, [r3, r2]
    1c1c:	e724      	b.n	1a68 <EnrollNodes+0x1c0>
	if (buff->last_write == buff->last_read) return NULL;
    1c1e:	2300      	movs	r3, #0
    1c20:	e760      	b.n	1ae4 <EnrollNodes+0x23c>
    1c22:	2300      	movs	r3, #0
    1c24:	e782      	b.n	1b2c <EnrollNodes+0x284>
			printf("Enrollment: Failed Node %i Public Key Generation\r\n",i);
    1c26:	4649      	mov	r1, r9
    1c28:	4825      	ldr	r0, [pc, #148]	; (1cc0 <EnrollNodes+0x418>)
    1c2a:	4b04      	ldr	r3, [pc, #16]	; (1c3c <EnrollNodes+0x394>)
    1c2c:	4798      	blx	r3
    1c2e:	e7fe      	b.n	1c2e <EnrollNodes+0x386>
    1c30:	00007ce8 	.word	0x00007ce8
    1c34:	00006155 	.word	0x00006155
    1c38:	00007d18 	.word	0x00007d18
    1c3c:	00006061 	.word	0x00006061
    1c40:	00007d44 	.word	0x00007d44
    1c44:	0000618d 	.word	0x0000618d
    1c48:	00007d48 	.word	0x00007d48
    1c4c:	00007d5c 	.word	0x00007d5c
    1c50:	20000ca8 	.word	0x20000ca8
    1c54:	00005eff 	.word	0x00005eff
    1c58:	10440000 	.word	0x10440000
    1c5c:	fff0ffff 	.word	0xfff0ffff
    1c60:	00000599 	.word	0x00000599
    1c64:	00007da8 	.word	0x00007da8
    1c68:	00004339 	.word	0x00004339
    1c6c:	00007dc0 	.word	0x00007dc0
    1c70:	00007dec 	.word	0x00007dec
    1c74:	00007e20 	.word	0x00007e20
    1c78:	0000187d 	.word	0x0000187d
    1c7c:	00005ec9 	.word	0x00005ec9
    1c80:	880007ff 	.word	0x880007ff
    1c84:	f800ffff 	.word	0xf800ffff
    1c88:	03010000 	.word	0x03010000
    1c8c:	00000201 	.word	0x00000201
    1c90:	20000cac 	.word	0x20000cac
    1c94:	0000050d 	.word	0x0000050d
    1c98:	20000d40 	.word	0x20000d40
    1c9c:	00007e44 	.word	0x00007e44
    1ca0:	00007e50 	.word	0x00007e50
    1ca4:	0000a60c 	.word	0x0000a60c
    1ca8:	0000ab44 	.word	0x0000ab44
    1cac:	00004649 	.word	0x00004649
    1cb0:	00007e98 	.word	0x00007e98
    1cb4:	00007eb4 	.word	0x00007eb4
    1cb8:	00007e30 	.word	0x00007e30
    1cbc:	1ffc0000 	.word	0x1ffc0000
    1cc0:	00007e64 	.word	0x00007e64
    1cc4:	465d      	mov	r5, fp
	sd_filter.S0.bit.SFEC =
    1cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cc8:	4a19      	ldr	r2, [pc, #100]	; (1d30 <EnrollNodes+0x488>)
    1cca:	4013      	ands	r3, r2
    1ccc:	9309      	str	r3, [sp, #36]	; 0x24
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1cce:	2202      	movs	r2, #2
    1cd0:	a909      	add	r1, sp, #36	; 0x24
    1cd2:	0028      	movs	r0, r5
    1cd4:	4b17      	ldr	r3, [pc, #92]	; (1d34 <EnrollNodes+0x48c>)
    1cd6:	4798      	blx	r3
	tx_element->T0.reg = 0;
    1cd8:	a905      	add	r1, sp, #20
    1cda:	2300      	movs	r3, #0
    1cdc:	9305      	str	r3, [sp, #20]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    1cde:	2388      	movs	r3, #136	; 0x88
    1ce0:	041b      	lsls	r3, r3, #16
    1ce2:	604b      	str	r3, [r1, #4]
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x411);
    1ce4:	9a05      	ldr	r2, [sp, #20]
    1ce6:	4b14      	ldr	r3, [pc, #80]	; (1d38 <EnrollNodes+0x490>)
    1ce8:	4313      	orrs	r3, r2
    1cea:	9305      	str	r3, [sp, #20]
	tx_element.T1.bit.DLC = 1;
    1cec:	684b      	ldr	r3, [r1, #4]
    1cee:	4a13      	ldr	r2, [pc, #76]	; (1d3c <EnrollNodes+0x494>)
    1cf0:	401a      	ands	r2, r3
    1cf2:	2380      	movs	r3, #128	; 0x80
    1cf4:	025b      	lsls	r3, r3, #9
    1cf6:	4313      	orrs	r3, r2
    1cf8:	604b      	str	r3, [r1, #4]
	tx_element.data[0] = (uint8_t)hardcoded;
    1cfa:	2301      	movs	r3, #1
    1cfc:	720b      	strb	r3, [r1, #8]
	can_set_tx_buffer_element(can_inst, &tx_element,
    1cfe:	2201      	movs	r2, #1
    1d00:	0028      	movs	r0, r5
    1d02:	4b0f      	ldr	r3, [pc, #60]	; (1d40 <EnrollNodes+0x498>)
    1d04:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    1d06:	682b      	ldr	r3, [r5, #0]
    1d08:	699a      	ldr	r2, [r3, #24]
    1d0a:	0792      	lsls	r2, r2, #30
    1d0c:	d402      	bmi.n	1d14 <EnrollNodes+0x46c>
	module_inst->hw->TXBAR.reg = trig_mask;
    1d0e:	2102      	movs	r1, #2
    1d10:	22d0      	movs	r2, #208	; 0xd0
    1d12:	5099      	str	r1, [r3, r2]
	return module_inst->hw->TXBTO.reg;
    1d14:	6829      	ldr	r1, [r5, #0]
    1d16:	22d8      	movs	r2, #216	; 0xd8
	while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_FILTER_REGULAR_SEND)));
    1d18:	2302      	movs	r3, #2
    1d1a:	5888      	ldr	r0, [r1, r2]
    1d1c:	4203      	tst	r3, r0
    1d1e:	d0fc      	beq.n	1d1a <EnrollNodes+0x472>
}
    1d20:	2001      	movs	r0, #1
    1d22:	b00f      	add	sp, #60	; 0x3c
    1d24:	bc3c      	pop	{r2, r3, r4, r5}
    1d26:	4690      	mov	r8, r2
    1d28:	4699      	mov	r9, r3
    1d2a:	46a2      	mov	sl, r4
    1d2c:	46ab      	mov	fp, r5
    1d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d30:	c7ffffff 	.word	0xc7ffffff
    1d34:	0000050d 	.word	0x0000050d
    1d38:	10440000 	.word	0x10440000
    1d3c:	fff0ffff 	.word	0xfff0ffff
    1d40:	00000599 	.word	0x00000599

00001d44 <is_zero_ct>:
static digit_t mask4000 = (digit_t)1 << (sizeof(digit_t)*8 - 2);
static digit_t mask7fff = (digit_t)(-1) >> 1;


bool is_zero_ct(digit_t* a, unsigned int nwords)
{ // Check if multiprecision element is zero
    1d44:	b510      	push	{r4, lr}
    digit_t x;
    unsigned int i;

    x = a[0];
    1d46:	6802      	ldr	r2, [r0, #0]
    for (i = 1; i < nwords; i++) {
    1d48:	2901      	cmp	r1, #1
    1d4a:	d906      	bls.n	1d5a <is_zero_ct+0x16>
    1d4c:	1d03      	adds	r3, r0, #4
    1d4e:	0089      	lsls	r1, r1, #2
    1d50:	1840      	adds	r0, r0, r1
        x |= a[i];
    1d52:	cb10      	ldmia	r3!, {r4}
    1d54:	4322      	orrs	r2, r4
    for (i = 1; i < nwords; i++) {
    1d56:	4283      	cmp	r3, r0
    1d58:	d1fb      	bne.n	1d52 <is_zero_ct+0xe>
    }

    return (bool)(1 ^ ((x | (0-x)) >> (RADIX-1)));
    1d5a:	4250      	negs	r0, r2
    1d5c:	4310      	orrs	r0, r2
    1d5e:	0fc0      	lsrs	r0, r0, #31
    1d60:	3801      	subs	r0, #1
    1d62:	4240      	negs	r0, r0
}
    1d64:	bd10      	pop	{r4, pc}
	...

00001d68 <encode>:


void encode(point_t P, unsigned char* Pencoded)
{ // Encode point P
    1d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d6a:	0005      	movs	r5, r0
    1d6c:	000e      	movs	r6, r1
  // SECURITY NOTE: this function does not run in constant time.
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    1d6e:	69c7      	ldr	r7, [r0, #28]
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    1d70:	68c4      	ldr	r4, [r0, #12]

    memmove(Pencoded, P->y, 32);
    1d72:	0001      	movs	r1, r0
    1d74:	3120      	adds	r1, #32
    1d76:	2220      	movs	r2, #32
    1d78:	0030      	movs	r0, r6
    1d7a:	4b0b      	ldr	r3, [pc, #44]	; (1da8 <encode+0x40>)
    1d7c:	4798      	blx	r3
    if (is_zero_ct((digit_t*)P->x, NWORDS_FIELD) == true) {
    1d7e:	2104      	movs	r1, #4
    1d80:	0028      	movs	r0, r5
    1d82:	4b0a      	ldr	r3, [pc, #40]	; (1dac <encode+0x44>)
    1d84:	4798      	blx	r3
    1d86:	2800      	cmp	r0, #0
    1d88:	d106      	bne.n	1d98 <encode+0x30>
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    1d8a:	0064      	lsls	r4, r4, #1
    1d8c:	0fe4      	lsrs	r4, r4, #31
    1d8e:	07e4      	lsls	r4, r4, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    } else {
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp2;
    1d90:	69f3      	ldr	r3, [r6, #28]
    1d92:	431c      	orrs	r4, r3
    1d94:	61f4      	str	r4, [r6, #28]
    }
}
    1d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    1d98:	007f      	lsls	r7, r7, #1
    1d9a:	0fff      	lsrs	r7, r7, #31
    1d9c:	07ff      	lsls	r7, r7, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    1d9e:	69f3      	ldr	r3, [r6, #28]
    1da0:	431f      	orrs	r7, r3
    1da2:	61f7      	str	r7, [r6, #28]
    1da4:	e7f7      	b.n	1d96 <encode+0x2e>
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	00005edb 	.word	0x00005edb
    1dac:	00001d45 	.word	0x00001d45

00001db0 <decode>:


ECCRYPTO_STATUS decode(const unsigned char* Pencoded, point_t P)
{ // Decode point P
    1db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1db2:	46c6      	mov	lr, r8
    1db4:	b500      	push	{lr}
    1db6:	4c87      	ldr	r4, [pc, #540]	; (1fd4 <decode+0x224>)
    1db8:	44a5      	add	sp, r4
    1dba:	0004      	movs	r4, r0
    1dbc:	000f      	movs	r7, r1
  // SECURITY NOTE: this function does not run in constant time.
    velm_t r, t, t0, t1, t2, t3, t4;
    v2elm_t u, v, one = {0};
    1dbe:	2228      	movs	r2, #40	; 0x28
    1dc0:	2100      	movs	r1, #0
    1dc2:	a849      	add	r0, sp, #292	; 0x124
    1dc4:	4b84      	ldr	r3, [pc, #528]	; (1fd8 <decode+0x228>)
    1dc6:	4798      	blx	r3
    digit_t sign_dec;
    vpoint_extproj_t R;
    vpoint_t VP;
    unsigned int i, sign;

    one[0] = 1;
    1dc8:	2301      	movs	r3, #1
    1dca:	9349      	str	r3, [sp, #292]	; 0x124
    memmove((unsigned char*)P->y, Pencoded, 32);   // Decoding y-coordinate and sign
    1dcc:	331f      	adds	r3, #31
    1dce:	469c      	mov	ip, r3
    1dd0:	44bc      	add	ip, r7
    1dd2:	4663      	mov	r3, ip
    1dd4:	4665      	mov	r5, ip
    1dd6:	9301      	str	r3, [sp, #4]
    1dd8:	2220      	movs	r2, #32
    1dda:	0021      	movs	r1, r4
    1ddc:	0018      	movs	r0, r3
    1dde:	4b7f      	ldr	r3, [pc, #508]	; (1fdc <decode+0x22c>)
    1de0:	4798      	blx	r3
    sign = (unsigned int)(Pencoded[31] >> 7);
    1de2:	7fe3      	ldrb	r3, [r4, #31]
    1de4:	09db      	lsrs	r3, r3, #7
    1de6:	4698      	mov	r8, r3
    P->y[1][NWORDS_FIELD-1] &= mask7fff;
    1de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1dea:	005b      	lsls	r3, r3, #1
    1dec:	085b      	lsrs	r3, r3, #1
    1dee:	63fb      	str	r3, [r7, #60]	; 0x3c
    from_std_to_ext(P->y, VP->y);
    1df0:	a90d      	add	r1, sp, #52	; 0x34
    1df2:	0028      	movs	r0, r5
    1df4:	4b7a      	ldr	r3, [pc, #488]	; (1fe0 <decode+0x230>)
    1df6:	4798      	blx	r3

    v2sqr1271(VP->y, u);
    1df8:	a95d      	add	r1, sp, #372	; 0x174
    1dfa:	a80d      	add	r0, sp, #52	; 0x34
    1dfc:	4b79      	ldr	r3, [pc, #484]	; (1fe4 <decode+0x234>)
    1dfe:	4798      	blx	r3
    v2mul1271(u, (digit_t*)&PARAMETER_d, v);
    1e00:	aa53      	add	r2, sp, #332	; 0x14c
    1e02:	4979      	ldr	r1, [pc, #484]	; (1fe8 <decode+0x238>)
    1e04:	a85d      	add	r0, sp, #372	; 0x174
    1e06:	4b79      	ldr	r3, [pc, #484]	; (1fec <decode+0x23c>)
    1e08:	4798      	blx	r3
    v2sub1271(u, one, u);
    1e0a:	aa5d      	add	r2, sp, #372	; 0x174
    1e0c:	a949      	add	r1, sp, #292	; 0x124
    1e0e:	0010      	movs	r0, r2
    1e10:	4b77      	ldr	r3, [pc, #476]	; (1ff0 <decode+0x240>)
    1e12:	4798      	blx	r3
    v2add1271(v, one, v);
    1e14:	aa53      	add	r2, sp, #332	; 0x14c
    1e16:	a949      	add	r1, sp, #292	; 0x124
    1e18:	0010      	movs	r0, r2
    1e1a:	4b76      	ldr	r3, [pc, #472]	; (1ff4 <decode+0x244>)
    1e1c:	4798      	blx	r3

    vsqr1271(&v[0], t0);                              // t0 = v0^2
    1e1e:	a97b      	add	r1, sp, #492	; 0x1ec
    1e20:	a853      	add	r0, sp, #332	; 0x14c
    1e22:	4c75      	ldr	r4, [pc, #468]	; (1ff8 <decode+0x248>)
    1e24:	47a0      	blx	r4
    vsqr1271(&v[VWORDS_FIELD], t1);                   // t1 = v1^2
    1e26:	a976      	add	r1, sp, #472	; 0x1d8
    1e28:	a858      	add	r0, sp, #352	; 0x160
    1e2a:	47a0      	blx	r4
    vadd1271(t0, t1, t0);                             // t0 = t0+t1
    1e2c:	aa7b      	add	r2, sp, #492	; 0x1ec
    1e2e:	a976      	add	r1, sp, #472	; 0x1d8
    1e30:	0010      	movs	r0, r2
    1e32:	4e72      	ldr	r6, [pc, #456]	; (1ffc <decode+0x24c>)
    1e34:	47b0      	blx	r6
    vmul1271(&u[0], &v[0], t1);                       // t1 = u0*v0
    1e36:	aa76      	add	r2, sp, #472	; 0x1d8
    1e38:	a953      	add	r1, sp, #332	; 0x14c
    1e3a:	a85d      	add	r0, sp, #372	; 0x174
    1e3c:	4d70      	ldr	r5, [pc, #448]	; (2000 <STACK_SIZE>)
    1e3e:	47a8      	blx	r5
    vmul1271(&u[VWORDS_FIELD], &v[VWORDS_FIELD], t2); // t2 = u1*v1 
    1e40:	aa71      	add	r2, sp, #452	; 0x1c4
    1e42:	a958      	add	r1, sp, #352	; 0x160
    1e44:	a862      	add	r0, sp, #392	; 0x188
    1e46:	47a8      	blx	r5
    vadd1271(t1, t2, t1);                             // t1 = t1+t2 
    1e48:	aa76      	add	r2, sp, #472	; 0x1d8
    1e4a:	a971      	add	r1, sp, #452	; 0x1c4
    1e4c:	0010      	movs	r0, r2
    1e4e:	47b0      	blx	r6
    vmul1271(&u[VWORDS_FIELD], &v[0], t2);            // t2 = u1*v0
    1e50:	aa71      	add	r2, sp, #452	; 0x1c4
    1e52:	a953      	add	r1, sp, #332	; 0x14c
    1e54:	a862      	add	r0, sp, #392	; 0x188
    1e56:	47a8      	blx	r5
    vmul1271(&u[0], &v[VWORDS_FIELD], t3);            // t3 = u0*v1
    1e58:	aa6c      	add	r2, sp, #432	; 0x1b0
    1e5a:	a958      	add	r1, sp, #352	; 0x160
    1e5c:	a85d      	add	r0, sp, #372	; 0x174
    1e5e:	47a8      	blx	r5
    vsub1271(t2, t3, t2);                             // t2 = t2-t3 
    1e60:	aa71      	add	r2, sp, #452	; 0x1c4
    1e62:	a96c      	add	r1, sp, #432	; 0x1b0
    1e64:	0010      	movs	r0, r2
    1e66:	4b67      	ldr	r3, [pc, #412]	; (2004 <STACK_SIZE+0x4>)
    1e68:	4798      	blx	r3
    vsqr1271(t1, t3);                                 // t3 = t1^2    
    1e6a:	a96c      	add	r1, sp, #432	; 0x1b0
    1e6c:	a876      	add	r0, sp, #472	; 0x1d8
    1e6e:	47a0      	blx	r4
    vsqr1271(t2, t4);                                 // t4 = t2^2                   
    1e70:	a967      	add	r1, sp, #412	; 0x19c
    1e72:	a871      	add	r0, sp, #452	; 0x1c4
    1e74:	47a0      	blx	r4
    vadd1271(t3, t4, t3);                             // t3 = t3+t4
    1e76:	aa6c      	add	r2, sp, #432	; 0x1b0
    1e78:	a967      	add	r1, sp, #412	; 0x19c
    1e7a:	0010      	movs	r0, r2
    1e7c:	47b0      	blx	r6
    1e7e:	247d      	movs	r4, #125	; 0x7d
    for (i = 0; i < 125; i++) {                       // t3 = t3^(2^125)
        vsqr1271(t3, t3);
    1e80:	4d5d      	ldr	r5, [pc, #372]	; (1ff8 <decode+0x248>)
    1e82:	a96c      	add	r1, sp, #432	; 0x1b0
    1e84:	0008      	movs	r0, r1
    1e86:	47a8      	blx	r5
    1e88:	3c01      	subs	r4, #1
    for (i = 0; i < 125; i++) {                       // t3 = t3^(2^125)
    1e8a:	2c00      	cmp	r4, #0
    1e8c:	d1f9      	bne.n	1e82 <decode+0xd2>
    }

    vadd1271(t1, t3, t);                           // t = t1+t3
    1e8e:	aa80      	add	r2, sp, #512	; 0x200
    1e90:	a96c      	add	r1, sp, #432	; 0x1b0
    1e92:	a876      	add	r0, sp, #472	; 0x1d8
    1e94:	4b59      	ldr	r3, [pc, #356]	; (1ffc <decode+0x24c>)
    1e96:	4798      	blx	r3
    vmod1271(t, t);
    1e98:	a980      	add	r1, sp, #512	; 0x200
    1e9a:	0008      	movs	r0, r1
    1e9c:	4b5a      	ldr	r3, [pc, #360]	; (2008 <STACK_SIZE+0x8>)
    1e9e:	4798      	blx	r3
    if (is_zero_ct(t, VWORDS_FIELD) == true) {
    1ea0:	2105      	movs	r1, #5
    1ea2:	a880      	add	r0, sp, #512	; 0x200
    1ea4:	4b59      	ldr	r3, [pc, #356]	; (200c <STACK_SIZE+0xc>)
    1ea6:	4798      	blx	r3
    1ea8:	2800      	cmp	r0, #0
    1eaa:	d000      	beq.n	1eae <decode+0xfe>
    1eac:	e073      	b.n	1f96 <decode+0x1e6>
        vsub1271(t1, t3, t);                       // t = t1-t3
    }
    vadd1271(t, t, t);                             // t = 2*t 
    1eae:	aa80      	add	r2, sp, #512	; 0x200
    1eb0:	0011      	movs	r1, r2
    1eb2:	0010      	movs	r0, r2
    1eb4:	4b51      	ldr	r3, [pc, #324]	; (1ffc <decode+0x24c>)
    1eb6:	4798      	blx	r3
    vsqr1271(t0, t3);                              // t3 = t0^2      
    1eb8:	a96c      	add	r1, sp, #432	; 0x1b0
    1eba:	a87b      	add	r0, sp, #492	; 0x1ec
    1ebc:	4d4e      	ldr	r5, [pc, #312]	; (1ff8 <decode+0x248>)
    1ebe:	47a8      	blx	r5
    vmul1271(t0, t3, t3);                          // t3 = t3*t0   
    1ec0:	aa6c      	add	r2, sp, #432	; 0x1b0
    1ec2:	0011      	movs	r1, r2
    1ec4:	a87b      	add	r0, sp, #492	; 0x1ec
    1ec6:	4c4e      	ldr	r4, [pc, #312]	; (2000 <STACK_SIZE>)
    1ec8:	47a0      	blx	r4
    vmul1271(t, t3, t3);                           // t3 = t3*t
    1eca:	aa6c      	add	r2, sp, #432	; 0x1b0
    1ecc:	0011      	movs	r1, r2
    1ece:	a880      	add	r0, sp, #512	; 0x200
    1ed0:	47a0      	blx	r4
    vexp1251(t3, r);                               // r = t3^(2^125-1)  
    1ed2:	a985      	add	r1, sp, #532	; 0x214
    1ed4:	a86c      	add	r0, sp, #432	; 0x1b0
    1ed6:	4b4e      	ldr	r3, [pc, #312]	; (2010 <STACK_SIZE+0x10>)
    1ed8:	4798      	blx	r3
    vmul1271(t0, r, t3);                           // t3 = t0*r          
    1eda:	aa6c      	add	r2, sp, #432	; 0x1b0
    1edc:	a985      	add	r1, sp, #532	; 0x214
    1ede:	a87b      	add	r0, sp, #492	; 0x1ec
    1ee0:	47a0      	blx	r4
    vmul1271(t, t3, &VP->x[0]);                    // x0 = t*t3 
    1ee2:	aa03      	add	r2, sp, #12
    1ee4:	a96c      	add	r1, sp, #432	; 0x1b0
    1ee6:	a880      	add	r0, sp, #512	; 0x200
    1ee8:	47a0      	blx	r4
    vsqr1271(&VP->x[0], t1);
    1eea:	a976      	add	r1, sp, #472	; 0x1d8
    1eec:	a803      	add	r0, sp, #12
    1eee:	47a8      	blx	r5
    vmul1271(t0, t1, t1);                          // t1 = t0*x0^2 
    1ef0:	aa76      	add	r2, sp, #472	; 0x1d8
    1ef2:	0011      	movs	r1, r2
    1ef4:	a87b      	add	r0, sp, #492	; 0x1ec
    1ef6:	47a0      	blx	r4
    vdiv1271(&VP->x[0]);                           // x0 = x0/2
    1ef8:	a803      	add	r0, sp, #12
    1efa:	4b46      	ldr	r3, [pc, #280]	; (2014 <STACK_SIZE+0x14>)
    1efc:	4798      	blx	r3
    vmul1271(t2, t3, &VP->x[VWORDS_FIELD]);        // x1 = t3*t2  
    1efe:	aa08      	add	r2, sp, #32
    1f00:	a96c      	add	r1, sp, #432	; 0x1b0
    1f02:	a871      	add	r0, sp, #452	; 0x1c4
    1f04:	47a0      	blx	r4

    vsub1271(t, t1, t);
    1f06:	aa80      	add	r2, sp, #512	; 0x200
    1f08:	a976      	add	r1, sp, #472	; 0x1d8
    1f0a:	0010      	movs	r0, r2
    1f0c:	4b3d      	ldr	r3, [pc, #244]	; (2004 <STACK_SIZE+0x4>)
    1f0e:	4798      	blx	r3
    vmod1271(t, t);
    1f10:	a980      	add	r1, sp, #512	; 0x200
    1f12:	0008      	movs	r0, r1
    1f14:	4b3c      	ldr	r3, [pc, #240]	; (2008 <STACK_SIZE+0x8>)
    1f16:	4798      	blx	r3
    if (is_zero_ct(t, VWORDS_FIELD) == false) {        // If t != t1 then swap x0 and x1       
    1f18:	2105      	movs	r1, #5
    1f1a:	a880      	add	r0, sp, #512	; 0x200
    1f1c:	4b3b      	ldr	r3, [pc, #236]	; (200c <STACK_SIZE+0xc>)
    1f1e:	4798      	blx	r3
    1f20:	2800      	cmp	r0, #0
    1f22:	d03e      	beq.n	1fa2 <decode+0x1f2>
        memmove((unsigned char*)t0, (unsigned char*)&VP->x[0], 20);
        memmove((unsigned char*)&VP->x[0], (unsigned char*)&VP->x[VWORDS_FIELD], 20);
        memmove((unsigned char*)&VP->x[VWORDS_FIELD], (unsigned char*)t0, 20);
    }

    v2mod1271(VP->x, VP->x);
    1f24:	a903      	add	r1, sp, #12
    1f26:	0008      	movs	r0, r1
    1f28:	4b3b      	ldr	r3, [pc, #236]	; (2018 <STACK_SIZE+0x18>)
    1f2a:	4798      	blx	r3
    if (is_zero_ct(VP->x, VWORDS_FIELD) == true) {
    1f2c:	2105      	movs	r1, #5
    1f2e:	a803      	add	r0, sp, #12
    1f30:	4b36      	ldr	r3, [pc, #216]	; (200c <STACK_SIZE+0xc>)
    1f32:	4798      	blx	r3
    1f34:	2800      	cmp	r0, #0
    1f36:	d049      	beq.n	1fcc <decode+0x21c>
        sign_dec = VP->x[2*VWORDS_FIELD-1] >> 22;
    1f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f3a:	0d9b      	lsrs	r3, r3, #22
    } else {
        sign_dec = VP->x[VWORDS_FIELD-1] >> 22;
    }

    if (sign != (unsigned int)sign_dec) {           // If sign of x-coordinate decoded != input sign bit, then negate x-coordinate
    1f3c:	4543      	cmp	r3, r8
    1f3e:	d002      	beq.n	1f46 <decode+0x196>
        v2neg1271(VP->x);         
    1f40:	a803      	add	r0, sp, #12
    1f42:	4b36      	ldr	r3, [pc, #216]	; (201c <STACK_SIZE+0x1c>)
    1f44:	4798      	blx	r3
    }

    v2mod1271(VP->x, R->x);
    1f46:	a917      	add	r1, sp, #92	; 0x5c
    1f48:	a803      	add	r0, sp, #12
    1f4a:	4c33      	ldr	r4, [pc, #204]	; (2018 <STACK_SIZE+0x18>)
    1f4c:	47a0      	blx	r4
    v2mod1271(VP->y, R->y);
    1f4e:	a921      	add	r1, sp, #132	; 0x84
    1f50:	a80d      	add	r0, sp, #52	; 0x34
    1f52:	47a0      	blx	r4
    if (ecc_point_validate(R) == false) {
    1f54:	a817      	add	r0, sp, #92	; 0x5c
    1f56:	4b32      	ldr	r3, [pc, #200]	; (2020 <STACK_SIZE+0x20>)
    1f58:	4798      	blx	r3
    1f5a:	2800      	cmp	r0, #0
    1f5c:	d108      	bne.n	1f70 <decode+0x1c0>
        vneg1271(&R->x[VWORDS_FIELD]);
    1f5e:	a81c      	add	r0, sp, #112	; 0x70
    1f60:	4b30      	ldr	r3, [pc, #192]	; (2024 <STACK_SIZE+0x24>)
    1f62:	4798      	blx	r3
        if (ecc_point_validate(R) == false) {       // Final point validation
    1f64:	a817      	add	r0, sp, #92	; 0x5c
    1f66:	4b2e      	ldr	r3, [pc, #184]	; (2020 <STACK_SIZE+0x20>)
    1f68:	4798      	blx	r3
            return ECCRYPTO_ERROR;
    1f6a:	2300      	movs	r3, #0
        if (ecc_point_validate(R) == false) {       // Final point validation
    1f6c:	2800      	cmp	r0, #0
    1f6e:	d00b      	beq.n	1f88 <decode+0x1d8>
        }
    }

    v2mod1271(R->x, R->x);
    1f70:	a917      	add	r1, sp, #92	; 0x5c
    1f72:	0008      	movs	r0, r1
    1f74:	4b28      	ldr	r3, [pc, #160]	; (2018 <STACK_SIZE+0x18>)
    1f76:	4798      	blx	r3
    from_ext_to_std(R->x, P->x);
    1f78:	0039      	movs	r1, r7
    1f7a:	a817      	add	r0, sp, #92	; 0x5c
    1f7c:	4c2a      	ldr	r4, [pc, #168]	; (2028 <STACK_SIZE+0x28>)
    1f7e:	47a0      	blx	r4
    from_ext_to_std(R->y, P->y);
    1f80:	9901      	ldr	r1, [sp, #4]
    1f82:	a821      	add	r0, sp, #132	; 0x84
    1f84:	47a0      	blx	r4

    return ECCRYPTO_SUCCESS;
    1f86:	2301      	movs	r3, #1
}
    1f88:	0018      	movs	r0, r3
    1f8a:	238a      	movs	r3, #138	; 0x8a
    1f8c:	009b      	lsls	r3, r3, #2
    1f8e:	449d      	add	sp, r3
    1f90:	bc04      	pop	{r2}
    1f92:	4690      	mov	r8, r2
    1f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vsub1271(t1, t3, t);                       // t = t1-t3
    1f96:	aa80      	add	r2, sp, #512	; 0x200
    1f98:	a96c      	add	r1, sp, #432	; 0x1b0
    1f9a:	a876      	add	r0, sp, #472	; 0x1d8
    1f9c:	4b19      	ldr	r3, [pc, #100]	; (2004 <STACK_SIZE+0x4>)
    1f9e:	4798      	blx	r3
    1fa0:	e785      	b.n	1eae <decode+0xfe>
        memmove((unsigned char*)t0, (unsigned char*)&VP->x[0], 20);
    1fa2:	ab7b      	add	r3, sp, #492	; 0x1ec
    1fa4:	aa03      	add	r2, sp, #12
    1fa6:	0019      	movs	r1, r3
    1fa8:	ca31      	ldmia	r2!, {r0, r4, r5}
    1faa:	c131      	stmia	r1!, {r0, r4, r5}
    1fac:	ca11      	ldmia	r2!, {r0, r4}
    1fae:	c111      	stmia	r1!, {r0, r4}
        memmove((unsigned char*)&VP->x[0], (unsigned char*)&VP->x[VWORDS_FIELD], 20);
    1fb0:	ac03      	add	r4, sp, #12
    1fb2:	aa08      	add	r2, sp, #32
    1fb4:	0021      	movs	r1, r4
    1fb6:	0010      	movs	r0, r2
    1fb8:	c870      	ldmia	r0!, {r4, r5, r6}
    1fba:	c170      	stmia	r1!, {r4, r5, r6}
    1fbc:	c830      	ldmia	r0!, {r4, r5}
    1fbe:	c130      	stmia	r1!, {r4, r5}
        memmove((unsigned char*)&VP->x[VWORDS_FIELD], (unsigned char*)t0, 20);
    1fc0:	cb13      	ldmia	r3!, {r0, r1, r4}
    1fc2:	c213      	stmia	r2!, {r0, r1, r4}
    1fc4:	0011      	movs	r1, r2
    1fc6:	cb05      	ldmia	r3!, {r0, r2}
    1fc8:	c105      	stmia	r1!, {r0, r2}
    1fca:	e7ab      	b.n	1f24 <decode+0x174>
        sign_dec = VP->x[VWORDS_FIELD-1] >> 22;
    1fcc:	9b07      	ldr	r3, [sp, #28]
    1fce:	0d9b      	lsrs	r3, r3, #22
    1fd0:	e7b4      	b.n	1f3c <decode+0x18c>
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	fffffdd8 	.word	0xfffffdd8
    1fd8:	00005eff 	.word	0x00005eff
    1fdc:	00005edb 	.word	0x00005edb
    1fe0:	000028f9 	.word	0x000028f9
    1fe4:	000033b1 	.word	0x000033b1
    1fe8:	00007ed4 	.word	0x00007ed4
    1fec:	0000333d 	.word	0x0000333d
    1ff0:	0000317d 	.word	0x0000317d
    1ff4:	0000315d 	.word	0x0000315d
    1ff8:	000023a9 	.word	0x000023a9
    1ffc:	0000207f 	.word	0x0000207f
    2000:	00002115 	.word	0x00002115
    2004:	000020bb 	.word	0x000020bb
    2008:	000025ed 	.word	0x000025ed
    200c:	00001d45 	.word	0x00001d45
    2010:	0000267d 	.word	0x0000267d
    2014:	00002c4d 	.word	0x00002c4d
    2018:	00003321 	.word	0x00003321
    201c:	00003205 	.word	0x00003205
    2020:	00003969 	.word	0x00003969
    2024:	000020e9 	.word	0x000020e9
    2028:	00002981 	.word	0x00002981

0000202c <digit_x_digit>:
#define mask_26        (((uint32_t)1 << 26) - 1)
#define mask_23        (((uint32_t)1 << 23) - 1)


void digit_x_digit(digit_t a, digit_t b, digit_t* c)
{ // Digit multiplication, digit * digit -> 2-digit result    
    202c:	b570      	push	{r4, r5, r6, lr}
    register digit_t al, ah, bl, bh, temp;
    digit_t albl, albh, ahbl, ahbh, res1, res2, res3, carry;
    digit_t mask_low = (digit_t)(-1) >> (sizeof(digit_t)*4), mask_high = (digit_t)(-1) << (sizeof(digit_t)*4);

    al = a & mask_low;                        // Low part
    202e:	0403      	lsls	r3, r0, #16
    2030:	0c1b      	lsrs	r3, r3, #16
    ah = a >> (sizeof(digit_t) * 4);          // High part
    2032:	0c00      	lsrs	r0, r0, #16
    bl = b & mask_low;
    2034:	040c      	lsls	r4, r1, #16
    2036:	0c24      	lsrs	r4, r4, #16
    bh = b >> (sizeof(digit_t) * 4);
    2038:	0c09      	lsrs	r1, r1, #16

    albl = al*bl;
    203a:	0025      	movs	r5, r4
    203c:	435d      	muls	r5, r3
    albh = al*bh;
    203e:	434b      	muls	r3, r1
    ahbl = ah*bl;
    2040:	4344      	muls	r4, r0
    ahbh = ah*bh;
    2042:	4341      	muls	r1, r0
    c[0] = albl & mask_low;                   // C00

    res1 = albl >> (sizeof(digit_t) * 4);
    2044:	0c28      	lsrs	r0, r5, #16
    res2 = ahbl & mask_low;
    2046:	0426      	lsls	r6, r4, #16
    2048:	0c36      	lsrs	r6, r6, #16
    res3 = albh & mask_low;  
    temp = res1 + res2 + res3;
    204a:	1980      	adds	r0, r0, r6
    res3 = albh & mask_low;  
    204c:	041e      	lsls	r6, r3, #16
    204e:	0c36      	lsrs	r6, r6, #16
    temp = res1 + res2 + res3;
    2050:	1980      	adds	r0, r0, r6
    carry = temp >> (sizeof(digit_t) * 4);
    2052:	0c06      	lsrs	r6, r0, #16
    c[0] = albl & mask_low;                   // C00
    2054:	042d      	lsls	r5, r5, #16
    2056:	0c2d      	lsrs	r5, r5, #16
    c[0] ^= temp << (sizeof(digit_t) * 4);    // C01   
    2058:	0400      	lsls	r0, r0, #16
    205a:	4045      	eors	r5, r0
    205c:	6015      	str	r5, [r2, #0]

    res1 = ahbl >> (sizeof(digit_t) * 4);
    205e:	0c24      	lsrs	r4, r4, #16
    res2 = albh >> (sizeof(digit_t) * 4);
    2060:	0c1b      	lsrs	r3, r3, #16
    res3 = ahbh & mask_low;
    temp = res1 + res2 + res3 + carry;
    2062:	18e3      	adds	r3, r4, r3
    res3 = ahbh & mask_low;
    2064:	040c      	lsls	r4, r1, #16
    2066:	0c24      	lsrs	r4, r4, #16
    temp = res1 + res2 + res3 + carry;
    2068:	191b      	adds	r3, r3, r4
    206a:	199b      	adds	r3, r3, r6
    c[1] = temp & mask_low;                   // C10 
    carry = temp & mask_high; 
    206c:	0c18      	lsrs	r0, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    206e:	0c09      	lsrs	r1, r1, #16
    2070:	1809      	adds	r1, r1, r0
    2072:	0409      	lsls	r1, r1, #16
    c[1] = temp & mask_low;                   // C10 
    2074:	041b      	lsls	r3, r3, #16
    2076:	0c1b      	lsrs	r3, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    2078:	404b      	eors	r3, r1
    207a:	6053      	str	r3, [r2, #4]
}
    207c:	bd70      	pop	{r4, r5, r6, pc}

0000207e <vadd1271>:
        c[i] = a[i];
}


void vadd1271(velm_t a, velm_t b, velm_t c) 
{ // Field addition over GF(2^127-1)
    207e:	b510      	push	{r4, lr}
  // Redundant representation: 23/26/26/26/26-bit
    
    c[0] = a[0] + b[0];
    2080:	6803      	ldr	r3, [r0, #0]
    2082:	001c      	movs	r4, r3
    2084:	680b      	ldr	r3, [r1, #0]
    2086:	469c      	mov	ip, r3
    2088:	4464      	add	r4, ip
    208a:	6014      	str	r4, [r2, #0]
    c[1] = a[1] + b[1];
    208c:	6843      	ldr	r3, [r0, #4]
    208e:	001c      	movs	r4, r3
    2090:	684b      	ldr	r3, [r1, #4]
    2092:	469c      	mov	ip, r3
    2094:	4464      	add	r4, ip
    2096:	6054      	str	r4, [r2, #4]
    c[2] = a[2] + b[2];
    2098:	6883      	ldr	r3, [r0, #8]
    209a:	001c      	movs	r4, r3
    209c:	688b      	ldr	r3, [r1, #8]
    209e:	469c      	mov	ip, r3
    20a0:	4464      	add	r4, ip
    20a2:	6094      	str	r4, [r2, #8]
    c[3] = a[3] + b[3];
    20a4:	68c3      	ldr	r3, [r0, #12]
    20a6:	001c      	movs	r4, r3
    20a8:	68cb      	ldr	r3, [r1, #12]
    20aa:	469c      	mov	ip, r3
    20ac:	4464      	add	r4, ip
    20ae:	60d4      	str	r4, [r2, #12]
    c[4] = a[4] + b[4];
    20b0:	6903      	ldr	r3, [r0, #16]
    20b2:	6909      	ldr	r1, [r1, #16]
    20b4:	185b      	adds	r3, r3, r1
    20b6:	6113      	str	r3, [r2, #16]
}
    20b8:	bd10      	pop	{r4, pc}

000020ba <vsub1271>:


void vsub1271(velm_t a, velm_t b, velm_t c) 
{ // Field subtraction over GF(2^127-1)
    20ba:	b510      	push	{r4, lr}
  // Redundant representation: 23/26/26/26/26-bit
    
    c[0] = a[0] - b[0];
    20bc:	6803      	ldr	r3, [r0, #0]
    20be:	680c      	ldr	r4, [r1, #0]
    20c0:	1b1b      	subs	r3, r3, r4
    20c2:	6013      	str	r3, [r2, #0]
    c[1] = a[1] - b[1];
    20c4:	6843      	ldr	r3, [r0, #4]
    20c6:	684c      	ldr	r4, [r1, #4]
    20c8:	1b1b      	subs	r3, r3, r4
    20ca:	6053      	str	r3, [r2, #4]
    c[2] = a[2] - b[2];
    20cc:	6883      	ldr	r3, [r0, #8]
    20ce:	688c      	ldr	r4, [r1, #8]
    20d0:	1b1b      	subs	r3, r3, r4
    20d2:	6093      	str	r3, [r2, #8]
    c[3] = a[3] - b[3];
    20d4:	68c3      	ldr	r3, [r0, #12]
    20d6:	68cc      	ldr	r4, [r1, #12]
    20d8:	1b1b      	subs	r3, r3, r4
    20da:	60d3      	str	r3, [r2, #12]
    c[4] = a[4] - b[4];
    20dc:	6903      	ldr	r3, [r0, #16]
    20de:	6909      	ldr	r1, [r1, #16]
    20e0:	1a5b      	subs	r3, r3, r1
    20e2:	6113      	str	r3, [r2, #16]
}
    20e4:	bd10      	pop	{r4, pc}
	...

000020e8 <vneg1271>:

void vneg1271(velm_t a) 
{ // Field negation over GF(2^127-1)
  // Redundant representation: 23/26/26/26/26-bit
    
    a[0] = mask_26 - a[0];
    20e8:	4b08      	ldr	r3, [pc, #32]	; (210c <vneg1271+0x24>)
    20ea:	6802      	ldr	r2, [r0, #0]
    20ec:	1a9a      	subs	r2, r3, r2
    20ee:	6002      	str	r2, [r0, #0]
    a[1] = mask_26 - a[1];
    20f0:	6842      	ldr	r2, [r0, #4]
    20f2:	1a9a      	subs	r2, r3, r2
    20f4:	6042      	str	r2, [r0, #4]
    a[2] = mask_26 - a[2];
    20f6:	6882      	ldr	r2, [r0, #8]
    20f8:	1a9a      	subs	r2, r3, r2
    20fa:	6082      	str	r2, [r0, #8]
    a[3] = mask_26 - a[3];
    20fc:	68c2      	ldr	r2, [r0, #12]
    20fe:	1a9b      	subs	r3, r3, r2
    2100:	60c3      	str	r3, [r0, #12]
    a[4] = mask_23 - a[4];
    2102:	4b03      	ldr	r3, [pc, #12]	; (2110 <vneg1271+0x28>)
    2104:	6902      	ldr	r2, [r0, #16]
    2106:	1a9b      	subs	r3, r3, r2
    2108:	6103      	str	r3, [r0, #16]
}
    210a:	4770      	bx	lr
    210c:	03ffffff 	.word	0x03ffffff
    2110:	007fffff 	.word	0x007fffff

00002114 <vmul1271>:


void vmul1271(velm_t a, velm_t b, velm_t c)
{ // Field multiplication, c = a*b mod p
    2114:	b5f0      	push	{r4, r5, r6, r7, lr}
    2116:	46de      	mov	lr, fp
    2118:	4657      	mov	r7, sl
    211a:	464e      	mov	r6, r9
    211c:	4645      	mov	r5, r8
    211e:	b5e0      	push	{r5, r6, r7, lr}
    2120:	b09d      	sub	sp, #116	; 0x74
    2122:	4691      	mov	r9, r2
   int64_t t1, t2, t3, t4;

   a0 = a[0]; a1 = a[1]; a2 = a[2]; a3 = a[3]; a4 = a[4]; 
   b0 = b[0]; b1 = b[1]; b2 = b[2]; b3 = b[3]; b4 = b[4];

   t1 = (int64_t)a1 << 3;
    2124:	6844      	ldr	r4, [r0, #4]
    2126:	17e3      	asrs	r3, r4, #31
    2128:	9301      	str	r3, [sp, #4]
   t2 = (int64_t)a2 << 3;
    212a:	6882      	ldr	r2, [r0, #8]
    212c:	4690      	mov	r8, r2
    212e:	17d2      	asrs	r2, r2, #31
    2130:	9213      	str	r2, [sp, #76]	; 0x4c
    2132:	4645      	mov	r5, r8
    2134:	176d      	asrs	r5, r5, #29
    2136:	951a      	str	r5, [sp, #104]	; 0x68
    2138:	4646      	mov	r6, r8
    213a:	00f6      	lsls	r6, r6, #3
    213c:	9618      	str	r6, [sp, #96]	; 0x60
   t3 = (int64_t)a3 << 3;
    213e:	68c7      	ldr	r7, [r0, #12]
    2140:	46ba      	mov	sl, r7
    2142:	17ff      	asrs	r7, r7, #31
    2144:	9717      	str	r7, [sp, #92]	; 0x5c
    2146:	4653      	mov	r3, sl
    2148:	175d      	asrs	r5, r3, #29
    214a:	9516      	str	r5, [sp, #88]	; 0x58
    214c:	00de      	lsls	r6, r3, #3
    214e:	9614      	str	r6, [sp, #80]	; 0x50
   t4 = (int64_t)a4 << 3;
    2150:	6903      	ldr	r3, [r0, #16]
    2152:	469b      	mov	fp, r3
    2154:	17db      	asrs	r3, r3, #31
    2156:	931b      	str	r3, [sp, #108]	; 0x6c
    2158:	465a      	mov	r2, fp
    215a:	1752      	asrs	r2, r2, #29
    215c:	9212      	str	r2, [sp, #72]	; 0x48
    215e:	465f      	mov	r7, fp
    2160:	00fd      	lsls	r5, r7, #3
    2162:	950e      	str	r5, [sp, #56]	; 0x38

   c0 = (int64_t)a0*b0 + (int64_t)t1*b4 + (int64_t)t4*b1 + (int64_t)t2*b3 + (int64_t)t3*b2;
    2164:	6803      	ldr	r3, [r0, #0]
    2166:	9302      	str	r3, [sp, #8]
    2168:	17da      	asrs	r2, r3, #31
    216a:	9203      	str	r2, [sp, #12]
    216c:	680a      	ldr	r2, [r1, #0]
    216e:	9204      	str	r2, [sp, #16]
    2170:	17d0      	asrs	r0, r2, #31
    2172:	9005      	str	r0, [sp, #20]
    2174:	6908      	ldr	r0, [r1, #16]
    2176:	0006      	movs	r6, r0
    2178:	17c5      	asrs	r5, r0, #31
    217a:	9506      	str	r5, [sp, #24]
    217c:	6848      	ldr	r0, [r1, #4]
    217e:	9007      	str	r0, [sp, #28]
    2180:	17c7      	asrs	r7, r0, #31
    2182:	9708      	str	r7, [sp, #32]
    2184:	68cd      	ldr	r5, [r1, #12]
    2186:	9509      	str	r5, [sp, #36]	; 0x24
    2188:	17ef      	asrs	r7, r5, #31
    218a:	970a      	str	r7, [sp, #40]	; 0x28
    218c:	688f      	ldr	r7, [r1, #8]
    218e:	970b      	str	r7, [sp, #44]	; 0x2c
    2190:	17f9      	asrs	r1, r7, #31
    2192:	910c      	str	r1, [sp, #48]	; 0x30
   t1 = (int64_t)a1 << 3;
    2194:	0f63      	lsrs	r3, r4, #29
    2196:	9901      	ldr	r1, [sp, #4]
    2198:	00c9      	lsls	r1, r1, #3
    219a:	4319      	orrs	r1, r3
    219c:	00e0      	lsls	r0, r4, #3
   c0 = (int64_t)a0*b0 + (int64_t)t1*b4 + (int64_t)t4*b1 + (int64_t)t2*b3 + (int64_t)t3*b2;
    219e:	4d81      	ldr	r5, [pc, #516]	; (23a4 <vmul1271+0x290>)
    21a0:	960d      	str	r6, [sp, #52]	; 0x34
    21a2:	0032      	movs	r2, r6
    21a4:	9b06      	ldr	r3, [sp, #24]
    21a6:	47a8      	blx	r5
    21a8:	0006      	movs	r6, r0
    21aa:	000f      	movs	r7, r1
    21ac:	9a04      	ldr	r2, [sp, #16]
    21ae:	9b05      	ldr	r3, [sp, #20]
    21b0:	9802      	ldr	r0, [sp, #8]
    21b2:	9903      	ldr	r1, [sp, #12]
    21b4:	47a8      	blx	r5
    21b6:	1836      	adds	r6, r6, r0
    21b8:	414f      	adcs	r7, r1
    21ba:	9a07      	ldr	r2, [sp, #28]
    21bc:	9b08      	ldr	r3, [sp, #32]
    21be:	980e      	ldr	r0, [sp, #56]	; 0x38
    21c0:	9912      	ldr	r1, [sp, #72]	; 0x48
    21c2:	47a8      	blx	r5
    21c4:	1836      	adds	r6, r6, r0
    21c6:	414f      	adcs	r7, r1
    21c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    21ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21cc:	9818      	ldr	r0, [sp, #96]	; 0x60
    21ce:	991a      	ldr	r1, [sp, #104]	; 0x68
    21d0:	47a8      	blx	r5
    21d2:	1836      	adds	r6, r6, r0
    21d4:	414f      	adcs	r7, r1
    21d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    21d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    21da:	9814      	ldr	r0, [sp, #80]	; 0x50
    21dc:	9916      	ldr	r1, [sp, #88]	; 0x58
    21de:	47a8      	blx	r5
    21e0:	1836      	adds	r6, r6, r0
    21e2:	414f      	adcs	r7, r1
    21e4:	9610      	str	r6, [sp, #64]	; 0x40
    21e6:	9711      	str	r7, [sp, #68]	; 0x44
   c1 = (int64_t)a0*b1 + (int64_t)a1*b0 + (int64_t)t2*b4 + (int64_t)t4*b2 + (int64_t)t3*b3;
    21e8:	9a07      	ldr	r2, [sp, #28]
    21ea:	9b08      	ldr	r3, [sp, #32]
    21ec:	9802      	ldr	r0, [sp, #8]
    21ee:	9903      	ldr	r1, [sp, #12]
    21f0:	47a8      	blx	r5
    21f2:	0006      	movs	r6, r0
    21f4:	000f      	movs	r7, r1
    21f6:	9a04      	ldr	r2, [sp, #16]
    21f8:	9b05      	ldr	r3, [sp, #20]
    21fa:	0020      	movs	r0, r4
    21fc:	9901      	ldr	r1, [sp, #4]
    21fe:	47a8      	blx	r5
    2200:	1836      	adds	r6, r6, r0
    2202:	414f      	adcs	r7, r1
    2204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2206:	9b06      	ldr	r3, [sp, #24]
    2208:	9818      	ldr	r0, [sp, #96]	; 0x60
    220a:	991a      	ldr	r1, [sp, #104]	; 0x68
    220c:	47a8      	blx	r5
    220e:	1836      	adds	r6, r6, r0
    2210:	414f      	adcs	r7, r1
    2212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2216:	980e      	ldr	r0, [sp, #56]	; 0x38
    2218:	9912      	ldr	r1, [sp, #72]	; 0x48
    221a:	47a8      	blx	r5
    221c:	1836      	adds	r6, r6, r0
    221e:	414f      	adcs	r7, r1
    2220:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2224:	9814      	ldr	r0, [sp, #80]	; 0x50
    2226:	9916      	ldr	r1, [sp, #88]	; 0x58
    2228:	47a8      	blx	r5
    222a:	1836      	adds	r6, r6, r0
    222c:	414f      	adcs	r7, r1
    222e:	9618      	str	r6, [sp, #96]	; 0x60
    2230:	9719      	str	r7, [sp, #100]	; 0x64
   c2 = (int64_t)a0*b2 + (int64_t)a2*b0 + (int64_t)a1*b1 + (int64_t)t3*b4 + (int64_t)t4*b3;
    2232:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2236:	9802      	ldr	r0, [sp, #8]
    2238:	9903      	ldr	r1, [sp, #12]
    223a:	47a8      	blx	r5
    223c:	0006      	movs	r6, r0
    223e:	000f      	movs	r7, r1
    2240:	9a04      	ldr	r2, [sp, #16]
    2242:	9b05      	ldr	r3, [sp, #20]
    2244:	4640      	mov	r0, r8
    2246:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2248:	47a8      	blx	r5
    224a:	1836      	adds	r6, r6, r0
    224c:	414f      	adcs	r7, r1
    224e:	9a07      	ldr	r2, [sp, #28]
    2250:	9b08      	ldr	r3, [sp, #32]
    2252:	0020      	movs	r0, r4
    2254:	9901      	ldr	r1, [sp, #4]
    2256:	47a8      	blx	r5
    2258:	1836      	adds	r6, r6, r0
    225a:	414f      	adcs	r7, r1
    225c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    225e:	9b06      	ldr	r3, [sp, #24]
    2260:	9814      	ldr	r0, [sp, #80]	; 0x50
    2262:	9916      	ldr	r1, [sp, #88]	; 0x58
    2264:	47a8      	blx	r5
    2266:	1836      	adds	r6, r6, r0
    2268:	414f      	adcs	r7, r1
    226a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    226c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    226e:	980e      	ldr	r0, [sp, #56]	; 0x38
    2270:	9912      	ldr	r1, [sp, #72]	; 0x48
    2272:	47a8      	blx	r5
    2274:	0032      	movs	r2, r6
    2276:	003b      	movs	r3, r7
    2278:	1812      	adds	r2, r2, r0
    227a:	414b      	adcs	r3, r1
    227c:	9214      	str	r2, [sp, #80]	; 0x50
    227e:	9315      	str	r3, [sp, #84]	; 0x54
   c3 = (int64_t)a0*b3 + (int64_t)a3*b0 + (int64_t)a1*b2 + (int64_t)a2*b1 + (int64_t)t4*b4;
    2280:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2284:	9802      	ldr	r0, [sp, #8]
    2286:	9903      	ldr	r1, [sp, #12]
    2288:	47a8      	blx	r5
    228a:	0006      	movs	r6, r0
    228c:	000f      	movs	r7, r1
    228e:	9a04      	ldr	r2, [sp, #16]
    2290:	9b05      	ldr	r3, [sp, #20]
    2292:	4650      	mov	r0, sl
    2294:	9917      	ldr	r1, [sp, #92]	; 0x5c
    2296:	47a8      	blx	r5
    2298:	1836      	adds	r6, r6, r0
    229a:	414f      	adcs	r7, r1
    229c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    229e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    22a0:	0020      	movs	r0, r4
    22a2:	9901      	ldr	r1, [sp, #4]
    22a4:	47a8      	blx	r5
    22a6:	1836      	adds	r6, r6, r0
    22a8:	414f      	adcs	r7, r1
    22aa:	9a07      	ldr	r2, [sp, #28]
    22ac:	9b08      	ldr	r3, [sp, #32]
    22ae:	4640      	mov	r0, r8
    22b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    22b2:	47a8      	blx	r5
    22b4:	1836      	adds	r6, r6, r0
    22b6:	414f      	adcs	r7, r1
    22b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    22ba:	9b06      	ldr	r3, [sp, #24]
    22bc:	980e      	ldr	r0, [sp, #56]	; 0x38
    22be:	9912      	ldr	r1, [sp, #72]	; 0x48
    22c0:	47a8      	blx	r5
    22c2:	1836      	adds	r6, r6, r0
    22c4:	414f      	adcs	r7, r1
    22c6:	960e      	str	r6, [sp, #56]	; 0x38
    22c8:	970f      	str	r7, [sp, #60]	; 0x3c
   c4 = (int64_t)a0*b4 + (int64_t)a4*b0 + (int64_t)a1*b3 + (int64_t)a3*b1 + (int64_t)a2*b2;
    22ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    22cc:	9b06      	ldr	r3, [sp, #24]
    22ce:	9802      	ldr	r0, [sp, #8]
    22d0:	9903      	ldr	r1, [sp, #12]
    22d2:	47a8      	blx	r5
    22d4:	0006      	movs	r6, r0
    22d6:	000f      	movs	r7, r1
    22d8:	9a04      	ldr	r2, [sp, #16]
    22da:	9b05      	ldr	r3, [sp, #20]
    22dc:	4658      	mov	r0, fp
    22de:	991b      	ldr	r1, [sp, #108]	; 0x6c
    22e0:	47a8      	blx	r5
    22e2:	1836      	adds	r6, r6, r0
    22e4:	414f      	adcs	r7, r1
    22e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    22e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    22ea:	0020      	movs	r0, r4
    22ec:	9901      	ldr	r1, [sp, #4]
    22ee:	47a8      	blx	r5
    22f0:	1836      	adds	r6, r6, r0
    22f2:	414f      	adcs	r7, r1
    22f4:	9a07      	ldr	r2, [sp, #28]
    22f6:	9b08      	ldr	r3, [sp, #32]
    22f8:	4650      	mov	r0, sl
    22fa:	9917      	ldr	r1, [sp, #92]	; 0x5c
    22fc:	47a8      	blx	r5
    22fe:	1836      	adds	r6, r6, r0
    2300:	414f      	adcs	r7, r1
    2302:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2304:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2306:	4640      	mov	r0, r8
    2308:	9913      	ldr	r1, [sp, #76]	; 0x4c
    230a:	47a8      	blx	r5
    230c:	1836      	adds	r6, r6, r0
    230e:	414f      	adcs	r7, r1
#endif
   
                    r0   = c0 & mask_26; 
    c1 += c0 >> 26; r1   = c1 & mask_26;
    2310:	9c10      	ldr	r4, [sp, #64]	; 0x40
    2312:	9d11      	ldr	r5, [sp, #68]	; 0x44
    2314:	01ab      	lsls	r3, r5, #6
    2316:	0ea0      	lsrs	r0, r4, #26
    2318:	4318      	orrs	r0, r3
    231a:	16a9      	asrs	r1, r5, #26
    231c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    231e:	9c19      	ldr	r4, [sp, #100]	; 0x64
    2320:	18c0      	adds	r0, r0, r3
    2322:	4161      	adcs	r1, r4
    c2 += c1 >> 26; c[2] = c2 & mask_26; 
    2324:	018b      	lsls	r3, r1, #6
    2326:	0e84      	lsrs	r4, r0, #26
    2328:	431c      	orrs	r4, r3
    232a:	168d      	asrs	r5, r1, #26
    232c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    232e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2330:	18a4      	adds	r4, r4, r2
    2332:	415d      	adcs	r5, r3
    2334:	01a3      	lsls	r3, r4, #6
    2336:	099b      	lsrs	r3, r3, #6
    2338:	464a      	mov	r2, r9
    233a:	6093      	str	r3, [r2, #8]
    c3 += c2 >> 26; c[3] = c3 & mask_26; 
    233c:	01a9      	lsls	r1, r5, #6
    233e:	0ea2      	lsrs	r2, r4, #26
    2340:	430a      	orrs	r2, r1
    2342:	16ab      	asrs	r3, r5, #26
    2344:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    2346:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    2348:	1912      	adds	r2, r2, r4
    234a:	416b      	adcs	r3, r5
    234c:	0191      	lsls	r1, r2, #6
    234e:	0989      	lsrs	r1, r1, #6
    2350:	464d      	mov	r5, r9
    2352:	60e9      	str	r1, [r5, #12]
    c4 += c3 >> 26; c[4] = c4 & mask_23; 
    2354:	0199      	lsls	r1, r3, #6
    2356:	0e94      	lsrs	r4, r2, #26
    2358:	430c      	orrs	r4, r1
    235a:	169d      	asrs	r5, r3, #26
    235c:	19a4      	adds	r4, r4, r6
    235e:	417d      	adcs	r5, r7
    2360:	0263      	lsls	r3, r4, #9
    2362:	0a5b      	lsrs	r3, r3, #9
    2364:	464a      	mov	r2, r9
    2366:	6113      	str	r3, [r2, #16]
                    r0   = c0 & mask_26; 
    2368:	9b10      	ldr	r3, [sp, #64]	; 0x40
    236a:	019b      	lsls	r3, r3, #6
    236c:	099b      	lsrs	r3, r3, #6
//    c4 += c3 >> 26; c[4] = c4 & mask_26; 
    
    c0   = r0 + (c4 >> 23);
    236e:	001e      	movs	r6, r3
    2370:	2700      	movs	r7, #0
    2372:	0269      	lsls	r1, r5, #9
    2374:	0de2      	lsrs	r2, r4, #23
    2376:	430a      	orrs	r2, r1
    2378:	15eb      	asrs	r3, r5, #23
    237a:	1992      	adds	r2, r2, r6
    237c:	417b      	adcs	r3, r7
//    c0   = r0 + ((c4 >> 26) << 3);                  
    c[0] = (int32_t)c0 & mask_26;
    237e:	0191      	lsls	r1, r2, #6
    2380:	0989      	lsrs	r1, r1, #6
    2382:	464c      	mov	r4, r9
    2384:	6021      	str	r1, [r4, #0]
    c1 += c0 >> 26; r1   = c1 & mask_26;
    2386:	0180      	lsls	r0, r0, #6
    2388:	0980      	lsrs	r0, r0, #6
    c[1] = r1 + (int32_t)(c0 >> 26);
    238a:	019b      	lsls	r3, r3, #6
    238c:	0e92      	lsrs	r2, r2, #26
    238e:	431a      	orrs	r2, r3
    2390:	1880      	adds	r0, r0, r2
    2392:	6060      	str	r0, [r4, #4]
}
    2394:	b01d      	add	sp, #116	; 0x74
    2396:	bc3c      	pop	{r2, r3, r4, r5}
    2398:	4690      	mov	r8, r2
    239a:	4699      	mov	r9, r3
    239c:	46a2      	mov	sl, r4
    239e:	46ab      	mov	fp, r5
    23a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	00005e19 	.word	0x00005e19

000023a8 <vsqr1271>:


void vsqr1271(velm_t a, velm_t c)
{ // Field squaring, c = a*b mod p
    23a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23aa:	46de      	mov	lr, fp
    23ac:	4657      	mov	r7, sl
    23ae:	464e      	mov	r6, r9
    23b0:	4645      	mov	r5, r8
    23b2:	b5e0      	push	{r5, r6, r7, lr}
    23b4:	b091      	sub	sp, #68	; 0x44
    23b6:	4689      	mov	r9, r1
#else
   int64_t t0, t1, t2, t3, t4;

   a0 = a[0]; a1 = a[1]; a2 = a[2]; a3 = a[3]; a4 = a[4];

   t0 = (int64_t)a0 << 1;
    23b8:	6801      	ldr	r1, [r0, #0]
    23ba:	17cb      	asrs	r3, r1, #31
    23bc:	004a      	lsls	r2, r1, #1
    23be:	9205      	str	r2, [sp, #20]
   t1 = (int64_t)a1 << 1;
    23c0:	6844      	ldr	r4, [r0, #4]
    23c2:	17e2      	asrs	r2, r4, #31
    23c4:	9201      	str	r2, [sp, #4]
    23c6:	9408      	str	r4, [sp, #32]
    23c8:	0065      	lsls	r5, r4, #1
    23ca:	950d      	str	r5, [sp, #52]	; 0x34
   t2 = (int64_t)a2 << 4;
    23cc:	6886      	ldr	r6, [r0, #8]
    23ce:	46b3      	mov	fp, r6
    23d0:	17f4      	asrs	r4, r6, #31
    23d2:	9403      	str	r4, [sp, #12]
   t3 = (int64_t)a3 << 3;
    23d4:	68c6      	ldr	r6, [r0, #12]
    23d6:	46b2      	mov	sl, r6
    23d8:	17f5      	asrs	r5, r6, #31
    23da:	9502      	str	r5, [sp, #8]
   t4 = (int64_t)a4 << 4;
    23dc:	6904      	ldr	r4, [r0, #16]
    23de:	17e6      	asrs	r6, r4, #31
    23e0:	46b0      	mov	r8, r6
    23e2:	1726      	asrs	r6, r4, #28
    23e4:	960c      	str	r6, [sp, #48]	; 0x30
    23e6:	0120      	lsls	r0, r4, #4
    23e8:	900a      	str	r0, [sp, #40]	; 0x28

   c0 = (int64_t)a0*a0 + (int64_t)t4*a1 + (int64_t)t2*a3;
    23ea:	4d65      	ldr	r5, [pc, #404]	; (2580 <vsqr1271+0x1d8>)
    23ec:	000a      	movs	r2, r1
    23ee:	0008      	movs	r0, r1
    23f0:	9304      	str	r3, [sp, #16]
    23f2:	0019      	movs	r1, r3
    23f4:	47a8      	blx	r5
    23f6:	0006      	movs	r6, r0
    23f8:	000f      	movs	r7, r1
    23fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    23fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    23fe:	9808      	ldr	r0, [sp, #32]
    2400:	9901      	ldr	r1, [sp, #4]
    2402:	47a8      	blx	r5
    2404:	1836      	adds	r6, r6, r0
    2406:	414f      	adcs	r7, r1
   t2 = (int64_t)a2 << 4;
    2408:	465b      	mov	r3, fp
    240a:	0f1b      	lsrs	r3, r3, #28
    240c:	9803      	ldr	r0, [sp, #12]
    240e:	0101      	lsls	r1, r0, #4
    2410:	4319      	orrs	r1, r3
    2412:	465b      	mov	r3, fp
    2414:	0118      	lsls	r0, r3, #4
   c0 = (int64_t)a0*a0 + (int64_t)t4*a1 + (int64_t)t2*a3;
    2416:	4652      	mov	r2, sl
    2418:	9b02      	ldr	r3, [sp, #8]
    241a:	47a8      	blx	r5
    241c:	1836      	adds	r6, r6, r0
    241e:	414f      	adcs	r7, r1
    2420:	9606      	str	r6, [sp, #24]
    2422:	9707      	str	r7, [sp, #28]
   t3 = (int64_t)a3 << 3;
    2424:	4653      	mov	r3, sl
    2426:	0f5b      	lsrs	r3, r3, #29
    2428:	9f02      	ldr	r7, [sp, #8]
    242a:	00f9      	lsls	r1, r7, #3
    242c:	4319      	orrs	r1, r3
    242e:	4653      	mov	r3, sl
    2430:	00d8      	lsls	r0, r3, #3
   c1 = (int64_t)t0*a1 + (int64_t)t3*a3 + (int64_t)t4*a2;
    2432:	4652      	mov	r2, sl
    2434:	003b      	movs	r3, r7
    2436:	47a8      	blx	r5
    2438:	0006      	movs	r6, r0
    243a:	000f      	movs	r7, r1
    243c:	9a08      	ldr	r2, [sp, #32]
    243e:	9b01      	ldr	r3, [sp, #4]
    2440:	9805      	ldr	r0, [sp, #20]
    2442:	9904      	ldr	r1, [sp, #16]
    2444:	47a8      	blx	r5
    2446:	1836      	adds	r6, r6, r0
    2448:	414f      	adcs	r7, r1
    244a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    244c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    244e:	4658      	mov	r0, fp
    2450:	9903      	ldr	r1, [sp, #12]
    2452:	47a8      	blx	r5
    2454:	1836      	adds	r6, r6, r0
    2456:	414f      	adcs	r7, r1
    2458:	960e      	str	r6, [sp, #56]	; 0x38
    245a:	970f      	str	r7, [sp, #60]	; 0x3c
   c2 = (int64_t)t0*a2 + (int64_t)a1*a1 + (int64_t)t4*a3;
    245c:	465a      	mov	r2, fp
    245e:	9b03      	ldr	r3, [sp, #12]
    2460:	9805      	ldr	r0, [sp, #20]
    2462:	9904      	ldr	r1, [sp, #16]
    2464:	47a8      	blx	r5
    2466:	0006      	movs	r6, r0
    2468:	000f      	movs	r7, r1
    246a:	9808      	ldr	r0, [sp, #32]
    246c:	0002      	movs	r2, r0
    246e:	9901      	ldr	r1, [sp, #4]
    2470:	000b      	movs	r3, r1
    2472:	47a8      	blx	r5
    2474:	1836      	adds	r6, r6, r0
    2476:	414f      	adcs	r7, r1
    2478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    247a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    247c:	4650      	mov	r0, sl
    247e:	9902      	ldr	r1, [sp, #8]
    2480:	47a8      	blx	r5
    2482:	0032      	movs	r2, r6
    2484:	003b      	movs	r3, r7
    2486:	1812      	adds	r2, r2, r0
    2488:	414b      	adcs	r3, r1
    248a:	9208      	str	r2, [sp, #32]
    248c:	9309      	str	r3, [sp, #36]	; 0x24
   c3 = (int64_t)t0*a3 + (int64_t)t1*a2 + ((int64_t)a4 << 3)*a4;
    248e:	4652      	mov	r2, sl
    2490:	9b02      	ldr	r3, [sp, #8]
    2492:	9805      	ldr	r0, [sp, #20]
    2494:	9904      	ldr	r1, [sp, #16]
    2496:	47a8      	blx	r5
    2498:	0006      	movs	r6, r0
    249a:	000f      	movs	r7, r1
    249c:	465a      	mov	r2, fp
    249e:	9b03      	ldr	r3, [sp, #12]
    24a0:	980d      	ldr	r0, [sp, #52]	; 0x34
    24a2:	9901      	ldr	r1, [sp, #4]
    24a4:	47a8      	blx	r5
    24a6:	1836      	adds	r6, r6, r0
    24a8:	414f      	adcs	r7, r1
    24aa:	0f63      	lsrs	r3, r4, #29
    24ac:	4640      	mov	r0, r8
    24ae:	00c1      	lsls	r1, r0, #3
    24b0:	4319      	orrs	r1, r3
    24b2:	00e0      	lsls	r0, r4, #3
    24b4:	0022      	movs	r2, r4
    24b6:	4643      	mov	r3, r8
    24b8:	47a8      	blx	r5
    24ba:	1836      	adds	r6, r6, r0
    24bc:	414f      	adcs	r7, r1
    24be:	960a      	str	r6, [sp, #40]	; 0x28
    24c0:	970b      	str	r7, [sp, #44]	; 0x2c
   c4 = (int64_t)t0*a4 + (int64_t)t1*a3 + (int64_t)a2*a2;
    24c2:	0022      	movs	r2, r4
    24c4:	4643      	mov	r3, r8
    24c6:	9805      	ldr	r0, [sp, #20]
    24c8:	9904      	ldr	r1, [sp, #16]
    24ca:	47a8      	blx	r5
    24cc:	0006      	movs	r6, r0
    24ce:	000f      	movs	r7, r1
    24d0:	4652      	mov	r2, sl
    24d2:	9b02      	ldr	r3, [sp, #8]
    24d4:	980d      	ldr	r0, [sp, #52]	; 0x34
    24d6:	9901      	ldr	r1, [sp, #4]
    24d8:	47a8      	blx	r5
    24da:	1836      	adds	r6, r6, r0
    24dc:	414f      	adcs	r7, r1
    24de:	465a      	mov	r2, fp
    24e0:	9903      	ldr	r1, [sp, #12]
    24e2:	000b      	movs	r3, r1
    24e4:	4658      	mov	r0, fp
    24e6:	47a8      	blx	r5
    24e8:	1836      	adds	r6, r6, r0
    24ea:	414f      	adcs	r7, r1
#endif
   
                    r0   = c0 & mask_26; 
    c1 += c0 >> 26; r1   = c1 & mask_26;
    24ec:	9c06      	ldr	r4, [sp, #24]
    24ee:	9d07      	ldr	r5, [sp, #28]
    24f0:	01ab      	lsls	r3, r5, #6
    24f2:	0ea0      	lsrs	r0, r4, #26
    24f4:	4318      	orrs	r0, r3
    24f6:	16a9      	asrs	r1, r5, #26
    24f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    24fa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    24fc:	18c0      	adds	r0, r0, r3
    24fe:	4161      	adcs	r1, r4
    c2 += c1 >> 26; c[2] = c2 & mask_26; 
    2500:	018b      	lsls	r3, r1, #6
    2502:	0e84      	lsrs	r4, r0, #26
    2504:	431c      	orrs	r4, r3
    2506:	168d      	asrs	r5, r1, #26
    2508:	9a08      	ldr	r2, [sp, #32]
    250a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    250c:	18a4      	adds	r4, r4, r2
    250e:	415d      	adcs	r5, r3
    2510:	01a3      	lsls	r3, r4, #6
    2512:	099b      	lsrs	r3, r3, #6
    2514:	464a      	mov	r2, r9
    2516:	6093      	str	r3, [r2, #8]
    c3 += c2 >> 26; c[3] = c3 & mask_26; 
    2518:	01a9      	lsls	r1, r5, #6
    251a:	0ea2      	lsrs	r2, r4, #26
    251c:	430a      	orrs	r2, r1
    251e:	16ab      	asrs	r3, r5, #26
    2520:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2522:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2524:	1912      	adds	r2, r2, r4
    2526:	416b      	adcs	r3, r5
    2528:	0191      	lsls	r1, r2, #6
    252a:	0989      	lsrs	r1, r1, #6
    252c:	464d      	mov	r5, r9
    252e:	60e9      	str	r1, [r5, #12]
    c4 += c3 >> 26; c[4] = c4 & mask_23; 
    2530:	0199      	lsls	r1, r3, #6
    2532:	0e94      	lsrs	r4, r2, #26
    2534:	430c      	orrs	r4, r1
    2536:	169d      	asrs	r5, r3, #26
    2538:	19a4      	adds	r4, r4, r6
    253a:	417d      	adcs	r5, r7
    253c:	0263      	lsls	r3, r4, #9
    253e:	0a5b      	lsrs	r3, r3, #9
    2540:	464a      	mov	r2, r9
    2542:	6113      	str	r3, [r2, #16]
                    r0   = c0 & mask_26; 
    2544:	9b06      	ldr	r3, [sp, #24]
    2546:	019b      	lsls	r3, r3, #6
    2548:	099b      	lsrs	r3, r3, #6
//    c4 += c3 >> 26; c[4] = c4 & mask_26; 
    
    c0   = r0 + (c4 >> 23);
    254a:	001e      	movs	r6, r3
    254c:	2700      	movs	r7, #0
    254e:	0269      	lsls	r1, r5, #9
    2550:	0de2      	lsrs	r2, r4, #23
    2552:	430a      	orrs	r2, r1
    2554:	15eb      	asrs	r3, r5, #23
    2556:	1992      	adds	r2, r2, r6
    2558:	417b      	adcs	r3, r7
//    c0   = r0 + ((c4 >> 26) << 3);                  
    c[0] = (int32_t)c0 & mask_26;
    255a:	0191      	lsls	r1, r2, #6
    255c:	0989      	lsrs	r1, r1, #6
    255e:	464c      	mov	r4, r9
    2560:	6021      	str	r1, [r4, #0]
    c1 += c0 >> 26; r1   = c1 & mask_26;
    2562:	0180      	lsls	r0, r0, #6
    2564:	0980      	lsrs	r0, r0, #6
    c[1] = r1 + (int32_t)(c0 >> 26);
    2566:	019b      	lsls	r3, r3, #6
    2568:	0e92      	lsrs	r2, r2, #26
    256a:	431a      	orrs	r2, r3
    256c:	1880      	adds	r0, r0, r2
    256e:	6060      	str	r0, [r4, #4]
}
    2570:	b011      	add	sp, #68	; 0x44
    2572:	bc3c      	pop	{r2, r3, r4, r5}
    2574:	4690      	mov	r8, r2
    2576:	4699      	mov	r9, r3
    2578:	46a2      	mov	sl, r4
    257a:	46ab      	mov	fp, r5
    257c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	00005e19 	.word	0x00005e19

00002584 <vmod1271_incomplete>:


void vmod1271_incomplete(velm_t a, velm_t c)
{ // Reduce field element modulo 2^127-1
    2584:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Redundant representation: 23/26/26/26/26-bit
  // Output is in the range [0, 2^127-1]
    int32_t t0, t1, t2, t3, t4;
    uint32_t rem;

    t0 = a[0]; t1 = a[1]; t2 = a[2]; t3 = a[3]; t4 = a[4];   
    2586:	6805      	ldr	r5, [r0, #0]
    2588:	6847      	ldr	r7, [r0, #4]
    258a:	6882      	ldr	r2, [r0, #8]
    258c:	68c6      	ldr	r6, [r0, #12]
    258e:	6903      	ldr	r3, [r0, #16]

    // Carry propagation
    t1 += (t0 >> 26); t0 &= mask_26; 
    2590:	16ac      	asrs	r4, r5, #26
    2592:	19e4      	adds	r4, r4, r7
    t2 += (t1 >> 26); t1 &= mask_26; 
    2594:	16a0      	asrs	r0, r4, #26
    2596:	1880      	adds	r0, r0, r2
    2598:	01a4      	lsls	r4, r4, #6
    259a:	09a4      	lsrs	r4, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    259c:	1682      	asrs	r2, r0, #26
    259e:	1992      	adds	r2, r2, r6
    25a0:	0180      	lsls	r0, r0, #6
    25a2:	0980      	lsrs	r0, r0, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    25a4:	1696      	asrs	r6, r2, #26
    25a6:	18f6      	adds	r6, r6, r3
    25a8:	0192      	lsls	r2, r2, #6
    25aa:	0992      	lsrs	r2, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    25ac:	0277      	lsls	r7, r6, #9
    25ae:	0a7f      	lsrs	r7, r7, #9
    25b0:	15f6      	asrs	r6, r6, #23
    t1 += (t0 >> 26); t0 &= mask_26; 
    25b2:	01ad      	lsls	r5, r5, #6
    25b4:	09ad      	lsrs	r5, r5, #6
    
    // Correction
    t0 += rem; 
    25b6:	1973      	adds	r3, r6, r5
    t1 += (t0 >> 26); t0 &= mask_26; 
    25b8:	169d      	asrs	r5, r3, #26
    25ba:	192c      	adds	r4, r5, r4
    t2 += (t1 >> 26); t1 &= mask_26; 
    25bc:	16a5      	asrs	r5, r4, #26
    25be:	1828      	adds	r0, r5, r0
    t3 += (t2 >> 26); t2 &= mask_26; 
    25c0:	1685      	asrs	r5, r0, #26
    25c2:	18aa      	adds	r2, r5, r2
    t4 += (t3 >> 26); t3 &= mask_26;
    25c4:	1696      	asrs	r6, r2, #26
    25c6:	19f6      	adds	r6, r6, r7
    rem = (t4 >> 23); t4 &= mask_23;
    25c8:	15f7      	asrs	r7, r6, #23
    t1 += (t0 >> 26); t0 &= mask_26; 
    25ca:	019d      	lsls	r5, r3, #6
    25cc:	09ad      	lsrs	r5, r5, #6
    t0 += rem; 
    25ce:	197d      	adds	r5, r7, r5

    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    25d0:	600d      	str	r5, [r1, #0]
    t2 += (t1 >> 26); t1 &= mask_26; 
    25d2:	01a4      	lsls	r4, r4, #6
    25d4:	09a4      	lsrs	r4, r4, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    25d6:	604c      	str	r4, [r1, #4]
    t3 += (t2 >> 26); t2 &= mask_26; 
    25d8:	0180      	lsls	r0, r0, #6
    25da:	0980      	lsrs	r0, r0, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    25dc:	6088      	str	r0, [r1, #8]
    t4 += (t3 >> 26); t3 &= mask_26;
    25de:	0192      	lsls	r2, r2, #6
    25e0:	0992      	lsrs	r2, r2, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    25e2:	60ca      	str	r2, [r1, #12]
    rem = (t4 >> 23); t4 &= mask_23;
    25e4:	0273      	lsls	r3, r6, #9
    25e6:	0a5b      	lsrs	r3, r3, #9
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    25e8:	610b      	str	r3, [r1, #16]
}
    25ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000025ec <vmod1271>:


void vmod1271(velm_t a, velm_t c)
{ // Reduce field element modulo 2^127-1
    25ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Output is in the range [0, 2^127-2]
  // Redundant representation: 23/26/26/26/26-bit
    int32_t t0, t1, t2, t3, t4;
    uint32_t mask, rem;

    t0 = a[0]; t1 = a[1]; t2 = a[2]; t3 = a[3]; t4 = a[4];   
    25ee:	6803      	ldr	r3, [r0, #0]
    25f0:	6847      	ldr	r7, [r0, #4]
    25f2:	6882      	ldr	r2, [r0, #8]
    25f4:	68c6      	ldr	r6, [r0, #12]
    25f6:	6905      	ldr	r5, [r0, #16]

    // First carry propagation
    t1 += (t0 >> 26); t0 &= mask_26; 
    25f8:	169c      	asrs	r4, r3, #26
    25fa:	19e4      	adds	r4, r4, r7
    t2 += (t1 >> 26); t1 &= mask_26; 
    25fc:	16a7      	asrs	r7, r4, #26
    25fe:	18bf      	adds	r7, r7, r2
    2600:	01a4      	lsls	r4, r4, #6
    2602:	09a4      	lsrs	r4, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    2604:	16ba      	asrs	r2, r7, #26
    2606:	1992      	adds	r2, r2, r6
    2608:	01bf      	lsls	r7, r7, #6
    260a:	09bf      	lsrs	r7, r7, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    260c:	1690      	asrs	r0, r2, #26
    260e:	1940      	adds	r0, r0, r5
    2610:	0192      	lsls	r2, r2, #6
    2612:	0992      	lsrs	r2, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    2614:	0246      	lsls	r6, r0, #9
    2616:	0a76      	lsrs	r6, r6, #9
    t1 += (t0 >> 26); t0 &= mask_26; 
    2618:	019b      	lsls	r3, r3, #6
    261a:	099b      	lsrs	r3, r3, #6
    
    // First correction adding rem+1
    t0 += rem + 1; 
    261c:	3301      	adds	r3, #1
    rem = (t4 >> 23); t4 &= mask_23;
    261e:	15c0      	asrs	r0, r0, #23
    t0 += rem + 1; 
    2620:	181b      	adds	r3, r3, r0
    t1 += (t0 >> 26); t0 &= mask_26; 
    2622:	1698      	asrs	r0, r3, #26
    2624:	1904      	adds	r4, r0, r4
    t2 += (t1 >> 26); t1 &= mask_26; 
    2626:	16a0      	asrs	r0, r4, #26
    2628:	19c7      	adds	r7, r0, r7
    262a:	01a4      	lsls	r4, r4, #6
    262c:	09a0      	lsrs	r0, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    262e:	16bc      	asrs	r4, r7, #26
    2630:	18a2      	adds	r2, r4, r2
    2632:	01bf      	lsls	r7, r7, #6
    2634:	09bf      	lsrs	r7, r7, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    2636:	1695      	asrs	r5, r2, #26
    2638:	19ad      	adds	r5, r5, r6
    263a:	0192      	lsls	r2, r2, #6
    263c:	0996      	lsrs	r6, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    263e:	026c      	lsls	r4, r5, #9
    2640:	0a64      	lsrs	r4, r4, #9
    t1 += (t0 >> 26); t0 &= mask_26; 
    2642:	019b      	lsls	r3, r3, #6
    2644:	099b      	lsrs	r3, r3, #6
    rem = (t4 >> 23); t4 &= mask_23;
    2646:	15ed      	asrs	r5, r5, #23

    // If final carry = 0 then subtract 1
    mask = rem - 1;
    2648:	3d01      	subs	r5, #1
    t0 -= (mask & 1);
    264a:	2201      	movs	r2, #1
    264c:	4015      	ands	r5, r2
    264e:	1b5b      	subs	r3, r3, r5
    t1 += (t0 >> 26); t0 &= mask_26; 
    2650:	169d      	asrs	r5, r3, #26
    2652:	182d      	adds	r5, r5, r0
    t2 += (t1 >> 26); t1 &= mask_26; 
    2654:	16a8      	asrs	r0, r5, #26
    2656:	19c0      	adds	r0, r0, r7
    t3 += (t2 >> 26); t2 &= mask_26; 
    2658:	1682      	asrs	r2, r0, #26
    265a:	1992      	adds	r2, r2, r6
    t1 += (t0 >> 26); t0 &= mask_26; 
    265c:	019b      	lsls	r3, r3, #6
    265e:	099b      	lsrs	r3, r3, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    2660:	600b      	str	r3, [r1, #0]
    t2 += (t1 >> 26); t1 &= mask_26; 
    2662:	01ad      	lsls	r5, r5, #6
    2664:	09ad      	lsrs	r5, r5, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    2666:	604d      	str	r5, [r1, #4]
    t3 += (t2 >> 26); t2 &= mask_26; 
    2668:	0180      	lsls	r0, r0, #6
    266a:	0980      	lsrs	r0, r0, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    266c:	6088      	str	r0, [r1, #8]
    t4 += (t3 >> 26); t3 &= mask_26;
    266e:	0193      	lsls	r3, r2, #6
    2670:	099b      	lsrs	r3, r3, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    2672:	60cb      	str	r3, [r1, #12]
    t4 += (t3 >> 26); t3 &= mask_26;
    2674:	1692      	asrs	r2, r2, #26
    2676:	1914      	adds	r4, r2, r4
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    2678:	610c      	str	r4, [r1, #16]
}
    267a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000267c <vexp1251>:


__inline void vexp1251(felm_t a, felm_t af)
{ // Exponentiation over GF(p), af = a^(125-1)
    267c:	b5f0      	push	{r4, r5, r6, r7, lr}
    267e:	b09b      	sub	sp, #108	; 0x6c
    2680:	0005      	movs	r5, r0
    2682:	000e      	movs	r6, r1
	int i;
	velm_t t1, t2, t3, t4, t5;

	vsqr1271(a, t2);
    2684:	a910      	add	r1, sp, #64	; 0x40
    2686:	4c48      	ldr	r4, [pc, #288]	; (27a8 <vexp1251+0x12c>)
    2688:	47a0      	blx	r4
	vmul1271(a, t2, t2);
    268a:	aa10      	add	r2, sp, #64	; 0x40
    268c:	0011      	movs	r1, r2
    268e:	0028      	movs	r0, r5
    2690:	4f46      	ldr	r7, [pc, #280]	; (27ac <vexp1251+0x130>)
    2692:	47b8      	blx	r7
	vsqr1271(t2, t3);
    2694:	a90b      	add	r1, sp, #44	; 0x2c
    2696:	a810      	add	r0, sp, #64	; 0x40
    2698:	47a0      	blx	r4
	vsqr1271(t3, t3);
    269a:	a90b      	add	r1, sp, #44	; 0x2c
    269c:	0008      	movs	r0, r1
    269e:	47a0      	blx	r4
	vmul1271(t2, t3, t3);
    26a0:	aa0b      	add	r2, sp, #44	; 0x2c
    26a2:	0011      	movs	r1, r2
    26a4:	a810      	add	r0, sp, #64	; 0x40
    26a6:	47b8      	blx	r7
	vsqr1271(t3, t4);
    26a8:	a906      	add	r1, sp, #24
    26aa:	a80b      	add	r0, sp, #44	; 0x2c
    26ac:	47a0      	blx	r4
	vsqr1271(t4, t4);
    26ae:	a906      	add	r1, sp, #24
    26b0:	0008      	movs	r0, r1
    26b2:	47a0      	blx	r4
	vsqr1271(t4, t4);
    26b4:	a906      	add	r1, sp, #24
    26b6:	0008      	movs	r0, r1
    26b8:	47a0      	blx	r4
	vsqr1271(t4, t4);
    26ba:	a906      	add	r1, sp, #24
    26bc:	0008      	movs	r0, r1
    26be:	47a0      	blx	r4
	vmul1271(t3, t4, t4);
    26c0:	aa06      	add	r2, sp, #24
    26c2:	0011      	movs	r1, r2
    26c4:	a80b      	add	r0, sp, #44	; 0x2c
    26c6:	47b8      	blx	r7
	vsqr1271(t4, t5);
    26c8:	a901      	add	r1, sp, #4
    26ca:	a806      	add	r0, sp, #24
    26cc:	47a0      	blx	r4
    26ce:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) vsqr1271(t5, t5);
    26d0:	4f35      	ldr	r7, [pc, #212]	; (27a8 <vexp1251+0x12c>)
    26d2:	a901      	add	r1, sp, #4
    26d4:	0008      	movs	r0, r1
    26d6:	47b8      	blx	r7
    26d8:	3c01      	subs	r4, #1
    26da:	2c00      	cmp	r4, #0
    26dc:	d1f9      	bne.n	26d2 <vexp1251+0x56>
	vmul1271(t4, t5, t5);
    26de:	aa01      	add	r2, sp, #4
    26e0:	0011      	movs	r1, r2
    26e2:	a806      	add	r0, sp, #24
    26e4:	4b31      	ldr	r3, [pc, #196]	; (27ac <vexp1251+0x130>)
    26e6:	4798      	blx	r3
	vsqr1271(t5, t2);
    26e8:	a910      	add	r1, sp, #64	; 0x40
    26ea:	a801      	add	r0, sp, #4
    26ec:	4b2e      	ldr	r3, [pc, #184]	; (27a8 <vexp1251+0x12c>)
    26ee:	4798      	blx	r3
    26f0:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) vsqr1271(t2, t2);
    26f2:	4f2d      	ldr	r7, [pc, #180]	; (27a8 <vexp1251+0x12c>)
    26f4:	a910      	add	r1, sp, #64	; 0x40
    26f6:	0008      	movs	r0, r1
    26f8:	47b8      	blx	r7
    26fa:	3c01      	subs	r4, #1
    26fc:	2c00      	cmp	r4, #0
    26fe:	d1f9      	bne.n	26f4 <vexp1251+0x78>
	vmul1271(t5, t2, t2);
    2700:	aa10      	add	r2, sp, #64	; 0x40
    2702:	0011      	movs	r1, r2
    2704:	a801      	add	r0, sp, #4
    2706:	4b29      	ldr	r3, [pc, #164]	; (27ac <vexp1251+0x130>)
    2708:	4798      	blx	r3
	vsqr1271(t2, t1);
    270a:	a915      	add	r1, sp, #84	; 0x54
    270c:	a810      	add	r0, sp, #64	; 0x40
    270e:	4b26      	ldr	r3, [pc, #152]	; (27a8 <vexp1251+0x12c>)
    2710:	4798      	blx	r3
    2712:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) vsqr1271(t1, t1);
    2714:	4f24      	ldr	r7, [pc, #144]	; (27a8 <vexp1251+0x12c>)
    2716:	a915      	add	r1, sp, #84	; 0x54
    2718:	0008      	movs	r0, r1
    271a:	47b8      	blx	r7
    271c:	3c01      	subs	r4, #1
    271e:	2c00      	cmp	r4, #0
    2720:	d1f9      	bne.n	2716 <vexp1251+0x9a>
	vmul1271(t2, t1, t1);
    2722:	aa15      	add	r2, sp, #84	; 0x54
    2724:	0011      	movs	r1, r2
    2726:	a810      	add	r0, sp, #64	; 0x40
    2728:	4b20      	ldr	r3, [pc, #128]	; (27ac <vexp1251+0x130>)
    272a:	4798      	blx	r3
    272c:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) vsqr1271(t1, t1);
    272e:	4f1e      	ldr	r7, [pc, #120]	; (27a8 <vexp1251+0x12c>)
    2730:	a915      	add	r1, sp, #84	; 0x54
    2732:	0008      	movs	r0, r1
    2734:	47b8      	blx	r7
    2736:	3c01      	subs	r4, #1
    2738:	2c00      	cmp	r4, #0
    273a:	d1f9      	bne.n	2730 <vexp1251+0xb4>
	vmul1271(t1, t2, t1);
    273c:	aa15      	add	r2, sp, #84	; 0x54
    273e:	a910      	add	r1, sp, #64	; 0x40
    2740:	0010      	movs	r0, r2
    2742:	4b1a      	ldr	r3, [pc, #104]	; (27ac <vexp1251+0x130>)
    2744:	4798      	blx	r3
    2746:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) vsqr1271(t1, t1);
    2748:	4f17      	ldr	r7, [pc, #92]	; (27a8 <vexp1251+0x12c>)
    274a:	a915      	add	r1, sp, #84	; 0x54
    274c:	0008      	movs	r0, r1
    274e:	47b8      	blx	r7
    2750:	3c01      	subs	r4, #1
    2752:	2c00      	cmp	r4, #0
    2754:	d1f9      	bne.n	274a <vexp1251+0xce>
	vmul1271(t5, t1, t1);
    2756:	aa15      	add	r2, sp, #84	; 0x54
    2758:	0011      	movs	r1, r2
    275a:	a801      	add	r0, sp, #4
    275c:	4b13      	ldr	r3, [pc, #76]	; (27ac <vexp1251+0x130>)
    275e:	4798      	blx	r3
    2760:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) vsqr1271(t1, t1);
    2762:	4f11      	ldr	r7, [pc, #68]	; (27a8 <vexp1251+0x12c>)
    2764:	a915      	add	r1, sp, #84	; 0x54
    2766:	0008      	movs	r0, r1
    2768:	47b8      	blx	r7
    276a:	3c01      	subs	r4, #1
    276c:	2c00      	cmp	r4, #0
    276e:	d1f9      	bne.n	2764 <vexp1251+0xe8>
	vmul1271(t4, t1, t1);
    2770:	aa15      	add	r2, sp, #84	; 0x54
    2772:	0011      	movs	r1, r2
    2774:	a806      	add	r0, sp, #24
    2776:	4b0d      	ldr	r3, [pc, #52]	; (27ac <vexp1251+0x130>)
    2778:	4798      	blx	r3
    277a:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) vsqr1271(t1, t1);
    277c:	4f0a      	ldr	r7, [pc, #40]	; (27a8 <vexp1251+0x12c>)
    277e:	a915      	add	r1, sp, #84	; 0x54
    2780:	0008      	movs	r0, r1
    2782:	47b8      	blx	r7
    2784:	3c01      	subs	r4, #1
    2786:	2c00      	cmp	r4, #0
    2788:	d1f9      	bne.n	277e <vexp1251+0x102>
	vmul1271(t3, t1, t1);
    278a:	aa15      	add	r2, sp, #84	; 0x54
    278c:	0011      	movs	r1, r2
    278e:	a80b      	add	r0, sp, #44	; 0x2c
    2790:	4c06      	ldr	r4, [pc, #24]	; (27ac <vexp1251+0x130>)
    2792:	47a0      	blx	r4
	vsqr1271(t1, t1);
    2794:	a915      	add	r1, sp, #84	; 0x54
    2796:	0008      	movs	r0, r1
    2798:	4b03      	ldr	r3, [pc, #12]	; (27a8 <vexp1251+0x12c>)
    279a:	4798      	blx	r3
	vmul1271(a, t1, af);
    279c:	0032      	movs	r2, r6
    279e:	a915      	add	r1, sp, #84	; 0x54
    27a0:	0028      	movs	r0, r5
    27a2:	47a0      	blx	r4
}
    27a4:	b01b      	add	sp, #108	; 0x6c
    27a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27a8:	000023a9 	.word	0x000023a9
    27ac:	00002115 	.word	0x00002115

000027b0 <vinv1271>:


void vinv1271(felm_t a)
{ // Field inversion, af = a^-1 = a^(p-2) mod p
    27b0:	b570      	push	{r4, r5, r6, lr}
    27b2:	b09e      	sub	sp, #120	; 0x78
    27b4:	0005      	movs	r5, r0
	vsqr1271(a, t2);
    27b6:	a905      	add	r1, sp, #20
    27b8:	4c4d      	ldr	r4, [pc, #308]	; (28f0 <vinv1271+0x140>)
    27ba:	47a0      	blx	r4
	vmul1271(a, t2, t2);
    27bc:	aa05      	add	r2, sp, #20
    27be:	0011      	movs	r1, r2
    27c0:	0028      	movs	r0, r5
    27c2:	4e4c      	ldr	r6, [pc, #304]	; (28f4 <vinv1271+0x144>)
    27c4:	47b0      	blx	r6
	vsqr1271(t2, t3);
    27c6:	a90a      	add	r1, sp, #40	; 0x28
    27c8:	a805      	add	r0, sp, #20
    27ca:	47a0      	blx	r4
	vsqr1271(t3, t3);
    27cc:	a90a      	add	r1, sp, #40	; 0x28
    27ce:	0008      	movs	r0, r1
    27d0:	47a0      	blx	r4
	vmul1271(t2, t3, t3);
    27d2:	aa0a      	add	r2, sp, #40	; 0x28
    27d4:	0011      	movs	r1, r2
    27d6:	a805      	add	r0, sp, #20
    27d8:	47b0      	blx	r6
	vsqr1271(t3, t4);
    27da:	a90f      	add	r1, sp, #60	; 0x3c
    27dc:	a80a      	add	r0, sp, #40	; 0x28
    27de:	47a0      	blx	r4
	vsqr1271(t4, t4);
    27e0:	a90f      	add	r1, sp, #60	; 0x3c
    27e2:	0008      	movs	r0, r1
    27e4:	47a0      	blx	r4
	vsqr1271(t4, t4);
    27e6:	a90f      	add	r1, sp, #60	; 0x3c
    27e8:	0008      	movs	r0, r1
    27ea:	47a0      	blx	r4
	vsqr1271(t4, t4);
    27ec:	a90f      	add	r1, sp, #60	; 0x3c
    27ee:	0008      	movs	r0, r1
    27f0:	47a0      	blx	r4
	vmul1271(t3, t4, t4);
    27f2:	aa0f      	add	r2, sp, #60	; 0x3c
    27f4:	0011      	movs	r1, r2
    27f6:	a80a      	add	r0, sp, #40	; 0x28
    27f8:	47b0      	blx	r6
	vsqr1271(t4, t5);
    27fa:	a914      	add	r1, sp, #80	; 0x50
    27fc:	a80f      	add	r0, sp, #60	; 0x3c
    27fe:	47a0      	blx	r4
    2800:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) vsqr1271(t5, t5);
    2802:	4e3b      	ldr	r6, [pc, #236]	; (28f0 <vinv1271+0x140>)
    2804:	a914      	add	r1, sp, #80	; 0x50
    2806:	0008      	movs	r0, r1
    2808:	47b0      	blx	r6
    280a:	3c01      	subs	r4, #1
    280c:	2c00      	cmp	r4, #0
    280e:	d1f9      	bne.n	2804 <vinv1271+0x54>
	vmul1271(t4, t5, t5);
    2810:	aa14      	add	r2, sp, #80	; 0x50
    2812:	0011      	movs	r1, r2
    2814:	a80f      	add	r0, sp, #60	; 0x3c
    2816:	4b37      	ldr	r3, [pc, #220]	; (28f4 <vinv1271+0x144>)
    2818:	4798      	blx	r3
	vsqr1271(t5, t2);
    281a:	a905      	add	r1, sp, #20
    281c:	a814      	add	r0, sp, #80	; 0x50
    281e:	4b34      	ldr	r3, [pc, #208]	; (28f0 <vinv1271+0x140>)
    2820:	4798      	blx	r3
    2822:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) vsqr1271(t2, t2);
    2824:	4e32      	ldr	r6, [pc, #200]	; (28f0 <vinv1271+0x140>)
    2826:	a905      	add	r1, sp, #20
    2828:	0008      	movs	r0, r1
    282a:	47b0      	blx	r6
    282c:	3c01      	subs	r4, #1
    282e:	2c00      	cmp	r4, #0
    2830:	d1f9      	bne.n	2826 <vinv1271+0x76>
	vmul1271(t5, t2, t2);
    2832:	aa05      	add	r2, sp, #20
    2834:	0011      	movs	r1, r2
    2836:	a814      	add	r0, sp, #80	; 0x50
    2838:	4b2e      	ldr	r3, [pc, #184]	; (28f4 <vinv1271+0x144>)
    283a:	4798      	blx	r3
	vsqr1271(t2, t1);
    283c:	4669      	mov	r1, sp
    283e:	a805      	add	r0, sp, #20
    2840:	4b2b      	ldr	r3, [pc, #172]	; (28f0 <vinv1271+0x140>)
    2842:	4798      	blx	r3
    2844:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) vsqr1271(t1, t1);
    2846:	4e2a      	ldr	r6, [pc, #168]	; (28f0 <vinv1271+0x140>)
    2848:	4669      	mov	r1, sp
    284a:	4668      	mov	r0, sp
    284c:	47b0      	blx	r6
    284e:	3c01      	subs	r4, #1
    2850:	2c00      	cmp	r4, #0
    2852:	d1f9      	bne.n	2848 <vinv1271+0x98>
	vmul1271(t2, t1, t1);
    2854:	466a      	mov	r2, sp
    2856:	4669      	mov	r1, sp
    2858:	a805      	add	r0, sp, #20
    285a:	4b26      	ldr	r3, [pc, #152]	; (28f4 <vinv1271+0x144>)
    285c:	4798      	blx	r3
    285e:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) vsqr1271(t1, t1);
    2860:	4e23      	ldr	r6, [pc, #140]	; (28f0 <vinv1271+0x140>)
    2862:	4669      	mov	r1, sp
    2864:	4668      	mov	r0, sp
    2866:	47b0      	blx	r6
    2868:	3c01      	subs	r4, #1
    286a:	2c00      	cmp	r4, #0
    286c:	d1f9      	bne.n	2862 <vinv1271+0xb2>
	vmul1271(t1, t2, t1);
    286e:	466a      	mov	r2, sp
    2870:	a905      	add	r1, sp, #20
    2872:	4668      	mov	r0, sp
    2874:	4b1f      	ldr	r3, [pc, #124]	; (28f4 <vinv1271+0x144>)
    2876:	4798      	blx	r3
    2878:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) vsqr1271(t1, t1);
    287a:	4e1d      	ldr	r6, [pc, #116]	; (28f0 <vinv1271+0x140>)
    287c:	4669      	mov	r1, sp
    287e:	4668      	mov	r0, sp
    2880:	47b0      	blx	r6
    2882:	3c01      	subs	r4, #1
    2884:	2c00      	cmp	r4, #0
    2886:	d1f9      	bne.n	287c <vinv1271+0xcc>
	vmul1271(t5, t1, t1);
    2888:	466a      	mov	r2, sp
    288a:	4669      	mov	r1, sp
    288c:	a814      	add	r0, sp, #80	; 0x50
    288e:	4b19      	ldr	r3, [pc, #100]	; (28f4 <vinv1271+0x144>)
    2890:	4798      	blx	r3
    2892:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) vsqr1271(t1, t1);
    2894:	4e16      	ldr	r6, [pc, #88]	; (28f0 <vinv1271+0x140>)
    2896:	4669      	mov	r1, sp
    2898:	4668      	mov	r0, sp
    289a:	47b0      	blx	r6
    289c:	3c01      	subs	r4, #1
    289e:	2c00      	cmp	r4, #0
    28a0:	d1f9      	bne.n	2896 <vinv1271+0xe6>
	vmul1271(t4, t1, t1);
    28a2:	466a      	mov	r2, sp
    28a4:	4669      	mov	r1, sp
    28a6:	a80f      	add	r0, sp, #60	; 0x3c
    28a8:	4b12      	ldr	r3, [pc, #72]	; (28f4 <vinv1271+0x144>)
    28aa:	4798      	blx	r3
    28ac:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) vsqr1271(t1, t1);
    28ae:	4e10      	ldr	r6, [pc, #64]	; (28f0 <vinv1271+0x140>)
    28b0:	4669      	mov	r1, sp
    28b2:	4668      	mov	r0, sp
    28b4:	47b0      	blx	r6
    28b6:	3c01      	subs	r4, #1
    28b8:	2c00      	cmp	r4, #0
    28ba:	d1f9      	bne.n	28b0 <vinv1271+0x100>
	vmul1271(t3, t1, t1);
    28bc:	466a      	mov	r2, sp
    28be:	4669      	mov	r1, sp
    28c0:	a80a      	add	r0, sp, #40	; 0x28
    28c2:	4c0c      	ldr	r4, [pc, #48]	; (28f4 <vinv1271+0x144>)
    28c4:	47a0      	blx	r4
	vsqr1271(t1, t1);
    28c6:	4669      	mov	r1, sp
    28c8:	4668      	mov	r0, sp
    28ca:	4e09      	ldr	r6, [pc, #36]	; (28f0 <vinv1271+0x140>)
    28cc:	47b0      	blx	r6
	vmul1271(a, t1, af);
    28ce:	aa19      	add	r2, sp, #100	; 0x64
    28d0:	4669      	mov	r1, sp
    28d2:	0028      	movs	r0, r5
    28d4:	47a0      	blx	r4
  // Hardcoded for p = 2^127-1
	velm_t t;

	vexp1251(a, t);
	vsqr1271(t, t);
    28d6:	a919      	add	r1, sp, #100	; 0x64
    28d8:	0008      	movs	r0, r1
    28da:	47b0      	blx	r6
	vsqr1271(t, t);
    28dc:	a919      	add	r1, sp, #100	; 0x64
    28de:	0008      	movs	r0, r1
    28e0:	47b0      	blx	r6
	vmul1271(a, t, a);
    28e2:	002a      	movs	r2, r5
    28e4:	a919      	add	r1, sp, #100	; 0x64
    28e6:	0028      	movs	r0, r5
    28e8:	47a0      	blx	r4
}
    28ea:	b01e      	add	sp, #120	; 0x78
    28ec:	bd70      	pop	{r4, r5, r6, pc}
    28ee:	46c0      	nop			; (mov r8, r8)
    28f0:	000023a9 	.word	0x000023a9
    28f4:	00002115 	.word	0x00002115

000028f8 <from_std_to_ext>:


void from_std_to_ext(f2elm_t a, v2elm_t c)
{ // Expand GF(p^2) element represented with two 4 32-bit digits to 23/26/26/26/26/23/26/26/26/26-bit vector representation
    28f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Assumes fully reduced input in [0, 2^127-1]  
    const uint32_t mask_8  = ((uint32_t)1 <<  8) - 1;   
    const uint32_t mask_14 = ((uint32_t)1 << 14) - 1;  
    const uint32_t mask_20 = ((uint32_t)1 << 20) - 1; 

    c[0] = a[0][0] & mask_26;
    28fa:	6803      	ldr	r3, [r0, #0]
    28fc:	019b      	lsls	r3, r3, #6
    28fe:	099b      	lsrs	r3, r3, #6
    2900:	600b      	str	r3, [r1, #0]
    c[1] = (a[0][0] >> 26) | ((a[0][1] & mask_20) <<  6);
    2902:	6843      	ldr	r3, [r0, #4]
    2904:	019b      	lsls	r3, r3, #6
    2906:	4a1c      	ldr	r2, [pc, #112]	; (2978 <from_std_to_ext+0x80>)
    2908:	4013      	ands	r3, r2
    290a:	6804      	ldr	r4, [r0, #0]
    290c:	0ea4      	lsrs	r4, r4, #26
    290e:	4323      	orrs	r3, r4
    2910:	604b      	str	r3, [r1, #4]
    c[2] = (a[0][1] >> 20) | ((a[0][2] & mask_14) << 12);
    2912:	6883      	ldr	r3, [r0, #8]
    2914:	031b      	lsls	r3, r3, #12
    2916:	4f19      	ldr	r7, [pc, #100]	; (297c <from_std_to_ext+0x84>)
    2918:	403b      	ands	r3, r7
    291a:	6844      	ldr	r4, [r0, #4]
    291c:	0d24      	lsrs	r4, r4, #20
    291e:	4323      	orrs	r3, r4
    2920:	608b      	str	r3, [r1, #8]
    c[3] = (a[0][2] >> 14) | ((a[0][3] & mask_8 ) << 18);
    2922:	68c3      	ldr	r3, [r0, #12]
    2924:	049d      	lsls	r5, r3, #18
    2926:	26ff      	movs	r6, #255	; 0xff
    2928:	04b6      	lsls	r6, r6, #18
    292a:	4035      	ands	r5, r6
    292c:	6883      	ldr	r3, [r0, #8]
    292e:	0b9b      	lsrs	r3, r3, #14
    2930:	431d      	orrs	r5, r3
    2932:	60cd      	str	r5, [r1, #12]
    c[4] = (a[0][3] >>  8) & mask_23;
    2934:	68c3      	ldr	r3, [r0, #12]
    2936:	005b      	lsls	r3, r3, #1
    2938:	0a5b      	lsrs	r3, r3, #9
    293a:	610b      	str	r3, [r1, #16]

    c[5] = a[1][0] & mask_26;
    293c:	6903      	ldr	r3, [r0, #16]
    293e:	019b      	lsls	r3, r3, #6
    2940:	099b      	lsrs	r3, r3, #6
    2942:	614b      	str	r3, [r1, #20]
    c[6] = (a[1][0] >> 26) | ((a[1][1] & mask_20) <<  6);
    2944:	6943      	ldr	r3, [r0, #20]
    2946:	019c      	lsls	r4, r3, #6
    2948:	4014      	ands	r4, r2
    294a:	6903      	ldr	r3, [r0, #16]
    294c:	0e9b      	lsrs	r3, r3, #26
    294e:	431c      	orrs	r4, r3
    2950:	618c      	str	r4, [r1, #24]
    c[7] = (a[1][1] >> 20) | ((a[1][2] & mask_14) << 12);
    2952:	6983      	ldr	r3, [r0, #24]
    2954:	031a      	lsls	r2, r3, #12
    2956:	403a      	ands	r2, r7
    2958:	6943      	ldr	r3, [r0, #20]
    295a:	0d1b      	lsrs	r3, r3, #20
    295c:	431a      	orrs	r2, r3
    295e:	61ca      	str	r2, [r1, #28]
    c[8] = (a[1][2] >> 14) | ((a[1][3] & mask_8 ) << 18);
    2960:	69c3      	ldr	r3, [r0, #28]
    2962:	049b      	lsls	r3, r3, #18
    2964:	4033      	ands	r3, r6
    2966:	6982      	ldr	r2, [r0, #24]
    2968:	0b92      	lsrs	r2, r2, #14
    296a:	4313      	orrs	r3, r2
    296c:	620b      	str	r3, [r1, #32]
    c[9] = (a[1][3] >>  8) & mask_23;
    296e:	69c3      	ldr	r3, [r0, #28]
    2970:	005b      	lsls	r3, r3, #1
    2972:	0a5b      	lsrs	r3, r3, #9
    2974:	624b      	str	r3, [r1, #36]	; 0x24
}
    2976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2978:	03ffffc0 	.word	0x03ffffc0
    297c:	03fff000 	.word	0x03fff000

00002980 <from_ext_to_std>:

void from_ext_to_std(v2elm_t a, f2elm_t c)
{ // Contract GF(p^2) element in 23/26/26/26/26/23/26/26/26/26-bit vector representation to two 4 32-bit digits
  // Assumes fully reduced input in [0, 2^127-1]
        
    c[0][0]  = (a[1] << 26) |  a[0];
    2980:	6843      	ldr	r3, [r0, #4]
    2982:	069b      	lsls	r3, r3, #26
    2984:	6802      	ldr	r2, [r0, #0]
    2986:	4313      	orrs	r3, r2
    2988:	600b      	str	r3, [r1, #0]
    c[0][1]  = (a[2] << 20) | (a[1] >>  6);
    298a:	6883      	ldr	r3, [r0, #8]
    298c:	051b      	lsls	r3, r3, #20
    298e:	6842      	ldr	r2, [r0, #4]
    2990:	0992      	lsrs	r2, r2, #6
    2992:	4313      	orrs	r3, r2
    2994:	604b      	str	r3, [r1, #4]
    c[0][2]  = (a[3] << 14) | (a[2] >> 12);
    2996:	68c3      	ldr	r3, [r0, #12]
    2998:	039b      	lsls	r3, r3, #14
    299a:	6882      	ldr	r2, [r0, #8]
    299c:	0b12      	lsrs	r2, r2, #12
    299e:	4313      	orrs	r3, r2
    29a0:	608b      	str	r3, [r1, #8]
    c[0][3]  = (a[4] <<  8) | (a[3] >> 18);
    29a2:	6903      	ldr	r3, [r0, #16]
    29a4:	021b      	lsls	r3, r3, #8
    29a6:	68c2      	ldr	r2, [r0, #12]
    29a8:	0c92      	lsrs	r2, r2, #18
    29aa:	4313      	orrs	r3, r2
    29ac:	60cb      	str	r3, [r1, #12]
        
    c[1][0]  = (a[6] << 26) |  a[5];
    29ae:	6983      	ldr	r3, [r0, #24]
    29b0:	069b      	lsls	r3, r3, #26
    29b2:	6942      	ldr	r2, [r0, #20]
    29b4:	4313      	orrs	r3, r2
    29b6:	610b      	str	r3, [r1, #16]
    c[1][1]  = (a[7] << 20) | (a[6] >>  6);
    29b8:	69c3      	ldr	r3, [r0, #28]
    29ba:	051b      	lsls	r3, r3, #20
    29bc:	6982      	ldr	r2, [r0, #24]
    29be:	0992      	lsrs	r2, r2, #6
    29c0:	4313      	orrs	r3, r2
    29c2:	614b      	str	r3, [r1, #20]
    c[1][2]  = (a[8] << 14) | (a[7] >> 12);
    29c4:	6a03      	ldr	r3, [r0, #32]
    29c6:	039b      	lsls	r3, r3, #14
    29c8:	69c2      	ldr	r2, [r0, #28]
    29ca:	0b12      	lsrs	r2, r2, #12
    29cc:	4313      	orrs	r3, r2
    29ce:	618b      	str	r3, [r1, #24]
    c[1][3]  = (a[9] <<  8) | (a[8] >> 18);
    29d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    29d2:	021b      	lsls	r3, r3, #8
    29d4:	6a02      	ldr	r2, [r0, #32]
    29d6:	0c92      	lsrs	r2, r2, #18
    29d8:	4313      	orrs	r3, r2
    29da:	61cb      	str	r3, [r1, #28]
}
    29dc:	4770      	bx	lr
	...

000029e0 <mp_mul>:


void mp_mul(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Schoolbook multiprecision multiply, c = a*b   
    29e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29e2:	46de      	mov	lr, fp
    29e4:	4657      	mov	r7, sl
    29e6:	464e      	mov	r6, r9
    29e8:	4645      	mov	r5, r8
    29ea:	b5e0      	push	{r5, r6, r7, lr}
    29ec:	b087      	sub	sp, #28
    29ee:	9103      	str	r1, [sp, #12]
    29f0:	4699      	mov	r9, r3
    unsigned int i, j;
    digit_t u, v, UV[2];
    unsigned int carry = 0;

    for (i = 0; i < (2*nwords); i++) c[i] = 0;
    29f2:	0059      	lsls	r1, r3, #1
    29f4:	d006      	beq.n	2a04 <mp_mul+0x24>
    29f6:	0013      	movs	r3, r2
    29f8:	0089      	lsls	r1, r1, #2
    29fa:	1851      	adds	r1, r2, r1
    29fc:	2400      	movs	r4, #0
    29fe:	c310      	stmia	r3!, {r4}
    2a00:	428b      	cmp	r3, r1
    2a02:	d1fc      	bne.n	29fe <mp_mul+0x1e>

    for (i = 0; i < nwords; i++) {
    2a04:	464b      	mov	r3, r9
    2a06:	2b00      	cmp	r3, #0
    2a08:	d035      	beq.n	2a76 <mp_mul+0x96>
    2a0a:	9201      	str	r2, [sp, #4]
    2a0c:	4680      	mov	r8, r0
    2a0e:	009b      	lsls	r3, r3, #2
    2a10:	9302      	str	r3, [sp, #8]
    2a12:	2300      	movs	r3, #0
    2a14:	469b      	mov	fp, r3
        u = 0;
        for (j = 0; j < nwords; j++) {
            MUL(a[i], b[j], UV+1, UV[0]); 
    2a16:	4b1b      	ldr	r3, [pc, #108]	; (2a84 <mp_mul+0xa4>)
    2a18:	469a      	mov	sl, r3
    2a1a:	9f03      	ldr	r7, [sp, #12]
{ // Schoolbook multiprecision multiply, c = a*b   
    2a1c:	9e01      	ldr	r6, [sp, #4]
    2a1e:	2400      	movs	r4, #0
    2a20:	2500      	movs	r5, #0
            MUL(a[i], b[j], UV+1, UV[0]); 
    2a22:	cf02      	ldmia	r7!, {r1}
    2a24:	aa04      	add	r2, sp, #16
    2a26:	4643      	mov	r3, r8
    2a28:	6818      	ldr	r0, [r3, #0]
    2a2a:	47d0      	blx	sl
            ADDC(0, UV[0], u, carry, v); 
    2a2c:	9a04      	ldr	r2, [sp, #16]
    2a2e:	1913      	adds	r3, r2, r4
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
}

static __inline unsigned int is_digit_lessthan_ct(digit_t x, digit_t y)
{ // Is x < y?
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    2a30:	0011      	movs	r1, r2
    2a32:	4059      	eors	r1, r3
    2a34:	4054      	eors	r4, r2
    2a36:	430c      	orrs	r4, r1
    2a38:	405c      	eors	r4, r3
    2a3a:	0fe4      	lsrs	r4, r4, #31
            u = UV[1] + carry;
    2a3c:	9a05      	ldr	r2, [sp, #20]
    2a3e:	9200      	str	r2, [sp, #0]
    2a40:	18a1      	adds	r1, r4, r2
            ADDC(0, c[i+j], v, carry, v); 
    2a42:	6830      	ldr	r0, [r6, #0]
    2a44:	181a      	adds	r2, r3, r0
    2a46:	4043      	eors	r3, r0
    2a48:	001c      	movs	r4, r3
    2a4a:	4050      	eors	r0, r2
    2a4c:	4304      	orrs	r4, r0
    2a4e:	4054      	eors	r4, r2
    2a50:	0fe4      	lsrs	r4, r4, #31
            u = u + carry;
    2a52:	1864      	adds	r4, r4, r1
            c[i+j] = v;
    2a54:	c604      	stmia	r6!, {r2}
        for (j = 0; j < nwords; j++) {
    2a56:	3501      	adds	r5, #1
    2a58:	45a9      	cmp	r9, r5
    2a5a:	d1e2      	bne.n	2a22 <mp_mul+0x42>
        }
        c[nwords+i] = u;
    2a5c:	9b01      	ldr	r3, [sp, #4]
    2a5e:	9a02      	ldr	r2, [sp, #8]
    2a60:	509c      	str	r4, [r3, r2]
    for (i = 0; i < nwords; i++) {
    2a62:	2201      	movs	r2, #1
    2a64:	4694      	mov	ip, r2
    2a66:	44e3      	add	fp, ip
    2a68:	3304      	adds	r3, #4
    2a6a:	9301      	str	r3, [sp, #4]
    2a6c:	2304      	movs	r3, #4
    2a6e:	469c      	mov	ip, r3
    2a70:	44e0      	add	r8, ip
    2a72:	455d      	cmp	r5, fp
    2a74:	d1d1      	bne.n	2a1a <mp_mul+0x3a>
    }
}
    2a76:	b007      	add	sp, #28
    2a78:	bc3c      	pop	{r2, r3, r4, r5}
    2a7a:	4690      	mov	r8, r2
    2a7c:	4699      	mov	r9, r3
    2a7e:	46a2      	mov	sl, r4
    2a80:	46ab      	mov	fp, r5
    2a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a84:	0000202d 	.word	0x0000202d

00002a88 <subtract>:
    return carry;
}


unsigned int subtract(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Multiprecision subtraction, c = a-b, where lng(a) = lng(b) = nwords. Returns the borrow bit
    2a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a8a:	46d6      	mov	lr, sl
    2a8c:	464f      	mov	r7, r9
    2a8e:	4646      	mov	r6, r8
    2a90:	b5c0      	push	{r6, r7, lr}
    2a92:	4684      	mov	ip, r0
    2a94:	4691      	mov	r9, r2
    unsigned int i, borrow = 0;

    for (i = 0; i < nwords; i++) {
    2a96:	2b00      	cmp	r3, #0
    2a98:	d022      	beq.n	2ae0 <subtract+0x58>
    2a9a:	009b      	lsls	r3, r3, #2
    2a9c:	4698      	mov	r8, r3
    2a9e:	2600      	movs	r6, #0
    2aa0:	2200      	movs	r2, #0
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    2aa2:	2301      	movs	r3, #1
    2aa4:	469a      	mov	sl, r3
        SUBC(borrow, a[i], b[i], borrow, c[i]);
    2aa6:	4663      	mov	r3, ip
    2aa8:	599b      	ldr	r3, [r3, r6]
    2aaa:	598f      	ldr	r7, [r1, r6]
    2aac:	1bdd      	subs	r5, r3, r7
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    2aae:	426c      	negs	r4, r5
    2ab0:	432c      	orrs	r4, r5
    2ab2:	0fe4      	lsrs	r4, r4, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    2ab4:	4650      	mov	r0, sl
    2ab6:	4044      	eors	r4, r0
    2ab8:	4014      	ands	r4, r2
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    2aba:	0018      	movs	r0, r3
    2abc:	4078      	eors	r0, r7
    2abe:	406f      	eors	r7, r5
    2ac0:	4338      	orrs	r0, r7
    2ac2:	4058      	eors	r0, r3
    2ac4:	0fc0      	lsrs	r0, r0, #31
    2ac6:	4320      	orrs	r0, r4
    2ac8:	1aad      	subs	r5, r5, r2
    2aca:	464b      	mov	r3, r9
    2acc:	519d      	str	r5, [r3, r6]
    2ace:	3604      	adds	r6, #4
    2ad0:	0002      	movs	r2, r0
    for (i = 0; i < nwords; i++) {
    2ad2:	4546      	cmp	r6, r8
    2ad4:	d1e7      	bne.n	2aa6 <subtract+0x1e>
    }

    return borrow;
}
    2ad6:	bc1c      	pop	{r2, r3, r4}
    2ad8:	4690      	mov	r8, r2
    2ada:	4699      	mov	r9, r3
    2adc:	46a2      	mov	sl, r4
    2ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsigned int i, borrow = 0;
    2ae0:	2000      	movs	r0, #0
    return borrow;
    2ae2:	e7f8      	b.n	2ad6 <subtract+0x4e>

00002ae4 <Montgomery_multiply_mod_order>:
	subtract_mod_order(c, (digit_t*)&curve_order, c);  // if c >= order then c = c - order
}
 

void Montgomery_multiply_mod_order(const digit_t* ma, const digit_t* mb, digit_t* mc)
{ // 256-bit Montgomery multiplication modulo the curve order, mc = ma*mb*r' mod order, where ma,mb,mc in [0, order-1]
    2ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ae6:	b0b1      	sub	sp, #196	; 0xc4
    2ae8:	0015      	movs	r5, r2
    mp_mul(a, b, c, NWORDS_ORDER);
    2aea:	2308      	movs	r3, #8
    2aec:	aa20      	add	r2, sp, #128	; 0x80
    2aee:	4c2c      	ldr	r4, [pc, #176]	; (2ba0 <Montgomery_multiply_mod_order+0xbc>)
    2af0:	47a0      	blx	r4
    2af2:	2308      	movs	r3, #8
    2af4:	aa10      	add	r2, sp, #64	; 0x40
    2af6:	492b      	ldr	r1, [pc, #172]	; (2ba4 <Montgomery_multiply_mod_order+0xc0>)
    2af8:	a820      	add	r0, sp, #128	; 0x80
    2afa:	47a0      	blx	r4
    2afc:	2308      	movs	r3, #8
    2afe:	466a      	mov	r2, sp
    2b00:	4929      	ldr	r1, [pc, #164]	; (2ba8 <Montgomery_multiply_mod_order+0xc4>)
    2b02:	a810      	add	r0, sp, #64	; 0x40
    2b04:	47a0      	blx	r4
    2b06:	2600      	movs	r6, #0
    unsigned int i, carry = 0;
    2b08:	2400      	movs	r4, #0
        ADDC(carry, a[i], b[i], carry, c[i]);
    2b0a:	a920      	add	r1, sp, #128	; 0x80
    2b0c:	5873      	ldr	r3, [r6, r1]
    2b0e:	191a      	adds	r2, r3, r4
    2b10:	4668      	mov	r0, sp
    2b12:	5830      	ldr	r0, [r6, r0]
    2b14:	4684      	mov	ip, r0
    2b16:	1817      	adds	r7, r2, r0
    2b18:	4668      	mov	r0, sp
    2b1a:	5037      	str	r7, [r6, r0]
    2b1c:	0010      	movs	r0, r2
    2b1e:	4060      	eors	r0, r4
    2b20:	405c      	eors	r4, r3
    2b22:	4320      	orrs	r0, r4
    2b24:	4050      	eors	r0, r2
    2b26:	0013      	movs	r3, r2
    2b28:	407b      	eors	r3, r7
    2b2a:	4664      	mov	r4, ip
    2b2c:	4054      	eors	r4, r2
    2b2e:	431c      	orrs	r4, r3
    2b30:	407c      	eors	r4, r7
    2b32:	4304      	orrs	r4, r0
    2b34:	0fe4      	lsrs	r4, r4, #31
    2b36:	3604      	adds	r6, #4
    for (i = 0; i < nwords; i++) {
    2b38:	2e40      	cmp	r6, #64	; 0x40
    2b3a:	d1e7      	bne.n	2b0c <Montgomery_multiply_mod_order+0x28>
    2b3c:	2300      	movs	r3, #0
    multiply(P, (digit_t*)&Montgomery_rprime, Q);      // Q = P * r' mod 2^(log_2(r))
    multiply(Q, (digit_t*)&curve_order, temp);         // temp = Q * r
    cout = add(P, temp, temp, 2*NWORDS_ORDER);         // (cout, temp) = P + Q * r     

    for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
        mc[i] = temp[NWORDS_ORDER + i];
    2b3e:	001a      	movs	r2, r3
    2b40:	446a      	add	r2, sp
    2b42:	6a12      	ldr	r2, [r2, #32]
    2b44:	50ea      	str	r2, [r5, r3]
    2b46:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
    2b48:	2b20      	cmp	r3, #32
    2b4a:	d1f8      	bne.n	2b3e <Montgomery_multiply_mod_order+0x5a>
    }

    // Final, constant-time subtraction     
    bout = subtract(mc, (digit_t*)&curve_order, mc, NWORDS_ORDER);    // (cout, mc) = (cout, mc) - r
    2b4c:	3b18      	subs	r3, #24
    2b4e:	002a      	movs	r2, r5
    2b50:	4915      	ldr	r1, [pc, #84]	; (2ba8 <Montgomery_multiply_mod_order+0xc4>)
    2b52:	0028      	movs	r0, r5
    2b54:	4e15      	ldr	r6, [pc, #84]	; (2bac <Montgomery_multiply_mod_order+0xc8>)
    2b56:	47b0      	blx	r6
    mask = (digit_t)cout - (digit_t)bout;              // if (cout, mc) >= 0 then mask = 0x00..0, else if (cout, mc) < 0 then mask = 0xFF..F
    2b58:	1a24      	subs	r4, r4, r0
    2b5a:	2300      	movs	r3, #0

    for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
        temp[i] = (order[i] & mask);
    2b5c:	4912      	ldr	r1, [pc, #72]	; (2ba8 <Montgomery_multiply_mod_order+0xc4>)
    2b5e:	585a      	ldr	r2, [r3, r1]
    2b60:	4022      	ands	r2, r4
    2b62:	4668      	mov	r0, sp
    2b64:	501a      	str	r2, [r3, r0]
    2b66:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
    2b68:	2b20      	cmp	r3, #32
    2b6a:	d1f8      	bne.n	2b5e <Montgomery_multiply_mod_order+0x7a>
    2b6c:	2600      	movs	r6, #0
    2b6e:	2300      	movs	r3, #0
        ADDC(carry, a[i], b[i], carry, c[i]);
    2b70:	59aa      	ldr	r2, [r5, r6]
    2b72:	18d1      	adds	r1, r2, r3
    2b74:	4668      	mov	r0, sp
    2b76:	5834      	ldr	r4, [r6, r0]
    2b78:	190f      	adds	r7, r1, r4
    2b7a:	51af      	str	r7, [r5, r6]
    2b7c:	0008      	movs	r0, r1
    2b7e:	4058      	eors	r0, r3
    2b80:	4053      	eors	r3, r2
    2b82:	4318      	orrs	r0, r3
    2b84:	4048      	eors	r0, r1
    2b86:	000a      	movs	r2, r1
    2b88:	407a      	eors	r2, r7
    2b8a:	000b      	movs	r3, r1
    2b8c:	4063      	eors	r3, r4
    2b8e:	4313      	orrs	r3, r2
    2b90:	407b      	eors	r3, r7
    2b92:	4303      	orrs	r3, r0
    2b94:	0fdb      	lsrs	r3, r3, #31
    2b96:	3604      	adds	r6, #4
    for (i = 0; i < nwords; i++) {
    2b98:	2e20      	cmp	r6, #32
    2b9a:	d1e9      	bne.n	2b70 <Montgomery_multiply_mod_order+0x8c>
    }
    add(mc, temp, mc, NWORDS_ORDER);                   //  mc = mc + (mask & r)

    return;
}
    2b9c:	b031      	add	sp, #196	; 0xc4
    2b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ba0:	000029e1 	.word	0x000029e1
    2ba4:	0000a4a0 	.word	0x0000a4a0
    2ba8:	0000a4e8 	.word	0x0000a4e8
    2bac:	00002a89 	.word	0x00002a89

00002bb0 <modulo_order>:


void modulo_order(digit_t* a, digit_t* c)
{ // Reduction modulo the order using Montgomery arithmetic
    2bb0:	b530      	push	{r4, r5, lr}
    2bb2:	b091      	sub	sp, #68	; 0x44
    2bb4:	0004      	movs	r4, r0
    2bb6:	000d      	movs	r5, r1
  // ma = a*Montgomery_Rprime mod r, where a,ma in [0, r-1], a,ma,r < 2^256
  // c = ma*1*Montgomery_Rprime^(-1) mod r, where ma,c in [0, r-1], ma,c,r < 2^256
	digit_t ma[NWORDS_ORDER], one[NWORDS_ORDER] = {0};
    2bb8:	2220      	movs	r2, #32
    2bba:	2100      	movs	r1, #0
    2bbc:	4668      	mov	r0, sp
    2bbe:	4b07      	ldr	r3, [pc, #28]	; (2bdc <modulo_order+0x2c>)
    2bc0:	4798      	blx	r3
    
    one[0] = 1;
    2bc2:	2301      	movs	r3, #1
    2bc4:	9300      	str	r3, [sp, #0]
    Montgomery_multiply_mod_order(a, (digit_t*)&Montgomery_Rprime, ma);
    2bc6:	aa08      	add	r2, sp, #32
    2bc8:	4905      	ldr	r1, [pc, #20]	; (2be0 <modulo_order+0x30>)
    2bca:	0020      	movs	r0, r4
    2bcc:	4c05      	ldr	r4, [pc, #20]	; (2be4 <modulo_order+0x34>)
    2bce:	47a0      	blx	r4
    Montgomery_multiply_mod_order(ma, one, c);
    2bd0:	002a      	movs	r2, r5
    2bd2:	4669      	mov	r1, sp
    2bd4:	a808      	add	r0, sp, #32
    2bd6:	47a0      	blx	r4
}
    2bd8:	b011      	add	sp, #68	; 0x44
    2bda:	bd30      	pop	{r4, r5, pc}
    2bdc:	00005eff 	.word	0x00005eff
    2be0:	0000a480 	.word	0x0000a480
    2be4:	00002ae5 	.word	0x00002ae5

00002be8 <conversion_to_odd>:


void conversion_to_odd(digit_t* k, digit_t* k_odd)
{ // Convert scalar to odd if even using the prime subgroup order r
    2be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bea:	46d6      	mov	lr, sl
    2bec:	464f      	mov	r7, r9
    2bee:	4646      	mov	r6, r8
    2bf0:	b5c0      	push	{r6, r7, lr}
    2bf2:	4689      	mov	r9, r1
    digit_t mask;
    digit_t* order = (digit_t*)curve_order;
    unsigned int i, carry = 0;

    mask = ~(0 - (k[0] & 1));     
    2bf4:	2601      	movs	r6, #1
    2bf6:	6803      	ldr	r3, [r0, #0]
    2bf8:	401e      	ands	r6, r3
    2bfa:	1e73      	subs	r3, r6, #1
    2bfc:	469c      	mov	ip, r3
    2bfe:	2500      	movs	r5, #0
    unsigned int i, carry = 0;
    2c00:	2300      	movs	r3, #0

    for (i = 0; i < NWORDS_ORDER; i++) {   // If (k is odd) then k_odd = k else k_odd = k + r
        ADDC(carry, order[i] & mask, k[i], carry, k_odd[i]);
    2c02:	4a11      	ldr	r2, [pc, #68]	; (2c48 <conversion_to_odd+0x60>)
    2c04:	4692      	mov	sl, r2
    2c06:	4652      	mov	r2, sl
    2c08:	58aa      	ldr	r2, [r5, r2]
    2c0a:	4661      	mov	r1, ip
    2c0c:	400a      	ands	r2, r1
    2c0e:	18d4      	adds	r4, r2, r3
    2c10:	5946      	ldr	r6, [r0, r5]
    2c12:	19a1      	adds	r1, r4, r6
    2c14:	464f      	mov	r7, r9
    2c16:	5179      	str	r1, [r7, r5]
    2c18:	0027      	movs	r7, r4
    2c1a:	405f      	eors	r7, r3
    2c1c:	405a      	eors	r2, r3
    2c1e:	433a      	orrs	r2, r7
    2c20:	4062      	eors	r2, r4
    2c22:	4690      	mov	r8, r2
    2c24:	0022      	movs	r2, r4
    2c26:	404a      	eors	r2, r1
    2c28:	0023      	movs	r3, r4
    2c2a:	4073      	eors	r3, r6
    2c2c:	4313      	orrs	r3, r2
    2c2e:	404b      	eors	r3, r1
    2c30:	4642      	mov	r2, r8
    2c32:	4313      	orrs	r3, r2
    2c34:	0fdb      	lsrs	r3, r3, #31
    2c36:	3504      	adds	r5, #4
    for (i = 0; i < NWORDS_ORDER; i++) {   // If (k is odd) then k_odd = k else k_odd = k + r
    2c38:	2d20      	cmp	r5, #32
    2c3a:	d1e4      	bne.n	2c06 <conversion_to_odd+0x1e>
    }
}
    2c3c:	bc1c      	pop	{r2, r3, r4}
    2c3e:	4690      	mov	r8, r2
    2c40:	4699      	mov	r9, r3
    2c42:	46a2      	mov	sl, r4
    2c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c46:	46c0      	nop			; (mov r8, r8)
    2c48:	0000a4e8 	.word	0x0000a4e8

00002c4c <vdiv1271>:


__inline void vdiv1271(uint32_t* a) 
{ // GF(p) division by two, c = a/2 mod p
    2c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Redundant representation: 23/26/26/26/26-bit
    digit_t mask;

    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    2c4e:	6803      	ldr	r3, [r0, #0]
    2c50:	07dc      	lsls	r4, r3, #31
    2c52:	17e4      	asrs	r4, r4, #31
    2c54:	09a6      	lsrs	r6, r4, #6
    
    a[0] += mask;
    a[1] += mask;
    2c56:	6842      	ldr	r2, [r0, #4]
    2c58:	18b1      	adds	r1, r6, r2
    a[2] += mask;
    2c5a:	6882      	ldr	r2, [r0, #8]
    2c5c:	18b2      	adds	r2, r6, r2
    a[3] += mask;
    2c5e:	68c5      	ldr	r5, [r0, #12]
    2c60:	1975      	adds	r5, r6, r5
    a[4] += (mask >> 3);
    2c62:	0a64      	lsrs	r4, r4, #9
    2c64:	6907      	ldr	r7, [r0, #16]
    2c66:	46bc      	mov	ip, r7
    2c68:	4464      	add	r4, ip
    a[0] += mask;
    2c6a:	199b      	adds	r3, r3, r6

    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    2c6c:	105b      	asrs	r3, r3, #1
    2c6e:	064f      	lsls	r7, r1, #25
    2c70:	2680      	movs	r6, #128	; 0x80
    2c72:	04b6      	lsls	r6, r6, #18
    2c74:	4037      	ands	r7, r6
    2c76:	19db      	adds	r3, r3, r7
    2c78:	6003      	str	r3, [r0, #0]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    2c7a:	0653      	lsls	r3, r2, #25
    2c7c:	4033      	ands	r3, r6
    2c7e:	1049      	asrs	r1, r1, #1
    2c80:	1859      	adds	r1, r3, r1
    2c82:	6041      	str	r1, [r0, #4]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    2c84:	0669      	lsls	r1, r5, #25
    2c86:	4031      	ands	r1, r6
    2c88:	1052      	asrs	r2, r2, #1
    2c8a:	188a      	adds	r2, r1, r2
    2c8c:	6082      	str	r2, [r0, #8]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    2c8e:	0663      	lsls	r3, r4, #25
    2c90:	4033      	ands	r3, r6
    2c92:	106d      	asrs	r5, r5, #1
    2c94:	195d      	adds	r5, r3, r5
    2c96:	60c5      	str	r5, [r0, #12]
    a[4] = ((sdigit_t)a[4] >> 1);
    2c98:	1064      	asrs	r4, r4, #1
    2c9a:	6104      	str	r4, [r0, #16]
}
    2c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002c9e <v2copy1271>:


void v2copy1271(v2elm_t a, v2elm_t c) 
{ // Copy vectorized GF(p^2) element, c <- a

    c[0] = a[0]; c[1] = a[1]; c[2] = a[2]; c[3] = a[3]; c[4] = a[4]; 
    2c9e:	6803      	ldr	r3, [r0, #0]
    2ca0:	600b      	str	r3, [r1, #0]
    2ca2:	6843      	ldr	r3, [r0, #4]
    2ca4:	604b      	str	r3, [r1, #4]
    2ca6:	6883      	ldr	r3, [r0, #8]
    2ca8:	608b      	str	r3, [r1, #8]
    2caa:	68c3      	ldr	r3, [r0, #12]
    2cac:	60cb      	str	r3, [r1, #12]
    2cae:	6903      	ldr	r3, [r0, #16]
    2cb0:	610b      	str	r3, [r1, #16]
    c[5] = a[5]; c[6] = a[6]; c[7] = a[7]; c[8] = a[8]; c[9] = a[9];
    2cb2:	6943      	ldr	r3, [r0, #20]
    2cb4:	614b      	str	r3, [r1, #20]
    2cb6:	6983      	ldr	r3, [r0, #24]
    2cb8:	618b      	str	r3, [r1, #24]
    2cba:	69c3      	ldr	r3, [r0, #28]
    2cbc:	61cb      	str	r3, [r1, #28]
    2cbe:	6a03      	ldr	r3, [r0, #32]
    2cc0:	620b      	str	r3, [r1, #32]
    2cc2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2cc4:	624b      	str	r3, [r1, #36]	; 0x24
}
    2cc6:	4770      	bx	lr

00002cc8 <table_lookup_1x8>:

#include "FourQ_internal.h"                        


void table_lookup_1x8(vpoint_extproj_precomp_t* table, vpoint_extproj_precomp_t P, unsigned int digit, unsigned int sign_mask)
{ // Constant-time table lookup to extract a point represented as (X+Y,Y-X,2Z,2dT) corresponding to extended twisted Edwards coordinates (X:Y:Z:T)
    2cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cca:	46d6      	mov	lr, sl
    2ccc:	464f      	mov	r7, r9
    2cce:	4646      	mov	r6, r8
    2cd0:	b5c0      	push	{r6, r7, lr}
    2cd2:	b0d2      	sub	sp, #328	; 0x148
    2cd4:	0004      	movs	r4, r0
    2cd6:	468a      	mov	sl, r1
    2cd8:	4690      	mov	r8, r2
    2cda:	001e      	movs	r6, r3
#else
    vpoint_extproj_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                  
    ecccopy_precomp(table[0], point);                                        // point = table[0]
    2cdc:	a92a      	add	r1, sp, #168	; 0xa8
    2cde:	4dcc      	ldr	r5, [pc, #816]	; (3010 <table_lookup_1x8+0x348>)
    2ce0:	47a8      	blx	r5
    2ce2:	0020      	movs	r0, r4
    2ce4:	3028      	adds	r0, #40	; 0x28
    2ce6:	a934      	add	r1, sp, #208	; 0xd0
    2ce8:	47a8      	blx	r5
    2cea:	0020      	movs	r0, r4
    2cec:	3050      	adds	r0, #80	; 0x50
    2cee:	a93e      	add	r1, sp, #248	; 0xf8
    2cf0:	47a8      	blx	r5
    2cf2:	0020      	movs	r0, r4
    2cf4:	3078      	adds	r0, #120	; 0x78
    2cf6:	a948      	add	r1, sp, #288	; 0x120
    2cf8:	47a8      	blx	r5
    2cfa:	0025      	movs	r5, r4
    2cfc:	35a0      	adds	r5, #160	; 0xa0
    2cfe:	23a0      	movs	r3, #160	; 0xa0
    2d00:	00db      	lsls	r3, r3, #3
    2d02:	4699      	mov	r9, r3
    2d04:	44a1      	add	r9, r4
    for (i = 1; i < 8; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    2d06:	4fc2      	ldr	r7, [pc, #776]	; (3010 <table_lookup_1x8+0x348>)
        digit--;
    2d08:	2301      	movs	r3, #1
    2d0a:	425b      	negs	r3, r3
    2d0c:	469c      	mov	ip, r3
    2d0e:	44e0      	add	r8, ip
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    2d10:	4643      	mov	r3, r8
    2d12:	0fdc      	lsrs	r4, r3, #31
    2d14:	4464      	add	r4, ip
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    2d16:	a902      	add	r1, sp, #8
    2d18:	0028      	movs	r0, r5
    2d1a:	47b8      	blx	r7
    2d1c:	0028      	movs	r0, r5
    2d1e:	3028      	adds	r0, #40	; 0x28
    2d20:	a90c      	add	r1, sp, #48	; 0x30
    2d22:	47b8      	blx	r7
    2d24:	0028      	movs	r0, r5
    2d26:	3050      	adds	r0, #80	; 0x50
    2d28:	a916      	add	r1, sp, #88	; 0x58
    2d2a:	47b8      	blx	r7
    2d2c:	0028      	movs	r0, r5
    2d2e:	3078      	adds	r0, #120	; 0x78
    2d30:	a920      	add	r1, sp, #128	; 0x80
    2d32:	47b8      	blx	r7
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point            
        point->xy[0] = (mask & (point->xy[0] ^ temp_point->xy[0])) ^ point->xy[0];
    2d34:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    2d36:	9b02      	ldr	r3, [sp, #8]
    2d38:	4053      	eors	r3, r2
    2d3a:	4023      	ands	r3, r4
    2d3c:	4053      	eors	r3, r2
    2d3e:	932a      	str	r3, [sp, #168]	; 0xa8
        point->xy[1] = (mask & (point->xy[1] ^ temp_point->xy[1])) ^ point->xy[1];
    2d40:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    2d42:	9b03      	ldr	r3, [sp, #12]
    2d44:	4053      	eors	r3, r2
    2d46:	4023      	ands	r3, r4
    2d48:	4053      	eors	r3, r2
    2d4a:	932b      	str	r3, [sp, #172]	; 0xac
        point->xy[2] = (mask & (point->xy[2] ^ temp_point->xy[2])) ^ point->xy[2];
    2d4c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    2d4e:	9b04      	ldr	r3, [sp, #16]
    2d50:	4053      	eors	r3, r2
    2d52:	4023      	ands	r3, r4
    2d54:	4053      	eors	r3, r2
    2d56:	932c      	str	r3, [sp, #176]	; 0xb0
        point->xy[3] = (mask & (point->xy[3] ^ temp_point->xy[3])) ^ point->xy[3];
    2d58:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    2d5a:	9b05      	ldr	r3, [sp, #20]
    2d5c:	4053      	eors	r3, r2
    2d5e:	4023      	ands	r3, r4
    2d60:	4053      	eors	r3, r2
    2d62:	932d      	str	r3, [sp, #180]	; 0xb4
        point->xy[4] = (mask & (point->xy[4] ^ temp_point->xy[4])) ^ point->xy[4];
    2d64:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    2d66:	9b06      	ldr	r3, [sp, #24]
    2d68:	4053      	eors	r3, r2
    2d6a:	4023      	ands	r3, r4
    2d6c:	4053      	eors	r3, r2
    2d6e:	932e      	str	r3, [sp, #184]	; 0xb8
        point->xy[5] = (mask & (point->xy[5] ^ temp_point->xy[5])) ^ point->xy[5];
    2d70:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    2d72:	9b07      	ldr	r3, [sp, #28]
    2d74:	4053      	eors	r3, r2
    2d76:	4023      	ands	r3, r4
    2d78:	4053      	eors	r3, r2
    2d7a:	932f      	str	r3, [sp, #188]	; 0xbc
        point->xy[6] = (mask & (point->xy[6] ^ temp_point->xy[6])) ^ point->xy[6];
    2d7c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    2d7e:	9b08      	ldr	r3, [sp, #32]
    2d80:	4053      	eors	r3, r2
    2d82:	4023      	ands	r3, r4
    2d84:	4053      	eors	r3, r2
    2d86:	9330      	str	r3, [sp, #192]	; 0xc0
        point->xy[7] = (mask & (point->xy[7] ^ temp_point->xy[7])) ^ point->xy[7];
    2d88:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    2d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d8c:	4053      	eors	r3, r2
    2d8e:	4023      	ands	r3, r4
    2d90:	4053      	eors	r3, r2
    2d92:	9331      	str	r3, [sp, #196]	; 0xc4
        point->xy[8] = (mask & (point->xy[8] ^ temp_point->xy[8])) ^ point->xy[8];
    2d94:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    2d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2d98:	4053      	eors	r3, r2
    2d9a:	4023      	ands	r3, r4
    2d9c:	4053      	eors	r3, r2
    2d9e:	9332      	str	r3, [sp, #200]	; 0xc8
        point->xy[9] = (mask & (point->xy[9] ^ temp_point->xy[9])) ^ point->xy[9];
    2da0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    2da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2da4:	4053      	eors	r3, r2
    2da6:	4023      	ands	r3, r4
    2da8:	4053      	eors	r3, r2
    2daa:	9333      	str	r3, [sp, #204]	; 0xcc
        point->yx[0] = (mask & (point->yx[0] ^ temp_point->yx[0])) ^ point->yx[0];
    2dac:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    2dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2db0:	4053      	eors	r3, r2
    2db2:	4023      	ands	r3, r4
    2db4:	4053      	eors	r3, r2
    2db6:	9334      	str	r3, [sp, #208]	; 0xd0
        point->yx[1] = (mask & (point->yx[1] ^ temp_point->yx[1])) ^ point->yx[1];
    2db8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
    2dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2dbc:	4053      	eors	r3, r2
    2dbe:	4023      	ands	r3, r4
    2dc0:	4053      	eors	r3, r2
    2dc2:	9335      	str	r3, [sp, #212]	; 0xd4
        point->yx[2] = (mask & (point->yx[2] ^ temp_point->yx[2])) ^ point->yx[2];
    2dc4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    2dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2dc8:	4053      	eors	r3, r2
    2dca:	4023      	ands	r3, r4
    2dcc:	4053      	eors	r3, r2
    2dce:	9336      	str	r3, [sp, #216]	; 0xd8
        point->yx[3] = (mask & (point->yx[3] ^ temp_point->yx[3])) ^ point->yx[3];
    2dd0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    2dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2dd4:	4053      	eors	r3, r2
    2dd6:	4023      	ands	r3, r4
    2dd8:	4053      	eors	r3, r2
    2dda:	9337      	str	r3, [sp, #220]	; 0xdc
        point->yx[4] = (mask & (point->yx[4] ^ temp_point->yx[4])) ^ point->yx[4];
    2ddc:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    2dde:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2de0:	4053      	eors	r3, r2
    2de2:	4023      	ands	r3, r4
    2de4:	4053      	eors	r3, r2
    2de6:	9338      	str	r3, [sp, #224]	; 0xe0
        point->yx[5] = (mask & (point->yx[5] ^ temp_point->yx[5])) ^ point->yx[5];
    2de8:	9a39      	ldr	r2, [sp, #228]	; 0xe4
    2dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2dec:	4053      	eors	r3, r2
    2dee:	4023      	ands	r3, r4
    2df0:	4053      	eors	r3, r2
    2df2:	9339      	str	r3, [sp, #228]	; 0xe4
        point->yx[6] = (mask & (point->yx[6] ^ temp_point->yx[6])) ^ point->yx[6];
    2df4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    2df6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2df8:	4053      	eors	r3, r2
    2dfa:	4023      	ands	r3, r4
    2dfc:	4053      	eors	r3, r2
    2dfe:	933a      	str	r3, [sp, #232]	; 0xe8
        point->yx[7] = (mask & (point->yx[7] ^ temp_point->yx[7])) ^ point->yx[7];
    2e00:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    2e02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2e04:	4053      	eors	r3, r2
    2e06:	4023      	ands	r3, r4
    2e08:	4053      	eors	r3, r2
    2e0a:	933b      	str	r3, [sp, #236]	; 0xec
        point->yx[8] = (mask & (point->yx[8] ^ temp_point->yx[8])) ^ point->yx[8];
    2e0c:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    2e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2e10:	4053      	eors	r3, r2
    2e12:	4023      	ands	r3, r4
    2e14:	4053      	eors	r3, r2
    2e16:	933c      	str	r3, [sp, #240]	; 0xf0
        point->yx[9] = (mask & (point->yx[9] ^ temp_point->yx[9])) ^ point->yx[9];
    2e18:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    2e1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2e1c:	4053      	eors	r3, r2
    2e1e:	4023      	ands	r3, r4
    2e20:	4053      	eors	r3, r2
    2e22:	933d      	str	r3, [sp, #244]	; 0xf4
        point->z2[0] = (mask & (point->z2[0] ^ temp_point->z2[0])) ^ point->z2[0];
    2e24:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    2e26:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2e28:	4053      	eors	r3, r2
    2e2a:	4023      	ands	r3, r4
    2e2c:	4053      	eors	r3, r2
    2e2e:	933e      	str	r3, [sp, #248]	; 0xf8
        point->z2[1] = (mask & (point->z2[1] ^ temp_point->z2[1])) ^ point->z2[1];
    2e30:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    2e32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2e34:	4053      	eors	r3, r2
    2e36:	4023      	ands	r3, r4
    2e38:	4053      	eors	r3, r2
    2e3a:	933f      	str	r3, [sp, #252]	; 0xfc
        point->z2[2] = (mask & (point->z2[2] ^ temp_point->z2[2])) ^ point->z2[2];
    2e3c:	9a40      	ldr	r2, [sp, #256]	; 0x100
    2e3e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2e40:	4053      	eors	r3, r2
    2e42:	4023      	ands	r3, r4
    2e44:	4053      	eors	r3, r2
    2e46:	9340      	str	r3, [sp, #256]	; 0x100
        point->z2[3] = (mask & (point->z2[3] ^ temp_point->z2[3])) ^ point->z2[3];
    2e48:	9a41      	ldr	r2, [sp, #260]	; 0x104
    2e4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2e4c:	4053      	eors	r3, r2
    2e4e:	4023      	ands	r3, r4
    2e50:	4053      	eors	r3, r2
    2e52:	9341      	str	r3, [sp, #260]	; 0x104
        point->z2[4] = (mask & (point->z2[4] ^ temp_point->z2[4])) ^ point->z2[4];
    2e54:	9a42      	ldr	r2, [sp, #264]	; 0x108
    2e56:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    2e58:	4053      	eors	r3, r2
    2e5a:	4023      	ands	r3, r4
    2e5c:	4053      	eors	r3, r2
    2e5e:	9342      	str	r3, [sp, #264]	; 0x108
        point->z2[5] = (mask & (point->z2[5] ^ temp_point->z2[5])) ^ point->z2[5];
    2e60:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    2e62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2e64:	4053      	eors	r3, r2
    2e66:	4023      	ands	r3, r4
    2e68:	4053      	eors	r3, r2
    2e6a:	9343      	str	r3, [sp, #268]	; 0x10c
        point->z2[6] = (mask & (point->z2[6] ^ temp_point->z2[6])) ^ point->z2[6];
    2e6c:	9a44      	ldr	r2, [sp, #272]	; 0x110
    2e6e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2e70:	4053      	eors	r3, r2
    2e72:	4023      	ands	r3, r4
    2e74:	4053      	eors	r3, r2
    2e76:	9344      	str	r3, [sp, #272]	; 0x110
        point->z2[7] = (mask & (point->z2[7] ^ temp_point->z2[7])) ^ point->z2[7];
    2e78:	9a45      	ldr	r2, [sp, #276]	; 0x114
    2e7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2e7c:	4053      	eors	r3, r2
    2e7e:	4023      	ands	r3, r4
    2e80:	4053      	eors	r3, r2
    2e82:	9345      	str	r3, [sp, #276]	; 0x114
        point->z2[8] = (mask & (point->z2[8] ^ temp_point->z2[8])) ^ point->z2[8];
    2e84:	9a46      	ldr	r2, [sp, #280]	; 0x118
    2e86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2e88:	4053      	eors	r3, r2
    2e8a:	4023      	ands	r3, r4
    2e8c:	4053      	eors	r3, r2
    2e8e:	9346      	str	r3, [sp, #280]	; 0x118
        point->z2[9] = (mask & (point->z2[9] ^ temp_point->z2[9])) ^ point->z2[9];
    2e90:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    2e92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2e94:	4053      	eors	r3, r2
    2e96:	4023      	ands	r3, r4
    2e98:	4053      	eors	r3, r2
    2e9a:	9347      	str	r3, [sp, #284]	; 0x11c
        point->t2[0] = (mask & (point->t2[0] ^ temp_point->t2[0])) ^ point->t2[0];
    2e9c:	9a48      	ldr	r2, [sp, #288]	; 0x120
    2e9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2ea0:	4053      	eors	r3, r2
    2ea2:	4023      	ands	r3, r4
    2ea4:	4053      	eors	r3, r2
    2ea6:	9348      	str	r3, [sp, #288]	; 0x120
        point->t2[1] = (mask & (point->t2[1] ^ temp_point->t2[1])) ^ point->t2[1];
    2ea8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    2eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2eac:	4053      	eors	r3, r2
    2eae:	4023      	ands	r3, r4
    2eb0:	4053      	eors	r3, r2
    2eb2:	9349      	str	r3, [sp, #292]	; 0x124
        point->t2[2] = (mask & (point->t2[2] ^ temp_point->t2[2])) ^ point->t2[2];
    2eb4:	2280      	movs	r2, #128	; 0x80
    2eb6:	ab02      	add	r3, sp, #8
    2eb8:	21a0      	movs	r1, #160	; 0xa0
    2eba:	185b      	adds	r3, r3, r1
    2ebc:	5899      	ldr	r1, [r3, r2]
    2ebe:	ab02      	add	r3, sp, #8
    2ec0:	589b      	ldr	r3, [r3, r2]
    2ec2:	404b      	eors	r3, r1
    2ec4:	4023      	ands	r3, r4
    2ec6:	404b      	eors	r3, r1
    2ec8:	a902      	add	r1, sp, #8
    2eca:	20a0      	movs	r0, #160	; 0xa0
    2ecc:	1809      	adds	r1, r1, r0
    2ece:	508b      	str	r3, [r1, r2]
        point->t2[3] = (mask & (point->t2[3] ^ temp_point->t2[3])) ^ point->t2[3];
    2ed0:	3204      	adds	r2, #4
    2ed2:	ab02      	add	r3, sp, #8
    2ed4:	21a0      	movs	r1, #160	; 0xa0
    2ed6:	185b      	adds	r3, r3, r1
    2ed8:	5899      	ldr	r1, [r3, r2]
    2eda:	ab02      	add	r3, sp, #8
    2edc:	589b      	ldr	r3, [r3, r2]
    2ede:	404b      	eors	r3, r1
    2ee0:	4023      	ands	r3, r4
    2ee2:	404b      	eors	r3, r1
    2ee4:	a902      	add	r1, sp, #8
    2ee6:	1809      	adds	r1, r1, r0
    2ee8:	508b      	str	r3, [r1, r2]
        point->t2[4] = (mask & (point->t2[4] ^ temp_point->t2[4])) ^ point->t2[4];
    2eea:	3204      	adds	r2, #4
    2eec:	ab02      	add	r3, sp, #8
    2eee:	21a0      	movs	r1, #160	; 0xa0
    2ef0:	185b      	adds	r3, r3, r1
    2ef2:	5899      	ldr	r1, [r3, r2]
    2ef4:	ab02      	add	r3, sp, #8
    2ef6:	589b      	ldr	r3, [r3, r2]
    2ef8:	404b      	eors	r3, r1
    2efa:	4023      	ands	r3, r4
    2efc:	404b      	eors	r3, r1
    2efe:	a902      	add	r1, sp, #8
    2f00:	1809      	adds	r1, r1, r0
    2f02:	508b      	str	r3, [r1, r2]
        point->t2[5] = (mask & (point->t2[5] ^ temp_point->t2[5])) ^ point->t2[5];
    2f04:	3204      	adds	r2, #4
    2f06:	ab02      	add	r3, sp, #8
    2f08:	21a0      	movs	r1, #160	; 0xa0
    2f0a:	185b      	adds	r3, r3, r1
    2f0c:	5899      	ldr	r1, [r3, r2]
    2f0e:	ab02      	add	r3, sp, #8
    2f10:	589b      	ldr	r3, [r3, r2]
    2f12:	404b      	eors	r3, r1
    2f14:	4023      	ands	r3, r4
    2f16:	404b      	eors	r3, r1
    2f18:	a902      	add	r1, sp, #8
    2f1a:	1809      	adds	r1, r1, r0
    2f1c:	508b      	str	r3, [r1, r2]
        point->t2[6] = (mask & (point->t2[6] ^ temp_point->t2[6])) ^ point->t2[6];
    2f1e:	3204      	adds	r2, #4
    2f20:	ab02      	add	r3, sp, #8
    2f22:	21a0      	movs	r1, #160	; 0xa0
    2f24:	185b      	adds	r3, r3, r1
    2f26:	5899      	ldr	r1, [r3, r2]
    2f28:	ab02      	add	r3, sp, #8
    2f2a:	589b      	ldr	r3, [r3, r2]
    2f2c:	404b      	eors	r3, r1
    2f2e:	4023      	ands	r3, r4
    2f30:	404b      	eors	r3, r1
    2f32:	a902      	add	r1, sp, #8
    2f34:	1809      	adds	r1, r1, r0
    2f36:	508b      	str	r3, [r1, r2]
        point->t2[7] = (mask & (point->t2[7] ^ temp_point->t2[7])) ^ point->t2[7];
    2f38:	3204      	adds	r2, #4
    2f3a:	ab02      	add	r3, sp, #8
    2f3c:	21a0      	movs	r1, #160	; 0xa0
    2f3e:	185b      	adds	r3, r3, r1
    2f40:	5899      	ldr	r1, [r3, r2]
    2f42:	ab02      	add	r3, sp, #8
    2f44:	589b      	ldr	r3, [r3, r2]
    2f46:	404b      	eors	r3, r1
    2f48:	4023      	ands	r3, r4
    2f4a:	404b      	eors	r3, r1
    2f4c:	a902      	add	r1, sp, #8
    2f4e:	1809      	adds	r1, r1, r0
    2f50:	508b      	str	r3, [r1, r2]
        point->t2[8] = (mask & (point->t2[8] ^ temp_point->t2[8])) ^ point->t2[8];
    2f52:	3204      	adds	r2, #4
    2f54:	ab02      	add	r3, sp, #8
    2f56:	21a0      	movs	r1, #160	; 0xa0
    2f58:	185b      	adds	r3, r3, r1
    2f5a:	5899      	ldr	r1, [r3, r2]
    2f5c:	ab02      	add	r3, sp, #8
    2f5e:	589b      	ldr	r3, [r3, r2]
    2f60:	404b      	eors	r3, r1
    2f62:	4023      	ands	r3, r4
    2f64:	404b      	eors	r3, r1
    2f66:	a902      	add	r1, sp, #8
    2f68:	1809      	adds	r1, r1, r0
    2f6a:	508b      	str	r3, [r1, r2]
        point->t2[9] = (mask & (point->t2[9] ^ temp_point->t2[9])) ^ point->t2[9];
    2f6c:	239c      	movs	r3, #156	; 0x9c
    2f6e:	aa02      	add	r2, sp, #8
    2f70:	21a0      	movs	r1, #160	; 0xa0
    2f72:	1852      	adds	r2, r2, r1
    2f74:	58d1      	ldr	r1, [r2, r3]
    2f76:	aa02      	add	r2, sp, #8
    2f78:	58d2      	ldr	r2, [r2, r3]
    2f7a:	9201      	str	r2, [sp, #4]
    2f7c:	404a      	eors	r2, r1
    2f7e:	4014      	ands	r4, r2
    2f80:	404c      	eors	r4, r1
    2f82:	aa02      	add	r2, sp, #8
    2f84:	21a0      	movs	r1, #160	; 0xa0
    2f86:	1852      	adds	r2, r2, r1
    2f88:	50d4      	str	r4, [r2, r3]
    2f8a:	35a0      	adds	r5, #160	; 0xa0
    for (i = 1; i < 8; i++)
    2f8c:	454d      	cmp	r5, r9
    2f8e:	d000      	beq.n	2f92 <table_lookup_1x8+0x2ca>
    2f90:	e6ba      	b.n	2d08 <table_lookup_1x8+0x40>
    }
    
    v2copy1271(point->t2, temp_point->t2);
    2f92:	a920      	add	r1, sp, #128	; 0x80
    2f94:	a848      	add	r0, sp, #288	; 0x120
    2f96:	4c1e      	ldr	r4, [pc, #120]	; (3010 <table_lookup_1x8+0x348>)
    2f98:	47a0      	blx	r4
    v2copy1271(point->xy, temp_point->yx);                                   // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    2f9a:	a90c      	add	r1, sp, #48	; 0x30
    2f9c:	a82a      	add	r0, sp, #168	; 0xa8
    2f9e:	47a0      	blx	r4
    v2copy1271(point->yx, temp_point->xy);                                   
    2fa0:	a902      	add	r1, sp, #8
    2fa2:	a834      	add	r0, sp, #208	; 0xd0
    2fa4:	47a0      	blx	r4
    vneg1271(&temp_point->t2[0]);                                            // Negate 2dt coordinate
    2fa6:	a820      	add	r0, sp, #128	; 0x80
    2fa8:	4c1a      	ldr	r4, [pc, #104]	; (3014 <table_lookup_1x8+0x34c>)
    2faa:	47a0      	blx	r4
    vneg1271(&temp_point->t2[VWORDS_FIELD]);             
    2fac:	a825      	add	r0, sp, #148	; 0x94
    2fae:	47a0      	blx	r4
    2fb0:	ab2a      	add	r3, sp, #168	; 0xa8
    2fb2:	a902      	add	r1, sp, #8
    2fb4:	a834      	add	r0, sp, #208	; 0xd0
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                   // If sign_mask = 0 then choose negative of the point
        point->xy[j] = ((digit_t)((int)sign_mask) & (point->xy[j] ^ temp_point->xy[j])) ^ temp_point->xy[j];
    2fb6:	680c      	ldr	r4, [r1, #0]
    2fb8:	681a      	ldr	r2, [r3, #0]
    2fba:	4062      	eors	r2, r4
    2fbc:	4032      	ands	r2, r6
    2fbe:	4062      	eors	r2, r4
    2fc0:	601a      	str	r2, [r3, #0]
        point->yx[j] = ((digit_t)((int)sign_mask) & (point->yx[j] ^ temp_point->yx[j])) ^ temp_point->yx[j];
    2fc2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    2fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2fc6:	4062      	eors	r2, r4
    2fc8:	4032      	ands	r2, r6
    2fca:	4062      	eors	r2, r4
    2fcc:	629a      	str	r2, [r3, #40]	; 0x28
        point->t2[j] = ((digit_t)((int)sign_mask) & (point->t2[j] ^ temp_point->t2[j])) ^ temp_point->t2[j];
    2fce:	6f8c      	ldr	r4, [r1, #120]	; 0x78
    2fd0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    2fd2:	4062      	eors	r2, r4
    2fd4:	4032      	ands	r2, r6
    2fd6:	4062      	eors	r2, r4
    2fd8:	679a      	str	r2, [r3, #120]	; 0x78
    2fda:	3304      	adds	r3, #4
    2fdc:	3104      	adds	r1, #4
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                   // If sign_mask = 0 then choose negative of the point
    2fde:	4283      	cmp	r3, r0
    2fe0:	d1e9      	bne.n	2fb6 <table_lookup_1x8+0x2ee>
    }                                
    ecccopy_precomp(point, P); 
    2fe2:	4651      	mov	r1, sl
    2fe4:	a82a      	add	r0, sp, #168	; 0xa8
    2fe6:	4c0a      	ldr	r4, [pc, #40]	; (3010 <table_lookup_1x8+0x348>)
    2fe8:	47a0      	blx	r4
    2fea:	4651      	mov	r1, sl
    2fec:	3128      	adds	r1, #40	; 0x28
    2fee:	a834      	add	r0, sp, #208	; 0xd0
    2ff0:	47a0      	blx	r4
    2ff2:	4651      	mov	r1, sl
    2ff4:	3150      	adds	r1, #80	; 0x50
    2ff6:	a83e      	add	r0, sp, #248	; 0xf8
    2ff8:	47a0      	blx	r4
    2ffa:	4651      	mov	r1, sl
    2ffc:	3178      	adds	r1, #120	; 0x78
    2ffe:	a848      	add	r0, sp, #288	; 0x120
    3000:	47a0      	blx	r4
#endif
}
    3002:	b052      	add	sp, #328	; 0x148
    3004:	bc1c      	pop	{r2, r3, r4}
    3006:	4690      	mov	r8, r2
    3008:	4699      	mov	r9, r3
    300a:	46a2      	mov	sl, r4
    300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    300e:	46c0      	nop			; (mov r8, r8)
    3010:	00002c9f 	.word	0x00002c9f
    3014:	000020e9 	.word	0x000020e9

00003018 <table_lookup_fixed_base>:


void table_lookup_fixed_base(vpoint_precomp_t* table, vpoint_precomp_t P, unsigned int digit, unsigned int sign)
{ // Constant-time table lookup to extract a point represented as (x+y,y-x,2t) corresponding to extended twisted Edwards coordinates (X:Y:Z:T) with Z=1
    3018:	b5f0      	push	{r4, r5, r6, r7, lr}
    301a:	46de      	mov	lr, fp
    301c:	4657      	mov	r7, sl
    301e:	464e      	mov	r6, r9
    3020:	4645      	mov	r5, r8
    3022:	b5e0      	push	{r5, r6, r7, lr}
    3024:	b0bf      	sub	sp, #252	; 0xfc
    3026:	0004      	movs	r4, r0
    3028:	9101      	str	r1, [sp, #4]
    302a:	4692      	mov	sl, r2
    302c:	469b      	mov	fp, r3
#else
    vpoint_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                   
    ecccopy_precomp_fixed_base(table[0], point);                             // point = table[0]
    302e:	a920      	add	r1, sp, #128	; 0x80
    3030:	4d42      	ldr	r5, [pc, #264]	; (313c <table_lookup_fixed_base+0x124>)
    3032:	47a8      	blx	r5
    3034:	0020      	movs	r0, r4
    3036:	3028      	adds	r0, #40	; 0x28
    3038:	a92a      	add	r1, sp, #168	; 0xa8
    303a:	47a8      	blx	r5
    303c:	0020      	movs	r0, r4
    303e:	3050      	adds	r0, #80	; 0x50
    3040:	a934      	add	r1, sp, #208	; 0xd0
    3042:	47a8      	blx	r5
    3044:	0027      	movs	r7, r4
    3046:	3778      	adds	r7, #120	; 0x78
    3048:	0023      	movs	r3, r4
    304a:	22f0      	movs	r2, #240	; 0xf0
    304c:	00d2      	lsls	r2, r2, #3
    304e:	4694      	mov	ip, r2
    3050:	4463      	add	r3, ip
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    3052:	4a3a      	ldr	r2, [pc, #232]	; (313c <table_lookup_fixed_base+0x124>)
    3054:	4691      	mov	r9, r2
    3056:	4698      	mov	r8, r3
    3058:	4654      	mov	r4, sl
    305a:	e003      	b.n	3064 <table_lookup_fixed_base+0x4c>
    305c:	4664      	mov	r4, ip
    305e:	3778      	adds	r7, #120	; 0x78
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    3060:	4547      	cmp	r7, r8
    3062:	d02e      	beq.n	30c2 <table_lookup_fixed_base+0xaa>
        digit--;
    3064:	3c01      	subs	r4, #1
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    3066:	0fe5      	lsrs	r5, r4, #31
    3068:	3d01      	subs	r5, #1
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    306a:	a902      	add	r1, sp, #8
    306c:	0038      	movs	r0, r7
    306e:	47c8      	blx	r9
    3070:	0038      	movs	r0, r7
    3072:	3028      	adds	r0, #40	; 0x28
    3074:	a90c      	add	r1, sp, #48	; 0x30
    3076:	47c8      	blx	r9
    3078:	0038      	movs	r0, r7
    307a:	3050      	adds	r0, #80	; 0x50
    307c:	a916      	add	r1, sp, #88	; 0x58
    307e:	47c8      	blx	r9
    3080:	ae20      	add	r6, sp, #128	; 0x80
    3082:	ab02      	add	r3, sp, #8
    3084:	469a      	mov	sl, r3
    3086:	a82a      	add	r0, sp, #168	; 0xa8
    3088:	0019      	movs	r1, r3
    308a:	0032      	movs	r2, r6
    308c:	46a4      	mov	ip, r4
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point
        for (j = 0; j < 2*VWORDS_FIELD; j++) {
            point->xy[j] = (mask & (point->xy[j] ^ temp_point->xy[j])) ^ point->xy[j];
    308e:	6813      	ldr	r3, [r2, #0]
    3090:	680c      	ldr	r4, [r1, #0]
    3092:	4063      	eors	r3, r4
    3094:	402b      	ands	r3, r5
    3096:	6814      	ldr	r4, [r2, #0]
    3098:	4063      	eors	r3, r4
    309a:	6013      	str	r3, [r2, #0]
            point->yx[j] = (mask & (point->yx[j] ^ temp_point->yx[j])) ^ point->yx[j];
    309c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    309e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    30a0:	4063      	eors	r3, r4
    30a2:	402b      	ands	r3, r5
    30a4:	6a94      	ldr	r4, [r2, #40]	; 0x28
    30a6:	4063      	eors	r3, r4
    30a8:	6293      	str	r3, [r2, #40]	; 0x28
            point->t2[j] = (mask & (point->t2[j] ^ temp_point->t2[j])) ^ point->t2[j];
    30aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
    30ac:	6d0c      	ldr	r4, [r1, #80]	; 0x50
    30ae:	4063      	eors	r3, r4
    30b0:	402b      	ands	r3, r5
    30b2:	6d14      	ldr	r4, [r2, #80]	; 0x50
    30b4:	4063      	eors	r3, r4
    30b6:	6513      	str	r3, [r2, #80]	; 0x50
    30b8:	3204      	adds	r2, #4
    30ba:	3104      	adds	r1, #4
        for (j = 0; j < 2*VWORDS_FIELD; j++) {
    30bc:	4282      	cmp	r2, r0
    30be:	d1e6      	bne.n	308e <table_lookup_fixed_base+0x76>
    30c0:	e7cc      	b.n	305c <table_lookup_fixed_base+0x44>
    30c2:	0014      	movs	r4, r2
        }
    }
    
    v2copy1271(point->t2, temp_point->t2);
    30c4:	a916      	add	r1, sp, #88	; 0x58
    30c6:	a834      	add	r0, sp, #208	; 0xd0
    30c8:	4d1c      	ldr	r5, [pc, #112]	; (313c <table_lookup_fixed_base+0x124>)
    30ca:	47a8      	blx	r5
    v2copy1271(point->xy, temp_point->yx);                                  // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    30cc:	a90c      	add	r1, sp, #48	; 0x30
    30ce:	a820      	add	r0, sp, #128	; 0x80
    30d0:	47a8      	blx	r5
    v2copy1271(point->yx, temp_point->xy);                                   
    30d2:	a902      	add	r1, sp, #8
    30d4:	a82a      	add	r0, sp, #168	; 0xa8
    30d6:	47a8      	blx	r5
    vneg1271(&temp_point->t2[0]);                                            // Negate 2dt coordinate
    30d8:	a816      	add	r0, sp, #88	; 0x58
    30da:	4d19      	ldr	r5, [pc, #100]	; (3140 <table_lookup_fixed_base+0x128>)
    30dc:	47a8      	blx	r5
    vneg1271(&temp_point->t2[VWORDS_FIELD]);             
    30de:	a81b      	add	r0, sp, #108	; 0x6c
    30e0:	47a8      	blx	r5
    30e2:	4652      	mov	r2, sl
    30e4:	4659      	mov	r1, fp
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
        point->xy[j] = ((digit_t)((int)sign) & (point->xy[j] ^ temp_point->xy[j])) ^ point->xy[j];
    30e6:	6830      	ldr	r0, [r6, #0]
    30e8:	6813      	ldr	r3, [r2, #0]
    30ea:	4043      	eors	r3, r0
    30ec:	400b      	ands	r3, r1
    30ee:	4043      	eors	r3, r0
    30f0:	6033      	str	r3, [r6, #0]
        point->yx[j] = ((digit_t)((int)sign) & (point->yx[j] ^ temp_point->yx[j])) ^ point->yx[j];
    30f2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    30f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    30f6:	4043      	eors	r3, r0
    30f8:	400b      	ands	r3, r1
    30fa:	4043      	eors	r3, r0
    30fc:	62b3      	str	r3, [r6, #40]	; 0x28
        point->t2[j] = ((digit_t)((int)sign) & (point->t2[j] ^ temp_point->t2[j])) ^ point->t2[j];
    30fe:	6d30      	ldr	r0, [r6, #80]	; 0x50
    3100:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3102:	4043      	eors	r3, r0
    3104:	400b      	ands	r3, r1
    3106:	4043      	eors	r3, r0
    3108:	6533      	str	r3, [r6, #80]	; 0x50
    310a:	3604      	adds	r6, #4
    310c:	3204      	adds	r2, #4
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
    310e:	42a6      	cmp	r6, r4
    3110:	d1e9      	bne.n	30e6 <table_lookup_fixed_base+0xce>
    }                                  
    ecccopy_precomp_fixed_base(point, P);
    3112:	9d01      	ldr	r5, [sp, #4]
    3114:	0029      	movs	r1, r5
    3116:	a820      	add	r0, sp, #128	; 0x80
    3118:	4c08      	ldr	r4, [pc, #32]	; (313c <table_lookup_fixed_base+0x124>)
    311a:	47a0      	blx	r4
    311c:	0029      	movs	r1, r5
    311e:	3128      	adds	r1, #40	; 0x28
    3120:	a82a      	add	r0, sp, #168	; 0xa8
    3122:	47a0      	blx	r4
    3124:	0029      	movs	r1, r5
    3126:	3150      	adds	r1, #80	; 0x50
    3128:	a834      	add	r0, sp, #208	; 0xd0
    312a:	47a0      	blx	r4
#endif
}
    312c:	b03f      	add	sp, #252	; 0xfc
    312e:	bc3c      	pop	{r2, r3, r4, r5}
    3130:	4690      	mov	r8, r2
    3132:	4699      	mov	r9, r3
    3134:	46a2      	mov	sl, r4
    3136:	46ab      	mov	fp, r5
    3138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	00002c9f 	.word	0x00002c9f
    3140:	000020e9 	.word	0x000020e9

00003144 <v2zero1271>:


void v2zero1271(v2elm_t a) 
{ // Zeroing vectorized GF(p^2) element, a = 0
    
    a[0] = 0; a[1] = 0; a[2] = 0; a[3] = 0; a[4] = 0; 
    3144:	2300      	movs	r3, #0
    3146:	6003      	str	r3, [r0, #0]
    3148:	6043      	str	r3, [r0, #4]
    314a:	6083      	str	r3, [r0, #8]
    314c:	60c3      	str	r3, [r0, #12]
    314e:	6103      	str	r3, [r0, #16]
    a[5] = 0; a[6] = 0; a[7] = 0; a[8] = 0; a[9] = 0;
    3150:	6143      	str	r3, [r0, #20]
    3152:	6183      	str	r3, [r0, #24]
    3154:	61c3      	str	r3, [r0, #28]
    3156:	6203      	str	r3, [r0, #32]
    3158:	6243      	str	r3, [r0, #36]	; 0x24
}
    315a:	4770      	bx	lr

0000315c <v2add1271>:


__inline void v2add1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) addition, c = a+b in GF((2^127-1)^2)
    315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    315e:	0004      	movs	r4, r0
    3160:	000d      	movs	r5, r1
    3162:	0016      	movs	r6, r2
    vadd1271(&a[0], &b[0], &c[0]);
    3164:	4f04      	ldr	r7, [pc, #16]	; (3178 <v2add1271+0x1c>)
    3166:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3168:	0032      	movs	r2, r6
    316a:	3214      	adds	r2, #20
    316c:	0029      	movs	r1, r5
    316e:	3114      	adds	r1, #20
    3170:	0020      	movs	r0, r4
    3172:	3014      	adds	r0, #20
    3174:	47b8      	blx	r7
}
    3176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3178:	0000207f 	.word	0x0000207f

0000317c <v2sub1271>:


__inline void v2sub1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) subtraction, c = a-b in GF((2^127-1)^2)
    317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    317e:	0004      	movs	r4, r0
    3180:	000d      	movs	r5, r1
    3182:	0016      	movs	r6, r2
    vsub1271(&a[0], &b[0], &c[0]);
    3184:	4f04      	ldr	r7, [pc, #16]	; (3198 <v2sub1271+0x1c>)
    3186:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3188:	0032      	movs	r2, r6
    318a:	3214      	adds	r2, #20
    318c:	0029      	movs	r1, r5
    318e:	3114      	adds	r1, #20
    3190:	0020      	movs	r0, r4
    3192:	3014      	adds	r0, #20
    3194:	47b8      	blx	r7
}
    3196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3198:	000020bb 	.word	0x000020bb

0000319c <v2dblsub1271>:


void v2dblsub1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) addition followed by subtraction, c = 2a-b in GF((2^127-1)^2) 
    319c:	b510      	push	{r4, lr}
    
    c[0] = (a[0] << 1) - b[0];
    319e:	6803      	ldr	r3, [r0, #0]
    31a0:	005b      	lsls	r3, r3, #1
    31a2:	680c      	ldr	r4, [r1, #0]
    31a4:	1b1b      	subs	r3, r3, r4
    31a6:	6013      	str	r3, [r2, #0]
    c[1] = (a[1] << 1) - b[1];
    31a8:	6843      	ldr	r3, [r0, #4]
    31aa:	005b      	lsls	r3, r3, #1
    31ac:	684c      	ldr	r4, [r1, #4]
    31ae:	1b1b      	subs	r3, r3, r4
    31b0:	6053      	str	r3, [r2, #4]
    c[2] = (a[2] << 1) - b[2];
    31b2:	6883      	ldr	r3, [r0, #8]
    31b4:	005b      	lsls	r3, r3, #1
    31b6:	688c      	ldr	r4, [r1, #8]
    31b8:	1b1b      	subs	r3, r3, r4
    31ba:	6093      	str	r3, [r2, #8]
    c[3] = (a[3] << 1) - b[3];
    31bc:	68c3      	ldr	r3, [r0, #12]
    31be:	005b      	lsls	r3, r3, #1
    31c0:	68cc      	ldr	r4, [r1, #12]
    31c2:	1b1b      	subs	r3, r3, r4
    31c4:	60d3      	str	r3, [r2, #12]
    c[4] = (a[4] << 1) - b[4];
    31c6:	6903      	ldr	r3, [r0, #16]
    31c8:	005b      	lsls	r3, r3, #1
    31ca:	690c      	ldr	r4, [r1, #16]
    31cc:	1b1b      	subs	r3, r3, r4
    31ce:	6113      	str	r3, [r2, #16]
    c[5] = (a[5] << 1) - b[5];
    31d0:	6943      	ldr	r3, [r0, #20]
    31d2:	005b      	lsls	r3, r3, #1
    31d4:	694c      	ldr	r4, [r1, #20]
    31d6:	1b1b      	subs	r3, r3, r4
    31d8:	6153      	str	r3, [r2, #20]
    c[6] = (a[6] << 1) - b[6];
    31da:	6983      	ldr	r3, [r0, #24]
    31dc:	005b      	lsls	r3, r3, #1
    31de:	698c      	ldr	r4, [r1, #24]
    31e0:	1b1b      	subs	r3, r3, r4
    31e2:	6193      	str	r3, [r2, #24]
    c[7] = (a[7] << 1) - b[7];
    31e4:	69c3      	ldr	r3, [r0, #28]
    31e6:	005b      	lsls	r3, r3, #1
    31e8:	69cc      	ldr	r4, [r1, #28]
    31ea:	1b1b      	subs	r3, r3, r4
    31ec:	61d3      	str	r3, [r2, #28]
    c[8] = (a[8] << 1) - b[8];
    31ee:	6a03      	ldr	r3, [r0, #32]
    31f0:	005b      	lsls	r3, r3, #1
    31f2:	6a0c      	ldr	r4, [r1, #32]
    31f4:	1b1b      	subs	r3, r3, r4
    31f6:	6213      	str	r3, [r2, #32]
    c[9] = (a[9] << 1) - b[9];
    31f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    31fa:	005b      	lsls	r3, r3, #1
    31fc:	6a49      	ldr	r1, [r1, #36]	; 0x24
    31fe:	1a5b      	subs	r3, r3, r1
    3200:	6253      	str	r3, [r2, #36]	; 0x24
}
    3202:	bd10      	pop	{r4, pc}

00003204 <v2neg1271>:

void v2neg1271(v2elm_t a) 
{ // Vectorized GF(p^2) negation
  // Representation: 23/26/26/26/26/23/26/26/26/26-bit
    
    a[0] = mask_26 - a[0];
    3204:	4b10      	ldr	r3, [pc, #64]	; (3248 <v2neg1271+0x44>)
    3206:	6802      	ldr	r2, [r0, #0]
    3208:	1a9a      	subs	r2, r3, r2
    320a:	6002      	str	r2, [r0, #0]
    a[1] = mask_26 - a[1];
    320c:	6842      	ldr	r2, [r0, #4]
    320e:	1a9a      	subs	r2, r3, r2
    3210:	6042      	str	r2, [r0, #4]
    a[2] = mask_26 - a[2];
    3212:	6882      	ldr	r2, [r0, #8]
    3214:	1a9a      	subs	r2, r3, r2
    3216:	6082      	str	r2, [r0, #8]
    a[3] = mask_26 - a[3];
    3218:	68c2      	ldr	r2, [r0, #12]
    321a:	1a9a      	subs	r2, r3, r2
    321c:	60c2      	str	r2, [r0, #12]
    a[4] = mask_23 - a[4];
    321e:	4a0b      	ldr	r2, [pc, #44]	; (324c <v2neg1271+0x48>)
    3220:	6901      	ldr	r1, [r0, #16]
    3222:	1a51      	subs	r1, r2, r1
    3224:	6101      	str	r1, [r0, #16]
    a[5] = mask_26 - a[5];
    3226:	6941      	ldr	r1, [r0, #20]
    3228:	1a59      	subs	r1, r3, r1
    322a:	6141      	str	r1, [r0, #20]
    a[6] = mask_26 - a[6];
    322c:	6981      	ldr	r1, [r0, #24]
    322e:	1a59      	subs	r1, r3, r1
    3230:	6181      	str	r1, [r0, #24]
    a[7] = mask_26 - a[7];
    3232:	69c1      	ldr	r1, [r0, #28]
    3234:	1a59      	subs	r1, r3, r1
    3236:	61c1      	str	r1, [r0, #28]
    a[8] = mask_26 - a[8];
    3238:	6a01      	ldr	r1, [r0, #32]
    323a:	1a5b      	subs	r3, r3, r1
    323c:	6203      	str	r3, [r0, #32]
    a[9] = mask_23 - a[9];
    323e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3240:	1ad2      	subs	r2, r2, r3
    3242:	6242      	str	r2, [r0, #36]	; 0x24
}
    3244:	4770      	bx	lr
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	03ffffff 	.word	0x03ffffff
    324c:	007fffff 	.word	0x007fffff

00003250 <v2div1271>:


void v2div1271(uint32_t* a) 
{ // GF(p^2) division by two, c = a/2 mod p
    3250:	b5f0      	push	{r4, r5, r6, r7, lr}
    3252:	46c6      	mov	lr, r8
    3254:	b500      	push	{lr}
    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    3256:	6804      	ldr	r4, [r0, #0]
    3258:	2301      	movs	r3, #1
    325a:	4698      	mov	r8, r3
    325c:	001a      	movs	r2, r3
    325e:	4022      	ands	r2, r4
    3260:	4252      	negs	r2, r2
    3262:	0991      	lsrs	r1, r2, #6
    a[1] += mask;
    3264:	6843      	ldr	r3, [r0, #4]
    3266:	18ce      	adds	r6, r1, r3
    a[2] += mask;
    3268:	6883      	ldr	r3, [r0, #8]
    326a:	18cd      	adds	r5, r1, r3
    a[3] += mask;
    326c:	68c3      	ldr	r3, [r0, #12]
    326e:	18cf      	adds	r7, r1, r3
    a[4] += (mask >> 3);
    3270:	0a52      	lsrs	r2, r2, #9
    3272:	6903      	ldr	r3, [r0, #16]
    3274:	469c      	mov	ip, r3
    3276:	4462      	add	r2, ip
    a[0] += mask;
    3278:	1864      	adds	r4, r4, r1
    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    327a:	1064      	asrs	r4, r4, #1
    327c:	0673      	lsls	r3, r6, #25
    327e:	2180      	movs	r1, #128	; 0x80
    3280:	0489      	lsls	r1, r1, #18
    3282:	400b      	ands	r3, r1
    3284:	469c      	mov	ip, r3
    3286:	4464      	add	r4, ip
    3288:	6004      	str	r4, [r0, #0]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    328a:	066c      	lsls	r4, r5, #25
    328c:	400c      	ands	r4, r1
    328e:	1076      	asrs	r6, r6, #1
    3290:	19a6      	adds	r6, r4, r6
    3292:	6046      	str	r6, [r0, #4]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    3294:	067c      	lsls	r4, r7, #25
    3296:	400c      	ands	r4, r1
    3298:	106d      	asrs	r5, r5, #1
    329a:	1965      	adds	r5, r4, r5
    329c:	6085      	str	r5, [r0, #8]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    329e:	0654      	lsls	r4, r2, #25
    32a0:	400c      	ands	r4, r1
    32a2:	107f      	asrs	r7, r7, #1
    32a4:	19e7      	adds	r7, r4, r7
    32a6:	60c7      	str	r7, [r0, #12]
    a[4] = ((sdigit_t)a[4] >> 1);
    32a8:	1052      	asrs	r2, r2, #1
    32aa:	6102      	str	r2, [r0, #16]
    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    32ac:	6942      	ldr	r2, [r0, #20]
    32ae:	4643      	mov	r3, r8
    32b0:	4013      	ands	r3, r2
    32b2:	425b      	negs	r3, r3
    32b4:	099f      	lsrs	r7, r3, #6
    a[1] += mask;
    32b6:	6984      	ldr	r4, [r0, #24]
    32b8:	193e      	adds	r6, r7, r4
    a[2] += mask;
    32ba:	69c4      	ldr	r4, [r0, #28]
    32bc:	193d      	adds	r5, r7, r4
    a[3] += mask;
    32be:	6a04      	ldr	r4, [r0, #32]
    32c0:	193c      	adds	r4, r7, r4
    a[4] += (mask >> 3);
    32c2:	0a5b      	lsrs	r3, r3, #9
    32c4:	4698      	mov	r8, r3
    32c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    32c8:	469c      	mov	ip, r3
    32ca:	4643      	mov	r3, r8
    32cc:	4463      	add	r3, ip
    a[0] += mask;
    32ce:	19d2      	adds	r2, r2, r7
    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    32d0:	1052      	asrs	r2, r2, #1
    32d2:	0677      	lsls	r7, r6, #25
    32d4:	400f      	ands	r7, r1
    32d6:	19d2      	adds	r2, r2, r7
    32d8:	6142      	str	r2, [r0, #20]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    32da:	066a      	lsls	r2, r5, #25
    32dc:	400a      	ands	r2, r1
    32de:	1076      	asrs	r6, r6, #1
    32e0:	1996      	adds	r6, r2, r6
    32e2:	6186      	str	r6, [r0, #24]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    32e4:	0662      	lsls	r2, r4, #25
    32e6:	400a      	ands	r2, r1
    32e8:	106d      	asrs	r5, r5, #1
    32ea:	1955      	adds	r5, r2, r5
    32ec:	61c5      	str	r5, [r0, #28]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    32ee:	065a      	lsls	r2, r3, #25
    32f0:	4011      	ands	r1, r2
    32f2:	1064      	asrs	r4, r4, #1
    32f4:	190c      	adds	r4, r1, r4
    32f6:	6204      	str	r4, [r0, #32]
    a[4] = ((sdigit_t)a[4] >> 1);
    32f8:	105b      	asrs	r3, r3, #1
    32fa:	6243      	str	r3, [r0, #36]	; 0x24
    vdiv1271(&a[0]);
    vdiv1271(&a[VWORDS_FIELD]);
}
    32fc:	bc04      	pop	{r2}
    32fe:	4690      	mov	r8, r2
    3300:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00003304 <v2mod1271_incomplete>:


void v2mod1271_incomplete(uint32_t* a, uint32_t* c) 
{ // Reduction of GF(p^2) element
    3304:	b570      	push	{r4, r5, r6, lr}
    3306:	0004      	movs	r4, r0
    3308:	000d      	movs	r5, r1
    vmod1271_incomplete(&a[0], &c[0]);
    330a:	4e04      	ldr	r6, [pc, #16]	; (331c <v2mod1271_incomplete+0x18>)
    330c:	47b0      	blx	r6
    vmod1271_incomplete(&a[VWORDS_FIELD], &c[VWORDS_FIELD]);
    330e:	0029      	movs	r1, r5
    3310:	3114      	adds	r1, #20
    3312:	0020      	movs	r0, r4
    3314:	3014      	adds	r0, #20
    3316:	47b0      	blx	r6
}
    3318:	bd70      	pop	{r4, r5, r6, pc}
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	00002585 	.word	0x00002585

00003320 <v2mod1271>:


void v2mod1271(uint32_t* a, uint32_t* c) 
{ // Reduction of GF(p^2) element
    3320:	b570      	push	{r4, r5, r6, lr}
    3322:	0004      	movs	r4, r0
    3324:	000d      	movs	r5, r1
    vmod1271(&a[0], &c[0]);
    3326:	4e04      	ldr	r6, [pc, #16]	; (3338 <v2mod1271+0x18>)
    3328:	47b0      	blx	r6
    vmod1271(&a[VWORDS_FIELD], &c[VWORDS_FIELD]);
    332a:	0029      	movs	r1, r5
    332c:	3114      	adds	r1, #20
    332e:	0020      	movs	r0, r4
    3330:	3014      	adds	r0, #20
    3332:	47b0      	blx	r6
}
    3334:	bd70      	pop	{r4, r5, r6, pc}
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	000025ed 	.word	0x000025ed

0000333c <v2mul1271>:


void v2mul1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // GF(p^2) multiplication, c = a*b in GF((2^127-1)^2) 
    333c:	b5f0      	push	{r4, r5, r6, r7, lr}
    333e:	b097      	sub	sp, #92	; 0x5c
    3340:	0006      	movs	r6, r0
    3342:	000d      	movs	r5, r1
    3344:	9201      	str	r2, [sp, #4]
    velm_t t1, t2, t3, t4;
    
    vmul1271(&a[0], &b[0], t1);                        // t1 = a0*b0
    3346:	ab11      	add	r3, sp, #68	; 0x44
    3348:	001a      	movs	r2, r3
    334a:	4c16      	ldr	r4, [pc, #88]	; (33a4 <v2mul1271+0x68>)
    334c:	47a0      	blx	r4
    vmul1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], t2);  // t2 = a1*b1
    334e:	2314      	movs	r3, #20
    3350:	469c      	mov	ip, r3
    3352:	44b4      	add	ip, r6
    3354:	4663      	mov	r3, ip
    3356:	002f      	movs	r7, r5
    3358:	3714      	adds	r7, #20
    335a:	a90c      	add	r1, sp, #48	; 0x30
    335c:	000a      	movs	r2, r1
    335e:	0039      	movs	r1, r7
    3360:	9300      	str	r3, [sp, #0]
    3362:	4660      	mov	r0, ip
    3364:	47a0      	blx	r4
    vadd1271(&a[0], &a[VWORDS_FIELD], t3);             // t3 = a0+a1
    3366:	a807      	add	r0, sp, #28
    3368:	0002      	movs	r2, r0
    336a:	9900      	ldr	r1, [sp, #0]
    336c:	0030      	movs	r0, r6
    336e:	4e0e      	ldr	r6, [pc, #56]	; (33a8 <v2mul1271+0x6c>)
    3370:	47b0      	blx	r6
    vadd1271(&b[0], &b[VWORDS_FIELD], t4);             // t4 = b0+b1
    3372:	aa02      	add	r2, sp, #8
    3374:	0039      	movs	r1, r7
    3376:	0028      	movs	r0, r5
    3378:	47b0      	blx	r6
    vsub1271(t1, t2, &c[0]);                           // c[0] = a0*b0 - a1*b1
    337a:	9e01      	ldr	r6, [sp, #4]
    337c:	0032      	movs	r2, r6
    337e:	a90c      	add	r1, sp, #48	; 0x30
    3380:	a811      	add	r0, sp, #68	; 0x44
    3382:	4d0a      	ldr	r5, [pc, #40]	; (33ac <v2mul1271+0x70>)
    3384:	47a8      	blx	r5
    vmul1271(t3, t4, t3);                              // t3 = (a0+a1)*(b0+b1)
    3386:	aa07      	add	r2, sp, #28
    3388:	a902      	add	r1, sp, #8
    338a:	0010      	movs	r0, r2
    338c:	47a0      	blx	r4
    vsub1271(t3, t1, t3);                              // t3 = (a0+a1)*(b0+b1) - a0*b0
    338e:	aa07      	add	r2, sp, #28
    3390:	a911      	add	r1, sp, #68	; 0x44
    3392:	0010      	movs	r0, r2
    3394:	47a8      	blx	r5
    vsub1271(t3, t2, &c[VWORDS_FIELD]);                // c[1] = (a0+a1)*(b0+b1) - a0*b0 - a1*b1
    3396:	0032      	movs	r2, r6
    3398:	3214      	adds	r2, #20
    339a:	a90c      	add	r1, sp, #48	; 0x30
    339c:	a807      	add	r0, sp, #28
    339e:	47a8      	blx	r5
}
    33a0:	b017      	add	sp, #92	; 0x5c
    33a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33a4:	00002115 	.word	0x00002115
    33a8:	0000207f 	.word	0x0000207f
    33ac:	000020bb 	.word	0x000020bb

000033b0 <v2sqr1271>:


void v2sqr1271(v2elm_t a, v2elm_t c)
{ // GF(p^2) squaring, c = a^2 in GF((2^127-1)^2) 
    33b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    33b2:	b091      	sub	sp, #68	; 0x44
    33b4:	0005      	movs	r5, r0
    33b6:	000c      	movs	r4, r1
    velm_t t1, t2, t3;

    vadd1271(&a[0], &a[VWORDS_FIELD], t1);             // t1 = a0+a1 
    33b8:	0006      	movs	r6, r0
    33ba:	3614      	adds	r6, #20
    33bc:	aa0b      	add	r2, sp, #44	; 0x2c
    33be:	0031      	movs	r1, r6
    33c0:	4f0b      	ldr	r7, [pc, #44]	; (33f0 <v2sqr1271+0x40>)
    33c2:	47b8      	blx	r7
    vsub1271(&a[0], &a[VWORDS_FIELD], t2);             // t2 = a0-a1
    33c4:	aa06      	add	r2, sp, #24
    33c6:	0031      	movs	r1, r6
    33c8:	0028      	movs	r0, r5
    33ca:	4b0a      	ldr	r3, [pc, #40]	; (33f4 <v2sqr1271+0x44>)
    33cc:	4798      	blx	r3
    vmul1271(&a[0], &a[VWORDS_FIELD], t3);             // t3 = a0*a1
    33ce:	aa01      	add	r2, sp, #4
    33d0:	0031      	movs	r1, r6
    33d2:	0028      	movs	r0, r5
    33d4:	4d08      	ldr	r5, [pc, #32]	; (33f8 <v2sqr1271+0x48>)
    33d6:	47a8      	blx	r5
    vmul1271(t1, t2, &c[0]);                           // c0 = (a0+a1)(a0-a1)
    33d8:	0022      	movs	r2, r4
    33da:	a906      	add	r1, sp, #24
    33dc:	a80b      	add	r0, sp, #44	; 0x2c
    33de:	47a8      	blx	r5
    vadd1271(t3, t3, &c[VWORDS_FIELD]);                // c1 = 2a0*a1
    33e0:	0022      	movs	r2, r4
    33e2:	3214      	adds	r2, #20
    33e4:	a901      	add	r1, sp, #4
    33e6:	0008      	movs	r0, r1
    33e8:	47b8      	blx	r7
}
    33ea:	b011      	add	sp, #68	; 0x44
    33ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33ee:	46c0      	nop			; (mov r8, r8)
    33f0:	0000207f 	.word	0x0000207f
    33f4:	000020bb 	.word	0x000020bb
    33f8:	00002115 	.word	0x00002115

000033fc <v2inv1271>:


void v2inv1271(v2elm_t a)
{ // Vectorized GF(p^2) inversion, a = (a0-i*a1)/(a0^2+a1^2)
    33fc:	b570      	push	{r4, r5, r6, lr}
    33fe:	b08a      	sub	sp, #40	; 0x28
    3400:	0005      	movs	r5, r0
    velm_t t0, t1; 

    vsqr1271(&a[0], t0);                               // t0 = a0^2
    3402:	a905      	add	r1, sp, #20
    3404:	4e0e      	ldr	r6, [pc, #56]	; (3440 <v2inv1271+0x44>)
    3406:	47b0      	blx	r6
    vsqr1271(&a[VWORDS_FIELD], t1);                    // t1 = a1^2 
    3408:	002c      	movs	r4, r5
    340a:	3414      	adds	r4, #20
    340c:	4669      	mov	r1, sp
    340e:	0020      	movs	r0, r4
    3410:	47b0      	blx	r6
    vadd1271(t0, t1, t0);                              // t0 = a0^2+a1^2 
    3412:	aa05      	add	r2, sp, #20
    3414:	4669      	mov	r1, sp
    3416:	0010      	movs	r0, r2
    3418:	4b0a      	ldr	r3, [pc, #40]	; (3444 <v2inv1271+0x48>)
    341a:	4798      	blx	r3
    vinv1271(t0);                                      // t0 = (a0^2+a1^2)^-1 
    341c:	a805      	add	r0, sp, #20
    341e:	4b0a      	ldr	r3, [pc, #40]	; (3448 <v2inv1271+0x4c>)
    3420:	4798      	blx	r3
    vneg1271(&a[VWORDS_FIELD]);                        // a = a0-i*a1 
    3422:	0020      	movs	r0, r4
    3424:	4b09      	ldr	r3, [pc, #36]	; (344c <v2inv1271+0x50>)
    3426:	4798      	blx	r3
    vmul1271(&a[0], t0, &a[0]);
    3428:	002a      	movs	r2, r5
    342a:	a905      	add	r1, sp, #20
    342c:	0028      	movs	r0, r5
    342e:	4d08      	ldr	r5, [pc, #32]	; (3450 <v2inv1271+0x54>)
    3430:	47a8      	blx	r5
    vmul1271(&a[VWORDS_FIELD], t0, &a[VWORDS_FIELD]);  // a = (a0-i*a1)*(a0^2+a1^2)^-1
    3432:	0022      	movs	r2, r4
    3434:	a905      	add	r1, sp, #20
    3436:	0020      	movs	r0, r4
    3438:	47a8      	blx	r5
}
    343a:	b00a      	add	sp, #40	; 0x28
    343c:	bd70      	pop	{r4, r5, r6, pc}
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	000023a9 	.word	0x000023a9
    3444:	0000207f 	.word	0x0000207f
    3448:	000027b1 	.word	0x000027b1
    344c:	000020e9 	.word	0x000020e9
    3450:	00002115 	.word	0x00002115

00003454 <clear_words>:
  // It has been tested with MSVS 2013 and GNU GCC 4.6.3, 4.7.3, 4.8.2 and 4.8.4. Users are responsible for verifying correctness with different compilers.  
  // See "Compliant Solution (C99)" at https://www.securecoding.cert.org/confluence/display/c/MSC06-C.+Beware+of+compiler+optimizations 
	unsigned int i;
	volatile unsigned int *v = mem;

	for (i = 0; i < nwords; i++)
    3454:	2900      	cmp	r1, #0
    3456:	d006      	beq.n	3466 <clear_words+0x12>
    3458:	0003      	movs	r3, r0
    345a:	0089      	lsls	r1, r1, #2
    345c:	1840      	adds	r0, r0, r1
		v[i] = 0;
    345e:	2200      	movs	r2, #0
    3460:	c304      	stmia	r3!, {r2}
	for (i = 0; i < nwords; i++)
    3462:	4283      	cmp	r3, r0
    3464:	d1fc      	bne.n	3460 <clear_words+0xc>
}
    3466:	4770      	bx	lr

00003468 <eccnorm>:
	fp2copy1271((felm_t*)&GENERATOR_y, P->y);    // Y1
}


__inline void eccnorm(vpoint_extproj_t P, vpoint_t Q)
{ // Normalize a projective point (X1:Y1:Z1), including full reduction
    3468:	b5f0      	push	{r4, r5, r6, r7, lr}
    346a:	b083      	sub	sp, #12
    346c:	0004      	movs	r4, r0
    346e:	000d      	movs	r5, r1
  // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates    
  // Output: Q = (X1/Z1,Y1/Z1), corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    
    v2inv1271(P->z);                      // Z1 = Z1^-1
    3470:	0007      	movs	r7, r0
    3472:	3750      	adds	r7, #80	; 0x50
    3474:	0038      	movs	r0, r7
    3476:	4b0d      	ldr	r3, [pc, #52]	; (34ac <eccnorm+0x44>)
    3478:	4798      	blx	r3
    v2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    347a:	002a      	movs	r2, r5
    347c:	0039      	movs	r1, r7
    347e:	0020      	movs	r0, r4
    3480:	4e0b      	ldr	r6, [pc, #44]	; (34b0 <eccnorm+0x48>)
    3482:	47b0      	blx	r6
    v2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    3484:	2328      	movs	r3, #40	; 0x28
    3486:	469c      	mov	ip, r3
    3488:	44ac      	add	ip, r5
    348a:	4663      	mov	r3, ip
    348c:	0020      	movs	r0, r4
    348e:	3028      	adds	r0, #40	; 0x28
    3490:	9301      	str	r3, [sp, #4]
    3492:	4662      	mov	r2, ip
    3494:	0039      	movs	r1, r7
    3496:	47b0      	blx	r6
    v2mod1271(Q->x, Q->x); 
    3498:	0029      	movs	r1, r5
    349a:	0028      	movs	r0, r5
    349c:	4c05      	ldr	r4, [pc, #20]	; (34b4 <eccnorm+0x4c>)
    349e:	47a0      	blx	r4
    v2mod1271(Q->y, Q->y); 
    34a0:	9801      	ldr	r0, [sp, #4]
    34a2:	0001      	movs	r1, r0
    34a4:	47a0      	blx	r4
}
    34a6:	b003      	add	sp, #12
    34a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34aa:	46c0      	nop			; (mov r8, r8)
    34ac:	000033fd 	.word	0x000033fd
    34b0:	0000333d 	.word	0x0000333d
    34b4:	00003321 	.word	0x00003321

000034b8 <R1_to_R2>:


void R1_to_R2(vpoint_extproj_t P, vpoint_extproj_precomp_t Q) 
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT), where T = Ta*Tb
    34b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ba:	b085      	sub	sp, #20
    34bc:	0005      	movs	r5, r0
    34be:	000c      	movs	r4, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    
    v2add1271(P->ta, P->ta, Q->t2);              // T = 2*Ta
    34c0:	3078      	adds	r0, #120	; 0x78
    34c2:	2378      	movs	r3, #120	; 0x78
    34c4:	469c      	mov	ip, r3
    34c6:	448c      	add	ip, r1
    34c8:	4663      	mov	r3, ip
    vadd1271(&a[0], &b[0], &c[0]);
    34ca:	9301      	str	r3, [sp, #4]
    34cc:	4662      	mov	r2, ip
    34ce:	0001      	movs	r1, r0
    34d0:	4e20      	ldr	r6, [pc, #128]	; (3554 <R1_to_R2+0x9c>)
    34d2:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    34d4:	002a      	movs	r2, r5
    34d6:	328c      	adds	r2, #140	; 0x8c
    34d8:	0010      	movs	r0, r2
    34da:	0022      	movs	r2, r4
    34dc:	328c      	adds	r2, #140	; 0x8c
    34de:	0001      	movs	r1, r0
    34e0:	47b0      	blx	r6
    v2add1271(P->x, P->y, Q->xy);                // QX = X+Y
    34e2:	002f      	movs	r7, r5
    34e4:	3728      	adds	r7, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    34e6:	0022      	movs	r2, r4
    34e8:	0039      	movs	r1, r7
    34ea:	0028      	movs	r0, r5
    34ec:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    34ee:	2214      	movs	r2, #20
    34f0:	4694      	mov	ip, r2
    34f2:	44ac      	add	ip, r5
    34f4:	4663      	mov	r3, ip
    34f6:	223c      	movs	r2, #60	; 0x3c
    34f8:	4694      	mov	ip, r2
    34fa:	44ac      	add	ip, r5
    34fc:	4661      	mov	r1, ip
    34fe:	0022      	movs	r2, r4
    3500:	3214      	adds	r2, #20
    3502:	9103      	str	r1, [sp, #12]
    3504:	9302      	str	r3, [sp, #8]
    3506:	0018      	movs	r0, r3
    3508:	47b0      	blx	r6
    v2sub1271(P->y, P->x, Q->yx);                // QY = Y-X 
    350a:	0022      	movs	r2, r4
    350c:	3228      	adds	r2, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    350e:	0029      	movs	r1, r5
    3510:	0038      	movs	r0, r7
    3512:	4f11      	ldr	r7, [pc, #68]	; (3558 <R1_to_R2+0xa0>)
    3514:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3516:	0022      	movs	r2, r4
    3518:	323c      	adds	r2, #60	; 0x3c
    351a:	9902      	ldr	r1, [sp, #8]
    351c:	9803      	ldr	r0, [sp, #12]
    351e:	47b8      	blx	r7
    v2mul1271(Q->t2, P->tb, Q->t2);              // T = 2*T
    3520:	0029      	movs	r1, r5
    3522:	31a0      	adds	r1, #160	; 0xa0
    3524:	9801      	ldr	r0, [sp, #4]
    3526:	0002      	movs	r2, r0
    3528:	4f0c      	ldr	r7, [pc, #48]	; (355c <R1_to_R2+0xa4>)
    352a:	47b8      	blx	r7
    v2add1271(P->z, P->z, Q->z2);                // QZ = 2*Z
    352c:	002a      	movs	r2, r5
    352e:	3250      	adds	r2, #80	; 0x50
    3530:	0010      	movs	r0, r2
    3532:	0022      	movs	r2, r4
    3534:	3250      	adds	r2, #80	; 0x50
    vadd1271(&a[0], &b[0], &c[0]);
    3536:	0001      	movs	r1, r0
    3538:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    353a:	3564      	adds	r5, #100	; 0x64
    353c:	0028      	movs	r0, r5
    353e:	0022      	movs	r2, r4
    3540:	3264      	adds	r2, #100	; 0x64
    3542:	0029      	movs	r1, r5
    3544:	47b0      	blx	r6
    v2mul1271(Q->t2, (digit_t*)&PARAMETER_d, Q->t2);       // QT = 2d*T
    3546:	9801      	ldr	r0, [sp, #4]
    3548:	0002      	movs	r2, r0
    354a:	4905      	ldr	r1, [pc, #20]	; (3560 <R1_to_R2+0xa8>)
    354c:	47b8      	blx	r7
}
    354e:	b005      	add	sp, #20
    3550:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	0000207f 	.word	0x0000207f
    3558:	000020bb 	.word	0x000020bb
    355c:	0000333d 	.word	0x0000333d
    3560:	0000a4c0 	.word	0x0000a4c0

00003564 <R1_to_R3>:


void R1_to_R3(vpoint_extproj_t P, vpoint_extproj_precomp_t Q)      
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T), where T = Ta*Tb 
    3564:	b5f0      	push	{r4, r5, r6, r7, lr}
    3566:	b083      	sub	sp, #12
    3568:	0004      	movs	r4, r0
    356a:	000d      	movs	r5, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,Z1,T1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates 
    
    v2add1271(P->x, P->y, Q->xy);            // XQ = (X1+Y1) 
    356c:	0007      	movs	r7, r0
    356e:	3728      	adds	r7, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    3570:	000a      	movs	r2, r1
    3572:	0039      	movs	r1, r7
    3574:	4e15      	ldr	r6, [pc, #84]	; (35cc <R1_to_R3+0x68>)
    3576:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3578:	2314      	movs	r3, #20
    357a:	469c      	mov	ip, r3
    357c:	44a4      	add	ip, r4
    357e:	4663      	mov	r3, ip
    3580:	223c      	movs	r2, #60	; 0x3c
    3582:	4694      	mov	ip, r2
    3584:	44a4      	add	ip, r4
    3586:	4661      	mov	r1, ip
    3588:	002a      	movs	r2, r5
    358a:	3214      	adds	r2, #20
    358c:	9101      	str	r1, [sp, #4]
    358e:	9300      	str	r3, [sp, #0]
    3590:	0018      	movs	r0, r3
    3592:	47b0      	blx	r6
    v2sub1271(P->y, P->x, Q->yx);            // YQ = (Y1-X1) 
    3594:	002a      	movs	r2, r5
    3596:	3228      	adds	r2, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    3598:	0021      	movs	r1, r4
    359a:	0038      	movs	r0, r7
    359c:	4f0c      	ldr	r7, [pc, #48]	; (35d0 <R1_to_R3+0x6c>)
    359e:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    35a0:	002a      	movs	r2, r5
    35a2:	323c      	adds	r2, #60	; 0x3c
    35a4:	9900      	ldr	r1, [sp, #0]
    35a6:	9801      	ldr	r0, [sp, #4]
    35a8:	47b8      	blx	r7
    v2mul1271(P->ta, P->tb, Q->t2);          // TQ = T1
    35aa:	002a      	movs	r2, r5
    35ac:	3278      	adds	r2, #120	; 0x78
    35ae:	0021      	movs	r1, r4
    35b0:	31a0      	adds	r1, #160	; 0xa0
    35b2:	0020      	movs	r0, r4
    35b4:	3078      	adds	r0, #120	; 0x78
    35b6:	4b07      	ldr	r3, [pc, #28]	; (35d4 <R1_to_R3+0x70>)
    35b8:	4798      	blx	r3
    v2copy1271(P->z, Q->z2);                 // ZQ = Z1 
    35ba:	0029      	movs	r1, r5
    35bc:	3150      	adds	r1, #80	; 0x50
    35be:	0020      	movs	r0, r4
    35c0:	3050      	adds	r0, #80	; 0x50
    35c2:	4b05      	ldr	r3, [pc, #20]	; (35d8 <R1_to_R3+0x74>)
    35c4:	4798      	blx	r3
}
    35c6:	b003      	add	sp, #12
    35c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	0000207f 	.word	0x0000207f
    35d0:	000020bb 	.word	0x000020bb
    35d4:	0000333d 	.word	0x0000333d
    35d8:	00002c9f 	.word	0x00002c9f

000035dc <R2_to_R4>:


void R2_to_R4(vpoint_extproj_precomp_t P, vpoint_extproj_t Q)      
{ // Conversion from representation (X+Y,Y-X,2Z,2dT) to (2X,2Y,2Z,2dT) 
    35dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35de:	b083      	sub	sp, #12
    35e0:	0006      	movs	r6, r0
    35e2:	000d      	movs	r5, r1
  // Input:  P = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (2X1,2Y1,2Z1) corresponding to (X1:Y1:Z1) in twisted Edwards coordinates 
    
    v2sub1271(P->xy, P->yx, Q->x);           // XQ = 2*X1
    35e4:	0007      	movs	r7, r0
    35e6:	3728      	adds	r7, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    35e8:	000a      	movs	r2, r1
    35ea:	0039      	movs	r1, r7
    35ec:	4c15      	ldr	r4, [pc, #84]	; (3644 <R2_to_R4+0x68>)
    35ee:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    35f0:	2314      	movs	r3, #20
    35f2:	469c      	mov	ip, r3
    35f4:	44b4      	add	ip, r6
    35f6:	4663      	mov	r3, ip
    35f8:	223c      	movs	r2, #60	; 0x3c
    35fa:	4694      	mov	ip, r2
    35fc:	44b4      	add	ip, r6
    35fe:	4661      	mov	r1, ip
    3600:	002a      	movs	r2, r5
    3602:	3214      	adds	r2, #20
    3604:	9101      	str	r1, [sp, #4]
    3606:	9300      	str	r3, [sp, #0]
    3608:	0018      	movs	r0, r3
    360a:	47a0      	blx	r4
    v2add1271(P->xy, P->yx, Q->y);           // YQ = 2*Y1
    360c:	002c      	movs	r4, r5
    360e:	3428      	adds	r4, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    3610:	0022      	movs	r2, r4
    3612:	0039      	movs	r1, r7
    3614:	0030      	movs	r0, r6
    3616:	4f0c      	ldr	r7, [pc, #48]	; (3648 <R2_to_R4+0x6c>)
    3618:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    361a:	002a      	movs	r2, r5
    361c:	323c      	adds	r2, #60	; 0x3c
    361e:	9901      	ldr	r1, [sp, #4]
    3620:	9800      	ldr	r0, [sp, #0]
    3622:	47b8      	blx	r7
    v2copy1271(P->z2, Q->z);                 // ZQ = 2*Z1
    3624:	0029      	movs	r1, r5
    3626:	3150      	adds	r1, #80	; 0x50
    3628:	0030      	movs	r0, r6
    362a:	3050      	adds	r0, #80	; 0x50
    362c:	4b07      	ldr	r3, [pc, #28]	; (364c <R2_to_R4+0x70>)
    362e:	4798      	blx	r3
    v2mod1271_incomplete(Q->x, Q->x);   
    3630:	0029      	movs	r1, r5
    3632:	0028      	movs	r0, r5
    3634:	4d06      	ldr	r5, [pc, #24]	; (3650 <R2_to_R4+0x74>)
    3636:	47a8      	blx	r5
    v2mod1271_incomplete(Q->y, Q->y);   
    3638:	0021      	movs	r1, r4
    363a:	0020      	movs	r0, r4
    363c:	47a8      	blx	r5
}
    363e:	b003      	add	sp, #12
    3640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	000020bb 	.word	0x000020bb
    3648:	0000207f 	.word	0x0000207f
    364c:	00002c9f 	.word	0x00002c9f
    3650:	00003305 	.word	0x00003305

00003654 <eccdouble>:


void eccdouble(vpoint_extproj_t P)
{ // Point doubling 2P
    3654:	b5f0      	push	{r4, r5, r6, r7, lr}
    3656:	b099      	sub	sp, #100	; 0x64
    3658:	0007      	movs	r7, r0
  // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates
  // Output: 2P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    v2elm_t t1, t2; 
  
    v2sqr1271(P->x, t1);                              // t1 = X1^2 
    365a:	a90e      	add	r1, sp, #56	; 0x38
    365c:	4e2f      	ldr	r6, [pc, #188]	; (371c <eccdouble+0xc8>)
    365e:	47b0      	blx	r6
    v2sqr1271(P->y, t2);                              // t2 = Y1^2
    3660:	2328      	movs	r3, #40	; 0x28
    3662:	469c      	mov	ip, r3
    3664:	44bc      	add	ip, r7
    3666:	4663      	mov	r3, ip
    3668:	4664      	mov	r4, ip
    366a:	a904      	add	r1, sp, #16
    366c:	0018      	movs	r0, r3
    366e:	47b0      	blx	r6
    vadd1271(&a[0], &b[0], &c[0]);
    3670:	003a      	movs	r2, r7
    3672:	9400      	str	r4, [sp, #0]
    3674:	0021      	movs	r1, r4
    3676:	0038      	movs	r0, r7
    3678:	4c29      	ldr	r4, [pc, #164]	; (3720 <eccdouble+0xcc>)
    367a:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    367c:	0038      	movs	r0, r7
    367e:	3014      	adds	r0, #20
    3680:	0039      	movs	r1, r7
    3682:	313c      	adds	r1, #60	; 0x3c
    3684:	0002      	movs	r2, r0
    3686:	47a0      	blx	r4
    v2add1271(P->x, P->y, P->x);                      // X = X1+Y1
    v2add1271(t1, t2, P->tb);                         // Tbfinal = X1^2+Y1^2 
    3688:	23a0      	movs	r3, #160	; 0xa0
    368a:	469c      	mov	ip, r3
    368c:	44bc      	add	ip, r7
    368e:	4663      	mov	r3, ip
    vadd1271(&a[0], &b[0], &c[0]);
    3690:	9301      	str	r3, [sp, #4]
    3692:	4662      	mov	r2, ip
    3694:	a904      	add	r1, sp, #16
    3696:	a80e      	add	r0, sp, #56	; 0x38
    3698:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    369a:	21b4      	movs	r1, #180	; 0xb4
    369c:	468c      	mov	ip, r1
    369e:	44bc      	add	ip, r7
    36a0:	4661      	mov	r1, ip
    36a2:	9103      	str	r1, [sp, #12]
    36a4:	4662      	mov	r2, ip
    36a6:	a809      	add	r0, sp, #36	; 0x24
    36a8:	0001      	movs	r1, r0
    36aa:	a813      	add	r0, sp, #76	; 0x4c
    36ac:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    36ae:	aa0e      	add	r2, sp, #56	; 0x38
    36b0:	0011      	movs	r1, r2
    36b2:	a804      	add	r0, sp, #16
    36b4:	4d1b      	ldr	r5, [pc, #108]	; (3724 <eccdouble+0xd0>)
    36b6:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    36b8:	aa13      	add	r2, sp, #76	; 0x4c
    36ba:	0011      	movs	r1, r2
    36bc:	a809      	add	r0, sp, #36	; 0x24
    36be:	47a8      	blx	r5
    v2sub1271(t2, t1, t1);                            // t1 = Y1^2-X1^2 
    v2sqr1271(P->z, t2);                              // t2 = Z1^2 
    36c0:	2050      	movs	r0, #80	; 0x50
    36c2:	4684      	mov	ip, r0
    36c4:	44bc      	add	ip, r7
    36c6:	4660      	mov	r0, ip
    36c8:	a904      	add	r1, sp, #16
    36ca:	9002      	str	r0, [sp, #8]
    36cc:	47b0      	blx	r6
    v2sqr1271(P->x, P->ta);                           // Ta = (X1+Y1)^2 
    36ce:	003c      	movs	r4, r7
    36d0:	3478      	adds	r4, #120	; 0x78
    36d2:	0021      	movs	r1, r4
    36d4:	0038      	movs	r0, r7
    36d6:	47b0      	blx	r6
    v2dblsub1271(t2, t1, t2);                         // t2 = 2Z1^2-(Y1^2-X1^2)
    36d8:	aa04      	add	r2, sp, #16
    36da:	ae0e      	add	r6, sp, #56	; 0x38
    36dc:	0031      	movs	r1, r6
    36de:	0010      	movs	r0, r2
    36e0:	4b11      	ldr	r3, [pc, #68]	; (3728 <eccdouble+0xd4>)
    36e2:	4798      	blx	r3
    vsub1271(&a[0], &b[0], &c[0]);
    36e4:	0022      	movs	r2, r4
    36e6:	9e01      	ldr	r6, [sp, #4]
    36e8:	0031      	movs	r1, r6
    36ea:	0020      	movs	r0, r4
    36ec:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    36ee:	003b      	movs	r3, r7
    36f0:	338c      	adds	r3, #140	; 0x8c
    36f2:	0018      	movs	r0, r3
    36f4:	001a      	movs	r2, r3
    36f6:	9903      	ldr	r1, [sp, #12]
    36f8:	47a8      	blx	r5
    v2sub1271(P->ta, P->tb, P->ta);                   // Tafinal = 2X1*Y1 = (X1+Y1)^2-(X1^2+Y1^2)
    v2mul1271(t1, P->tb, P->y);                       // Yfinal = (X1^2+Y1^2)(Y1^2-X1^2) 
    36fa:	9a00      	ldr	r2, [sp, #0]
    36fc:	0031      	movs	r1, r6
    36fe:	ab0e      	add	r3, sp, #56	; 0x38
    3700:	0018      	movs	r0, r3
    3702:	4d0a      	ldr	r5, [pc, #40]	; (372c <eccdouble+0xd8>)
    3704:	47a8      	blx	r5
    v2mul1271(t2, P->ta, P->x);                       // Xfinal = 2X1*Y1*[2Z1^2-(Y1^2-X1^2)]
    3706:	003a      	movs	r2, r7
    3708:	0021      	movs	r1, r4
    370a:	a804      	add	r0, sp, #16
    370c:	47a8      	blx	r5
    v2mul1271(t1, t2, P->z);                          // Zfinal = (Y1^2-X1^2)[2Z1^2-(Y1^2-X1^2)] 
    370e:	9a02      	ldr	r2, [sp, #8]
    3710:	a904      	add	r1, sp, #16
    3712:	a80e      	add	r0, sp, #56	; 0x38
    3714:	47a8      	blx	r5
}
    3716:	b019      	add	sp, #100	; 0x64
    3718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    371a:	46c0      	nop			; (mov r8, r8)
    371c:	000033b1 	.word	0x000033b1
    3720:	0000207f 	.word	0x0000207f
    3724:	000020bb 	.word	0x000020bb
    3728:	0000319d 	.word	0x0000319d
    372c:	0000333d 	.word	0x0000333d

00003730 <eccadd_core>:


__inline void eccadd_core(vpoint_extproj_precomp_t P, vpoint_extproj_precomp_t Q, vpoint_extproj_t R)      
{ // Basic point addition R = P+Q or R = P+P
    3730:	b5f0      	push	{r4, r5, r6, r7, lr}
    3732:	b09b      	sub	sp, #108	; 0x6c
    3734:	0006      	movs	r6, r0
    3736:	000f      	movs	r7, r1
    3738:	0015      	movs	r5, r2
  //         Q = (X2+Y2,Y2-X2,Z2,T2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates    
  // Output: R = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    v2elm_t t1, t2; 
          
    v2mul1271(P->t2, Q->t2, R->z);                            // Z = 2dT1*T2 
    373a:	2350      	movs	r3, #80	; 0x50
    373c:	469c      	mov	ip, r3
    373e:	4494      	add	ip, r2
    3740:	4663      	mov	r3, ip
    3742:	3178      	adds	r1, #120	; 0x78
    3744:	3078      	adds	r0, #120	; 0x78
    3746:	9301      	str	r3, [sp, #4]
    3748:	4662      	mov	r2, ip
    374a:	4c2f      	ldr	r4, [pc, #188]	; (3808 <eccadd_core+0xd8>)
    374c:	47a0      	blx	r4
    v2mul1271(P->z2, Q->z2, t1);                              // t1 = 2Z1*Z2 
    374e:	0039      	movs	r1, r7
    3750:	3150      	adds	r1, #80	; 0x50
    3752:	0030      	movs	r0, r6
    3754:	3050      	adds	r0, #80	; 0x50
    3756:	aa10      	add	r2, sp, #64	; 0x40
    3758:	47a0      	blx	r4
    v2mul1271(P->xy, Q->xy, R->x);                            // X = (X1+Y1)(X2+Y2)
    375a:	002a      	movs	r2, r5
    375c:	0039      	movs	r1, r7
    375e:	0030      	movs	r0, r6
    3760:	47a0      	blx	r4
    v2mul1271(P->yx, Q->yx, R->y);                            // Y = (Y1-X1)(Y2-X2)
    3762:	2228      	movs	r2, #40	; 0x28
    3764:	4694      	mov	ip, r2
    3766:	44ac      	add	ip, r5
    3768:	4662      	mov	r2, ip
    376a:	0039      	movs	r1, r7
    376c:	3128      	adds	r1, #40	; 0x28
    376e:	0030      	movs	r0, r6
    3770:	3028      	adds	r0, #40	; 0x28
    3772:	9202      	str	r2, [sp, #8]
    3774:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    3776:	aa06      	add	r2, sp, #24
    3778:	9f01      	ldr	r7, [sp, #4]
    377a:	0039      	movs	r1, r7
    377c:	a810      	add	r0, sp, #64	; 0x40
    377e:	4e23      	ldr	r6, [pc, #140]	; (380c <eccadd_core+0xdc>)
    3780:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3782:	2364      	movs	r3, #100	; 0x64
    3784:	469c      	mov	ip, r3
    3786:	44ac      	add	ip, r5
    3788:	4663      	mov	r3, ip
    378a:	aa0b      	add	r2, sp, #44	; 0x2c
    378c:	9303      	str	r3, [sp, #12]
    378e:	4661      	mov	r1, ip
    3790:	a815      	add	r0, sp, #84	; 0x54
    3792:	47b0      	blx	r6
    vadd1271(&a[0], &b[0], &c[0]);
    3794:	a810      	add	r0, sp, #64	; 0x40
    3796:	0002      	movs	r2, r0
    3798:	9701      	str	r7, [sp, #4]
    379a:	0039      	movs	r1, r7
    379c:	4f1c      	ldr	r7, [pc, #112]	; (3810 <eccadd_core+0xe0>)
    379e:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    37a0:	a815      	add	r0, sp, #84	; 0x54
    37a2:	0002      	movs	r2, r0
    37a4:	9903      	ldr	r1, [sp, #12]
    37a6:	47b8      	blx	r7
    v2sub1271(t1, R->z, t2);                                  // t2 = theta
    v2add1271(t1, R->z, t1);                                  // t1 = alpha
    v2sub1271(R->x, R->y, R->tb);                             // Tbfinal = beta
    37a8:	23a0      	movs	r3, #160	; 0xa0
    37aa:	469c      	mov	ip, r3
    37ac:	44ac      	add	ip, r5
    37ae:	4663      	mov	r3, ip
    vsub1271(&a[0], &b[0], &c[0]);
    37b0:	9303      	str	r3, [sp, #12]
    37b2:	4662      	mov	r2, ip
    37b4:	9902      	ldr	r1, [sp, #8]
    37b6:	0028      	movs	r0, r5
    37b8:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    37ba:	2114      	movs	r1, #20
    37bc:	468c      	mov	ip, r1
    37be:	44ac      	add	ip, r5
    37c0:	4660      	mov	r0, ip
    37c2:	213c      	movs	r1, #60	; 0x3c
    37c4:	468c      	mov	ip, r1
    37c6:	44ac      	add	ip, r5
    37c8:	4661      	mov	r1, ip
    37ca:	002a      	movs	r2, r5
    37cc:	32b4      	adds	r2, #180	; 0xb4
    37ce:	9105      	str	r1, [sp, #20]
    37d0:	9004      	str	r0, [sp, #16]
    37d2:	47b0      	blx	r6
    v2add1271(R->x, R->y, R->ta);                             // Tafinal = omega
    37d4:	002e      	movs	r6, r5
    37d6:	3678      	adds	r6, #120	; 0x78
    vadd1271(&a[0], &b[0], &c[0]);
    37d8:	0032      	movs	r2, r6
    37da:	9902      	ldr	r1, [sp, #8]
    37dc:	0028      	movs	r0, r5
    37de:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    37e0:	002a      	movs	r2, r5
    37e2:	328c      	adds	r2, #140	; 0x8c
    37e4:	9905      	ldr	r1, [sp, #20]
    37e6:	9804      	ldr	r0, [sp, #16]
    37e8:	47b8      	blx	r7
    v2mul1271(R->tb, t2, R->x);                               // Xfinal = beta*theta
    37ea:	002a      	movs	r2, r5
    37ec:	a906      	add	r1, sp, #24
    37ee:	9803      	ldr	r0, [sp, #12]
    37f0:	47a0      	blx	r4
    v2mul1271(t1, t2, R->z);                                  // Zfinal = theta*alpha
    37f2:	9a01      	ldr	r2, [sp, #4]
    37f4:	a906      	add	r1, sp, #24
    37f6:	a810      	add	r0, sp, #64	; 0x40
    37f8:	47a0      	blx	r4
    v2mul1271(R->ta, t1, R->y);                               // Yfinal = alpha*omega
    37fa:	9a02      	ldr	r2, [sp, #8]
    37fc:	a910      	add	r1, sp, #64	; 0x40
    37fe:	0030      	movs	r0, r6
    3800:	47a0      	blx	r4
}
    3802:	b01b      	add	sp, #108	; 0x6c
    3804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	0000333d 	.word	0x0000333d
    380c:	000020bb 	.word	0x000020bb
    3810:	0000207f 	.word	0x0000207f

00003814 <eccadd>:


void eccadd(vpoint_extproj_precomp_t Q, vpoint_extproj_t P)      
{ // Complete point addition P = P+Q or P = P+P
    3814:	b5f0      	push	{r4, r5, r6, r7, lr}
    3816:	46de      	mov	lr, fp
    3818:	b500      	push	{lr}
    381a:	b0ae      	sub	sp, #184	; 0xb8
    381c:	0007      	movs	r7, r0
    381e:	000d      	movs	r5, r1
  // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal, 
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    vpoint_precomp_t R;
    v2elm_t t1; 

    v2add1271(P->y, P->x, R->xy);            // XR = (X1+Y1)
    3820:	2328      	movs	r3, #40	; 0x28
    3822:	469c      	mov	ip, r3
    3824:	448c      	add	ip, r1
    3826:	4663      	mov	r3, ip
    3828:	4666      	mov	r6, ip
    vadd1271(&a[0], &b[0], &c[0]);
    382a:	aa10      	add	r2, sp, #64	; 0x40
    382c:	0018      	movs	r0, r3
    382e:	4c3a      	ldr	r4, [pc, #232]	; (3918 <eccadd+0x104>)
    3830:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3832:	233c      	movs	r3, #60	; 0x3c
    3834:	469c      	mov	ip, r3
    3836:	44ac      	add	ip, r5
    3838:	4663      	mov	r3, ip
    383a:	2214      	movs	r2, #20
    383c:	4694      	mov	ip, r2
    383e:	44ac      	add	ip, r5
    3840:	4661      	mov	r1, ip
    3842:	aa15      	add	r2, sp, #84	; 0x54
    3844:	9102      	str	r1, [sp, #8]
    3846:	9301      	str	r3, [sp, #4]
    3848:	0018      	movs	r0, r3
    384a:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    384c:	aa1a      	add	r2, sp, #104	; 0x68
    384e:	0029      	movs	r1, r5
    3850:	9603      	str	r6, [sp, #12]
    3852:	0030      	movs	r0, r6
    3854:	4e31      	ldr	r6, [pc, #196]	; (391c <eccadd+0x108>)
    3856:	46b3      	mov	fp, r6
    3858:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    385a:	aa1f      	add	r2, sp, #124	; 0x7c
    385c:	9902      	ldr	r1, [sp, #8]
    385e:	9801      	ldr	r0, [sp, #4]
    3860:	47b0      	blx	r6
    v2sub1271(P->y, P->x, R->yx);            // YR = (Y1-X1)
    v2mul1271(P->ta, P->tb, R->t2);          // TR = T1 
    3862:	2078      	movs	r0, #120	; 0x78
    3864:	4684      	mov	ip, r0
    3866:	44ac      	add	ip, r5
    3868:	4660      	mov	r0, ip
    386a:	22a0      	movs	r2, #160	; 0xa0
    386c:	4694      	mov	ip, r2
    386e:	44ac      	add	ip, r5
    3870:	4661      	mov	r1, ip
    3872:	aa24      	add	r2, sp, #144	; 0x90
    3874:	9105      	str	r1, [sp, #20]
    3876:	9004      	str	r0, [sp, #16]
    3878:	4e29      	ldr	r6, [pc, #164]	; (3920 <eccadd+0x10c>)
    387a:	47b0      	blx	r6
    v2mul1271(Q->z2, P->z, t1);              // t1 = 2Z1*Z2      
    387c:	2350      	movs	r3, #80	; 0x50
    387e:	469c      	mov	ip, r3
    3880:	44ac      	add	ip, r5
    3882:	4663      	mov	r3, ip
    3884:	0038      	movs	r0, r7
    3886:	3050      	adds	r0, #80	; 0x50
    3888:	aa06      	add	r2, sp, #24
    388a:	9300      	str	r3, [sp, #0]
    388c:	4661      	mov	r1, ip
    388e:	47b0      	blx	r6
    v2mul1271(Q->t2, R->t2, P->z);           // Z = 2dT1*T2 
    3890:	0038      	movs	r0, r7
    3892:	3078      	adds	r0, #120	; 0x78
    3894:	9a00      	ldr	r2, [sp, #0]
    3896:	a924      	add	r1, sp, #144	; 0x90
    3898:	47b0      	blx	r6
    v2mul1271(Q->xy, R->xy, P->x);           // X = (X1+Y1)(X2+Y2)
    389a:	002a      	movs	r2, r5
    389c:	a910      	add	r1, sp, #64	; 0x40
    389e:	0038      	movs	r0, r7
    38a0:	47b0      	blx	r6
    v2mul1271(Q->yx, R->yx, P->y);           // Y = (Y1-X1)(Y2-X2)
    38a2:	3728      	adds	r7, #40	; 0x28
    38a4:	0038      	movs	r0, r7
    38a6:	9a03      	ldr	r2, [sp, #12]
    38a8:	a91a      	add	r1, sp, #104	; 0x68
    38aa:	47b0      	blx	r6
    vsub1271(&a[0], &b[0], &c[0]);
    38ac:	aa24      	add	r2, sp, #144	; 0x90
    38ae:	9900      	ldr	r1, [sp, #0]
    38b0:	a806      	add	r0, sp, #24
    38b2:	47d8      	blx	fp
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    38b4:	002f      	movs	r7, r5
    38b6:	3764      	adds	r7, #100	; 0x64
    38b8:	aa29      	add	r2, sp, #164	; 0xa4
    38ba:	0039      	movs	r1, r7
    38bc:	a80b      	add	r0, sp, #44	; 0x2c
    38be:	47d8      	blx	fp
    vadd1271(&a[0], &b[0], &c[0]);
    38c0:	aa06      	add	r2, sp, #24
    38c2:	9900      	ldr	r1, [sp, #0]
    38c4:	0010      	movs	r0, r2
    38c6:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    38c8:	aa0b      	add	r2, sp, #44	; 0x2c
    38ca:	0039      	movs	r1, r7
    38cc:	0010      	movs	r0, r2
    38ce:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    38d0:	9a05      	ldr	r2, [sp, #20]
    38d2:	9f03      	ldr	r7, [sp, #12]
    38d4:	0039      	movs	r1, r7
    38d6:	0028      	movs	r0, r5
    38d8:	47d8      	blx	fp
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    38da:	002a      	movs	r2, r5
    38dc:	32b4      	adds	r2, #180	; 0xb4
    38de:	9901      	ldr	r1, [sp, #4]
    38e0:	9802      	ldr	r0, [sp, #8]
    38e2:	47d8      	blx	fp
    vadd1271(&a[0], &b[0], &c[0]);
    38e4:	9a04      	ldr	r2, [sp, #16]
    38e6:	0039      	movs	r1, r7
    38e8:	0028      	movs	r0, r5
    38ea:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    38ec:	002a      	movs	r2, r5
    38ee:	328c      	adds	r2, #140	; 0x8c
    38f0:	9901      	ldr	r1, [sp, #4]
    38f2:	9802      	ldr	r0, [sp, #8]
    38f4:	47a0      	blx	r4
    v2sub1271(t1, P->z, R->t2);              // TR = theta
    v2add1271(t1, P->z, t1);                 // t1 = alpha
    v2sub1271(P->x, P->y, P->tb);            // Tbfinal = beta
    v2add1271(P->x, P->y, P->ta);            // Tafinal = omega
    v2mul1271(P->tb, R->t2, P->x);           // Xfinal = beta*theta
    38f6:	002a      	movs	r2, r5
    38f8:	a924      	add	r1, sp, #144	; 0x90
    38fa:	9805      	ldr	r0, [sp, #20]
    38fc:	47b0      	blx	r6
    v2mul1271(t1, R->t2, P->z);              // Zfinal = theta*alpha
    38fe:	9a00      	ldr	r2, [sp, #0]
    3900:	a924      	add	r1, sp, #144	; 0x90
    3902:	a806      	add	r0, sp, #24
    3904:	47b0      	blx	r6
    v2mul1271(P->ta, t1, P->y);              // Yfinal = alpha*omega
    3906:	003a      	movs	r2, r7
    3908:	a906      	add	r1, sp, #24
    390a:	9804      	ldr	r0, [sp, #16]
    390c:	47b0      	blx	r6
}
    390e:	b02e      	add	sp, #184	; 0xb8
    3910:	bc04      	pop	{r2}
    3912:	4693      	mov	fp, r2
    3914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3916:	46c0      	nop			; (mov r8, r8)
    3918:	0000207f 	.word	0x0000207f
    391c:	000020bb 	.word	0x000020bb
    3920:	0000333d 	.word	0x0000333d

00003924 <point_setup>:


void point_setup(point_t P, vpoint_extproj_t Q)
{ // Point conversion to vectorized representation (X,Y,Z,Ta,Tb) 
    3924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3926:	0005      	movs	r5, r0
    3928:	000c      	movs	r4, r1
  // Input: P = (x,y) in affine coordinates
  // Output: P = (X,Y,1,Ta,Tb), where Ta=X, Tb=Y and T=Ta*Tb, corresponding to (X:Y:Z:T) in extended twisted Edwards coordinates

    from_std_to_ext(P->x, Q->x);
    392a:	4f0c      	ldr	r7, [pc, #48]	; (395c <point_setup+0x38>)
    392c:	47b8      	blx	r7
    from_std_to_ext(P->y, Q->y);
    392e:	0026      	movs	r6, r4
    3930:	3628      	adds	r6, #40	; 0x28
    3932:	0028      	movs	r0, r5
    3934:	3020      	adds	r0, #32
    3936:	0031      	movs	r1, r6
    3938:	47b8      	blx	r7
    v2copy1271(Q->x, Q->ta);              // Ta = X1
    393a:	0021      	movs	r1, r4
    393c:	3178      	adds	r1, #120	; 0x78
    393e:	0020      	movs	r0, r4
    3940:	4d07      	ldr	r5, [pc, #28]	; (3960 <point_setup+0x3c>)
    3942:	47a8      	blx	r5
    v2copy1271(Q->y, Q->tb);              // Tb = Y1
    3944:	0021      	movs	r1, r4
    3946:	31a0      	adds	r1, #160	; 0xa0
    3948:	0030      	movs	r0, r6
    394a:	47a8      	blx	r5
    v2zero1271(Q->z); Q->z[0]=1;          // Z1 = 1
    394c:	0020      	movs	r0, r4
    394e:	3050      	adds	r0, #80	; 0x50
    3950:	4b04      	ldr	r3, [pc, #16]	; (3964 <point_setup+0x40>)
    3952:	4798      	blx	r3
    3954:	2301      	movs	r3, #1
    3956:	6523      	str	r3, [r4, #80]	; 0x50
}
    3958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    395a:	46c0      	nop			; (mov r8, r8)
    395c:	000028f9 	.word	0x000028f9
    3960:	00002c9f 	.word	0x00002c9f
    3964:	00003145 	.word	0x00003145

00003968 <ecc_point_validate>:


bool ecc_point_validate(vpoint_extproj_t P)
{ // Point validation: check if point lies on the curve
    3968:	b530      	push	{r4, r5, lr}
    396a:	b09f      	sub	sp, #124	; 0x7c
    396c:	0005      	movs	r5, r0
  // Output: TRUE (1) if point lies on the curve E: -x^2+y^2-1-dx^2*y^2 = 0, FALSE (0) otherwise.
  // SECURITY NOTE: this function does not run in constant time (input point P is assumed to be public).
    v2elm_t t1, t2, t3;
    unsigned int i;

    v2sqr1271(P->y, t1);  
    396e:	3028      	adds	r0, #40	; 0x28
    3970:	a914      	add	r1, sp, #80	; 0x50
    3972:	4c21      	ldr	r4, [pc, #132]	; (39f8 <ecc_point_validate+0x90>)
    3974:	47a0      	blx	r4
    v2sqr1271(P->x, t2);
    3976:	a90a      	add	r1, sp, #40	; 0x28
    3978:	0028      	movs	r0, r5
    397a:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    397c:	466a      	mov	r2, sp
    397e:	a90a      	add	r1, sp, #40	; 0x28
    3980:	a814      	add	r0, sp, #80	; 0x50
    3982:	4c1e      	ldr	r4, [pc, #120]	; (39fc <ecc_point_validate+0x94>)
    3984:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3986:	aa05      	add	r2, sp, #20
    3988:	a90f      	add	r1, sp, #60	; 0x3c
    398a:	a819      	add	r0, sp, #100	; 0x64
    398c:	47a0      	blx	r4
    v2sub1271(t1, t2, t3);                    // -x^2 + y^2 
    v2mul1271(t1, t2, t1);                    // x^2*y^2
    398e:	aa14      	add	r2, sp, #80	; 0x50
    3990:	a90a      	add	r1, sp, #40	; 0x28
    3992:	0010      	movs	r0, r2
    3994:	4d1a      	ldr	r5, [pc, #104]	; (3a00 <ecc_point_validate+0x98>)
    3996:	47a8      	blx	r5
    v2mul1271((digit_t*)&PARAMETER_d, t1, t2);          // dx^2*y^2
    3998:	aa0a      	add	r2, sp, #40	; 0x28
    399a:	a914      	add	r1, sp, #80	; 0x50
    399c:	4819      	ldr	r0, [pc, #100]	; (3a04 <ecc_point_validate+0x9c>)
    399e:	47a8      	blx	r5
    v2zero1271(t1);  t1[0] = 1;               // t1 = 1
    39a0:	a814      	add	r0, sp, #80	; 0x50
    39a2:	4b19      	ldr	r3, [pc, #100]	; (3a08 <ecc_point_validate+0xa0>)
    39a4:	4798      	blx	r3
    39a6:	2301      	movs	r3, #1
    39a8:	9314      	str	r3, [sp, #80]	; 0x50
    vadd1271(&a[0], &b[0], &c[0]);
    39aa:	aa0a      	add	r2, sp, #40	; 0x28
    39ac:	a914      	add	r1, sp, #80	; 0x50
    39ae:	0010      	movs	r0, r2
    39b0:	4d16      	ldr	r5, [pc, #88]	; (3a0c <ecc_point_validate+0xa4>)
    39b2:	47a8      	blx	r5
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    39b4:	aa0f      	add	r2, sp, #60	; 0x3c
    39b6:	a919      	add	r1, sp, #100	; 0x64
    39b8:	0010      	movs	r0, r2
    39ba:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    39bc:	aa14      	add	r2, sp, #80	; 0x50
    39be:	a90a      	add	r1, sp, #40	; 0x28
    39c0:	4668      	mov	r0, sp
    39c2:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    39c4:	aa19      	add	r2, sp, #100	; 0x64
    39c6:	a90f      	add	r1, sp, #60	; 0x3c
    39c8:	a805      	add	r0, sp, #20
    39ca:	47a0      	blx	r4
    v2add1271(t2, t1, t2);                    // 1 + dx^2*y^2
    v2sub1271(t3, t2, t1);                    // -x^2 + y^2 - 1 - dx^2*y^2
    v2mod1271(t1, t1);
    39cc:	a914      	add	r1, sp, #80	; 0x50
    39ce:	0008      	movs	r0, r1
    39d0:	4b0f      	ldr	r3, [pc, #60]	; (3a10 <ecc_point_validate+0xa8>)
    39d2:	4798      	blx	r3
    
    for (i = 0; i < 2*VWORDS_FIELD-1; i++) {
        if (t1[i] != 0) return false;
    39d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    39d6:	2b00      	cmp	r3, #0
    39d8:	d10a      	bne.n	39f0 <ecc_point_validate+0x88>
    39da:	ab14      	add	r3, sp, #80	; 0x50
    39dc:	aa1c      	add	r2, sp, #112	; 0x70
    39de:	6859      	ldr	r1, [r3, #4]
    39e0:	2900      	cmp	r1, #0
    39e2:	d107      	bne.n	39f4 <ecc_point_validate+0x8c>
    39e4:	3304      	adds	r3, #4
    for (i = 0; i < 2*VWORDS_FIELD-1; i++) {
    39e6:	4293      	cmp	r3, r2
    39e8:	d1f9      	bne.n	39de <ecc_point_validate+0x76>
    }
    return true; 
    39ea:	2001      	movs	r0, #1
}
    39ec:	b01f      	add	sp, #124	; 0x7c
    39ee:	bd30      	pop	{r4, r5, pc}
        if (t1[i] != 0) return false;
    39f0:	2000      	movs	r0, #0
    39f2:	e7fb      	b.n	39ec <ecc_point_validate+0x84>
    39f4:	2000      	movs	r0, #0
    39f6:	e7f9      	b.n	39ec <ecc_point_validate+0x84>
    39f8:	000033b1 	.word	0x000033b1
    39fc:	000020bb 	.word	0x000020bb
    3a00:	0000333d 	.word	0x0000333d
    3a04:	0000a4c0 	.word	0x0000a4c0
    3a08:	00003145 	.word	0x00003145
    3a0c:	0000207f 	.word	0x0000207f
    3a10:	00003321 	.word	0x00003321

00003a14 <mLSB_set_recode>:
    return true;
}


void mLSB_set_recode(uint64_t* scalar, unsigned int *digits)
{ // Computes the modified LSB-set representation of a scalar
    3a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a16:	46de      	mov	lr, fp
    3a18:	4657      	mov	r7, sl
    3a1a:	464e      	mov	r6, r9
    3a1c:	4645      	mov	r5, r8
    3a1e:	b5e0      	push	{r5, r6, r7, lr}
    3a20:	b087      	sub	sp, #28
    3a22:	0005      	movs	r5, r0
    3a24:	468b      	mov	fp, r1
  //         where l = d*w and d = ceil(bitlength(order)/(w*v))*v. The values v and w are fixed and must be in the range [1, 10] (see FourQ.h); they determine the size 
  //         of the precomputed table "FIXED_BASE_TABLE" used by ecc_mul_fixed(). 
    unsigned int i, j, d = D_FIXEDBASE, l = L_FIXEDBASE;
    uint64_t temp, carry;
    
    digits[d-1] = 0;
    3a26:	2200      	movs	r2, #0
    3a28:	23c4      	movs	r3, #196	; 0xc4
    3a2a:	50ca      	str	r2, [r1, r3]
    3a2c:	9004      	str	r0, [sp, #16]
    3a2e:	0004      	movs	r4, r0
    3a30:	3418      	adds	r4, #24
    3a32:	0003      	movs	r3, r0

    // Shift scalar to the right by 1   
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
        SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    3a34:	685a      	ldr	r2, [r3, #4]
    3a36:	07d0      	lsls	r0, r2, #31
    3a38:	6819      	ldr	r1, [r3, #0]
    3a3a:	0849      	lsrs	r1, r1, #1
    3a3c:	4301      	orrs	r1, r0
    3a3e:	0852      	lsrs	r2, r2, #1
    3a40:	6898      	ldr	r0, [r3, #8]
    3a42:	07c0      	lsls	r0, r0, #31
    3a44:	6019      	str	r1, [r3, #0]
    3a46:	4042      	eors	r2, r0
    3a48:	605a      	str	r2, [r3, #4]
    3a4a:	3308      	adds	r3, #8
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    3a4c:	42a3      	cmp	r3, r4
    3a4e:	d1f1      	bne.n	3a34 <mLSB_set_recode+0x20>
    3a50:	4699      	mov	r9, r3
    }
    scalar[NWORDS64_ORDER-1] >>= 1;
    3a52:	69ea      	ldr	r2, [r5, #28]
    3a54:	07d1      	lsls	r1, r2, #31
    3a56:	69ab      	ldr	r3, [r5, #24]
    3a58:	085b      	lsrs	r3, r3, #1
    3a5a:	430b      	orrs	r3, r1
    3a5c:	61ab      	str	r3, [r5, #24]
    3a5e:	0852      	lsrs	r2, r2, #1
    3a60:	61ea      	str	r2, [r5, #28]
    3a62:	4659      	mov	r1, fp
    3a64:	23c4      	movs	r3, #196	; 0xc4
    3a66:	445b      	add	r3, fp
    3a68:	4698      	mov	r8, r3

    for (i = 0; i < (d-1); i++)
    {
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    3a6a:	2301      	movs	r3, #1
    3a6c:	469c      	mov	ip, r3
    3a6e:	9600      	str	r6, [sp, #0]
    3a70:	9701      	str	r7, [sp, #4]
    3a72:	4648      	mov	r0, r9
    3a74:	e00a      	b.n	3a8c <mLSB_set_recode+0x78>
                                                          // if scalar_(i+1) = 0 then digit_i = -1 (negative), else if scalar_(i+1) = 1 then digit_i = 0 (positive)
        // Shift scalar to the right by 1   
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    3a76:	69ef      	ldr	r7, [r5, #28]
    3a78:	07fb      	lsls	r3, r7, #31
    3a7a:	69aa      	ldr	r2, [r5, #24]
    3a7c:	0852      	lsrs	r2, r2, #1
    3a7e:	431a      	orrs	r2, r3
    3a80:	61aa      	str	r2, [r5, #24]
    3a82:	087b      	lsrs	r3, r7, #1
    3a84:	61eb      	str	r3, [r5, #28]
    3a86:	3104      	adds	r1, #4
    for (i = 0; i < (d-1); i++)
    3a88:	4541      	cmp	r1, r8
    3a8a:	d014      	beq.n	3ab6 <mLSB_set_recode+0xa2>
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    3a8c:	682b      	ldr	r3, [r5, #0]
    3a8e:	4662      	mov	r2, ip
    3a90:	4013      	ands	r3, r2
    3a92:	3b01      	subs	r3, #1
    3a94:	600b      	str	r3, [r1, #0]
    3a96:	9c04      	ldr	r4, [sp, #16]
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    3a98:	6863      	ldr	r3, [r4, #4]
    3a9a:	07de      	lsls	r6, r3, #31
    3a9c:	6822      	ldr	r2, [r4, #0]
    3a9e:	0852      	lsrs	r2, r2, #1
    3aa0:	4332      	orrs	r2, r6
    3aa2:	085b      	lsrs	r3, r3, #1
    3aa4:	68a6      	ldr	r6, [r4, #8]
    3aa6:	07f6      	lsls	r6, r6, #31
    3aa8:	6022      	str	r2, [r4, #0]
    3aaa:	4073      	eors	r3, r6
    3aac:	6063      	str	r3, [r4, #4]
    3aae:	3408      	adds	r4, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    3ab0:	4284      	cmp	r4, r0
    3ab2:	d1f1      	bne.n	3a98 <mLSB_set_recode+0x84>
    3ab4:	e7df      	b.n	3a76 <mLSB_set_recode+0x62>
    3ab6:	9e00      	ldr	r6, [sp, #0]
    3ab8:	9f01      	ldr	r7, [sp, #4]
    3aba:	23c8      	movs	r3, #200	; 0xc8
    3abc:	445b      	add	r3, fp
    3abe:	4698      	mov	r8, r3
    for (i = 0; i < (d-1); i++)
    3ac0:	2332      	movs	r3, #50	; 0x32
    3ac2:	2220      	movs	r2, #32
    3ac4:	4691      	mov	r9, r2
    3ac6:	44a9      	add	r9, r5
    3ac8:	46a2      	mov	sl, r4
    3aca:	4644      	mov	r4, r8
    3acc:	4698      	mov	r8, r3
    3ace:	465b      	mov	r3, fp
    3ad0:	9305      	str	r3, [sp, #20]
    3ad2:	e007      	b.n	3ae4 <mLSB_set_recode+0xd0>
    3ad4:	4681      	mov	r9, r0
    } 

    for (i = d; i < l; i++)
    3ad6:	2301      	movs	r3, #1
    3ad8:	469c      	mov	ip, r3
    3ada:	44e0      	add	r8, ip
    3adc:	3404      	adds	r4, #4
    3ade:	4643      	mov	r3, r8
    3ae0:	2bfa      	cmp	r3, #250	; 0xfa
    3ae2:	d056      	beq.n	3b92 <mLSB_set_recode+0x17e>
    3ae4:	46a3      	mov	fp, r4
    {
        digits[i] = (unsigned int)(scalar[0] & 1);        // digits_i = k mod 2. Sign is determined by the "sign" row
    3ae6:	2301      	movs	r3, #1
    3ae8:	682a      	ldr	r2, [r5, #0]
    3aea:	4013      	ands	r3, r2
    3aec:	6023      	str	r3, [r4, #0]
    3aee:	9904      	ldr	r1, [sp, #16]
    3af0:	9600      	str	r6, [sp, #0]
    3af2:	9701      	str	r7, [sp, #4]
    3af4:	4657      	mov	r7, sl

        // Shift scalar to the right by 1  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    3af6:	684b      	ldr	r3, [r1, #4]
    3af8:	07d8      	lsls	r0, r3, #31
    3afa:	680a      	ldr	r2, [r1, #0]
    3afc:	0852      	lsrs	r2, r2, #1
    3afe:	4302      	orrs	r2, r0
    3b00:	085b      	lsrs	r3, r3, #1
    3b02:	6888      	ldr	r0, [r1, #8]
    3b04:	07c0      	lsls	r0, r0, #31
    3b06:	600a      	str	r2, [r1, #0]
    3b08:	4043      	eors	r3, r0
    3b0a:	604b      	str	r3, [r1, #4]
    3b0c:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    3b0e:	42b9      	cmp	r1, r7
    3b10:	d1f1      	bne.n	3af6 <mLSB_set_recode+0xe2>
    3b12:	46ba      	mov	sl, r7
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    3b14:	69ea      	ldr	r2, [r5, #28]
    3b16:	07d1      	lsls	r1, r2, #31
    3b18:	69ab      	ldr	r3, [r5, #24]
    3b1a:	085b      	lsrs	r3, r3, #1
    3b1c:	430b      	orrs	r3, r1
    3b1e:	61ab      	str	r3, [r5, #24]
    3b20:	0852      	lsrs	r2, r2, #1
    3b22:	61ea      	str	r2, [r5, #28]

        temp = (0 - digits[i-(i/d)*d]) & digits[i];       // if (digits_i=0 \/ 1) then temp = 0, else if (digits_i=-1) then temp = 1 
    3b24:	2132      	movs	r1, #50	; 0x32
    3b26:	4640      	mov	r0, r8
    3b28:	4b1d      	ldr	r3, [pc, #116]	; (3ba0 <mLSB_set_recode+0x18c>)
    3b2a:	4798      	blx	r3
    3b2c:	0089      	lsls	r1, r1, #2
    3b2e:	9b05      	ldr	r3, [sp, #20]
    3b30:	58cb      	ldr	r3, [r1, r3]
    3b32:	425b      	negs	r3, r3
    3b34:	465a      	mov	r2, fp
    3b36:	6810      	ldr	r0, [r2, #0]
    3b38:	4018      	ands	r0, r3
    3b3a:	4684      	mov	ip, r0
    3b3c:	9002      	str	r0, [sp, #8]
    3b3e:	2300      	movs	r3, #0
    3b40:	9303      	str	r3, [sp, #12]
            
        // floor(scalar/2) + temp
        scalar[0] = scalar[0] + temp;
    3b42:	9a02      	ldr	r2, [sp, #8]
    3b44:	9b03      	ldr	r3, [sp, #12]
    3b46:	6828      	ldr	r0, [r5, #0]
    3b48:	6869      	ldr	r1, [r5, #4]
    3b4a:	1812      	adds	r2, r2, r0
    3b4c:	414b      	adcs	r3, r1
    3b4e:	0029      	movs	r1, r5
    3b50:	c10c      	stmia	r1!, {r2, r3}
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    3b52:	9200      	str	r2, [sp, #0]
    3b54:	9301      	str	r3, [sp, #4]
    3b56:	4253      	negs	r3, r2
    3b58:	9a00      	ldr	r2, [sp, #0]
    3b5a:	4313      	orrs	r3, r2
    3b5c:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    3b5e:	2201      	movs	r2, #1
    3b60:	4053      	eors	r3, r2
        carry = (temp & (uint64_t)is_digit_zero_ct((digit_t)scalar[0]));       // carry = (scalar[0] < temp);
    3b62:	4660      	mov	r0, ip
    3b64:	4018      	ands	r0, r3
    3b66:	0006      	movs	r6, r0
    3b68:	2700      	movs	r7, #0
    3b6a:	4648      	mov	r0, r9
        for (j = 1; j < NWORDS64_ORDER; j++)
        {
            scalar[j] = scalar[j] + carry; 
    3b6c:	680a      	ldr	r2, [r1, #0]
    3b6e:	684b      	ldr	r3, [r1, #4]
    3b70:	1992      	adds	r2, r2, r6
    3b72:	417b      	adcs	r3, r7
    3b74:	c10c      	stmia	r1!, {r2, r3}
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    3b76:	9200      	str	r2, [sp, #0]
    3b78:	9301      	str	r3, [sp, #4]
    3b7a:	4253      	negs	r3, r2
    3b7c:	9a00      	ldr	r2, [sp, #0]
    3b7e:	4313      	orrs	r3, r2
    3b80:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    3b82:	2201      	movs	r2, #1
    3b84:	4053      	eors	r3, r2
            carry = (carry & (uint64_t)is_digit_zero_ct((digit_t)scalar[j]));  // carry = (scalar[j] < temp);
    3b86:	4033      	ands	r3, r6
    3b88:	001e      	movs	r6, r3
    3b8a:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    3b8c:	4281      	cmp	r1, r0
    3b8e:	d1ed      	bne.n	3b6c <mLSB_set_recode+0x158>
    3b90:	e7a0      	b.n	3ad4 <mLSB_set_recode+0xc0>
        }
    } 
    return;              
}
    3b92:	b007      	add	sp, #28
    3b94:	bc3c      	pop	{r2, r3, r4, r5}
    3b96:	4690      	mov	r8, r2
    3b98:	4699      	mov	r9, r3
    3b9a:	46a2      	mov	sl, r4
    3b9c:	46ab      	mov	fp, r5
    3b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ba0:	00005c39 	.word	0x00005c39

00003ba4 <ecc_mul_fixed>:
{ // Fixed-base scalar multiplication Q = k*G, where G is the generator. FIXED_BASE_TABLE stores v*2^(w-1) = 80 multiples of G.
    3ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ba6:	46de      	mov	lr, fp
    3ba8:	4657      	mov	r7, sl
    3baa:	464e      	mov	r6, r9
    3bac:	4645      	mov	r5, r8
    3bae:	b5e0      	push	{r5, r6, r7, lr}
    3bb0:	4cce      	ldr	r4, [pc, #824]	; (3eec <ecc_mul_fixed+0x348>)
    3bb2:	44a5      	add	sp, r4
    3bb4:	0005      	movs	r5, r0
    3bb6:	9103      	str	r1, [sp, #12]
    unsigned int digit = 0, digits[NBITS_ORDER_PLUS_ONE+(W_FIXEDBASE*V_FIXEDBASE)-1] = {0}; 
    3bb8:	ac85      	add	r4, sp, #532	; 0x214
    3bba:	4acd      	ldr	r2, [pc, #820]	; (3ef0 <ecc_mul_fixed+0x34c>)
    3bbc:	2100      	movs	r1, #0
    3bbe:	0020      	movs	r0, r4
    3bc0:	4bcc      	ldr	r3, [pc, #816]	; (3ef4 <ecc_mul_fixed+0x350>)
    3bc2:	4798      	blx	r3
	modulo_order(k, temp);                                      // temp = k mod (order) 
    3bc4:	a97d      	add	r1, sp, #500	; 0x1f4
    3bc6:	0028      	movs	r0, r5
    3bc8:	4bcb      	ldr	r3, [pc, #812]	; (3ef8 <ecc_mul_fixed+0x354>)
    3bca:	4798      	blx	r3
	conversion_to_odd(temp, temp);                              // Converting scalar to odd using the prime subgroup order
    3bcc:	a97d      	add	r1, sp, #500	; 0x1f4
    3bce:	0008      	movs	r0, r1
    3bd0:	4bca      	ldr	r3, [pc, #808]	; (3efc <ecc_mul_fixed+0x358>)
    3bd2:	4798      	blx	r3
	mLSB_set_recode((uint64_t*)temp, digits);                   // Scalar recoding
    3bd4:	a985      	add	r1, sp, #532	; 0x214
    3bd6:	a87d      	add	r0, sp, #500	; 0x1f4
    3bd8:	4bc9      	ldr	r3, [pc, #804]	; (3f00 <ecc_mul_fixed+0x35c>)
    3bda:	4798      	blx	r3
    digit = digits[w*d-1];
    3bdc:	23f9      	movs	r3, #249	; 0xf9
    3bde:	009b      	lsls	r3, r3, #2
        digit = 2*digit + digits[i];
    3be0:	58e2      	ldr	r2, [r4, r3]
    3be2:	0052      	lsls	r2, r2, #1
    3be4:	3bc8      	subs	r3, #200	; 0xc8
    3be6:	58e3      	ldr	r3, [r4, r3]
    3be8:	18d2      	adds	r2, r2, r3
    3bea:	0052      	lsls	r2, r2, #1
    3bec:	2395      	movs	r3, #149	; 0x95
    3bee:	009b      	lsls	r3, r3, #2
    3bf0:	58e3      	ldr	r3, [r4, r3]
    3bf2:	18d2      	adds	r2, r2, r3
    3bf4:	0052      	lsls	r2, r2, #1
    table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    3bf6:	23c4      	movs	r3, #196	; 0xc4
    3bf8:	58e3      	ldr	r3, [r4, r3]
        digit = 2*digit + digits[i];
    3bfa:	21c6      	movs	r1, #198	; 0xc6
    3bfc:	0049      	lsls	r1, r1, #1
    3bfe:	5861      	ldr	r1, [r4, r1]
    3c00:	1852      	adds	r2, r2, r1
    table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    3c02:	4cc0      	ldr	r4, [pc, #768]	; (3f04 <ecc_mul_fixed+0x360>)
    3c04:	21f0      	movs	r1, #240	; 0xf0
    3c06:	0149      	lsls	r1, r1, #5
    3c08:	1860      	adds	r0, r4, r1
    3c0a:	a919      	add	r1, sp, #100	; 0x64
    3c0c:	4dbe      	ldr	r5, [pc, #760]	; (3f08 <ecc_mul_fixed+0x364>)
    3c0e:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    3c10:	aa37      	add	r2, sp, #220	; 0xdc
    3c12:	a923      	add	r1, sp, #140	; 0x8c
    3c14:	a819      	add	r0, sp, #100	; 0x64
    3c16:	4dbd      	ldr	r5, [pc, #756]	; (3f0c <ecc_mul_fixed+0x368>)
    3c18:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3c1a:	aa3c      	add	r2, sp, #240	; 0xf0
    3c1c:	a928      	add	r1, sp, #160	; 0xa0
    3c1e:	a81e      	add	r0, sp, #120	; 0x78
    3c20:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    3c22:	aa41      	add	r2, sp, #260	; 0x104
    3c24:	a923      	add	r1, sp, #140	; 0x8c
    3c26:	a819      	add	r0, sp, #100	; 0x64
    3c28:	4db9      	ldr	r5, [pc, #740]	; (3f10 <ecc_mul_fixed+0x36c>)
    3c2a:	47a8      	blx	r5
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3c2c:	aa46      	add	r2, sp, #280	; 0x118
    3c2e:	a928      	add	r1, sp, #160	; 0xa0
    3c30:	a81e      	add	r0, sp, #120	; 0x78
    3c32:	47a8      	blx	r5
    v2zero1271(Q->z); Q->z[0]=1;             // ZQ = 1
    3c34:	a84b      	add	r0, sp, #300	; 0x12c
    3c36:	4bb7      	ldr	r3, [pc, #732]	; (3f14 <ecc_mul_fixed+0x370>)
    3c38:	4798      	blx	r3
    3c3a:	2301      	movs	r3, #1
    3c3c:	934b      	str	r3, [sp, #300]	; 0x12c
    v2div1271(Q->x);                         // XQ = x1
    3c3e:	a837      	add	r0, sp, #220	; 0xdc
    3c40:	4db5      	ldr	r5, [pc, #724]	; (3f18 <ecc_mul_fixed+0x374>)
    3c42:	47a8      	blx	r5
    v2div1271(Q->y);                         // YQ = y1 
    3c44:	a841      	add	r0, sp, #260	; 0x104
    3c46:	47a8      	blx	r5
    v2copy1271(Q->x, Q->ta);                 // TaQ = x1
    3c48:	a955      	add	r1, sp, #340	; 0x154
    3c4a:	a837      	add	r0, sp, #220	; 0xdc
    3c4c:	4db3      	ldr	r5, [pc, #716]	; (3f1c <ecc_mul_fixed+0x378>)
    3c4e:	47a8      	blx	r5
    v2copy1271(Q->y, Q->tb);                 // TbQ = y1
    3c50:	a95f      	add	r1, sp, #380	; 0x17c
    3c52:	a841      	add	r0, sp, #260	; 0x104
    3c54:	47a8      	blx	r5
    3c56:	23b4      	movs	r3, #180	; 0xb4
    3c58:	015b      	lsls	r3, r3, #5
    3c5a:	4698      	mov	r8, r3
    3c5c:	44a0      	add	r8, r4
    3c5e:	23a1      	movs	r3, #161	; 0xa1
    3c60:	00db      	lsls	r3, r3, #3
    3c62:	446b      	add	r3, sp
    3c64:	469a      	mov	sl, r3
    3c66:	26bd      	movs	r6, #189	; 0xbd
        table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);   
    3c68:	4ba7      	ldr	r3, [pc, #668]	; (3f08 <ecc_mul_fixed+0x364>)
    3c6a:	4699      	mov	r9, r3
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    3c6c:	4dac      	ldr	r5, [pc, #688]	; (3f20 <ecc_mul_fixed+0x37c>)
    vadd1271(&a[0], &b[0], &c[0]);
    3c6e:	4ca8      	ldr	r4, [pc, #672]	; (3f10 <ecc_mul_fixed+0x36c>)
    3c70:	46d3      	mov	fp, sl
    3c72:	46dc      	mov	ip, fp
        digit = digits[w*d-(j+1)*e-1];
    3c74:	465b      	mov	r3, fp
    3c76:	33c8      	adds	r3, #200	; 0xc8
    3c78:	681a      	ldr	r2, [r3, #0]
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)           
    3c7a:	0033      	movs	r3, r6
    3c7c:	0030      	movs	r0, r6
    3c7e:	3864      	subs	r0, #100	; 0x64
    3c80:	4286      	cmp	r6, r0
    3c82:	db08      	blt.n	3c96 <ecc_mul_fixed+0xf2>
    3c84:	4659      	mov	r1, fp
            digit = 2*digit + digits[i];
    3c86:	0052      	lsls	r2, r2, #1
    3c88:	680f      	ldr	r7, [r1, #0]
    3c8a:	46ba      	mov	sl, r7
    3c8c:	4452      	add	r2, sl
    3c8e:	3b32      	subs	r3, #50	; 0x32
    3c90:	39c8      	subs	r1, #200	; 0xc8
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)           
    3c92:	4298      	cmp	r0, r3
    3c94:	ddf7      	ble.n	3c86 <ecc_mul_fixed+0xe2>
        table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);   
    3c96:	4ba3      	ldr	r3, [pc, #652]	; (3f24 <ecc_mul_fixed+0x380>)
    3c98:	4463      	add	r3, ip
    3c9a:	681b      	ldr	r3, [r3, #0]
    3c9c:	a919      	add	r1, sp, #100	; 0x64
    3c9e:	4640      	mov	r0, r8
    3ca0:	47c8      	blx	r9
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    3ca2:	aa55      	add	r2, sp, #340	; 0x154
    3ca4:	a95f      	add	r1, sp, #380	; 0x17c
    3ca6:	0010      	movs	r0, r2
    3ca8:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    3caa:	aa05      	add	r2, sp, #20
    3cac:	a94b      	add	r1, sp, #300	; 0x12c
    3cae:	0008      	movs	r0, r1
    3cb0:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3cb2:	aa0a      	add	r2, sp, #40	; 0x28
    3cb4:	a950      	add	r1, sp, #320	; 0x140
    3cb6:	0008      	movs	r0, r1
    3cb8:	47a0      	blx	r4
    v2mul1271(P->ta, Q->t2, P->ta);                       // Ta = 2dT1*t2 
    3cba:	aa55      	add	r2, sp, #340	; 0x154
    3cbc:	a92d      	add	r1, sp, #180	; 0xb4
    3cbe:	0010      	movs	r0, r2
    3cc0:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    3cc2:	aa4b      	add	r2, sp, #300	; 0x12c
    3cc4:	a941      	add	r1, sp, #260	; 0x104
    3cc6:	a837      	add	r0, sp, #220	; 0xdc
    3cc8:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3cca:	aa50      	add	r2, sp, #320	; 0x140
    3ccc:	a946      	add	r1, sp, #280	; 0x118
    3cce:	a83c      	add	r0, sp, #240	; 0xf0
    3cd0:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    3cd2:	aa5f      	add	r2, sp, #380	; 0x17c
    3cd4:	a937      	add	r1, sp, #220	; 0xdc
    3cd6:	a841      	add	r0, sp, #260	; 0x104
    3cd8:	4b8c      	ldr	r3, [pc, #560]	; (3f0c <ecc_mul_fixed+0x368>)
    3cda:	469a      	mov	sl, r3
    3cdc:	4798      	blx	r3
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3cde:	aa64      	add	r2, sp, #400	; 0x190
    3ce0:	a93c      	add	r1, sp, #240	; 0xf0
    3ce2:	a846      	add	r0, sp, #280	; 0x118
    3ce4:	47d0      	blx	sl
    vsub1271(&a[0], &b[0], &c[0]);
    3ce6:	aa0f      	add	r2, sp, #60	; 0x3c
    3ce8:	a955      	add	r1, sp, #340	; 0x154
    3cea:	a805      	add	r0, sp, #20
    3cec:	47d0      	blx	sl
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3cee:	aa14      	add	r2, sp, #80	; 0x50
    3cf0:	a95a      	add	r1, sp, #360	; 0x168
    3cf2:	a80a      	add	r0, sp, #40	; 0x28
    3cf4:	47d0      	blx	sl
    vadd1271(&a[0], &b[0], &c[0]);
    3cf6:	aa05      	add	r2, sp, #20
    3cf8:	a955      	add	r1, sp, #340	; 0x154
    3cfa:	0010      	movs	r0, r2
    3cfc:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3cfe:	aa0a      	add	r2, sp, #40	; 0x28
    3d00:	a95a      	add	r1, sp, #360	; 0x168
    3d02:	0010      	movs	r0, r2
    3d04:	47a0      	blx	r4
    v2mul1271(Q->xy, P->z, P->ta);                        // Ta = (X1+Y1)(x2+y2)
    3d06:	aa55      	add	r2, sp, #340	; 0x154
    3d08:	a94b      	add	r1, sp, #300	; 0x12c
    3d0a:	a819      	add	r0, sp, #100	; 0x64
    3d0c:	47a8      	blx	r5
    v2mul1271(Q->yx, P->tb, P->x);                        // X = (Y1-X1)(y2-x2)
    3d0e:	aa37      	add	r2, sp, #220	; 0xdc
    3d10:	a95f      	add	r1, sp, #380	; 0x17c
    3d12:	a823      	add	r0, sp, #140	; 0x8c
    3d14:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    3d16:	aa5f      	add	r2, sp, #380	; 0x17c
    3d18:	a937      	add	r1, sp, #220	; 0xdc
    3d1a:	a855      	add	r0, sp, #340	; 0x154
    3d1c:	47d0      	blx	sl
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3d1e:	aa64      	add	r2, sp, #400	; 0x190
    3d20:	a93c      	add	r1, sp, #240	; 0xf0
    3d22:	a85a      	add	r0, sp, #360	; 0x168
    3d24:	47d0      	blx	sl
    vadd1271(&a[0], &b[0], &c[0]);
    3d26:	aa55      	add	r2, sp, #340	; 0x154
    3d28:	a937      	add	r1, sp, #220	; 0xdc
    3d2a:	0010      	movs	r0, r2
    3d2c:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3d2e:	aa5a      	add	r2, sp, #360	; 0x168
    3d30:	a93c      	add	r1, sp, #240	; 0xf0
    3d32:	0010      	movs	r0, r2
    3d34:	47a0      	blx	r4
    v2mul1271(t1, t2, P->z);                              // Zfinal = theta*alpha
    3d36:	aa4b      	add	r2, sp, #300	; 0x12c
    3d38:	a90f      	add	r1, sp, #60	; 0x3c
    3d3a:	a805      	add	r0, sp, #20
    3d3c:	47a8      	blx	r5
    v2mul1271(P->tb, t2, P->x);                           // Xfinal = beta*theta
    3d3e:	aa37      	add	r2, sp, #220	; 0xdc
    3d40:	a90f      	add	r1, sp, #60	; 0x3c
    3d42:	a85f      	add	r0, sp, #380	; 0x17c
    3d44:	47a8      	blx	r5
    v2mul1271(P->ta, t1, P->y);                           // Yfinal = alpha*omega
    3d46:	aa41      	add	r2, sp, #260	; 0x104
    3d48:	a905      	add	r1, sp, #20
    3d4a:	a855      	add	r0, sp, #340	; 0x154
    3d4c:	47a8      	blx	r5
    3d4e:	3e0a      	subs	r6, #10
    3d50:	4b75      	ldr	r3, [pc, #468]	; (3f28 <ecc_mul_fixed+0x384>)
    3d52:	469c      	mov	ip, r3
    3d54:	44e0      	add	r8, ip
    3d56:	2328      	movs	r3, #40	; 0x28
    3d58:	425b      	negs	r3, r3
    3d5a:	469c      	mov	ip, r3
    3d5c:	44e3      	add	fp, ip
    for (j = 0; j < (v-1); j++)
    3d5e:	2e95      	cmp	r6, #149	; 0x95
    3d60:	d187      	bne.n	3c72 <ecc_mul_fixed+0xce>
    3d62:	4b72      	ldr	r3, [pc, #456]	; (3f2c <ecc_mul_fixed+0x388>)
    3d64:	aa04      	add	r2, sp, #16
    3d66:	4694      	mov	ip, r2
    3d68:	4463      	add	r3, ip
    3d6a:	9302      	str	r3, [sp, #8]
    3d6c:	23c6      	movs	r3, #198	; 0xc6
    3d6e:	9301      	str	r3, [sp, #4]
            table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]); 
    3d70:	4b65      	ldr	r3, [pc, #404]	; (3f08 <ecc_mul_fixed+0x364>)
    3d72:	469b      	mov	fp, r3
    3d74:	e008      	b.n	3d88 <ecc_mul_fixed+0x1e4>
    3d76:	9b01      	ldr	r3, [sp, #4]
    3d78:	3b01      	subs	r3, #1
    3d7a:	9301      	str	r3, [sp, #4]
    3d7c:	9a02      	ldr	r2, [sp, #8]
    3d7e:	3a04      	subs	r2, #4
    3d80:	9202      	str	r2, [sp, #8]
    for (ii = (e-2); ii >= 0; ii--)
    3d82:	2bbd      	cmp	r3, #189	; 0xbd
    3d84:	d100      	bne.n	3d88 <ecc_mul_fixed+0x1e4>
    3d86:	e08b      	b.n	3ea0 <ecc_mul_fixed+0x2fc>
        eccdouble(R);                                           // R = 2*R using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    3d88:	a837      	add	r0, sp, #220	; 0xdc
    3d8a:	4b69      	ldr	r3, [pc, #420]	; (3f30 <ecc_mul_fixed+0x38c>)
    3d8c:	4798      	blx	r3
    3d8e:	4b5d      	ldr	r3, [pc, #372]	; (3f04 <ecc_mul_fixed+0x360>)
    3d90:	22f0      	movs	r2, #240	; 0xf0
    3d92:	0152      	lsls	r2, r2, #5
    3d94:	4694      	mov	ip, r2
    3d96:	4463      	add	r3, ip
    3d98:	4699      	mov	r9, r3
    3d9a:	9f01      	ldr	r7, [sp, #4]
    3d9c:	003b      	movs	r3, r7
    3d9e:	2232      	movs	r2, #50	; 0x32
    3da0:	4252      	negs	r2, r2
    3da2:	4694      	mov	ip, r2
    3da4:	4463      	add	r3, ip
    3da6:	469a      	mov	sl, r3
    3da8:	9b02      	ldr	r3, [sp, #8]
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    3daa:	4d5d      	ldr	r5, [pc, #372]	; (3f20 <ecc_mul_fixed+0x37c>)
    vadd1271(&a[0], &b[0], &c[0]);
    3dac:	4c58      	ldr	r4, [pc, #352]	; (3f10 <ecc_mul_fixed+0x36c>)
    3dae:	001e      	movs	r6, r3
    3db0:	46b4      	mov	ip, r6
            digit = digits[w*d-j*e+ii-e];
    3db2:	0033      	movs	r3, r6
    3db4:	33c8      	adds	r3, #200	; 0xc8
    3db6:	681a      	ldr	r2, [r3, #0]
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)           
    3db8:	003b      	movs	r3, r7
    3dba:	0038      	movs	r0, r7
    3dbc:	3864      	subs	r0, #100	; 0x64
    3dbe:	4287      	cmp	r7, r0
    3dc0:	db0a      	blt.n	3dd8 <ecc_mul_fixed+0x234>
    3dc2:	0031      	movs	r1, r6
    3dc4:	9600      	str	r6, [sp, #0]
                digit = 2*digit + digits[i];
    3dc6:	0052      	lsls	r2, r2, #1
    3dc8:	680e      	ldr	r6, [r1, #0]
    3dca:	46b0      	mov	r8, r6
    3dcc:	4442      	add	r2, r8
    3dce:	3b32      	subs	r3, #50	; 0x32
    3dd0:	39c8      	subs	r1, #200	; 0xc8
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)           
    3dd2:	4283      	cmp	r3, r0
    3dd4:	daf7      	bge.n	3dc6 <ecc_mul_fixed+0x222>
    3dd6:	9e00      	ldr	r6, [sp, #0]
            table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]); 
    3dd8:	4b52      	ldr	r3, [pc, #328]	; (3f24 <ecc_mul_fixed+0x380>)
    3dda:	4463      	add	r3, ip
    3ddc:	681b      	ldr	r3, [r3, #0]
    3dde:	a919      	add	r1, sp, #100	; 0x64
    3de0:	4648      	mov	r0, r9
    3de2:	47d8      	blx	fp
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    3de4:	aa55      	add	r2, sp, #340	; 0x154
    3de6:	a95f      	add	r1, sp, #380	; 0x17c
    3de8:	0010      	movs	r0, r2
    3dea:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    3dec:	aa05      	add	r2, sp, #20
    3dee:	a94b      	add	r1, sp, #300	; 0x12c
    3df0:	0008      	movs	r0, r1
    3df2:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3df4:	aa0a      	add	r2, sp, #40	; 0x28
    3df6:	a950      	add	r1, sp, #320	; 0x140
    3df8:	0008      	movs	r0, r1
    3dfa:	47a0      	blx	r4
    v2mul1271(P->ta, Q->t2, P->ta);                       // Ta = 2dT1*t2 
    3dfc:	aa55      	add	r2, sp, #340	; 0x154
    3dfe:	a92d      	add	r1, sp, #180	; 0xb4
    3e00:	0010      	movs	r0, r2
    3e02:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    3e04:	aa4b      	add	r2, sp, #300	; 0x12c
    3e06:	a941      	add	r1, sp, #260	; 0x104
    3e08:	a837      	add	r0, sp, #220	; 0xdc
    3e0a:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3e0c:	aa50      	add	r2, sp, #320	; 0x140
    3e0e:	a946      	add	r1, sp, #280	; 0x118
    3e10:	a83c      	add	r0, sp, #240	; 0xf0
    3e12:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    3e14:	aa5f      	add	r2, sp, #380	; 0x17c
    3e16:	a937      	add	r1, sp, #220	; 0xdc
    3e18:	a841      	add	r0, sp, #260	; 0x104
    3e1a:	4b3c      	ldr	r3, [pc, #240]	; (3f0c <ecc_mul_fixed+0x368>)
    3e1c:	4698      	mov	r8, r3
    3e1e:	4798      	blx	r3
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3e20:	aa64      	add	r2, sp, #400	; 0x190
    3e22:	a93c      	add	r1, sp, #240	; 0xf0
    3e24:	a846      	add	r0, sp, #280	; 0x118
    3e26:	47c0      	blx	r8
    vsub1271(&a[0], &b[0], &c[0]);
    3e28:	aa0f      	add	r2, sp, #60	; 0x3c
    3e2a:	a955      	add	r1, sp, #340	; 0x154
    3e2c:	a805      	add	r0, sp, #20
    3e2e:	47c0      	blx	r8
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3e30:	aa14      	add	r2, sp, #80	; 0x50
    3e32:	a95a      	add	r1, sp, #360	; 0x168
    3e34:	a80a      	add	r0, sp, #40	; 0x28
    3e36:	47c0      	blx	r8
    vadd1271(&a[0], &b[0], &c[0]);
    3e38:	aa05      	add	r2, sp, #20
    3e3a:	a955      	add	r1, sp, #340	; 0x154
    3e3c:	0010      	movs	r0, r2
    3e3e:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3e40:	aa0a      	add	r2, sp, #40	; 0x28
    3e42:	a95a      	add	r1, sp, #360	; 0x168
    3e44:	0010      	movs	r0, r2
    3e46:	47a0      	blx	r4
    v2mul1271(Q->xy, P->z, P->ta);                        // Ta = (X1+Y1)(x2+y2)
    3e48:	aa55      	add	r2, sp, #340	; 0x154
    3e4a:	a94b      	add	r1, sp, #300	; 0x12c
    3e4c:	a819      	add	r0, sp, #100	; 0x64
    3e4e:	47a8      	blx	r5
    v2mul1271(Q->yx, P->tb, P->x);                        // X = (Y1-X1)(y2-x2)
    3e50:	aa37      	add	r2, sp, #220	; 0xdc
    3e52:	a95f      	add	r1, sp, #380	; 0x17c
    3e54:	a823      	add	r0, sp, #140	; 0x8c
    3e56:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    3e58:	aa5f      	add	r2, sp, #380	; 0x17c
    3e5a:	a937      	add	r1, sp, #220	; 0xdc
    3e5c:	a855      	add	r0, sp, #340	; 0x154
    3e5e:	47c0      	blx	r8
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3e60:	aa64      	add	r2, sp, #400	; 0x190
    3e62:	a93c      	add	r1, sp, #240	; 0xf0
    3e64:	a85a      	add	r0, sp, #360	; 0x168
    3e66:	47c0      	blx	r8
    vadd1271(&a[0], &b[0], &c[0]);
    3e68:	aa55      	add	r2, sp, #340	; 0x154
    3e6a:	a937      	add	r1, sp, #220	; 0xdc
    3e6c:	0010      	movs	r0, r2
    3e6e:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3e70:	aa5a      	add	r2, sp, #360	; 0x168
    3e72:	a93c      	add	r1, sp, #240	; 0xf0
    3e74:	0010      	movs	r0, r2
    3e76:	47a0      	blx	r4
    v2mul1271(t1, t2, P->z);                              // Zfinal = theta*alpha
    3e78:	aa4b      	add	r2, sp, #300	; 0x12c
    3e7a:	a90f      	add	r1, sp, #60	; 0x3c
    3e7c:	a805      	add	r0, sp, #20
    3e7e:	47a8      	blx	r5
    v2mul1271(P->tb, t2, P->x);                           // Xfinal = beta*theta
    3e80:	aa37      	add	r2, sp, #220	; 0xdc
    3e82:	a90f      	add	r1, sp, #60	; 0x3c
    3e84:	a85f      	add	r0, sp, #380	; 0x17c
    3e86:	47a8      	blx	r5
    v2mul1271(P->ta, t1, P->y);                           // Yfinal = alpha*omega
    3e88:	aa41      	add	r2, sp, #260	; 0x104
    3e8a:	a905      	add	r1, sp, #20
    3e8c:	a855      	add	r0, sp, #340	; 0x154
    3e8e:	47a8      	blx	r5
    3e90:	3f0a      	subs	r7, #10
    3e92:	4b25      	ldr	r3, [pc, #148]	; (3f28 <ecc_mul_fixed+0x384>)
    3e94:	469c      	mov	ip, r3
    3e96:	44e1      	add	r9, ip
    3e98:	3e28      	subs	r6, #40	; 0x28
        for (j = 0; j < v; j++)
    3e9a:	4557      	cmp	r7, sl
    3e9c:	d188      	bne.n	3db0 <ecc_mul_fixed+0x20c>
    3e9e:	e76a      	b.n	3d76 <ecc_mul_fixed+0x1d2>
    v2inv1271(P->z);                      // Z1 = Z1^-1
    3ea0:	a84b      	add	r0, sp, #300	; 0x12c
    3ea2:	4b24      	ldr	r3, [pc, #144]	; (3f34 <ecc_mul_fixed+0x390>)
    3ea4:	4798      	blx	r3
    v2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    3ea6:	aa69      	add	r2, sp, #420	; 0x1a4
    3ea8:	a94b      	add	r1, sp, #300	; 0x12c
    3eaa:	a837      	add	r0, sp, #220	; 0xdc
    3eac:	4c1c      	ldr	r4, [pc, #112]	; (3f20 <ecc_mul_fixed+0x37c>)
    3eae:	47a0      	blx	r4
    v2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    3eb0:	aa73      	add	r2, sp, #460	; 0x1cc
    3eb2:	a94b      	add	r1, sp, #300	; 0x12c
    3eb4:	a841      	add	r0, sp, #260	; 0x104
    3eb6:	47a0      	blx	r4
    v2mod1271(Q->x, Q->x); 
    3eb8:	a969      	add	r1, sp, #420	; 0x1a4
    3eba:	0008      	movs	r0, r1
    3ebc:	4c1e      	ldr	r4, [pc, #120]	; (3f38 <ecc_mul_fixed+0x394>)
    3ebe:	47a0      	blx	r4
    v2mod1271(Q->y, Q->y); 
    3ec0:	a973      	add	r1, sp, #460	; 0x1cc
    3ec2:	0008      	movs	r0, r1
    3ec4:	47a0      	blx	r4
    from_ext_to_std(A->x, Q->x);
    3ec6:	9d03      	ldr	r5, [sp, #12]
    3ec8:	0029      	movs	r1, r5
    3eca:	a869      	add	r0, sp, #420	; 0x1a4
    3ecc:	4c1b      	ldr	r4, [pc, #108]	; (3f3c <ecc_mul_fixed+0x398>)
    3ece:	47a0      	blx	r4
    from_ext_to_std(A->y, Q->y); 
    3ed0:	0029      	movs	r1, r5
    3ed2:	3120      	adds	r1, #32
    3ed4:	a873      	add	r0, sp, #460	; 0x1cc
    3ed6:	47a0      	blx	r4
}
    3ed8:	2001      	movs	r0, #1
    3eda:	4b19      	ldr	r3, [pc, #100]	; (3f40 <ecc_mul_fixed+0x39c>)
    3edc:	449d      	add	sp, r3
    3ede:	bc3c      	pop	{r2, r3, r4, r5}
    3ee0:	4690      	mov	r8, r2
    3ee2:	4699      	mov	r9, r3
    3ee4:	46a2      	mov	sl, r4
    3ee6:	46ab      	mov	fp, r5
    3ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3eea:	46c0      	nop			; (mov r8, r8)
    3eec:	fffff9ac 	.word	0xfffff9ac
    3ef0:	0000043c 	.word	0x0000043c
    3ef4:	00005eff 	.word	0x00005eff
    3ef8:	00002bb1 	.word	0x00002bb1
    3efc:	00002be9 	.word	0x00002be9
    3f00:	00003a15 	.word	0x00003a15
    3f04:	00007efc 	.word	0x00007efc
    3f08:	00003019 	.word	0x00003019
    3f0c:	000020bb 	.word	0x000020bb
    3f10:	0000207f 	.word	0x0000207f
    3f14:	00003145 	.word	0x00003145
    3f18:	00003251 	.word	0x00003251
    3f1c:	00002c9f 	.word	0x00002c9f
    3f20:	0000333d 	.word	0x0000333d
    3f24:	fffffda8 	.word	0xfffffda8
    3f28:	fffff880 	.word	0xfffff880
    3f2c:	0000051c 	.word	0x0000051c
    3f30:	00003655 	.word	0x00003655
    3f34:	000033fd 	.word	0x000033fd
    3f38:	00003321 	.word	0x00003321
    3f3c:	00002981 	.word	0x00002981
    3f40:	00000654 	.word	0x00000654

00003f44 <fixed_window_recode>:

/***********************************************/
/**********  CURVE/SCALAR FUNCTIONS  ***********/

void fixed_window_recode(uint64_t* scalar, unsigned int* digits, unsigned int* sign_masks)
{ // Converting scalar to the fixed window representation used by the variable-base scalar multiplication
    3f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f46:	46de      	mov	lr, fp
    3f48:	4657      	mov	r7, sl
    3f4a:	464e      	mov	r6, r9
    3f4c:	4645      	mov	r5, r8
    3f4e:	b5e0      	push	{r5, r6, r7, lr}
    3f50:	b089      	sub	sp, #36	; 0x24
    3f52:	4692      	mov	sl, r2
    3f54:	2300      	movs	r3, #0
    3f56:	469c      	mov	ip, r3
    3f58:	3320      	adds	r3, #32
    3f5a:	4699      	mov	r9, r3
    3f5c:	4481      	add	r9, r0
    3f5e:	3b08      	subs	r3, #8
    3f60:	4698      	mov	r8, r3
    3f62:	4480      	add	r8, r0
    3f64:	4643      	mov	r3, r8
    3f66:	9300      	str	r3, [sp, #0]
    3f68:	9107      	str	r1, [sp, #28]
    3f6a:	4683      	mov	fp, r0
    3f6c:	e011      	b.n	3f92 <fixed_window_recode+0x4e>
    3f6e:	9400      	str	r4, [sp, #0]
        }    
  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] = scalar[NWORDS64_ORDER-1] >> (W_VARBASE-1);
    3f70:	465b      	mov	r3, fp
    3f72:	69db      	ldr	r3, [r3, #28]
    3f74:	0719      	lsls	r1, r3, #28
    3f76:	465a      	mov	r2, fp
    3f78:	6992      	ldr	r2, [r2, #24]
    3f7a:	0912      	lsrs	r2, r2, #4
    3f7c:	430a      	orrs	r2, r1
    3f7e:	4659      	mov	r1, fp
    3f80:	618a      	str	r2, [r1, #24]
    3f82:	091b      	lsrs	r3, r3, #4
    3f84:	61cb      	str	r3, [r1, #28]
    3f86:	2304      	movs	r3, #4
    3f88:	4698      	mov	r8, r3
    3f8a:	44c4      	add	ip, r8
    for (i = 0; i < t_VARBASE; i++)
    3f8c:	4663      	mov	r3, ip
    3f8e:	2bf8      	cmp	r3, #248	; 0xf8
    3f90:	d069      	beq.n	4066 <fixed_window_recode+0x122>
        temp = (scalar[0] & val1) - val2;    // ki = (k mod 2^w)/2^(w-1)
    3f92:	465a      	mov	r2, fp
    3f94:	231f      	movs	r3, #31
    3f96:	6812      	ldr	r2, [r2, #0]
    3f98:	4013      	ands	r3, r2
    3f9a:	9304      	str	r3, [sp, #16]
    3f9c:	2300      	movs	r3, #0
    3f9e:	9305      	str	r3, [sp, #20]
    3fa0:	9a04      	ldr	r2, [sp, #16]
    3fa2:	9b05      	ldr	r3, [sp, #20]
    3fa4:	2010      	movs	r0, #16
    3fa6:	4240      	negs	r0, r0
    3fa8:	17c1      	asrs	r1, r0, #31
    3faa:	1812      	adds	r2, r2, r0
    3fac:	414b      	adcs	r3, r1
        sign_masks[i] = ~((unsigned int)(temp >> (RADIX64-1)));
    3fae:	17d9      	asrs	r1, r3, #31
    3fb0:	9102      	str	r1, [sp, #8]
    3fb2:	9103      	str	r1, [sp, #12]
    3fb4:	43c9      	mvns	r1, r1
    3fb6:	4650      	mov	r0, sl
    3fb8:	4665      	mov	r5, ip
    3fba:	5141      	str	r1, [r0, r5]
        digits[i] = ((sign_masks[i] & (unsigned int)(temp ^ -temp)) ^ (unsigned int)-temp) >> 1;        
    3fbc:	4250      	negs	r0, r2
    3fbe:	0004      	movs	r4, r0
    3fc0:	4054      	eors	r4, r2
    3fc2:	4021      	ands	r1, r4
    3fc4:	4048      	eors	r0, r1
    3fc6:	0840      	lsrs	r0, r0, #1
    3fc8:	9907      	ldr	r1, [sp, #28]
    3fca:	5148      	str	r0, [r1, r5]
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    3fcc:	4659      	mov	r1, fp
    3fce:	6809      	ldr	r1, [r1, #0]
    3fd0:	1a8d      	subs	r5, r1, r2
    3fd2:	4055      	eors	r5, r2
    3fd4:	4659      	mov	r1, fp
    3fd6:	6809      	ldr	r1, [r1, #0]
    3fd8:	4051      	eors	r1, r2
    3fda:	000c      	movs	r4, r1
    3fdc:	432c      	orrs	r4, r5
    3fde:	4659      	mov	r1, fp
    3fe0:	6809      	ldr	r1, [r1, #0]
    3fe2:	404c      	eors	r4, r1
    3fe4:	0fe1      	lsrs	r1, r4, #31
    3fe6:	4688      	mov	r8, r1
        borrow = ((temp >> (RADIX64-1)) - 1) & (uint64_t)is_digit_lessthan_ct((digit_t)scalar[0], (digit_t)temp);
    3fe8:	9c02      	ldr	r4, [sp, #8]
    3fea:	9d03      	ldr	r5, [sp, #12]
    3fec:	2001      	movs	r0, #1
    3fee:	4240      	negs	r0, r0
    3ff0:	17c1      	asrs	r1, r0, #31
    3ff2:	1824      	adds	r4, r4, r0
    3ff4:	414d      	adcs	r5, r1
    3ff6:	4641      	mov	r1, r8
    3ff8:	4021      	ands	r1, r4
    3ffa:	000e      	movs	r6, r1
    3ffc:	2700      	movs	r7, #0
        res = scalar[0] - temp;              // k = (k - ki) / 2^(w-1) 
    3ffe:	4659      	mov	r1, fp
    4000:	6808      	ldr	r0, [r1, #0]
    4002:	6849      	ldr	r1, [r1, #4]
    4004:	1a80      	subs	r0, r0, r2
    4006:	4199      	sbcs	r1, r3
    4008:	0002      	movs	r2, r0
    400a:	000b      	movs	r3, r1
        scalar[0] = res;
    400c:	4659      	mov	r1, fp
    400e:	c10c      	stmia	r1!, {r2, r3}
    4010:	9b00      	ldr	r3, [sp, #0]
    4012:	4698      	mov	r8, r3
    4014:	4648      	mov	r0, r9
            res = scalar[j];
    4016:	680b      	ldr	r3, [r1, #0]
    4018:	684c      	ldr	r4, [r1, #4]
    401a:	001a      	movs	r2, r3
    401c:	0023      	movs	r3, r4
            scalar[j] = res - borrow;
    401e:	0014      	movs	r4, r2
    4020:	001d      	movs	r5, r3
    4022:	1ba4      	subs	r4, r4, r6
    4024:	41bd      	sbcs	r5, r7
    4026:	c130      	stmia	r1!, {r4, r5}
    4028:	9200      	str	r2, [sp, #0]
    402a:	9301      	str	r3, [sp, #4]
    402c:	1b93      	subs	r3, r2, r6
    402e:	4073      	eors	r3, r6
    4030:	0034      	movs	r4, r6
    4032:	9d00      	ldr	r5, [sp, #0]
    4034:	406c      	eors	r4, r5
    4036:	4323      	orrs	r3, r4
    4038:	406b      	eors	r3, r5
            borrow = (uint64_t)is_digit_lessthan_ct((digit_t)res, (digit_t)borrow); 
    403a:	0fde      	lsrs	r6, r3, #31
    403c:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    403e:	4281      	cmp	r1, r0
    4040:	d1e9      	bne.n	4016 <fixed_window_recode+0xd2>
    4042:	4681      	mov	r9, r0
    4044:	4659      	mov	r1, fp
    4046:	4644      	mov	r4, r8
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
    4048:	684b      	ldr	r3, [r1, #4]
    404a:	0718      	lsls	r0, r3, #28
    404c:	680a      	ldr	r2, [r1, #0]
    404e:	0912      	lsrs	r2, r2, #4
    4050:	4302      	orrs	r2, r0
    4052:	091b      	lsrs	r3, r3, #4
    4054:	6888      	ldr	r0, [r1, #8]
    4056:	0700      	lsls	r0, r0, #28
    4058:	600a      	str	r2, [r1, #0]
    405a:	4043      	eors	r3, r0
    405c:	604b      	str	r3, [r1, #4]
    405e:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
    4060:	428c      	cmp	r4, r1
    4062:	d1f1      	bne.n	4048 <fixed_window_recode+0x104>
    4064:	e783      	b.n	3f6e <fixed_window_recode+0x2a>
    4066:	4658      	mov	r0, fp
    4068:	9b07      	ldr	r3, [sp, #28]
    406a:	469b      	mov	fp, r3

    } 
    sign_masks[t_VARBASE] = ~((unsigned int)(scalar[0] >> (RADIX64-1)));
    406c:	684b      	ldr	r3, [r1, #4]
    406e:	0fdb      	lsrs	r3, r3, #31
    4070:	43db      	mvns	r3, r3
    4072:	21f8      	movs	r1, #248	; 0xf8
    4074:	4652      	mov	r2, sl
    4076:	5053      	str	r3, [r2, r1]
    digits[t_VARBASE] = ((sign_masks[t_VARBASE] & (unsigned int)(scalar[0] ^ (0-scalar[0]))) ^ (unsigned int)(0-scalar[0])) >> 1;    // kt = k  (t_VARBASE+1 digits)
    4078:	6802      	ldr	r2, [r0, #0]
    407a:	4250      	negs	r0, r2
    407c:	4042      	eors	r2, r0
    407e:	4013      	ands	r3, r2
    4080:	4043      	eors	r3, r0
    4082:	085b      	lsrs	r3, r3, #1
    4084:	465a      	mov	r2, fp
    4086:	5053      	str	r3, [r2, r1]
}
    4088:	b009      	add	sp, #36	; 0x24
    408a:	bc3c      	pop	{r2, r3, r4, r5}
    408c:	4690      	mov	r8, r2
    408e:	4699      	mov	r9, r3
    4090:	46a2      	mov	sl, r4
    4092:	46ab      	mov	fp, r5
    4094:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00004098 <ecc_precomp>:


void ecc_precomp(vpoint_extproj_t P, vpoint_extproj_precomp_t *T)
{ // Generation of the precomputation table used by the variable-base scalar multiplication ecc_mul().
    4098:	b5f0      	push	{r4, r5, r6, r7, lr}
    409a:	b0db      	sub	sp, #364	; 0x16c
    409c:	0004      	movs	r4, r0
    409e:	000d      	movs	r5, r1
    vpoint_extproj_precomp_t P2;
    vpoint_extproj_t Q;
    unsigned int i; 

    // Generating P2 = 2(X1,Y1,Z1,T1a,T1b) = (XP2+YP2,Y2P-X2P,ZP2,TP2) and T[0] = P = (X1+Y1,Y1-X1,2*Z1,2*d*T1)
    ecccopy(P, Q);
    40a0:	4669      	mov	r1, sp
    40a2:	4e18      	ldr	r6, [pc, #96]	; (4104 <ecc_precomp+0x6c>)
    40a4:	47b0      	blx	r6
    40a6:	0020      	movs	r0, r4
    40a8:	3028      	adds	r0, #40	; 0x28
    40aa:	a90a      	add	r1, sp, #40	; 0x28
    40ac:	47b0      	blx	r6
    40ae:	0020      	movs	r0, r4
    40b0:	3050      	adds	r0, #80	; 0x50
    40b2:	a914      	add	r1, sp, #80	; 0x50
    40b4:	47b0      	blx	r6
    40b6:	0020      	movs	r0, r4
    40b8:	3078      	adds	r0, #120	; 0x78
    40ba:	a91e      	add	r1, sp, #120	; 0x78
    40bc:	47b0      	blx	r6
    40be:	0020      	movs	r0, r4
    40c0:	30a0      	adds	r0, #160	; 0xa0
    40c2:	a928      	add	r1, sp, #160	; 0xa0
    40c4:	47b0      	blx	r6
    R1_to_R2(P, T[0]);
    40c6:	0029      	movs	r1, r5
    40c8:	0020      	movs	r0, r4
    40ca:	4b0f      	ldr	r3, [pc, #60]	; (4108 <ecc_precomp+0x70>)
    40cc:	4798      	blx	r3
    eccdouble(Q);
    40ce:	4668      	mov	r0, sp
    40d0:	4b0e      	ldr	r3, [pc, #56]	; (410c <ecc_precomp+0x74>)
    40d2:	4798      	blx	r3
    R1_to_R3(Q, P2);
    40d4:	a932      	add	r1, sp, #200	; 0xc8
    40d6:	4668      	mov	r0, sp
    40d8:	4b0d      	ldr	r3, [pc, #52]	; (4110 <ecc_precomp+0x78>)
    40da:	4798      	blx	r3
    40dc:	002c      	movs	r4, r5
    40de:	238c      	movs	r3, #140	; 0x8c
    40e0:	00db      	lsls	r3, r3, #3
    40e2:	469c      	mov	ip, r3
    40e4:	4465      	add	r5, ip

    for (i = 1; i < NPOINTS_VARBASE; i++) {
        // T[i] = 2P+T[i-1] = (2*i+1)P = (XP2+YP2,Y2P-X2P,ZP2,TP2) + (X_(2*i-1)+Y_(2*i-1), Y_(2*i-1)-X_(2*i-1), 2Z_(2*i-1), 2T_(2*i-1)) = (X_(2*i+1)+Y_(2*i+1), Y_(2*i+1)-X_(2*i+1), 2Z_(2*i+1), 2dT_(2*i+1))
        eccadd_core(P2, T[i-1], Q);
    40e6:	4f0b      	ldr	r7, [pc, #44]	; (4114 <ecc_precomp+0x7c>)
        R1_to_R2(Q, T[i]);
    40e8:	4e07      	ldr	r6, [pc, #28]	; (4108 <ecc_precomp+0x70>)
        eccadd_core(P2, T[i-1], Q);
    40ea:	466a      	mov	r2, sp
    40ec:	0021      	movs	r1, r4
    40ee:	a832      	add	r0, sp, #200	; 0xc8
    40f0:	47b8      	blx	r7
    40f2:	34a0      	adds	r4, #160	; 0xa0
        R1_to_R2(Q, T[i]);
    40f4:	0021      	movs	r1, r4
    40f6:	4668      	mov	r0, sp
    40f8:	47b0      	blx	r6
    for (i = 1; i < NPOINTS_VARBASE; i++) {
    40fa:	42ac      	cmp	r4, r5
    40fc:	d1f5      	bne.n	40ea <ecc_precomp+0x52>
    }
}
    40fe:	b05b      	add	sp, #364	; 0x16c
    4100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4102:	46c0      	nop			; (mov r8, r8)
    4104:	00002c9f 	.word	0x00002c9f
    4108:	000034b9 	.word	0x000034b9
    410c:	00003655 	.word	0x00003655
    4110:	00003565 	.word	0x00003565
    4114:	00003731 	.word	0x00003731

00004118 <cofactor_clearing>:


void cofactor_clearing(vpoint_extproj_t P)
{ // Co-factor clearing
    4118:	b570      	push	{r4, r5, r6, lr}
    411a:	b0a8      	sub	sp, #160	; 0xa0
    411c:	0004      	movs	r4, r0
  // Input: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: P = 392*P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    vpoint_extproj_precomp_t Q;
     
    R1_to_R2(P, Q);                      // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
    411e:	4669      	mov	r1, sp
    4120:	4b0d      	ldr	r3, [pc, #52]	; (4158 <cofactor_clearing+0x40>)
    4122:	4798      	blx	r3
    eccdouble(P);                        // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    4124:	0020      	movs	r0, r4
    4126:	4d0d      	ldr	r5, [pc, #52]	; (415c <cofactor_clearing+0x44>)
    4128:	47a8      	blx	r5
    eccadd(Q, P);                        // P = P+Q using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    412a:	0021      	movs	r1, r4
    412c:	4668      	mov	r0, sp
    412e:	4e0c      	ldr	r6, [pc, #48]	; (4160 <cofactor_clearing+0x48>)
    4130:	47b0      	blx	r6
    eccdouble(P);
    4132:	0020      	movs	r0, r4
    4134:	47a8      	blx	r5
    eccdouble(P);
    4136:	0020      	movs	r0, r4
    4138:	47a8      	blx	r5
    eccdouble(P);
    413a:	0020      	movs	r0, r4
    413c:	47a8      	blx	r5
    eccdouble(P);
    413e:	0020      	movs	r0, r4
    4140:	47a8      	blx	r5
    eccadd(Q, P);
    4142:	0021      	movs	r1, r4
    4144:	4668      	mov	r0, sp
    4146:	47b0      	blx	r6
    eccdouble(P);
    4148:	0020      	movs	r0, r4
    414a:	47a8      	blx	r5
    eccdouble(P);
    414c:	0020      	movs	r0, r4
    414e:	47a8      	blx	r5
    eccdouble(P);
    4150:	0020      	movs	r0, r4
    4152:	47a8      	blx	r5
}
    4154:	b028      	add	sp, #160	; 0xa0
    4156:	bd70      	pop	{r4, r5, r6, pc}
    4158:	000034b9 	.word	0x000034b9
    415c:	00003655 	.word	0x00003655
    4160:	00003815 	.word	0x00003815

00004164 <ecc_mul>:


bool ecc_mul(point_t P, digit_t* k, point_t Q, bool clear_cofactor)
{ // Scalar multiplication Q = k*P
    4164:	b5f0      	push	{r4, r5, r6, r7, lr}
    4166:	4c5a      	ldr	r4, [pc, #360]	; (42d0 <ecc_mul+0x16c>)
    4168:	44a5      	add	sp, r4
    416a:	0007      	movs	r7, r0
    416c:	000c      	movs	r4, r1
    416e:	9201      	str	r2, [sp, #4]
    4170:	001d      	movs	r5, r3
  // Output: Q = k*P in affine coordinates (x,y).
  // This function performs point validation and (if selected) cofactor clearing.
    vpoint_t A;
    vpoint_extproj_t R;
    vpoint_extproj_precomp_t S, Table[NPOINTS_VARBASE];
    unsigned int digits[t_VARBASE+1] = {0}, sign_masks[t_VARBASE+1] = {0};
    4172:	22fc      	movs	r2, #252	; 0xfc
    4174:	2100      	movs	r1, #0
    4176:	a849      	add	r0, sp, #292	; 0x124
    4178:	4e56      	ldr	r6, [pc, #344]	; (42d4 <ecc_mul+0x170>)
    417a:	47b0      	blx	r6
    417c:	22fc      	movs	r2, #252	; 0xfc
    417e:	2100      	movs	r1, #0
    4180:	a80a      	add	r0, sp, #40	; 0x28
    4182:	47b0      	blx	r6
    digit_t k_odd[NWORDS_ORDER];
    int i;

    point_setup(P, R);                                         // Convert to representation (X,Y,1,Ta,Tb)
    4184:	23f7      	movs	r3, #247	; 0xf7
    4186:	00db      	lsls	r3, r3, #3
    4188:	aa02      	add	r2, sp, #8
    418a:	4694      	mov	ip, r2
    418c:	4463      	add	r3, ip
    418e:	0019      	movs	r1, r3
    4190:	0038      	movs	r0, r7
    4192:	4b51      	ldr	r3, [pc, #324]	; (42d8 <ecc_mul+0x174>)
    4194:	4798      	blx	r3

    if (ecc_point_validate(R) == false) {                      // Check if point lies on the curve
    4196:	23f7      	movs	r3, #247	; 0xf7
    4198:	00db      	lsls	r3, r3, #3
    419a:	aa02      	add	r2, sp, #8
    419c:	4694      	mov	ip, r2
    419e:	4463      	add	r3, ip
    41a0:	0018      	movs	r0, r3
    41a2:	4b4e      	ldr	r3, [pc, #312]	; (42dc <ecc_mul+0x178>)
    41a4:	4798      	blx	r3
    41a6:	9000      	str	r0, [sp, #0]
    41a8:	2800      	cmp	r0, #0
    41aa:	d100      	bne.n	41ae <ecc_mul+0x4a>
    41ac:	e083      	b.n	42b6 <ecc_mul+0x152>
        return false;
    }

    if (clear_cofactor == true) {
    41ae:	2d00      	cmp	r5, #0
    41b0:	d000      	beq.n	41b4 <ecc_mul+0x50>
    41b2:	e084      	b.n	42be <ecc_mul+0x15a>
        cofactor_clearing(R);
    }

    modulo_order(k, k_odd);                                    // k_odd = k mod (order)      
    41b4:	a902      	add	r1, sp, #8
    41b6:	0020      	movs	r0, r4
    41b8:	4b49      	ldr	r3, [pc, #292]	; (42e0 <ecc_mul+0x17c>)
    41ba:	4798      	blx	r3
    conversion_to_odd(k_odd, k_odd);                           // Converting scalar to odd using the prime subgroup order 
    41bc:	a902      	add	r1, sp, #8
    41be:	0008      	movs	r0, r1
    41c0:	4b48      	ldr	r3, [pc, #288]	; (42e4 <ecc_mul+0x180>)
    41c2:	4798      	blx	r3
    ecc_precomp(R, Table);                                     // Precomputation of points T[0],...,T[npoints-1] 
    41c4:	a988      	add	r1, sp, #544	; 0x220
    41c6:	23f7      	movs	r3, #247	; 0xf7
    41c8:	00db      	lsls	r3, r3, #3
    41ca:	aa02      	add	r2, sp, #8
    41cc:	4694      	mov	ip, r2
    41ce:	4463      	add	r3, ip
    41d0:	0018      	movs	r0, r3
    41d2:	4b45      	ldr	r3, [pc, #276]	; (42e8 <ecc_mul+0x184>)
    41d4:	4798      	blx	r3
    fixed_window_recode((uint64_t*)k_odd, digits, sign_masks); // Scalar recoding
    41d6:	aa0a      	add	r2, sp, #40	; 0x28
    41d8:	a949      	add	r1, sp, #292	; 0x124
    41da:	a802      	add	r0, sp, #8
    41dc:	4b43      	ldr	r3, [pc, #268]	; (42ec <ecc_mul+0x188>)
    41de:	4798      	blx	r3
    table_lookup_1x8(Table, S, digits[t_VARBASE], sign_masks[t_VARBASE]);       
    41e0:	9b48      	ldr	r3, [sp, #288]	; 0x120
    41e2:	9a87      	ldr	r2, [sp, #540]	; 0x21c
    41e4:	21e3      	movs	r1, #227	; 0xe3
    41e6:	00c9      	lsls	r1, r1, #3
    41e8:	a802      	add	r0, sp, #8
    41ea:	4684      	mov	ip, r0
    41ec:	4461      	add	r1, ip
    41ee:	a888      	add	r0, sp, #544	; 0x220
    41f0:	4c3f      	ldr	r4, [pc, #252]	; (42f0 <ecc_mul+0x18c>)
    41f2:	47a0      	blx	r4
    R2_to_R4(S, R);                                            // Conversion to representation (2X,2Y,2Z)
    41f4:	23f7      	movs	r3, #247	; 0xf7
    41f6:	00db      	lsls	r3, r3, #3
    41f8:	aa02      	add	r2, sp, #8
    41fa:	4694      	mov	ip, r2
    41fc:	4463      	add	r3, ip
    41fe:	0019      	movs	r1, r3
    4200:	23e3      	movs	r3, #227	; 0xe3
    4202:	00db      	lsls	r3, r3, #3
    4204:	4463      	add	r3, ip
    4206:	0018      	movs	r0, r3
    4208:	4b3a      	ldr	r3, [pc, #232]	; (42f4 <ecc_mul+0x190>)
    420a:	4798      	blx	r3
    420c:	24f4      	movs	r4, #244	; 0xf4
    
    for (i = (t_VARBASE-1); i >= 0; i--)
    {
        eccdouble(R);
    420e:	4d3a      	ldr	r5, [pc, #232]	; (42f8 <ecc_mul+0x194>)
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    4210:	4f37      	ldr	r7, [pc, #220]	; (42f0 <ecc_mul+0x18c>)
        eccdouble(R);
        eccdouble(R);
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    4212:	4e3a      	ldr	r6, [pc, #232]	; (42fc <ecc_mul+0x198>)
        eccdouble(R);
    4214:	23f7      	movs	r3, #247	; 0xf7
    4216:	00db      	lsls	r3, r3, #3
    4218:	aa02      	add	r2, sp, #8
    421a:	4694      	mov	ip, r2
    421c:	4463      	add	r3, ip
    421e:	0018      	movs	r0, r3
    4220:	47a8      	blx	r5
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    4222:	ab0a      	add	r3, sp, #40	; 0x28
    4224:	58e3      	ldr	r3, [r4, r3]
    4226:	aa49      	add	r2, sp, #292	; 0x124
    4228:	58a2      	ldr	r2, [r4, r2]
    422a:	21e3      	movs	r1, #227	; 0xe3
    422c:	00c9      	lsls	r1, r1, #3
    422e:	a802      	add	r0, sp, #8
    4230:	4684      	mov	ip, r0
    4232:	4461      	add	r1, ip
    4234:	a888      	add	r0, sp, #544	; 0x220
    4236:	47b8      	blx	r7
        eccdouble(R);
    4238:	23f7      	movs	r3, #247	; 0xf7
    423a:	00db      	lsls	r3, r3, #3
    423c:	aa02      	add	r2, sp, #8
    423e:	4694      	mov	ip, r2
    4240:	4463      	add	r3, ip
    4242:	0018      	movs	r0, r3
    4244:	47a8      	blx	r5
        eccdouble(R);
    4246:	23f7      	movs	r3, #247	; 0xf7
    4248:	00db      	lsls	r3, r3, #3
    424a:	aa02      	add	r2, sp, #8
    424c:	4694      	mov	ip, r2
    424e:	4463      	add	r3, ip
    4250:	0018      	movs	r0, r3
    4252:	47a8      	blx	r5
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    4254:	23f7      	movs	r3, #247	; 0xf7
    4256:	00db      	lsls	r3, r3, #3
    4258:	aa02      	add	r2, sp, #8
    425a:	4694      	mov	ip, r2
    425c:	4463      	add	r3, ip
    425e:	0018      	movs	r0, r3
    4260:	47a8      	blx	r5
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    4262:	23f7      	movs	r3, #247	; 0xf7
    4264:	00db      	lsls	r3, r3, #3
    4266:	aa02      	add	r2, sp, #8
    4268:	4694      	mov	ip, r2
    426a:	4463      	add	r3, ip
    426c:	0019      	movs	r1, r3
    426e:	23e3      	movs	r3, #227	; 0xe3
    4270:	00db      	lsls	r3, r3, #3
    4272:	4463      	add	r3, ip
    4274:	0018      	movs	r0, r3
    4276:	47b0      	blx	r6
    4278:	3c04      	subs	r4, #4
    for (i = (t_VARBASE-1); i >= 0; i--)
    427a:	1d23      	adds	r3, r4, #4
    427c:	d1ca      	bne.n	4214 <ecc_mul+0xb0>
    }
    eccnorm(R, A);                                             // Conversion to affine coordinates (x,y) and modular correction. 
    427e:	2388      	movs	r3, #136	; 0x88
    4280:	011b      	lsls	r3, r3, #4
    4282:	aa02      	add	r2, sp, #8
    4284:	4694      	mov	ip, r2
    4286:	4463      	add	r3, ip
    4288:	0019      	movs	r1, r3
    428a:	20f7      	movs	r0, #247	; 0xf7
    428c:	00c0      	lsls	r0, r0, #3
    428e:	4460      	add	r0, ip
    4290:	4b1b      	ldr	r3, [pc, #108]	; (4300 <ecc_mul+0x19c>)
    4292:	4798      	blx	r3
    from_ext_to_std(A->x, Q->x);
    4294:	9d01      	ldr	r5, [sp, #4]
    4296:	0029      	movs	r1, r5
    4298:	2388      	movs	r3, #136	; 0x88
    429a:	011b      	lsls	r3, r3, #4
    429c:	aa02      	add	r2, sp, #8
    429e:	4694      	mov	ip, r2
    42a0:	4463      	add	r3, ip
    42a2:	0018      	movs	r0, r3
    42a4:	4c17      	ldr	r4, [pc, #92]	; (4304 <ecc_mul+0x1a0>)
    42a6:	47a0      	blx	r4
    from_ext_to_std(A->y, Q->y); 
    42a8:	0029      	movs	r1, r5
    42aa:	3120      	adds	r1, #32
    42ac:	4816      	ldr	r0, [pc, #88]	; (4308 <ecc_mul+0x1a4>)
    42ae:	ab02      	add	r3, sp, #8
    42b0:	469c      	mov	ip, r3
    42b2:	4460      	add	r0, ip
    42b4:	47a0      	blx	r4
    
    return true;
}
    42b6:	9800      	ldr	r0, [sp, #0]
    42b8:	4b14      	ldr	r3, [pc, #80]	; (430c <ecc_mul+0x1a8>)
    42ba:	449d      	add	sp, r3
    42bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cofactor_clearing(R);
    42be:	20f7      	movs	r0, #247	; 0xf7
    42c0:	00c0      	lsls	r0, r0, #3
    42c2:	ab02      	add	r3, sp, #8
    42c4:	469c      	mov	ip, r3
    42c6:	4460      	add	r0, ip
    42c8:	4b11      	ldr	r3, [pc, #68]	; (4310 <ecc_mul+0x1ac>)
    42ca:	4798      	blx	r3
    42cc:	e772      	b.n	41b4 <ecc_mul+0x50>
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	fffff724 	.word	0xfffff724
    42d4:	00005eff 	.word	0x00005eff
    42d8:	00003925 	.word	0x00003925
    42dc:	00003969 	.word	0x00003969
    42e0:	00002bb1 	.word	0x00002bb1
    42e4:	00002be9 	.word	0x00002be9
    42e8:	00004099 	.word	0x00004099
    42ec:	00003f45 	.word	0x00003f45
    42f0:	00002cc9 	.word	0x00002cc9
    42f4:	000035dd 	.word	0x000035dd
    42f8:	00003655 	.word	0x00003655
    42fc:	00003815 	.word	0x00003815
    4300:	00003469 	.word	0x00003469
    4304:	00002981 	.word	0x00002981
    4308:	000008a8 	.word	0x000008a8
    430c:	000008dc 	.word	0x000008dc
    4310:	00004119 	.word	0x00004119

00004314 <CompressedPublicKeyGeneration>:


/*************** ECDH USING COMPRESSED, 32-BYTE PUBLIC KEYS ***************/

ECCRYPTO_STATUS CompressedPublicKeyGeneration(const unsigned char* SecretKey, unsigned char* PublicKey)
{ // Compressed public key generation for key exchange
    4314:	b510      	push	{r4, lr}
    4316:	b090      	sub	sp, #64	; 0x40
    4318:	000c      	movs	r4, r1
  // It produces a public key PublicKey, which is the encoding of P = SecretKey*G (G is the generator).
  // Input:  32-byte SecretKey
  // Output: 32-byte PublicKey
    point_t P;
    
    ecc_mul_fixed((digit_t*)SecretKey, P);  // Compute public key                                       
    431a:	4669      	mov	r1, sp
    431c:	4b04      	ldr	r3, [pc, #16]	; (4330 <CompressedPublicKeyGeneration+0x1c>)
    431e:	4798      	blx	r3
	encode(P, PublicKey);                   // Encode public key
    4320:	0021      	movs	r1, r4
    4322:	4668      	mov	r0, sp
    4324:	4b03      	ldr	r3, [pc, #12]	; (4334 <CompressedPublicKeyGeneration+0x20>)
    4326:	4798      	blx	r3

    return ECCRYPTO_SUCCESS;
}
    4328:	2001      	movs	r0, #1
    432a:	b010      	add	sp, #64	; 0x40
    432c:	bd10      	pop	{r4, pc}
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	00003ba5 	.word	0x00003ba5
    4334:	00001d69 	.word	0x00001d69

00004338 <CompressedKeyGeneration>:


ECCRYPTO_STATUS CompressedKeyGeneration(unsigned char* SecretKey, unsigned char* PublicKey)
{ // Keypair generation for key exchange. Public key is compressed to 32 bytes
    4338:	b570      	push	{r4, r5, r6, lr}
    433a:	0006      	movs	r6, r0
    433c:	000d      	movs	r5, r1
	//Status = RandomBytesFunction(SecretKey, 32);
	//if (Status != ECCRYPTO_SUCCESS) {
	//	goto cleanup;
	//}
  
    Status = CompressedPublicKeyGeneration(SecretKey, PublicKey);
    433e:	4b07      	ldr	r3, [pc, #28]	; (435c <CompressedKeyGeneration+0x24>)
    4340:	4798      	blx	r3
    4342:	0004      	movs	r4, r0
    if (Status != ECCRYPTO_SUCCESS) {
    4344:	2801      	cmp	r0, #1
    4346:	d006      	beq.n	4356 <CompressedKeyGeneration+0x1e>
    }

    return ECCRYPTO_SUCCESS;

cleanup:
    clear_words((unsigned int*)SecretKey, 256/(sizeof(unsigned int)*8));
    4348:	2108      	movs	r1, #8
    434a:	0030      	movs	r0, r6
    434c:	4e04      	ldr	r6, [pc, #16]	; (4360 <CompressedKeyGeneration+0x28>)
    434e:	47b0      	blx	r6
    clear_words((unsigned int*)PublicKey, 256/(sizeof(unsigned int)*8));
    4350:	2108      	movs	r1, #8
    4352:	0028      	movs	r0, r5
    4354:	47b0      	blx	r6

    return Status;
}
    4356:	0020      	movs	r0, r4
    4358:	bd70      	pop	{r4, r5, r6, pc}
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	00004315 	.word	0x00004315
    4360:	00003455 	.word	0x00003455

00004364 <CompressedSecretAgreement>:


ECCRYPTO_STATUS CompressedSecretAgreement(const unsigned char* SecretKey, const unsigned char* PublicKey, unsigned char* SharedSecret)
{ // Secret agreement computation for key exchange using a compressed, 32-byte public key
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	b090      	sub	sp, #64	; 0x40
    4368:	0006      	movs	r6, r0
    436a:	0008      	movs	r0, r1
    436c:	0015      	movs	r5, r2
  // Inputs: 32-byte SecretKey and 32-byte PublicKey
  // Output: 32-byte SharedSecret
    point_t A;
    ECCRYPTO_STATUS Status = ECCRYPTO_ERROR_UNKNOWN;

    if ((PublicKey[15] & 0x80) != 0) {  // Is bit128(PublicKey) = 0?
    436e:	7bcb      	ldrb	r3, [r1, #15]
    4370:	2b7f      	cmp	r3, #127	; 0x7f
    4372:	d830      	bhi.n	43d6 <CompressedSecretAgreement+0x72>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
		goto cleanup;
    }

	Status = decode(PublicKey, A);    // Also verifies that A is on the curve. If it is not, it fails
    4374:	4669      	mov	r1, sp
    4376:	4b19      	ldr	r3, [pc, #100]	; (43dc <CompressedSecretAgreement+0x78>)
    4378:	4798      	blx	r3
    437a:	0004      	movs	r4, r0
	if (Status != ECCRYPTO_SUCCESS) {
    437c:	2801      	cmp	r0, #1
    437e:	d006      	beq.n	438e <CompressedSecretAgreement+0x2a>
	memmove(SharedSecret, (unsigned char*)A->y, 32);

	return ECCRYPTO_SUCCESS;
    
cleanup:
    clear_words((unsigned int*)SharedSecret, 256/(sizeof(unsigned int)*8));
    4380:	2108      	movs	r1, #8
    4382:	0028      	movs	r0, r5
    4384:	4b16      	ldr	r3, [pc, #88]	; (43e0 <CompressedSecretAgreement+0x7c>)
    4386:	4798      	blx	r3
    
    return Status;
}
    4388:	0020      	movs	r0, r4
    438a:	b010      	add	sp, #64	; 0x40
    438c:	bd70      	pop	{r4, r5, r6, pc}
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    438e:	2301      	movs	r3, #1
    4390:	466a      	mov	r2, sp
    4392:	0031      	movs	r1, r6
    4394:	4668      	mov	r0, sp
    4396:	4e13      	ldr	r6, [pc, #76]	; (43e4 <CompressedSecretAgreement+0x80>)
    4398:	47b0      	blx	r6
	if (Status != ECCRYPTO_SUCCESS) {
    439a:	2800      	cmp	r0, #0
    439c:	d101      	bne.n	43a2 <CompressedSecretAgreement+0x3e>
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    439e:	2400      	movs	r4, #0
    43a0:	e7ee      	b.n	4380 <CompressedSecretAgreement+0x1c>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    43a2:	2108      	movs	r1, #8
    43a4:	4668      	mov	r0, sp
    43a6:	4b10      	ldr	r3, [pc, #64]	; (43e8 <CompressedSecretAgreement+0x84>)
    43a8:	4798      	blx	r3
    43aa:	2800      	cmp	r0, #0
    43ac:	d105      	bne.n	43ba <CompressedSecretAgreement+0x56>
	memmove(SharedSecret, (unsigned char*)A->y, 32);
    43ae:	2220      	movs	r2, #32
    43b0:	a908      	add	r1, sp, #32
    43b2:	0028      	movs	r0, r5
    43b4:	4b0d      	ldr	r3, [pc, #52]	; (43ec <CompressedSecretAgreement+0x88>)
    43b6:	4798      	blx	r3
	return ECCRYPTO_SUCCESS;
    43b8:	e7e6      	b.n	4388 <CompressedSecretAgreement+0x24>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    43ba:	2107      	movs	r1, #7
    43bc:	a809      	add	r0, sp, #36	; 0x24
    43be:	4b0a      	ldr	r3, [pc, #40]	; (43e8 <CompressedSecretAgreement+0x84>)
    43c0:	4798      	blx	r3
    43c2:	2800      	cmp	r0, #0
    43c4:	d0f3      	beq.n	43ae <CompressedSecretAgreement+0x4a>
    43c6:	9908      	ldr	r1, [sp, #32]
    43c8:	1e4b      	subs	r3, r1, #1
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    43ca:	2201      	movs	r2, #1
    43cc:	1a52      	subs	r2, r2, r1
    43ce:	4313      	orrs	r3, r2
    if (is_neutral_point(A)) {  // Is output = neutral point (0,1)?
    43d0:	d4ed      	bmi.n	43ae <CompressedSecretAgreement+0x4a>
		Status = ECCRYPTO_ERROR_SHARED_KEY;
    43d2:	2407      	movs	r4, #7
    43d4:	e7d4      	b.n	4380 <CompressedSecretAgreement+0x1c>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
    43d6:	2406      	movs	r4, #6
    43d8:	e7d2      	b.n	4380 <CompressedSecretAgreement+0x1c>
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	00001db1 	.word	0x00001db1
    43e0:	00003455 	.word	0x00003455
    43e4:	00004165 	.word	0x00004165
    43e8:	00001d45 	.word	0x00001d45
    43ec:	00005ec9 	.word	0x00005ec9

000043f0 <internalPermutation>:
static void messageFold(const uint8_t *message, uint8_t *cells){
    cells[0] ^= message[0];
    cells[1] ^= message[1];
}

static void internalPermutation(uint8_t *cells){
    43f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43f2:	46de      	mov	lr, fp
    43f4:	4657      	mov	r7, sl
    43f6:	464e      	mov	r6, r9
    43f8:	4645      	mov	r5, r8
    43fa:	b5e0      	push	{r5, r6, r7, lr}
    43fc:	b08b      	sub	sp, #44	; 0x2c
    43fe:	0007      	movs	r7, r0
    int round;
    for(round=0;round<12;round++){
    4400:	2300      	movs	r3, #0
    4402:	9307      	str	r3, [sp, #28]
    4404:	e0c6      	b.n	4594 <internalPermutation+0x1a4>
    for(i=0;i<D_VAL;i++){
        tmp_cells[i]=0;
        for(j=0;j<D_VAL;j++){
            uint8_t nib = cells[(col+(D_VAL*j))/2];
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
            else{nib = (nib & 0x0F);}
    4406:	200f      	movs	r0, #15
    4408:	4002      	ands	r2, r0
    440a:	e03e      	b.n	448a <internalPermutation+0x9a>
                ret=MMUL[loc];
                b=0;
            }
            else{
                // Account for odd value as (a x 3) is (a x (2 + 1))
                if(b&1){
    440c:	2301      	movs	r3, #1
    440e:	4223      	tst	r3, r4
    4410:	d003      	beq.n	441a <internalPermutation+0x2a>
                    odd ^= ret;
    4412:	4661      	mov	r1, ip
    4414:	4051      	eors	r1, r2
    4416:	b2cb      	uxtb	r3, r1
    4418:	469c      	mov	ip, r3
                }

                loc=ret; // loc holds the current value to be multiplied by 2
                // (a x 2) not found
                if(MMUL[32 + loc] > 0xF){
    441a:	9204      	str	r2, [sp, #16]
    441c:	2320      	movs	r3, #32
    441e:	4698      	mov	r8, r3
    4420:	4490      	add	r8, r2
    4422:	4b83      	ldr	r3, [pc, #524]	; (4630 <internalPermutation+0x240>)
    4424:	4641      	mov	r1, r8
    4426:	5c59      	ldrb	r1, [r3, r1]
    4428:	290f      	cmp	r1, #15
    442a:	d912      	bls.n	4452 <internalPermutation+0x62>
                    ret = ret << 1;
    442c:	0052      	lsls	r2, r2, #1
    442e:	b2d1      	uxtb	r1, r2
                    // XOR with constant if shifted results is larger than 4 bits
                    if(ret&0x10){ret^=G_CON;}
    4430:	2310      	movs	r3, #16
    4432:	420b      	tst	r3, r1
    4434:	d002      	beq.n	443c <internalPermutation+0x4c>
    4436:	3b0d      	subs	r3, #13
    4438:	4059      	eors	r1, r3
    443a:	b2c9      	uxtb	r1, r1

                    ret &= 0xF; // Only care about lower nibble
    443c:	230f      	movs	r3, #15
    443e:	4019      	ands	r1, r3
                    MMUL[32 + loc] = ret;
    4440:	4b7b      	ldr	r3, [pc, #492]	; (4630 <internalPermutation+0x240>)
    4442:	4642      	mov	r2, r8
    4444:	5499      	strb	r1, [r3, r2]
                    MMUL[16*loc + 2] = ret;
    4446:	9b04      	ldr	r3, [sp, #16]
    4448:	011a      	lsls	r2, r3, #4
    444a:	4b79      	ldr	r3, [pc, #484]	; (4630 <internalPermutation+0x240>)
    444c:	4698      	mov	r8, r3
    444e:	4442      	add	r2, r8
    4450:	7091      	strb	r1, [r2, #2]
                }
                else{
                    ret = MMUL[32 + loc];
                }
                b = b >> 1;
    4452:	0864      	lsrs	r4, r4, #1
    4454:	b2e4      	uxtb	r4, r4
    4456:	000a      	movs	r2, r1
    4458:	e034      	b.n	44c4 <internalPermutation+0xd4>
    445a:	9b01      	ldr	r3, [sp, #4]
        while(b>1){
    445c:	0011      	movs	r1, r2
    445e:	e03b      	b.n	44d8 <internalPermutation+0xe8>
        if(b==1){return a;} // Multiply a by 1 is a
    4460:	0003      	movs	r3, r0
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    4462:	aa08      	add	r2, sp, #32
    4464:	5cba      	ldrb	r2, [r7, r2]
    4466:	4053      	eors	r3, r2
    4468:	aa08      	add	r2, sp, #32
    446a:	54bb      	strb	r3, [r7, r2]
    446c:	3506      	adds	r5, #6
    446e:	3601      	adds	r6, #1
        for(j=0;j<D_VAL;j++){
    4470:	2d24      	cmp	r5, #36	; 0x24
    4472:	d03f      	beq.n	44f4 <internalPermutation+0x104>
            uint8_t nib = cells[(col+(D_VAL*j))/2];
    4474:	4653      	mov	r3, sl
    4476:	18ea      	adds	r2, r5, r3
    4478:	0fd3      	lsrs	r3, r2, #31
    447a:	189b      	adds	r3, r3, r2
    447c:	105b      	asrs	r3, r3, #1
    447e:	465a      	mov	r2, fp
    4480:	5cd2      	ldrb	r2, [r2, r3]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    4482:	464b      	mov	r3, r9
    4484:	2b00      	cmp	r3, #0
    4486:	d1be      	bne.n	4406 <internalPermutation+0x16>
    4488:	0912      	lsrs	r2, r2, #4
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    448a:	7831      	ldrb	r1, [r6, #0]
    uint8_t ret = MMUL[(16*a)+b];
    448c:	0108      	lsls	r0, r1, #4
    448e:	4b68      	ldr	r3, [pc, #416]	; (4630 <internalPermutation+0x240>)
    4490:	181b      	adds	r3, r3, r0
    4492:	5c9b      	ldrb	r3, [r3, r2]
    if(ret > 0x0F){
    4494:	2b0f      	cmp	r3, #15
    4496:	d9e4      	bls.n	4462 <internalPermutation+0x72>
    a &= 0x0F;
    4498:	230f      	movs	r3, #15
    449a:	0018      	movs	r0, r3
    449c:	4008      	ands	r0, r1
    b &= 0x0F;
    449e:	4013      	ands	r3, r2
        if(a<b){SWAP(a,b);} // Want a to be larger to reduce computation
    44a0:	4298      	cmp	r0, r3
    44a2:	d206      	bcs.n	44b2 <internalPermutation+0xc2>
    44a4:	4051      	eors	r1, r2
    44a6:	404a      	eors	r2, r1
    44a8:	200f      	movs	r0, #15
    44aa:	0003      	movs	r3, r0
    44ac:	4013      	ands	r3, r2
    44ae:	4051      	eors	r1, r2
    44b0:	4008      	ands	r0, r1
        if(b==0){return b;} // Multiply a by 0 is 0
    44b2:	2b00      	cmp	r3, #0
    44b4:	d0d5      	beq.n	4462 <internalPermutation+0x72>
        if(b==1){return a;} // Multiply a by 1 is a
    44b6:	2b01      	cmp	r3, #1
    44b8:	d0d2      	beq.n	4460 <internalPermutation+0x70>
    44ba:	0002      	movs	r2, r0
    44bc:	001c      	movs	r4, r3
    44be:	2100      	movs	r1, #0
    44c0:	468c      	mov	ip, r1
    44c2:	9301      	str	r3, [sp, #4]
        while(b>1){
    44c4:	2c01      	cmp	r4, #1
    44c6:	d9c8      	bls.n	445a <internalPermutation+0x6a>
            loc=(ret*16)+b;
    44c8:	0111      	lsls	r1, r2, #4
    44ca:	1861      	adds	r1, r4, r1
            if(MMUL[loc]<0x10){
    44cc:	b2c9      	uxtb	r1, r1
    44ce:	4b58      	ldr	r3, [pc, #352]	; (4630 <internalPermutation+0x240>)
    44d0:	5c59      	ldrb	r1, [r3, r1]
    44d2:	290f      	cmp	r1, #15
    44d4:	d89a      	bhi.n	440c <internalPermutation+0x1c>
    44d6:	9b01      	ldr	r3, [sp, #4]
            }
        }
        ret ^= odd; // One last "add" if multiplying by odd number at any point
    44d8:	4662      	mov	r2, ip
    44da:	404a      	eors	r2, r1
    44dc:	0011      	movs	r1, r2
        ret &= 0xF; // Only care about lower nibble
    44de:	220f      	movs	r2, #15
    44e0:	4011      	ands	r1, r2

        // Update map so won't have to recompute a x b
        MMUL[(a*16)+b_orig]=ret;
    44e2:	4a53      	ldr	r2, [pc, #332]	; (4630 <internalPermutation+0x240>)
    44e4:	0104      	lsls	r4, r0, #4
    44e6:	1914      	adds	r4, r2, r4
    44e8:	54e1      	strb	r1, [r4, r3]
        MMUL[(b_orig*16)+a]=ret;
    44ea:	011b      	lsls	r3, r3, #4
    44ec:	18d2      	adds	r2, r2, r3
    44ee:	5411      	strb	r1, [r2, r0]
        ret &= 0xF; // Only care about lower nibble
    44f0:	000b      	movs	r3, r1
    44f2:	e7b6      	b.n	4462 <internalPermutation+0x72>
    for(i=0;i<D_VAL;i++){
    44f4:	9b02      	ldr	r3, [sp, #8]
    44f6:	3301      	adds	r3, #1
    44f8:	9302      	str	r3, [sp, #8]
    44fa:	9a03      	ldr	r2, [sp, #12]
    44fc:	3206      	adds	r2, #6
    44fe:	9203      	str	r2, [sp, #12]
    4500:	2b06      	cmp	r3, #6
    4502:	d00b      	beq.n	451c <internalPermutation+0x12c>
    4504:	9902      	ldr	r1, [sp, #8]
    4506:	000f      	movs	r7, r1
        tmp_cells[i]=0;
    4508:	2300      	movs	r3, #0
    450a:	aa08      	add	r2, sp, #32
    450c:	548b      	strb	r3, [r1, r2]
    450e:	9e03      	ldr	r6, [sp, #12]
    4510:	9d06      	ldr	r5, [sp, #24]
    4512:	33ff      	adds	r3, #255	; 0xff
    4514:	9a05      	ldr	r2, [sp, #20]
    4516:	401a      	ands	r2, r3
    4518:	4692      	mov	sl, r2
    451a:	e7ab      	b.n	4474 <internalPermutation+0x84>
    451c:	9b05      	ldr	r3, [sp, #20]
    451e:	469c      	mov	ip, r3
    4520:	464f      	mov	r7, r9
    4522:	4650      	mov	r0, sl
    for(i=0;i<D_VAL;i++){
    4524:	2100      	movs	r1, #0
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    4526:	240f      	movs	r4, #15
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    4528:	465a      	mov	r2, fp
    452a:	e00d      	b.n	4548 <internalPermutation+0x158>
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    452c:	0fc3      	lsrs	r3, r0, #31
    452e:	181b      	adds	r3, r3, r0
    4530:	105b      	asrs	r3, r3, #1
    4532:	18d3      	adds	r3, r2, r3
    4534:	781d      	ldrb	r5, [r3, #0]
    4536:	43a5      	bics	r5, r4
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    4538:	ae08      	add	r6, sp, #32
    453a:	5d8e      	ldrb	r6, [r1, r6]
    453c:	4335      	orrs	r5, r6
    453e:	701d      	strb	r5, [r3, #0]
    for(i=0;i<D_VAL;i++){
    4540:	3101      	adds	r1, #1
    4542:	3006      	adds	r0, #6
    4544:	2906      	cmp	r1, #6
    4546:	d00d      	beq.n	4564 <internalPermutation+0x174>
        if(col%2 == 0){
    4548:	2f00      	cmp	r7, #0
    454a:	d1ef      	bne.n	452c <internalPermutation+0x13c>
            cells[(col+(D_VAL*i))/2] &= 0x0F;
    454c:	0fc3      	lsrs	r3, r0, #31
    454e:	181b      	adds	r3, r3, r0
    4550:	105b      	asrs	r3, r3, #1
    4552:	18d3      	adds	r3, r2, r3
    4554:	781d      	ldrb	r5, [r3, #0]
    4556:	4025      	ands	r5, r4
            cells[(col+(D_VAL*i))/2] |= (tmp_cells[i] << 4);
    4558:	ae08      	add	r6, sp, #32
    455a:	5d8e      	ldrb	r6, [r1, r6]
    455c:	0136      	lsls	r6, r6, #4
    455e:	4335      	orrs	r5, r6
    4560:	701d      	strb	r5, [r3, #0]
    4562:	e7ed      	b.n	4540 <internalPermutation+0x150>
    4564:	4693      	mov	fp, r2
    for(i=0;i<D_VAL;i++){
    4566:	2301      	movs	r3, #1
    4568:	4698      	mov	r8, r3
    456a:	44c4      	add	ip, r8
    456c:	4663      	mov	r3, ip
    456e:	2b06      	cmp	r3, #6
    4570:	d00a      	beq.n	4588 <internalPermutation+0x198>
    4572:	4b30      	ldr	r3, [pc, #192]	; (4634 <internalPermutation+0x244>)
    4574:	9303      	str	r3, [sp, #12]
    for(i=0;i<D_VAL;i++){
    4576:	2300      	movs	r3, #0
    4578:	9302      	str	r3, [sp, #8]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    457a:	4667      	mov	r7, ip
    457c:	3301      	adds	r3, #1
    457e:	401f      	ands	r7, r3
    4580:	4663      	mov	r3, ip
    4582:	9305      	str	r3, [sp, #20]
    4584:	46b9      	mov	r9, r7
    4586:	e7bd      	b.n	4504 <internalPermutation+0x114>
    4588:	0017      	movs	r7, r2
    for(round=0;round<12;round++){
    458a:	9b07      	ldr	r3, [sp, #28]
    458c:	3301      	adds	r3, #1
    458e:	9307      	str	r3, [sp, #28]
    4590:	2b0c      	cmp	r3, #12
    4592:	d046      	beq.n	4622 <internalPermutation+0x232>
        cells[i*T_VAL/D_VAL] ^= (RC[round] ^ IC[i]) << 4;
    4594:	4b28      	ldr	r3, [pc, #160]	; (4638 <internalPermutation+0x248>)
    4596:	9a07      	ldr	r2, [sp, #28]
    4598:	5cd3      	ldrb	r3, [r2, r3]
    459a:	4698      	mov	r8, r3
    459c:	4d27      	ldr	r5, [pc, #156]	; (463c <internalPermutation+0x24c>)
    459e:	2400      	movs	r4, #0
    45a0:	4e27      	ldr	r6, [pc, #156]	; (4640 <internalPermutation+0x250>)
    45a2:	003b      	movs	r3, r7
    45a4:	4647      	mov	r7, r8
    45a6:	4698      	mov	r8, r3
    45a8:	2106      	movs	r1, #6
    45aa:	0020      	movs	r0, r4
    45ac:	47b0      	blx	r6
    45ae:	4440      	add	r0, r8
    45b0:	782b      	ldrb	r3, [r5, #0]
    45b2:	407b      	eors	r3, r7
    45b4:	011b      	lsls	r3, r3, #4
    45b6:	7802      	ldrb	r2, [r0, #0]
    45b8:	4053      	eors	r3, r2
    45ba:	7003      	strb	r3, [r0, #0]
    45bc:	3412      	adds	r4, #18
    45be:	3501      	adds	r5, #1
    for(i=0;i<D_VAL;i++){
    45c0:	2c6c      	cmp	r4, #108	; 0x6c
    45c2:	d1f1      	bne.n	45a8 <internalPermutation+0x1b8>
    45c4:	4647      	mov	r7, r8
    45c6:	4641      	mov	r1, r8
    45c8:	4645      	mov	r5, r8
    45ca:	3512      	adds	r5, #18
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    45cc:	481d      	ldr	r0, [pc, #116]	; (4644 <internalPermutation+0x254>)
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    45ce:	3c5d      	subs	r4, #93	; 0x5d
        uint16_t tmp=cells[i];
    45d0:	780a      	ldrb	r2, [r1, #0]
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    45d2:	0913      	lsrs	r3, r2, #4
    45d4:	5cc3      	ldrb	r3, [r0, r3]
    45d6:	011b      	lsls	r3, r3, #4
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    45d8:	4022      	ands	r2, r4
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    45da:	5c82      	ldrb	r2, [r0, r2]
    45dc:	4313      	orrs	r3, r2
    45de:	700b      	strb	r3, [r1, #0]
    45e0:	3101      	adds	r1, #1
    for(i=0;i<T_VAL;i++){
    45e2:	428d      	cmp	r5, r1
    45e4:	d1f4      	bne.n	45d0 <internalPermutation+0x1e0>
    45e6:	1cf9      	adds	r1, r7, #3
    45e8:	2314      	movs	r3, #20
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    45ea:	2018      	movs	r0, #24
    45ec:	001a      	movs	r2, r3
        tmp1|=(cells[i*3]<<16);
    45ee:	780b      	ldrb	r3, [r1, #0]
    45f0:	041b      	lsls	r3, r3, #16
        tmp1|=(cells[(i*3)+1]<<8);
    45f2:	784c      	ldrb	r4, [r1, #1]
    45f4:	0224      	lsls	r4, r4, #8
        tmp1|=(cells[(i*3)+2]);
    45f6:	4323      	orrs	r3, r4
    45f8:	788c      	ldrb	r4, [r1, #2]
    45fa:	4323      	orrs	r3, r4
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    45fc:	1a84      	subs	r4, r0, r2
    45fe:	001d      	movs	r5, r3
    4600:	40a5      	lsls	r5, r4
    4602:	40d3      	lsrs	r3, r2
    4604:	432b      	orrs	r3, r5
        cells[i*3]=(tmp1 & 0xFF0000) >> 16;
    4606:	0c1c      	lsrs	r4, r3, #16
    4608:	700c      	strb	r4, [r1, #0]
        cells[(i*3)+1] = (tmp1 & 0xFF00) >> 8;
    460a:	0a1c      	lsrs	r4, r3, #8
    460c:	704c      	strb	r4, [r1, #1]
        cells[(i*3)+2] = (tmp1 & 0xFF);
    460e:	708b      	strb	r3, [r1, #2]
    4610:	3103      	adds	r1, #3
    4612:	3a04      	subs	r2, #4
    for(i=1;i<D_VAL;i++){
    4614:	2a00      	cmp	r2, #0
    4616:	d1ea      	bne.n	45ee <internalPermutation+0x1fe>
    4618:	9206      	str	r2, [sp, #24]
    461a:	2300      	movs	r3, #0
    461c:	469c      	mov	ip, r3
    461e:	46bb      	mov	fp, r7
    4620:	e7a7      	b.n	4572 <internalPermutation+0x182>
}
    4622:	b00b      	add	sp, #44	; 0x2c
    4624:	bc3c      	pop	{r2, r3, r4, r5}
    4626:	4690      	mov	r8, r2
    4628:	4699      	mov	r9, r3
    462a:	46a2      	mov	sl, r4
    462c:	46ab      	mov	fp, r5
    462e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4630:	20000004 	.word	0x20000004
    4634:	0000a508 	.word	0x0000a508
    4638:	0000a534 	.word	0x0000a534
    463c:	0000a52c 	.word	0x0000a52c
    4640:	00005c41 	.word	0x00005c41
    4644:	0000a540 	.word	0x0000a540

00004648 <photon128>:
void photon128(uint8_t *message, const int32_t message_bytes, uint8_t *hash){
    4648:	b5f0      	push	{r4, r5, r6, r7, lr}
    464a:	46d6      	mov	lr, sl
    464c:	464f      	mov	r7, r9
    464e:	4646      	mov	r6, r8
    4650:	b5c0      	push	{r6, r7, lr}
    4652:	b088      	sub	sp, #32
    4654:	0005      	movs	r5, r0
    4656:	9001      	str	r0, [sp, #4]
    4658:	4689      	mov	r9, r1
    465a:	0016      	movs	r6, r2
    memset((uint8_t *) cells,0,T_VAL-3);
    465c:	ac03      	add	r4, sp, #12
    465e:	220f      	movs	r2, #15
    4660:	2100      	movs	r1, #0
    4662:	0020      	movs	r0, r4
    4664:	4b30      	ldr	r3, [pc, #192]	; (4728 <photon128+0xe0>)
    4666:	4798      	blx	r3
    cells[15]=0x20;
    4668:	2320      	movs	r3, #32
    466a:	73e3      	strb	r3, [r4, #15]
    cells[16]=0x10;
    466c:	3b10      	subs	r3, #16
    466e:	7423      	strb	r3, [r4, #16]
    cells[17]=0x10;
    4670:	7463      	strb	r3, [r4, #17]
    for(i=0;i<message_bytes/R_VAL;i++){
    4672:	464b      	mov	r3, r9
    4674:	0fdb      	lsrs	r3, r3, #31
    4676:	444b      	add	r3, r9
    4678:	105b      	asrs	r3, r3, #1
    467a:	469a      	mov	sl, r3
    467c:	2b00      	cmp	r3, #0
    467e:	dd49      	ble.n	4714 <photon128+0xcc>
    4680:	005b      	lsls	r3, r3, #1
    4682:	46a8      	mov	r8, r5
    4684:	4498      	add	r8, r3
    cells[0] ^= message[0];
    4686:	ac03      	add	r4, sp, #12
        internalPermutation(&cells[0]);
    4688:	4f28      	ldr	r7, [pc, #160]	; (472c <photon128+0xe4>)
    cells[0] ^= message[0];
    468a:	7823      	ldrb	r3, [r4, #0]
    468c:	782a      	ldrb	r2, [r5, #0]
    468e:	4053      	eors	r3, r2
    4690:	7023      	strb	r3, [r4, #0]
    cells[1] ^= message[1];
    4692:	7863      	ldrb	r3, [r4, #1]
    4694:	786a      	ldrb	r2, [r5, #1]
    4696:	4053      	eors	r3, r2
    4698:	7063      	strb	r3, [r4, #1]
        internalPermutation(&cells[0]);
    469a:	0020      	movs	r0, r4
    469c:	47b8      	blx	r7
    469e:	3502      	adds	r5, #2
    for(i=0;i<message_bytes/R_VAL;i++){
    46a0:	4545      	cmp	r5, r8
    46a2:	d1f2      	bne.n	468a <photon128+0x42>
    46a4:	4653      	mov	r3, sl
    if(message_bytes%2){
    46a6:	464a      	mov	r2, r9
    46a8:	07d2      	lsls	r2, r2, #31
    46aa:	d535      	bpl.n	4718 <photon128+0xd0>
        cells[0] ^= message[i*2];
    46ac:	aa03      	add	r2, sp, #12
    46ae:	005b      	lsls	r3, r3, #1
    46b0:	9901      	ldr	r1, [sp, #4]
    46b2:	5c5b      	ldrb	r3, [r3, r1]
    46b4:	7811      	ldrb	r1, [r2, #0]
    46b6:	404b      	eors	r3, r1
    46b8:	7013      	strb	r3, [r2, #0]
        cells[1] ^= 0x80; //Padding
    46ba:	7851      	ldrb	r1, [r2, #1]
    46bc:	2380      	movs	r3, #128	; 0x80
    46be:	425b      	negs	r3, r3
    46c0:	404b      	eors	r3, r1
    46c2:	7053      	strb	r3, [r2, #1]
    internalPermutation(&cells[0]);
    46c4:	ac03      	add	r4, sp, #12
    46c6:	0020      	movs	r0, r4
    46c8:	4b18      	ldr	r3, [pc, #96]	; (472c <photon128+0xe4>)
    46ca:	4798      	blx	r3
    memset(hash,0,N_VAL);
    46cc:	2210      	movs	r2, #16
    46ce:	2100      	movs	r1, #0
    46d0:	0030      	movs	r0, r6
    46d2:	4b15      	ldr	r3, [pc, #84]	; (4728 <photon128+0xe0>)
    46d4:	4798      	blx	r3
    hash[0] |= cells[0];
    46d6:	7833      	ldrb	r3, [r6, #0]
    46d8:	7822      	ldrb	r2, [r4, #0]
    46da:	4313      	orrs	r3, r2
    46dc:	7033      	strb	r3, [r6, #0]
    hash[1] |= cells[1];
    46de:	7873      	ldrb	r3, [r6, #1]
    46e0:	7862      	ldrb	r2, [r4, #1]
    46e2:	4313      	orrs	r3, r2
    46e4:	7073      	strb	r3, [r6, #1]
    46e6:	1cb4      	adds	r4, r6, #2
    46e8:	3610      	adds	r6, #16
        internalPermutation(&cells[0]);
    46ea:	ad03      	add	r5, sp, #12
    46ec:	4f0f      	ldr	r7, [pc, #60]	; (472c <photon128+0xe4>)
    46ee:	0028      	movs	r0, r5
    46f0:	47b8      	blx	r7
        hash[2*i] |= cells[0];
    46f2:	7823      	ldrb	r3, [r4, #0]
    46f4:	782a      	ldrb	r2, [r5, #0]
    46f6:	4313      	orrs	r3, r2
    46f8:	7023      	strb	r3, [r4, #0]
        hash[(2*i)+1] |= cells[1];
    46fa:	7863      	ldrb	r3, [r4, #1]
    46fc:	786a      	ldrb	r2, [r5, #1]
    46fe:	4313      	orrs	r3, r2
    4700:	7063      	strb	r3, [r4, #1]
    4702:	3402      	adds	r4, #2
    for(i=1;i<N_VAL/2;i++){
    4704:	42b4      	cmp	r4, r6
    4706:	d1f2      	bne.n	46ee <photon128+0xa6>
}
    4708:	b008      	add	sp, #32
    470a:	bc1c      	pop	{r2, r3, r4}
    470c:	4690      	mov	r8, r2
    470e:	4699      	mov	r9, r3
    4710:	46a2      	mov	sl, r4
    4712:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(i=0;i<message_bytes/R_VAL;i++){
    4714:	2300      	movs	r3, #0
    4716:	e7c6      	b.n	46a6 <photon128+0x5e>
        cells[0] ^= 0x80;
    4718:	aa03      	add	r2, sp, #12
    471a:	7811      	ldrb	r1, [r2, #0]
    471c:	2380      	movs	r3, #128	; 0x80
    471e:	425b      	negs	r3, r3
    4720:	404b      	eors	r3, r1
    4722:	7013      	strb	r3, [r2, #0]
    4724:	e7ce      	b.n	46c4 <photon128+0x7c>
    4726:	46c0      	nop			; (mov r8, r8)
    4728:	00005eff 	.word	0x00005eff
    472c:	000043f1 	.word	0x000043f1

00004730 <addRoundKey>:

    printf("\nEnd PRESENT-80 Test\n\n");

}

static void addRoundKey(uint8_t *state, uint8_t *round_key){
    4730:	b510      	push	{r4, lr}
  int i;
  for(i=0;i<8;i++){
    4732:	2300      	movs	r3, #0
    state[i]=(state[i])^(round_key[i]);
    4734:	5cc2      	ldrb	r2, [r0, r3]
    4736:	5ccc      	ldrb	r4, [r1, r3]
    4738:	4062      	eors	r2, r4
    473a:	54c2      	strb	r2, [r0, r3]
  for(i=0;i<8;i++){
    473c:	3301      	adds	r3, #1
    473e:	2b08      	cmp	r3, #8
    4740:	d1f8      	bne.n	4734 <addRoundKey+0x4>
  }
}
    4742:	bd10      	pop	{r4, pc}

00004744 <updateKey80>:
    state[i] |= dummy2[(i*8)+6] << 6;
    state[i] |= dummy2[(i*8)+7] << 7;
  }
}

static void updateKey80(uint8_t *key, uint8_t *round_key, int round){
    4744:	b5f0      	push	{r4, r5, r6, r7, lr}
    4746:	46c6      	mov	lr, r8
    4748:	b500      	push	{lr}
    474a:	b086      	sub	sp, #24
    474c:	0007      	movs	r7, r0
    474e:	9101      	str	r1, [sp, #4]
    4750:	4690      	mov	r8, r2
  uint8_t new_key[10];
  int i;
  uint8_t box_out;
  uint8_t xor_out;

  for(i=0;i<10;i++){
    4752:	2300      	movs	r3, #0
    new_key[i]=0;
    4754:	a903      	add	r1, sp, #12
    4756:	2200      	movs	r2, #0
    4758:	545a      	strb	r2, [r3, r1]
  for(i=0;i<10;i++){
    475a:	3301      	adds	r3, #1
    475c:	2b0a      	cmp	r3, #10
    475e:	d1fb      	bne.n	4758 <updateKey80+0x14>
    4760:	2400      	movs	r4, #0
  }

  //Rotate by 61 bits to the left
  //Bit 0 becomes bit 19, bit 1 becomes bit 20, etc.
  for(i=0;i<10;i++){
    new_key[i] = (key[(i+3)%10] << 5) & 0xE0;     //Upper 5 bits
    4762:	4e21      	ldr	r6, [pc, #132]	; (47e8 <updateKey80+0xa4>)
    4764:	1ce0      	adds	r0, r4, #3
    4766:	210a      	movs	r1, #10
    4768:	47b0      	blx	r6
    476a:	5c7d      	ldrb	r5, [r7, r1]
    476c:	016d      	lsls	r5, r5, #5
    new_key[i] |= ((key[(i+2)%10] >> 3) & 0x1F);  //Lower 3 bits
    476e:	1ca0      	adds	r0, r4, #2
    4770:	210a      	movs	r1, #10
    4772:	47b0      	blx	r6
    4774:	5c7b      	ldrb	r3, [r7, r1]
    4776:	08db      	lsrs	r3, r3, #3
    4778:	431d      	orrs	r5, r3
    477a:	ab03      	add	r3, sp, #12
    477c:	551d      	strb	r5, [r3, r4]
  for(i=0;i<10;i++){
    477e:	3401      	adds	r4, #1
    4780:	2c0a      	cmp	r4, #10
    4782:	d1ef      	bne.n	4764 <updateKey80+0x20>
  }

  //Get the sbox values for bits 79 through 76
  box_out = sbox[(new_key[9]&0xF0)>>4];
    4784:	a903      	add	r1, sp, #12
    4786:	7a48      	ldrb	r0, [r1, #9]
    4788:	0903      	lsrs	r3, r0, #4
  new_key[9] &= 0x0F;
  new_key[9] |= box_out << 4;
    478a:	4a18      	ldr	r2, [pc, #96]	; (47ec <updateKey80+0xa8>)
    478c:	5cd2      	ldrb	r2, [r2, r3]
    478e:	0112      	lsls	r2, r2, #4
  new_key[9] &= 0x0F;
    4790:	230f      	movs	r3, #15
    4792:	4018      	ands	r0, r3
  new_key[9] |= box_out << 4;
    4794:	4302      	orrs	r2, r0
    4796:	724a      	strb	r2, [r1, #9]

  //XOR bits 19 through 16
  xor_out = (round & 0x1E) >> 1;
    4798:	4642      	mov	r2, r8
    479a:	1052      	asrs	r2, r2, #1
    479c:	4013      	ands	r3, r2
  new_key[2] ^= xor_out;
    479e:	788a      	ldrb	r2, [r1, #2]
    47a0:	4053      	eors	r3, r2
    47a2:	708b      	strb	r3, [r1, #2]
  //See if bit 15 needs to be xor'd with 1
  if(round%2 == 1){new_key[1] ^= 0x80;}
    47a4:	4643      	mov	r3, r8
    47a6:	0fd9      	lsrs	r1, r3, #31
    47a8:	185a      	adds	r2, r3, r1
    47aa:	2301      	movs	r3, #1
    47ac:	4013      	ands	r3, r2
    47ae:	1a5b      	subs	r3, r3, r1
    47b0:	2b01      	cmp	r3, #1
    47b2:	d012      	beq.n	47da <updateKey80+0x96>

  //Update the keys
  key[0]=new_key[0];
    47b4:	ab03      	add	r3, sp, #12
    47b6:	781a      	ldrb	r2, [r3, #0]
    47b8:	703a      	strb	r2, [r7, #0]
  key[1]=new_key[1];
    47ba:	785b      	ldrb	r3, [r3, #1]
    47bc:	707b      	strb	r3, [r7, #1]
    47be:	9e01      	ldr	r6, [sp, #4]
  for(i=2;i<10;i++){
    47c0:	2302      	movs	r3, #2
    key[i]=new_key[i];
    47c2:	a903      	add	r1, sp, #12
    47c4:	5c5a      	ldrb	r2, [r3, r1]
    47c6:	54fa      	strb	r2, [r7, r3]
    round_key[i-2]=key[i];
    47c8:	7032      	strb	r2, [r6, #0]
  for(i=2;i<10;i++){
    47ca:	3301      	adds	r3, #1
    47cc:	3601      	adds	r6, #1
    47ce:	2b0a      	cmp	r3, #10
    47d0:	d1f8      	bne.n	47c4 <updateKey80+0x80>
  }
}// end updateKey80()
    47d2:	b006      	add	sp, #24
    47d4:	bc04      	pop	{r2}
    47d6:	4690      	mov	r8, r2
    47d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(round%2 == 1){new_key[1] ^= 0x80;}
    47da:	aa03      	add	r2, sp, #12
    47dc:	7851      	ldrb	r1, [r2, #1]
    47de:	3b81      	subs	r3, #129	; 0x81
    47e0:	404b      	eors	r3, r1
    47e2:	7053      	strb	r3, [r2, #1]
    47e4:	e7e6      	b.n	47b4 <updateKey80+0x70>
    47e6:	46c0      	nop			; (mov r8, r8)
    47e8:	00005e0d 	.word	0x00005e0d
    47ec:	0000a5e0 	.word	0x0000a5e0

000047f0 <present80Encrypt>:
void present80Encrypt(uint8_t *key_in, uint8_t *text){
    47f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47f2:	46de      	mov	lr, fp
    47f4:	4657      	mov	r7, sl
    47f6:	464e      	mov	r6, r9
    47f8:	4645      	mov	r5, r8
    47fa:	b5e0      	push	{r5, r6, r7, lr}
    47fc:	b0a9      	sub	sp, #164	; 0xa4
    47fe:	000c      	movs	r4, r1
  memmove(key,key_in,10);
    4800:	220a      	movs	r2, #10
    4802:	0001      	movs	r1, r0
    4804:	a825      	add	r0, sp, #148	; 0x94
    4806:	4d3f      	ldr	r5, [pc, #252]	; (4904 <present80Encrypt+0x114>)
    4808:	47a8      	blx	r5
  memmove(round_key,&key[2],8);
    480a:	2208      	movs	r2, #8
    480c:	218e      	movs	r1, #142	; 0x8e
    480e:	ab02      	add	r3, sp, #8
    4810:	469c      	mov	ip, r3
    4812:	4461      	add	r1, ip
    4814:	a823      	add	r0, sp, #140	; 0x8c
    4816:	47a8      	blx	r5
  for(round=1;round<32;round++){
    4818:	2301      	movs	r3, #1
    481a:	4699      	mov	r9, r3
    addRoundKey(STATE, round_key);
    481c:	4b3a      	ldr	r3, [pc, #232]	; (4908 <present80Encrypt+0x118>)
    481e:	9301      	str	r3, [sp, #4]
    dummy |= (sbox[(state[i] & 0xF0) >> 4] << 4);
    4820:	4b3a      	ldr	r3, [pc, #232]	; (490c <present80Encrypt+0x11c>)
    4822:	469a      	mov	sl, r3
    4824:	e00a      	b.n	483c <present80Encrypt+0x4c>
    updateKey80(key,round_key,round);
    4826:	464a      	mov	r2, r9
    4828:	a923      	add	r1, sp, #140	; 0x8c
    482a:	a825      	add	r0, sp, #148	; 0x94
    482c:	4b38      	ldr	r3, [pc, #224]	; (4910 <present80Encrypt+0x120>)
    482e:	4798      	blx	r3
  for(round=1;round<32;round++){
    4830:	2301      	movs	r3, #1
    4832:	469c      	mov	ip, r3
    4834:	44e1      	add	r9, ip
    4836:	464b      	mov	r3, r9
    4838:	2b20      	cmp	r3, #32
    483a:	d057      	beq.n	48ec <present80Encrypt+0xfc>
    addRoundKey(STATE, round_key);
    483c:	a923      	add	r1, sp, #140	; 0x8c
    483e:	0020      	movs	r0, r4
    4840:	9b01      	ldr	r3, [sp, #4]
    4842:	4798      	blx	r3
    4844:	46a4      	mov	ip, r4
    4846:	0020      	movs	r0, r4
    4848:	3008      	adds	r0, #8
    484a:	46a3      	mov	fp, r4
    dummy |= sbox[state[i] & 0x0F];
    484c:	210f      	movs	r1, #15
    484e:	465b      	mov	r3, fp
    4850:	781a      	ldrb	r2, [r3, #0]
    dummy |= (sbox[(state[i] & 0xF0) >> 4] << 4);
    4852:	0913      	lsrs	r3, r2, #4
    4854:	4655      	mov	r5, sl
    4856:	5ceb      	ldrb	r3, [r5, r3]
    4858:	011b      	lsls	r3, r3, #4
    dummy |= sbox[state[i] & 0x0F];
    485a:	400a      	ands	r2, r1
    dummy |= (sbox[(state[i] & 0xF0) >> 4] << 4);
    485c:	5caa      	ldrb	r2, [r5, r2]
    485e:	4313      	orrs	r3, r2
    state[i]=dummy;
    4860:	465a      	mov	r2, fp
    4862:	7013      	strb	r3, [r2, #0]
    4864:	2301      	movs	r3, #1
    4866:	4698      	mov	r8, r3
    4868:	44c3      	add	fp, r8
  for(i=0;i<8;i++){
    486a:	4583      	cmp	fp, r0
    486c:	d1ef      	bne.n	484e <present80Encrypt+0x5e>
    486e:	2200      	movs	r2, #0
    dummy1[i]=(state[i/8]&(1<<(i%8)))>>(i%8);
    4870:	2707      	movs	r7, #7
    4872:	a903      	add	r1, sp, #12
    4874:	2501      	movs	r5, #1
    4876:	17d3      	asrs	r3, r2, #31
    4878:	0f5e      	lsrs	r6, r3, #29
    487a:	1990      	adds	r0, r2, r6
    487c:	4038      	ands	r0, r7
    487e:	1b80      	subs	r0, r0, r6
    4880:	403b      	ands	r3, r7
    4882:	189b      	adds	r3, r3, r2
    4884:	10db      	asrs	r3, r3, #3
    4886:	5ce6      	ldrb	r6, [r4, r3]
    4888:	002b      	movs	r3, r5
    488a:	4083      	lsls	r3, r0
    488c:	4033      	ands	r3, r6
    488e:	4103      	asrs	r3, r0
    4890:	5453      	strb	r3, [r2, r1]
  for(i=0;i<64;i++){
    4892:	3201      	adds	r2, #1
    4894:	2a40      	cmp	r2, #64	; 0x40
    4896:	d1ee      	bne.n	4876 <present80Encrypt+0x86>
    4898:	2100      	movs	r1, #0
    dummy2[pbox[i]]=dummy1[i];
    489a:	aa13      	add	r2, sp, #76	; 0x4c
    489c:	4d1d      	ldr	r5, [pc, #116]	; (4914 <present80Encrypt+0x124>)
    489e:	ab03      	add	r3, sp, #12
    48a0:	5d48      	ldrb	r0, [r1, r5]
    48a2:	5ccf      	ldrb	r7, [r1, r3]
    48a4:	5417      	strb	r7, [r2, r0]
  for(i=0;i<64;i++){
    48a6:	3101      	adds	r1, #1
    48a8:	2940      	cmp	r1, #64	; 0x40
    48aa:	d1f9      	bne.n	48a0 <present80Encrypt+0xb0>
    48ac:	aa13      	add	r2, sp, #76	; 0x4c
    state[i] |= dummy2[(i*8)+1] << 1;
    48ae:	7853      	ldrb	r3, [r2, #1]
    48b0:	005b      	lsls	r3, r3, #1
    state[i] |= dummy2[(i*8)+2] << 2;
    48b2:	7891      	ldrb	r1, [r2, #2]
    48b4:	0089      	lsls	r1, r1, #2
    48b6:	430b      	orrs	r3, r1
    48b8:	7811      	ldrb	r1, [r2, #0]
    48ba:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+3] << 3;
    48bc:	78d1      	ldrb	r1, [r2, #3]
    48be:	00c9      	lsls	r1, r1, #3
    48c0:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+4] << 4;
    48c2:	7911      	ldrb	r1, [r2, #4]
    48c4:	0109      	lsls	r1, r1, #4
    48c6:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+5] << 5;
    48c8:	7951      	ldrb	r1, [r2, #5]
    48ca:	0149      	lsls	r1, r1, #5
    48cc:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+6] << 6;
    48ce:	7991      	ldrb	r1, [r2, #6]
    48d0:	0189      	lsls	r1, r1, #6
    48d2:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+7] << 7;
    48d4:	79d1      	ldrb	r1, [r2, #7]
    48d6:	01c9      	lsls	r1, r1, #7
    48d8:	430b      	orrs	r3, r1
    48da:	4661      	mov	r1, ip
    48dc:	700b      	strb	r3, [r1, #0]
    48de:	3208      	adds	r2, #8
    48e0:	2301      	movs	r3, #1
    48e2:	4698      	mov	r8, r3
    48e4:	44c4      	add	ip, r8
  for(i=0;i<8;i++){
    48e6:	45dc      	cmp	ip, fp
    48e8:	d1e1      	bne.n	48ae <present80Encrypt+0xbe>
    48ea:	e79c      	b.n	4826 <present80Encrypt+0x36>
  addRoundKey(STATE, round_key);
    48ec:	a923      	add	r1, sp, #140	; 0x8c
    48ee:	0020      	movs	r0, r4
    48f0:	4b05      	ldr	r3, [pc, #20]	; (4908 <present80Encrypt+0x118>)
    48f2:	4798      	blx	r3
}
    48f4:	b029      	add	sp, #164	; 0xa4
    48f6:	bc3c      	pop	{r2, r3, r4, r5}
    48f8:	4690      	mov	r8, r2
    48fa:	4699      	mov	r9, r3
    48fc:	46a2      	mov	sl, r4
    48fe:	46ab      	mov	fp, r5
    4900:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4902:	46c0      	nop			; (mov r8, r8)
    4904:	00005ec9 	.word	0x00005ec9
    4908:	00004731 	.word	0x00004731
    490c:	0000a5e0 	.word	0x0000a5e0
    4910:	00004745 	.word	0x00004745
    4914:	0000a5a0 	.word	0x0000a5a0

00004918 <present80Decrypt>:
void present80Decrypt(uint8_t *key_in, uint8_t *text){
    4918:	b5f0      	push	{r4, r5, r6, r7, lr}
    491a:	46d6      	mov	lr, sl
    491c:	464f      	mov	r7, r9
    491e:	4646      	mov	r6, r8
    4920:	b5c0      	push	{r6, r7, lr}
    4922:	4c49      	ldr	r4, [pc, #292]	; (4a48 <present80Decrypt+0x130>)
    4924:	44a5      	add	sp, r4
    4926:	0006      	movs	r6, r0
    4928:	000c      	movs	r4, r1
    memmove(round_key[0],&key_in[2],8);
    492a:	1c81      	adds	r1, r0, #2
    492c:	2208      	movs	r2, #8
    492e:	a820      	add	r0, sp, #128	; 0x80
    4930:	4d46      	ldr	r5, [pc, #280]	; (4a4c <present80Decrypt+0x134>)
    4932:	47a8      	blx	r5
    memmove(key[0],key_in,10);
    4934:	220a      	movs	r2, #10
    4936:	0031      	movs	r1, r6
    4938:	a860      	add	r0, sp, #384	; 0x180
    493a:	47a8      	blx	r5
    493c:	ae22      	add	r6, sp, #136	; 0x88
    493e:	25c5      	movs	r5, #197	; 0xc5
    4940:	006d      	lsls	r5, r5, #1
    4942:	446d      	add	r5, sp
    for(round=1;round<32;round++){
    4944:	2701      	movs	r7, #1
        memmove(round_key[round],round_key[round-1],8);
    4946:	4b42      	ldr	r3, [pc, #264]	; (4a50 <present80Decrypt+0x138>)
    4948:	4698      	mov	r8, r3
        updateKey80(key[round],round_key[round],round);
    494a:	4b42      	ldr	r3, [pc, #264]	; (4a54 <present80Decrypt+0x13c>)
    494c:	4699      	mov	r9, r3
        memmove(round_key[round],round_key[round-1],8);
    494e:	0031      	movs	r1, r6
    4950:	3908      	subs	r1, #8
    4952:	2208      	movs	r2, #8
    4954:	0030      	movs	r0, r6
    4956:	47c0      	blx	r8
        memmove(key[round],key[round-1],10);
    4958:	0029      	movs	r1, r5
    495a:	390a      	subs	r1, #10
    495c:	220a      	movs	r2, #10
    495e:	0028      	movs	r0, r5
    4960:	47c0      	blx	r8
        updateKey80(key[round],round_key[round],round);
    4962:	003a      	movs	r2, r7
    4964:	0031      	movs	r1, r6
    4966:	0028      	movs	r0, r5
    4968:	47c8      	blx	r9
    for(round=1;round<32;round++){
    496a:	3701      	adds	r7, #1
    496c:	3608      	adds	r6, #8
    496e:	350a      	adds	r5, #10
    4970:	2f20      	cmp	r7, #32
    4972:	d1ec      	bne.n	494e <present80Decrypt+0x36>
    4974:	ab5e      	add	r3, sp, #376	; 0x178
    4976:	469a      	mov	sl, r3
    4978:	ab20      	add	r3, sp, #128	; 0x80
    497a:	4698      	mov	r8, r3
        addRoundKey(STATE, round_key[round]);
    497c:	4b36      	ldr	r3, [pc, #216]	; (4a58 <present80Decrypt+0x140>)
    497e:	4699      	mov	r9, r3
    dummy2[inv_pbox[i]]=dummy1[i];
    4980:	4d36      	ldr	r5, [pc, #216]	; (4a5c <present80Decrypt+0x144>)
    4982:	e005      	b.n	4990 <present80Decrypt+0x78>
    4984:	2308      	movs	r3, #8
    4986:	425b      	negs	r3, r3
    4988:	469c      	mov	ip, r3
    498a:	44e2      	add	sl, ip
    for(round=31;round>0;round--){
    498c:	45c2      	cmp	sl, r8
    498e:	d04e      	beq.n	4a2e <present80Decrypt+0x116>
        addRoundKey(STATE, round_key[round]);
    4990:	4651      	mov	r1, sl
    4992:	0020      	movs	r0, r4
    4994:	47c8      	blx	r9
  for(i=0;i<64;i++){
    4996:	2200      	movs	r2, #0
    dummy1[i]=(state[i/8]&(1<<(i%8)))>>(i%8);
    4998:	2007      	movs	r0, #7
    499a:	2601      	movs	r6, #1
    499c:	17d3      	asrs	r3, r2, #31
    499e:	0f5f      	lsrs	r7, r3, #29
    49a0:	19d1      	adds	r1, r2, r7
    49a2:	4001      	ands	r1, r0
    49a4:	1bc9      	subs	r1, r1, r7
    49a6:	4003      	ands	r3, r0
    49a8:	189b      	adds	r3, r3, r2
    49aa:	10db      	asrs	r3, r3, #3
    49ac:	5ce7      	ldrb	r7, [r4, r3]
    49ae:	0033      	movs	r3, r6
    49b0:	408b      	lsls	r3, r1
    49b2:	403b      	ands	r3, r7
    49b4:	410b      	asrs	r3, r1
    49b6:	4669      	mov	r1, sp
    49b8:	5453      	strb	r3, [r2, r1]
  for(i=0;i<64;i++){
    49ba:	3201      	adds	r2, #1
    49bc:	2a40      	cmp	r2, #64	; 0x40
    49be:	d1ed      	bne.n	499c <present80Decrypt+0x84>
    49c0:	2300      	movs	r3, #0
    dummy2[inv_pbox[i]]=dummy1[i];
    49c2:	a810      	add	r0, sp, #64	; 0x40
    49c4:	5d5a      	ldrb	r2, [r3, r5]
    49c6:	4669      	mov	r1, sp
    49c8:	5c59      	ldrb	r1, [r3, r1]
    49ca:	5481      	strb	r1, [r0, r2]
  for(i=0;i<64;i++){
    49cc:	3301      	adds	r3, #1
    49ce:	2b40      	cmp	r3, #64	; 0x40
    49d0:	d1f8      	bne.n	49c4 <present80Decrypt+0xac>
    49d2:	aa10      	add	r2, sp, #64	; 0x40
    49d4:	0021      	movs	r1, r4
    49d6:	0026      	movs	r6, r4
    49d8:	3608      	adds	r6, #8
    49da:	0020      	movs	r0, r4
    state[i] |= dummy2[(i*8)+1] << 1;
    49dc:	7853      	ldrb	r3, [r2, #1]
    49de:	005b      	lsls	r3, r3, #1
    state[i] |= dummy2[(i*8)+2] << 2;
    49e0:	7897      	ldrb	r7, [r2, #2]
    49e2:	00bf      	lsls	r7, r7, #2
    49e4:	433b      	orrs	r3, r7
    49e6:	7817      	ldrb	r7, [r2, #0]
    49e8:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+3] << 3;
    49ea:	78d7      	ldrb	r7, [r2, #3]
    49ec:	00ff      	lsls	r7, r7, #3
    49ee:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+4] << 4;
    49f0:	7917      	ldrb	r7, [r2, #4]
    49f2:	013f      	lsls	r7, r7, #4
    49f4:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+5] << 5;
    49f6:	7957      	ldrb	r7, [r2, #5]
    49f8:	017f      	lsls	r7, r7, #5
    49fa:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+6] << 6;
    49fc:	7997      	ldrb	r7, [r2, #6]
    49fe:	01bf      	lsls	r7, r7, #6
    4a00:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+7] << 7;
    4a02:	79d7      	ldrb	r7, [r2, #7]
    4a04:	01ff      	lsls	r7, r7, #7
    4a06:	433b      	orrs	r3, r7
    4a08:	7003      	strb	r3, [r0, #0]
    4a0a:	3208      	adds	r2, #8
    4a0c:	3001      	adds	r0, #1
  for(i=0;i<8;i++){
    4a0e:	42b0      	cmp	r0, r6
    4a10:	d1e4      	bne.n	49dc <present80Decrypt+0xc4>
    dummy |= (inv_sbox[(state[i] & 0xF0) >> 4] << 4);
    4a12:	4e13      	ldr	r6, [pc, #76]	; (4a60 <present80Decrypt+0x148>)
    dummy |= inv_sbox[state[i] & 0x0F];
    4a14:	270f      	movs	r7, #15
    4a16:	780a      	ldrb	r2, [r1, #0]
    dummy |= (inv_sbox[(state[i] & 0xF0) >> 4] << 4);
    4a18:	0913      	lsrs	r3, r2, #4
    4a1a:	5cf3      	ldrb	r3, [r6, r3]
    4a1c:	011b      	lsls	r3, r3, #4
    dummy |= inv_sbox[state[i] & 0x0F];
    4a1e:	403a      	ands	r2, r7
    dummy |= (inv_sbox[(state[i] & 0xF0) >> 4] << 4);
    4a20:	5cb2      	ldrb	r2, [r6, r2]
    4a22:	4313      	orrs	r3, r2
    state[i]=dummy;
    4a24:	700b      	strb	r3, [r1, #0]
    4a26:	3101      	adds	r1, #1
  for(i=0;i<8;i++){
    4a28:	4281      	cmp	r1, r0
    4a2a:	d1f4      	bne.n	4a16 <present80Decrypt+0xfe>
    4a2c:	e7aa      	b.n	4984 <present80Decrypt+0x6c>
    addRoundKey(STATE, round_key[0]);
    4a2e:	a920      	add	r1, sp, #128	; 0x80
    4a30:	0020      	movs	r0, r4
    4a32:	4b09      	ldr	r3, [pc, #36]	; (4a58 <present80Decrypt+0x140>)
    4a34:	4798      	blx	r3
} // end present80Decrypt()
    4a36:	23b0      	movs	r3, #176	; 0xb0
    4a38:	009b      	lsls	r3, r3, #2
    4a3a:	449d      	add	sp, r3
    4a3c:	bc1c      	pop	{r2, r3, r4}
    4a3e:	4690      	mov	r8, r2
    4a40:	4699      	mov	r9, r3
    4a42:	46a2      	mov	sl, r4
    4a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a46:	46c0      	nop			; (mov r8, r8)
    4a48:	fffffd40 	.word	0xfffffd40
    4a4c:	00005ec9 	.word	0x00005ec9
    4a50:	00005edb 	.word	0x00005edb
    4a54:	00004745 	.word	0x00004745
    4a58:	00004731 	.word	0x00004731
    4a5c:	0000a550 	.word	0x0000a550
    4a60:	0000a590 	.word	0x0000a590

00004a64 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4a64:	b570      	push	{r4, r5, r6, lr}
    4a66:	b082      	sub	sp, #8
    4a68:	0005      	movs	r5, r0
    4a6a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    4a6c:	2200      	movs	r2, #0
    4a6e:	466b      	mov	r3, sp
    4a70:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4a72:	4c06      	ldr	r4, [pc, #24]	; (4a8c <usart_serial_getchar+0x28>)
    4a74:	466b      	mov	r3, sp
    4a76:	1d99      	adds	r1, r3, #6
    4a78:	0028      	movs	r0, r5
    4a7a:	47a0      	blx	r4
    4a7c:	2800      	cmp	r0, #0
    4a7e:	d1f9      	bne.n	4a74 <usart_serial_getchar+0x10>

	*c = temp;
    4a80:	466b      	mov	r3, sp
    4a82:	3306      	adds	r3, #6
    4a84:	881b      	ldrh	r3, [r3, #0]
    4a86:	7033      	strb	r3, [r6, #0]
}
    4a88:	b002      	add	sp, #8
    4a8a:	bd70      	pop	{r4, r5, r6, pc}
    4a8c:	00000e4b 	.word	0x00000e4b

00004a90 <usart_serial_putchar>:
{
    4a90:	b570      	push	{r4, r5, r6, lr}
    4a92:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    4a94:	b28c      	uxth	r4, r1
    4a96:	4e03      	ldr	r6, [pc, #12]	; (4aa4 <usart_serial_putchar+0x14>)
    4a98:	0021      	movs	r1, r4
    4a9a:	0028      	movs	r0, r5
    4a9c:	47b0      	blx	r6
    4a9e:	2800      	cmp	r0, #0
    4aa0:	d1fa      	bne.n	4a98 <usart_serial_putchar+0x8>
}
    4aa2:	bd70      	pop	{r4, r5, r6, pc}
    4aa4:	00000e25 	.word	0x00000e25

00004aa8 <CAN0_Handler>:
			CAN_TX_BUFFER_INDEX);
	can_tx_transfer_request(&can_instance, 1 << CAN_TX_BUFFER_INDEX);
}
*/
//! [can_transfer_message_setup]
void CAN0_Handler(void) {
    4aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aaa:	46de      	mov	lr, fp
    4aac:	464f      	mov	r7, r9
    4aae:	4646      	mov	r6, r8
    4ab0:	b5c0      	push	{r6, r7, lr}
    4ab2:	b082      	sub	sp, #8
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
    4ab4:	4bd3      	ldr	r3, [pc, #844]	; (4e04 <CAN0_Handler+0x35c>)
    4ab6:	681b      	ldr	r3, [r3, #0]
    4ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
volatile uint32_t rx_buffer_index;
volatile uint32_t status = can_read_interrupt_status(&can_instance);
    4aba:	9300      	str	r3, [sp, #0]
printf("Status = %i, Pubkey[2][6] = %02x",status,StoredPublicKeys[2][6]);
    4abc:	9900      	ldr	r1, [sp, #0]
    4abe:	2346      	movs	r3, #70	; 0x46
    4ac0:	4ad1      	ldr	r2, [pc, #836]	; (4e08 <CAN0_Handler+0x360>)
    4ac2:	5cd2      	ldrb	r2, [r2, r3]
    4ac4:	48d1      	ldr	r0, [pc, #836]	; (4e0c <CAN0_Handler+0x364>)
    4ac6:	4bd2      	ldr	r3, [pc, #840]	; (4e10 <CAN0_Handler+0x368>)
    4ac8:	4798      	blx	r3

if ((status & CAN_PROTOCOL_ERROR_ARBITRATION)
    4aca:	9b00      	ldr	r3, [sp, #0]
    4acc:	011b      	lsls	r3, r3, #4
    4ace:	d415      	bmi.n	4afc <CAN0_Handler+0x54>
|| (status & CAN_PROTOCOL_ERROR_DATA)) {
    4ad0:	9b00      	ldr	r3, [sp, #0]
    4ad2:	00db      	lsls	r3, r3, #3
    4ad4:	d412      	bmi.n	4afc <CAN0_Handler+0x54>
		| CAN_PROTOCOL_ERROR_DATA);
	printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
}

// Enrollment stage:
else if (STAGE == ENROLLMENT) {
    4ad6:	4bcf      	ldr	r3, [pc, #828]	; (4e14 <CAN0_Handler+0x36c>)
    4ad8:	781b      	ldrb	r3, [r3, #0]
    4ada:	2b00      	cmp	r3, #0
    4adc:	d000      	beq.n	4ae0 <CAN0_Handler+0x38>
    4ade:	e09f      	b.n	4c20 <CAN0_Handler+0x178>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    4ae0:	9b00      	ldr	r3, [sp, #0]
    4ae2:	031b      	lsls	r3, r3, #12
    4ae4:	d512      	bpl.n	4b0c <CAN0_Handler+0x64>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    4ae6:	4bc7      	ldr	r3, [pc, #796]	; (4e04 <CAN0_Handler+0x35c>)
    4ae8:	681b      	ldr	r3, [r3, #0]
    4aea:	2280      	movs	r2, #128	; 0x80
    4aec:	0312      	lsls	r2, r2, #12
    4aee:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance,CAN_RX_BUFFER_NEW_MESSAGE);
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4af0:	2500      	movs	r5, #0
			if (can_rx_get_buffer_status(&can_instance, i)) {
				rx_buffer_index = i;
				can_rx_clear_buffer_status(&can_instance, i);
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    4af2:	4bc9      	ldr	r3, [pc, #804]	; (4e18 <CAN0_Handler+0x370>)
    4af4:	4699      	mov	r9, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    4af6:	4bc9      	ldr	r3, [pc, #804]	; (4e1c <CAN0_Handler+0x374>)
    4af8:	469b      	mov	fp, r3
    4afa:	e077      	b.n	4bec <CAN0_Handler+0x144>
    4afc:	4bc1      	ldr	r3, [pc, #772]	; (4e04 <CAN0_Handler+0x35c>)
    4afe:	681b      	ldr	r3, [r3, #0]
    4b00:	22c0      	movs	r2, #192	; 0xc0
    4b02:	0552      	lsls	r2, r2, #21
    4b04:	651a      	str	r2, [r3, #80]	; 0x50
	printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
    4b06:	48c6      	ldr	r0, [pc, #792]	; (4e20 <CAN0_Handler+0x378>)
    4b08:	4bc6      	ldr	r3, [pc, #792]	; (4e24 <CAN0_Handler+0x37c>)
    4b0a:	4798      	blx	r3
			}
		}
	}
}

}
    4b0c:	b002      	add	sp, #8
    4b0e:	bc1c      	pop	{r2, r3, r4}
    4b10:	4690      	mov	r8, r2
    4b12:	4699      	mov	r9, r3
    4b14:	46a3      	mov	fp, r4
    4b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4b18:	4bba      	ldr	r3, [pc, #744]	; (4e04 <CAN0_Handler+0x35c>)
    4b1a:	6819      	ldr	r1, [r3, #0]
    4b1c:	239c      	movs	r3, #156	; 0x9c
    4b1e:	58c8      	ldr	r0, [r1, r3]
		index -= 32;
    4b20:	002c      	movs	r4, r5
    4b22:	3c20      	subs	r4, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4b24:	3b9b      	subs	r3, #155	; 0x9b
    4b26:	40a3      	lsls	r3, r4
			if (can_rx_get_buffer_status(&can_instance, i)) {
    4b28:	4203      	tst	r3, r0
    4b2a:	d05b      	beq.n	4be4 <CAN0_Handler+0x13c>
				rx_buffer_index = i;
    4b2c:	9501      	str	r5, [sp, #4]
		module_inst->hw->NDAT2.reg = (1 << index);
    4b2e:	229c      	movs	r2, #156	; 0x9c
    4b30:	508b      	str	r3, [r1, r2]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    4b32:	9a01      	ldr	r2, [sp, #4]
    4b34:	0113      	lsls	r3, r2, #4
    4b36:	189b      	adds	r3, r3, r2
    4b38:	009b      	lsls	r3, r3, #2
    4b3a:	464a      	mov	r2, r9
    4b3c:	5c9b      	ldrb	r3, [r3, r2]
    4b3e:	4698      	mov	r8, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    4b40:	9b01      	ldr	r3, [sp, #4]
    4b42:	9a01      	ldr	r2, [sp, #4]
    4b44:	0119      	lsls	r1, r3, #4
    4b46:	18c9      	adds	r1, r1, r3
    4b48:	0089      	lsls	r1, r1, #2
    4b4a:	3104      	adds	r1, #4
    4b4c:	4643      	mov	r3, r8
    4b4e:	011c      	lsls	r4, r3, #4
    4b50:	1909      	adds	r1, r1, r4
    4b52:	4449      	add	r1, r9
    4b54:	48ab      	ldr	r0, [pc, #684]	; (4e04 <CAN0_Handler+0x35c>)
    4b56:	47d8      	blx	fp
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    4b58:	9a01      	ldr	r2, [sp, #4]
    4b5a:	0113      	lsls	r3, r2, #4
    4b5c:	189b      	adds	r3, r3, r2
    4b5e:	009b      	lsls	r3, r3, #2
    4b60:	4642      	mov	r2, r8
    4b62:	1c51      	adds	r1, r2, #1
    4b64:	2203      	movs	r2, #3
    4b66:	400a      	ands	r2, r1
    4b68:	4649      	mov	r1, r9
    4b6a:	545a      	strb	r2, [r3, r1]
				if (rx_element_buff[rx_buffer_index].buffers[temp_Buff].R0.bit.XTD) {
    4b6c:	9a01      	ldr	r2, [sp, #4]
    4b6e:	0113      	lsls	r3, r2, #4
    4b70:	189b      	adds	r3, r3, r2
    4b72:	009b      	lsls	r3, r3, #2
    4b74:	18e4      	adds	r4, r4, r3
    4b76:	444c      	add	r4, r9
    4b78:	6863      	ldr	r3, [r4, #4]
    4b7a:	005b      	lsls	r3, r3, #1
    4b7c:	d544      	bpl.n	4c08 <CAN0_Handler+0x160>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
    4b7e:	48aa      	ldr	r0, [pc, #680]	; (4e28 <CAN0_Handler+0x380>)
    4b80:	4ba8      	ldr	r3, [pc, #672]	; (4e24 <CAN0_Handler+0x37c>)
    4b82:	4798      	blx	r3
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4b84:	9901      	ldr	r1, [sp, #4]
    4b86:	4643      	mov	r3, r8
    4b88:	011b      	lsls	r3, r3, #4
    4b8a:	010a      	lsls	r2, r1, #4
    4b8c:	1852      	adds	r2, r2, r1
    4b8e:	0092      	lsls	r2, r2, #2
    4b90:	189b      	adds	r3, r3, r2
    4b92:	4aa1      	ldr	r2, [pc, #644]	; (4e18 <CAN0_Handler+0x370>)
    4b94:	18d3      	adds	r3, r2, r3
    4b96:	689b      	ldr	r3, [r3, #8]
    4b98:	031b      	lsls	r3, r3, #12
    4b9a:	0f1b      	lsrs	r3, r3, #28
    4b9c:	2500      	movs	r5, #0
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	dc00      	bgt.n	4ba4 <CAN0_Handler+0xfc>
    4ba2:	e1c3      	b.n	4f2c <CAN0_Handler+0x484>
					printf("  %d",rx_element_buff[rx_buffer_index].buffers[temp_Buff].data[i]);
    4ba4:	4e9c      	ldr	r6, [pc, #624]	; (4e18 <CAN0_Handler+0x370>)
    4ba6:	4f9a      	ldr	r7, [pc, #616]	; (4e10 <CAN0_Handler+0x368>)
    4ba8:	9a01      	ldr	r2, [sp, #4]
    4baa:	4643      	mov	r3, r8
    4bac:	011c      	lsls	r4, r3, #4
    4bae:	0113      	lsls	r3, r2, #4
    4bb0:	189b      	adds	r3, r3, r2
    4bb2:	009b      	lsls	r3, r3, #2
    4bb4:	18e3      	adds	r3, r4, r3
    4bb6:	18f3      	adds	r3, r6, r3
    4bb8:	195b      	adds	r3, r3, r5
    4bba:	7b19      	ldrb	r1, [r3, #12]
    4bbc:	489b      	ldr	r0, [pc, #620]	; (4e2c <CAN0_Handler+0x384>)
    4bbe:	47b8      	blx	r7
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4bc0:	3501      	adds	r5, #1
    4bc2:	9a01      	ldr	r2, [sp, #4]
    4bc4:	0113      	lsls	r3, r2, #4
    4bc6:	189b      	adds	r3, r3, r2
    4bc8:	009b      	lsls	r3, r3, #2
    4bca:	18e4      	adds	r4, r4, r3
    4bcc:	1934      	adds	r4, r6, r4
    4bce:	68a3      	ldr	r3, [r4, #8]
    4bd0:	031b      	lsls	r3, r3, #12
    4bd2:	0f1b      	lsrs	r3, r3, #28
    4bd4:	42ab      	cmp	r3, r5
    4bd6:	dce7      	bgt.n	4ba8 <CAN0_Handler+0x100>
				printf("\r\n\r\n");
    4bd8:	4895      	ldr	r0, [pc, #596]	; (4e30 <CAN0_Handler+0x388>)
    4bda:	4b92      	ldr	r3, [pc, #584]	; (4e24 <CAN0_Handler+0x37c>)
    4bdc:	4798      	blx	r3
				if (rx_buffer_index == CAN_FILTER_REGULAR_REC) g_received++;
    4bde:	9b01      	ldr	r3, [sp, #4]
    4be0:	2b02      	cmp	r3, #2
    4be2:	d018      	beq.n	4c16 <CAN0_Handler+0x16e>
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4be4:	3501      	adds	r5, #1
    4be6:	2d0f      	cmp	r5, #15
    4be8:	dd00      	ble.n	4bec <CAN0_Handler+0x144>
    4bea:	e78f      	b.n	4b0c <CAN0_Handler+0x64>
	if (index < 32) {
    4bec:	2d1f      	cmp	r5, #31
    4bee:	d893      	bhi.n	4b18 <CAN0_Handler+0x70>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    4bf0:	4b84      	ldr	r3, [pc, #528]	; (4e04 <CAN0_Handler+0x35c>)
    4bf2:	6819      	ldr	r1, [r3, #0]
    4bf4:	2398      	movs	r3, #152	; 0x98
    4bf6:	58c8      	ldr	r0, [r1, r3]
    4bf8:	3b97      	subs	r3, #151	; 0x97
    4bfa:	40ab      	lsls	r3, r5
			if (can_rx_get_buffer_status(&can_instance, i)) {
    4bfc:	4203      	tst	r3, r0
    4bfe:	d0f1      	beq.n	4be4 <CAN0_Handler+0x13c>
				rx_buffer_index = i;
    4c00:	9501      	str	r5, [sp, #4]
		module_inst->hw->NDAT1.reg = (1 << index);
    4c02:	2298      	movs	r2, #152	; 0x98
    4c04:	508b      	str	r3, [r1, r2]
    4c06:	e794      	b.n	4b32 <CAN0_Handler+0x8a>
					printf("\n\r Standard message received in Rx buffer %d, section %d. The received data is: \r\n",rx_buffer_index,temp_Buff);
    4c08:	9901      	ldr	r1, [sp, #4]
    4c0a:	4642      	mov	r2, r8
    4c0c:	4889      	ldr	r0, [pc, #548]	; (4e34 <CAN0_Handler+0x38c>)
    4c0e:	4b80      	ldr	r3, [pc, #512]	; (4e10 <CAN0_Handler+0x368>)
    4c10:	4798      	blx	r3
    4c12:	e7b7      	b.n	4b84 <CAN0_Handler+0xdc>
				if (rx_buffer_index == CAN_FILTER_REGULAR_REC) g_received++;
    4c14:	2500      	movs	r5, #0
    4c16:	4a88      	ldr	r2, [pc, #544]	; (4e38 <CAN0_Handler+0x390>)
    4c18:	6813      	ldr	r3, [r2, #0]
    4c1a:	3301      	adds	r3, #1
    4c1c:	6013      	str	r3, [r2, #0]
    4c1e:	e7e1      	b.n	4be4 <CAN0_Handler+0x13c>
else if (STAGE == RECEIVE) {
    4c20:	4b7c      	ldr	r3, [pc, #496]	; (4e14 <CAN0_Handler+0x36c>)
    4c22:	781b      	ldrb	r3, [r3, #0]
    4c24:	2b01      	cmp	r3, #1
    4c26:	d023      	beq.n	4c70 <CAN0_Handler+0x1c8>
else if (STAGE == SEND) {
    4c28:	4b7a      	ldr	r3, [pc, #488]	; (4e14 <CAN0_Handler+0x36c>)
    4c2a:	781b      	ldrb	r3, [r3, #0]
    4c2c:	2b02      	cmp	r3, #2
    4c2e:	d043      	beq.n	4cb8 <CAN0_Handler+0x210>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    4c30:	9b00      	ldr	r3, [sp, #0]
    4c32:	031b      	lsls	r3, r3, #12
    4c34:	d400      	bmi.n	4c38 <CAN0_Handler+0x190>
    4c36:	e769      	b.n	4b0c <CAN0_Handler+0x64>
	module_inst->hw->IR.reg = source;
    4c38:	4b72      	ldr	r3, [pc, #456]	; (4e04 <CAN0_Handler+0x35c>)
    4c3a:	6818      	ldr	r0, [r3, #0]
    4c3c:	2380      	movs	r3, #128	; 0x80
    4c3e:	031b      	lsls	r3, r3, #12
    4c40:	6503      	str	r3, [r0, #80]	; 0x50
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4c42:	2100      	movs	r1, #0
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4c44:	239c      	movs	r3, #156	; 0x9c
    4c46:	469c      	mov	ip, r3
    4c48:	2401      	movs	r4, #1
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    4c4a:	2598      	movs	r5, #152	; 0x98
			if (can_rx_get_buffer_status(&can_instance, i)) {
    4c4c:	000a      	movs	r2, r1
	if (index < 32) {
    4c4e:	291f      	cmp	r1, #31
    4c50:	d900      	bls.n	4c54 <CAN0_Handler+0x1ac>
    4c52:	e0cc      	b.n	4dee <CAN0_Handler+0x346>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    4c54:	5943      	ldr	r3, [r0, r5]
    4c56:	0027      	movs	r7, r4
    4c58:	408f      	lsls	r7, r1
    4c5a:	403b      	ands	r3, r7
    4c5c:	1e5f      	subs	r7, r3, #1
    4c5e:	41bb      	sbcs	r3, r7
    4c60:	b2db      	uxtb	r3, r3
    4c62:	2b00      	cmp	r3, #0
    4c64:	d000      	beq.n	4c68 <CAN0_Handler+0x1c0>
    4c66:	e0eb      	b.n	4e40 <CAN0_Handler+0x398>
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4c68:	3101      	adds	r1, #1
    4c6a:	2910      	cmp	r1, #16
    4c6c:	d1ee      	bne.n	4c4c <CAN0_Handler+0x1a4>
    4c6e:	e74d      	b.n	4b0c <CAN0_Handler+0x64>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    4c70:	9b00      	ldr	r3, [sp, #0]
    4c72:	031b      	lsls	r3, r3, #12
    4c74:	d400      	bmi.n	4c78 <CAN0_Handler+0x1d0>
    4c76:	e749      	b.n	4b0c <CAN0_Handler+0x64>
	module_inst->hw->IR.reg = source;
    4c78:	4b62      	ldr	r3, [pc, #392]	; (4e04 <CAN0_Handler+0x35c>)
    4c7a:	681b      	ldr	r3, [r3, #0]
    4c7c:	2280      	movs	r2, #128	; 0x80
    4c7e:	0312      	lsls	r2, r2, #12
    4c80:	651a      	str	r2, [r3, #80]	; 0x50
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4c82:	2500      	movs	r5, #0
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    4c84:	4b64      	ldr	r3, [pc, #400]	; (4e18 <CAN0_Handler+0x370>)
    4c86:	4699      	mov	r9, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    4c88:	4b64      	ldr	r3, [pc, #400]	; (4e1c <CAN0_Handler+0x374>)
    4c8a:	469b      	mov	fp, r3
    4c8c:	e1ba      	b.n	5004 <CAN0_Handler+0x55c>
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4c8e:	4b5d      	ldr	r3, [pc, #372]	; (4e04 <CAN0_Handler+0x35c>)
    4c90:	6819      	ldr	r1, [r3, #0]
    4c92:	239c      	movs	r3, #156	; 0x9c
    4c94:	58c8      	ldr	r0, [r1, r3]
		index -= 32;
    4c96:	002c      	movs	r4, r5
    4c98:	3c20      	subs	r4, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4c9a:	3b9b      	subs	r3, #155	; 0x9b
    4c9c:	40a3      	lsls	r3, r4
			if (can_rx_get_buffer_status(&can_instance, i)) {
    4c9e:	4203      	tst	r3, r0
    4ca0:	d100      	bne.n	4ca4 <CAN0_Handler+0x1fc>
    4ca2:	e1ab      	b.n	4ffc <CAN0_Handler+0x554>
				rx_buffer_index = i;
    4ca4:	9501      	str	r5, [sp, #4]
		module_inst->hw->NDAT2.reg = (1 << index);
    4ca6:	229c      	movs	r2, #156	; 0x9c
    4ca8:	508b      	str	r3, [r1, r2]
    4caa:	e14b      	b.n	4f44 <CAN0_Handler+0x49c>
					printf("\n\r Standard message received in Rx buffer %d, section %d. The received data is: \r\n",rx_buffer_index,temp_Buff);
    4cac:	9901      	ldr	r1, [sp, #4]
    4cae:	4642      	mov	r2, r8
    4cb0:	4860      	ldr	r0, [pc, #384]	; (4e34 <CAN0_Handler+0x38c>)
    4cb2:	4b57      	ldr	r3, [pc, #348]	; (4e10 <CAN0_Handler+0x368>)
    4cb4:	4798      	blx	r3
    4cb6:	e16f      	b.n	4f98 <CAN0_Handler+0x4f0>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    4cb8:	9b00      	ldr	r3, [sp, #0]
    4cba:	031b      	lsls	r3, r3, #12
    4cbc:	d400      	bmi.n	4cc0 <CAN0_Handler+0x218>
    4cbe:	e725      	b.n	4b0c <CAN0_Handler+0x64>
	module_inst->hw->IR.reg = source;
    4cc0:	4b50      	ldr	r3, [pc, #320]	; (4e04 <CAN0_Handler+0x35c>)
    4cc2:	6818      	ldr	r0, [r3, #0]
    4cc4:	2380      	movs	r3, #128	; 0x80
    4cc6:	031b      	lsls	r3, r3, #12
    4cc8:	6503      	str	r3, [r0, #80]	; 0x50
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4cca:	2100      	movs	r1, #0
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4ccc:	239c      	movs	r3, #156	; 0x9c
    4cce:	469c      	mov	ip, r3
    4cd0:	2401      	movs	r4, #1
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    4cd2:	2598      	movs	r5, #152	; 0x98
			if (can_rx_get_buffer_status(&can_instance, i)) {
    4cd4:	000a      	movs	r2, r1
	if (index < 32) {
    4cd6:	291f      	cmp	r1, #31
    4cd8:	d80c      	bhi.n	4cf4 <CAN0_Handler+0x24c>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    4cda:	5943      	ldr	r3, [r0, r5]
    4cdc:	0027      	movs	r7, r4
    4cde:	408f      	lsls	r7, r1
    4ce0:	403b      	ands	r3, r7
    4ce2:	1e5f      	subs	r7, r3, #1
    4ce4:	41bb      	sbcs	r3, r7
    4ce6:	b2db      	uxtb	r3, r3
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d10e      	bne.n	4d0a <CAN0_Handler+0x262>
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4cec:	3101      	adds	r1, #1
    4cee:	2910      	cmp	r1, #16
    4cf0:	d1f0      	bne.n	4cd4 <CAN0_Handler+0x22c>
    4cf2:	e70b      	b.n	4b0c <CAN0_Handler+0x64>
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4cf4:	4663      	mov	r3, ip
    4cf6:	58c3      	ldr	r3, [r0, r3]
    4cf8:	000f      	movs	r7, r1
    4cfa:	3f20      	subs	r7, #32
    4cfc:	0026      	movs	r6, r4
    4cfe:	40be      	lsls	r6, r7
    4d00:	4033      	ands	r3, r6
    4d02:	1e5f      	subs	r7, r3, #1
    4d04:	41bb      	sbcs	r3, r7
    4d06:	b2db      	uxtb	r3, r3
    4d08:	e7ee      	b.n	4ce8 <CAN0_Handler+0x240>
				rx_buffer_index = i;
    4d0a:	9201      	str	r2, [sp, #4]
	if (index < 32) {
    4d0c:	2a1f      	cmp	r2, #31
    4d0e:	d862      	bhi.n	4dd6 <CAN0_Handler+0x32e>
		module_inst->hw->NDAT1.reg = (1 << index);
    4d10:	2301      	movs	r3, #1
    4d12:	4093      	lsls	r3, r2
    4d14:	2298      	movs	r2, #152	; 0x98
    4d16:	5083      	str	r3, [r0, r2]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    4d18:	9a01      	ldr	r2, [sp, #4]
    4d1a:	4c3f      	ldr	r4, [pc, #252]	; (4e18 <CAN0_Handler+0x370>)
    4d1c:	0113      	lsls	r3, r2, #4
    4d1e:	189b      	adds	r3, r3, r2
    4d20:	009b      	lsls	r3, r3, #2
    4d22:	5d1b      	ldrb	r3, [r3, r4]
    4d24:	4698      	mov	r8, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    4d26:	9b01      	ldr	r3, [sp, #4]
    4d28:	9a01      	ldr	r2, [sp, #4]
    4d2a:	0119      	lsls	r1, r3, #4
    4d2c:	18c9      	adds	r1, r1, r3
    4d2e:	0089      	lsls	r1, r1, #2
    4d30:	3104      	adds	r1, #4
    4d32:	4643      	mov	r3, r8
    4d34:	011d      	lsls	r5, r3, #4
    4d36:	1949      	adds	r1, r1, r5
    4d38:	1909      	adds	r1, r1, r4
    4d3a:	4832      	ldr	r0, [pc, #200]	; (4e04 <CAN0_Handler+0x35c>)
    4d3c:	4b37      	ldr	r3, [pc, #220]	; (4e1c <CAN0_Handler+0x374>)
    4d3e:	4798      	blx	r3
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    4d40:	9a01      	ldr	r2, [sp, #4]
    4d42:	0113      	lsls	r3, r2, #4
    4d44:	189b      	adds	r3, r3, r2
    4d46:	009b      	lsls	r3, r3, #2
    4d48:	4642      	mov	r2, r8
    4d4a:	1c51      	adds	r1, r2, #1
    4d4c:	2203      	movs	r2, #3
    4d4e:	400a      	ands	r2, r1
    4d50:	551a      	strb	r2, [r3, r4]
				if (rx_element_buff[rx_buffer_index].buffers[temp_Buff].R0.bit.XTD) {
    4d52:	9a01      	ldr	r2, [sp, #4]
    4d54:	0113      	lsls	r3, r2, #4
    4d56:	189b      	adds	r3, r3, r2
    4d58:	009b      	lsls	r3, r3, #2
    4d5a:	18eb      	adds	r3, r5, r3
    4d5c:	18e4      	adds	r4, r4, r3
    4d5e:	6863      	ldr	r3, [r4, #4]
    4d60:	005b      	lsls	r3, r3, #1
    4d62:	d53e      	bpl.n	4de2 <CAN0_Handler+0x33a>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
    4d64:	4830      	ldr	r0, [pc, #192]	; (4e28 <CAN0_Handler+0x380>)
    4d66:	4b2f      	ldr	r3, [pc, #188]	; (4e24 <CAN0_Handler+0x37c>)
    4d68:	4798      	blx	r3
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4d6a:	9901      	ldr	r1, [sp, #4]
    4d6c:	4643      	mov	r3, r8
    4d6e:	011b      	lsls	r3, r3, #4
    4d70:	010a      	lsls	r2, r1, #4
    4d72:	1852      	adds	r2, r2, r1
    4d74:	0092      	lsls	r2, r2, #2
    4d76:	189b      	adds	r3, r3, r2
    4d78:	4a27      	ldr	r2, [pc, #156]	; (4e18 <CAN0_Handler+0x370>)
    4d7a:	18d3      	adds	r3, r2, r3
    4d7c:	689b      	ldr	r3, [r3, #8]
    4d7e:	031b      	lsls	r3, r3, #12
    4d80:	0f1b      	lsrs	r3, r3, #28
    4d82:	2600      	movs	r6, #0
    4d84:	2b00      	cmp	r3, #0
    4d86:	dd19      	ble.n	4dbc <CAN0_Handler+0x314>
					printf("  %d",rx_element_buff[rx_buffer_index].buffers[temp_Buff].data[i]);
    4d88:	4f23      	ldr	r7, [pc, #140]	; (4e18 <CAN0_Handler+0x370>)
    4d8a:	4d21      	ldr	r5, [pc, #132]	; (4e10 <CAN0_Handler+0x368>)
    4d8c:	9a01      	ldr	r2, [sp, #4]
    4d8e:	4643      	mov	r3, r8
    4d90:	011c      	lsls	r4, r3, #4
    4d92:	0113      	lsls	r3, r2, #4
    4d94:	189b      	adds	r3, r3, r2
    4d96:	009b      	lsls	r3, r3, #2
    4d98:	18e3      	adds	r3, r4, r3
    4d9a:	18fb      	adds	r3, r7, r3
    4d9c:	199b      	adds	r3, r3, r6
    4d9e:	7b19      	ldrb	r1, [r3, #12]
    4da0:	4822      	ldr	r0, [pc, #136]	; (4e2c <CAN0_Handler+0x384>)
    4da2:	47a8      	blx	r5
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4da4:	3601      	adds	r6, #1
    4da6:	9a01      	ldr	r2, [sp, #4]
    4da8:	0113      	lsls	r3, r2, #4
    4daa:	189b      	adds	r3, r3, r2
    4dac:	009b      	lsls	r3, r3, #2
    4dae:	18e4      	adds	r4, r4, r3
    4db0:	193c      	adds	r4, r7, r4
    4db2:	68a3      	ldr	r3, [r4, #8]
    4db4:	031b      	lsls	r3, r3, #12
    4db6:	0f1b      	lsrs	r3, r3, #28
    4db8:	42b3      	cmp	r3, r6
    4dba:	dce7      	bgt.n	4d8c <CAN0_Handler+0x2e4>
				printf("\r\n\r\n");
    4dbc:	481c      	ldr	r0, [pc, #112]	; (4e30 <CAN0_Handler+0x388>)
    4dbe:	4b19      	ldr	r3, [pc, #100]	; (4e24 <CAN0_Handler+0x37c>)
    4dc0:	4798      	blx	r3
				g_session_res[rx_buffer_index]++;
    4dc2:	9a01      	ldr	r2, [sp, #4]
    4dc4:	4b1d      	ldr	r3, [pc, #116]	; (4e3c <CAN0_Handler+0x394>)
    4dc6:	0092      	lsls	r2, r2, #2
    4dc8:	58d1      	ldr	r1, [r2, r3]
    4dca:	3101      	adds	r1, #1
    4dcc:	50d1      	str	r1, [r2, r3]
				g_session_res[0]++;
    4dce:	681a      	ldr	r2, [r3, #0]
    4dd0:	3201      	adds	r2, #1
    4dd2:	601a      	str	r2, [r3, #0]
				break;
    4dd4:	e69a      	b.n	4b0c <CAN0_Handler+0x64>
		index -= 32;
    4dd6:	3a20      	subs	r2, #32
		module_inst->hw->NDAT2.reg = (1 << index);
    4dd8:	2301      	movs	r3, #1
    4dda:	4093      	lsls	r3, r2
    4ddc:	229c      	movs	r2, #156	; 0x9c
    4dde:	5083      	str	r3, [r0, r2]
    4de0:	e79a      	b.n	4d18 <CAN0_Handler+0x270>
					printf("\n\r Standard message received in Rx buffer %d, section %d. The received data is: \r\n",rx_buffer_index,temp_Buff);
    4de2:	9901      	ldr	r1, [sp, #4]
    4de4:	4642      	mov	r2, r8
    4de6:	4813      	ldr	r0, [pc, #76]	; (4e34 <CAN0_Handler+0x38c>)
    4de8:	4b09      	ldr	r3, [pc, #36]	; (4e10 <CAN0_Handler+0x368>)
    4dea:	4798      	blx	r3
    4dec:	e7bd      	b.n	4d6a <CAN0_Handler+0x2c2>
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4dee:	4663      	mov	r3, ip
    4df0:	58c3      	ldr	r3, [r0, r3]
    4df2:	000f      	movs	r7, r1
    4df4:	3f20      	subs	r7, #32
    4df6:	0026      	movs	r6, r4
    4df8:	40be      	lsls	r6, r7
    4dfa:	4033      	ands	r3, r6
    4dfc:	1e5f      	subs	r7, r3, #1
    4dfe:	41bb      	sbcs	r3, r7
    4e00:	b2db      	uxtb	r3, r3
    4e02:	e72e      	b.n	4c62 <CAN0_Handler+0x1ba>
    4e04:	20000cb0 	.word	0x20000cb0
    4e08:	200011b0 	.word	0x200011b0
    4e0c:	0000a5f0 	.word	0x0000a5f0
    4e10:	00006061 	.word	0x00006061
    4e14:	20000ca8 	.word	0x20000ca8
    4e18:	20000d40 	.word	0x20000d40
    4e1c:	00000549 	.word	0x00000549
    4e20:	0000a614 	.word	0x0000a614
    4e24:	00006155 	.word	0x00006155
    4e28:	0000a658 	.word	0x0000a658
    4e2c:	0000a6f0 	.word	0x0000a6f0
    4e30:	0000a6f8 	.word	0x0000a6f8
    4e34:	0000a69c 	.word	0x0000a69c
    4e38:	20000cac 	.word	0x20000cac
    4e3c:	20000d04 	.word	0x20000d04
				rx_buffer_index = i;
    4e40:	9201      	str	r2, [sp, #4]
	if (index < 32) {
    4e42:	2a1f      	cmp	r2, #31
    4e44:	d866      	bhi.n	4f14 <CAN0_Handler+0x46c>
		module_inst->hw->NDAT1.reg = (1 << index);
    4e46:	2301      	movs	r3, #1
    4e48:	4093      	lsls	r3, r2
    4e4a:	2298      	movs	r2, #152	; 0x98
    4e4c:	5083      	str	r3, [r0, r2]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    4e4e:	9a01      	ldr	r2, [sp, #4]
    4e50:	4c72      	ldr	r4, [pc, #456]	; (501c <CAN0_Handler+0x574>)
    4e52:	0113      	lsls	r3, r2, #4
    4e54:	189b      	adds	r3, r3, r2
    4e56:	009b      	lsls	r3, r3, #2
    4e58:	5d1b      	ldrb	r3, [r3, r4]
    4e5a:	4698      	mov	r8, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    4e5c:	9b01      	ldr	r3, [sp, #4]
    4e5e:	9a01      	ldr	r2, [sp, #4]
    4e60:	0119      	lsls	r1, r3, #4
    4e62:	18c9      	adds	r1, r1, r3
    4e64:	0089      	lsls	r1, r1, #2
    4e66:	3104      	adds	r1, #4
    4e68:	4643      	mov	r3, r8
    4e6a:	011d      	lsls	r5, r3, #4
    4e6c:	1949      	adds	r1, r1, r5
    4e6e:	1909      	adds	r1, r1, r4
    4e70:	486b      	ldr	r0, [pc, #428]	; (5020 <CAN0_Handler+0x578>)
    4e72:	4b6c      	ldr	r3, [pc, #432]	; (5024 <CAN0_Handler+0x57c>)
    4e74:	4798      	blx	r3
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    4e76:	9a01      	ldr	r2, [sp, #4]
    4e78:	0113      	lsls	r3, r2, #4
    4e7a:	189b      	adds	r3, r3, r2
    4e7c:	009b      	lsls	r3, r3, #2
    4e7e:	4642      	mov	r2, r8
    4e80:	1c51      	adds	r1, r2, #1
    4e82:	2203      	movs	r2, #3
    4e84:	400a      	ands	r2, r1
    4e86:	551a      	strb	r2, [r3, r4]
				if (rx_element_buff[rx_buffer_index].buffers[temp_Buff].R0.bit.XTD) {
    4e88:	9a01      	ldr	r2, [sp, #4]
    4e8a:	0113      	lsls	r3, r2, #4
    4e8c:	189b      	adds	r3, r3, r2
    4e8e:	009b      	lsls	r3, r3, #2
    4e90:	18eb      	adds	r3, r5, r3
    4e92:	18e4      	adds	r4, r4, r3
    4e94:	6863      	ldr	r3, [r4, #4]
    4e96:	005b      	lsls	r3, r3, #1
    4e98:	d542      	bpl.n	4f20 <CAN0_Handler+0x478>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
    4e9a:	4863      	ldr	r0, [pc, #396]	; (5028 <CAN0_Handler+0x580>)
    4e9c:	4b63      	ldr	r3, [pc, #396]	; (502c <CAN0_Handler+0x584>)
    4e9e:	4798      	blx	r3
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4ea0:	9901      	ldr	r1, [sp, #4]
    4ea2:	4643      	mov	r3, r8
    4ea4:	011b      	lsls	r3, r3, #4
    4ea6:	010a      	lsls	r2, r1, #4
    4ea8:	1852      	adds	r2, r2, r1
    4eaa:	0092      	lsls	r2, r2, #2
    4eac:	189b      	adds	r3, r3, r2
    4eae:	4a5b      	ldr	r2, [pc, #364]	; (501c <CAN0_Handler+0x574>)
    4eb0:	18d3      	adds	r3, r2, r3
    4eb2:	689b      	ldr	r3, [r3, #8]
    4eb4:	031b      	lsls	r3, r3, #12
    4eb6:	0f1b      	lsrs	r3, r3, #28
    4eb8:	2600      	movs	r6, #0
    4eba:	2b00      	cmp	r3, #0
    4ebc:	dd19      	ble.n	4ef2 <CAN0_Handler+0x44a>
					printf("  %d",rx_element_buff[rx_buffer_index].buffers[temp_Buff].data[i]);
    4ebe:	4f57      	ldr	r7, [pc, #348]	; (501c <CAN0_Handler+0x574>)
    4ec0:	4d5b      	ldr	r5, [pc, #364]	; (5030 <CAN0_Handler+0x588>)
    4ec2:	9a01      	ldr	r2, [sp, #4]
    4ec4:	4643      	mov	r3, r8
    4ec6:	011c      	lsls	r4, r3, #4
    4ec8:	0113      	lsls	r3, r2, #4
    4eca:	189b      	adds	r3, r3, r2
    4ecc:	009b      	lsls	r3, r3, #2
    4ece:	18e3      	adds	r3, r4, r3
    4ed0:	18fb      	adds	r3, r7, r3
    4ed2:	199b      	adds	r3, r3, r6
    4ed4:	7b19      	ldrb	r1, [r3, #12]
    4ed6:	4857      	ldr	r0, [pc, #348]	; (5034 <CAN0_Handler+0x58c>)
    4ed8:	47a8      	blx	r5
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4eda:	3601      	adds	r6, #1
    4edc:	9a01      	ldr	r2, [sp, #4]
    4ede:	0113      	lsls	r3, r2, #4
    4ee0:	189b      	adds	r3, r3, r2
    4ee2:	009b      	lsls	r3, r3, #2
    4ee4:	18e4      	adds	r4, r4, r3
    4ee6:	193c      	adds	r4, r7, r4
    4ee8:	68a3      	ldr	r3, [r4, #8]
    4eea:	031b      	lsls	r3, r3, #12
    4eec:	0f1b      	lsrs	r3, r3, #28
    4eee:	42b3      	cmp	r3, r6
    4ef0:	dce7      	bgt.n	4ec2 <CAN0_Handler+0x41a>
				printf("\r\n\r\n");
    4ef2:	4851      	ldr	r0, [pc, #324]	; (5038 <CAN0_Handler+0x590>)
    4ef4:	4b4d      	ldr	r3, [pc, #308]	; (502c <CAN0_Handler+0x584>)
    4ef6:	4798      	blx	r3
				g_normal_received_flags[rx_buffer_index]++;
    4ef8:	9b01      	ldr	r3, [sp, #4]
    4efa:	4950      	ldr	r1, [pc, #320]	; (503c <CAN0_Handler+0x594>)
    4efc:	009b      	lsls	r3, r3, #2
    4efe:	585a      	ldr	r2, [r3, r1]
    4f00:	3201      	adds	r2, #1
    4f02:	505a      	str	r2, [r3, r1]
				g_normal_received_mask |= (1<<rx_buffer_index);
    4f04:	9801      	ldr	r0, [sp, #4]
    4f06:	4a4e      	ldr	r2, [pc, #312]	; (5040 <CAN0_Handler+0x598>)
    4f08:	6811      	ldr	r1, [r2, #0]
    4f0a:	2301      	movs	r3, #1
    4f0c:	4083      	lsls	r3, r0
    4f0e:	430b      	orrs	r3, r1
    4f10:	6013      	str	r3, [r2, #0]
				break;
    4f12:	e5fb      	b.n	4b0c <CAN0_Handler+0x64>
		index -= 32;
    4f14:	3a20      	subs	r2, #32
		module_inst->hw->NDAT2.reg = (1 << index);
    4f16:	2301      	movs	r3, #1
    4f18:	4093      	lsls	r3, r2
    4f1a:	229c      	movs	r2, #156	; 0x9c
    4f1c:	5083      	str	r3, [r0, r2]
    4f1e:	e796      	b.n	4e4e <CAN0_Handler+0x3a6>
					printf("\n\r Standard message received in Rx buffer %d, section %d. The received data is: \r\n",rx_buffer_index,temp_Buff);
    4f20:	9901      	ldr	r1, [sp, #4]
    4f22:	4642      	mov	r2, r8
    4f24:	4847      	ldr	r0, [pc, #284]	; (5044 <CAN0_Handler+0x59c>)
    4f26:	4b42      	ldr	r3, [pc, #264]	; (5030 <CAN0_Handler+0x588>)
    4f28:	4798      	blx	r3
    4f2a:	e7b9      	b.n	4ea0 <CAN0_Handler+0x3f8>
				printf("\r\n\r\n");
    4f2c:	4842      	ldr	r0, [pc, #264]	; (5038 <CAN0_Handler+0x590>)
    4f2e:	4b3f      	ldr	r3, [pc, #252]	; (502c <CAN0_Handler+0x584>)
    4f30:	4798      	blx	r3
				if (rx_buffer_index == CAN_FILTER_REGULAR_REC) g_received++;
    4f32:	9b01      	ldr	r3, [sp, #4]
    4f34:	2b02      	cmp	r3, #2
    4f36:	d100      	bne.n	4f3a <CAN0_Handler+0x492>
    4f38:	e66c      	b.n	4c14 <CAN0_Handler+0x16c>
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4f3a:	2501      	movs	r5, #1
    4f3c:	e656      	b.n	4bec <CAN0_Handler+0x144>
				rx_buffer_index = i;
    4f3e:	9501      	str	r5, [sp, #4]
		module_inst->hw->NDAT1.reg = (1 << index);
    4f40:	2298      	movs	r2, #152	; 0x98
    4f42:	508b      	str	r3, [r1, r2]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    4f44:	9a01      	ldr	r2, [sp, #4]
    4f46:	0113      	lsls	r3, r2, #4
    4f48:	189b      	adds	r3, r3, r2
    4f4a:	009b      	lsls	r3, r3, #2
    4f4c:	464a      	mov	r2, r9
    4f4e:	5c9b      	ldrb	r3, [r3, r2]
    4f50:	4698      	mov	r8, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    4f52:	9b01      	ldr	r3, [sp, #4]
    4f54:	9a01      	ldr	r2, [sp, #4]
    4f56:	0119      	lsls	r1, r3, #4
    4f58:	18c9      	adds	r1, r1, r3
    4f5a:	0089      	lsls	r1, r1, #2
    4f5c:	3104      	adds	r1, #4
    4f5e:	4643      	mov	r3, r8
    4f60:	011c      	lsls	r4, r3, #4
    4f62:	1909      	adds	r1, r1, r4
    4f64:	4449      	add	r1, r9
    4f66:	482e      	ldr	r0, [pc, #184]	; (5020 <CAN0_Handler+0x578>)
    4f68:	47d8      	blx	fp
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    4f6a:	9a01      	ldr	r2, [sp, #4]
    4f6c:	0113      	lsls	r3, r2, #4
    4f6e:	189b      	adds	r3, r3, r2
    4f70:	009b      	lsls	r3, r3, #2
    4f72:	4642      	mov	r2, r8
    4f74:	1c51      	adds	r1, r2, #1
    4f76:	2203      	movs	r2, #3
    4f78:	400a      	ands	r2, r1
    4f7a:	4649      	mov	r1, r9
    4f7c:	545a      	strb	r2, [r3, r1]
				if (rx_element_buff[rx_buffer_index].buffers[temp_Buff].R0.bit.XTD) {
    4f7e:	9a01      	ldr	r2, [sp, #4]
    4f80:	0113      	lsls	r3, r2, #4
    4f82:	189b      	adds	r3, r3, r2
    4f84:	009b      	lsls	r3, r3, #2
    4f86:	18e4      	adds	r4, r4, r3
    4f88:	444c      	add	r4, r9
    4f8a:	6863      	ldr	r3, [r4, #4]
    4f8c:	005b      	lsls	r3, r3, #1
    4f8e:	d400      	bmi.n	4f92 <CAN0_Handler+0x4ea>
    4f90:	e68c      	b.n	4cac <CAN0_Handler+0x204>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
    4f92:	4825      	ldr	r0, [pc, #148]	; (5028 <CAN0_Handler+0x580>)
    4f94:	4b25      	ldr	r3, [pc, #148]	; (502c <CAN0_Handler+0x584>)
    4f96:	4798      	blx	r3
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4f98:	9901      	ldr	r1, [sp, #4]
    4f9a:	4643      	mov	r3, r8
    4f9c:	011b      	lsls	r3, r3, #4
    4f9e:	010a      	lsls	r2, r1, #4
    4fa0:	1852      	adds	r2, r2, r1
    4fa2:	0092      	lsls	r2, r2, #2
    4fa4:	189b      	adds	r3, r3, r2
    4fa6:	4a1d      	ldr	r2, [pc, #116]	; (501c <CAN0_Handler+0x574>)
    4fa8:	18d3      	adds	r3, r2, r3
    4faa:	689b      	ldr	r3, [r3, #8]
    4fac:	031b      	lsls	r3, r3, #12
    4fae:	0f1b      	lsrs	r3, r3, #28
    4fb0:	2500      	movs	r5, #0
    4fb2:	2b00      	cmp	r3, #0
    4fb4:	dd19      	ble.n	4fea <CAN0_Handler+0x542>
					printf("  %d",rx_element_buff[rx_buffer_index].buffers[temp_Buff].data[i]);
    4fb6:	4e19      	ldr	r6, [pc, #100]	; (501c <CAN0_Handler+0x574>)
    4fb8:	4f1d      	ldr	r7, [pc, #116]	; (5030 <CAN0_Handler+0x588>)
    4fba:	9a01      	ldr	r2, [sp, #4]
    4fbc:	4643      	mov	r3, r8
    4fbe:	011c      	lsls	r4, r3, #4
    4fc0:	0113      	lsls	r3, r2, #4
    4fc2:	189b      	adds	r3, r3, r2
    4fc4:	009b      	lsls	r3, r3, #2
    4fc6:	18e3      	adds	r3, r4, r3
    4fc8:	18f3      	adds	r3, r6, r3
    4fca:	195b      	adds	r3, r3, r5
    4fcc:	7b19      	ldrb	r1, [r3, #12]
    4fce:	4819      	ldr	r0, [pc, #100]	; (5034 <CAN0_Handler+0x58c>)
    4fd0:	47b8      	blx	r7
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4fd2:	3501      	adds	r5, #1
    4fd4:	9a01      	ldr	r2, [sp, #4]
    4fd6:	0113      	lsls	r3, r2, #4
    4fd8:	189b      	adds	r3, r3, r2
    4fda:	009b      	lsls	r3, r3, #2
    4fdc:	18e4      	adds	r4, r4, r3
    4fde:	1934      	adds	r4, r6, r4
    4fe0:	68a3      	ldr	r3, [r4, #8]
    4fe2:	031b      	lsls	r3, r3, #12
    4fe4:	0f1b      	lsrs	r3, r3, #28
    4fe6:	42ab      	cmp	r3, r5
    4fe8:	dce7      	bgt.n	4fba <CAN0_Handler+0x512>
				printf("\r\n\r\n");
    4fea:	4813      	ldr	r0, [pc, #76]	; (5038 <CAN0_Handler+0x590>)
    4fec:	4b0f      	ldr	r3, [pc, #60]	; (502c <CAN0_Handler+0x584>)
    4fee:	4798      	blx	r3
				g_hash_res[rx_buffer_index]++;
    4ff0:	9b01      	ldr	r3, [sp, #4]
    4ff2:	4915      	ldr	r1, [pc, #84]	; (5048 <CAN0_Handler+0x5a0>)
    4ff4:	009b      	lsls	r3, r3, #2
    4ff6:	585a      	ldr	r2, [r3, r1]
    4ff8:	3201      	adds	r2, #1
    4ffa:	505a      	str	r2, [r3, r1]
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4ffc:	3501      	adds	r5, #1
    4ffe:	2d0f      	cmp	r5, #15
    5000:	dd00      	ble.n	5004 <CAN0_Handler+0x55c>
    5002:	e583      	b.n	4b0c <CAN0_Handler+0x64>
	if (index < 32) {
    5004:	2d1f      	cmp	r5, #31
    5006:	d900      	bls.n	500a <CAN0_Handler+0x562>
    5008:	e641      	b.n	4c8e <CAN0_Handler+0x1e6>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    500a:	4b05      	ldr	r3, [pc, #20]	; (5020 <CAN0_Handler+0x578>)
    500c:	6819      	ldr	r1, [r3, #0]
    500e:	2398      	movs	r3, #152	; 0x98
    5010:	58c8      	ldr	r0, [r1, r3]
    5012:	3b97      	subs	r3, #151	; 0x97
    5014:	40ab      	lsls	r3, r5
			if (can_rx_get_buffer_status(&can_instance, i)) {
    5016:	4203      	tst	r3, r0
    5018:	d0f0      	beq.n	4ffc <CAN0_Handler+0x554>
    501a:	e790      	b.n	4f3e <CAN0_Handler+0x496>
    501c:	20000d40 	.word	0x20000d40
    5020:	20000cb0 	.word	0x20000cb0
    5024:	00000549 	.word	0x00000549
    5028:	0000a658 	.word	0x0000a658
    502c:	00006155 	.word	0x00006155
    5030:	00006061 	.word	0x00006061
    5034:	0000a6f0 	.word	0x0000a6f0
    5038:	0000a6f8 	.word	0x0000a6f8
    503c:	20000cf4 	.word	0x20000cf4
    5040:	20000d00 	.word	0x20000d00
    5044:	0000a69c 	.word	0x0000a69c
    5048:	20000ce8 	.word	0x20000ce8

0000504c <InitKeys>:
			"  7: Send extended message with ID: 0x10000096 and 8 byte data 128 to 135. \r\n"
			"  h: Display menu \r\n\r\n");
}
//! [user_menu]

bool InitKeys(bool hardcoded, uint8_t * secret_key, uint8_t *ServerPublicKey, uint8_t *ec) {
    504c:	b5f0      	push	{r4, r5, r6, r7, lr}
    504e:	46c6      	mov	lr, r8
    5050:	b500      	push	{lr}
    5052:	0006      	movs	r6, r0
    5054:	000d      	movs	r5, r1
    5056:	0014      	movs	r4, r2
	ECCRYPTO_STATUS Status;
	
	memset(secret_key+16,0,16);
    5058:	0008      	movs	r0, r1
    505a:	3010      	adds	r0, #16
    505c:	2210      	movs	r2, #16
    505e:	2100      	movs	r1, #0
    5060:	4b16      	ldr	r3, [pc, #88]	; (50bc <InitKeys+0x70>)
    5062:	4798      	blx	r3
	
	if(hardcoded){
    5064:	2e00      	cmp	r6, #0
    5066:	d012      	beq.n	508e <InitKeys+0x42>
		memset(secret_key,0xFF,16);
    5068:	2210      	movs	r2, #16
    506a:	21ff      	movs	r1, #255	; 0xff
    506c:	0028      	movs	r0, r5
    506e:	4b13      	ldr	r3, [pc, #76]	; (50bc <InitKeys+0x70>)
    5070:	4798      	blx	r3
		printf("No PUF available\r\n");
		while(1);
	}
	
	Status = ECCRYPTO_SUCCESS;
	Status = CompressedKeyGeneration(secret_key, ServerPublicKey);
    5072:	0021      	movs	r1, r4
    5074:	0028      	movs	r0, r5
    5076:	4b12      	ldr	r3, [pc, #72]	; (50c0 <InitKeys+0x74>)
    5078:	4798      	blx	r3
	if (Status != ECCRYPTO_SUCCESS) {
    507a:	2801      	cmp	r0, #1
    507c:	d00b      	beq.n	5096 <InitKeys+0x4a>
		printf("Failed public key generation!\r\n");
    507e:	4811      	ldr	r0, [pc, #68]	; (50c4 <InitKeys+0x78>)
    5080:	4b11      	ldr	r3, [pc, #68]	; (50c8 <InitKeys+0x7c>)
    5082:	4798      	blx	r3
		return false;
    5084:	2600      	movs	r6, #0
		}
		printf("\r\n");
	}
	
	return true;
}
    5086:	0030      	movs	r0, r6
    5088:	bc04      	pop	{r2}
    508a:	4690      	mov	r8, r2
    508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("No PUF available\r\n");
    508e:	480f      	ldr	r0, [pc, #60]	; (50cc <InitKeys+0x80>)
    5090:	4b0d      	ldr	r3, [pc, #52]	; (50c8 <InitKeys+0x7c>)
    5092:	4798      	blx	r3
    5094:	e7fe      	b.n	5094 <InitKeys+0x48>
		printf("DEBUG: ServerPublicKey: 0x");
    5096:	480e      	ldr	r0, [pc, #56]	; (50d0 <InitKeys+0x84>)
    5098:	4b0e      	ldr	r3, [pc, #56]	; (50d4 <InitKeys+0x88>)
    509a:	4798      	blx	r3
    509c:	0025      	movs	r5, r4
    509e:	351f      	adds	r5, #31
    50a0:	3c01      	subs	r4, #1
			printf("%02x",ServerPublicKey[i]);
    50a2:	4b0d      	ldr	r3, [pc, #52]	; (50d8 <InitKeys+0x8c>)
    50a4:	4698      	mov	r8, r3
    50a6:	4f0b      	ldr	r7, [pc, #44]	; (50d4 <InitKeys+0x88>)
    50a8:	7829      	ldrb	r1, [r5, #0]
    50aa:	4640      	mov	r0, r8
    50ac:	47b8      	blx	r7
    50ae:	3d01      	subs	r5, #1
		for (int i = 31; i >=0 ; i--) {
    50b0:	42a5      	cmp	r5, r4
    50b2:	d1f9      	bne.n	50a8 <InitKeys+0x5c>
		printf("\r\n");
    50b4:	4809      	ldr	r0, [pc, #36]	; (50dc <InitKeys+0x90>)
    50b6:	4b04      	ldr	r3, [pc, #16]	; (50c8 <InitKeys+0x7c>)
    50b8:	4798      	blx	r3
	return true;
    50ba:	e7e4      	b.n	5086 <InitKeys+0x3a>
    50bc:	00005eff 	.word	0x00005eff
    50c0:	00004339 	.word	0x00004339
    50c4:	0000a710 	.word	0x0000a710
    50c8:	00006155 	.word	0x00006155
    50cc:	0000a6fc 	.word	0x0000a6fc
    50d0:	0000a730 	.word	0x0000a730
    50d4:	00006061 	.word	0x00006061
    50d8:	0000a60c 	.word	0x0000a60c
    50dc:	0000ab44 	.word	0x0000ab44

000050e0 <InitSharedSecrets>:

bool InitSharedSecrets(uint8_t *private_key, uint8_t (*StoredPublicKeys)[32], uint8_t (*NodeSharedSecrets)[16]) {
    50e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    50e2:	46de      	mov	lr, fp
    50e4:	4657      	mov	r7, sl
    50e6:	464e      	mov	r6, r9
    50e8:	4645      	mov	r5, r8
    50ea:	b5e0      	push	{r5, r6, r7, lr}
    50ec:	b08b      	sub	sp, #44	; 0x2c
    50ee:	9000      	str	r0, [sp, #0]
    50f0:	2310      	movs	r3, #16
    50f2:	469a      	mov	sl, r3
    50f4:	4492      	add	sl, r2
    50f6:	3310      	adds	r3, #16
    50f8:	4698      	mov	r8, r3
    50fa:	4488      	add	r8, r1
	ECCRYPTO_STATUS Status = ECCRYPTO_SUCCESS;
	uint8_t shared_secret[32];

	for(int i = 1; i <= NODE_TOTAL; i++) {
    50fc:	3b1f      	subs	r3, #31
    50fe:	469b      	mov	fp, r3
		// Generate Shared Secret
		if(DEBUGCODE) {
			printf("Node %i public key is 0x",i);
    5100:	4b33      	ldr	r3, [pc, #204]	; (51d0 <InitSharedSecrets+0xf0>)
    5102:	4699      	mov	r9, r3
    5104:	4659      	mov	r1, fp
    5106:	4833      	ldr	r0, [pc, #204]	; (51d4 <InitSharedSecrets+0xf4>)
    5108:	47c8      	blx	r9
			for(int j = 31; j >= 0; j--) {
				printf("%02x ",StoredPublicKeys[i][j]);
    510a:	4643      	mov	r3, r8
    510c:	9301      	str	r3, [sp, #4]
    510e:	4644      	mov	r4, r8
    5110:	341f      	adds	r4, #31
    5112:	1e5e      	subs	r6, r3, #1
    5114:	4d2e      	ldr	r5, [pc, #184]	; (51d0 <InitSharedSecrets+0xf0>)
    5116:	7821      	ldrb	r1, [r4, #0]
    5118:	482f      	ldr	r0, [pc, #188]	; (51d8 <InitSharedSecrets+0xf8>)
    511a:	47a8      	blx	r5
    511c:	3c01      	subs	r4, #1
			for(int j = 31; j >= 0; j--) {
    511e:	42b4      	cmp	r4, r6
    5120:	d1f9      	bne.n	5116 <InitSharedSecrets+0x36>
			}
			printf("\r\n");
    5122:	482e      	ldr	r0, [pc, #184]	; (51dc <InitSharedSecrets+0xfc>)
    5124:	4b2e      	ldr	r3, [pc, #184]	; (51e0 <InitSharedSecrets+0x100>)
    5126:	4798      	blx	r3
			
			printf("Private key is 0x");
    5128:	482e      	ldr	r0, [pc, #184]	; (51e4 <InitSharedSecrets+0x104>)
    512a:	4b29      	ldr	r3, [pc, #164]	; (51d0 <InitSharedSecrets+0xf0>)
    512c:	4798      	blx	r3
    512e:	9b00      	ldr	r3, [sp, #0]
    5130:	001d      	movs	r5, r3
    5132:	351f      	adds	r5, #31
    5134:	1e5f      	subs	r7, r3, #1
			for(int i = 31; i>= 0; i--) {
				printf("%02x",private_key[i]);
    5136:	4c2c      	ldr	r4, [pc, #176]	; (51e8 <InitSharedSecrets+0x108>)
    5138:	4e25      	ldr	r6, [pc, #148]	; (51d0 <InitSharedSecrets+0xf0>)
    513a:	7829      	ldrb	r1, [r5, #0]
    513c:	0020      	movs	r0, r4
    513e:	47b0      	blx	r6
    5140:	3d01      	subs	r5, #1
			for(int i = 31; i>= 0; i--) {
    5142:	42bd      	cmp	r5, r7
    5144:	d1f9      	bne.n	513a <InitSharedSecrets+0x5a>
			}
			printf("\r\n");
    5146:	4825      	ldr	r0, [pc, #148]	; (51dc <InitSharedSecrets+0xfc>)
    5148:	4b25      	ldr	r3, [pc, #148]	; (51e0 <InitSharedSecrets+0x100>)
    514a:	4798      	blx	r3
		}
		
		Status = CompressedSecretAgreement(private_key,StoredPublicKeys[i],shared_secret);
    514c:	aa02      	add	r2, sp, #8
    514e:	9901      	ldr	r1, [sp, #4]
    5150:	9800      	ldr	r0, [sp, #0]
    5152:	4b26      	ldr	r3, [pc, #152]	; (51ec <InitSharedSecrets+0x10c>)
    5154:	4798      	blx	r3
    5156:	9001      	str	r0, [sp, #4]
		
		if(DEBUGCODE) {
			printf("Shared Secret is 0x");
    5158:	4825      	ldr	r0, [pc, #148]	; (51f0 <InitSharedSecrets+0x110>)
    515a:	4b1d      	ldr	r3, [pc, #116]	; (51d0 <InitSharedSecrets+0xf0>)
    515c:	4798      	blx	r3
    515e:	241f      	movs	r4, #31
    5160:	ab02      	add	r3, sp, #8
    5162:	469c      	mov	ip, r3
    5164:	4464      	add	r4, ip
    5166:	1e5f      	subs	r7, r3, #1
			for(int i = 31; i>= 0; i--) {
				printf("%02x",shared_secret[i]);
    5168:	4e1f      	ldr	r6, [pc, #124]	; (51e8 <InitSharedSecrets+0x108>)
    516a:	4d19      	ldr	r5, [pc, #100]	; (51d0 <InitSharedSecrets+0xf0>)
    516c:	7821      	ldrb	r1, [r4, #0]
    516e:	0030      	movs	r0, r6
    5170:	47a8      	blx	r5
    5172:	3c01      	subs	r4, #1
			for(int i = 31; i>= 0; i--) {
    5174:	42a7      	cmp	r7, r4
    5176:	d1f9      	bne.n	516c <InitSharedSecrets+0x8c>
			}
			printf("\r\n");
    5178:	4818      	ldr	r0, [pc, #96]	; (51dc <InitSharedSecrets+0xfc>)
    517a:	4b19      	ldr	r3, [pc, #100]	; (51e0 <InitSharedSecrets+0x100>)
    517c:	4798      	blx	r3
		}
		
		if (Status != ECCRYPTO_SUCCESS) {
    517e:	9b01      	ldr	r3, [sp, #4]
    5180:	2b01      	cmp	r3, #1
    5182:	d11c      	bne.n	51be <InitSharedSecrets+0xde>
			printf("Failed node %i Shared Secret Generation\r\n",i);
			printf("Fail code: %i\r\n",Status);
			return false;
		}
		else {
			printf("Node %i secret generation success!\r\n",i);
    5184:	4659      	mov	r1, fp
    5186:	481b      	ldr	r0, [pc, #108]	; (51f4 <InitSharedSecrets+0x114>)
    5188:	4b11      	ldr	r3, [pc, #68]	; (51d0 <InitSharedSecrets+0xf0>)
    518a:	4798      	blx	r3
		}
		
		photon128(shared_secret,32,NodeSharedSecrets[i]);
    518c:	4652      	mov	r2, sl
    518e:	2120      	movs	r1, #32
    5190:	a802      	add	r0, sp, #8
    5192:	4b19      	ldr	r3, [pc, #100]	; (51f8 <InitSharedSecrets+0x118>)
    5194:	4798      	blx	r3
	for(int i = 1; i <= NODE_TOTAL; i++) {
    5196:	2301      	movs	r3, #1
    5198:	469c      	mov	ip, r3
    519a:	44e3      	add	fp, ip
    519c:	330f      	adds	r3, #15
    519e:	469c      	mov	ip, r3
    51a0:	44e2      	add	sl, ip
    51a2:	3310      	adds	r3, #16
    51a4:	469c      	mov	ip, r3
    51a6:	44e0      	add	r8, ip
    51a8:	465b      	mov	r3, fp
    51aa:	2b03      	cmp	r3, #3
    51ac:	d1aa      	bne.n	5104 <InitSharedSecrets+0x24>
	}
	return true;
    51ae:	2001      	movs	r0, #1
}
    51b0:	b00b      	add	sp, #44	; 0x2c
    51b2:	bc3c      	pop	{r2, r3, r4, r5}
    51b4:	4690      	mov	r8, r2
    51b6:	4699      	mov	r9, r3
    51b8:	46a2      	mov	sl, r4
    51ba:	46ab      	mov	fp, r5
    51bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Failed node %i Shared Secret Generation\r\n",i);
    51be:	4659      	mov	r1, fp
    51c0:	480e      	ldr	r0, [pc, #56]	; (51fc <InitSharedSecrets+0x11c>)
    51c2:	4c03      	ldr	r4, [pc, #12]	; (51d0 <InitSharedSecrets+0xf0>)
    51c4:	47a0      	blx	r4
			printf("Fail code: %i\r\n",Status);
    51c6:	9901      	ldr	r1, [sp, #4]
    51c8:	480d      	ldr	r0, [pc, #52]	; (5200 <InitSharedSecrets+0x120>)
    51ca:	47a0      	blx	r4
			return false;
    51cc:	2000      	movs	r0, #0
    51ce:	e7ef      	b.n	51b0 <InitSharedSecrets+0xd0>
    51d0:	00006061 	.word	0x00006061
    51d4:	0000a74c 	.word	0x0000a74c
    51d8:	0000a768 	.word	0x0000a768
    51dc:	0000ab44 	.word	0x0000ab44
    51e0:	00006155 	.word	0x00006155
    51e4:	0000a770 	.word	0x0000a770
    51e8:	0000a60c 	.word	0x0000a60c
    51ec:	00004365 	.word	0x00004365
    51f0:	0000a784 	.word	0x0000a784
    51f4:	0000a7d4 	.word	0x0000a7d4
    51f8:	00004649 	.word	0x00004649
    51fc:	0000a798 	.word	0x0000a798
    5200:	0000a7c4 	.word	0x0000a7c4

00005204 <main>:
//! [setup]


int main(void)
{
    5204:	b5f0      	push	{r4, r5, r6, r7, lr}
    5206:	46de      	mov	lr, fp
    5208:	4657      	mov	r7, sl
    520a:	464e      	mov	r6, r9
    520c:	4645      	mov	r5, r8
    520e:	b5e0      	push	{r5, r6, r7, lr}
    5210:	b0c9      	sub	sp, #292	; 0x124
	//uint8_t key;

//! [setup_init]
	system_init();
    5212:	4bda      	ldr	r3, [pc, #872]	; (557c <main+0x378>)
    5214:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5216:	aa0c      	add	r2, sp, #48	; 0x30
    5218:	2380      	movs	r3, #128	; 0x80
    521a:	05db      	lsls	r3, r3, #23
    521c:	930c      	str	r3, [sp, #48]	; 0x30
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    521e:	2300      	movs	r3, #0
    5220:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    5222:	21ff      	movs	r1, #255	; 0xff
    5224:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    5226:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5228:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    522a:	2401      	movs	r4, #1
    522c:	39d3      	subs	r1, #211	; 0xd3
    522e:	5454      	strb	r4, [r2, r1]
	config->transmitter_enable = true;
    5230:	3101      	adds	r1, #1
    5232:	5454      	strb	r4, [r2, r1]
	config->clock_polarity_inverted = false;
    5234:	3101      	adds	r1, #1
    5236:	5453      	strb	r3, [r2, r1]
	config->use_external_clock = false;
    5238:	3101      	adds	r1, #1
    523a:	5453      	strb	r3, [r2, r1]
	config->ext_clock_freq   = 0;
    523c:	6313      	str	r3, [r2, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    523e:	3105      	adds	r1, #5
    5240:	5453      	strb	r3, [r2, r1]
	config->generator_source = GCLK_GENERATOR_0;
    5242:	3101      	adds	r1, #1
    5244:	5453      	strb	r3, [r2, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5246:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5248:	2100      	movs	r1, #0
    524a:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    524c:	76d1      	strb	r1, [r2, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    524e:	61d3      	str	r3, [r2, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    5250:	8413      	strh	r3, [r2, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    5252:	8453      	strh	r3, [r2, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    5254:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    5256:	3324      	adds	r3, #36	; 0x24
    5258:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    525a:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    525c:	3b11      	subs	r3, #17
    525e:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    5260:	3313      	adds	r3, #19
    5262:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    5264:	3b01      	subs	r3, #1
    5266:	54d1      	strb	r1, [r2, r3]
	config_cdc.baudrate	 = 38400;
    5268:	2396      	movs	r3, #150	; 0x96
    526a:	021b      	lsls	r3, r3, #8
    526c:	6293      	str	r3, [r2, #40]	; 0x28
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    526e:	23c4      	movs	r3, #196	; 0xc4
    5270:	039b      	lsls	r3, r3, #14
    5272:	60d3      	str	r3, [r2, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5274:	2301      	movs	r3, #1
    5276:	425b      	negs	r3, r3
    5278:	6393      	str	r3, [r2, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    527a:	63d3      	str	r3, [r2, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    527c:	4bc0      	ldr	r3, [pc, #768]	; (5580 <main+0x37c>)
    527e:	6413      	str	r3, [r2, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5280:	4bc0      	ldr	r3, [pc, #768]	; (5584 <main+0x380>)
    5282:	6453      	str	r3, [r2, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    5284:	4dc0      	ldr	r5, [pc, #768]	; (5588 <main+0x384>)
    5286:	4bc1      	ldr	r3, [pc, #772]	; (558c <main+0x388>)
    5288:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    528a:	49c1      	ldr	r1, [pc, #772]	; (5590 <main+0x38c>)
    528c:	4bc1      	ldr	r3, [pc, #772]	; (5594 <main+0x390>)
    528e:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5290:	49c1      	ldr	r1, [pc, #772]	; (5598 <main+0x394>)
    5292:	4bc2      	ldr	r3, [pc, #776]	; (559c <main+0x398>)
    5294:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    5296:	49c2      	ldr	r1, [pc, #776]	; (55a0 <main+0x39c>)
    5298:	0028      	movs	r0, r5
    529a:	4bc2      	ldr	r3, [pc, #776]	; (55a4 <main+0x3a0>)
    529c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    529e:	4fc2      	ldr	r7, [pc, #776]	; (55a8 <main+0x3a4>)
    52a0:	683b      	ldr	r3, [r7, #0]
    52a2:	6898      	ldr	r0, [r3, #8]
    52a4:	2100      	movs	r1, #0
    52a6:	4ec1      	ldr	r6, [pc, #772]	; (55ac <main+0x3a8>)
    52a8:	47b0      	blx	r6
	setbuf(stdin, NULL);
    52aa:	683b      	ldr	r3, [r7, #0]
    52ac:	6858      	ldr	r0, [r3, #4]
    52ae:	2100      	movs	r1, #0
    52b0:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    52b2:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    52b4:	0030      	movs	r0, r6
    52b6:	4bbe      	ldr	r3, [pc, #760]	; (55b0 <main+0x3ac>)
    52b8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    52ba:	231f      	movs	r3, #31
    52bc:	4018      	ands	r0, r3
    52be:	4084      	lsls	r4, r0
    52c0:	4bbc      	ldr	r3, [pc, #752]	; (55b4 <main+0x3b0>)
    52c2:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    52c4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    52c6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    52c8:	2b00      	cmp	r3, #0
    52ca:	d1fc      	bne.n	52c6 <main+0xc2>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    52cc:	6833      	ldr	r3, [r6, #0]
    52ce:	2702      	movs	r7, #2
    52d0:	433b      	orrs	r3, r7
    52d2:	6033      	str	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    52d4:	ae0b      	add	r6, sp, #44	; 0x2c
    52d6:	2400      	movs	r4, #0
    52d8:	7074      	strb	r4, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    52da:	2501      	movs	r5, #1
    52dc:	70b5      	strb	r5, [r6, #2]
	config->powersave    = false;
    52de:	70f4      	strb	r4, [r6, #3]
	pin_config.mux_position = CAN_TX_MUX_SETTING;
    52e0:	2306      	movs	r3, #6
    52e2:	4699      	mov	r9, r3
    52e4:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
    52e6:	0031      	movs	r1, r6
    52e8:	2018      	movs	r0, #24
    52ea:	4bb3      	ldr	r3, [pc, #716]	; (55b8 <main+0x3b4>)
    52ec:	4698      	mov	r8, r3
    52ee:	4798      	blx	r3
	pin_config.mux_position = CAN_RX_MUX_SETTING;
    52f0:	464b      	mov	r3, r9
    52f2:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
    52f4:	0031      	movs	r1, r6
    52f6:	2019      	movs	r0, #25
    52f8:	47c0      	blx	r8
	config->clock_source = GCLK_GENERATOR_8;
    52fa:	aa0c      	add	r2, sp, #48	; 0x30
    52fc:	2308      	movs	r3, #8
    52fe:	7013      	strb	r3, [r2, #0]
	config->run_in_standby = false;
    5300:	7054      	strb	r4, [r2, #1]
	config->watchdog_configuration = 0x00;
    5302:	7094      	strb	r4, [r2, #2]
	config->transmit_pause = true;
    5304:	70d5      	strb	r5, [r2, #3]
	config->edge_filtering = true;
    5306:	7115      	strb	r5, [r2, #4]
	config->protocol_exception_handling = true;
    5308:	7155      	strb	r5, [r2, #5]
	config->automatic_retransmission = true;
    530a:	7195      	strb	r5, [r2, #6]
	config->clock_stop_request = false;
    530c:	71d4      	strb	r4, [r2, #7]
	config->clock_stop_acknowledge = false;
    530e:	7214      	strb	r4, [r2, #8]
	config->timestamp_prescaler = 0;
    5310:	7254      	strb	r4, [r2, #9]
	config->timeout_period = 0xFFFF;
    5312:	3b09      	subs	r3, #9
    5314:	8153      	strh	r3, [r2, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
    5316:	7314      	strb	r4, [r2, #12]
	config->timeout_enable = false;
    5318:	7354      	strb	r4, [r2, #13]
	config->tdc_enable = false;
    531a:	7394      	strb	r4, [r2, #14]
	config->delay_compensation_offset = 0;
    531c:	73d4      	strb	r4, [r2, #15]
	config->delay_compensation_filter_window_length = 0;
    531e:	7414      	strb	r4, [r2, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
    5320:	7457      	strb	r7, [r2, #17]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
    5322:	7497      	strb	r7, [r2, #18]
	config->remote_frames_standard_reject = true;
    5324:	74d5      	strb	r5, [r2, #19]
	config->remote_frames_extended_reject = true;
    5326:	7515      	strb	r5, [r2, #20]
	config->extended_id_mask = 0x1FFFFFFF;
    5328:	4ba4      	ldr	r3, [pc, #656]	; (55bc <main+0x3b8>)
    532a:	6193      	str	r3, [r2, #24]
	config->rx_fifo_0_overwrite = true;
    532c:	7715      	strb	r5, [r2, #28]
	config->rx_fifo_0_watermark = 0;
    532e:	7754      	strb	r4, [r2, #29]
	config->rx_fifo_1_overwrite = true;
    5330:	7795      	strb	r5, [r2, #30]
	config->rx_fifo_1_watermark = 0;
    5332:	77d4      	strb	r4, [r2, #31]
	config->tx_queue_mode = false;
    5334:	2320      	movs	r3, #32
    5336:	54d4      	strb	r4, [r2, r3]
	config->tx_event_fifo_watermark = 0;
    5338:	3301      	adds	r3, #1
    533a:	54d4      	strb	r4, [r2, r3]
	can_init(&can_instance, CAN_MODULE, &config_can);
    533c:	4ca0      	ldr	r4, [pc, #640]	; (55c0 <main+0x3bc>)
    533e:	49a1      	ldr	r1, [pc, #644]	; (55c4 <main+0x3c0>)
    5340:	0020      	movs	r0, r4
    5342:	4ba1      	ldr	r3, [pc, #644]	; (55c8 <main+0x3c4>)
    5344:	4798      	blx	r3
	can_start(&can_instance);
    5346:	0020      	movs	r0, r4
    5348:	4ba0      	ldr	r3, [pc, #640]	; (55cc <main+0x3c8>)
    534a:	4798      	blx	r3
    534c:	2280      	movs	r2, #128	; 0x80
    534e:	0212      	lsls	r2, r2, #8
    5350:	4b98      	ldr	r3, [pc, #608]	; (55b4 <main+0x3b0>)
    5352:	601a      	str	r2, [r3, #0]
	module_inst->hw->IE.reg |= source;
    5354:	6822      	ldr	r2, [r4, #0]
    5356:	6d51      	ldr	r1, [r2, #84]	; 0x54
    5358:	23c0      	movs	r3, #192	; 0xc0
    535a:	055b      	lsls	r3, r3, #21
    535c:	430b      	orrs	r3, r1
    535e:	6553      	str	r3, [r2, #84]	; 0x54
	printf("Menu :\r\n"
    5360:	489b      	ldr	r0, [pc, #620]	; (55d0 <main+0x3cc>)
    5362:	4d9c      	ldr	r5, [pc, #624]	; (55d4 <main+0x3d0>)
    5364:	47a8      	blx	r5
	//struct can_standard_message_filter_element sd_filter;
	struct can_standard_message_filter_element res_filter[NODE_TOTAL+1];
	struct can_tx_element tx_element;
	struct can_tx_element send_filter[NODE_TOTAL+1];
	
	memset(rx_element_buff,0,CONF_CAN0_RX_BUFFER_NUM*sizeof(multiBuffer));
    5366:	2288      	movs	r2, #136	; 0x88
    5368:	00d2      	lsls	r2, r2, #3
    536a:	2100      	movs	r1, #0
    536c:	489a      	ldr	r0, [pc, #616]	; (55d8 <main+0x3d4>)
    536e:	4b9b      	ldr	r3, [pc, #620]	; (55dc <main+0x3d8>)
    5370:	4798      	blx	r3
	printf("\r\nPress any key to enter a random key seed: ");
    5372:	489b      	ldr	r0, [pc, #620]	; (55e0 <main+0x3dc>)
    5374:	4b9b      	ldr	r3, [pc, #620]	; (55e4 <main+0x3e0>)
    5376:	4798      	blx	r3
	scanf("%c", &seed);
    5378:	21ff      	movs	r1, #255	; 0xff
    537a:	ab08      	add	r3, sp, #32
    537c:	469c      	mov	ip, r3
    537e:	4461      	add	r1, ip
    5380:	4899      	ldr	r0, [pc, #612]	; (55e8 <main+0x3e4>)
    5382:	4b9a      	ldr	r3, [pc, #616]	; (55ec <main+0x3e8>)
    5384:	4798      	blx	r3
	printf("\r\n");
    5386:	489a      	ldr	r0, [pc, #616]	; (55f0 <main+0x3ec>)
    5388:	47a8      	blx	r5

	hardcoded = EnrollNodes(NODE_TOTAL,StoredPublicKeys,StoredResponseHashes,ec,&can_instance);
    538a:	9400      	str	r4, [sp, #0]
    538c:	ab3b      	add	r3, sp, #236	; 0xec
    538e:	4a99      	ldr	r2, [pc, #612]	; (55f4 <main+0x3f0>)
    5390:	4999      	ldr	r1, [pc, #612]	; (55f8 <main+0x3f4>)
    5392:	2002      	movs	r0, #2
    5394:	4c99      	ldr	r4, [pc, #612]	; (55fc <main+0x3f8>)
    5396:	47a0      	blx	r4
    5398:	9006      	str	r0, [sp, #24]
	printf("Completed enrollment phase!\r\n");
    539a:	4899      	ldr	r0, [pc, #612]	; (5600 <main+0x3fc>)
    539c:	47a8      	blx	r5

	while(1) {
		// Need to change the handler stage
		STAGE = RECEIVE;
    539e:	2301      	movs	r3, #1
    53a0:	469b      	mov	fp, r3
    53a2:	466a      	mov	r2, sp
    53a4:	77d3      	strb	r3, [r2, #31]
		
		// Encrypt and get ready to send to each valid node
		for(int i = 1; i <=NODE_TOTAL; i++) {
			if(g_valid_nodes_mask & (1<<i)) {
				g_session_res[i] = 0;
				memmove(EncryptedSessionKeys[i],session_key,16);
    53a6:	4b97      	ldr	r3, [pc, #604]	; (5604 <main+0x400>)
    53a8:	3310      	adds	r3, #16
    53aa:	9308      	str	r3, [sp, #32]
    53ac:	4b95      	ldr	r3, [pc, #596]	; (5604 <main+0x400>)
    53ae:	3320      	adds	r3, #32
    53b0:	9309      	str	r3, [sp, #36]	; 0x24
    53b2:	e2ca      	b.n	594a <main+0x746>
			printf("Failed server's authentication key generation!\r\n");
    53b4:	4894      	ldr	r0, [pc, #592]	; (5608 <main+0x404>)
    53b6:	4b87      	ldr	r3, [pc, #540]	; (55d4 <main+0x3d0>)
    53b8:	4798      	blx	r3
	}
*/
//! [main_loop]

//! [main_setup]
}
    53ba:	2001      	movs	r0, #1
    53bc:	b049      	add	sp, #292	; 0x124
    53be:	bc3c      	pop	{r2, r3, r4, r5}
    53c0:	4690      	mov	r8, r2
    53c2:	4699      	mov	r9, r3
    53c4:	46a2      	mov	sl, r4
    53c6:	46ab      	mov	fp, r5
    53c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Failed server's authentication shared secret generation!\r\n");
    53ca:	4890      	ldr	r0, [pc, #576]	; (560c <main+0x408>)
    53cc:	4b81      	ldr	r3, [pc, #516]	; (55d4 <main+0x3d0>)
    53ce:	4798      	blx	r3
			return 1;
    53d0:	e7f3      	b.n	53ba <main+0x1b6>
    53d2:	2100      	movs	r1, #0
    53d4:	e330      	b.n	5a38 <main+0x834>
    53d6:	2100      	movs	r1, #0
    53d8:	e34d      	b.n	5a76 <main+0x872>
			if (j==16) {
    53da:	2b10      	cmp	r3, #16
    53dc:	d042      	beq.n	5464 <main+0x260>
				printf("Node %i not valid!\r\n",i);
    53de:	4649      	mov	r1, r9
    53e0:	488b      	ldr	r0, [pc, #556]	; (5610 <main+0x40c>)
    53e2:	4b80      	ldr	r3, [pc, #512]	; (55e4 <main+0x3e0>)
    53e4:	4798      	blx	r3
		for (int i = 1; i <= NODE_TOTAL; i++) {
    53e6:	2301      	movs	r3, #1
    53e8:	469c      	mov	ip, r3
    53ea:	44e1      	add	r9, ip
    53ec:	9b03      	ldr	r3, [sp, #12]
    53ee:	3310      	adds	r3, #16
    53f0:	9303      	str	r3, [sp, #12]
    53f2:	3610      	adds	r6, #16
    53f4:	464b      	mov	r3, r9
    53f6:	2b03      	cmp	r3, #3
    53f8:	d040      	beq.n	547c <main+0x278>
    53fa:	464b      	mov	r3, r9
    53fc:	011c      	lsls	r4, r3, #4
    53fe:	4b85      	ldr	r3, [pc, #532]	; (5614 <main+0x410>)
    5400:	469c      	mov	ip, r3
    5402:	4464      	add	r4, ip
			present80Decrypt(NodeSharedSecrets[i],ReceivedResponseHashes[i]);
    5404:	9f03      	ldr	r7, [sp, #12]
    5406:	003d      	movs	r5, r7
    5408:	0039      	movs	r1, r7
    540a:	0020      	movs	r0, r4
    540c:	4b82      	ldr	r3, [pc, #520]	; (5618 <main+0x414>)
    540e:	4798      	blx	r3
			present80Decrypt(NodeSharedSecrets[i],&ReceivedResponseHashes[i][8]);
    5410:	0039      	movs	r1, r7
    5412:	3108      	adds	r1, #8
    5414:	0020      	movs	r0, r4
    5416:	4b80      	ldr	r3, [pc, #512]	; (5618 <main+0x414>)
    5418:	4798      	blx	r3
			printf("\r\nReceived = 0x");
    541a:	4880      	ldr	r0, [pc, #512]	; (561c <main+0x418>)
    541c:	4b71      	ldr	r3, [pc, #452]	; (55e4 <main+0x3e0>)
    541e:	4798      	blx	r3
			for(int j = 15; j>=0; j--) {
    5420:	270f      	movs	r7, #15
				printf("%02x",ReceivedResponseHashes[i][j]);
    5422:	4c70      	ldr	r4, [pc, #448]	; (55e4 <main+0x3e0>)
    5424:	5de9      	ldrb	r1, [r5, r7]
    5426:	487e      	ldr	r0, [pc, #504]	; (5620 <main+0x41c>)
    5428:	47a0      	blx	r4
			for(int j = 15; j>=0; j--) {
    542a:	3f01      	subs	r7, #1
    542c:	d2fa      	bcs.n	5424 <main+0x220>
			printf("\r\nStored = 0x");
    542e:	487d      	ldr	r0, [pc, #500]	; (5624 <main+0x420>)
    5430:	4b6c      	ldr	r3, [pc, #432]	; (55e4 <main+0x3e0>)
    5432:	4798      	blx	r3
			for(int j = 15; j>=0; j--) {
    5434:	240f      	movs	r4, #15
    5436:	0037      	movs	r7, r6
				printf("%02x",StoredResponseHashes[i][j]);
    5438:	4b6a      	ldr	r3, [pc, #424]	; (55e4 <main+0x3e0>)
    543a:	4698      	mov	r8, r3
    543c:	5d31      	ldrb	r1, [r6, r4]
    543e:	4878      	ldr	r0, [pc, #480]	; (5620 <main+0x41c>)
    5440:	47c0      	blx	r8
			for(int j = 15; j>=0; j--) {
    5442:	3c01      	subs	r4, #1
    5444:	d2fa      	bcs.n	543c <main+0x238>
			printf("\r\n");
    5446:	486a      	ldr	r0, [pc, #424]	; (55f0 <main+0x3ec>)
    5448:	4b62      	ldr	r3, [pc, #392]	; (55d4 <main+0x3d0>)
    544a:	4798      	blx	r3
				if(ReceivedResponseHashes[i][j] != StoredResponseHashes[i][j]){
    544c:	782a      	ldrb	r2, [r5, #0]
    544e:	783b      	ldrb	r3, [r7, #0]
    5450:	429a      	cmp	r2, r3
    5452:	d1c4      	bne.n	53de <main+0x1da>
    5454:	2301      	movs	r3, #1
    5456:	5ce9      	ldrb	r1, [r5, r3]
    5458:	5cfa      	ldrb	r2, [r7, r3]
    545a:	4291      	cmp	r1, r2
    545c:	d1bd      	bne.n	53da <main+0x1d6>
			for(j=0;j<16;j++){
    545e:	3301      	adds	r3, #1
    5460:	2b10      	cmp	r3, #16
    5462:	d1f8      	bne.n	5456 <main+0x252>
				g_valid_nodes_mask |= (1 << i);
    5464:	4a70      	ldr	r2, [pc, #448]	; (5628 <main+0x424>)
    5466:	6811      	ldr	r1, [r2, #0]
    5468:	465b      	mov	r3, fp
    546a:	4648      	mov	r0, r9
    546c:	4083      	lsls	r3, r0
    546e:	430b      	orrs	r3, r1
    5470:	6013      	str	r3, [r2, #0]
				printf("Node %i is valid!\r\n",i);
    5472:	4649      	mov	r1, r9
    5474:	486d      	ldr	r0, [pc, #436]	; (562c <main+0x428>)
    5476:	4b5b      	ldr	r3, [pc, #364]	; (55e4 <main+0x3e0>)
    5478:	4798      	blx	r3
    547a:	e7b4      	b.n	53e6 <main+0x1e2>
		STAGE = SEND;
    547c:	2202      	movs	r2, #2
    547e:	4b6c      	ldr	r3, [pc, #432]	; (5630 <main+0x42c>)
    5480:	701a      	strb	r2, [r3, #0]
		photon128((uint8_t *)&seed,1,session_key);
    5482:	aa31      	add	r2, sp, #196	; 0xc4
    5484:	4659      	mov	r1, fp
    5486:	20ff      	movs	r0, #255	; 0xff
    5488:	ab08      	add	r3, sp, #32
    548a:	469c      	mov	ip, r3
    548c:	4460      	add	r0, ip
    548e:	4b69      	ldr	r3, [pc, #420]	; (5634 <main+0x430>)
    5490:	4798      	blx	r3
		memset(&session_key[10],0,6);
    5492:	2206      	movs	r2, #6
    5494:	2100      	movs	r1, #0
    5496:	20ae      	movs	r0, #174	; 0xae
    5498:	ab08      	add	r3, sp, #32
    549a:	469c      	mov	ip, r3
    549c:	4460      	add	r0, ip
    549e:	4b4f      	ldr	r3, [pc, #316]	; (55dc <main+0x3d8>)
    54a0:	4798      	blx	r3
		printf("\r\nGenerated session key: 0x");
    54a2:	4865      	ldr	r0, [pc, #404]	; (5638 <main+0x434>)
    54a4:	4b4f      	ldr	r3, [pc, #316]	; (55e4 <main+0x3e0>)
    54a6:	4798      	blx	r3
		for (int i = 9; i >= 0; i--) printf("%02x",session_key[i]);
    54a8:	2409      	movs	r4, #9
    54aa:	ae31      	add	r6, sp, #196	; 0xc4
    54ac:	4d5c      	ldr	r5, [pc, #368]	; (5620 <main+0x41c>)
    54ae:	4f4d      	ldr	r7, [pc, #308]	; (55e4 <main+0x3e0>)
    54b0:	5da1      	ldrb	r1, [r4, r6]
    54b2:	0028      	movs	r0, r5
    54b4:	47b8      	blx	r7
    54b6:	3c01      	subs	r4, #1
    54b8:	d2fa      	bcs.n	54b0 <main+0x2ac>
		printf("\r\n");
    54ba:	484d      	ldr	r0, [pc, #308]	; (55f0 <main+0x3ec>)
    54bc:	4b45      	ldr	r3, [pc, #276]	; (55d4 <main+0x3d0>)
    54be:	4798      	blx	r3
		*((uint32_t*) &session_key[10]) |= g_valid_nodes_mask;
    54c0:	4c59      	ldr	r4, [pc, #356]	; (5628 <main+0x424>)
    54c2:	6821      	ldr	r1, [r4, #0]
    54c4:	22ae      	movs	r2, #174	; 0xae
    54c6:	ab08      	add	r3, sp, #32
    54c8:	469c      	mov	ip, r3
    54ca:	4462      	add	r2, ip
    54cc:	8810      	ldrh	r0, [r2, #0]
    54ce:	8853      	ldrh	r3, [r2, #2]
    54d0:	041b      	lsls	r3, r3, #16
    54d2:	4303      	orrs	r3, r0
    54d4:	430b      	orrs	r3, r1
    54d6:	8013      	strh	r3, [r2, #0]
    54d8:	0c1b      	lsrs	r3, r3, #16
    54da:	8053      	strh	r3, [r2, #2]
		printf("\n\rFormatted session key and valid node concatenation complete\n\r");
    54dc:	4857      	ldr	r0, [pc, #348]	; (563c <main+0x438>)
    54de:	4b41      	ldr	r3, [pc, #260]	; (55e4 <main+0x3e0>)
    54e0:	4798      	blx	r3
			if(g_valid_nodes_mask & (1<<i)) {
    54e2:	6823      	ldr	r3, [r4, #0]
    54e4:	079b      	lsls	r3, r3, #30
    54e6:	d414      	bmi.n	5512 <main+0x30e>
				g_session_res[i] = 2;
    54e8:	2202      	movs	r2, #2
    54ea:	4b55      	ldr	r3, [pc, #340]	; (5640 <main+0x43c>)
    54ec:	605a      	str	r2, [r3, #4]
			if(g_valid_nodes_mask & (1<<i)) {
    54ee:	4b4e      	ldr	r3, [pc, #312]	; (5628 <main+0x424>)
    54f0:	681b      	ldr	r3, [r3, #0]
    54f2:	075b      	lsls	r3, r3, #29
    54f4:	d500      	bpl.n	54f8 <main+0x2f4>
    54f6:	e0b3      	b.n	5660 <main+0x45c>
				g_session_res[i] = 2;
    54f8:	2202      	movs	r2, #2
    54fa:	4b51      	ldr	r3, [pc, #324]	; (5640 <main+0x43c>)
    54fc:	609a      	str	r2, [r3, #8]
		printf("Finished Encrypting session keys\r\n");
    54fe:	4851      	ldr	r0, [pc, #324]	; (5644 <main+0x440>)
    5500:	4b34      	ldr	r3, [pc, #208]	; (55d4 <main+0x3d0>)
    5502:	4798      	blx	r3
    5504:	2718      	movs	r7, #24
		for(int i = 1; i <= NODE_TOTAL; i++) {
    5506:	2501      	movs	r5, #1

static void Delay_ms(uint32_t Delay) {
	printf("Delayed here");
    5508:	4b36      	ldr	r3, [pc, #216]	; (55e4 <main+0x3e0>)
    550a:	4699      	mov	r9, r3
			if(g_session_res[i] == 2) continue;
    550c:	4b4c      	ldr	r3, [pc, #304]	; (5640 <main+0x43c>)
    550e:	4698      	mov	r8, r3
    5510:	e0e4      	b.n	56dc <main+0x4d8>
				g_session_res[i] = 0;
    5512:	2500      	movs	r5, #0
    5514:	4b4a      	ldr	r3, [pc, #296]	; (5640 <main+0x43c>)
    5516:	605d      	str	r5, [r3, #4]
				memmove(EncryptedSessionKeys[i],session_key,16);
    5518:	2210      	movs	r2, #16
    551a:	a931      	add	r1, sp, #196	; 0xc4
    551c:	9f08      	ldr	r7, [sp, #32]
    551e:	0038      	movs	r0, r7
    5520:	4c49      	ldr	r4, [pc, #292]	; (5648 <main+0x444>)
    5522:	47a0      	blx	r4
				present80Encrypt(NodeSharedSecrets[i],EncryptedSessionKeys[i]);
    5524:	4e49      	ldr	r6, [pc, #292]	; (564c <main+0x448>)
    5526:	9708      	str	r7, [sp, #32]
    5528:	0039      	movs	r1, r7
    552a:	0030      	movs	r0, r6
    552c:	4f48      	ldr	r7, [pc, #288]	; (5650 <main+0x44c>)
    552e:	47b8      	blx	r7
				present80Encrypt(NodeSharedSecrets[i],&EncryptedSessionKeys[i][8]);
    5530:	4b34      	ldr	r3, [pc, #208]	; (5604 <main+0x400>)
    5532:	3318      	adds	r3, #24
    5534:	0019      	movs	r1, r3
    5536:	0030      	movs	r0, r6
    5538:	47b8      	blx	r7
	tx_element->T0.reg = 0;
    553a:	9522      	str	r5, [sp, #136]	; 0x88
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    553c:	2388      	movs	r3, #136	; 0x88
    553e:	041b      	lsls	r3, r3, #16
    5540:	9323      	str	r3, [sp, #140]	; 0x8c
				send_filter[i].T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x200 + i);
    5542:	9a22      	ldr	r2, [sp, #136]	; 0x88
    5544:	4b43      	ldr	r3, [pc, #268]	; (5654 <main+0x450>)
    5546:	4313      	orrs	r3, r2
    5548:	9322      	str	r3, [sp, #136]	; 0x88
				send_filter[i].T1.bit.DLC = 8;
    554a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    554c:	4a42      	ldr	r2, [pc, #264]	; (5658 <main+0x454>)
    554e:	401a      	ands	r2, r3
    5550:	2380      	movs	r3, #128	; 0x80
    5552:	031b      	lsls	r3, r3, #12
    5554:	4313      	orrs	r3, r2
    5556:	9323      	str	r3, [sp, #140]	; 0x8c
				memcpy(send_filter[i].data,EncryptedSessionKeys[i],8);
    5558:	2208      	movs	r2, #8
    555a:	9908      	ldr	r1, [sp, #32]
    555c:	a824      	add	r0, sp, #144	; 0x90
    555e:	47a0      	blx	r4
				can_set_tx_buffer_element(&can_instance, &send_filter[i],
    5560:	4c17      	ldr	r4, [pc, #92]	; (55c0 <main+0x3bc>)
    5562:	465a      	mov	r2, fp
    5564:	a922      	add	r1, sp, #136	; 0x88
    5566:	0020      	movs	r0, r4
    5568:	4b3c      	ldr	r3, [pc, #240]	; (565c <main+0x458>)
    556a:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    556c:	6823      	ldr	r3, [r4, #0]
    556e:	699a      	ldr	r2, [r3, #24]
    5570:	0792      	lsls	r2, r2, #30
    5572:	d4bc      	bmi.n	54ee <main+0x2ea>
	module_inst->hw->TXBAR.reg = trig_mask;
    5574:	2102      	movs	r1, #2
    5576:	22d0      	movs	r2, #208	; 0xd0
    5578:	5099      	str	r1, [r3, r2]
    557a:	e7b8      	b.n	54ee <main+0x2ea>
    557c:	000016f1 	.word	0x000016f1
    5580:	002a0003 	.word	0x002a0003
    5584:	002b0003 	.word	0x002b0003
    5588:	20000cb4 	.word	0x20000cb4
    558c:	20000d3c 	.word	0x20000d3c
    5590:	00004a91 	.word	0x00004a91
    5594:	20000d38 	.word	0x20000d38
    5598:	00004a65 	.word	0x00004a65
    559c:	20000d34 	.word	0x20000d34
    55a0:	42001400 	.word	0x42001400
    55a4:	00000a79 	.word	0x00000a79
    55a8:	20000108 	.word	0x20000108
    55ac:	000061c1 	.word	0x000061c1
    55b0:	000009e9 	.word	0x000009e9
    55b4:	e000e100 	.word	0xe000e100
    55b8:	000016c1 	.word	0x000016c1
    55bc:	1fffffff 	.word	0x1fffffff
    55c0:	20000cb0 	.word	0x20000cb0
    55c4:	42001c00 	.word	0x42001c00
    55c8:	000001f9 	.word	0x000001f9
    55cc:	000004f5 	.word	0x000004f5
    55d0:	0000a7fc 	.word	0x0000a7fc
    55d4:	00006155 	.word	0x00006155
    55d8:	20000d40 	.word	0x20000d40
    55dc:	00005eff 	.word	0x00005eff
    55e0:	0000aa58 	.word	0x0000aa58
    55e4:	00006061 	.word	0x00006061
    55e8:	00007d44 	.word	0x00007d44
    55ec:	0000618d 	.word	0x0000618d
    55f0:	0000ab44 	.word	0x0000ab44
    55f4:	20001210 	.word	0x20001210
    55f8:	200011b0 	.word	0x200011b0
    55fc:	000018a9 	.word	0x000018a9
    5600:	0000aa88 	.word	0x0000aa88
    5604:	20001180 	.word	0x20001180
    5608:	0000aadc 	.word	0x0000aadc
    560c:	0000ab0c 	.word	0x0000ab0c
    5610:	0000ac00 	.word	0x0000ac00
    5614:	20001270 	.word	0x20001270
    5618:	00004919 	.word	0x00004919
    561c:	0000abcc 	.word	0x0000abcc
    5620:	0000a60c 	.word	0x0000a60c
    5624:	0000abdc 	.word	0x0000abdc
    5628:	20000104 	.word	0x20000104
    562c:	0000abec 	.word	0x0000abec
    5630:	20000ca8 	.word	0x20000ca8
    5634:	00004649 	.word	0x00004649
    5638:	0000ac18 	.word	0x0000ac18
    563c:	0000ac34 	.word	0x0000ac34
    5640:	20000d04 	.word	0x20000d04
    5644:	0000ac74 	.word	0x0000ac74
    5648:	00005ec9 	.word	0x00005ec9
    564c:	20001280 	.word	0x20001280
    5650:	000047f1 	.word	0x000047f1
    5654:	08040000 	.word	0x08040000
    5658:	fff0ffff 	.word	0xfff0ffff
    565c:	00000599 	.word	0x00000599
				g_session_res[i] = 0;
    5660:	2500      	movs	r5, #0
    5662:	4b9b      	ldr	r3, [pc, #620]	; (58d0 <main+0x6cc>)
    5664:	609d      	str	r5, [r3, #8]
				memmove(EncryptedSessionKeys[i],session_key,16);
    5666:	2210      	movs	r2, #16
    5668:	a931      	add	r1, sp, #196	; 0xc4
    566a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    566c:	0038      	movs	r0, r7
    566e:	4c99      	ldr	r4, [pc, #612]	; (58d4 <main+0x6d0>)
    5670:	47a0      	blx	r4
				present80Encrypt(NodeSharedSecrets[i],EncryptedSessionKeys[i]);
    5672:	4e99      	ldr	r6, [pc, #612]	; (58d8 <main+0x6d4>)
    5674:	9709      	str	r7, [sp, #36]	; 0x24
    5676:	0039      	movs	r1, r7
    5678:	0030      	movs	r0, r6
    567a:	4f98      	ldr	r7, [pc, #608]	; (58dc <main+0x6d8>)
    567c:	47b8      	blx	r7
				present80Encrypt(NodeSharedSecrets[i],&EncryptedSessionKeys[i][8]);
    567e:	4b98      	ldr	r3, [pc, #608]	; (58e0 <main+0x6dc>)
    5680:	3328      	adds	r3, #40	; 0x28
    5682:	0019      	movs	r1, r3
    5684:	0030      	movs	r0, r6
    5686:	47b8      	blx	r7
	tx_element->T0.reg = 0;
    5688:	9526      	str	r5, [sp, #152]	; 0x98
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    568a:	2388      	movs	r3, #136	; 0x88
    568c:	041b      	lsls	r3, r3, #16
    568e:	9327      	str	r3, [sp, #156]	; 0x9c
				send_filter[i].T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x200 + i);
    5690:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5692:	4b94      	ldr	r3, [pc, #592]	; (58e4 <main+0x6e0>)
    5694:	4313      	orrs	r3, r2
    5696:	9326      	str	r3, [sp, #152]	; 0x98
				send_filter[i].T1.bit.DLC = 8;
    5698:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    569a:	4a93      	ldr	r2, [pc, #588]	; (58e8 <main+0x6e4>)
    569c:	401a      	ands	r2, r3
    569e:	2380      	movs	r3, #128	; 0x80
    56a0:	031b      	lsls	r3, r3, #12
    56a2:	4313      	orrs	r3, r2
    56a4:	9327      	str	r3, [sp, #156]	; 0x9c
				memcpy(send_filter[i].data,EncryptedSessionKeys[i],8);
    56a6:	2208      	movs	r2, #8
    56a8:	9909      	ldr	r1, [sp, #36]	; 0x24
    56aa:	a828      	add	r0, sp, #160	; 0xa0
    56ac:	47a0      	blx	r4
				can_set_tx_buffer_element(&can_instance, &send_filter[i],
    56ae:	4c8f      	ldr	r4, [pc, #572]	; (58ec <main+0x6e8>)
    56b0:	2202      	movs	r2, #2
    56b2:	a926      	add	r1, sp, #152	; 0x98
    56b4:	0020      	movs	r0, r4
    56b6:	4b8e      	ldr	r3, [pc, #568]	; (58f0 <main+0x6ec>)
    56b8:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    56ba:	6823      	ldr	r3, [r4, #0]
    56bc:	699a      	ldr	r2, [r3, #24]
    56be:	0792      	lsls	r2, r2, #30
    56c0:	d500      	bpl.n	56c4 <main+0x4c0>
    56c2:	e71c      	b.n	54fe <main+0x2fa>
	module_inst->hw->TXBAR.reg = trig_mask;
    56c4:	2104      	movs	r1, #4
    56c6:	22d0      	movs	r2, #208	; 0xd0
    56c8:	5099      	str	r1, [r3, r2]
    56ca:	e718      	b.n	54fe <main+0x2fa>
	return module_inst->hw->TXBTO.reg;
    56cc:	21d8      	movs	r1, #216	; 0xd8
    56ce:	5853      	ldr	r3, [r2, r1]
			while(!(can_tx_get_transmission_status(&can_instance) & (1 << i)));
    56d0:	4223      	tst	r3, r4
    56d2:	d0fc      	beq.n	56ce <main+0x4ca>
		for(int i = 1; i <= NODE_TOTAL; i++) {
    56d4:	3501      	adds	r5, #1
    56d6:	3710      	adds	r7, #16
    56d8:	2d03      	cmp	r5, #3
    56da:	d03c      	beq.n	5756 <main+0x552>
	printf("Delayed here");
    56dc:	4885      	ldr	r0, [pc, #532]	; (58f4 <main+0x6f0>)
    56de:	47c8      	blx	r9
    56e0:	4b85      	ldr	r3, [pc, #532]	; (58f8 <main+0x6f4>)
    56e2:	3b01      	subs	r3, #1
	for(uint32_t i = 0; i < Delay*10000; i++);
    56e4:	2b00      	cmp	r3, #0
    56e6:	d1fc      	bne.n	56e2 <main+0x4de>
			if(g_session_res[i] == 2) continue;
    56e8:	00ab      	lsls	r3, r5, #2
    56ea:	4642      	mov	r2, r8
    56ec:	589b      	ldr	r3, [r3, r2]
    56ee:	2b02      	cmp	r3, #2
    56f0:	d0f0      	beq.n	56d4 <main+0x4d0>
    56f2:	ab48      	add	r3, sp, #288	; 0x120
    56f4:	19de      	adds	r6, r3, r7
    56f6:	3eb0      	subs	r6, #176	; 0xb0
    56f8:	0031      	movs	r1, r6
    56fa:	9604      	str	r6, [sp, #16]
			can_set_tx_buffer_element(&can_instance, &send_filter[i],i);
    56fc:	9503      	str	r5, [sp, #12]
    56fe:	4e7b      	ldr	r6, [pc, #492]	; (58ec <main+0x6e8>)
    5700:	002a      	movs	r2, r5
    5702:	0030      	movs	r0, r6
    5704:	4b7a      	ldr	r3, [pc, #488]	; (58f0 <main+0x6ec>)
    5706:	4798      	blx	r3
			can_tx_transfer_request(&can_instance, 1 << i);
    5708:	465c      	mov	r4, fp
    570a:	40ac      	lsls	r4, r5
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    570c:	6832      	ldr	r2, [r6, #0]
    570e:	6993      	ldr	r3, [r2, #24]
    5710:	079b      	lsls	r3, r3, #30
    5712:	d401      	bmi.n	5718 <main+0x514>
	module_inst->hw->TXBAR.reg = trig_mask;
    5714:	23d0      	movs	r3, #208	; 0xd0
    5716:	50d4      	str	r4, [r2, r3]
	return module_inst->hw->TXBTO.reg;
    5718:	21d8      	movs	r1, #216	; 0xd8
    571a:	5853      	ldr	r3, [r2, r1]
			while(!(can_tx_get_transmission_status(&can_instance) & (1 << i)));
    571c:	4223      	tst	r3, r4
    571e:	d0fc      	beq.n	571a <main+0x516>
	printf("Delayed here");
    5720:	4874      	ldr	r0, [pc, #464]	; (58f4 <main+0x6f0>)
    5722:	4b76      	ldr	r3, [pc, #472]	; (58fc <main+0x6f8>)
    5724:	4798      	blx	r3
    5726:	4b76      	ldr	r3, [pc, #472]	; (5900 <main+0x6fc>)
    5728:	3b01      	subs	r3, #1
	for(uint32_t i = 0; i < Delay*10000; i++);
    572a:	2b00      	cmp	r3, #0
    572c:	d1fc      	bne.n	5728 <main+0x524>
			memcpy(send_filter[i].data,&EncryptedSessionKeys[i][8],8);
    572e:	ab1e      	add	r3, sp, #120	; 0x78
    5730:	19d8      	adds	r0, r3, r7
    5732:	496b      	ldr	r1, [pc, #428]	; (58e0 <main+0x6dc>)
    5734:	1879      	adds	r1, r7, r1
    5736:	2208      	movs	r2, #8
    5738:	4b66      	ldr	r3, [pc, #408]	; (58d4 <main+0x6d0>)
    573a:	4798      	blx	r3
			can_set_tx_buffer_element(&can_instance, &send_filter[i],i);
    573c:	4e6b      	ldr	r6, [pc, #428]	; (58ec <main+0x6e8>)
    573e:	9a03      	ldr	r2, [sp, #12]
    5740:	9904      	ldr	r1, [sp, #16]
    5742:	0030      	movs	r0, r6
    5744:	4b6a      	ldr	r3, [pc, #424]	; (58f0 <main+0x6ec>)
    5746:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    5748:	6832      	ldr	r2, [r6, #0]
    574a:	6993      	ldr	r3, [r2, #24]
    574c:	079b      	lsls	r3, r3, #30
    574e:	d4bd      	bmi.n	56cc <main+0x4c8>
	module_inst->hw->TXBAR.reg = trig_mask;
    5750:	23d0      	movs	r3, #208	; 0xd0
    5752:	50d4      	str	r4, [r2, r3]
    5754:	e7ba      	b.n	56cc <main+0x4c8>
		printf("Finished sending session keys\r\n");
    5756:	486b      	ldr	r0, [pc, #428]	; (5904 <main+0x700>)
    5758:	4b6b      	ldr	r3, [pc, #428]	; (5908 <main+0x704>)
    575a:	4798      	blx	r3
	printf("Delayed here");
    575c:	4865      	ldr	r0, [pc, #404]	; (58f4 <main+0x6f0>)
    575e:	4b67      	ldr	r3, [pc, #412]	; (58fc <main+0x6f8>)
    5760:	4798      	blx	r3
    5762:	4b6a      	ldr	r3, [pc, #424]	; (590c <main+0x708>)
    5764:	3b01      	subs	r3, #1
	for(uint32_t i = 0; i < Delay*10000; i++);
    5766:	2b00      	cmp	r3, #0
    5768:	d1fc      	bne.n	5764 <main+0x560>
		memset(message[0],0,8);
    576a:	ac35      	add	r4, sp, #212	; 0xd4
    576c:	2208      	movs	r2, #8
    576e:	2100      	movs	r1, #0
    5770:	0020      	movs	r0, r4
    5772:	4b67      	ldr	r3, [pc, #412]	; (5910 <main+0x70c>)
    5774:	4798      	blx	r3
	tx_element->T0.reg = 0;
    5776:	2300      	movs	r3, #0
    5778:	932a      	str	r3, [sp, #168]	; 0xa8
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    577a:	2388      	movs	r3, #136	; 0x88
    577c:	041b      	lsls	r3, r3, #16
    577e:	932b      	str	r3, [sp, #172]	; 0xac
		tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x301);
    5780:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    5782:	4b64      	ldr	r3, [pc, #400]	; (5914 <main+0x710>)
    5784:	4313      	orrs	r3, r2
    5786:	932a      	str	r3, [sp, #168]	; 0xa8
		tx_element.T1.bit.DLC = 8;
    5788:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    578a:	4a57      	ldr	r2, [pc, #348]	; (58e8 <main+0x6e4>)
    578c:	401a      	ands	r2, r3
    578e:	2380      	movs	r3, #128	; 0x80
    5790:	031b      	lsls	r3, r3, #12
    5792:	4313      	orrs	r3, r2
    5794:	932b      	str	r3, [sp, #172]	; 0xac
		memcpy(tx_element.data,message[0],8);
    5796:	ab2c      	add	r3, sp, #176	; 0xb0
    5798:	cc06      	ldmia	r4!, {r1, r2}
    579a:	c306      	stmia	r3!, {r1, r2}
		can_set_tx_buffer_element(&can_instance, &tx_element,
    579c:	4c53      	ldr	r4, [pc, #332]	; (58ec <main+0x6e8>)
    579e:	465a      	mov	r2, fp
    57a0:	a92a      	add	r1, sp, #168	; 0xa8
    57a2:	0020      	movs	r0, r4
    57a4:	4b52      	ldr	r3, [pc, #328]	; (58f0 <main+0x6ec>)
    57a6:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    57a8:	6822      	ldr	r2, [r4, #0]
    57aa:	6993      	ldr	r3, [r2, #24]
    57ac:	079b      	lsls	r3, r3, #30
    57ae:	d402      	bmi.n	57b6 <main+0x5b2>
	module_inst->hw->TXBAR.reg = trig_mask;
    57b0:	2102      	movs	r1, #2
    57b2:	23d0      	movs	r3, #208	; 0xd0
    57b4:	50d1      	str	r1, [r2, r3]
	return module_inst->hw->TXBTO.reg;
    57b6:	20d8      	movs	r0, #216	; 0xd8
		while(!(can_tx_get_transmission_status(&can_instance) & (1 << CAN_FILTER_REGULAR_SEND)));
    57b8:	2102      	movs	r1, #2
    57ba:	5813      	ldr	r3, [r2, r0]
    57bc:	4219      	tst	r1, r3
    57be:	d0fc      	beq.n	57ba <main+0x5b6>
		printf("That's it for Authentication. Time to listen...\r\n");
    57c0:	4855      	ldr	r0, [pc, #340]	; (5918 <main+0x714>)
    57c2:	4b51      	ldr	r3, [pc, #324]	; (5908 <main+0x704>)
    57c4:	4798      	blx	r3
		STAGE = NORMAL;
    57c6:	2203      	movs	r2, #3
    57c8:	4b54      	ldr	r3, [pc, #336]	; (591c <main+0x718>)
    57ca:	701a      	strb	r2, [r3, #0]
		g_normal_received_mask = 0;
    57cc:	2200      	movs	r2, #0
    57ce:	4b54      	ldr	r3, [pc, #336]	; (5920 <main+0x71c>)
    57d0:	601a      	str	r2, [r3, #0]
    57d2:	4e54      	ldr	r6, [pc, #336]	; (5924 <main+0x720>)
		for(int i = 1; i <= MAX_BUFFS; i++) {
    57d4:	2701      	movs	r7, #1
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    57d6:	ac2e      	add	r4, sp, #184	; 0xb8
			can_set_rx_standard_filter(&can_instance, &res_filter[i],
    57d8:	4d53      	ldr	r5, [pc, #332]	; (5928 <main+0x724>)
    57da:	00b9      	lsls	r1, r7, #2
    57dc:	4b53      	ldr	r3, [pc, #332]	; (592c <main+0x728>)
    57de:	510b      	str	r3, [r1, r4]
			res_filter[i].S0.bit.SFID1 = 0x400+i;
    57e0:	590b      	ldr	r3, [r1, r4]
    57e2:	0432      	lsls	r2, r6, #16
    57e4:	4852      	ldr	r0, [pc, #328]	; (5930 <main+0x72c>)
    57e6:	4003      	ands	r3, r0
    57e8:	4313      	orrs	r3, r2
    57ea:	510b      	str	r3, [r1, r4]
    57ec:	2380      	movs	r3, #128	; 0x80
    57ee:	00db      	lsls	r3, r3, #3
    57f0:	18f2      	adds	r2, r6, r3
			res_filter[i].S0.bit.SFID2 = i;
    57f2:	590b      	ldr	r3, [r1, r4]
    57f4:	0552      	lsls	r2, r2, #21
    57f6:	0d52      	lsrs	r2, r2, #21
    57f8:	0adb      	lsrs	r3, r3, #11
    57fa:	02db      	lsls	r3, r3, #11
    57fc:	4313      	orrs	r3, r2
    57fe:	510b      	str	r3, [r1, r4]
			res_filter[i].S0.bit.SFEC =
    5800:	590a      	ldr	r2, [r1, r4]
    5802:	23e0      	movs	r3, #224	; 0xe0
    5804:	059b      	lsls	r3, r3, #22
    5806:	4313      	orrs	r3, r2
    5808:	510b      	str	r3, [r1, r4]
			can_set_rx_standard_filter(&can_instance, &res_filter[i],
    580a:	1861      	adds	r1, r4, r1
    580c:	003a      	movs	r2, r7
    580e:	4837      	ldr	r0, [pc, #220]	; (58ec <main+0x6e8>)
    5810:	47a8      	blx	r5
		for(int i = 1; i <= MAX_BUFFS; i++) {
    5812:	3701      	adds	r7, #1
    5814:	3601      	adds	r6, #1
    5816:	0576      	lsls	r6, r6, #21
    5818:	0d76      	lsrs	r6, r6, #21
    581a:	2f05      	cmp	r7, #5
    581c:	d1dd      	bne.n	57da <main+0x5d6>
	module_inst->hw->IE.reg |= source;
    581e:	4b33      	ldr	r3, [pc, #204]	; (58ec <main+0x6e8>)
    5820:	681a      	ldr	r2, [r3, #0]
    5822:	6d51      	ldr	r1, [r2, #84]	; 0x54
    5824:	2380      	movs	r3, #128	; 0x80
    5826:	031b      	lsls	r3, r3, #12
    5828:	430b      	orrs	r3, r1
    582a:	6553      	str	r3, [r2, #84]	; 0x54
		printf("Ready to listen...\r\n");
    582c:	4841      	ldr	r0, [pc, #260]	; (5934 <main+0x730>)
    582e:	4b36      	ldr	r3, [pc, #216]	; (5908 <main+0x704>)
    5830:	4798      	blx	r3
    5832:	ab35      	add	r3, sp, #212	; 0xd4
    5834:	4698      	mov	r8, r3
    5836:	ab5d      	add	r3, sp, #372	; 0x174
    5838:	469a      	mov	sl, r3
			while(g_normal_received_mask==0);
    583a:	4e39      	ldr	r6, [pc, #228]	; (5920 <main+0x71c>)
			for(flag = 1; (g_normal_received_mask & (1<<flag))==0;flag++);
    583c:	46b1      	mov	r9, r6
    583e:	0037      	movs	r7, r6
    5840:	e016      	b.n	5870 <main+0x66c>
    5842:	2502      	movs	r5, #2
    5844:	2401      	movs	r4, #1
    5846:	e021      	b.n	588c <main+0x688>
    5848:	2100      	movs	r1, #0
			memcpy(message[i],temp->data,8);
    584a:	3108      	adds	r1, #8
    584c:	2208      	movs	r2, #8
    584e:	4640      	mov	r0, r8
    5850:	4b20      	ldr	r3, [pc, #128]	; (58d4 <main+0x6d0>)
    5852:	4798      	blx	r3
			g_normal_received_flags[flag]--;
    5854:	4a38      	ldr	r2, [pc, #224]	; (5938 <main+0x734>)
    5856:	00a4      	lsls	r4, r4, #2
    5858:	58a3      	ldr	r3, [r4, r2]
    585a:	3b01      	subs	r3, #1
    585c:	50a3      	str	r3, [r4, r2]
			g_normal_received_mask &= ~(1<<flag);
    585e:	4a30      	ldr	r2, [pc, #192]	; (5920 <main+0x71c>)
    5860:	6813      	ldr	r3, [r2, #0]
    5862:	43ab      	bics	r3, r5
    5864:	6013      	str	r3, [r2, #0]
    5866:	2308      	movs	r3, #8
    5868:	469c      	mov	ip, r3
    586a:	44e0      	add	r8, ip
		for(int i = 0; i < TOTAL_MESSAGES; i++) {
    586c:	45d0      	cmp	r8, sl
    586e:	d069      	beq.n	5944 <main+0x740>
			while(g_normal_received_mask==0);
    5870:	6833      	ldr	r3, [r6, #0]
    5872:	2b00      	cmp	r3, #0
    5874:	d0fc      	beq.n	5870 <main+0x66c>
			for(flag = 1; (g_normal_received_mask & (1<<flag))==0;flag++);
    5876:	464b      	mov	r3, r9
    5878:	681b      	ldr	r3, [r3, #0]
    587a:	079b      	lsls	r3, r3, #30
    587c:	d4e1      	bmi.n	5842 <main+0x63e>
    587e:	2401      	movs	r4, #1
    5880:	3401      	adds	r4, #1
    5882:	465d      	mov	r5, fp
    5884:	40a5      	lsls	r5, r4
    5886:	683b      	ldr	r3, [r7, #0]
    5888:	422b      	tst	r3, r5
    588a:	d0f9      	beq.n	5880 <main+0x67c>
			printf("%i ",flag);
    588c:	0021      	movs	r1, r4
    588e:	482b      	ldr	r0, [pc, #172]	; (593c <main+0x738>)
    5890:	4b1a      	ldr	r3, [pc, #104]	; (58fc <main+0x6f8>)
    5892:	4798      	blx	r3
    5894:	492a      	ldr	r1, [pc, #168]	; (5940 <main+0x73c>)
    5896:	0123      	lsls	r3, r4, #4
    5898:	191a      	adds	r2, r3, r4
    589a:	0092      	lsls	r2, r2, #2
    589c:	188a      	adds	r2, r1, r2
    589e:	7852      	ldrb	r2, [r2, #1]
    58a0:	191b      	adds	r3, r3, r4
    58a2:	009b      	lsls	r3, r3, #2
    58a4:	5c5b      	ldrb	r3, [r3, r1]
    58a6:	4293      	cmp	r3, r2
    58a8:	d0ce      	beq.n	5848 <main+0x644>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    58aa:	468c      	mov	ip, r1
    58ac:	0123      	lsls	r3, r4, #4
    58ae:	1919      	adds	r1, r3, r4
    58b0:	0089      	lsls	r1, r1, #2
    58b2:	4461      	add	r1, ip
    58b4:	9103      	str	r1, [sp, #12]
    58b6:	1c50      	adds	r0, r2, #1
    58b8:	2103      	movs	r1, #3
    58ba:	4008      	ands	r0, r1
    58bc:	9903      	ldr	r1, [sp, #12]
    58be:	7048      	strb	r0, [r1, #1]
	return &(buff->buffers[last_element]);
    58c0:	1919      	adds	r1, r3, r4
    58c2:	0089      	lsls	r1, r1, #2
    58c4:	3104      	adds	r1, #4
    58c6:	0112      	lsls	r2, r2, #4
    58c8:	1889      	adds	r1, r1, r2
    58ca:	4461      	add	r1, ip
    58cc:	e7bd      	b.n	584a <main+0x646>
    58ce:	46c0      	nop			; (mov r8, r8)
    58d0:	20000d04 	.word	0x20000d04
    58d4:	00005ec9 	.word	0x00005ec9
    58d8:	20001290 	.word	0x20001290
    58dc:	000047f1 	.word	0x000047f1
    58e0:	20001180 	.word	0x20001180
    58e4:	08080000 	.word	0x08080000
    58e8:	fff0ffff 	.word	0xfff0ffff
    58ec:	20000cb0 	.word	0x20000cb0
    58f0:	00000599 	.word	0x00000599
    58f4:	0000ac98 	.word	0x0000ac98
    58f8:	0007a120 	.word	0x0007a120
    58fc:	00006061 	.word	0x00006061
    5900:	000b71b0 	.word	0x000b71b0
    5904:	0000aca8 	.word	0x0000aca8
    5908:	00006155 	.word	0x00006155
    590c:	002625a0 	.word	0x002625a0
    5910:	00005eff 	.word	0x00005eff
    5914:	0c040000 	.word	0x0c040000
    5918:	0000acc8 	.word	0x0000acc8
    591c:	20000ca8 	.word	0x20000ca8
    5920:	20000d00 	.word	0x20000d00
    5924:	00000401 	.word	0x00000401
    5928:	0000050d 	.word	0x0000050d
    592c:	880007ff 	.word	0x880007ff
    5930:	f800ffff 	.word	0xf800ffff
    5934:	0000acfc 	.word	0x0000acfc
    5938:	20000cf4 	.word	0x20000cf4
    593c:	0000ad10 	.word	0x0000ad10
    5940:	20000d40 	.word	0x20000d40
		printf("Normal operation is over\r\n");
    5944:	485e      	ldr	r0, [pc, #376]	; (5ac0 <main+0x8bc>)
    5946:	4b5f      	ldr	r3, [pc, #380]	; (5ac4 <main+0x8c0>)
    5948:	4798      	blx	r3
		STAGE = RECEIVE;
    594a:	4b5f      	ldr	r3, [pc, #380]	; (5ac8 <main+0x8c4>)
    594c:	466a      	mov	r2, sp
    594e:	7fd2      	ldrb	r2, [r2, #31]
    5950:	701a      	strb	r2, [r3, #0]
		printf("Initialization Complete...\r\n");
    5952:	485e      	ldr	r0, [pc, #376]	; (5acc <main+0x8c8>)
    5954:	4c5b      	ldr	r4, [pc, #364]	; (5ac4 <main+0x8c0>)
    5956:	47a0      	blx	r4
		printf("Testing the server...\r\n");
    5958:	485d      	ldr	r0, [pc, #372]	; (5ad0 <main+0x8cc>)
    595a:	47a0      	blx	r4
		check = InitKeys(hardcoded,secret_key,StoredPublicKeys[0],ec);
    595c:	ab3b      	add	r3, sp, #236	; 0xec
    595e:	4a5d      	ldr	r2, [pc, #372]	; (5ad4 <main+0x8d0>)
    5960:	a93f      	add	r1, sp, #252	; 0xfc
    5962:	9806      	ldr	r0, [sp, #24]
    5964:	4c5c      	ldr	r4, [pc, #368]	; (5ad8 <main+0x8d4>)
    5966:	47a0      	blx	r4
		if(!check) {
    5968:	2800      	cmp	r0, #0
    596a:	d100      	bne.n	596e <main+0x76a>
    596c:	e522      	b.n	53b4 <main+0x1b0>
		check = InitSharedSecrets(secret_key, StoredPublicKeys,NodeSharedSecrets);
    596e:	4a5b      	ldr	r2, [pc, #364]	; (5adc <main+0x8d8>)
    5970:	4958      	ldr	r1, [pc, #352]	; (5ad4 <main+0x8d0>)
    5972:	a83f      	add	r0, sp, #252	; 0xfc
    5974:	4b5a      	ldr	r3, [pc, #360]	; (5ae0 <main+0x8dc>)
    5976:	4798      	blx	r3
		if (!check) {
    5978:	2800      	cmp	r0, #0
    597a:	d100      	bne.n	597e <main+0x77a>
    597c:	e525      	b.n	53ca <main+0x1c6>
    597e:	4b59      	ldr	r3, [pc, #356]	; (5ae4 <main+0x8e0>)
    5980:	681a      	ldr	r2, [r3, #0]
    5982:	6d51      	ldr	r1, [r2, #84]	; 0x54
    5984:	2380      	movs	r3, #128	; 0x80
    5986:	031b      	lsls	r3, r3, #12
    5988:	430b      	orrs	r3, r1
    598a:	6553      	str	r3, [r2, #84]	; 0x54
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    598c:	4c56      	ldr	r4, [pc, #344]	; (5ae8 <main+0x8e4>)
    598e:	942f      	str	r4, [sp, #188]	; 0xbc
			res_filter[i].S0.bit.SFID1 = 0x100 + i;
    5990:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    5992:	4956      	ldr	r1, [pc, #344]	; (5aec <main+0x8e8>)
    5994:	400b      	ands	r3, r1
    5996:	4a56      	ldr	r2, [pc, #344]	; (5af0 <main+0x8ec>)
    5998:	431a      	orrs	r2, r3
    599a:	922f      	str	r2, [sp, #188]	; 0xbc
			res_filter[i].S0.bit.SFID2 = i;
    599c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    599e:	0adb      	lsrs	r3, r3, #11
    59a0:	02db      	lsls	r3, r3, #11
    59a2:	465a      	mov	r2, fp
    59a4:	4313      	orrs	r3, r2
    59a6:	932f      	str	r3, [sp, #188]	; 0xbc
			res_filter[i].S0.bit.SFEC =
    59a8:	982f      	ldr	r0, [sp, #188]	; 0xbc
    59aa:	22e0      	movs	r2, #224	; 0xe0
    59ac:	0592      	lsls	r2, r2, #22
    59ae:	4310      	orrs	r0, r2
    59b0:	902f      	str	r0, [sp, #188]	; 0xbc
    59b2:	9430      	str	r4, [sp, #192]	; 0xc0
			res_filter[i].S0.bit.SFID1 = 0x100 + i;
    59b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    59b6:	4019      	ands	r1, r3
    59b8:	2381      	movs	r3, #129	; 0x81
    59ba:	045b      	lsls	r3, r3, #17
    59bc:	430b      	orrs	r3, r1
    59be:	9330      	str	r3, [sp, #192]	; 0xc0
			res_filter[i].S0.bit.SFID2 = i;
    59c0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    59c2:	0adb      	lsrs	r3, r3, #11
    59c4:	02db      	lsls	r3, r3, #11
    59c6:	2102      	movs	r1, #2
    59c8:	430b      	orrs	r3, r1
    59ca:	9330      	str	r3, [sp, #192]	; 0xc0
			res_filter[i].S0.bit.SFEC =
    59cc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    59ce:	431a      	orrs	r2, r3
    59d0:	9230      	str	r2, [sp, #192]	; 0xc0
		printf("Ready to receive %i hashed responses\r\n",NODE_TOTAL);
    59d2:	4848      	ldr	r0, [pc, #288]	; (5af4 <main+0x8f0>)
    59d4:	4b48      	ldr	r3, [pc, #288]	; (5af8 <main+0x8f4>)
    59d6:	4798      	blx	r3
    59d8:	4b48      	ldr	r3, [pc, #288]	; (5afc <main+0x8f8>)
    59da:	4698      	mov	r8, r3
    59dc:	4b48      	ldr	r3, [pc, #288]	; (5b00 <main+0x8fc>)
    59de:	9303      	str	r3, [sp, #12]
    59e0:	4699      	mov	r9, r3
    59e2:	2744      	movs	r7, #68	; 0x44
		for(int i = 1; i <= NODE_TOTAL;i++) {
    59e4:	2401      	movs	r4, #1
			g_hash_res[i] = 0;
    59e6:	4b47      	ldr	r3, [pc, #284]	; (5b04 <main+0x900>)
    59e8:	469a      	mov	sl, r3
    59ea:	ae2e      	add	r6, sp, #184	; 0xb8
			can_set_rx_standard_filter(&can_instance, &(res_filter[i]),i);
    59ec:	003b      	movs	r3, r7
    59ee:	464f      	mov	r7, r9
    59f0:	4645      	mov	r5, r8
    59f2:	4699      	mov	r9, r3
			g_hash_res[i] = 0;
    59f4:	00a3      	lsls	r3, r4, #2
    59f6:	2200      	movs	r2, #0
    59f8:	4651      	mov	r1, sl
    59fa:	505a      	str	r2, [r3, r1]
    59fc:	9405      	str	r4, [sp, #20]
    59fe:	18f3      	adds	r3, r6, r3
    5a00:	9304      	str	r3, [sp, #16]
			can_set_rx_standard_filter(&can_instance, &(res_filter[i]),i);
    5a02:	0022      	movs	r2, r4
    5a04:	0019      	movs	r1, r3
    5a06:	4837      	ldr	r0, [pc, #220]	; (5ae4 <main+0x8e0>)
    5a08:	4b3f      	ldr	r3, [pc, #252]	; (5b08 <main+0x904>)
    5a0a:	4798      	blx	r3
			while(g_hash_res[i] == 0);
    5a0c:	493d      	ldr	r1, [pc, #244]	; (5b04 <main+0x900>)
    5a0e:	00a2      	lsls	r2, r4, #2
    5a10:	5853      	ldr	r3, [r2, r1]
    5a12:	2b00      	cmp	r3, #0
    5a14:	d0fc      	beq.n	5a10 <main+0x80c>
			memcpy(ReceivedResponseHashes[i],getNextBufferElement(&rx_element_buff[i])->data,8);
    5a16:	0038      	movs	r0, r7
    5a18:	46a8      	mov	r8, r5
	if (buff->last_write == buff->last_read) return NULL;
    5a1a:	786b      	ldrb	r3, [r5, #1]
    5a1c:	782a      	ldrb	r2, [r5, #0]
    5a1e:	429a      	cmp	r2, r3
    5a20:	d100      	bne.n	5a24 <main+0x820>
    5a22:	e4d6      	b.n	53d2 <main+0x1ce>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    5a24:	1c59      	adds	r1, r3, #1
    5a26:	2203      	movs	r2, #3
    5a28:	400a      	ands	r2, r1
    5a2a:	706a      	strb	r2, [r5, #1]
	return &(buff->buffers[last_element]);
    5a2c:	0119      	lsls	r1, r3, #4
    5a2e:	464b      	mov	r3, r9
    5a30:	3304      	adds	r3, #4
    5a32:	18c9      	adds	r1, r1, r3
    5a34:	4b35      	ldr	r3, [pc, #212]	; (5b0c <main+0x908>)
    5a36:	18c9      	adds	r1, r1, r3
    5a38:	3108      	adds	r1, #8
    5a3a:	2208      	movs	r2, #8
    5a3c:	4b34      	ldr	r3, [pc, #208]	; (5b10 <main+0x90c>)
    5a3e:	4798      	blx	r3
			printf("Received first half\r\n");
    5a40:	4834      	ldr	r0, [pc, #208]	; (5b14 <main+0x910>)
    5a42:	4b20      	ldr	r3, [pc, #128]	; (5ac4 <main+0x8c0>)
    5a44:	4798      	blx	r3
			while(g_hash_res[i]==1);
    5a46:	492f      	ldr	r1, [pc, #188]	; (5b04 <main+0x900>)
    5a48:	00a2      	lsls	r2, r4, #2
    5a4a:	5853      	ldr	r3, [r2, r1]
    5a4c:	2b01      	cmp	r3, #1
    5a4e:	d0fc      	beq.n	5a4a <main+0x846>
    5a50:	0038      	movs	r0, r7
    5a52:	3008      	adds	r0, #8
	if (buff->last_write == buff->last_read) return NULL;
    5a54:	4643      	mov	r3, r8
    5a56:	7859      	ldrb	r1, [r3, #1]
    5a58:	781b      	ldrb	r3, [r3, #0]
    5a5a:	428b      	cmp	r3, r1
    5a5c:	d100      	bne.n	5a60 <main+0x85c>
    5a5e:	e4ba      	b.n	53d6 <main+0x1d2>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    5a60:	1c4a      	adds	r2, r1, #1
    5a62:	2303      	movs	r3, #3
    5a64:	4013      	ands	r3, r2
    5a66:	4642      	mov	r2, r8
    5a68:	7053      	strb	r3, [r2, #1]
	return &(buff->buffers[last_element]);
    5a6a:	464b      	mov	r3, r9
    5a6c:	3304      	adds	r3, #4
    5a6e:	010a      	lsls	r2, r1, #4
    5a70:	1899      	adds	r1, r3, r2
    5a72:	4b26      	ldr	r3, [pc, #152]	; (5b0c <main+0x908>)
    5a74:	18c9      	adds	r1, r1, r3
			memcpy(&ReceivedResponseHashes[i][8],getNextBufferElement(&rx_element_buff[i])->data,8);
    5a76:	3108      	adds	r1, #8
    5a78:	2208      	movs	r2, #8
    5a7a:	4b25      	ldr	r3, [pc, #148]	; (5b10 <main+0x90c>)
    5a7c:	4798      	blx	r3
			printf("Received response from Node %i\r\n",i);
    5a7e:	0021      	movs	r1, r4
    5a80:	4825      	ldr	r0, [pc, #148]	; (5b18 <main+0x914>)
    5a82:	4b1d      	ldr	r3, [pc, #116]	; (5af8 <main+0x8f4>)
    5a84:	4798      	blx	r3
			res_filter[i].S0.bit.SFEC =
    5a86:	00a2      	lsls	r2, r4, #2
    5a88:	5993      	ldr	r3, [r2, r6]
    5a8a:	4924      	ldr	r1, [pc, #144]	; (5b1c <main+0x918>)
    5a8c:	400b      	ands	r3, r1
    5a8e:	5193      	str	r3, [r2, r6]
			can_set_rx_standard_filter(&can_instance, &(res_filter[i]),i);
    5a90:	9a05      	ldr	r2, [sp, #20]
    5a92:	9904      	ldr	r1, [sp, #16]
    5a94:	4813      	ldr	r0, [pc, #76]	; (5ae4 <main+0x8e0>)
    5a96:	4b1c      	ldr	r3, [pc, #112]	; (5b08 <main+0x904>)
    5a98:	4798      	blx	r3
		for(int i = 1; i <= NODE_TOTAL;i++) {
    5a9a:	3401      	adds	r4, #1
    5a9c:	3544      	adds	r5, #68	; 0x44
    5a9e:	2344      	movs	r3, #68	; 0x44
    5aa0:	469c      	mov	ip, r3
    5aa2:	44e1      	add	r9, ip
    5aa4:	3710      	adds	r7, #16
    5aa6:	2c03      	cmp	r4, #3
    5aa8:	d1a4      	bne.n	59f4 <main+0x7f0>
		printf("Finished receiving responses\r\n");
    5aaa:	481d      	ldr	r0, [pc, #116]	; (5b20 <main+0x91c>)
    5aac:	4b05      	ldr	r3, [pc, #20]	; (5ac4 <main+0x8c0>)
    5aae:	4798      	blx	r3
		g_valid_nodes_mask = 0;
    5ab0:	2200      	movs	r2, #0
    5ab2:	4b1c      	ldr	r3, [pc, #112]	; (5b24 <main+0x920>)
    5ab4:	601a      	str	r2, [r3, #0]
    5ab6:	4e1c      	ldr	r6, [pc, #112]	; (5b28 <main+0x924>)
		for (int i = 1; i <= NODE_TOTAL; i++) {
    5ab8:	2301      	movs	r3, #1
    5aba:	4699      	mov	r9, r3
    5abc:	e49d      	b.n	53fa <main+0x1f6>
    5abe:	46c0      	nop			; (mov r8, r8)
    5ac0:	0000ad14 	.word	0x0000ad14
    5ac4:	00006155 	.word	0x00006155
    5ac8:	20000ca8 	.word	0x20000ca8
    5acc:	0000aaa8 	.word	0x0000aaa8
    5ad0:	0000aac4 	.word	0x0000aac4
    5ad4:	200011b0 	.word	0x200011b0
    5ad8:	0000504d 	.word	0x0000504d
    5adc:	20001270 	.word	0x20001270
    5ae0:	000050e1 	.word	0x000050e1
    5ae4:	20000cb0 	.word	0x20000cb0
    5ae8:	880007ff 	.word	0x880007ff
    5aec:	f800ffff 	.word	0xf800ffff
    5af0:	01010000 	.word	0x01010000
    5af4:	0000ab48 	.word	0x0000ab48
    5af8:	00006061 	.word	0x00006061
    5afc:	20000d84 	.word	0x20000d84
    5b00:	20001250 	.word	0x20001250
    5b04:	20000ce8 	.word	0x20000ce8
    5b08:	0000050d 	.word	0x0000050d
    5b0c:	20000d40 	.word	0x20000d40
    5b10:	00005ec9 	.word	0x00005ec9
    5b14:	0000ab70 	.word	0x0000ab70
    5b18:	0000ab88 	.word	0x0000ab88
    5b1c:	c7ffffff 	.word	0xc7ffffff
    5b20:	0000abac 	.word	0x0000abac
    5b24:	20000104 	.word	0x20000104
    5b28:	20001220 	.word	0x20001220

00005b2c <__udivsi3>:
    5b2c:	2200      	movs	r2, #0
    5b2e:	0843      	lsrs	r3, r0, #1
    5b30:	428b      	cmp	r3, r1
    5b32:	d374      	bcc.n	5c1e <__udivsi3+0xf2>
    5b34:	0903      	lsrs	r3, r0, #4
    5b36:	428b      	cmp	r3, r1
    5b38:	d35f      	bcc.n	5bfa <__udivsi3+0xce>
    5b3a:	0a03      	lsrs	r3, r0, #8
    5b3c:	428b      	cmp	r3, r1
    5b3e:	d344      	bcc.n	5bca <__udivsi3+0x9e>
    5b40:	0b03      	lsrs	r3, r0, #12
    5b42:	428b      	cmp	r3, r1
    5b44:	d328      	bcc.n	5b98 <__udivsi3+0x6c>
    5b46:	0c03      	lsrs	r3, r0, #16
    5b48:	428b      	cmp	r3, r1
    5b4a:	d30d      	bcc.n	5b68 <__udivsi3+0x3c>
    5b4c:	22ff      	movs	r2, #255	; 0xff
    5b4e:	0209      	lsls	r1, r1, #8
    5b50:	ba12      	rev	r2, r2
    5b52:	0c03      	lsrs	r3, r0, #16
    5b54:	428b      	cmp	r3, r1
    5b56:	d302      	bcc.n	5b5e <__udivsi3+0x32>
    5b58:	1212      	asrs	r2, r2, #8
    5b5a:	0209      	lsls	r1, r1, #8
    5b5c:	d065      	beq.n	5c2a <__udivsi3+0xfe>
    5b5e:	0b03      	lsrs	r3, r0, #12
    5b60:	428b      	cmp	r3, r1
    5b62:	d319      	bcc.n	5b98 <__udivsi3+0x6c>
    5b64:	e000      	b.n	5b68 <__udivsi3+0x3c>
    5b66:	0a09      	lsrs	r1, r1, #8
    5b68:	0bc3      	lsrs	r3, r0, #15
    5b6a:	428b      	cmp	r3, r1
    5b6c:	d301      	bcc.n	5b72 <__udivsi3+0x46>
    5b6e:	03cb      	lsls	r3, r1, #15
    5b70:	1ac0      	subs	r0, r0, r3
    5b72:	4152      	adcs	r2, r2
    5b74:	0b83      	lsrs	r3, r0, #14
    5b76:	428b      	cmp	r3, r1
    5b78:	d301      	bcc.n	5b7e <__udivsi3+0x52>
    5b7a:	038b      	lsls	r3, r1, #14
    5b7c:	1ac0      	subs	r0, r0, r3
    5b7e:	4152      	adcs	r2, r2
    5b80:	0b43      	lsrs	r3, r0, #13
    5b82:	428b      	cmp	r3, r1
    5b84:	d301      	bcc.n	5b8a <__udivsi3+0x5e>
    5b86:	034b      	lsls	r3, r1, #13
    5b88:	1ac0      	subs	r0, r0, r3
    5b8a:	4152      	adcs	r2, r2
    5b8c:	0b03      	lsrs	r3, r0, #12
    5b8e:	428b      	cmp	r3, r1
    5b90:	d301      	bcc.n	5b96 <__udivsi3+0x6a>
    5b92:	030b      	lsls	r3, r1, #12
    5b94:	1ac0      	subs	r0, r0, r3
    5b96:	4152      	adcs	r2, r2
    5b98:	0ac3      	lsrs	r3, r0, #11
    5b9a:	428b      	cmp	r3, r1
    5b9c:	d301      	bcc.n	5ba2 <__udivsi3+0x76>
    5b9e:	02cb      	lsls	r3, r1, #11
    5ba0:	1ac0      	subs	r0, r0, r3
    5ba2:	4152      	adcs	r2, r2
    5ba4:	0a83      	lsrs	r3, r0, #10
    5ba6:	428b      	cmp	r3, r1
    5ba8:	d301      	bcc.n	5bae <__udivsi3+0x82>
    5baa:	028b      	lsls	r3, r1, #10
    5bac:	1ac0      	subs	r0, r0, r3
    5bae:	4152      	adcs	r2, r2
    5bb0:	0a43      	lsrs	r3, r0, #9
    5bb2:	428b      	cmp	r3, r1
    5bb4:	d301      	bcc.n	5bba <__udivsi3+0x8e>
    5bb6:	024b      	lsls	r3, r1, #9
    5bb8:	1ac0      	subs	r0, r0, r3
    5bba:	4152      	adcs	r2, r2
    5bbc:	0a03      	lsrs	r3, r0, #8
    5bbe:	428b      	cmp	r3, r1
    5bc0:	d301      	bcc.n	5bc6 <__udivsi3+0x9a>
    5bc2:	020b      	lsls	r3, r1, #8
    5bc4:	1ac0      	subs	r0, r0, r3
    5bc6:	4152      	adcs	r2, r2
    5bc8:	d2cd      	bcs.n	5b66 <__udivsi3+0x3a>
    5bca:	09c3      	lsrs	r3, r0, #7
    5bcc:	428b      	cmp	r3, r1
    5bce:	d301      	bcc.n	5bd4 <__udivsi3+0xa8>
    5bd0:	01cb      	lsls	r3, r1, #7
    5bd2:	1ac0      	subs	r0, r0, r3
    5bd4:	4152      	adcs	r2, r2
    5bd6:	0983      	lsrs	r3, r0, #6
    5bd8:	428b      	cmp	r3, r1
    5bda:	d301      	bcc.n	5be0 <__udivsi3+0xb4>
    5bdc:	018b      	lsls	r3, r1, #6
    5bde:	1ac0      	subs	r0, r0, r3
    5be0:	4152      	adcs	r2, r2
    5be2:	0943      	lsrs	r3, r0, #5
    5be4:	428b      	cmp	r3, r1
    5be6:	d301      	bcc.n	5bec <__udivsi3+0xc0>
    5be8:	014b      	lsls	r3, r1, #5
    5bea:	1ac0      	subs	r0, r0, r3
    5bec:	4152      	adcs	r2, r2
    5bee:	0903      	lsrs	r3, r0, #4
    5bf0:	428b      	cmp	r3, r1
    5bf2:	d301      	bcc.n	5bf8 <__udivsi3+0xcc>
    5bf4:	010b      	lsls	r3, r1, #4
    5bf6:	1ac0      	subs	r0, r0, r3
    5bf8:	4152      	adcs	r2, r2
    5bfa:	08c3      	lsrs	r3, r0, #3
    5bfc:	428b      	cmp	r3, r1
    5bfe:	d301      	bcc.n	5c04 <__udivsi3+0xd8>
    5c00:	00cb      	lsls	r3, r1, #3
    5c02:	1ac0      	subs	r0, r0, r3
    5c04:	4152      	adcs	r2, r2
    5c06:	0883      	lsrs	r3, r0, #2
    5c08:	428b      	cmp	r3, r1
    5c0a:	d301      	bcc.n	5c10 <__udivsi3+0xe4>
    5c0c:	008b      	lsls	r3, r1, #2
    5c0e:	1ac0      	subs	r0, r0, r3
    5c10:	4152      	adcs	r2, r2
    5c12:	0843      	lsrs	r3, r0, #1
    5c14:	428b      	cmp	r3, r1
    5c16:	d301      	bcc.n	5c1c <__udivsi3+0xf0>
    5c18:	004b      	lsls	r3, r1, #1
    5c1a:	1ac0      	subs	r0, r0, r3
    5c1c:	4152      	adcs	r2, r2
    5c1e:	1a41      	subs	r1, r0, r1
    5c20:	d200      	bcs.n	5c24 <__udivsi3+0xf8>
    5c22:	4601      	mov	r1, r0
    5c24:	4152      	adcs	r2, r2
    5c26:	4610      	mov	r0, r2
    5c28:	4770      	bx	lr
    5c2a:	e7ff      	b.n	5c2c <__udivsi3+0x100>
    5c2c:	b501      	push	{r0, lr}
    5c2e:	2000      	movs	r0, #0
    5c30:	f000 f8f0 	bl	5e14 <__aeabi_idiv0>
    5c34:	bd02      	pop	{r1, pc}
    5c36:	46c0      	nop			; (mov r8, r8)

00005c38 <__aeabi_uidivmod>:
    5c38:	2900      	cmp	r1, #0
    5c3a:	d0f7      	beq.n	5c2c <__udivsi3+0x100>
    5c3c:	e776      	b.n	5b2c <__udivsi3>
    5c3e:	4770      	bx	lr

00005c40 <__divsi3>:
    5c40:	4603      	mov	r3, r0
    5c42:	430b      	orrs	r3, r1
    5c44:	d47f      	bmi.n	5d46 <__divsi3+0x106>
    5c46:	2200      	movs	r2, #0
    5c48:	0843      	lsrs	r3, r0, #1
    5c4a:	428b      	cmp	r3, r1
    5c4c:	d374      	bcc.n	5d38 <__divsi3+0xf8>
    5c4e:	0903      	lsrs	r3, r0, #4
    5c50:	428b      	cmp	r3, r1
    5c52:	d35f      	bcc.n	5d14 <__divsi3+0xd4>
    5c54:	0a03      	lsrs	r3, r0, #8
    5c56:	428b      	cmp	r3, r1
    5c58:	d344      	bcc.n	5ce4 <__divsi3+0xa4>
    5c5a:	0b03      	lsrs	r3, r0, #12
    5c5c:	428b      	cmp	r3, r1
    5c5e:	d328      	bcc.n	5cb2 <__divsi3+0x72>
    5c60:	0c03      	lsrs	r3, r0, #16
    5c62:	428b      	cmp	r3, r1
    5c64:	d30d      	bcc.n	5c82 <__divsi3+0x42>
    5c66:	22ff      	movs	r2, #255	; 0xff
    5c68:	0209      	lsls	r1, r1, #8
    5c6a:	ba12      	rev	r2, r2
    5c6c:	0c03      	lsrs	r3, r0, #16
    5c6e:	428b      	cmp	r3, r1
    5c70:	d302      	bcc.n	5c78 <__divsi3+0x38>
    5c72:	1212      	asrs	r2, r2, #8
    5c74:	0209      	lsls	r1, r1, #8
    5c76:	d065      	beq.n	5d44 <__divsi3+0x104>
    5c78:	0b03      	lsrs	r3, r0, #12
    5c7a:	428b      	cmp	r3, r1
    5c7c:	d319      	bcc.n	5cb2 <__divsi3+0x72>
    5c7e:	e000      	b.n	5c82 <__divsi3+0x42>
    5c80:	0a09      	lsrs	r1, r1, #8
    5c82:	0bc3      	lsrs	r3, r0, #15
    5c84:	428b      	cmp	r3, r1
    5c86:	d301      	bcc.n	5c8c <__divsi3+0x4c>
    5c88:	03cb      	lsls	r3, r1, #15
    5c8a:	1ac0      	subs	r0, r0, r3
    5c8c:	4152      	adcs	r2, r2
    5c8e:	0b83      	lsrs	r3, r0, #14
    5c90:	428b      	cmp	r3, r1
    5c92:	d301      	bcc.n	5c98 <__divsi3+0x58>
    5c94:	038b      	lsls	r3, r1, #14
    5c96:	1ac0      	subs	r0, r0, r3
    5c98:	4152      	adcs	r2, r2
    5c9a:	0b43      	lsrs	r3, r0, #13
    5c9c:	428b      	cmp	r3, r1
    5c9e:	d301      	bcc.n	5ca4 <__divsi3+0x64>
    5ca0:	034b      	lsls	r3, r1, #13
    5ca2:	1ac0      	subs	r0, r0, r3
    5ca4:	4152      	adcs	r2, r2
    5ca6:	0b03      	lsrs	r3, r0, #12
    5ca8:	428b      	cmp	r3, r1
    5caa:	d301      	bcc.n	5cb0 <__divsi3+0x70>
    5cac:	030b      	lsls	r3, r1, #12
    5cae:	1ac0      	subs	r0, r0, r3
    5cb0:	4152      	adcs	r2, r2
    5cb2:	0ac3      	lsrs	r3, r0, #11
    5cb4:	428b      	cmp	r3, r1
    5cb6:	d301      	bcc.n	5cbc <__divsi3+0x7c>
    5cb8:	02cb      	lsls	r3, r1, #11
    5cba:	1ac0      	subs	r0, r0, r3
    5cbc:	4152      	adcs	r2, r2
    5cbe:	0a83      	lsrs	r3, r0, #10
    5cc0:	428b      	cmp	r3, r1
    5cc2:	d301      	bcc.n	5cc8 <__divsi3+0x88>
    5cc4:	028b      	lsls	r3, r1, #10
    5cc6:	1ac0      	subs	r0, r0, r3
    5cc8:	4152      	adcs	r2, r2
    5cca:	0a43      	lsrs	r3, r0, #9
    5ccc:	428b      	cmp	r3, r1
    5cce:	d301      	bcc.n	5cd4 <__divsi3+0x94>
    5cd0:	024b      	lsls	r3, r1, #9
    5cd2:	1ac0      	subs	r0, r0, r3
    5cd4:	4152      	adcs	r2, r2
    5cd6:	0a03      	lsrs	r3, r0, #8
    5cd8:	428b      	cmp	r3, r1
    5cda:	d301      	bcc.n	5ce0 <__divsi3+0xa0>
    5cdc:	020b      	lsls	r3, r1, #8
    5cde:	1ac0      	subs	r0, r0, r3
    5ce0:	4152      	adcs	r2, r2
    5ce2:	d2cd      	bcs.n	5c80 <__divsi3+0x40>
    5ce4:	09c3      	lsrs	r3, r0, #7
    5ce6:	428b      	cmp	r3, r1
    5ce8:	d301      	bcc.n	5cee <__divsi3+0xae>
    5cea:	01cb      	lsls	r3, r1, #7
    5cec:	1ac0      	subs	r0, r0, r3
    5cee:	4152      	adcs	r2, r2
    5cf0:	0983      	lsrs	r3, r0, #6
    5cf2:	428b      	cmp	r3, r1
    5cf4:	d301      	bcc.n	5cfa <__divsi3+0xba>
    5cf6:	018b      	lsls	r3, r1, #6
    5cf8:	1ac0      	subs	r0, r0, r3
    5cfa:	4152      	adcs	r2, r2
    5cfc:	0943      	lsrs	r3, r0, #5
    5cfe:	428b      	cmp	r3, r1
    5d00:	d301      	bcc.n	5d06 <__divsi3+0xc6>
    5d02:	014b      	lsls	r3, r1, #5
    5d04:	1ac0      	subs	r0, r0, r3
    5d06:	4152      	adcs	r2, r2
    5d08:	0903      	lsrs	r3, r0, #4
    5d0a:	428b      	cmp	r3, r1
    5d0c:	d301      	bcc.n	5d12 <__divsi3+0xd2>
    5d0e:	010b      	lsls	r3, r1, #4
    5d10:	1ac0      	subs	r0, r0, r3
    5d12:	4152      	adcs	r2, r2
    5d14:	08c3      	lsrs	r3, r0, #3
    5d16:	428b      	cmp	r3, r1
    5d18:	d301      	bcc.n	5d1e <__divsi3+0xde>
    5d1a:	00cb      	lsls	r3, r1, #3
    5d1c:	1ac0      	subs	r0, r0, r3
    5d1e:	4152      	adcs	r2, r2
    5d20:	0883      	lsrs	r3, r0, #2
    5d22:	428b      	cmp	r3, r1
    5d24:	d301      	bcc.n	5d2a <__divsi3+0xea>
    5d26:	008b      	lsls	r3, r1, #2
    5d28:	1ac0      	subs	r0, r0, r3
    5d2a:	4152      	adcs	r2, r2
    5d2c:	0843      	lsrs	r3, r0, #1
    5d2e:	428b      	cmp	r3, r1
    5d30:	d301      	bcc.n	5d36 <__divsi3+0xf6>
    5d32:	004b      	lsls	r3, r1, #1
    5d34:	1ac0      	subs	r0, r0, r3
    5d36:	4152      	adcs	r2, r2
    5d38:	1a41      	subs	r1, r0, r1
    5d3a:	d200      	bcs.n	5d3e <__divsi3+0xfe>
    5d3c:	4601      	mov	r1, r0
    5d3e:	4152      	adcs	r2, r2
    5d40:	4610      	mov	r0, r2
    5d42:	4770      	bx	lr
    5d44:	e05d      	b.n	5e02 <__divsi3+0x1c2>
    5d46:	0fca      	lsrs	r2, r1, #31
    5d48:	d000      	beq.n	5d4c <__divsi3+0x10c>
    5d4a:	4249      	negs	r1, r1
    5d4c:	1003      	asrs	r3, r0, #32
    5d4e:	d300      	bcc.n	5d52 <__divsi3+0x112>
    5d50:	4240      	negs	r0, r0
    5d52:	4053      	eors	r3, r2
    5d54:	2200      	movs	r2, #0
    5d56:	469c      	mov	ip, r3
    5d58:	0903      	lsrs	r3, r0, #4
    5d5a:	428b      	cmp	r3, r1
    5d5c:	d32d      	bcc.n	5dba <__divsi3+0x17a>
    5d5e:	0a03      	lsrs	r3, r0, #8
    5d60:	428b      	cmp	r3, r1
    5d62:	d312      	bcc.n	5d8a <__divsi3+0x14a>
    5d64:	22fc      	movs	r2, #252	; 0xfc
    5d66:	0189      	lsls	r1, r1, #6
    5d68:	ba12      	rev	r2, r2
    5d6a:	0a03      	lsrs	r3, r0, #8
    5d6c:	428b      	cmp	r3, r1
    5d6e:	d30c      	bcc.n	5d8a <__divsi3+0x14a>
    5d70:	0189      	lsls	r1, r1, #6
    5d72:	1192      	asrs	r2, r2, #6
    5d74:	428b      	cmp	r3, r1
    5d76:	d308      	bcc.n	5d8a <__divsi3+0x14a>
    5d78:	0189      	lsls	r1, r1, #6
    5d7a:	1192      	asrs	r2, r2, #6
    5d7c:	428b      	cmp	r3, r1
    5d7e:	d304      	bcc.n	5d8a <__divsi3+0x14a>
    5d80:	0189      	lsls	r1, r1, #6
    5d82:	d03a      	beq.n	5dfa <__divsi3+0x1ba>
    5d84:	1192      	asrs	r2, r2, #6
    5d86:	e000      	b.n	5d8a <__divsi3+0x14a>
    5d88:	0989      	lsrs	r1, r1, #6
    5d8a:	09c3      	lsrs	r3, r0, #7
    5d8c:	428b      	cmp	r3, r1
    5d8e:	d301      	bcc.n	5d94 <__divsi3+0x154>
    5d90:	01cb      	lsls	r3, r1, #7
    5d92:	1ac0      	subs	r0, r0, r3
    5d94:	4152      	adcs	r2, r2
    5d96:	0983      	lsrs	r3, r0, #6
    5d98:	428b      	cmp	r3, r1
    5d9a:	d301      	bcc.n	5da0 <__divsi3+0x160>
    5d9c:	018b      	lsls	r3, r1, #6
    5d9e:	1ac0      	subs	r0, r0, r3
    5da0:	4152      	adcs	r2, r2
    5da2:	0943      	lsrs	r3, r0, #5
    5da4:	428b      	cmp	r3, r1
    5da6:	d301      	bcc.n	5dac <__divsi3+0x16c>
    5da8:	014b      	lsls	r3, r1, #5
    5daa:	1ac0      	subs	r0, r0, r3
    5dac:	4152      	adcs	r2, r2
    5dae:	0903      	lsrs	r3, r0, #4
    5db0:	428b      	cmp	r3, r1
    5db2:	d301      	bcc.n	5db8 <__divsi3+0x178>
    5db4:	010b      	lsls	r3, r1, #4
    5db6:	1ac0      	subs	r0, r0, r3
    5db8:	4152      	adcs	r2, r2
    5dba:	08c3      	lsrs	r3, r0, #3
    5dbc:	428b      	cmp	r3, r1
    5dbe:	d301      	bcc.n	5dc4 <__divsi3+0x184>
    5dc0:	00cb      	lsls	r3, r1, #3
    5dc2:	1ac0      	subs	r0, r0, r3
    5dc4:	4152      	adcs	r2, r2
    5dc6:	0883      	lsrs	r3, r0, #2
    5dc8:	428b      	cmp	r3, r1
    5dca:	d301      	bcc.n	5dd0 <__divsi3+0x190>
    5dcc:	008b      	lsls	r3, r1, #2
    5dce:	1ac0      	subs	r0, r0, r3
    5dd0:	4152      	adcs	r2, r2
    5dd2:	d2d9      	bcs.n	5d88 <__divsi3+0x148>
    5dd4:	0843      	lsrs	r3, r0, #1
    5dd6:	428b      	cmp	r3, r1
    5dd8:	d301      	bcc.n	5dde <__divsi3+0x19e>
    5dda:	004b      	lsls	r3, r1, #1
    5ddc:	1ac0      	subs	r0, r0, r3
    5dde:	4152      	adcs	r2, r2
    5de0:	1a41      	subs	r1, r0, r1
    5de2:	d200      	bcs.n	5de6 <__divsi3+0x1a6>
    5de4:	4601      	mov	r1, r0
    5de6:	4663      	mov	r3, ip
    5de8:	4152      	adcs	r2, r2
    5dea:	105b      	asrs	r3, r3, #1
    5dec:	4610      	mov	r0, r2
    5dee:	d301      	bcc.n	5df4 <__divsi3+0x1b4>
    5df0:	4240      	negs	r0, r0
    5df2:	2b00      	cmp	r3, #0
    5df4:	d500      	bpl.n	5df8 <__divsi3+0x1b8>
    5df6:	4249      	negs	r1, r1
    5df8:	4770      	bx	lr
    5dfa:	4663      	mov	r3, ip
    5dfc:	105b      	asrs	r3, r3, #1
    5dfe:	d300      	bcc.n	5e02 <__divsi3+0x1c2>
    5e00:	4240      	negs	r0, r0
    5e02:	b501      	push	{r0, lr}
    5e04:	2000      	movs	r0, #0
    5e06:	f000 f805 	bl	5e14 <__aeabi_idiv0>
    5e0a:	bd02      	pop	{r1, pc}

00005e0c <__aeabi_idivmod>:
    5e0c:	2900      	cmp	r1, #0
    5e0e:	d0f8      	beq.n	5e02 <__divsi3+0x1c2>
    5e10:	e716      	b.n	5c40 <__divsi3>
    5e12:	4770      	bx	lr

00005e14 <__aeabi_idiv0>:
    5e14:	4770      	bx	lr
    5e16:	46c0      	nop			; (mov r8, r8)

00005e18 <__aeabi_lmul>:
    5e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e1a:	46ce      	mov	lr, r9
    5e1c:	4647      	mov	r7, r8
    5e1e:	0415      	lsls	r5, r2, #16
    5e20:	0c2d      	lsrs	r5, r5, #16
    5e22:	002e      	movs	r6, r5
    5e24:	b580      	push	{r7, lr}
    5e26:	0407      	lsls	r7, r0, #16
    5e28:	0c14      	lsrs	r4, r2, #16
    5e2a:	0c3f      	lsrs	r7, r7, #16
    5e2c:	4699      	mov	r9, r3
    5e2e:	0c03      	lsrs	r3, r0, #16
    5e30:	437e      	muls	r6, r7
    5e32:	435d      	muls	r5, r3
    5e34:	4367      	muls	r7, r4
    5e36:	4363      	muls	r3, r4
    5e38:	197f      	adds	r7, r7, r5
    5e3a:	0c34      	lsrs	r4, r6, #16
    5e3c:	19e4      	adds	r4, r4, r7
    5e3e:	469c      	mov	ip, r3
    5e40:	42a5      	cmp	r5, r4
    5e42:	d903      	bls.n	5e4c <__aeabi_lmul+0x34>
    5e44:	2380      	movs	r3, #128	; 0x80
    5e46:	025b      	lsls	r3, r3, #9
    5e48:	4698      	mov	r8, r3
    5e4a:	44c4      	add	ip, r8
    5e4c:	464b      	mov	r3, r9
    5e4e:	4351      	muls	r1, r2
    5e50:	4343      	muls	r3, r0
    5e52:	0436      	lsls	r6, r6, #16
    5e54:	0c36      	lsrs	r6, r6, #16
    5e56:	0c25      	lsrs	r5, r4, #16
    5e58:	0424      	lsls	r4, r4, #16
    5e5a:	4465      	add	r5, ip
    5e5c:	19a4      	adds	r4, r4, r6
    5e5e:	1859      	adds	r1, r3, r1
    5e60:	1949      	adds	r1, r1, r5
    5e62:	0020      	movs	r0, r4
    5e64:	bc0c      	pop	{r2, r3}
    5e66:	4690      	mov	r8, r2
    5e68:	4699      	mov	r9, r3
    5e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005e6c <__libc_init_array>:
    5e6c:	b570      	push	{r4, r5, r6, lr}
    5e6e:	2600      	movs	r6, #0
    5e70:	4d0c      	ldr	r5, [pc, #48]	; (5ea4 <__libc_init_array+0x38>)
    5e72:	4c0d      	ldr	r4, [pc, #52]	; (5ea8 <__libc_init_array+0x3c>)
    5e74:	1b64      	subs	r4, r4, r5
    5e76:	10a4      	asrs	r4, r4, #2
    5e78:	42a6      	cmp	r6, r4
    5e7a:	d109      	bne.n	5e90 <__libc_init_array+0x24>
    5e7c:	2600      	movs	r6, #0
    5e7e:	f005 f83d 	bl	aefc <_init>
    5e82:	4d0a      	ldr	r5, [pc, #40]	; (5eac <__libc_init_array+0x40>)
    5e84:	4c0a      	ldr	r4, [pc, #40]	; (5eb0 <__libc_init_array+0x44>)
    5e86:	1b64      	subs	r4, r4, r5
    5e88:	10a4      	asrs	r4, r4, #2
    5e8a:	42a6      	cmp	r6, r4
    5e8c:	d105      	bne.n	5e9a <__libc_init_array+0x2e>
    5e8e:	bd70      	pop	{r4, r5, r6, pc}
    5e90:	00b3      	lsls	r3, r6, #2
    5e92:	58eb      	ldr	r3, [r5, r3]
    5e94:	4798      	blx	r3
    5e96:	3601      	adds	r6, #1
    5e98:	e7ee      	b.n	5e78 <__libc_init_array+0xc>
    5e9a:	00b3      	lsls	r3, r6, #2
    5e9c:	58eb      	ldr	r3, [r5, r3]
    5e9e:	4798      	blx	r3
    5ea0:	3601      	adds	r6, #1
    5ea2:	e7f2      	b.n	5e8a <__libc_init_array+0x1e>
    5ea4:	0000af08 	.word	0x0000af08
    5ea8:	0000af08 	.word	0x0000af08
    5eac:	0000af08 	.word	0x0000af08
    5eb0:	0000af0c 	.word	0x0000af0c

00005eb4 <malloc>:
    5eb4:	b510      	push	{r4, lr}
    5eb6:	4b03      	ldr	r3, [pc, #12]	; (5ec4 <malloc+0x10>)
    5eb8:	0001      	movs	r1, r0
    5eba:	6818      	ldr	r0, [r3, #0]
    5ebc:	f000 f872 	bl	5fa4 <_malloc_r>
    5ec0:	bd10      	pop	{r4, pc}
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	20000108 	.word	0x20000108

00005ec8 <memcpy>:
    5ec8:	2300      	movs	r3, #0
    5eca:	b510      	push	{r4, lr}
    5ecc:	429a      	cmp	r2, r3
    5ece:	d100      	bne.n	5ed2 <memcpy+0xa>
    5ed0:	bd10      	pop	{r4, pc}
    5ed2:	5ccc      	ldrb	r4, [r1, r3]
    5ed4:	54c4      	strb	r4, [r0, r3]
    5ed6:	3301      	adds	r3, #1
    5ed8:	e7f8      	b.n	5ecc <memcpy+0x4>

00005eda <memmove>:
    5eda:	b510      	push	{r4, lr}
    5edc:	4288      	cmp	r0, r1
    5ede:	d902      	bls.n	5ee6 <memmove+0xc>
    5ee0:	188b      	adds	r3, r1, r2
    5ee2:	4298      	cmp	r0, r3
    5ee4:	d308      	bcc.n	5ef8 <memmove+0x1e>
    5ee6:	2300      	movs	r3, #0
    5ee8:	429a      	cmp	r2, r3
    5eea:	d007      	beq.n	5efc <memmove+0x22>
    5eec:	5ccc      	ldrb	r4, [r1, r3]
    5eee:	54c4      	strb	r4, [r0, r3]
    5ef0:	3301      	adds	r3, #1
    5ef2:	e7f9      	b.n	5ee8 <memmove+0xe>
    5ef4:	5c8b      	ldrb	r3, [r1, r2]
    5ef6:	5483      	strb	r3, [r0, r2]
    5ef8:	3a01      	subs	r2, #1
    5efa:	d2fb      	bcs.n	5ef4 <memmove+0x1a>
    5efc:	bd10      	pop	{r4, pc}

00005efe <memset>:
    5efe:	0003      	movs	r3, r0
    5f00:	1882      	adds	r2, r0, r2
    5f02:	4293      	cmp	r3, r2
    5f04:	d100      	bne.n	5f08 <memset+0xa>
    5f06:	4770      	bx	lr
    5f08:	7019      	strb	r1, [r3, #0]
    5f0a:	3301      	adds	r3, #1
    5f0c:	e7f9      	b.n	5f02 <memset+0x4>
	...

00005f10 <_free_r>:
    5f10:	b570      	push	{r4, r5, r6, lr}
    5f12:	0005      	movs	r5, r0
    5f14:	2900      	cmp	r1, #0
    5f16:	d010      	beq.n	5f3a <_free_r+0x2a>
    5f18:	1f0c      	subs	r4, r1, #4
    5f1a:	6823      	ldr	r3, [r4, #0]
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	da00      	bge.n	5f22 <_free_r+0x12>
    5f20:	18e4      	adds	r4, r4, r3
    5f22:	0028      	movs	r0, r5
    5f24:	f000 fcf8 	bl	6918 <__malloc_lock>
    5f28:	4a1d      	ldr	r2, [pc, #116]	; (5fa0 <_free_r+0x90>)
    5f2a:	6813      	ldr	r3, [r2, #0]
    5f2c:	2b00      	cmp	r3, #0
    5f2e:	d105      	bne.n	5f3c <_free_r+0x2c>
    5f30:	6063      	str	r3, [r4, #4]
    5f32:	6014      	str	r4, [r2, #0]
    5f34:	0028      	movs	r0, r5
    5f36:	f000 fcf0 	bl	691a <__malloc_unlock>
    5f3a:	bd70      	pop	{r4, r5, r6, pc}
    5f3c:	42a3      	cmp	r3, r4
    5f3e:	d909      	bls.n	5f54 <_free_r+0x44>
    5f40:	6821      	ldr	r1, [r4, #0]
    5f42:	1860      	adds	r0, r4, r1
    5f44:	4283      	cmp	r3, r0
    5f46:	d1f3      	bne.n	5f30 <_free_r+0x20>
    5f48:	6818      	ldr	r0, [r3, #0]
    5f4a:	685b      	ldr	r3, [r3, #4]
    5f4c:	1841      	adds	r1, r0, r1
    5f4e:	6021      	str	r1, [r4, #0]
    5f50:	e7ee      	b.n	5f30 <_free_r+0x20>
    5f52:	0013      	movs	r3, r2
    5f54:	685a      	ldr	r2, [r3, #4]
    5f56:	2a00      	cmp	r2, #0
    5f58:	d001      	beq.n	5f5e <_free_r+0x4e>
    5f5a:	42a2      	cmp	r2, r4
    5f5c:	d9f9      	bls.n	5f52 <_free_r+0x42>
    5f5e:	6819      	ldr	r1, [r3, #0]
    5f60:	1858      	adds	r0, r3, r1
    5f62:	42a0      	cmp	r0, r4
    5f64:	d10b      	bne.n	5f7e <_free_r+0x6e>
    5f66:	6820      	ldr	r0, [r4, #0]
    5f68:	1809      	adds	r1, r1, r0
    5f6a:	1858      	adds	r0, r3, r1
    5f6c:	6019      	str	r1, [r3, #0]
    5f6e:	4282      	cmp	r2, r0
    5f70:	d1e0      	bne.n	5f34 <_free_r+0x24>
    5f72:	6810      	ldr	r0, [r2, #0]
    5f74:	6852      	ldr	r2, [r2, #4]
    5f76:	1841      	adds	r1, r0, r1
    5f78:	6019      	str	r1, [r3, #0]
    5f7a:	605a      	str	r2, [r3, #4]
    5f7c:	e7da      	b.n	5f34 <_free_r+0x24>
    5f7e:	42a0      	cmp	r0, r4
    5f80:	d902      	bls.n	5f88 <_free_r+0x78>
    5f82:	230c      	movs	r3, #12
    5f84:	602b      	str	r3, [r5, #0]
    5f86:	e7d5      	b.n	5f34 <_free_r+0x24>
    5f88:	6821      	ldr	r1, [r4, #0]
    5f8a:	1860      	adds	r0, r4, r1
    5f8c:	4282      	cmp	r2, r0
    5f8e:	d103      	bne.n	5f98 <_free_r+0x88>
    5f90:	6810      	ldr	r0, [r2, #0]
    5f92:	6852      	ldr	r2, [r2, #4]
    5f94:	1841      	adds	r1, r0, r1
    5f96:	6021      	str	r1, [r4, #0]
    5f98:	6062      	str	r2, [r4, #4]
    5f9a:	605c      	str	r4, [r3, #4]
    5f9c:	e7ca      	b.n	5f34 <_free_r+0x24>
    5f9e:	46c0      	nop			; (mov r8, r8)
    5fa0:	20000d10 	.word	0x20000d10

00005fa4 <_malloc_r>:
    5fa4:	2303      	movs	r3, #3
    5fa6:	b570      	push	{r4, r5, r6, lr}
    5fa8:	1ccd      	adds	r5, r1, #3
    5faa:	439d      	bics	r5, r3
    5fac:	3508      	adds	r5, #8
    5fae:	0006      	movs	r6, r0
    5fb0:	2d0c      	cmp	r5, #12
    5fb2:	d21e      	bcs.n	5ff2 <_malloc_r+0x4e>
    5fb4:	250c      	movs	r5, #12
    5fb6:	42a9      	cmp	r1, r5
    5fb8:	d81d      	bhi.n	5ff6 <_malloc_r+0x52>
    5fba:	0030      	movs	r0, r6
    5fbc:	f000 fcac 	bl	6918 <__malloc_lock>
    5fc0:	4a25      	ldr	r2, [pc, #148]	; (6058 <_malloc_r+0xb4>)
    5fc2:	6814      	ldr	r4, [r2, #0]
    5fc4:	0021      	movs	r1, r4
    5fc6:	2900      	cmp	r1, #0
    5fc8:	d119      	bne.n	5ffe <_malloc_r+0x5a>
    5fca:	4c24      	ldr	r4, [pc, #144]	; (605c <_malloc_r+0xb8>)
    5fcc:	6823      	ldr	r3, [r4, #0]
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d103      	bne.n	5fda <_malloc_r+0x36>
    5fd2:	0030      	movs	r0, r6
    5fd4:	f000 f8c8 	bl	6168 <_sbrk_r>
    5fd8:	6020      	str	r0, [r4, #0]
    5fda:	0029      	movs	r1, r5
    5fdc:	0030      	movs	r0, r6
    5fde:	f000 f8c3 	bl	6168 <_sbrk_r>
    5fe2:	1c43      	adds	r3, r0, #1
    5fe4:	d12c      	bne.n	6040 <_malloc_r+0x9c>
    5fe6:	230c      	movs	r3, #12
    5fe8:	0030      	movs	r0, r6
    5fea:	6033      	str	r3, [r6, #0]
    5fec:	f000 fc95 	bl	691a <__malloc_unlock>
    5ff0:	e003      	b.n	5ffa <_malloc_r+0x56>
    5ff2:	2d00      	cmp	r5, #0
    5ff4:	dadf      	bge.n	5fb6 <_malloc_r+0x12>
    5ff6:	230c      	movs	r3, #12
    5ff8:	6033      	str	r3, [r6, #0]
    5ffa:	2000      	movs	r0, #0
    5ffc:	bd70      	pop	{r4, r5, r6, pc}
    5ffe:	680b      	ldr	r3, [r1, #0]
    6000:	1b5b      	subs	r3, r3, r5
    6002:	d41a      	bmi.n	603a <_malloc_r+0x96>
    6004:	2b0b      	cmp	r3, #11
    6006:	d903      	bls.n	6010 <_malloc_r+0x6c>
    6008:	600b      	str	r3, [r1, #0]
    600a:	18cc      	adds	r4, r1, r3
    600c:	6025      	str	r5, [r4, #0]
    600e:	e003      	b.n	6018 <_malloc_r+0x74>
    6010:	428c      	cmp	r4, r1
    6012:	d10e      	bne.n	6032 <_malloc_r+0x8e>
    6014:	6863      	ldr	r3, [r4, #4]
    6016:	6013      	str	r3, [r2, #0]
    6018:	0030      	movs	r0, r6
    601a:	f000 fc7e 	bl	691a <__malloc_unlock>
    601e:	0020      	movs	r0, r4
    6020:	2207      	movs	r2, #7
    6022:	300b      	adds	r0, #11
    6024:	1d23      	adds	r3, r4, #4
    6026:	4390      	bics	r0, r2
    6028:	1ac3      	subs	r3, r0, r3
    602a:	d0e7      	beq.n	5ffc <_malloc_r+0x58>
    602c:	425a      	negs	r2, r3
    602e:	50e2      	str	r2, [r4, r3]
    6030:	e7e4      	b.n	5ffc <_malloc_r+0x58>
    6032:	684b      	ldr	r3, [r1, #4]
    6034:	6063      	str	r3, [r4, #4]
    6036:	000c      	movs	r4, r1
    6038:	e7ee      	b.n	6018 <_malloc_r+0x74>
    603a:	000c      	movs	r4, r1
    603c:	6849      	ldr	r1, [r1, #4]
    603e:	e7c2      	b.n	5fc6 <_malloc_r+0x22>
    6040:	2303      	movs	r3, #3
    6042:	1cc4      	adds	r4, r0, #3
    6044:	439c      	bics	r4, r3
    6046:	42a0      	cmp	r0, r4
    6048:	d0e0      	beq.n	600c <_malloc_r+0x68>
    604a:	1a21      	subs	r1, r4, r0
    604c:	0030      	movs	r0, r6
    604e:	f000 f88b 	bl	6168 <_sbrk_r>
    6052:	1c43      	adds	r3, r0, #1
    6054:	d1da      	bne.n	600c <_malloc_r+0x68>
    6056:	e7c6      	b.n	5fe6 <_malloc_r+0x42>
    6058:	20000d10 	.word	0x20000d10
    605c:	20000d14 	.word	0x20000d14

00006060 <iprintf>:
    6060:	b40f      	push	{r0, r1, r2, r3}
    6062:	4b0b      	ldr	r3, [pc, #44]	; (6090 <iprintf+0x30>)
    6064:	b513      	push	{r0, r1, r4, lr}
    6066:	681c      	ldr	r4, [r3, #0]
    6068:	2c00      	cmp	r4, #0
    606a:	d005      	beq.n	6078 <iprintf+0x18>
    606c:	69a3      	ldr	r3, [r4, #24]
    606e:	2b00      	cmp	r3, #0
    6070:	d102      	bne.n	6078 <iprintf+0x18>
    6072:	0020      	movs	r0, r4
    6074:	f000 fb32 	bl	66dc <__sinit>
    6078:	ab05      	add	r3, sp, #20
    607a:	9a04      	ldr	r2, [sp, #16]
    607c:	68a1      	ldr	r1, [r4, #8]
    607e:	0020      	movs	r0, r4
    6080:	9301      	str	r3, [sp, #4]
    6082:	f000 fc73 	bl	696c <_vfiprintf_r>
    6086:	bc16      	pop	{r1, r2, r4}
    6088:	bc08      	pop	{r3}
    608a:	b004      	add	sp, #16
    608c:	4718      	bx	r3
    608e:	46c0      	nop			; (mov r8, r8)
    6090:	20000108 	.word	0x20000108

00006094 <_puts_r>:
    6094:	b570      	push	{r4, r5, r6, lr}
    6096:	0005      	movs	r5, r0
    6098:	000e      	movs	r6, r1
    609a:	2800      	cmp	r0, #0
    609c:	d004      	beq.n	60a8 <_puts_r+0x14>
    609e:	6983      	ldr	r3, [r0, #24]
    60a0:	2b00      	cmp	r3, #0
    60a2:	d101      	bne.n	60a8 <_puts_r+0x14>
    60a4:	f000 fb1a 	bl	66dc <__sinit>
    60a8:	69ab      	ldr	r3, [r5, #24]
    60aa:	68ac      	ldr	r4, [r5, #8]
    60ac:	2b00      	cmp	r3, #0
    60ae:	d102      	bne.n	60b6 <_puts_r+0x22>
    60b0:	0028      	movs	r0, r5
    60b2:	f000 fb13 	bl	66dc <__sinit>
    60b6:	4b24      	ldr	r3, [pc, #144]	; (6148 <_puts_r+0xb4>)
    60b8:	429c      	cmp	r4, r3
    60ba:	d10f      	bne.n	60dc <_puts_r+0x48>
    60bc:	686c      	ldr	r4, [r5, #4]
    60be:	89a3      	ldrh	r3, [r4, #12]
    60c0:	071b      	lsls	r3, r3, #28
    60c2:	d502      	bpl.n	60ca <_puts_r+0x36>
    60c4:	6923      	ldr	r3, [r4, #16]
    60c6:	2b00      	cmp	r3, #0
    60c8:	d120      	bne.n	610c <_puts_r+0x78>
    60ca:	0021      	movs	r1, r4
    60cc:	0028      	movs	r0, r5
    60ce:	f000 f983 	bl	63d8 <__swsetup_r>
    60d2:	2800      	cmp	r0, #0
    60d4:	d01a      	beq.n	610c <_puts_r+0x78>
    60d6:	2001      	movs	r0, #1
    60d8:	4240      	negs	r0, r0
    60da:	bd70      	pop	{r4, r5, r6, pc}
    60dc:	4b1b      	ldr	r3, [pc, #108]	; (614c <_puts_r+0xb8>)
    60de:	429c      	cmp	r4, r3
    60e0:	d101      	bne.n	60e6 <_puts_r+0x52>
    60e2:	68ac      	ldr	r4, [r5, #8]
    60e4:	e7eb      	b.n	60be <_puts_r+0x2a>
    60e6:	4b1a      	ldr	r3, [pc, #104]	; (6150 <_puts_r+0xbc>)
    60e8:	429c      	cmp	r4, r3
    60ea:	d1e8      	bne.n	60be <_puts_r+0x2a>
    60ec:	68ec      	ldr	r4, [r5, #12]
    60ee:	e7e6      	b.n	60be <_puts_r+0x2a>
    60f0:	3b01      	subs	r3, #1
    60f2:	3601      	adds	r6, #1
    60f4:	60a3      	str	r3, [r4, #8]
    60f6:	2b00      	cmp	r3, #0
    60f8:	da04      	bge.n	6104 <_puts_r+0x70>
    60fa:	69a2      	ldr	r2, [r4, #24]
    60fc:	4293      	cmp	r3, r2
    60fe:	db16      	blt.n	612e <_puts_r+0x9a>
    6100:	290a      	cmp	r1, #10
    6102:	d014      	beq.n	612e <_puts_r+0x9a>
    6104:	6823      	ldr	r3, [r4, #0]
    6106:	1c5a      	adds	r2, r3, #1
    6108:	6022      	str	r2, [r4, #0]
    610a:	7019      	strb	r1, [r3, #0]
    610c:	7831      	ldrb	r1, [r6, #0]
    610e:	68a3      	ldr	r3, [r4, #8]
    6110:	2900      	cmp	r1, #0
    6112:	d1ed      	bne.n	60f0 <_puts_r+0x5c>
    6114:	3b01      	subs	r3, #1
    6116:	60a3      	str	r3, [r4, #8]
    6118:	2b00      	cmp	r3, #0
    611a:	da0f      	bge.n	613c <_puts_r+0xa8>
    611c:	0022      	movs	r2, r4
    611e:	310a      	adds	r1, #10
    6120:	0028      	movs	r0, r5
    6122:	f000 f903 	bl	632c <__swbuf_r>
    6126:	1c43      	adds	r3, r0, #1
    6128:	d0d5      	beq.n	60d6 <_puts_r+0x42>
    612a:	200a      	movs	r0, #10
    612c:	e7d5      	b.n	60da <_puts_r+0x46>
    612e:	0022      	movs	r2, r4
    6130:	0028      	movs	r0, r5
    6132:	f000 f8fb 	bl	632c <__swbuf_r>
    6136:	1c43      	adds	r3, r0, #1
    6138:	d1e8      	bne.n	610c <_puts_r+0x78>
    613a:	e7cc      	b.n	60d6 <_puts_r+0x42>
    613c:	200a      	movs	r0, #10
    613e:	6823      	ldr	r3, [r4, #0]
    6140:	1c5a      	adds	r2, r3, #1
    6142:	6022      	str	r2, [r4, #0]
    6144:	7018      	strb	r0, [r3, #0]
    6146:	e7c8      	b.n	60da <_puts_r+0x46>
    6148:	0000ad54 	.word	0x0000ad54
    614c:	0000ad74 	.word	0x0000ad74
    6150:	0000ad34 	.word	0x0000ad34

00006154 <puts>:
    6154:	b510      	push	{r4, lr}
    6156:	4b03      	ldr	r3, [pc, #12]	; (6164 <puts+0x10>)
    6158:	0001      	movs	r1, r0
    615a:	6818      	ldr	r0, [r3, #0]
    615c:	f7ff ff9a 	bl	6094 <_puts_r>
    6160:	bd10      	pop	{r4, pc}
    6162:	46c0      	nop			; (mov r8, r8)
    6164:	20000108 	.word	0x20000108

00006168 <_sbrk_r>:
    6168:	2300      	movs	r3, #0
    616a:	b570      	push	{r4, r5, r6, lr}
    616c:	4c06      	ldr	r4, [pc, #24]	; (6188 <_sbrk_r+0x20>)
    616e:	0005      	movs	r5, r0
    6170:	0008      	movs	r0, r1
    6172:	6023      	str	r3, [r4, #0]
    6174:	f7fb fb64 	bl	1840 <_sbrk>
    6178:	1c43      	adds	r3, r0, #1
    617a:	d103      	bne.n	6184 <_sbrk_r+0x1c>
    617c:	6823      	ldr	r3, [r4, #0]
    617e:	2b00      	cmp	r3, #0
    6180:	d000      	beq.n	6184 <_sbrk_r+0x1c>
    6182:	602b      	str	r3, [r5, #0]
    6184:	bd70      	pop	{r4, r5, r6, pc}
    6186:	46c0      	nop			; (mov r8, r8)
    6188:	200012a0 	.word	0x200012a0

0000618c <iscanf>:
    618c:	b40f      	push	{r0, r1, r2, r3}
    618e:	4b0b      	ldr	r3, [pc, #44]	; (61bc <iscanf+0x30>)
    6190:	b513      	push	{r0, r1, r4, lr}
    6192:	681c      	ldr	r4, [r3, #0]
    6194:	2c00      	cmp	r4, #0
    6196:	d005      	beq.n	61a4 <iscanf+0x18>
    6198:	69a3      	ldr	r3, [r4, #24]
    619a:	2b00      	cmp	r3, #0
    619c:	d102      	bne.n	61a4 <iscanf+0x18>
    619e:	0020      	movs	r0, r4
    61a0:	f000 fa9c 	bl	66dc <__sinit>
    61a4:	ab05      	add	r3, sp, #20
    61a6:	9a04      	ldr	r2, [sp, #16]
    61a8:	6861      	ldr	r1, [r4, #4]
    61aa:	0020      	movs	r0, r4
    61ac:	9301      	str	r3, [sp, #4]
    61ae:	f001 f807 	bl	71c0 <_vfiscanf_r>
    61b2:	bc16      	pop	{r1, r2, r4}
    61b4:	bc08      	pop	{r3}
    61b6:	b004      	add	sp, #16
    61b8:	4718      	bx	r3
    61ba:	46c0      	nop			; (mov r8, r8)
    61bc:	20000108 	.word	0x20000108

000061c0 <setbuf>:
    61c0:	424a      	negs	r2, r1
    61c2:	414a      	adcs	r2, r1
    61c4:	2380      	movs	r3, #128	; 0x80
    61c6:	b510      	push	{r4, lr}
    61c8:	0052      	lsls	r2, r2, #1
    61ca:	00db      	lsls	r3, r3, #3
    61cc:	f000 f802 	bl	61d4 <setvbuf>
    61d0:	bd10      	pop	{r4, pc}
	...

000061d4 <setvbuf>:
    61d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    61d6:	001d      	movs	r5, r3
    61d8:	4b4f      	ldr	r3, [pc, #316]	; (6318 <setvbuf+0x144>)
    61da:	b085      	sub	sp, #20
    61dc:	681e      	ldr	r6, [r3, #0]
    61de:	0004      	movs	r4, r0
    61e0:	000f      	movs	r7, r1
    61e2:	9200      	str	r2, [sp, #0]
    61e4:	2e00      	cmp	r6, #0
    61e6:	d005      	beq.n	61f4 <setvbuf+0x20>
    61e8:	69b3      	ldr	r3, [r6, #24]
    61ea:	2b00      	cmp	r3, #0
    61ec:	d102      	bne.n	61f4 <setvbuf+0x20>
    61ee:	0030      	movs	r0, r6
    61f0:	f000 fa74 	bl	66dc <__sinit>
    61f4:	4b49      	ldr	r3, [pc, #292]	; (631c <setvbuf+0x148>)
    61f6:	429c      	cmp	r4, r3
    61f8:	d150      	bne.n	629c <setvbuf+0xc8>
    61fa:	6874      	ldr	r4, [r6, #4]
    61fc:	9b00      	ldr	r3, [sp, #0]
    61fe:	2b02      	cmp	r3, #2
    6200:	d005      	beq.n	620e <setvbuf+0x3a>
    6202:	2b01      	cmp	r3, #1
    6204:	d900      	bls.n	6208 <setvbuf+0x34>
    6206:	e084      	b.n	6312 <setvbuf+0x13e>
    6208:	2d00      	cmp	r5, #0
    620a:	da00      	bge.n	620e <setvbuf+0x3a>
    620c:	e081      	b.n	6312 <setvbuf+0x13e>
    620e:	0021      	movs	r1, r4
    6210:	0030      	movs	r0, r6
    6212:	f000 f9e1 	bl	65d8 <_fflush_r>
    6216:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6218:	2900      	cmp	r1, #0
    621a:	d008      	beq.n	622e <setvbuf+0x5a>
    621c:	0023      	movs	r3, r4
    621e:	3344      	adds	r3, #68	; 0x44
    6220:	4299      	cmp	r1, r3
    6222:	d002      	beq.n	622a <setvbuf+0x56>
    6224:	0030      	movs	r0, r6
    6226:	f7ff fe73 	bl	5f10 <_free_r>
    622a:	2300      	movs	r3, #0
    622c:	6363      	str	r3, [r4, #52]	; 0x34
    622e:	2300      	movs	r3, #0
    6230:	61a3      	str	r3, [r4, #24]
    6232:	6063      	str	r3, [r4, #4]
    6234:	89a3      	ldrh	r3, [r4, #12]
    6236:	061b      	lsls	r3, r3, #24
    6238:	d503      	bpl.n	6242 <setvbuf+0x6e>
    623a:	6921      	ldr	r1, [r4, #16]
    623c:	0030      	movs	r0, r6
    623e:	f7ff fe67 	bl	5f10 <_free_r>
    6242:	89a3      	ldrh	r3, [r4, #12]
    6244:	4a36      	ldr	r2, [pc, #216]	; (6320 <setvbuf+0x14c>)
    6246:	4013      	ands	r3, r2
    6248:	81a3      	strh	r3, [r4, #12]
    624a:	9b00      	ldr	r3, [sp, #0]
    624c:	2b02      	cmp	r3, #2
    624e:	d05a      	beq.n	6306 <setvbuf+0x132>
    6250:	ab03      	add	r3, sp, #12
    6252:	aa02      	add	r2, sp, #8
    6254:	0021      	movs	r1, r4
    6256:	0030      	movs	r0, r6
    6258:	f000 faf2 	bl	6840 <__swhatbuf_r>
    625c:	89a3      	ldrh	r3, [r4, #12]
    625e:	4318      	orrs	r0, r3
    6260:	81a0      	strh	r0, [r4, #12]
    6262:	2d00      	cmp	r5, #0
    6264:	d124      	bne.n	62b0 <setvbuf+0xdc>
    6266:	9d02      	ldr	r5, [sp, #8]
    6268:	0028      	movs	r0, r5
    626a:	f7ff fe23 	bl	5eb4 <malloc>
    626e:	9501      	str	r5, [sp, #4]
    6270:	1e07      	subs	r7, r0, #0
    6272:	d142      	bne.n	62fa <setvbuf+0x126>
    6274:	9b02      	ldr	r3, [sp, #8]
    6276:	9301      	str	r3, [sp, #4]
    6278:	42ab      	cmp	r3, r5
    627a:	d139      	bne.n	62f0 <setvbuf+0x11c>
    627c:	2001      	movs	r0, #1
    627e:	4240      	negs	r0, r0
    6280:	2302      	movs	r3, #2
    6282:	89a2      	ldrh	r2, [r4, #12]
    6284:	4313      	orrs	r3, r2
    6286:	81a3      	strh	r3, [r4, #12]
    6288:	2300      	movs	r3, #0
    628a:	60a3      	str	r3, [r4, #8]
    628c:	0023      	movs	r3, r4
    628e:	3347      	adds	r3, #71	; 0x47
    6290:	6023      	str	r3, [r4, #0]
    6292:	6123      	str	r3, [r4, #16]
    6294:	2301      	movs	r3, #1
    6296:	6163      	str	r3, [r4, #20]
    6298:	b005      	add	sp, #20
    629a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    629c:	4b21      	ldr	r3, [pc, #132]	; (6324 <setvbuf+0x150>)
    629e:	429c      	cmp	r4, r3
    62a0:	d101      	bne.n	62a6 <setvbuf+0xd2>
    62a2:	68b4      	ldr	r4, [r6, #8]
    62a4:	e7aa      	b.n	61fc <setvbuf+0x28>
    62a6:	4b20      	ldr	r3, [pc, #128]	; (6328 <setvbuf+0x154>)
    62a8:	429c      	cmp	r4, r3
    62aa:	d1a7      	bne.n	61fc <setvbuf+0x28>
    62ac:	68f4      	ldr	r4, [r6, #12]
    62ae:	e7a5      	b.n	61fc <setvbuf+0x28>
    62b0:	2f00      	cmp	r7, #0
    62b2:	d0d9      	beq.n	6268 <setvbuf+0x94>
    62b4:	69b3      	ldr	r3, [r6, #24]
    62b6:	2b00      	cmp	r3, #0
    62b8:	d102      	bne.n	62c0 <setvbuf+0xec>
    62ba:	0030      	movs	r0, r6
    62bc:	f000 fa0e 	bl	66dc <__sinit>
    62c0:	9b00      	ldr	r3, [sp, #0]
    62c2:	2b01      	cmp	r3, #1
    62c4:	d103      	bne.n	62ce <setvbuf+0xfa>
    62c6:	89a3      	ldrh	r3, [r4, #12]
    62c8:	9a00      	ldr	r2, [sp, #0]
    62ca:	431a      	orrs	r2, r3
    62cc:	81a2      	strh	r2, [r4, #12]
    62ce:	2008      	movs	r0, #8
    62d0:	89a3      	ldrh	r3, [r4, #12]
    62d2:	6027      	str	r7, [r4, #0]
    62d4:	6127      	str	r7, [r4, #16]
    62d6:	6165      	str	r5, [r4, #20]
    62d8:	4018      	ands	r0, r3
    62da:	d018      	beq.n	630e <setvbuf+0x13a>
    62dc:	2001      	movs	r0, #1
    62de:	4018      	ands	r0, r3
    62e0:	2300      	movs	r3, #0
    62e2:	4298      	cmp	r0, r3
    62e4:	d011      	beq.n	630a <setvbuf+0x136>
    62e6:	426d      	negs	r5, r5
    62e8:	60a3      	str	r3, [r4, #8]
    62ea:	61a5      	str	r5, [r4, #24]
    62ec:	0018      	movs	r0, r3
    62ee:	e7d3      	b.n	6298 <setvbuf+0xc4>
    62f0:	9801      	ldr	r0, [sp, #4]
    62f2:	f7ff fddf 	bl	5eb4 <malloc>
    62f6:	1e07      	subs	r7, r0, #0
    62f8:	d0c0      	beq.n	627c <setvbuf+0xa8>
    62fa:	2380      	movs	r3, #128	; 0x80
    62fc:	89a2      	ldrh	r2, [r4, #12]
    62fe:	9d01      	ldr	r5, [sp, #4]
    6300:	4313      	orrs	r3, r2
    6302:	81a3      	strh	r3, [r4, #12]
    6304:	e7d6      	b.n	62b4 <setvbuf+0xe0>
    6306:	2000      	movs	r0, #0
    6308:	e7ba      	b.n	6280 <setvbuf+0xac>
    630a:	60a5      	str	r5, [r4, #8]
    630c:	e7c4      	b.n	6298 <setvbuf+0xc4>
    630e:	60a0      	str	r0, [r4, #8]
    6310:	e7c2      	b.n	6298 <setvbuf+0xc4>
    6312:	2001      	movs	r0, #1
    6314:	4240      	negs	r0, r0
    6316:	e7bf      	b.n	6298 <setvbuf+0xc4>
    6318:	20000108 	.word	0x20000108
    631c:	0000ad54 	.word	0x0000ad54
    6320:	fffff35c 	.word	0xfffff35c
    6324:	0000ad74 	.word	0x0000ad74
    6328:	0000ad34 	.word	0x0000ad34

0000632c <__swbuf_r>:
    632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    632e:	0005      	movs	r5, r0
    6330:	000e      	movs	r6, r1
    6332:	0014      	movs	r4, r2
    6334:	2800      	cmp	r0, #0
    6336:	d004      	beq.n	6342 <__swbuf_r+0x16>
    6338:	6983      	ldr	r3, [r0, #24]
    633a:	2b00      	cmp	r3, #0
    633c:	d101      	bne.n	6342 <__swbuf_r+0x16>
    633e:	f000 f9cd 	bl	66dc <__sinit>
    6342:	4b22      	ldr	r3, [pc, #136]	; (63cc <__swbuf_r+0xa0>)
    6344:	429c      	cmp	r4, r3
    6346:	d12d      	bne.n	63a4 <__swbuf_r+0x78>
    6348:	686c      	ldr	r4, [r5, #4]
    634a:	69a3      	ldr	r3, [r4, #24]
    634c:	60a3      	str	r3, [r4, #8]
    634e:	89a3      	ldrh	r3, [r4, #12]
    6350:	071b      	lsls	r3, r3, #28
    6352:	d531      	bpl.n	63b8 <__swbuf_r+0x8c>
    6354:	6923      	ldr	r3, [r4, #16]
    6356:	2b00      	cmp	r3, #0
    6358:	d02e      	beq.n	63b8 <__swbuf_r+0x8c>
    635a:	6823      	ldr	r3, [r4, #0]
    635c:	6922      	ldr	r2, [r4, #16]
    635e:	b2f7      	uxtb	r7, r6
    6360:	1a98      	subs	r0, r3, r2
    6362:	6963      	ldr	r3, [r4, #20]
    6364:	b2f6      	uxtb	r6, r6
    6366:	4298      	cmp	r0, r3
    6368:	db05      	blt.n	6376 <__swbuf_r+0x4a>
    636a:	0021      	movs	r1, r4
    636c:	0028      	movs	r0, r5
    636e:	f000 f933 	bl	65d8 <_fflush_r>
    6372:	2800      	cmp	r0, #0
    6374:	d126      	bne.n	63c4 <__swbuf_r+0x98>
    6376:	68a3      	ldr	r3, [r4, #8]
    6378:	3001      	adds	r0, #1
    637a:	3b01      	subs	r3, #1
    637c:	60a3      	str	r3, [r4, #8]
    637e:	6823      	ldr	r3, [r4, #0]
    6380:	1c5a      	adds	r2, r3, #1
    6382:	6022      	str	r2, [r4, #0]
    6384:	701f      	strb	r7, [r3, #0]
    6386:	6963      	ldr	r3, [r4, #20]
    6388:	4298      	cmp	r0, r3
    638a:	d004      	beq.n	6396 <__swbuf_r+0x6a>
    638c:	89a3      	ldrh	r3, [r4, #12]
    638e:	07db      	lsls	r3, r3, #31
    6390:	d51a      	bpl.n	63c8 <__swbuf_r+0x9c>
    6392:	2e0a      	cmp	r6, #10
    6394:	d118      	bne.n	63c8 <__swbuf_r+0x9c>
    6396:	0021      	movs	r1, r4
    6398:	0028      	movs	r0, r5
    639a:	f000 f91d 	bl	65d8 <_fflush_r>
    639e:	2800      	cmp	r0, #0
    63a0:	d012      	beq.n	63c8 <__swbuf_r+0x9c>
    63a2:	e00f      	b.n	63c4 <__swbuf_r+0x98>
    63a4:	4b0a      	ldr	r3, [pc, #40]	; (63d0 <__swbuf_r+0xa4>)
    63a6:	429c      	cmp	r4, r3
    63a8:	d101      	bne.n	63ae <__swbuf_r+0x82>
    63aa:	68ac      	ldr	r4, [r5, #8]
    63ac:	e7cd      	b.n	634a <__swbuf_r+0x1e>
    63ae:	4b09      	ldr	r3, [pc, #36]	; (63d4 <__swbuf_r+0xa8>)
    63b0:	429c      	cmp	r4, r3
    63b2:	d1ca      	bne.n	634a <__swbuf_r+0x1e>
    63b4:	68ec      	ldr	r4, [r5, #12]
    63b6:	e7c8      	b.n	634a <__swbuf_r+0x1e>
    63b8:	0021      	movs	r1, r4
    63ba:	0028      	movs	r0, r5
    63bc:	f000 f80c 	bl	63d8 <__swsetup_r>
    63c0:	2800      	cmp	r0, #0
    63c2:	d0ca      	beq.n	635a <__swbuf_r+0x2e>
    63c4:	2601      	movs	r6, #1
    63c6:	4276      	negs	r6, r6
    63c8:	0030      	movs	r0, r6
    63ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63cc:	0000ad54 	.word	0x0000ad54
    63d0:	0000ad74 	.word	0x0000ad74
    63d4:	0000ad34 	.word	0x0000ad34

000063d8 <__swsetup_r>:
    63d8:	4b36      	ldr	r3, [pc, #216]	; (64b4 <__swsetup_r+0xdc>)
    63da:	b570      	push	{r4, r5, r6, lr}
    63dc:	681d      	ldr	r5, [r3, #0]
    63de:	0006      	movs	r6, r0
    63e0:	000c      	movs	r4, r1
    63e2:	2d00      	cmp	r5, #0
    63e4:	d005      	beq.n	63f2 <__swsetup_r+0x1a>
    63e6:	69ab      	ldr	r3, [r5, #24]
    63e8:	2b00      	cmp	r3, #0
    63ea:	d102      	bne.n	63f2 <__swsetup_r+0x1a>
    63ec:	0028      	movs	r0, r5
    63ee:	f000 f975 	bl	66dc <__sinit>
    63f2:	4b31      	ldr	r3, [pc, #196]	; (64b8 <__swsetup_r+0xe0>)
    63f4:	429c      	cmp	r4, r3
    63f6:	d10f      	bne.n	6418 <__swsetup_r+0x40>
    63f8:	686c      	ldr	r4, [r5, #4]
    63fa:	230c      	movs	r3, #12
    63fc:	5ee2      	ldrsh	r2, [r4, r3]
    63fe:	b293      	uxth	r3, r2
    6400:	0719      	lsls	r1, r3, #28
    6402:	d42d      	bmi.n	6460 <__swsetup_r+0x88>
    6404:	06d9      	lsls	r1, r3, #27
    6406:	d411      	bmi.n	642c <__swsetup_r+0x54>
    6408:	2309      	movs	r3, #9
    640a:	2001      	movs	r0, #1
    640c:	6033      	str	r3, [r6, #0]
    640e:	3337      	adds	r3, #55	; 0x37
    6410:	4313      	orrs	r3, r2
    6412:	81a3      	strh	r3, [r4, #12]
    6414:	4240      	negs	r0, r0
    6416:	bd70      	pop	{r4, r5, r6, pc}
    6418:	4b28      	ldr	r3, [pc, #160]	; (64bc <__swsetup_r+0xe4>)
    641a:	429c      	cmp	r4, r3
    641c:	d101      	bne.n	6422 <__swsetup_r+0x4a>
    641e:	68ac      	ldr	r4, [r5, #8]
    6420:	e7eb      	b.n	63fa <__swsetup_r+0x22>
    6422:	4b27      	ldr	r3, [pc, #156]	; (64c0 <__swsetup_r+0xe8>)
    6424:	429c      	cmp	r4, r3
    6426:	d1e8      	bne.n	63fa <__swsetup_r+0x22>
    6428:	68ec      	ldr	r4, [r5, #12]
    642a:	e7e6      	b.n	63fa <__swsetup_r+0x22>
    642c:	075b      	lsls	r3, r3, #29
    642e:	d513      	bpl.n	6458 <__swsetup_r+0x80>
    6430:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6432:	2900      	cmp	r1, #0
    6434:	d008      	beq.n	6448 <__swsetup_r+0x70>
    6436:	0023      	movs	r3, r4
    6438:	3344      	adds	r3, #68	; 0x44
    643a:	4299      	cmp	r1, r3
    643c:	d002      	beq.n	6444 <__swsetup_r+0x6c>
    643e:	0030      	movs	r0, r6
    6440:	f7ff fd66 	bl	5f10 <_free_r>
    6444:	2300      	movs	r3, #0
    6446:	6363      	str	r3, [r4, #52]	; 0x34
    6448:	2224      	movs	r2, #36	; 0x24
    644a:	89a3      	ldrh	r3, [r4, #12]
    644c:	4393      	bics	r3, r2
    644e:	81a3      	strh	r3, [r4, #12]
    6450:	2300      	movs	r3, #0
    6452:	6063      	str	r3, [r4, #4]
    6454:	6923      	ldr	r3, [r4, #16]
    6456:	6023      	str	r3, [r4, #0]
    6458:	2308      	movs	r3, #8
    645a:	89a2      	ldrh	r2, [r4, #12]
    645c:	4313      	orrs	r3, r2
    645e:	81a3      	strh	r3, [r4, #12]
    6460:	6923      	ldr	r3, [r4, #16]
    6462:	2b00      	cmp	r3, #0
    6464:	d10b      	bne.n	647e <__swsetup_r+0xa6>
    6466:	21a0      	movs	r1, #160	; 0xa0
    6468:	2280      	movs	r2, #128	; 0x80
    646a:	89a3      	ldrh	r3, [r4, #12]
    646c:	0089      	lsls	r1, r1, #2
    646e:	0092      	lsls	r2, r2, #2
    6470:	400b      	ands	r3, r1
    6472:	4293      	cmp	r3, r2
    6474:	d003      	beq.n	647e <__swsetup_r+0xa6>
    6476:	0021      	movs	r1, r4
    6478:	0030      	movs	r0, r6
    647a:	f000 fa09 	bl	6890 <__smakebuf_r>
    647e:	2301      	movs	r3, #1
    6480:	89a2      	ldrh	r2, [r4, #12]
    6482:	4013      	ands	r3, r2
    6484:	d011      	beq.n	64aa <__swsetup_r+0xd2>
    6486:	2300      	movs	r3, #0
    6488:	60a3      	str	r3, [r4, #8]
    648a:	6963      	ldr	r3, [r4, #20]
    648c:	425b      	negs	r3, r3
    648e:	61a3      	str	r3, [r4, #24]
    6490:	2000      	movs	r0, #0
    6492:	6923      	ldr	r3, [r4, #16]
    6494:	4283      	cmp	r3, r0
    6496:	d1be      	bne.n	6416 <__swsetup_r+0x3e>
    6498:	230c      	movs	r3, #12
    649a:	5ee2      	ldrsh	r2, [r4, r3]
    649c:	0613      	lsls	r3, r2, #24
    649e:	d5ba      	bpl.n	6416 <__swsetup_r+0x3e>
    64a0:	2340      	movs	r3, #64	; 0x40
    64a2:	4313      	orrs	r3, r2
    64a4:	81a3      	strh	r3, [r4, #12]
    64a6:	3801      	subs	r0, #1
    64a8:	e7b5      	b.n	6416 <__swsetup_r+0x3e>
    64aa:	0792      	lsls	r2, r2, #30
    64ac:	d400      	bmi.n	64b0 <__swsetup_r+0xd8>
    64ae:	6963      	ldr	r3, [r4, #20]
    64b0:	60a3      	str	r3, [r4, #8]
    64b2:	e7ed      	b.n	6490 <__swsetup_r+0xb8>
    64b4:	20000108 	.word	0x20000108
    64b8:	0000ad54 	.word	0x0000ad54
    64bc:	0000ad74 	.word	0x0000ad74
    64c0:	0000ad34 	.word	0x0000ad34

000064c4 <__sflush_r>:
    64c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    64c6:	898a      	ldrh	r2, [r1, #12]
    64c8:	0005      	movs	r5, r0
    64ca:	000c      	movs	r4, r1
    64cc:	0713      	lsls	r3, r2, #28
    64ce:	d460      	bmi.n	6592 <__sflush_r+0xce>
    64d0:	684b      	ldr	r3, [r1, #4]
    64d2:	2b00      	cmp	r3, #0
    64d4:	dc04      	bgt.n	64e0 <__sflush_r+0x1c>
    64d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    64d8:	2b00      	cmp	r3, #0
    64da:	dc01      	bgt.n	64e0 <__sflush_r+0x1c>
    64dc:	2000      	movs	r0, #0
    64de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    64e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    64e2:	2f00      	cmp	r7, #0
    64e4:	d0fa      	beq.n	64dc <__sflush_r+0x18>
    64e6:	2300      	movs	r3, #0
    64e8:	682e      	ldr	r6, [r5, #0]
    64ea:	602b      	str	r3, [r5, #0]
    64ec:	2380      	movs	r3, #128	; 0x80
    64ee:	015b      	lsls	r3, r3, #5
    64f0:	401a      	ands	r2, r3
    64f2:	d034      	beq.n	655e <__sflush_r+0x9a>
    64f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    64f6:	89a3      	ldrh	r3, [r4, #12]
    64f8:	075b      	lsls	r3, r3, #29
    64fa:	d506      	bpl.n	650a <__sflush_r+0x46>
    64fc:	6863      	ldr	r3, [r4, #4]
    64fe:	1ac0      	subs	r0, r0, r3
    6500:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6502:	2b00      	cmp	r3, #0
    6504:	d001      	beq.n	650a <__sflush_r+0x46>
    6506:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6508:	1ac0      	subs	r0, r0, r3
    650a:	0002      	movs	r2, r0
    650c:	6a21      	ldr	r1, [r4, #32]
    650e:	2300      	movs	r3, #0
    6510:	0028      	movs	r0, r5
    6512:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6514:	47b8      	blx	r7
    6516:	89a1      	ldrh	r1, [r4, #12]
    6518:	1c43      	adds	r3, r0, #1
    651a:	d106      	bne.n	652a <__sflush_r+0x66>
    651c:	682b      	ldr	r3, [r5, #0]
    651e:	2b1d      	cmp	r3, #29
    6520:	d831      	bhi.n	6586 <__sflush_r+0xc2>
    6522:	4a2c      	ldr	r2, [pc, #176]	; (65d4 <__sflush_r+0x110>)
    6524:	40da      	lsrs	r2, r3
    6526:	07d3      	lsls	r3, r2, #31
    6528:	d52d      	bpl.n	6586 <__sflush_r+0xc2>
    652a:	2300      	movs	r3, #0
    652c:	6063      	str	r3, [r4, #4]
    652e:	6923      	ldr	r3, [r4, #16]
    6530:	6023      	str	r3, [r4, #0]
    6532:	04cb      	lsls	r3, r1, #19
    6534:	d505      	bpl.n	6542 <__sflush_r+0x7e>
    6536:	1c43      	adds	r3, r0, #1
    6538:	d102      	bne.n	6540 <__sflush_r+0x7c>
    653a:	682b      	ldr	r3, [r5, #0]
    653c:	2b00      	cmp	r3, #0
    653e:	d100      	bne.n	6542 <__sflush_r+0x7e>
    6540:	6560      	str	r0, [r4, #84]	; 0x54
    6542:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6544:	602e      	str	r6, [r5, #0]
    6546:	2900      	cmp	r1, #0
    6548:	d0c8      	beq.n	64dc <__sflush_r+0x18>
    654a:	0023      	movs	r3, r4
    654c:	3344      	adds	r3, #68	; 0x44
    654e:	4299      	cmp	r1, r3
    6550:	d002      	beq.n	6558 <__sflush_r+0x94>
    6552:	0028      	movs	r0, r5
    6554:	f7ff fcdc 	bl	5f10 <_free_r>
    6558:	2000      	movs	r0, #0
    655a:	6360      	str	r0, [r4, #52]	; 0x34
    655c:	e7bf      	b.n	64de <__sflush_r+0x1a>
    655e:	2301      	movs	r3, #1
    6560:	6a21      	ldr	r1, [r4, #32]
    6562:	0028      	movs	r0, r5
    6564:	47b8      	blx	r7
    6566:	1c43      	adds	r3, r0, #1
    6568:	d1c5      	bne.n	64f6 <__sflush_r+0x32>
    656a:	682b      	ldr	r3, [r5, #0]
    656c:	2b00      	cmp	r3, #0
    656e:	d0c2      	beq.n	64f6 <__sflush_r+0x32>
    6570:	2b1d      	cmp	r3, #29
    6572:	d001      	beq.n	6578 <__sflush_r+0xb4>
    6574:	2b16      	cmp	r3, #22
    6576:	d101      	bne.n	657c <__sflush_r+0xb8>
    6578:	602e      	str	r6, [r5, #0]
    657a:	e7af      	b.n	64dc <__sflush_r+0x18>
    657c:	2340      	movs	r3, #64	; 0x40
    657e:	89a2      	ldrh	r2, [r4, #12]
    6580:	4313      	orrs	r3, r2
    6582:	81a3      	strh	r3, [r4, #12]
    6584:	e7ab      	b.n	64de <__sflush_r+0x1a>
    6586:	2340      	movs	r3, #64	; 0x40
    6588:	430b      	orrs	r3, r1
    658a:	2001      	movs	r0, #1
    658c:	81a3      	strh	r3, [r4, #12]
    658e:	4240      	negs	r0, r0
    6590:	e7a5      	b.n	64de <__sflush_r+0x1a>
    6592:	690f      	ldr	r7, [r1, #16]
    6594:	2f00      	cmp	r7, #0
    6596:	d0a1      	beq.n	64dc <__sflush_r+0x18>
    6598:	680b      	ldr	r3, [r1, #0]
    659a:	600f      	str	r7, [r1, #0]
    659c:	1bdb      	subs	r3, r3, r7
    659e:	9301      	str	r3, [sp, #4]
    65a0:	2300      	movs	r3, #0
    65a2:	0792      	lsls	r2, r2, #30
    65a4:	d100      	bne.n	65a8 <__sflush_r+0xe4>
    65a6:	694b      	ldr	r3, [r1, #20]
    65a8:	60a3      	str	r3, [r4, #8]
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	2b00      	cmp	r3, #0
    65ae:	dc00      	bgt.n	65b2 <__sflush_r+0xee>
    65b0:	e794      	b.n	64dc <__sflush_r+0x18>
    65b2:	9b01      	ldr	r3, [sp, #4]
    65b4:	003a      	movs	r2, r7
    65b6:	6a21      	ldr	r1, [r4, #32]
    65b8:	0028      	movs	r0, r5
    65ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    65bc:	47b0      	blx	r6
    65be:	2800      	cmp	r0, #0
    65c0:	dc03      	bgt.n	65ca <__sflush_r+0x106>
    65c2:	2340      	movs	r3, #64	; 0x40
    65c4:	89a2      	ldrh	r2, [r4, #12]
    65c6:	4313      	orrs	r3, r2
    65c8:	e7df      	b.n	658a <__sflush_r+0xc6>
    65ca:	9b01      	ldr	r3, [sp, #4]
    65cc:	183f      	adds	r7, r7, r0
    65ce:	1a1b      	subs	r3, r3, r0
    65d0:	9301      	str	r3, [sp, #4]
    65d2:	e7ea      	b.n	65aa <__sflush_r+0xe6>
    65d4:	20400001 	.word	0x20400001

000065d8 <_fflush_r>:
    65d8:	690b      	ldr	r3, [r1, #16]
    65da:	b570      	push	{r4, r5, r6, lr}
    65dc:	0005      	movs	r5, r0
    65de:	000c      	movs	r4, r1
    65e0:	2b00      	cmp	r3, #0
    65e2:	d101      	bne.n	65e8 <_fflush_r+0x10>
    65e4:	2000      	movs	r0, #0
    65e6:	bd70      	pop	{r4, r5, r6, pc}
    65e8:	2800      	cmp	r0, #0
    65ea:	d004      	beq.n	65f6 <_fflush_r+0x1e>
    65ec:	6983      	ldr	r3, [r0, #24]
    65ee:	2b00      	cmp	r3, #0
    65f0:	d101      	bne.n	65f6 <_fflush_r+0x1e>
    65f2:	f000 f873 	bl	66dc <__sinit>
    65f6:	4b0b      	ldr	r3, [pc, #44]	; (6624 <_fflush_r+0x4c>)
    65f8:	429c      	cmp	r4, r3
    65fa:	d109      	bne.n	6610 <_fflush_r+0x38>
    65fc:	686c      	ldr	r4, [r5, #4]
    65fe:	220c      	movs	r2, #12
    6600:	5ea3      	ldrsh	r3, [r4, r2]
    6602:	2b00      	cmp	r3, #0
    6604:	d0ee      	beq.n	65e4 <_fflush_r+0xc>
    6606:	0021      	movs	r1, r4
    6608:	0028      	movs	r0, r5
    660a:	f7ff ff5b 	bl	64c4 <__sflush_r>
    660e:	e7ea      	b.n	65e6 <_fflush_r+0xe>
    6610:	4b05      	ldr	r3, [pc, #20]	; (6628 <_fflush_r+0x50>)
    6612:	429c      	cmp	r4, r3
    6614:	d101      	bne.n	661a <_fflush_r+0x42>
    6616:	68ac      	ldr	r4, [r5, #8]
    6618:	e7f1      	b.n	65fe <_fflush_r+0x26>
    661a:	4b04      	ldr	r3, [pc, #16]	; (662c <_fflush_r+0x54>)
    661c:	429c      	cmp	r4, r3
    661e:	d1ee      	bne.n	65fe <_fflush_r+0x26>
    6620:	68ec      	ldr	r4, [r5, #12]
    6622:	e7ec      	b.n	65fe <_fflush_r+0x26>
    6624:	0000ad54 	.word	0x0000ad54
    6628:	0000ad74 	.word	0x0000ad74
    662c:	0000ad34 	.word	0x0000ad34

00006630 <fflush>:
    6630:	b510      	push	{r4, lr}
    6632:	1e01      	subs	r1, r0, #0
    6634:	d105      	bne.n	6642 <fflush+0x12>
    6636:	4b05      	ldr	r3, [pc, #20]	; (664c <fflush+0x1c>)
    6638:	4905      	ldr	r1, [pc, #20]	; (6650 <fflush+0x20>)
    663a:	6818      	ldr	r0, [r3, #0]
    663c:	f000 f8de 	bl	67fc <_fwalk_reent>
    6640:	bd10      	pop	{r4, pc}
    6642:	4b04      	ldr	r3, [pc, #16]	; (6654 <fflush+0x24>)
    6644:	6818      	ldr	r0, [r3, #0]
    6646:	f7ff ffc7 	bl	65d8 <_fflush_r>
    664a:	e7f9      	b.n	6640 <fflush+0x10>
    664c:	0000ad30 	.word	0x0000ad30
    6650:	000065d9 	.word	0x000065d9
    6654:	20000108 	.word	0x20000108

00006658 <_cleanup_r>:
    6658:	b510      	push	{r4, lr}
    665a:	4902      	ldr	r1, [pc, #8]	; (6664 <_cleanup_r+0xc>)
    665c:	f000 f8ce 	bl	67fc <_fwalk_reent>
    6660:	bd10      	pop	{r4, pc}
    6662:	46c0      	nop			; (mov r8, r8)
    6664:	000065d9 	.word	0x000065d9

00006668 <std.isra.0>:
    6668:	2300      	movs	r3, #0
    666a:	b510      	push	{r4, lr}
    666c:	0004      	movs	r4, r0
    666e:	6003      	str	r3, [r0, #0]
    6670:	6043      	str	r3, [r0, #4]
    6672:	6083      	str	r3, [r0, #8]
    6674:	8181      	strh	r1, [r0, #12]
    6676:	6643      	str	r3, [r0, #100]	; 0x64
    6678:	81c2      	strh	r2, [r0, #14]
    667a:	6103      	str	r3, [r0, #16]
    667c:	6143      	str	r3, [r0, #20]
    667e:	6183      	str	r3, [r0, #24]
    6680:	0019      	movs	r1, r3
    6682:	2208      	movs	r2, #8
    6684:	305c      	adds	r0, #92	; 0x5c
    6686:	f7ff fc3a 	bl	5efe <memset>
    668a:	4b05      	ldr	r3, [pc, #20]	; (66a0 <std.isra.0+0x38>)
    668c:	6224      	str	r4, [r4, #32]
    668e:	6263      	str	r3, [r4, #36]	; 0x24
    6690:	4b04      	ldr	r3, [pc, #16]	; (66a4 <std.isra.0+0x3c>)
    6692:	62a3      	str	r3, [r4, #40]	; 0x28
    6694:	4b04      	ldr	r3, [pc, #16]	; (66a8 <std.isra.0+0x40>)
    6696:	62e3      	str	r3, [r4, #44]	; 0x2c
    6698:	4b04      	ldr	r3, [pc, #16]	; (66ac <std.isra.0+0x44>)
    669a:	6323      	str	r3, [r4, #48]	; 0x30
    669c:	bd10      	pop	{r4, pc}
    669e:	46c0      	nop			; (mov r8, r8)
    66a0:	00007675 	.word	0x00007675
    66a4:	0000769d 	.word	0x0000769d
    66a8:	000076d5 	.word	0x000076d5
    66ac:	00007701 	.word	0x00007701

000066b0 <__sfmoreglue>:
    66b0:	b570      	push	{r4, r5, r6, lr}
    66b2:	2568      	movs	r5, #104	; 0x68
    66b4:	1e4a      	subs	r2, r1, #1
    66b6:	4355      	muls	r5, r2
    66b8:	000e      	movs	r6, r1
    66ba:	0029      	movs	r1, r5
    66bc:	3174      	adds	r1, #116	; 0x74
    66be:	f7ff fc71 	bl	5fa4 <_malloc_r>
    66c2:	1e04      	subs	r4, r0, #0
    66c4:	d008      	beq.n	66d8 <__sfmoreglue+0x28>
    66c6:	2100      	movs	r1, #0
    66c8:	002a      	movs	r2, r5
    66ca:	6001      	str	r1, [r0, #0]
    66cc:	6046      	str	r6, [r0, #4]
    66ce:	300c      	adds	r0, #12
    66d0:	60a0      	str	r0, [r4, #8]
    66d2:	3268      	adds	r2, #104	; 0x68
    66d4:	f7ff fc13 	bl	5efe <memset>
    66d8:	0020      	movs	r0, r4
    66da:	bd70      	pop	{r4, r5, r6, pc}

000066dc <__sinit>:
    66dc:	6983      	ldr	r3, [r0, #24]
    66de:	b513      	push	{r0, r1, r4, lr}
    66e0:	0004      	movs	r4, r0
    66e2:	2b00      	cmp	r3, #0
    66e4:	d128      	bne.n	6738 <__sinit+0x5c>
    66e6:	6483      	str	r3, [r0, #72]	; 0x48
    66e8:	64c3      	str	r3, [r0, #76]	; 0x4c
    66ea:	6503      	str	r3, [r0, #80]	; 0x50
    66ec:	4b13      	ldr	r3, [pc, #76]	; (673c <__sinit+0x60>)
    66ee:	4a14      	ldr	r2, [pc, #80]	; (6740 <__sinit+0x64>)
    66f0:	681b      	ldr	r3, [r3, #0]
    66f2:	6282      	str	r2, [r0, #40]	; 0x28
    66f4:	9301      	str	r3, [sp, #4]
    66f6:	4298      	cmp	r0, r3
    66f8:	d101      	bne.n	66fe <__sinit+0x22>
    66fa:	2301      	movs	r3, #1
    66fc:	6183      	str	r3, [r0, #24]
    66fe:	0020      	movs	r0, r4
    6700:	f000 f820 	bl	6744 <__sfp>
    6704:	6060      	str	r0, [r4, #4]
    6706:	0020      	movs	r0, r4
    6708:	f000 f81c 	bl	6744 <__sfp>
    670c:	60a0      	str	r0, [r4, #8]
    670e:	0020      	movs	r0, r4
    6710:	f000 f818 	bl	6744 <__sfp>
    6714:	2200      	movs	r2, #0
    6716:	60e0      	str	r0, [r4, #12]
    6718:	2104      	movs	r1, #4
    671a:	6860      	ldr	r0, [r4, #4]
    671c:	f7ff ffa4 	bl	6668 <std.isra.0>
    6720:	2201      	movs	r2, #1
    6722:	2109      	movs	r1, #9
    6724:	68a0      	ldr	r0, [r4, #8]
    6726:	f7ff ff9f 	bl	6668 <std.isra.0>
    672a:	2202      	movs	r2, #2
    672c:	2112      	movs	r1, #18
    672e:	68e0      	ldr	r0, [r4, #12]
    6730:	f7ff ff9a 	bl	6668 <std.isra.0>
    6734:	2301      	movs	r3, #1
    6736:	61a3      	str	r3, [r4, #24]
    6738:	bd13      	pop	{r0, r1, r4, pc}
    673a:	46c0      	nop			; (mov r8, r8)
    673c:	0000ad30 	.word	0x0000ad30
    6740:	00006659 	.word	0x00006659

00006744 <__sfp>:
    6744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6746:	4b1e      	ldr	r3, [pc, #120]	; (67c0 <__sfp+0x7c>)
    6748:	0007      	movs	r7, r0
    674a:	681e      	ldr	r6, [r3, #0]
    674c:	69b3      	ldr	r3, [r6, #24]
    674e:	2b00      	cmp	r3, #0
    6750:	d102      	bne.n	6758 <__sfp+0x14>
    6752:	0030      	movs	r0, r6
    6754:	f7ff ffc2 	bl	66dc <__sinit>
    6758:	3648      	adds	r6, #72	; 0x48
    675a:	68b4      	ldr	r4, [r6, #8]
    675c:	6873      	ldr	r3, [r6, #4]
    675e:	3b01      	subs	r3, #1
    6760:	d504      	bpl.n	676c <__sfp+0x28>
    6762:	6833      	ldr	r3, [r6, #0]
    6764:	2b00      	cmp	r3, #0
    6766:	d007      	beq.n	6778 <__sfp+0x34>
    6768:	6836      	ldr	r6, [r6, #0]
    676a:	e7f6      	b.n	675a <__sfp+0x16>
    676c:	220c      	movs	r2, #12
    676e:	5ea5      	ldrsh	r5, [r4, r2]
    6770:	2d00      	cmp	r5, #0
    6772:	d00d      	beq.n	6790 <__sfp+0x4c>
    6774:	3468      	adds	r4, #104	; 0x68
    6776:	e7f2      	b.n	675e <__sfp+0x1a>
    6778:	2104      	movs	r1, #4
    677a:	0038      	movs	r0, r7
    677c:	f7ff ff98 	bl	66b0 <__sfmoreglue>
    6780:	6030      	str	r0, [r6, #0]
    6782:	2800      	cmp	r0, #0
    6784:	d1f0      	bne.n	6768 <__sfp+0x24>
    6786:	230c      	movs	r3, #12
    6788:	0004      	movs	r4, r0
    678a:	603b      	str	r3, [r7, #0]
    678c:	0020      	movs	r0, r4
    678e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6790:	2301      	movs	r3, #1
    6792:	0020      	movs	r0, r4
    6794:	425b      	negs	r3, r3
    6796:	81e3      	strh	r3, [r4, #14]
    6798:	3302      	adds	r3, #2
    679a:	81a3      	strh	r3, [r4, #12]
    679c:	6665      	str	r5, [r4, #100]	; 0x64
    679e:	6025      	str	r5, [r4, #0]
    67a0:	60a5      	str	r5, [r4, #8]
    67a2:	6065      	str	r5, [r4, #4]
    67a4:	6125      	str	r5, [r4, #16]
    67a6:	6165      	str	r5, [r4, #20]
    67a8:	61a5      	str	r5, [r4, #24]
    67aa:	2208      	movs	r2, #8
    67ac:	0029      	movs	r1, r5
    67ae:	305c      	adds	r0, #92	; 0x5c
    67b0:	f7ff fba5 	bl	5efe <memset>
    67b4:	6365      	str	r5, [r4, #52]	; 0x34
    67b6:	63a5      	str	r5, [r4, #56]	; 0x38
    67b8:	64a5      	str	r5, [r4, #72]	; 0x48
    67ba:	64e5      	str	r5, [r4, #76]	; 0x4c
    67bc:	e7e6      	b.n	678c <__sfp+0x48>
    67be:	46c0      	nop			; (mov r8, r8)
    67c0:	0000ad30 	.word	0x0000ad30

000067c4 <_fwalk>:
    67c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    67c6:	3048      	adds	r0, #72	; 0x48
    67c8:	0004      	movs	r4, r0
    67ca:	2600      	movs	r6, #0
    67cc:	9101      	str	r1, [sp, #4]
    67ce:	2c00      	cmp	r4, #0
    67d0:	d101      	bne.n	67d6 <_fwalk+0x12>
    67d2:	0030      	movs	r0, r6
    67d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    67d6:	68a5      	ldr	r5, [r4, #8]
    67d8:	6867      	ldr	r7, [r4, #4]
    67da:	3f01      	subs	r7, #1
    67dc:	d501      	bpl.n	67e2 <_fwalk+0x1e>
    67de:	6824      	ldr	r4, [r4, #0]
    67e0:	e7f5      	b.n	67ce <_fwalk+0xa>
    67e2:	89ab      	ldrh	r3, [r5, #12]
    67e4:	2b01      	cmp	r3, #1
    67e6:	d907      	bls.n	67f8 <_fwalk+0x34>
    67e8:	220e      	movs	r2, #14
    67ea:	5eab      	ldrsh	r3, [r5, r2]
    67ec:	3301      	adds	r3, #1
    67ee:	d003      	beq.n	67f8 <_fwalk+0x34>
    67f0:	0028      	movs	r0, r5
    67f2:	9b01      	ldr	r3, [sp, #4]
    67f4:	4798      	blx	r3
    67f6:	4306      	orrs	r6, r0
    67f8:	3568      	adds	r5, #104	; 0x68
    67fa:	e7ee      	b.n	67da <_fwalk+0x16>

000067fc <_fwalk_reent>:
    67fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    67fe:	0004      	movs	r4, r0
    6800:	0007      	movs	r7, r0
    6802:	2600      	movs	r6, #0
    6804:	9101      	str	r1, [sp, #4]
    6806:	3448      	adds	r4, #72	; 0x48
    6808:	2c00      	cmp	r4, #0
    680a:	d101      	bne.n	6810 <_fwalk_reent+0x14>
    680c:	0030      	movs	r0, r6
    680e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6810:	6863      	ldr	r3, [r4, #4]
    6812:	68a5      	ldr	r5, [r4, #8]
    6814:	9300      	str	r3, [sp, #0]
    6816:	9b00      	ldr	r3, [sp, #0]
    6818:	3b01      	subs	r3, #1
    681a:	9300      	str	r3, [sp, #0]
    681c:	d501      	bpl.n	6822 <_fwalk_reent+0x26>
    681e:	6824      	ldr	r4, [r4, #0]
    6820:	e7f2      	b.n	6808 <_fwalk_reent+0xc>
    6822:	89ab      	ldrh	r3, [r5, #12]
    6824:	2b01      	cmp	r3, #1
    6826:	d908      	bls.n	683a <_fwalk_reent+0x3e>
    6828:	220e      	movs	r2, #14
    682a:	5eab      	ldrsh	r3, [r5, r2]
    682c:	3301      	adds	r3, #1
    682e:	d004      	beq.n	683a <_fwalk_reent+0x3e>
    6830:	0029      	movs	r1, r5
    6832:	0038      	movs	r0, r7
    6834:	9b01      	ldr	r3, [sp, #4]
    6836:	4798      	blx	r3
    6838:	4306      	orrs	r6, r0
    683a:	3568      	adds	r5, #104	; 0x68
    683c:	e7eb      	b.n	6816 <_fwalk_reent+0x1a>
	...

00006840 <__swhatbuf_r>:
    6840:	b570      	push	{r4, r5, r6, lr}
    6842:	000e      	movs	r6, r1
    6844:	001d      	movs	r5, r3
    6846:	230e      	movs	r3, #14
    6848:	5ec9      	ldrsh	r1, [r1, r3]
    684a:	b090      	sub	sp, #64	; 0x40
    684c:	0014      	movs	r4, r2
    684e:	2900      	cmp	r1, #0
    6850:	da07      	bge.n	6862 <__swhatbuf_r+0x22>
    6852:	2300      	movs	r3, #0
    6854:	602b      	str	r3, [r5, #0]
    6856:	89b3      	ldrh	r3, [r6, #12]
    6858:	061b      	lsls	r3, r3, #24
    685a:	d411      	bmi.n	6880 <__swhatbuf_r+0x40>
    685c:	2380      	movs	r3, #128	; 0x80
    685e:	00db      	lsls	r3, r3, #3
    6860:	e00f      	b.n	6882 <__swhatbuf_r+0x42>
    6862:	aa01      	add	r2, sp, #4
    6864:	f001 f956 	bl	7b14 <_fstat_r>
    6868:	2800      	cmp	r0, #0
    686a:	dbf2      	blt.n	6852 <__swhatbuf_r+0x12>
    686c:	22f0      	movs	r2, #240	; 0xf0
    686e:	9b02      	ldr	r3, [sp, #8]
    6870:	0212      	lsls	r2, r2, #8
    6872:	4013      	ands	r3, r2
    6874:	4a05      	ldr	r2, [pc, #20]	; (688c <__swhatbuf_r+0x4c>)
    6876:	189b      	adds	r3, r3, r2
    6878:	425a      	negs	r2, r3
    687a:	4153      	adcs	r3, r2
    687c:	602b      	str	r3, [r5, #0]
    687e:	e7ed      	b.n	685c <__swhatbuf_r+0x1c>
    6880:	2340      	movs	r3, #64	; 0x40
    6882:	2000      	movs	r0, #0
    6884:	6023      	str	r3, [r4, #0]
    6886:	b010      	add	sp, #64	; 0x40
    6888:	bd70      	pop	{r4, r5, r6, pc}
    688a:	46c0      	nop			; (mov r8, r8)
    688c:	ffffe000 	.word	0xffffe000

00006890 <__smakebuf_r>:
    6890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6892:	2602      	movs	r6, #2
    6894:	898b      	ldrh	r3, [r1, #12]
    6896:	0005      	movs	r5, r0
    6898:	000c      	movs	r4, r1
    689a:	4233      	tst	r3, r6
    689c:	d006      	beq.n	68ac <__smakebuf_r+0x1c>
    689e:	0023      	movs	r3, r4
    68a0:	3347      	adds	r3, #71	; 0x47
    68a2:	6023      	str	r3, [r4, #0]
    68a4:	6123      	str	r3, [r4, #16]
    68a6:	2301      	movs	r3, #1
    68a8:	6163      	str	r3, [r4, #20]
    68aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    68ac:	ab01      	add	r3, sp, #4
    68ae:	466a      	mov	r2, sp
    68b0:	f7ff ffc6 	bl	6840 <__swhatbuf_r>
    68b4:	9900      	ldr	r1, [sp, #0]
    68b6:	0007      	movs	r7, r0
    68b8:	0028      	movs	r0, r5
    68ba:	f7ff fb73 	bl	5fa4 <_malloc_r>
    68be:	2800      	cmp	r0, #0
    68c0:	d108      	bne.n	68d4 <__smakebuf_r+0x44>
    68c2:	220c      	movs	r2, #12
    68c4:	5ea3      	ldrsh	r3, [r4, r2]
    68c6:	059a      	lsls	r2, r3, #22
    68c8:	d4ef      	bmi.n	68aa <__smakebuf_r+0x1a>
    68ca:	2203      	movs	r2, #3
    68cc:	4393      	bics	r3, r2
    68ce:	431e      	orrs	r6, r3
    68d0:	81a6      	strh	r6, [r4, #12]
    68d2:	e7e4      	b.n	689e <__smakebuf_r+0xe>
    68d4:	4b0f      	ldr	r3, [pc, #60]	; (6914 <__smakebuf_r+0x84>)
    68d6:	62ab      	str	r3, [r5, #40]	; 0x28
    68d8:	2380      	movs	r3, #128	; 0x80
    68da:	89a2      	ldrh	r2, [r4, #12]
    68dc:	6020      	str	r0, [r4, #0]
    68de:	4313      	orrs	r3, r2
    68e0:	81a3      	strh	r3, [r4, #12]
    68e2:	9b00      	ldr	r3, [sp, #0]
    68e4:	6120      	str	r0, [r4, #16]
    68e6:	6163      	str	r3, [r4, #20]
    68e8:	9b01      	ldr	r3, [sp, #4]
    68ea:	2b00      	cmp	r3, #0
    68ec:	d00d      	beq.n	690a <__smakebuf_r+0x7a>
    68ee:	230e      	movs	r3, #14
    68f0:	5ee1      	ldrsh	r1, [r4, r3]
    68f2:	0028      	movs	r0, r5
    68f4:	f001 f920 	bl	7b38 <_isatty_r>
    68f8:	2800      	cmp	r0, #0
    68fa:	d006      	beq.n	690a <__smakebuf_r+0x7a>
    68fc:	2203      	movs	r2, #3
    68fe:	89a3      	ldrh	r3, [r4, #12]
    6900:	4393      	bics	r3, r2
    6902:	001a      	movs	r2, r3
    6904:	2301      	movs	r3, #1
    6906:	4313      	orrs	r3, r2
    6908:	81a3      	strh	r3, [r4, #12]
    690a:	89a0      	ldrh	r0, [r4, #12]
    690c:	4338      	orrs	r0, r7
    690e:	81a0      	strh	r0, [r4, #12]
    6910:	e7cb      	b.n	68aa <__smakebuf_r+0x1a>
    6912:	46c0      	nop			; (mov r8, r8)
    6914:	00006659 	.word	0x00006659

00006918 <__malloc_lock>:
    6918:	4770      	bx	lr

0000691a <__malloc_unlock>:
    691a:	4770      	bx	lr

0000691c <__sfputc_r>:
    691c:	6893      	ldr	r3, [r2, #8]
    691e:	b510      	push	{r4, lr}
    6920:	3b01      	subs	r3, #1
    6922:	6093      	str	r3, [r2, #8]
    6924:	2b00      	cmp	r3, #0
    6926:	da05      	bge.n	6934 <__sfputc_r+0x18>
    6928:	6994      	ldr	r4, [r2, #24]
    692a:	42a3      	cmp	r3, r4
    692c:	db08      	blt.n	6940 <__sfputc_r+0x24>
    692e:	b2cb      	uxtb	r3, r1
    6930:	2b0a      	cmp	r3, #10
    6932:	d005      	beq.n	6940 <__sfputc_r+0x24>
    6934:	6813      	ldr	r3, [r2, #0]
    6936:	1c58      	adds	r0, r3, #1
    6938:	6010      	str	r0, [r2, #0]
    693a:	7019      	strb	r1, [r3, #0]
    693c:	b2c8      	uxtb	r0, r1
    693e:	bd10      	pop	{r4, pc}
    6940:	f7ff fcf4 	bl	632c <__swbuf_r>
    6944:	e7fb      	b.n	693e <__sfputc_r+0x22>

00006946 <__sfputs_r>:
    6946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6948:	0006      	movs	r6, r0
    694a:	000f      	movs	r7, r1
    694c:	0014      	movs	r4, r2
    694e:	18d5      	adds	r5, r2, r3
    6950:	42ac      	cmp	r4, r5
    6952:	d101      	bne.n	6958 <__sfputs_r+0x12>
    6954:	2000      	movs	r0, #0
    6956:	e007      	b.n	6968 <__sfputs_r+0x22>
    6958:	7821      	ldrb	r1, [r4, #0]
    695a:	003a      	movs	r2, r7
    695c:	0030      	movs	r0, r6
    695e:	f7ff ffdd 	bl	691c <__sfputc_r>
    6962:	3401      	adds	r4, #1
    6964:	1c43      	adds	r3, r0, #1
    6966:	d1f3      	bne.n	6950 <__sfputs_r+0xa>
    6968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000696c <_vfiprintf_r>:
    696c:	b5f0      	push	{r4, r5, r6, r7, lr}
    696e:	b09f      	sub	sp, #124	; 0x7c
    6970:	0006      	movs	r6, r0
    6972:	000f      	movs	r7, r1
    6974:	0014      	movs	r4, r2
    6976:	9305      	str	r3, [sp, #20]
    6978:	2800      	cmp	r0, #0
    697a:	d004      	beq.n	6986 <_vfiprintf_r+0x1a>
    697c:	6983      	ldr	r3, [r0, #24]
    697e:	2b00      	cmp	r3, #0
    6980:	d101      	bne.n	6986 <_vfiprintf_r+0x1a>
    6982:	f7ff feab 	bl	66dc <__sinit>
    6986:	4b7f      	ldr	r3, [pc, #508]	; (6b84 <_vfiprintf_r+0x218>)
    6988:	429f      	cmp	r7, r3
    698a:	d15c      	bne.n	6a46 <_vfiprintf_r+0xda>
    698c:	6877      	ldr	r7, [r6, #4]
    698e:	89bb      	ldrh	r3, [r7, #12]
    6990:	071b      	lsls	r3, r3, #28
    6992:	d562      	bpl.n	6a5a <_vfiprintf_r+0xee>
    6994:	693b      	ldr	r3, [r7, #16]
    6996:	2b00      	cmp	r3, #0
    6998:	d05f      	beq.n	6a5a <_vfiprintf_r+0xee>
    699a:	2300      	movs	r3, #0
    699c:	ad06      	add	r5, sp, #24
    699e:	616b      	str	r3, [r5, #20]
    69a0:	3320      	adds	r3, #32
    69a2:	766b      	strb	r3, [r5, #25]
    69a4:	3310      	adds	r3, #16
    69a6:	76ab      	strb	r3, [r5, #26]
    69a8:	9402      	str	r4, [sp, #8]
    69aa:	9c02      	ldr	r4, [sp, #8]
    69ac:	7823      	ldrb	r3, [r4, #0]
    69ae:	2b00      	cmp	r3, #0
    69b0:	d15d      	bne.n	6a6e <_vfiprintf_r+0x102>
    69b2:	9b02      	ldr	r3, [sp, #8]
    69b4:	1ae3      	subs	r3, r4, r3
    69b6:	9304      	str	r3, [sp, #16]
    69b8:	d00d      	beq.n	69d6 <_vfiprintf_r+0x6a>
    69ba:	9b04      	ldr	r3, [sp, #16]
    69bc:	9a02      	ldr	r2, [sp, #8]
    69be:	0039      	movs	r1, r7
    69c0:	0030      	movs	r0, r6
    69c2:	f7ff ffc0 	bl	6946 <__sfputs_r>
    69c6:	1c43      	adds	r3, r0, #1
    69c8:	d100      	bne.n	69cc <_vfiprintf_r+0x60>
    69ca:	e0cc      	b.n	6b66 <_vfiprintf_r+0x1fa>
    69cc:	696a      	ldr	r2, [r5, #20]
    69ce:	9b04      	ldr	r3, [sp, #16]
    69d0:	4694      	mov	ip, r2
    69d2:	4463      	add	r3, ip
    69d4:	616b      	str	r3, [r5, #20]
    69d6:	7823      	ldrb	r3, [r4, #0]
    69d8:	2b00      	cmp	r3, #0
    69da:	d100      	bne.n	69de <_vfiprintf_r+0x72>
    69dc:	e0c3      	b.n	6b66 <_vfiprintf_r+0x1fa>
    69de:	2201      	movs	r2, #1
    69e0:	2300      	movs	r3, #0
    69e2:	4252      	negs	r2, r2
    69e4:	606a      	str	r2, [r5, #4]
    69e6:	a902      	add	r1, sp, #8
    69e8:	3254      	adds	r2, #84	; 0x54
    69ea:	1852      	adds	r2, r2, r1
    69ec:	3401      	adds	r4, #1
    69ee:	602b      	str	r3, [r5, #0]
    69f0:	60eb      	str	r3, [r5, #12]
    69f2:	60ab      	str	r3, [r5, #8]
    69f4:	7013      	strb	r3, [r2, #0]
    69f6:	65ab      	str	r3, [r5, #88]	; 0x58
    69f8:	7821      	ldrb	r1, [r4, #0]
    69fa:	2205      	movs	r2, #5
    69fc:	4862      	ldr	r0, [pc, #392]	; (6b88 <_vfiprintf_r+0x21c>)
    69fe:	f001 f8e5 	bl	7bcc <memchr>
    6a02:	1c63      	adds	r3, r4, #1
    6a04:	469c      	mov	ip, r3
    6a06:	2800      	cmp	r0, #0
    6a08:	d135      	bne.n	6a76 <_vfiprintf_r+0x10a>
    6a0a:	6829      	ldr	r1, [r5, #0]
    6a0c:	06cb      	lsls	r3, r1, #27
    6a0e:	d504      	bpl.n	6a1a <_vfiprintf_r+0xae>
    6a10:	2353      	movs	r3, #83	; 0x53
    6a12:	aa02      	add	r2, sp, #8
    6a14:	3020      	adds	r0, #32
    6a16:	189b      	adds	r3, r3, r2
    6a18:	7018      	strb	r0, [r3, #0]
    6a1a:	070b      	lsls	r3, r1, #28
    6a1c:	d504      	bpl.n	6a28 <_vfiprintf_r+0xbc>
    6a1e:	2353      	movs	r3, #83	; 0x53
    6a20:	202b      	movs	r0, #43	; 0x2b
    6a22:	aa02      	add	r2, sp, #8
    6a24:	189b      	adds	r3, r3, r2
    6a26:	7018      	strb	r0, [r3, #0]
    6a28:	7823      	ldrb	r3, [r4, #0]
    6a2a:	2b2a      	cmp	r3, #42	; 0x2a
    6a2c:	d02c      	beq.n	6a88 <_vfiprintf_r+0x11c>
    6a2e:	2000      	movs	r0, #0
    6a30:	210a      	movs	r1, #10
    6a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a34:	7822      	ldrb	r2, [r4, #0]
    6a36:	3a30      	subs	r2, #48	; 0x30
    6a38:	2a09      	cmp	r2, #9
    6a3a:	d800      	bhi.n	6a3e <_vfiprintf_r+0xd2>
    6a3c:	e06b      	b.n	6b16 <_vfiprintf_r+0x1aa>
    6a3e:	2800      	cmp	r0, #0
    6a40:	d02a      	beq.n	6a98 <_vfiprintf_r+0x12c>
    6a42:	9309      	str	r3, [sp, #36]	; 0x24
    6a44:	e028      	b.n	6a98 <_vfiprintf_r+0x12c>
    6a46:	4b51      	ldr	r3, [pc, #324]	; (6b8c <_vfiprintf_r+0x220>)
    6a48:	429f      	cmp	r7, r3
    6a4a:	d101      	bne.n	6a50 <_vfiprintf_r+0xe4>
    6a4c:	68b7      	ldr	r7, [r6, #8]
    6a4e:	e79e      	b.n	698e <_vfiprintf_r+0x22>
    6a50:	4b4f      	ldr	r3, [pc, #316]	; (6b90 <_vfiprintf_r+0x224>)
    6a52:	429f      	cmp	r7, r3
    6a54:	d19b      	bne.n	698e <_vfiprintf_r+0x22>
    6a56:	68f7      	ldr	r7, [r6, #12]
    6a58:	e799      	b.n	698e <_vfiprintf_r+0x22>
    6a5a:	0039      	movs	r1, r7
    6a5c:	0030      	movs	r0, r6
    6a5e:	f7ff fcbb 	bl	63d8 <__swsetup_r>
    6a62:	2800      	cmp	r0, #0
    6a64:	d099      	beq.n	699a <_vfiprintf_r+0x2e>
    6a66:	2001      	movs	r0, #1
    6a68:	4240      	negs	r0, r0
    6a6a:	b01f      	add	sp, #124	; 0x7c
    6a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a6e:	2b25      	cmp	r3, #37	; 0x25
    6a70:	d09f      	beq.n	69b2 <_vfiprintf_r+0x46>
    6a72:	3401      	adds	r4, #1
    6a74:	e79a      	b.n	69ac <_vfiprintf_r+0x40>
    6a76:	4b44      	ldr	r3, [pc, #272]	; (6b88 <_vfiprintf_r+0x21c>)
    6a78:	6829      	ldr	r1, [r5, #0]
    6a7a:	1ac0      	subs	r0, r0, r3
    6a7c:	2301      	movs	r3, #1
    6a7e:	4083      	lsls	r3, r0
    6a80:	430b      	orrs	r3, r1
    6a82:	602b      	str	r3, [r5, #0]
    6a84:	4664      	mov	r4, ip
    6a86:	e7b7      	b.n	69f8 <_vfiprintf_r+0x8c>
    6a88:	9b05      	ldr	r3, [sp, #20]
    6a8a:	1d18      	adds	r0, r3, #4
    6a8c:	681b      	ldr	r3, [r3, #0]
    6a8e:	9005      	str	r0, [sp, #20]
    6a90:	2b00      	cmp	r3, #0
    6a92:	db3a      	blt.n	6b0a <_vfiprintf_r+0x19e>
    6a94:	9309      	str	r3, [sp, #36]	; 0x24
    6a96:	4664      	mov	r4, ip
    6a98:	7823      	ldrb	r3, [r4, #0]
    6a9a:	2b2e      	cmp	r3, #46	; 0x2e
    6a9c:	d10b      	bne.n	6ab6 <_vfiprintf_r+0x14a>
    6a9e:	7863      	ldrb	r3, [r4, #1]
    6aa0:	1c62      	adds	r2, r4, #1
    6aa2:	2b2a      	cmp	r3, #42	; 0x2a
    6aa4:	d13f      	bne.n	6b26 <_vfiprintf_r+0x1ba>
    6aa6:	9b05      	ldr	r3, [sp, #20]
    6aa8:	3402      	adds	r4, #2
    6aaa:	1d1a      	adds	r2, r3, #4
    6aac:	681b      	ldr	r3, [r3, #0]
    6aae:	9205      	str	r2, [sp, #20]
    6ab0:	2b00      	cmp	r3, #0
    6ab2:	db35      	blt.n	6b20 <_vfiprintf_r+0x1b4>
    6ab4:	9307      	str	r3, [sp, #28]
    6ab6:	7821      	ldrb	r1, [r4, #0]
    6ab8:	2203      	movs	r2, #3
    6aba:	4836      	ldr	r0, [pc, #216]	; (6b94 <_vfiprintf_r+0x228>)
    6abc:	f001 f886 	bl	7bcc <memchr>
    6ac0:	2800      	cmp	r0, #0
    6ac2:	d007      	beq.n	6ad4 <_vfiprintf_r+0x168>
    6ac4:	4b33      	ldr	r3, [pc, #204]	; (6b94 <_vfiprintf_r+0x228>)
    6ac6:	682a      	ldr	r2, [r5, #0]
    6ac8:	1ac0      	subs	r0, r0, r3
    6aca:	2340      	movs	r3, #64	; 0x40
    6acc:	4083      	lsls	r3, r0
    6ace:	4313      	orrs	r3, r2
    6ad0:	602b      	str	r3, [r5, #0]
    6ad2:	3401      	adds	r4, #1
    6ad4:	7821      	ldrb	r1, [r4, #0]
    6ad6:	1c63      	adds	r3, r4, #1
    6ad8:	2206      	movs	r2, #6
    6ada:	482f      	ldr	r0, [pc, #188]	; (6b98 <_vfiprintf_r+0x22c>)
    6adc:	9302      	str	r3, [sp, #8]
    6ade:	7629      	strb	r1, [r5, #24]
    6ae0:	f001 f874 	bl	7bcc <memchr>
    6ae4:	2800      	cmp	r0, #0
    6ae6:	d044      	beq.n	6b72 <_vfiprintf_r+0x206>
    6ae8:	4b2c      	ldr	r3, [pc, #176]	; (6b9c <_vfiprintf_r+0x230>)
    6aea:	2b00      	cmp	r3, #0
    6aec:	d12f      	bne.n	6b4e <_vfiprintf_r+0x1e2>
    6aee:	6829      	ldr	r1, [r5, #0]
    6af0:	9b05      	ldr	r3, [sp, #20]
    6af2:	2207      	movs	r2, #7
    6af4:	05c9      	lsls	r1, r1, #23
    6af6:	d528      	bpl.n	6b4a <_vfiprintf_r+0x1de>
    6af8:	189b      	adds	r3, r3, r2
    6afa:	4393      	bics	r3, r2
    6afc:	3308      	adds	r3, #8
    6afe:	9305      	str	r3, [sp, #20]
    6b00:	696b      	ldr	r3, [r5, #20]
    6b02:	9a03      	ldr	r2, [sp, #12]
    6b04:	189b      	adds	r3, r3, r2
    6b06:	616b      	str	r3, [r5, #20]
    6b08:	e74f      	b.n	69aa <_vfiprintf_r+0x3e>
    6b0a:	425b      	negs	r3, r3
    6b0c:	60eb      	str	r3, [r5, #12]
    6b0e:	2302      	movs	r3, #2
    6b10:	430b      	orrs	r3, r1
    6b12:	602b      	str	r3, [r5, #0]
    6b14:	e7bf      	b.n	6a96 <_vfiprintf_r+0x12a>
    6b16:	434b      	muls	r3, r1
    6b18:	3401      	adds	r4, #1
    6b1a:	189b      	adds	r3, r3, r2
    6b1c:	2001      	movs	r0, #1
    6b1e:	e789      	b.n	6a34 <_vfiprintf_r+0xc8>
    6b20:	2301      	movs	r3, #1
    6b22:	425b      	negs	r3, r3
    6b24:	e7c6      	b.n	6ab4 <_vfiprintf_r+0x148>
    6b26:	2300      	movs	r3, #0
    6b28:	0014      	movs	r4, r2
    6b2a:	200a      	movs	r0, #10
    6b2c:	001a      	movs	r2, r3
    6b2e:	606b      	str	r3, [r5, #4]
    6b30:	7821      	ldrb	r1, [r4, #0]
    6b32:	3930      	subs	r1, #48	; 0x30
    6b34:	2909      	cmp	r1, #9
    6b36:	d903      	bls.n	6b40 <_vfiprintf_r+0x1d4>
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d0bc      	beq.n	6ab6 <_vfiprintf_r+0x14a>
    6b3c:	9207      	str	r2, [sp, #28]
    6b3e:	e7ba      	b.n	6ab6 <_vfiprintf_r+0x14a>
    6b40:	4342      	muls	r2, r0
    6b42:	3401      	adds	r4, #1
    6b44:	1852      	adds	r2, r2, r1
    6b46:	2301      	movs	r3, #1
    6b48:	e7f2      	b.n	6b30 <_vfiprintf_r+0x1c4>
    6b4a:	3307      	adds	r3, #7
    6b4c:	e7d5      	b.n	6afa <_vfiprintf_r+0x18e>
    6b4e:	ab05      	add	r3, sp, #20
    6b50:	9300      	str	r3, [sp, #0]
    6b52:	003a      	movs	r2, r7
    6b54:	4b12      	ldr	r3, [pc, #72]	; (6ba0 <_vfiprintf_r+0x234>)
    6b56:	0029      	movs	r1, r5
    6b58:	0030      	movs	r0, r6
    6b5a:	e000      	b.n	6b5e <_vfiprintf_r+0x1f2>
    6b5c:	bf00      	nop
    6b5e:	9003      	str	r0, [sp, #12]
    6b60:	9b03      	ldr	r3, [sp, #12]
    6b62:	3301      	adds	r3, #1
    6b64:	d1cc      	bne.n	6b00 <_vfiprintf_r+0x194>
    6b66:	89bb      	ldrh	r3, [r7, #12]
    6b68:	065b      	lsls	r3, r3, #25
    6b6a:	d500      	bpl.n	6b6e <_vfiprintf_r+0x202>
    6b6c:	e77b      	b.n	6a66 <_vfiprintf_r+0xfa>
    6b6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6b70:	e77b      	b.n	6a6a <_vfiprintf_r+0xfe>
    6b72:	ab05      	add	r3, sp, #20
    6b74:	9300      	str	r3, [sp, #0]
    6b76:	003a      	movs	r2, r7
    6b78:	4b09      	ldr	r3, [pc, #36]	; (6ba0 <_vfiprintf_r+0x234>)
    6b7a:	0029      	movs	r1, r5
    6b7c:	0030      	movs	r0, r6
    6b7e:	f000 f87f 	bl	6c80 <_printf_i>
    6b82:	e7ec      	b.n	6b5e <_vfiprintf_r+0x1f2>
    6b84:	0000ad54 	.word	0x0000ad54
    6b88:	0000ad94 	.word	0x0000ad94
    6b8c:	0000ad74 	.word	0x0000ad74
    6b90:	0000ad34 	.word	0x0000ad34
    6b94:	0000ad9a 	.word	0x0000ad9a
    6b98:	0000ad9e 	.word	0x0000ad9e
    6b9c:	00000000 	.word	0x00000000
    6ba0:	00006947 	.word	0x00006947

00006ba4 <_printf_common>:
    6ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6ba6:	0015      	movs	r5, r2
    6ba8:	9301      	str	r3, [sp, #4]
    6baa:	688a      	ldr	r2, [r1, #8]
    6bac:	690b      	ldr	r3, [r1, #16]
    6bae:	9000      	str	r0, [sp, #0]
    6bb0:	000c      	movs	r4, r1
    6bb2:	4293      	cmp	r3, r2
    6bb4:	da00      	bge.n	6bb8 <_printf_common+0x14>
    6bb6:	0013      	movs	r3, r2
    6bb8:	0022      	movs	r2, r4
    6bba:	602b      	str	r3, [r5, #0]
    6bbc:	3243      	adds	r2, #67	; 0x43
    6bbe:	7812      	ldrb	r2, [r2, #0]
    6bc0:	2a00      	cmp	r2, #0
    6bc2:	d001      	beq.n	6bc8 <_printf_common+0x24>
    6bc4:	3301      	adds	r3, #1
    6bc6:	602b      	str	r3, [r5, #0]
    6bc8:	6823      	ldr	r3, [r4, #0]
    6bca:	069b      	lsls	r3, r3, #26
    6bcc:	d502      	bpl.n	6bd4 <_printf_common+0x30>
    6bce:	682b      	ldr	r3, [r5, #0]
    6bd0:	3302      	adds	r3, #2
    6bd2:	602b      	str	r3, [r5, #0]
    6bd4:	2706      	movs	r7, #6
    6bd6:	6823      	ldr	r3, [r4, #0]
    6bd8:	401f      	ands	r7, r3
    6bda:	d027      	beq.n	6c2c <_printf_common+0x88>
    6bdc:	0023      	movs	r3, r4
    6bde:	3343      	adds	r3, #67	; 0x43
    6be0:	781b      	ldrb	r3, [r3, #0]
    6be2:	1e5a      	subs	r2, r3, #1
    6be4:	4193      	sbcs	r3, r2
    6be6:	6822      	ldr	r2, [r4, #0]
    6be8:	0692      	lsls	r2, r2, #26
    6bea:	d430      	bmi.n	6c4e <_printf_common+0xaa>
    6bec:	0022      	movs	r2, r4
    6bee:	9901      	ldr	r1, [sp, #4]
    6bf0:	3243      	adds	r2, #67	; 0x43
    6bf2:	9800      	ldr	r0, [sp, #0]
    6bf4:	9e08      	ldr	r6, [sp, #32]
    6bf6:	47b0      	blx	r6
    6bf8:	1c43      	adds	r3, r0, #1
    6bfa:	d025      	beq.n	6c48 <_printf_common+0xa4>
    6bfc:	2306      	movs	r3, #6
    6bfe:	6820      	ldr	r0, [r4, #0]
    6c00:	682a      	ldr	r2, [r5, #0]
    6c02:	68e1      	ldr	r1, [r4, #12]
    6c04:	4003      	ands	r3, r0
    6c06:	2500      	movs	r5, #0
    6c08:	2b04      	cmp	r3, #4
    6c0a:	d103      	bne.n	6c14 <_printf_common+0x70>
    6c0c:	1a8d      	subs	r5, r1, r2
    6c0e:	43eb      	mvns	r3, r5
    6c10:	17db      	asrs	r3, r3, #31
    6c12:	401d      	ands	r5, r3
    6c14:	68a3      	ldr	r3, [r4, #8]
    6c16:	6922      	ldr	r2, [r4, #16]
    6c18:	4293      	cmp	r3, r2
    6c1a:	dd01      	ble.n	6c20 <_printf_common+0x7c>
    6c1c:	1a9b      	subs	r3, r3, r2
    6c1e:	18ed      	adds	r5, r5, r3
    6c20:	2700      	movs	r7, #0
    6c22:	42bd      	cmp	r5, r7
    6c24:	d120      	bne.n	6c68 <_printf_common+0xc4>
    6c26:	2000      	movs	r0, #0
    6c28:	e010      	b.n	6c4c <_printf_common+0xa8>
    6c2a:	3701      	adds	r7, #1
    6c2c:	68e3      	ldr	r3, [r4, #12]
    6c2e:	682a      	ldr	r2, [r5, #0]
    6c30:	1a9b      	subs	r3, r3, r2
    6c32:	429f      	cmp	r7, r3
    6c34:	dad2      	bge.n	6bdc <_printf_common+0x38>
    6c36:	0022      	movs	r2, r4
    6c38:	2301      	movs	r3, #1
    6c3a:	3219      	adds	r2, #25
    6c3c:	9901      	ldr	r1, [sp, #4]
    6c3e:	9800      	ldr	r0, [sp, #0]
    6c40:	9e08      	ldr	r6, [sp, #32]
    6c42:	47b0      	blx	r6
    6c44:	1c43      	adds	r3, r0, #1
    6c46:	d1f0      	bne.n	6c2a <_printf_common+0x86>
    6c48:	2001      	movs	r0, #1
    6c4a:	4240      	negs	r0, r0
    6c4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6c4e:	2030      	movs	r0, #48	; 0x30
    6c50:	18e1      	adds	r1, r4, r3
    6c52:	3143      	adds	r1, #67	; 0x43
    6c54:	7008      	strb	r0, [r1, #0]
    6c56:	0021      	movs	r1, r4
    6c58:	1c5a      	adds	r2, r3, #1
    6c5a:	3145      	adds	r1, #69	; 0x45
    6c5c:	7809      	ldrb	r1, [r1, #0]
    6c5e:	18a2      	adds	r2, r4, r2
    6c60:	3243      	adds	r2, #67	; 0x43
    6c62:	3302      	adds	r3, #2
    6c64:	7011      	strb	r1, [r2, #0]
    6c66:	e7c1      	b.n	6bec <_printf_common+0x48>
    6c68:	0022      	movs	r2, r4
    6c6a:	2301      	movs	r3, #1
    6c6c:	321a      	adds	r2, #26
    6c6e:	9901      	ldr	r1, [sp, #4]
    6c70:	9800      	ldr	r0, [sp, #0]
    6c72:	9e08      	ldr	r6, [sp, #32]
    6c74:	47b0      	blx	r6
    6c76:	1c43      	adds	r3, r0, #1
    6c78:	d0e6      	beq.n	6c48 <_printf_common+0xa4>
    6c7a:	3701      	adds	r7, #1
    6c7c:	e7d1      	b.n	6c22 <_printf_common+0x7e>
	...

00006c80 <_printf_i>:
    6c80:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c82:	b08b      	sub	sp, #44	; 0x2c
    6c84:	9206      	str	r2, [sp, #24]
    6c86:	000a      	movs	r2, r1
    6c88:	3243      	adds	r2, #67	; 0x43
    6c8a:	9307      	str	r3, [sp, #28]
    6c8c:	9005      	str	r0, [sp, #20]
    6c8e:	9204      	str	r2, [sp, #16]
    6c90:	7e0a      	ldrb	r2, [r1, #24]
    6c92:	000c      	movs	r4, r1
    6c94:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6c96:	2a6e      	cmp	r2, #110	; 0x6e
    6c98:	d100      	bne.n	6c9c <_printf_i+0x1c>
    6c9a:	e08f      	b.n	6dbc <_printf_i+0x13c>
    6c9c:	d817      	bhi.n	6cce <_printf_i+0x4e>
    6c9e:	2a63      	cmp	r2, #99	; 0x63
    6ca0:	d02c      	beq.n	6cfc <_printf_i+0x7c>
    6ca2:	d808      	bhi.n	6cb6 <_printf_i+0x36>
    6ca4:	2a00      	cmp	r2, #0
    6ca6:	d100      	bne.n	6caa <_printf_i+0x2a>
    6ca8:	e099      	b.n	6dde <_printf_i+0x15e>
    6caa:	2a58      	cmp	r2, #88	; 0x58
    6cac:	d054      	beq.n	6d58 <_printf_i+0xd8>
    6cae:	0026      	movs	r6, r4
    6cb0:	3642      	adds	r6, #66	; 0x42
    6cb2:	7032      	strb	r2, [r6, #0]
    6cb4:	e029      	b.n	6d0a <_printf_i+0x8a>
    6cb6:	2a64      	cmp	r2, #100	; 0x64
    6cb8:	d001      	beq.n	6cbe <_printf_i+0x3e>
    6cba:	2a69      	cmp	r2, #105	; 0x69
    6cbc:	d1f7      	bne.n	6cae <_printf_i+0x2e>
    6cbe:	6821      	ldr	r1, [r4, #0]
    6cc0:	681a      	ldr	r2, [r3, #0]
    6cc2:	0608      	lsls	r0, r1, #24
    6cc4:	d523      	bpl.n	6d0e <_printf_i+0x8e>
    6cc6:	1d11      	adds	r1, r2, #4
    6cc8:	6019      	str	r1, [r3, #0]
    6cca:	6815      	ldr	r5, [r2, #0]
    6ccc:	e025      	b.n	6d1a <_printf_i+0x9a>
    6cce:	2a73      	cmp	r2, #115	; 0x73
    6cd0:	d100      	bne.n	6cd4 <_printf_i+0x54>
    6cd2:	e088      	b.n	6de6 <_printf_i+0x166>
    6cd4:	d808      	bhi.n	6ce8 <_printf_i+0x68>
    6cd6:	2a6f      	cmp	r2, #111	; 0x6f
    6cd8:	d029      	beq.n	6d2e <_printf_i+0xae>
    6cda:	2a70      	cmp	r2, #112	; 0x70
    6cdc:	d1e7      	bne.n	6cae <_printf_i+0x2e>
    6cde:	2220      	movs	r2, #32
    6ce0:	6809      	ldr	r1, [r1, #0]
    6ce2:	430a      	orrs	r2, r1
    6ce4:	6022      	str	r2, [r4, #0]
    6ce6:	e003      	b.n	6cf0 <_printf_i+0x70>
    6ce8:	2a75      	cmp	r2, #117	; 0x75
    6cea:	d020      	beq.n	6d2e <_printf_i+0xae>
    6cec:	2a78      	cmp	r2, #120	; 0x78
    6cee:	d1de      	bne.n	6cae <_printf_i+0x2e>
    6cf0:	0022      	movs	r2, r4
    6cf2:	2178      	movs	r1, #120	; 0x78
    6cf4:	3245      	adds	r2, #69	; 0x45
    6cf6:	7011      	strb	r1, [r2, #0]
    6cf8:	4a6c      	ldr	r2, [pc, #432]	; (6eac <_printf_i+0x22c>)
    6cfa:	e030      	b.n	6d5e <_printf_i+0xde>
    6cfc:	000e      	movs	r6, r1
    6cfe:	681a      	ldr	r2, [r3, #0]
    6d00:	3642      	adds	r6, #66	; 0x42
    6d02:	1d11      	adds	r1, r2, #4
    6d04:	6019      	str	r1, [r3, #0]
    6d06:	6813      	ldr	r3, [r2, #0]
    6d08:	7033      	strb	r3, [r6, #0]
    6d0a:	2301      	movs	r3, #1
    6d0c:	e079      	b.n	6e02 <_printf_i+0x182>
    6d0e:	0649      	lsls	r1, r1, #25
    6d10:	d5d9      	bpl.n	6cc6 <_printf_i+0x46>
    6d12:	1d11      	adds	r1, r2, #4
    6d14:	6019      	str	r1, [r3, #0]
    6d16:	2300      	movs	r3, #0
    6d18:	5ed5      	ldrsh	r5, [r2, r3]
    6d1a:	2d00      	cmp	r5, #0
    6d1c:	da03      	bge.n	6d26 <_printf_i+0xa6>
    6d1e:	232d      	movs	r3, #45	; 0x2d
    6d20:	9a04      	ldr	r2, [sp, #16]
    6d22:	426d      	negs	r5, r5
    6d24:	7013      	strb	r3, [r2, #0]
    6d26:	4b62      	ldr	r3, [pc, #392]	; (6eb0 <_printf_i+0x230>)
    6d28:	270a      	movs	r7, #10
    6d2a:	9303      	str	r3, [sp, #12]
    6d2c:	e02f      	b.n	6d8e <_printf_i+0x10e>
    6d2e:	6820      	ldr	r0, [r4, #0]
    6d30:	6819      	ldr	r1, [r3, #0]
    6d32:	0605      	lsls	r5, r0, #24
    6d34:	d503      	bpl.n	6d3e <_printf_i+0xbe>
    6d36:	1d08      	adds	r0, r1, #4
    6d38:	6018      	str	r0, [r3, #0]
    6d3a:	680d      	ldr	r5, [r1, #0]
    6d3c:	e005      	b.n	6d4a <_printf_i+0xca>
    6d3e:	0640      	lsls	r0, r0, #25
    6d40:	d5f9      	bpl.n	6d36 <_printf_i+0xb6>
    6d42:	680d      	ldr	r5, [r1, #0]
    6d44:	1d08      	adds	r0, r1, #4
    6d46:	6018      	str	r0, [r3, #0]
    6d48:	b2ad      	uxth	r5, r5
    6d4a:	4b59      	ldr	r3, [pc, #356]	; (6eb0 <_printf_i+0x230>)
    6d4c:	2708      	movs	r7, #8
    6d4e:	9303      	str	r3, [sp, #12]
    6d50:	2a6f      	cmp	r2, #111	; 0x6f
    6d52:	d018      	beq.n	6d86 <_printf_i+0x106>
    6d54:	270a      	movs	r7, #10
    6d56:	e016      	b.n	6d86 <_printf_i+0x106>
    6d58:	3145      	adds	r1, #69	; 0x45
    6d5a:	700a      	strb	r2, [r1, #0]
    6d5c:	4a54      	ldr	r2, [pc, #336]	; (6eb0 <_printf_i+0x230>)
    6d5e:	9203      	str	r2, [sp, #12]
    6d60:	681a      	ldr	r2, [r3, #0]
    6d62:	6821      	ldr	r1, [r4, #0]
    6d64:	1d10      	adds	r0, r2, #4
    6d66:	6018      	str	r0, [r3, #0]
    6d68:	6815      	ldr	r5, [r2, #0]
    6d6a:	0608      	lsls	r0, r1, #24
    6d6c:	d522      	bpl.n	6db4 <_printf_i+0x134>
    6d6e:	07cb      	lsls	r3, r1, #31
    6d70:	d502      	bpl.n	6d78 <_printf_i+0xf8>
    6d72:	2320      	movs	r3, #32
    6d74:	4319      	orrs	r1, r3
    6d76:	6021      	str	r1, [r4, #0]
    6d78:	2710      	movs	r7, #16
    6d7a:	2d00      	cmp	r5, #0
    6d7c:	d103      	bne.n	6d86 <_printf_i+0x106>
    6d7e:	2320      	movs	r3, #32
    6d80:	6822      	ldr	r2, [r4, #0]
    6d82:	439a      	bics	r2, r3
    6d84:	6022      	str	r2, [r4, #0]
    6d86:	0023      	movs	r3, r4
    6d88:	2200      	movs	r2, #0
    6d8a:	3343      	adds	r3, #67	; 0x43
    6d8c:	701a      	strb	r2, [r3, #0]
    6d8e:	6863      	ldr	r3, [r4, #4]
    6d90:	60a3      	str	r3, [r4, #8]
    6d92:	2b00      	cmp	r3, #0
    6d94:	db5c      	blt.n	6e50 <_printf_i+0x1d0>
    6d96:	2204      	movs	r2, #4
    6d98:	6821      	ldr	r1, [r4, #0]
    6d9a:	4391      	bics	r1, r2
    6d9c:	6021      	str	r1, [r4, #0]
    6d9e:	2d00      	cmp	r5, #0
    6da0:	d158      	bne.n	6e54 <_printf_i+0x1d4>
    6da2:	9e04      	ldr	r6, [sp, #16]
    6da4:	2b00      	cmp	r3, #0
    6da6:	d064      	beq.n	6e72 <_printf_i+0x1f2>
    6da8:	0026      	movs	r6, r4
    6daa:	9b03      	ldr	r3, [sp, #12]
    6dac:	3642      	adds	r6, #66	; 0x42
    6dae:	781b      	ldrb	r3, [r3, #0]
    6db0:	7033      	strb	r3, [r6, #0]
    6db2:	e05e      	b.n	6e72 <_printf_i+0x1f2>
    6db4:	0648      	lsls	r0, r1, #25
    6db6:	d5da      	bpl.n	6d6e <_printf_i+0xee>
    6db8:	b2ad      	uxth	r5, r5
    6dba:	e7d8      	b.n	6d6e <_printf_i+0xee>
    6dbc:	6809      	ldr	r1, [r1, #0]
    6dbe:	681a      	ldr	r2, [r3, #0]
    6dc0:	0608      	lsls	r0, r1, #24
    6dc2:	d505      	bpl.n	6dd0 <_printf_i+0x150>
    6dc4:	1d11      	adds	r1, r2, #4
    6dc6:	6019      	str	r1, [r3, #0]
    6dc8:	6813      	ldr	r3, [r2, #0]
    6dca:	6962      	ldr	r2, [r4, #20]
    6dcc:	601a      	str	r2, [r3, #0]
    6dce:	e006      	b.n	6dde <_printf_i+0x15e>
    6dd0:	0649      	lsls	r1, r1, #25
    6dd2:	d5f7      	bpl.n	6dc4 <_printf_i+0x144>
    6dd4:	1d11      	adds	r1, r2, #4
    6dd6:	6019      	str	r1, [r3, #0]
    6dd8:	6813      	ldr	r3, [r2, #0]
    6dda:	8aa2      	ldrh	r2, [r4, #20]
    6ddc:	801a      	strh	r2, [r3, #0]
    6dde:	2300      	movs	r3, #0
    6de0:	9e04      	ldr	r6, [sp, #16]
    6de2:	6123      	str	r3, [r4, #16]
    6de4:	e054      	b.n	6e90 <_printf_i+0x210>
    6de6:	681a      	ldr	r2, [r3, #0]
    6de8:	1d11      	adds	r1, r2, #4
    6dea:	6019      	str	r1, [r3, #0]
    6dec:	6816      	ldr	r6, [r2, #0]
    6dee:	2100      	movs	r1, #0
    6df0:	6862      	ldr	r2, [r4, #4]
    6df2:	0030      	movs	r0, r6
    6df4:	f000 feea 	bl	7bcc <memchr>
    6df8:	2800      	cmp	r0, #0
    6dfa:	d001      	beq.n	6e00 <_printf_i+0x180>
    6dfc:	1b80      	subs	r0, r0, r6
    6dfe:	6060      	str	r0, [r4, #4]
    6e00:	6863      	ldr	r3, [r4, #4]
    6e02:	6123      	str	r3, [r4, #16]
    6e04:	2300      	movs	r3, #0
    6e06:	9a04      	ldr	r2, [sp, #16]
    6e08:	7013      	strb	r3, [r2, #0]
    6e0a:	e041      	b.n	6e90 <_printf_i+0x210>
    6e0c:	6923      	ldr	r3, [r4, #16]
    6e0e:	0032      	movs	r2, r6
    6e10:	9906      	ldr	r1, [sp, #24]
    6e12:	9805      	ldr	r0, [sp, #20]
    6e14:	9d07      	ldr	r5, [sp, #28]
    6e16:	47a8      	blx	r5
    6e18:	1c43      	adds	r3, r0, #1
    6e1a:	d043      	beq.n	6ea4 <_printf_i+0x224>
    6e1c:	6823      	ldr	r3, [r4, #0]
    6e1e:	2500      	movs	r5, #0
    6e20:	079b      	lsls	r3, r3, #30
    6e22:	d40f      	bmi.n	6e44 <_printf_i+0x1c4>
    6e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6e26:	68e0      	ldr	r0, [r4, #12]
    6e28:	4298      	cmp	r0, r3
    6e2a:	da3d      	bge.n	6ea8 <_printf_i+0x228>
    6e2c:	0018      	movs	r0, r3
    6e2e:	e03b      	b.n	6ea8 <_printf_i+0x228>
    6e30:	0022      	movs	r2, r4
    6e32:	2301      	movs	r3, #1
    6e34:	3219      	adds	r2, #25
    6e36:	9906      	ldr	r1, [sp, #24]
    6e38:	9805      	ldr	r0, [sp, #20]
    6e3a:	9e07      	ldr	r6, [sp, #28]
    6e3c:	47b0      	blx	r6
    6e3e:	1c43      	adds	r3, r0, #1
    6e40:	d030      	beq.n	6ea4 <_printf_i+0x224>
    6e42:	3501      	adds	r5, #1
    6e44:	68e3      	ldr	r3, [r4, #12]
    6e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6e48:	1a9b      	subs	r3, r3, r2
    6e4a:	429d      	cmp	r5, r3
    6e4c:	dbf0      	blt.n	6e30 <_printf_i+0x1b0>
    6e4e:	e7e9      	b.n	6e24 <_printf_i+0x1a4>
    6e50:	2d00      	cmp	r5, #0
    6e52:	d0a9      	beq.n	6da8 <_printf_i+0x128>
    6e54:	9e04      	ldr	r6, [sp, #16]
    6e56:	0028      	movs	r0, r5
    6e58:	0039      	movs	r1, r7
    6e5a:	f7fe feed 	bl	5c38 <__aeabi_uidivmod>
    6e5e:	9b03      	ldr	r3, [sp, #12]
    6e60:	3e01      	subs	r6, #1
    6e62:	5c5b      	ldrb	r3, [r3, r1]
    6e64:	0028      	movs	r0, r5
    6e66:	7033      	strb	r3, [r6, #0]
    6e68:	0039      	movs	r1, r7
    6e6a:	f7fe fe5f 	bl	5b2c <__udivsi3>
    6e6e:	1e05      	subs	r5, r0, #0
    6e70:	d1f1      	bne.n	6e56 <_printf_i+0x1d6>
    6e72:	2f08      	cmp	r7, #8
    6e74:	d109      	bne.n	6e8a <_printf_i+0x20a>
    6e76:	6823      	ldr	r3, [r4, #0]
    6e78:	07db      	lsls	r3, r3, #31
    6e7a:	d506      	bpl.n	6e8a <_printf_i+0x20a>
    6e7c:	6863      	ldr	r3, [r4, #4]
    6e7e:	6922      	ldr	r2, [r4, #16]
    6e80:	4293      	cmp	r3, r2
    6e82:	dc02      	bgt.n	6e8a <_printf_i+0x20a>
    6e84:	2330      	movs	r3, #48	; 0x30
    6e86:	3e01      	subs	r6, #1
    6e88:	7033      	strb	r3, [r6, #0]
    6e8a:	9b04      	ldr	r3, [sp, #16]
    6e8c:	1b9b      	subs	r3, r3, r6
    6e8e:	6123      	str	r3, [r4, #16]
    6e90:	9b07      	ldr	r3, [sp, #28]
    6e92:	aa09      	add	r2, sp, #36	; 0x24
    6e94:	9300      	str	r3, [sp, #0]
    6e96:	0021      	movs	r1, r4
    6e98:	9b06      	ldr	r3, [sp, #24]
    6e9a:	9805      	ldr	r0, [sp, #20]
    6e9c:	f7ff fe82 	bl	6ba4 <_printf_common>
    6ea0:	1c43      	adds	r3, r0, #1
    6ea2:	d1b3      	bne.n	6e0c <_printf_i+0x18c>
    6ea4:	2001      	movs	r0, #1
    6ea6:	4240      	negs	r0, r0
    6ea8:	b00b      	add	sp, #44	; 0x2c
    6eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6eac:	0000adb6 	.word	0x0000adb6
    6eb0:	0000ada5 	.word	0x0000ada5

00006eb4 <__svfiscanf_r>:
    6eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6eb6:	4cbd      	ldr	r4, [pc, #756]	; (71ac <__svfiscanf_r+0x2f8>)
    6eb8:	2586      	movs	r5, #134	; 0x86
    6eba:	44a5      	add	sp, r4
    6ebc:	9303      	str	r3, [sp, #12]
    6ebe:	2300      	movs	r3, #0
    6ec0:	9348      	str	r3, [sp, #288]	; 0x120
    6ec2:	9349      	str	r3, [sp, #292]	; 0x124
    6ec4:	ab05      	add	r3, sp, #20
    6ec6:	934a      	str	r3, [sp, #296]	; 0x128
    6ec8:	23be      	movs	r3, #190	; 0xbe
    6eca:	006d      	lsls	r5, r5, #1
    6ecc:	9000      	str	r0, [sp, #0]
    6ece:	000c      	movs	r4, r1
    6ed0:	a802      	add	r0, sp, #8
    6ed2:	49b7      	ldr	r1, [pc, #732]	; (71b0 <__svfiscanf_r+0x2fc>)
    6ed4:	005b      	lsls	r3, r3, #1
    6ed6:	1940      	adds	r0, r0, r5
    6ed8:	27c0      	movs	r7, #192	; 0xc0
    6eda:	50c1      	str	r1, [r0, r3]
    6edc:	ab02      	add	r3, sp, #8
    6ede:	195b      	adds	r3, r3, r5
    6ee0:	0015      	movs	r5, r2
    6ee2:	49b4      	ldr	r1, [pc, #720]	; (71b4 <__svfiscanf_r+0x300>)
    6ee4:	007f      	lsls	r7, r7, #1
    6ee6:	51d9      	str	r1, [r3, r7]
    6ee8:	782b      	ldrb	r3, [r5, #0]
    6eea:	2b00      	cmp	r3, #0
    6eec:	d100      	bne.n	6ef0 <__svfiscanf_r+0x3c>
    6eee:	e15b      	b.n	71a8 <__svfiscanf_r+0x2f4>
    6ef0:	f000 fe38 	bl	7b64 <__locale_ctype_ptr>
    6ef4:	2208      	movs	r2, #8
    6ef6:	782b      	ldrb	r3, [r5, #0]
    6ef8:	18c0      	adds	r0, r0, r3
    6efa:	9301      	str	r3, [sp, #4]
    6efc:	7843      	ldrb	r3, [r0, #1]
    6efe:	4013      	ands	r3, r2
    6f00:	d141      	bne.n	6f86 <__svfiscanf_r+0xd2>
    6f02:	9a01      	ldr	r2, [sp, #4]
    6f04:	1c6e      	adds	r6, r5, #1
    6f06:	2a25      	cmp	r2, #37	; 0x25
    6f08:	d000      	beq.n	6f0c <__svfiscanf_r+0x58>
    6f0a:	e0a8      	b.n	705e <__svfiscanf_r+0x1aa>
    6f0c:	9347      	str	r3, [sp, #284]	; 0x11c
    6f0e:	9345      	str	r3, [sp, #276]	; 0x114
    6f10:	786b      	ldrb	r3, [r5, #1]
    6f12:	2b2a      	cmp	r3, #42	; 0x2a
    6f14:	d102      	bne.n	6f1c <__svfiscanf_r+0x68>
    6f16:	3b1a      	subs	r3, #26
    6f18:	9345      	str	r3, [sp, #276]	; 0x114
    6f1a:	1cae      	adds	r6, r5, #2
    6f1c:	0035      	movs	r5, r6
    6f1e:	220a      	movs	r2, #10
    6f20:	7829      	ldrb	r1, [r5, #0]
    6f22:	000b      	movs	r3, r1
    6f24:	3b30      	subs	r3, #48	; 0x30
    6f26:	2b09      	cmp	r3, #9
    6f28:	d948      	bls.n	6fbc <__svfiscanf_r+0x108>
    6f2a:	4ea3      	ldr	r6, [pc, #652]	; (71b8 <__svfiscanf_r+0x304>)
    6f2c:	2203      	movs	r2, #3
    6f2e:	0030      	movs	r0, r6
    6f30:	f000 fe4c 	bl	7bcc <memchr>
    6f34:	2800      	cmp	r0, #0
    6f36:	d007      	beq.n	6f48 <__svfiscanf_r+0x94>
    6f38:	2301      	movs	r3, #1
    6f3a:	1b80      	subs	r0, r0, r6
    6f3c:	4083      	lsls	r3, r0
    6f3e:	9a45      	ldr	r2, [sp, #276]	; 0x114
    6f40:	3501      	adds	r5, #1
    6f42:	4313      	orrs	r3, r2
    6f44:	9202      	str	r2, [sp, #8]
    6f46:	9345      	str	r3, [sp, #276]	; 0x114
    6f48:	782b      	ldrb	r3, [r5, #0]
    6f4a:	1c6e      	adds	r6, r5, #1
    6f4c:	2b67      	cmp	r3, #103	; 0x67
    6f4e:	d858      	bhi.n	7002 <__svfiscanf_r+0x14e>
    6f50:	2b65      	cmp	r3, #101	; 0x65
    6f52:	d300      	bcc.n	6f56 <__svfiscanf_r+0xa2>
    6f54:	e0dd      	b.n	7112 <__svfiscanf_r+0x25e>
    6f56:	2b47      	cmp	r3, #71	; 0x47
    6f58:	d838      	bhi.n	6fcc <__svfiscanf_r+0x118>
    6f5a:	2b45      	cmp	r3, #69	; 0x45
    6f5c:	d300      	bcc.n	6f60 <__svfiscanf_r+0xac>
    6f5e:	e0d8      	b.n	7112 <__svfiscanf_r+0x25e>
    6f60:	2b00      	cmp	r3, #0
    6f62:	d100      	bne.n	6f66 <__svfiscanf_r+0xb2>
    6f64:	e11d      	b.n	71a2 <__svfiscanf_r+0x2ee>
    6f66:	2b25      	cmp	r3, #37	; 0x25
    6f68:	d079      	beq.n	705e <__svfiscanf_r+0x1aa>
    6f6a:	2303      	movs	r3, #3
    6f6c:	934b      	str	r3, [sp, #300]	; 0x12c
    6f6e:	3307      	adds	r3, #7
    6f70:	9346      	str	r3, [sp, #280]	; 0x118
    6f72:	e053      	b.n	701c <__svfiscanf_r+0x168>
    6f74:	9a49      	ldr	r2, [sp, #292]	; 0x124
    6f76:	3301      	adds	r3, #1
    6f78:	9201      	str	r2, [sp, #4]
    6f7a:	3201      	adds	r2, #1
    6f7c:	9249      	str	r2, [sp, #292]	; 0x124
    6f7e:	6862      	ldr	r2, [r4, #4]
    6f80:	6023      	str	r3, [r4, #0]
    6f82:	3a01      	subs	r2, #1
    6f84:	6062      	str	r2, [r4, #4]
    6f86:	6863      	ldr	r3, [r4, #4]
    6f88:	2b00      	cmp	r3, #0
    6f8a:	dd0b      	ble.n	6fa4 <__svfiscanf_r+0xf0>
    6f8c:	f000 fdea 	bl	7b64 <__locale_ctype_ptr>
    6f90:	2108      	movs	r1, #8
    6f92:	6823      	ldr	r3, [r4, #0]
    6f94:	781a      	ldrb	r2, [r3, #0]
    6f96:	1880      	adds	r0, r0, r2
    6f98:	7842      	ldrb	r2, [r0, #1]
    6f9a:	420a      	tst	r2, r1
    6f9c:	d1ea      	bne.n	6f74 <__svfiscanf_r+0xc0>
    6f9e:	1c6e      	adds	r6, r5, #1
    6fa0:	0035      	movs	r5, r6
    6fa2:	e7a1      	b.n	6ee8 <__svfiscanf_r+0x34>
    6fa4:	2286      	movs	r2, #134	; 0x86
    6fa6:	ab02      	add	r3, sp, #8
    6fa8:	0052      	lsls	r2, r2, #1
    6faa:	189b      	adds	r3, r3, r2
    6fac:	59db      	ldr	r3, [r3, r7]
    6fae:	0021      	movs	r1, r4
    6fb0:	9800      	ldr	r0, [sp, #0]
    6fb2:	9301      	str	r3, [sp, #4]
    6fb4:	4798      	blx	r3
    6fb6:	2800      	cmp	r0, #0
    6fb8:	d0e8      	beq.n	6f8c <__svfiscanf_r+0xd8>
    6fba:	e7f0      	b.n	6f9e <__svfiscanf_r+0xea>
    6fbc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    6fbe:	3501      	adds	r5, #1
    6fc0:	9302      	str	r3, [sp, #8]
    6fc2:	4353      	muls	r3, r2
    6fc4:	3b30      	subs	r3, #48	; 0x30
    6fc6:	1859      	adds	r1, r3, r1
    6fc8:	9147      	str	r1, [sp, #284]	; 0x11c
    6fca:	e7a9      	b.n	6f20 <__svfiscanf_r+0x6c>
    6fcc:	2b5b      	cmp	r3, #91	; 0x5b
    6fce:	d100      	bne.n	6fd2 <__svfiscanf_r+0x11e>
    6fd0:	e077      	b.n	70c2 <__svfiscanf_r+0x20e>
    6fd2:	d80f      	bhi.n	6ff4 <__svfiscanf_r+0x140>
    6fd4:	2b58      	cmp	r3, #88	; 0x58
    6fd6:	d1c8      	bne.n	6f6a <__svfiscanf_r+0xb6>
    6fd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
    6fda:	9201      	str	r2, [sp, #4]
    6fdc:	2280      	movs	r2, #128	; 0x80
    6fde:	9901      	ldr	r1, [sp, #4]
    6fe0:	0092      	lsls	r2, r2, #2
    6fe2:	430a      	orrs	r2, r1
    6fe4:	9245      	str	r2, [sp, #276]	; 0x114
    6fe6:	2210      	movs	r2, #16
    6fe8:	9246      	str	r2, [sp, #280]	; 0x118
    6fea:	2203      	movs	r2, #3
    6fec:	2b6e      	cmp	r3, #110	; 0x6e
    6fee:	dd14      	ble.n	701a <__svfiscanf_r+0x166>
    6ff0:	3201      	adds	r2, #1
    6ff2:	e012      	b.n	701a <__svfiscanf_r+0x166>
    6ff4:	2b63      	cmp	r3, #99	; 0x63
    6ff6:	d100      	bne.n	6ffa <__svfiscanf_r+0x146>
    6ff8:	e071      	b.n	70de <__svfiscanf_r+0x22a>
    6ffa:	2b64      	cmp	r3, #100	; 0x64
    6ffc:	d1b5      	bne.n	6f6a <__svfiscanf_r+0xb6>
    6ffe:	220a      	movs	r2, #10
    7000:	e7f2      	b.n	6fe8 <__svfiscanf_r+0x134>
    7002:	2b70      	cmp	r3, #112	; 0x70
    7004:	d052      	beq.n	70ac <__svfiscanf_r+0x1f8>
    7006:	d822      	bhi.n	704e <__svfiscanf_r+0x19a>
    7008:	2b6e      	cmp	r3, #110	; 0x6e
    700a:	d100      	bne.n	700e <__svfiscanf_r+0x15a>
    700c:	e06f      	b.n	70ee <__svfiscanf_r+0x23a>
    700e:	d854      	bhi.n	70ba <__svfiscanf_r+0x206>
    7010:	2b69      	cmp	r3, #105	; 0x69
    7012:	d1aa      	bne.n	6f6a <__svfiscanf_r+0xb6>
    7014:	2300      	movs	r3, #0
    7016:	2203      	movs	r2, #3
    7018:	9346      	str	r3, [sp, #280]	; 0x118
    701a:	924b      	str	r2, [sp, #300]	; 0x12c
    701c:	6863      	ldr	r3, [r4, #4]
    701e:	2b00      	cmp	r3, #0
    7020:	dc00      	bgt.n	7024 <__svfiscanf_r+0x170>
    7022:	e078      	b.n	7116 <__svfiscanf_r+0x262>
    7024:	9b45      	ldr	r3, [sp, #276]	; 0x114
    7026:	9301      	str	r3, [sp, #4]
    7028:	065b      	lsls	r3, r3, #25
    702a:	d400      	bmi.n	702e <__svfiscanf_r+0x17a>
    702c:	e08b      	b.n	7146 <__svfiscanf_r+0x292>
    702e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    7030:	2b02      	cmp	r3, #2
    7032:	dd00      	ble.n	7036 <__svfiscanf_r+0x182>
    7034:	e09d      	b.n	7172 <__svfiscanf_r+0x2be>
    7036:	ab03      	add	r3, sp, #12
    7038:	0022      	movs	r2, r4
    703a:	a945      	add	r1, sp, #276	; 0x114
    703c:	9800      	ldr	r0, [sp, #0]
    703e:	f000 f8e7 	bl	7210 <_scanf_chars>
    7042:	2801      	cmp	r0, #1
    7044:	d100      	bne.n	7048 <__svfiscanf_r+0x194>
    7046:	e0af      	b.n	71a8 <__svfiscanf_r+0x2f4>
    7048:	2802      	cmp	r0, #2
    704a:	d1a9      	bne.n	6fa0 <__svfiscanf_r+0xec>
    704c:	e025      	b.n	709a <__svfiscanf_r+0x1e6>
    704e:	2b75      	cmp	r3, #117	; 0x75
    7050:	d0d5      	beq.n	6ffe <__svfiscanf_r+0x14a>
    7052:	2b78      	cmp	r3, #120	; 0x78
    7054:	d0c0      	beq.n	6fd8 <__svfiscanf_r+0x124>
    7056:	2b73      	cmp	r3, #115	; 0x73
    7058:	d187      	bne.n	6f6a <__svfiscanf_r+0xb6>
    705a:	2302      	movs	r3, #2
    705c:	e03d      	b.n	70da <__svfiscanf_r+0x226>
    705e:	6863      	ldr	r3, [r4, #4]
    7060:	2b00      	cmp	r3, #0
    7062:	dd0f      	ble.n	7084 <__svfiscanf_r+0x1d0>
    7064:	6823      	ldr	r3, [r4, #0]
    7066:	9901      	ldr	r1, [sp, #4]
    7068:	781a      	ldrb	r2, [r3, #0]
    706a:	4291      	cmp	r1, r2
    706c:	d000      	beq.n	7070 <__svfiscanf_r+0x1bc>
    706e:	e09b      	b.n	71a8 <__svfiscanf_r+0x2f4>
    7070:	3301      	adds	r3, #1
    7072:	6862      	ldr	r2, [r4, #4]
    7074:	6023      	str	r3, [r4, #0]
    7076:	9b49      	ldr	r3, [sp, #292]	; 0x124
    7078:	3a01      	subs	r2, #1
    707a:	9301      	str	r3, [sp, #4]
    707c:	3301      	adds	r3, #1
    707e:	6062      	str	r2, [r4, #4]
    7080:	9349      	str	r3, [sp, #292]	; 0x124
    7082:	e78d      	b.n	6fa0 <__svfiscanf_r+0xec>
    7084:	2286      	movs	r2, #134	; 0x86
    7086:	ab02      	add	r3, sp, #8
    7088:	0052      	lsls	r2, r2, #1
    708a:	189b      	adds	r3, r3, r2
    708c:	59db      	ldr	r3, [r3, r7]
    708e:	0021      	movs	r1, r4
    7090:	9800      	ldr	r0, [sp, #0]
    7092:	9302      	str	r3, [sp, #8]
    7094:	4798      	blx	r3
    7096:	2800      	cmp	r0, #0
    7098:	d0e4      	beq.n	7064 <__svfiscanf_r+0x1b0>
    709a:	9848      	ldr	r0, [sp, #288]	; 0x120
    709c:	2800      	cmp	r0, #0
    709e:	d000      	beq.n	70a2 <__svfiscanf_r+0x1ee>
    70a0:	e07b      	b.n	719a <__svfiscanf_r+0x2e6>
    70a2:	3801      	subs	r0, #1
    70a4:	23a7      	movs	r3, #167	; 0xa7
    70a6:	009b      	lsls	r3, r3, #2
    70a8:	449d      	add	sp, r3
    70aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
    70ae:	9201      	str	r2, [sp, #4]
    70b0:	2220      	movs	r2, #32
    70b2:	9901      	ldr	r1, [sp, #4]
    70b4:	430a      	orrs	r2, r1
    70b6:	9245      	str	r2, [sp, #276]	; 0x114
    70b8:	e78e      	b.n	6fd8 <__svfiscanf_r+0x124>
    70ba:	2308      	movs	r3, #8
    70bc:	2204      	movs	r2, #4
    70be:	9346      	str	r3, [sp, #280]	; 0x118
    70c0:	e7ab      	b.n	701a <__svfiscanf_r+0x166>
    70c2:	0031      	movs	r1, r6
    70c4:	a805      	add	r0, sp, #20
    70c6:	f000 faa3 	bl	7610 <__sccl>
    70ca:	9b45      	ldr	r3, [sp, #276]	; 0x114
    70cc:	0006      	movs	r6, r0
    70ce:	9301      	str	r3, [sp, #4]
    70d0:	2340      	movs	r3, #64	; 0x40
    70d2:	9a01      	ldr	r2, [sp, #4]
    70d4:	4313      	orrs	r3, r2
    70d6:	9345      	str	r3, [sp, #276]	; 0x114
    70d8:	2301      	movs	r3, #1
    70da:	934b      	str	r3, [sp, #300]	; 0x12c
    70dc:	e79e      	b.n	701c <__svfiscanf_r+0x168>
    70de:	9b45      	ldr	r3, [sp, #276]	; 0x114
    70e0:	9301      	str	r3, [sp, #4]
    70e2:	2340      	movs	r3, #64	; 0x40
    70e4:	9a01      	ldr	r2, [sp, #4]
    70e6:	4313      	orrs	r3, r2
    70e8:	9345      	str	r3, [sp, #276]	; 0x114
    70ea:	2300      	movs	r3, #0
    70ec:	e7f5      	b.n	70da <__svfiscanf_r+0x226>
    70ee:	9945      	ldr	r1, [sp, #276]	; 0x114
    70f0:	06cb      	lsls	r3, r1, #27
    70f2:	d500      	bpl.n	70f6 <__svfiscanf_r+0x242>
    70f4:	e754      	b.n	6fa0 <__svfiscanf_r+0xec>
    70f6:	9b03      	ldr	r3, [sp, #12]
    70f8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    70fa:	07c8      	lsls	r0, r1, #31
    70fc:	d504      	bpl.n	7108 <__svfiscanf_r+0x254>
    70fe:	1d19      	adds	r1, r3, #4
    7100:	9103      	str	r1, [sp, #12]
    7102:	681b      	ldr	r3, [r3, #0]
    7104:	801a      	strh	r2, [r3, #0]
    7106:	e74b      	b.n	6fa0 <__svfiscanf_r+0xec>
    7108:	1d19      	adds	r1, r3, #4
    710a:	9103      	str	r1, [sp, #12]
    710c:	681b      	ldr	r3, [r3, #0]
    710e:	601a      	str	r2, [r3, #0]
    7110:	e746      	b.n	6fa0 <__svfiscanf_r+0xec>
    7112:	2305      	movs	r3, #5
    7114:	e7e1      	b.n	70da <__svfiscanf_r+0x226>
    7116:	2286      	movs	r2, #134	; 0x86
    7118:	ab02      	add	r3, sp, #8
    711a:	0052      	lsls	r2, r2, #1
    711c:	189b      	adds	r3, r3, r2
    711e:	59db      	ldr	r3, [r3, r7]
    7120:	0021      	movs	r1, r4
    7122:	9800      	ldr	r0, [sp, #0]
    7124:	9301      	str	r3, [sp, #4]
    7126:	4798      	blx	r3
    7128:	2800      	cmp	r0, #0
    712a:	d100      	bne.n	712e <__svfiscanf_r+0x27a>
    712c:	e77a      	b.n	7024 <__svfiscanf_r+0x170>
    712e:	e7b4      	b.n	709a <__svfiscanf_r+0x1e6>
    7130:	9a49      	ldr	r2, [sp, #292]	; 0x124
    7132:	9201      	str	r2, [sp, #4]
    7134:	3201      	adds	r2, #1
    7136:	9249      	str	r2, [sp, #292]	; 0x124
    7138:	6862      	ldr	r2, [r4, #4]
    713a:	3a01      	subs	r2, #1
    713c:	6062      	str	r2, [r4, #4]
    713e:	2a00      	cmp	r2, #0
    7140:	dd0b      	ble.n	715a <__svfiscanf_r+0x2a6>
    7142:	3301      	adds	r3, #1
    7144:	6023      	str	r3, [r4, #0]
    7146:	f000 fd0d 	bl	7b64 <__locale_ctype_ptr>
    714a:	2108      	movs	r1, #8
    714c:	6823      	ldr	r3, [r4, #0]
    714e:	781a      	ldrb	r2, [r3, #0]
    7150:	1880      	adds	r0, r0, r2
    7152:	7842      	ldrb	r2, [r0, #1]
    7154:	420a      	tst	r2, r1
    7156:	d1eb      	bne.n	7130 <__svfiscanf_r+0x27c>
    7158:	e769      	b.n	702e <__svfiscanf_r+0x17a>
    715a:	2286      	movs	r2, #134	; 0x86
    715c:	ab02      	add	r3, sp, #8
    715e:	0052      	lsls	r2, r2, #1
    7160:	189b      	adds	r3, r3, r2
    7162:	59db      	ldr	r3, [r3, r7]
    7164:	0021      	movs	r1, r4
    7166:	9800      	ldr	r0, [sp, #0]
    7168:	9301      	str	r3, [sp, #4]
    716a:	4798      	blx	r3
    716c:	2800      	cmp	r0, #0
    716e:	d0ea      	beq.n	7146 <__svfiscanf_r+0x292>
    7170:	e793      	b.n	709a <__svfiscanf_r+0x1e6>
    7172:	2b04      	cmp	r3, #4
    7174:	dc06      	bgt.n	7184 <__svfiscanf_r+0x2d0>
    7176:	ab03      	add	r3, sp, #12
    7178:	0022      	movs	r2, r4
    717a:	a945      	add	r1, sp, #276	; 0x114
    717c:	9800      	ldr	r0, [sp, #0]
    717e:	f000 f8ab 	bl	72d8 <_scanf_i>
    7182:	e75e      	b.n	7042 <__svfiscanf_r+0x18e>
    7184:	4b0d      	ldr	r3, [pc, #52]	; (71bc <__svfiscanf_r+0x308>)
    7186:	2b00      	cmp	r3, #0
    7188:	d100      	bne.n	718c <__svfiscanf_r+0x2d8>
    718a:	e709      	b.n	6fa0 <__svfiscanf_r+0xec>
    718c:	ab03      	add	r3, sp, #12
    718e:	0022      	movs	r2, r4
    7190:	a945      	add	r1, sp, #276	; 0x114
    7192:	9800      	ldr	r0, [sp, #0]
    7194:	e000      	b.n	7198 <__svfiscanf_r+0x2e4>
    7196:	bf00      	nop
    7198:	e753      	b.n	7042 <__svfiscanf_r+0x18e>
    719a:	89a3      	ldrh	r3, [r4, #12]
    719c:	065b      	lsls	r3, r3, #25
    719e:	d400      	bmi.n	71a2 <__svfiscanf_r+0x2ee>
    71a0:	e780      	b.n	70a4 <__svfiscanf_r+0x1f0>
    71a2:	2001      	movs	r0, #1
    71a4:	4240      	negs	r0, r0
    71a6:	e77d      	b.n	70a4 <__svfiscanf_r+0x1f0>
    71a8:	9848      	ldr	r0, [sp, #288]	; 0x120
    71aa:	e77b      	b.n	70a4 <__svfiscanf_r+0x1f0>
    71ac:	fffffd64 	.word	0xfffffd64
    71b0:	000079e5 	.word	0x000079e5
    71b4:	000074f1 	.word	0x000074f1
    71b8:	0000ad9a 	.word	0x0000ad9a
    71bc:	00000000 	.word	0x00000000

000071c0 <_vfiscanf_r>:
    71c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71c2:	0004      	movs	r4, r0
    71c4:	000d      	movs	r5, r1
    71c6:	0016      	movs	r6, r2
    71c8:	001f      	movs	r7, r3
    71ca:	2800      	cmp	r0, #0
    71cc:	d004      	beq.n	71d8 <_vfiscanf_r+0x18>
    71ce:	6983      	ldr	r3, [r0, #24]
    71d0:	2b00      	cmp	r3, #0
    71d2:	d101      	bne.n	71d8 <_vfiscanf_r+0x18>
    71d4:	f7ff fa82 	bl	66dc <__sinit>
    71d8:	4b0a      	ldr	r3, [pc, #40]	; (7204 <_vfiscanf_r+0x44>)
    71da:	429d      	cmp	r5, r3
    71dc:	d107      	bne.n	71ee <_vfiscanf_r+0x2e>
    71de:	6865      	ldr	r5, [r4, #4]
    71e0:	003b      	movs	r3, r7
    71e2:	0032      	movs	r2, r6
    71e4:	0029      	movs	r1, r5
    71e6:	0020      	movs	r0, r4
    71e8:	f7ff fe64 	bl	6eb4 <__svfiscanf_r>
    71ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71ee:	4b06      	ldr	r3, [pc, #24]	; (7208 <_vfiscanf_r+0x48>)
    71f0:	429d      	cmp	r5, r3
    71f2:	d101      	bne.n	71f8 <_vfiscanf_r+0x38>
    71f4:	68a5      	ldr	r5, [r4, #8]
    71f6:	e7f3      	b.n	71e0 <_vfiscanf_r+0x20>
    71f8:	4b04      	ldr	r3, [pc, #16]	; (720c <_vfiscanf_r+0x4c>)
    71fa:	429d      	cmp	r5, r3
    71fc:	d1f0      	bne.n	71e0 <_vfiscanf_r+0x20>
    71fe:	68e5      	ldr	r5, [r4, #12]
    7200:	e7ee      	b.n	71e0 <_vfiscanf_r+0x20>
    7202:	46c0      	nop			; (mov r8, r8)
    7204:	0000ad54 	.word	0x0000ad54
    7208:	0000ad74 	.word	0x0000ad74
    720c:	0000ad34 	.word	0x0000ad34

00007210 <_scanf_chars>:
    7210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7212:	0015      	movs	r5, r2
    7214:	688a      	ldr	r2, [r1, #8]
    7216:	9001      	str	r0, [sp, #4]
    7218:	000c      	movs	r4, r1
    721a:	2a00      	cmp	r2, #0
    721c:	d106      	bne.n	722c <_scanf_chars+0x1c>
    721e:	698a      	ldr	r2, [r1, #24]
    7220:	1e51      	subs	r1, r2, #1
    7222:	418a      	sbcs	r2, r1
    7224:	2101      	movs	r1, #1
    7226:	4252      	negs	r2, r2
    7228:	430a      	orrs	r2, r1
    722a:	60a2      	str	r2, [r4, #8]
    722c:	6822      	ldr	r2, [r4, #0]
    722e:	06d2      	lsls	r2, r2, #27
    7230:	d403      	bmi.n	723a <_scanf_chars+0x2a>
    7232:	681a      	ldr	r2, [r3, #0]
    7234:	1d11      	adds	r1, r2, #4
    7236:	6019      	str	r1, [r3, #0]
    7238:	6817      	ldr	r7, [r2, #0]
    723a:	2600      	movs	r6, #0
    723c:	69a3      	ldr	r3, [r4, #24]
    723e:	2b00      	cmp	r3, #0
    7240:	d01c      	beq.n	727c <_scanf_chars+0x6c>
    7242:	2b01      	cmp	r3, #1
    7244:	d108      	bne.n	7258 <_scanf_chars+0x48>
    7246:	682b      	ldr	r3, [r5, #0]
    7248:	6962      	ldr	r2, [r4, #20]
    724a:	781b      	ldrb	r3, [r3, #0]
    724c:	5cd3      	ldrb	r3, [r2, r3]
    724e:	2b00      	cmp	r3, #0
    7250:	d114      	bne.n	727c <_scanf_chars+0x6c>
    7252:	2e00      	cmp	r6, #0
    7254:	d130      	bne.n	72b8 <_scanf_chars+0xa8>
    7256:	e006      	b.n	7266 <_scanf_chars+0x56>
    7258:	2b02      	cmp	r3, #2
    725a:	d006      	beq.n	726a <_scanf_chars+0x5a>
    725c:	2e00      	cmp	r6, #0
    725e:	d12b      	bne.n	72b8 <_scanf_chars+0xa8>
    7260:	69a3      	ldr	r3, [r4, #24]
    7262:	2b01      	cmp	r3, #1
    7264:	d128      	bne.n	72b8 <_scanf_chars+0xa8>
    7266:	2001      	movs	r0, #1
    7268:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    726a:	f000 fc7b 	bl	7b64 <__locale_ctype_ptr>
    726e:	2208      	movs	r2, #8
    7270:	682b      	ldr	r3, [r5, #0]
    7272:	781b      	ldrb	r3, [r3, #0]
    7274:	18c0      	adds	r0, r0, r3
    7276:	7843      	ldrb	r3, [r0, #1]
    7278:	4213      	tst	r3, r2
    727a:	d1ef      	bne.n	725c <_scanf_chars+0x4c>
    727c:	2210      	movs	r2, #16
    727e:	6823      	ldr	r3, [r4, #0]
    7280:	3601      	adds	r6, #1
    7282:	4213      	tst	r3, r2
    7284:	d103      	bne.n	728e <_scanf_chars+0x7e>
    7286:	682b      	ldr	r3, [r5, #0]
    7288:	781b      	ldrb	r3, [r3, #0]
    728a:	703b      	strb	r3, [r7, #0]
    728c:	3701      	adds	r7, #1
    728e:	682a      	ldr	r2, [r5, #0]
    7290:	686b      	ldr	r3, [r5, #4]
    7292:	3201      	adds	r2, #1
    7294:	602a      	str	r2, [r5, #0]
    7296:	68a2      	ldr	r2, [r4, #8]
    7298:	3b01      	subs	r3, #1
    729a:	3a01      	subs	r2, #1
    729c:	606b      	str	r3, [r5, #4]
    729e:	60a2      	str	r2, [r4, #8]
    72a0:	2a00      	cmp	r2, #0
    72a2:	d009      	beq.n	72b8 <_scanf_chars+0xa8>
    72a4:	2b00      	cmp	r3, #0
    72a6:	dcc9      	bgt.n	723c <_scanf_chars+0x2c>
    72a8:	23c0      	movs	r3, #192	; 0xc0
    72aa:	005b      	lsls	r3, r3, #1
    72ac:	58e3      	ldr	r3, [r4, r3]
    72ae:	0029      	movs	r1, r5
    72b0:	9801      	ldr	r0, [sp, #4]
    72b2:	4798      	blx	r3
    72b4:	2800      	cmp	r0, #0
    72b6:	d0c1      	beq.n	723c <_scanf_chars+0x2c>
    72b8:	2310      	movs	r3, #16
    72ba:	6822      	ldr	r2, [r4, #0]
    72bc:	4013      	ands	r3, r2
    72be:	d106      	bne.n	72ce <_scanf_chars+0xbe>
    72c0:	68e2      	ldr	r2, [r4, #12]
    72c2:	3201      	adds	r2, #1
    72c4:	60e2      	str	r2, [r4, #12]
    72c6:	69a2      	ldr	r2, [r4, #24]
    72c8:	2a00      	cmp	r2, #0
    72ca:	d000      	beq.n	72ce <_scanf_chars+0xbe>
    72cc:	703b      	strb	r3, [r7, #0]
    72ce:	6923      	ldr	r3, [r4, #16]
    72d0:	2000      	movs	r0, #0
    72d2:	199e      	adds	r6, r3, r6
    72d4:	6126      	str	r6, [r4, #16]
    72d6:	e7c7      	b.n	7268 <_scanf_chars+0x58>

000072d8 <_scanf_i>:
    72d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    72da:	000c      	movs	r4, r1
    72dc:	b08d      	sub	sp, #52	; 0x34
    72de:	9302      	str	r3, [sp, #8]
    72e0:	4b77      	ldr	r3, [pc, #476]	; (74c0 <_scanf_i+0x1e8>)
    72e2:	9005      	str	r0, [sp, #20]
    72e4:	0016      	movs	r6, r2
    72e6:	aa09      	add	r2, sp, #36	; 0x24
    72e8:	cb23      	ldmia	r3!, {r0, r1, r5}
    72ea:	c223      	stmia	r2!, {r0, r1, r5}
    72ec:	4b75      	ldr	r3, [pc, #468]	; (74c4 <_scanf_i+0x1ec>)
    72ee:	9306      	str	r3, [sp, #24]
    72f0:	69a3      	ldr	r3, [r4, #24]
    72f2:	2b03      	cmp	r3, #3
    72f4:	d001      	beq.n	72fa <_scanf_i+0x22>
    72f6:	4b74      	ldr	r3, [pc, #464]	; (74c8 <_scanf_i+0x1f0>)
    72f8:	9306      	str	r3, [sp, #24]
    72fa:	22ae      	movs	r2, #174	; 0xae
    72fc:	2000      	movs	r0, #0
    72fe:	68a3      	ldr	r3, [r4, #8]
    7300:	0052      	lsls	r2, r2, #1
    7302:	1e59      	subs	r1, r3, #1
    7304:	9004      	str	r0, [sp, #16]
    7306:	4291      	cmp	r1, r2
    7308:	d905      	bls.n	7316 <_scanf_i+0x3e>
    730a:	3b5e      	subs	r3, #94	; 0x5e
    730c:	3bff      	subs	r3, #255	; 0xff
    730e:	9304      	str	r3, [sp, #16]
    7310:	235e      	movs	r3, #94	; 0x5e
    7312:	33ff      	adds	r3, #255	; 0xff
    7314:	60a3      	str	r3, [r4, #8]
    7316:	0023      	movs	r3, r4
    7318:	331c      	adds	r3, #28
    731a:	9301      	str	r3, [sp, #4]
    731c:	23d0      	movs	r3, #208	; 0xd0
    731e:	2700      	movs	r7, #0
    7320:	6822      	ldr	r2, [r4, #0]
    7322:	011b      	lsls	r3, r3, #4
    7324:	4313      	orrs	r3, r2
    7326:	6023      	str	r3, [r4, #0]
    7328:	9b01      	ldr	r3, [sp, #4]
    732a:	9303      	str	r3, [sp, #12]
    732c:	6833      	ldr	r3, [r6, #0]
    732e:	a809      	add	r0, sp, #36	; 0x24
    7330:	7819      	ldrb	r1, [r3, #0]
    7332:	00bb      	lsls	r3, r7, #2
    7334:	2202      	movs	r2, #2
    7336:	5818      	ldr	r0, [r3, r0]
    7338:	f000 fc48 	bl	7bcc <memchr>
    733c:	2800      	cmp	r0, #0
    733e:	d02b      	beq.n	7398 <_scanf_i+0xc0>
    7340:	2f01      	cmp	r7, #1
    7342:	d15f      	bne.n	7404 <_scanf_i+0x12c>
    7344:	6863      	ldr	r3, [r4, #4]
    7346:	2b00      	cmp	r3, #0
    7348:	d106      	bne.n	7358 <_scanf_i+0x80>
    734a:	3308      	adds	r3, #8
    734c:	6822      	ldr	r2, [r4, #0]
    734e:	6063      	str	r3, [r4, #4]
    7350:	33f9      	adds	r3, #249	; 0xf9
    7352:	33ff      	adds	r3, #255	; 0xff
    7354:	4313      	orrs	r3, r2
    7356:	6023      	str	r3, [r4, #0]
    7358:	4b5c      	ldr	r3, [pc, #368]	; (74cc <_scanf_i+0x1f4>)
    735a:	6822      	ldr	r2, [r4, #0]
    735c:	4013      	ands	r3, r2
    735e:	6023      	str	r3, [r4, #0]
    7360:	68a3      	ldr	r3, [r4, #8]
    7362:	1e5a      	subs	r2, r3, #1
    7364:	60a2      	str	r2, [r4, #8]
    7366:	2b00      	cmp	r3, #0
    7368:	d016      	beq.n	7398 <_scanf_i+0xc0>
    736a:	9b03      	ldr	r3, [sp, #12]
    736c:	1c5d      	adds	r5, r3, #1
    736e:	6833      	ldr	r3, [r6, #0]
    7370:	1c5a      	adds	r2, r3, #1
    7372:	6032      	str	r2, [r6, #0]
    7374:	781b      	ldrb	r3, [r3, #0]
    7376:	9a03      	ldr	r2, [sp, #12]
    7378:	9503      	str	r5, [sp, #12]
    737a:	7013      	strb	r3, [r2, #0]
    737c:	6873      	ldr	r3, [r6, #4]
    737e:	3b01      	subs	r3, #1
    7380:	6073      	str	r3, [r6, #4]
    7382:	2b00      	cmp	r3, #0
    7384:	dc08      	bgt.n	7398 <_scanf_i+0xc0>
    7386:	23c0      	movs	r3, #192	; 0xc0
    7388:	005b      	lsls	r3, r3, #1
    738a:	58e3      	ldr	r3, [r4, r3]
    738c:	0031      	movs	r1, r6
    738e:	9805      	ldr	r0, [sp, #20]
    7390:	9307      	str	r3, [sp, #28]
    7392:	4798      	blx	r3
    7394:	2800      	cmp	r0, #0
    7396:	d17d      	bne.n	7494 <_scanf_i+0x1bc>
    7398:	3701      	adds	r7, #1
    739a:	2f03      	cmp	r7, #3
    739c:	d1c6      	bne.n	732c <_scanf_i+0x54>
    739e:	6863      	ldr	r3, [r4, #4]
    73a0:	2b00      	cmp	r3, #0
    73a2:	d101      	bne.n	73a8 <_scanf_i+0xd0>
    73a4:	330a      	adds	r3, #10
    73a6:	6063      	str	r3, [r4, #4]
    73a8:	2110      	movs	r1, #16
    73aa:	2700      	movs	r7, #0
    73ac:	6863      	ldr	r3, [r4, #4]
    73ae:	6960      	ldr	r0, [r4, #20]
    73b0:	1ac9      	subs	r1, r1, r3
    73b2:	4b47      	ldr	r3, [pc, #284]	; (74d0 <_scanf_i+0x1f8>)
    73b4:	18c9      	adds	r1, r1, r3
    73b6:	f000 f92b 	bl	7610 <__sccl>
    73ba:	9d03      	ldr	r5, [sp, #12]
    73bc:	68a3      	ldr	r3, [r4, #8]
    73be:	2b00      	cmp	r3, #0
    73c0:	d041      	beq.n	7446 <_scanf_i+0x16e>
    73c2:	6832      	ldr	r2, [r6, #0]
    73c4:	6960      	ldr	r0, [r4, #20]
    73c6:	7811      	ldrb	r1, [r2, #0]
    73c8:	5c40      	ldrb	r0, [r0, r1]
    73ca:	2800      	cmp	r0, #0
    73cc:	d03b      	beq.n	7446 <_scanf_i+0x16e>
    73ce:	2930      	cmp	r1, #48	; 0x30
    73d0:	d128      	bne.n	7424 <_scanf_i+0x14c>
    73d2:	2080      	movs	r0, #128	; 0x80
    73d4:	6821      	ldr	r1, [r4, #0]
    73d6:	0100      	lsls	r0, r0, #4
    73d8:	4201      	tst	r1, r0
    73da:	d023      	beq.n	7424 <_scanf_i+0x14c>
    73dc:	9a04      	ldr	r2, [sp, #16]
    73de:	3701      	adds	r7, #1
    73e0:	2a00      	cmp	r2, #0
    73e2:	d003      	beq.n	73ec <_scanf_i+0x114>
    73e4:	3a01      	subs	r2, #1
    73e6:	3301      	adds	r3, #1
    73e8:	9204      	str	r2, [sp, #16]
    73ea:	60a3      	str	r3, [r4, #8]
    73ec:	6873      	ldr	r3, [r6, #4]
    73ee:	3b01      	subs	r3, #1
    73f0:	6073      	str	r3, [r6, #4]
    73f2:	2b00      	cmp	r3, #0
    73f4:	dd1e      	ble.n	7434 <_scanf_i+0x15c>
    73f6:	6833      	ldr	r3, [r6, #0]
    73f8:	3301      	adds	r3, #1
    73fa:	6033      	str	r3, [r6, #0]
    73fc:	68a3      	ldr	r3, [r4, #8]
    73fe:	3b01      	subs	r3, #1
    7400:	60a3      	str	r3, [r4, #8]
    7402:	e7db      	b.n	73bc <_scanf_i+0xe4>
    7404:	2f02      	cmp	r7, #2
    7406:	d1ab      	bne.n	7360 <_scanf_i+0x88>
    7408:	21c0      	movs	r1, #192	; 0xc0
    740a:	2380      	movs	r3, #128	; 0x80
    740c:	6822      	ldr	r2, [r4, #0]
    740e:	00c9      	lsls	r1, r1, #3
    7410:	4011      	ands	r1, r2
    7412:	009b      	lsls	r3, r3, #2
    7414:	4299      	cmp	r1, r3
    7416:	d1c2      	bne.n	739e <_scanf_i+0xc6>
    7418:	3bf1      	subs	r3, #241	; 0xf1
    741a:	3bff      	subs	r3, #255	; 0xff
    741c:	6063      	str	r3, [r4, #4]
    741e:	33f0      	adds	r3, #240	; 0xf0
    7420:	4313      	orrs	r3, r2
    7422:	e79c      	b.n	735e <_scanf_i+0x86>
    7424:	6821      	ldr	r1, [r4, #0]
    7426:	4b2b      	ldr	r3, [pc, #172]	; (74d4 <_scanf_i+0x1fc>)
    7428:	400b      	ands	r3, r1
    742a:	6023      	str	r3, [r4, #0]
    742c:	7813      	ldrb	r3, [r2, #0]
    742e:	702b      	strb	r3, [r5, #0]
    7430:	3501      	adds	r5, #1
    7432:	e7db      	b.n	73ec <_scanf_i+0x114>
    7434:	23c0      	movs	r3, #192	; 0xc0
    7436:	005b      	lsls	r3, r3, #1
    7438:	58e3      	ldr	r3, [r4, r3]
    743a:	0031      	movs	r1, r6
    743c:	9805      	ldr	r0, [sp, #20]
    743e:	9303      	str	r3, [sp, #12]
    7440:	4798      	blx	r3
    7442:	2800      	cmp	r0, #0
    7444:	d0da      	beq.n	73fc <_scanf_i+0x124>
    7446:	6823      	ldr	r3, [r4, #0]
    7448:	05db      	lsls	r3, r3, #23
    744a:	d50e      	bpl.n	746a <_scanf_i+0x192>
    744c:	9b01      	ldr	r3, [sp, #4]
    744e:	429d      	cmp	r5, r3
    7450:	d907      	bls.n	7462 <_scanf_i+0x18a>
    7452:	23be      	movs	r3, #190	; 0xbe
    7454:	3d01      	subs	r5, #1
    7456:	005b      	lsls	r3, r3, #1
    7458:	7829      	ldrb	r1, [r5, #0]
    745a:	58e3      	ldr	r3, [r4, r3]
    745c:	0032      	movs	r2, r6
    745e:	9805      	ldr	r0, [sp, #20]
    7460:	4798      	blx	r3
    7462:	9b01      	ldr	r3, [sp, #4]
    7464:	2001      	movs	r0, #1
    7466:	429d      	cmp	r5, r3
    7468:	d027      	beq.n	74ba <_scanf_i+0x1e2>
    746a:	2210      	movs	r2, #16
    746c:	6823      	ldr	r3, [r4, #0]
    746e:	401a      	ands	r2, r3
    7470:	d11c      	bne.n	74ac <_scanf_i+0x1d4>
    7472:	702a      	strb	r2, [r5, #0]
    7474:	6863      	ldr	r3, [r4, #4]
    7476:	9901      	ldr	r1, [sp, #4]
    7478:	9805      	ldr	r0, [sp, #20]
    747a:	9e06      	ldr	r6, [sp, #24]
    747c:	47b0      	blx	r6
    747e:	9b02      	ldr	r3, [sp, #8]
    7480:	6822      	ldr	r2, [r4, #0]
    7482:	681b      	ldr	r3, [r3, #0]
    7484:	0691      	lsls	r1, r2, #26
    7486:	d507      	bpl.n	7498 <_scanf_i+0x1c0>
    7488:	9902      	ldr	r1, [sp, #8]
    748a:	1d1a      	adds	r2, r3, #4
    748c:	600a      	str	r2, [r1, #0]
    748e:	681b      	ldr	r3, [r3, #0]
    7490:	6018      	str	r0, [r3, #0]
    7492:	e008      	b.n	74a6 <_scanf_i+0x1ce>
    7494:	2700      	movs	r7, #0
    7496:	e7d6      	b.n	7446 <_scanf_i+0x16e>
    7498:	07d1      	lsls	r1, r2, #31
    749a:	d5f5      	bpl.n	7488 <_scanf_i+0x1b0>
    749c:	9902      	ldr	r1, [sp, #8]
    749e:	1d1a      	adds	r2, r3, #4
    74a0:	600a      	str	r2, [r1, #0]
    74a2:	681b      	ldr	r3, [r3, #0]
    74a4:	8018      	strh	r0, [r3, #0]
    74a6:	68e3      	ldr	r3, [r4, #12]
    74a8:	3301      	adds	r3, #1
    74aa:	60e3      	str	r3, [r4, #12]
    74ac:	2000      	movs	r0, #0
    74ae:	9b01      	ldr	r3, [sp, #4]
    74b0:	1aed      	subs	r5, r5, r3
    74b2:	6923      	ldr	r3, [r4, #16]
    74b4:	19ef      	adds	r7, r5, r7
    74b6:	19df      	adds	r7, r3, r7
    74b8:	6127      	str	r7, [r4, #16]
    74ba:	b00d      	add	sp, #52	; 0x34
    74bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74be:	46c0      	nop			; (mov r8, r8)
    74c0:	0000adc8 	.word	0x0000adc8
    74c4:	00007819 	.word	0x00007819
    74c8:	00007949 	.word	0x00007949
    74cc:	fffffaff 	.word	0xfffffaff
    74d0:	0000add4 	.word	0x0000add4
    74d4:	fffff6ff 	.word	0xfffff6ff

000074d8 <lflush>:
    74d8:	2209      	movs	r2, #9
    74da:	b510      	push	{r4, lr}
    74dc:	8983      	ldrh	r3, [r0, #12]
    74de:	4013      	ands	r3, r2
    74e0:	2200      	movs	r2, #0
    74e2:	2b09      	cmp	r3, #9
    74e4:	d102      	bne.n	74ec <lflush+0x14>
    74e6:	f7ff f8a3 	bl	6630 <fflush>
    74ea:	0002      	movs	r2, r0
    74ec:	0010      	movs	r0, r2
    74ee:	bd10      	pop	{r4, pc}

000074f0 <__srefill_r>:
    74f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74f2:	0005      	movs	r5, r0
    74f4:	000c      	movs	r4, r1
    74f6:	2800      	cmp	r0, #0
    74f8:	d004      	beq.n	7504 <__srefill_r+0x14>
    74fa:	6983      	ldr	r3, [r0, #24]
    74fc:	2b00      	cmp	r3, #0
    74fe:	d101      	bne.n	7504 <__srefill_r+0x14>
    7500:	f7ff f8ec 	bl	66dc <__sinit>
    7504:	4b3d      	ldr	r3, [pc, #244]	; (75fc <__srefill_r+0x10c>)
    7506:	429c      	cmp	r4, r3
    7508:	d10a      	bne.n	7520 <__srefill_r+0x30>
    750a:	686c      	ldr	r4, [r5, #4]
    750c:	2300      	movs	r3, #0
    750e:	6063      	str	r3, [r4, #4]
    7510:	230c      	movs	r3, #12
    7512:	5ee2      	ldrsh	r2, [r4, r3]
    7514:	b293      	uxth	r3, r2
    7516:	0699      	lsls	r1, r3, #26
    7518:	d50c      	bpl.n	7534 <__srefill_r+0x44>
    751a:	2001      	movs	r0, #1
    751c:	4240      	negs	r0, r0
    751e:	e068      	b.n	75f2 <__srefill_r+0x102>
    7520:	4b37      	ldr	r3, [pc, #220]	; (7600 <__srefill_r+0x110>)
    7522:	429c      	cmp	r4, r3
    7524:	d101      	bne.n	752a <__srefill_r+0x3a>
    7526:	68ac      	ldr	r4, [r5, #8]
    7528:	e7f0      	b.n	750c <__srefill_r+0x1c>
    752a:	4b36      	ldr	r3, [pc, #216]	; (7604 <__srefill_r+0x114>)
    752c:	429c      	cmp	r4, r3
    752e:	d1ed      	bne.n	750c <__srefill_r+0x1c>
    7530:	68ec      	ldr	r4, [r5, #12]
    7532:	e7eb      	b.n	750c <__srefill_r+0x1c>
    7534:	0759      	lsls	r1, r3, #29
    7536:	d44a      	bmi.n	75ce <__srefill_r+0xde>
    7538:	06d9      	lsls	r1, r3, #27
    753a:	d405      	bmi.n	7548 <__srefill_r+0x58>
    753c:	2309      	movs	r3, #9
    753e:	602b      	str	r3, [r5, #0]
    7540:	3337      	adds	r3, #55	; 0x37
    7542:	4313      	orrs	r3, r2
    7544:	81a3      	strh	r3, [r4, #12]
    7546:	e7e8      	b.n	751a <__srefill_r+0x2a>
    7548:	2608      	movs	r6, #8
    754a:	4233      	tst	r3, r6
    754c:	d00a      	beq.n	7564 <__srefill_r+0x74>
    754e:	0021      	movs	r1, r4
    7550:	0028      	movs	r0, r5
    7552:	f7ff f841 	bl	65d8 <_fflush_r>
    7556:	2800      	cmp	r0, #0
    7558:	d1df      	bne.n	751a <__srefill_r+0x2a>
    755a:	89a3      	ldrh	r3, [r4, #12]
    755c:	60a0      	str	r0, [r4, #8]
    755e:	43b3      	bics	r3, r6
    7560:	81a3      	strh	r3, [r4, #12]
    7562:	61a0      	str	r0, [r4, #24]
    7564:	2304      	movs	r3, #4
    7566:	89a2      	ldrh	r2, [r4, #12]
    7568:	4313      	orrs	r3, r2
    756a:	81a3      	strh	r3, [r4, #12]
    756c:	6923      	ldr	r3, [r4, #16]
    756e:	2b00      	cmp	r3, #0
    7570:	d103      	bne.n	757a <__srefill_r+0x8a>
    7572:	0021      	movs	r1, r4
    7574:	0028      	movs	r0, r5
    7576:	f7ff f98b 	bl	6890 <__smakebuf_r>
    757a:	230c      	movs	r3, #12
    757c:	5ee7      	ldrsh	r7, [r4, r3]
    757e:	b2be      	uxth	r6, r7
    7580:	07b3      	lsls	r3, r6, #30
    7582:	d00f      	beq.n	75a4 <__srefill_r+0xb4>
    7584:	2301      	movs	r3, #1
    7586:	81a3      	strh	r3, [r4, #12]
    7588:	4b1f      	ldr	r3, [pc, #124]	; (7608 <__srefill_r+0x118>)
    758a:	4920      	ldr	r1, [pc, #128]	; (760c <__srefill_r+0x11c>)
    758c:	6818      	ldr	r0, [r3, #0]
    758e:	f7ff f919 	bl	67c4 <_fwalk>
    7592:	2309      	movs	r3, #9
    7594:	81a7      	strh	r7, [r4, #12]
    7596:	401e      	ands	r6, r3
    7598:	429e      	cmp	r6, r3
    759a:	d103      	bne.n	75a4 <__srefill_r+0xb4>
    759c:	0021      	movs	r1, r4
    759e:	0028      	movs	r0, r5
    75a0:	f7fe ff90 	bl	64c4 <__sflush_r>
    75a4:	6923      	ldr	r3, [r4, #16]
    75a6:	6922      	ldr	r2, [r4, #16]
    75a8:	6023      	str	r3, [r4, #0]
    75aa:	0028      	movs	r0, r5
    75ac:	6963      	ldr	r3, [r4, #20]
    75ae:	6a21      	ldr	r1, [r4, #32]
    75b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    75b2:	47a8      	blx	r5
    75b4:	0002      	movs	r2, r0
    75b6:	6060      	str	r0, [r4, #4]
    75b8:	2000      	movs	r0, #0
    75ba:	4282      	cmp	r2, r0
    75bc:	dc19      	bgt.n	75f2 <__srefill_r+0x102>
    75be:	89a1      	ldrh	r1, [r4, #12]
    75c0:	4282      	cmp	r2, r0
    75c2:	d117      	bne.n	75f4 <__srefill_r+0x104>
    75c4:	2320      	movs	r3, #32
    75c6:	430b      	orrs	r3, r1
    75c8:	81a3      	strh	r3, [r4, #12]
    75ca:	3801      	subs	r0, #1
    75cc:	e011      	b.n	75f2 <__srefill_r+0x102>
    75ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    75d0:	2900      	cmp	r1, #0
    75d2:	d0cb      	beq.n	756c <__srefill_r+0x7c>
    75d4:	0023      	movs	r3, r4
    75d6:	3344      	adds	r3, #68	; 0x44
    75d8:	4299      	cmp	r1, r3
    75da:	d002      	beq.n	75e2 <__srefill_r+0xf2>
    75dc:	0028      	movs	r0, r5
    75de:	f7fe fc97 	bl	5f10 <_free_r>
    75e2:	2000      	movs	r0, #0
    75e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    75e6:	6360      	str	r0, [r4, #52]	; 0x34
    75e8:	6063      	str	r3, [r4, #4]
    75ea:	4283      	cmp	r3, r0
    75ec:	d0be      	beq.n	756c <__srefill_r+0x7c>
    75ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    75f0:	6023      	str	r3, [r4, #0]
    75f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75f4:	2340      	movs	r3, #64	; 0x40
    75f6:	6060      	str	r0, [r4, #4]
    75f8:	430b      	orrs	r3, r1
    75fa:	e7a3      	b.n	7544 <__srefill_r+0x54>
    75fc:	0000ad54 	.word	0x0000ad54
    7600:	0000ad74 	.word	0x0000ad74
    7604:	0000ad34 	.word	0x0000ad34
    7608:	0000ad30 	.word	0x0000ad30
    760c:	000074d9 	.word	0x000074d9

00007610 <__sccl>:
    7610:	b570      	push	{r4, r5, r6, lr}
    7612:	780b      	ldrb	r3, [r1, #0]
    7614:	2b5e      	cmp	r3, #94	; 0x5e
    7616:	d00d      	beq.n	7634 <__sccl+0x24>
    7618:	1c4a      	adds	r2, r1, #1
    761a:	2100      	movs	r1, #0
    761c:	0004      	movs	r4, r0
    761e:	1c45      	adds	r5, r0, #1
    7620:	35ff      	adds	r5, #255	; 0xff
    7622:	7021      	strb	r1, [r4, #0]
    7624:	3401      	adds	r4, #1
    7626:	42a5      	cmp	r5, r4
    7628:	d1fb      	bne.n	7622 <__sccl+0x12>
    762a:	2b00      	cmp	r3, #0
    762c:	d106      	bne.n	763c <__sccl+0x2c>
    762e:	3a01      	subs	r2, #1
    7630:	0010      	movs	r0, r2
    7632:	bd70      	pop	{r4, r5, r6, pc}
    7634:	1c8a      	adds	r2, r1, #2
    7636:	784b      	ldrb	r3, [r1, #1]
    7638:	2101      	movs	r1, #1
    763a:	e7ef      	b.n	761c <__sccl+0xc>
    763c:	2401      	movs	r4, #1
    763e:	404c      	eors	r4, r1
    7640:	0011      	movs	r1, r2
    7642:	54c4      	strb	r4, [r0, r3]
    7644:	780d      	ldrb	r5, [r1, #0]
    7646:	1c4a      	adds	r2, r1, #1
    7648:	2d2d      	cmp	r5, #45	; 0x2d
    764a:	d007      	beq.n	765c <__sccl+0x4c>
    764c:	2d5d      	cmp	r5, #93	; 0x5d
    764e:	d0ef      	beq.n	7630 <__sccl+0x20>
    7650:	2d00      	cmp	r5, #0
    7652:	d101      	bne.n	7658 <__sccl+0x48>
    7654:	000a      	movs	r2, r1
    7656:	e7eb      	b.n	7630 <__sccl+0x20>
    7658:	002b      	movs	r3, r5
    765a:	e7f1      	b.n	7640 <__sccl+0x30>
    765c:	784e      	ldrb	r6, [r1, #1]
    765e:	2e5d      	cmp	r6, #93	; 0x5d
    7660:	d0fa      	beq.n	7658 <__sccl+0x48>
    7662:	42b3      	cmp	r3, r6
    7664:	dcf8      	bgt.n	7658 <__sccl+0x48>
    7666:	3102      	adds	r1, #2
    7668:	3301      	adds	r3, #1
    766a:	54c4      	strb	r4, [r0, r3]
    766c:	429e      	cmp	r6, r3
    766e:	dcfb      	bgt.n	7668 <__sccl+0x58>
    7670:	e7e8      	b.n	7644 <__sccl+0x34>
	...

00007674 <__sread>:
    7674:	b570      	push	{r4, r5, r6, lr}
    7676:	000c      	movs	r4, r1
    7678:	250e      	movs	r5, #14
    767a:	5f49      	ldrsh	r1, [r1, r5]
    767c:	f000 fad8 	bl	7c30 <_read_r>
    7680:	2800      	cmp	r0, #0
    7682:	db03      	blt.n	768c <__sread+0x18>
    7684:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7686:	181b      	adds	r3, r3, r0
    7688:	6563      	str	r3, [r4, #84]	; 0x54
    768a:	bd70      	pop	{r4, r5, r6, pc}
    768c:	89a3      	ldrh	r3, [r4, #12]
    768e:	4a02      	ldr	r2, [pc, #8]	; (7698 <__sread+0x24>)
    7690:	4013      	ands	r3, r2
    7692:	81a3      	strh	r3, [r4, #12]
    7694:	e7f9      	b.n	768a <__sread+0x16>
    7696:	46c0      	nop			; (mov r8, r8)
    7698:	ffffefff 	.word	0xffffefff

0000769c <__swrite>:
    769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    769e:	001f      	movs	r7, r3
    76a0:	898b      	ldrh	r3, [r1, #12]
    76a2:	0005      	movs	r5, r0
    76a4:	000c      	movs	r4, r1
    76a6:	0016      	movs	r6, r2
    76a8:	05db      	lsls	r3, r3, #23
    76aa:	d505      	bpl.n	76b8 <__swrite+0x1c>
    76ac:	230e      	movs	r3, #14
    76ae:	5ec9      	ldrsh	r1, [r1, r3]
    76b0:	2200      	movs	r2, #0
    76b2:	2302      	movs	r3, #2
    76b4:	f000 fa64 	bl	7b80 <_lseek_r>
    76b8:	89a3      	ldrh	r3, [r4, #12]
    76ba:	4a05      	ldr	r2, [pc, #20]	; (76d0 <__swrite+0x34>)
    76bc:	0028      	movs	r0, r5
    76be:	4013      	ands	r3, r2
    76c0:	81a3      	strh	r3, [r4, #12]
    76c2:	0032      	movs	r2, r6
    76c4:	230e      	movs	r3, #14
    76c6:	5ee1      	ldrsh	r1, [r4, r3]
    76c8:	003b      	movs	r3, r7
    76ca:	f000 f9fd 	bl	7ac8 <_write_r>
    76ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76d0:	ffffefff 	.word	0xffffefff

000076d4 <__sseek>:
    76d4:	b570      	push	{r4, r5, r6, lr}
    76d6:	000c      	movs	r4, r1
    76d8:	250e      	movs	r5, #14
    76da:	5f49      	ldrsh	r1, [r1, r5]
    76dc:	f000 fa50 	bl	7b80 <_lseek_r>
    76e0:	89a3      	ldrh	r3, [r4, #12]
    76e2:	1c42      	adds	r2, r0, #1
    76e4:	d103      	bne.n	76ee <__sseek+0x1a>
    76e6:	4a05      	ldr	r2, [pc, #20]	; (76fc <__sseek+0x28>)
    76e8:	4013      	ands	r3, r2
    76ea:	81a3      	strh	r3, [r4, #12]
    76ec:	bd70      	pop	{r4, r5, r6, pc}
    76ee:	2280      	movs	r2, #128	; 0x80
    76f0:	0152      	lsls	r2, r2, #5
    76f2:	4313      	orrs	r3, r2
    76f4:	81a3      	strh	r3, [r4, #12]
    76f6:	6560      	str	r0, [r4, #84]	; 0x54
    76f8:	e7f8      	b.n	76ec <__sseek+0x18>
    76fa:	46c0      	nop			; (mov r8, r8)
    76fc:	ffffefff 	.word	0xffffefff

00007700 <__sclose>:
    7700:	b510      	push	{r4, lr}
    7702:	230e      	movs	r3, #14
    7704:	5ec9      	ldrsh	r1, [r1, r3]
    7706:	f000 f9f3 	bl	7af0 <_close_r>
    770a:	bd10      	pop	{r4, pc}

0000770c <_strtol_l.isra.0>:
    770c:	b5f0      	push	{r4, r5, r6, r7, lr}
    770e:	001f      	movs	r7, r3
    7710:	000e      	movs	r6, r1
    7712:	b087      	sub	sp, #28
    7714:	9005      	str	r0, [sp, #20]
    7716:	9103      	str	r1, [sp, #12]
    7718:	9202      	str	r2, [sp, #8]
    771a:	980c      	ldr	r0, [sp, #48]	; 0x30
    771c:	7834      	ldrb	r4, [r6, #0]
    771e:	f000 fa1d 	bl	7b5c <__locale_ctype_ptr_l>
    7722:	2208      	movs	r2, #8
    7724:	1900      	adds	r0, r0, r4
    7726:	7843      	ldrb	r3, [r0, #1]
    7728:	1c75      	adds	r5, r6, #1
    772a:	4013      	ands	r3, r2
    772c:	d10c      	bne.n	7748 <_strtol_l.isra.0+0x3c>
    772e:	2c2d      	cmp	r4, #45	; 0x2d
    7730:	d10c      	bne.n	774c <_strtol_l.isra.0+0x40>
    7732:	3301      	adds	r3, #1
    7734:	782c      	ldrb	r4, [r5, #0]
    7736:	9301      	str	r3, [sp, #4]
    7738:	1cb5      	adds	r5, r6, #2
    773a:	2f00      	cmp	r7, #0
    773c:	d00c      	beq.n	7758 <_strtol_l.isra.0+0x4c>
    773e:	2f10      	cmp	r7, #16
    7740:	d114      	bne.n	776c <_strtol_l.isra.0+0x60>
    7742:	2c30      	cmp	r4, #48	; 0x30
    7744:	d00a      	beq.n	775c <_strtol_l.isra.0+0x50>
    7746:	e011      	b.n	776c <_strtol_l.isra.0+0x60>
    7748:	002e      	movs	r6, r5
    774a:	e7e6      	b.n	771a <_strtol_l.isra.0+0xe>
    774c:	9301      	str	r3, [sp, #4]
    774e:	2c2b      	cmp	r4, #43	; 0x2b
    7750:	d1f3      	bne.n	773a <_strtol_l.isra.0+0x2e>
    7752:	782c      	ldrb	r4, [r5, #0]
    7754:	1cb5      	adds	r5, r6, #2
    7756:	e7f0      	b.n	773a <_strtol_l.isra.0+0x2e>
    7758:	2c30      	cmp	r4, #48	; 0x30
    775a:	d12f      	bne.n	77bc <_strtol_l.isra.0+0xb0>
    775c:	2220      	movs	r2, #32
    775e:	782b      	ldrb	r3, [r5, #0]
    7760:	4393      	bics	r3, r2
    7762:	2b58      	cmp	r3, #88	; 0x58
    7764:	d151      	bne.n	780a <_strtol_l.isra.0+0xfe>
    7766:	2710      	movs	r7, #16
    7768:	786c      	ldrb	r4, [r5, #1]
    776a:	3502      	adds	r5, #2
    776c:	9b01      	ldr	r3, [sp, #4]
    776e:	4a29      	ldr	r2, [pc, #164]	; (7814 <_strtol_l.isra.0+0x108>)
    7770:	0039      	movs	r1, r7
    7772:	189e      	adds	r6, r3, r2
    7774:	0030      	movs	r0, r6
    7776:	f7fe fa5f 	bl	5c38 <__aeabi_uidivmod>
    777a:	0030      	movs	r0, r6
    777c:	9104      	str	r1, [sp, #16]
    777e:	0039      	movs	r1, r7
    7780:	f7fe f9d4 	bl	5b2c <__udivsi3>
    7784:	2101      	movs	r1, #1
    7786:	2300      	movs	r3, #0
    7788:	4249      	negs	r1, r1
    778a:	0002      	movs	r2, r0
    778c:	468c      	mov	ip, r1
    778e:	0018      	movs	r0, r3
    7790:	0021      	movs	r1, r4
    7792:	3930      	subs	r1, #48	; 0x30
    7794:	2909      	cmp	r1, #9
    7796:	d813      	bhi.n	77c0 <_strtol_l.isra.0+0xb4>
    7798:	000c      	movs	r4, r1
    779a:	42a7      	cmp	r7, r4
    779c:	dd1c      	ble.n	77d8 <_strtol_l.isra.0+0xcc>
    779e:	1c59      	adds	r1, r3, #1
    77a0:	d009      	beq.n	77b6 <_strtol_l.isra.0+0xaa>
    77a2:	4663      	mov	r3, ip
    77a4:	4282      	cmp	r2, r0
    77a6:	d306      	bcc.n	77b6 <_strtol_l.isra.0+0xaa>
    77a8:	d102      	bne.n	77b0 <_strtol_l.isra.0+0xa4>
    77aa:	9904      	ldr	r1, [sp, #16]
    77ac:	42a1      	cmp	r1, r4
    77ae:	db02      	blt.n	77b6 <_strtol_l.isra.0+0xaa>
    77b0:	2301      	movs	r3, #1
    77b2:	4378      	muls	r0, r7
    77b4:	1820      	adds	r0, r4, r0
    77b6:	782c      	ldrb	r4, [r5, #0]
    77b8:	3501      	adds	r5, #1
    77ba:	e7e9      	b.n	7790 <_strtol_l.isra.0+0x84>
    77bc:	270a      	movs	r7, #10
    77be:	e7d5      	b.n	776c <_strtol_l.isra.0+0x60>
    77c0:	0021      	movs	r1, r4
    77c2:	3941      	subs	r1, #65	; 0x41
    77c4:	2919      	cmp	r1, #25
    77c6:	d801      	bhi.n	77cc <_strtol_l.isra.0+0xc0>
    77c8:	3c37      	subs	r4, #55	; 0x37
    77ca:	e7e6      	b.n	779a <_strtol_l.isra.0+0x8e>
    77cc:	0021      	movs	r1, r4
    77ce:	3961      	subs	r1, #97	; 0x61
    77d0:	2919      	cmp	r1, #25
    77d2:	d801      	bhi.n	77d8 <_strtol_l.isra.0+0xcc>
    77d4:	3c57      	subs	r4, #87	; 0x57
    77d6:	e7e0      	b.n	779a <_strtol_l.isra.0+0x8e>
    77d8:	1c5a      	adds	r2, r3, #1
    77da:	d108      	bne.n	77ee <_strtol_l.isra.0+0xe2>
    77dc:	9a05      	ldr	r2, [sp, #20]
    77de:	3323      	adds	r3, #35	; 0x23
    77e0:	6013      	str	r3, [r2, #0]
    77e2:	9b02      	ldr	r3, [sp, #8]
    77e4:	0030      	movs	r0, r6
    77e6:	2b00      	cmp	r3, #0
    77e8:	d10b      	bne.n	7802 <_strtol_l.isra.0+0xf6>
    77ea:	b007      	add	sp, #28
    77ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77ee:	9a01      	ldr	r2, [sp, #4]
    77f0:	2a00      	cmp	r2, #0
    77f2:	d000      	beq.n	77f6 <_strtol_l.isra.0+0xea>
    77f4:	4240      	negs	r0, r0
    77f6:	9a02      	ldr	r2, [sp, #8]
    77f8:	2a00      	cmp	r2, #0
    77fa:	d0f6      	beq.n	77ea <_strtol_l.isra.0+0xde>
    77fc:	9a03      	ldr	r2, [sp, #12]
    77fe:	2b00      	cmp	r3, #0
    7800:	d000      	beq.n	7804 <_strtol_l.isra.0+0xf8>
    7802:	1e6a      	subs	r2, r5, #1
    7804:	9b02      	ldr	r3, [sp, #8]
    7806:	601a      	str	r2, [r3, #0]
    7808:	e7ef      	b.n	77ea <_strtol_l.isra.0+0xde>
    780a:	2430      	movs	r4, #48	; 0x30
    780c:	2f00      	cmp	r7, #0
    780e:	d1ad      	bne.n	776c <_strtol_l.isra.0+0x60>
    7810:	3708      	adds	r7, #8
    7812:	e7ab      	b.n	776c <_strtol_l.isra.0+0x60>
    7814:	7fffffff 	.word	0x7fffffff

00007818 <_strtol_r>:
    7818:	b513      	push	{r0, r1, r4, lr}
    781a:	4c05      	ldr	r4, [pc, #20]	; (7830 <_strtol_r+0x18>)
    781c:	6824      	ldr	r4, [r4, #0]
    781e:	6a24      	ldr	r4, [r4, #32]
    7820:	2c00      	cmp	r4, #0
    7822:	d100      	bne.n	7826 <_strtol_r+0xe>
    7824:	4c03      	ldr	r4, [pc, #12]	; (7834 <_strtol_r+0x1c>)
    7826:	9400      	str	r4, [sp, #0]
    7828:	f7ff ff70 	bl	770c <_strtol_l.isra.0>
    782c:	bd16      	pop	{r1, r2, r4, pc}
    782e:	46c0      	nop			; (mov r8, r8)
    7830:	20000108 	.word	0x20000108
    7834:	2000016c 	.word	0x2000016c

00007838 <_strtoul_l.isra.0>:
    7838:	b5f0      	push	{r4, r5, r6, r7, lr}
    783a:	001f      	movs	r7, r3
    783c:	000e      	movs	r6, r1
    783e:	b087      	sub	sp, #28
    7840:	9005      	str	r0, [sp, #20]
    7842:	9103      	str	r1, [sp, #12]
    7844:	9201      	str	r2, [sp, #4]
    7846:	980c      	ldr	r0, [sp, #48]	; 0x30
    7848:	7834      	ldrb	r4, [r6, #0]
    784a:	f000 f987 	bl	7b5c <__locale_ctype_ptr_l>
    784e:	2208      	movs	r2, #8
    7850:	1900      	adds	r0, r0, r4
    7852:	7843      	ldrb	r3, [r0, #1]
    7854:	1c75      	adds	r5, r6, #1
    7856:	4013      	ands	r3, r2
    7858:	d10c      	bne.n	7874 <_strtoul_l.isra.0+0x3c>
    785a:	2c2d      	cmp	r4, #45	; 0x2d
    785c:	d10c      	bne.n	7878 <_strtoul_l.isra.0+0x40>
    785e:	3301      	adds	r3, #1
    7860:	782c      	ldrb	r4, [r5, #0]
    7862:	9302      	str	r3, [sp, #8]
    7864:	1cb5      	adds	r5, r6, #2
    7866:	2f00      	cmp	r7, #0
    7868:	d00c      	beq.n	7884 <_strtoul_l.isra.0+0x4c>
    786a:	2f10      	cmp	r7, #16
    786c:	d114      	bne.n	7898 <_strtoul_l.isra.0+0x60>
    786e:	2c30      	cmp	r4, #48	; 0x30
    7870:	d00a      	beq.n	7888 <_strtoul_l.isra.0+0x50>
    7872:	e011      	b.n	7898 <_strtoul_l.isra.0+0x60>
    7874:	002e      	movs	r6, r5
    7876:	e7e6      	b.n	7846 <_strtoul_l.isra.0+0xe>
    7878:	9302      	str	r3, [sp, #8]
    787a:	2c2b      	cmp	r4, #43	; 0x2b
    787c:	d1f3      	bne.n	7866 <_strtoul_l.isra.0+0x2e>
    787e:	782c      	ldrb	r4, [r5, #0]
    7880:	1cb5      	adds	r5, r6, #2
    7882:	e7f0      	b.n	7866 <_strtoul_l.isra.0+0x2e>
    7884:	2c30      	cmp	r4, #48	; 0x30
    7886:	d12f      	bne.n	78e8 <_strtoul_l.isra.0+0xb0>
    7888:	2220      	movs	r2, #32
    788a:	782b      	ldrb	r3, [r5, #0]
    788c:	4393      	bics	r3, r2
    788e:	2b58      	cmp	r3, #88	; 0x58
    7890:	d154      	bne.n	793c <_strtoul_l.isra.0+0x104>
    7892:	2710      	movs	r7, #16
    7894:	786c      	ldrb	r4, [r5, #1]
    7896:	3502      	adds	r5, #2
    7898:	2001      	movs	r0, #1
    789a:	0039      	movs	r1, r7
    789c:	4240      	negs	r0, r0
    789e:	f7fe f945 	bl	5b2c <__udivsi3>
    78a2:	0006      	movs	r6, r0
    78a4:	2001      	movs	r0, #1
    78a6:	0039      	movs	r1, r7
    78a8:	4240      	negs	r0, r0
    78aa:	f7fe f9c5 	bl	5c38 <__aeabi_uidivmod>
    78ae:	2300      	movs	r3, #0
    78b0:	9104      	str	r1, [sp, #16]
    78b2:	2101      	movs	r1, #1
    78b4:	2201      	movs	r2, #1
    78b6:	0018      	movs	r0, r3
    78b8:	468c      	mov	ip, r1
    78ba:	4252      	negs	r2, r2
    78bc:	0021      	movs	r1, r4
    78be:	3930      	subs	r1, #48	; 0x30
    78c0:	2909      	cmp	r1, #9
    78c2:	d813      	bhi.n	78ec <_strtoul_l.isra.0+0xb4>
    78c4:	000c      	movs	r4, r1
    78c6:	42a7      	cmp	r7, r4
    78c8:	dd1e      	ble.n	7908 <_strtoul_l.isra.0+0xd0>
    78ca:	2b00      	cmp	r3, #0
    78cc:	db1a      	blt.n	7904 <_strtoul_l.isra.0+0xcc>
    78ce:	0013      	movs	r3, r2
    78d0:	4286      	cmp	r6, r0
    78d2:	d306      	bcc.n	78e2 <_strtoul_l.isra.0+0xaa>
    78d4:	d102      	bne.n	78dc <_strtoul_l.isra.0+0xa4>
    78d6:	9904      	ldr	r1, [sp, #16]
    78d8:	42a1      	cmp	r1, r4
    78da:	db02      	blt.n	78e2 <_strtoul_l.isra.0+0xaa>
    78dc:	4663      	mov	r3, ip
    78de:	4378      	muls	r0, r7
    78e0:	1820      	adds	r0, r4, r0
    78e2:	782c      	ldrb	r4, [r5, #0]
    78e4:	3501      	adds	r5, #1
    78e6:	e7e9      	b.n	78bc <_strtoul_l.isra.0+0x84>
    78e8:	270a      	movs	r7, #10
    78ea:	e7d5      	b.n	7898 <_strtoul_l.isra.0+0x60>
    78ec:	0021      	movs	r1, r4
    78ee:	3941      	subs	r1, #65	; 0x41
    78f0:	2919      	cmp	r1, #25
    78f2:	d801      	bhi.n	78f8 <_strtoul_l.isra.0+0xc0>
    78f4:	3c37      	subs	r4, #55	; 0x37
    78f6:	e7e6      	b.n	78c6 <_strtoul_l.isra.0+0x8e>
    78f8:	0021      	movs	r1, r4
    78fa:	3961      	subs	r1, #97	; 0x61
    78fc:	2919      	cmp	r1, #25
    78fe:	d803      	bhi.n	7908 <_strtoul_l.isra.0+0xd0>
    7900:	3c57      	subs	r4, #87	; 0x57
    7902:	e7e0      	b.n	78c6 <_strtoul_l.isra.0+0x8e>
    7904:	0013      	movs	r3, r2
    7906:	e7ec      	b.n	78e2 <_strtoul_l.isra.0+0xaa>
    7908:	2b00      	cmp	r3, #0
    790a:	da09      	bge.n	7920 <_strtoul_l.isra.0+0xe8>
    790c:	2322      	movs	r3, #34	; 0x22
    790e:	2001      	movs	r0, #1
    7910:	9a05      	ldr	r2, [sp, #20]
    7912:	4240      	negs	r0, r0
    7914:	6013      	str	r3, [r2, #0]
    7916:	9b01      	ldr	r3, [sp, #4]
    7918:	2b00      	cmp	r3, #0
    791a:	d10b      	bne.n	7934 <_strtoul_l.isra.0+0xfc>
    791c:	b007      	add	sp, #28
    791e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7920:	9a02      	ldr	r2, [sp, #8]
    7922:	2a00      	cmp	r2, #0
    7924:	d000      	beq.n	7928 <_strtoul_l.isra.0+0xf0>
    7926:	4240      	negs	r0, r0
    7928:	9a01      	ldr	r2, [sp, #4]
    792a:	2a00      	cmp	r2, #0
    792c:	d0f6      	beq.n	791c <_strtoul_l.isra.0+0xe4>
    792e:	9a03      	ldr	r2, [sp, #12]
    7930:	2b00      	cmp	r3, #0
    7932:	d000      	beq.n	7936 <_strtoul_l.isra.0+0xfe>
    7934:	1e6a      	subs	r2, r5, #1
    7936:	9b01      	ldr	r3, [sp, #4]
    7938:	601a      	str	r2, [r3, #0]
    793a:	e7ef      	b.n	791c <_strtoul_l.isra.0+0xe4>
    793c:	2430      	movs	r4, #48	; 0x30
    793e:	2f00      	cmp	r7, #0
    7940:	d1aa      	bne.n	7898 <_strtoul_l.isra.0+0x60>
    7942:	3708      	adds	r7, #8
    7944:	e7a8      	b.n	7898 <_strtoul_l.isra.0+0x60>
	...

00007948 <_strtoul_r>:
    7948:	b513      	push	{r0, r1, r4, lr}
    794a:	4c05      	ldr	r4, [pc, #20]	; (7960 <_strtoul_r+0x18>)
    794c:	6824      	ldr	r4, [r4, #0]
    794e:	6a24      	ldr	r4, [r4, #32]
    7950:	2c00      	cmp	r4, #0
    7952:	d100      	bne.n	7956 <_strtoul_r+0xe>
    7954:	4c03      	ldr	r4, [pc, #12]	; (7964 <_strtoul_r+0x1c>)
    7956:	9400      	str	r4, [sp, #0]
    7958:	f7ff ff6e 	bl	7838 <_strtoul_l.isra.0>
    795c:	bd16      	pop	{r1, r2, r4, pc}
    795e:	46c0      	nop			; (mov r8, r8)
    7960:	20000108 	.word	0x20000108
    7964:	2000016c 	.word	0x2000016c

00007968 <__submore>:
    7968:	000b      	movs	r3, r1
    796a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    796c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    796e:	3344      	adds	r3, #68	; 0x44
    7970:	000c      	movs	r4, r1
    7972:	429d      	cmp	r5, r3
    7974:	d11c      	bne.n	79b0 <__submore+0x48>
    7976:	2680      	movs	r6, #128	; 0x80
    7978:	00f6      	lsls	r6, r6, #3
    797a:	0031      	movs	r1, r6
    797c:	f7fe fb12 	bl	5fa4 <_malloc_r>
    7980:	2800      	cmp	r0, #0
    7982:	d102      	bne.n	798a <__submore+0x22>
    7984:	2001      	movs	r0, #1
    7986:	4240      	negs	r0, r0
    7988:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    798a:	0023      	movs	r3, r4
    798c:	6360      	str	r0, [r4, #52]	; 0x34
    798e:	63a6      	str	r6, [r4, #56]	; 0x38
    7990:	3346      	adds	r3, #70	; 0x46
    7992:	781a      	ldrb	r2, [r3, #0]
    7994:	4b10      	ldr	r3, [pc, #64]	; (79d8 <__submore+0x70>)
    7996:	54c2      	strb	r2, [r0, r3]
    7998:	0023      	movs	r3, r4
    799a:	3345      	adds	r3, #69	; 0x45
    799c:	781a      	ldrb	r2, [r3, #0]
    799e:	4b0f      	ldr	r3, [pc, #60]	; (79dc <__submore+0x74>)
    79a0:	54c2      	strb	r2, [r0, r3]
    79a2:	782a      	ldrb	r2, [r5, #0]
    79a4:	4b0e      	ldr	r3, [pc, #56]	; (79e0 <__submore+0x78>)
    79a6:	54c2      	strb	r2, [r0, r3]
    79a8:	18c0      	adds	r0, r0, r3
    79aa:	6020      	str	r0, [r4, #0]
    79ac:	2000      	movs	r0, #0
    79ae:	e7eb      	b.n	7988 <__submore+0x20>
    79b0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    79b2:	0029      	movs	r1, r5
    79b4:	0073      	lsls	r3, r6, #1
    79b6:	001a      	movs	r2, r3
    79b8:	9301      	str	r3, [sp, #4]
    79ba:	f000 f912 	bl	7be2 <_realloc_r>
    79be:	1e05      	subs	r5, r0, #0
    79c0:	d0e0      	beq.n	7984 <__submore+0x1c>
    79c2:	1987      	adds	r7, r0, r6
    79c4:	0001      	movs	r1, r0
    79c6:	0032      	movs	r2, r6
    79c8:	0038      	movs	r0, r7
    79ca:	f7fe fa7d 	bl	5ec8 <memcpy>
    79ce:	9b01      	ldr	r3, [sp, #4]
    79d0:	6027      	str	r7, [r4, #0]
    79d2:	6365      	str	r5, [r4, #52]	; 0x34
    79d4:	63a3      	str	r3, [r4, #56]	; 0x38
    79d6:	e7e9      	b.n	79ac <__submore+0x44>
    79d8:	000003ff 	.word	0x000003ff
    79dc:	000003fe 	.word	0x000003fe
    79e0:	000003fd 	.word	0x000003fd

000079e4 <_ungetc_r>:
    79e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79e6:	0005      	movs	r5, r0
    79e8:	000e      	movs	r6, r1
    79ea:	0014      	movs	r4, r2
    79ec:	1c4b      	adds	r3, r1, #1
    79ee:	d103      	bne.n	79f8 <_ungetc_r+0x14>
    79f0:	2601      	movs	r6, #1
    79f2:	4276      	negs	r6, r6
    79f4:	0030      	movs	r0, r6
    79f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79f8:	2800      	cmp	r0, #0
    79fa:	d004      	beq.n	7a06 <_ungetc_r+0x22>
    79fc:	6983      	ldr	r3, [r0, #24]
    79fe:	2b00      	cmp	r3, #0
    7a00:	d101      	bne.n	7a06 <_ungetc_r+0x22>
    7a02:	f7fe fe6b 	bl	66dc <__sinit>
    7a06:	4b2d      	ldr	r3, [pc, #180]	; (7abc <_ungetc_r+0xd8>)
    7a08:	429c      	cmp	r4, r3
    7a0a:	d12d      	bne.n	7a68 <_ungetc_r+0x84>
    7a0c:	686c      	ldr	r4, [r5, #4]
    7a0e:	2220      	movs	r2, #32
    7a10:	89a3      	ldrh	r3, [r4, #12]
    7a12:	4393      	bics	r3, r2
    7a14:	b21b      	sxth	r3, r3
    7a16:	81a3      	strh	r3, [r4, #12]
    7a18:	b29b      	uxth	r3, r3
    7a1a:	075a      	lsls	r2, r3, #29
    7a1c:	d413      	bmi.n	7a46 <_ungetc_r+0x62>
    7a1e:	06da      	lsls	r2, r3, #27
    7a20:	d5e6      	bpl.n	79f0 <_ungetc_r+0xc>
    7a22:	2708      	movs	r7, #8
    7a24:	423b      	tst	r3, r7
    7a26:	d00a      	beq.n	7a3e <_ungetc_r+0x5a>
    7a28:	0021      	movs	r1, r4
    7a2a:	0028      	movs	r0, r5
    7a2c:	f7fe fdd4 	bl	65d8 <_fflush_r>
    7a30:	2800      	cmp	r0, #0
    7a32:	d1dd      	bne.n	79f0 <_ungetc_r+0xc>
    7a34:	89a3      	ldrh	r3, [r4, #12]
    7a36:	60a0      	str	r0, [r4, #8]
    7a38:	43bb      	bics	r3, r7
    7a3a:	81a3      	strh	r3, [r4, #12]
    7a3c:	61a0      	str	r0, [r4, #24]
    7a3e:	2304      	movs	r3, #4
    7a40:	89a2      	ldrh	r2, [r4, #12]
    7a42:	4313      	orrs	r3, r2
    7a44:	81a3      	strh	r3, [r4, #12]
    7a46:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7a48:	b2f7      	uxtb	r7, r6
    7a4a:	6863      	ldr	r3, [r4, #4]
    7a4c:	b2f6      	uxtb	r6, r6
    7a4e:	2a00      	cmp	r2, #0
    7a50:	d01b      	beq.n	7a8a <_ungetc_r+0xa6>
    7a52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    7a54:	4293      	cmp	r3, r2
    7a56:	da11      	bge.n	7a7c <_ungetc_r+0x98>
    7a58:	6823      	ldr	r3, [r4, #0]
    7a5a:	3b01      	subs	r3, #1
    7a5c:	6023      	str	r3, [r4, #0]
    7a5e:	701f      	strb	r7, [r3, #0]
    7a60:	6863      	ldr	r3, [r4, #4]
    7a62:	3301      	adds	r3, #1
    7a64:	6063      	str	r3, [r4, #4]
    7a66:	e7c5      	b.n	79f4 <_ungetc_r+0x10>
    7a68:	4b15      	ldr	r3, [pc, #84]	; (7ac0 <_ungetc_r+0xdc>)
    7a6a:	429c      	cmp	r4, r3
    7a6c:	d101      	bne.n	7a72 <_ungetc_r+0x8e>
    7a6e:	68ac      	ldr	r4, [r5, #8]
    7a70:	e7cd      	b.n	7a0e <_ungetc_r+0x2a>
    7a72:	4b14      	ldr	r3, [pc, #80]	; (7ac4 <_ungetc_r+0xe0>)
    7a74:	429c      	cmp	r4, r3
    7a76:	d1ca      	bne.n	7a0e <_ungetc_r+0x2a>
    7a78:	68ec      	ldr	r4, [r5, #12]
    7a7a:	e7c8      	b.n	7a0e <_ungetc_r+0x2a>
    7a7c:	0021      	movs	r1, r4
    7a7e:	0028      	movs	r0, r5
    7a80:	f7ff ff72 	bl	7968 <__submore>
    7a84:	2800      	cmp	r0, #0
    7a86:	d0e7      	beq.n	7a58 <_ungetc_r+0x74>
    7a88:	e7b2      	b.n	79f0 <_ungetc_r+0xc>
    7a8a:	6921      	ldr	r1, [r4, #16]
    7a8c:	6822      	ldr	r2, [r4, #0]
    7a8e:	2900      	cmp	r1, #0
    7a90:	d007      	beq.n	7aa2 <_ungetc_r+0xbe>
    7a92:	4291      	cmp	r1, r2
    7a94:	d205      	bcs.n	7aa2 <_ungetc_r+0xbe>
    7a96:	1e51      	subs	r1, r2, #1
    7a98:	7808      	ldrb	r0, [r1, #0]
    7a9a:	4286      	cmp	r6, r0
    7a9c:	d101      	bne.n	7aa2 <_ungetc_r+0xbe>
    7a9e:	6021      	str	r1, [r4, #0]
    7aa0:	e7df      	b.n	7a62 <_ungetc_r+0x7e>
    7aa2:	6423      	str	r3, [r4, #64]	; 0x40
    7aa4:	0023      	movs	r3, r4
    7aa6:	3344      	adds	r3, #68	; 0x44
    7aa8:	6363      	str	r3, [r4, #52]	; 0x34
    7aaa:	2303      	movs	r3, #3
    7aac:	63a3      	str	r3, [r4, #56]	; 0x38
    7aae:	0023      	movs	r3, r4
    7ab0:	3346      	adds	r3, #70	; 0x46
    7ab2:	63e2      	str	r2, [r4, #60]	; 0x3c
    7ab4:	701f      	strb	r7, [r3, #0]
    7ab6:	6023      	str	r3, [r4, #0]
    7ab8:	2301      	movs	r3, #1
    7aba:	e7d3      	b.n	7a64 <_ungetc_r+0x80>
    7abc:	0000ad54 	.word	0x0000ad54
    7ac0:	0000ad74 	.word	0x0000ad74
    7ac4:	0000ad34 	.word	0x0000ad34

00007ac8 <_write_r>:
    7ac8:	b570      	push	{r4, r5, r6, lr}
    7aca:	0005      	movs	r5, r0
    7acc:	0008      	movs	r0, r1
    7ace:	0011      	movs	r1, r2
    7ad0:	2200      	movs	r2, #0
    7ad2:	4c06      	ldr	r4, [pc, #24]	; (7aec <_write_r+0x24>)
    7ad4:	6022      	str	r2, [r4, #0]
    7ad6:	001a      	movs	r2, r3
    7ad8:	f7f9 fe8a 	bl	17f0 <_write>
    7adc:	1c43      	adds	r3, r0, #1
    7ade:	d103      	bne.n	7ae8 <_write_r+0x20>
    7ae0:	6823      	ldr	r3, [r4, #0]
    7ae2:	2b00      	cmp	r3, #0
    7ae4:	d000      	beq.n	7ae8 <_write_r+0x20>
    7ae6:	602b      	str	r3, [r5, #0]
    7ae8:	bd70      	pop	{r4, r5, r6, pc}
    7aea:	46c0      	nop			; (mov r8, r8)
    7aec:	200012a0 	.word	0x200012a0

00007af0 <_close_r>:
    7af0:	2300      	movs	r3, #0
    7af2:	b570      	push	{r4, r5, r6, lr}
    7af4:	4c06      	ldr	r4, [pc, #24]	; (7b10 <_close_r+0x20>)
    7af6:	0005      	movs	r5, r0
    7af8:	0008      	movs	r0, r1
    7afa:	6023      	str	r3, [r4, #0]
    7afc:	f7f9 feb2 	bl	1864 <_close>
    7b00:	1c43      	adds	r3, r0, #1
    7b02:	d103      	bne.n	7b0c <_close_r+0x1c>
    7b04:	6823      	ldr	r3, [r4, #0]
    7b06:	2b00      	cmp	r3, #0
    7b08:	d000      	beq.n	7b0c <_close_r+0x1c>
    7b0a:	602b      	str	r3, [r5, #0]
    7b0c:	bd70      	pop	{r4, r5, r6, pc}
    7b0e:	46c0      	nop			; (mov r8, r8)
    7b10:	200012a0 	.word	0x200012a0

00007b14 <_fstat_r>:
    7b14:	2300      	movs	r3, #0
    7b16:	b570      	push	{r4, r5, r6, lr}
    7b18:	4c06      	ldr	r4, [pc, #24]	; (7b34 <_fstat_r+0x20>)
    7b1a:	0005      	movs	r5, r0
    7b1c:	0008      	movs	r0, r1
    7b1e:	0011      	movs	r1, r2
    7b20:	6023      	str	r3, [r4, #0]
    7b22:	f7f9 fea2 	bl	186a <_fstat>
    7b26:	1c43      	adds	r3, r0, #1
    7b28:	d103      	bne.n	7b32 <_fstat_r+0x1e>
    7b2a:	6823      	ldr	r3, [r4, #0]
    7b2c:	2b00      	cmp	r3, #0
    7b2e:	d000      	beq.n	7b32 <_fstat_r+0x1e>
    7b30:	602b      	str	r3, [r5, #0]
    7b32:	bd70      	pop	{r4, r5, r6, pc}
    7b34:	200012a0 	.word	0x200012a0

00007b38 <_isatty_r>:
    7b38:	2300      	movs	r3, #0
    7b3a:	b570      	push	{r4, r5, r6, lr}
    7b3c:	4c06      	ldr	r4, [pc, #24]	; (7b58 <_isatty_r+0x20>)
    7b3e:	0005      	movs	r5, r0
    7b40:	0008      	movs	r0, r1
    7b42:	6023      	str	r3, [r4, #0]
    7b44:	f7f9 fe96 	bl	1874 <_isatty>
    7b48:	1c43      	adds	r3, r0, #1
    7b4a:	d103      	bne.n	7b54 <_isatty_r+0x1c>
    7b4c:	6823      	ldr	r3, [r4, #0]
    7b4e:	2b00      	cmp	r3, #0
    7b50:	d000      	beq.n	7b54 <_isatty_r+0x1c>
    7b52:	602b      	str	r3, [r5, #0]
    7b54:	bd70      	pop	{r4, r5, r6, pc}
    7b56:	46c0      	nop			; (mov r8, r8)
    7b58:	200012a0 	.word	0x200012a0

00007b5c <__locale_ctype_ptr_l>:
    7b5c:	30ec      	adds	r0, #236	; 0xec
    7b5e:	6800      	ldr	r0, [r0, #0]
    7b60:	4770      	bx	lr
	...

00007b64 <__locale_ctype_ptr>:
    7b64:	4b04      	ldr	r3, [pc, #16]	; (7b78 <__locale_ctype_ptr+0x14>)
    7b66:	681b      	ldr	r3, [r3, #0]
    7b68:	6a1b      	ldr	r3, [r3, #32]
    7b6a:	2b00      	cmp	r3, #0
    7b6c:	d100      	bne.n	7b70 <__locale_ctype_ptr+0xc>
    7b6e:	4b03      	ldr	r3, [pc, #12]	; (7b7c <__locale_ctype_ptr+0x18>)
    7b70:	33ec      	adds	r3, #236	; 0xec
    7b72:	6818      	ldr	r0, [r3, #0]
    7b74:	4770      	bx	lr
    7b76:	46c0      	nop			; (mov r8, r8)
    7b78:	20000108 	.word	0x20000108
    7b7c:	2000016c 	.word	0x2000016c

00007b80 <_lseek_r>:
    7b80:	b570      	push	{r4, r5, r6, lr}
    7b82:	0005      	movs	r5, r0
    7b84:	0008      	movs	r0, r1
    7b86:	0011      	movs	r1, r2
    7b88:	2200      	movs	r2, #0
    7b8a:	4c06      	ldr	r4, [pc, #24]	; (7ba4 <_lseek_r+0x24>)
    7b8c:	6022      	str	r2, [r4, #0]
    7b8e:	001a      	movs	r2, r3
    7b90:	f7f9 fe72 	bl	1878 <_lseek>
    7b94:	1c43      	adds	r3, r0, #1
    7b96:	d103      	bne.n	7ba0 <_lseek_r+0x20>
    7b98:	6823      	ldr	r3, [r4, #0]
    7b9a:	2b00      	cmp	r3, #0
    7b9c:	d000      	beq.n	7ba0 <_lseek_r+0x20>
    7b9e:	602b      	str	r3, [r5, #0]
    7ba0:	bd70      	pop	{r4, r5, r6, pc}
    7ba2:	46c0      	nop			; (mov r8, r8)
    7ba4:	200012a0 	.word	0x200012a0

00007ba8 <__ascii_mbtowc>:
    7ba8:	b082      	sub	sp, #8
    7baa:	2900      	cmp	r1, #0
    7bac:	d100      	bne.n	7bb0 <__ascii_mbtowc+0x8>
    7bae:	a901      	add	r1, sp, #4
    7bb0:	1e10      	subs	r0, r2, #0
    7bb2:	d006      	beq.n	7bc2 <__ascii_mbtowc+0x1a>
    7bb4:	2b00      	cmp	r3, #0
    7bb6:	d006      	beq.n	7bc6 <__ascii_mbtowc+0x1e>
    7bb8:	7813      	ldrb	r3, [r2, #0]
    7bba:	600b      	str	r3, [r1, #0]
    7bbc:	7810      	ldrb	r0, [r2, #0]
    7bbe:	1e43      	subs	r3, r0, #1
    7bc0:	4198      	sbcs	r0, r3
    7bc2:	b002      	add	sp, #8
    7bc4:	4770      	bx	lr
    7bc6:	2002      	movs	r0, #2
    7bc8:	4240      	negs	r0, r0
    7bca:	e7fa      	b.n	7bc2 <__ascii_mbtowc+0x1a>

00007bcc <memchr>:
    7bcc:	b2c9      	uxtb	r1, r1
    7bce:	1882      	adds	r2, r0, r2
    7bd0:	4290      	cmp	r0, r2
    7bd2:	d101      	bne.n	7bd8 <memchr+0xc>
    7bd4:	2000      	movs	r0, #0
    7bd6:	4770      	bx	lr
    7bd8:	7803      	ldrb	r3, [r0, #0]
    7bda:	428b      	cmp	r3, r1
    7bdc:	d0fb      	beq.n	7bd6 <memchr+0xa>
    7bde:	3001      	adds	r0, #1
    7be0:	e7f6      	b.n	7bd0 <memchr+0x4>

00007be2 <_realloc_r>:
    7be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7be4:	0007      	movs	r7, r0
    7be6:	000d      	movs	r5, r1
    7be8:	0016      	movs	r6, r2
    7bea:	2900      	cmp	r1, #0
    7bec:	d105      	bne.n	7bfa <_realloc_r+0x18>
    7bee:	0011      	movs	r1, r2
    7bf0:	f7fe f9d8 	bl	5fa4 <_malloc_r>
    7bf4:	0004      	movs	r4, r0
    7bf6:	0020      	movs	r0, r4
    7bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bfa:	2a00      	cmp	r2, #0
    7bfc:	d103      	bne.n	7c06 <_realloc_r+0x24>
    7bfe:	f7fe f987 	bl	5f10 <_free_r>
    7c02:	0034      	movs	r4, r6
    7c04:	e7f7      	b.n	7bf6 <_realloc_r+0x14>
    7c06:	f000 f833 	bl	7c70 <_malloc_usable_size_r>
    7c0a:	002c      	movs	r4, r5
    7c0c:	4286      	cmp	r6, r0
    7c0e:	d9f2      	bls.n	7bf6 <_realloc_r+0x14>
    7c10:	0031      	movs	r1, r6
    7c12:	0038      	movs	r0, r7
    7c14:	f7fe f9c6 	bl	5fa4 <_malloc_r>
    7c18:	1e04      	subs	r4, r0, #0
    7c1a:	d0ec      	beq.n	7bf6 <_realloc_r+0x14>
    7c1c:	0029      	movs	r1, r5
    7c1e:	0032      	movs	r2, r6
    7c20:	f7fe f952 	bl	5ec8 <memcpy>
    7c24:	0029      	movs	r1, r5
    7c26:	0038      	movs	r0, r7
    7c28:	f7fe f972 	bl	5f10 <_free_r>
    7c2c:	e7e3      	b.n	7bf6 <_realloc_r+0x14>
	...

00007c30 <_read_r>:
    7c30:	b570      	push	{r4, r5, r6, lr}
    7c32:	0005      	movs	r5, r0
    7c34:	0008      	movs	r0, r1
    7c36:	0011      	movs	r1, r2
    7c38:	2200      	movs	r2, #0
    7c3a:	4c06      	ldr	r4, [pc, #24]	; (7c54 <_read_r+0x24>)
    7c3c:	6022      	str	r2, [r4, #0]
    7c3e:	001a      	movs	r2, r3
    7c40:	f7f9 fdb4 	bl	17ac <_read>
    7c44:	1c43      	adds	r3, r0, #1
    7c46:	d103      	bne.n	7c50 <_read_r+0x20>
    7c48:	6823      	ldr	r3, [r4, #0]
    7c4a:	2b00      	cmp	r3, #0
    7c4c:	d000      	beq.n	7c50 <_read_r+0x20>
    7c4e:	602b      	str	r3, [r5, #0]
    7c50:	bd70      	pop	{r4, r5, r6, pc}
    7c52:	46c0      	nop			; (mov r8, r8)
    7c54:	200012a0 	.word	0x200012a0

00007c58 <__ascii_wctomb>:
    7c58:	1e0b      	subs	r3, r1, #0
    7c5a:	d004      	beq.n	7c66 <__ascii_wctomb+0xe>
    7c5c:	2aff      	cmp	r2, #255	; 0xff
    7c5e:	d904      	bls.n	7c6a <__ascii_wctomb+0x12>
    7c60:	238a      	movs	r3, #138	; 0x8a
    7c62:	6003      	str	r3, [r0, #0]
    7c64:	3b8b      	subs	r3, #139	; 0x8b
    7c66:	0018      	movs	r0, r3
    7c68:	4770      	bx	lr
    7c6a:	700a      	strb	r2, [r1, #0]
    7c6c:	2301      	movs	r3, #1
    7c6e:	e7fa      	b.n	7c66 <__ascii_wctomb+0xe>

00007c70 <_malloc_usable_size_r>:
    7c70:	1f0b      	subs	r3, r1, #4
    7c72:	681b      	ldr	r3, [r3, #0]
    7c74:	1f18      	subs	r0, r3, #4
    7c76:	2b00      	cmp	r3, #0
    7c78:	da01      	bge.n	7c7e <_malloc_usable_size_r+0xe>
    7c7a:	580b      	ldr	r3, [r1, r0]
    7c7c:	18c0      	adds	r0, r0, r3
    7c7e:	4770      	bx	lr
    7c80:	42000400 	.word	0x42000400
    7c84:	42000800 	.word	0x42000800
    7c88:	42000c00 	.word	0x42000c00
    7c8c:	42001000 	.word	0x42001000
    7c90:	42001400 	.word	0x42001400
    7c94:	42001800 	.word	0x42001800
    7c98:	00001062 	.word	0x00001062
    7c9c:	0000105e 	.word	0x0000105e
    7ca0:	0000105e 	.word	0x0000105e
    7ca4:	00001090 	.word	0x00001090
    7ca8:	00001090 	.word	0x00001090
    7cac:	0000107a 	.word	0x0000107a
    7cb0:	00001068 	.word	0x00001068
    7cb4:	00001080 	.word	0x00001080
    7cb8:	00001254 	.word	0x00001254
    7cbc:	00001234 	.word	0x00001234
    7cc0:	00001234 	.word	0x00001234
    7cc4:	0000128a 	.word	0x0000128a
    7cc8:	00001246 	.word	0x00001246
    7ccc:	00001262 	.word	0x00001262
    7cd0:	00001238 	.word	0x00001238
    7cd4:	00001270 	.word	0x00001270
    7cd8:	616c6544 	.word	0x616c6544
    7cdc:	20646579 	.word	0x20646579
    7ce0:	65726568 	.word	0x65726568
    7ce4:	00642520 	.word	0x00642520
    7ce8:	65570a0d 	.word	0x65570a0d
    7cec:	6d6f636c 	.word	0x6d6f636c
    7cf0:	6f742065 	.word	0x6f742065
    7cf4:	65687420 	.word	0x65687420
    7cf8:	46555020 	.word	0x46555020
    7cfc:	7361622d 	.word	0x7361622d
    7d00:	43206465 	.word	0x43206465
    7d04:	53204e41 	.word	0x53204e41
    7d08:	72756365 	.word	0x72756365
    7d0c:	20797469 	.word	0x20797469
    7d10:	6f6d6544 	.word	0x6f6d6544
    7d14:	00000d21 	.word	0x00000d21
    7d18:	73657250 	.word	0x73657250
    7d1c:	68272073 	.word	0x68272073
    7d20:	6f742027 	.word	0x6f742027
    7d24:	67656220 	.word	0x67656220
    7d28:	77206e69 	.word	0x77206e69
    7d2c:	20687469 	.word	0x20687469
    7d30:	64726168 	.word	0x64726168
    7d34:	65646f63 	.word	0x65646f63
    7d38:	61762064 	.word	0x61762064
    7d3c:	7365756c 	.word	0x7365756c
    7d40:	0000203a 	.word	0x0000203a
    7d44:	00006325 	.word	0x00006325
    7d48:	20776f48 	.word	0x20776f48
    7d4c:	6c756f63 	.word	0x6c756f63
    7d50:	6f792064 	.word	0x6f792064
    7d54:	2e2e2e75 	.word	0x2e2e2e75
    7d58:	0000000d 	.word	0x0000000d
    7d5c:	55500a0d 	.word	0x55500a0d
    7d60:	65722046 	.word	0x65722046
    7d64:	6e6f7073 	.word	0x6e6f7073
    7d68:	20736573 	.word	0x20736573
    7d6c:	6c6c6977 	.word	0x6c6c6977
    7d70:	20656220 	.word	0x20656220
    7d74:	64726168 	.word	0x64726168
    7d78:	65646f63 	.word	0x65646f63
    7d7c:	61762064 	.word	0x61762064
    7d80:	7365756c 	.word	0x7365756c
    7d84:	726f6620 	.word	0x726f6620
    7d88:	726e6520 	.word	0x726e6520
    7d8c:	6d6c6c6f 	.word	0x6d6c6c6f
    7d90:	20746e65 	.word	0x20746e65
    7d94:	20646e61 	.word	0x20646e61
    7d98:	68747561 	.word	0x68747561
    7d9c:	69746e65 	.word	0x69746e65
    7da0:	69746163 	.word	0x69746163
    7da4:	000d6e6f 	.word	0x000d6e6f
    7da8:	64726148 	.word	0x64726148
    7dac:	69646f63 	.word	0x69646f63
    7db0:	6120676e 	.word	0x6120676e
    7db4:	73657220 	.word	0x73657220
    7db8:	736e6f70 	.word	0x736e6f70
    7dbc:	00000d65 	.word	0x00000d65
    7dc0:	656d6f53 	.word	0x656d6f53
    7dc4:	6e696874 	.word	0x6e696874
    7dc8:	61772067 	.word	0x61772067
    7dcc:	75732073 	.word	0x75732073
    7dd0:	736f7070 	.word	0x736f7070
    7dd4:	74206465 	.word	0x74206465
    7dd8:	6168206f 	.word	0x6168206f
    7ddc:	6e657070 	.word	0x6e657070
    7de0:	72656820 	.word	0x72656820
    7de4:	2e312065 	.word	0x2e312065
    7de8:	0000000d 	.word	0x0000000d
    7dec:	6f726e45 	.word	0x6f726e45
    7df0:	656d6c6c 	.word	0x656d6c6c
    7df4:	203a746e 	.word	0x203a746e
    7df8:	6c696146 	.word	0x6c696146
    7dfc:	73206465 	.word	0x73206465
    7e00:	65767265 	.word	0x65767265
    7e04:	75702072 	.word	0x75702072
    7e08:	63696c62 	.word	0x63696c62
    7e0c:	79656b20 	.word	0x79656b20
    7e10:	6e656720 	.word	0x6e656720
    7e14:	74617265 	.word	0x74617265
    7e18:	216e6f69 	.word	0x216e6f69
    7e1c:	0000000d 	.word	0x0000000d
    7e20:	656c694d 	.word	0x656c694d
    7e24:	6e6f7473 	.word	0x6e6f7473
    7e28:	0d312065 	.word	0x0d312065
    7e2c:	00000000 	.word	0x00000000
    7e30:	20776f4e 	.word	0x20776f4e
    7e34:	4e206e6f 	.word	0x4e206e6f
    7e38:	2065646f 	.word	0x2065646f
    7e3c:	0a0d6425 	.word	0x0a0d6425
    7e40:	00000000 	.word	0x00000000
    7e44:	666c6148 	.word	0x666c6148
    7e48:	6f777420 	.word	0x6f777420
    7e4c:	0000000d 	.word	0x0000000d
    7e50:	65636552 	.word	0x65636552
    7e54:	64657669 	.word	0x64657669
    7e58:	73655220 	.word	0x73655220
    7e5c:	736e6f70 	.word	0x736e6f70
    7e60:	00203a65 	.word	0x00203a65
    7e64:	6f726e45 	.word	0x6f726e45
    7e68:	656d6c6c 	.word	0x656d6c6c
    7e6c:	203a746e 	.word	0x203a746e
    7e70:	6c696146 	.word	0x6c696146
    7e74:	4e206465 	.word	0x4e206465
    7e78:	2065646f 	.word	0x2065646f
    7e7c:	50206925 	.word	0x50206925
    7e80:	696c6275 	.word	0x696c6275
    7e84:	654b2063 	.word	0x654b2063
    7e88:	65472079 	.word	0x65472079
    7e8c:	6172656e 	.word	0x6172656e
    7e90:	6e6f6974 	.word	0x6e6f6974
    7e94:	00000a0d 	.word	0x00000a0d
    7e98:	656e6547 	.word	0x656e6547
    7e9c:	65746172 	.word	0x65746172
    7ea0:	6f4e2064 	.word	0x6f4e2064
    7ea4:	25206564 	.word	0x25206564
    7ea8:	654b2069 	.word	0x654b2069
    7eac:	30203a79 	.word	0x30203a79
    7eb0:	00000078 	.word	0x00000078
    7eb4:	706d6f43 	.word	0x706d6f43
    7eb8:	6574656c 	.word	0x6574656c
    7ebc:	6f6e2064 	.word	0x6f6e2064
    7ec0:	25206564 	.word	0x25206564
    7ec4:	6e652069 	.word	0x6e652069
    7ec8:	6c6c6f72 	.word	0x6c6c6f72
    7ecc:	746e656d 	.word	0x746e656d
    7ed0:	00000a0d 	.word	0x00000a0d

00007ed4 <PARAMETER_d>:
    7ed4:	00000142 00000000 000e4000 00000000     B........@......
    7ee4:	00000000 01fc0c8d 0085223c 020fcb38     ........<"..8...
    7ef4:	0211995f 005e472f                       _.../G^.

00007efc <FIXED_BASE_TABLE>:
    7efc:	0303e631 028d3ce9 02b5fe18 02fc7540     1....<......@u..
    7f0c:	00287460 00f90353 0398bdf9 02cdee02     `t(.S...........
    7f1c:	00de2e1a 000c3ba0 00937edc 03c3e62c     .....;...~..,...
    7f2c:	0055590b 01e093c3 00740b7c 03a01366     .YU.....|.t.f...
    7f3c:	0048e448 017a5b32 02e4ea55 004ffcf5     H.H.2[z.U.....O.
    7f4c:	03da42bb 02bf32ea 017c6297 00dd55b2     .B...2...b|..U..
    7f5c:	005948d1 0330684c 02268e4c 01f27a81     .HY.Lh0.L.&..z..
    7f6c:	01c828d0 000caf2b 01188787 02e8063f     .(..+.......?...
    7f7c:	012a83a8 02062374 00554612 009f9b77     ..*.t#...FU.w...
    7f8c:	00f30cf0 02049b0b 03e2e134 001baeea     ........4.......
    7f9c:	01faf900 01096984 03789006 004b869b     .....i....x...K.
    7fac:	0018f7cd 02556066 033c2684 036eb6dc     ....f`U..&<...n.
    7fbc:	03bab39e 00448e05 012829b0 03ccda27     ......D..)(.'...
    7fcc:	03db4bf2 032ca55e 006d911d 003c03ee     .K..^.,...m...<.
    7fdc:	00d4f6f7 025019f2 0016eafb 0006c543     ......P.....C...
    7fec:	01afa125 03d15c4f 0364d2ea 01619228     %...O\....d.(.a.
    7ffc:	00729630 01313ef2 01ddc7e7 0306961b     0.r..>1.........
    800c:	03e2ff8a 004f41c7 019790ac 0188eb96     .....AO.........
    801c:	00a42408 021910cc 004d3385 00dd7487     .$.......3M..t..
    802c:	01a59927 02114fc5 03839663 0074df72     '....O..c...r.t.
    803c:	013c110b 0018c964 030d8c9a 00457f92     ..<.d.........E.
    804c:	00076bd4 02bff3d9 00679975 03a08766     .k......u.g.f...
    805c:	0051f3b8 00249240 00965a73 016e5852     ..Q.@.$.sZ..RXn.
    806c:	03706d69 028a20a7 0028aac8 01f7a57b     imp.. ....(.{...
    807c:	007014ca 0200e41f 03a27c0f 00441ca9     ..p......|....D.
    808c:	03f7241e 028e2ae2 037f4e1a 02bf20ca     .$...*...N... ..
    809c:	0058f28c 025400c6 02be2e3e 0063ecad     ..X...T.>.....c.
    80ac:	0018a13a 0034b6d1 02f15097 02632ace     :.....4..P...*c.
    80bc:	01c49f54 024005f6 006dbe77 0048e8bc     T.....@.w.m...H.
    80cc:	03ddaa05 0200663b 016fc8eb 00637192     ....;f....o..qc.
    80dc:	01ed81fa 00b1c86f 016abc5e 03bb5a01     ....o...^.j..Z..
    80ec:	004ede70 00975810 03366d6d 01aa88f3     p.N..X..mm6.....
    80fc:	0064bc2a 004752fd 03734414 01e53ac7     *.d..RG..Ds..:..
    810c:	00662318 034b211a 0011ddf7 02b1a34e     .#f..!K.....N...
    811c:	00ec1bdc 02770261 02cdeac1 00465575     ....a.w.....uUF.
    812c:	02638d2b 026117e0 018ce40b 0141e40a     +.c...a.......A.
    813c:	00488940 01b4f131 02e4e940 032fbbed     @.H.1...@...../.
    814c:	0034a226 0004f356 015b278b 03761d44     &.4.V....'[.D.v.
    815c:	0058a457 0395364a 0056f25e 020c977e     W.X.J6..^.V.~...
    816c:	01307373 0099692d 01061f5d 00078fca     ss0.-i..].......
    817c:	02cc22a1 02cb7b5d 02bf63bb 0214f770     ."..]{...c..p...
    818c:	00117b28 01c2baa2 00dd9f2e 00a8f43f     ({..........?...
    819c:	009783aa 0073079e 0215796d 01e64ad6     ......s.my...J..
    81ac:	02f92017 00520367 002e7772 03372916     . ..g.R.rw...)7.
    81bc:	02620d59 0176dbe0 01adebdd 00258f17     Y.b...v.......%.
    81cc:	0168391b 00ce3f58 013a4308 017e69cd     .9h.X?...C:..i~.
    81dc:	00728592 03e85114 0303f413 02b51862     ..r..Q......b...
    81ec:	039d08eb 0053259e 033b1a68 000c6a12     .....%S.h.;..j..
    81fc:	031fcfe0 01987e81 001a4f1d 01c928a7     .....~...O...(..
    820c:	035505a3 02a6a2dd 006b7c65 0060185c     ..U.....e|k.\.`.
    821c:	006da9b4 0025c5f7 03c03498 012d373f     ..m...%..4..?7-.
    822c:	00606209 01fa7e8d 03a9be81 008a0a41     .b`..~......A...
    823c:	01bc9dc5 004a4fe0 029e80f0 0094ea7b     .....OJ.....{...
    824c:	017337bb 022f32c4 00419a92 029a039e     .7s..2/...A.....
    825c:	008ef99a 014bb843 02ba5ca0 0001b2d1     ....C.K..\......
    826c:	03051231 02216134 01dd7a75 0083325e     1...4a!.uz..^2..
    827c:	0054df1e 022f22dd 0241bf8f 01a0f91d     ..T.."/...A.....
    828c:	025d7f7c 004e36e9 03747634 021c5d1a     |.]..6N.4vt..]..
    829c:	03433d81 02ebbb84 003e5e31 0173baa3     .=C.....1^>...s.
    82ac:	02a025e5 037c6e4d 0365f3f9 004b852a     .%..Mn|...e.*.K.
    82bc:	00418b9e 02cd19c5 02f88e08 026cbf9b     ..A...........l.
    82cc:	00283d71 005c180b 00e74b79 015c8b73     q=(...\.yK..s.\.
    82dc:	03bc474b 0075acfc 00561876 001ddea3     KG....u.v.V.....
    82ec:	00c4b8f4 01029c4d 000c54ac 02baee08     ....M....T......
    82fc:	038a1f59 008bfb92 01401a86 006f357e     Y.........@.~5o.
    830c:	011e6971 000cc67b 03d40c59 03be476b     qi..{...Y...kG..
    831c:	00747c45 012f816e 0021aa47 02f7dde4     E|t.n./.G.!.....
    832c:	03b6cecf 005dcb27 021dd2ee 03711b3e     ....'.].....>.q.
    833c:	0249843f 027dc259 0051551f 01ed9bdc     ?.I.Y.}..UQ.....
    834c:	014d3dd8 0307fb54 02cc1cfe 00453455     .=M.T.......U4E.
    835c:	03cab70b 01dcf8e0 034dff24 0179d633     ........$.M.3.y.
    836c:	00679be2 003eee29 01fb7ca5 00f66da1     ..g.).>..|...m..
    837c:	02e35b70 003dc9e5 013fb75b 01432e90     p[....=.[.?...C.
    838c:	0137f56a 016f16a1 001e6531 002c7213     j.7...o.1e...r,.
    839c:	024090a0 0252e5ff 0323d094 0073c9d8     ..@...R...#...s.
    83ac:	03198c8f 00dee18c 00f333c6 02cfb505     .........3......
    83bc:	00534f84 02dd6902 004f9cb7 033afad3     .OS..i....O...:.
    83cc:	0250737c 005ed57e 0257306e 03f8074a     |sP.~.^.n0W.J...
    83dc:	013f95a6 03a8d11c 0073b63d 031c2bf3     ..?.....=.s..+..
    83ec:	02dc15c3 018db39c 03927c68 002df8c6     ........h|....-.
    83fc:	037797e4 02f0d259 01062661 032efafa     ..w.Y...a&......
    840c:	00501ae7 00959643 00aa237a 01d515b5     ..P.C...z#......
    841c:	00a04700 00037275 001bb928 0315e88c     .G..ur..(.......
    842c:	00fc6010 01c55555 00378b31 01a02cf1     .`..UU..1.7..,..
    843c:	00fe908a 01b29f88 02e1435f 005f0047     ........_C..G._.
    844c:	00402daa 011eb8ca 022bc4d2 009ea142     .-@.......+.B...
    845c:	000d0306 00a443f5 019766a2 03089b4e     .....C...f..N...
    846c:	01acb5b6 006ec968 02a1d987 000b823f     ....h.n.....?...
    847c:	03600de2 034fca35 005c64e1 0261bfb7     ..`.5.O..d\...a.
    848c:	0345efbd 0334c157 00db75d4 0056392d     ..E.W.4..u..-9V.
    849c:	0119155c 011e362f 02afde25 00b4f4cd     \.../6..%.......
    84ac:	00146d4f 014e15e8 02f802fe 010c09bf     Om....N.........
    84bc:	0269ab7c 002b185a 0152ab7b 0149ecfb     |.i.Z.+.{.R...I.
    84cc:	01e80926 0051cc40 0067997e 007cc541     &...@.Q.~.g.A.|.
    84dc:	03d3fd25 01a7ab58 031feb26 0036f800     %...X...&.....6.
    84ec:	000456d9 000b8c90 0297bd03 00d902f1     .V..............
    84fc:	004372e4 0350d898 0132aed1 03cbf914     .rC...P...2.....
    850c:	03eb2688 0075d25a 0255cbfe 01645d9d     .&..Z.u...U..]d.
    851c:	00b07794 01985ff1 0074db21 0166d0c9     .w..._..!.t...f.
    852c:	01ec8909 03b23705 01642105 001d543b     .....7...!d.;T..
    853c:	00428783 00a02d11 003ef19c 03f62db3     ..B..-....>..-..
    854c:	00352309 0068ae72 00cf5ab0 019f4378     .#5.r.h..Z..xC..
    855c:	00688f00 004ec067 03d05bb5 020db868     ..h.g.N..[..h...
    856c:	02fe39d9 037fc893 0044fe1a 017efb4a     .9........D.J.~.
    857c:	01af0f39 00150a29 01a0d685 002efec8     9...)...........
    858c:	03194bca 0067027e 012062fe 034e54f3     .K..~.g..b ..TN.
    859c:	0018cc07 01c0b9e0 03fc85f2 03cee5bd     ................
    85ac:	0159606a 00671aa7 00f7d1a2 030ceb8a     j`Y...g.........
    85bc:	023fee1c 0124de82 001b6f25 01babb83     ..?...$.%o......
    85cc:	000f4599 01211515 00db5622 0074b956     .E....!."V..V.t.
    85dc:	0296f869 025eb93a 010bdbdb 00627894     i...:.^......xb.
    85ec:	001507ce 02b93b13 0393553e 00929796     .....;..>U......
    85fc:	017c1658 006a8176 01a833ed 01014879     X.|.v.j..3..yH..
    860c:	036442e9 00cac917 003bdea5 03d52693     .Bd.......;..&..
    861c:	01da5d7f 00ed6bea 0122e9b5 0064b948     .]...k....".H.d.
    862c:	00e33ec7 014b4065 01f259db 0369558e     .>..e@K..Y...Ui.
    863c:	0071cf65 035a8138 01cec7f6 01c22ede     e.q.8.Z.........
    864c:	00edb18b 0012e4d1 01185517 026c3099     .........U...0l.
    865c:	03dd09d1 03495ed7 0077a011 02cd84e4     .....^I...w.....
    866c:	037172ab 012d11fe 005478d2 0046844e     .rq...-..xT.N.F.
    867c:	004220df 008e8c64 030997a4 031d1fa3     . B.d...........
    868c:	005b3165 0335e22e 0197bab7 0195b1c6     e1[...5.........
    869c:	015bf115 007802b5 015bd2de 00b7bd00     ..[...x...[.....
    86ac:	026ad85a 021e55c5 0017f2ab 0060c1e5     Z.j..U........`.
    86bc:	03db4d48 00e6a19c 0346f902 00122a7a     HM........F.z*..
    86cc:	005bf766 026ef219 01acf5b7 0275342b     f.[...n.....+4u.
    86dc:	0020fb00 03a28538 009a89ca 00bde975     .. .8.......u...
    86ec:	03a43508 007041b4 00dab057 00044cd6     .5...Ap.W....L..
    86fc:	002433b3 019bc349 003d398b 03cd4708     .3$.I....9=..G..
    870c:	01666680 0009691a 0027364e 001eae24     .ff..i..N6'.$...
    871c:	0036108c 035ad813 0196866d 00de2420     ..6...Z.m... $..
    872c:	00171308 0125dcfd 02b5a45c 031ca57c     ......%.\...|...
    873c:	02e25c13 0034b06c 0335abf2 03fa39c7     .\..l.4...5..9..
    874c:	00db9dca 00663551 00698331 03af075b     ....Q5f.1.i.[...
    875c:	01d9d990 02b6d628 03955674 00200950     ....(...tV..P. .
    876c:	00dd9074 018ff0fb 013a2d4f 01c50ab0     t.......O-:.....
    877c:	00747331 01319356 0000c201 038ba96b     1st.V.1.....k...
    878c:	0380910d 002c20ff 026ac01a 025446b4     ..... ,...j..FT.
    879c:	03cf6488 0086665f 004ee327 030bf8ea     .d.._f..'.N.....
    87ac:	03f9b9c3 026d715f 02d29b42 006b617f     ...._qm.B....ak.
    87bc:	012f7324 01b72871 00277491 03c2191a     $s/.q(...t'.....
    87cc:	003c8269 0037e04b 00843132 0142cc24     i.<.K.7.21..$.B.
    87dc:	013e4569 004e480b 027fe35e 03bcec26     iE>..HN.^...&...
    87ec:	004b2c5f 037913f6 0031a501 00a407b9     _,K...y...1.....
    87fc:	00a79250 025ab79f 00f29733 000ba7e0     P.....Z.3.......
    880c:	0274d8ea 022c8162 01adca7a 0204389b     ..t.b.,.z....8..
    881c:	0046f4c7 00a1128a 01c6b3a5 02811461     ..F.........a...
    882c:	00095256 0044db55 03f18d5c 02278692     VR..U.D.\.....'.
    883c:	006b27f8 00a90fcc 004d4f17 031cffad     .'k......OM.....
    884c:	0265d9ae 01aca33a 0164934e 00625477     ..e.:...N.d.wTb.
    885c:	0225136e 0148c3b0 0211dd85 0341e364     n.%...H.....d.A.
    886c:	001c544d 023f63ba 03a65a7d 0138212f     MT...c?.}Z../!8.
    887c:	03725277 00069af1 03e5c256 02f3d033     wRr.....V...3...
    888c:	03595305 02492eee 0063ae90 03b7de06     .SY...I...c.....
    889c:	00425de4 0043ee45 03ce7f00 0009780c     .]B.E.C......x..
    88ac:	03798871 02be39fa 03a37827 01b1dd5d     q.y..9..'x..]...
    88bc:	003ace8a 02e055ba 03c184cc 0292b79d     ..:..U..........
    88cc:	01eaab3a 00561dc0 020d2673 0108b660     :.....V.s&..`...
    88dc:	013487e4 020f82bd 006b85df 02d8526b     ..4.......k.kR..
    88ec:	0146b077 002bd1f1 039455c5 0035ead8     w.F...+..U....5.
    88fc:	03c79dd4 01bbdb0c 03de46da 01349653     .........F..S.4.
    890c:	005f2ea0 0027d5fa 00df4330 0331b910     .._...'.0C....1.
    891c:	00401ec0 0053b540 014ba5a3 03c6628f     ..@.@.S...K..b..
    892c:	00195810 00966ea5 004463bd 002acf9e     .X...n...cD...*.
    893c:	02252b3b 009ce32b 0187590d 00787117     ;+%.+....Y...qx.
    894c:	011fe211 02b86cfd 02463253 00fd4d6d     .....l..S2F.mM..
    895c:	00409e4b 025e49de 00db4436 0336a3a2     K.@..I^.6D....6.
    896c:	000a7084 0019d2b1 02aadd90 017d010d     .p............}.
    897c:	00b19283 00541464 000942a3 02828279     ....d.T..B..y...
    898c:	0244c61d 01f9cc18 030f2a38 003afe96     ..D.....8*....:.
    899c:	01230693 02006d24 010919f1 02e1897f     ..#.$m..........
    89ac:	0039e28d 01d44c8e 02d40d57 0280d9fa     ..9..L..W.......
    89bc:	0369ca6c 00145155 014d76d5 033e0407     l.i.UQ...vM...>.
    89cc:	02c68d3c 006a30ad 005a0faa 0354ea8a     <....0j...Z...T.
    89dc:	019b2132 007733cc 038fd59b 0051052c     2!...3w.....,.Q.
    89ec:	01ae9ff5 03853799 030243be 02280733     .....7...C..3.(.
    89fc:	00758611 016bf15e 039e4722 013d6089     ..u.^.k."G...`=.
    8a0c:	00b49876 0035ff02 037d1cf9 03384f63     v.....5...}.cO8.
    8a1c:	038f6cd3 023e56de 004f1de9 02dc41b4     .l...V>...O..A..
    8a2c:	01a28918 01d2951e 00f08fdb 0061ad9e     ..............a.
    8a3c:	00ebdb51 03fa9920 02cf3584 001cfe77     Q... ....5..w...
    8a4c:	005d52fe 01f336d5 03920fab 0296a9af     .R]..6..........
    8a5c:	032602c5 001dfa03 03819a19 01cf51ff     ..&..........Q..
    8a6c:	000ed55f 0174d844 00697bf5 02399419     _...D.t..{i...9.
    8a7c:	01201111 0259fded 0119ff38 00618c94     .. ...Y.8.....a.
    8a8c:	008ef50c 025ffc7c 033c0f25 02e63764     ....|._.%.<.d7..
    8a9c:	0007c935 00ded5f6 01632f1e 0148fbb7     5......../c...H.
    8aac:	001abc4c 001e9a0d 034cd4db 0338515f     L.........L._Q8.
    8abc:	00994879 028658b5 0028396c 017605c3     yH...X..l9(...v.
    8acc:	02568f71 027b1f50 00f69314 001e570f     q.V.P.{......W..
    8adc:	00935787 01a68e41 01cce2af 01dbf740     .W..A.......@...
    8aec:	00591ee3 00bc8633 02d637e2 015d1f77     ..Y.3....7..w.].
    8afc:	0146cbce 005464d6 029a86ae 03025ac7     ..F..dT......Z..
    8b0c:	02b28afb 012fd96d 006ce2df 029d3e08     ....m./...l..>..
    8b1c:	02a0a34b 026d03b3 007634b5 00638201     K.....m..4v...c.
    8b2c:	013d193d 021f2993 016af949 0034edb5     =.=..)..I.j...4.
    8b3c:	0050ddf7 00ad15a9 037d9f32 01f928d5     ..P.....2.}..(..
    8b4c:	0262f16c 00392080 03d5a4fb 027d4837     l.b.. 9.....7H}.
    8b5c:	03ba9ce9 021ee1a9 00323bbc 0003c789     .........;2.....
    8b6c:	03e22a36 00055e13 02f7c880 0056ffdc     6*...^........V.
    8b7c:	0324c72d 03c368c6 00c163af 01991830     -.$..h...c..0...
    8b8c:	00700115 02c46a13 01edfd4e 03bc276f     ..p..j..N...o'..
    8b9c:	03fadc1d 001c069b 014a3c36 01c64f28     ........6<J.(O..
    8bac:	01e3d8f4 012bc223 006d73e3 017d6634     ....#.+..sm.4f}.
    8bbc:	02caf64c 01ec8634 00e2ddfc 005b4047     L...4.......G@[.
    8bcc:	00a1cb1d 03eaedc7 02a46f34 032b2951     ........4o..Q)+.
    8bdc:	00054abb 00eda660 0372b742 01ef1e8c     .J..`...B.r.....
    8bec:	02fe562f 006971ab 01db4eaf 00e155f7     /V...qi..N...U..
    8bfc:	0367c413 0216c1e6 001e1585 03a26068     ..g.........h`..
    8c0c:	01c11d33 02469d22 00cacf3a 0053b36d     3...".F.:...m.S.
    8c1c:	00543d08 0148f05b 0314e011 00b17dcc     .=T.[.H......}..
    8c2c:	004668e9 0117acd1 03cfaf90 0131abae     .hF...........1.
    8c3c:	006a9c4e 0004037d 0390c68d 00463938     N.j.}.......89F.
    8c4c:	0157568e 01569130 006b80cd 0329c032     .VW.0.V...k.2.).
    8c5c:	01faa295 01ab2730 017fbba6 005cc547     ....0'......G.\.
    8c6c:	0014ac75 01439093 01cd8344 01f976cf     u.....C.D....v..
    8c7c:	003f0915 00588052 038ac6d4 02f8f62c     ..?.R.X.....,...
    8c8c:	03153994 0027a899 03c2a5ed 0340e7cb     .9....'.......@.
    8c9c:	03eec0ac 03775604 004b4044 00a75958     .....Vw.D@K.XY..
    8cac:	034627a4 033a1c04 02f39c74 00242551     .'F...:.t...Q%$.
    8cbc:	01f87f05 02be5ad4 01815d95 0083e027     .....Z...]..'...
    8ccc:	00029888 039483c5 03d97dce 00b43b27     .........}..';..
    8cdc:	0117d0d9 002ef607 034fb8b9 01af724f     ..........O.Or..
    8cec:	03b8acb6 02d21d5a 002b86c9 039867a1     ....Z.....+..g..
    8cfc:	02f6b826 029aaf8e 006139bf 00441e70     &........9a.p.D.
    8d0c:	00cc1289 0094c0cc 02992fdc 016a2d35     ........./..5-j.
    8d1c:	0047d8d6 00ae74be 00edbe8c 019d58c0     ..G..t.......X..
    8d2c:	00f30ef6 001ca869 0018f2a6 03ac5444     ....i.......DT..
    8d3c:	03ff5699 019367d3 003da047 013aab59     .V...g..G.=.Y.:.
    8d4c:	01c810cf 017ff361 0184b2e1 002fa911     ....a........./.
    8d5c:	002f1cac 015f6843 00619a40 02e4ce97     ../.Ch_.@.a.....
    8d6c:	0048a219 015f0bc5 01040834 01dad423     ..H..._.4...#...
    8d7c:	01411a82 0073f889 027421b8 0354c4b1     ..A...s..!t...T.
    8d8c:	0222e1ba 006cda39 00419477 004e0dff     ..".9.l.w.A...N.
    8d9c:	01c69e79 031c28cc 0391519f 004b4564     y....(...Q..dEK.
    8dac:	03e52093 027c5aab 03ea9775 03735d7e     . ...Z|.u...~]s.
    8dbc:	00391b71 034ef798 0301a52a 0130d2a1     q.9...N.*.....0.
    8dcc:	01515110 00023087 03aa1aa1 02b87ff3     .QQ..0..........
    8ddc:	021e74b7 00cb5ccd 0064e26f 010b54b9     .t...\..o.d..T..
    8dec:	011c0e2f 02e158da 01bfabb3 00148cfa     /....X..........
    8dfc:	01c2cc3d 01b5351e 003de375 02a34c55     =....5..u.=.UL..
    8e0c:	0025d44e 02bb2c43 0322fbc9 0337fd82     N.%.C,...."...7.
    8e1c:	000cf49f 002c2047 03dad260 00cf660d     ....G ,.`....f..
    8e2c:	03b7d5bd 005e8ce0 00779431 02a583f2     ......^.1.w.....
    8e3c:	01c75a5f 01bf2120 009ca889 003c7c41     _Z.. !......A|<.
    8e4c:	01f03ad3 02ef7ebc 0370492e 0031a2d8     .:...~...Ip...1.
    8e5c:	005d6103 02ee75d1 038a14ee 03636ca6     .a]..u.......lc.
    8e6c:	00d1dc68 0012404b 02667e4f 00f118c9     h...K@..O~f.....
    8e7c:	023b0be1 0245be6f 002bd261 01c80f89     ..;.o.E.a.+.....
    8e8c:	00fe32eb 00b4886e 02285e53 0074520d     .2..n...S^(..Rt.
    8e9c:	024cf97e 0171d140 02b021e1 0078794f     ~.L.@.q..!..Oyx.
    8eac:	005cee74 0399cda1 0223782b 0062c8d0     t.\.....+x#...b.
    8ebc:	02587302 00625812 01c0e934 00d0dcc8     .sX..Xb.4.......
    8ecc:	037a4431 01a31093 0060bbc7 0010e143     1Dz.......`.C...
    8edc:	01c7efcf 015b8aba 027c52a4 0037b8ea     ......[..R|...7.
    8eec:	000213ff 01bb1971 0045c8d9 00a3fdde     ....q.....E.....
    8efc:	0074a088 02f607a3 02dc6536 00706bed     ..t.....6e...kp.
    8f0c:	01c45872 0017e866 024059cf 02e63814     rX..f....Y@..8..
    8f1c:	02f09ace 03125245 0068552a 031b3c47     ....ER..*Uh.G<..
    8f2c:	00a5c6eb 01b704cd 02f37788 0068442e     .........w...Dh.
    8f3c:	02867595 00a6e303 0247a196 034d8d7e     .u........G.~.M.
    8f4c:	006a6955 02e393ad 02d1783c 010c46fa     Uij.....<x...F..
    8f5c:	03d3f3c1 0066dd3e 01dc7df1 02deaf3f     ....>.f..}..?...
    8f6c:	00f9cbb0 01d46c2f 0014eb5b 02fd411d     ..../l..[....A..
    8f7c:	01e7e728 0200a1cf 01cfffc1 005c496f     (...........oI\.
    8f8c:	01426d70 01236155 018a9496 01a88c8b     pmB.Ua#.........
    8f9c:	0046c101 019b6d4f 03f6e1c3 03633b57     ..F.Om......W;c.
    8fac:	01482776 00609eb6 02dc82c5 03e459af     v'H...`......Y..
    8fbc:	02f27e70 02d722be 00772fb5 00227a20     p~...".../w. z".
    8fcc:	00a5366c 03c8d79a 010444b6 007f75b1     l6.......D...u..
    8fdc:	02070020 0071fe23 017b198d 02ab1208      ...#.q...{.....
    8fec:	005953d0 015f33ff 0094faf8 00c45e28     .SY..3_.....(^..
    8ffc:	03047985 00267d1d 019e2246 013d42ae     .y...}&.F"...B=.
    900c:	01495be6 01720bf9 004eaaab 0260bed0     .[I...r...N...`.
    901c:	0356b01f 01b4d927 01b79aa8 0067d378     ..V.'.......x.g.
    902c:	036e2945 0258afc3 02a9ba71 01128d7b     E)n...X.q...{...
    903c:	0063d938 026640ac 008a31f4 035a1b34     8.c..@f..1..4.Z.
    904c:	034baca3 00169c38 0039dc22 025caccd     ..K.8...".9...\.
    905c:	01e144b7 015f36a8 00714784 001d58c7     .D...6_..Gq..X..
    906c:	01b8497b 014f1522 025b9e3f 00669d87     {I..".O.?.[...f.
    907c:	0244a07f 03746aaa 03ecf750 02d56bae     ..D..jt.P....k..
    908c:	00327c62 014fbd25 02e3a56d 0364e006     b|2.%.O.m.....d.
    909c:	017407ac 002ab3f9 00d5e196 03942030     ..t...*.....0 ..
    90ac:	02725fcb 035d695f 002a1b9b 00139b5d     ._r._i]...*.]...
    90bc:	02cad9d6 03a731d2 02be126d 00751cf4     .....1..m.....u.
    90cc:	037d00a5 029f4b8c 024bc164 02932e0e     ..}..K..d.K.....
    90dc:	0000cee3 01be28f9 02380d9b 00502349     .....(....8.I#P.
    90ec:	0245234a 00053d89 02b0fb69 01975932     J#E..=..i...2Y..
    90fc:	00e74016 0088235a 004a9913 013f915d     .@..Z#....J.].?.
    910c:	012ef52f 022bbba4 03e45c84 001d34b0     /.....+..\...4..
    911c:	01e8a9f3 005371ca 00b605d1 00f754cd     .....qS......T..
    912c:	0008e7a4 02f0f3e8 02e3a48c 00f6228d     ............."..
    913c:	006e0099 005cb7be 02508f23 00b1e1e0     ..n...\.#.P.....
    914c:	021b29af 0333df8e 00336ae7 01d194be     .)....3..j3.....
    915c:	00b53b8b 028727fe 006cae29 00573d2e     .;...'..).l..=W.
    916c:	03b2ea36 00ba8cd8 00243333 00dd6c7d     6.......33$.}l..
    917c:	00200bc1 02b3260d 011f2301 01c5e65c     .. ..&...#..\...
    918c:	03294e65 0042021f 03b19946 039b3d26     eN)...B.F...&=..
    919c:	02d2c2f7 01a88c65 00311fba 03e0d70d     ....e.....1.....
    91ac:	0304ed8a 030dcc30 00509c46 0061eeac     ....0...F.P...a.
    91bc:	017d35d4 009a6596 021d7885 032f9af4     .5}..e...x..../.
    91cc:	0070169b 0129a510 006cb42b 0394da0f     ..p...).+.l.....
    91dc:	0051cb06 002ade53 009873e7 00c83706     ..Q.S.*..s...7..
    91ec:	01b3811e 0253a173 002d2a17 02f621e3     ....s.S..*-..!..
    91fc:	023114e9 036f7a0a 02d51497 004b06d5     ..1..zo.......K.
    920c:	0048ec1c 02459a46 00730f42 0155755e     ..H.F.E.B.s.^uU.
    921c:	001d4216 010a5b4e 018369ca 0165ff8c     .B..N[...i....e.
    922c:	00e687cd 0066dd9f 03b474a0 030a764d     ......f..t..Mv..
    923c:	01ee455a 01e928da 00429196 02e6bc89     ZE...(....B.....
    924c:	036b2a84 00310918 02401947 003d46e8     .*k...1.G.@..F=.
    925c:	000e90b1 01550c28 00a39af0 03d5b697     ....(.U.........
    926c:	0016f62b 008c51e6 00870cd2 03cd51a0     +....Q.......Q..
    927c:	037d8fee 000d64da 01bfea7c 023b3967     ..}..d..|...g9;.
    928c:	0203a091 035f75d0 003b3319 039fa90c     .....u_..3;.....
    929c:	021516e2 019e61d8 03724231 0013b792     .....a..1Br.....
    92ac:	003d0979 0364e6a7 031270a2 02fadd2f     y.=...d..p../...
    92bc:	00321a5d 026d8470 0251fffd 03c995e5     ].2.p.m...Q.....
    92cc:	032bf49a 0022ec9e 03b10536 01f2a0a4     ..+...".6.......
    92dc:	01846de1 03015677 00593f56 01485023     .m..wV..V?Y.#PH.
    92ec:	020dccdd 00b1c114 03f7dd12 0023c6b0     ..............#.
    92fc:	0227804f 02411162 02a70377 02589c9b     O.'.b.A.w.....X.
    930c:	00573e91 0235ac70 006c93cc 0385e35e     .>W.p.5...l.^...
    931c:	008127d3 0051ba08 00d47194 01246058     .'....Q..q..X`$.
    932c:	021dd4bc 0078cc23 005d29a2 026e4e33     ....#.x..)].3Nn.
    933c:	016252cf 010fb7e1 00bd3cc7 0050dbbd     .Rb......<....P.
    934c:	01a9c9de 0122f48d 00710ef2 03486d8d     ......"...q..mH.
    935c:	003418ad 02363bd2 01c8ce94 0099f96c     ..4..;6.....l...
    936c:	02b66823 007c8414 00e6c05c 02b2d295     #h....|.\.......
    937c:	0179abc6 0068464d 00572902 0308fa1c     ..y.MFh..)W.....
    938c:	01f0f802 02a73062 03e785f0 003d0b4f     ....b0......O.=.
    939c:	0190317f 01fa1d56 03e48d50 02cef1ef     .1..V...P.......
    93ac:	0075b27b 00e651f5 0203cb1b 02e4644a     {.u..Q......Jd..
    93bc:	03f06dc1 007b9795 01f9a640 01d6f7bf     .m....{.@.......
    93cc:	03aa89de 002aeaff 0075ade5 030889a0     ......*...u.....
    93dc:	02ac45a1 02c6cce0 03f37567 006f3ddc     .E......gu...=o.
    93ec:	00de0674 01a0cd62 020736e3 00a7a8a2     t...b....6......
    93fc:	00291d11 00884d61 02394e19 00d76f8b     ..).aM...N9..o..
    940c:	03c6ba15 00706ef8 03753069 02a31960     .....np.i0u.`...
    941c:	03966137 00731883 0001e45f 0376c7ba     7a....s._.....v.
    942c:	0387fe0b 01c54e28 02b38fa2 0036d29e     ....(N........6.
    943c:	030b49cb 01e7c55f 03937833 0278aeb2     .I.._...3x....x.
    944c:	0065e9c3 030cda3e 008f1141 02de59b3     ..e.>...A....Y..
    945c:	00c6adf8 0016e02f 035122b7 033cd198     ..../...."Q...<.
    946c:	01e0953b 001f5b0b 001fd7e2 021e57ac     ;....[.......W..
    947c:	03d7e53a 034df3a5 03a343c2 000cba06     :.....M..C......
    948c:	03a9c392 011030e1 0180070b 010f7b87     .....0.......{..
    949c:	001e7dc1 0239912b 022e9b5c 02d14549     .}..+.9.\...IE..
    94ac:	02805c60 00332870 032d794c 00c1bf19     `\..p(3.Ly-.....
    94bc:	02b4e6be 0044916c 002c2ce2 012ba79f     ....l.D..,,...+.
    94cc:	02dc8b23 0327a109 03ea717d 00268520     #.....'.}q.. .&.
    94dc:	00fe78ee 02cc0149 02698515 03b32eba     .x..I.....i.....
    94ec:	00736201 0210bf78 022b044c 01843460     .bs.x...L.+.`4..
    94fc:	02467110 0032d8fd 00b8f2d8 015f86c1     .qF...2......._.
    950c:	03459c95 03de6371 00775437 03a417f5     ..E.qc..7Tw.....
    951c:	003d5616 01304120 017cf9eb 002e00ec     .V=. A0...|.....
    952c:	03446288 01cf57ca 036e4fc8 024d8921     .bD..W...On.!.M.
    953c:	0032270a 00789b22 01a91f02 016bec64     .'2.".x.....d.k.
    954c:	03fa4958 002370d9 01e671c4 02be8d86     XI...p#..q......
    955c:	01fb2430 033ab07d 00156468 02417635     0$..}.:.hd..5vA.
    956c:	0137b0bc 0258f3b8 02405f03 0031140e     ..7...X.._@...1.
    957c:	037443fa 017e2332 024ac5c8 01759361     .Ct.2#~...J.a.u.
    958c:	000da75f 01b0fb84 03fd121c 036c3295     _............2l.
    959c:	002eb4cc 001b79e1 012977b3 03e650b7     .....y...w)..P..
    95ac:	01a23ffd 02343e68 004c1b19 0112864e     .?..h>4...L.N...
    95bc:	01e28930 008d0ba7 025fc9b5 0074f668     0........._.h.t.
    95cc:	027ab611 01701ba1 038b93fd 00cffde1     ..z...p.........
    95dc:	004b98ce 01cb9165 02d3739d 01163f7d     ..K.e....s..}?..
    95ec:	028267b1 0011665a 027118b9 0263c5ab     .g..Zf....q...c.
    95fc:	0109a2a4 036ed3ad 00265ec3 00ce2c86     ......n..^&..,..
    960c:	0108c19a 033853da 02aacb8c 0036e62b     .....S8.....+.6.
    961c:	01ab4478 001f529e 00875995 03f1047a     xD...R...Y..z...
    962c:	0025bfb2 03022ce1 0307b24c 00466d7a     ..%..,..L...zmF.
    963c:	02b80cf4 0023d341 0162bc00 016d197a     ....A.#...b.z.m.
    964c:	03180d29 006e8b5c 0023d021 03922d4d     )...\.n.!.#.M-..
    965c:	03335ebf 01514a03 012378c0 001e7671     .^3..JQ..x#.qv..
    966c:	0094efab 006acdaa 01e58c24 03cd0ff0     ......j.$.......
    967c:	001c9fc2 03d27a87 02e5958a 03015ca3     .....z.......\..
    968c:	008a1775 0053623e 00219420 01047c07     u...>bS. .!..|..
    969c:	002f9557 01dc25ad 00192655 0323592f     W./..%..U&../Y#.
    96ac:	004b6506 01c06d33 02870f14 0030a9a9     .eK.3m........0.
    96bc:	026e8f79 026c2cfa 03cb23d8 0077171d     y.n..,l..#....w.
    96cc:	007eab75 02df6e36 026c61b9 01694c0a     u.~.6n...al..Li.
    96dc:	0160fc55 004f844d 0393dffa 000608c9     U.`.M.O.........
    96ec:	0054d419 002daf4e 002add44 01df6e32     ..T.N.-.D.*.2n..
    96fc:	01203c4c 02417d55 0211ab8f 00318ce3     L< .U}A.......1.
    970c:	020984f4 01418b46 039f6056 018f4aff     ....F.A.V`...J..
    971c:	006ebaec 01e79790 01d7f9ca 024e7770     ..n.........pwN.
    972c:	01189322 000dd943 03a9b062 03c478b7     "...C...b....x..
    973c:	03364bf8 00957ba2 001b17d8 032c6344     .K6..{......Dc,.
    974c:	0085433d 028dc62c 02034207 00281068     =C..,....B..h.(.
    975c:	03ec91c1 012bc377 01f2ef4a 01b25df8     ....w.+.J....]..
    976c:	001a8f0e 00b9316f 01e8e9ce 022ec72a     ....o1......*...
    977c:	01ca3138 00323716 03a4af3b 001a4196     81...72.;....A..
    978c:	01367c14 00922447 00081514 00b6c337     .|6.G$......7...
    979c:	0352beaa 000e751b 026d44d0 0050e77a     ..R..u...Dm.z.P.
    97ac:	02822548 000146ca 01cfc46c 0390697b     H%...F..l...{i..
    97bc:	00024886 01cac17f 02c3be90 01675a06     .H...........Zg.
    97cc:	02c06e71 00336a30 02097626 02cb0432     qn..0j3.&v..2...
    97dc:	0098174f 02a923a4 002b204c 01a17b74     O....#..L +.t{..
    97ec:	00b254ae 0303b690 02dae488 0039c2e9     .T............9.
    97fc:	00597419 005ae6cf 01f76b92 000993c5     .tY...Z..k......
    980c:	006d9293 02ae1427 00a5f57b 013077b1     ..m.'...{....w0.
    981c:	02b7f86f 000f0744 03e6a89d 015f8996     o...D........._.
    982c:	02c1033b 0394ccd5 00282fa2 01dc772c     ;......../(.,w..
    983c:	00e65718 00ff53a0 017a24f7 004f5d8f     .W...S...$z..]O.
    984c:	0048023f 03249fbf 005ae4bf 01075a9a     ?.H...$...Z..Z..
    985c:	00596f22 0029b8a2 00f82bfb 038423cb     "oY...)..+...#..
    986c:	00344194 0031018e 00575626 0003fa51     .A4...1.&VW.Q...
    987c:	020112fd 01c1260b 001241d8 026781a7     .....&...A....g.
    988c:	03559993 022ce970 02743cf7 001b05f4     ..U.p.,..<t.....
    989c:	03717e66 013ff7d8 00e98a99 029daea2     f~q...?.........
    98ac:	00416374 03f1579a 020b3b54 02a4b8b0     tcA..W..T;......
    98bc:	03ead74a 0056781d 0065b318 0077bf46     J....xV...e.F.w.
    98cc:	001f7815 02103582 0064669b 0338e14e     .x...5...fd.N.8.
    98dc:	01bd2ed7 00b40e43 01042a5d 0043d438     ....C...]*..8.C.
    98ec:	0266be02 00b3acf5 0028e583 02786b86     ..f.......(..kx.
    98fc:	0006347d 01e3ea86 0251c6ce 01ae4697     }4........Q..F..
    990c:	01872d2d 002cf2cf 025a6ee4 02ca7ab6     --....,..nZ..z..
    991c:	01768b7a 02ca6b29 0012e75c 030d1ffc     z.v.)k..\.......
    992c:	02c44274 00e5ae65 0335acc8 0071f9be     tB..e.....5...q.
    993c:	0247eed9 00a24099 0058fdc8 00143295     ..G..@....X..2..
    994c:	0031d62d 0254c1e5 02efd48e 01491ea2     -.1...T.......I.
    995c:	02e78fb9 00602bf0 0380ad4b 029cd888     .....+`.K.......
    996c:	01f5825a 00c9c77d 002b6b1e 02a0470d     Z...}....k+..G..
    997c:	017bf61a 0354bdbc 0092e310 0005353c     ..{...T.....<5..
    998c:	01e06bca 01f6cf3d 025f7a3c 023cad3a     .k..=...<z_.:.<.
    999c:	00288a1c 02ce7ca1 014bd784 03c7dd61     ..(..|....K.a...
    99ac:	02d0d99c 0059d4c1 021fcb95 00955394     ......Y......S..
    99bc:	014401e0 003c902b 0066d398 01a4d9d1     ..D.+.<...f.....
    99cc:	005bdace 02f62abf 0072a530 007fea35     ..[..*..0.r.5...
    99dc:	009163ba 00adbcce 015ea3d6 013cb9e2     .c........^...<.
    99ec:	000fc6b4 01a7c669 019100f3 03193d5c     ....i.......\=..
    99fc:	00243980 002e4099 01fa4c2f 0303ebc5     .9$..@../L......
    9a0c:	036399b5 0276384a 0046295c 025b331b     ..c.J8v.\)F..3[.
    9a1c:	012b758e 018795ce 01cdb131 005fa7bd     .u+.....1....._.
    9a2c:	03d1aef2 00d1c511 0173947b 007088c9     ........{.s...p.
    9a3c:	0028004c 023c5299 0210df66 027e8d58     L.(..R<.f...X.~.
    9a4c:	00604b34 002ab19c 00037802 01c03da0     4K`...*..x...=..
    9a5c:	02b363ae 02002d08 001ad163 02bc2139     .c...-..c...9!..
    9a6c:	01fbcdbe 03d1d45b 03fc8772 0044bcde     ....[...r.....D.
    9a7c:	01e11c7b 01b6885c 00c1441c 01e7df13     {...\....D......
    9a8c:	002c35ee 01c13849 00a509d6 0050a485     .5,.I8........P.
    9a9c:	01bc42f8 006492d2 0050f0d9 0153a623     .B....d...P.#.S.
    9aac:	0181ba6f 02db7588 006a2db2 025e57a3     o....u...-j..W^.
    9abc:	02601aca 03d20f7d 036cee94 0057526b     ..`.}.....l.kRW.
    9acc:	0100e650 039b2c7d 0334517c 02c10be3     P...},..|Q4.....
    9adc:	0005d841 018de970 00029b1a 00b8eaa8     A...p...........
    9aec:	0166af8b 0004f4b5 019ce49d 0037f5c9     ..f...........7.
    9afc:	03935c05 02f7e536 00213839 01306204     .\..6...98!..b0.
    9b0c:	00496195 0305ab37 022c67e5 007d323b     .aI.7....g,.;2}.
    9b1c:	02b6c618 01140ac5 0195b26d 01a6aa25     ........m...%...
    9b2c:	00797170 01b41872 01f038db 021d0f86     pqy.r....8......
    9b3c:	0361b1db 0013d601 031b7383 0322c34c     ..a......s..L.".
    9b4c:	000752df 03cf90ba 00185472 0310eba0     .R......rT......
    9b5c:	0344f9ca 01b9505b 01d243de 00519a38     ..D.[P...C..8.Q.
    9b6c:	03ad2500 02706cb4 037338d0 0174b3c3     .%...lp..8s...t.
    9b7c:	00045da4 0062426c 0060655a 01b09640     .]..lBb.Ze`.@...
    9b8c:	03d66ff8 00728d57 01a2c585 0267e1e3     .o..W.r.......g.
    9b9c:	00e10f9a 00798771 004fc483 00394fe0     ....q.y...O..O9.
    9bac:	0180b315 028ae6dc 01ad9fa7 00048456     ............V...
    9bbc:	0293809b 033c11d2 022bbc5f 00e963cf     ......<._.+..c..
    9bcc:	0071c0c2 02fe6c43 003eaf8d 000a7b40     ..q.Cl....>.@{..
    9bdc:	00fabb93 00614c2f 00e1c6c1 002a6034     ..../La.....4`*.
    9bec:	01dcc761 01f22221 001ce819 02c2cb2b     a...!"......+...
    9bfc:	038727ce 0341eead 01eebcbc 00471ad0     .'....A.......G.
    9c0c:	0301121b 02a0df1a 00b59d67 00a07d67     ........g...g}..
    9c1c:	002a8e64 033262ca 01c0790b 0058052e     d.*..b2..y....X.
    9c2c:	01f7b394 0019e0a2 03bda6ac 024705e9     ..............G.
    9c3c:	031f2b56 00c46e77 0043484c 03ae49ea     V+..wn..LHC..I..
    9c4c:	00555526 03ae5a68 03768897 0043a2c5     &UU.hZ....v...C.
    9c5c:	01700eef 03a64abb 00856fa5 01588e46     ..p..J...o..F.X.
    9c6c:	0058911f 008c4da9 02e06879 003bd648     ..X..M..yh..H.;.
    9c7c:	0032f743 0066e6e3 029d266b 02882705     C.2...f.k&...'..
    9c8c:	03685f3b 0188c111 0020f7a8 020c3d2e     ;_h....... ..=..
    9c9c:	02d6aa86 011f1d1b 0210f444 00366c29     ........D...)l6.
    9cac:	01cc9013 01e2d90b 023fb06c 01938427     ........l.?.'...
    9cbc:	0027484a 00677464 03ab2f29 00cc18f8     JH'.dtg.)/......
    9ccc:	006c7709 000b6cb3 018f0fa0 027213e2     .wl..l........r.
    9cdc:	032a2df6 01d12483 002dd426 014c5c69     .-*..$..&.-.i\L.
    9cec:	004a865f 018d6c09 01fdaa63 00489ade     _.J..l..c.....H.
    9cfc:	03203e28 01da7d1f 02c97458 008ff016     (> ..}..Xt......
    9d0c:	00124f41 016d7d67 024dbd2b 00ff83bb     AO..g}m.+.M.....
    9d1c:	03fb53c0 00330954 02f90eaf 03994011     .S..T.3......@..
    9d2c:	01ebdc2c 018b53e7 007bf947 006dfb83     ,....S..G.{...m.
    9d3c:	00c5ca96 03d962e9 018ad044 003c7a60     .....b..D...`z<.
    9d4c:	007f0d93 02c0e5c5 010345dd 01bf1a0e     .........E......
    9d5c:	0008e359 03639bfa 0399ffd9 00232374     Y.....c.....t##.
    9d6c:	00846622 0019021c 01d55efa 03d7413f     "f.......^..?A..
    9d7c:	03aa3002 0381e786 0005b4c6 0174c84c     .0..........L.t.
    9d8c:	01e3a8eb 0277de56 0209a962 001c42f7     ....V.w.b....B..
    9d9c:	02cafacd 0119a2f4 0261ce05 034fb790     ..........a...O.
    9dac:	00237668 00aebb32 011a98dd 00ef4edf     hv#.2........N..
    9dbc:	0164c73c 0031ec8c 035b5825 030ba570     <.d...1.%X[.p...
    9dcc:	01603955 03a9a096 0027d8b0 027d1ec0     U9`.......'...}.
    9ddc:	0225db90 03d13b7a 0301c54a 006b6cc5     ..%.z;..J....lk.
    9dec:	00b244cd 0223c328 0189703d 026a33fb     .D..(.#.=p...3j.
    9dfc:	00001cae 0293a7fd 012ce87d 02c96a84     ........}.,..j..
    9e0c:	032deaf7 00676c9a 00cdbd33 02daf578     ..-..lg.3...x...
    9e1c:	019b8631 03703377 0029f289 02fb2eff     1...w3p...).....
    9e2c:	01f55d4d 03059094 019438fa 001eb2ce     M].......8......
    9e3c:	028bf405 026ce903 02e8d213 03ece7d2     ......l.........
    9e4c:	004165ed 0270d6a6 007b699e 004f6e06     .eA...p..i{..nO.
    9e5c:	00ca3242 002e3cc0 0056063f 020ca7b4     B2...<..?.V.....
    9e6c:	033d51ef 033927a2 006d4d01 0256d34b     .Q=..'9..Mm.K.V.
    9e7c:	00324bc5 029e0011 01385c20 006dad1c     .K2..... \8...m.
    9e8c:	00b477be 0315b164 02935584 002b5497     .w..d....U...T+.
    9e9c:	00597e5f 02b7d36d 02099363 0029e600     _~Y.m...c.....).
    9eac:	01526672 003f5867 01546a1d 03aa277d     rfR.gX?..jT.}'..
    9ebc:	003643d7 01f668fd 0041754f 02f879a7     .C6..h..OuA..y..
    9ecc:	01e5a08b 028723b0 02566098 001ab277     .....#...`V.w...
    9edc:	03ef7923 01f27c2e 02097dc3 0063b0d6     #y...|...}....c.
    9eec:	00256ec8 01dd5846 00b69702 0145c4a7     .n%.FX........E.
    9efc:	0187b72b 0051df6c 035ce819 0093f373     +...l.Q...\.s...
    9f0c:	009f1aef 02566b9a 000ba6bb 017b3a9e     .....kV......:{.
    9f1c:	01ef5969 00e4ae66 02468a2a 0071ffd5     iY..f...*.F...q.
    9f2c:	03a7fadf 00c97e94 00f1306c 0261acb7     .....~..l0....a.
    9f3c:	006667f2 012a09e4 01d469b5 0074a3ef     .gf...*..i....t.
    9f4c:	010902e3 00517a10 008183f5 03377f63     .....zQ.....c.7.
    9f5c:	007f1d08 031c6e05 0059237c 00395933     .....n..|#Y.3Y9.
    9f6c:	0253f462 02f67fff 0164b443 00538acc     b.S.....C.d...S.
    9f7c:	03f0eb1d 00738e1b 03e65ac5 02045317     ......s..Z...S..
    9f8c:	0069d42b 01bfe8b9 03b68e65 02341a17     +.i.....e.....4.
    9f9c:	023f7c16 005dc6d9 00e8be78 00134dd7     .|?...].x....M..
    9fac:	003caf23 0087b312 0031b585 0380222a     #.<.......1.*"..
    9fbc:	00b60501 015c904d 00af8fb6 003dc18b     ....M.\.......=.
    9fcc:	02d70d2b 03858e7c 038d0a48 029af03c     +...|...H...<...
    9fdc:	004ffd54 02b7143b 00f196e9 03a9d8ae     T.O.;...........
    9fec:	007e45e3 00482eb4 03ad4f1d 02e2d3a1     .E~...H..O......
    9ffc:	02b40240 01080167 006d8532 00275132     @...g...2.m.2Q'.
    a00c:	017ddf91 02349c13 01a836ab 00626107     ..}...4..6...ab.
    a01c:	0042765c 005af6ce 03d92353 02e8ea2f     \vB...Z.S#../...
    a02c:	00246165 01177a75 035dd2f5 023b61c2     ea$.uz....]..a;.
    a03c:	0264591f 00045a2f 014671a8 02d648d6     .Yd./Z...qF..H..
    a04c:	00db5ed3 03696b35 000514fa 00a0f50f     .^..5ki.........
    a05c:	025ff0d6 02a91e82 0373ca54 007cd2ba     .._.....T.s...|.
    a06c:	029ac266 01144c3a 009790da 00f07853     f...:L......Sx..
    a07c:	0026a0d4 0293a390 00adca7f 03ccbbb6     ..&.............
    a08c:	02bfdfd9 00360357 007c59e8 0120d747     ....W.6..Y|.G. .
    a09c:	0070b3ad 03f61be9 00570daf 03a3bd96     ..p.......W.....
    a0ac:	012f9a63 02ffcd7c 03b0ab5d 0017e4bd     c./.|...].......
    a0bc:	02d7dc51 0393aa7a 0118e43c 03835929     Q...z...<...)Y..
    a0cc:	0058ba7a 00680555 01331f99 030b8e01     z.X.U.h...3.....
    a0dc:	014f3898 0003abc9 0399be57 0218831d     .8O.....W.......
    a0ec:	02952a31 028ba136 002b258f 023b2ffd     1*..6....%+../;.
    a0fc:	023f7141 02556dd8 035e68ea 0017371d     Aq?..mU..h^..7..
    a10c:	00981299 02e0dd5e 02b2d927 00407642     ....^...'...Bv@.
    a11c:	00554552 00e54bd0 00c18863 02235b45     REU..K..c...E[#.
    a12c:	0197ff6d 0059109b 0180a515 00f83128     m.....Y.....(1..
    a13c:	004f4866 03907198 0041467f 00b73878     fHO..q...FA.x8..
    a14c:	0306a937 03517ae2 000b1b01 0019d3cb     7....zQ.........
    a15c:	026745f1 011f25fa 0043caa1 0068c72b     .Eg..%....C.+.h.
    a16c:	0070dac7 02f87dfa 004fb09a 03b25b92     ..p..}....O..[..
    a17c:	03a7d839 0067f228 038df3df 0166e33d     9...(.g.....=.f.
    a18c:	02fa3bfb 024a9095 00366877 03177544     .;....J.wh6.Du..
    a19c:	039707c8 01c90e1b 006d912c 00786a9e     ........,.m..jx.
    a1ac:	03ca7f5b 00bd1ce4 02b59417 02d2e2ab     [...............
    a1bc:	0062ae5b 02631b6f 02710c7e 00c6dbcd     [.b.o.c.~.q.....
    a1cc:	02cbb727 001fbe20 000ee085 0360a7ef     '... .........`.
    a1dc:	01d595fd 0056b717 00241dd3 01f7dbb6     ......V...$.....
    a1ec:	01a23589 012d4b4b 03fb96fb 00595a82     .5..KK-......ZY.
    a1fc:	0011880d 014eb833 02f76696 03fbf100     ....3.N..f......
    a20c:	002b9e85 03770a81 01256d41 00731bb2     ..+...w.Am%...s.
    a21c:	015d7ecd 0005d20c 02485ab2 03988d0d     .~]......ZH.....
    a22c:	03ebb9d9 025997cf 0027012a 00c04ff7     ......Y.*.'..O..
    a23c:	033fbd21 03fbe586 003303aa 0044a586     !.?.......3...D.
    a24c:	03532e80 03f9b8bc 020fe6fb 02eabcc8     ..S.............
    a25c:	0005abea 03809678 03487cb2 03ed21be     ....x....|H..!..
    a26c:	004adfab 002aa621 0210190b 0220df3d     ..J.!.*.....=. .
    a27c:	018f8e29 02f3be45 001ec8fb 00f96f6b     )...E.......ko..
    a28c:	03a6cea9 00ef31ef 00a81a2c 006a3b84     .....1..,....;j.
    a29c:	03f827f7 0352df35 01c9792d 02efcff4     .'..5.R.-y......
    a2ac:	00605175 001f6d98 02ed9067 03310139     uQ`..m..g...9.1.
    a2bc:	03a65e36 003a3ab2 01d5dd0b 02565072     6^...::.....rPV.
    a2cc:	03ce0c5c 018096ca 0034c6c7 01bb8126     \.........4.&...
    a2dc:	01045692 036190d4 03ac476b 007622cb     .V....a.kG..."v.
    a2ec:	024ef5ad 02ffe4c5 0345d785 01f4d572     ..N.......E.r...
    a2fc:	00719164 00ce6e5c 03c95713 02e3e117     d.q.\n...W......
    a30c:	022c3a6a 00581b44 02225414 013cf2cd     j:,.D.X..T"...<.
    a31c:	0068554a 0314e6f1 00790180 03c6b96f     JUh.......y.o...
    a32c:	019010ed 0010b470 016ce8b0 0043cccf     ....p.....l...C.
    a33c:	014c3731 02fcebf0 025741df 00c6555c     17L......AW.\U..
    a34c:	001c368f 01070b5a 030bb4ed 03f6000b     .6..Z...........
    a35c:	03758ecd 000332d8 009bd8f0 012c6423     ..u..2......#d,.
    a36c:	039ce074 018a36b2 002d258e 01c61e14     t....6...%-.....
    a37c:	016d2f6e 02996bba 00a568d3 000bca12     n/m..k...h......
    a38c:	032175d4 0321319b 03e78059 010e1e42     .u!..1!.Y...B...
    a39c:	001a3bed 01abb5b0 0253d5df 033e4df3     .;........S..M>.
    a3ac:	0398ecf0 00304777 002c5a6a 00a753fa     ....wG0.jZ,..S..
    a3bc:	037a459a 0347a239 0072e421 03312959     .Ez.9.G.!.r.Y)1.
    a3cc:	0188c0c4 03bb869e 02b633ca 002da03a     .........3..:.-.
    a3dc:	03ecb0b6 02361823 003a6285 039e9009     ....#.6..b:.....
    a3ec:	00343099 029a8f63 026d9d74 01886ba2     .04.c...t.m..k..
    a3fc:	0293dbc5 003d2028 02047d0a 0238b4a1     ....( =..}....8.
    a40c:	00e20f06 0175b1dc 0014999b 0385da79     ......u.....y...
    a41c:	01d29648 01cd9d18 014b0568 0078aeb5     H.......h.K...x.
    a42c:	03e9c06e 03733308 01745482 027ed52d     n....3s..Tt.-.~.
    a43c:	007b18a1 029a7a06 03225bbf 01c13036     ..{..z...[".60..
    a44c:	0383461c 002f2c2c 025492c7 0366e7b5     .F..,,/...T...f.
    a45c:	010773b2 03942067 000649c7 0365e3cb     .s..g ...I....e.
    a46c:	02d9ba9e 0303fcda 010312ab 0049b15b     ............[.I.
    a47c:	00000000                                ....

0000a480 <Montgomery_Rprime>:
    a480:	5ff3d621 c81db879 ea6b387d 173ea5aa     !.._y...}8k...>.
    a490:	2136f61c 3d01b7c7 6ac8f9d3 0006a5f1     ..6!...=...j....

0000a4a0 <Montgomery_rprime>:
    a4a0:	79bc3929 e12fe5f0 d1fcdcf3 d75e78b8     )9.y../......x^.
    a4b0:	76b5db21 bce409ed afc1c074 f32702fd     !..v....t.....'.

0000a4c0 <PARAMETER_d>:
    a4c0:	00000142 00000000 000e4000 00000000     B........@......
    a4d0:	00000000 01fc0c8d 0085223c 020fcb38     ........<"..8...
    a4e0:	0211995f 005e472f                       _.../G^.

0000a4e8 <curve_order>:
    a4e8:	c7768ce7 2fb2540e fe0f7999 dfbd004d     ..v..T./.y..M...
    a4f8:	9cbc14e5 f0539782 4e5e0a72 0029cbc1     ......S.r.^N..).

0000a508 <A144>:
    a508:	05080201 05020208 0c060201 080f090c     ................
    a518:	050d0d08 010a030b 0e0d0f01 0208080b     ................
    a528:	08020303                                ....

0000a52c <IC>:
    a52c:	07030100 00000406                       ........

0000a534 <RC>:
    a534:	0e070301 0c060b0d 0a050209              ............

0000a540 <sbox>:
    a540:	0b06050c 0d0a0009 080f0e03 02010704     ................

0000a550 <inv_pbox>:
    a550:	0c080400 1c181410 2c282420 3c383430     ........ $(,048<
    a560:	0d090501 1d191511 2d292521 3d393531     ........!%)-159=
    a570:	0e0a0602 1e1a1612 2e2a2622 3e3a3632     ........"&*.26:>
    a580:	0f0b0703 1f1b1713 2f2b2723 3f3b3733     ........#'+/37;?

0000a590 <inv_sbox>:
    a590:	080f0e05 0d02010c 0306040b 0a090700     ................

0000a5a0 <pbox>:
    a5a0:	30201000 31211101 32221202 33231303     .. 0..!1.."2..#3
    a5b0:	34241404 35251505 36261606 37271707     ..$4..%5..&6..'7
    a5c0:	38281808 39291909 3a2a1a0a 3b2b1b0b     ..(8..)9..*:..+;
    a5d0:	3c2c1c0c 3d2d1d0d 3e2e1e0e 3f2f1f0f     ..,<..-=...>../?

0000a5e0 <sbox>:
    a5e0:	0b06050c 0d0a0009 080f0e03 02010704     ................
    a5f0:	74617453 3d207375 2c692520 62755020     Status = %i, Pub
    a600:	5b79656b 365b5d32 203d205d 78323025     key[2][6] = %02x
    a610:	00000000 746f7250 6c6f636f 72726520     ....Protocol err
    a620:	202c726f 61656c70 64206573 6c62756f     or, please doubl
    a630:	68632065 206b6365 20656874 636f6c63     e check the cloc
    a640:	6e69206b 6f777420 616f6220 2e736472     k in two boards.
    a650:	0d0a0d20 00000000 45200d0a 6e657478      ......... Exten
    a660:	20646564 7373656d 20656761 65636572     ded message rece
    a670:	64657669 206e6920 62207852 65666675     ived in Rx buffe
    a680:	54202e72 72206568 69656365 20646576     r. The received 
    a690:	61746164 3a736920 00000d20 53200d0a     data is: ..... S
    a6a0:	646e6174 20647261 7373656d 20656761     tandard message 
    a6b0:	65636572 64657669 206e6920 62207852     received in Rx b
    a6c0:	65666675 64252072 6573202c 6f697463     uffer %d, sectio
    a6d0:	6425206e 6854202e 65722065 76696563     n %d. The receiv
    a6e0:	64206465 20617461 203a7369 00000a0d     ed data is: ....
    a6f0:	64252020 00000000 000d0a0d 50206f4e       %d........No P
    a700:	61204655 6c696176 656c6261 0000000d     UF available....
    a710:	6c696146 70206465 696c6275 656b2063     Failed public ke
    a720:	65672079 6172656e 6e6f6974 00000d21     y generation!...
    a730:	55424544 53203a47 65767265 62755072     DEBUG: ServerPub
    a740:	4b63696c 203a7965 00007830 65646f4e     licKey: 0x..Node
    a750:	20692520 6c627570 6b206369 69207965      %i public key i
    a760:	78302073 00000000 78323025 00000020     s 0x....%02x ...
    a770:	76697250 20657461 2079656b 30207369     Private key is 0
    a780:	00000078 72616853 53206465 65726365     x...Shared Secre
    a790:	73692074 00783020 6c696146 6e206465     t is 0x.Failed n
    a7a0:	2065646f 53206925 65726168 65532064     ode %i Shared Se
    a7b0:	74657263 6e654720 74617265 0d6e6f69     cret Generation.
    a7c0:	0000000a 6c696146 646f6320 25203a65     ....Fail code: %
    a7d0:	000a0d69 65646f4e 20692520 72636573     i...Node %i secr
    a7e0:	67207465 72656e65 6f697461 7573206e     et generation su
    a7f0:	73656363 0a0d2173 00000000 756e654d     ccess!......Menu
    a800:	0a0d3a20 2d2d2020 6c655320 20746365      :..  -- Select 
    a810:	20656874 69746361 0d3a6e6f 3020200a     the action:..  0
    a820:	6553203a 74732074 61646e61 66206472     : Set standard f
    a830:	65746c69 44492072 203a3020 35347830     ilter ID 0: 0x45
    a840:	73202c41 65726f74 746e6920 7852206f     A, store into Rx
    a850:	66756220 2e726566 200a0d20 203a3120      buffer. ..  1: 
    a860:	20746553 6e617473 64726164 6c696620     Set standard fil
    a870:	20726574 31204449 7830203a 2c393634     ter ID 1: 0x469,
    a880:	6f747320 69206572 206f746e 46207852      store into Rx F
    a890:	204f4649 0d202e30 3220200a 6553203a     IFO 0. ..  2: Se
    a8a0:	7320646e 646e6174 20647261 7373656d     nd standard mess
    a8b0:	20656761 68746977 3a444920 34783020     age with ID: 0x4
    a8c0:	61204135 3420646e 74796220 61642065     5A and 4 byte da
    a8d0:	30206174 206f7420 0d202e33 3320200a     ta 0 to 3. ..  3
    a8e0:	6553203a 7320646e 646e6174 20647261     : Send standard 
    a8f0:	7373656d 20656761 68746977 3a444920     message with ID:
    a900:	34783020 61203936 3420646e 74796220      0x469 and 4 byt
    a910:	61642065 31206174 74203832 3331206f     e data 128 to 13
    a920:	0d202e31 3420200a 6553203a 78652074     1. ..  4: Set ex
    a930:	646e6574 66206465 65746c69 44492072     tended filter ID
    a940:	203a3020 30317830 30303030 202c3541      0: 0x100000A5, 
    a950:	726f7473 6e692065 52206f74 75622078     store into Rx bu
    a960:	72656666 0a0d202e 3a352020 74655320     ffer. ..  5: Set
    a970:	74786520 65646e65 69662064 7265746c      extended filter
    a980:	20444920 30203a31 30303178 39303030      ID 1: 0x1000009
    a990:	73202c36 65726f74 746e6920 7852206f     6, store into Rx
    a9a0:	46494620 2e31204f 200a0d20 203a3620      FIFO 1. ..  6: 
    a9b0:	646e6553 74786520 65646e65 656d2064     Send extended me
    a9c0:	67617373 69772065 49206874 30203a44     ssage with ID: 0
    a9d0:	30303178 41303030 6e612035 20382064     x100000A5 and 8 
    a9e0:	65747962 74616420 20302061 37206f74     byte data 0 to 7
    a9f0:	0a0d202e 3a372020 6e655320 78652064     . ..  7: Send ex
    aa00:	646e6574 6d206465 61737365 77206567     tended message w
    aa10:	20687469 203a4449 30317830 30303030     ith ID: 0x100000
    aa20:	61203639 3820646e 74796220 61642065     96 and 8 byte da
    aa30:	31206174 74203832 3331206f 0d202e35     ta 128 to 135. .
    aa40:	6820200a 6944203a 616c7073 656d2079     .  h: Display me
    aa50:	0d20756e 00000d0a 72500a0d 20737365     nu .......Press 
    aa60:	20796e61 2079656b 65206f74 7265746e     any key to enter
    aa70:	72206120 6f646e61 656b206d 65732079      a random key se
    aa80:	203a6465 00000000 706d6f43 6574656c     ed: ....Complete
    aa90:	6e652064 6c6c6f72 746e656d 61687020     d enrollment pha
    aaa0:	0d216573 00000000 74696e49 696c6169     se!.....Initiali
    aab0:	6974617a 43206e6f 6c706d6f 2e657465     zation Complete.
    aac0:	000d2e2e 74736554 20676e69 20656874     ....Testing the 
    aad0:	76726573 2e2e7265 00000d2e 6c696146     server......Fail
    aae0:	73206465 65767265 20732772 68747561     ed server's auth
    aaf0:	69746e65 69746163 6b206e6f 67207965     entication key g
    ab00:	72656e65 6f697461 000d216e 6c696146     eneration!..Fail
    ab10:	73206465 65767265 20732772 68747561     ed server's auth
    ab20:	69746e65 69746163 73206e6f 65726168     entication share
    ab30:	65732064 74657263 6e656720 74617265     d secret generat
    ab40:	216e6f69 0000000d 64616552 6f742079     ion!....Ready to
    ab50:	63657220 65766965 20692520 68736168      receive %i hash
    ab60:	72206465 6f707365 7365736e 00000a0d     ed responses....
    ab70:	65636552 64657669 72696620 68207473     Received first h
    ab80:	0d666c61 00000000 65636552 64657669     alf.....Received
    ab90:	73657220 736e6f70 72662065 4e206d6f      response from N
    aba0:	2065646f 0a0d6925 00000000 696e6946     ode %i......Fini
    abb0:	64656873 63657220 69766965 7220676e     shed receiving r
    abc0:	6f707365 7365736e 0000000d 65520a0d     esponses......Re
    abd0:	76696563 3d206465 00783020 74530a0d     ceived = 0x...St
    abe0:	6465726f 30203d20 00000078 65646f4e     ored = 0x...Node
    abf0:	20692520 76207369 64696c61 000a0d21      %i is valid!...
    ac00:	65646f4e 20692520 20746f6e 696c6176     Node %i not vali
    ac10:	0a0d2164 00000000 65470a0d 6172656e     d!........Genera
    ac20:	20646574 73736573 206e6f69 3a79656b     ted session key:
    ac30:	00783020 6f460d0a 74616d72 20646574      0x...Formatted 
    ac40:	73736573 206e6f69 2079656b 20646e61     session key and 
    ac50:	696c6176 6f6e2064 63206564 61636e6f     valid node conca
    ac60:	616e6574 6e6f6974 6d6f6320 74656c70     tenation complet
    ac70:	000d0a65 696e6946 64656873 636e4520     e...Finished Enc
    ac80:	74707972 20676e69 73736573 206e6f69     rypting session 
    ac90:	7379656b 0000000d 616c6544 20646579     keys....Delayed 
    aca0:	65726568 00000000 696e6946 64656873     here....Finished
    acb0:	6e657320 676e6964 73657320 6e6f6973      sending session
    acc0:	79656b20 00000d73 74616854 69207327      keys...That's i
    acd0:	6f662074 75412072 6e656874 61636974     t for Authentica
    ace0:	6e6f6974 6954202e 7420656d 696c206f     tion. Time to li
    acf0:	6e657473 0d2e2e2e 00000000 64616552     sten........Read
    ad00:	6f742079 73696c20 2e6e6574 000d2e2e     y to listen.....
    ad10:	00206925 6d726f4e 6f206c61 61726570     %i .Normal opera
    ad20:	6e6f6974 20736920 7265766f 0000000d     tion is over....

0000ad30 <_global_impure_ptr>:
    ad30:	2000010c                                ... 

0000ad34 <__sf_fake_stderr>:
	...

0000ad54 <__sf_fake_stdin>:
	...

0000ad74 <__sf_fake_stdout>:
	...
    ad94:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    ada4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    adb4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    adc4:	00006665 0000ade6 0000ade9 0000adec     ef..............
    add4:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    ade4:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
    adf4:	2e005849 20200000                                IX...

0000adf9 <_ctype_>:
    adf9:	20202000 20202020 28282020 20282828     .         ((((( 
    ae09:	20202020 20202020 20202020 20202020                     
    ae19:	10108820 10101010 10101010 10101010      ...............
    ae29:	04040410 04040404 10040404 10101010     ................
    ae39:	41411010 41414141 01010101 01010101     ..AAAAAA........
    ae49:	01010101 01010101 01010101 10101010     ................
    ae59:	42421010 42424242 02020202 02020202     ..BBBBBB........
    ae69:	02020202 02020202 02020202 10101010     ................
    ae79:	00000020 00000000 00000000 00000000      ...............
	...

0000aefc <_init>:
    aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aefe:	46c0      	nop			; (mov r8, r8)
    af00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    af02:	bc08      	pop	{r3}
    af04:	469e      	mov	lr, r3
    af06:	4770      	bx	lr

0000af08 <__init_array_start>:
    af08:	000000e5 	.word	0x000000e5

0000af0c <_fini>:
    af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af0e:	46c0      	nop			; (mov r8, r8)
    af10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    af12:	bc08      	pop	{r3}
    af14:	469e      	mov	lr, r3
    af16:	4770      	bx	lr

0000af18 <__fini_array_start>:
    af18:	000000bd 	.word	0x000000bd
