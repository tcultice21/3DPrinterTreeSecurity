
CAN_QUICK_START1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009b30  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000168  20000000  00009b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ec0  20000168  00009c98  00020168  2**2
                  ALLOC
  3 .stack        00002000  20001028  0000ab58  00020168  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003eeb1  00000000  00000000  000201e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a98  00000000  00000000  0005f09a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000808  00000000  00000000  00063b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000bb0  00000000  00000000  0006433a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00020b0c  00000000  00000000  00064eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001091e  00000000  00000000  000859f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000a6211  00000000  00000000  00096314  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001e24  00000000  00000000  0013c528  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c691  00000000  00000000  0013e34c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 30 00 20 71 17 00 00 6d 17 00 00 6d 17 00 00     (0. q...m...m...
	...
      2c:	6d 17 00 00 00 00 00 00 00 00 00 00 6d 17 00 00     m...........m...
      3c:	6d 17 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     m...m...m...m...
      4c:	6d 17 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     m...m...m...m...
      5c:	6d 17 00 00 6d 17 00 00 69 0a 00 00 79 0a 00 00     m...m...i...y...
      6c:	89 0a 00 00 99 0a 00 00 a9 0a 00 00 b9 0a 00 00     ................
      7c:	19 4a 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     .J..m...m...m...
      8c:	6d 17 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     m...m...m...m...
      9c:	6d 17 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     m...m...m...m...
      ac:	6d 17 00 00 6d 17 00 00 6d 17 00 00 6d 17 00 00     m...m...m...m...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000168 	.word	0x20000168
      dc:	00000000 	.word	0x00000000
      e0:	00009b30 	.word	0x00009b30

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000016c 	.word	0x2000016c
     110:	00009b30 	.word	0x00009b30
     114:	00009b30 	.word	0x00009b30
     118:	00000000 	.word	0x00000000

0000011c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     11c:	4b0c      	ldr	r3, [pc, #48]	; (150 <cpu_irq_enter_critical+0x34>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2b00      	cmp	r3, #0
     122:	d106      	bne.n	132 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     124:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     128:	2b00      	cmp	r3, #0
     12a:	d007      	beq.n	13c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     12c:	2200      	movs	r2, #0
     12e:	4b09      	ldr	r3, [pc, #36]	; (154 <cpu_irq_enter_critical+0x38>)
     130:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     132:	4a07      	ldr	r2, [pc, #28]	; (150 <cpu_irq_enter_critical+0x34>)
     134:	6813      	ldr	r3, [r2, #0]
     136:	3301      	adds	r3, #1
     138:	6013      	str	r3, [r2, #0]
}
     13a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     13c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     13e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     142:	2200      	movs	r2, #0
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <cpu_irq_enter_critical+0x3c>)
     146:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     148:	3201      	adds	r2, #1
     14a:	4b02      	ldr	r3, [pc, #8]	; (154 <cpu_irq_enter_critical+0x38>)
     14c:	701a      	strb	r2, [r3, #0]
     14e:	e7f0      	b.n	132 <cpu_irq_enter_critical+0x16>
     150:	20000184 	.word	0x20000184
     154:	20000188 	.word	0x20000188
     158:	20000000 	.word	0x20000000

0000015c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     15c:	4b08      	ldr	r3, [pc, #32]	; (180 <cpu_irq_leave_critical+0x24>)
     15e:	681a      	ldr	r2, [r3, #0]
     160:	3a01      	subs	r2, #1
     162:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     164:	681b      	ldr	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d109      	bne.n	17e <cpu_irq_leave_critical+0x22>
     16a:	4b06      	ldr	r3, [pc, #24]	; (184 <cpu_irq_leave_critical+0x28>)
     16c:	781b      	ldrb	r3, [r3, #0]
     16e:	2b00      	cmp	r3, #0
     170:	d005      	beq.n	17e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     172:	2201      	movs	r2, #1
     174:	4b04      	ldr	r3, [pc, #16]	; (188 <cpu_irq_leave_critical+0x2c>)
     176:	701a      	strb	r2, [r3, #0]
     178:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     17c:	b662      	cpsie	i
	}
}
     17e:	4770      	bx	lr
     180:	20000184 	.word	0x20000184
     184:	20000188 	.word	0x20000188
     188:	20000000 	.word	0x20000000

0000018c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     190:	ac01      	add	r4, sp, #4
     192:	2501      	movs	r5, #1
     194:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     196:	2700      	movs	r7, #0
     198:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     19a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     19c:	0021      	movs	r1, r4
     19e:	200f      	movs	r0, #15
     1a0:	4e06      	ldr	r6, [pc, #24]	; (1bc <system_board_init+0x30>)
     1a2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1a4:	2280      	movs	r2, #128	; 0x80
     1a6:	0212      	lsls	r2, r2, #8
     1a8:	2382      	movs	r3, #130	; 0x82
     1aa:	05db      	lsls	r3, r3, #23
     1ac:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1ae:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1b0:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1b2:	0021      	movs	r1, r4
     1b4:	201c      	movs	r0, #28
     1b6:	47b0      	blx	r6
}
     1b8:	b003      	add	sp, #12
     1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1bc:	0000065d 	.word	0x0000065d

000001c0 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
     1c0:	6803      	ldr	r3, [r0, #0]
     1c2:	4a0a      	ldr	r2, [pc, #40]	; (1ec <_can_enable_peripheral_clock+0x2c>)
     1c4:	4293      	cmp	r3, r2
     1c6:	d003      	beq.n	1d0 <_can_enable_peripheral_clock+0x10>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
     1c8:	4a09      	ldr	r2, [pc, #36]	; (1f0 <_can_enable_peripheral_clock+0x30>)
     1ca:	4293      	cmp	r3, r2
     1cc:	d007      	beq.n	1de <_can_enable_peripheral_clock+0x1e>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
     1ce:	4770      	bx	lr
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	MCLK->AHBMASK.reg |= ahb_mask;
     1d0:	4a08      	ldr	r2, [pc, #32]	; (1f4 <_can_enable_peripheral_clock+0x34>)
     1d2:	6911      	ldr	r1, [r2, #16]
     1d4:	2380      	movs	r3, #128	; 0x80
     1d6:	005b      	lsls	r3, r3, #1
     1d8:	430b      	orrs	r3, r1
     1da:	6113      	str	r3, [r2, #16]
     1dc:	e7f7      	b.n	1ce <_can_enable_peripheral_clock+0xe>
     1de:	4a05      	ldr	r2, [pc, #20]	; (1f4 <_can_enable_peripheral_clock+0x34>)
     1e0:	6911      	ldr	r1, [r2, #16]
     1e2:	2380      	movs	r3, #128	; 0x80
     1e4:	009b      	lsls	r3, r3, #2
     1e6:	430b      	orrs	r3, r1
     1e8:	6113      	str	r3, [r2, #16]
     1ea:	e7f0      	b.n	1ce <_can_enable_peripheral_clock+0xe>
     1ec:	42001c00 	.word	0x42001c00
     1f0:	42002000 	.word	0x42002000
     1f4:	40000800 	.word	0x40000800

000001f8 <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
     1f8:	b570      	push	{r4, r5, r6, lr}
     1fa:	000c      	movs	r4, r1
     1fc:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1fe:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
     200:	4ba5      	ldr	r3, [pc, #660]	; (498 <can_init+0x2a0>)
     202:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     204:	4ba5      	ldr	r3, [pc, #660]	; (49c <can_init+0x2a4>)
     206:	2200      	movs	r2, #0
     208:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     20a:	782a      	ldrb	r2, [r5, #0]
     20c:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
     20e:	4ba4      	ldr	r3, [pc, #656]	; (4a0 <can_init+0x2a8>)
     210:	429c      	cmp	r4, r3
     212:	d100      	bne.n	216 <can_init+0x1e>
     214:	e0c6      	b.n	3a4 <can_init+0x1ac>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
     216:	4ba3      	ldr	r3, [pc, #652]	; (4a4 <can_init+0x2ac>)
     218:	429c      	cmp	r4, r3
     21a:	d100      	bne.n	21e <can_init+0x26>
     21c:	e0ff      	b.n	41e <can_init+0x226>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
     21e:	69a3      	ldr	r3, [r4, #24]
     220:	2202      	movs	r2, #2
     222:	4313      	orrs	r3, r2
     224:	61a3      	str	r3, [r4, #24]
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
     226:	2300      	movs	r3, #0
     228:	22bc      	movs	r2, #188	; 0xbc
     22a:	50a3      	str	r3, [r4, r2]
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
     22c:	320c      	adds	r2, #12
     22e:	50a3      	str	r3, [r4, r2]
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
     230:	4b9d      	ldr	r3, [pc, #628]	; (4a8 <can_init+0x2b0>)
     232:	61e3      	str	r3, [r4, #28]
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
     234:	4b9d      	ldr	r3, [pc, #628]	; (4ac <can_init+0x2b4>)
     236:	60e3      	str	r3, [r4, #12]
	if (config->tdc_enable) {
     238:	7bab      	ldrb	r3, [r5, #14]
     23a:	2b00      	cmp	r3, #0
     23c:	d004      	beq.n	248 <can_init+0x50>
		hw->DBTP.reg |= CAN_DBTP_TDC;
     23e:	68e2      	ldr	r2, [r4, #12]
     240:	2380      	movs	r3, #128	; 0x80
     242:	041b      	lsls	r3, r3, #16
     244:	4313      	orrs	r3, r2
     246:	60e3      	str	r3, [r4, #12]
	if (config->run_in_standby) {
     248:	786b      	ldrb	r3, [r5, #1]
     24a:	2b00      	cmp	r3, #0
     24c:	d003      	beq.n	256 <can_init+0x5e>
		hw->MRCFG.reg |= 0x01<<6;
     24e:	68a3      	ldr	r3, [r4, #8]
     250:	2240      	movs	r2, #64	; 0x40
     252:	4313      	orrs	r3, r2
     254:	60a3      	str	r3, [r4, #8]
	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
     256:	6962      	ldr	r2, [r4, #20]
     258:	78ab      	ldrb	r3, [r5, #2]
     25a:	4313      	orrs	r3, r2
     25c:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
     25e:	78eb      	ldrb	r3, [r5, #3]
     260:	2b00      	cmp	r3, #0
     262:	d004      	beq.n	26e <can_init+0x76>
		hw->CCCR.reg |= CAN_CCCR_TXP;
     264:	69a2      	ldr	r2, [r4, #24]
     266:	2380      	movs	r3, #128	; 0x80
     268:	01db      	lsls	r3, r3, #7
     26a:	4313      	orrs	r3, r2
     26c:	61a3      	str	r3, [r4, #24]
	if (config->edge_filtering) {
     26e:	792b      	ldrb	r3, [r5, #4]
     270:	2b00      	cmp	r3, #0
     272:	d004      	beq.n	27e <can_init+0x86>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
     274:	69a2      	ldr	r2, [r4, #24]
     276:	2380      	movs	r3, #128	; 0x80
     278:	019b      	lsls	r3, r3, #6
     27a:	4313      	orrs	r3, r2
     27c:	61a3      	str	r3, [r4, #24]
	if (config->protocol_exception_handling) {
     27e:	796b      	ldrb	r3, [r5, #5]
     280:	2b00      	cmp	r3, #0
     282:	d004      	beq.n	28e <can_init+0x96>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
     284:	69a2      	ldr	r2, [r4, #24]
     286:	2380      	movs	r3, #128	; 0x80
     288:	015b      	lsls	r3, r3, #5
     28a:	4313      	orrs	r3, r2
     28c:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
     28e:	79ab      	ldrb	r3, [r5, #6]
     290:	2b00      	cmp	r3, #0
     292:	d103      	bne.n	29c <can_init+0xa4>
		hw->CCCR.reg |= CAN_CCCR_DAR;
     294:	69a3      	ldr	r3, [r4, #24]
     296:	2240      	movs	r2, #64	; 0x40
     298:	4313      	orrs	r3, r2
     29a:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
     29c:	79eb      	ldrb	r3, [r5, #7]
     29e:	2b00      	cmp	r3, #0
     2a0:	d003      	beq.n	2aa <can_init+0xb2>
		hw->CCCR.reg |= CAN_CCCR_CSR;
     2a2:	69a3      	ldr	r3, [r4, #24]
     2a4:	2210      	movs	r2, #16
     2a6:	4313      	orrs	r3, r2
     2a8:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_acknowledge) {
     2aa:	7a2b      	ldrb	r3, [r5, #8]
     2ac:	2b00      	cmp	r3, #0
     2ae:	d003      	beq.n	2b8 <can_init+0xc0>
		hw->CCCR.reg |= CAN_CCCR_CSA;
     2b0:	69a3      	ldr	r3, [r4, #24]
     2b2:	2208      	movs	r2, #8
     2b4:	4313      	orrs	r3, r2
     2b6:	61a3      	str	r3, [r4, #24]
	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
     2b8:	7a6b      	ldrb	r3, [r5, #9]
     2ba:	041b      	lsls	r3, r3, #16
     2bc:	22f0      	movs	r2, #240	; 0xf0
     2be:	0312      	lsls	r2, r2, #12
     2c0:	4013      	ands	r3, r2
     2c2:	2201      	movs	r2, #1
     2c4:	4313      	orrs	r3, r2
     2c6:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
     2c8:	7b2b      	ldrb	r3, [r5, #12]
     2ca:	7b6a      	ldrb	r2, [r5, #13]
     2cc:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
     2ce:	896a      	ldrh	r2, [r5, #10]
     2d0:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
     2d2:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
     2d4:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
     2d6:	7beb      	ldrb	r3, [r5, #15]
     2d8:	021b      	lsls	r3, r3, #8
     2da:	22fe      	movs	r2, #254	; 0xfe
     2dc:	01d2      	lsls	r2, r2, #7
     2de:	4013      	ands	r3, r2
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
     2e0:	7c29      	ldrb	r1, [r5, #16]
     2e2:	227f      	movs	r2, #127	; 0x7f
     2e4:	400a      	ands	r2, r1
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
     2e6:	4313      	orrs	r3, r2
     2e8:	64a3      	str	r3, [r4, #72]	; 0x48
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
     2ea:	7c6a      	ldrb	r2, [r5, #17]
     2ec:	0112      	lsls	r2, r2, #4
     2ee:	2330      	movs	r3, #48	; 0x30
     2f0:	4013      	ands	r3, r2
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
     2f2:	7ca9      	ldrb	r1, [r5, #18]
     2f4:	0089      	lsls	r1, r1, #2
     2f6:	220c      	movs	r2, #12
     2f8:	400a      	ands	r2, r1
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
     2fa:	4313      	orrs	r3, r2
     2fc:	2280      	movs	r2, #128	; 0x80
     2fe:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_standard_reject) {
     300:	7ceb      	ldrb	r3, [r5, #19]
     302:	2b00      	cmp	r3, #0
     304:	d003      	beq.n	30e <can_init+0x116>
		hw->GFC.reg |= CAN_GFC_RRFS;
     306:	58a3      	ldr	r3, [r4, r2]
     308:	2102      	movs	r1, #2
     30a:	430b      	orrs	r3, r1
     30c:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_extended_reject) {
     30e:	7d2b      	ldrb	r3, [r5, #20]
     310:	2b00      	cmp	r3, #0
     312:	d004      	beq.n	31e <can_init+0x126>
		hw->GFC.reg |= CAN_GFC_RRFE;
     314:	2280      	movs	r2, #128	; 0x80
     316:	58a3      	ldr	r3, [r4, r2]
     318:	2101      	movs	r1, #1
     31a:	430b      	orrs	r3, r1
     31c:	50a3      	str	r3, [r4, r2]
	hw->XIDAM.reg = config->extended_id_mask;
     31e:	2390      	movs	r3, #144	; 0x90
     320:	69aa      	ldr	r2, [r5, #24]
     322:	50e2      	str	r2, [r4, r3]
	if (config->rx_fifo_0_overwrite) {
     324:	7f2b      	ldrb	r3, [r5, #28]
     326:	2b00      	cmp	r3, #0
     328:	d005      	beq.n	336 <can_init+0x13e>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
     32a:	22a0      	movs	r2, #160	; 0xa0
     32c:	58a1      	ldr	r1, [r4, r2]
     32e:	2380      	movs	r3, #128	; 0x80
     330:	061b      	lsls	r3, r3, #24
     332:	430b      	orrs	r3, r1
     334:	50a3      	str	r3, [r4, r2]
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
     336:	22a0      	movs	r2, #160	; 0xa0
     338:	58a1      	ldr	r1, [r4, r2]
     33a:	7f6b      	ldrb	r3, [r5, #29]
     33c:	061b      	lsls	r3, r3, #24
     33e:	20fe      	movs	r0, #254	; 0xfe
     340:	05c0      	lsls	r0, r0, #23
     342:	4003      	ands	r3, r0
     344:	430b      	orrs	r3, r1
     346:	50a3      	str	r3, [r4, r2]
	if (config->rx_fifo_1_overwrite) {
     348:	7fab      	ldrb	r3, [r5, #30]
     34a:	2b00      	cmp	r3, #0
     34c:	d005      	beq.n	35a <can_init+0x162>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
     34e:	3210      	adds	r2, #16
     350:	58a1      	ldr	r1, [r4, r2]
     352:	2380      	movs	r3, #128	; 0x80
     354:	061b      	lsls	r3, r3, #24
     356:	430b      	orrs	r3, r1
     358:	50a3      	str	r3, [r4, r2]
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
     35a:	22b0      	movs	r2, #176	; 0xb0
     35c:	58a1      	ldr	r1, [r4, r2]
     35e:	7feb      	ldrb	r3, [r5, #31]
     360:	061b      	lsls	r3, r3, #24
     362:	20fe      	movs	r0, #254	; 0xfe
     364:	05c0      	lsls	r0, r0, #23
     366:	4003      	ands	r3, r0
     368:	430b      	orrs	r3, r1
     36a:	50a3      	str	r3, [r4, r2]
	if (config->tx_queue_mode) {
     36c:	2320      	movs	r3, #32
     36e:	5ceb      	ldrb	r3, [r5, r3]
     370:	2b00      	cmp	r3, #0
     372:	d005      	beq.n	380 <can_init+0x188>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
     374:	3210      	adds	r2, #16
     376:	58a1      	ldr	r1, [r4, r2]
     378:	2380      	movs	r3, #128	; 0x80
     37a:	05db      	lsls	r3, r3, #23
     37c:	430b      	orrs	r3, r1
     37e:	50a3      	str	r3, [r4, r2]
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
     380:	22f0      	movs	r2, #240	; 0xf0
     382:	58a1      	ldr	r1, [r4, r2]
     384:	2321      	movs	r3, #33	; 0x21
     386:	5ceb      	ldrb	r3, [r5, r3]
     388:	061b      	lsls	r3, r3, #24
     38a:	20fc      	movs	r0, #252	; 0xfc
     38c:	0580      	lsls	r0, r0, #22
     38e:	4003      	ands	r3, r0
     390:	430b      	orrs	r3, r1
     392:	50a3      	str	r3, [r4, r2]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
     394:	2303      	movs	r3, #3
     396:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
     398:	3b04      	subs	r3, #4
     39a:	3a10      	subs	r2, #16
     39c:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
     39e:	3204      	adds	r2, #4
     3a0:	50a3      	str	r3, [r4, r2]
}
     3a2:	bd70      	pop	{r4, r5, r6, pc}
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
     3a4:	493d      	ldr	r1, [pc, #244]	; (49c <can_init+0x2a4>)
     3a6:	201a      	movs	r0, #26
     3a8:	4b41      	ldr	r3, [pc, #260]	; (4b0 <can_init+0x2b8>)
     3aa:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
     3ac:	201a      	movs	r0, #26
     3ae:	4b41      	ldr	r3, [pc, #260]	; (4b4 <can_init+0x2bc>)
     3b0:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
     3b2:	4b3b      	ldr	r3, [pc, #236]	; (4a0 <can_init+0x2a8>)
     3b4:	699a      	ldr	r2, [r3, #24]
     3b6:	2102      	movs	r1, #2
     3b8:	430a      	orrs	r2, r1
     3ba:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
     3bc:	4a3e      	ldr	r2, [pc, #248]	; (4b8 <can_init+0x2c0>)
     3be:	0412      	lsls	r2, r2, #16
     3c0:	0c12      	lsrs	r2, r2, #16
     3c2:	2180      	movs	r1, #128	; 0x80
     3c4:	0389      	lsls	r1, r1, #14
     3c6:	430a      	orrs	r2, r1
     3c8:	2184      	movs	r1, #132	; 0x84
     3ca:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
     3cc:	4a3b      	ldr	r2, [pc, #236]	; (4bc <can_init+0x2c4>)
     3ce:	0412      	lsls	r2, r2, #16
     3d0:	0c12      	lsrs	r2, r2, #16
     3d2:	2180      	movs	r1, #128	; 0x80
     3d4:	0349      	lsls	r1, r1, #13
     3d6:	430a      	orrs	r2, r1
     3d8:	2088      	movs	r0, #136	; 0x88
     3da:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
     3dc:	4a38      	ldr	r2, [pc, #224]	; (4c0 <can_init+0x2c8>)
     3de:	0412      	lsls	r2, r2, #16
     3e0:	0c12      	lsrs	r2, r2, #16
     3e2:	430a      	orrs	r2, r1
     3e4:	3018      	adds	r0, #24
     3e6:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
     3e8:	4a36      	ldr	r2, [pc, #216]	; (4c4 <can_init+0x2cc>)
     3ea:	0412      	lsls	r2, r2, #16
     3ec:	0c12      	lsrs	r2, r2, #16
     3ee:	4311      	orrs	r1, r2
     3f0:	22b0      	movs	r2, #176	; 0xb0
     3f2:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
     3f4:	4a34      	ldr	r2, [pc, #208]	; (4c8 <can_init+0x2d0>)
     3f6:	0412      	lsls	r2, r2, #16
     3f8:	0c12      	lsrs	r2, r2, #16
     3fa:	21ac      	movs	r1, #172	; 0xac
     3fc:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
     3fe:	4a33      	ldr	r2, [pc, #204]	; (4cc <can_init+0x2d4>)
     400:	0412      	lsls	r2, r2, #16
     402:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
     404:	4932      	ldr	r1, [pc, #200]	; (4d0 <can_init+0x2d8>)
     406:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
     408:	21c0      	movs	r1, #192	; 0xc0
     40a:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
     40c:	4a31      	ldr	r2, [pc, #196]	; (4d4 <can_init+0x2dc>)
     40e:	0412      	lsls	r2, r2, #16
     410:	0c12      	lsrs	r2, r2, #16
     412:	2180      	movs	r1, #128	; 0x80
     414:	0309      	lsls	r1, r1, #12
     416:	430a      	orrs	r2, r1
     418:	21f0      	movs	r1, #240	; 0xf0
     41a:	505a      	str	r2, [r3, r1]
     41c:	e703      	b.n	226 <can_init+0x2e>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
     41e:	491f      	ldr	r1, [pc, #124]	; (49c <can_init+0x2a4>)
     420:	201b      	movs	r0, #27
     422:	4b23      	ldr	r3, [pc, #140]	; (4b0 <can_init+0x2b8>)
     424:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
     426:	201b      	movs	r0, #27
     428:	4b22      	ldr	r3, [pc, #136]	; (4b4 <can_init+0x2bc>)
     42a:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
     42c:	4b1d      	ldr	r3, [pc, #116]	; (4a4 <can_init+0x2ac>)
     42e:	699a      	ldr	r2, [r3, #24]
     430:	2102      	movs	r1, #2
     432:	430a      	orrs	r2, r1
     434:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
     436:	4a28      	ldr	r2, [pc, #160]	; (4d8 <can_init+0x2e0>)
     438:	0412      	lsls	r2, r2, #16
     43a:	0c12      	lsrs	r2, r2, #16
     43c:	2180      	movs	r1, #128	; 0x80
     43e:	0389      	lsls	r1, r1, #14
     440:	430a      	orrs	r2, r1
     442:	2184      	movs	r1, #132	; 0x84
     444:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
     446:	4a25      	ldr	r2, [pc, #148]	; (4dc <can_init+0x2e4>)
     448:	0412      	lsls	r2, r2, #16
     44a:	0c12      	lsrs	r2, r2, #16
     44c:	2180      	movs	r1, #128	; 0x80
     44e:	0349      	lsls	r1, r1, #13
     450:	430a      	orrs	r2, r1
     452:	2088      	movs	r0, #136	; 0x88
     454:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
     456:	4a22      	ldr	r2, [pc, #136]	; (4e0 <can_init+0x2e8>)
     458:	0412      	lsls	r2, r2, #16
     45a:	0c12      	lsrs	r2, r2, #16
     45c:	430a      	orrs	r2, r1
     45e:	3018      	adds	r0, #24
     460:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
     462:	4a20      	ldr	r2, [pc, #128]	; (4e4 <can_init+0x2ec>)
     464:	0412      	lsls	r2, r2, #16
     466:	0c12      	lsrs	r2, r2, #16
     468:	4311      	orrs	r1, r2
     46a:	22b0      	movs	r2, #176	; 0xb0
     46c:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
     46e:	4a1e      	ldr	r2, [pc, #120]	; (4e8 <can_init+0x2f0>)
     470:	0412      	lsls	r2, r2, #16
     472:	0c12      	lsrs	r2, r2, #16
     474:	21ac      	movs	r1, #172	; 0xac
     476:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
     478:	4a1c      	ldr	r2, [pc, #112]	; (4ec <can_init+0x2f4>)
     47a:	0412      	lsls	r2, r2, #16
     47c:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
     47e:	4914      	ldr	r1, [pc, #80]	; (4d0 <can_init+0x2d8>)
     480:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
     482:	21c0      	movs	r1, #192	; 0xc0
     484:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
     486:	4a1a      	ldr	r2, [pc, #104]	; (4f0 <can_init+0x2f8>)
     488:	0412      	lsls	r2, r2, #16
     48a:	0c12      	lsrs	r2, r2, #16
     48c:	2180      	movs	r1, #128	; 0x80
     48e:	0309      	lsls	r1, r1, #12
     490:	430a      	orrs	r2, r1
     492:	21f0      	movs	r1, #240	; 0xf0
     494:	505a      	str	r2, [r3, r1]
     496:	e6c6      	b.n	226 <can_init+0x2e>
     498:	000001c1 	.word	0x000001c1
     49c:	20000bbc 	.word	0x20000bbc
     4a0:	42001c00 	.word	0x42001c00
     4a4:	42002000 	.word	0x42002000
     4a8:	06050a03 	.word	0x06050a03
     4ac:	00050a33 	.word	0x00050a33
     4b0:	00001615 	.word	0x00001615
     4b4:	000015a5 	.word	0x000015a5
     4b8:	2000050c 	.word	0x2000050c
     4bc:	2000028c 	.word	0x2000028c
     4c0:	2000030c 	.word	0x2000030c
     4c4:	2000040c 	.word	0x2000040c
     4c8:	2000018c 	.word	0x2000018c
     4cc:	2000058c 	.word	0x2000058c
     4d0:	04040000 	.word	0x04040000
     4d4:	2000060c 	.word	0x2000060c
     4d8:	200009cc 	.word	0x200009cc
     4dc:	2000074c 	.word	0x2000074c
     4e0:	200007cc 	.word	0x200007cc
     4e4:	200008cc 	.word	0x200008cc
     4e8:	2000064c 	.word	0x2000064c
     4ec:	20000a4c 	.word	0x20000a4c
     4f0:	20000acc 	.word	0x20000acc

000004f4 <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
     4f4:	6802      	ldr	r2, [r0, #0]
     4f6:	6993      	ldr	r3, [r2, #24]
     4f8:	2101      	movs	r1, #1
     4fa:	438b      	bics	r3, r1
     4fc:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
     4fe:	6801      	ldr	r1, [r0, #0]
     500:	2201      	movs	r2, #1
     502:	698b      	ldr	r3, [r1, #24]
     504:	421a      	tst	r2, r3
     506:	d1fc      	bne.n	502 <can_start+0xe>
}
     508:	4770      	bx	lr
	...

0000050c <can_set_rx_standard_filter>:
}

enum status_code can_set_rx_standard_filter(
		struct can_module *const module_inst,
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
     50c:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
     50e:	6803      	ldr	r3, [r0, #0]
     510:	4809      	ldr	r0, [pc, #36]	; (538 <can_set_rx_standard_filter+0x2c>)
     512:	4283      	cmp	r3, r0
     514:	d004      	beq.n	520 <can_set_rx_standard_filter+0x14>
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     516:	4c09      	ldr	r4, [pc, #36]	; (53c <can_set_rx_standard_filter+0x30>)
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     518:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     51a:	42a3      	cmp	r3, r4
     51c:	d006      	beq.n	52c <can_set_rx_standard_filter+0x20>
}
     51e:	bd10      	pop	{r4, pc}
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
     520:	6809      	ldr	r1, [r1, #0]
     522:	0092      	lsls	r2, r2, #2
     524:	4b06      	ldr	r3, [pc, #24]	; (540 <can_set_rx_standard_filter+0x34>)
     526:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     528:	2000      	movs	r0, #0
     52a:	e7f8      	b.n	51e <can_set_rx_standard_filter+0x12>
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
     52c:	6809      	ldr	r1, [r1, #0]
     52e:	0092      	lsls	r2, r2, #2
     530:	4b04      	ldr	r3, [pc, #16]	; (544 <can_set_rx_standard_filter+0x38>)
     532:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     534:	2000      	movs	r0, #0
     536:	e7f2      	b.n	51e <can_set_rx_standard_filter+0x12>
     538:	42001c00 	.word	0x42001c00
     53c:	42002000 	.word	0x42002000
     540:	2000050c 	.word	0x2000050c
     544:	200009cc 	.word	0x200009cc

00000548 <can_get_rx_buffer_element>:
}

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
     548:	b570      	push	{r4, r5, r6, lr}
     54a:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
     54c:	6803      	ldr	r3, [r0, #0]
     54e:	4c0d      	ldr	r4, [pc, #52]	; (584 <can_get_rx_buffer_element+0x3c>)
     550:	42a3      	cmp	r3, r4
     552:	d004      	beq.n	55e <can_get_rx_buffer_element+0x16>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     554:	4c0c      	ldr	r4, [pc, #48]	; (588 <can_get_rx_buffer_element+0x40>)
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     556:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     558:	42a3      	cmp	r3, r4
     55a:	d009      	beq.n	570 <can_get_rx_buffer_element+0x28>
}
     55c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
     55e:	0112      	lsls	r2, r2, #4
     560:	490a      	ldr	r1, [pc, #40]	; (58c <can_get_rx_buffer_element+0x44>)
     562:	1889      	adds	r1, r1, r2
     564:	2210      	movs	r2, #16
     566:	0028      	movs	r0, r5
     568:	4b09      	ldr	r3, [pc, #36]	; (590 <can_get_rx_buffer_element+0x48>)
     56a:	4798      	blx	r3
		return STATUS_OK;
     56c:	2000      	movs	r0, #0
     56e:	e7f5      	b.n	55c <can_get_rx_buffer_element+0x14>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
     570:	0112      	lsls	r2, r2, #4
     572:	4908      	ldr	r1, [pc, #32]	; (594 <can_get_rx_buffer_element+0x4c>)
     574:	1889      	adds	r1, r1, r2
     576:	2210      	movs	r2, #16
     578:	0028      	movs	r0, r5
     57a:	4b05      	ldr	r3, [pc, #20]	; (590 <can_get_rx_buffer_element+0x48>)
     57c:	4798      	blx	r3
		return STATUS_OK;
     57e:	2000      	movs	r0, #0
     580:	e7ec      	b.n	55c <can_get_rx_buffer_element+0x14>
     582:	46c0      	nop			; (mov r8, r8)
     584:	42001c00 	.word	0x42001c00
     588:	42002000 	.word	0x42002000
     58c:	2000018c 	.word	0x2000018c
     590:	00005b51 	.word	0x00005b51
     594:	2000064c 	.word	0x2000064c

00000598 <can_get_rx_fifo_0_element>:

enum status_code can_get_rx_fifo_0_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
     59c:	6803      	ldr	r3, [r0, #0]
     59e:	4c0d      	ldr	r4, [pc, #52]	; (5d4 <can_get_rx_fifo_0_element+0x3c>)
     5a0:	42a3      	cmp	r3, r4
     5a2:	d004      	beq.n	5ae <can_get_rx_fifo_0_element+0x16>
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     5a4:	4c0c      	ldr	r4, [pc, #48]	; (5d8 <can_get_rx_fifo_0_element+0x40>)
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     5a6:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     5a8:	42a3      	cmp	r3, r4
     5aa:	d009      	beq.n	5c0 <can_get_rx_fifo_0_element+0x28>
}
     5ac:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
     5ae:	0112      	lsls	r2, r2, #4
     5b0:	490a      	ldr	r1, [pc, #40]	; (5dc <can_get_rx_fifo_0_element+0x44>)
     5b2:	1889      	adds	r1, r1, r2
     5b4:	2210      	movs	r2, #16
     5b6:	0028      	movs	r0, r5
     5b8:	4b09      	ldr	r3, [pc, #36]	; (5e0 <can_get_rx_fifo_0_element+0x48>)
     5ba:	4798      	blx	r3
		return STATUS_OK;
     5bc:	2000      	movs	r0, #0
     5be:	e7f5      	b.n	5ac <can_get_rx_fifo_0_element+0x14>
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
     5c0:	0112      	lsls	r2, r2, #4
     5c2:	4908      	ldr	r1, [pc, #32]	; (5e4 <can_get_rx_fifo_0_element+0x4c>)
     5c4:	1889      	adds	r1, r1, r2
     5c6:	2210      	movs	r2, #16
     5c8:	0028      	movs	r0, r5
     5ca:	4b05      	ldr	r3, [pc, #20]	; (5e0 <can_get_rx_fifo_0_element+0x48>)
     5cc:	4798      	blx	r3
		return STATUS_OK;
     5ce:	2000      	movs	r0, #0
     5d0:	e7ec      	b.n	5ac <can_get_rx_fifo_0_element+0x14>
     5d2:	46c0      	nop			; (mov r8, r8)
     5d4:	42001c00 	.word	0x42001c00
     5d8:	42002000 	.word	0x42002000
     5dc:	2000030c 	.word	0x2000030c
     5e0:	00005b51 	.word	0x00005b51
     5e4:	200007cc 	.word	0x200007cc

000005e8 <can_set_tx_buffer_element>:
}

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
     5e8:	b510      	push	{r4, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
     5ea:	6803      	ldr	r3, [r0, #0]
     5ec:	4817      	ldr	r0, [pc, #92]	; (64c <can_set_tx_buffer_element+0x64>)
     5ee:	4283      	cmp	r3, r0
     5f0:	d004      	beq.n	5fc <can_set_tx_buffer_element+0x14>
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
     5f2:	4c17      	ldr	r4, [pc, #92]	; (650 <can_set_tx_buffer_element+0x68>)
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
     5f4:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
     5f6:	42a3      	cmp	r3, r4
     5f8:	d014      	beq.n	624 <can_set_tx_buffer_element+0x3c>
}
     5fa:	bd10      	pop	{r4, pc}
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
     5fc:	680b      	ldr	r3, [r1, #0]
     5fe:	4815      	ldr	r0, [pc, #84]	; (654 <can_set_tx_buffer_element+0x6c>)
     600:	0112      	lsls	r2, r2, #4
     602:	5013      	str	r3, [r2, r0]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
     604:	684c      	ldr	r4, [r1, #4]
     606:	1883      	adds	r3, r0, r2
     608:	605c      	str	r4, [r3, #4]
     60a:	000b      	movs	r3, r1
     60c:	3308      	adds	r3, #8
     60e:	3208      	adds	r2, #8
     610:	1882      	adds	r2, r0, r2
     612:	3110      	adds	r1, #16
			can0_tx_buffer[index].data[i] = tx_element->data[i];
     614:	7818      	ldrb	r0, [r3, #0]
     616:	7010      	strb	r0, [r2, #0]
     618:	3301      	adds	r3, #1
     61a:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     61c:	428b      	cmp	r3, r1
     61e:	d1f9      	bne.n	614 <can_set_tx_buffer_element+0x2c>
		return STATUS_OK;
     620:	2000      	movs	r0, #0
     622:	e7ea      	b.n	5fa <can_set_tx_buffer_element+0x12>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
     624:	680b      	ldr	r3, [r1, #0]
     626:	480c      	ldr	r0, [pc, #48]	; (658 <can_set_tx_buffer_element+0x70>)
     628:	0112      	lsls	r2, r2, #4
     62a:	5013      	str	r3, [r2, r0]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
     62c:	684c      	ldr	r4, [r1, #4]
     62e:	1883      	adds	r3, r0, r2
     630:	605c      	str	r4, [r3, #4]
     632:	000b      	movs	r3, r1
     634:	3308      	adds	r3, #8
     636:	3208      	adds	r2, #8
     638:	1882      	adds	r2, r0, r2
     63a:	3110      	adds	r1, #16
			can1_tx_buffer[index].data[i] = tx_element->data[i];
     63c:	7818      	ldrb	r0, [r3, #0]
     63e:	7010      	strb	r0, [r2, #0]
     640:	3301      	adds	r3, #1
     642:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     644:	428b      	cmp	r3, r1
     646:	d1f9      	bne.n	63c <can_set_tx_buffer_element+0x54>
		return STATUS_OK;
     648:	2000      	movs	r0, #0
     64a:	e7d6      	b.n	5fa <can_set_tx_buffer_element+0x12>
     64c:	42001c00 	.word	0x42001c00
     650:	42002000 	.word	0x42002000
     654:	2000058c 	.word	0x2000058c
     658:	20000a4c 	.word	0x20000a4c

0000065c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     65c:	b500      	push	{lr}
     65e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     660:	ab01      	add	r3, sp, #4
     662:	2280      	movs	r2, #128	; 0x80
     664:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     666:	780a      	ldrb	r2, [r1, #0]
     668:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     66a:	784a      	ldrb	r2, [r1, #1]
     66c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     66e:	788a      	ldrb	r2, [r1, #2]
     670:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     672:	0019      	movs	r1, r3
     674:	4b01      	ldr	r3, [pc, #4]	; (67c <port_pin_set_config+0x20>)
     676:	4798      	blx	r3
}
     678:	b003      	add	sp, #12
     67a:	bd00      	pop	{pc}
     67c:	00001711 	.word	0x00001711

00000680 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     680:	b5f0      	push	{r4, r5, r6, r7, lr}
     682:	46de      	mov	lr, fp
     684:	4657      	mov	r7, sl
     686:	464e      	mov	r6, r9
     688:	4645      	mov	r5, r8
     68a:	b5e0      	push	{r5, r6, r7, lr}
     68c:	b087      	sub	sp, #28
     68e:	4680      	mov	r8, r0
     690:	9104      	str	r1, [sp, #16]
     692:	0016      	movs	r6, r2
     694:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     696:	2200      	movs	r2, #0
     698:	2300      	movs	r3, #0
     69a:	2100      	movs	r1, #0
     69c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     69e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     6a0:	2001      	movs	r0, #1
     6a2:	0021      	movs	r1, r4
     6a4:	9600      	str	r6, [sp, #0]
     6a6:	9701      	str	r7, [sp, #4]
     6a8:	465c      	mov	r4, fp
     6aa:	9403      	str	r4, [sp, #12]
     6ac:	4644      	mov	r4, r8
     6ae:	9405      	str	r4, [sp, #20]
     6b0:	e013      	b.n	6da <long_division+0x5a>
     6b2:	2420      	movs	r4, #32
     6b4:	1a64      	subs	r4, r4, r1
     6b6:	0005      	movs	r5, r0
     6b8:	40e5      	lsrs	r5, r4
     6ba:	46a8      	mov	r8, r5
     6bc:	e014      	b.n	6e8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     6be:	9c00      	ldr	r4, [sp, #0]
     6c0:	9d01      	ldr	r5, [sp, #4]
     6c2:	1b12      	subs	r2, r2, r4
     6c4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     6c6:	465c      	mov	r4, fp
     6c8:	464d      	mov	r5, r9
     6ca:	432c      	orrs	r4, r5
     6cc:	46a3      	mov	fp, r4
     6ce:	9c03      	ldr	r4, [sp, #12]
     6d0:	4645      	mov	r5, r8
     6d2:	432c      	orrs	r4, r5
     6d4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     6d6:	3901      	subs	r1, #1
     6d8:	d325      	bcc.n	726 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     6da:	2420      	movs	r4, #32
     6dc:	4264      	negs	r4, r4
     6de:	190c      	adds	r4, r1, r4
     6e0:	d4e7      	bmi.n	6b2 <long_division+0x32>
     6e2:	0005      	movs	r5, r0
     6e4:	40a5      	lsls	r5, r4
     6e6:	46a8      	mov	r8, r5
     6e8:	0004      	movs	r4, r0
     6ea:	408c      	lsls	r4, r1
     6ec:	46a1      	mov	r9, r4
		r = r << 1;
     6ee:	1892      	adds	r2, r2, r2
     6f0:	415b      	adcs	r3, r3
     6f2:	0014      	movs	r4, r2
     6f4:	001d      	movs	r5, r3
		if (n & bit_shift) {
     6f6:	9e05      	ldr	r6, [sp, #20]
     6f8:	464f      	mov	r7, r9
     6fa:	403e      	ands	r6, r7
     6fc:	46b4      	mov	ip, r6
     6fe:	9e04      	ldr	r6, [sp, #16]
     700:	4647      	mov	r7, r8
     702:	403e      	ands	r6, r7
     704:	46b2      	mov	sl, r6
     706:	4666      	mov	r6, ip
     708:	4657      	mov	r7, sl
     70a:	433e      	orrs	r6, r7
     70c:	d003      	beq.n	716 <long_division+0x96>
			r |= 0x01;
     70e:	0006      	movs	r6, r0
     710:	4326      	orrs	r6, r4
     712:	0032      	movs	r2, r6
     714:	002b      	movs	r3, r5
		if (r >= d) {
     716:	9c00      	ldr	r4, [sp, #0]
     718:	9d01      	ldr	r5, [sp, #4]
     71a:	429d      	cmp	r5, r3
     71c:	d8db      	bhi.n	6d6 <long_division+0x56>
     71e:	d1ce      	bne.n	6be <long_division+0x3e>
     720:	4294      	cmp	r4, r2
     722:	d8d8      	bhi.n	6d6 <long_division+0x56>
     724:	e7cb      	b.n	6be <long_division+0x3e>
     726:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     728:	4658      	mov	r0, fp
     72a:	0019      	movs	r1, r3
     72c:	b007      	add	sp, #28
     72e:	bc3c      	pop	{r2, r3, r4, r5}
     730:	4690      	mov	r8, r2
     732:	4699      	mov	r9, r3
     734:	46a2      	mov	sl, r4
     736:	46ab      	mov	fp, r5
     738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000073a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     73a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     73c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     73e:	2340      	movs	r3, #64	; 0x40
     740:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     742:	4281      	cmp	r1, r0
     744:	d202      	bcs.n	74c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     746:	0018      	movs	r0, r3
     748:	bd10      	pop	{r4, pc}
		baud_calculated++;
     74a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     74c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     74e:	1c63      	adds	r3, r4, #1
     750:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     752:	4288      	cmp	r0, r1
     754:	d9f9      	bls.n	74a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     756:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     758:	2cff      	cmp	r4, #255	; 0xff
     75a:	d8f4      	bhi.n	746 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     75c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     75e:	2300      	movs	r3, #0
     760:	e7f1      	b.n	746 <_sercom_get_sync_baud_val+0xc>
	...

00000764 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     764:	b5f0      	push	{r4, r5, r6, r7, lr}
     766:	b083      	sub	sp, #12
     768:	000f      	movs	r7, r1
     76a:	0016      	movs	r6, r2
     76c:	aa08      	add	r2, sp, #32
     76e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     770:	0004      	movs	r4, r0
     772:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     774:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     776:	42bc      	cmp	r4, r7
     778:	d902      	bls.n	780 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     77a:	0010      	movs	r0, r2
     77c:	b003      	add	sp, #12
     77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     780:	2b00      	cmp	r3, #0
     782:	d114      	bne.n	7ae <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     784:	0002      	movs	r2, r0
     786:	0008      	movs	r0, r1
     788:	2100      	movs	r1, #0
     78a:	4c19      	ldr	r4, [pc, #100]	; (7f0 <_sercom_get_async_baud_val+0x8c>)
     78c:	47a0      	blx	r4
     78e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     790:	003a      	movs	r2, r7
     792:	2300      	movs	r3, #0
     794:	2000      	movs	r0, #0
     796:	4c17      	ldr	r4, [pc, #92]	; (7f4 <_sercom_get_async_baud_val+0x90>)
     798:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     79a:	2200      	movs	r2, #0
     79c:	2301      	movs	r3, #1
     79e:	1a12      	subs	r2, r2, r0
     7a0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     7a2:	0c12      	lsrs	r2, r2, #16
     7a4:	041b      	lsls	r3, r3, #16
     7a6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     7a8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     7aa:	2200      	movs	r2, #0
     7ac:	e7e5      	b.n	77a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     7ae:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     7b0:	2b01      	cmp	r3, #1
     7b2:	d1f9      	bne.n	7a8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     7b4:	000a      	movs	r2, r1
     7b6:	2300      	movs	r3, #0
     7b8:	2100      	movs	r1, #0
     7ba:	4c0d      	ldr	r4, [pc, #52]	; (7f0 <_sercom_get_async_baud_val+0x8c>)
     7bc:	47a0      	blx	r4
     7be:	0002      	movs	r2, r0
     7c0:	000b      	movs	r3, r1
     7c2:	9200      	str	r2, [sp, #0]
     7c4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     7c6:	0038      	movs	r0, r7
     7c8:	2100      	movs	r1, #0
     7ca:	4c0a      	ldr	r4, [pc, #40]	; (7f4 <_sercom_get_async_baud_val+0x90>)
     7cc:	47a0      	blx	r4
     7ce:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     7d0:	2380      	movs	r3, #128	; 0x80
     7d2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7d4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     7d6:	4298      	cmp	r0, r3
     7d8:	d8cf      	bhi.n	77a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     7da:	0f79      	lsrs	r1, r7, #29
     7dc:	00f8      	lsls	r0, r7, #3
     7de:	9a00      	ldr	r2, [sp, #0]
     7e0:	9b01      	ldr	r3, [sp, #4]
     7e2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     7e4:	00ea      	lsls	r2, r5, #3
     7e6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     7e8:	b2d2      	uxtb	r2, r2
     7ea:	0352      	lsls	r2, r2, #13
     7ec:	432a      	orrs	r2, r5
     7ee:	e7db      	b.n	7a8 <_sercom_get_async_baud_val+0x44>
     7f0:	00005aa1 	.word	0x00005aa1
     7f4:	00000681 	.word	0x00000681

000007f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     7f8:	b510      	push	{r4, lr}
     7fa:	b082      	sub	sp, #8
     7fc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     7fe:	4b0e      	ldr	r3, [pc, #56]	; (838 <sercom_set_gclk_generator+0x40>)
     800:	781b      	ldrb	r3, [r3, #0]
     802:	2b00      	cmp	r3, #0
     804:	d007      	beq.n	816 <sercom_set_gclk_generator+0x1e>
     806:	2900      	cmp	r1, #0
     808:	d105      	bne.n	816 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     80a:	4b0b      	ldr	r3, [pc, #44]	; (838 <sercom_set_gclk_generator+0x40>)
     80c:	785b      	ldrb	r3, [r3, #1]
     80e:	4283      	cmp	r3, r0
     810:	d010      	beq.n	834 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     812:	201d      	movs	r0, #29
     814:	e00c      	b.n	830 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     816:	a901      	add	r1, sp, #4
     818:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     81a:	2012      	movs	r0, #18
     81c:	4b07      	ldr	r3, [pc, #28]	; (83c <sercom_set_gclk_generator+0x44>)
     81e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     820:	2012      	movs	r0, #18
     822:	4b07      	ldr	r3, [pc, #28]	; (840 <sercom_set_gclk_generator+0x48>)
     824:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     826:	4b04      	ldr	r3, [pc, #16]	; (838 <sercom_set_gclk_generator+0x40>)
     828:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     82a:	2201      	movs	r2, #1
     82c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     82e:	2000      	movs	r0, #0
}
     830:	b002      	add	sp, #8
     832:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     834:	2000      	movs	r0, #0
     836:	e7fb      	b.n	830 <sercom_set_gclk_generator+0x38>
     838:	20000b0c 	.word	0x20000b0c
     83c:	00001615 	.word	0x00001615
     840:	000015a5 	.word	0x000015a5

00000844 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     844:	4b40      	ldr	r3, [pc, #256]	; (948 <_sercom_get_default_pad+0x104>)
     846:	4298      	cmp	r0, r3
     848:	d031      	beq.n	8ae <_sercom_get_default_pad+0x6a>
     84a:	d90a      	bls.n	862 <_sercom_get_default_pad+0x1e>
     84c:	4b3f      	ldr	r3, [pc, #252]	; (94c <_sercom_get_default_pad+0x108>)
     84e:	4298      	cmp	r0, r3
     850:	d04d      	beq.n	8ee <_sercom_get_default_pad+0xaa>
     852:	4b3f      	ldr	r3, [pc, #252]	; (950 <_sercom_get_default_pad+0x10c>)
     854:	4298      	cmp	r0, r3
     856:	d05a      	beq.n	90e <_sercom_get_default_pad+0xca>
     858:	4b3e      	ldr	r3, [pc, #248]	; (954 <_sercom_get_default_pad+0x110>)
     85a:	4298      	cmp	r0, r3
     85c:	d037      	beq.n	8ce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     85e:	2000      	movs	r0, #0
}
     860:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     862:	4b3d      	ldr	r3, [pc, #244]	; (958 <_sercom_get_default_pad+0x114>)
     864:	4298      	cmp	r0, r3
     866:	d00c      	beq.n	882 <_sercom_get_default_pad+0x3e>
     868:	4b3c      	ldr	r3, [pc, #240]	; (95c <_sercom_get_default_pad+0x118>)
     86a:	4298      	cmp	r0, r3
     86c:	d1f7      	bne.n	85e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     86e:	2901      	cmp	r1, #1
     870:	d017      	beq.n	8a2 <_sercom_get_default_pad+0x5e>
     872:	2900      	cmp	r1, #0
     874:	d05d      	beq.n	932 <_sercom_get_default_pad+0xee>
     876:	2902      	cmp	r1, #2
     878:	d015      	beq.n	8a6 <_sercom_get_default_pad+0x62>
     87a:	2903      	cmp	r1, #3
     87c:	d015      	beq.n	8aa <_sercom_get_default_pad+0x66>
	return 0;
     87e:	2000      	movs	r0, #0
     880:	e7ee      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     882:	2901      	cmp	r1, #1
     884:	d007      	beq.n	896 <_sercom_get_default_pad+0x52>
     886:	2900      	cmp	r1, #0
     888:	d051      	beq.n	92e <_sercom_get_default_pad+0xea>
     88a:	2902      	cmp	r1, #2
     88c:	d005      	beq.n	89a <_sercom_get_default_pad+0x56>
     88e:	2903      	cmp	r1, #3
     890:	d005      	beq.n	89e <_sercom_get_default_pad+0x5a>
	return 0;
     892:	2000      	movs	r0, #0
     894:	e7e4      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     896:	4832      	ldr	r0, [pc, #200]	; (960 <_sercom_get_default_pad+0x11c>)
     898:	e7e2      	b.n	860 <_sercom_get_default_pad+0x1c>
     89a:	4832      	ldr	r0, [pc, #200]	; (964 <_sercom_get_default_pad+0x120>)
     89c:	e7e0      	b.n	860 <_sercom_get_default_pad+0x1c>
     89e:	4832      	ldr	r0, [pc, #200]	; (968 <_sercom_get_default_pad+0x124>)
     8a0:	e7de      	b.n	860 <_sercom_get_default_pad+0x1c>
     8a2:	4832      	ldr	r0, [pc, #200]	; (96c <_sercom_get_default_pad+0x128>)
     8a4:	e7dc      	b.n	860 <_sercom_get_default_pad+0x1c>
     8a6:	4832      	ldr	r0, [pc, #200]	; (970 <_sercom_get_default_pad+0x12c>)
     8a8:	e7da      	b.n	860 <_sercom_get_default_pad+0x1c>
     8aa:	4832      	ldr	r0, [pc, #200]	; (974 <_sercom_get_default_pad+0x130>)
     8ac:	e7d8      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ae:	2901      	cmp	r1, #1
     8b0:	d007      	beq.n	8c2 <_sercom_get_default_pad+0x7e>
     8b2:	2900      	cmp	r1, #0
     8b4:	d03f      	beq.n	936 <_sercom_get_default_pad+0xf2>
     8b6:	2902      	cmp	r1, #2
     8b8:	d005      	beq.n	8c6 <_sercom_get_default_pad+0x82>
     8ba:	2903      	cmp	r1, #3
     8bc:	d005      	beq.n	8ca <_sercom_get_default_pad+0x86>
	return 0;
     8be:	2000      	movs	r0, #0
     8c0:	e7ce      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8c2:	482d      	ldr	r0, [pc, #180]	; (978 <_sercom_get_default_pad+0x134>)
     8c4:	e7cc      	b.n	860 <_sercom_get_default_pad+0x1c>
     8c6:	482d      	ldr	r0, [pc, #180]	; (97c <_sercom_get_default_pad+0x138>)
     8c8:	e7ca      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ca:	482d      	ldr	r0, [pc, #180]	; (980 <_sercom_get_default_pad+0x13c>)
     8cc:	e7c8      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ce:	2901      	cmp	r1, #1
     8d0:	d007      	beq.n	8e2 <_sercom_get_default_pad+0x9e>
     8d2:	2900      	cmp	r1, #0
     8d4:	d031      	beq.n	93a <_sercom_get_default_pad+0xf6>
     8d6:	2902      	cmp	r1, #2
     8d8:	d005      	beq.n	8e6 <_sercom_get_default_pad+0xa2>
     8da:	2903      	cmp	r1, #3
     8dc:	d005      	beq.n	8ea <_sercom_get_default_pad+0xa6>
	return 0;
     8de:	2000      	movs	r0, #0
     8e0:	e7be      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e2:	4828      	ldr	r0, [pc, #160]	; (984 <_sercom_get_default_pad+0x140>)
     8e4:	e7bc      	b.n	860 <_sercom_get_default_pad+0x1c>
     8e6:	4828      	ldr	r0, [pc, #160]	; (988 <_sercom_get_default_pad+0x144>)
     8e8:	e7ba      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ea:	4828      	ldr	r0, [pc, #160]	; (98c <_sercom_get_default_pad+0x148>)
     8ec:	e7b8      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ee:	2901      	cmp	r1, #1
     8f0:	d007      	beq.n	902 <_sercom_get_default_pad+0xbe>
     8f2:	2900      	cmp	r1, #0
     8f4:	d023      	beq.n	93e <_sercom_get_default_pad+0xfa>
     8f6:	2902      	cmp	r1, #2
     8f8:	d005      	beq.n	906 <_sercom_get_default_pad+0xc2>
     8fa:	2903      	cmp	r1, #3
     8fc:	d005      	beq.n	90a <_sercom_get_default_pad+0xc6>
	return 0;
     8fe:	2000      	movs	r0, #0
     900:	e7ae      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     902:	4823      	ldr	r0, [pc, #140]	; (990 <_sercom_get_default_pad+0x14c>)
     904:	e7ac      	b.n	860 <_sercom_get_default_pad+0x1c>
     906:	4823      	ldr	r0, [pc, #140]	; (994 <_sercom_get_default_pad+0x150>)
     908:	e7aa      	b.n	860 <_sercom_get_default_pad+0x1c>
     90a:	4823      	ldr	r0, [pc, #140]	; (998 <_sercom_get_default_pad+0x154>)
     90c:	e7a8      	b.n	860 <_sercom_get_default_pad+0x1c>
     90e:	2901      	cmp	r1, #1
     910:	d007      	beq.n	922 <_sercom_get_default_pad+0xde>
     912:	2900      	cmp	r1, #0
     914:	d015      	beq.n	942 <_sercom_get_default_pad+0xfe>
     916:	2902      	cmp	r1, #2
     918:	d005      	beq.n	926 <_sercom_get_default_pad+0xe2>
     91a:	2903      	cmp	r1, #3
     91c:	d005      	beq.n	92a <_sercom_get_default_pad+0xe6>
	return 0;
     91e:	2000      	movs	r0, #0
     920:	e79e      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     922:	481e      	ldr	r0, [pc, #120]	; (99c <_sercom_get_default_pad+0x158>)
     924:	e79c      	b.n	860 <_sercom_get_default_pad+0x1c>
     926:	481e      	ldr	r0, [pc, #120]	; (9a0 <_sercom_get_default_pad+0x15c>)
     928:	e79a      	b.n	860 <_sercom_get_default_pad+0x1c>
     92a:	481e      	ldr	r0, [pc, #120]	; (9a4 <_sercom_get_default_pad+0x160>)
     92c:	e798      	b.n	860 <_sercom_get_default_pad+0x1c>
     92e:	481e      	ldr	r0, [pc, #120]	; (9a8 <_sercom_get_default_pad+0x164>)
     930:	e796      	b.n	860 <_sercom_get_default_pad+0x1c>
     932:	481e      	ldr	r0, [pc, #120]	; (9ac <_sercom_get_default_pad+0x168>)
     934:	e794      	b.n	860 <_sercom_get_default_pad+0x1c>
     936:	481e      	ldr	r0, [pc, #120]	; (9b0 <_sercom_get_default_pad+0x16c>)
     938:	e792      	b.n	860 <_sercom_get_default_pad+0x1c>
     93a:	481e      	ldr	r0, [pc, #120]	; (9b4 <_sercom_get_default_pad+0x170>)
     93c:	e790      	b.n	860 <_sercom_get_default_pad+0x1c>
     93e:	481e      	ldr	r0, [pc, #120]	; (9b8 <_sercom_get_default_pad+0x174>)
     940:	e78e      	b.n	860 <_sercom_get_default_pad+0x1c>
     942:	481e      	ldr	r0, [pc, #120]	; (9bc <_sercom_get_default_pad+0x178>)
     944:	e78c      	b.n	860 <_sercom_get_default_pad+0x1c>
     946:	46c0      	nop			; (mov r8, r8)
     948:	42000c00 	.word	0x42000c00
     94c:	42001400 	.word	0x42001400
     950:	42001800 	.word	0x42001800
     954:	42001000 	.word	0x42001000
     958:	42000400 	.word	0x42000400
     95c:	42000800 	.word	0x42000800
     960:	00050003 	.word	0x00050003
     964:	00060003 	.word	0x00060003
     968:	00070003 	.word	0x00070003
     96c:	00110002 	.word	0x00110002
     970:	00120002 	.word	0x00120002
     974:	00130002 	.word	0x00130002
     978:	000d0002 	.word	0x000d0002
     97c:	000e0002 	.word	0x000e0002
     980:	000f0002 	.word	0x000f0002
     984:	00170002 	.word	0x00170002
     988:	00180002 	.word	0x00180002
     98c:	00190002 	.word	0x00190002
     990:	00290003 	.word	0x00290003
     994:	002a0003 	.word	0x002a0003
     998:	002b0003 	.word	0x002b0003
     99c:	00230003 	.word	0x00230003
     9a0:	00200003 	.word	0x00200003
     9a4:	00210003 	.word	0x00210003
     9a8:	00040003 	.word	0x00040003
     9ac:	00100002 	.word	0x00100002
     9b0:	000c0002 	.word	0x000c0002
     9b4:	00160002 	.word	0x00160002
     9b8:	00280003 	.word	0x00280003
     9bc:	00220003 	.word	0x00220003

000009c0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     9c0:	b530      	push	{r4, r5, lr}
     9c2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     9c4:	4b0b      	ldr	r3, [pc, #44]	; (9f4 <_sercom_get_sercom_inst_index+0x34>)
     9c6:	466a      	mov	r2, sp
     9c8:	cb32      	ldmia	r3!, {r1, r4, r5}
     9ca:	c232      	stmia	r2!, {r1, r4, r5}
     9cc:	cb32      	ldmia	r3!, {r1, r4, r5}
     9ce:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     9d0:	9b00      	ldr	r3, [sp, #0]
     9d2:	4283      	cmp	r3, r0
     9d4:	d00b      	beq.n	9ee <_sercom_get_sercom_inst_index+0x2e>
     9d6:	2301      	movs	r3, #1
     9d8:	009a      	lsls	r2, r3, #2
     9da:	4669      	mov	r1, sp
     9dc:	5852      	ldr	r2, [r2, r1]
     9de:	4282      	cmp	r2, r0
     9e0:	d006      	beq.n	9f0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9e2:	3301      	adds	r3, #1
     9e4:	2b06      	cmp	r3, #6
     9e6:	d1f7      	bne.n	9d8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     9e8:	2000      	movs	r0, #0
}
     9ea:	b007      	add	sp, #28
     9ec:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9ee:	2300      	movs	r3, #0
			return i;
     9f0:	b2d8      	uxtb	r0, r3
     9f2:	e7fa      	b.n	9ea <_sercom_get_sercom_inst_index+0x2a>
     9f4:	00006c3c 	.word	0x00006c3c

000009f8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     9f8:	4770      	bx	lr
	...

000009fc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     9fe:	4b0a      	ldr	r3, [pc, #40]	; (a28 <_sercom_set_handler+0x2c>)
     a00:	781b      	ldrb	r3, [r3, #0]
     a02:	2b00      	cmp	r3, #0
     a04:	d10c      	bne.n	a20 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a06:	4f09      	ldr	r7, [pc, #36]	; (a2c <_sercom_set_handler+0x30>)
     a08:	4e09      	ldr	r6, [pc, #36]	; (a30 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     a0a:	4d0a      	ldr	r5, [pc, #40]	; (a34 <_sercom_set_handler+0x38>)
     a0c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a0e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     a10:	195a      	adds	r2, r3, r5
     a12:	6014      	str	r4, [r2, #0]
     a14:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a16:	2b18      	cmp	r3, #24
     a18:	d1f9      	bne.n	a0e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     a1a:	2201      	movs	r2, #1
     a1c:	4b02      	ldr	r3, [pc, #8]	; (a28 <_sercom_set_handler+0x2c>)
     a1e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     a20:	0080      	lsls	r0, r0, #2
     a22:	4b02      	ldr	r3, [pc, #8]	; (a2c <_sercom_set_handler+0x30>)
     a24:	50c1      	str	r1, [r0, r3]
}
     a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a28:	20000b0e 	.word	0x20000b0e
     a2c:	20000b10 	.word	0x20000b10
     a30:	000009f9 	.word	0x000009f9
     a34:	20000bc0 	.word	0x20000bc0

00000a38 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     a38:	b500      	push	{lr}
     a3a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     a3c:	2309      	movs	r3, #9
     a3e:	466a      	mov	r2, sp
     a40:	7013      	strb	r3, [r2, #0]
     a42:	3301      	adds	r3, #1
     a44:	7053      	strb	r3, [r2, #1]
     a46:	3301      	adds	r3, #1
     a48:	7093      	strb	r3, [r2, #2]
     a4a:	3301      	adds	r3, #1
     a4c:	70d3      	strb	r3, [r2, #3]
     a4e:	3301      	adds	r3, #1
     a50:	7113      	strb	r3, [r2, #4]
     a52:	3301      	adds	r3, #1
     a54:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     a56:	4b03      	ldr	r3, [pc, #12]	; (a64 <_sercom_get_interrupt_vector+0x2c>)
     a58:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     a5a:	466b      	mov	r3, sp
     a5c:	5618      	ldrsb	r0, [r3, r0]
}
     a5e:	b003      	add	sp, #12
     a60:	bd00      	pop	{pc}
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	000009c1 	.word	0x000009c1

00000a68 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     a68:	b510      	push	{r4, lr}
     a6a:	4b02      	ldr	r3, [pc, #8]	; (a74 <SERCOM0_Handler+0xc>)
     a6c:	681b      	ldr	r3, [r3, #0]
     a6e:	2000      	movs	r0, #0
     a70:	4798      	blx	r3
     a72:	bd10      	pop	{r4, pc}
     a74:	20000b10 	.word	0x20000b10

00000a78 <SERCOM1_Handler>:
     a78:	b510      	push	{r4, lr}
     a7a:	4b02      	ldr	r3, [pc, #8]	; (a84 <SERCOM1_Handler+0xc>)
     a7c:	685b      	ldr	r3, [r3, #4]
     a7e:	2001      	movs	r0, #1
     a80:	4798      	blx	r3
     a82:	bd10      	pop	{r4, pc}
     a84:	20000b10 	.word	0x20000b10

00000a88 <SERCOM2_Handler>:
     a88:	b510      	push	{r4, lr}
     a8a:	4b02      	ldr	r3, [pc, #8]	; (a94 <SERCOM2_Handler+0xc>)
     a8c:	689b      	ldr	r3, [r3, #8]
     a8e:	2002      	movs	r0, #2
     a90:	4798      	blx	r3
     a92:	bd10      	pop	{r4, pc}
     a94:	20000b10 	.word	0x20000b10

00000a98 <SERCOM3_Handler>:
     a98:	b510      	push	{r4, lr}
     a9a:	4b02      	ldr	r3, [pc, #8]	; (aa4 <SERCOM3_Handler+0xc>)
     a9c:	68db      	ldr	r3, [r3, #12]
     a9e:	2003      	movs	r0, #3
     aa0:	4798      	blx	r3
     aa2:	bd10      	pop	{r4, pc}
     aa4:	20000b10 	.word	0x20000b10

00000aa8 <SERCOM4_Handler>:
     aa8:	b510      	push	{r4, lr}
     aaa:	4b02      	ldr	r3, [pc, #8]	; (ab4 <SERCOM4_Handler+0xc>)
     aac:	691b      	ldr	r3, [r3, #16]
     aae:	2004      	movs	r0, #4
     ab0:	4798      	blx	r3
     ab2:	bd10      	pop	{r4, pc}
     ab4:	20000b10 	.word	0x20000b10

00000ab8 <SERCOM5_Handler>:
     ab8:	b510      	push	{r4, lr}
     aba:	4b02      	ldr	r3, [pc, #8]	; (ac4 <SERCOM5_Handler+0xc>)
     abc:	695b      	ldr	r3, [r3, #20]
     abe:	2005      	movs	r0, #5
     ac0:	4798      	blx	r3
     ac2:	bd10      	pop	{r4, pc}
     ac4:	20000b10 	.word	0x20000b10

00000ac8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aca:	46de      	mov	lr, fp
     acc:	4657      	mov	r7, sl
     ace:	464e      	mov	r6, r9
     ad0:	4645      	mov	r5, r8
     ad2:	b5e0      	push	{r5, r6, r7, lr}
     ad4:	b091      	sub	sp, #68	; 0x44
     ad6:	0005      	movs	r5, r0
     ad8:	000c      	movs	r4, r1
     ada:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     adc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ade:	0008      	movs	r0, r1
     ae0:	4bd2      	ldr	r3, [pc, #840]	; (e2c <usart_init+0x364>)
     ae2:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
     ae4:	2805      	cmp	r0, #5
     ae6:	d00d      	beq.n	b04 <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
     ae8:	0007      	movs	r7, r0
     aea:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     aec:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     aee:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     af0:	07d2      	lsls	r2, r2, #31
     af2:	d509      	bpl.n	b08 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     af4:	0018      	movs	r0, r3
     af6:	b011      	add	sp, #68	; 0x44
     af8:	bc3c      	pop	{r2, r3, r4, r5}
     afa:	4690      	mov	r8, r2
     afc:	4699      	mov	r9, r3
     afe:	46a2      	mov	sl, r4
     b00:	46ab      	mov	fp, r5
     b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
     b04:	2719      	movs	r7, #25
     b06:	e7f1      	b.n	aec <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b08:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     b0a:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b0c:	0792      	lsls	r2, r2, #30
     b0e:	d4f1      	bmi.n	af4 <usart_init+0x2c>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     b10:	4ac7      	ldr	r2, [pc, #796]	; (e30 <usart_init+0x368>)
     b12:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     b14:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b16:	3b1b      	subs	r3, #27
     b18:	4083      	lsls	r3, r0
     b1a:	430b      	orrs	r3, r1
     b1c:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
     b1e:	a90f      	add	r1, sp, #60	; 0x3c
     b20:	2335      	movs	r3, #53	; 0x35
     b22:	4698      	mov	r8, r3
     b24:	5cf3      	ldrb	r3, [r6, r3]
     b26:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b28:	b2ff      	uxtb	r7, r7
     b2a:	0038      	movs	r0, r7
     b2c:	4bc1      	ldr	r3, [pc, #772]	; (e34 <usart_init+0x36c>)
     b2e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b30:	0038      	movs	r0, r7
     b32:	4bc1      	ldr	r3, [pc, #772]	; (e38 <usart_init+0x370>)
     b34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b36:	4643      	mov	r3, r8
     b38:	5cf0      	ldrb	r0, [r6, r3]
     b3a:	2100      	movs	r1, #0
     b3c:	4bbf      	ldr	r3, [pc, #764]	; (e3c <usart_init+0x374>)
     b3e:	4798      	blx	r3
	module->character_size = config->character_size;
     b40:	7af3      	ldrb	r3, [r6, #11]
     b42:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     b44:	232c      	movs	r3, #44	; 0x2c
     b46:	5cf3      	ldrb	r3, [r6, r3]
     b48:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     b4a:	232d      	movs	r3, #45	; 0x2d
     b4c:	5cf3      	ldrb	r3, [r6, r3]
     b4e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     b50:	7ef3      	ldrb	r3, [r6, #27]
     b52:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b54:	2324      	movs	r3, #36	; 0x24
     b56:	5cf3      	ldrb	r3, [r6, r3]
     b58:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b5a:	682b      	ldr	r3, [r5, #0]
     b5c:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b5e:	0018      	movs	r0, r3
     b60:	4bb2      	ldr	r3, [pc, #712]	; (e2c <usart_init+0x364>)
     b62:	4798      	blx	r3
	if (sercom_index == 5) {
     b64:	2805      	cmp	r0, #5
     b66:	d01d      	beq.n	ba4 <usart_init+0xdc>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b68:	3013      	adds	r0, #19
	uint16_t baud  = 0;
     b6a:	2200      	movs	r2, #0
     b6c:	230e      	movs	r3, #14
     b6e:	a906      	add	r1, sp, #24
     b70:	468c      	mov	ip, r1
     b72:	4463      	add	r3, ip
     b74:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     b76:	8a33      	ldrh	r3, [r6, #16]
     b78:	4698      	mov	r8, r3
     b7a:	2380      	movs	r3, #128	; 0x80
     b7c:	01db      	lsls	r3, r3, #7
     b7e:	4598      	cmp	r8, r3
     b80:	d100      	bne.n	b84 <usart_init+0xbc>
     b82:	e0c3      	b.n	d0c <usart_init+0x244>
     b84:	d910      	bls.n	ba8 <usart_init+0xe0>
     b86:	23c0      	movs	r3, #192	; 0xc0
     b88:	01db      	lsls	r3, r3, #7
     b8a:	4598      	cmp	r8, r3
     b8c:	d100      	bne.n	b90 <usart_init+0xc8>
     b8e:	e0b8      	b.n	d02 <usart_init+0x23a>
     b90:	2380      	movs	r3, #128	; 0x80
     b92:	021b      	lsls	r3, r3, #8
     b94:	4598      	cmp	r8, r3
     b96:	d000      	beq.n	b9a <usart_init+0xd2>
     b98:	e166      	b.n	e68 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     b9a:	2303      	movs	r3, #3
     b9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b9e:	2300      	movs	r3, #0
     ba0:	9307      	str	r3, [sp, #28]
     ba2:	e00a      	b.n	bba <usart_init+0xf2>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     ba4:	2019      	movs	r0, #25
     ba6:	e7e0      	b.n	b6a <usart_init+0xa2>
	switch (config->sample_rate) {
     ba8:	2380      	movs	r3, #128	; 0x80
     baa:	019b      	lsls	r3, r3, #6
     bac:	4598      	cmp	r8, r3
     bae:	d000      	beq.n	bb2 <usart_init+0xea>
     bb0:	e15a      	b.n	e68 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     bb2:	2310      	movs	r3, #16
     bb4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     bb6:	3b0f      	subs	r3, #15
     bb8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     bba:	6833      	ldr	r3, [r6, #0]
     bbc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     bbe:	68f3      	ldr	r3, [r6, #12]
     bc0:	469b      	mov	fp, r3
		config->sample_adjustment |
     bc2:	6973      	ldr	r3, [r6, #20]
     bc4:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bc6:	7e33      	ldrb	r3, [r6, #24]
     bc8:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bca:	232e      	movs	r3, #46	; 0x2e
     bcc:	5cf3      	ldrb	r3, [r6, r3]
     bce:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     bd0:	6873      	ldr	r3, [r6, #4]
     bd2:	4699      	mov	r9, r3
	switch (transfer_mode)
     bd4:	2b00      	cmp	r3, #0
     bd6:	d100      	bne.n	bda <usart_init+0x112>
     bd8:	e0c5      	b.n	d66 <usart_init+0x29e>
     bda:	2380      	movs	r3, #128	; 0x80
     bdc:	055b      	lsls	r3, r3, #21
     bde:	4599      	cmp	r9, r3
     be0:	d100      	bne.n	be4 <usart_init+0x11c>
     be2:	e0a8      	b.n	d36 <usart_init+0x26e>
	if(config->encoding_format_enable) {
     be4:	7e73      	ldrb	r3, [r6, #25]
     be6:	2b00      	cmp	r3, #0
     be8:	d002      	beq.n	bf0 <usart_init+0x128>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     bea:	7eb3      	ldrb	r3, [r6, #26]
     bec:	9a02      	ldr	r2, [sp, #8]
     bee:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     bf0:	230e      	movs	r3, #14
     bf2:	aa06      	add	r2, sp, #24
     bf4:	4694      	mov	ip, r2
     bf6:	4463      	add	r3, ip
     bf8:	881b      	ldrh	r3, [r3, #0]
     bfa:	9a02      	ldr	r2, [sp, #8]
     bfc:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     bfe:	9a05      	ldr	r2, [sp, #20]
     c00:	465b      	mov	r3, fp
     c02:	431a      	orrs	r2, r3
     c04:	9b03      	ldr	r3, [sp, #12]
     c06:	431a      	orrs	r2, r3
     c08:	464b      	mov	r3, r9
     c0a:	431a      	orrs	r2, r3
     c0c:	4643      	mov	r3, r8
     c0e:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c10:	9b04      	ldr	r3, [sp, #16]
     c12:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     c14:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c16:	4653      	mov	r3, sl
     c18:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     c1a:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
     c1c:	232f      	movs	r3, #47	; 0x2f
     c1e:	5cf3      	ldrb	r3, [r6, r3]
     c20:	2b00      	cmp	r3, #0
     c22:	d101      	bne.n	c28 <usart_init+0x160>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     c24:	3304      	adds	r3, #4
     c26:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c28:	7e73      	ldrb	r3, [r6, #25]
     c2a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c2c:	2124      	movs	r1, #36	; 0x24
     c2e:	5c71      	ldrb	r1, [r6, r1]
     c30:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c32:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c34:	2126      	movs	r1, #38	; 0x26
     c36:	5c71      	ldrb	r1, [r6, r1]
     c38:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c3a:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c3c:	212c      	movs	r1, #44	; 0x2c
     c3e:	5c71      	ldrb	r1, [r6, r1]
     c40:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c42:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c44:	212d      	movs	r1, #45	; 0x2d
     c46:	5c71      	ldrb	r1, [r6, r1]
     c48:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c4a:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     c4c:	7ab0      	ldrb	r0, [r6, #10]
     c4e:	7af1      	ldrb	r1, [r6, #11]
     c50:	4308      	orrs	r0, r1
     c52:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
     c54:	8933      	ldrh	r3, [r6, #8]
     c56:	2bff      	cmp	r3, #255	; 0xff
     c58:	d100      	bne.n	c5c <usart_init+0x194>
     c5a:	e0aa      	b.n	db2 <usart_init+0x2ea>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c5c:	2180      	movs	r1, #128	; 0x80
     c5e:	0449      	lsls	r1, r1, #17
     c60:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
     c62:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     c64:	9902      	ldr	r1, [sp, #8]
     c66:	688b      	ldr	r3, [r1, #8]
     c68:	469c      	mov	ip, r3
						| config->lin_break_length;
     c6a:	8c33      	ldrh	r3, [r6, #32]
     c6c:	8c71      	ldrh	r1, [r6, #34]	; 0x22
     c6e:	430b      	orrs	r3, r1
     c70:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     c72:	2107      	movs	r1, #7
     c74:	4663      	mov	r3, ip
     c76:	4019      	ands	r1, r3
						| config->lin_break_length;
     c78:	003b      	movs	r3, r7
     c7a:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     c7c:	9902      	ldr	r1, [sp, #8]
     c7e:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
     c80:	69f3      	ldr	r3, [r6, #28]
     c82:	2b00      	cmp	r3, #0
     c84:	d002      	beq.n	c8c <usart_init+0x1c4>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
     c86:	496e      	ldr	r1, [pc, #440]	; (e40 <usart_init+0x378>)
     c88:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
     c8a:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     c8c:	2334      	movs	r3, #52	; 0x34
     c8e:	5cf3      	ldrb	r3, [r6, r3]
     c90:	2b00      	cmp	r3, #0
     c92:	d103      	bne.n	c9c <usart_init+0x1d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c94:	4b6b      	ldr	r3, [pc, #428]	; (e44 <usart_init+0x37c>)
     c96:	789b      	ldrb	r3, [r3, #2]
     c98:	079b      	lsls	r3, r3, #30
     c9a:	d501      	bpl.n	ca0 <usart_init+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c9c:	2380      	movs	r3, #128	; 0x80
     c9e:	431a      	orrs	r2, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ca0:	6829      	ldr	r1, [r5, #0]
     ca2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ca4:	69cb      	ldr	r3, [r1, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ca6:	2b00      	cmp	r3, #0
     ca8:	d1fc      	bne.n	ca4 <usart_init+0x1dc>
	usart_hw->CTRLB.reg = ctrlb;
     caa:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     cac:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     cae:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
     cb0:	2b00      	cmp	r3, #0
     cb2:	d1fc      	bne.n	cae <usart_init+0x1e6>
	usart_hw->CTRLA.reg = ctrla;
     cb4:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
     cb6:	683b      	ldr	r3, [r7, #0]
     cb8:	22f0      	movs	r2, #240	; 0xf0
     cba:	0512      	lsls	r2, r2, #20
     cbc:	4013      	ands	r3, r2
     cbe:	22e0      	movs	r2, #224	; 0xe0
     cc0:	04d2      	lsls	r2, r2, #19
     cc2:	4293      	cmp	r3, r2
     cc4:	d00a      	beq.n	cdc <usart_init+0x214>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
     cc6:	68bb      	ldr	r3, [r7, #8]
     cc8:	2207      	movs	r2, #7
     cca:	4393      	bics	r3, r2
     ccc:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
     cce:	68ba      	ldr	r2, [r7, #8]
     cd0:	2325      	movs	r3, #37	; 0x25
     cd2:	5cf1      	ldrb	r1, [r6, r3]
     cd4:	3b1e      	subs	r3, #30
     cd6:	400b      	ands	r3, r1
     cd8:	4313      	orrs	r3, r2
     cda:	60bb      	str	r3, [r7, #8]
     cdc:	ab0e      	add	r3, sp, #56	; 0x38
     cde:	2280      	movs	r2, #128	; 0x80
     ce0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ce2:	2200      	movs	r2, #0
     ce4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     ce6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ce8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     cea:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     cec:	930a      	str	r3, [sp, #40]	; 0x28
     cee:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     cf0:	930b      	str	r3, [sp, #44]	; 0x2c
     cf2:	6c33      	ldr	r3, [r6, #64]	; 0x40
     cf4:	930c      	str	r3, [sp, #48]	; 0x30
     cf6:	6c73      	ldr	r3, [r6, #68]	; 0x44
     cf8:	9302      	str	r3, [sp, #8]
     cfa:	930d      	str	r3, [sp, #52]	; 0x34
     cfc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     cfe:	ae0a      	add	r6, sp, #40	; 0x28
     d00:	e066      	b.n	dd0 <usart_init+0x308>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d02:	2308      	movs	r3, #8
     d04:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     d06:	3b07      	subs	r3, #7
     d08:	9307      	str	r3, [sp, #28]
     d0a:	e756      	b.n	bba <usart_init+0xf2>
	ctrla = (uint32_t)config->data_order |
     d0c:	6833      	ldr	r3, [r6, #0]
     d0e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     d10:	68f3      	ldr	r3, [r6, #12]
     d12:	469b      	mov	fp, r3
		config->sample_adjustment |
     d14:	6973      	ldr	r3, [r6, #20]
     d16:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     d18:	7e33      	ldrb	r3, [r6, #24]
     d1a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d1c:	232e      	movs	r3, #46	; 0x2e
     d1e:	5cf3      	ldrb	r3, [r6, r3]
     d20:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     d22:	6873      	ldr	r3, [r6, #4]
     d24:	4699      	mov	r9, r3
	switch (transfer_mode)
     d26:	2b00      	cmp	r3, #0
     d28:	d019      	beq.n	d5e <usart_init+0x296>
     d2a:	2380      	movs	r3, #128	; 0x80
     d2c:	055b      	lsls	r3, r3, #21
     d2e:	4599      	cmp	r9, r3
     d30:	d001      	beq.n	d36 <usart_init+0x26e>
	enum status_code status_code = STATUS_OK;
     d32:	2300      	movs	r3, #0
     d34:	e027      	b.n	d86 <usart_init+0x2be>
			if (!config->use_external_clock) {
     d36:	232f      	movs	r3, #47	; 0x2f
     d38:	5cf3      	ldrb	r3, [r6, r3]
     d3a:	2b00      	cmp	r3, #0
     d3c:	d000      	beq.n	d40 <usart_init+0x278>
     d3e:	e751      	b.n	be4 <usart_init+0x11c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     d40:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     d42:	001f      	movs	r7, r3
     d44:	b2c0      	uxtb	r0, r0
     d46:	4b40      	ldr	r3, [pc, #256]	; (e48 <usart_init+0x380>)
     d48:	4798      	blx	r3
     d4a:	0001      	movs	r1, r0
     d4c:	220e      	movs	r2, #14
     d4e:	ab06      	add	r3, sp, #24
     d50:	469c      	mov	ip, r3
     d52:	4462      	add	r2, ip
     d54:	0038      	movs	r0, r7
     d56:	4b3d      	ldr	r3, [pc, #244]	; (e4c <usart_init+0x384>)
     d58:	4798      	blx	r3
     d5a:	0003      	movs	r3, r0
     d5c:	e013      	b.n	d86 <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d5e:	2308      	movs	r3, #8
     d60:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d62:	2300      	movs	r3, #0
     d64:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     d66:	232f      	movs	r3, #47	; 0x2f
     d68:	5cf3      	ldrb	r3, [r6, r3]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d00f      	beq.n	d8e <usart_init+0x2c6>
				status_code =
     d6e:	9b06      	ldr	r3, [sp, #24]
     d70:	9300      	str	r3, [sp, #0]
     d72:	9b07      	ldr	r3, [sp, #28]
     d74:	220e      	movs	r2, #14
     d76:	a906      	add	r1, sp, #24
     d78:	468c      	mov	ip, r1
     d7a:	4462      	add	r2, ip
     d7c:	6b31      	ldr	r1, [r6, #48]	; 0x30
     d7e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     d80:	4f33      	ldr	r7, [pc, #204]	; (e50 <usart_init+0x388>)
     d82:	47b8      	blx	r7
     d84:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
     d86:	2b00      	cmp	r3, #0
     d88:	d000      	beq.n	d8c <usart_init+0x2c4>
     d8a:	e6b3      	b.n	af4 <usart_init+0x2c>
     d8c:	e72a      	b.n	be4 <usart_init+0x11c>
						_sercom_get_async_baud_val(config->baudrate,
     d8e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     d90:	001f      	movs	r7, r3
     d92:	b2c0      	uxtb	r0, r0
     d94:	4b2c      	ldr	r3, [pc, #176]	; (e48 <usart_init+0x380>)
     d96:	4798      	blx	r3
     d98:	0001      	movs	r1, r0
				status_code =
     d9a:	9b06      	ldr	r3, [sp, #24]
     d9c:	9300      	str	r3, [sp, #0]
     d9e:	9b07      	ldr	r3, [sp, #28]
     da0:	220e      	movs	r2, #14
     da2:	a806      	add	r0, sp, #24
     da4:	4684      	mov	ip, r0
     da6:	4462      	add	r2, ip
     da8:	0038      	movs	r0, r7
     daa:	4f29      	ldr	r7, [pc, #164]	; (e50 <usart_init+0x388>)
     dac:	47b8      	blx	r7
     dae:	0003      	movs	r3, r0
     db0:	e7e9      	b.n	d86 <usart_init+0x2be>
		if(config->lin_slave_enable) {
     db2:	7ef3      	ldrb	r3, [r6, #27]
     db4:	2b00      	cmp	r3, #0
     db6:	d100      	bne.n	dba <usart_init+0x2f2>
     db8:	e754      	b.n	c64 <usart_init+0x19c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     dba:	2380      	movs	r3, #128	; 0x80
     dbc:	04db      	lsls	r3, r3, #19
     dbe:	431a      	orrs	r2, r3
     dc0:	e750      	b.n	c64 <usart_init+0x19c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     dc2:	0020      	movs	r0, r4
     dc4:	4b23      	ldr	r3, [pc, #140]	; (e54 <usart_init+0x38c>)
     dc6:	4798      	blx	r3
     dc8:	e007      	b.n	dda <usart_init+0x312>
     dca:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     dcc:	2f04      	cmp	r7, #4
     dce:	d00d      	beq.n	dec <usart_init+0x324>
     dd0:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     dd2:	00bb      	lsls	r3, r7, #2
     dd4:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     dd6:	2800      	cmp	r0, #0
     dd8:	d0f3      	beq.n	dc2 <usart_init+0x2fa>
		if (current_pinmux != PINMUX_UNUSED) {
     dda:	1c43      	adds	r3, r0, #1
     ddc:	d0f5      	beq.n	dca <usart_init+0x302>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     dde:	a90e      	add	r1, sp, #56	; 0x38
     de0:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     de2:	0c00      	lsrs	r0, r0, #16
     de4:	b2c0      	uxtb	r0, r0
     de6:	4b1c      	ldr	r3, [pc, #112]	; (e58 <usart_init+0x390>)
     de8:	4798      	blx	r3
     dea:	e7ee      	b.n	dca <usart_init+0x302>
		module->callback[i]            = NULL;
     dec:	2300      	movs	r3, #0
     dee:	60eb      	str	r3, [r5, #12]
     df0:	612b      	str	r3, [r5, #16]
     df2:	616b      	str	r3, [r5, #20]
     df4:	61ab      	str	r3, [r5, #24]
     df6:	61eb      	str	r3, [r5, #28]
     df8:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     dfa:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     dfc:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     dfe:	2200      	movs	r2, #0
     e00:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     e02:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     e04:	3330      	adds	r3, #48	; 0x30
     e06:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     e08:	3301      	adds	r3, #1
     e0a:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     e0c:	3301      	adds	r3, #1
     e0e:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     e10:	3301      	adds	r3, #1
     e12:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     e14:	6828      	ldr	r0, [r5, #0]
     e16:	4b05      	ldr	r3, [pc, #20]	; (e2c <usart_init+0x364>)
     e18:	4798      	blx	r3
     e1a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     e1c:	490f      	ldr	r1, [pc, #60]	; (e5c <usart_init+0x394>)
     e1e:	4b10      	ldr	r3, [pc, #64]	; (e60 <usart_init+0x398>)
     e20:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     e22:	00a4      	lsls	r4, r4, #2
     e24:	4b0f      	ldr	r3, [pc, #60]	; (e64 <usart_init+0x39c>)
     e26:	50e5      	str	r5, [r4, r3]
	return status_code;
     e28:	2300      	movs	r3, #0
     e2a:	e663      	b.n	af4 <usart_init+0x2c>
     e2c:	000009c1 	.word	0x000009c1
     e30:	40000800 	.word	0x40000800
     e34:	00001615 	.word	0x00001615
     e38:	000015a5 	.word	0x000015a5
     e3c:	000007f9 	.word	0x000007f9
     e40:	f0ffffff 	.word	0xf0ffffff
     e44:	41002000 	.word	0x41002000
     e48:	00001639 	.word	0x00001639
     e4c:	0000073b 	.word	0x0000073b
     e50:	00000765 	.word	0x00000765
     e54:	00000845 	.word	0x00000845
     e58:	00001711 	.word	0x00001711
     e5c:	00000f05 	.word	0x00000f05
     e60:	000009fd 	.word	0x000009fd
     e64:	20000bc0 	.word	0x20000bc0
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e68:	2310      	movs	r3, #16
     e6a:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e6c:	2300      	movs	r3, #0
     e6e:	9307      	str	r3, [sp, #28]
     e70:	e6a3      	b.n	bba <usart_init+0xf2>
     e72:	46c0      	nop			; (mov r8, r8)

00000e74 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     e74:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     e76:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     e78:	2a00      	cmp	r2, #0
     e7a:	d101      	bne.n	e80 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     e7c:	0018      	movs	r0, r3
     e7e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     e80:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     e82:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e84:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     e86:	2a00      	cmp	r2, #0
     e88:	d1f8      	bne.n	e7c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e8a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     e8c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     e8e:	2102      	movs	r1, #2
     e90:	7e13      	ldrb	r3, [r2, #24]
     e92:	420b      	tst	r3, r1
     e94:	d0fc      	beq.n	e90 <usart_write_wait+0x1c>
	return STATUS_OK;
     e96:	2300      	movs	r3, #0
     e98:	e7f0      	b.n	e7c <usart_write_wait+0x8>

00000e9a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     e9a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     e9c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     e9e:	2a00      	cmp	r2, #0
     ea0:	d101      	bne.n	ea6 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     ea2:	0018      	movs	r0, r3
     ea4:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     ea6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     ea8:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     eaa:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     eac:	2a00      	cmp	r2, #0
     eae:	d1f8      	bne.n	ea2 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     eb0:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     eb2:	7e10      	ldrb	r0, [r2, #24]
     eb4:	0740      	lsls	r0, r0, #29
     eb6:	d5f4      	bpl.n	ea2 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     eb8:	8b53      	ldrh	r3, [r2, #26]
     eba:	b2db      	uxtb	r3, r3
	if (error_code) {
     ebc:	0658      	lsls	r0, r3, #25
     ebe:	d01d      	beq.n	efc <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     ec0:	0798      	lsls	r0, r3, #30
     ec2:	d503      	bpl.n	ecc <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     ec4:	2302      	movs	r3, #2
     ec6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     ec8:	3318      	adds	r3, #24
     eca:	e7ea      	b.n	ea2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ecc:	0758      	lsls	r0, r3, #29
     ece:	d503      	bpl.n	ed8 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     ed0:	2304      	movs	r3, #4
     ed2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     ed4:	331a      	adds	r3, #26
     ed6:	e7e4      	b.n	ea2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ed8:	07d8      	lsls	r0, r3, #31
     eda:	d503      	bpl.n	ee4 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     edc:	2301      	movs	r3, #1
     ede:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     ee0:	3312      	adds	r3, #18
     ee2:	e7de      	b.n	ea2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     ee4:	06d8      	lsls	r0, r3, #27
     ee6:	d503      	bpl.n	ef0 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     ee8:	2310      	movs	r3, #16
     eea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     eec:	3332      	adds	r3, #50	; 0x32
     eee:	e7d8      	b.n	ea2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     ef0:	069b      	lsls	r3, r3, #26
     ef2:	d503      	bpl.n	efc <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ef4:	2320      	movs	r3, #32
     ef6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     ef8:	3321      	adds	r3, #33	; 0x21
     efa:	e7d2      	b.n	ea2 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     efc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     efe:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     f00:	2300      	movs	r3, #0
     f02:	e7ce      	b.n	ea2 <usart_read_wait+0x8>

00000f04 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     f06:	0080      	lsls	r0, r0, #2
     f08:	4b64      	ldr	r3, [pc, #400]	; (109c <_usart_interrupt_handler+0x198>)
     f0a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     f0c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     f0e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     f10:	2b00      	cmp	r3, #0
     f12:	d1fc      	bne.n	f0e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     f14:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     f16:	7da6      	ldrb	r6, [r4, #22]
     f18:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     f1a:	2330      	movs	r3, #48	; 0x30
     f1c:	5ceb      	ldrb	r3, [r5, r3]
     f1e:	2231      	movs	r2, #49	; 0x31
     f20:	5caf      	ldrb	r7, [r5, r2]
     f22:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     f24:	07f3      	lsls	r3, r6, #31
     f26:	d522      	bpl.n	f6e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     f28:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f2a:	b29b      	uxth	r3, r3
     f2c:	2b00      	cmp	r3, #0
     f2e:	d01c      	beq.n	f6a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     f32:	7813      	ldrb	r3, [r2, #0]
     f34:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     f36:	1c51      	adds	r1, r2, #1
     f38:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f3a:	7969      	ldrb	r1, [r5, #5]
     f3c:	2901      	cmp	r1, #1
     f3e:	d00e      	beq.n	f5e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f40:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     f42:	05db      	lsls	r3, r3, #23
     f44:	0ddb      	lsrs	r3, r3, #23
     f46:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     f48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f4a:	3b01      	subs	r3, #1
     f4c:	b29b      	uxth	r3, r3
     f4e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     f50:	2b00      	cmp	r3, #0
     f52:	d10c      	bne.n	f6e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f54:	3301      	adds	r3, #1
     f56:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     f58:	3301      	adds	r3, #1
     f5a:	75a3      	strb	r3, [r4, #22]
     f5c:	e007      	b.n	f6e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     f5e:	7851      	ldrb	r1, [r2, #1]
     f60:	0209      	lsls	r1, r1, #8
     f62:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     f64:	3202      	adds	r2, #2
     f66:	62aa      	str	r2, [r5, #40]	; 0x28
     f68:	e7eb      	b.n	f42 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f6a:	2301      	movs	r3, #1
     f6c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     f6e:	07b3      	lsls	r3, r6, #30
     f70:	d506      	bpl.n	f80 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     f72:	2302      	movs	r3, #2
     f74:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     f76:	2200      	movs	r2, #0
     f78:	3331      	adds	r3, #49	; 0x31
     f7a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     f7c:	07fb      	lsls	r3, r7, #31
     f7e:	d41e      	bmi.n	fbe <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     f80:	0773      	lsls	r3, r6, #29
     f82:	d568      	bpl.n	1056 <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
     f84:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f86:	b29b      	uxth	r3, r3
     f88:	2b00      	cmp	r3, #0
     f8a:	d062      	beq.n	1052 <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f8c:	8b63      	ldrh	r3, [r4, #26]
     f8e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     f90:	071a      	lsls	r2, r3, #28
     f92:	d418      	bmi.n	fc6 <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f94:	227f      	movs	r2, #127	; 0x7f
     f96:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
     f98:	065a      	lsls	r2, r3, #25
     f9a:	d501      	bpl.n	fa0 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
     f9c:	2240      	movs	r2, #64	; 0x40
     f9e:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     fa0:	2b00      	cmp	r3, #0
     fa2:	d033      	beq.n	100c <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     fa4:	079a      	lsls	r2, r3, #30
     fa6:	d511      	bpl.n	fcc <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     fa8:	221a      	movs	r2, #26
     faa:	2332      	movs	r3, #50	; 0x32
     fac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     fae:	3b30      	subs	r3, #48	; 0x30
     fb0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     fb2:	077b      	lsls	r3, r7, #29
     fb4:	d54f      	bpl.n	1056 <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     fb6:	0028      	movs	r0, r5
     fb8:	696b      	ldr	r3, [r5, #20]
     fba:	4798      	blx	r3
     fbc:	e04b      	b.n	1056 <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     fbe:	0028      	movs	r0, r5
     fc0:	68eb      	ldr	r3, [r5, #12]
     fc2:	4798      	blx	r3
     fc4:	e7dc      	b.n	f80 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     fc6:	2277      	movs	r2, #119	; 0x77
     fc8:	4013      	ands	r3, r2
     fca:	e7e5      	b.n	f98 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     fcc:	075a      	lsls	r2, r3, #29
     fce:	d505      	bpl.n	fdc <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
     fd0:	221e      	movs	r2, #30
     fd2:	2332      	movs	r3, #50	; 0x32
     fd4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     fd6:	3b2e      	subs	r3, #46	; 0x2e
     fd8:	8363      	strh	r3, [r4, #26]
     fda:	e7ea      	b.n	fb2 <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     fdc:	07da      	lsls	r2, r3, #31
     fde:	d505      	bpl.n	fec <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
     fe0:	2213      	movs	r2, #19
     fe2:	2332      	movs	r3, #50	; 0x32
     fe4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     fe6:	3b31      	subs	r3, #49	; 0x31
     fe8:	8363      	strh	r3, [r4, #26]
     fea:	e7e2      	b.n	fb2 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     fec:	06da      	lsls	r2, r3, #27
     fee:	d505      	bpl.n	ffc <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
     ff0:	2242      	movs	r2, #66	; 0x42
     ff2:	2332      	movs	r3, #50	; 0x32
     ff4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     ff6:	3b22      	subs	r3, #34	; 0x22
     ff8:	8363      	strh	r3, [r4, #26]
     ffa:	e7da      	b.n	fb2 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     ffc:	069b      	lsls	r3, r3, #26
     ffe:	d5d8      	bpl.n	fb2 <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1000:	2241      	movs	r2, #65	; 0x41
    1002:	2332      	movs	r3, #50	; 0x32
    1004:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1006:	3b12      	subs	r3, #18
    1008:	8363      	strh	r3, [r4, #26]
    100a:	e7d2      	b.n	fb2 <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    100c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    100e:	05db      	lsls	r3, r3, #23
    1010:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1012:	b2da      	uxtb	r2, r3
    1014:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1016:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1018:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    101a:	1c51      	adds	r1, r2, #1
    101c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    101e:	7969      	ldrb	r1, [r5, #5]
    1020:	2901      	cmp	r1, #1
    1022:	d010      	beq.n	1046 <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1024:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1026:	3b01      	subs	r3, #1
    1028:	b29b      	uxth	r3, r3
    102a:	85ab      	strh	r3, [r5, #44]	; 0x2c
    102c:	2b00      	cmp	r3, #0
    102e:	d112      	bne.n	1056 <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1030:	3304      	adds	r3, #4
    1032:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1034:	2200      	movs	r2, #0
    1036:	332e      	adds	r3, #46	; 0x2e
    1038:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    103a:	07bb      	lsls	r3, r7, #30
    103c:	d50b      	bpl.n	1056 <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    103e:	0028      	movs	r0, r5
    1040:	692b      	ldr	r3, [r5, #16]
    1042:	4798      	blx	r3
    1044:	e007      	b.n	1056 <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1046:	0a1b      	lsrs	r3, r3, #8
    1048:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    104a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    104c:	3301      	adds	r3, #1
    104e:	626b      	str	r3, [r5, #36]	; 0x24
    1050:	e7e8      	b.n	1024 <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1052:	2304      	movs	r3, #4
    1054:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1056:	06f3      	lsls	r3, r6, #27
    1058:	d504      	bpl.n	1064 <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    105a:	2310      	movs	r3, #16
    105c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    105e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1060:	06fb      	lsls	r3, r7, #27
    1062:	d40e      	bmi.n	1082 <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1064:	06b3      	lsls	r3, r6, #26
    1066:	d504      	bpl.n	1072 <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1068:	2320      	movs	r3, #32
    106a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    106c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    106e:	073b      	lsls	r3, r7, #28
    1070:	d40b      	bmi.n	108a <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1072:	0733      	lsls	r3, r6, #28
    1074:	d504      	bpl.n	1080 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1076:	2308      	movs	r3, #8
    1078:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    107a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    107c:	06bb      	lsls	r3, r7, #26
    107e:	d408      	bmi.n	1092 <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1082:	0028      	movs	r0, r5
    1084:	69eb      	ldr	r3, [r5, #28]
    1086:	4798      	blx	r3
    1088:	e7ec      	b.n	1064 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    108a:	0028      	movs	r0, r5
    108c:	69ab      	ldr	r3, [r5, #24]
    108e:	4798      	blx	r3
    1090:	e7ef      	b.n	1072 <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1092:	6a2b      	ldr	r3, [r5, #32]
    1094:	0028      	movs	r0, r5
    1096:	4798      	blx	r3
}
    1098:	e7f2      	b.n	1080 <_usart_interrupt_handler+0x17c>
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	20000bc0 	.word	0x20000bc0

000010a0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    10a0:	b510      	push	{r4, lr}
	switch (clock_source) {
    10a2:	2807      	cmp	r0, #7
    10a4:	d803      	bhi.n	10ae <system_clock_source_get_hz+0xe>
    10a6:	0080      	lsls	r0, r0, #2
    10a8:	4b0f      	ldr	r3, [pc, #60]	; (10e8 <system_clock_source_get_hz+0x48>)
    10aa:	581b      	ldr	r3, [r3, r0]
    10ac:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    10ae:	2000      	movs	r0, #0
    10b0:	e018      	b.n	10e4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    10b2:	4b0e      	ldr	r3, [pc, #56]	; (10ec <system_clock_source_get_hz+0x4c>)
    10b4:	6858      	ldr	r0, [r3, #4]
    10b6:	e015      	b.n	10e4 <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    10b8:	4b0d      	ldr	r3, [pc, #52]	; (10f0 <system_clock_source_get_hz+0x50>)
    10ba:	7d59      	ldrb	r1, [r3, #21]
    10bc:	0709      	lsls	r1, r1, #28
    10be:	0f09      	lsrs	r1, r1, #28
    10c0:	3101      	adds	r1, #1
    10c2:	480c      	ldr	r0, [pc, #48]	; (10f4 <system_clock_source_get_hz+0x54>)
    10c4:	4b0c      	ldr	r3, [pc, #48]	; (10f8 <system_clock_source_get_hz+0x58>)
    10c6:	4798      	blx	r3
    10c8:	e00c      	b.n	10e4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    10ca:	4b08      	ldr	r3, [pc, #32]	; (10ec <system_clock_source_get_hz+0x4c>)
    10cc:	6898      	ldr	r0, [r3, #8]
    10ce:	e009      	b.n	10e4 <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    10d0:	4b07      	ldr	r3, [pc, #28]	; (10f0 <system_clock_source_get_hz+0x50>)
    10d2:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    10d4:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    10d6:	079b      	lsls	r3, r3, #30
    10d8:	d504      	bpl.n	10e4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    10da:	4b04      	ldr	r3, [pc, #16]	; (10ec <system_clock_source_get_hz+0x4c>)
    10dc:	6818      	ldr	r0, [r3, #0]
    10de:	e001      	b.n	10e4 <system_clock_source_get_hz+0x44>
		return 32768UL;
    10e0:	2080      	movs	r0, #128	; 0x80
    10e2:	0200      	lsls	r0, r0, #8
	}
}
    10e4:	bd10      	pop	{r4, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	00006c54 	.word	0x00006c54
    10ec:	20000b28 	.word	0x20000b28
    10f0:	40001000 	.word	0x40001000
    10f4:	02dc6c00 	.word	0x02dc6c00
    10f8:	000057b5 	.word	0x000057b5

000010fc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    10fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fe:	46de      	mov	lr, fp
    1100:	4657      	mov	r7, sl
    1102:	464e      	mov	r6, r9
    1104:	4645      	mov	r5, r8
    1106:	b5e0      	push	{r5, r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    1108:	4a25      	ldr	r2, [pc, #148]	; (11a0 <system_clock_source_xosc32k_set_config+0xa4>)
    110a:	8a93      	ldrh	r3, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    110c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    110e:	7801      	ldrb	r1, [r0, #0]
    1110:	424c      	negs	r4, r1
    1112:	414c      	adcs	r4, r1
    1114:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    1116:	7881      	ldrb	r1, [r0, #2]
    1118:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    111a:	78c1      	ldrb	r1, [r0, #3]
    111c:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    111e:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1120:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    1122:	7a81      	ldrb	r1, [r0, #10]
    1124:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1126:	491f      	ldr	r1, [pc, #124]	; (11a4 <system_clock_source_xosc32k_set_config+0xa8>)
    1128:	6844      	ldr	r4, [r0, #4]
    112a:	608c      	str	r4, [r1, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    112c:	7ac1      	ldrb	r1, [r0, #11]
    112e:	0089      	lsls	r1, r1, #2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    1130:	7b84      	ldrb	r4, [r0, #14]
    1132:	0064      	lsls	r4, r4, #1
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
    1134:	4321      	orrs	r1, r4
    1136:	7b44      	ldrb	r4, [r0, #13]
    1138:	4321      	orrs	r1, r4
    113a:	b2c9      	uxtb	r1, r1
	OSC32KCTRL->CFDCTRL.reg =
    113c:	7591      	strb	r1, [r2, #22]

	OSC32KCTRL->EVCTRL.reg =
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);
    113e:	7b01      	ldrb	r1, [r0, #12]
	OSC32KCTRL->EVCTRL.reg =
    1140:	75d1      	strb	r1, [r2, #23]

	OSC32KCTRL->XOSC32K = temp;
    1142:	2101      	movs	r1, #1
    1144:	4648      	mov	r0, r9
    1146:	0080      	lsls	r0, r0, #2
    1148:	2404      	movs	r4, #4
    114a:	43a3      	bics	r3, r4
    114c:	4303      	orrs	r3, r0
    114e:	4640      	mov	r0, r8
    1150:	4008      	ands	r0, r1
    1152:	00c0      	lsls	r0, r0, #3
    1154:	3404      	adds	r4, #4
    1156:	43a3      	bics	r3, r4
    1158:	4303      	orrs	r3, r0
    115a:	4660      	mov	r0, ip
    115c:	4008      	ands	r0, r1
    115e:	0100      	lsls	r0, r0, #4
    1160:	3408      	adds	r4, #8
    1162:	43a3      	bics	r3, r4
    1164:	4303      	orrs	r3, r0
    1166:	400f      	ands	r7, r1
    1168:	01bf      	lsls	r7, r7, #6
    116a:	2040      	movs	r0, #64	; 0x40
    116c:	4383      	bics	r3, r0
    116e:	433b      	orrs	r3, r7
    1170:	400e      	ands	r6, r1
    1172:	01f6      	lsls	r6, r6, #7
    1174:	3040      	adds	r0, #64	; 0x40
    1176:	4383      	bics	r3, r0
    1178:	4333      	orrs	r3, r6
    117a:	3879      	subs	r0, #121	; 0x79
    117c:	4005      	ands	r5, r0
    117e:	022d      	lsls	r5, r5, #8
    1180:	4809      	ldr	r0, [pc, #36]	; (11a8 <system_clock_source_xosc32k_set_config+0xac>)
    1182:	4003      	ands	r3, r0
    1184:	432b      	orrs	r3, r5
    1186:	4658      	mov	r0, fp
    1188:	4001      	ands	r1, r0
    118a:	0309      	lsls	r1, r1, #12
    118c:	4807      	ldr	r0, [pc, #28]	; (11ac <system_clock_source_xosc32k_set_config+0xb0>)
    118e:	4003      	ands	r3, r0
    1190:	430b      	orrs	r3, r1
    1192:	8293      	strh	r3, [r2, #20]
}
    1194:	bc3c      	pop	{r2, r3, r4, r5}
    1196:	4690      	mov	r8, r2
    1198:	4699      	mov	r9, r3
    119a:	46a2      	mov	sl, r4
    119c:	46ab      	mov	fp, r5
    119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11a0:	40001400 	.word	0x40001400
    11a4:	20000b28 	.word	0x20000b28
    11a8:	fffff8ff 	.word	0xfffff8ff
    11ac:	ffffefff 	.word	0xffffefff

000011b0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    11b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11b2:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    11b4:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    11b6:	7d03      	ldrb	r3, [r0, #20]
    11b8:	2b01      	cmp	r3, #1
    11ba:	d04d      	beq.n	1258 <system_clock_source_dpll_set_config+0xa8>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    11bc:	68a3      	ldr	r3, [r4, #8]
    11be:	0118      	lsls	r0, r3, #4
    11c0:	0029      	movs	r1, r5
    11c2:	4b29      	ldr	r3, [pc, #164]	; (1268 <system_clock_source_dpll_set_config+0xb8>)
    11c4:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    11c6:	220f      	movs	r2, #15
    11c8:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    11ca:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    11cc:	7821      	ldrb	r1, [r4, #0]
    11ce:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    11d0:	7866      	ldrb	r6, [r4, #1]
    11d2:	01b6      	lsls	r6, r6, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    11d4:	4331      	orrs	r1, r6
    11d6:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    11d8:	4e24      	ldr	r6, [pc, #144]	; (126c <system_clock_source_dpll_set_config+0xbc>)
    11da:	7731      	strb	r1, [r6, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    11dc:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    11de:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    11e0:	051b      	lsls	r3, r3, #20
    11e2:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    11e4:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    11e6:	6233      	str	r3, [r6, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    11e8:	0037      	movs	r7, r6
    11ea:	262c      	movs	r6, #44	; 0x2c
    11ec:	2104      	movs	r1, #4
    11ee:	5dbb      	ldrb	r3, [r7, r6]
    11f0:	420b      	tst	r3, r1
    11f2:	d1fc      	bne.n	11ee <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    11f4:	78a3      	ldrb	r3, [r4, #2]
    11f6:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    11f8:	78e1      	ldrb	r1, [r4, #3]
    11fa:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    11fc:	430b      	orrs	r3, r1
    11fe:	7921      	ldrb	r1, [r4, #4]
    1200:	0089      	lsls	r1, r1, #2
    1202:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    1204:	7ca1      	ldrb	r1, [r4, #18]
    1206:	2603      	movs	r6, #3
    1208:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    120a:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    120c:	8a21      	ldrh	r1, [r4, #16]
    120e:	0409      	lsls	r1, r1, #16
    1210:	4f17      	ldr	r7, [pc, #92]	; (1270 <system_clock_source_dpll_set_config+0xc0>)
    1212:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    1214:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    1216:	7ce1      	ldrb	r1, [r4, #19]
    1218:	0209      	lsls	r1, r1, #8
    121a:	27e0      	movs	r7, #224	; 0xe0
    121c:	00ff      	lsls	r7, r7, #3
    121e:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    1220:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    1222:	7d27      	ldrb	r7, [r4, #20]
    1224:	013f      	lsls	r7, r7, #4
    1226:	2130      	movs	r1, #48	; 0x30
    1228:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    122a:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    122c:	490f      	ldr	r1, [pc, #60]	; (126c <system_clock_source_dpll_set_config+0xbc>)
    122e:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    1230:	7d63      	ldrb	r3, [r4, #21]
    1232:	401e      	ands	r6, r3
    1234:	2328      	movs	r3, #40	; 0x28
    1236:	54ce      	strb	r6, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    1238:	000f      	movs	r7, r1
    123a:	262c      	movs	r6, #44	; 0x2c
    123c:	2108      	movs	r1, #8
    123e:	5dbb      	ldrb	r3, [r7, r6]
    1240:	420b      	tst	r3, r1
    1242:	d1fc      	bne.n	123e <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    1244:	230f      	movs	r3, #15
    1246:	4398      	bics	r0, r3
    1248:	1882      	adds	r2, r0, r2
			(refclk *
    124a:	436a      	muls	r2, r5
			) >> (4 + config->prescaler);
    124c:	7d63      	ldrb	r3, [r4, #21]
    124e:	3304      	adds	r3, #4
    1250:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    1252:	4b08      	ldr	r3, [pc, #32]	; (1274 <system_clock_source_dpll_set_config+0xc4>)
    1254:	601a      	str	r2, [r3, #0]
}
    1256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    1258:	8a01      	ldrh	r1, [r0, #16]
    125a:	3101      	adds	r1, #1
    125c:	0049      	lsls	r1, r1, #1
    125e:	0028      	movs	r0, r5
    1260:	4b01      	ldr	r3, [pc, #4]	; (1268 <system_clock_source_dpll_set_config+0xb8>)
    1262:	4798      	blx	r3
    1264:	0005      	movs	r5, r0
    1266:	e7a9      	b.n	11bc <system_clock_source_dpll_set_config+0xc>
    1268:	000057b5 	.word	0x000057b5
    126c:	40001000 	.word	0x40001000
    1270:	07ff0000 	.word	0x07ff0000
    1274:	20000b28 	.word	0x20000b28

00001278 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1278:	2807      	cmp	r0, #7
    127a:	d803      	bhi.n	1284 <system_clock_source_enable+0xc>
    127c:	0080      	lsls	r0, r0, #2
    127e:	4b18      	ldr	r3, [pc, #96]	; (12e0 <system_clock_source_enable+0x68>)
    1280:	581b      	ldr	r3, [r3, r0]
    1282:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1284:	2017      	movs	r0, #23
    1286:	e029      	b.n	12dc <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    1288:	4a16      	ldr	r2, [pc, #88]	; (12e4 <system_clock_source_enable+0x6c>)
    128a:	7d13      	ldrb	r3, [r2, #20]
    128c:	2102      	movs	r1, #2
    128e:	430b      	orrs	r3, r1
    1290:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    1292:	2000      	movs	r0, #0
    1294:	e022      	b.n	12dc <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    1296:	4a14      	ldr	r2, [pc, #80]	; (12e8 <system_clock_source_enable+0x70>)
    1298:	6993      	ldr	r3, [r2, #24]
    129a:	2102      	movs	r1, #2
    129c:	430b      	orrs	r3, r1
    129e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    12a0:	2000      	movs	r0, #0
		break;
    12a2:	e01b      	b.n	12dc <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    12a4:	4a0f      	ldr	r2, [pc, #60]	; (12e4 <system_clock_source_enable+0x6c>)
    12a6:	8a13      	ldrh	r3, [r2, #16]
    12a8:	2102      	movs	r1, #2
    12aa:	430b      	orrs	r3, r1
    12ac:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    12ae:	2000      	movs	r0, #0
		break;
    12b0:	e014      	b.n	12dc <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    12b2:	4a0d      	ldr	r2, [pc, #52]	; (12e8 <system_clock_source_enable+0x70>)
    12b4:	8a93      	ldrh	r3, [r2, #20]
    12b6:	2102      	movs	r1, #2
    12b8:	430b      	orrs	r3, r1
    12ba:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    12bc:	2000      	movs	r0, #0
		break;
    12be:	e00d      	b.n	12dc <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    12c0:	4a08      	ldr	r2, [pc, #32]	; (12e4 <system_clock_source_enable+0x6c>)
    12c2:	7f13      	ldrb	r3, [r2, #28]
    12c4:	2102      	movs	r1, #2
    12c6:	430b      	orrs	r3, r1
    12c8:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    12ca:	0010      	movs	r0, r2
    12cc:	312a      	adds	r1, #42	; 0x2a
    12ce:	2202      	movs	r2, #2
    12d0:	5c43      	ldrb	r3, [r0, r1]
    12d2:	4213      	tst	r3, r2
    12d4:	d1fc      	bne.n	12d0 <system_clock_source_enable+0x58>
	return STATUS_OK;
    12d6:	2000      	movs	r0, #0
    12d8:	e000      	b.n	12dc <system_clock_source_enable+0x64>
		return STATUS_OK;
    12da:	2000      	movs	r0, #0
}
    12dc:	4770      	bx	lr
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	00006c74 	.word	0x00006c74
    12e4:	40001000 	.word	0x40001000
    12e8:	40001400 	.word	0x40001400

000012ec <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    12ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ee:	46c6      	mov	lr, r8
    12f0:	b500      	push	{lr}
    12f2:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    12f4:	2203      	movs	r2, #3
    12f6:	4b3f      	ldr	r3, [pc, #252]	; (13f4 <system_clock_init+0x108>)
    12f8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    12fa:	4a3f      	ldr	r2, [pc, #252]	; (13f8 <system_clock_init+0x10c>)
    12fc:	6853      	ldr	r3, [r2, #4]
    12fe:	211e      	movs	r1, #30
    1300:	438b      	bics	r3, r1
    1302:	3918      	subs	r1, #24
    1304:	430b      	orrs	r3, r1
    1306:	6053      	str	r3, [r2, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1308:	a80a      	add	r0, sp, #40	; 0x28
    130a:	2300      	movs	r3, #0
    130c:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    130e:	2280      	movs	r2, #128	; 0x80
    1310:	0212      	lsls	r2, r2, #8
    1312:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    1314:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    1316:	2201      	movs	r2, #1
    1318:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    131a:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    131c:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    131e:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    1320:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    1322:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1324:	3902      	subs	r1, #2
    1326:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1328:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    132a:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    132c:	4b33      	ldr	r3, [pc, #204]	; (13fc <system_clock_init+0x110>)
    132e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1330:	2005      	movs	r0, #5
    1332:	4b33      	ldr	r3, [pc, #204]	; (1400 <system_clock_init+0x114>)
    1334:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    1336:	4933      	ldr	r1, [pc, #204]	; (1404 <system_clock_init+0x118>)
    1338:	2201      	movs	r2, #1
    133a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    133c:	421a      	tst	r2, r3
    133e:	d0fc      	beq.n	133a <system_clock_init+0x4e>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    1340:	4b31      	ldr	r3, [pc, #196]	; (1408 <system_clock_init+0x11c>)
    1342:	7d1a      	ldrb	r2, [r3, #20]
    1344:	2180      	movs	r1, #128	; 0x80
    1346:	430a      	orrs	r2, r1
    1348:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    134a:	2202      	movs	r2, #2
    134c:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    134e:	001a      	movs	r2, r3
    1350:	6993      	ldr	r3, [r2, #24]
    1352:	2b00      	cmp	r3, #0
    1354:	d1fc      	bne.n	1350 <system_clock_init+0x64>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1356:	4b2d      	ldr	r3, [pc, #180]	; (140c <system_clock_init+0x120>)
    1358:	4798      	blx	r3
	config->division_factor    = 1;
    135a:	ad01      	add	r5, sp, #4
    135c:	2601      	movs	r6, #1
    135e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1360:	2400      	movs	r4, #0
    1362:	706c      	strb	r4, [r5, #1]
	config->output_enable      = false;
    1364:	726c      	strb	r4, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1366:	2305      	movs	r3, #5
    1368:	702b      	strb	r3, [r5, #0]
    136a:	722e      	strb	r6, [r5, #8]
    136c:	0029      	movs	r1, r5
    136e:	2001      	movs	r0, #1
    1370:	4b27      	ldr	r3, [pc, #156]	; (1410 <system_clock_init+0x124>)
    1372:	4698      	mov	r8, r3
    1374:	4798      	blx	r3
    1376:	2001      	movs	r0, #1
    1378:	4f26      	ldr	r7, [pc, #152]	; (1414 <system_clock_init+0x128>)
    137a:	47b8      	blx	r7
	config->division_factor    = 1;
    137c:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    137e:	706c      	strb	r4, [r5, #1]
	config->run_in_standby     = false;
    1380:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    1382:	726c      	strb	r4, [r5, #9]
    1384:	2307      	movs	r3, #7
    1386:	702b      	strb	r3, [r5, #0]
    1388:	0029      	movs	r1, r5
    138a:	2008      	movs	r0, #8
    138c:	47c0      	blx	r8
    138e:	2008      	movs	r0, #8
    1390:	47b8      	blx	r7
	config->lock_bypass         = false;
    1392:	a804      	add	r0, sp, #16
    1394:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    1396:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    1398:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    139a:	4b1f      	ldr	r3, [pc, #124]	; (1418 <system_clock_init+0x12c>)
    139c:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    139e:	8206      	strh	r6, [r0, #16]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    13a0:	7544      	strb	r4, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    13a2:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    13a4:	7484      	strb	r4, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    13a6:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    13a8:	2301      	movs	r3, #1
    13aa:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    13ac:	7504      	strb	r4, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    13ae:	4b1b      	ldr	r3, [pc, #108]	; (141c <system_clock_init+0x130>)
    13b0:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    13b2:	4b1b      	ldr	r3, [pc, #108]	; (1420 <system_clock_init+0x134>)
    13b4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    13b6:	2007      	movs	r0, #7
    13b8:	4b11      	ldr	r3, [pc, #68]	; (1400 <system_clock_init+0x114>)
    13ba:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    13bc:	4812      	ldr	r0, [pc, #72]	; (1408 <system_clock_init+0x11c>)
    13be:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    13c0:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    13c2:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    13c4:	4013      	ands	r3, r2
    13c6:	2b03      	cmp	r3, #3
    13c8:	d1fb      	bne.n	13c2 <system_clock_init+0xd6>
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    13ca:	3b02      	subs	r3, #2
    13cc:	4a15      	ldr	r2, [pc, #84]	; (1424 <system_clock_init+0x138>)
    13ce:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    13d0:	a901      	add	r1, sp, #4
    13d2:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    13d4:	2200      	movs	r2, #0
    13d6:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    13d8:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    13da:	3207      	adds	r2, #7
    13dc:	700a      	strb	r2, [r1, #0]
    13de:	720b      	strb	r3, [r1, #8]
    13e0:	2000      	movs	r0, #0
    13e2:	4b0b      	ldr	r3, [pc, #44]	; (1410 <system_clock_init+0x124>)
    13e4:	4798      	blx	r3
    13e6:	2000      	movs	r0, #0
    13e8:	4b0a      	ldr	r3, [pc, #40]	; (1414 <system_clock_init+0x128>)
    13ea:	4798      	blx	r3
#endif

}
    13ec:	b00e      	add	sp, #56	; 0x38
    13ee:	bc04      	pop	{r2}
    13f0:	4690      	mov	r8, r2
    13f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13f4:	40001800 	.word	0x40001800
    13f8:	41004000 	.word	0x41004000
    13fc:	000010fd 	.word	0x000010fd
    1400:	00001279 	.word	0x00001279
    1404:	40001400 	.word	0x40001400
    1408:	40001000 	.word	0x40001000
    140c:	00001429 	.word	0x00001429
    1410:	0000144d 	.word	0x0000144d
    1414:	000014f9 	.word	0x000014f9
    1418:	02dc6c00 	.word	0x02dc6c00
    141c:	00007fff 	.word	0x00007fff
    1420:	000011b1 	.word	0x000011b1
    1424:	40000800 	.word	0x40000800

00001428 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    1428:	4a06      	ldr	r2, [pc, #24]	; (1444 <system_gclk_init+0x1c>)
    142a:	6953      	ldr	r3, [r2, #20]
    142c:	2180      	movs	r1, #128	; 0x80
    142e:	430b      	orrs	r3, r1
    1430:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    1432:	2201      	movs	r2, #1
    1434:	4b04      	ldr	r3, [pc, #16]	; (1448 <system_gclk_init+0x20>)
    1436:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1438:	0019      	movs	r1, r3
    143a:	780b      	ldrb	r3, [r1, #0]
    143c:	4213      	tst	r3, r2
    143e:	d1fc      	bne.n	143a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1440:	4770      	bx	lr
    1442:	46c0      	nop			; (mov r8, r8)
    1444:	40000800 	.word	0x40000800
    1448:	40001c00 	.word	0x40001c00

0000144c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    144c:	b570      	push	{r4, r5, r6, lr}
    144e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1450:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1452:	784b      	ldrb	r3, [r1, #1]
    1454:	2b00      	cmp	r3, #0
    1456:	d002      	beq.n	145e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1458:	2380      	movs	r3, #128	; 0x80
    145a:	00db      	lsls	r3, r3, #3
    145c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    145e:	7a4b      	ldrb	r3, [r1, #9]
    1460:	2b00      	cmp	r3, #0
    1462:	d002      	beq.n	146a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1464:	2380      	movs	r3, #128	; 0x80
    1466:	011b      	lsls	r3, r3, #4
    1468:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    146a:	6848      	ldr	r0, [r1, #4]
    146c:	2801      	cmp	r0, #1
    146e:	d90f      	bls.n	1490 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1470:	1e43      	subs	r3, r0, #1
    1472:	4218      	tst	r0, r3
    1474:	d131      	bne.n	14da <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1476:	2802      	cmp	r0, #2
    1478:	d92d      	bls.n	14d6 <system_gclk_gen_set_config+0x8a>
    147a:	2302      	movs	r3, #2
    147c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    147e:	3201      	adds	r2, #1
						mask <<= 1) {
    1480:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1482:	4298      	cmp	r0, r3
    1484:	d8fb      	bhi.n	147e <system_gclk_gen_set_config+0x32>
    1486:	2380      	movs	r3, #128	; 0x80
    1488:	015b      	lsls	r3, r3, #5
    148a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    148c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    148e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1490:	7a0b      	ldrb	r3, [r1, #8]
    1492:	2b00      	cmp	r3, #0
    1494:	d002      	beq.n	149c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1496:	2380      	movs	r3, #128	; 0x80
    1498:	019b      	lsls	r3, r3, #6
    149a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    149c:	2604      	movs	r6, #4
    149e:	40a6      	lsls	r6, r4
    14a0:	4911      	ldr	r1, [pc, #68]	; (14e8 <system_gclk_gen_set_config+0x9c>)
    14a2:	4a12      	ldr	r2, [pc, #72]	; (14ec <system_gclk_gen_set_config+0xa0>)
    14a4:	684b      	ldr	r3, [r1, #4]
    14a6:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    14a8:	421e      	tst	r6, r3
    14aa:	d1fb      	bne.n	14a4 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    14ac:	4b10      	ldr	r3, [pc, #64]	; (14f0 <system_gclk_gen_set_config+0xa4>)
    14ae:	4798      	blx	r3
    14b0:	00a4      	lsls	r4, r4, #2
    14b2:	4b0d      	ldr	r3, [pc, #52]	; (14e8 <system_gclk_gen_set_config+0x9c>)
    14b4:	469c      	mov	ip, r3
    14b6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    14b8:	6a22      	ldr	r2, [r4, #32]
    14ba:	2380      	movs	r3, #128	; 0x80
    14bc:	005b      	lsls	r3, r3, #1
    14be:	401a      	ands	r2, r3
    14c0:	432a      	orrs	r2, r5
    14c2:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    14c4:	4661      	mov	r1, ip
    14c6:	4a09      	ldr	r2, [pc, #36]	; (14ec <system_gclk_gen_set_config+0xa0>)
    14c8:	684b      	ldr	r3, [r1, #4]
    14ca:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    14cc:	421e      	tst	r6, r3
    14ce:	d1fb      	bne.n	14c8 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14d0:	4b08      	ldr	r3, [pc, #32]	; (14f4 <system_gclk_gen_set_config+0xa8>)
    14d2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    14d4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    14d6:	2200      	movs	r2, #0
    14d8:	e7d5      	b.n	1486 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    14da:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    14dc:	2380      	movs	r3, #128	; 0x80
    14de:	009b      	lsls	r3, r3, #2
    14e0:	4318      	orrs	r0, r3
    14e2:	4305      	orrs	r5, r0
    14e4:	e7d4      	b.n	1490 <system_gclk_gen_set_config+0x44>
    14e6:	46c0      	nop			; (mov r8, r8)
    14e8:	40001c00 	.word	0x40001c00
    14ec:	000007fc 	.word	0x000007fc
    14f0:	0000011d 	.word	0x0000011d
    14f4:	0000015d 	.word	0x0000015d

000014f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    14f8:	b510      	push	{r4, lr}
    14fa:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    14fc:	2204      	movs	r2, #4
    14fe:	4082      	lsls	r2, r0
    1500:	4809      	ldr	r0, [pc, #36]	; (1528 <system_gclk_gen_enable+0x30>)
    1502:	490a      	ldr	r1, [pc, #40]	; (152c <system_gclk_gen_enable+0x34>)
    1504:	6843      	ldr	r3, [r0, #4]
    1506:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1508:	421a      	tst	r2, r3
    150a:	d1fb      	bne.n	1504 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    150c:	4b08      	ldr	r3, [pc, #32]	; (1530 <system_gclk_gen_enable+0x38>)
    150e:	4798      	blx	r3
    1510:	00a4      	lsls	r4, r4, #2
    1512:	4b05      	ldr	r3, [pc, #20]	; (1528 <system_gclk_gen_enable+0x30>)
    1514:	469c      	mov	ip, r3
    1516:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1518:	6a22      	ldr	r2, [r4, #32]
    151a:	2380      	movs	r3, #128	; 0x80
    151c:	005b      	lsls	r3, r3, #1
    151e:	4313      	orrs	r3, r2
    1520:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    1522:	4b04      	ldr	r3, [pc, #16]	; (1534 <system_gclk_gen_enable+0x3c>)
    1524:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1526:	bd10      	pop	{r4, pc}
    1528:	40001c00 	.word	0x40001c00
    152c:	000007fc 	.word	0x000007fc
    1530:	0000011d 	.word	0x0000011d
    1534:	0000015d 	.word	0x0000015d

00001538 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    153a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    153c:	2204      	movs	r2, #4
    153e:	4082      	lsls	r2, r0
    1540:	4812      	ldr	r0, [pc, #72]	; (158c <system_gclk_gen_get_hz+0x54>)
    1542:	4913      	ldr	r1, [pc, #76]	; (1590 <system_gclk_gen_get_hz+0x58>)
    1544:	6843      	ldr	r3, [r0, #4]
    1546:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1548:	421a      	tst	r2, r3
    154a:	d1fb      	bne.n	1544 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    154c:	4b11      	ldr	r3, [pc, #68]	; (1594 <system_gclk_gen_get_hz+0x5c>)
    154e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1550:	4f0e      	ldr	r7, [pc, #56]	; (158c <system_gclk_gen_get_hz+0x54>)
    1552:	3408      	adds	r4, #8
    1554:	00a4      	lsls	r4, r4, #2
    1556:	59e0      	ldr	r0, [r4, r7]
    1558:	0740      	lsls	r0, r0, #29
    155a:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    155c:	4b0e      	ldr	r3, [pc, #56]	; (1598 <system_gclk_gen_get_hz+0x60>)
    155e:	4798      	blx	r3
    1560:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1562:	59e5      	ldr	r5, [r4, r7]
    1564:	04ed      	lsls	r5, r5, #19
    1566:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1568:	59e4      	ldr	r4, [r4, r7]
    156a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    156c:	4b0b      	ldr	r3, [pc, #44]	; (159c <system_gclk_gen_get_hz+0x64>)
    156e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1570:	2d00      	cmp	r5, #0
    1572:	d107      	bne.n	1584 <system_gclk_gen_get_hz+0x4c>
    1574:	2c01      	cmp	r4, #1
    1576:	d907      	bls.n	1588 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1578:	0021      	movs	r1, r4
    157a:	0030      	movs	r0, r6
    157c:	4b08      	ldr	r3, [pc, #32]	; (15a0 <system_gclk_gen_get_hz+0x68>)
    157e:	4798      	blx	r3
    1580:	0006      	movs	r6, r0
    1582:	e001      	b.n	1588 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1584:	3401      	adds	r4, #1
    1586:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1588:	0030      	movs	r0, r6
    158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    158c:	40001c00 	.word	0x40001c00
    1590:	000007fc 	.word	0x000007fc
    1594:	0000011d 	.word	0x0000011d
    1598:	000010a1 	.word	0x000010a1
    159c:	0000015d 	.word	0x0000015d
    15a0:	000057b5 	.word	0x000057b5

000015a4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    15a4:	b510      	push	{r4, lr}
    15a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    15a8:	4b09      	ldr	r3, [pc, #36]	; (15d0 <system_gclk_chan_enable+0x2c>)
    15aa:	4798      	blx	r3
    15ac:	00a0      	lsls	r0, r4, #2
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <system_gclk_chan_enable+0x30>)
    15b0:	469c      	mov	ip, r3
    15b2:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    15b4:	2280      	movs	r2, #128	; 0x80
    15b6:	5883      	ldr	r3, [r0, r2]
    15b8:	2140      	movs	r1, #64	; 0x40
    15ba:	430b      	orrs	r3, r1
    15bc:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    15be:	3140      	adds	r1, #64	; 0x40
    15c0:	3a40      	subs	r2, #64	; 0x40
    15c2:	5843      	ldr	r3, [r0, r1]
    15c4:	421a      	tst	r2, r3
    15c6:	d0fc      	beq.n	15c2 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    15c8:	4b03      	ldr	r3, [pc, #12]	; (15d8 <system_gclk_chan_enable+0x34>)
    15ca:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    15cc:	bd10      	pop	{r4, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	0000011d 	.word	0x0000011d
    15d4:	40001c00 	.word	0x40001c00
    15d8:	0000015d 	.word	0x0000015d

000015dc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    15dc:	b510      	push	{r4, lr}
    15de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    15e0:	4b09      	ldr	r3, [pc, #36]	; (1608 <system_gclk_chan_disable+0x2c>)
    15e2:	4798      	blx	r3
    15e4:	00a0      	lsls	r0, r4, #2
    15e6:	4b09      	ldr	r3, [pc, #36]	; (160c <system_gclk_chan_disable+0x30>)
    15e8:	469c      	mov	ip, r3
    15ea:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    15ec:	2280      	movs	r2, #128	; 0x80
    15ee:	5883      	ldr	r3, [r0, r2]
    15f0:	2140      	movs	r1, #64	; 0x40
    15f2:	438b      	bics	r3, r1
    15f4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    15f6:	3140      	adds	r1, #64	; 0x40
    15f8:	3a40      	subs	r2, #64	; 0x40
    15fa:	5843      	ldr	r3, [r0, r1]
    15fc:	421a      	tst	r2, r3
    15fe:	d1fc      	bne.n	15fa <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    1600:	4b03      	ldr	r3, [pc, #12]	; (1610 <system_gclk_chan_disable+0x34>)
    1602:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1604:	bd10      	pop	{r4, pc}
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	0000011d 	.word	0x0000011d
    160c:	40001c00 	.word	0x40001c00
    1610:	0000015d 	.word	0x0000015d

00001614 <system_gclk_chan_set_config>:
{
    1614:	b570      	push	{r4, r5, r6, lr}
    1616:	0004      	movs	r4, r0
    1618:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    161a:	4b05      	ldr	r3, [pc, #20]	; (1630 <system_gclk_chan_set_config+0x1c>)
    161c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    161e:	782a      	ldrb	r2, [r5, #0]
    1620:	230f      	movs	r3, #15
    1622:	4013      	ands	r3, r2
    1624:	3420      	adds	r4, #32
    1626:	00a4      	lsls	r4, r4, #2
    1628:	4a02      	ldr	r2, [pc, #8]	; (1634 <system_gclk_chan_set_config+0x20>)
    162a:	50a3      	str	r3, [r4, r2]
}
    162c:	bd70      	pop	{r4, r5, r6, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	000015dd 	.word	0x000015dd
    1634:	40001c00 	.word	0x40001c00

00001638 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1638:	b510      	push	{r4, lr}
    163a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    163c:	4b06      	ldr	r3, [pc, #24]	; (1658 <system_gclk_chan_get_hz+0x20>)
    163e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1640:	3420      	adds	r4, #32
    1642:	00a4      	lsls	r4, r4, #2
    1644:	4b05      	ldr	r3, [pc, #20]	; (165c <system_gclk_chan_get_hz+0x24>)
    1646:	58e4      	ldr	r4, [r4, r3]
    1648:	0724      	lsls	r4, r4, #28
    164a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    164c:	4b04      	ldr	r3, [pc, #16]	; (1660 <system_gclk_chan_get_hz+0x28>)
    164e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1650:	0020      	movs	r0, r4
    1652:	4b04      	ldr	r3, [pc, #16]	; (1664 <system_gclk_chan_get_hz+0x2c>)
    1654:	4798      	blx	r3
}
    1656:	bd10      	pop	{r4, pc}
    1658:	0000011d 	.word	0x0000011d
    165c:	40001c00 	.word	0x40001c00
    1660:	0000015d 	.word	0x0000015d
    1664:	00001539 	.word	0x00001539

00001668 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1668:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    166a:	78d3      	ldrb	r3, [r2, #3]
    166c:	2b00      	cmp	r3, #0
    166e:	d135      	bne.n	16dc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1670:	7813      	ldrb	r3, [r2, #0]
    1672:	2b80      	cmp	r3, #128	; 0x80
    1674:	d029      	beq.n	16ca <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1676:	061b      	lsls	r3, r3, #24
    1678:	2480      	movs	r4, #128	; 0x80
    167a:	0264      	lsls	r4, r4, #9
    167c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    167e:	7854      	ldrb	r4, [r2, #1]
    1680:	2502      	movs	r5, #2
    1682:	43ac      	bics	r4, r5
    1684:	d106      	bne.n	1694 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1686:	7894      	ldrb	r4, [r2, #2]
    1688:	2c00      	cmp	r4, #0
    168a:	d120      	bne.n	16ce <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    168c:	2480      	movs	r4, #128	; 0x80
    168e:	02a4      	lsls	r4, r4, #10
    1690:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1692:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1694:	7854      	ldrb	r4, [r2, #1]
    1696:	3c01      	subs	r4, #1
    1698:	2c01      	cmp	r4, #1
    169a:	d91c      	bls.n	16d6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    169c:	040d      	lsls	r5, r1, #16
    169e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    16a0:	24a0      	movs	r4, #160	; 0xa0
    16a2:	05e4      	lsls	r4, r4, #23
    16a4:	432c      	orrs	r4, r5
    16a6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    16a8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    16aa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    16ac:	24d0      	movs	r4, #208	; 0xd0
    16ae:	0624      	lsls	r4, r4, #24
    16b0:	432c      	orrs	r4, r5
    16b2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    16b4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    16b6:	78d4      	ldrb	r4, [r2, #3]
    16b8:	2c00      	cmp	r4, #0
    16ba:	d122      	bne.n	1702 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    16bc:	035b      	lsls	r3, r3, #13
    16be:	d51c      	bpl.n	16fa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    16c0:	7893      	ldrb	r3, [r2, #2]
    16c2:	2b01      	cmp	r3, #1
    16c4:	d01e      	beq.n	1704 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    16c6:	6141      	str	r1, [r0, #20]
    16c8:	e017      	b.n	16fa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    16ca:	2300      	movs	r3, #0
    16cc:	e7d7      	b.n	167e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    16ce:	24c0      	movs	r4, #192	; 0xc0
    16d0:	02e4      	lsls	r4, r4, #11
    16d2:	4323      	orrs	r3, r4
    16d4:	e7dd      	b.n	1692 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    16d6:	4c0d      	ldr	r4, [pc, #52]	; (170c <_system_pinmux_config+0xa4>)
    16d8:	4023      	ands	r3, r4
    16da:	e7df      	b.n	169c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    16dc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    16de:	040c      	lsls	r4, r1, #16
    16e0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    16e2:	23a0      	movs	r3, #160	; 0xa0
    16e4:	05db      	lsls	r3, r3, #23
    16e6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    16e8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    16ea:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    16ec:	23d0      	movs	r3, #208	; 0xd0
    16ee:	061b      	lsls	r3, r3, #24
    16f0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    16f2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    16f4:	78d3      	ldrb	r3, [r2, #3]
    16f6:	2b00      	cmp	r3, #0
    16f8:	d103      	bne.n	1702 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    16fa:	7853      	ldrb	r3, [r2, #1]
    16fc:	3b01      	subs	r3, #1
    16fe:	2b01      	cmp	r3, #1
    1700:	d902      	bls.n	1708 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1702:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1704:	6181      	str	r1, [r0, #24]
    1706:	e7f8      	b.n	16fa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1708:	6081      	str	r1, [r0, #8]
}
    170a:	e7fa      	b.n	1702 <_system_pinmux_config+0x9a>
    170c:	fffbffff 	.word	0xfffbffff

00001710 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1710:	b510      	push	{r4, lr}
    1712:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1714:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1716:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1718:	2900      	cmp	r1, #0
    171a:	d105      	bne.n	1728 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    171c:	0943      	lsrs	r3, r0, #5
    171e:	01db      	lsls	r3, r3, #7
    1720:	2182      	movs	r1, #130	; 0x82
    1722:	05c9      	lsls	r1, r1, #23
    1724:	468c      	mov	ip, r1
    1726:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1728:	241f      	movs	r4, #31
    172a:	4020      	ands	r0, r4
    172c:	2101      	movs	r1, #1
    172e:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1730:	0018      	movs	r0, r3
    1732:	4b01      	ldr	r3, [pc, #4]	; (1738 <system_pinmux_pin_set_config+0x28>)
    1734:	4798      	blx	r3
}
    1736:	bd10      	pop	{r4, pc}
    1738:	00001669 	.word	0x00001669

0000173c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    173c:	4770      	bx	lr
	...

00001740 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1740:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1742:	4b05      	ldr	r3, [pc, #20]	; (1758 <system_init+0x18>)
    1744:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1746:	4b05      	ldr	r3, [pc, #20]	; (175c <system_init+0x1c>)
    1748:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    174a:	4b05      	ldr	r3, [pc, #20]	; (1760 <system_init+0x20>)
    174c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    174e:	4b05      	ldr	r3, [pc, #20]	; (1764 <system_init+0x24>)
    1750:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1752:	4b05      	ldr	r3, [pc, #20]	; (1768 <system_init+0x28>)
    1754:	4798      	blx	r3
}
    1756:	bd10      	pop	{r4, pc}
    1758:	000012ed 	.word	0x000012ed
    175c:	0000018d 	.word	0x0000018d
    1760:	0000173d 	.word	0x0000173d
    1764:	0000173d 	.word	0x0000173d
    1768:	0000173d 	.word	0x0000173d

0000176c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    176c:	e7fe      	b.n	176c <Dummy_Handler>
	...

00001770 <Reset_Handler>:
{
    1770:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1772:	4a17      	ldr	r2, [pc, #92]	; (17d0 <Reset_Handler+0x60>)
    1774:	4b17      	ldr	r3, [pc, #92]	; (17d4 <Reset_Handler+0x64>)
    1776:	429a      	cmp	r2, r3
    1778:	d011      	beq.n	179e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    177a:	001a      	movs	r2, r3
    177c:	4b16      	ldr	r3, [pc, #88]	; (17d8 <Reset_Handler+0x68>)
    177e:	429a      	cmp	r2, r3
    1780:	d20d      	bcs.n	179e <Reset_Handler+0x2e>
    1782:	4a16      	ldr	r2, [pc, #88]	; (17dc <Reset_Handler+0x6c>)
    1784:	3303      	adds	r3, #3
    1786:	1a9b      	subs	r3, r3, r2
    1788:	089b      	lsrs	r3, r3, #2
    178a:	3301      	adds	r3, #1
    178c:	009b      	lsls	r3, r3, #2
    178e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1790:	4810      	ldr	r0, [pc, #64]	; (17d4 <Reset_Handler+0x64>)
    1792:	490f      	ldr	r1, [pc, #60]	; (17d0 <Reset_Handler+0x60>)
    1794:	588c      	ldr	r4, [r1, r2]
    1796:	5084      	str	r4, [r0, r2]
    1798:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    179a:	429a      	cmp	r2, r3
    179c:	d1fa      	bne.n	1794 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    179e:	4a10      	ldr	r2, [pc, #64]	; (17e0 <Reset_Handler+0x70>)
    17a0:	4b10      	ldr	r3, [pc, #64]	; (17e4 <Reset_Handler+0x74>)
    17a2:	429a      	cmp	r2, r3
    17a4:	d20a      	bcs.n	17bc <Reset_Handler+0x4c>
    17a6:	43d3      	mvns	r3, r2
    17a8:	490e      	ldr	r1, [pc, #56]	; (17e4 <Reset_Handler+0x74>)
    17aa:	185b      	adds	r3, r3, r1
    17ac:	2103      	movs	r1, #3
    17ae:	438b      	bics	r3, r1
    17b0:	3304      	adds	r3, #4
    17b2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    17b4:	2100      	movs	r1, #0
    17b6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    17b8:	4293      	cmp	r3, r2
    17ba:	d1fc      	bne.n	17b6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    17bc:	4a0a      	ldr	r2, [pc, #40]	; (17e8 <Reset_Handler+0x78>)
    17be:	21ff      	movs	r1, #255	; 0xff
    17c0:	4b0a      	ldr	r3, [pc, #40]	; (17ec <Reset_Handler+0x7c>)
    17c2:	438b      	bics	r3, r1
    17c4:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    17c6:	4b0a      	ldr	r3, [pc, #40]	; (17f0 <Reset_Handler+0x80>)
    17c8:	4798      	blx	r3
        main();
    17ca:	4b0a      	ldr	r3, [pc, #40]	; (17f4 <Reset_Handler+0x84>)
    17cc:	4798      	blx	r3
    17ce:	e7fe      	b.n	17ce <Reset_Handler+0x5e>
    17d0:	00009b30 	.word	0x00009b30
    17d4:	20000000 	.word	0x20000000
    17d8:	20000168 	.word	0x20000168
    17dc:	20000004 	.word	0x20000004
    17e0:	20000168 	.word	0x20000168
    17e4:	20001028 	.word	0x20001028
    17e8:	e000ed00 	.word	0xe000ed00
    17ec:	00000000 	.word	0x00000000
    17f0:	00005af5 	.word	0x00005af5
    17f4:	00004e99 	.word	0x00004e99

000017f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    17f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17fa:	46c6      	mov	lr, r8
    17fc:	b500      	push	{lr}
    17fe:	000c      	movs	r4, r1
    1800:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1802:	2800      	cmp	r0, #0
    1804:	d10f      	bne.n	1826 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1806:	2a00      	cmp	r2, #0
    1808:	dd11      	ble.n	182e <_read+0x36>
    180a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    180c:	4e09      	ldr	r6, [pc, #36]	; (1834 <_read+0x3c>)
    180e:	4d0a      	ldr	r5, [pc, #40]	; (1838 <_read+0x40>)
    1810:	6830      	ldr	r0, [r6, #0]
    1812:	0021      	movs	r1, r4
    1814:	682b      	ldr	r3, [r5, #0]
    1816:	4798      	blx	r3
		ptr++;
    1818:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    181a:	42bc      	cmp	r4, r7
    181c:	d1f8      	bne.n	1810 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    181e:	4640      	mov	r0, r8
    1820:	bc04      	pop	{r2}
    1822:	4690      	mov	r8, r2
    1824:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1826:	2301      	movs	r3, #1
    1828:	425b      	negs	r3, r3
    182a:	4698      	mov	r8, r3
    182c:	e7f7      	b.n	181e <_read+0x26>
	for (; len > 0; --len) {
    182e:	4680      	mov	r8, r0
    1830:	e7f5      	b.n	181e <_read+0x26>
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	20000be0 	.word	0x20000be0
    1838:	20000bd8 	.word	0x20000bd8

0000183c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    183c:	b5f0      	push	{r4, r5, r6, r7, lr}
    183e:	46c6      	mov	lr, r8
    1840:	b500      	push	{lr}
    1842:	000e      	movs	r6, r1
    1844:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1846:	3801      	subs	r0, #1
    1848:	2802      	cmp	r0, #2
    184a:	d810      	bhi.n	186e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    184c:	2a00      	cmp	r2, #0
    184e:	d011      	beq.n	1874 <_write+0x38>
    1850:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1852:	4b0c      	ldr	r3, [pc, #48]	; (1884 <_write+0x48>)
    1854:	4698      	mov	r8, r3
    1856:	4f0c      	ldr	r7, [pc, #48]	; (1888 <_write+0x4c>)
    1858:	4643      	mov	r3, r8
    185a:	6818      	ldr	r0, [r3, #0]
    185c:	5d31      	ldrb	r1, [r6, r4]
    185e:	683b      	ldr	r3, [r7, #0]
    1860:	4798      	blx	r3
    1862:	2800      	cmp	r0, #0
    1864:	db08      	blt.n	1878 <_write+0x3c>
			return -1;
		}
		++nChars;
    1866:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1868:	42a5      	cmp	r5, r4
    186a:	d1f5      	bne.n	1858 <_write+0x1c>
    186c:	e006      	b.n	187c <_write+0x40>
		return -1;
    186e:	2401      	movs	r4, #1
    1870:	4264      	negs	r4, r4
    1872:	e003      	b.n	187c <_write+0x40>
	for (; len != 0; --len) {
    1874:	0014      	movs	r4, r2
    1876:	e001      	b.n	187c <_write+0x40>
			return -1;
    1878:	2401      	movs	r4, #1
    187a:	4264      	negs	r4, r4
	}
	return nChars;
}
    187c:	0020      	movs	r0, r4
    187e:	bc04      	pop	{r2}
    1880:	4690      	mov	r8, r2
    1882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1884:	20000be0 	.word	0x20000be0
    1888:	20000bdc 	.word	0x20000bdc

0000188c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    188c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    188e:	4a06      	ldr	r2, [pc, #24]	; (18a8 <_sbrk+0x1c>)
    1890:	6812      	ldr	r2, [r2, #0]
    1892:	2a00      	cmp	r2, #0
    1894:	d004      	beq.n	18a0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1896:	4a04      	ldr	r2, [pc, #16]	; (18a8 <_sbrk+0x1c>)
    1898:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    189a:	18c3      	adds	r3, r0, r3
    189c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    189e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    18a0:	4902      	ldr	r1, [pc, #8]	; (18ac <_sbrk+0x20>)
    18a2:	4a01      	ldr	r2, [pc, #4]	; (18a8 <_sbrk+0x1c>)
    18a4:	6011      	str	r1, [r2, #0]
    18a6:	e7f6      	b.n	1896 <_sbrk+0xa>
    18a8:	20000b34 	.word	0x20000b34
    18ac:	20003028 	.word	0x20003028

000018b0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    18b0:	2001      	movs	r0, #1
    18b2:	4240      	negs	r0, r0
    18b4:	4770      	bx	lr

000018b6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    18b6:	2380      	movs	r3, #128	; 0x80
    18b8:	019b      	lsls	r3, r3, #6
    18ba:	604b      	str	r3, [r1, #4]

	return 0;
}
    18bc:	2000      	movs	r0, #0
    18be:	4770      	bx	lr

000018c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    18c0:	2001      	movs	r0, #1
    18c2:	4770      	bx	lr

000018c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    18c4:	2000      	movs	r0, #0
    18c6:	4770      	bx	lr

000018c8 <Enrollment>:
volatile uint32_t g_sent = 0;
volatile uint32_t g_rec_public = 0;
volatile enum OPERATION STAGE = ENROLLMENT;
struct multiBuffer rx_element_buff[CONF_CAN0_RX_BUFFER_NUM];

uint8_t Enrollment(uint8_t node_id, uint8_t *secret_key, uint8_t *ServerPublicKey, uint8_t *ec, struct can_module * can_inst) {
    18c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ca:	46de      	mov	lr, fp
    18cc:	4657      	mov	r7, sl
    18ce:	464e      	mov	r6, r9
    18d0:	4645      	mov	r5, r8
    18d2:	b5e0      	push	{r5, r6, r7, lr}
    18d4:	b08b      	sub	sp, #44	; 0x2c
    18d6:	4681      	mov	r9, r0
    18d8:	9100      	str	r1, [sp, #0]
    18da:	9201      	str	r2, [sp, #4]
    18dc:	9e14      	ldr	r6, [sp, #80]	; 0x50
	// Recv_Obj - Buffer 4
	// Using filter 3
	bool hardcoded = true;
	uint8_t message[8];
	
	memset(message,0,8);
    18de:	2208      	movs	r2, #8
    18e0:	2100      	movs	r1, #0
    18e2:	a808      	add	r0, sp, #32
    18e4:	4bd1      	ldr	r3, [pc, #836]	; (1c2c <Enrollment+0x364>)
    18e6:	4798      	blx	r3
	STAGE = ENROLLMENT;
    18e8:	2200      	movs	r2, #0
    18ea:	4bd1      	ldr	r3, [pc, #836]	; (1c30 <Enrollment+0x368>)
    18ec:	701a      	strb	r2, [r3, #0]
 * \param[out] sd_filter  Pointer to standard filter element struct to initialize to default values
 */
static inline void can_get_standard_message_filter_element_default(
		struct can_standard_message_filter_element *sd_filter)
{
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    18ee:	4bd1      	ldr	r3, [pc, #836]	; (1c34 <Enrollment+0x36c>)
    18f0:	9307      	str	r3, [sp, #28]
	
	struct can_standard_message_filter_element sd_filter;
	
	// Get Enrollment verification
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID2 = CAN_FILTER_ENROLLMENT;
    18f2:	9b07      	ldr	r3, [sp, #28]
    18f4:	0adb      	lsrs	r3, r3, #11
    18f6:	02db      	lsls	r3, r3, #11
    18f8:	3203      	adds	r2, #3
    18fa:	4313      	orrs	r3, r2
    18fc:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFID1 = 0x411;
    18fe:	9b07      	ldr	r3, [sp, #28]
    1900:	4acd      	ldr	r2, [pc, #820]	; (1c38 <Enrollment+0x370>)
    1902:	401a      	ands	r2, r3
    1904:	4bcd      	ldr	r3, [pc, #820]	; (1c3c <Enrollment+0x374>)
    1906:	4313      	orrs	r3, r2
    1908:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFEC =
    190a:	9a07      	ldr	r2, [sp, #28]
    190c:	23e0      	movs	r3, #224	; 0xe0
    190e:	059b      	lsls	r3, r3, #22
    1910:	4313      	orrs	r3, r2
    1912:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1914:	2203      	movs	r2, #3
    1916:	a907      	add	r1, sp, #28
    1918:	0030      	movs	r0, r6
    191a:	4bc9      	ldr	r3, [pc, #804]	; (1c40 <Enrollment+0x378>)
    191c:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
    191e:	6832      	ldr	r2, [r6, #0]
    1920:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1922:	2380      	movs	r3, #128	; 0x80
    1924:	031b      	lsls	r3, r3, #12
    1926:	430b      	orrs	r3, r1
    1928:	6553      	str	r3, [r2, #84]	; 0x54
		CAN_FILTER_ENROLLMENT);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);

	while(g_rec == 0);
    192a:	4ac6      	ldr	r2, [pc, #792]	; (1c44 <Enrollment+0x37c>)
    192c:	6813      	ldr	r3, [r2, #0]
    192e:	2b00      	cmp	r3, #0
    1930:	d0fc      	beq.n	192c <Enrollment+0x64>
	g_rec = 0;
    1932:	2200      	movs	r2, #0
    1934:	4bc3      	ldr	r3, [pc, #780]	; (1c44 <Enrollment+0x37c>)
    1936:	601a      	str	r2, [r3, #0]
extern volatile uint32_t g_rec_public;

uint8_t Enrollment(uint8_t node_id, uint8_t *secret_key, uint8_t *ServerPublicKey, uint8_t *ec, struct can_module * can_inst);

inline struct can_rx_element_buffer * getNextBufferElement(struct multiBuffer * buff) {
	if (buff->last_write == buff->last_read) return NULL;
    1938:	4ac3      	ldr	r2, [pc, #780]	; (1c48 <Enrollment+0x380>)
    193a:	23cd      	movs	r3, #205	; 0xcd
    193c:	5cd3      	ldrb	r3, [r2, r3]
    193e:	21cc      	movs	r1, #204	; 0xcc
    1940:	5c52      	ldrb	r2, [r2, r1]
    1942:	429a      	cmp	r2, r3
    1944:	d050      	beq.n	19e8 <Enrollment+0x120>
	register int last_element = buff->last_read;
	
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    1946:	49c0      	ldr	r1, [pc, #768]	; (1c48 <Enrollment+0x380>)
    1948:	1c58      	adds	r0, r3, #1
    194a:	2203      	movs	r2, #3
    194c:	4002      	ands	r2, r0
    194e:	20cd      	movs	r0, #205	; 0xcd
    1950:	540a      	strb	r2, [r1, r0]
	
	return &(buff->buffers[last_element]);
    1952:	330d      	adds	r3, #13
    1954:	011b      	lsls	r3, r3, #4
    1956:	185b      	adds	r3, r3, r1
	hardcoded = (bool)(getNextBufferElement(&rx_element_buff[CAN_FILTER_ENROLLMENT])->data[0]);
    1958:	7a1c      	ldrb	r4, [r3, #8]
    195a:	0023      	movs	r3, r4
    195c:	1e5a      	subs	r2, r3, #1
    195e:	4193      	sbcs	r3, r2
    1960:	b2db      	uxtb	r3, r3
    1962:	4698      	mov	r8, r3
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1964:	4bb3      	ldr	r3, [pc, #716]	; (1c34 <Enrollment+0x36c>)
    1966:	9307      	str	r3, [sp, #28]
	
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFEC =
    1968:	9b07      	ldr	r3, [sp, #28]
    196a:	4ab8      	ldr	r2, [pc, #736]	; (1c4c <Enrollment+0x384>)
    196c:	4013      	ands	r3, r2
    196e:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_DISABLE_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1970:	2203      	movs	r2, #3
    1972:	a907      	add	r1, sp, #28
    1974:	0030      	movs	r0, r6
    1976:	4bb2      	ldr	r3, [pc, #712]	; (1c40 <Enrollment+0x378>)
    1978:	4798      	blx	r3
		CAN_FILTER_ENROLLMENT);
		
	if(hardcoded) {
    197a:	2c00      	cmp	r4, #0
    197c:	d036      	beq.n	19ec <Enrollment+0x124>
		printf("Using hardcoded values...\r\n");
    197e:	48b4      	ldr	r0, [pc, #720]	; (1c50 <Enrollment+0x388>)
    1980:	4bb4      	ldr	r3, [pc, #720]	; (1c54 <Enrollment+0x38c>)
    1982:	4798      	blx	r3
		
		memset(secret_key+16,0,16);
    1984:	9d00      	ldr	r5, [sp, #0]
    1986:	002b      	movs	r3, r5
    1988:	3310      	adds	r3, #16
    198a:	0018      	movs	r0, r3
    198c:	2210      	movs	r2, #16
    198e:	2100      	movs	r1, #0
    1990:	4ca6      	ldr	r4, [pc, #664]	; (1c2c <Enrollment+0x364>)
    1992:	47a0      	blx	r4
		memset(secret_key,node_id,16);
    1994:	2210      	movs	r2, #16
    1996:	4649      	mov	r1, r9
    1998:	0028      	movs	r0, r5
    199a:	47a0      	blx	r4
    199c:	4ba5      	ldr	r3, [pc, #660]	; (1c34 <Enrollment+0x36c>)
    199e:	9307      	str	r3, [sp, #28]
		memset(secret_key,0,32);
	}
	
	// Get Public Key (3/4 parts of it)
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID2 = CAN_FILTER_PUBLICKEY;
    19a0:	9b07      	ldr	r3, [sp, #28]
    19a2:	0adb      	lsrs	r3, r3, #11
    19a4:	02db      	lsls	r3, r3, #11
    19a6:	2204      	movs	r2, #4
    19a8:	4313      	orrs	r3, r2
    19aa:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFID1 = 0x100;
    19ac:	9b07      	ldr	r3, [sp, #28]
    19ae:	4aa2      	ldr	r2, [pc, #648]	; (1c38 <Enrollment+0x370>)
    19b0:	401a      	ands	r2, r3
    19b2:	2380      	movs	r3, #128	; 0x80
    19b4:	045b      	lsls	r3, r3, #17
    19b6:	4313      	orrs	r3, r2
    19b8:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFEC =
    19ba:	9a07      	ldr	r2, [sp, #28]
    19bc:	23e0      	movs	r3, #224	; 0xe0
    19be:	059b      	lsls	r3, r3, #22
    19c0:	4313      	orrs	r3, r2
    19c2:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    19c4:	2204      	movs	r2, #4
    19c6:	a907      	add	r1, sp, #28
    19c8:	0030      	movs	r0, r6
    19ca:	4b9d      	ldr	r3, [pc, #628]	; (1c40 <Enrollment+0x378>)
    19cc:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    19ce:	6832      	ldr	r2, [r6, #0]
    19d0:	6d51      	ldr	r1, [r2, #84]	; 0x54
    19d2:	2380      	movs	r3, #128	; 0x80
    19d4:	031b      	lsls	r3, r3, #12
    19d6:	430b      	orrs	r3, r1
    19d8:	6553      	str	r3, [r2, #84]	; 0x54
    19da:	9b01      	ldr	r3, [sp, #4]
    19dc:	469a      	mov	sl, r3
		CAN_FILTER_PUBLICKEY);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);
	
	int i;
	for(i=0; i<3; i++) {
    19de:	2400      	movs	r4, #0
		while(g_rec_public == (unsigned)i);
    19e0:	4d9d      	ldr	r5, [pc, #628]	; (1c58 <Enrollment+0x390>)
	if (buff->last_write == buff->last_read) return NULL;
    19e2:	4f99      	ldr	r7, [pc, #612]	; (1c48 <Enrollment+0x380>)
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    19e4:	46b3      	mov	fp, r6
    19e6:	e015      	b.n	1a14 <Enrollment+0x14c>
	if (buff->last_write == buff->last_read) return NULL;
    19e8:	2300      	movs	r3, #0
    19ea:	e7b5      	b.n	1958 <Enrollment+0x90>
		printf("PUF stuff not available.\r\n");
    19ec:	489b      	ldr	r0, [pc, #620]	; (1c5c <Enrollment+0x394>)
    19ee:	4b99      	ldr	r3, [pc, #612]	; (1c54 <Enrollment+0x38c>)
    19f0:	4798      	blx	r3
		memset(secret_key,0,32);
    19f2:	2220      	movs	r2, #32
    19f4:	2100      	movs	r1, #0
    19f6:	9800      	ldr	r0, [sp, #0]
    19f8:	4b8c      	ldr	r3, [pc, #560]	; (1c2c <Enrollment+0x364>)
    19fa:	4798      	blx	r3
    19fc:	e7ce      	b.n	199c <Enrollment+0xd4>
    19fe:	2100      	movs	r1, #0
		memcpy(&ServerPublicKey[i*8],getNextBufferElement(&rx_element_buff[CAN_FILTER_PUBLICKEY])->data,8);
    1a00:	3108      	adds	r1, #8
    1a02:	2208      	movs	r2, #8
    1a04:	4b96      	ldr	r3, [pc, #600]	; (1c60 <Enrollment+0x398>)
    1a06:	4798      	blx	r3
	for(i=0; i<3; i++) {
    1a08:	3401      	adds	r4, #1
    1a0a:	2308      	movs	r3, #8
    1a0c:	469c      	mov	ip, r3
    1a0e:	44e2      	add	sl, ip
    1a10:	2c03      	cmp	r4, #3
    1a12:	d019      	beq.n	1a48 <Enrollment+0x180>
		while(g_rec_public == (unsigned)i);
    1a14:	682b      	ldr	r3, [r5, #0]
    1a16:	42a3      	cmp	r3, r4
    1a18:	d0fc      	beq.n	1a14 <Enrollment+0x14c>
		memcpy(&ServerPublicKey[i*8],getNextBufferElement(&rx_element_buff[CAN_FILTER_PUBLICKEY])->data,8);
    1a1a:	4650      	mov	r0, sl
    1a1c:	2312      	movs	r3, #18
    1a1e:	33ff      	adds	r3, #255	; 0xff
    1a20:	5cfb      	ldrb	r3, [r7, r3]
    1a22:	2288      	movs	r2, #136	; 0x88
    1a24:	0052      	lsls	r2, r2, #1
    1a26:	5cba      	ldrb	r2, [r7, r2]
    1a28:	429a      	cmp	r2, r3
    1a2a:	d0e8      	beq.n	19fe <Enrollment+0x136>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    1a2c:	1c59      	adds	r1, r3, #1
    1a2e:	2203      	movs	r2, #3
    1a30:	400a      	ands	r2, r1
    1a32:	2112      	movs	r1, #18
    1a34:	31ff      	adds	r1, #255	; 0xff
    1a36:	4e84      	ldr	r6, [pc, #528]	; (1c48 <Enrollment+0x380>)
    1a38:	5472      	strb	r2, [r6, r1]
	return &(buff->buffers[last_element]);
    1a3a:	011b      	lsls	r3, r3, #4
    1a3c:	3315      	adds	r3, #21
    1a3e:	33ff      	adds	r3, #255	; 0xff
    1a40:	0019      	movs	r1, r3
    1a42:	46b4      	mov	ip, r6
    1a44:	4461      	add	r1, ip
    1a46:	e7db      	b.n	1a00 <Enrollment+0x138>
    1a48:	465e      	mov	r6, fp
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1a4a:	4b7a      	ldr	r3, [pc, #488]	; (1c34 <Enrollment+0x36c>)
    1a4c:	9307      	str	r3, [sp, #28]
	}
	
	// Get last, special part of the server public key (4/4)
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID1 = 0x100 + node_id;
    1a4e:	9b07      	ldr	r3, [sp, #28]
    1a50:	464a      	mov	r2, r9
    1a52:	3201      	adds	r2, #1
    1a54:	32ff      	adds	r2, #255	; 0xff
    1a56:	0412      	lsls	r2, r2, #16
    1a58:	4977      	ldr	r1, [pc, #476]	; (1c38 <Enrollment+0x370>)
    1a5a:	400b      	ands	r3, r1
    1a5c:	4313      	orrs	r3, r2
    1a5e:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFID2 = CAN_FILTER_PUBLICKEY;
    1a60:	9b07      	ldr	r3, [sp, #28]
    1a62:	0adb      	lsrs	r3, r3, #11
    1a64:	02db      	lsls	r3, r3, #11
    1a66:	2204      	movs	r2, #4
    1a68:	4313      	orrs	r3, r2
    1a6a:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFEC =
    1a6c:	9a07      	ldr	r2, [sp, #28]
    1a6e:	23e0      	movs	r3, #224	; 0xe0
    1a70:	059b      	lsls	r3, r3, #22
    1a72:	4313      	orrs	r3, r2
    1a74:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1a76:	2204      	movs	r2, #4
    1a78:	a907      	add	r1, sp, #28
    1a7a:	4658      	mov	r0, fp
    1a7c:	4b70      	ldr	r3, [pc, #448]	; (1c40 <Enrollment+0x378>)
    1a7e:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    1a80:	6832      	ldr	r2, [r6, #0]
    1a82:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1a84:	2380      	movs	r3, #128	; 0x80
    1a86:	031b      	lsls	r3, r3, #12
    1a88:	430b      	orrs	r3, r1
    1a8a:	6553      	str	r3, [r2, #84]	; 0x54
		CAN_FILTER_PUBLICKEY);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);

	while(g_rec_public == i);
    1a8c:	4a72      	ldr	r2, [pc, #456]	; (1c58 <Enrollment+0x390>)
    1a8e:	6813      	ldr	r3, [r2, #0]
    1a90:	2b03      	cmp	r3, #3
    1a92:	d0fc      	beq.n	1a8e <Enrollment+0x1c6>
	memcpy(&ServerPublicKey[i*8],getNextBufferElement(&rx_element_buff[CAN_FILTER_PUBLICKEY])->data,8);
    1a94:	9801      	ldr	r0, [sp, #4]
    1a96:	3018      	adds	r0, #24
	if (buff->last_write == buff->last_read) return NULL;
    1a98:	4a6b      	ldr	r2, [pc, #428]	; (1c48 <Enrollment+0x380>)
    1a9a:	2312      	movs	r3, #18
    1a9c:	33ff      	adds	r3, #255	; 0xff
    1a9e:	5cd3      	ldrb	r3, [r2, r3]
    1aa0:	2188      	movs	r1, #136	; 0x88
    1aa2:	0049      	lsls	r1, r1, #1
    1aa4:	5c52      	ldrb	r2, [r2, r1]
    1aa6:	429a      	cmp	r2, r3
    1aa8:	d100      	bne.n	1aac <Enrollment+0x1e4>
    1aaa:	e0bd      	b.n	1c28 <Enrollment+0x360>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    1aac:	4c66      	ldr	r4, [pc, #408]	; (1c48 <Enrollment+0x380>)
    1aae:	1c59      	adds	r1, r3, #1
    1ab0:	2203      	movs	r2, #3
    1ab2:	400a      	ands	r2, r1
    1ab4:	2112      	movs	r1, #18
    1ab6:	31ff      	adds	r1, #255	; 0xff
    1ab8:	5462      	strb	r2, [r4, r1]
	return &(buff->buffers[last_element]);
    1aba:	011b      	lsls	r3, r3, #4
    1abc:	3315      	adds	r3, #21
    1abe:	33ff      	adds	r3, #255	; 0xff
    1ac0:	1919      	adds	r1, r3, r4
    1ac2:	3108      	adds	r1, #8
    1ac4:	2208      	movs	r2, #8
    1ac6:	4b66      	ldr	r3, [pc, #408]	; (1c60 <Enrollment+0x398>)
    1ac8:	4798      	blx	r3
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1aca:	4b5a      	ldr	r3, [pc, #360]	; (1c34 <Enrollment+0x36c>)
    1acc:	9307      	str	r3, [sp, #28]
	
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFEC =
    1ace:	9b07      	ldr	r3, [sp, #28]
    1ad0:	4a5e      	ldr	r2, [pc, #376]	; (1c4c <Enrollment+0x384>)
    1ad2:	4013      	ands	r3, r2
    1ad4:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_DISABLE_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1ad6:	2204      	movs	r2, #4
    1ad8:	a907      	add	r1, sp, #28
    1ada:	0030      	movs	r0, r6
    1adc:	4b58      	ldr	r3, [pc, #352]	; (1c40 <Enrollment+0x378>)
    1ade:	4798      	blx	r3
		CAN_FILTER_PUBLICKEY);
	
	printf("Ready to transmit response\r\n");
    1ae0:	4860      	ldr	r0, [pc, #384]	; (1c64 <Enrollment+0x39c>)
    1ae2:	4b5c      	ldr	r3, [pc, #368]	; (1c54 <Enrollment+0x38c>)
    1ae4:	4798      	blx	r3
	printf("Response: ");
    1ae6:	4860      	ldr	r0, [pc, #384]	; (1c68 <Enrollment+0x3a0>)
    1ae8:	4b60      	ldr	r3, [pc, #384]	; (1c6c <Enrollment+0x3a4>)
    1aea:	4798      	blx	r3
    1aec:	9c00      	ldr	r4, [sp, #0]
    1aee:	0025      	movs	r5, r4
    1af0:	3410      	adds	r4, #16
	for(i = 0; i < 16; i++) {
		printf("%02x",secret_key[i]);
    1af2:	4f5e      	ldr	r7, [pc, #376]	; (1c6c <Enrollment+0x3a4>)
    1af4:	7829      	ldrb	r1, [r5, #0]
    1af6:	485e      	ldr	r0, [pc, #376]	; (1c70 <Enrollment+0x3a8>)
    1af8:	47b8      	blx	r7
    1afa:	3501      	adds	r5, #1
	for(i = 0; i < 16; i++) {
    1afc:	42a5      	cmp	r5, r4
    1afe:	d1f9      	bne.n	1af4 <Enrollment+0x22c>
	}
	printf("\r\n");
    1b00:	485c      	ldr	r0, [pc, #368]	; (1c74 <Enrollment+0x3ac>)
    1b02:	4b54      	ldr	r3, [pc, #336]	; (1c54 <Enrollment+0x38c>)
    1b04:	4798      	blx	r3
	tx_element->T0.reg = 0;
    1b06:	2300      	movs	r3, #0
    1b08:	9303      	str	r3, [sp, #12]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    1b0a:	2388      	movs	r3, #136	; 0x88
    1b0c:	041b      	lsls	r3, r3, #16
    1b0e:	9304      	str	r3, [sp, #16]
	// Send the response (2 packets)
	struct can_tx_element tx_element;

	// Part 1:
	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x200+node_id);
    1b10:	9b03      	ldr	r3, [sp, #12]
    1b12:	2480      	movs	r4, #128	; 0x80
    1b14:	00a4      	lsls	r4, r4, #2
    1b16:	444c      	add	r4, r9
    1b18:	04a4      	lsls	r4, r4, #18
    1b1a:	4a57      	ldr	r2, [pc, #348]	; (1c78 <Enrollment+0x3b0>)
    1b1c:	4014      	ands	r4, r2
    1b1e:	4323      	orrs	r3, r4
    1b20:	9303      	str	r3, [sp, #12]
	tx_element.T1.bit.DLC = 8;
    1b22:	9b04      	ldr	r3, [sp, #16]
    1b24:	4a55      	ldr	r2, [pc, #340]	; (1c7c <Enrollment+0x3b4>)
    1b26:	401a      	ands	r2, r3
    1b28:	2380      	movs	r3, #128	; 0x80
    1b2a:	031b      	lsls	r3, r3, #12
    1b2c:	4313      	orrs	r3, r2
    1b2e:	9304      	str	r3, [sp, #16]
	memcpy(tx_element.data,secret_key,8);
    1b30:	2208      	movs	r2, #8
    1b32:	9900      	ldr	r1, [sp, #0]
    1b34:	a805      	add	r0, sp, #20
    1b36:	4b4a      	ldr	r3, [pc, #296]	; (1c60 <Enrollment+0x398>)
    1b38:	4798      	blx	r3
	can_set_tx_buffer_element(can_inst, &tx_element,
    1b3a:	2205      	movs	r2, #5
    1b3c:	a903      	add	r1, sp, #12
    1b3e:	0030      	movs	r0, r6
    1b40:	4b4f      	ldr	r3, [pc, #316]	; (1c80 <Enrollment+0x3b8>)
    1b42:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    1b44:	6833      	ldr	r3, [r6, #0]
    1b46:	699a      	ldr	r2, [r3, #24]
    1b48:	0792      	lsls	r2, r2, #30
    1b4a:	d402      	bmi.n	1b52 <Enrollment+0x28a>
	module_inst->hw->TXBAR.reg = trig_mask;
    1b4c:	2120      	movs	r1, #32
    1b4e:	22d0      	movs	r2, #208	; 0xd0
    1b50:	5099      	str	r1, [r3, r2]
	return module_inst->hw->TXBTO.reg;
    1b52:	6830      	ldr	r0, [r6, #0]
    1b54:	21d8      	movs	r1, #216	; 0xd8
		CAN_TX_FILTER_BUFFER_INDEX);
	can_tx_transfer_request(can_inst, 1 << CAN_TX_FILTER_BUFFER_INDEX);
	
	while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_TX_FILTER_BUFFER_INDEX)));
    1b56:	2220      	movs	r2, #32
    1b58:	5843      	ldr	r3, [r0, r1]
    1b5a:	421a      	tst	r2, r3
    1b5c:	d0fc      	beq.n	1b58 <Enrollment+0x290>
    1b5e:	4b49      	ldr	r3, [pc, #292]	; (1c84 <Enrollment+0x3bc>)
    1b60:	3b01      	subs	r3, #1
	
	// best delay function 2021
	for(i = 0; i < 300000; i++);
    1b62:	2b00      	cmp	r3, #0
    1b64:	d1fc      	bne.n	1b60 <Enrollment+0x298>
	tx_element->T0.reg = 0;
    1b66:	9303      	str	r3, [sp, #12]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    1b68:	2388      	movs	r3, #136	; 0x88
    1b6a:	041b      	lsls	r3, r3, #16
    1b6c:	9304      	str	r3, [sp, #16]
	
	// Part 2:
	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x200+node_id);
    1b6e:	9b03      	ldr	r3, [sp, #12]
    1b70:	431c      	orrs	r4, r3
    1b72:	9403      	str	r4, [sp, #12]
	tx_element.T1.bit.DLC = 8;
    1b74:	9b04      	ldr	r3, [sp, #16]
    1b76:	4a41      	ldr	r2, [pc, #260]	; (1c7c <Enrollment+0x3b4>)
    1b78:	401a      	ands	r2, r3
    1b7a:	2380      	movs	r3, #128	; 0x80
    1b7c:	031b      	lsls	r3, r3, #12
    1b7e:	4313      	orrs	r3, r2
    1b80:	9304      	str	r3, [sp, #16]
	memcpy(tx_element.data,&secret_key[8],8);
    1b82:	9900      	ldr	r1, [sp, #0]
    1b84:	3108      	adds	r1, #8
    1b86:	2208      	movs	r2, #8
    1b88:	a805      	add	r0, sp, #20
    1b8a:	4b35      	ldr	r3, [pc, #212]	; (1c60 <Enrollment+0x398>)
    1b8c:	4798      	blx	r3
	can_set_tx_buffer_element(can_inst, &tx_element,
    1b8e:	2205      	movs	r2, #5
    1b90:	a903      	add	r1, sp, #12
    1b92:	0030      	movs	r0, r6
    1b94:	4b3a      	ldr	r3, [pc, #232]	; (1c80 <Enrollment+0x3b8>)
    1b96:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    1b98:	6833      	ldr	r3, [r6, #0]
    1b9a:	699a      	ldr	r2, [r3, #24]
    1b9c:	0792      	lsls	r2, r2, #30
    1b9e:	d402      	bmi.n	1ba6 <Enrollment+0x2de>
	module_inst->hw->TXBAR.reg = trig_mask;
    1ba0:	2120      	movs	r1, #32
    1ba2:	22d0      	movs	r2, #208	; 0xd0
    1ba4:	5099      	str	r1, [r3, r2]
	return module_inst->hw->TXBTO.reg;
    1ba6:	6830      	ldr	r0, [r6, #0]
    1ba8:	21d8      	movs	r1, #216	; 0xd8
		CAN_TX_FILTER_BUFFER_INDEX);
	can_tx_transfer_request(can_inst, 1 << CAN_TX_FILTER_BUFFER_INDEX);
	
	while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_TX_FILTER_BUFFER_INDEX)));
    1baa:	2220      	movs	r2, #32
    1bac:	5843      	ldr	r3, [r0, r1]
    1bae:	421a      	tst	r2, r3
    1bb0:	d0fc      	beq.n	1bac <Enrollment+0x2e4>
	
	
	// Wait for final message from server confirming enrollment has completed
	printf("Last part\r\n");
    1bb2:	4835      	ldr	r0, [pc, #212]	; (1c88 <Enrollment+0x3c0>)
    1bb4:	4b27      	ldr	r3, [pc, #156]	; (1c54 <Enrollment+0x38c>)
    1bb6:	4798      	blx	r3
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1bb8:	4b1e      	ldr	r3, [pc, #120]	; (1c34 <Enrollment+0x36c>)
    1bba:	9307      	str	r3, [sp, #28]
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID2 = CAN_FILTER_ENROLLMENT;
    1bbc:	9b07      	ldr	r3, [sp, #28]
    1bbe:	0adb      	lsrs	r3, r3, #11
    1bc0:	02db      	lsls	r3, r3, #11
    1bc2:	2203      	movs	r2, #3
    1bc4:	4313      	orrs	r3, r2
    1bc6:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFID1 = 0x411;
    1bc8:	9b07      	ldr	r3, [sp, #28]
    1bca:	4a1b      	ldr	r2, [pc, #108]	; (1c38 <Enrollment+0x370>)
    1bcc:	401a      	ands	r2, r3
    1bce:	4b1b      	ldr	r3, [pc, #108]	; (1c3c <Enrollment+0x374>)
    1bd0:	4313      	orrs	r3, r2
    1bd2:	9307      	str	r3, [sp, #28]
	sd_filter.S0.bit.SFEC =
    1bd4:	9a07      	ldr	r2, [sp, #28]
    1bd6:	23e0      	movs	r3, #224	; 0xe0
    1bd8:	059b      	lsls	r3, r3, #22
    1bda:	4313      	orrs	r3, r2
    1bdc:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1bde:	2203      	movs	r2, #3
    1be0:	a907      	add	r1, sp, #28
    1be2:	0030      	movs	r0, r6
    1be4:	4b16      	ldr	r3, [pc, #88]	; (1c40 <Enrollment+0x378>)
    1be6:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    1be8:	6832      	ldr	r2, [r6, #0]
    1bea:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1bec:	2380      	movs	r3, #128	; 0x80
    1bee:	031b      	lsls	r3, r3, #12
    1bf0:	430b      	orrs	r3, r1
    1bf2:	6553      	str	r3, [r2, #84]	; 0x54
		CAN_FILTER_ENROLLMENT);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);
	
	while(g_rec == 0);
    1bf4:	4a13      	ldr	r2, [pc, #76]	; (1c44 <Enrollment+0x37c>)
    1bf6:	6813      	ldr	r3, [r2, #0]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d0fc      	beq.n	1bf6 <Enrollment+0x32e>
	g_rec = 0;
    1bfc:	2200      	movs	r2, #0
    1bfe:	4b11      	ldr	r3, [pc, #68]	; (1c44 <Enrollment+0x37c>)
    1c00:	601a      	str	r2, [r3, #0]
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    1c02:	4b0c      	ldr	r3, [pc, #48]	; (1c34 <Enrollment+0x36c>)
    1c04:	9307      	str	r3, [sp, #28]
	
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFEC =
    1c06:	9b07      	ldr	r3, [sp, #28]
    1c08:	4a10      	ldr	r2, [pc, #64]	; (1c4c <Enrollment+0x384>)
    1c0a:	4013      	ands	r3, r2
    1c0c:	9307      	str	r3, [sp, #28]
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_DISABLE_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    1c0e:	2203      	movs	r2, #3
    1c10:	a907      	add	r1, sp, #28
    1c12:	0030      	movs	r0, r6
    1c14:	4b0a      	ldr	r3, [pc, #40]	; (1c40 <Enrollment+0x378>)
    1c16:	4798      	blx	r3
		CAN_FILTER_ENROLLMENT);

	return hardcoded;
    1c18:	4640      	mov	r0, r8
    1c1a:	b00b      	add	sp, #44	; 0x2c
    1c1c:	bc3c      	pop	{r2, r3, r4, r5}
    1c1e:	4690      	mov	r8, r2
    1c20:	4699      	mov	r9, r3
    1c22:	46a2      	mov	sl, r4
    1c24:	46ab      	mov	fp, r5
    1c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buff->last_write == buff->last_read) return NULL;
    1c28:	2100      	movs	r1, #0
    1c2a:	e74a      	b.n	1ac2 <Enrollment+0x1fa>
    1c2c:	00005b87 	.word	0x00005b87
    1c30:	20000b38 	.word	0x20000b38
    1c34:	880007ff 	.word	0x880007ff
    1c38:	f800ffff 	.word	0xf800ffff
    1c3c:	04110000 	.word	0x04110000
    1c40:	0000050d 	.word	0x0000050d
    1c44:	20000b3c 	.word	0x20000b3c
    1c48:	20000be4 	.word	0x20000be4
    1c4c:	c7ffffff 	.word	0xc7ffffff
    1c50:	00006c94 	.word	0x00006c94
    1c54:	00005ddd 	.word	0x00005ddd
    1c58:	20000b40 	.word	0x20000b40
    1c5c:	00006cb0 	.word	0x00006cb0
    1c60:	00005b51 	.word	0x00005b51
    1c64:	00006ccc 	.word	0x00006ccc
    1c68:	00006ce8 	.word	0x00006ce8
    1c6c:	00005ce9 	.word	0x00005ce9
    1c70:	00006cf4 	.word	0x00006cf4
    1c74:	00009a0c 	.word	0x00009a0c
    1c78:	1ffc0000 	.word	0x1ffc0000
    1c7c:	fff0ffff 	.word	0xfff0ffff
    1c80:	000005e9 	.word	0x000005e9
    1c84:	000493e0 	.word	0x000493e0
    1c88:	00006cfc 	.word	0x00006cfc

00001c8c <is_zero_ct>:
static digit_t mask4000 = (digit_t)1 << (sizeof(digit_t)*8 - 2);
static digit_t mask7fff = (digit_t)(-1) >> 1;


bool is_zero_ct(digit_t* a, unsigned int nwords)
{ // Check if multiprecision element is zero
    1c8c:	b510      	push	{r4, lr}
    digit_t x;
    unsigned int i;

    x = a[0];
    1c8e:	6802      	ldr	r2, [r0, #0]
    for (i = 1; i < nwords; i++) {
    1c90:	2901      	cmp	r1, #1
    1c92:	d906      	bls.n	1ca2 <is_zero_ct+0x16>
    1c94:	1d03      	adds	r3, r0, #4
    1c96:	0089      	lsls	r1, r1, #2
    1c98:	1840      	adds	r0, r0, r1
        x |= a[i];
    1c9a:	cb10      	ldmia	r3!, {r4}
    1c9c:	4322      	orrs	r2, r4
    for (i = 1; i < nwords; i++) {
    1c9e:	4283      	cmp	r3, r0
    1ca0:	d1fb      	bne.n	1c9a <is_zero_ct+0xe>
    }

    return (bool)(1 ^ ((x | (0-x)) >> (RADIX-1)));
    1ca2:	4250      	negs	r0, r2
    1ca4:	4310      	orrs	r0, r2
    1ca6:	0fc0      	lsrs	r0, r0, #31
    1ca8:	3801      	subs	r0, #1
    1caa:	4240      	negs	r0, r0
}
    1cac:	bd10      	pop	{r4, pc}
	...

00001cb0 <encode>:


void encode(point_t P, unsigned char* Pencoded)
{ // Encode point P
    1cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cb2:	0005      	movs	r5, r0
    1cb4:	000e      	movs	r6, r1
  // SECURITY NOTE: this function does not run in constant time.
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    1cb6:	69c7      	ldr	r7, [r0, #28]
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    1cb8:	68c4      	ldr	r4, [r0, #12]

    memmove(Pencoded, P->y, 32);
    1cba:	0001      	movs	r1, r0
    1cbc:	3120      	adds	r1, #32
    1cbe:	2220      	movs	r2, #32
    1cc0:	0030      	movs	r0, r6
    1cc2:	4b0b      	ldr	r3, [pc, #44]	; (1cf0 <encode+0x40>)
    1cc4:	4798      	blx	r3
    if (is_zero_ct((digit_t*)P->x, NWORDS_FIELD) == true) {
    1cc6:	2104      	movs	r1, #4
    1cc8:	0028      	movs	r0, r5
    1cca:	4b0a      	ldr	r3, [pc, #40]	; (1cf4 <encode+0x44>)
    1ccc:	4798      	blx	r3
    1cce:	2800      	cmp	r0, #0
    1cd0:	d106      	bne.n	1ce0 <encode+0x30>
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    1cd2:	0064      	lsls	r4, r4, #1
    1cd4:	0fe4      	lsrs	r4, r4, #31
    1cd6:	07e4      	lsls	r4, r4, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    } else {
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp2;
    1cd8:	69f3      	ldr	r3, [r6, #28]
    1cda:	431c      	orrs	r4, r3
    1cdc:	61f4      	str	r4, [r6, #28]
    }
}
    1cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    1ce0:	007f      	lsls	r7, r7, #1
    1ce2:	0fff      	lsrs	r7, r7, #31
    1ce4:	07ff      	lsls	r7, r7, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    1ce6:	69f3      	ldr	r3, [r6, #28]
    1ce8:	431f      	orrs	r7, r3
    1cea:	61f7      	str	r7, [r6, #28]
    1cec:	e7f7      	b.n	1cde <encode+0x2e>
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	00005b63 	.word	0x00005b63
    1cf4:	00001c8d 	.word	0x00001c8d

00001cf8 <decode>:


ECCRYPTO_STATUS decode(const unsigned char* Pencoded, point_t P)
{ // Decode point P
    1cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cfa:	46c6      	mov	lr, r8
    1cfc:	b500      	push	{lr}
    1cfe:	4c87      	ldr	r4, [pc, #540]	; (1f1c <decode+0x224>)
    1d00:	44a5      	add	sp, r4
    1d02:	0004      	movs	r4, r0
    1d04:	000f      	movs	r7, r1
  // SECURITY NOTE: this function does not run in constant time.
    velm_t r, t, t0, t1, t2, t3, t4;
    v2elm_t u, v, one = {0};
    1d06:	2228      	movs	r2, #40	; 0x28
    1d08:	2100      	movs	r1, #0
    1d0a:	a849      	add	r0, sp, #292	; 0x124
    1d0c:	4b84      	ldr	r3, [pc, #528]	; (1f20 <decode+0x228>)
    1d0e:	4798      	blx	r3
    digit_t sign_dec;
    vpoint_extproj_t R;
    vpoint_t VP;
    unsigned int i, sign;

    one[0] = 1;
    1d10:	2301      	movs	r3, #1
    1d12:	9349      	str	r3, [sp, #292]	; 0x124
    memmove((unsigned char*)P->y, Pencoded, 32);   // Decoding y-coordinate and sign
    1d14:	331f      	adds	r3, #31
    1d16:	469c      	mov	ip, r3
    1d18:	44bc      	add	ip, r7
    1d1a:	4663      	mov	r3, ip
    1d1c:	4665      	mov	r5, ip
    1d1e:	9301      	str	r3, [sp, #4]
    1d20:	2220      	movs	r2, #32
    1d22:	0021      	movs	r1, r4
    1d24:	0018      	movs	r0, r3
    1d26:	4b7f      	ldr	r3, [pc, #508]	; (1f24 <decode+0x22c>)
    1d28:	4798      	blx	r3
    sign = (unsigned int)(Pencoded[31] >> 7);
    1d2a:	7fe3      	ldrb	r3, [r4, #31]
    1d2c:	09db      	lsrs	r3, r3, #7
    1d2e:	4698      	mov	r8, r3
    P->y[1][NWORDS_FIELD-1] &= mask7fff;
    1d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1d32:	005b      	lsls	r3, r3, #1
    1d34:	085b      	lsrs	r3, r3, #1
    1d36:	63fb      	str	r3, [r7, #60]	; 0x3c
    from_std_to_ext(P->y, VP->y);
    1d38:	a90d      	add	r1, sp, #52	; 0x34
    1d3a:	0028      	movs	r0, r5
    1d3c:	4b7a      	ldr	r3, [pc, #488]	; (1f28 <decode+0x230>)
    1d3e:	4798      	blx	r3

    v2sqr1271(VP->y, u);
    1d40:	a95d      	add	r1, sp, #372	; 0x174
    1d42:	a80d      	add	r0, sp, #52	; 0x34
    1d44:	4b79      	ldr	r3, [pc, #484]	; (1f2c <decode+0x234>)
    1d46:	4798      	blx	r3
    v2mul1271(u, (digit_t*)&PARAMETER_d, v);
    1d48:	aa53      	add	r2, sp, #332	; 0x14c
    1d4a:	4979      	ldr	r1, [pc, #484]	; (1f30 <decode+0x238>)
    1d4c:	a85d      	add	r0, sp, #372	; 0x174
    1d4e:	4b79      	ldr	r3, [pc, #484]	; (1f34 <decode+0x23c>)
    1d50:	4798      	blx	r3
    v2sub1271(u, one, u);
    1d52:	aa5d      	add	r2, sp, #372	; 0x174
    1d54:	a949      	add	r1, sp, #292	; 0x124
    1d56:	0010      	movs	r0, r2
    1d58:	4b77      	ldr	r3, [pc, #476]	; (1f38 <decode+0x240>)
    1d5a:	4798      	blx	r3
    v2add1271(v, one, v);
    1d5c:	aa53      	add	r2, sp, #332	; 0x14c
    1d5e:	a949      	add	r1, sp, #292	; 0x124
    1d60:	0010      	movs	r0, r2
    1d62:	4b76      	ldr	r3, [pc, #472]	; (1f3c <decode+0x244>)
    1d64:	4798      	blx	r3

    vsqr1271(&v[0], t0);                              // t0 = v0^2
    1d66:	a97b      	add	r1, sp, #492	; 0x1ec
    1d68:	a853      	add	r0, sp, #332	; 0x14c
    1d6a:	4c75      	ldr	r4, [pc, #468]	; (1f40 <decode+0x248>)
    1d6c:	47a0      	blx	r4
    vsqr1271(&v[VWORDS_FIELD], t1);                   // t1 = v1^2
    1d6e:	a976      	add	r1, sp, #472	; 0x1d8
    1d70:	a858      	add	r0, sp, #352	; 0x160
    1d72:	47a0      	blx	r4
    vadd1271(t0, t1, t0);                             // t0 = t0+t1
    1d74:	aa7b      	add	r2, sp, #492	; 0x1ec
    1d76:	a976      	add	r1, sp, #472	; 0x1d8
    1d78:	0010      	movs	r0, r2
    1d7a:	4e72      	ldr	r6, [pc, #456]	; (1f44 <decode+0x24c>)
    1d7c:	47b0      	blx	r6
    vmul1271(&u[0], &v[0], t1);                       // t1 = u0*v0
    1d7e:	aa76      	add	r2, sp, #472	; 0x1d8
    1d80:	a953      	add	r1, sp, #332	; 0x14c
    1d82:	a85d      	add	r0, sp, #372	; 0x174
    1d84:	4d70      	ldr	r5, [pc, #448]	; (1f48 <decode+0x250>)
    1d86:	47a8      	blx	r5
    vmul1271(&u[VWORDS_FIELD], &v[VWORDS_FIELD], t2); // t2 = u1*v1 
    1d88:	aa71      	add	r2, sp, #452	; 0x1c4
    1d8a:	a958      	add	r1, sp, #352	; 0x160
    1d8c:	a862      	add	r0, sp, #392	; 0x188
    1d8e:	47a8      	blx	r5
    vadd1271(t1, t2, t1);                             // t1 = t1+t2 
    1d90:	aa76      	add	r2, sp, #472	; 0x1d8
    1d92:	a971      	add	r1, sp, #452	; 0x1c4
    1d94:	0010      	movs	r0, r2
    1d96:	47b0      	blx	r6
    vmul1271(&u[VWORDS_FIELD], &v[0], t2);            // t2 = u1*v0
    1d98:	aa71      	add	r2, sp, #452	; 0x1c4
    1d9a:	a953      	add	r1, sp, #332	; 0x14c
    1d9c:	a862      	add	r0, sp, #392	; 0x188
    1d9e:	47a8      	blx	r5
    vmul1271(&u[0], &v[VWORDS_FIELD], t3);            // t3 = u0*v1
    1da0:	aa6c      	add	r2, sp, #432	; 0x1b0
    1da2:	a958      	add	r1, sp, #352	; 0x160
    1da4:	a85d      	add	r0, sp, #372	; 0x174
    1da6:	47a8      	blx	r5
    vsub1271(t2, t3, t2);                             // t2 = t2-t3 
    1da8:	aa71      	add	r2, sp, #452	; 0x1c4
    1daa:	a96c      	add	r1, sp, #432	; 0x1b0
    1dac:	0010      	movs	r0, r2
    1dae:	4b67      	ldr	r3, [pc, #412]	; (1f4c <decode+0x254>)
    1db0:	4798      	blx	r3
    vsqr1271(t1, t3);                                 // t3 = t1^2    
    1db2:	a96c      	add	r1, sp, #432	; 0x1b0
    1db4:	a876      	add	r0, sp, #472	; 0x1d8
    1db6:	47a0      	blx	r4
    vsqr1271(t2, t4);                                 // t4 = t2^2                   
    1db8:	a967      	add	r1, sp, #412	; 0x19c
    1dba:	a871      	add	r0, sp, #452	; 0x1c4
    1dbc:	47a0      	blx	r4
    vadd1271(t3, t4, t3);                             // t3 = t3+t4
    1dbe:	aa6c      	add	r2, sp, #432	; 0x1b0
    1dc0:	a967      	add	r1, sp, #412	; 0x19c
    1dc2:	0010      	movs	r0, r2
    1dc4:	47b0      	blx	r6
    1dc6:	247d      	movs	r4, #125	; 0x7d
    for (i = 0; i < 125; i++) {                       // t3 = t3^(2^125)
        vsqr1271(t3, t3);
    1dc8:	4d5d      	ldr	r5, [pc, #372]	; (1f40 <decode+0x248>)
    1dca:	a96c      	add	r1, sp, #432	; 0x1b0
    1dcc:	0008      	movs	r0, r1
    1dce:	47a8      	blx	r5
    1dd0:	3c01      	subs	r4, #1
    for (i = 0; i < 125; i++) {                       // t3 = t3^(2^125)
    1dd2:	2c00      	cmp	r4, #0
    1dd4:	d1f9      	bne.n	1dca <decode+0xd2>
    }

    vadd1271(t1, t3, t);                           // t = t1+t3
    1dd6:	aa80      	add	r2, sp, #512	; 0x200
    1dd8:	a96c      	add	r1, sp, #432	; 0x1b0
    1dda:	a876      	add	r0, sp, #472	; 0x1d8
    1ddc:	4b59      	ldr	r3, [pc, #356]	; (1f44 <decode+0x24c>)
    1dde:	4798      	blx	r3
    vmod1271(t, t);
    1de0:	a980      	add	r1, sp, #512	; 0x200
    1de2:	0008      	movs	r0, r1
    1de4:	4b5a      	ldr	r3, [pc, #360]	; (1f50 <decode+0x258>)
    1de6:	4798      	blx	r3
    if (is_zero_ct(t, VWORDS_FIELD) == true) {
    1de8:	2105      	movs	r1, #5
    1dea:	a880      	add	r0, sp, #512	; 0x200
    1dec:	4b59      	ldr	r3, [pc, #356]	; (1f54 <decode+0x25c>)
    1dee:	4798      	blx	r3
    1df0:	2800      	cmp	r0, #0
    1df2:	d000      	beq.n	1df6 <decode+0xfe>
    1df4:	e073      	b.n	1ede <decode+0x1e6>
        vsub1271(t1, t3, t);                       // t = t1-t3
    }
    vadd1271(t, t, t);                             // t = 2*t 
    1df6:	aa80      	add	r2, sp, #512	; 0x200
    1df8:	0011      	movs	r1, r2
    1dfa:	0010      	movs	r0, r2
    1dfc:	4b51      	ldr	r3, [pc, #324]	; (1f44 <decode+0x24c>)
    1dfe:	4798      	blx	r3
    vsqr1271(t0, t3);                              // t3 = t0^2      
    1e00:	a96c      	add	r1, sp, #432	; 0x1b0
    1e02:	a87b      	add	r0, sp, #492	; 0x1ec
    1e04:	4d4e      	ldr	r5, [pc, #312]	; (1f40 <decode+0x248>)
    1e06:	47a8      	blx	r5
    vmul1271(t0, t3, t3);                          // t3 = t3*t0   
    1e08:	aa6c      	add	r2, sp, #432	; 0x1b0
    1e0a:	0011      	movs	r1, r2
    1e0c:	a87b      	add	r0, sp, #492	; 0x1ec
    1e0e:	4c4e      	ldr	r4, [pc, #312]	; (1f48 <decode+0x250>)
    1e10:	47a0      	blx	r4
    vmul1271(t, t3, t3);                           // t3 = t3*t
    1e12:	aa6c      	add	r2, sp, #432	; 0x1b0
    1e14:	0011      	movs	r1, r2
    1e16:	a880      	add	r0, sp, #512	; 0x200
    1e18:	47a0      	blx	r4
    vexp1251(t3, r);                               // r = t3^(2^125-1)  
    1e1a:	a985      	add	r1, sp, #532	; 0x214
    1e1c:	a86c      	add	r0, sp, #432	; 0x1b0
    1e1e:	4b4e      	ldr	r3, [pc, #312]	; (1f58 <decode+0x260>)
    1e20:	4798      	blx	r3
    vmul1271(t0, r, t3);                           // t3 = t0*r          
    1e22:	aa6c      	add	r2, sp, #432	; 0x1b0
    1e24:	a985      	add	r1, sp, #532	; 0x214
    1e26:	a87b      	add	r0, sp, #492	; 0x1ec
    1e28:	47a0      	blx	r4
    vmul1271(t, t3, &VP->x[0]);                    // x0 = t*t3 
    1e2a:	aa03      	add	r2, sp, #12
    1e2c:	a96c      	add	r1, sp, #432	; 0x1b0
    1e2e:	a880      	add	r0, sp, #512	; 0x200
    1e30:	47a0      	blx	r4
    vsqr1271(&VP->x[0], t1);
    1e32:	a976      	add	r1, sp, #472	; 0x1d8
    1e34:	a803      	add	r0, sp, #12
    1e36:	47a8      	blx	r5
    vmul1271(t0, t1, t1);                          // t1 = t0*x0^2 
    1e38:	aa76      	add	r2, sp, #472	; 0x1d8
    1e3a:	0011      	movs	r1, r2
    1e3c:	a87b      	add	r0, sp, #492	; 0x1ec
    1e3e:	47a0      	blx	r4
    vdiv1271(&VP->x[0]);                           // x0 = x0/2
    1e40:	a803      	add	r0, sp, #12
    1e42:	4b46      	ldr	r3, [pc, #280]	; (1f5c <decode+0x264>)
    1e44:	4798      	blx	r3
    vmul1271(t2, t3, &VP->x[VWORDS_FIELD]);        // x1 = t3*t2  
    1e46:	aa08      	add	r2, sp, #32
    1e48:	a96c      	add	r1, sp, #432	; 0x1b0
    1e4a:	a871      	add	r0, sp, #452	; 0x1c4
    1e4c:	47a0      	blx	r4

    vsub1271(t, t1, t);
    1e4e:	aa80      	add	r2, sp, #512	; 0x200
    1e50:	a976      	add	r1, sp, #472	; 0x1d8
    1e52:	0010      	movs	r0, r2
    1e54:	4b3d      	ldr	r3, [pc, #244]	; (1f4c <decode+0x254>)
    1e56:	4798      	blx	r3
    vmod1271(t, t);
    1e58:	a980      	add	r1, sp, #512	; 0x200
    1e5a:	0008      	movs	r0, r1
    1e5c:	4b3c      	ldr	r3, [pc, #240]	; (1f50 <decode+0x258>)
    1e5e:	4798      	blx	r3
    if (is_zero_ct(t, VWORDS_FIELD) == false) {        // If t != t1 then swap x0 and x1       
    1e60:	2105      	movs	r1, #5
    1e62:	a880      	add	r0, sp, #512	; 0x200
    1e64:	4b3b      	ldr	r3, [pc, #236]	; (1f54 <decode+0x25c>)
    1e66:	4798      	blx	r3
    1e68:	2800      	cmp	r0, #0
    1e6a:	d03e      	beq.n	1eea <decode+0x1f2>
        memmove((unsigned char*)t0, (unsigned char*)&VP->x[0], 20);
        memmove((unsigned char*)&VP->x[0], (unsigned char*)&VP->x[VWORDS_FIELD], 20);
        memmove((unsigned char*)&VP->x[VWORDS_FIELD], (unsigned char*)t0, 20);
    }

    v2mod1271(VP->x, VP->x);
    1e6c:	a903      	add	r1, sp, #12
    1e6e:	0008      	movs	r0, r1
    1e70:	4b3b      	ldr	r3, [pc, #236]	; (1f60 <decode+0x268>)
    1e72:	4798      	blx	r3
    if (is_zero_ct(VP->x, VWORDS_FIELD) == true) {
    1e74:	2105      	movs	r1, #5
    1e76:	a803      	add	r0, sp, #12
    1e78:	4b36      	ldr	r3, [pc, #216]	; (1f54 <decode+0x25c>)
    1e7a:	4798      	blx	r3
    1e7c:	2800      	cmp	r0, #0
    1e7e:	d049      	beq.n	1f14 <decode+0x21c>
        sign_dec = VP->x[2*VWORDS_FIELD-1] >> 22;
    1e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e82:	0d9b      	lsrs	r3, r3, #22
    } else {
        sign_dec = VP->x[VWORDS_FIELD-1] >> 22;
    }

    if (sign != (unsigned int)sign_dec) {           // If sign of x-coordinate decoded != input sign bit, then negate x-coordinate
    1e84:	4543      	cmp	r3, r8
    1e86:	d002      	beq.n	1e8e <decode+0x196>
        v2neg1271(VP->x);         
    1e88:	a803      	add	r0, sp, #12
    1e8a:	4b36      	ldr	r3, [pc, #216]	; (1f64 <decode+0x26c>)
    1e8c:	4798      	blx	r3
    }

    v2mod1271(VP->x, R->x);
    1e8e:	a917      	add	r1, sp, #92	; 0x5c
    1e90:	a803      	add	r0, sp, #12
    1e92:	4c33      	ldr	r4, [pc, #204]	; (1f60 <decode+0x268>)
    1e94:	47a0      	blx	r4
    v2mod1271(VP->y, R->y);
    1e96:	a921      	add	r1, sp, #132	; 0x84
    1e98:	a80d      	add	r0, sp, #52	; 0x34
    1e9a:	47a0      	blx	r4
    if (ecc_point_validate(R) == false) {
    1e9c:	a817      	add	r0, sp, #92	; 0x5c
    1e9e:	4b32      	ldr	r3, [pc, #200]	; (1f68 <decode+0x270>)
    1ea0:	4798      	blx	r3
    1ea2:	2800      	cmp	r0, #0
    1ea4:	d108      	bne.n	1eb8 <decode+0x1c0>
        vneg1271(&R->x[VWORDS_FIELD]);
    1ea6:	a81c      	add	r0, sp, #112	; 0x70
    1ea8:	4b30      	ldr	r3, [pc, #192]	; (1f6c <decode+0x274>)
    1eaa:	4798      	blx	r3
        if (ecc_point_validate(R) == false) {       // Final point validation
    1eac:	a817      	add	r0, sp, #92	; 0x5c
    1eae:	4b2e      	ldr	r3, [pc, #184]	; (1f68 <decode+0x270>)
    1eb0:	4798      	blx	r3
            return ECCRYPTO_ERROR;
    1eb2:	2300      	movs	r3, #0
        if (ecc_point_validate(R) == false) {       // Final point validation
    1eb4:	2800      	cmp	r0, #0
    1eb6:	d00b      	beq.n	1ed0 <decode+0x1d8>
        }
    }

    v2mod1271(R->x, R->x);
    1eb8:	a917      	add	r1, sp, #92	; 0x5c
    1eba:	0008      	movs	r0, r1
    1ebc:	4b28      	ldr	r3, [pc, #160]	; (1f60 <decode+0x268>)
    1ebe:	4798      	blx	r3
    from_ext_to_std(R->x, P->x);
    1ec0:	0039      	movs	r1, r7
    1ec2:	a817      	add	r0, sp, #92	; 0x5c
    1ec4:	4c2a      	ldr	r4, [pc, #168]	; (1f70 <decode+0x278>)
    1ec6:	47a0      	blx	r4
    from_ext_to_std(R->y, P->y);
    1ec8:	9901      	ldr	r1, [sp, #4]
    1eca:	a821      	add	r0, sp, #132	; 0x84
    1ecc:	47a0      	blx	r4

    return ECCRYPTO_SUCCESS;
    1ece:	2301      	movs	r3, #1
}
    1ed0:	0018      	movs	r0, r3
    1ed2:	238a      	movs	r3, #138	; 0x8a
    1ed4:	009b      	lsls	r3, r3, #2
    1ed6:	449d      	add	sp, r3
    1ed8:	bc04      	pop	{r2}
    1eda:	4690      	mov	r8, r2
    1edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vsub1271(t1, t3, t);                       // t = t1-t3
    1ede:	aa80      	add	r2, sp, #512	; 0x200
    1ee0:	a96c      	add	r1, sp, #432	; 0x1b0
    1ee2:	a876      	add	r0, sp, #472	; 0x1d8
    1ee4:	4b19      	ldr	r3, [pc, #100]	; (1f4c <decode+0x254>)
    1ee6:	4798      	blx	r3
    1ee8:	e785      	b.n	1df6 <decode+0xfe>
        memmove((unsigned char*)t0, (unsigned char*)&VP->x[0], 20);
    1eea:	ab7b      	add	r3, sp, #492	; 0x1ec
    1eec:	aa03      	add	r2, sp, #12
    1eee:	0019      	movs	r1, r3
    1ef0:	ca31      	ldmia	r2!, {r0, r4, r5}
    1ef2:	c131      	stmia	r1!, {r0, r4, r5}
    1ef4:	ca11      	ldmia	r2!, {r0, r4}
    1ef6:	c111      	stmia	r1!, {r0, r4}
        memmove((unsigned char*)&VP->x[0], (unsigned char*)&VP->x[VWORDS_FIELD], 20);
    1ef8:	ac03      	add	r4, sp, #12
    1efa:	aa08      	add	r2, sp, #32
    1efc:	0021      	movs	r1, r4
    1efe:	0010      	movs	r0, r2
    1f00:	c870      	ldmia	r0!, {r4, r5, r6}
    1f02:	c170      	stmia	r1!, {r4, r5, r6}
    1f04:	c830      	ldmia	r0!, {r4, r5}
    1f06:	c130      	stmia	r1!, {r4, r5}
        memmove((unsigned char*)&VP->x[VWORDS_FIELD], (unsigned char*)t0, 20);
    1f08:	cb13      	ldmia	r3!, {r0, r1, r4}
    1f0a:	c213      	stmia	r2!, {r0, r1, r4}
    1f0c:	0011      	movs	r1, r2
    1f0e:	cb05      	ldmia	r3!, {r0, r2}
    1f10:	c105      	stmia	r1!, {r0, r2}
    1f12:	e7ab      	b.n	1e6c <decode+0x174>
        sign_dec = VP->x[VWORDS_FIELD-1] >> 22;
    1f14:	9b07      	ldr	r3, [sp, #28]
    1f16:	0d9b      	lsrs	r3, r3, #22
    1f18:	e7b4      	b.n	1e84 <decode+0x18c>
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	fffffdd8 	.word	0xfffffdd8
    1f20:	00005b87 	.word	0x00005b87
    1f24:	00005b63 	.word	0x00005b63
    1f28:	00002841 	.word	0x00002841
    1f2c:	000032f9 	.word	0x000032f9
    1f30:	00006d08 	.word	0x00006d08
    1f34:	00003285 	.word	0x00003285
    1f38:	000030c5 	.word	0x000030c5
    1f3c:	000030a5 	.word	0x000030a5
    1f40:	000022f1 	.word	0x000022f1
    1f44:	00001fc7 	.word	0x00001fc7
    1f48:	0000205d 	.word	0x0000205d
    1f4c:	00002003 	.word	0x00002003
    1f50:	00002535 	.word	0x00002535
    1f54:	00001c8d 	.word	0x00001c8d
    1f58:	000025c5 	.word	0x000025c5
    1f5c:	00002b95 	.word	0x00002b95
    1f60:	00003269 	.word	0x00003269
    1f64:	0000314d 	.word	0x0000314d
    1f68:	000038b1 	.word	0x000038b1
    1f6c:	00002031 	.word	0x00002031
    1f70:	000028c9 	.word	0x000028c9

00001f74 <digit_x_digit>:
#define mask_26        (((uint32_t)1 << 26) - 1)
#define mask_23        (((uint32_t)1 << 23) - 1)


void digit_x_digit(digit_t a, digit_t b, digit_t* c)
{ // Digit multiplication, digit * digit -> 2-digit result    
    1f74:	b570      	push	{r4, r5, r6, lr}
    register digit_t al, ah, bl, bh, temp;
    digit_t albl, albh, ahbl, ahbh, res1, res2, res3, carry;
    digit_t mask_low = (digit_t)(-1) >> (sizeof(digit_t)*4), mask_high = (digit_t)(-1) << (sizeof(digit_t)*4);

    al = a & mask_low;                        // Low part
    1f76:	0403      	lsls	r3, r0, #16
    1f78:	0c1b      	lsrs	r3, r3, #16
    ah = a >> (sizeof(digit_t) * 4);          // High part
    1f7a:	0c00      	lsrs	r0, r0, #16
    bl = b & mask_low;
    1f7c:	040c      	lsls	r4, r1, #16
    1f7e:	0c24      	lsrs	r4, r4, #16
    bh = b >> (sizeof(digit_t) * 4);
    1f80:	0c09      	lsrs	r1, r1, #16

    albl = al*bl;
    1f82:	0025      	movs	r5, r4
    1f84:	435d      	muls	r5, r3
    albh = al*bh;
    1f86:	434b      	muls	r3, r1
    ahbl = ah*bl;
    1f88:	4344      	muls	r4, r0
    ahbh = ah*bh;
    1f8a:	4341      	muls	r1, r0
    c[0] = albl & mask_low;                   // C00

    res1 = albl >> (sizeof(digit_t) * 4);
    1f8c:	0c28      	lsrs	r0, r5, #16
    res2 = ahbl & mask_low;
    1f8e:	0426      	lsls	r6, r4, #16
    1f90:	0c36      	lsrs	r6, r6, #16
    res3 = albh & mask_low;  
    temp = res1 + res2 + res3;
    1f92:	1980      	adds	r0, r0, r6
    res3 = albh & mask_low;  
    1f94:	041e      	lsls	r6, r3, #16
    1f96:	0c36      	lsrs	r6, r6, #16
    temp = res1 + res2 + res3;
    1f98:	1980      	adds	r0, r0, r6
    carry = temp >> (sizeof(digit_t) * 4);
    1f9a:	0c06      	lsrs	r6, r0, #16
    c[0] = albl & mask_low;                   // C00
    1f9c:	042d      	lsls	r5, r5, #16
    1f9e:	0c2d      	lsrs	r5, r5, #16
    c[0] ^= temp << (sizeof(digit_t) * 4);    // C01   
    1fa0:	0400      	lsls	r0, r0, #16
    1fa2:	4045      	eors	r5, r0
    1fa4:	6015      	str	r5, [r2, #0]

    res1 = ahbl >> (sizeof(digit_t) * 4);
    1fa6:	0c24      	lsrs	r4, r4, #16
    res2 = albh >> (sizeof(digit_t) * 4);
    1fa8:	0c1b      	lsrs	r3, r3, #16
    res3 = ahbh & mask_low;
    temp = res1 + res2 + res3 + carry;
    1faa:	18e3      	adds	r3, r4, r3
    res3 = ahbh & mask_low;
    1fac:	040c      	lsls	r4, r1, #16
    1fae:	0c24      	lsrs	r4, r4, #16
    temp = res1 + res2 + res3 + carry;
    1fb0:	191b      	adds	r3, r3, r4
    1fb2:	199b      	adds	r3, r3, r6
    c[1] = temp & mask_low;                   // C10 
    carry = temp & mask_high; 
    1fb4:	0c18      	lsrs	r0, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    1fb6:	0c09      	lsrs	r1, r1, #16
    1fb8:	1809      	adds	r1, r1, r0
    1fba:	0409      	lsls	r1, r1, #16
    c[1] = temp & mask_low;                   // C10 
    1fbc:	041b      	lsls	r3, r3, #16
    1fbe:	0c1b      	lsrs	r3, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    1fc0:	404b      	eors	r3, r1
    1fc2:	6053      	str	r3, [r2, #4]
}
    1fc4:	bd70      	pop	{r4, r5, r6, pc}

00001fc6 <vadd1271>:
        c[i] = a[i];
}


void vadd1271(velm_t a, velm_t b, velm_t c) 
{ // Field addition over GF(2^127-1)
    1fc6:	b510      	push	{r4, lr}
  // Redundant representation: 23/26/26/26/26-bit
    
    c[0] = a[0] + b[0];
    1fc8:	6803      	ldr	r3, [r0, #0]
    1fca:	001c      	movs	r4, r3
    1fcc:	680b      	ldr	r3, [r1, #0]
    1fce:	469c      	mov	ip, r3
    1fd0:	4464      	add	r4, ip
    1fd2:	6014      	str	r4, [r2, #0]
    c[1] = a[1] + b[1];
    1fd4:	6843      	ldr	r3, [r0, #4]
    1fd6:	001c      	movs	r4, r3
    1fd8:	684b      	ldr	r3, [r1, #4]
    1fda:	469c      	mov	ip, r3
    1fdc:	4464      	add	r4, ip
    1fde:	6054      	str	r4, [r2, #4]
    c[2] = a[2] + b[2];
    1fe0:	6883      	ldr	r3, [r0, #8]
    1fe2:	001c      	movs	r4, r3
    1fe4:	688b      	ldr	r3, [r1, #8]
    1fe6:	469c      	mov	ip, r3
    1fe8:	4464      	add	r4, ip
    1fea:	6094      	str	r4, [r2, #8]
    c[3] = a[3] + b[3];
    1fec:	68c3      	ldr	r3, [r0, #12]
    1fee:	001c      	movs	r4, r3
    1ff0:	68cb      	ldr	r3, [r1, #12]
    1ff2:	469c      	mov	ip, r3
    1ff4:	4464      	add	r4, ip
    1ff6:	60d4      	str	r4, [r2, #12]
    c[4] = a[4] + b[4];
    1ff8:	6903      	ldr	r3, [r0, #16]
    1ffa:	6909      	ldr	r1, [r1, #16]
    1ffc:	185b      	adds	r3, r3, r1
    1ffe:	6113      	str	r3, [r2, #16]
}
    2000:	bd10      	pop	{r4, pc}

00002002 <vsub1271>:


void vsub1271(velm_t a, velm_t b, velm_t c) 
{ // Field subtraction over GF(2^127-1)
    2002:	b510      	push	{r4, lr}
  // Redundant representation: 23/26/26/26/26-bit
    
    c[0] = a[0] - b[0];
    2004:	6803      	ldr	r3, [r0, #0]
    2006:	680c      	ldr	r4, [r1, #0]
    2008:	1b1b      	subs	r3, r3, r4
    200a:	6013      	str	r3, [r2, #0]
    c[1] = a[1] - b[1];
    200c:	6843      	ldr	r3, [r0, #4]
    200e:	684c      	ldr	r4, [r1, #4]
    2010:	1b1b      	subs	r3, r3, r4
    2012:	6053      	str	r3, [r2, #4]
    c[2] = a[2] - b[2];
    2014:	6883      	ldr	r3, [r0, #8]
    2016:	688c      	ldr	r4, [r1, #8]
    2018:	1b1b      	subs	r3, r3, r4
    201a:	6093      	str	r3, [r2, #8]
    c[3] = a[3] - b[3];
    201c:	68c3      	ldr	r3, [r0, #12]
    201e:	68cc      	ldr	r4, [r1, #12]
    2020:	1b1b      	subs	r3, r3, r4
    2022:	60d3      	str	r3, [r2, #12]
    c[4] = a[4] - b[4];
    2024:	6903      	ldr	r3, [r0, #16]
    2026:	6909      	ldr	r1, [r1, #16]
    2028:	1a5b      	subs	r3, r3, r1
    202a:	6113      	str	r3, [r2, #16]
}
    202c:	bd10      	pop	{r4, pc}
	...

00002030 <vneg1271>:

void vneg1271(velm_t a) 
{ // Field negation over GF(2^127-1)
  // Redundant representation: 23/26/26/26/26-bit
    
    a[0] = mask_26 - a[0];
    2030:	4b08      	ldr	r3, [pc, #32]	; (2054 <vneg1271+0x24>)
    2032:	6802      	ldr	r2, [r0, #0]
    2034:	1a9a      	subs	r2, r3, r2
    2036:	6002      	str	r2, [r0, #0]
    a[1] = mask_26 - a[1];
    2038:	6842      	ldr	r2, [r0, #4]
    203a:	1a9a      	subs	r2, r3, r2
    203c:	6042      	str	r2, [r0, #4]
    a[2] = mask_26 - a[2];
    203e:	6882      	ldr	r2, [r0, #8]
    2040:	1a9a      	subs	r2, r3, r2
    2042:	6082      	str	r2, [r0, #8]
    a[3] = mask_26 - a[3];
    2044:	68c2      	ldr	r2, [r0, #12]
    2046:	1a9b      	subs	r3, r3, r2
    2048:	60c3      	str	r3, [r0, #12]
    a[4] = mask_23 - a[4];
    204a:	4b03      	ldr	r3, [pc, #12]	; (2058 <vneg1271+0x28>)
    204c:	6902      	ldr	r2, [r0, #16]
    204e:	1a9b      	subs	r3, r3, r2
    2050:	6103      	str	r3, [r0, #16]
}
    2052:	4770      	bx	lr
    2054:	03ffffff 	.word	0x03ffffff
    2058:	007fffff 	.word	0x007fffff

0000205c <vmul1271>:


void vmul1271(velm_t a, velm_t b, velm_t c)
{ // Field multiplication, c = a*b mod p
    205c:	b5f0      	push	{r4, r5, r6, r7, lr}
    205e:	46de      	mov	lr, fp
    2060:	4657      	mov	r7, sl
    2062:	464e      	mov	r6, r9
    2064:	4645      	mov	r5, r8
    2066:	b5e0      	push	{r5, r6, r7, lr}
    2068:	b09d      	sub	sp, #116	; 0x74
    206a:	4691      	mov	r9, r2
   int64_t t1, t2, t3, t4;

   a0 = a[0]; a1 = a[1]; a2 = a[2]; a3 = a[3]; a4 = a[4]; 
   b0 = b[0]; b1 = b[1]; b2 = b[2]; b3 = b[3]; b4 = b[4];

   t1 = (int64_t)a1 << 3;
    206c:	6844      	ldr	r4, [r0, #4]
    206e:	17e3      	asrs	r3, r4, #31
    2070:	9301      	str	r3, [sp, #4]
   t2 = (int64_t)a2 << 3;
    2072:	6882      	ldr	r2, [r0, #8]
    2074:	4690      	mov	r8, r2
    2076:	17d2      	asrs	r2, r2, #31
    2078:	9213      	str	r2, [sp, #76]	; 0x4c
    207a:	4645      	mov	r5, r8
    207c:	176d      	asrs	r5, r5, #29
    207e:	951a      	str	r5, [sp, #104]	; 0x68
    2080:	4646      	mov	r6, r8
    2082:	00f6      	lsls	r6, r6, #3
    2084:	9618      	str	r6, [sp, #96]	; 0x60
   t3 = (int64_t)a3 << 3;
    2086:	68c7      	ldr	r7, [r0, #12]
    2088:	46ba      	mov	sl, r7
    208a:	17ff      	asrs	r7, r7, #31
    208c:	9717      	str	r7, [sp, #92]	; 0x5c
    208e:	4653      	mov	r3, sl
    2090:	175d      	asrs	r5, r3, #29
    2092:	9516      	str	r5, [sp, #88]	; 0x58
    2094:	00de      	lsls	r6, r3, #3
    2096:	9614      	str	r6, [sp, #80]	; 0x50
   t4 = (int64_t)a4 << 3;
    2098:	6903      	ldr	r3, [r0, #16]
    209a:	469b      	mov	fp, r3
    209c:	17db      	asrs	r3, r3, #31
    209e:	931b      	str	r3, [sp, #108]	; 0x6c
    20a0:	465a      	mov	r2, fp
    20a2:	1752      	asrs	r2, r2, #29
    20a4:	9212      	str	r2, [sp, #72]	; 0x48
    20a6:	465f      	mov	r7, fp
    20a8:	00fd      	lsls	r5, r7, #3
    20aa:	950e      	str	r5, [sp, #56]	; 0x38

   c0 = (int64_t)a0*b0 + (int64_t)t1*b4 + (int64_t)t4*b1 + (int64_t)t2*b3 + (int64_t)t3*b2;
    20ac:	6803      	ldr	r3, [r0, #0]
    20ae:	9302      	str	r3, [sp, #8]
    20b0:	17da      	asrs	r2, r3, #31
    20b2:	9203      	str	r2, [sp, #12]
    20b4:	680a      	ldr	r2, [r1, #0]
    20b6:	9204      	str	r2, [sp, #16]
    20b8:	17d0      	asrs	r0, r2, #31
    20ba:	9005      	str	r0, [sp, #20]
    20bc:	6908      	ldr	r0, [r1, #16]
    20be:	0006      	movs	r6, r0
    20c0:	17c5      	asrs	r5, r0, #31
    20c2:	9506      	str	r5, [sp, #24]
    20c4:	6848      	ldr	r0, [r1, #4]
    20c6:	9007      	str	r0, [sp, #28]
    20c8:	17c7      	asrs	r7, r0, #31
    20ca:	9708      	str	r7, [sp, #32]
    20cc:	68cd      	ldr	r5, [r1, #12]
    20ce:	9509      	str	r5, [sp, #36]	; 0x24
    20d0:	17ef      	asrs	r7, r5, #31
    20d2:	970a      	str	r7, [sp, #40]	; 0x28
    20d4:	688f      	ldr	r7, [r1, #8]
    20d6:	970b      	str	r7, [sp, #44]	; 0x2c
    20d8:	17f9      	asrs	r1, r7, #31
    20da:	910c      	str	r1, [sp, #48]	; 0x30
   t1 = (int64_t)a1 << 3;
    20dc:	0f63      	lsrs	r3, r4, #29
    20de:	9901      	ldr	r1, [sp, #4]
    20e0:	00c9      	lsls	r1, r1, #3
    20e2:	4319      	orrs	r1, r3
    20e4:	00e0      	lsls	r0, r4, #3
   c0 = (int64_t)a0*b0 + (int64_t)t1*b4 + (int64_t)t4*b1 + (int64_t)t2*b3 + (int64_t)t3*b2;
    20e6:	4d81      	ldr	r5, [pc, #516]	; (22ec <vmul1271+0x290>)
    20e8:	960d      	str	r6, [sp, #52]	; 0x34
    20ea:	0032      	movs	r2, r6
    20ec:	9b06      	ldr	r3, [sp, #24]
    20ee:	47a8      	blx	r5
    20f0:	0006      	movs	r6, r0
    20f2:	000f      	movs	r7, r1
    20f4:	9a04      	ldr	r2, [sp, #16]
    20f6:	9b05      	ldr	r3, [sp, #20]
    20f8:	9802      	ldr	r0, [sp, #8]
    20fa:	9903      	ldr	r1, [sp, #12]
    20fc:	47a8      	blx	r5
    20fe:	1836      	adds	r6, r6, r0
    2100:	414f      	adcs	r7, r1
    2102:	9a07      	ldr	r2, [sp, #28]
    2104:	9b08      	ldr	r3, [sp, #32]
    2106:	980e      	ldr	r0, [sp, #56]	; 0x38
    2108:	9912      	ldr	r1, [sp, #72]	; 0x48
    210a:	47a8      	blx	r5
    210c:	1836      	adds	r6, r6, r0
    210e:	414f      	adcs	r7, r1
    2110:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2114:	9818      	ldr	r0, [sp, #96]	; 0x60
    2116:	991a      	ldr	r1, [sp, #104]	; 0x68
    2118:	47a8      	blx	r5
    211a:	1836      	adds	r6, r6, r0
    211c:	414f      	adcs	r7, r1
    211e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2122:	9814      	ldr	r0, [sp, #80]	; 0x50
    2124:	9916      	ldr	r1, [sp, #88]	; 0x58
    2126:	47a8      	blx	r5
    2128:	1836      	adds	r6, r6, r0
    212a:	414f      	adcs	r7, r1
    212c:	9610      	str	r6, [sp, #64]	; 0x40
    212e:	9711      	str	r7, [sp, #68]	; 0x44
   c1 = (int64_t)a0*b1 + (int64_t)a1*b0 + (int64_t)t2*b4 + (int64_t)t4*b2 + (int64_t)t3*b3;
    2130:	9a07      	ldr	r2, [sp, #28]
    2132:	9b08      	ldr	r3, [sp, #32]
    2134:	9802      	ldr	r0, [sp, #8]
    2136:	9903      	ldr	r1, [sp, #12]
    2138:	47a8      	blx	r5
    213a:	0006      	movs	r6, r0
    213c:	000f      	movs	r7, r1
    213e:	9a04      	ldr	r2, [sp, #16]
    2140:	9b05      	ldr	r3, [sp, #20]
    2142:	0020      	movs	r0, r4
    2144:	9901      	ldr	r1, [sp, #4]
    2146:	47a8      	blx	r5
    2148:	1836      	adds	r6, r6, r0
    214a:	414f      	adcs	r7, r1
    214c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    214e:	9b06      	ldr	r3, [sp, #24]
    2150:	9818      	ldr	r0, [sp, #96]	; 0x60
    2152:	991a      	ldr	r1, [sp, #104]	; 0x68
    2154:	47a8      	blx	r5
    2156:	1836      	adds	r6, r6, r0
    2158:	414f      	adcs	r7, r1
    215a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    215c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    215e:	980e      	ldr	r0, [sp, #56]	; 0x38
    2160:	9912      	ldr	r1, [sp, #72]	; 0x48
    2162:	47a8      	blx	r5
    2164:	1836      	adds	r6, r6, r0
    2166:	414f      	adcs	r7, r1
    2168:	9a09      	ldr	r2, [sp, #36]	; 0x24
    216a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    216c:	9814      	ldr	r0, [sp, #80]	; 0x50
    216e:	9916      	ldr	r1, [sp, #88]	; 0x58
    2170:	47a8      	blx	r5
    2172:	1836      	adds	r6, r6, r0
    2174:	414f      	adcs	r7, r1
    2176:	9618      	str	r6, [sp, #96]	; 0x60
    2178:	9719      	str	r7, [sp, #100]	; 0x64
   c2 = (int64_t)a0*b2 + (int64_t)a2*b0 + (int64_t)a1*b1 + (int64_t)t3*b4 + (int64_t)t4*b3;
    217a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    217c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    217e:	9802      	ldr	r0, [sp, #8]
    2180:	9903      	ldr	r1, [sp, #12]
    2182:	47a8      	blx	r5
    2184:	0006      	movs	r6, r0
    2186:	000f      	movs	r7, r1
    2188:	9a04      	ldr	r2, [sp, #16]
    218a:	9b05      	ldr	r3, [sp, #20]
    218c:	4640      	mov	r0, r8
    218e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2190:	47a8      	blx	r5
    2192:	1836      	adds	r6, r6, r0
    2194:	414f      	adcs	r7, r1
    2196:	9a07      	ldr	r2, [sp, #28]
    2198:	9b08      	ldr	r3, [sp, #32]
    219a:	0020      	movs	r0, r4
    219c:	9901      	ldr	r1, [sp, #4]
    219e:	47a8      	blx	r5
    21a0:	1836      	adds	r6, r6, r0
    21a2:	414f      	adcs	r7, r1
    21a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    21a6:	9b06      	ldr	r3, [sp, #24]
    21a8:	9814      	ldr	r0, [sp, #80]	; 0x50
    21aa:	9916      	ldr	r1, [sp, #88]	; 0x58
    21ac:	47a8      	blx	r5
    21ae:	1836      	adds	r6, r6, r0
    21b0:	414f      	adcs	r7, r1
    21b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    21b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21b6:	980e      	ldr	r0, [sp, #56]	; 0x38
    21b8:	9912      	ldr	r1, [sp, #72]	; 0x48
    21ba:	47a8      	blx	r5
    21bc:	0032      	movs	r2, r6
    21be:	003b      	movs	r3, r7
    21c0:	1812      	adds	r2, r2, r0
    21c2:	414b      	adcs	r3, r1
    21c4:	9214      	str	r2, [sp, #80]	; 0x50
    21c6:	9315      	str	r3, [sp, #84]	; 0x54
   c3 = (int64_t)a0*b3 + (int64_t)a3*b0 + (int64_t)a1*b2 + (int64_t)a2*b1 + (int64_t)t4*b4;
    21c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    21ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21cc:	9802      	ldr	r0, [sp, #8]
    21ce:	9903      	ldr	r1, [sp, #12]
    21d0:	47a8      	blx	r5
    21d2:	0006      	movs	r6, r0
    21d4:	000f      	movs	r7, r1
    21d6:	9a04      	ldr	r2, [sp, #16]
    21d8:	9b05      	ldr	r3, [sp, #20]
    21da:	4650      	mov	r0, sl
    21dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
    21de:	47a8      	blx	r5
    21e0:	1836      	adds	r6, r6, r0
    21e2:	414f      	adcs	r7, r1
    21e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    21e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    21e8:	0020      	movs	r0, r4
    21ea:	9901      	ldr	r1, [sp, #4]
    21ec:	47a8      	blx	r5
    21ee:	1836      	adds	r6, r6, r0
    21f0:	414f      	adcs	r7, r1
    21f2:	9a07      	ldr	r2, [sp, #28]
    21f4:	9b08      	ldr	r3, [sp, #32]
    21f6:	4640      	mov	r0, r8
    21f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    21fa:	47a8      	blx	r5
    21fc:	1836      	adds	r6, r6, r0
    21fe:	414f      	adcs	r7, r1
    2200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2202:	9b06      	ldr	r3, [sp, #24]
    2204:	980e      	ldr	r0, [sp, #56]	; 0x38
    2206:	9912      	ldr	r1, [sp, #72]	; 0x48
    2208:	47a8      	blx	r5
    220a:	1836      	adds	r6, r6, r0
    220c:	414f      	adcs	r7, r1
    220e:	960e      	str	r6, [sp, #56]	; 0x38
    2210:	970f      	str	r7, [sp, #60]	; 0x3c
   c4 = (int64_t)a0*b4 + (int64_t)a4*b0 + (int64_t)a1*b3 + (int64_t)a3*b1 + (int64_t)a2*b2;
    2212:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2214:	9b06      	ldr	r3, [sp, #24]
    2216:	9802      	ldr	r0, [sp, #8]
    2218:	9903      	ldr	r1, [sp, #12]
    221a:	47a8      	blx	r5
    221c:	0006      	movs	r6, r0
    221e:	000f      	movs	r7, r1
    2220:	9a04      	ldr	r2, [sp, #16]
    2222:	9b05      	ldr	r3, [sp, #20]
    2224:	4658      	mov	r0, fp
    2226:	991b      	ldr	r1, [sp, #108]	; 0x6c
    2228:	47a8      	blx	r5
    222a:	1836      	adds	r6, r6, r0
    222c:	414f      	adcs	r7, r1
    222e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2232:	0020      	movs	r0, r4
    2234:	9901      	ldr	r1, [sp, #4]
    2236:	47a8      	blx	r5
    2238:	1836      	adds	r6, r6, r0
    223a:	414f      	adcs	r7, r1
    223c:	9a07      	ldr	r2, [sp, #28]
    223e:	9b08      	ldr	r3, [sp, #32]
    2240:	4650      	mov	r0, sl
    2242:	9917      	ldr	r1, [sp, #92]	; 0x5c
    2244:	47a8      	blx	r5
    2246:	1836      	adds	r6, r6, r0
    2248:	414f      	adcs	r7, r1
    224a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    224c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    224e:	4640      	mov	r0, r8
    2250:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2252:	47a8      	blx	r5
    2254:	1836      	adds	r6, r6, r0
    2256:	414f      	adcs	r7, r1
#endif
   
                    r0   = c0 & mask_26; 
    c1 += c0 >> 26; r1   = c1 & mask_26;
    2258:	9c10      	ldr	r4, [sp, #64]	; 0x40
    225a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    225c:	01ab      	lsls	r3, r5, #6
    225e:	0ea0      	lsrs	r0, r4, #26
    2260:	4318      	orrs	r0, r3
    2262:	16a9      	asrs	r1, r5, #26
    2264:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2266:	9c19      	ldr	r4, [sp, #100]	; 0x64
    2268:	18c0      	adds	r0, r0, r3
    226a:	4161      	adcs	r1, r4
    c2 += c1 >> 26; c[2] = c2 & mask_26; 
    226c:	018b      	lsls	r3, r1, #6
    226e:	0e84      	lsrs	r4, r0, #26
    2270:	431c      	orrs	r4, r3
    2272:	168d      	asrs	r5, r1, #26
    2274:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2276:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2278:	18a4      	adds	r4, r4, r2
    227a:	415d      	adcs	r5, r3
    227c:	01a3      	lsls	r3, r4, #6
    227e:	099b      	lsrs	r3, r3, #6
    2280:	464a      	mov	r2, r9
    2282:	6093      	str	r3, [r2, #8]
    c3 += c2 >> 26; c[3] = c3 & mask_26; 
    2284:	01a9      	lsls	r1, r5, #6
    2286:	0ea2      	lsrs	r2, r4, #26
    2288:	430a      	orrs	r2, r1
    228a:	16ab      	asrs	r3, r5, #26
    228c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    228e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    2290:	1912      	adds	r2, r2, r4
    2292:	416b      	adcs	r3, r5
    2294:	0191      	lsls	r1, r2, #6
    2296:	0989      	lsrs	r1, r1, #6
    2298:	464d      	mov	r5, r9
    229a:	60e9      	str	r1, [r5, #12]
    c4 += c3 >> 26; c[4] = c4 & mask_23; 
    229c:	0199      	lsls	r1, r3, #6
    229e:	0e94      	lsrs	r4, r2, #26
    22a0:	430c      	orrs	r4, r1
    22a2:	169d      	asrs	r5, r3, #26
    22a4:	19a4      	adds	r4, r4, r6
    22a6:	417d      	adcs	r5, r7
    22a8:	0263      	lsls	r3, r4, #9
    22aa:	0a5b      	lsrs	r3, r3, #9
    22ac:	464a      	mov	r2, r9
    22ae:	6113      	str	r3, [r2, #16]
                    r0   = c0 & mask_26; 
    22b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    22b2:	019b      	lsls	r3, r3, #6
    22b4:	099b      	lsrs	r3, r3, #6
//    c4 += c3 >> 26; c[4] = c4 & mask_26; 
    
    c0   = r0 + (c4 >> 23);
    22b6:	001e      	movs	r6, r3
    22b8:	2700      	movs	r7, #0
    22ba:	0269      	lsls	r1, r5, #9
    22bc:	0de2      	lsrs	r2, r4, #23
    22be:	430a      	orrs	r2, r1
    22c0:	15eb      	asrs	r3, r5, #23
    22c2:	1992      	adds	r2, r2, r6
    22c4:	417b      	adcs	r3, r7
//    c0   = r0 + ((c4 >> 26) << 3);                  
    c[0] = (int32_t)c0 & mask_26;
    22c6:	0191      	lsls	r1, r2, #6
    22c8:	0989      	lsrs	r1, r1, #6
    22ca:	464c      	mov	r4, r9
    22cc:	6021      	str	r1, [r4, #0]
    c1 += c0 >> 26; r1   = c1 & mask_26;
    22ce:	0180      	lsls	r0, r0, #6
    22d0:	0980      	lsrs	r0, r0, #6
    c[1] = r1 + (int32_t)(c0 >> 26);
    22d2:	019b      	lsls	r3, r3, #6
    22d4:	0e92      	lsrs	r2, r2, #26
    22d6:	431a      	orrs	r2, r3
    22d8:	1880      	adds	r0, r0, r2
    22da:	6060      	str	r0, [r4, #4]
}
    22dc:	b01d      	add	sp, #116	; 0x74
    22de:	bc3c      	pop	{r2, r3, r4, r5}
    22e0:	4690      	mov	r8, r2
    22e2:	4699      	mov	r9, r3
    22e4:	46a2      	mov	sl, r4
    22e6:	46ab      	mov	fp, r5
    22e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	00005aa1 	.word	0x00005aa1

000022f0 <vsqr1271>:


void vsqr1271(velm_t a, velm_t c)
{ // Field squaring, c = a*b mod p
    22f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22f2:	46de      	mov	lr, fp
    22f4:	4657      	mov	r7, sl
    22f6:	464e      	mov	r6, r9
    22f8:	4645      	mov	r5, r8
    22fa:	b5e0      	push	{r5, r6, r7, lr}
    22fc:	b091      	sub	sp, #68	; 0x44
    22fe:	4689      	mov	r9, r1
#else
   int64_t t0, t1, t2, t3, t4;

   a0 = a[0]; a1 = a[1]; a2 = a[2]; a3 = a[3]; a4 = a[4];

   t0 = (int64_t)a0 << 1;
    2300:	6801      	ldr	r1, [r0, #0]
    2302:	17cb      	asrs	r3, r1, #31
    2304:	004a      	lsls	r2, r1, #1
    2306:	9205      	str	r2, [sp, #20]
   t1 = (int64_t)a1 << 1;
    2308:	6844      	ldr	r4, [r0, #4]
    230a:	17e2      	asrs	r2, r4, #31
    230c:	9201      	str	r2, [sp, #4]
    230e:	9408      	str	r4, [sp, #32]
    2310:	0065      	lsls	r5, r4, #1
    2312:	950d      	str	r5, [sp, #52]	; 0x34
   t2 = (int64_t)a2 << 4;
    2314:	6886      	ldr	r6, [r0, #8]
    2316:	46b3      	mov	fp, r6
    2318:	17f4      	asrs	r4, r6, #31
    231a:	9403      	str	r4, [sp, #12]
   t3 = (int64_t)a3 << 3;
    231c:	68c6      	ldr	r6, [r0, #12]
    231e:	46b2      	mov	sl, r6
    2320:	17f5      	asrs	r5, r6, #31
    2322:	9502      	str	r5, [sp, #8]
   t4 = (int64_t)a4 << 4;
    2324:	6904      	ldr	r4, [r0, #16]
    2326:	17e6      	asrs	r6, r4, #31
    2328:	46b0      	mov	r8, r6
    232a:	1726      	asrs	r6, r4, #28
    232c:	960c      	str	r6, [sp, #48]	; 0x30
    232e:	0120      	lsls	r0, r4, #4
    2330:	900a      	str	r0, [sp, #40]	; 0x28

   c0 = (int64_t)a0*a0 + (int64_t)t4*a1 + (int64_t)t2*a3;
    2332:	4d65      	ldr	r5, [pc, #404]	; (24c8 <vsqr1271+0x1d8>)
    2334:	000a      	movs	r2, r1
    2336:	0008      	movs	r0, r1
    2338:	9304      	str	r3, [sp, #16]
    233a:	0019      	movs	r1, r3
    233c:	47a8      	blx	r5
    233e:	0006      	movs	r6, r0
    2340:	000f      	movs	r7, r1
    2342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2346:	9808      	ldr	r0, [sp, #32]
    2348:	9901      	ldr	r1, [sp, #4]
    234a:	47a8      	blx	r5
    234c:	1836      	adds	r6, r6, r0
    234e:	414f      	adcs	r7, r1
   t2 = (int64_t)a2 << 4;
    2350:	465b      	mov	r3, fp
    2352:	0f1b      	lsrs	r3, r3, #28
    2354:	9803      	ldr	r0, [sp, #12]
    2356:	0101      	lsls	r1, r0, #4
    2358:	4319      	orrs	r1, r3
    235a:	465b      	mov	r3, fp
    235c:	0118      	lsls	r0, r3, #4
   c0 = (int64_t)a0*a0 + (int64_t)t4*a1 + (int64_t)t2*a3;
    235e:	4652      	mov	r2, sl
    2360:	9b02      	ldr	r3, [sp, #8]
    2362:	47a8      	blx	r5
    2364:	1836      	adds	r6, r6, r0
    2366:	414f      	adcs	r7, r1
    2368:	9606      	str	r6, [sp, #24]
    236a:	9707      	str	r7, [sp, #28]
   t3 = (int64_t)a3 << 3;
    236c:	4653      	mov	r3, sl
    236e:	0f5b      	lsrs	r3, r3, #29
    2370:	9f02      	ldr	r7, [sp, #8]
    2372:	00f9      	lsls	r1, r7, #3
    2374:	4319      	orrs	r1, r3
    2376:	4653      	mov	r3, sl
    2378:	00d8      	lsls	r0, r3, #3
   c1 = (int64_t)t0*a1 + (int64_t)t3*a3 + (int64_t)t4*a2;
    237a:	4652      	mov	r2, sl
    237c:	003b      	movs	r3, r7
    237e:	47a8      	blx	r5
    2380:	0006      	movs	r6, r0
    2382:	000f      	movs	r7, r1
    2384:	9a08      	ldr	r2, [sp, #32]
    2386:	9b01      	ldr	r3, [sp, #4]
    2388:	9805      	ldr	r0, [sp, #20]
    238a:	9904      	ldr	r1, [sp, #16]
    238c:	47a8      	blx	r5
    238e:	1836      	adds	r6, r6, r0
    2390:	414f      	adcs	r7, r1
    2392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2396:	4658      	mov	r0, fp
    2398:	9903      	ldr	r1, [sp, #12]
    239a:	47a8      	blx	r5
    239c:	1836      	adds	r6, r6, r0
    239e:	414f      	adcs	r7, r1
    23a0:	960e      	str	r6, [sp, #56]	; 0x38
    23a2:	970f      	str	r7, [sp, #60]	; 0x3c
   c2 = (int64_t)t0*a2 + (int64_t)a1*a1 + (int64_t)t4*a3;
    23a4:	465a      	mov	r2, fp
    23a6:	9b03      	ldr	r3, [sp, #12]
    23a8:	9805      	ldr	r0, [sp, #20]
    23aa:	9904      	ldr	r1, [sp, #16]
    23ac:	47a8      	blx	r5
    23ae:	0006      	movs	r6, r0
    23b0:	000f      	movs	r7, r1
    23b2:	9808      	ldr	r0, [sp, #32]
    23b4:	0002      	movs	r2, r0
    23b6:	9901      	ldr	r1, [sp, #4]
    23b8:	000b      	movs	r3, r1
    23ba:	47a8      	blx	r5
    23bc:	1836      	adds	r6, r6, r0
    23be:	414f      	adcs	r7, r1
    23c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    23c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    23c4:	4650      	mov	r0, sl
    23c6:	9902      	ldr	r1, [sp, #8]
    23c8:	47a8      	blx	r5
    23ca:	0032      	movs	r2, r6
    23cc:	003b      	movs	r3, r7
    23ce:	1812      	adds	r2, r2, r0
    23d0:	414b      	adcs	r3, r1
    23d2:	9208      	str	r2, [sp, #32]
    23d4:	9309      	str	r3, [sp, #36]	; 0x24
   c3 = (int64_t)t0*a3 + (int64_t)t1*a2 + ((int64_t)a4 << 3)*a4;
    23d6:	4652      	mov	r2, sl
    23d8:	9b02      	ldr	r3, [sp, #8]
    23da:	9805      	ldr	r0, [sp, #20]
    23dc:	9904      	ldr	r1, [sp, #16]
    23de:	47a8      	blx	r5
    23e0:	0006      	movs	r6, r0
    23e2:	000f      	movs	r7, r1
    23e4:	465a      	mov	r2, fp
    23e6:	9b03      	ldr	r3, [sp, #12]
    23e8:	980d      	ldr	r0, [sp, #52]	; 0x34
    23ea:	9901      	ldr	r1, [sp, #4]
    23ec:	47a8      	blx	r5
    23ee:	1836      	adds	r6, r6, r0
    23f0:	414f      	adcs	r7, r1
    23f2:	0f63      	lsrs	r3, r4, #29
    23f4:	4640      	mov	r0, r8
    23f6:	00c1      	lsls	r1, r0, #3
    23f8:	4319      	orrs	r1, r3
    23fa:	00e0      	lsls	r0, r4, #3
    23fc:	0022      	movs	r2, r4
    23fe:	4643      	mov	r3, r8
    2400:	47a8      	blx	r5
    2402:	1836      	adds	r6, r6, r0
    2404:	414f      	adcs	r7, r1
    2406:	960a      	str	r6, [sp, #40]	; 0x28
    2408:	970b      	str	r7, [sp, #44]	; 0x2c
   c4 = (int64_t)t0*a4 + (int64_t)t1*a3 + (int64_t)a2*a2;
    240a:	0022      	movs	r2, r4
    240c:	4643      	mov	r3, r8
    240e:	9805      	ldr	r0, [sp, #20]
    2410:	9904      	ldr	r1, [sp, #16]
    2412:	47a8      	blx	r5
    2414:	0006      	movs	r6, r0
    2416:	000f      	movs	r7, r1
    2418:	4652      	mov	r2, sl
    241a:	9b02      	ldr	r3, [sp, #8]
    241c:	980d      	ldr	r0, [sp, #52]	; 0x34
    241e:	9901      	ldr	r1, [sp, #4]
    2420:	47a8      	blx	r5
    2422:	1836      	adds	r6, r6, r0
    2424:	414f      	adcs	r7, r1
    2426:	465a      	mov	r2, fp
    2428:	9903      	ldr	r1, [sp, #12]
    242a:	000b      	movs	r3, r1
    242c:	4658      	mov	r0, fp
    242e:	47a8      	blx	r5
    2430:	1836      	adds	r6, r6, r0
    2432:	414f      	adcs	r7, r1
#endif
   
                    r0   = c0 & mask_26; 
    c1 += c0 >> 26; r1   = c1 & mask_26;
    2434:	9c06      	ldr	r4, [sp, #24]
    2436:	9d07      	ldr	r5, [sp, #28]
    2438:	01ab      	lsls	r3, r5, #6
    243a:	0ea0      	lsrs	r0, r4, #26
    243c:	4318      	orrs	r0, r3
    243e:	16a9      	asrs	r1, r5, #26
    2440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2442:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    2444:	18c0      	adds	r0, r0, r3
    2446:	4161      	adcs	r1, r4
    c2 += c1 >> 26; c[2] = c2 & mask_26; 
    2448:	018b      	lsls	r3, r1, #6
    244a:	0e84      	lsrs	r4, r0, #26
    244c:	431c      	orrs	r4, r3
    244e:	168d      	asrs	r5, r1, #26
    2450:	9a08      	ldr	r2, [sp, #32]
    2452:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2454:	18a4      	adds	r4, r4, r2
    2456:	415d      	adcs	r5, r3
    2458:	01a3      	lsls	r3, r4, #6
    245a:	099b      	lsrs	r3, r3, #6
    245c:	464a      	mov	r2, r9
    245e:	6093      	str	r3, [r2, #8]
    c3 += c2 >> 26; c[3] = c3 & mask_26; 
    2460:	01a9      	lsls	r1, r5, #6
    2462:	0ea2      	lsrs	r2, r4, #26
    2464:	430a      	orrs	r2, r1
    2466:	16ab      	asrs	r3, r5, #26
    2468:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    246a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    246c:	1912      	adds	r2, r2, r4
    246e:	416b      	adcs	r3, r5
    2470:	0191      	lsls	r1, r2, #6
    2472:	0989      	lsrs	r1, r1, #6
    2474:	464d      	mov	r5, r9
    2476:	60e9      	str	r1, [r5, #12]
    c4 += c3 >> 26; c[4] = c4 & mask_23; 
    2478:	0199      	lsls	r1, r3, #6
    247a:	0e94      	lsrs	r4, r2, #26
    247c:	430c      	orrs	r4, r1
    247e:	169d      	asrs	r5, r3, #26
    2480:	19a4      	adds	r4, r4, r6
    2482:	417d      	adcs	r5, r7
    2484:	0263      	lsls	r3, r4, #9
    2486:	0a5b      	lsrs	r3, r3, #9
    2488:	464a      	mov	r2, r9
    248a:	6113      	str	r3, [r2, #16]
                    r0   = c0 & mask_26; 
    248c:	9b06      	ldr	r3, [sp, #24]
    248e:	019b      	lsls	r3, r3, #6
    2490:	099b      	lsrs	r3, r3, #6
//    c4 += c3 >> 26; c[4] = c4 & mask_26; 
    
    c0   = r0 + (c4 >> 23);
    2492:	001e      	movs	r6, r3
    2494:	2700      	movs	r7, #0
    2496:	0269      	lsls	r1, r5, #9
    2498:	0de2      	lsrs	r2, r4, #23
    249a:	430a      	orrs	r2, r1
    249c:	15eb      	asrs	r3, r5, #23
    249e:	1992      	adds	r2, r2, r6
    24a0:	417b      	adcs	r3, r7
//    c0   = r0 + ((c4 >> 26) << 3);                  
    c[0] = (int32_t)c0 & mask_26;
    24a2:	0191      	lsls	r1, r2, #6
    24a4:	0989      	lsrs	r1, r1, #6
    24a6:	464c      	mov	r4, r9
    24a8:	6021      	str	r1, [r4, #0]
    c1 += c0 >> 26; r1   = c1 & mask_26;
    24aa:	0180      	lsls	r0, r0, #6
    24ac:	0980      	lsrs	r0, r0, #6
    c[1] = r1 + (int32_t)(c0 >> 26);
    24ae:	019b      	lsls	r3, r3, #6
    24b0:	0e92      	lsrs	r2, r2, #26
    24b2:	431a      	orrs	r2, r3
    24b4:	1880      	adds	r0, r0, r2
    24b6:	6060      	str	r0, [r4, #4]
}
    24b8:	b011      	add	sp, #68	; 0x44
    24ba:	bc3c      	pop	{r2, r3, r4, r5}
    24bc:	4690      	mov	r8, r2
    24be:	4699      	mov	r9, r3
    24c0:	46a2      	mov	sl, r4
    24c2:	46ab      	mov	fp, r5
    24c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	00005aa1 	.word	0x00005aa1

000024cc <vmod1271_incomplete>:


void vmod1271_incomplete(velm_t a, velm_t c)
{ // Reduce field element modulo 2^127-1
    24cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Redundant representation: 23/26/26/26/26-bit
  // Output is in the range [0, 2^127-1]
    int32_t t0, t1, t2, t3, t4;
    uint32_t rem;

    t0 = a[0]; t1 = a[1]; t2 = a[2]; t3 = a[3]; t4 = a[4];   
    24ce:	6805      	ldr	r5, [r0, #0]
    24d0:	6847      	ldr	r7, [r0, #4]
    24d2:	6882      	ldr	r2, [r0, #8]
    24d4:	68c6      	ldr	r6, [r0, #12]
    24d6:	6903      	ldr	r3, [r0, #16]

    // Carry propagation
    t1 += (t0 >> 26); t0 &= mask_26; 
    24d8:	16ac      	asrs	r4, r5, #26
    24da:	19e4      	adds	r4, r4, r7
    t2 += (t1 >> 26); t1 &= mask_26; 
    24dc:	16a0      	asrs	r0, r4, #26
    24de:	1880      	adds	r0, r0, r2
    24e0:	01a4      	lsls	r4, r4, #6
    24e2:	09a4      	lsrs	r4, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    24e4:	1682      	asrs	r2, r0, #26
    24e6:	1992      	adds	r2, r2, r6
    24e8:	0180      	lsls	r0, r0, #6
    24ea:	0980      	lsrs	r0, r0, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    24ec:	1696      	asrs	r6, r2, #26
    24ee:	18f6      	adds	r6, r6, r3
    24f0:	0192      	lsls	r2, r2, #6
    24f2:	0992      	lsrs	r2, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    24f4:	0277      	lsls	r7, r6, #9
    24f6:	0a7f      	lsrs	r7, r7, #9
    24f8:	15f6      	asrs	r6, r6, #23
    t1 += (t0 >> 26); t0 &= mask_26; 
    24fa:	01ad      	lsls	r5, r5, #6
    24fc:	09ad      	lsrs	r5, r5, #6
    
    // Correction
    t0 += rem; 
    24fe:	1973      	adds	r3, r6, r5
    t1 += (t0 >> 26); t0 &= mask_26; 
    2500:	169d      	asrs	r5, r3, #26
    2502:	192c      	adds	r4, r5, r4
    t2 += (t1 >> 26); t1 &= mask_26; 
    2504:	16a5      	asrs	r5, r4, #26
    2506:	1828      	adds	r0, r5, r0
    t3 += (t2 >> 26); t2 &= mask_26; 
    2508:	1685      	asrs	r5, r0, #26
    250a:	18aa      	adds	r2, r5, r2
    t4 += (t3 >> 26); t3 &= mask_26;
    250c:	1696      	asrs	r6, r2, #26
    250e:	19f6      	adds	r6, r6, r7
    rem = (t4 >> 23); t4 &= mask_23;
    2510:	15f7      	asrs	r7, r6, #23
    t1 += (t0 >> 26); t0 &= mask_26; 
    2512:	019d      	lsls	r5, r3, #6
    2514:	09ad      	lsrs	r5, r5, #6
    t0 += rem; 
    2516:	197d      	adds	r5, r7, r5

    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    2518:	600d      	str	r5, [r1, #0]
    t2 += (t1 >> 26); t1 &= mask_26; 
    251a:	01a4      	lsls	r4, r4, #6
    251c:	09a4      	lsrs	r4, r4, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    251e:	604c      	str	r4, [r1, #4]
    t3 += (t2 >> 26); t2 &= mask_26; 
    2520:	0180      	lsls	r0, r0, #6
    2522:	0980      	lsrs	r0, r0, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    2524:	6088      	str	r0, [r1, #8]
    t4 += (t3 >> 26); t3 &= mask_26;
    2526:	0192      	lsls	r2, r2, #6
    2528:	0992      	lsrs	r2, r2, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    252a:	60ca      	str	r2, [r1, #12]
    rem = (t4 >> 23); t4 &= mask_23;
    252c:	0273      	lsls	r3, r6, #9
    252e:	0a5b      	lsrs	r3, r3, #9
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    2530:	610b      	str	r3, [r1, #16]
}
    2532:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002534 <vmod1271>:


void vmod1271(velm_t a, velm_t c)
{ // Reduce field element modulo 2^127-1
    2534:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Output is in the range [0, 2^127-2]
  // Redundant representation: 23/26/26/26/26-bit
    int32_t t0, t1, t2, t3, t4;
    uint32_t mask, rem;

    t0 = a[0]; t1 = a[1]; t2 = a[2]; t3 = a[3]; t4 = a[4];   
    2536:	6803      	ldr	r3, [r0, #0]
    2538:	6847      	ldr	r7, [r0, #4]
    253a:	6882      	ldr	r2, [r0, #8]
    253c:	68c6      	ldr	r6, [r0, #12]
    253e:	6905      	ldr	r5, [r0, #16]

    // First carry propagation
    t1 += (t0 >> 26); t0 &= mask_26; 
    2540:	169c      	asrs	r4, r3, #26
    2542:	19e4      	adds	r4, r4, r7
    t2 += (t1 >> 26); t1 &= mask_26; 
    2544:	16a7      	asrs	r7, r4, #26
    2546:	18bf      	adds	r7, r7, r2
    2548:	01a4      	lsls	r4, r4, #6
    254a:	09a4      	lsrs	r4, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    254c:	16ba      	asrs	r2, r7, #26
    254e:	1992      	adds	r2, r2, r6
    2550:	01bf      	lsls	r7, r7, #6
    2552:	09bf      	lsrs	r7, r7, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    2554:	1690      	asrs	r0, r2, #26
    2556:	1940      	adds	r0, r0, r5
    2558:	0192      	lsls	r2, r2, #6
    255a:	0992      	lsrs	r2, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    255c:	0246      	lsls	r6, r0, #9
    255e:	0a76      	lsrs	r6, r6, #9
    t1 += (t0 >> 26); t0 &= mask_26; 
    2560:	019b      	lsls	r3, r3, #6
    2562:	099b      	lsrs	r3, r3, #6
    
    // First correction adding rem+1
    t0 += rem + 1; 
    2564:	3301      	adds	r3, #1
    rem = (t4 >> 23); t4 &= mask_23;
    2566:	15c0      	asrs	r0, r0, #23
    t0 += rem + 1; 
    2568:	181b      	adds	r3, r3, r0
    t1 += (t0 >> 26); t0 &= mask_26; 
    256a:	1698      	asrs	r0, r3, #26
    256c:	1904      	adds	r4, r0, r4
    t2 += (t1 >> 26); t1 &= mask_26; 
    256e:	16a0      	asrs	r0, r4, #26
    2570:	19c7      	adds	r7, r0, r7
    2572:	01a4      	lsls	r4, r4, #6
    2574:	09a0      	lsrs	r0, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    2576:	16bc      	asrs	r4, r7, #26
    2578:	18a2      	adds	r2, r4, r2
    257a:	01bf      	lsls	r7, r7, #6
    257c:	09bf      	lsrs	r7, r7, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    257e:	1695      	asrs	r5, r2, #26
    2580:	19ad      	adds	r5, r5, r6
    2582:	0192      	lsls	r2, r2, #6
    2584:	0996      	lsrs	r6, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    2586:	026c      	lsls	r4, r5, #9
    2588:	0a64      	lsrs	r4, r4, #9
    t1 += (t0 >> 26); t0 &= mask_26; 
    258a:	019b      	lsls	r3, r3, #6
    258c:	099b      	lsrs	r3, r3, #6
    rem = (t4 >> 23); t4 &= mask_23;
    258e:	15ed      	asrs	r5, r5, #23

    // If final carry = 0 then subtract 1
    mask = rem - 1;
    2590:	3d01      	subs	r5, #1
    t0 -= (mask & 1);
    2592:	2201      	movs	r2, #1
    2594:	4015      	ands	r5, r2
    2596:	1b5b      	subs	r3, r3, r5
    t1 += (t0 >> 26); t0 &= mask_26; 
    2598:	169d      	asrs	r5, r3, #26
    259a:	182d      	adds	r5, r5, r0
    t2 += (t1 >> 26); t1 &= mask_26; 
    259c:	16a8      	asrs	r0, r5, #26
    259e:	19c0      	adds	r0, r0, r7
    t3 += (t2 >> 26); t2 &= mask_26; 
    25a0:	1682      	asrs	r2, r0, #26
    25a2:	1992      	adds	r2, r2, r6
    t1 += (t0 >> 26); t0 &= mask_26; 
    25a4:	019b      	lsls	r3, r3, #6
    25a6:	099b      	lsrs	r3, r3, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    25a8:	600b      	str	r3, [r1, #0]
    t2 += (t1 >> 26); t1 &= mask_26; 
    25aa:	01ad      	lsls	r5, r5, #6
    25ac:	09ad      	lsrs	r5, r5, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    25ae:	604d      	str	r5, [r1, #4]
    t3 += (t2 >> 26); t2 &= mask_26; 
    25b0:	0180      	lsls	r0, r0, #6
    25b2:	0980      	lsrs	r0, r0, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    25b4:	6088      	str	r0, [r1, #8]
    t4 += (t3 >> 26); t3 &= mask_26;
    25b6:	0193      	lsls	r3, r2, #6
    25b8:	099b      	lsrs	r3, r3, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    25ba:	60cb      	str	r3, [r1, #12]
    t4 += (t3 >> 26); t3 &= mask_26;
    25bc:	1692      	asrs	r2, r2, #26
    25be:	1914      	adds	r4, r2, r4
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    25c0:	610c      	str	r4, [r1, #16]
}
    25c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000025c4 <vexp1251>:


__inline void vexp1251(felm_t a, felm_t af)
{ // Exponentiation over GF(p), af = a^(125-1)
    25c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25c6:	b09b      	sub	sp, #108	; 0x6c
    25c8:	0005      	movs	r5, r0
    25ca:	000e      	movs	r6, r1
	int i;
	velm_t t1, t2, t3, t4, t5;

	vsqr1271(a, t2);
    25cc:	a910      	add	r1, sp, #64	; 0x40
    25ce:	4c48      	ldr	r4, [pc, #288]	; (26f0 <vexp1251+0x12c>)
    25d0:	47a0      	blx	r4
	vmul1271(a, t2, t2);
    25d2:	aa10      	add	r2, sp, #64	; 0x40
    25d4:	0011      	movs	r1, r2
    25d6:	0028      	movs	r0, r5
    25d8:	4f46      	ldr	r7, [pc, #280]	; (26f4 <vexp1251+0x130>)
    25da:	47b8      	blx	r7
	vsqr1271(t2, t3);
    25dc:	a90b      	add	r1, sp, #44	; 0x2c
    25de:	a810      	add	r0, sp, #64	; 0x40
    25e0:	47a0      	blx	r4
	vsqr1271(t3, t3);
    25e2:	a90b      	add	r1, sp, #44	; 0x2c
    25e4:	0008      	movs	r0, r1
    25e6:	47a0      	blx	r4
	vmul1271(t2, t3, t3);
    25e8:	aa0b      	add	r2, sp, #44	; 0x2c
    25ea:	0011      	movs	r1, r2
    25ec:	a810      	add	r0, sp, #64	; 0x40
    25ee:	47b8      	blx	r7
	vsqr1271(t3, t4);
    25f0:	a906      	add	r1, sp, #24
    25f2:	a80b      	add	r0, sp, #44	; 0x2c
    25f4:	47a0      	blx	r4
	vsqr1271(t4, t4);
    25f6:	a906      	add	r1, sp, #24
    25f8:	0008      	movs	r0, r1
    25fa:	47a0      	blx	r4
	vsqr1271(t4, t4);
    25fc:	a906      	add	r1, sp, #24
    25fe:	0008      	movs	r0, r1
    2600:	47a0      	blx	r4
	vsqr1271(t4, t4);
    2602:	a906      	add	r1, sp, #24
    2604:	0008      	movs	r0, r1
    2606:	47a0      	blx	r4
	vmul1271(t3, t4, t4);
    2608:	aa06      	add	r2, sp, #24
    260a:	0011      	movs	r1, r2
    260c:	a80b      	add	r0, sp, #44	; 0x2c
    260e:	47b8      	blx	r7
	vsqr1271(t4, t5);
    2610:	a901      	add	r1, sp, #4
    2612:	a806      	add	r0, sp, #24
    2614:	47a0      	blx	r4
    2616:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) vsqr1271(t5, t5);
    2618:	4f35      	ldr	r7, [pc, #212]	; (26f0 <vexp1251+0x12c>)
    261a:	a901      	add	r1, sp, #4
    261c:	0008      	movs	r0, r1
    261e:	47b8      	blx	r7
    2620:	3c01      	subs	r4, #1
    2622:	2c00      	cmp	r4, #0
    2624:	d1f9      	bne.n	261a <vexp1251+0x56>
	vmul1271(t4, t5, t5);
    2626:	aa01      	add	r2, sp, #4
    2628:	0011      	movs	r1, r2
    262a:	a806      	add	r0, sp, #24
    262c:	4b31      	ldr	r3, [pc, #196]	; (26f4 <vexp1251+0x130>)
    262e:	4798      	blx	r3
	vsqr1271(t5, t2);
    2630:	a910      	add	r1, sp, #64	; 0x40
    2632:	a801      	add	r0, sp, #4
    2634:	4b2e      	ldr	r3, [pc, #184]	; (26f0 <vexp1251+0x12c>)
    2636:	4798      	blx	r3
    2638:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) vsqr1271(t2, t2);
    263a:	4f2d      	ldr	r7, [pc, #180]	; (26f0 <vexp1251+0x12c>)
    263c:	a910      	add	r1, sp, #64	; 0x40
    263e:	0008      	movs	r0, r1
    2640:	47b8      	blx	r7
    2642:	3c01      	subs	r4, #1
    2644:	2c00      	cmp	r4, #0
    2646:	d1f9      	bne.n	263c <vexp1251+0x78>
	vmul1271(t5, t2, t2);
    2648:	aa10      	add	r2, sp, #64	; 0x40
    264a:	0011      	movs	r1, r2
    264c:	a801      	add	r0, sp, #4
    264e:	4b29      	ldr	r3, [pc, #164]	; (26f4 <vexp1251+0x130>)
    2650:	4798      	blx	r3
	vsqr1271(t2, t1);
    2652:	a915      	add	r1, sp, #84	; 0x54
    2654:	a810      	add	r0, sp, #64	; 0x40
    2656:	4b26      	ldr	r3, [pc, #152]	; (26f0 <vexp1251+0x12c>)
    2658:	4798      	blx	r3
    265a:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) vsqr1271(t1, t1);
    265c:	4f24      	ldr	r7, [pc, #144]	; (26f0 <vexp1251+0x12c>)
    265e:	a915      	add	r1, sp, #84	; 0x54
    2660:	0008      	movs	r0, r1
    2662:	47b8      	blx	r7
    2664:	3c01      	subs	r4, #1
    2666:	2c00      	cmp	r4, #0
    2668:	d1f9      	bne.n	265e <vexp1251+0x9a>
	vmul1271(t2, t1, t1);
    266a:	aa15      	add	r2, sp, #84	; 0x54
    266c:	0011      	movs	r1, r2
    266e:	a810      	add	r0, sp, #64	; 0x40
    2670:	4b20      	ldr	r3, [pc, #128]	; (26f4 <vexp1251+0x130>)
    2672:	4798      	blx	r3
    2674:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) vsqr1271(t1, t1);
    2676:	4f1e      	ldr	r7, [pc, #120]	; (26f0 <vexp1251+0x12c>)
    2678:	a915      	add	r1, sp, #84	; 0x54
    267a:	0008      	movs	r0, r1
    267c:	47b8      	blx	r7
    267e:	3c01      	subs	r4, #1
    2680:	2c00      	cmp	r4, #0
    2682:	d1f9      	bne.n	2678 <vexp1251+0xb4>
	vmul1271(t1, t2, t1);
    2684:	aa15      	add	r2, sp, #84	; 0x54
    2686:	a910      	add	r1, sp, #64	; 0x40
    2688:	0010      	movs	r0, r2
    268a:	4b1a      	ldr	r3, [pc, #104]	; (26f4 <vexp1251+0x130>)
    268c:	4798      	blx	r3
    268e:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) vsqr1271(t1, t1);
    2690:	4f17      	ldr	r7, [pc, #92]	; (26f0 <vexp1251+0x12c>)
    2692:	a915      	add	r1, sp, #84	; 0x54
    2694:	0008      	movs	r0, r1
    2696:	47b8      	blx	r7
    2698:	3c01      	subs	r4, #1
    269a:	2c00      	cmp	r4, #0
    269c:	d1f9      	bne.n	2692 <vexp1251+0xce>
	vmul1271(t5, t1, t1);
    269e:	aa15      	add	r2, sp, #84	; 0x54
    26a0:	0011      	movs	r1, r2
    26a2:	a801      	add	r0, sp, #4
    26a4:	4b13      	ldr	r3, [pc, #76]	; (26f4 <vexp1251+0x130>)
    26a6:	4798      	blx	r3
    26a8:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) vsqr1271(t1, t1);
    26aa:	4f11      	ldr	r7, [pc, #68]	; (26f0 <vexp1251+0x12c>)
    26ac:	a915      	add	r1, sp, #84	; 0x54
    26ae:	0008      	movs	r0, r1
    26b0:	47b8      	blx	r7
    26b2:	3c01      	subs	r4, #1
    26b4:	2c00      	cmp	r4, #0
    26b6:	d1f9      	bne.n	26ac <vexp1251+0xe8>
	vmul1271(t4, t1, t1);
    26b8:	aa15      	add	r2, sp, #84	; 0x54
    26ba:	0011      	movs	r1, r2
    26bc:	a806      	add	r0, sp, #24
    26be:	4b0d      	ldr	r3, [pc, #52]	; (26f4 <vexp1251+0x130>)
    26c0:	4798      	blx	r3
    26c2:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) vsqr1271(t1, t1);
    26c4:	4f0a      	ldr	r7, [pc, #40]	; (26f0 <vexp1251+0x12c>)
    26c6:	a915      	add	r1, sp, #84	; 0x54
    26c8:	0008      	movs	r0, r1
    26ca:	47b8      	blx	r7
    26cc:	3c01      	subs	r4, #1
    26ce:	2c00      	cmp	r4, #0
    26d0:	d1f9      	bne.n	26c6 <vexp1251+0x102>
	vmul1271(t3, t1, t1);
    26d2:	aa15      	add	r2, sp, #84	; 0x54
    26d4:	0011      	movs	r1, r2
    26d6:	a80b      	add	r0, sp, #44	; 0x2c
    26d8:	4c06      	ldr	r4, [pc, #24]	; (26f4 <vexp1251+0x130>)
    26da:	47a0      	blx	r4
	vsqr1271(t1, t1);
    26dc:	a915      	add	r1, sp, #84	; 0x54
    26de:	0008      	movs	r0, r1
    26e0:	4b03      	ldr	r3, [pc, #12]	; (26f0 <vexp1251+0x12c>)
    26e2:	4798      	blx	r3
	vmul1271(a, t1, af);
    26e4:	0032      	movs	r2, r6
    26e6:	a915      	add	r1, sp, #84	; 0x54
    26e8:	0028      	movs	r0, r5
    26ea:	47a0      	blx	r4
}
    26ec:	b01b      	add	sp, #108	; 0x6c
    26ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26f0:	000022f1 	.word	0x000022f1
    26f4:	0000205d 	.word	0x0000205d

000026f8 <vinv1271>:


void vinv1271(felm_t a)
{ // Field inversion, af = a^-1 = a^(p-2) mod p
    26f8:	b570      	push	{r4, r5, r6, lr}
    26fa:	b09e      	sub	sp, #120	; 0x78
    26fc:	0005      	movs	r5, r0
	vsqr1271(a, t2);
    26fe:	a905      	add	r1, sp, #20
    2700:	4c4d      	ldr	r4, [pc, #308]	; (2838 <vinv1271+0x140>)
    2702:	47a0      	blx	r4
	vmul1271(a, t2, t2);
    2704:	aa05      	add	r2, sp, #20
    2706:	0011      	movs	r1, r2
    2708:	0028      	movs	r0, r5
    270a:	4e4c      	ldr	r6, [pc, #304]	; (283c <vinv1271+0x144>)
    270c:	47b0      	blx	r6
	vsqr1271(t2, t3);
    270e:	a90a      	add	r1, sp, #40	; 0x28
    2710:	a805      	add	r0, sp, #20
    2712:	47a0      	blx	r4
	vsqr1271(t3, t3);
    2714:	a90a      	add	r1, sp, #40	; 0x28
    2716:	0008      	movs	r0, r1
    2718:	47a0      	blx	r4
	vmul1271(t2, t3, t3);
    271a:	aa0a      	add	r2, sp, #40	; 0x28
    271c:	0011      	movs	r1, r2
    271e:	a805      	add	r0, sp, #20
    2720:	47b0      	blx	r6
	vsqr1271(t3, t4);
    2722:	a90f      	add	r1, sp, #60	; 0x3c
    2724:	a80a      	add	r0, sp, #40	; 0x28
    2726:	47a0      	blx	r4
	vsqr1271(t4, t4);
    2728:	a90f      	add	r1, sp, #60	; 0x3c
    272a:	0008      	movs	r0, r1
    272c:	47a0      	blx	r4
	vsqr1271(t4, t4);
    272e:	a90f      	add	r1, sp, #60	; 0x3c
    2730:	0008      	movs	r0, r1
    2732:	47a0      	blx	r4
	vsqr1271(t4, t4);
    2734:	a90f      	add	r1, sp, #60	; 0x3c
    2736:	0008      	movs	r0, r1
    2738:	47a0      	blx	r4
	vmul1271(t3, t4, t4);
    273a:	aa0f      	add	r2, sp, #60	; 0x3c
    273c:	0011      	movs	r1, r2
    273e:	a80a      	add	r0, sp, #40	; 0x28
    2740:	47b0      	blx	r6
	vsqr1271(t4, t5);
    2742:	a914      	add	r1, sp, #80	; 0x50
    2744:	a80f      	add	r0, sp, #60	; 0x3c
    2746:	47a0      	blx	r4
    2748:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) vsqr1271(t5, t5);
    274a:	4e3b      	ldr	r6, [pc, #236]	; (2838 <vinv1271+0x140>)
    274c:	a914      	add	r1, sp, #80	; 0x50
    274e:	0008      	movs	r0, r1
    2750:	47b0      	blx	r6
    2752:	3c01      	subs	r4, #1
    2754:	2c00      	cmp	r4, #0
    2756:	d1f9      	bne.n	274c <vinv1271+0x54>
	vmul1271(t4, t5, t5);
    2758:	aa14      	add	r2, sp, #80	; 0x50
    275a:	0011      	movs	r1, r2
    275c:	a80f      	add	r0, sp, #60	; 0x3c
    275e:	4b37      	ldr	r3, [pc, #220]	; (283c <vinv1271+0x144>)
    2760:	4798      	blx	r3
	vsqr1271(t5, t2);
    2762:	a905      	add	r1, sp, #20
    2764:	a814      	add	r0, sp, #80	; 0x50
    2766:	4b34      	ldr	r3, [pc, #208]	; (2838 <vinv1271+0x140>)
    2768:	4798      	blx	r3
    276a:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) vsqr1271(t2, t2);
    276c:	4e32      	ldr	r6, [pc, #200]	; (2838 <vinv1271+0x140>)
    276e:	a905      	add	r1, sp, #20
    2770:	0008      	movs	r0, r1
    2772:	47b0      	blx	r6
    2774:	3c01      	subs	r4, #1
    2776:	2c00      	cmp	r4, #0
    2778:	d1f9      	bne.n	276e <vinv1271+0x76>
	vmul1271(t5, t2, t2);
    277a:	aa05      	add	r2, sp, #20
    277c:	0011      	movs	r1, r2
    277e:	a814      	add	r0, sp, #80	; 0x50
    2780:	4b2e      	ldr	r3, [pc, #184]	; (283c <vinv1271+0x144>)
    2782:	4798      	blx	r3
	vsqr1271(t2, t1);
    2784:	4669      	mov	r1, sp
    2786:	a805      	add	r0, sp, #20
    2788:	4b2b      	ldr	r3, [pc, #172]	; (2838 <vinv1271+0x140>)
    278a:	4798      	blx	r3
    278c:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) vsqr1271(t1, t1);
    278e:	4e2a      	ldr	r6, [pc, #168]	; (2838 <vinv1271+0x140>)
    2790:	4669      	mov	r1, sp
    2792:	4668      	mov	r0, sp
    2794:	47b0      	blx	r6
    2796:	3c01      	subs	r4, #1
    2798:	2c00      	cmp	r4, #0
    279a:	d1f9      	bne.n	2790 <vinv1271+0x98>
	vmul1271(t2, t1, t1);
    279c:	466a      	mov	r2, sp
    279e:	4669      	mov	r1, sp
    27a0:	a805      	add	r0, sp, #20
    27a2:	4b26      	ldr	r3, [pc, #152]	; (283c <vinv1271+0x144>)
    27a4:	4798      	blx	r3
    27a6:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) vsqr1271(t1, t1);
    27a8:	4e23      	ldr	r6, [pc, #140]	; (2838 <vinv1271+0x140>)
    27aa:	4669      	mov	r1, sp
    27ac:	4668      	mov	r0, sp
    27ae:	47b0      	blx	r6
    27b0:	3c01      	subs	r4, #1
    27b2:	2c00      	cmp	r4, #0
    27b4:	d1f9      	bne.n	27aa <vinv1271+0xb2>
	vmul1271(t1, t2, t1);
    27b6:	466a      	mov	r2, sp
    27b8:	a905      	add	r1, sp, #20
    27ba:	4668      	mov	r0, sp
    27bc:	4b1f      	ldr	r3, [pc, #124]	; (283c <vinv1271+0x144>)
    27be:	4798      	blx	r3
    27c0:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) vsqr1271(t1, t1);
    27c2:	4e1d      	ldr	r6, [pc, #116]	; (2838 <vinv1271+0x140>)
    27c4:	4669      	mov	r1, sp
    27c6:	4668      	mov	r0, sp
    27c8:	47b0      	blx	r6
    27ca:	3c01      	subs	r4, #1
    27cc:	2c00      	cmp	r4, #0
    27ce:	d1f9      	bne.n	27c4 <vinv1271+0xcc>
	vmul1271(t5, t1, t1);
    27d0:	466a      	mov	r2, sp
    27d2:	4669      	mov	r1, sp
    27d4:	a814      	add	r0, sp, #80	; 0x50
    27d6:	4b19      	ldr	r3, [pc, #100]	; (283c <vinv1271+0x144>)
    27d8:	4798      	blx	r3
    27da:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) vsqr1271(t1, t1);
    27dc:	4e16      	ldr	r6, [pc, #88]	; (2838 <vinv1271+0x140>)
    27de:	4669      	mov	r1, sp
    27e0:	4668      	mov	r0, sp
    27e2:	47b0      	blx	r6
    27e4:	3c01      	subs	r4, #1
    27e6:	2c00      	cmp	r4, #0
    27e8:	d1f9      	bne.n	27de <vinv1271+0xe6>
	vmul1271(t4, t1, t1);
    27ea:	466a      	mov	r2, sp
    27ec:	4669      	mov	r1, sp
    27ee:	a80f      	add	r0, sp, #60	; 0x3c
    27f0:	4b12      	ldr	r3, [pc, #72]	; (283c <vinv1271+0x144>)
    27f2:	4798      	blx	r3
    27f4:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) vsqr1271(t1, t1);
    27f6:	4e10      	ldr	r6, [pc, #64]	; (2838 <vinv1271+0x140>)
    27f8:	4669      	mov	r1, sp
    27fa:	4668      	mov	r0, sp
    27fc:	47b0      	blx	r6
    27fe:	3c01      	subs	r4, #1
    2800:	2c00      	cmp	r4, #0
    2802:	d1f9      	bne.n	27f8 <vinv1271+0x100>
	vmul1271(t3, t1, t1);
    2804:	466a      	mov	r2, sp
    2806:	4669      	mov	r1, sp
    2808:	a80a      	add	r0, sp, #40	; 0x28
    280a:	4c0c      	ldr	r4, [pc, #48]	; (283c <vinv1271+0x144>)
    280c:	47a0      	blx	r4
	vsqr1271(t1, t1);
    280e:	4669      	mov	r1, sp
    2810:	4668      	mov	r0, sp
    2812:	4e09      	ldr	r6, [pc, #36]	; (2838 <vinv1271+0x140>)
    2814:	47b0      	blx	r6
	vmul1271(a, t1, af);
    2816:	aa19      	add	r2, sp, #100	; 0x64
    2818:	4669      	mov	r1, sp
    281a:	0028      	movs	r0, r5
    281c:	47a0      	blx	r4
  // Hardcoded for p = 2^127-1
	velm_t t;

	vexp1251(a, t);
	vsqr1271(t, t);
    281e:	a919      	add	r1, sp, #100	; 0x64
    2820:	0008      	movs	r0, r1
    2822:	47b0      	blx	r6
	vsqr1271(t, t);
    2824:	a919      	add	r1, sp, #100	; 0x64
    2826:	0008      	movs	r0, r1
    2828:	47b0      	blx	r6
	vmul1271(a, t, a);
    282a:	002a      	movs	r2, r5
    282c:	a919      	add	r1, sp, #100	; 0x64
    282e:	0028      	movs	r0, r5
    2830:	47a0      	blx	r4
}
    2832:	b01e      	add	sp, #120	; 0x78
    2834:	bd70      	pop	{r4, r5, r6, pc}
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	000022f1 	.word	0x000022f1
    283c:	0000205d 	.word	0x0000205d

00002840 <from_std_to_ext>:


void from_std_to_ext(f2elm_t a, v2elm_t c)
{ // Expand GF(p^2) element represented with two 4 32-bit digits to 23/26/26/26/26/23/26/26/26/26-bit vector representation
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Assumes fully reduced input in [0, 2^127-1]  
    const uint32_t mask_8  = ((uint32_t)1 <<  8) - 1;   
    const uint32_t mask_14 = ((uint32_t)1 << 14) - 1;  
    const uint32_t mask_20 = ((uint32_t)1 << 20) - 1; 

    c[0] = a[0][0] & mask_26;
    2842:	6803      	ldr	r3, [r0, #0]
    2844:	019b      	lsls	r3, r3, #6
    2846:	099b      	lsrs	r3, r3, #6
    2848:	600b      	str	r3, [r1, #0]
    c[1] = (a[0][0] >> 26) | ((a[0][1] & mask_20) <<  6);
    284a:	6843      	ldr	r3, [r0, #4]
    284c:	019b      	lsls	r3, r3, #6
    284e:	4a1c      	ldr	r2, [pc, #112]	; (28c0 <from_std_to_ext+0x80>)
    2850:	4013      	ands	r3, r2
    2852:	6804      	ldr	r4, [r0, #0]
    2854:	0ea4      	lsrs	r4, r4, #26
    2856:	4323      	orrs	r3, r4
    2858:	604b      	str	r3, [r1, #4]
    c[2] = (a[0][1] >> 20) | ((a[0][2] & mask_14) << 12);
    285a:	6883      	ldr	r3, [r0, #8]
    285c:	031b      	lsls	r3, r3, #12
    285e:	4f19      	ldr	r7, [pc, #100]	; (28c4 <from_std_to_ext+0x84>)
    2860:	403b      	ands	r3, r7
    2862:	6844      	ldr	r4, [r0, #4]
    2864:	0d24      	lsrs	r4, r4, #20
    2866:	4323      	orrs	r3, r4
    2868:	608b      	str	r3, [r1, #8]
    c[3] = (a[0][2] >> 14) | ((a[0][3] & mask_8 ) << 18);
    286a:	68c3      	ldr	r3, [r0, #12]
    286c:	049d      	lsls	r5, r3, #18
    286e:	26ff      	movs	r6, #255	; 0xff
    2870:	04b6      	lsls	r6, r6, #18
    2872:	4035      	ands	r5, r6
    2874:	6883      	ldr	r3, [r0, #8]
    2876:	0b9b      	lsrs	r3, r3, #14
    2878:	431d      	orrs	r5, r3
    287a:	60cd      	str	r5, [r1, #12]
    c[4] = (a[0][3] >>  8) & mask_23;
    287c:	68c3      	ldr	r3, [r0, #12]
    287e:	005b      	lsls	r3, r3, #1
    2880:	0a5b      	lsrs	r3, r3, #9
    2882:	610b      	str	r3, [r1, #16]

    c[5] = a[1][0] & mask_26;
    2884:	6903      	ldr	r3, [r0, #16]
    2886:	019b      	lsls	r3, r3, #6
    2888:	099b      	lsrs	r3, r3, #6
    288a:	614b      	str	r3, [r1, #20]
    c[6] = (a[1][0] >> 26) | ((a[1][1] & mask_20) <<  6);
    288c:	6943      	ldr	r3, [r0, #20]
    288e:	019c      	lsls	r4, r3, #6
    2890:	4014      	ands	r4, r2
    2892:	6903      	ldr	r3, [r0, #16]
    2894:	0e9b      	lsrs	r3, r3, #26
    2896:	431c      	orrs	r4, r3
    2898:	618c      	str	r4, [r1, #24]
    c[7] = (a[1][1] >> 20) | ((a[1][2] & mask_14) << 12);
    289a:	6983      	ldr	r3, [r0, #24]
    289c:	031a      	lsls	r2, r3, #12
    289e:	403a      	ands	r2, r7
    28a0:	6943      	ldr	r3, [r0, #20]
    28a2:	0d1b      	lsrs	r3, r3, #20
    28a4:	431a      	orrs	r2, r3
    28a6:	61ca      	str	r2, [r1, #28]
    c[8] = (a[1][2] >> 14) | ((a[1][3] & mask_8 ) << 18);
    28a8:	69c3      	ldr	r3, [r0, #28]
    28aa:	049b      	lsls	r3, r3, #18
    28ac:	4033      	ands	r3, r6
    28ae:	6982      	ldr	r2, [r0, #24]
    28b0:	0b92      	lsrs	r2, r2, #14
    28b2:	4313      	orrs	r3, r2
    28b4:	620b      	str	r3, [r1, #32]
    c[9] = (a[1][3] >>  8) & mask_23;
    28b6:	69c3      	ldr	r3, [r0, #28]
    28b8:	005b      	lsls	r3, r3, #1
    28ba:	0a5b      	lsrs	r3, r3, #9
    28bc:	624b      	str	r3, [r1, #36]	; 0x24
}
    28be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28c0:	03ffffc0 	.word	0x03ffffc0
    28c4:	03fff000 	.word	0x03fff000

000028c8 <from_ext_to_std>:

void from_ext_to_std(v2elm_t a, f2elm_t c)
{ // Contract GF(p^2) element in 23/26/26/26/26/23/26/26/26/26-bit vector representation to two 4 32-bit digits
  // Assumes fully reduced input in [0, 2^127-1]
        
    c[0][0]  = (a[1] << 26) |  a[0];
    28c8:	6843      	ldr	r3, [r0, #4]
    28ca:	069b      	lsls	r3, r3, #26
    28cc:	6802      	ldr	r2, [r0, #0]
    28ce:	4313      	orrs	r3, r2
    28d0:	600b      	str	r3, [r1, #0]
    c[0][1]  = (a[2] << 20) | (a[1] >>  6);
    28d2:	6883      	ldr	r3, [r0, #8]
    28d4:	051b      	lsls	r3, r3, #20
    28d6:	6842      	ldr	r2, [r0, #4]
    28d8:	0992      	lsrs	r2, r2, #6
    28da:	4313      	orrs	r3, r2
    28dc:	604b      	str	r3, [r1, #4]
    c[0][2]  = (a[3] << 14) | (a[2] >> 12);
    28de:	68c3      	ldr	r3, [r0, #12]
    28e0:	039b      	lsls	r3, r3, #14
    28e2:	6882      	ldr	r2, [r0, #8]
    28e4:	0b12      	lsrs	r2, r2, #12
    28e6:	4313      	orrs	r3, r2
    28e8:	608b      	str	r3, [r1, #8]
    c[0][3]  = (a[4] <<  8) | (a[3] >> 18);
    28ea:	6903      	ldr	r3, [r0, #16]
    28ec:	021b      	lsls	r3, r3, #8
    28ee:	68c2      	ldr	r2, [r0, #12]
    28f0:	0c92      	lsrs	r2, r2, #18
    28f2:	4313      	orrs	r3, r2
    28f4:	60cb      	str	r3, [r1, #12]
        
    c[1][0]  = (a[6] << 26) |  a[5];
    28f6:	6983      	ldr	r3, [r0, #24]
    28f8:	069b      	lsls	r3, r3, #26
    28fa:	6942      	ldr	r2, [r0, #20]
    28fc:	4313      	orrs	r3, r2
    28fe:	610b      	str	r3, [r1, #16]
    c[1][1]  = (a[7] << 20) | (a[6] >>  6);
    2900:	69c3      	ldr	r3, [r0, #28]
    2902:	051b      	lsls	r3, r3, #20
    2904:	6982      	ldr	r2, [r0, #24]
    2906:	0992      	lsrs	r2, r2, #6
    2908:	4313      	orrs	r3, r2
    290a:	614b      	str	r3, [r1, #20]
    c[1][2]  = (a[8] << 14) | (a[7] >> 12);
    290c:	6a03      	ldr	r3, [r0, #32]
    290e:	039b      	lsls	r3, r3, #14
    2910:	69c2      	ldr	r2, [r0, #28]
    2912:	0b12      	lsrs	r2, r2, #12
    2914:	4313      	orrs	r3, r2
    2916:	618b      	str	r3, [r1, #24]
    c[1][3]  = (a[9] <<  8) | (a[8] >> 18);
    2918:	6a43      	ldr	r3, [r0, #36]	; 0x24
    291a:	021b      	lsls	r3, r3, #8
    291c:	6a02      	ldr	r2, [r0, #32]
    291e:	0c92      	lsrs	r2, r2, #18
    2920:	4313      	orrs	r3, r2
    2922:	61cb      	str	r3, [r1, #28]
}
    2924:	4770      	bx	lr
	...

00002928 <mp_mul>:


void mp_mul(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Schoolbook multiprecision multiply, c = a*b   
    2928:	b5f0      	push	{r4, r5, r6, r7, lr}
    292a:	46de      	mov	lr, fp
    292c:	4657      	mov	r7, sl
    292e:	464e      	mov	r6, r9
    2930:	4645      	mov	r5, r8
    2932:	b5e0      	push	{r5, r6, r7, lr}
    2934:	b087      	sub	sp, #28
    2936:	9103      	str	r1, [sp, #12]
    2938:	4699      	mov	r9, r3
    unsigned int i, j;
    digit_t u, v, UV[2];
    unsigned int carry = 0;

    for (i = 0; i < (2*nwords); i++) c[i] = 0;
    293a:	0059      	lsls	r1, r3, #1
    293c:	d006      	beq.n	294c <mp_mul+0x24>
    293e:	0013      	movs	r3, r2
    2940:	0089      	lsls	r1, r1, #2
    2942:	1851      	adds	r1, r2, r1
    2944:	2400      	movs	r4, #0
    2946:	c310      	stmia	r3!, {r4}
    2948:	428b      	cmp	r3, r1
    294a:	d1fc      	bne.n	2946 <mp_mul+0x1e>

    for (i = 0; i < nwords; i++) {
    294c:	464b      	mov	r3, r9
    294e:	2b00      	cmp	r3, #0
    2950:	d035      	beq.n	29be <mp_mul+0x96>
    2952:	9201      	str	r2, [sp, #4]
    2954:	4680      	mov	r8, r0
    2956:	009b      	lsls	r3, r3, #2
    2958:	9302      	str	r3, [sp, #8]
    295a:	2300      	movs	r3, #0
    295c:	469b      	mov	fp, r3
        u = 0;
        for (j = 0; j < nwords; j++) {
            MUL(a[i], b[j], UV+1, UV[0]); 
    295e:	4b1b      	ldr	r3, [pc, #108]	; (29cc <mp_mul+0xa4>)
    2960:	469a      	mov	sl, r3
    2962:	9f03      	ldr	r7, [sp, #12]
{ // Schoolbook multiprecision multiply, c = a*b   
    2964:	9e01      	ldr	r6, [sp, #4]
    2966:	2400      	movs	r4, #0
    2968:	2500      	movs	r5, #0
            MUL(a[i], b[j], UV+1, UV[0]); 
    296a:	cf02      	ldmia	r7!, {r1}
    296c:	aa04      	add	r2, sp, #16
    296e:	4643      	mov	r3, r8
    2970:	6818      	ldr	r0, [r3, #0]
    2972:	47d0      	blx	sl
            ADDC(0, UV[0], u, carry, v); 
    2974:	9a04      	ldr	r2, [sp, #16]
    2976:	1913      	adds	r3, r2, r4
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
}

static __inline unsigned int is_digit_lessthan_ct(digit_t x, digit_t y)
{ // Is x < y?
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    2978:	0011      	movs	r1, r2
    297a:	4059      	eors	r1, r3
    297c:	4054      	eors	r4, r2
    297e:	430c      	orrs	r4, r1
    2980:	405c      	eors	r4, r3
    2982:	0fe4      	lsrs	r4, r4, #31
            u = UV[1] + carry;
    2984:	9a05      	ldr	r2, [sp, #20]
    2986:	9200      	str	r2, [sp, #0]
    2988:	18a1      	adds	r1, r4, r2
            ADDC(0, c[i+j], v, carry, v); 
    298a:	6830      	ldr	r0, [r6, #0]
    298c:	181a      	adds	r2, r3, r0
    298e:	4043      	eors	r3, r0
    2990:	001c      	movs	r4, r3
    2992:	4050      	eors	r0, r2
    2994:	4304      	orrs	r4, r0
    2996:	4054      	eors	r4, r2
    2998:	0fe4      	lsrs	r4, r4, #31
            u = u + carry;
    299a:	1864      	adds	r4, r4, r1
            c[i+j] = v;
    299c:	c604      	stmia	r6!, {r2}
        for (j = 0; j < nwords; j++) {
    299e:	3501      	adds	r5, #1
    29a0:	45a9      	cmp	r9, r5
    29a2:	d1e2      	bne.n	296a <mp_mul+0x42>
        }
        c[nwords+i] = u;
    29a4:	9b01      	ldr	r3, [sp, #4]
    29a6:	9a02      	ldr	r2, [sp, #8]
    29a8:	509c      	str	r4, [r3, r2]
    for (i = 0; i < nwords; i++) {
    29aa:	2201      	movs	r2, #1
    29ac:	4694      	mov	ip, r2
    29ae:	44e3      	add	fp, ip
    29b0:	3304      	adds	r3, #4
    29b2:	9301      	str	r3, [sp, #4]
    29b4:	2304      	movs	r3, #4
    29b6:	469c      	mov	ip, r3
    29b8:	44e0      	add	r8, ip
    29ba:	455d      	cmp	r5, fp
    29bc:	d1d1      	bne.n	2962 <mp_mul+0x3a>
    }
}
    29be:	b007      	add	sp, #28
    29c0:	bc3c      	pop	{r2, r3, r4, r5}
    29c2:	4690      	mov	r8, r2
    29c4:	4699      	mov	r9, r3
    29c6:	46a2      	mov	sl, r4
    29c8:	46ab      	mov	fp, r5
    29ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29cc:	00001f75 	.word	0x00001f75

000029d0 <subtract>:
    return carry;
}


unsigned int subtract(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Multiprecision subtraction, c = a-b, where lng(a) = lng(b) = nwords. Returns the borrow bit
    29d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29d2:	46d6      	mov	lr, sl
    29d4:	464f      	mov	r7, r9
    29d6:	4646      	mov	r6, r8
    29d8:	b5c0      	push	{r6, r7, lr}
    29da:	4684      	mov	ip, r0
    29dc:	4691      	mov	r9, r2
    unsigned int i, borrow = 0;

    for (i = 0; i < nwords; i++) {
    29de:	2b00      	cmp	r3, #0
    29e0:	d022      	beq.n	2a28 <subtract+0x58>
    29e2:	009b      	lsls	r3, r3, #2
    29e4:	4698      	mov	r8, r3
    29e6:	2600      	movs	r6, #0
    29e8:	2200      	movs	r2, #0
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    29ea:	2301      	movs	r3, #1
    29ec:	469a      	mov	sl, r3
        SUBC(borrow, a[i], b[i], borrow, c[i]);
    29ee:	4663      	mov	r3, ip
    29f0:	599b      	ldr	r3, [r3, r6]
    29f2:	598f      	ldr	r7, [r1, r6]
    29f4:	1bdd      	subs	r5, r3, r7
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    29f6:	426c      	negs	r4, r5
    29f8:	432c      	orrs	r4, r5
    29fa:	0fe4      	lsrs	r4, r4, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    29fc:	4650      	mov	r0, sl
    29fe:	4044      	eors	r4, r0
    2a00:	4014      	ands	r4, r2
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    2a02:	0018      	movs	r0, r3
    2a04:	4078      	eors	r0, r7
    2a06:	406f      	eors	r7, r5
    2a08:	4338      	orrs	r0, r7
    2a0a:	4058      	eors	r0, r3
    2a0c:	0fc0      	lsrs	r0, r0, #31
    2a0e:	4320      	orrs	r0, r4
    2a10:	1aad      	subs	r5, r5, r2
    2a12:	464b      	mov	r3, r9
    2a14:	519d      	str	r5, [r3, r6]
    2a16:	3604      	adds	r6, #4
    2a18:	0002      	movs	r2, r0
    for (i = 0; i < nwords; i++) {
    2a1a:	4546      	cmp	r6, r8
    2a1c:	d1e7      	bne.n	29ee <subtract+0x1e>
    }

    return borrow;
}
    2a1e:	bc1c      	pop	{r2, r3, r4}
    2a20:	4690      	mov	r8, r2
    2a22:	4699      	mov	r9, r3
    2a24:	46a2      	mov	sl, r4
    2a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsigned int i, borrow = 0;
    2a28:	2000      	movs	r0, #0
    return borrow;
    2a2a:	e7f8      	b.n	2a1e <subtract+0x4e>

00002a2c <Montgomery_multiply_mod_order>:
	subtract_mod_order(c, (digit_t*)&curve_order, c);  // if c >= order then c = c - order
}
 

void Montgomery_multiply_mod_order(const digit_t* ma, const digit_t* mb, digit_t* mc)
{ // 256-bit Montgomery multiplication modulo the curve order, mc = ma*mb*r' mod order, where ma,mb,mc in [0, order-1]
    2a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a2e:	b0b1      	sub	sp, #196	; 0xc4
    2a30:	0015      	movs	r5, r2
    mp_mul(a, b, c, NWORDS_ORDER);
    2a32:	2308      	movs	r3, #8
    2a34:	aa20      	add	r2, sp, #128	; 0x80
    2a36:	4c2c      	ldr	r4, [pc, #176]	; (2ae8 <Montgomery_multiply_mod_order+0xbc>)
    2a38:	47a0      	blx	r4
    2a3a:	2308      	movs	r3, #8
    2a3c:	aa10      	add	r2, sp, #64	; 0x40
    2a3e:	492b      	ldr	r1, [pc, #172]	; (2aec <Montgomery_multiply_mod_order+0xc0>)
    2a40:	a820      	add	r0, sp, #128	; 0x80
    2a42:	47a0      	blx	r4
    2a44:	2308      	movs	r3, #8
    2a46:	466a      	mov	r2, sp
    2a48:	4929      	ldr	r1, [pc, #164]	; (2af0 <Montgomery_multiply_mod_order+0xc4>)
    2a4a:	a810      	add	r0, sp, #64	; 0x40
    2a4c:	47a0      	blx	r4
    2a4e:	2600      	movs	r6, #0
    unsigned int i, carry = 0;
    2a50:	2400      	movs	r4, #0
        ADDC(carry, a[i], b[i], carry, c[i]);
    2a52:	a920      	add	r1, sp, #128	; 0x80
    2a54:	5873      	ldr	r3, [r6, r1]
    2a56:	191a      	adds	r2, r3, r4
    2a58:	4668      	mov	r0, sp
    2a5a:	5830      	ldr	r0, [r6, r0]
    2a5c:	4684      	mov	ip, r0
    2a5e:	1817      	adds	r7, r2, r0
    2a60:	4668      	mov	r0, sp
    2a62:	5037      	str	r7, [r6, r0]
    2a64:	0010      	movs	r0, r2
    2a66:	4060      	eors	r0, r4
    2a68:	405c      	eors	r4, r3
    2a6a:	4320      	orrs	r0, r4
    2a6c:	4050      	eors	r0, r2
    2a6e:	0013      	movs	r3, r2
    2a70:	407b      	eors	r3, r7
    2a72:	4664      	mov	r4, ip
    2a74:	4054      	eors	r4, r2
    2a76:	431c      	orrs	r4, r3
    2a78:	407c      	eors	r4, r7
    2a7a:	4304      	orrs	r4, r0
    2a7c:	0fe4      	lsrs	r4, r4, #31
    2a7e:	3604      	adds	r6, #4
    for (i = 0; i < nwords; i++) {
    2a80:	2e40      	cmp	r6, #64	; 0x40
    2a82:	d1e7      	bne.n	2a54 <Montgomery_multiply_mod_order+0x28>
    2a84:	2300      	movs	r3, #0
    multiply(P, (digit_t*)&Montgomery_rprime, Q);      // Q = P * r' mod 2^(log_2(r))
    multiply(Q, (digit_t*)&curve_order, temp);         // temp = Q * r
    cout = add(P, temp, temp, 2*NWORDS_ORDER);         // (cout, temp) = P + Q * r     

    for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
        mc[i] = temp[NWORDS_ORDER + i];
    2a86:	001a      	movs	r2, r3
    2a88:	446a      	add	r2, sp
    2a8a:	6a12      	ldr	r2, [r2, #32]
    2a8c:	50ea      	str	r2, [r5, r3]
    2a8e:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
    2a90:	2b20      	cmp	r3, #32
    2a92:	d1f8      	bne.n	2a86 <Montgomery_multiply_mod_order+0x5a>
    }

    // Final, constant-time subtraction     
    bout = subtract(mc, (digit_t*)&curve_order, mc, NWORDS_ORDER);    // (cout, mc) = (cout, mc) - r
    2a94:	3b18      	subs	r3, #24
    2a96:	002a      	movs	r2, r5
    2a98:	4915      	ldr	r1, [pc, #84]	; (2af0 <Montgomery_multiply_mod_order+0xc4>)
    2a9a:	0028      	movs	r0, r5
    2a9c:	4e15      	ldr	r6, [pc, #84]	; (2af4 <Montgomery_multiply_mod_order+0xc8>)
    2a9e:	47b0      	blx	r6
    mask = (digit_t)cout - (digit_t)bout;              // if (cout, mc) >= 0 then mask = 0x00..0, else if (cout, mc) < 0 then mask = 0xFF..F
    2aa0:	1a24      	subs	r4, r4, r0
    2aa2:	2300      	movs	r3, #0

    for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
        temp[i] = (order[i] & mask);
    2aa4:	4912      	ldr	r1, [pc, #72]	; (2af0 <Montgomery_multiply_mod_order+0xc4>)
    2aa6:	585a      	ldr	r2, [r3, r1]
    2aa8:	4022      	ands	r2, r4
    2aaa:	4668      	mov	r0, sp
    2aac:	501a      	str	r2, [r3, r0]
    2aae:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
    2ab0:	2b20      	cmp	r3, #32
    2ab2:	d1f8      	bne.n	2aa6 <Montgomery_multiply_mod_order+0x7a>
    2ab4:	2600      	movs	r6, #0
    2ab6:	2300      	movs	r3, #0
        ADDC(carry, a[i], b[i], carry, c[i]);
    2ab8:	59aa      	ldr	r2, [r5, r6]
    2aba:	18d1      	adds	r1, r2, r3
    2abc:	4668      	mov	r0, sp
    2abe:	5834      	ldr	r4, [r6, r0]
    2ac0:	190f      	adds	r7, r1, r4
    2ac2:	51af      	str	r7, [r5, r6]
    2ac4:	0008      	movs	r0, r1
    2ac6:	4058      	eors	r0, r3
    2ac8:	4053      	eors	r3, r2
    2aca:	4318      	orrs	r0, r3
    2acc:	4048      	eors	r0, r1
    2ace:	000a      	movs	r2, r1
    2ad0:	407a      	eors	r2, r7
    2ad2:	000b      	movs	r3, r1
    2ad4:	4063      	eors	r3, r4
    2ad6:	4313      	orrs	r3, r2
    2ad8:	407b      	eors	r3, r7
    2ada:	4303      	orrs	r3, r0
    2adc:	0fdb      	lsrs	r3, r3, #31
    2ade:	3604      	adds	r6, #4
    for (i = 0; i < nwords; i++) {
    2ae0:	2e20      	cmp	r6, #32
    2ae2:	d1e9      	bne.n	2ab8 <Montgomery_multiply_mod_order+0x8c>
    }
    add(mc, temp, mc, NWORDS_ORDER);                   //  mc = mc + (mask & r)

    return;
}
    2ae4:	b031      	add	sp, #196	; 0xc4
    2ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae8:	00002929 	.word	0x00002929
    2aec:	000092d0 	.word	0x000092d0
    2af0:	00009318 	.word	0x00009318
    2af4:	000029d1 	.word	0x000029d1

00002af8 <modulo_order>:


void modulo_order(digit_t* a, digit_t* c)
{ // Reduction modulo the order using Montgomery arithmetic
    2af8:	b530      	push	{r4, r5, lr}
    2afa:	b091      	sub	sp, #68	; 0x44
    2afc:	0004      	movs	r4, r0
    2afe:	000d      	movs	r5, r1
  // ma = a*Montgomery_Rprime mod r, where a,ma in [0, r-1], a,ma,r < 2^256
  // c = ma*1*Montgomery_Rprime^(-1) mod r, where ma,c in [0, r-1], ma,c,r < 2^256
	digit_t ma[NWORDS_ORDER], one[NWORDS_ORDER] = {0};
    2b00:	2220      	movs	r2, #32
    2b02:	2100      	movs	r1, #0
    2b04:	4668      	mov	r0, sp
    2b06:	4b07      	ldr	r3, [pc, #28]	; (2b24 <modulo_order+0x2c>)
    2b08:	4798      	blx	r3
    
    one[0] = 1;
    2b0a:	2301      	movs	r3, #1
    2b0c:	9300      	str	r3, [sp, #0]
    Montgomery_multiply_mod_order(a, (digit_t*)&Montgomery_Rprime, ma);
    2b0e:	aa08      	add	r2, sp, #32
    2b10:	4905      	ldr	r1, [pc, #20]	; (2b28 <modulo_order+0x30>)
    2b12:	0020      	movs	r0, r4
    2b14:	4c05      	ldr	r4, [pc, #20]	; (2b2c <modulo_order+0x34>)
    2b16:	47a0      	blx	r4
    Montgomery_multiply_mod_order(ma, one, c);
    2b18:	002a      	movs	r2, r5
    2b1a:	4669      	mov	r1, sp
    2b1c:	a808      	add	r0, sp, #32
    2b1e:	47a0      	blx	r4
}
    2b20:	b011      	add	sp, #68	; 0x44
    2b22:	bd30      	pop	{r4, r5, pc}
    2b24:	00005b87 	.word	0x00005b87
    2b28:	000092b0 	.word	0x000092b0
    2b2c:	00002a2d 	.word	0x00002a2d

00002b30 <conversion_to_odd>:


void conversion_to_odd(digit_t* k, digit_t* k_odd)
{ // Convert scalar to odd if even using the prime subgroup order r
    2b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b32:	46d6      	mov	lr, sl
    2b34:	464f      	mov	r7, r9
    2b36:	4646      	mov	r6, r8
    2b38:	b5c0      	push	{r6, r7, lr}
    2b3a:	4689      	mov	r9, r1
    digit_t mask;
    digit_t* order = (digit_t*)curve_order;
    unsigned int i, carry = 0;

    mask = ~(0 - (k[0] & 1));     
    2b3c:	2601      	movs	r6, #1
    2b3e:	6803      	ldr	r3, [r0, #0]
    2b40:	401e      	ands	r6, r3
    2b42:	1e73      	subs	r3, r6, #1
    2b44:	469c      	mov	ip, r3
    2b46:	2500      	movs	r5, #0
    unsigned int i, carry = 0;
    2b48:	2300      	movs	r3, #0

    for (i = 0; i < NWORDS_ORDER; i++) {   // If (k is odd) then k_odd = k else k_odd = k + r
        ADDC(carry, order[i] & mask, k[i], carry, k_odd[i]);
    2b4a:	4a11      	ldr	r2, [pc, #68]	; (2b90 <conversion_to_odd+0x60>)
    2b4c:	4692      	mov	sl, r2
    2b4e:	4652      	mov	r2, sl
    2b50:	58aa      	ldr	r2, [r5, r2]
    2b52:	4661      	mov	r1, ip
    2b54:	400a      	ands	r2, r1
    2b56:	18d4      	adds	r4, r2, r3
    2b58:	5946      	ldr	r6, [r0, r5]
    2b5a:	19a1      	adds	r1, r4, r6
    2b5c:	464f      	mov	r7, r9
    2b5e:	5179      	str	r1, [r7, r5]
    2b60:	0027      	movs	r7, r4
    2b62:	405f      	eors	r7, r3
    2b64:	405a      	eors	r2, r3
    2b66:	433a      	orrs	r2, r7
    2b68:	4062      	eors	r2, r4
    2b6a:	4690      	mov	r8, r2
    2b6c:	0022      	movs	r2, r4
    2b6e:	404a      	eors	r2, r1
    2b70:	0023      	movs	r3, r4
    2b72:	4073      	eors	r3, r6
    2b74:	4313      	orrs	r3, r2
    2b76:	404b      	eors	r3, r1
    2b78:	4642      	mov	r2, r8
    2b7a:	4313      	orrs	r3, r2
    2b7c:	0fdb      	lsrs	r3, r3, #31
    2b7e:	3504      	adds	r5, #4
    for (i = 0; i < NWORDS_ORDER; i++) {   // If (k is odd) then k_odd = k else k_odd = k + r
    2b80:	2d20      	cmp	r5, #32
    2b82:	d1e4      	bne.n	2b4e <conversion_to_odd+0x1e>
    }
}
    2b84:	bc1c      	pop	{r2, r3, r4}
    2b86:	4690      	mov	r8, r2
    2b88:	4699      	mov	r9, r3
    2b8a:	46a2      	mov	sl, r4
    2b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b8e:	46c0      	nop			; (mov r8, r8)
    2b90:	00009318 	.word	0x00009318

00002b94 <vdiv1271>:


__inline void vdiv1271(uint32_t* a) 
{ // GF(p) division by two, c = a/2 mod p
    2b94:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Redundant representation: 23/26/26/26/26-bit
    digit_t mask;

    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    2b96:	6803      	ldr	r3, [r0, #0]
    2b98:	07dc      	lsls	r4, r3, #31
    2b9a:	17e4      	asrs	r4, r4, #31
    2b9c:	09a6      	lsrs	r6, r4, #6
    
    a[0] += mask;
    a[1] += mask;
    2b9e:	6842      	ldr	r2, [r0, #4]
    2ba0:	18b1      	adds	r1, r6, r2
    a[2] += mask;
    2ba2:	6882      	ldr	r2, [r0, #8]
    2ba4:	18b2      	adds	r2, r6, r2
    a[3] += mask;
    2ba6:	68c5      	ldr	r5, [r0, #12]
    2ba8:	1975      	adds	r5, r6, r5
    a[4] += (mask >> 3);
    2baa:	0a64      	lsrs	r4, r4, #9
    2bac:	6907      	ldr	r7, [r0, #16]
    2bae:	46bc      	mov	ip, r7
    2bb0:	4464      	add	r4, ip
    a[0] += mask;
    2bb2:	199b      	adds	r3, r3, r6

    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    2bb4:	105b      	asrs	r3, r3, #1
    2bb6:	064f      	lsls	r7, r1, #25
    2bb8:	2680      	movs	r6, #128	; 0x80
    2bba:	04b6      	lsls	r6, r6, #18
    2bbc:	4037      	ands	r7, r6
    2bbe:	19db      	adds	r3, r3, r7
    2bc0:	6003      	str	r3, [r0, #0]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    2bc2:	0653      	lsls	r3, r2, #25
    2bc4:	4033      	ands	r3, r6
    2bc6:	1049      	asrs	r1, r1, #1
    2bc8:	1859      	adds	r1, r3, r1
    2bca:	6041      	str	r1, [r0, #4]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    2bcc:	0669      	lsls	r1, r5, #25
    2bce:	4031      	ands	r1, r6
    2bd0:	1052      	asrs	r2, r2, #1
    2bd2:	188a      	adds	r2, r1, r2
    2bd4:	6082      	str	r2, [r0, #8]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    2bd6:	0663      	lsls	r3, r4, #25
    2bd8:	4033      	ands	r3, r6
    2bda:	106d      	asrs	r5, r5, #1
    2bdc:	195d      	adds	r5, r3, r5
    2bde:	60c5      	str	r5, [r0, #12]
    a[4] = ((sdigit_t)a[4] >> 1);
    2be0:	1064      	asrs	r4, r4, #1
    2be2:	6104      	str	r4, [r0, #16]
}
    2be4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002be6 <v2copy1271>:


void v2copy1271(v2elm_t a, v2elm_t c) 
{ // Copy vectorized GF(p^2) element, c <- a

    c[0] = a[0]; c[1] = a[1]; c[2] = a[2]; c[3] = a[3]; c[4] = a[4]; 
    2be6:	6803      	ldr	r3, [r0, #0]
    2be8:	600b      	str	r3, [r1, #0]
    2bea:	6843      	ldr	r3, [r0, #4]
    2bec:	604b      	str	r3, [r1, #4]
    2bee:	6883      	ldr	r3, [r0, #8]
    2bf0:	608b      	str	r3, [r1, #8]
    2bf2:	68c3      	ldr	r3, [r0, #12]
    2bf4:	60cb      	str	r3, [r1, #12]
    2bf6:	6903      	ldr	r3, [r0, #16]
    2bf8:	610b      	str	r3, [r1, #16]
    c[5] = a[5]; c[6] = a[6]; c[7] = a[7]; c[8] = a[8]; c[9] = a[9];
    2bfa:	6943      	ldr	r3, [r0, #20]
    2bfc:	614b      	str	r3, [r1, #20]
    2bfe:	6983      	ldr	r3, [r0, #24]
    2c00:	618b      	str	r3, [r1, #24]
    2c02:	69c3      	ldr	r3, [r0, #28]
    2c04:	61cb      	str	r3, [r1, #28]
    2c06:	6a03      	ldr	r3, [r0, #32]
    2c08:	620b      	str	r3, [r1, #32]
    2c0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2c0c:	624b      	str	r3, [r1, #36]	; 0x24
}
    2c0e:	4770      	bx	lr

00002c10 <table_lookup_1x8>:

#include "FourQ_internal.h"                        


void table_lookup_1x8(vpoint_extproj_precomp_t* table, vpoint_extproj_precomp_t P, unsigned int digit, unsigned int sign_mask)
{ // Constant-time table lookup to extract a point represented as (X+Y,Y-X,2Z,2dT) corresponding to extended twisted Edwards coordinates (X:Y:Z:T)
    2c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c12:	46d6      	mov	lr, sl
    2c14:	464f      	mov	r7, r9
    2c16:	4646      	mov	r6, r8
    2c18:	b5c0      	push	{r6, r7, lr}
    2c1a:	b0d2      	sub	sp, #328	; 0x148
    2c1c:	0004      	movs	r4, r0
    2c1e:	468a      	mov	sl, r1
    2c20:	4690      	mov	r8, r2
    2c22:	001e      	movs	r6, r3
#else
    vpoint_extproj_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                  
    ecccopy_precomp(table[0], point);                                        // point = table[0]
    2c24:	a92a      	add	r1, sp, #168	; 0xa8
    2c26:	4dcc      	ldr	r5, [pc, #816]	; (2f58 <table_lookup_1x8+0x348>)
    2c28:	47a8      	blx	r5
    2c2a:	0020      	movs	r0, r4
    2c2c:	3028      	adds	r0, #40	; 0x28
    2c2e:	a934      	add	r1, sp, #208	; 0xd0
    2c30:	47a8      	blx	r5
    2c32:	0020      	movs	r0, r4
    2c34:	3050      	adds	r0, #80	; 0x50
    2c36:	a93e      	add	r1, sp, #248	; 0xf8
    2c38:	47a8      	blx	r5
    2c3a:	0020      	movs	r0, r4
    2c3c:	3078      	adds	r0, #120	; 0x78
    2c3e:	a948      	add	r1, sp, #288	; 0x120
    2c40:	47a8      	blx	r5
    2c42:	0025      	movs	r5, r4
    2c44:	35a0      	adds	r5, #160	; 0xa0
    2c46:	23a0      	movs	r3, #160	; 0xa0
    2c48:	00db      	lsls	r3, r3, #3
    2c4a:	4699      	mov	r9, r3
    2c4c:	44a1      	add	r9, r4
    for (i = 1; i < 8; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    2c4e:	4fc2      	ldr	r7, [pc, #776]	; (2f58 <table_lookup_1x8+0x348>)
        digit--;
    2c50:	2301      	movs	r3, #1
    2c52:	425b      	negs	r3, r3
    2c54:	469c      	mov	ip, r3
    2c56:	44e0      	add	r8, ip
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    2c58:	4643      	mov	r3, r8
    2c5a:	0fdc      	lsrs	r4, r3, #31
    2c5c:	4464      	add	r4, ip
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    2c5e:	a902      	add	r1, sp, #8
    2c60:	0028      	movs	r0, r5
    2c62:	47b8      	blx	r7
    2c64:	0028      	movs	r0, r5
    2c66:	3028      	adds	r0, #40	; 0x28
    2c68:	a90c      	add	r1, sp, #48	; 0x30
    2c6a:	47b8      	blx	r7
    2c6c:	0028      	movs	r0, r5
    2c6e:	3050      	adds	r0, #80	; 0x50
    2c70:	a916      	add	r1, sp, #88	; 0x58
    2c72:	47b8      	blx	r7
    2c74:	0028      	movs	r0, r5
    2c76:	3078      	adds	r0, #120	; 0x78
    2c78:	a920      	add	r1, sp, #128	; 0x80
    2c7a:	47b8      	blx	r7
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point            
        point->xy[0] = (mask & (point->xy[0] ^ temp_point->xy[0])) ^ point->xy[0];
    2c7c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    2c7e:	9b02      	ldr	r3, [sp, #8]
    2c80:	4053      	eors	r3, r2
    2c82:	4023      	ands	r3, r4
    2c84:	4053      	eors	r3, r2
    2c86:	932a      	str	r3, [sp, #168]	; 0xa8
        point->xy[1] = (mask & (point->xy[1] ^ temp_point->xy[1])) ^ point->xy[1];
    2c88:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    2c8a:	9b03      	ldr	r3, [sp, #12]
    2c8c:	4053      	eors	r3, r2
    2c8e:	4023      	ands	r3, r4
    2c90:	4053      	eors	r3, r2
    2c92:	932b      	str	r3, [sp, #172]	; 0xac
        point->xy[2] = (mask & (point->xy[2] ^ temp_point->xy[2])) ^ point->xy[2];
    2c94:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    2c96:	9b04      	ldr	r3, [sp, #16]
    2c98:	4053      	eors	r3, r2
    2c9a:	4023      	ands	r3, r4
    2c9c:	4053      	eors	r3, r2
    2c9e:	932c      	str	r3, [sp, #176]	; 0xb0
        point->xy[3] = (mask & (point->xy[3] ^ temp_point->xy[3])) ^ point->xy[3];
    2ca0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    2ca2:	9b05      	ldr	r3, [sp, #20]
    2ca4:	4053      	eors	r3, r2
    2ca6:	4023      	ands	r3, r4
    2ca8:	4053      	eors	r3, r2
    2caa:	932d      	str	r3, [sp, #180]	; 0xb4
        point->xy[4] = (mask & (point->xy[4] ^ temp_point->xy[4])) ^ point->xy[4];
    2cac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    2cae:	9b06      	ldr	r3, [sp, #24]
    2cb0:	4053      	eors	r3, r2
    2cb2:	4023      	ands	r3, r4
    2cb4:	4053      	eors	r3, r2
    2cb6:	932e      	str	r3, [sp, #184]	; 0xb8
        point->xy[5] = (mask & (point->xy[5] ^ temp_point->xy[5])) ^ point->xy[5];
    2cb8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    2cba:	9b07      	ldr	r3, [sp, #28]
    2cbc:	4053      	eors	r3, r2
    2cbe:	4023      	ands	r3, r4
    2cc0:	4053      	eors	r3, r2
    2cc2:	932f      	str	r3, [sp, #188]	; 0xbc
        point->xy[6] = (mask & (point->xy[6] ^ temp_point->xy[6])) ^ point->xy[6];
    2cc4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    2cc6:	9b08      	ldr	r3, [sp, #32]
    2cc8:	4053      	eors	r3, r2
    2cca:	4023      	ands	r3, r4
    2ccc:	4053      	eors	r3, r2
    2cce:	9330      	str	r3, [sp, #192]	; 0xc0
        point->xy[7] = (mask & (point->xy[7] ^ temp_point->xy[7])) ^ point->xy[7];
    2cd0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    2cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2cd4:	4053      	eors	r3, r2
    2cd6:	4023      	ands	r3, r4
    2cd8:	4053      	eors	r3, r2
    2cda:	9331      	str	r3, [sp, #196]	; 0xc4
        point->xy[8] = (mask & (point->xy[8] ^ temp_point->xy[8])) ^ point->xy[8];
    2cdc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    2cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2ce0:	4053      	eors	r3, r2
    2ce2:	4023      	ands	r3, r4
    2ce4:	4053      	eors	r3, r2
    2ce6:	9332      	str	r3, [sp, #200]	; 0xc8
        point->xy[9] = (mask & (point->xy[9] ^ temp_point->xy[9])) ^ point->xy[9];
    2ce8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    2cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2cec:	4053      	eors	r3, r2
    2cee:	4023      	ands	r3, r4
    2cf0:	4053      	eors	r3, r2
    2cf2:	9333      	str	r3, [sp, #204]	; 0xcc
        point->yx[0] = (mask & (point->yx[0] ^ temp_point->yx[0])) ^ point->yx[0];
    2cf4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    2cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2cf8:	4053      	eors	r3, r2
    2cfa:	4023      	ands	r3, r4
    2cfc:	4053      	eors	r3, r2
    2cfe:	9334      	str	r3, [sp, #208]	; 0xd0
        point->yx[1] = (mask & (point->yx[1] ^ temp_point->yx[1])) ^ point->yx[1];
    2d00:	9a35      	ldr	r2, [sp, #212]	; 0xd4
    2d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2d04:	4053      	eors	r3, r2
    2d06:	4023      	ands	r3, r4
    2d08:	4053      	eors	r3, r2
    2d0a:	9335      	str	r3, [sp, #212]	; 0xd4
        point->yx[2] = (mask & (point->yx[2] ^ temp_point->yx[2])) ^ point->yx[2];
    2d0c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    2d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2d10:	4053      	eors	r3, r2
    2d12:	4023      	ands	r3, r4
    2d14:	4053      	eors	r3, r2
    2d16:	9336      	str	r3, [sp, #216]	; 0xd8
        point->yx[3] = (mask & (point->yx[3] ^ temp_point->yx[3])) ^ point->yx[3];
    2d18:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    2d1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2d1c:	4053      	eors	r3, r2
    2d1e:	4023      	ands	r3, r4
    2d20:	4053      	eors	r3, r2
    2d22:	9337      	str	r3, [sp, #220]	; 0xdc
        point->yx[4] = (mask & (point->yx[4] ^ temp_point->yx[4])) ^ point->yx[4];
    2d24:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    2d26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2d28:	4053      	eors	r3, r2
    2d2a:	4023      	ands	r3, r4
    2d2c:	4053      	eors	r3, r2
    2d2e:	9338      	str	r3, [sp, #224]	; 0xe0
        point->yx[5] = (mask & (point->yx[5] ^ temp_point->yx[5])) ^ point->yx[5];
    2d30:	9a39      	ldr	r2, [sp, #228]	; 0xe4
    2d32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2d34:	4053      	eors	r3, r2
    2d36:	4023      	ands	r3, r4
    2d38:	4053      	eors	r3, r2
    2d3a:	9339      	str	r3, [sp, #228]	; 0xe4
        point->yx[6] = (mask & (point->yx[6] ^ temp_point->yx[6])) ^ point->yx[6];
    2d3c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    2d3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2d40:	4053      	eors	r3, r2
    2d42:	4023      	ands	r3, r4
    2d44:	4053      	eors	r3, r2
    2d46:	933a      	str	r3, [sp, #232]	; 0xe8
        point->yx[7] = (mask & (point->yx[7] ^ temp_point->yx[7])) ^ point->yx[7];
    2d48:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    2d4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2d4c:	4053      	eors	r3, r2
    2d4e:	4023      	ands	r3, r4
    2d50:	4053      	eors	r3, r2
    2d52:	933b      	str	r3, [sp, #236]	; 0xec
        point->yx[8] = (mask & (point->yx[8] ^ temp_point->yx[8])) ^ point->yx[8];
    2d54:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    2d56:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2d58:	4053      	eors	r3, r2
    2d5a:	4023      	ands	r3, r4
    2d5c:	4053      	eors	r3, r2
    2d5e:	933c      	str	r3, [sp, #240]	; 0xf0
        point->yx[9] = (mask & (point->yx[9] ^ temp_point->yx[9])) ^ point->yx[9];
    2d60:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    2d62:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2d64:	4053      	eors	r3, r2
    2d66:	4023      	ands	r3, r4
    2d68:	4053      	eors	r3, r2
    2d6a:	933d      	str	r3, [sp, #244]	; 0xf4
        point->z2[0] = (mask & (point->z2[0] ^ temp_point->z2[0])) ^ point->z2[0];
    2d6c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    2d6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2d70:	4053      	eors	r3, r2
    2d72:	4023      	ands	r3, r4
    2d74:	4053      	eors	r3, r2
    2d76:	933e      	str	r3, [sp, #248]	; 0xf8
        point->z2[1] = (mask & (point->z2[1] ^ temp_point->z2[1])) ^ point->z2[1];
    2d78:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    2d7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2d7c:	4053      	eors	r3, r2
    2d7e:	4023      	ands	r3, r4
    2d80:	4053      	eors	r3, r2
    2d82:	933f      	str	r3, [sp, #252]	; 0xfc
        point->z2[2] = (mask & (point->z2[2] ^ temp_point->z2[2])) ^ point->z2[2];
    2d84:	9a40      	ldr	r2, [sp, #256]	; 0x100
    2d86:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2d88:	4053      	eors	r3, r2
    2d8a:	4023      	ands	r3, r4
    2d8c:	4053      	eors	r3, r2
    2d8e:	9340      	str	r3, [sp, #256]	; 0x100
        point->z2[3] = (mask & (point->z2[3] ^ temp_point->z2[3])) ^ point->z2[3];
    2d90:	9a41      	ldr	r2, [sp, #260]	; 0x104
    2d92:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2d94:	4053      	eors	r3, r2
    2d96:	4023      	ands	r3, r4
    2d98:	4053      	eors	r3, r2
    2d9a:	9341      	str	r3, [sp, #260]	; 0x104
        point->z2[4] = (mask & (point->z2[4] ^ temp_point->z2[4])) ^ point->z2[4];
    2d9c:	9a42      	ldr	r2, [sp, #264]	; 0x108
    2d9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    2da0:	4053      	eors	r3, r2
    2da2:	4023      	ands	r3, r4
    2da4:	4053      	eors	r3, r2
    2da6:	9342      	str	r3, [sp, #264]	; 0x108
        point->z2[5] = (mask & (point->z2[5] ^ temp_point->z2[5])) ^ point->z2[5];
    2da8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    2daa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2dac:	4053      	eors	r3, r2
    2dae:	4023      	ands	r3, r4
    2db0:	4053      	eors	r3, r2
    2db2:	9343      	str	r3, [sp, #268]	; 0x10c
        point->z2[6] = (mask & (point->z2[6] ^ temp_point->z2[6])) ^ point->z2[6];
    2db4:	9a44      	ldr	r2, [sp, #272]	; 0x110
    2db6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2db8:	4053      	eors	r3, r2
    2dba:	4023      	ands	r3, r4
    2dbc:	4053      	eors	r3, r2
    2dbe:	9344      	str	r3, [sp, #272]	; 0x110
        point->z2[7] = (mask & (point->z2[7] ^ temp_point->z2[7])) ^ point->z2[7];
    2dc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
    2dc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2dc4:	4053      	eors	r3, r2
    2dc6:	4023      	ands	r3, r4
    2dc8:	4053      	eors	r3, r2
    2dca:	9345      	str	r3, [sp, #276]	; 0x114
        point->z2[8] = (mask & (point->z2[8] ^ temp_point->z2[8])) ^ point->z2[8];
    2dcc:	9a46      	ldr	r2, [sp, #280]	; 0x118
    2dce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2dd0:	4053      	eors	r3, r2
    2dd2:	4023      	ands	r3, r4
    2dd4:	4053      	eors	r3, r2
    2dd6:	9346      	str	r3, [sp, #280]	; 0x118
        point->z2[9] = (mask & (point->z2[9] ^ temp_point->z2[9])) ^ point->z2[9];
    2dd8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    2dda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2ddc:	4053      	eors	r3, r2
    2dde:	4023      	ands	r3, r4
    2de0:	4053      	eors	r3, r2
    2de2:	9347      	str	r3, [sp, #284]	; 0x11c
        point->t2[0] = (mask & (point->t2[0] ^ temp_point->t2[0])) ^ point->t2[0];
    2de4:	9a48      	ldr	r2, [sp, #288]	; 0x120
    2de6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2de8:	4053      	eors	r3, r2
    2dea:	4023      	ands	r3, r4
    2dec:	4053      	eors	r3, r2
    2dee:	9348      	str	r3, [sp, #288]	; 0x120
        point->t2[1] = (mask & (point->t2[1] ^ temp_point->t2[1])) ^ point->t2[1];
    2df0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    2df2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2df4:	4053      	eors	r3, r2
    2df6:	4023      	ands	r3, r4
    2df8:	4053      	eors	r3, r2
    2dfa:	9349      	str	r3, [sp, #292]	; 0x124
        point->t2[2] = (mask & (point->t2[2] ^ temp_point->t2[2])) ^ point->t2[2];
    2dfc:	2280      	movs	r2, #128	; 0x80
    2dfe:	ab02      	add	r3, sp, #8
    2e00:	21a0      	movs	r1, #160	; 0xa0
    2e02:	185b      	adds	r3, r3, r1
    2e04:	5899      	ldr	r1, [r3, r2]
    2e06:	ab02      	add	r3, sp, #8
    2e08:	589b      	ldr	r3, [r3, r2]
    2e0a:	404b      	eors	r3, r1
    2e0c:	4023      	ands	r3, r4
    2e0e:	404b      	eors	r3, r1
    2e10:	a902      	add	r1, sp, #8
    2e12:	20a0      	movs	r0, #160	; 0xa0
    2e14:	1809      	adds	r1, r1, r0
    2e16:	508b      	str	r3, [r1, r2]
        point->t2[3] = (mask & (point->t2[3] ^ temp_point->t2[3])) ^ point->t2[3];
    2e18:	3204      	adds	r2, #4
    2e1a:	ab02      	add	r3, sp, #8
    2e1c:	21a0      	movs	r1, #160	; 0xa0
    2e1e:	185b      	adds	r3, r3, r1
    2e20:	5899      	ldr	r1, [r3, r2]
    2e22:	ab02      	add	r3, sp, #8
    2e24:	589b      	ldr	r3, [r3, r2]
    2e26:	404b      	eors	r3, r1
    2e28:	4023      	ands	r3, r4
    2e2a:	404b      	eors	r3, r1
    2e2c:	a902      	add	r1, sp, #8
    2e2e:	1809      	adds	r1, r1, r0
    2e30:	508b      	str	r3, [r1, r2]
        point->t2[4] = (mask & (point->t2[4] ^ temp_point->t2[4])) ^ point->t2[4];
    2e32:	3204      	adds	r2, #4
    2e34:	ab02      	add	r3, sp, #8
    2e36:	21a0      	movs	r1, #160	; 0xa0
    2e38:	185b      	adds	r3, r3, r1
    2e3a:	5899      	ldr	r1, [r3, r2]
    2e3c:	ab02      	add	r3, sp, #8
    2e3e:	589b      	ldr	r3, [r3, r2]
    2e40:	404b      	eors	r3, r1
    2e42:	4023      	ands	r3, r4
    2e44:	404b      	eors	r3, r1
    2e46:	a902      	add	r1, sp, #8
    2e48:	1809      	adds	r1, r1, r0
    2e4a:	508b      	str	r3, [r1, r2]
        point->t2[5] = (mask & (point->t2[5] ^ temp_point->t2[5])) ^ point->t2[5];
    2e4c:	3204      	adds	r2, #4
    2e4e:	ab02      	add	r3, sp, #8
    2e50:	21a0      	movs	r1, #160	; 0xa0
    2e52:	185b      	adds	r3, r3, r1
    2e54:	5899      	ldr	r1, [r3, r2]
    2e56:	ab02      	add	r3, sp, #8
    2e58:	589b      	ldr	r3, [r3, r2]
    2e5a:	404b      	eors	r3, r1
    2e5c:	4023      	ands	r3, r4
    2e5e:	404b      	eors	r3, r1
    2e60:	a902      	add	r1, sp, #8
    2e62:	1809      	adds	r1, r1, r0
    2e64:	508b      	str	r3, [r1, r2]
        point->t2[6] = (mask & (point->t2[6] ^ temp_point->t2[6])) ^ point->t2[6];
    2e66:	3204      	adds	r2, #4
    2e68:	ab02      	add	r3, sp, #8
    2e6a:	21a0      	movs	r1, #160	; 0xa0
    2e6c:	185b      	adds	r3, r3, r1
    2e6e:	5899      	ldr	r1, [r3, r2]
    2e70:	ab02      	add	r3, sp, #8
    2e72:	589b      	ldr	r3, [r3, r2]
    2e74:	404b      	eors	r3, r1
    2e76:	4023      	ands	r3, r4
    2e78:	404b      	eors	r3, r1
    2e7a:	a902      	add	r1, sp, #8
    2e7c:	1809      	adds	r1, r1, r0
    2e7e:	508b      	str	r3, [r1, r2]
        point->t2[7] = (mask & (point->t2[7] ^ temp_point->t2[7])) ^ point->t2[7];
    2e80:	3204      	adds	r2, #4
    2e82:	ab02      	add	r3, sp, #8
    2e84:	21a0      	movs	r1, #160	; 0xa0
    2e86:	185b      	adds	r3, r3, r1
    2e88:	5899      	ldr	r1, [r3, r2]
    2e8a:	ab02      	add	r3, sp, #8
    2e8c:	589b      	ldr	r3, [r3, r2]
    2e8e:	404b      	eors	r3, r1
    2e90:	4023      	ands	r3, r4
    2e92:	404b      	eors	r3, r1
    2e94:	a902      	add	r1, sp, #8
    2e96:	1809      	adds	r1, r1, r0
    2e98:	508b      	str	r3, [r1, r2]
        point->t2[8] = (mask & (point->t2[8] ^ temp_point->t2[8])) ^ point->t2[8];
    2e9a:	3204      	adds	r2, #4
    2e9c:	ab02      	add	r3, sp, #8
    2e9e:	21a0      	movs	r1, #160	; 0xa0
    2ea0:	185b      	adds	r3, r3, r1
    2ea2:	5899      	ldr	r1, [r3, r2]
    2ea4:	ab02      	add	r3, sp, #8
    2ea6:	589b      	ldr	r3, [r3, r2]
    2ea8:	404b      	eors	r3, r1
    2eaa:	4023      	ands	r3, r4
    2eac:	404b      	eors	r3, r1
    2eae:	a902      	add	r1, sp, #8
    2eb0:	1809      	adds	r1, r1, r0
    2eb2:	508b      	str	r3, [r1, r2]
        point->t2[9] = (mask & (point->t2[9] ^ temp_point->t2[9])) ^ point->t2[9];
    2eb4:	239c      	movs	r3, #156	; 0x9c
    2eb6:	aa02      	add	r2, sp, #8
    2eb8:	21a0      	movs	r1, #160	; 0xa0
    2eba:	1852      	adds	r2, r2, r1
    2ebc:	58d1      	ldr	r1, [r2, r3]
    2ebe:	aa02      	add	r2, sp, #8
    2ec0:	58d2      	ldr	r2, [r2, r3]
    2ec2:	9201      	str	r2, [sp, #4]
    2ec4:	404a      	eors	r2, r1
    2ec6:	4014      	ands	r4, r2
    2ec8:	404c      	eors	r4, r1
    2eca:	aa02      	add	r2, sp, #8
    2ecc:	21a0      	movs	r1, #160	; 0xa0
    2ece:	1852      	adds	r2, r2, r1
    2ed0:	50d4      	str	r4, [r2, r3]
    2ed2:	35a0      	adds	r5, #160	; 0xa0
    for (i = 1; i < 8; i++)
    2ed4:	454d      	cmp	r5, r9
    2ed6:	d000      	beq.n	2eda <table_lookup_1x8+0x2ca>
    2ed8:	e6ba      	b.n	2c50 <table_lookup_1x8+0x40>
    }
    
    v2copy1271(point->t2, temp_point->t2);
    2eda:	a920      	add	r1, sp, #128	; 0x80
    2edc:	a848      	add	r0, sp, #288	; 0x120
    2ede:	4c1e      	ldr	r4, [pc, #120]	; (2f58 <table_lookup_1x8+0x348>)
    2ee0:	47a0      	blx	r4
    v2copy1271(point->xy, temp_point->yx);                                   // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    2ee2:	a90c      	add	r1, sp, #48	; 0x30
    2ee4:	a82a      	add	r0, sp, #168	; 0xa8
    2ee6:	47a0      	blx	r4
    v2copy1271(point->yx, temp_point->xy);                                   
    2ee8:	a902      	add	r1, sp, #8
    2eea:	a834      	add	r0, sp, #208	; 0xd0
    2eec:	47a0      	blx	r4
    vneg1271(&temp_point->t2[0]);                                            // Negate 2dt coordinate
    2eee:	a820      	add	r0, sp, #128	; 0x80
    2ef0:	4c1a      	ldr	r4, [pc, #104]	; (2f5c <table_lookup_1x8+0x34c>)
    2ef2:	47a0      	blx	r4
    vneg1271(&temp_point->t2[VWORDS_FIELD]);             
    2ef4:	a825      	add	r0, sp, #148	; 0x94
    2ef6:	47a0      	blx	r4
    2ef8:	ab2a      	add	r3, sp, #168	; 0xa8
    2efa:	a902      	add	r1, sp, #8
    2efc:	a834      	add	r0, sp, #208	; 0xd0
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                   // If sign_mask = 0 then choose negative of the point
        point->xy[j] = ((digit_t)((int)sign_mask) & (point->xy[j] ^ temp_point->xy[j])) ^ temp_point->xy[j];
    2efe:	680c      	ldr	r4, [r1, #0]
    2f00:	681a      	ldr	r2, [r3, #0]
    2f02:	4062      	eors	r2, r4
    2f04:	4032      	ands	r2, r6
    2f06:	4062      	eors	r2, r4
    2f08:	601a      	str	r2, [r3, #0]
        point->yx[j] = ((digit_t)((int)sign_mask) & (point->yx[j] ^ temp_point->yx[j])) ^ temp_point->yx[j];
    2f0a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    2f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2f0e:	4062      	eors	r2, r4
    2f10:	4032      	ands	r2, r6
    2f12:	4062      	eors	r2, r4
    2f14:	629a      	str	r2, [r3, #40]	; 0x28
        point->t2[j] = ((digit_t)((int)sign_mask) & (point->t2[j] ^ temp_point->t2[j])) ^ temp_point->t2[j];
    2f16:	6f8c      	ldr	r4, [r1, #120]	; 0x78
    2f18:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    2f1a:	4062      	eors	r2, r4
    2f1c:	4032      	ands	r2, r6
    2f1e:	4062      	eors	r2, r4
    2f20:	679a      	str	r2, [r3, #120]	; 0x78
    2f22:	3304      	adds	r3, #4
    2f24:	3104      	adds	r1, #4
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                   // If sign_mask = 0 then choose negative of the point
    2f26:	4283      	cmp	r3, r0
    2f28:	d1e9      	bne.n	2efe <table_lookup_1x8+0x2ee>
    }                                
    ecccopy_precomp(point, P); 
    2f2a:	4651      	mov	r1, sl
    2f2c:	a82a      	add	r0, sp, #168	; 0xa8
    2f2e:	4c0a      	ldr	r4, [pc, #40]	; (2f58 <table_lookup_1x8+0x348>)
    2f30:	47a0      	blx	r4
    2f32:	4651      	mov	r1, sl
    2f34:	3128      	adds	r1, #40	; 0x28
    2f36:	a834      	add	r0, sp, #208	; 0xd0
    2f38:	47a0      	blx	r4
    2f3a:	4651      	mov	r1, sl
    2f3c:	3150      	adds	r1, #80	; 0x50
    2f3e:	a83e      	add	r0, sp, #248	; 0xf8
    2f40:	47a0      	blx	r4
    2f42:	4651      	mov	r1, sl
    2f44:	3178      	adds	r1, #120	; 0x78
    2f46:	a848      	add	r0, sp, #288	; 0x120
    2f48:	47a0      	blx	r4
#endif
}
    2f4a:	b052      	add	sp, #328	; 0x148
    2f4c:	bc1c      	pop	{r2, r3, r4}
    2f4e:	4690      	mov	r8, r2
    2f50:	4699      	mov	r9, r3
    2f52:	46a2      	mov	sl, r4
    2f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f56:	46c0      	nop			; (mov r8, r8)
    2f58:	00002be7 	.word	0x00002be7
    2f5c:	00002031 	.word	0x00002031

00002f60 <table_lookup_fixed_base>:


void table_lookup_fixed_base(vpoint_precomp_t* table, vpoint_precomp_t P, unsigned int digit, unsigned int sign)
{ // Constant-time table lookup to extract a point represented as (x+y,y-x,2t) corresponding to extended twisted Edwards coordinates (X:Y:Z:T) with Z=1
    2f60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f62:	46de      	mov	lr, fp
    2f64:	4657      	mov	r7, sl
    2f66:	464e      	mov	r6, r9
    2f68:	4645      	mov	r5, r8
    2f6a:	b5e0      	push	{r5, r6, r7, lr}
    2f6c:	b0bf      	sub	sp, #252	; 0xfc
    2f6e:	0004      	movs	r4, r0
    2f70:	9101      	str	r1, [sp, #4]
    2f72:	4692      	mov	sl, r2
    2f74:	469b      	mov	fp, r3
#else
    vpoint_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                   
    ecccopy_precomp_fixed_base(table[0], point);                             // point = table[0]
    2f76:	a920      	add	r1, sp, #128	; 0x80
    2f78:	4d42      	ldr	r5, [pc, #264]	; (3084 <table_lookup_fixed_base+0x124>)
    2f7a:	47a8      	blx	r5
    2f7c:	0020      	movs	r0, r4
    2f7e:	3028      	adds	r0, #40	; 0x28
    2f80:	a92a      	add	r1, sp, #168	; 0xa8
    2f82:	47a8      	blx	r5
    2f84:	0020      	movs	r0, r4
    2f86:	3050      	adds	r0, #80	; 0x50
    2f88:	a934      	add	r1, sp, #208	; 0xd0
    2f8a:	47a8      	blx	r5
    2f8c:	0027      	movs	r7, r4
    2f8e:	3778      	adds	r7, #120	; 0x78
    2f90:	0023      	movs	r3, r4
    2f92:	22f0      	movs	r2, #240	; 0xf0
    2f94:	00d2      	lsls	r2, r2, #3
    2f96:	4694      	mov	ip, r2
    2f98:	4463      	add	r3, ip
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    2f9a:	4a3a      	ldr	r2, [pc, #232]	; (3084 <table_lookup_fixed_base+0x124>)
    2f9c:	4691      	mov	r9, r2
    2f9e:	4698      	mov	r8, r3
    2fa0:	4654      	mov	r4, sl
    2fa2:	e003      	b.n	2fac <table_lookup_fixed_base+0x4c>
    2fa4:	4664      	mov	r4, ip
    2fa6:	3778      	adds	r7, #120	; 0x78
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    2fa8:	4547      	cmp	r7, r8
    2faa:	d02e      	beq.n	300a <table_lookup_fixed_base+0xaa>
        digit--;
    2fac:	3c01      	subs	r4, #1
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    2fae:	0fe5      	lsrs	r5, r4, #31
    2fb0:	3d01      	subs	r5, #1
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    2fb2:	a902      	add	r1, sp, #8
    2fb4:	0038      	movs	r0, r7
    2fb6:	47c8      	blx	r9
    2fb8:	0038      	movs	r0, r7
    2fba:	3028      	adds	r0, #40	; 0x28
    2fbc:	a90c      	add	r1, sp, #48	; 0x30
    2fbe:	47c8      	blx	r9
    2fc0:	0038      	movs	r0, r7
    2fc2:	3050      	adds	r0, #80	; 0x50
    2fc4:	a916      	add	r1, sp, #88	; 0x58
    2fc6:	47c8      	blx	r9
    2fc8:	ae20      	add	r6, sp, #128	; 0x80
    2fca:	ab02      	add	r3, sp, #8
    2fcc:	469a      	mov	sl, r3
    2fce:	a82a      	add	r0, sp, #168	; 0xa8
    2fd0:	0019      	movs	r1, r3
    2fd2:	0032      	movs	r2, r6
    2fd4:	46a4      	mov	ip, r4
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point
        for (j = 0; j < 2*VWORDS_FIELD; j++) {
            point->xy[j] = (mask & (point->xy[j] ^ temp_point->xy[j])) ^ point->xy[j];
    2fd6:	6813      	ldr	r3, [r2, #0]
    2fd8:	680c      	ldr	r4, [r1, #0]
    2fda:	4063      	eors	r3, r4
    2fdc:	402b      	ands	r3, r5
    2fde:	6814      	ldr	r4, [r2, #0]
    2fe0:	4063      	eors	r3, r4
    2fe2:	6013      	str	r3, [r2, #0]
            point->yx[j] = (mask & (point->yx[j] ^ temp_point->yx[j])) ^ point->yx[j];
    2fe4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2fe6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    2fe8:	4063      	eors	r3, r4
    2fea:	402b      	ands	r3, r5
    2fec:	6a94      	ldr	r4, [r2, #40]	; 0x28
    2fee:	4063      	eors	r3, r4
    2ff0:	6293      	str	r3, [r2, #40]	; 0x28
            point->t2[j] = (mask & (point->t2[j] ^ temp_point->t2[j])) ^ point->t2[j];
    2ff2:	6d13      	ldr	r3, [r2, #80]	; 0x50
    2ff4:	6d0c      	ldr	r4, [r1, #80]	; 0x50
    2ff6:	4063      	eors	r3, r4
    2ff8:	402b      	ands	r3, r5
    2ffa:	6d14      	ldr	r4, [r2, #80]	; 0x50
    2ffc:	4063      	eors	r3, r4
    2ffe:	6513      	str	r3, [r2, #80]	; 0x50
    3000:	3204      	adds	r2, #4
    3002:	3104      	adds	r1, #4
        for (j = 0; j < 2*VWORDS_FIELD; j++) {
    3004:	4282      	cmp	r2, r0
    3006:	d1e6      	bne.n	2fd6 <table_lookup_fixed_base+0x76>
    3008:	e7cc      	b.n	2fa4 <table_lookup_fixed_base+0x44>
    300a:	0014      	movs	r4, r2
        }
    }
    
    v2copy1271(point->t2, temp_point->t2);
    300c:	a916      	add	r1, sp, #88	; 0x58
    300e:	a834      	add	r0, sp, #208	; 0xd0
    3010:	4d1c      	ldr	r5, [pc, #112]	; (3084 <table_lookup_fixed_base+0x124>)
    3012:	47a8      	blx	r5
    v2copy1271(point->xy, temp_point->yx);                                  // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    3014:	a90c      	add	r1, sp, #48	; 0x30
    3016:	a820      	add	r0, sp, #128	; 0x80
    3018:	47a8      	blx	r5
    v2copy1271(point->yx, temp_point->xy);                                   
    301a:	a902      	add	r1, sp, #8
    301c:	a82a      	add	r0, sp, #168	; 0xa8
    301e:	47a8      	blx	r5
    vneg1271(&temp_point->t2[0]);                                            // Negate 2dt coordinate
    3020:	a816      	add	r0, sp, #88	; 0x58
    3022:	4d19      	ldr	r5, [pc, #100]	; (3088 <table_lookup_fixed_base+0x128>)
    3024:	47a8      	blx	r5
    vneg1271(&temp_point->t2[VWORDS_FIELD]);             
    3026:	a81b      	add	r0, sp, #108	; 0x6c
    3028:	47a8      	blx	r5
    302a:	4652      	mov	r2, sl
    302c:	4659      	mov	r1, fp
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
        point->xy[j] = ((digit_t)((int)sign) & (point->xy[j] ^ temp_point->xy[j])) ^ point->xy[j];
    302e:	6830      	ldr	r0, [r6, #0]
    3030:	6813      	ldr	r3, [r2, #0]
    3032:	4043      	eors	r3, r0
    3034:	400b      	ands	r3, r1
    3036:	4043      	eors	r3, r0
    3038:	6033      	str	r3, [r6, #0]
        point->yx[j] = ((digit_t)((int)sign) & (point->yx[j] ^ temp_point->yx[j])) ^ point->yx[j];
    303a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    303c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    303e:	4043      	eors	r3, r0
    3040:	400b      	ands	r3, r1
    3042:	4043      	eors	r3, r0
    3044:	62b3      	str	r3, [r6, #40]	; 0x28
        point->t2[j] = ((digit_t)((int)sign) & (point->t2[j] ^ temp_point->t2[j])) ^ point->t2[j];
    3046:	6d30      	ldr	r0, [r6, #80]	; 0x50
    3048:	6d13      	ldr	r3, [r2, #80]	; 0x50
    304a:	4043      	eors	r3, r0
    304c:	400b      	ands	r3, r1
    304e:	4043      	eors	r3, r0
    3050:	6533      	str	r3, [r6, #80]	; 0x50
    3052:	3604      	adds	r6, #4
    3054:	3204      	adds	r2, #4
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
    3056:	42a6      	cmp	r6, r4
    3058:	d1e9      	bne.n	302e <table_lookup_fixed_base+0xce>
    }                                  
    ecccopy_precomp_fixed_base(point, P);
    305a:	9d01      	ldr	r5, [sp, #4]
    305c:	0029      	movs	r1, r5
    305e:	a820      	add	r0, sp, #128	; 0x80
    3060:	4c08      	ldr	r4, [pc, #32]	; (3084 <table_lookup_fixed_base+0x124>)
    3062:	47a0      	blx	r4
    3064:	0029      	movs	r1, r5
    3066:	3128      	adds	r1, #40	; 0x28
    3068:	a82a      	add	r0, sp, #168	; 0xa8
    306a:	47a0      	blx	r4
    306c:	0029      	movs	r1, r5
    306e:	3150      	adds	r1, #80	; 0x50
    3070:	a834      	add	r0, sp, #208	; 0xd0
    3072:	47a0      	blx	r4
#endif
}
    3074:	b03f      	add	sp, #252	; 0xfc
    3076:	bc3c      	pop	{r2, r3, r4, r5}
    3078:	4690      	mov	r8, r2
    307a:	4699      	mov	r9, r3
    307c:	46a2      	mov	sl, r4
    307e:	46ab      	mov	fp, r5
    3080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3082:	46c0      	nop			; (mov r8, r8)
    3084:	00002be7 	.word	0x00002be7
    3088:	00002031 	.word	0x00002031

0000308c <v2zero1271>:


void v2zero1271(v2elm_t a) 
{ // Zeroing vectorized GF(p^2) element, a = 0
    
    a[0] = 0; a[1] = 0; a[2] = 0; a[3] = 0; a[4] = 0; 
    308c:	2300      	movs	r3, #0
    308e:	6003      	str	r3, [r0, #0]
    3090:	6043      	str	r3, [r0, #4]
    3092:	6083      	str	r3, [r0, #8]
    3094:	60c3      	str	r3, [r0, #12]
    3096:	6103      	str	r3, [r0, #16]
    a[5] = 0; a[6] = 0; a[7] = 0; a[8] = 0; a[9] = 0;
    3098:	6143      	str	r3, [r0, #20]
    309a:	6183      	str	r3, [r0, #24]
    309c:	61c3      	str	r3, [r0, #28]
    309e:	6203      	str	r3, [r0, #32]
    30a0:	6243      	str	r3, [r0, #36]	; 0x24
}
    30a2:	4770      	bx	lr

000030a4 <v2add1271>:


__inline void v2add1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) addition, c = a+b in GF((2^127-1)^2)
    30a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30a6:	0004      	movs	r4, r0
    30a8:	000d      	movs	r5, r1
    30aa:	0016      	movs	r6, r2
    vadd1271(&a[0], &b[0], &c[0]);
    30ac:	4f04      	ldr	r7, [pc, #16]	; (30c0 <v2add1271+0x1c>)
    30ae:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    30b0:	0032      	movs	r2, r6
    30b2:	3214      	adds	r2, #20
    30b4:	0029      	movs	r1, r5
    30b6:	3114      	adds	r1, #20
    30b8:	0020      	movs	r0, r4
    30ba:	3014      	adds	r0, #20
    30bc:	47b8      	blx	r7
}
    30be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30c0:	00001fc7 	.word	0x00001fc7

000030c4 <v2sub1271>:


__inline void v2sub1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) subtraction, c = a-b in GF((2^127-1)^2)
    30c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30c6:	0004      	movs	r4, r0
    30c8:	000d      	movs	r5, r1
    30ca:	0016      	movs	r6, r2
    vsub1271(&a[0], &b[0], &c[0]);
    30cc:	4f04      	ldr	r7, [pc, #16]	; (30e0 <v2sub1271+0x1c>)
    30ce:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    30d0:	0032      	movs	r2, r6
    30d2:	3214      	adds	r2, #20
    30d4:	0029      	movs	r1, r5
    30d6:	3114      	adds	r1, #20
    30d8:	0020      	movs	r0, r4
    30da:	3014      	adds	r0, #20
    30dc:	47b8      	blx	r7
}
    30de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30e0:	00002003 	.word	0x00002003

000030e4 <v2dblsub1271>:


void v2dblsub1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) addition followed by subtraction, c = 2a-b in GF((2^127-1)^2) 
    30e4:	b510      	push	{r4, lr}
    
    c[0] = (a[0] << 1) - b[0];
    30e6:	6803      	ldr	r3, [r0, #0]
    30e8:	005b      	lsls	r3, r3, #1
    30ea:	680c      	ldr	r4, [r1, #0]
    30ec:	1b1b      	subs	r3, r3, r4
    30ee:	6013      	str	r3, [r2, #0]
    c[1] = (a[1] << 1) - b[1];
    30f0:	6843      	ldr	r3, [r0, #4]
    30f2:	005b      	lsls	r3, r3, #1
    30f4:	684c      	ldr	r4, [r1, #4]
    30f6:	1b1b      	subs	r3, r3, r4
    30f8:	6053      	str	r3, [r2, #4]
    c[2] = (a[2] << 1) - b[2];
    30fa:	6883      	ldr	r3, [r0, #8]
    30fc:	005b      	lsls	r3, r3, #1
    30fe:	688c      	ldr	r4, [r1, #8]
    3100:	1b1b      	subs	r3, r3, r4
    3102:	6093      	str	r3, [r2, #8]
    c[3] = (a[3] << 1) - b[3];
    3104:	68c3      	ldr	r3, [r0, #12]
    3106:	005b      	lsls	r3, r3, #1
    3108:	68cc      	ldr	r4, [r1, #12]
    310a:	1b1b      	subs	r3, r3, r4
    310c:	60d3      	str	r3, [r2, #12]
    c[4] = (a[4] << 1) - b[4];
    310e:	6903      	ldr	r3, [r0, #16]
    3110:	005b      	lsls	r3, r3, #1
    3112:	690c      	ldr	r4, [r1, #16]
    3114:	1b1b      	subs	r3, r3, r4
    3116:	6113      	str	r3, [r2, #16]
    c[5] = (a[5] << 1) - b[5];
    3118:	6943      	ldr	r3, [r0, #20]
    311a:	005b      	lsls	r3, r3, #1
    311c:	694c      	ldr	r4, [r1, #20]
    311e:	1b1b      	subs	r3, r3, r4
    3120:	6153      	str	r3, [r2, #20]
    c[6] = (a[6] << 1) - b[6];
    3122:	6983      	ldr	r3, [r0, #24]
    3124:	005b      	lsls	r3, r3, #1
    3126:	698c      	ldr	r4, [r1, #24]
    3128:	1b1b      	subs	r3, r3, r4
    312a:	6193      	str	r3, [r2, #24]
    c[7] = (a[7] << 1) - b[7];
    312c:	69c3      	ldr	r3, [r0, #28]
    312e:	005b      	lsls	r3, r3, #1
    3130:	69cc      	ldr	r4, [r1, #28]
    3132:	1b1b      	subs	r3, r3, r4
    3134:	61d3      	str	r3, [r2, #28]
    c[8] = (a[8] << 1) - b[8];
    3136:	6a03      	ldr	r3, [r0, #32]
    3138:	005b      	lsls	r3, r3, #1
    313a:	6a0c      	ldr	r4, [r1, #32]
    313c:	1b1b      	subs	r3, r3, r4
    313e:	6213      	str	r3, [r2, #32]
    c[9] = (a[9] << 1) - b[9];
    3140:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3142:	005b      	lsls	r3, r3, #1
    3144:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3146:	1a5b      	subs	r3, r3, r1
    3148:	6253      	str	r3, [r2, #36]	; 0x24
}
    314a:	bd10      	pop	{r4, pc}

0000314c <v2neg1271>:

void v2neg1271(v2elm_t a) 
{ // Vectorized GF(p^2) negation
  // Representation: 23/26/26/26/26/23/26/26/26/26-bit
    
    a[0] = mask_26 - a[0];
    314c:	4b10      	ldr	r3, [pc, #64]	; (3190 <v2neg1271+0x44>)
    314e:	6802      	ldr	r2, [r0, #0]
    3150:	1a9a      	subs	r2, r3, r2
    3152:	6002      	str	r2, [r0, #0]
    a[1] = mask_26 - a[1];
    3154:	6842      	ldr	r2, [r0, #4]
    3156:	1a9a      	subs	r2, r3, r2
    3158:	6042      	str	r2, [r0, #4]
    a[2] = mask_26 - a[2];
    315a:	6882      	ldr	r2, [r0, #8]
    315c:	1a9a      	subs	r2, r3, r2
    315e:	6082      	str	r2, [r0, #8]
    a[3] = mask_26 - a[3];
    3160:	68c2      	ldr	r2, [r0, #12]
    3162:	1a9a      	subs	r2, r3, r2
    3164:	60c2      	str	r2, [r0, #12]
    a[4] = mask_23 - a[4];
    3166:	4a0b      	ldr	r2, [pc, #44]	; (3194 <v2neg1271+0x48>)
    3168:	6901      	ldr	r1, [r0, #16]
    316a:	1a51      	subs	r1, r2, r1
    316c:	6101      	str	r1, [r0, #16]
    a[5] = mask_26 - a[5];
    316e:	6941      	ldr	r1, [r0, #20]
    3170:	1a59      	subs	r1, r3, r1
    3172:	6141      	str	r1, [r0, #20]
    a[6] = mask_26 - a[6];
    3174:	6981      	ldr	r1, [r0, #24]
    3176:	1a59      	subs	r1, r3, r1
    3178:	6181      	str	r1, [r0, #24]
    a[7] = mask_26 - a[7];
    317a:	69c1      	ldr	r1, [r0, #28]
    317c:	1a59      	subs	r1, r3, r1
    317e:	61c1      	str	r1, [r0, #28]
    a[8] = mask_26 - a[8];
    3180:	6a01      	ldr	r1, [r0, #32]
    3182:	1a5b      	subs	r3, r3, r1
    3184:	6203      	str	r3, [r0, #32]
    a[9] = mask_23 - a[9];
    3186:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3188:	1ad2      	subs	r2, r2, r3
    318a:	6242      	str	r2, [r0, #36]	; 0x24
}
    318c:	4770      	bx	lr
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	03ffffff 	.word	0x03ffffff
    3194:	007fffff 	.word	0x007fffff

00003198 <v2div1271>:


void v2div1271(uint32_t* a) 
{ // GF(p^2) division by two, c = a/2 mod p
    3198:	b5f0      	push	{r4, r5, r6, r7, lr}
    319a:	46c6      	mov	lr, r8
    319c:	b500      	push	{lr}
    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    319e:	6804      	ldr	r4, [r0, #0]
    31a0:	2301      	movs	r3, #1
    31a2:	4698      	mov	r8, r3
    31a4:	001a      	movs	r2, r3
    31a6:	4022      	ands	r2, r4
    31a8:	4252      	negs	r2, r2
    31aa:	0991      	lsrs	r1, r2, #6
    a[1] += mask;
    31ac:	6843      	ldr	r3, [r0, #4]
    31ae:	18ce      	adds	r6, r1, r3
    a[2] += mask;
    31b0:	6883      	ldr	r3, [r0, #8]
    31b2:	18cd      	adds	r5, r1, r3
    a[3] += mask;
    31b4:	68c3      	ldr	r3, [r0, #12]
    31b6:	18cf      	adds	r7, r1, r3
    a[4] += (mask >> 3);
    31b8:	0a52      	lsrs	r2, r2, #9
    31ba:	6903      	ldr	r3, [r0, #16]
    31bc:	469c      	mov	ip, r3
    31be:	4462      	add	r2, ip
    a[0] += mask;
    31c0:	1864      	adds	r4, r4, r1
    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    31c2:	1064      	asrs	r4, r4, #1
    31c4:	0673      	lsls	r3, r6, #25
    31c6:	2180      	movs	r1, #128	; 0x80
    31c8:	0489      	lsls	r1, r1, #18
    31ca:	400b      	ands	r3, r1
    31cc:	469c      	mov	ip, r3
    31ce:	4464      	add	r4, ip
    31d0:	6004      	str	r4, [r0, #0]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    31d2:	066c      	lsls	r4, r5, #25
    31d4:	400c      	ands	r4, r1
    31d6:	1076      	asrs	r6, r6, #1
    31d8:	19a6      	adds	r6, r4, r6
    31da:	6046      	str	r6, [r0, #4]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    31dc:	067c      	lsls	r4, r7, #25
    31de:	400c      	ands	r4, r1
    31e0:	106d      	asrs	r5, r5, #1
    31e2:	1965      	adds	r5, r4, r5
    31e4:	6085      	str	r5, [r0, #8]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    31e6:	0654      	lsls	r4, r2, #25
    31e8:	400c      	ands	r4, r1
    31ea:	107f      	asrs	r7, r7, #1
    31ec:	19e7      	adds	r7, r4, r7
    31ee:	60c7      	str	r7, [r0, #12]
    a[4] = ((sdigit_t)a[4] >> 1);
    31f0:	1052      	asrs	r2, r2, #1
    31f2:	6102      	str	r2, [r0, #16]
    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    31f4:	6942      	ldr	r2, [r0, #20]
    31f6:	4643      	mov	r3, r8
    31f8:	4013      	ands	r3, r2
    31fa:	425b      	negs	r3, r3
    31fc:	099f      	lsrs	r7, r3, #6
    a[1] += mask;
    31fe:	6984      	ldr	r4, [r0, #24]
    3200:	193e      	adds	r6, r7, r4
    a[2] += mask;
    3202:	69c4      	ldr	r4, [r0, #28]
    3204:	193d      	adds	r5, r7, r4
    a[3] += mask;
    3206:	6a04      	ldr	r4, [r0, #32]
    3208:	193c      	adds	r4, r7, r4
    a[4] += (mask >> 3);
    320a:	0a5b      	lsrs	r3, r3, #9
    320c:	4698      	mov	r8, r3
    320e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3210:	469c      	mov	ip, r3
    3212:	4643      	mov	r3, r8
    3214:	4463      	add	r3, ip
    a[0] += mask;
    3216:	19d2      	adds	r2, r2, r7
    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    3218:	1052      	asrs	r2, r2, #1
    321a:	0677      	lsls	r7, r6, #25
    321c:	400f      	ands	r7, r1
    321e:	19d2      	adds	r2, r2, r7
    3220:	6142      	str	r2, [r0, #20]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    3222:	066a      	lsls	r2, r5, #25
    3224:	400a      	ands	r2, r1
    3226:	1076      	asrs	r6, r6, #1
    3228:	1996      	adds	r6, r2, r6
    322a:	6186      	str	r6, [r0, #24]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    322c:	0662      	lsls	r2, r4, #25
    322e:	400a      	ands	r2, r1
    3230:	106d      	asrs	r5, r5, #1
    3232:	1955      	adds	r5, r2, r5
    3234:	61c5      	str	r5, [r0, #28]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    3236:	065a      	lsls	r2, r3, #25
    3238:	4011      	ands	r1, r2
    323a:	1064      	asrs	r4, r4, #1
    323c:	190c      	adds	r4, r1, r4
    323e:	6204      	str	r4, [r0, #32]
    a[4] = ((sdigit_t)a[4] >> 1);
    3240:	105b      	asrs	r3, r3, #1
    3242:	6243      	str	r3, [r0, #36]	; 0x24
    vdiv1271(&a[0]);
    vdiv1271(&a[VWORDS_FIELD]);
}
    3244:	bc04      	pop	{r2}
    3246:	4690      	mov	r8, r2
    3248:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000324c <v2mod1271_incomplete>:


void v2mod1271_incomplete(uint32_t* a, uint32_t* c) 
{ // Reduction of GF(p^2) element
    324c:	b570      	push	{r4, r5, r6, lr}
    324e:	0004      	movs	r4, r0
    3250:	000d      	movs	r5, r1
    vmod1271_incomplete(&a[0], &c[0]);
    3252:	4e04      	ldr	r6, [pc, #16]	; (3264 <v2mod1271_incomplete+0x18>)
    3254:	47b0      	blx	r6
    vmod1271_incomplete(&a[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3256:	0029      	movs	r1, r5
    3258:	3114      	adds	r1, #20
    325a:	0020      	movs	r0, r4
    325c:	3014      	adds	r0, #20
    325e:	47b0      	blx	r6
}
    3260:	bd70      	pop	{r4, r5, r6, pc}
    3262:	46c0      	nop			; (mov r8, r8)
    3264:	000024cd 	.word	0x000024cd

00003268 <v2mod1271>:


void v2mod1271(uint32_t* a, uint32_t* c) 
{ // Reduction of GF(p^2) element
    3268:	b570      	push	{r4, r5, r6, lr}
    326a:	0004      	movs	r4, r0
    326c:	000d      	movs	r5, r1
    vmod1271(&a[0], &c[0]);
    326e:	4e04      	ldr	r6, [pc, #16]	; (3280 <v2mod1271+0x18>)
    3270:	47b0      	blx	r6
    vmod1271(&a[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3272:	0029      	movs	r1, r5
    3274:	3114      	adds	r1, #20
    3276:	0020      	movs	r0, r4
    3278:	3014      	adds	r0, #20
    327a:	47b0      	blx	r6
}
    327c:	bd70      	pop	{r4, r5, r6, pc}
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	00002535 	.word	0x00002535

00003284 <v2mul1271>:


void v2mul1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // GF(p^2) multiplication, c = a*b in GF((2^127-1)^2) 
    3284:	b5f0      	push	{r4, r5, r6, r7, lr}
    3286:	b097      	sub	sp, #92	; 0x5c
    3288:	0006      	movs	r6, r0
    328a:	000d      	movs	r5, r1
    328c:	9201      	str	r2, [sp, #4]
    velm_t t1, t2, t3, t4;
    
    vmul1271(&a[0], &b[0], t1);                        // t1 = a0*b0
    328e:	ab11      	add	r3, sp, #68	; 0x44
    3290:	001a      	movs	r2, r3
    3292:	4c16      	ldr	r4, [pc, #88]	; (32ec <v2mul1271+0x68>)
    3294:	47a0      	blx	r4
    vmul1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], t2);  // t2 = a1*b1
    3296:	2314      	movs	r3, #20
    3298:	469c      	mov	ip, r3
    329a:	44b4      	add	ip, r6
    329c:	4663      	mov	r3, ip
    329e:	002f      	movs	r7, r5
    32a0:	3714      	adds	r7, #20
    32a2:	a90c      	add	r1, sp, #48	; 0x30
    32a4:	000a      	movs	r2, r1
    32a6:	0039      	movs	r1, r7
    32a8:	9300      	str	r3, [sp, #0]
    32aa:	4660      	mov	r0, ip
    32ac:	47a0      	blx	r4
    vadd1271(&a[0], &a[VWORDS_FIELD], t3);             // t3 = a0+a1
    32ae:	a807      	add	r0, sp, #28
    32b0:	0002      	movs	r2, r0
    32b2:	9900      	ldr	r1, [sp, #0]
    32b4:	0030      	movs	r0, r6
    32b6:	4e0e      	ldr	r6, [pc, #56]	; (32f0 <v2mul1271+0x6c>)
    32b8:	47b0      	blx	r6
    vadd1271(&b[0], &b[VWORDS_FIELD], t4);             // t4 = b0+b1
    32ba:	aa02      	add	r2, sp, #8
    32bc:	0039      	movs	r1, r7
    32be:	0028      	movs	r0, r5
    32c0:	47b0      	blx	r6
    vsub1271(t1, t2, &c[0]);                           // c[0] = a0*b0 - a1*b1
    32c2:	9e01      	ldr	r6, [sp, #4]
    32c4:	0032      	movs	r2, r6
    32c6:	a90c      	add	r1, sp, #48	; 0x30
    32c8:	a811      	add	r0, sp, #68	; 0x44
    32ca:	4d0a      	ldr	r5, [pc, #40]	; (32f4 <v2mul1271+0x70>)
    32cc:	47a8      	blx	r5
    vmul1271(t3, t4, t3);                              // t3 = (a0+a1)*(b0+b1)
    32ce:	aa07      	add	r2, sp, #28
    32d0:	a902      	add	r1, sp, #8
    32d2:	0010      	movs	r0, r2
    32d4:	47a0      	blx	r4
    vsub1271(t3, t1, t3);                              // t3 = (a0+a1)*(b0+b1) - a0*b0
    32d6:	aa07      	add	r2, sp, #28
    32d8:	a911      	add	r1, sp, #68	; 0x44
    32da:	0010      	movs	r0, r2
    32dc:	47a8      	blx	r5
    vsub1271(t3, t2, &c[VWORDS_FIELD]);                // c[1] = (a0+a1)*(b0+b1) - a0*b0 - a1*b1
    32de:	0032      	movs	r2, r6
    32e0:	3214      	adds	r2, #20
    32e2:	a90c      	add	r1, sp, #48	; 0x30
    32e4:	a807      	add	r0, sp, #28
    32e6:	47a8      	blx	r5
}
    32e8:	b017      	add	sp, #92	; 0x5c
    32ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32ec:	0000205d 	.word	0x0000205d
    32f0:	00001fc7 	.word	0x00001fc7
    32f4:	00002003 	.word	0x00002003

000032f8 <v2sqr1271>:


void v2sqr1271(v2elm_t a, v2elm_t c)
{ // GF(p^2) squaring, c = a^2 in GF((2^127-1)^2) 
    32f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32fa:	b091      	sub	sp, #68	; 0x44
    32fc:	0005      	movs	r5, r0
    32fe:	000c      	movs	r4, r1
    velm_t t1, t2, t3;

    vadd1271(&a[0], &a[VWORDS_FIELD], t1);             // t1 = a0+a1 
    3300:	0006      	movs	r6, r0
    3302:	3614      	adds	r6, #20
    3304:	aa0b      	add	r2, sp, #44	; 0x2c
    3306:	0031      	movs	r1, r6
    3308:	4f0b      	ldr	r7, [pc, #44]	; (3338 <v2sqr1271+0x40>)
    330a:	47b8      	blx	r7
    vsub1271(&a[0], &a[VWORDS_FIELD], t2);             // t2 = a0-a1
    330c:	aa06      	add	r2, sp, #24
    330e:	0031      	movs	r1, r6
    3310:	0028      	movs	r0, r5
    3312:	4b0a      	ldr	r3, [pc, #40]	; (333c <v2sqr1271+0x44>)
    3314:	4798      	blx	r3
    vmul1271(&a[0], &a[VWORDS_FIELD], t3);             // t3 = a0*a1
    3316:	aa01      	add	r2, sp, #4
    3318:	0031      	movs	r1, r6
    331a:	0028      	movs	r0, r5
    331c:	4d08      	ldr	r5, [pc, #32]	; (3340 <v2sqr1271+0x48>)
    331e:	47a8      	blx	r5
    vmul1271(t1, t2, &c[0]);                           // c0 = (a0+a1)(a0-a1)
    3320:	0022      	movs	r2, r4
    3322:	a906      	add	r1, sp, #24
    3324:	a80b      	add	r0, sp, #44	; 0x2c
    3326:	47a8      	blx	r5
    vadd1271(t3, t3, &c[VWORDS_FIELD]);                // c1 = 2a0*a1
    3328:	0022      	movs	r2, r4
    332a:	3214      	adds	r2, #20
    332c:	a901      	add	r1, sp, #4
    332e:	0008      	movs	r0, r1
    3330:	47b8      	blx	r7
}
    3332:	b011      	add	sp, #68	; 0x44
    3334:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	00001fc7 	.word	0x00001fc7
    333c:	00002003 	.word	0x00002003
    3340:	0000205d 	.word	0x0000205d

00003344 <v2inv1271>:


void v2inv1271(v2elm_t a)
{ // Vectorized GF(p^2) inversion, a = (a0-i*a1)/(a0^2+a1^2)
    3344:	b570      	push	{r4, r5, r6, lr}
    3346:	b08a      	sub	sp, #40	; 0x28
    3348:	0005      	movs	r5, r0
    velm_t t0, t1; 

    vsqr1271(&a[0], t0);                               // t0 = a0^2
    334a:	a905      	add	r1, sp, #20
    334c:	4e0e      	ldr	r6, [pc, #56]	; (3388 <v2inv1271+0x44>)
    334e:	47b0      	blx	r6
    vsqr1271(&a[VWORDS_FIELD], t1);                    // t1 = a1^2 
    3350:	002c      	movs	r4, r5
    3352:	3414      	adds	r4, #20
    3354:	4669      	mov	r1, sp
    3356:	0020      	movs	r0, r4
    3358:	47b0      	blx	r6
    vadd1271(t0, t1, t0);                              // t0 = a0^2+a1^2 
    335a:	aa05      	add	r2, sp, #20
    335c:	4669      	mov	r1, sp
    335e:	0010      	movs	r0, r2
    3360:	4b0a      	ldr	r3, [pc, #40]	; (338c <v2inv1271+0x48>)
    3362:	4798      	blx	r3
    vinv1271(t0);                                      // t0 = (a0^2+a1^2)^-1 
    3364:	a805      	add	r0, sp, #20
    3366:	4b0a      	ldr	r3, [pc, #40]	; (3390 <v2inv1271+0x4c>)
    3368:	4798      	blx	r3
    vneg1271(&a[VWORDS_FIELD]);                        // a = a0-i*a1 
    336a:	0020      	movs	r0, r4
    336c:	4b09      	ldr	r3, [pc, #36]	; (3394 <v2inv1271+0x50>)
    336e:	4798      	blx	r3
    vmul1271(&a[0], t0, &a[0]);
    3370:	002a      	movs	r2, r5
    3372:	a905      	add	r1, sp, #20
    3374:	0028      	movs	r0, r5
    3376:	4d08      	ldr	r5, [pc, #32]	; (3398 <v2inv1271+0x54>)
    3378:	47a8      	blx	r5
    vmul1271(&a[VWORDS_FIELD], t0, &a[VWORDS_FIELD]);  // a = (a0-i*a1)*(a0^2+a1^2)^-1
    337a:	0022      	movs	r2, r4
    337c:	a905      	add	r1, sp, #20
    337e:	0020      	movs	r0, r4
    3380:	47a8      	blx	r5
}
    3382:	b00a      	add	sp, #40	; 0x28
    3384:	bd70      	pop	{r4, r5, r6, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	000022f1 	.word	0x000022f1
    338c:	00001fc7 	.word	0x00001fc7
    3390:	000026f9 	.word	0x000026f9
    3394:	00002031 	.word	0x00002031
    3398:	0000205d 	.word	0x0000205d

0000339c <clear_words>:
  // It has been tested with MSVS 2013 and GNU GCC 4.6.3, 4.7.3, 4.8.2 and 4.8.4. Users are responsible for verifying correctness with different compilers.  
  // See "Compliant Solution (C99)" at https://www.securecoding.cert.org/confluence/display/c/MSC06-C.+Beware+of+compiler+optimizations 
	unsigned int i;
	volatile unsigned int *v = mem;

	for (i = 0; i < nwords; i++)
    339c:	2900      	cmp	r1, #0
    339e:	d006      	beq.n	33ae <clear_words+0x12>
    33a0:	0003      	movs	r3, r0
    33a2:	0089      	lsls	r1, r1, #2
    33a4:	1840      	adds	r0, r0, r1
		v[i] = 0;
    33a6:	2200      	movs	r2, #0
    33a8:	c304      	stmia	r3!, {r2}
	for (i = 0; i < nwords; i++)
    33aa:	4283      	cmp	r3, r0
    33ac:	d1fc      	bne.n	33a8 <clear_words+0xc>
}
    33ae:	4770      	bx	lr

000033b0 <eccnorm>:
	fp2copy1271((felm_t*)&GENERATOR_y, P->y);    // Y1
}


__inline void eccnorm(vpoint_extproj_t P, vpoint_t Q)
{ // Normalize a projective point (X1:Y1:Z1), including full reduction
    33b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    33b2:	b083      	sub	sp, #12
    33b4:	0004      	movs	r4, r0
    33b6:	000d      	movs	r5, r1
  // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates    
  // Output: Q = (X1/Z1,Y1/Z1), corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    
    v2inv1271(P->z);                      // Z1 = Z1^-1
    33b8:	0007      	movs	r7, r0
    33ba:	3750      	adds	r7, #80	; 0x50
    33bc:	0038      	movs	r0, r7
    33be:	4b0d      	ldr	r3, [pc, #52]	; (33f4 <eccnorm+0x44>)
    33c0:	4798      	blx	r3
    v2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    33c2:	002a      	movs	r2, r5
    33c4:	0039      	movs	r1, r7
    33c6:	0020      	movs	r0, r4
    33c8:	4e0b      	ldr	r6, [pc, #44]	; (33f8 <eccnorm+0x48>)
    33ca:	47b0      	blx	r6
    v2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    33cc:	2328      	movs	r3, #40	; 0x28
    33ce:	469c      	mov	ip, r3
    33d0:	44ac      	add	ip, r5
    33d2:	4663      	mov	r3, ip
    33d4:	0020      	movs	r0, r4
    33d6:	3028      	adds	r0, #40	; 0x28
    33d8:	9301      	str	r3, [sp, #4]
    33da:	4662      	mov	r2, ip
    33dc:	0039      	movs	r1, r7
    33de:	47b0      	blx	r6
    v2mod1271(Q->x, Q->x); 
    33e0:	0029      	movs	r1, r5
    33e2:	0028      	movs	r0, r5
    33e4:	4c05      	ldr	r4, [pc, #20]	; (33fc <eccnorm+0x4c>)
    33e6:	47a0      	blx	r4
    v2mod1271(Q->y, Q->y); 
    33e8:	9801      	ldr	r0, [sp, #4]
    33ea:	0001      	movs	r1, r0
    33ec:	47a0      	blx	r4
}
    33ee:	b003      	add	sp, #12
    33f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	00003345 	.word	0x00003345
    33f8:	00003285 	.word	0x00003285
    33fc:	00003269 	.word	0x00003269

00003400 <R1_to_R2>:


void R1_to_R2(vpoint_extproj_t P, vpoint_extproj_precomp_t Q) 
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT), where T = Ta*Tb
    3400:	b5f0      	push	{r4, r5, r6, r7, lr}
    3402:	b085      	sub	sp, #20
    3404:	0005      	movs	r5, r0
    3406:	000c      	movs	r4, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    
    v2add1271(P->ta, P->ta, Q->t2);              // T = 2*Ta
    3408:	3078      	adds	r0, #120	; 0x78
    340a:	2378      	movs	r3, #120	; 0x78
    340c:	469c      	mov	ip, r3
    340e:	448c      	add	ip, r1
    3410:	4663      	mov	r3, ip
    vadd1271(&a[0], &b[0], &c[0]);
    3412:	9301      	str	r3, [sp, #4]
    3414:	4662      	mov	r2, ip
    3416:	0001      	movs	r1, r0
    3418:	4e20      	ldr	r6, [pc, #128]	; (349c <R1_to_R2+0x9c>)
    341a:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    341c:	002a      	movs	r2, r5
    341e:	328c      	adds	r2, #140	; 0x8c
    3420:	0010      	movs	r0, r2
    3422:	0022      	movs	r2, r4
    3424:	328c      	adds	r2, #140	; 0x8c
    3426:	0001      	movs	r1, r0
    3428:	47b0      	blx	r6
    v2add1271(P->x, P->y, Q->xy);                // QX = X+Y
    342a:	002f      	movs	r7, r5
    342c:	3728      	adds	r7, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    342e:	0022      	movs	r2, r4
    3430:	0039      	movs	r1, r7
    3432:	0028      	movs	r0, r5
    3434:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3436:	2214      	movs	r2, #20
    3438:	4694      	mov	ip, r2
    343a:	44ac      	add	ip, r5
    343c:	4663      	mov	r3, ip
    343e:	223c      	movs	r2, #60	; 0x3c
    3440:	4694      	mov	ip, r2
    3442:	44ac      	add	ip, r5
    3444:	4661      	mov	r1, ip
    3446:	0022      	movs	r2, r4
    3448:	3214      	adds	r2, #20
    344a:	9103      	str	r1, [sp, #12]
    344c:	9302      	str	r3, [sp, #8]
    344e:	0018      	movs	r0, r3
    3450:	47b0      	blx	r6
    v2sub1271(P->y, P->x, Q->yx);                // QY = Y-X 
    3452:	0022      	movs	r2, r4
    3454:	3228      	adds	r2, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    3456:	0029      	movs	r1, r5
    3458:	0038      	movs	r0, r7
    345a:	4f11      	ldr	r7, [pc, #68]	; (34a0 <R1_to_R2+0xa0>)
    345c:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    345e:	0022      	movs	r2, r4
    3460:	323c      	adds	r2, #60	; 0x3c
    3462:	9902      	ldr	r1, [sp, #8]
    3464:	9803      	ldr	r0, [sp, #12]
    3466:	47b8      	blx	r7
    v2mul1271(Q->t2, P->tb, Q->t2);              // T = 2*T
    3468:	0029      	movs	r1, r5
    346a:	31a0      	adds	r1, #160	; 0xa0
    346c:	9801      	ldr	r0, [sp, #4]
    346e:	0002      	movs	r2, r0
    3470:	4f0c      	ldr	r7, [pc, #48]	; (34a4 <R1_to_R2+0xa4>)
    3472:	47b8      	blx	r7
    v2add1271(P->z, P->z, Q->z2);                // QZ = 2*Z
    3474:	002a      	movs	r2, r5
    3476:	3250      	adds	r2, #80	; 0x50
    3478:	0010      	movs	r0, r2
    347a:	0022      	movs	r2, r4
    347c:	3250      	adds	r2, #80	; 0x50
    vadd1271(&a[0], &b[0], &c[0]);
    347e:	0001      	movs	r1, r0
    3480:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3482:	3564      	adds	r5, #100	; 0x64
    3484:	0028      	movs	r0, r5
    3486:	0022      	movs	r2, r4
    3488:	3264      	adds	r2, #100	; 0x64
    348a:	0029      	movs	r1, r5
    348c:	47b0      	blx	r6
    v2mul1271(Q->t2, (digit_t*)&PARAMETER_d, Q->t2);       // QT = 2d*T
    348e:	9801      	ldr	r0, [sp, #4]
    3490:	0002      	movs	r2, r0
    3492:	4905      	ldr	r1, [pc, #20]	; (34a8 <R1_to_R2+0xa8>)
    3494:	47b8      	blx	r7
}
    3496:	b005      	add	sp, #20
    3498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	00001fc7 	.word	0x00001fc7
    34a0:	00002003 	.word	0x00002003
    34a4:	00003285 	.word	0x00003285
    34a8:	000092f0 	.word	0x000092f0

000034ac <R1_to_R3>:


void R1_to_R3(vpoint_extproj_t P, vpoint_extproj_precomp_t Q)      
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T), where T = Ta*Tb 
    34ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ae:	b083      	sub	sp, #12
    34b0:	0004      	movs	r4, r0
    34b2:	000d      	movs	r5, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,Z1,T1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates 
    
    v2add1271(P->x, P->y, Q->xy);            // XQ = (X1+Y1) 
    34b4:	0007      	movs	r7, r0
    34b6:	3728      	adds	r7, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    34b8:	000a      	movs	r2, r1
    34ba:	0039      	movs	r1, r7
    34bc:	4e15      	ldr	r6, [pc, #84]	; (3514 <R1_to_R3+0x68>)
    34be:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    34c0:	2314      	movs	r3, #20
    34c2:	469c      	mov	ip, r3
    34c4:	44a4      	add	ip, r4
    34c6:	4663      	mov	r3, ip
    34c8:	223c      	movs	r2, #60	; 0x3c
    34ca:	4694      	mov	ip, r2
    34cc:	44a4      	add	ip, r4
    34ce:	4661      	mov	r1, ip
    34d0:	002a      	movs	r2, r5
    34d2:	3214      	adds	r2, #20
    34d4:	9101      	str	r1, [sp, #4]
    34d6:	9300      	str	r3, [sp, #0]
    34d8:	0018      	movs	r0, r3
    34da:	47b0      	blx	r6
    v2sub1271(P->y, P->x, Q->yx);            // YQ = (Y1-X1) 
    34dc:	002a      	movs	r2, r5
    34de:	3228      	adds	r2, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    34e0:	0021      	movs	r1, r4
    34e2:	0038      	movs	r0, r7
    34e4:	4f0c      	ldr	r7, [pc, #48]	; (3518 <R1_to_R3+0x6c>)
    34e6:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    34e8:	002a      	movs	r2, r5
    34ea:	323c      	adds	r2, #60	; 0x3c
    34ec:	9900      	ldr	r1, [sp, #0]
    34ee:	9801      	ldr	r0, [sp, #4]
    34f0:	47b8      	blx	r7
    v2mul1271(P->ta, P->tb, Q->t2);          // TQ = T1
    34f2:	002a      	movs	r2, r5
    34f4:	3278      	adds	r2, #120	; 0x78
    34f6:	0021      	movs	r1, r4
    34f8:	31a0      	adds	r1, #160	; 0xa0
    34fa:	0020      	movs	r0, r4
    34fc:	3078      	adds	r0, #120	; 0x78
    34fe:	4b07      	ldr	r3, [pc, #28]	; (351c <R1_to_R3+0x70>)
    3500:	4798      	blx	r3
    v2copy1271(P->z, Q->z2);                 // ZQ = Z1 
    3502:	0029      	movs	r1, r5
    3504:	3150      	adds	r1, #80	; 0x50
    3506:	0020      	movs	r0, r4
    3508:	3050      	adds	r0, #80	; 0x50
    350a:	4b05      	ldr	r3, [pc, #20]	; (3520 <R1_to_R3+0x74>)
    350c:	4798      	blx	r3
}
    350e:	b003      	add	sp, #12
    3510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3512:	46c0      	nop			; (mov r8, r8)
    3514:	00001fc7 	.word	0x00001fc7
    3518:	00002003 	.word	0x00002003
    351c:	00003285 	.word	0x00003285
    3520:	00002be7 	.word	0x00002be7

00003524 <R2_to_R4>:


void R2_to_R4(vpoint_extproj_precomp_t P, vpoint_extproj_t Q)      
{ // Conversion from representation (X+Y,Y-X,2Z,2dT) to (2X,2Y,2Z,2dT) 
    3524:	b5f0      	push	{r4, r5, r6, r7, lr}
    3526:	b083      	sub	sp, #12
    3528:	0006      	movs	r6, r0
    352a:	000d      	movs	r5, r1
  // Input:  P = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (2X1,2Y1,2Z1) corresponding to (X1:Y1:Z1) in twisted Edwards coordinates 
    
    v2sub1271(P->xy, P->yx, Q->x);           // XQ = 2*X1
    352c:	0007      	movs	r7, r0
    352e:	3728      	adds	r7, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    3530:	000a      	movs	r2, r1
    3532:	0039      	movs	r1, r7
    3534:	4c15      	ldr	r4, [pc, #84]	; (358c <R2_to_R4+0x68>)
    3536:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3538:	2314      	movs	r3, #20
    353a:	469c      	mov	ip, r3
    353c:	44b4      	add	ip, r6
    353e:	4663      	mov	r3, ip
    3540:	223c      	movs	r2, #60	; 0x3c
    3542:	4694      	mov	ip, r2
    3544:	44b4      	add	ip, r6
    3546:	4661      	mov	r1, ip
    3548:	002a      	movs	r2, r5
    354a:	3214      	adds	r2, #20
    354c:	9101      	str	r1, [sp, #4]
    354e:	9300      	str	r3, [sp, #0]
    3550:	0018      	movs	r0, r3
    3552:	47a0      	blx	r4
    v2add1271(P->xy, P->yx, Q->y);           // YQ = 2*Y1
    3554:	002c      	movs	r4, r5
    3556:	3428      	adds	r4, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    3558:	0022      	movs	r2, r4
    355a:	0039      	movs	r1, r7
    355c:	0030      	movs	r0, r6
    355e:	4f0c      	ldr	r7, [pc, #48]	; (3590 <R2_to_R4+0x6c>)
    3560:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3562:	002a      	movs	r2, r5
    3564:	323c      	adds	r2, #60	; 0x3c
    3566:	9901      	ldr	r1, [sp, #4]
    3568:	9800      	ldr	r0, [sp, #0]
    356a:	47b8      	blx	r7
    v2copy1271(P->z2, Q->z);                 // ZQ = 2*Z1
    356c:	0029      	movs	r1, r5
    356e:	3150      	adds	r1, #80	; 0x50
    3570:	0030      	movs	r0, r6
    3572:	3050      	adds	r0, #80	; 0x50
    3574:	4b07      	ldr	r3, [pc, #28]	; (3594 <R2_to_R4+0x70>)
    3576:	4798      	blx	r3
    v2mod1271_incomplete(Q->x, Q->x);   
    3578:	0029      	movs	r1, r5
    357a:	0028      	movs	r0, r5
    357c:	4d06      	ldr	r5, [pc, #24]	; (3598 <R2_to_R4+0x74>)
    357e:	47a8      	blx	r5
    v2mod1271_incomplete(Q->y, Q->y);   
    3580:	0021      	movs	r1, r4
    3582:	0020      	movs	r0, r4
    3584:	47a8      	blx	r5
}
    3586:	b003      	add	sp, #12
    3588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    358a:	46c0      	nop			; (mov r8, r8)
    358c:	00002003 	.word	0x00002003
    3590:	00001fc7 	.word	0x00001fc7
    3594:	00002be7 	.word	0x00002be7
    3598:	0000324d 	.word	0x0000324d

0000359c <eccdouble>:


void eccdouble(vpoint_extproj_t P)
{ // Point doubling 2P
    359c:	b5f0      	push	{r4, r5, r6, r7, lr}
    359e:	b099      	sub	sp, #100	; 0x64
    35a0:	0007      	movs	r7, r0
  // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates
  // Output: 2P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    v2elm_t t1, t2; 
  
    v2sqr1271(P->x, t1);                              // t1 = X1^2 
    35a2:	a90e      	add	r1, sp, #56	; 0x38
    35a4:	4e2f      	ldr	r6, [pc, #188]	; (3664 <eccdouble+0xc8>)
    35a6:	47b0      	blx	r6
    v2sqr1271(P->y, t2);                              // t2 = Y1^2
    35a8:	2328      	movs	r3, #40	; 0x28
    35aa:	469c      	mov	ip, r3
    35ac:	44bc      	add	ip, r7
    35ae:	4663      	mov	r3, ip
    35b0:	4664      	mov	r4, ip
    35b2:	a904      	add	r1, sp, #16
    35b4:	0018      	movs	r0, r3
    35b6:	47b0      	blx	r6
    vadd1271(&a[0], &b[0], &c[0]);
    35b8:	003a      	movs	r2, r7
    35ba:	9400      	str	r4, [sp, #0]
    35bc:	0021      	movs	r1, r4
    35be:	0038      	movs	r0, r7
    35c0:	4c29      	ldr	r4, [pc, #164]	; (3668 <eccdouble+0xcc>)
    35c2:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    35c4:	0038      	movs	r0, r7
    35c6:	3014      	adds	r0, #20
    35c8:	0039      	movs	r1, r7
    35ca:	313c      	adds	r1, #60	; 0x3c
    35cc:	0002      	movs	r2, r0
    35ce:	47a0      	blx	r4
    v2add1271(P->x, P->y, P->x);                      // X = X1+Y1
    v2add1271(t1, t2, P->tb);                         // Tbfinal = X1^2+Y1^2 
    35d0:	23a0      	movs	r3, #160	; 0xa0
    35d2:	469c      	mov	ip, r3
    35d4:	44bc      	add	ip, r7
    35d6:	4663      	mov	r3, ip
    vadd1271(&a[0], &b[0], &c[0]);
    35d8:	9301      	str	r3, [sp, #4]
    35da:	4662      	mov	r2, ip
    35dc:	a904      	add	r1, sp, #16
    35de:	a80e      	add	r0, sp, #56	; 0x38
    35e0:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    35e2:	21b4      	movs	r1, #180	; 0xb4
    35e4:	468c      	mov	ip, r1
    35e6:	44bc      	add	ip, r7
    35e8:	4661      	mov	r1, ip
    35ea:	9103      	str	r1, [sp, #12]
    35ec:	4662      	mov	r2, ip
    35ee:	a809      	add	r0, sp, #36	; 0x24
    35f0:	0001      	movs	r1, r0
    35f2:	a813      	add	r0, sp, #76	; 0x4c
    35f4:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    35f6:	aa0e      	add	r2, sp, #56	; 0x38
    35f8:	0011      	movs	r1, r2
    35fa:	a804      	add	r0, sp, #16
    35fc:	4d1b      	ldr	r5, [pc, #108]	; (366c <eccdouble+0xd0>)
    35fe:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3600:	aa13      	add	r2, sp, #76	; 0x4c
    3602:	0011      	movs	r1, r2
    3604:	a809      	add	r0, sp, #36	; 0x24
    3606:	47a8      	blx	r5
    v2sub1271(t2, t1, t1);                            // t1 = Y1^2-X1^2 
    v2sqr1271(P->z, t2);                              // t2 = Z1^2 
    3608:	2050      	movs	r0, #80	; 0x50
    360a:	4684      	mov	ip, r0
    360c:	44bc      	add	ip, r7
    360e:	4660      	mov	r0, ip
    3610:	a904      	add	r1, sp, #16
    3612:	9002      	str	r0, [sp, #8]
    3614:	47b0      	blx	r6
    v2sqr1271(P->x, P->ta);                           // Ta = (X1+Y1)^2 
    3616:	003c      	movs	r4, r7
    3618:	3478      	adds	r4, #120	; 0x78
    361a:	0021      	movs	r1, r4
    361c:	0038      	movs	r0, r7
    361e:	47b0      	blx	r6
    v2dblsub1271(t2, t1, t2);                         // t2 = 2Z1^2-(Y1^2-X1^2)
    3620:	aa04      	add	r2, sp, #16
    3622:	ae0e      	add	r6, sp, #56	; 0x38
    3624:	0031      	movs	r1, r6
    3626:	0010      	movs	r0, r2
    3628:	4b11      	ldr	r3, [pc, #68]	; (3670 <eccdouble+0xd4>)
    362a:	4798      	blx	r3
    vsub1271(&a[0], &b[0], &c[0]);
    362c:	0022      	movs	r2, r4
    362e:	9e01      	ldr	r6, [sp, #4]
    3630:	0031      	movs	r1, r6
    3632:	0020      	movs	r0, r4
    3634:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3636:	003b      	movs	r3, r7
    3638:	338c      	adds	r3, #140	; 0x8c
    363a:	0018      	movs	r0, r3
    363c:	001a      	movs	r2, r3
    363e:	9903      	ldr	r1, [sp, #12]
    3640:	47a8      	blx	r5
    v2sub1271(P->ta, P->tb, P->ta);                   // Tafinal = 2X1*Y1 = (X1+Y1)^2-(X1^2+Y1^2)
    v2mul1271(t1, P->tb, P->y);                       // Yfinal = (X1^2+Y1^2)(Y1^2-X1^2) 
    3642:	9a00      	ldr	r2, [sp, #0]
    3644:	0031      	movs	r1, r6
    3646:	ab0e      	add	r3, sp, #56	; 0x38
    3648:	0018      	movs	r0, r3
    364a:	4d0a      	ldr	r5, [pc, #40]	; (3674 <eccdouble+0xd8>)
    364c:	47a8      	blx	r5
    v2mul1271(t2, P->ta, P->x);                       // Xfinal = 2X1*Y1*[2Z1^2-(Y1^2-X1^2)]
    364e:	003a      	movs	r2, r7
    3650:	0021      	movs	r1, r4
    3652:	a804      	add	r0, sp, #16
    3654:	47a8      	blx	r5
    v2mul1271(t1, t2, P->z);                          // Zfinal = (Y1^2-X1^2)[2Z1^2-(Y1^2-X1^2)] 
    3656:	9a02      	ldr	r2, [sp, #8]
    3658:	a904      	add	r1, sp, #16
    365a:	a80e      	add	r0, sp, #56	; 0x38
    365c:	47a8      	blx	r5
}
    365e:	b019      	add	sp, #100	; 0x64
    3660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3662:	46c0      	nop			; (mov r8, r8)
    3664:	000032f9 	.word	0x000032f9
    3668:	00001fc7 	.word	0x00001fc7
    366c:	00002003 	.word	0x00002003
    3670:	000030e5 	.word	0x000030e5
    3674:	00003285 	.word	0x00003285

00003678 <eccadd_core>:


__inline void eccadd_core(vpoint_extproj_precomp_t P, vpoint_extproj_precomp_t Q, vpoint_extproj_t R)      
{ // Basic point addition R = P+Q or R = P+P
    3678:	b5f0      	push	{r4, r5, r6, r7, lr}
    367a:	b09b      	sub	sp, #108	; 0x6c
    367c:	0006      	movs	r6, r0
    367e:	000f      	movs	r7, r1
    3680:	0015      	movs	r5, r2
  //         Q = (X2+Y2,Y2-X2,Z2,T2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates    
  // Output: R = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    v2elm_t t1, t2; 
          
    v2mul1271(P->t2, Q->t2, R->z);                            // Z = 2dT1*T2 
    3682:	2350      	movs	r3, #80	; 0x50
    3684:	469c      	mov	ip, r3
    3686:	4494      	add	ip, r2
    3688:	4663      	mov	r3, ip
    368a:	3178      	adds	r1, #120	; 0x78
    368c:	3078      	adds	r0, #120	; 0x78
    368e:	9301      	str	r3, [sp, #4]
    3690:	4662      	mov	r2, ip
    3692:	4c2f      	ldr	r4, [pc, #188]	; (3750 <eccadd_core+0xd8>)
    3694:	47a0      	blx	r4
    v2mul1271(P->z2, Q->z2, t1);                              // t1 = 2Z1*Z2 
    3696:	0039      	movs	r1, r7
    3698:	3150      	adds	r1, #80	; 0x50
    369a:	0030      	movs	r0, r6
    369c:	3050      	adds	r0, #80	; 0x50
    369e:	aa10      	add	r2, sp, #64	; 0x40
    36a0:	47a0      	blx	r4
    v2mul1271(P->xy, Q->xy, R->x);                            // X = (X1+Y1)(X2+Y2)
    36a2:	002a      	movs	r2, r5
    36a4:	0039      	movs	r1, r7
    36a6:	0030      	movs	r0, r6
    36a8:	47a0      	blx	r4
    v2mul1271(P->yx, Q->yx, R->y);                            // Y = (Y1-X1)(Y2-X2)
    36aa:	2228      	movs	r2, #40	; 0x28
    36ac:	4694      	mov	ip, r2
    36ae:	44ac      	add	ip, r5
    36b0:	4662      	mov	r2, ip
    36b2:	0039      	movs	r1, r7
    36b4:	3128      	adds	r1, #40	; 0x28
    36b6:	0030      	movs	r0, r6
    36b8:	3028      	adds	r0, #40	; 0x28
    36ba:	9202      	str	r2, [sp, #8]
    36bc:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    36be:	aa06      	add	r2, sp, #24
    36c0:	9f01      	ldr	r7, [sp, #4]
    36c2:	0039      	movs	r1, r7
    36c4:	a810      	add	r0, sp, #64	; 0x40
    36c6:	4e23      	ldr	r6, [pc, #140]	; (3754 <eccadd_core+0xdc>)
    36c8:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    36ca:	2364      	movs	r3, #100	; 0x64
    36cc:	469c      	mov	ip, r3
    36ce:	44ac      	add	ip, r5
    36d0:	4663      	mov	r3, ip
    36d2:	aa0b      	add	r2, sp, #44	; 0x2c
    36d4:	9303      	str	r3, [sp, #12]
    36d6:	4661      	mov	r1, ip
    36d8:	a815      	add	r0, sp, #84	; 0x54
    36da:	47b0      	blx	r6
    vadd1271(&a[0], &b[0], &c[0]);
    36dc:	a810      	add	r0, sp, #64	; 0x40
    36de:	0002      	movs	r2, r0
    36e0:	9701      	str	r7, [sp, #4]
    36e2:	0039      	movs	r1, r7
    36e4:	4f1c      	ldr	r7, [pc, #112]	; (3758 <eccadd_core+0xe0>)
    36e6:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    36e8:	a815      	add	r0, sp, #84	; 0x54
    36ea:	0002      	movs	r2, r0
    36ec:	9903      	ldr	r1, [sp, #12]
    36ee:	47b8      	blx	r7
    v2sub1271(t1, R->z, t2);                                  // t2 = theta
    v2add1271(t1, R->z, t1);                                  // t1 = alpha
    v2sub1271(R->x, R->y, R->tb);                             // Tbfinal = beta
    36f0:	23a0      	movs	r3, #160	; 0xa0
    36f2:	469c      	mov	ip, r3
    36f4:	44ac      	add	ip, r5
    36f6:	4663      	mov	r3, ip
    vsub1271(&a[0], &b[0], &c[0]);
    36f8:	9303      	str	r3, [sp, #12]
    36fa:	4662      	mov	r2, ip
    36fc:	9902      	ldr	r1, [sp, #8]
    36fe:	0028      	movs	r0, r5
    3700:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3702:	2114      	movs	r1, #20
    3704:	468c      	mov	ip, r1
    3706:	44ac      	add	ip, r5
    3708:	4660      	mov	r0, ip
    370a:	213c      	movs	r1, #60	; 0x3c
    370c:	468c      	mov	ip, r1
    370e:	44ac      	add	ip, r5
    3710:	4661      	mov	r1, ip
    3712:	002a      	movs	r2, r5
    3714:	32b4      	adds	r2, #180	; 0xb4
    3716:	9105      	str	r1, [sp, #20]
    3718:	9004      	str	r0, [sp, #16]
    371a:	47b0      	blx	r6
    v2add1271(R->x, R->y, R->ta);                             // Tafinal = omega
    371c:	002e      	movs	r6, r5
    371e:	3678      	adds	r6, #120	; 0x78
    vadd1271(&a[0], &b[0], &c[0]);
    3720:	0032      	movs	r2, r6
    3722:	9902      	ldr	r1, [sp, #8]
    3724:	0028      	movs	r0, r5
    3726:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3728:	002a      	movs	r2, r5
    372a:	328c      	adds	r2, #140	; 0x8c
    372c:	9905      	ldr	r1, [sp, #20]
    372e:	9804      	ldr	r0, [sp, #16]
    3730:	47b8      	blx	r7
    v2mul1271(R->tb, t2, R->x);                               // Xfinal = beta*theta
    3732:	002a      	movs	r2, r5
    3734:	a906      	add	r1, sp, #24
    3736:	9803      	ldr	r0, [sp, #12]
    3738:	47a0      	blx	r4
    v2mul1271(t1, t2, R->z);                                  // Zfinal = theta*alpha
    373a:	9a01      	ldr	r2, [sp, #4]
    373c:	a906      	add	r1, sp, #24
    373e:	a810      	add	r0, sp, #64	; 0x40
    3740:	47a0      	blx	r4
    v2mul1271(R->ta, t1, R->y);                               // Yfinal = alpha*omega
    3742:	9a02      	ldr	r2, [sp, #8]
    3744:	a910      	add	r1, sp, #64	; 0x40
    3746:	0030      	movs	r0, r6
    3748:	47a0      	blx	r4
}
    374a:	b01b      	add	sp, #108	; 0x6c
    374c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    374e:	46c0      	nop			; (mov r8, r8)
    3750:	00003285 	.word	0x00003285
    3754:	00002003 	.word	0x00002003
    3758:	00001fc7 	.word	0x00001fc7

0000375c <eccadd>:


void eccadd(vpoint_extproj_precomp_t Q, vpoint_extproj_t P)      
{ // Complete point addition P = P+Q or P = P+P
    375c:	b5f0      	push	{r4, r5, r6, r7, lr}
    375e:	46de      	mov	lr, fp
    3760:	b500      	push	{lr}
    3762:	b0ae      	sub	sp, #184	; 0xb8
    3764:	0007      	movs	r7, r0
    3766:	000d      	movs	r5, r1
  // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal, 
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    vpoint_precomp_t R;
    v2elm_t t1; 

    v2add1271(P->y, P->x, R->xy);            // XR = (X1+Y1)
    3768:	2328      	movs	r3, #40	; 0x28
    376a:	469c      	mov	ip, r3
    376c:	448c      	add	ip, r1
    376e:	4663      	mov	r3, ip
    3770:	4666      	mov	r6, ip
    vadd1271(&a[0], &b[0], &c[0]);
    3772:	aa10      	add	r2, sp, #64	; 0x40
    3774:	0018      	movs	r0, r3
    3776:	4c3a      	ldr	r4, [pc, #232]	; (3860 <eccadd+0x104>)
    3778:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    377a:	233c      	movs	r3, #60	; 0x3c
    377c:	469c      	mov	ip, r3
    377e:	44ac      	add	ip, r5
    3780:	4663      	mov	r3, ip
    3782:	2214      	movs	r2, #20
    3784:	4694      	mov	ip, r2
    3786:	44ac      	add	ip, r5
    3788:	4661      	mov	r1, ip
    378a:	aa15      	add	r2, sp, #84	; 0x54
    378c:	9102      	str	r1, [sp, #8]
    378e:	9301      	str	r3, [sp, #4]
    3790:	0018      	movs	r0, r3
    3792:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    3794:	aa1a      	add	r2, sp, #104	; 0x68
    3796:	0029      	movs	r1, r5
    3798:	9603      	str	r6, [sp, #12]
    379a:	0030      	movs	r0, r6
    379c:	4e31      	ldr	r6, [pc, #196]	; (3864 <eccadd+0x108>)
    379e:	46b3      	mov	fp, r6
    37a0:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    37a2:	aa1f      	add	r2, sp, #124	; 0x7c
    37a4:	9902      	ldr	r1, [sp, #8]
    37a6:	9801      	ldr	r0, [sp, #4]
    37a8:	47b0      	blx	r6
    v2sub1271(P->y, P->x, R->yx);            // YR = (Y1-X1)
    v2mul1271(P->ta, P->tb, R->t2);          // TR = T1 
    37aa:	2078      	movs	r0, #120	; 0x78
    37ac:	4684      	mov	ip, r0
    37ae:	44ac      	add	ip, r5
    37b0:	4660      	mov	r0, ip
    37b2:	22a0      	movs	r2, #160	; 0xa0
    37b4:	4694      	mov	ip, r2
    37b6:	44ac      	add	ip, r5
    37b8:	4661      	mov	r1, ip
    37ba:	aa24      	add	r2, sp, #144	; 0x90
    37bc:	9105      	str	r1, [sp, #20]
    37be:	9004      	str	r0, [sp, #16]
    37c0:	4e29      	ldr	r6, [pc, #164]	; (3868 <eccadd+0x10c>)
    37c2:	47b0      	blx	r6
    v2mul1271(Q->z2, P->z, t1);              // t1 = 2Z1*Z2      
    37c4:	2350      	movs	r3, #80	; 0x50
    37c6:	469c      	mov	ip, r3
    37c8:	44ac      	add	ip, r5
    37ca:	4663      	mov	r3, ip
    37cc:	0038      	movs	r0, r7
    37ce:	3050      	adds	r0, #80	; 0x50
    37d0:	aa06      	add	r2, sp, #24
    37d2:	9300      	str	r3, [sp, #0]
    37d4:	4661      	mov	r1, ip
    37d6:	47b0      	blx	r6
    v2mul1271(Q->t2, R->t2, P->z);           // Z = 2dT1*T2 
    37d8:	0038      	movs	r0, r7
    37da:	3078      	adds	r0, #120	; 0x78
    37dc:	9a00      	ldr	r2, [sp, #0]
    37de:	a924      	add	r1, sp, #144	; 0x90
    37e0:	47b0      	blx	r6
    v2mul1271(Q->xy, R->xy, P->x);           // X = (X1+Y1)(X2+Y2)
    37e2:	002a      	movs	r2, r5
    37e4:	a910      	add	r1, sp, #64	; 0x40
    37e6:	0038      	movs	r0, r7
    37e8:	47b0      	blx	r6
    v2mul1271(Q->yx, R->yx, P->y);           // Y = (Y1-X1)(Y2-X2)
    37ea:	3728      	adds	r7, #40	; 0x28
    37ec:	0038      	movs	r0, r7
    37ee:	9a03      	ldr	r2, [sp, #12]
    37f0:	a91a      	add	r1, sp, #104	; 0x68
    37f2:	47b0      	blx	r6
    vsub1271(&a[0], &b[0], &c[0]);
    37f4:	aa24      	add	r2, sp, #144	; 0x90
    37f6:	9900      	ldr	r1, [sp, #0]
    37f8:	a806      	add	r0, sp, #24
    37fa:	47d8      	blx	fp
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    37fc:	002f      	movs	r7, r5
    37fe:	3764      	adds	r7, #100	; 0x64
    3800:	aa29      	add	r2, sp, #164	; 0xa4
    3802:	0039      	movs	r1, r7
    3804:	a80b      	add	r0, sp, #44	; 0x2c
    3806:	47d8      	blx	fp
    vadd1271(&a[0], &b[0], &c[0]);
    3808:	aa06      	add	r2, sp, #24
    380a:	9900      	ldr	r1, [sp, #0]
    380c:	0010      	movs	r0, r2
    380e:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3810:	aa0b      	add	r2, sp, #44	; 0x2c
    3812:	0039      	movs	r1, r7
    3814:	0010      	movs	r0, r2
    3816:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    3818:	9a05      	ldr	r2, [sp, #20]
    381a:	9f03      	ldr	r7, [sp, #12]
    381c:	0039      	movs	r1, r7
    381e:	0028      	movs	r0, r5
    3820:	47d8      	blx	fp
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3822:	002a      	movs	r2, r5
    3824:	32b4      	adds	r2, #180	; 0xb4
    3826:	9901      	ldr	r1, [sp, #4]
    3828:	9802      	ldr	r0, [sp, #8]
    382a:	47d8      	blx	fp
    vadd1271(&a[0], &b[0], &c[0]);
    382c:	9a04      	ldr	r2, [sp, #16]
    382e:	0039      	movs	r1, r7
    3830:	0028      	movs	r0, r5
    3832:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3834:	002a      	movs	r2, r5
    3836:	328c      	adds	r2, #140	; 0x8c
    3838:	9901      	ldr	r1, [sp, #4]
    383a:	9802      	ldr	r0, [sp, #8]
    383c:	47a0      	blx	r4
    v2sub1271(t1, P->z, R->t2);              // TR = theta
    v2add1271(t1, P->z, t1);                 // t1 = alpha
    v2sub1271(P->x, P->y, P->tb);            // Tbfinal = beta
    v2add1271(P->x, P->y, P->ta);            // Tafinal = omega
    v2mul1271(P->tb, R->t2, P->x);           // Xfinal = beta*theta
    383e:	002a      	movs	r2, r5
    3840:	a924      	add	r1, sp, #144	; 0x90
    3842:	9805      	ldr	r0, [sp, #20]
    3844:	47b0      	blx	r6
    v2mul1271(t1, R->t2, P->z);              // Zfinal = theta*alpha
    3846:	9a00      	ldr	r2, [sp, #0]
    3848:	a924      	add	r1, sp, #144	; 0x90
    384a:	a806      	add	r0, sp, #24
    384c:	47b0      	blx	r6
    v2mul1271(P->ta, t1, P->y);              // Yfinal = alpha*omega
    384e:	003a      	movs	r2, r7
    3850:	a906      	add	r1, sp, #24
    3852:	9804      	ldr	r0, [sp, #16]
    3854:	47b0      	blx	r6
}
    3856:	b02e      	add	sp, #184	; 0xb8
    3858:	bc04      	pop	{r2}
    385a:	4693      	mov	fp, r2
    385c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    385e:	46c0      	nop			; (mov r8, r8)
    3860:	00001fc7 	.word	0x00001fc7
    3864:	00002003 	.word	0x00002003
    3868:	00003285 	.word	0x00003285

0000386c <point_setup>:


void point_setup(point_t P, vpoint_extproj_t Q)
{ // Point conversion to vectorized representation (X,Y,Z,Ta,Tb) 
    386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    386e:	0005      	movs	r5, r0
    3870:	000c      	movs	r4, r1
  // Input: P = (x,y) in affine coordinates
  // Output: P = (X,Y,1,Ta,Tb), where Ta=X, Tb=Y and T=Ta*Tb, corresponding to (X:Y:Z:T) in extended twisted Edwards coordinates

    from_std_to_ext(P->x, Q->x);
    3872:	4f0c      	ldr	r7, [pc, #48]	; (38a4 <point_setup+0x38>)
    3874:	47b8      	blx	r7
    from_std_to_ext(P->y, Q->y);
    3876:	0026      	movs	r6, r4
    3878:	3628      	adds	r6, #40	; 0x28
    387a:	0028      	movs	r0, r5
    387c:	3020      	adds	r0, #32
    387e:	0031      	movs	r1, r6
    3880:	47b8      	blx	r7
    v2copy1271(Q->x, Q->ta);              // Ta = X1
    3882:	0021      	movs	r1, r4
    3884:	3178      	adds	r1, #120	; 0x78
    3886:	0020      	movs	r0, r4
    3888:	4d07      	ldr	r5, [pc, #28]	; (38a8 <point_setup+0x3c>)
    388a:	47a8      	blx	r5
    v2copy1271(Q->y, Q->tb);              // Tb = Y1
    388c:	0021      	movs	r1, r4
    388e:	31a0      	adds	r1, #160	; 0xa0
    3890:	0030      	movs	r0, r6
    3892:	47a8      	blx	r5
    v2zero1271(Q->z); Q->z[0]=1;          // Z1 = 1
    3894:	0020      	movs	r0, r4
    3896:	3050      	adds	r0, #80	; 0x50
    3898:	4b04      	ldr	r3, [pc, #16]	; (38ac <point_setup+0x40>)
    389a:	4798      	blx	r3
    389c:	2301      	movs	r3, #1
    389e:	6523      	str	r3, [r4, #80]	; 0x50
}
    38a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	00002841 	.word	0x00002841
    38a8:	00002be7 	.word	0x00002be7
    38ac:	0000308d 	.word	0x0000308d

000038b0 <ecc_point_validate>:


bool ecc_point_validate(vpoint_extproj_t P)
{ // Point validation: check if point lies on the curve
    38b0:	b530      	push	{r4, r5, lr}
    38b2:	b09f      	sub	sp, #124	; 0x7c
    38b4:	0005      	movs	r5, r0
  // Output: TRUE (1) if point lies on the curve E: -x^2+y^2-1-dx^2*y^2 = 0, FALSE (0) otherwise.
  // SECURITY NOTE: this function does not run in constant time (input point P is assumed to be public).
    v2elm_t t1, t2, t3;
    unsigned int i;

    v2sqr1271(P->y, t1);  
    38b6:	3028      	adds	r0, #40	; 0x28
    38b8:	a914      	add	r1, sp, #80	; 0x50
    38ba:	4c21      	ldr	r4, [pc, #132]	; (3940 <ecc_point_validate+0x90>)
    38bc:	47a0      	blx	r4
    v2sqr1271(P->x, t2);
    38be:	a90a      	add	r1, sp, #40	; 0x28
    38c0:	0028      	movs	r0, r5
    38c2:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    38c4:	466a      	mov	r2, sp
    38c6:	a90a      	add	r1, sp, #40	; 0x28
    38c8:	a814      	add	r0, sp, #80	; 0x50
    38ca:	4c1e      	ldr	r4, [pc, #120]	; (3944 <ecc_point_validate+0x94>)
    38cc:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    38ce:	aa05      	add	r2, sp, #20
    38d0:	a90f      	add	r1, sp, #60	; 0x3c
    38d2:	a819      	add	r0, sp, #100	; 0x64
    38d4:	47a0      	blx	r4
    v2sub1271(t1, t2, t3);                    // -x^2 + y^2 
    v2mul1271(t1, t2, t1);                    // x^2*y^2
    38d6:	aa14      	add	r2, sp, #80	; 0x50
    38d8:	a90a      	add	r1, sp, #40	; 0x28
    38da:	0010      	movs	r0, r2
    38dc:	4d1a      	ldr	r5, [pc, #104]	; (3948 <ecc_point_validate+0x98>)
    38de:	47a8      	blx	r5
    v2mul1271((digit_t*)&PARAMETER_d, t1, t2);          // dx^2*y^2
    38e0:	aa0a      	add	r2, sp, #40	; 0x28
    38e2:	a914      	add	r1, sp, #80	; 0x50
    38e4:	4819      	ldr	r0, [pc, #100]	; (394c <ecc_point_validate+0x9c>)
    38e6:	47a8      	blx	r5
    v2zero1271(t1);  t1[0] = 1;               // t1 = 1
    38e8:	a814      	add	r0, sp, #80	; 0x50
    38ea:	4b19      	ldr	r3, [pc, #100]	; (3950 <ecc_point_validate+0xa0>)
    38ec:	4798      	blx	r3
    38ee:	2301      	movs	r3, #1
    38f0:	9314      	str	r3, [sp, #80]	; 0x50
    vadd1271(&a[0], &b[0], &c[0]);
    38f2:	aa0a      	add	r2, sp, #40	; 0x28
    38f4:	a914      	add	r1, sp, #80	; 0x50
    38f6:	0010      	movs	r0, r2
    38f8:	4d16      	ldr	r5, [pc, #88]	; (3954 <ecc_point_validate+0xa4>)
    38fa:	47a8      	blx	r5
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    38fc:	aa0f      	add	r2, sp, #60	; 0x3c
    38fe:	a919      	add	r1, sp, #100	; 0x64
    3900:	0010      	movs	r0, r2
    3902:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    3904:	aa14      	add	r2, sp, #80	; 0x50
    3906:	a90a      	add	r1, sp, #40	; 0x28
    3908:	4668      	mov	r0, sp
    390a:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    390c:	aa19      	add	r2, sp, #100	; 0x64
    390e:	a90f      	add	r1, sp, #60	; 0x3c
    3910:	a805      	add	r0, sp, #20
    3912:	47a0      	blx	r4
    v2add1271(t2, t1, t2);                    // 1 + dx^2*y^2
    v2sub1271(t3, t2, t1);                    // -x^2 + y^2 - 1 - dx^2*y^2
    v2mod1271(t1, t1);
    3914:	a914      	add	r1, sp, #80	; 0x50
    3916:	0008      	movs	r0, r1
    3918:	4b0f      	ldr	r3, [pc, #60]	; (3958 <ecc_point_validate+0xa8>)
    391a:	4798      	blx	r3
    
    for (i = 0; i < 2*VWORDS_FIELD-1; i++) {
        if (t1[i] != 0) return false;
    391c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    391e:	2b00      	cmp	r3, #0
    3920:	d10a      	bne.n	3938 <ecc_point_validate+0x88>
    3922:	ab14      	add	r3, sp, #80	; 0x50
    3924:	aa1c      	add	r2, sp, #112	; 0x70
    3926:	6859      	ldr	r1, [r3, #4]
    3928:	2900      	cmp	r1, #0
    392a:	d107      	bne.n	393c <ecc_point_validate+0x8c>
    392c:	3304      	adds	r3, #4
    for (i = 0; i < 2*VWORDS_FIELD-1; i++) {
    392e:	4293      	cmp	r3, r2
    3930:	d1f9      	bne.n	3926 <ecc_point_validate+0x76>
    }
    return true; 
    3932:	2001      	movs	r0, #1
}
    3934:	b01f      	add	sp, #124	; 0x7c
    3936:	bd30      	pop	{r4, r5, pc}
        if (t1[i] != 0) return false;
    3938:	2000      	movs	r0, #0
    393a:	e7fb      	b.n	3934 <ecc_point_validate+0x84>
    393c:	2000      	movs	r0, #0
    393e:	e7f9      	b.n	3934 <ecc_point_validate+0x84>
    3940:	000032f9 	.word	0x000032f9
    3944:	00002003 	.word	0x00002003
    3948:	00003285 	.word	0x00003285
    394c:	000092f0 	.word	0x000092f0
    3950:	0000308d 	.word	0x0000308d
    3954:	00001fc7 	.word	0x00001fc7
    3958:	00003269 	.word	0x00003269

0000395c <mLSB_set_recode>:
    return true;
}


void mLSB_set_recode(uint64_t* scalar, unsigned int *digits)
{ // Computes the modified LSB-set representation of a scalar
    395c:	b5f0      	push	{r4, r5, r6, r7, lr}
    395e:	46de      	mov	lr, fp
    3960:	4657      	mov	r7, sl
    3962:	464e      	mov	r6, r9
    3964:	4645      	mov	r5, r8
    3966:	b5e0      	push	{r5, r6, r7, lr}
    3968:	b087      	sub	sp, #28
    396a:	0005      	movs	r5, r0
    396c:	468b      	mov	fp, r1
  //         where l = d*w and d = ceil(bitlength(order)/(w*v))*v. The values v and w are fixed and must be in the range [1, 10] (see FourQ.h); they determine the size 
  //         of the precomputed table "FIXED_BASE_TABLE" used by ecc_mul_fixed(). 
    unsigned int i, j, d = D_FIXEDBASE, l = L_FIXEDBASE;
    uint64_t temp, carry;
    
    digits[d-1] = 0;
    396e:	2200      	movs	r2, #0
    3970:	23c4      	movs	r3, #196	; 0xc4
    3972:	50ca      	str	r2, [r1, r3]
    3974:	9004      	str	r0, [sp, #16]
    3976:	0004      	movs	r4, r0
    3978:	3418      	adds	r4, #24
    397a:	0003      	movs	r3, r0

    // Shift scalar to the right by 1   
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
        SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    397c:	685a      	ldr	r2, [r3, #4]
    397e:	07d0      	lsls	r0, r2, #31
    3980:	6819      	ldr	r1, [r3, #0]
    3982:	0849      	lsrs	r1, r1, #1
    3984:	4301      	orrs	r1, r0
    3986:	0852      	lsrs	r2, r2, #1
    3988:	6898      	ldr	r0, [r3, #8]
    398a:	07c0      	lsls	r0, r0, #31
    398c:	6019      	str	r1, [r3, #0]
    398e:	4042      	eors	r2, r0
    3990:	605a      	str	r2, [r3, #4]
    3992:	3308      	adds	r3, #8
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    3994:	42a3      	cmp	r3, r4
    3996:	d1f1      	bne.n	397c <mLSB_set_recode+0x20>
    3998:	4699      	mov	r9, r3
    }
    scalar[NWORDS64_ORDER-1] >>= 1;
    399a:	69ea      	ldr	r2, [r5, #28]
    399c:	07d1      	lsls	r1, r2, #31
    399e:	69ab      	ldr	r3, [r5, #24]
    39a0:	085b      	lsrs	r3, r3, #1
    39a2:	430b      	orrs	r3, r1
    39a4:	61ab      	str	r3, [r5, #24]
    39a6:	0852      	lsrs	r2, r2, #1
    39a8:	61ea      	str	r2, [r5, #28]
    39aa:	4659      	mov	r1, fp
    39ac:	23c4      	movs	r3, #196	; 0xc4
    39ae:	445b      	add	r3, fp
    39b0:	4698      	mov	r8, r3

    for (i = 0; i < (d-1); i++)
    {
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    39b2:	2301      	movs	r3, #1
    39b4:	469c      	mov	ip, r3
    39b6:	9600      	str	r6, [sp, #0]
    39b8:	9701      	str	r7, [sp, #4]
    39ba:	4648      	mov	r0, r9
    39bc:	e00a      	b.n	39d4 <mLSB_set_recode+0x78>
                                                          // if scalar_(i+1) = 0 then digit_i = -1 (negative), else if scalar_(i+1) = 1 then digit_i = 0 (positive)
        // Shift scalar to the right by 1   
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    39be:	69ef      	ldr	r7, [r5, #28]
    39c0:	07fb      	lsls	r3, r7, #31
    39c2:	69aa      	ldr	r2, [r5, #24]
    39c4:	0852      	lsrs	r2, r2, #1
    39c6:	431a      	orrs	r2, r3
    39c8:	61aa      	str	r2, [r5, #24]
    39ca:	087b      	lsrs	r3, r7, #1
    39cc:	61eb      	str	r3, [r5, #28]
    39ce:	3104      	adds	r1, #4
    for (i = 0; i < (d-1); i++)
    39d0:	4541      	cmp	r1, r8
    39d2:	d014      	beq.n	39fe <mLSB_set_recode+0xa2>
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    39d4:	682b      	ldr	r3, [r5, #0]
    39d6:	4662      	mov	r2, ip
    39d8:	4013      	ands	r3, r2
    39da:	3b01      	subs	r3, #1
    39dc:	600b      	str	r3, [r1, #0]
    39de:	9c04      	ldr	r4, [sp, #16]
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    39e0:	6863      	ldr	r3, [r4, #4]
    39e2:	07de      	lsls	r6, r3, #31
    39e4:	6822      	ldr	r2, [r4, #0]
    39e6:	0852      	lsrs	r2, r2, #1
    39e8:	4332      	orrs	r2, r6
    39ea:	085b      	lsrs	r3, r3, #1
    39ec:	68a6      	ldr	r6, [r4, #8]
    39ee:	07f6      	lsls	r6, r6, #31
    39f0:	6022      	str	r2, [r4, #0]
    39f2:	4073      	eors	r3, r6
    39f4:	6063      	str	r3, [r4, #4]
    39f6:	3408      	adds	r4, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    39f8:	4284      	cmp	r4, r0
    39fa:	d1f1      	bne.n	39e0 <mLSB_set_recode+0x84>
    39fc:	e7df      	b.n	39be <mLSB_set_recode+0x62>
    39fe:	9e00      	ldr	r6, [sp, #0]
    3a00:	9f01      	ldr	r7, [sp, #4]
    3a02:	23c8      	movs	r3, #200	; 0xc8
    3a04:	445b      	add	r3, fp
    3a06:	4698      	mov	r8, r3
    for (i = 0; i < (d-1); i++)
    3a08:	2332      	movs	r3, #50	; 0x32
    3a0a:	2220      	movs	r2, #32
    3a0c:	4691      	mov	r9, r2
    3a0e:	44a9      	add	r9, r5
    3a10:	46a2      	mov	sl, r4
    3a12:	4644      	mov	r4, r8
    3a14:	4698      	mov	r8, r3
    3a16:	465b      	mov	r3, fp
    3a18:	9305      	str	r3, [sp, #20]
    3a1a:	e007      	b.n	3a2c <mLSB_set_recode+0xd0>
    3a1c:	4681      	mov	r9, r0
    } 

    for (i = d; i < l; i++)
    3a1e:	2301      	movs	r3, #1
    3a20:	469c      	mov	ip, r3
    3a22:	44e0      	add	r8, ip
    3a24:	3404      	adds	r4, #4
    3a26:	4643      	mov	r3, r8
    3a28:	2bfa      	cmp	r3, #250	; 0xfa
    3a2a:	d056      	beq.n	3ada <mLSB_set_recode+0x17e>
    3a2c:	46a3      	mov	fp, r4
    {
        digits[i] = (unsigned int)(scalar[0] & 1);        // digits_i = k mod 2. Sign is determined by the "sign" row
    3a2e:	2301      	movs	r3, #1
    3a30:	682a      	ldr	r2, [r5, #0]
    3a32:	4013      	ands	r3, r2
    3a34:	6023      	str	r3, [r4, #0]
    3a36:	9904      	ldr	r1, [sp, #16]
    3a38:	9600      	str	r6, [sp, #0]
    3a3a:	9701      	str	r7, [sp, #4]
    3a3c:	4657      	mov	r7, sl

        // Shift scalar to the right by 1  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    3a3e:	684b      	ldr	r3, [r1, #4]
    3a40:	07d8      	lsls	r0, r3, #31
    3a42:	680a      	ldr	r2, [r1, #0]
    3a44:	0852      	lsrs	r2, r2, #1
    3a46:	4302      	orrs	r2, r0
    3a48:	085b      	lsrs	r3, r3, #1
    3a4a:	6888      	ldr	r0, [r1, #8]
    3a4c:	07c0      	lsls	r0, r0, #31
    3a4e:	600a      	str	r2, [r1, #0]
    3a50:	4043      	eors	r3, r0
    3a52:	604b      	str	r3, [r1, #4]
    3a54:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    3a56:	42b9      	cmp	r1, r7
    3a58:	d1f1      	bne.n	3a3e <mLSB_set_recode+0xe2>
    3a5a:	46ba      	mov	sl, r7
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    3a5c:	69ea      	ldr	r2, [r5, #28]
    3a5e:	07d1      	lsls	r1, r2, #31
    3a60:	69ab      	ldr	r3, [r5, #24]
    3a62:	085b      	lsrs	r3, r3, #1
    3a64:	430b      	orrs	r3, r1
    3a66:	61ab      	str	r3, [r5, #24]
    3a68:	0852      	lsrs	r2, r2, #1
    3a6a:	61ea      	str	r2, [r5, #28]

        temp = (0 - digits[i-(i/d)*d]) & digits[i];       // if (digits_i=0 \/ 1) then temp = 0, else if (digits_i=-1) then temp = 1 
    3a6c:	2132      	movs	r1, #50	; 0x32
    3a6e:	4640      	mov	r0, r8
    3a70:	4b1d      	ldr	r3, [pc, #116]	; (3ae8 <mLSB_set_recode+0x18c>)
    3a72:	4798      	blx	r3
    3a74:	0089      	lsls	r1, r1, #2
    3a76:	9b05      	ldr	r3, [sp, #20]
    3a78:	58cb      	ldr	r3, [r1, r3]
    3a7a:	425b      	negs	r3, r3
    3a7c:	465a      	mov	r2, fp
    3a7e:	6810      	ldr	r0, [r2, #0]
    3a80:	4018      	ands	r0, r3
    3a82:	4684      	mov	ip, r0
    3a84:	9002      	str	r0, [sp, #8]
    3a86:	2300      	movs	r3, #0
    3a88:	9303      	str	r3, [sp, #12]
            
        // floor(scalar/2) + temp
        scalar[0] = scalar[0] + temp;
    3a8a:	9a02      	ldr	r2, [sp, #8]
    3a8c:	9b03      	ldr	r3, [sp, #12]
    3a8e:	6828      	ldr	r0, [r5, #0]
    3a90:	6869      	ldr	r1, [r5, #4]
    3a92:	1812      	adds	r2, r2, r0
    3a94:	414b      	adcs	r3, r1
    3a96:	0029      	movs	r1, r5
    3a98:	c10c      	stmia	r1!, {r2, r3}
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    3a9a:	9200      	str	r2, [sp, #0]
    3a9c:	9301      	str	r3, [sp, #4]
    3a9e:	4253      	negs	r3, r2
    3aa0:	9a00      	ldr	r2, [sp, #0]
    3aa2:	4313      	orrs	r3, r2
    3aa4:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    3aa6:	2201      	movs	r2, #1
    3aa8:	4053      	eors	r3, r2
        carry = (temp & (uint64_t)is_digit_zero_ct((digit_t)scalar[0]));       // carry = (scalar[0] < temp);
    3aaa:	4660      	mov	r0, ip
    3aac:	4018      	ands	r0, r3
    3aae:	0006      	movs	r6, r0
    3ab0:	2700      	movs	r7, #0
    3ab2:	4648      	mov	r0, r9
        for (j = 1; j < NWORDS64_ORDER; j++)
        {
            scalar[j] = scalar[j] + carry; 
    3ab4:	680a      	ldr	r2, [r1, #0]
    3ab6:	684b      	ldr	r3, [r1, #4]
    3ab8:	1992      	adds	r2, r2, r6
    3aba:	417b      	adcs	r3, r7
    3abc:	c10c      	stmia	r1!, {r2, r3}
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    3abe:	9200      	str	r2, [sp, #0]
    3ac0:	9301      	str	r3, [sp, #4]
    3ac2:	4253      	negs	r3, r2
    3ac4:	9a00      	ldr	r2, [sp, #0]
    3ac6:	4313      	orrs	r3, r2
    3ac8:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    3aca:	2201      	movs	r2, #1
    3acc:	4053      	eors	r3, r2
            carry = (carry & (uint64_t)is_digit_zero_ct((digit_t)scalar[j]));  // carry = (scalar[j] < temp);
    3ace:	4033      	ands	r3, r6
    3ad0:	001e      	movs	r6, r3
    3ad2:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    3ad4:	4281      	cmp	r1, r0
    3ad6:	d1ed      	bne.n	3ab4 <mLSB_set_recode+0x158>
    3ad8:	e7a0      	b.n	3a1c <mLSB_set_recode+0xc0>
        }
    } 
    return;              
}
    3ada:	b007      	add	sp, #28
    3adc:	bc3c      	pop	{r2, r3, r4, r5}
    3ade:	4690      	mov	r8, r2
    3ae0:	4699      	mov	r9, r3
    3ae2:	46a2      	mov	sl, r4
    3ae4:	46ab      	mov	fp, r5
    3ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ae8:	000058c1 	.word	0x000058c1

00003aec <ecc_mul_fixed>:
{ // Fixed-base scalar multiplication Q = k*G, where G is the generator. FIXED_BASE_TABLE stores v*2^(w-1) = 80 multiples of G.
    3aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aee:	46de      	mov	lr, fp
    3af0:	4657      	mov	r7, sl
    3af2:	464e      	mov	r6, r9
    3af4:	4645      	mov	r5, r8
    3af6:	b5e0      	push	{r5, r6, r7, lr}
    3af8:	4cce      	ldr	r4, [pc, #824]	; (3e34 <ecc_mul_fixed+0x348>)
    3afa:	44a5      	add	sp, r4
    3afc:	0005      	movs	r5, r0
    3afe:	9103      	str	r1, [sp, #12]
    unsigned int digit = 0, digits[NBITS_ORDER_PLUS_ONE+(W_FIXEDBASE*V_FIXEDBASE)-1] = {0}; 
    3b00:	ac85      	add	r4, sp, #532	; 0x214
    3b02:	4acd      	ldr	r2, [pc, #820]	; (3e38 <ecc_mul_fixed+0x34c>)
    3b04:	2100      	movs	r1, #0
    3b06:	0020      	movs	r0, r4
    3b08:	4bcc      	ldr	r3, [pc, #816]	; (3e3c <ecc_mul_fixed+0x350>)
    3b0a:	4798      	blx	r3
	modulo_order(k, temp);                                      // temp = k mod (order) 
    3b0c:	a97d      	add	r1, sp, #500	; 0x1f4
    3b0e:	0028      	movs	r0, r5
    3b10:	4bcb      	ldr	r3, [pc, #812]	; (3e40 <ecc_mul_fixed+0x354>)
    3b12:	4798      	blx	r3
	conversion_to_odd(temp, temp);                              // Converting scalar to odd using the prime subgroup order
    3b14:	a97d      	add	r1, sp, #500	; 0x1f4
    3b16:	0008      	movs	r0, r1
    3b18:	4bca      	ldr	r3, [pc, #808]	; (3e44 <ecc_mul_fixed+0x358>)
    3b1a:	4798      	blx	r3
	mLSB_set_recode((uint64_t*)temp, digits);                   // Scalar recoding
    3b1c:	a985      	add	r1, sp, #532	; 0x214
    3b1e:	a87d      	add	r0, sp, #500	; 0x1f4
    3b20:	4bc9      	ldr	r3, [pc, #804]	; (3e48 <ecc_mul_fixed+0x35c>)
    3b22:	4798      	blx	r3
    digit = digits[w*d-1];
    3b24:	23f9      	movs	r3, #249	; 0xf9
    3b26:	009b      	lsls	r3, r3, #2
        digit = 2*digit + digits[i];
    3b28:	58e2      	ldr	r2, [r4, r3]
    3b2a:	0052      	lsls	r2, r2, #1
    3b2c:	3bc8      	subs	r3, #200	; 0xc8
    3b2e:	58e3      	ldr	r3, [r4, r3]
    3b30:	18d2      	adds	r2, r2, r3
    3b32:	0052      	lsls	r2, r2, #1
    3b34:	2395      	movs	r3, #149	; 0x95
    3b36:	009b      	lsls	r3, r3, #2
    3b38:	58e3      	ldr	r3, [r4, r3]
    3b3a:	18d2      	adds	r2, r2, r3
    3b3c:	0052      	lsls	r2, r2, #1
    table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    3b3e:	23c4      	movs	r3, #196	; 0xc4
    3b40:	58e3      	ldr	r3, [r4, r3]
        digit = 2*digit + digits[i];
    3b42:	21c6      	movs	r1, #198	; 0xc6
    3b44:	0049      	lsls	r1, r1, #1
    3b46:	5861      	ldr	r1, [r4, r1]
    3b48:	1852      	adds	r2, r2, r1
    table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    3b4a:	4cc0      	ldr	r4, [pc, #768]	; (3e4c <ecc_mul_fixed+0x360>)
    3b4c:	21f0      	movs	r1, #240	; 0xf0
    3b4e:	0149      	lsls	r1, r1, #5
    3b50:	1860      	adds	r0, r4, r1
    3b52:	a919      	add	r1, sp, #100	; 0x64
    3b54:	4dbe      	ldr	r5, [pc, #760]	; (3e50 <ecc_mul_fixed+0x364>)
    3b56:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    3b58:	aa37      	add	r2, sp, #220	; 0xdc
    3b5a:	a923      	add	r1, sp, #140	; 0x8c
    3b5c:	a819      	add	r0, sp, #100	; 0x64
    3b5e:	4dbd      	ldr	r5, [pc, #756]	; (3e54 <ecc_mul_fixed+0x368>)
    3b60:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3b62:	aa3c      	add	r2, sp, #240	; 0xf0
    3b64:	a928      	add	r1, sp, #160	; 0xa0
    3b66:	a81e      	add	r0, sp, #120	; 0x78
    3b68:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    3b6a:	aa41      	add	r2, sp, #260	; 0x104
    3b6c:	a923      	add	r1, sp, #140	; 0x8c
    3b6e:	a819      	add	r0, sp, #100	; 0x64
    3b70:	4db9      	ldr	r5, [pc, #740]	; (3e58 <ecc_mul_fixed+0x36c>)
    3b72:	47a8      	blx	r5
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3b74:	aa46      	add	r2, sp, #280	; 0x118
    3b76:	a928      	add	r1, sp, #160	; 0xa0
    3b78:	a81e      	add	r0, sp, #120	; 0x78
    3b7a:	47a8      	blx	r5
    v2zero1271(Q->z); Q->z[0]=1;             // ZQ = 1
    3b7c:	a84b      	add	r0, sp, #300	; 0x12c
    3b7e:	4bb7      	ldr	r3, [pc, #732]	; (3e5c <ecc_mul_fixed+0x370>)
    3b80:	4798      	blx	r3
    3b82:	2301      	movs	r3, #1
    3b84:	934b      	str	r3, [sp, #300]	; 0x12c
    v2div1271(Q->x);                         // XQ = x1
    3b86:	a837      	add	r0, sp, #220	; 0xdc
    3b88:	4db5      	ldr	r5, [pc, #724]	; (3e60 <ecc_mul_fixed+0x374>)
    3b8a:	47a8      	blx	r5
    v2div1271(Q->y);                         // YQ = y1 
    3b8c:	a841      	add	r0, sp, #260	; 0x104
    3b8e:	47a8      	blx	r5
    v2copy1271(Q->x, Q->ta);                 // TaQ = x1
    3b90:	a955      	add	r1, sp, #340	; 0x154
    3b92:	a837      	add	r0, sp, #220	; 0xdc
    3b94:	4db3      	ldr	r5, [pc, #716]	; (3e64 <ecc_mul_fixed+0x378>)
    3b96:	47a8      	blx	r5
    v2copy1271(Q->y, Q->tb);                 // TbQ = y1
    3b98:	a95f      	add	r1, sp, #380	; 0x17c
    3b9a:	a841      	add	r0, sp, #260	; 0x104
    3b9c:	47a8      	blx	r5
    3b9e:	23b4      	movs	r3, #180	; 0xb4
    3ba0:	015b      	lsls	r3, r3, #5
    3ba2:	4698      	mov	r8, r3
    3ba4:	44a0      	add	r8, r4
    3ba6:	23a1      	movs	r3, #161	; 0xa1
    3ba8:	00db      	lsls	r3, r3, #3
    3baa:	446b      	add	r3, sp
    3bac:	469a      	mov	sl, r3
    3bae:	26bd      	movs	r6, #189	; 0xbd
        table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);   
    3bb0:	4ba7      	ldr	r3, [pc, #668]	; (3e50 <ecc_mul_fixed+0x364>)
    3bb2:	4699      	mov	r9, r3
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    3bb4:	4dac      	ldr	r5, [pc, #688]	; (3e68 <ecc_mul_fixed+0x37c>)
    vadd1271(&a[0], &b[0], &c[0]);
    3bb6:	4ca8      	ldr	r4, [pc, #672]	; (3e58 <ecc_mul_fixed+0x36c>)
    3bb8:	46d3      	mov	fp, sl
    3bba:	46dc      	mov	ip, fp
        digit = digits[w*d-(j+1)*e-1];
    3bbc:	465b      	mov	r3, fp
    3bbe:	33c8      	adds	r3, #200	; 0xc8
    3bc0:	681a      	ldr	r2, [r3, #0]
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)           
    3bc2:	0033      	movs	r3, r6
    3bc4:	0030      	movs	r0, r6
    3bc6:	3864      	subs	r0, #100	; 0x64
    3bc8:	4286      	cmp	r6, r0
    3bca:	db08      	blt.n	3bde <ecc_mul_fixed+0xf2>
    3bcc:	4659      	mov	r1, fp
            digit = 2*digit + digits[i];
    3bce:	0052      	lsls	r2, r2, #1
    3bd0:	680f      	ldr	r7, [r1, #0]
    3bd2:	46ba      	mov	sl, r7
    3bd4:	4452      	add	r2, sl
    3bd6:	3b32      	subs	r3, #50	; 0x32
    3bd8:	39c8      	subs	r1, #200	; 0xc8
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)           
    3bda:	4298      	cmp	r0, r3
    3bdc:	ddf7      	ble.n	3bce <ecc_mul_fixed+0xe2>
        table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);   
    3bde:	4ba3      	ldr	r3, [pc, #652]	; (3e6c <ecc_mul_fixed+0x380>)
    3be0:	4463      	add	r3, ip
    3be2:	681b      	ldr	r3, [r3, #0]
    3be4:	a919      	add	r1, sp, #100	; 0x64
    3be6:	4640      	mov	r0, r8
    3be8:	47c8      	blx	r9
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    3bea:	aa55      	add	r2, sp, #340	; 0x154
    3bec:	a95f      	add	r1, sp, #380	; 0x17c
    3bee:	0010      	movs	r0, r2
    3bf0:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    3bf2:	aa05      	add	r2, sp, #20
    3bf4:	a94b      	add	r1, sp, #300	; 0x12c
    3bf6:	0008      	movs	r0, r1
    3bf8:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3bfa:	aa0a      	add	r2, sp, #40	; 0x28
    3bfc:	a950      	add	r1, sp, #320	; 0x140
    3bfe:	0008      	movs	r0, r1
    3c00:	47a0      	blx	r4
    v2mul1271(P->ta, Q->t2, P->ta);                       // Ta = 2dT1*t2 
    3c02:	aa55      	add	r2, sp, #340	; 0x154
    3c04:	a92d      	add	r1, sp, #180	; 0xb4
    3c06:	0010      	movs	r0, r2
    3c08:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    3c0a:	aa4b      	add	r2, sp, #300	; 0x12c
    3c0c:	a941      	add	r1, sp, #260	; 0x104
    3c0e:	a837      	add	r0, sp, #220	; 0xdc
    3c10:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3c12:	aa50      	add	r2, sp, #320	; 0x140
    3c14:	a946      	add	r1, sp, #280	; 0x118
    3c16:	a83c      	add	r0, sp, #240	; 0xf0
    3c18:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    3c1a:	aa5f      	add	r2, sp, #380	; 0x17c
    3c1c:	a937      	add	r1, sp, #220	; 0xdc
    3c1e:	a841      	add	r0, sp, #260	; 0x104
    3c20:	4b8c      	ldr	r3, [pc, #560]	; (3e54 <ecc_mul_fixed+0x368>)
    3c22:	469a      	mov	sl, r3
    3c24:	4798      	blx	r3
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3c26:	aa64      	add	r2, sp, #400	; 0x190
    3c28:	a93c      	add	r1, sp, #240	; 0xf0
    3c2a:	a846      	add	r0, sp, #280	; 0x118
    3c2c:	47d0      	blx	sl
    vsub1271(&a[0], &b[0], &c[0]);
    3c2e:	aa0f      	add	r2, sp, #60	; 0x3c
    3c30:	a955      	add	r1, sp, #340	; 0x154
    3c32:	a805      	add	r0, sp, #20
    3c34:	47d0      	blx	sl
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3c36:	aa14      	add	r2, sp, #80	; 0x50
    3c38:	a95a      	add	r1, sp, #360	; 0x168
    3c3a:	a80a      	add	r0, sp, #40	; 0x28
    3c3c:	47d0      	blx	sl
    vadd1271(&a[0], &b[0], &c[0]);
    3c3e:	aa05      	add	r2, sp, #20
    3c40:	a955      	add	r1, sp, #340	; 0x154
    3c42:	0010      	movs	r0, r2
    3c44:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3c46:	aa0a      	add	r2, sp, #40	; 0x28
    3c48:	a95a      	add	r1, sp, #360	; 0x168
    3c4a:	0010      	movs	r0, r2
    3c4c:	47a0      	blx	r4
    v2mul1271(Q->xy, P->z, P->ta);                        // Ta = (X1+Y1)(x2+y2)
    3c4e:	aa55      	add	r2, sp, #340	; 0x154
    3c50:	a94b      	add	r1, sp, #300	; 0x12c
    3c52:	a819      	add	r0, sp, #100	; 0x64
    3c54:	47a8      	blx	r5
    v2mul1271(Q->yx, P->tb, P->x);                        // X = (Y1-X1)(y2-x2)
    3c56:	aa37      	add	r2, sp, #220	; 0xdc
    3c58:	a95f      	add	r1, sp, #380	; 0x17c
    3c5a:	a823      	add	r0, sp, #140	; 0x8c
    3c5c:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    3c5e:	aa5f      	add	r2, sp, #380	; 0x17c
    3c60:	a937      	add	r1, sp, #220	; 0xdc
    3c62:	a855      	add	r0, sp, #340	; 0x154
    3c64:	47d0      	blx	sl
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3c66:	aa64      	add	r2, sp, #400	; 0x190
    3c68:	a93c      	add	r1, sp, #240	; 0xf0
    3c6a:	a85a      	add	r0, sp, #360	; 0x168
    3c6c:	47d0      	blx	sl
    vadd1271(&a[0], &b[0], &c[0]);
    3c6e:	aa55      	add	r2, sp, #340	; 0x154
    3c70:	a937      	add	r1, sp, #220	; 0xdc
    3c72:	0010      	movs	r0, r2
    3c74:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3c76:	aa5a      	add	r2, sp, #360	; 0x168
    3c78:	a93c      	add	r1, sp, #240	; 0xf0
    3c7a:	0010      	movs	r0, r2
    3c7c:	47a0      	blx	r4
    v2mul1271(t1, t2, P->z);                              // Zfinal = theta*alpha
    3c7e:	aa4b      	add	r2, sp, #300	; 0x12c
    3c80:	a90f      	add	r1, sp, #60	; 0x3c
    3c82:	a805      	add	r0, sp, #20
    3c84:	47a8      	blx	r5
    v2mul1271(P->tb, t2, P->x);                           // Xfinal = beta*theta
    3c86:	aa37      	add	r2, sp, #220	; 0xdc
    3c88:	a90f      	add	r1, sp, #60	; 0x3c
    3c8a:	a85f      	add	r0, sp, #380	; 0x17c
    3c8c:	47a8      	blx	r5
    v2mul1271(P->ta, t1, P->y);                           // Yfinal = alpha*omega
    3c8e:	aa41      	add	r2, sp, #260	; 0x104
    3c90:	a905      	add	r1, sp, #20
    3c92:	a855      	add	r0, sp, #340	; 0x154
    3c94:	47a8      	blx	r5
    3c96:	3e0a      	subs	r6, #10
    3c98:	4b75      	ldr	r3, [pc, #468]	; (3e70 <ecc_mul_fixed+0x384>)
    3c9a:	469c      	mov	ip, r3
    3c9c:	44e0      	add	r8, ip
    3c9e:	2328      	movs	r3, #40	; 0x28
    3ca0:	425b      	negs	r3, r3
    3ca2:	469c      	mov	ip, r3
    3ca4:	44e3      	add	fp, ip
    for (j = 0; j < (v-1); j++)
    3ca6:	2e95      	cmp	r6, #149	; 0x95
    3ca8:	d187      	bne.n	3bba <ecc_mul_fixed+0xce>
    3caa:	4b72      	ldr	r3, [pc, #456]	; (3e74 <ecc_mul_fixed+0x388>)
    3cac:	aa04      	add	r2, sp, #16
    3cae:	4694      	mov	ip, r2
    3cb0:	4463      	add	r3, ip
    3cb2:	9302      	str	r3, [sp, #8]
    3cb4:	23c6      	movs	r3, #198	; 0xc6
    3cb6:	9301      	str	r3, [sp, #4]
            table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]); 
    3cb8:	4b65      	ldr	r3, [pc, #404]	; (3e50 <ecc_mul_fixed+0x364>)
    3cba:	469b      	mov	fp, r3
    3cbc:	e008      	b.n	3cd0 <ecc_mul_fixed+0x1e4>
    3cbe:	9b01      	ldr	r3, [sp, #4]
    3cc0:	3b01      	subs	r3, #1
    3cc2:	9301      	str	r3, [sp, #4]
    3cc4:	9a02      	ldr	r2, [sp, #8]
    3cc6:	3a04      	subs	r2, #4
    3cc8:	9202      	str	r2, [sp, #8]
    for (ii = (e-2); ii >= 0; ii--)
    3cca:	2bbd      	cmp	r3, #189	; 0xbd
    3ccc:	d100      	bne.n	3cd0 <ecc_mul_fixed+0x1e4>
    3cce:	e08b      	b.n	3de8 <ecc_mul_fixed+0x2fc>
        eccdouble(R);                                           // R = 2*R using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    3cd0:	a837      	add	r0, sp, #220	; 0xdc
    3cd2:	4b69      	ldr	r3, [pc, #420]	; (3e78 <ecc_mul_fixed+0x38c>)
    3cd4:	4798      	blx	r3
    3cd6:	4b5d      	ldr	r3, [pc, #372]	; (3e4c <ecc_mul_fixed+0x360>)
    3cd8:	22f0      	movs	r2, #240	; 0xf0
    3cda:	0152      	lsls	r2, r2, #5
    3cdc:	4694      	mov	ip, r2
    3cde:	4463      	add	r3, ip
    3ce0:	4699      	mov	r9, r3
    3ce2:	9f01      	ldr	r7, [sp, #4]
    3ce4:	003b      	movs	r3, r7
    3ce6:	2232      	movs	r2, #50	; 0x32
    3ce8:	4252      	negs	r2, r2
    3cea:	4694      	mov	ip, r2
    3cec:	4463      	add	r3, ip
    3cee:	469a      	mov	sl, r3
    3cf0:	9b02      	ldr	r3, [sp, #8]
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    3cf2:	4d5d      	ldr	r5, [pc, #372]	; (3e68 <ecc_mul_fixed+0x37c>)
    vadd1271(&a[0], &b[0], &c[0]);
    3cf4:	4c58      	ldr	r4, [pc, #352]	; (3e58 <ecc_mul_fixed+0x36c>)
    3cf6:	001e      	movs	r6, r3
    3cf8:	46b4      	mov	ip, r6
            digit = digits[w*d-j*e+ii-e];
    3cfa:	0033      	movs	r3, r6
    3cfc:	33c8      	adds	r3, #200	; 0xc8
    3cfe:	681a      	ldr	r2, [r3, #0]
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)           
    3d00:	003b      	movs	r3, r7
    3d02:	0038      	movs	r0, r7
    3d04:	3864      	subs	r0, #100	; 0x64
    3d06:	4287      	cmp	r7, r0
    3d08:	db0a      	blt.n	3d20 <ecc_mul_fixed+0x234>
    3d0a:	0031      	movs	r1, r6
    3d0c:	9600      	str	r6, [sp, #0]
                digit = 2*digit + digits[i];
    3d0e:	0052      	lsls	r2, r2, #1
    3d10:	680e      	ldr	r6, [r1, #0]
    3d12:	46b0      	mov	r8, r6
    3d14:	4442      	add	r2, r8
    3d16:	3b32      	subs	r3, #50	; 0x32
    3d18:	39c8      	subs	r1, #200	; 0xc8
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)           
    3d1a:	4283      	cmp	r3, r0
    3d1c:	daf7      	bge.n	3d0e <ecc_mul_fixed+0x222>
    3d1e:	9e00      	ldr	r6, [sp, #0]
            table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]); 
    3d20:	4b52      	ldr	r3, [pc, #328]	; (3e6c <ecc_mul_fixed+0x380>)
    3d22:	4463      	add	r3, ip
    3d24:	681b      	ldr	r3, [r3, #0]
    3d26:	a919      	add	r1, sp, #100	; 0x64
    3d28:	4648      	mov	r0, r9
    3d2a:	47d8      	blx	fp
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    3d2c:	aa55      	add	r2, sp, #340	; 0x154
    3d2e:	a95f      	add	r1, sp, #380	; 0x17c
    3d30:	0010      	movs	r0, r2
    3d32:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    3d34:	aa05      	add	r2, sp, #20
    3d36:	a94b      	add	r1, sp, #300	; 0x12c
    3d38:	0008      	movs	r0, r1
    3d3a:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3d3c:	aa0a      	add	r2, sp, #40	; 0x28
    3d3e:	a950      	add	r1, sp, #320	; 0x140
    3d40:	0008      	movs	r0, r1
    3d42:	47a0      	blx	r4
    v2mul1271(P->ta, Q->t2, P->ta);                       // Ta = 2dT1*t2 
    3d44:	aa55      	add	r2, sp, #340	; 0x154
    3d46:	a92d      	add	r1, sp, #180	; 0xb4
    3d48:	0010      	movs	r0, r2
    3d4a:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    3d4c:	aa4b      	add	r2, sp, #300	; 0x12c
    3d4e:	a941      	add	r1, sp, #260	; 0x104
    3d50:	a837      	add	r0, sp, #220	; 0xdc
    3d52:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3d54:	aa50      	add	r2, sp, #320	; 0x140
    3d56:	a946      	add	r1, sp, #280	; 0x118
    3d58:	a83c      	add	r0, sp, #240	; 0xf0
    3d5a:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    3d5c:	aa5f      	add	r2, sp, #380	; 0x17c
    3d5e:	a937      	add	r1, sp, #220	; 0xdc
    3d60:	a841      	add	r0, sp, #260	; 0x104
    3d62:	4b3c      	ldr	r3, [pc, #240]	; (3e54 <ecc_mul_fixed+0x368>)
    3d64:	4698      	mov	r8, r3
    3d66:	4798      	blx	r3
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3d68:	aa64      	add	r2, sp, #400	; 0x190
    3d6a:	a93c      	add	r1, sp, #240	; 0xf0
    3d6c:	a846      	add	r0, sp, #280	; 0x118
    3d6e:	47c0      	blx	r8
    vsub1271(&a[0], &b[0], &c[0]);
    3d70:	aa0f      	add	r2, sp, #60	; 0x3c
    3d72:	a955      	add	r1, sp, #340	; 0x154
    3d74:	a805      	add	r0, sp, #20
    3d76:	47c0      	blx	r8
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3d78:	aa14      	add	r2, sp, #80	; 0x50
    3d7a:	a95a      	add	r1, sp, #360	; 0x168
    3d7c:	a80a      	add	r0, sp, #40	; 0x28
    3d7e:	47c0      	blx	r8
    vadd1271(&a[0], &b[0], &c[0]);
    3d80:	aa05      	add	r2, sp, #20
    3d82:	a955      	add	r1, sp, #340	; 0x154
    3d84:	0010      	movs	r0, r2
    3d86:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3d88:	aa0a      	add	r2, sp, #40	; 0x28
    3d8a:	a95a      	add	r1, sp, #360	; 0x168
    3d8c:	0010      	movs	r0, r2
    3d8e:	47a0      	blx	r4
    v2mul1271(Q->xy, P->z, P->ta);                        // Ta = (X1+Y1)(x2+y2)
    3d90:	aa55      	add	r2, sp, #340	; 0x154
    3d92:	a94b      	add	r1, sp, #300	; 0x12c
    3d94:	a819      	add	r0, sp, #100	; 0x64
    3d96:	47a8      	blx	r5
    v2mul1271(Q->yx, P->tb, P->x);                        // X = (Y1-X1)(y2-x2)
    3d98:	aa37      	add	r2, sp, #220	; 0xdc
    3d9a:	a95f      	add	r1, sp, #380	; 0x17c
    3d9c:	a823      	add	r0, sp, #140	; 0x8c
    3d9e:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    3da0:	aa5f      	add	r2, sp, #380	; 0x17c
    3da2:	a937      	add	r1, sp, #220	; 0xdc
    3da4:	a855      	add	r0, sp, #340	; 0x154
    3da6:	47c0      	blx	r8
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3da8:	aa64      	add	r2, sp, #400	; 0x190
    3daa:	a93c      	add	r1, sp, #240	; 0xf0
    3dac:	a85a      	add	r0, sp, #360	; 0x168
    3dae:	47c0      	blx	r8
    vadd1271(&a[0], &b[0], &c[0]);
    3db0:	aa55      	add	r2, sp, #340	; 0x154
    3db2:	a937      	add	r1, sp, #220	; 0xdc
    3db4:	0010      	movs	r0, r2
    3db6:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    3db8:	aa5a      	add	r2, sp, #360	; 0x168
    3dba:	a93c      	add	r1, sp, #240	; 0xf0
    3dbc:	0010      	movs	r0, r2
    3dbe:	47a0      	blx	r4
    v2mul1271(t1, t2, P->z);                              // Zfinal = theta*alpha
    3dc0:	aa4b      	add	r2, sp, #300	; 0x12c
    3dc2:	a90f      	add	r1, sp, #60	; 0x3c
    3dc4:	a805      	add	r0, sp, #20
    3dc6:	47a8      	blx	r5
    v2mul1271(P->tb, t2, P->x);                           // Xfinal = beta*theta
    3dc8:	aa37      	add	r2, sp, #220	; 0xdc
    3dca:	a90f      	add	r1, sp, #60	; 0x3c
    3dcc:	a85f      	add	r0, sp, #380	; 0x17c
    3dce:	47a8      	blx	r5
    v2mul1271(P->ta, t1, P->y);                           // Yfinal = alpha*omega
    3dd0:	aa41      	add	r2, sp, #260	; 0x104
    3dd2:	a905      	add	r1, sp, #20
    3dd4:	a855      	add	r0, sp, #340	; 0x154
    3dd6:	47a8      	blx	r5
    3dd8:	3f0a      	subs	r7, #10
    3dda:	4b25      	ldr	r3, [pc, #148]	; (3e70 <ecc_mul_fixed+0x384>)
    3ddc:	469c      	mov	ip, r3
    3dde:	44e1      	add	r9, ip
    3de0:	3e28      	subs	r6, #40	; 0x28
        for (j = 0; j < v; j++)
    3de2:	4557      	cmp	r7, sl
    3de4:	d188      	bne.n	3cf8 <ecc_mul_fixed+0x20c>
    3de6:	e76a      	b.n	3cbe <ecc_mul_fixed+0x1d2>
    v2inv1271(P->z);                      // Z1 = Z1^-1
    3de8:	a84b      	add	r0, sp, #300	; 0x12c
    3dea:	4b24      	ldr	r3, [pc, #144]	; (3e7c <ecc_mul_fixed+0x390>)
    3dec:	4798      	blx	r3
    v2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    3dee:	aa69      	add	r2, sp, #420	; 0x1a4
    3df0:	a94b      	add	r1, sp, #300	; 0x12c
    3df2:	a837      	add	r0, sp, #220	; 0xdc
    3df4:	4c1c      	ldr	r4, [pc, #112]	; (3e68 <ecc_mul_fixed+0x37c>)
    3df6:	47a0      	blx	r4
    v2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    3df8:	aa73      	add	r2, sp, #460	; 0x1cc
    3dfa:	a94b      	add	r1, sp, #300	; 0x12c
    3dfc:	a841      	add	r0, sp, #260	; 0x104
    3dfe:	47a0      	blx	r4
    v2mod1271(Q->x, Q->x); 
    3e00:	a969      	add	r1, sp, #420	; 0x1a4
    3e02:	0008      	movs	r0, r1
    3e04:	4c1e      	ldr	r4, [pc, #120]	; (3e80 <ecc_mul_fixed+0x394>)
    3e06:	47a0      	blx	r4
    v2mod1271(Q->y, Q->y); 
    3e08:	a973      	add	r1, sp, #460	; 0x1cc
    3e0a:	0008      	movs	r0, r1
    3e0c:	47a0      	blx	r4
    from_ext_to_std(A->x, Q->x);
    3e0e:	9d03      	ldr	r5, [sp, #12]
    3e10:	0029      	movs	r1, r5
    3e12:	a869      	add	r0, sp, #420	; 0x1a4
    3e14:	4c1b      	ldr	r4, [pc, #108]	; (3e84 <ecc_mul_fixed+0x398>)
    3e16:	47a0      	blx	r4
    from_ext_to_std(A->y, Q->y); 
    3e18:	0029      	movs	r1, r5
    3e1a:	3120      	adds	r1, #32
    3e1c:	a873      	add	r0, sp, #460	; 0x1cc
    3e1e:	47a0      	blx	r4
}
    3e20:	2001      	movs	r0, #1
    3e22:	4b19      	ldr	r3, [pc, #100]	; (3e88 <ecc_mul_fixed+0x39c>)
    3e24:	449d      	add	sp, r3
    3e26:	bc3c      	pop	{r2, r3, r4, r5}
    3e28:	4690      	mov	r8, r2
    3e2a:	4699      	mov	r9, r3
    3e2c:	46a2      	mov	sl, r4
    3e2e:	46ab      	mov	fp, r5
    3e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e32:	46c0      	nop			; (mov r8, r8)
    3e34:	fffff9ac 	.word	0xfffff9ac
    3e38:	0000043c 	.word	0x0000043c
    3e3c:	00005b87 	.word	0x00005b87
    3e40:	00002af9 	.word	0x00002af9
    3e44:	00002b31 	.word	0x00002b31
    3e48:	0000395d 	.word	0x0000395d
    3e4c:	00006d30 	.word	0x00006d30
    3e50:	00002f61 	.word	0x00002f61
    3e54:	00002003 	.word	0x00002003
    3e58:	00001fc7 	.word	0x00001fc7
    3e5c:	0000308d 	.word	0x0000308d
    3e60:	00003199 	.word	0x00003199
    3e64:	00002be7 	.word	0x00002be7
    3e68:	00003285 	.word	0x00003285
    3e6c:	fffffda8 	.word	0xfffffda8
    3e70:	fffff880 	.word	0xfffff880
    3e74:	0000051c 	.word	0x0000051c
    3e78:	0000359d 	.word	0x0000359d
    3e7c:	00003345 	.word	0x00003345
    3e80:	00003269 	.word	0x00003269
    3e84:	000028c9 	.word	0x000028c9
    3e88:	00000654 	.word	0x00000654

00003e8c <fixed_window_recode>:

/***********************************************/
/**********  CURVE/SCALAR FUNCTIONS  ***********/

void fixed_window_recode(uint64_t* scalar, unsigned int* digits, unsigned int* sign_masks)
{ // Converting scalar to the fixed window representation used by the variable-base scalar multiplication
    3e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e8e:	46de      	mov	lr, fp
    3e90:	4657      	mov	r7, sl
    3e92:	464e      	mov	r6, r9
    3e94:	4645      	mov	r5, r8
    3e96:	b5e0      	push	{r5, r6, r7, lr}
    3e98:	b089      	sub	sp, #36	; 0x24
    3e9a:	4692      	mov	sl, r2
    3e9c:	2300      	movs	r3, #0
    3e9e:	469c      	mov	ip, r3
    3ea0:	3320      	adds	r3, #32
    3ea2:	4699      	mov	r9, r3
    3ea4:	4481      	add	r9, r0
    3ea6:	3b08      	subs	r3, #8
    3ea8:	4698      	mov	r8, r3
    3eaa:	4480      	add	r8, r0
    3eac:	4643      	mov	r3, r8
    3eae:	9300      	str	r3, [sp, #0]
    3eb0:	9107      	str	r1, [sp, #28]
    3eb2:	4683      	mov	fp, r0
    3eb4:	e011      	b.n	3eda <fixed_window_recode+0x4e>
    3eb6:	9400      	str	r4, [sp, #0]
        }    
  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] = scalar[NWORDS64_ORDER-1] >> (W_VARBASE-1);
    3eb8:	465b      	mov	r3, fp
    3eba:	69db      	ldr	r3, [r3, #28]
    3ebc:	0719      	lsls	r1, r3, #28
    3ebe:	465a      	mov	r2, fp
    3ec0:	6992      	ldr	r2, [r2, #24]
    3ec2:	0912      	lsrs	r2, r2, #4
    3ec4:	430a      	orrs	r2, r1
    3ec6:	4659      	mov	r1, fp
    3ec8:	618a      	str	r2, [r1, #24]
    3eca:	091b      	lsrs	r3, r3, #4
    3ecc:	61cb      	str	r3, [r1, #28]
    3ece:	2304      	movs	r3, #4
    3ed0:	4698      	mov	r8, r3
    3ed2:	44c4      	add	ip, r8
    for (i = 0; i < t_VARBASE; i++)
    3ed4:	4663      	mov	r3, ip
    3ed6:	2bf8      	cmp	r3, #248	; 0xf8
    3ed8:	d069      	beq.n	3fae <fixed_window_recode+0x122>
        temp = (scalar[0] & val1) - val2;    // ki = (k mod 2^w)/2^(w-1)
    3eda:	465a      	mov	r2, fp
    3edc:	231f      	movs	r3, #31
    3ede:	6812      	ldr	r2, [r2, #0]
    3ee0:	4013      	ands	r3, r2
    3ee2:	9304      	str	r3, [sp, #16]
    3ee4:	2300      	movs	r3, #0
    3ee6:	9305      	str	r3, [sp, #20]
    3ee8:	9a04      	ldr	r2, [sp, #16]
    3eea:	9b05      	ldr	r3, [sp, #20]
    3eec:	2010      	movs	r0, #16
    3eee:	4240      	negs	r0, r0
    3ef0:	17c1      	asrs	r1, r0, #31
    3ef2:	1812      	adds	r2, r2, r0
    3ef4:	414b      	adcs	r3, r1
        sign_masks[i] = ~((unsigned int)(temp >> (RADIX64-1)));
    3ef6:	17d9      	asrs	r1, r3, #31
    3ef8:	9102      	str	r1, [sp, #8]
    3efa:	9103      	str	r1, [sp, #12]
    3efc:	43c9      	mvns	r1, r1
    3efe:	4650      	mov	r0, sl
    3f00:	4665      	mov	r5, ip
    3f02:	5141      	str	r1, [r0, r5]
        digits[i] = ((sign_masks[i] & (unsigned int)(temp ^ -temp)) ^ (unsigned int)-temp) >> 1;        
    3f04:	4250      	negs	r0, r2
    3f06:	0004      	movs	r4, r0
    3f08:	4054      	eors	r4, r2
    3f0a:	4021      	ands	r1, r4
    3f0c:	4048      	eors	r0, r1
    3f0e:	0840      	lsrs	r0, r0, #1
    3f10:	9907      	ldr	r1, [sp, #28]
    3f12:	5148      	str	r0, [r1, r5]
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    3f14:	4659      	mov	r1, fp
    3f16:	6809      	ldr	r1, [r1, #0]
    3f18:	1a8d      	subs	r5, r1, r2
    3f1a:	4055      	eors	r5, r2
    3f1c:	4659      	mov	r1, fp
    3f1e:	6809      	ldr	r1, [r1, #0]
    3f20:	4051      	eors	r1, r2
    3f22:	000c      	movs	r4, r1
    3f24:	432c      	orrs	r4, r5
    3f26:	4659      	mov	r1, fp
    3f28:	6809      	ldr	r1, [r1, #0]
    3f2a:	404c      	eors	r4, r1
    3f2c:	0fe1      	lsrs	r1, r4, #31
    3f2e:	4688      	mov	r8, r1
        borrow = ((temp >> (RADIX64-1)) - 1) & (uint64_t)is_digit_lessthan_ct((digit_t)scalar[0], (digit_t)temp);
    3f30:	9c02      	ldr	r4, [sp, #8]
    3f32:	9d03      	ldr	r5, [sp, #12]
    3f34:	2001      	movs	r0, #1
    3f36:	4240      	negs	r0, r0
    3f38:	17c1      	asrs	r1, r0, #31
    3f3a:	1824      	adds	r4, r4, r0
    3f3c:	414d      	adcs	r5, r1
    3f3e:	4641      	mov	r1, r8
    3f40:	4021      	ands	r1, r4
    3f42:	000e      	movs	r6, r1
    3f44:	2700      	movs	r7, #0
        res = scalar[0] - temp;              // k = (k - ki) / 2^(w-1) 
    3f46:	4659      	mov	r1, fp
    3f48:	6808      	ldr	r0, [r1, #0]
    3f4a:	6849      	ldr	r1, [r1, #4]
    3f4c:	1a80      	subs	r0, r0, r2
    3f4e:	4199      	sbcs	r1, r3
    3f50:	0002      	movs	r2, r0
    3f52:	000b      	movs	r3, r1
        scalar[0] = res;
    3f54:	4659      	mov	r1, fp
    3f56:	c10c      	stmia	r1!, {r2, r3}
    3f58:	9b00      	ldr	r3, [sp, #0]
    3f5a:	4698      	mov	r8, r3
    3f5c:	4648      	mov	r0, r9
            res = scalar[j];
    3f5e:	680b      	ldr	r3, [r1, #0]
    3f60:	684c      	ldr	r4, [r1, #4]
    3f62:	001a      	movs	r2, r3
    3f64:	0023      	movs	r3, r4
            scalar[j] = res - borrow;
    3f66:	0014      	movs	r4, r2
    3f68:	001d      	movs	r5, r3
    3f6a:	1ba4      	subs	r4, r4, r6
    3f6c:	41bd      	sbcs	r5, r7
    3f6e:	c130      	stmia	r1!, {r4, r5}
    3f70:	9200      	str	r2, [sp, #0]
    3f72:	9301      	str	r3, [sp, #4]
    3f74:	1b93      	subs	r3, r2, r6
    3f76:	4073      	eors	r3, r6
    3f78:	0034      	movs	r4, r6
    3f7a:	9d00      	ldr	r5, [sp, #0]
    3f7c:	406c      	eors	r4, r5
    3f7e:	4323      	orrs	r3, r4
    3f80:	406b      	eors	r3, r5
            borrow = (uint64_t)is_digit_lessthan_ct((digit_t)res, (digit_t)borrow); 
    3f82:	0fde      	lsrs	r6, r3, #31
    3f84:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    3f86:	4281      	cmp	r1, r0
    3f88:	d1e9      	bne.n	3f5e <fixed_window_recode+0xd2>
    3f8a:	4681      	mov	r9, r0
    3f8c:	4659      	mov	r1, fp
    3f8e:	4644      	mov	r4, r8
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
    3f90:	684b      	ldr	r3, [r1, #4]
    3f92:	0718      	lsls	r0, r3, #28
    3f94:	680a      	ldr	r2, [r1, #0]
    3f96:	0912      	lsrs	r2, r2, #4
    3f98:	4302      	orrs	r2, r0
    3f9a:	091b      	lsrs	r3, r3, #4
    3f9c:	6888      	ldr	r0, [r1, #8]
    3f9e:	0700      	lsls	r0, r0, #28
    3fa0:	600a      	str	r2, [r1, #0]
    3fa2:	4043      	eors	r3, r0
    3fa4:	604b      	str	r3, [r1, #4]
    3fa6:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
    3fa8:	428c      	cmp	r4, r1
    3faa:	d1f1      	bne.n	3f90 <fixed_window_recode+0x104>
    3fac:	e783      	b.n	3eb6 <fixed_window_recode+0x2a>
    3fae:	4658      	mov	r0, fp
    3fb0:	9b07      	ldr	r3, [sp, #28]
    3fb2:	469b      	mov	fp, r3

    } 
    sign_masks[t_VARBASE] = ~((unsigned int)(scalar[0] >> (RADIX64-1)));
    3fb4:	684b      	ldr	r3, [r1, #4]
    3fb6:	0fdb      	lsrs	r3, r3, #31
    3fb8:	43db      	mvns	r3, r3
    3fba:	21f8      	movs	r1, #248	; 0xf8
    3fbc:	4652      	mov	r2, sl
    3fbe:	5053      	str	r3, [r2, r1]
    digits[t_VARBASE] = ((sign_masks[t_VARBASE] & (unsigned int)(scalar[0] ^ (0-scalar[0]))) ^ (unsigned int)(0-scalar[0])) >> 1;    // kt = k  (t_VARBASE+1 digits)
    3fc0:	6802      	ldr	r2, [r0, #0]
    3fc2:	4250      	negs	r0, r2
    3fc4:	4042      	eors	r2, r0
    3fc6:	4013      	ands	r3, r2
    3fc8:	4043      	eors	r3, r0
    3fca:	085b      	lsrs	r3, r3, #1
    3fcc:	465a      	mov	r2, fp
    3fce:	5053      	str	r3, [r2, r1]
}
    3fd0:	b009      	add	sp, #36	; 0x24
    3fd2:	bc3c      	pop	{r2, r3, r4, r5}
    3fd4:	4690      	mov	r8, r2
    3fd6:	4699      	mov	r9, r3
    3fd8:	46a2      	mov	sl, r4
    3fda:	46ab      	mov	fp, r5
    3fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00003fe0 <ecc_precomp>:


void ecc_precomp(vpoint_extproj_t P, vpoint_extproj_precomp_t *T)
{ // Generation of the precomputation table used by the variable-base scalar multiplication ecc_mul().
    3fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fe2:	b0db      	sub	sp, #364	; 0x16c
    3fe4:	0004      	movs	r4, r0
    3fe6:	000d      	movs	r5, r1
    vpoint_extproj_precomp_t P2;
    vpoint_extproj_t Q;
    unsigned int i; 

    // Generating P2 = 2(X1,Y1,Z1,T1a,T1b) = (XP2+YP2,Y2P-X2P,ZP2,TP2) and T[0] = P = (X1+Y1,Y1-X1,2*Z1,2*d*T1)
    ecccopy(P, Q);
    3fe8:	4669      	mov	r1, sp
    3fea:	4e18      	ldr	r6, [pc, #96]	; (404c <ecc_precomp+0x6c>)
    3fec:	47b0      	blx	r6
    3fee:	0020      	movs	r0, r4
    3ff0:	3028      	adds	r0, #40	; 0x28
    3ff2:	a90a      	add	r1, sp, #40	; 0x28
    3ff4:	47b0      	blx	r6
    3ff6:	0020      	movs	r0, r4
    3ff8:	3050      	adds	r0, #80	; 0x50
    3ffa:	a914      	add	r1, sp, #80	; 0x50
    3ffc:	47b0      	blx	r6
    3ffe:	0020      	movs	r0, r4
    4000:	3078      	adds	r0, #120	; 0x78
    4002:	a91e      	add	r1, sp, #120	; 0x78
    4004:	47b0      	blx	r6
    4006:	0020      	movs	r0, r4
    4008:	30a0      	adds	r0, #160	; 0xa0
    400a:	a928      	add	r1, sp, #160	; 0xa0
    400c:	47b0      	blx	r6
    R1_to_R2(P, T[0]);
    400e:	0029      	movs	r1, r5
    4010:	0020      	movs	r0, r4
    4012:	4b0f      	ldr	r3, [pc, #60]	; (4050 <ecc_precomp+0x70>)
    4014:	4798      	blx	r3
    eccdouble(Q);
    4016:	4668      	mov	r0, sp
    4018:	4b0e      	ldr	r3, [pc, #56]	; (4054 <ecc_precomp+0x74>)
    401a:	4798      	blx	r3
    R1_to_R3(Q, P2);
    401c:	a932      	add	r1, sp, #200	; 0xc8
    401e:	4668      	mov	r0, sp
    4020:	4b0d      	ldr	r3, [pc, #52]	; (4058 <ecc_precomp+0x78>)
    4022:	4798      	blx	r3
    4024:	002c      	movs	r4, r5
    4026:	238c      	movs	r3, #140	; 0x8c
    4028:	00db      	lsls	r3, r3, #3
    402a:	469c      	mov	ip, r3
    402c:	4465      	add	r5, ip

    for (i = 1; i < NPOINTS_VARBASE; i++) {
        // T[i] = 2P+T[i-1] = (2*i+1)P = (XP2+YP2,Y2P-X2P,ZP2,TP2) + (X_(2*i-1)+Y_(2*i-1), Y_(2*i-1)-X_(2*i-1), 2Z_(2*i-1), 2T_(2*i-1)) = (X_(2*i+1)+Y_(2*i+1), Y_(2*i+1)-X_(2*i+1), 2Z_(2*i+1), 2dT_(2*i+1))
        eccadd_core(P2, T[i-1], Q);
    402e:	4f0b      	ldr	r7, [pc, #44]	; (405c <ecc_precomp+0x7c>)
        R1_to_R2(Q, T[i]);
    4030:	4e07      	ldr	r6, [pc, #28]	; (4050 <ecc_precomp+0x70>)
        eccadd_core(P2, T[i-1], Q);
    4032:	466a      	mov	r2, sp
    4034:	0021      	movs	r1, r4
    4036:	a832      	add	r0, sp, #200	; 0xc8
    4038:	47b8      	blx	r7
    403a:	34a0      	adds	r4, #160	; 0xa0
        R1_to_R2(Q, T[i]);
    403c:	0021      	movs	r1, r4
    403e:	4668      	mov	r0, sp
    4040:	47b0      	blx	r6
    for (i = 1; i < NPOINTS_VARBASE; i++) {
    4042:	42ac      	cmp	r4, r5
    4044:	d1f5      	bne.n	4032 <ecc_precomp+0x52>
    }
}
    4046:	b05b      	add	sp, #364	; 0x16c
    4048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    404a:	46c0      	nop			; (mov r8, r8)
    404c:	00002be7 	.word	0x00002be7
    4050:	00003401 	.word	0x00003401
    4054:	0000359d 	.word	0x0000359d
    4058:	000034ad 	.word	0x000034ad
    405c:	00003679 	.word	0x00003679

00004060 <cofactor_clearing>:


void cofactor_clearing(vpoint_extproj_t P)
{ // Co-factor clearing
    4060:	b570      	push	{r4, r5, r6, lr}
    4062:	b0a8      	sub	sp, #160	; 0xa0
    4064:	0004      	movs	r4, r0
  // Input: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: P = 392*P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    vpoint_extproj_precomp_t Q;
     
    R1_to_R2(P, Q);                      // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
    4066:	4669      	mov	r1, sp
    4068:	4b0d      	ldr	r3, [pc, #52]	; (40a0 <cofactor_clearing+0x40>)
    406a:	4798      	blx	r3
    eccdouble(P);                        // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    406c:	0020      	movs	r0, r4
    406e:	4d0d      	ldr	r5, [pc, #52]	; (40a4 <cofactor_clearing+0x44>)
    4070:	47a8      	blx	r5
    eccadd(Q, P);                        // P = P+Q using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    4072:	0021      	movs	r1, r4
    4074:	4668      	mov	r0, sp
    4076:	4e0c      	ldr	r6, [pc, #48]	; (40a8 <cofactor_clearing+0x48>)
    4078:	47b0      	blx	r6
    eccdouble(P);
    407a:	0020      	movs	r0, r4
    407c:	47a8      	blx	r5
    eccdouble(P);
    407e:	0020      	movs	r0, r4
    4080:	47a8      	blx	r5
    eccdouble(P);
    4082:	0020      	movs	r0, r4
    4084:	47a8      	blx	r5
    eccdouble(P);
    4086:	0020      	movs	r0, r4
    4088:	47a8      	blx	r5
    eccadd(Q, P);
    408a:	0021      	movs	r1, r4
    408c:	4668      	mov	r0, sp
    408e:	47b0      	blx	r6
    eccdouble(P);
    4090:	0020      	movs	r0, r4
    4092:	47a8      	blx	r5
    eccdouble(P);
    4094:	0020      	movs	r0, r4
    4096:	47a8      	blx	r5
    eccdouble(P);
    4098:	0020      	movs	r0, r4
    409a:	47a8      	blx	r5
}
    409c:	b028      	add	sp, #160	; 0xa0
    409e:	bd70      	pop	{r4, r5, r6, pc}
    40a0:	00003401 	.word	0x00003401
    40a4:	0000359d 	.word	0x0000359d
    40a8:	0000375d 	.word	0x0000375d

000040ac <ecc_mul>:


bool ecc_mul(point_t P, digit_t* k, point_t Q, bool clear_cofactor)
{ // Scalar multiplication Q = k*P
    40ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    40ae:	4c5a      	ldr	r4, [pc, #360]	; (4218 <ecc_mul+0x16c>)
    40b0:	44a5      	add	sp, r4
    40b2:	0007      	movs	r7, r0
    40b4:	000c      	movs	r4, r1
    40b6:	9201      	str	r2, [sp, #4]
    40b8:	001d      	movs	r5, r3
  // Output: Q = k*P in affine coordinates (x,y).
  // This function performs point validation and (if selected) cofactor clearing.
    vpoint_t A;
    vpoint_extproj_t R;
    vpoint_extproj_precomp_t S, Table[NPOINTS_VARBASE];
    unsigned int digits[t_VARBASE+1] = {0}, sign_masks[t_VARBASE+1] = {0};
    40ba:	22fc      	movs	r2, #252	; 0xfc
    40bc:	2100      	movs	r1, #0
    40be:	a849      	add	r0, sp, #292	; 0x124
    40c0:	4e56      	ldr	r6, [pc, #344]	; (421c <ecc_mul+0x170>)
    40c2:	47b0      	blx	r6
    40c4:	22fc      	movs	r2, #252	; 0xfc
    40c6:	2100      	movs	r1, #0
    40c8:	a80a      	add	r0, sp, #40	; 0x28
    40ca:	47b0      	blx	r6
    digit_t k_odd[NWORDS_ORDER];
    int i;

    point_setup(P, R);                                         // Convert to representation (X,Y,1,Ta,Tb)
    40cc:	23f7      	movs	r3, #247	; 0xf7
    40ce:	00db      	lsls	r3, r3, #3
    40d0:	aa02      	add	r2, sp, #8
    40d2:	4694      	mov	ip, r2
    40d4:	4463      	add	r3, ip
    40d6:	0019      	movs	r1, r3
    40d8:	0038      	movs	r0, r7
    40da:	4b51      	ldr	r3, [pc, #324]	; (4220 <ecc_mul+0x174>)
    40dc:	4798      	blx	r3

    if (ecc_point_validate(R) == false) {                      // Check if point lies on the curve
    40de:	23f7      	movs	r3, #247	; 0xf7
    40e0:	00db      	lsls	r3, r3, #3
    40e2:	aa02      	add	r2, sp, #8
    40e4:	4694      	mov	ip, r2
    40e6:	4463      	add	r3, ip
    40e8:	0018      	movs	r0, r3
    40ea:	4b4e      	ldr	r3, [pc, #312]	; (4224 <ecc_mul+0x178>)
    40ec:	4798      	blx	r3
    40ee:	9000      	str	r0, [sp, #0]
    40f0:	2800      	cmp	r0, #0
    40f2:	d100      	bne.n	40f6 <ecc_mul+0x4a>
    40f4:	e083      	b.n	41fe <ecc_mul+0x152>
        return false;
    }

    if (clear_cofactor == true) {
    40f6:	2d00      	cmp	r5, #0
    40f8:	d000      	beq.n	40fc <ecc_mul+0x50>
    40fa:	e084      	b.n	4206 <ecc_mul+0x15a>
        cofactor_clearing(R);
    }

    modulo_order(k, k_odd);                                    // k_odd = k mod (order)      
    40fc:	a902      	add	r1, sp, #8
    40fe:	0020      	movs	r0, r4
    4100:	4b49      	ldr	r3, [pc, #292]	; (4228 <ecc_mul+0x17c>)
    4102:	4798      	blx	r3
    conversion_to_odd(k_odd, k_odd);                           // Converting scalar to odd using the prime subgroup order 
    4104:	a902      	add	r1, sp, #8
    4106:	0008      	movs	r0, r1
    4108:	4b48      	ldr	r3, [pc, #288]	; (422c <ecc_mul+0x180>)
    410a:	4798      	blx	r3
    ecc_precomp(R, Table);                                     // Precomputation of points T[0],...,T[npoints-1] 
    410c:	a988      	add	r1, sp, #544	; 0x220
    410e:	23f7      	movs	r3, #247	; 0xf7
    4110:	00db      	lsls	r3, r3, #3
    4112:	aa02      	add	r2, sp, #8
    4114:	4694      	mov	ip, r2
    4116:	4463      	add	r3, ip
    4118:	0018      	movs	r0, r3
    411a:	4b45      	ldr	r3, [pc, #276]	; (4230 <ecc_mul+0x184>)
    411c:	4798      	blx	r3
    fixed_window_recode((uint64_t*)k_odd, digits, sign_masks); // Scalar recoding
    411e:	aa0a      	add	r2, sp, #40	; 0x28
    4120:	a949      	add	r1, sp, #292	; 0x124
    4122:	a802      	add	r0, sp, #8
    4124:	4b43      	ldr	r3, [pc, #268]	; (4234 <ecc_mul+0x188>)
    4126:	4798      	blx	r3
    table_lookup_1x8(Table, S, digits[t_VARBASE], sign_masks[t_VARBASE]);       
    4128:	9b48      	ldr	r3, [sp, #288]	; 0x120
    412a:	9a87      	ldr	r2, [sp, #540]	; 0x21c
    412c:	21e3      	movs	r1, #227	; 0xe3
    412e:	00c9      	lsls	r1, r1, #3
    4130:	a802      	add	r0, sp, #8
    4132:	4684      	mov	ip, r0
    4134:	4461      	add	r1, ip
    4136:	a888      	add	r0, sp, #544	; 0x220
    4138:	4c3f      	ldr	r4, [pc, #252]	; (4238 <ecc_mul+0x18c>)
    413a:	47a0      	blx	r4
    R2_to_R4(S, R);                                            // Conversion to representation (2X,2Y,2Z)
    413c:	23f7      	movs	r3, #247	; 0xf7
    413e:	00db      	lsls	r3, r3, #3
    4140:	aa02      	add	r2, sp, #8
    4142:	4694      	mov	ip, r2
    4144:	4463      	add	r3, ip
    4146:	0019      	movs	r1, r3
    4148:	23e3      	movs	r3, #227	; 0xe3
    414a:	00db      	lsls	r3, r3, #3
    414c:	4463      	add	r3, ip
    414e:	0018      	movs	r0, r3
    4150:	4b3a      	ldr	r3, [pc, #232]	; (423c <ecc_mul+0x190>)
    4152:	4798      	blx	r3
    4154:	24f4      	movs	r4, #244	; 0xf4
    
    for (i = (t_VARBASE-1); i >= 0; i--)
    {
        eccdouble(R);
    4156:	4d3a      	ldr	r5, [pc, #232]	; (4240 <ecc_mul+0x194>)
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    4158:	4f37      	ldr	r7, [pc, #220]	; (4238 <ecc_mul+0x18c>)
        eccdouble(R);
        eccdouble(R);
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    415a:	4e3a      	ldr	r6, [pc, #232]	; (4244 <ecc_mul+0x198>)
        eccdouble(R);
    415c:	23f7      	movs	r3, #247	; 0xf7
    415e:	00db      	lsls	r3, r3, #3
    4160:	aa02      	add	r2, sp, #8
    4162:	4694      	mov	ip, r2
    4164:	4463      	add	r3, ip
    4166:	0018      	movs	r0, r3
    4168:	47a8      	blx	r5
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    416a:	ab0a      	add	r3, sp, #40	; 0x28
    416c:	58e3      	ldr	r3, [r4, r3]
    416e:	aa49      	add	r2, sp, #292	; 0x124
    4170:	58a2      	ldr	r2, [r4, r2]
    4172:	21e3      	movs	r1, #227	; 0xe3
    4174:	00c9      	lsls	r1, r1, #3
    4176:	a802      	add	r0, sp, #8
    4178:	4684      	mov	ip, r0
    417a:	4461      	add	r1, ip
    417c:	a888      	add	r0, sp, #544	; 0x220
    417e:	47b8      	blx	r7
        eccdouble(R);
    4180:	23f7      	movs	r3, #247	; 0xf7
    4182:	00db      	lsls	r3, r3, #3
    4184:	aa02      	add	r2, sp, #8
    4186:	4694      	mov	ip, r2
    4188:	4463      	add	r3, ip
    418a:	0018      	movs	r0, r3
    418c:	47a8      	blx	r5
        eccdouble(R);
    418e:	23f7      	movs	r3, #247	; 0xf7
    4190:	00db      	lsls	r3, r3, #3
    4192:	aa02      	add	r2, sp, #8
    4194:	4694      	mov	ip, r2
    4196:	4463      	add	r3, ip
    4198:	0018      	movs	r0, r3
    419a:	47a8      	blx	r5
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    419c:	23f7      	movs	r3, #247	; 0xf7
    419e:	00db      	lsls	r3, r3, #3
    41a0:	aa02      	add	r2, sp, #8
    41a2:	4694      	mov	ip, r2
    41a4:	4463      	add	r3, ip
    41a6:	0018      	movs	r0, r3
    41a8:	47a8      	blx	r5
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    41aa:	23f7      	movs	r3, #247	; 0xf7
    41ac:	00db      	lsls	r3, r3, #3
    41ae:	aa02      	add	r2, sp, #8
    41b0:	4694      	mov	ip, r2
    41b2:	4463      	add	r3, ip
    41b4:	0019      	movs	r1, r3
    41b6:	23e3      	movs	r3, #227	; 0xe3
    41b8:	00db      	lsls	r3, r3, #3
    41ba:	4463      	add	r3, ip
    41bc:	0018      	movs	r0, r3
    41be:	47b0      	blx	r6
    41c0:	3c04      	subs	r4, #4
    for (i = (t_VARBASE-1); i >= 0; i--)
    41c2:	1d23      	adds	r3, r4, #4
    41c4:	d1ca      	bne.n	415c <ecc_mul+0xb0>
    }
    eccnorm(R, A);                                             // Conversion to affine coordinates (x,y) and modular correction. 
    41c6:	2388      	movs	r3, #136	; 0x88
    41c8:	011b      	lsls	r3, r3, #4
    41ca:	aa02      	add	r2, sp, #8
    41cc:	4694      	mov	ip, r2
    41ce:	4463      	add	r3, ip
    41d0:	0019      	movs	r1, r3
    41d2:	20f7      	movs	r0, #247	; 0xf7
    41d4:	00c0      	lsls	r0, r0, #3
    41d6:	4460      	add	r0, ip
    41d8:	4b1b      	ldr	r3, [pc, #108]	; (4248 <ecc_mul+0x19c>)
    41da:	4798      	blx	r3
    from_ext_to_std(A->x, Q->x);
    41dc:	9d01      	ldr	r5, [sp, #4]
    41de:	0029      	movs	r1, r5
    41e0:	2388      	movs	r3, #136	; 0x88
    41e2:	011b      	lsls	r3, r3, #4
    41e4:	aa02      	add	r2, sp, #8
    41e6:	4694      	mov	ip, r2
    41e8:	4463      	add	r3, ip
    41ea:	0018      	movs	r0, r3
    41ec:	4c17      	ldr	r4, [pc, #92]	; (424c <ecc_mul+0x1a0>)
    41ee:	47a0      	blx	r4
    from_ext_to_std(A->y, Q->y); 
    41f0:	0029      	movs	r1, r5
    41f2:	3120      	adds	r1, #32
    41f4:	4816      	ldr	r0, [pc, #88]	; (4250 <ecc_mul+0x1a4>)
    41f6:	ab02      	add	r3, sp, #8
    41f8:	469c      	mov	ip, r3
    41fa:	4460      	add	r0, ip
    41fc:	47a0      	blx	r4
    
    return true;
}
    41fe:	9800      	ldr	r0, [sp, #0]
    4200:	4b14      	ldr	r3, [pc, #80]	; (4254 <ecc_mul+0x1a8>)
    4202:	449d      	add	sp, r3
    4204:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cofactor_clearing(R);
    4206:	20f7      	movs	r0, #247	; 0xf7
    4208:	00c0      	lsls	r0, r0, #3
    420a:	ab02      	add	r3, sp, #8
    420c:	469c      	mov	ip, r3
    420e:	4460      	add	r0, ip
    4210:	4b11      	ldr	r3, [pc, #68]	; (4258 <ecc_mul+0x1ac>)
    4212:	4798      	blx	r3
    4214:	e772      	b.n	40fc <ecc_mul+0x50>
    4216:	46c0      	nop			; (mov r8, r8)
    4218:	fffff724 	.word	0xfffff724
    421c:	00005b87 	.word	0x00005b87
    4220:	0000386d 	.word	0x0000386d
    4224:	000038b1 	.word	0x000038b1
    4228:	00002af9 	.word	0x00002af9
    422c:	00002b31 	.word	0x00002b31
    4230:	00003fe1 	.word	0x00003fe1
    4234:	00003e8d 	.word	0x00003e8d
    4238:	00002c11 	.word	0x00002c11
    423c:	00003525 	.word	0x00003525
    4240:	0000359d 	.word	0x0000359d
    4244:	0000375d 	.word	0x0000375d
    4248:	000033b1 	.word	0x000033b1
    424c:	000028c9 	.word	0x000028c9
    4250:	000008a8 	.word	0x000008a8
    4254:	000008dc 	.word	0x000008dc
    4258:	00004061 	.word	0x00004061

0000425c <CompressedPublicKeyGeneration>:


/*************** ECDH USING COMPRESSED, 32-BYTE PUBLIC KEYS ***************/

ECCRYPTO_STATUS CompressedPublicKeyGeneration(const unsigned char* SecretKey, unsigned char* PublicKey)
{ // Compressed public key generation for key exchange
    425c:	b510      	push	{r4, lr}
    425e:	b090      	sub	sp, #64	; 0x40
    4260:	000c      	movs	r4, r1
  // It produces a public key PublicKey, which is the encoding of P = SecretKey*G (G is the generator).
  // Input:  32-byte SecretKey
  // Output: 32-byte PublicKey
    point_t P;
    
    ecc_mul_fixed((digit_t*)SecretKey, P);  // Compute public key                                       
    4262:	4669      	mov	r1, sp
    4264:	4b04      	ldr	r3, [pc, #16]	; (4278 <CompressedPublicKeyGeneration+0x1c>)
    4266:	4798      	blx	r3
	encode(P, PublicKey);                   // Encode public key
    4268:	0021      	movs	r1, r4
    426a:	4668      	mov	r0, sp
    426c:	4b03      	ldr	r3, [pc, #12]	; (427c <CompressedPublicKeyGeneration+0x20>)
    426e:	4798      	blx	r3

    return ECCRYPTO_SUCCESS;
}
    4270:	2001      	movs	r0, #1
    4272:	b010      	add	sp, #64	; 0x40
    4274:	bd10      	pop	{r4, pc}
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	00003aed 	.word	0x00003aed
    427c:	00001cb1 	.word	0x00001cb1

00004280 <CompressedKeyGeneration>:


ECCRYPTO_STATUS CompressedKeyGeneration(unsigned char* SecretKey, unsigned char* PublicKey)
{ // Keypair generation for key exchange. Public key is compressed to 32 bytes
    4280:	b570      	push	{r4, r5, r6, lr}
    4282:	0006      	movs	r6, r0
    4284:	000d      	movs	r5, r1
	//Status = RandomBytesFunction(SecretKey, 32);
	//if (Status != ECCRYPTO_SUCCESS) {
	//	goto cleanup;
	//}
  
    Status = CompressedPublicKeyGeneration(SecretKey, PublicKey);
    4286:	4b07      	ldr	r3, [pc, #28]	; (42a4 <CompressedKeyGeneration+0x24>)
    4288:	4798      	blx	r3
    428a:	0004      	movs	r4, r0
    if (Status != ECCRYPTO_SUCCESS) {
    428c:	2801      	cmp	r0, #1
    428e:	d006      	beq.n	429e <CompressedKeyGeneration+0x1e>
    }

    return ECCRYPTO_SUCCESS;

cleanup:
    clear_words((unsigned int*)SecretKey, 256/(sizeof(unsigned int)*8));
    4290:	2108      	movs	r1, #8
    4292:	0030      	movs	r0, r6
    4294:	4e04      	ldr	r6, [pc, #16]	; (42a8 <CompressedKeyGeneration+0x28>)
    4296:	47b0      	blx	r6
    clear_words((unsigned int*)PublicKey, 256/(sizeof(unsigned int)*8));
    4298:	2108      	movs	r1, #8
    429a:	0028      	movs	r0, r5
    429c:	47b0      	blx	r6

    return Status;
}
    429e:	0020      	movs	r0, r4
    42a0:	bd70      	pop	{r4, r5, r6, pc}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	0000425d 	.word	0x0000425d
    42a8:	0000339d 	.word	0x0000339d

000042ac <CompressedSecretAgreement>:


ECCRYPTO_STATUS CompressedSecretAgreement(const unsigned char* SecretKey, const unsigned char* PublicKey, unsigned char* SharedSecret)
{ // Secret agreement computation for key exchange using a compressed, 32-byte public key
    42ac:	b570      	push	{r4, r5, r6, lr}
    42ae:	b090      	sub	sp, #64	; 0x40
    42b0:	0006      	movs	r6, r0
    42b2:	0008      	movs	r0, r1
    42b4:	0015      	movs	r5, r2
  // Inputs: 32-byte SecretKey and 32-byte PublicKey
  // Output: 32-byte SharedSecret
    point_t A;
    ECCRYPTO_STATUS Status = ECCRYPTO_ERROR_UNKNOWN;

    if ((PublicKey[15] & 0x80) != 0) {  // Is bit128(PublicKey) = 0?
    42b6:	7bcb      	ldrb	r3, [r1, #15]
    42b8:	2b7f      	cmp	r3, #127	; 0x7f
    42ba:	d830      	bhi.n	431e <CompressedSecretAgreement+0x72>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
		goto cleanup;
    }

	Status = decode(PublicKey, A);    // Also verifies that A is on the curve. If it is not, it fails
    42bc:	4669      	mov	r1, sp
    42be:	4b19      	ldr	r3, [pc, #100]	; (4324 <CompressedSecretAgreement+0x78>)
    42c0:	4798      	blx	r3
    42c2:	0004      	movs	r4, r0
	if (Status != ECCRYPTO_SUCCESS) {
    42c4:	2801      	cmp	r0, #1
    42c6:	d006      	beq.n	42d6 <CompressedSecretAgreement+0x2a>
	memmove(SharedSecret, (unsigned char*)A->y, 32);

	return ECCRYPTO_SUCCESS;
    
cleanup:
    clear_words((unsigned int*)SharedSecret, 256/(sizeof(unsigned int)*8));
    42c8:	2108      	movs	r1, #8
    42ca:	0028      	movs	r0, r5
    42cc:	4b16      	ldr	r3, [pc, #88]	; (4328 <CompressedSecretAgreement+0x7c>)
    42ce:	4798      	blx	r3
    
    return Status;
}
    42d0:	0020      	movs	r0, r4
    42d2:	b010      	add	sp, #64	; 0x40
    42d4:	bd70      	pop	{r4, r5, r6, pc}
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    42d6:	2301      	movs	r3, #1
    42d8:	466a      	mov	r2, sp
    42da:	0031      	movs	r1, r6
    42dc:	4668      	mov	r0, sp
    42de:	4e13      	ldr	r6, [pc, #76]	; (432c <CompressedSecretAgreement+0x80>)
    42e0:	47b0      	blx	r6
	if (Status != ECCRYPTO_SUCCESS) {
    42e2:	2800      	cmp	r0, #0
    42e4:	d101      	bne.n	42ea <CompressedSecretAgreement+0x3e>
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    42e6:	2400      	movs	r4, #0
    42e8:	e7ee      	b.n	42c8 <CompressedSecretAgreement+0x1c>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    42ea:	2108      	movs	r1, #8
    42ec:	4668      	mov	r0, sp
    42ee:	4b10      	ldr	r3, [pc, #64]	; (4330 <CompressedSecretAgreement+0x84>)
    42f0:	4798      	blx	r3
    42f2:	2800      	cmp	r0, #0
    42f4:	d105      	bne.n	4302 <CompressedSecretAgreement+0x56>
	memmove(SharedSecret, (unsigned char*)A->y, 32);
    42f6:	2220      	movs	r2, #32
    42f8:	a908      	add	r1, sp, #32
    42fa:	0028      	movs	r0, r5
    42fc:	4b0d      	ldr	r3, [pc, #52]	; (4334 <CompressedSecretAgreement+0x88>)
    42fe:	4798      	blx	r3
	return ECCRYPTO_SUCCESS;
    4300:	e7e6      	b.n	42d0 <CompressedSecretAgreement+0x24>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    4302:	2107      	movs	r1, #7
    4304:	a809      	add	r0, sp, #36	; 0x24
    4306:	4b0a      	ldr	r3, [pc, #40]	; (4330 <CompressedSecretAgreement+0x84>)
    4308:	4798      	blx	r3
    430a:	2800      	cmp	r0, #0
    430c:	d0f3      	beq.n	42f6 <CompressedSecretAgreement+0x4a>
    430e:	9908      	ldr	r1, [sp, #32]
    4310:	1e4b      	subs	r3, r1, #1
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    4312:	2201      	movs	r2, #1
    4314:	1a52      	subs	r2, r2, r1
    4316:	4313      	orrs	r3, r2
    if (is_neutral_point(A)) {  // Is output = neutral point (0,1)?
    4318:	d4ed      	bmi.n	42f6 <CompressedSecretAgreement+0x4a>
		Status = ECCRYPTO_ERROR_SHARED_KEY;
    431a:	2407      	movs	r4, #7
    431c:	e7d4      	b.n	42c8 <CompressedSecretAgreement+0x1c>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
    431e:	2406      	movs	r4, #6
    4320:	e7d2      	b.n	42c8 <CompressedSecretAgreement+0x1c>
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	00001cf9 	.word	0x00001cf9
    4328:	0000339d 	.word	0x0000339d
    432c:	000040ad 	.word	0x000040ad
    4330:	00001c8d 	.word	0x00001c8d
    4334:	00005b51 	.word	0x00005b51

00004338 <internalPermutation>:
static void messageFold(const uint8_t *message, uint8_t *cells){
    cells[0] ^= message[0];
    cells[1] ^= message[1];
}

static void internalPermutation(uint8_t *cells){
    4338:	b5f0      	push	{r4, r5, r6, r7, lr}
    433a:	46de      	mov	lr, fp
    433c:	4657      	mov	r7, sl
    433e:	464e      	mov	r6, r9
    4340:	4645      	mov	r5, r8
    4342:	b5e0      	push	{r5, r6, r7, lr}
    4344:	b08b      	sub	sp, #44	; 0x2c
    4346:	0007      	movs	r7, r0
    int round;
    for(round=0;round<12;round++){
    4348:	2300      	movs	r3, #0
    434a:	9307      	str	r3, [sp, #28]
    434c:	e0c6      	b.n	44dc <internalPermutation+0x1a4>
    for(i=0;i<D_VAL;i++){
        tmp_cells[i]=0;
        for(j=0;j<D_VAL;j++){
            uint8_t nib = cells[(col+(D_VAL*j))/2];
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
            else{nib = (nib & 0x0F);}
    434e:	200f      	movs	r0, #15
    4350:	4002      	ands	r2, r0
    4352:	e03e      	b.n	43d2 <internalPermutation+0x9a>
                ret=MMUL[loc];
                b=0;
            }
            else{
                // Account for odd value as (a x 3) is (a x (2 + 1))
                if(b&1){
    4354:	2301      	movs	r3, #1
    4356:	4223      	tst	r3, r4
    4358:	d003      	beq.n	4362 <internalPermutation+0x2a>
                    odd ^= ret;
    435a:	4661      	mov	r1, ip
    435c:	4051      	eors	r1, r2
    435e:	b2cb      	uxtb	r3, r1
    4360:	469c      	mov	ip, r3
                }

                loc=ret; // loc holds the current value to be multiplied by 2
                // (a x 2) not found
                if(MMUL[32 + loc] > 0xF){
    4362:	9204      	str	r2, [sp, #16]
    4364:	2320      	movs	r3, #32
    4366:	4698      	mov	r8, r3
    4368:	4490      	add	r8, r2
    436a:	4b83      	ldr	r3, [pc, #524]	; (4578 <internalPermutation+0x240>)
    436c:	4641      	mov	r1, r8
    436e:	5c59      	ldrb	r1, [r3, r1]
    4370:	290f      	cmp	r1, #15
    4372:	d912      	bls.n	439a <internalPermutation+0x62>
                    ret = ret << 1;
    4374:	0052      	lsls	r2, r2, #1
    4376:	b2d1      	uxtb	r1, r2
                    // XOR with constant if shifted results is larger than 4 bits
                    if(ret&0x10){ret^=G_CON;}
    4378:	2310      	movs	r3, #16
    437a:	420b      	tst	r3, r1
    437c:	d002      	beq.n	4384 <internalPermutation+0x4c>
    437e:	3b0d      	subs	r3, #13
    4380:	4059      	eors	r1, r3
    4382:	b2c9      	uxtb	r1, r1

                    ret &= 0xF; // Only care about lower nibble
    4384:	230f      	movs	r3, #15
    4386:	4019      	ands	r1, r3
                    MMUL[32 + loc] = ret;
    4388:	4b7b      	ldr	r3, [pc, #492]	; (4578 <internalPermutation+0x240>)
    438a:	4642      	mov	r2, r8
    438c:	5499      	strb	r1, [r3, r2]
                    MMUL[16*loc + 2] = ret;
    438e:	9b04      	ldr	r3, [sp, #16]
    4390:	011a      	lsls	r2, r3, #4
    4392:	4b79      	ldr	r3, [pc, #484]	; (4578 <internalPermutation+0x240>)
    4394:	4698      	mov	r8, r3
    4396:	4442      	add	r2, r8
    4398:	7091      	strb	r1, [r2, #2]
                }
                else{
                    ret = MMUL[32 + loc];
                }
                b = b >> 1;
    439a:	0864      	lsrs	r4, r4, #1
    439c:	b2e4      	uxtb	r4, r4
    439e:	000a      	movs	r2, r1
    43a0:	e034      	b.n	440c <internalPermutation+0xd4>
    43a2:	9b01      	ldr	r3, [sp, #4]
        while(b>1){
    43a4:	0011      	movs	r1, r2
    43a6:	e03b      	b.n	4420 <internalPermutation+0xe8>
        if(b==1){return a;} // Multiply a by 1 is a
    43a8:	0003      	movs	r3, r0
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    43aa:	aa08      	add	r2, sp, #32
    43ac:	5cba      	ldrb	r2, [r7, r2]
    43ae:	4053      	eors	r3, r2
    43b0:	aa08      	add	r2, sp, #32
    43b2:	54bb      	strb	r3, [r7, r2]
    43b4:	3506      	adds	r5, #6
    43b6:	3601      	adds	r6, #1
        for(j=0;j<D_VAL;j++){
    43b8:	2d24      	cmp	r5, #36	; 0x24
    43ba:	d03f      	beq.n	443c <internalPermutation+0x104>
            uint8_t nib = cells[(col+(D_VAL*j))/2];
    43bc:	4653      	mov	r3, sl
    43be:	18ea      	adds	r2, r5, r3
    43c0:	0fd3      	lsrs	r3, r2, #31
    43c2:	189b      	adds	r3, r3, r2
    43c4:	105b      	asrs	r3, r3, #1
    43c6:	465a      	mov	r2, fp
    43c8:	5cd2      	ldrb	r2, [r2, r3]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    43ca:	464b      	mov	r3, r9
    43cc:	2b00      	cmp	r3, #0
    43ce:	d1be      	bne.n	434e <internalPermutation+0x16>
    43d0:	0912      	lsrs	r2, r2, #4
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    43d2:	7831      	ldrb	r1, [r6, #0]
    uint8_t ret = MMUL[(16*a)+b];
    43d4:	0108      	lsls	r0, r1, #4
    43d6:	4b68      	ldr	r3, [pc, #416]	; (4578 <internalPermutation+0x240>)
    43d8:	181b      	adds	r3, r3, r0
    43da:	5c9b      	ldrb	r3, [r3, r2]
    if(ret > 0x0F){
    43dc:	2b0f      	cmp	r3, #15
    43de:	d9e4      	bls.n	43aa <internalPermutation+0x72>
    a &= 0x0F;
    43e0:	230f      	movs	r3, #15
    43e2:	0018      	movs	r0, r3
    43e4:	4008      	ands	r0, r1
    b &= 0x0F;
    43e6:	4013      	ands	r3, r2
        if(a<b){SWAP(a,b);} // Want a to be larger to reduce computation
    43e8:	4298      	cmp	r0, r3
    43ea:	d206      	bcs.n	43fa <internalPermutation+0xc2>
    43ec:	4051      	eors	r1, r2
    43ee:	404a      	eors	r2, r1
    43f0:	200f      	movs	r0, #15
    43f2:	0003      	movs	r3, r0
    43f4:	4013      	ands	r3, r2
    43f6:	4051      	eors	r1, r2
    43f8:	4008      	ands	r0, r1
        if(b==0){return b;} // Multiply a by 0 is 0
    43fa:	2b00      	cmp	r3, #0
    43fc:	d0d5      	beq.n	43aa <internalPermutation+0x72>
        if(b==1){return a;} // Multiply a by 1 is a
    43fe:	2b01      	cmp	r3, #1
    4400:	d0d2      	beq.n	43a8 <internalPermutation+0x70>
    4402:	0002      	movs	r2, r0
    4404:	001c      	movs	r4, r3
    4406:	2100      	movs	r1, #0
    4408:	468c      	mov	ip, r1
    440a:	9301      	str	r3, [sp, #4]
        while(b>1){
    440c:	2c01      	cmp	r4, #1
    440e:	d9c8      	bls.n	43a2 <internalPermutation+0x6a>
            loc=(ret*16)+b;
    4410:	0111      	lsls	r1, r2, #4
    4412:	1861      	adds	r1, r4, r1
            if(MMUL[loc]<0x10){
    4414:	b2c9      	uxtb	r1, r1
    4416:	4b58      	ldr	r3, [pc, #352]	; (4578 <internalPermutation+0x240>)
    4418:	5c59      	ldrb	r1, [r3, r1]
    441a:	290f      	cmp	r1, #15
    441c:	d89a      	bhi.n	4354 <internalPermutation+0x1c>
    441e:	9b01      	ldr	r3, [sp, #4]
            }
        }
        ret ^= odd; // One last "add" if multiplying by odd number at any point
    4420:	4662      	mov	r2, ip
    4422:	404a      	eors	r2, r1
    4424:	0011      	movs	r1, r2
        ret &= 0xF; // Only care about lower nibble
    4426:	220f      	movs	r2, #15
    4428:	4011      	ands	r1, r2

        // Update map so won't have to recompute a x b
        MMUL[(a*16)+b_orig]=ret;
    442a:	4a53      	ldr	r2, [pc, #332]	; (4578 <internalPermutation+0x240>)
    442c:	0104      	lsls	r4, r0, #4
    442e:	1914      	adds	r4, r2, r4
    4430:	54e1      	strb	r1, [r4, r3]
        MMUL[(b_orig*16)+a]=ret;
    4432:	011b      	lsls	r3, r3, #4
    4434:	18d2      	adds	r2, r2, r3
    4436:	5411      	strb	r1, [r2, r0]
        ret &= 0xF; // Only care about lower nibble
    4438:	000b      	movs	r3, r1
    443a:	e7b6      	b.n	43aa <internalPermutation+0x72>
    for(i=0;i<D_VAL;i++){
    443c:	9b02      	ldr	r3, [sp, #8]
    443e:	3301      	adds	r3, #1
    4440:	9302      	str	r3, [sp, #8]
    4442:	9a03      	ldr	r2, [sp, #12]
    4444:	3206      	adds	r2, #6
    4446:	9203      	str	r2, [sp, #12]
    4448:	2b06      	cmp	r3, #6
    444a:	d00b      	beq.n	4464 <internalPermutation+0x12c>
    444c:	9902      	ldr	r1, [sp, #8]
    444e:	000f      	movs	r7, r1
        tmp_cells[i]=0;
    4450:	2300      	movs	r3, #0
    4452:	aa08      	add	r2, sp, #32
    4454:	548b      	strb	r3, [r1, r2]
    4456:	9e03      	ldr	r6, [sp, #12]
    4458:	9d06      	ldr	r5, [sp, #24]
    445a:	33ff      	adds	r3, #255	; 0xff
    445c:	9a05      	ldr	r2, [sp, #20]
    445e:	401a      	ands	r2, r3
    4460:	4692      	mov	sl, r2
    4462:	e7ab      	b.n	43bc <internalPermutation+0x84>
    4464:	9b05      	ldr	r3, [sp, #20]
    4466:	469c      	mov	ip, r3
    4468:	464f      	mov	r7, r9
    446a:	4650      	mov	r0, sl
    for(i=0;i<D_VAL;i++){
    446c:	2100      	movs	r1, #0
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    446e:	240f      	movs	r4, #15
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    4470:	465a      	mov	r2, fp
    4472:	e00d      	b.n	4490 <internalPermutation+0x158>
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    4474:	0fc3      	lsrs	r3, r0, #31
    4476:	181b      	adds	r3, r3, r0
    4478:	105b      	asrs	r3, r3, #1
    447a:	18d3      	adds	r3, r2, r3
    447c:	781d      	ldrb	r5, [r3, #0]
    447e:	43a5      	bics	r5, r4
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    4480:	ae08      	add	r6, sp, #32
    4482:	5d8e      	ldrb	r6, [r1, r6]
    4484:	4335      	orrs	r5, r6
    4486:	701d      	strb	r5, [r3, #0]
    for(i=0;i<D_VAL;i++){
    4488:	3101      	adds	r1, #1
    448a:	3006      	adds	r0, #6
    448c:	2906      	cmp	r1, #6
    448e:	d00d      	beq.n	44ac <internalPermutation+0x174>
        if(col%2 == 0){
    4490:	2f00      	cmp	r7, #0
    4492:	d1ef      	bne.n	4474 <internalPermutation+0x13c>
            cells[(col+(D_VAL*i))/2] &= 0x0F;
    4494:	0fc3      	lsrs	r3, r0, #31
    4496:	181b      	adds	r3, r3, r0
    4498:	105b      	asrs	r3, r3, #1
    449a:	18d3      	adds	r3, r2, r3
    449c:	781d      	ldrb	r5, [r3, #0]
    449e:	4025      	ands	r5, r4
            cells[(col+(D_VAL*i))/2] |= (tmp_cells[i] << 4);
    44a0:	ae08      	add	r6, sp, #32
    44a2:	5d8e      	ldrb	r6, [r1, r6]
    44a4:	0136      	lsls	r6, r6, #4
    44a6:	4335      	orrs	r5, r6
    44a8:	701d      	strb	r5, [r3, #0]
    44aa:	e7ed      	b.n	4488 <internalPermutation+0x150>
    44ac:	4693      	mov	fp, r2
    for(i=0;i<D_VAL;i++){
    44ae:	2301      	movs	r3, #1
    44b0:	4698      	mov	r8, r3
    44b2:	44c4      	add	ip, r8
    44b4:	4663      	mov	r3, ip
    44b6:	2b06      	cmp	r3, #6
    44b8:	d00a      	beq.n	44d0 <internalPermutation+0x198>
    44ba:	4b30      	ldr	r3, [pc, #192]	; (457c <internalPermutation+0x244>)
    44bc:	9303      	str	r3, [sp, #12]
    for(i=0;i<D_VAL;i++){
    44be:	2300      	movs	r3, #0
    44c0:	9302      	str	r3, [sp, #8]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    44c2:	4667      	mov	r7, ip
    44c4:	3301      	adds	r3, #1
    44c6:	401f      	ands	r7, r3
    44c8:	4663      	mov	r3, ip
    44ca:	9305      	str	r3, [sp, #20]
    44cc:	46b9      	mov	r9, r7
    44ce:	e7bd      	b.n	444c <internalPermutation+0x114>
    44d0:	0017      	movs	r7, r2
    for(round=0;round<12;round++){
    44d2:	9b07      	ldr	r3, [sp, #28]
    44d4:	3301      	adds	r3, #1
    44d6:	9307      	str	r3, [sp, #28]
    44d8:	2b0c      	cmp	r3, #12
    44da:	d046      	beq.n	456a <internalPermutation+0x232>
        cells[i*T_VAL/D_VAL] ^= (RC[round] ^ IC[i]) << 4;
    44dc:	4b28      	ldr	r3, [pc, #160]	; (4580 <internalPermutation+0x248>)
    44de:	9a07      	ldr	r2, [sp, #28]
    44e0:	5cd3      	ldrb	r3, [r2, r3]
    44e2:	4698      	mov	r8, r3
    44e4:	4d27      	ldr	r5, [pc, #156]	; (4584 <internalPermutation+0x24c>)
    44e6:	2400      	movs	r4, #0
    44e8:	4e27      	ldr	r6, [pc, #156]	; (4588 <internalPermutation+0x250>)
    44ea:	003b      	movs	r3, r7
    44ec:	4647      	mov	r7, r8
    44ee:	4698      	mov	r8, r3
    44f0:	2106      	movs	r1, #6
    44f2:	0020      	movs	r0, r4
    44f4:	47b0      	blx	r6
    44f6:	4440      	add	r0, r8
    44f8:	782b      	ldrb	r3, [r5, #0]
    44fa:	407b      	eors	r3, r7
    44fc:	011b      	lsls	r3, r3, #4
    44fe:	7802      	ldrb	r2, [r0, #0]
    4500:	4053      	eors	r3, r2
    4502:	7003      	strb	r3, [r0, #0]
    4504:	3412      	adds	r4, #18
    4506:	3501      	adds	r5, #1
    for(i=0;i<D_VAL;i++){
    4508:	2c6c      	cmp	r4, #108	; 0x6c
    450a:	d1f1      	bne.n	44f0 <internalPermutation+0x1b8>
    450c:	4647      	mov	r7, r8
    450e:	4641      	mov	r1, r8
    4510:	4645      	mov	r5, r8
    4512:	3512      	adds	r5, #18
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    4514:	481d      	ldr	r0, [pc, #116]	; (458c <internalPermutation+0x254>)
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    4516:	3c5d      	subs	r4, #93	; 0x5d
        uint16_t tmp=cells[i];
    4518:	780a      	ldrb	r2, [r1, #0]
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    451a:	0913      	lsrs	r3, r2, #4
    451c:	5cc3      	ldrb	r3, [r0, r3]
    451e:	011b      	lsls	r3, r3, #4
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    4520:	4022      	ands	r2, r4
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    4522:	5c82      	ldrb	r2, [r0, r2]
    4524:	4313      	orrs	r3, r2
    4526:	700b      	strb	r3, [r1, #0]
    4528:	3101      	adds	r1, #1
    for(i=0;i<T_VAL;i++){
    452a:	428d      	cmp	r5, r1
    452c:	d1f4      	bne.n	4518 <internalPermutation+0x1e0>
    452e:	1cf9      	adds	r1, r7, #3
    4530:	2314      	movs	r3, #20
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    4532:	2018      	movs	r0, #24
    4534:	001a      	movs	r2, r3
        tmp1|=(cells[i*3]<<16);
    4536:	780b      	ldrb	r3, [r1, #0]
    4538:	041b      	lsls	r3, r3, #16
        tmp1|=(cells[(i*3)+1]<<8);
    453a:	784c      	ldrb	r4, [r1, #1]
    453c:	0224      	lsls	r4, r4, #8
        tmp1|=(cells[(i*3)+2]);
    453e:	4323      	orrs	r3, r4
    4540:	788c      	ldrb	r4, [r1, #2]
    4542:	4323      	orrs	r3, r4
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    4544:	1a84      	subs	r4, r0, r2
    4546:	001d      	movs	r5, r3
    4548:	40a5      	lsls	r5, r4
    454a:	40d3      	lsrs	r3, r2
    454c:	432b      	orrs	r3, r5
        cells[i*3]=(tmp1 & 0xFF0000) >> 16;
    454e:	0c1c      	lsrs	r4, r3, #16
    4550:	700c      	strb	r4, [r1, #0]
        cells[(i*3)+1] = (tmp1 & 0xFF00) >> 8;
    4552:	0a1c      	lsrs	r4, r3, #8
    4554:	704c      	strb	r4, [r1, #1]
        cells[(i*3)+2] = (tmp1 & 0xFF);
    4556:	708b      	strb	r3, [r1, #2]
    4558:	3103      	adds	r1, #3
    455a:	3a04      	subs	r2, #4
    for(i=1;i<D_VAL;i++){
    455c:	2a00      	cmp	r2, #0
    455e:	d1ea      	bne.n	4536 <internalPermutation+0x1fe>
    4560:	9206      	str	r2, [sp, #24]
    4562:	2300      	movs	r3, #0
    4564:	469c      	mov	ip, r3
    4566:	46bb      	mov	fp, r7
    4568:	e7a7      	b.n	44ba <internalPermutation+0x182>
}
    456a:	b00b      	add	sp, #44	; 0x2c
    456c:	bc3c      	pop	{r2, r3, r4, r5}
    456e:	4690      	mov	r8, r2
    4570:	4699      	mov	r9, r3
    4572:	46a2      	mov	sl, r4
    4574:	46ab      	mov	fp, r5
    4576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4578:	20000004 	.word	0x20000004
    457c:	00009338 	.word	0x00009338
    4580:	00009364 	.word	0x00009364
    4584:	0000935c 	.word	0x0000935c
    4588:	000058c9 	.word	0x000058c9
    458c:	00009370 	.word	0x00009370

00004590 <photon128>:
void photon128(uint8_t *message, const int32_t message_bytes, uint8_t *hash){
    4590:	b5f0      	push	{r4, r5, r6, r7, lr}
    4592:	46d6      	mov	lr, sl
    4594:	464f      	mov	r7, r9
    4596:	4646      	mov	r6, r8
    4598:	b5c0      	push	{r6, r7, lr}
    459a:	b088      	sub	sp, #32
    459c:	0005      	movs	r5, r0
    459e:	9001      	str	r0, [sp, #4]
    45a0:	4689      	mov	r9, r1
    45a2:	0016      	movs	r6, r2
    memset((uint8_t *) cells,0,T_VAL-3);
    45a4:	ac03      	add	r4, sp, #12
    45a6:	220f      	movs	r2, #15
    45a8:	2100      	movs	r1, #0
    45aa:	0020      	movs	r0, r4
    45ac:	4b30      	ldr	r3, [pc, #192]	; (4670 <photon128+0xe0>)
    45ae:	4798      	blx	r3
    cells[15]=0x20;
    45b0:	2320      	movs	r3, #32
    45b2:	73e3      	strb	r3, [r4, #15]
    cells[16]=0x10;
    45b4:	3b10      	subs	r3, #16
    45b6:	7423      	strb	r3, [r4, #16]
    cells[17]=0x10;
    45b8:	7463      	strb	r3, [r4, #17]
    for(i=0;i<message_bytes/R_VAL;i++){
    45ba:	464b      	mov	r3, r9
    45bc:	0fdb      	lsrs	r3, r3, #31
    45be:	444b      	add	r3, r9
    45c0:	105b      	asrs	r3, r3, #1
    45c2:	469a      	mov	sl, r3
    45c4:	2b00      	cmp	r3, #0
    45c6:	dd49      	ble.n	465c <photon128+0xcc>
    45c8:	005b      	lsls	r3, r3, #1
    45ca:	46a8      	mov	r8, r5
    45cc:	4498      	add	r8, r3
    cells[0] ^= message[0];
    45ce:	ac03      	add	r4, sp, #12
        internalPermutation(&cells[0]);
    45d0:	4f28      	ldr	r7, [pc, #160]	; (4674 <photon128+0xe4>)
    cells[0] ^= message[0];
    45d2:	7823      	ldrb	r3, [r4, #0]
    45d4:	782a      	ldrb	r2, [r5, #0]
    45d6:	4053      	eors	r3, r2
    45d8:	7023      	strb	r3, [r4, #0]
    cells[1] ^= message[1];
    45da:	7863      	ldrb	r3, [r4, #1]
    45dc:	786a      	ldrb	r2, [r5, #1]
    45de:	4053      	eors	r3, r2
    45e0:	7063      	strb	r3, [r4, #1]
        internalPermutation(&cells[0]);
    45e2:	0020      	movs	r0, r4
    45e4:	47b8      	blx	r7
    45e6:	3502      	adds	r5, #2
    for(i=0;i<message_bytes/R_VAL;i++){
    45e8:	4545      	cmp	r5, r8
    45ea:	d1f2      	bne.n	45d2 <photon128+0x42>
    45ec:	4653      	mov	r3, sl
    if(message_bytes%2){
    45ee:	464a      	mov	r2, r9
    45f0:	07d2      	lsls	r2, r2, #31
    45f2:	d535      	bpl.n	4660 <photon128+0xd0>
        cells[0] ^= message[i*2];
    45f4:	aa03      	add	r2, sp, #12
    45f6:	005b      	lsls	r3, r3, #1
    45f8:	9901      	ldr	r1, [sp, #4]
    45fa:	5c5b      	ldrb	r3, [r3, r1]
    45fc:	7811      	ldrb	r1, [r2, #0]
    45fe:	404b      	eors	r3, r1
    4600:	7013      	strb	r3, [r2, #0]
        cells[1] ^= 0x80; //Padding
    4602:	7851      	ldrb	r1, [r2, #1]
    4604:	2380      	movs	r3, #128	; 0x80
    4606:	425b      	negs	r3, r3
    4608:	404b      	eors	r3, r1
    460a:	7053      	strb	r3, [r2, #1]
    internalPermutation(&cells[0]);
    460c:	ac03      	add	r4, sp, #12
    460e:	0020      	movs	r0, r4
    4610:	4b18      	ldr	r3, [pc, #96]	; (4674 <photon128+0xe4>)
    4612:	4798      	blx	r3
    memset(hash,0,N_VAL);
    4614:	2210      	movs	r2, #16
    4616:	2100      	movs	r1, #0
    4618:	0030      	movs	r0, r6
    461a:	4b15      	ldr	r3, [pc, #84]	; (4670 <photon128+0xe0>)
    461c:	4798      	blx	r3
    hash[0] |= cells[0];
    461e:	7833      	ldrb	r3, [r6, #0]
    4620:	7822      	ldrb	r2, [r4, #0]
    4622:	4313      	orrs	r3, r2
    4624:	7033      	strb	r3, [r6, #0]
    hash[1] |= cells[1];
    4626:	7873      	ldrb	r3, [r6, #1]
    4628:	7862      	ldrb	r2, [r4, #1]
    462a:	4313      	orrs	r3, r2
    462c:	7073      	strb	r3, [r6, #1]
    462e:	1cb4      	adds	r4, r6, #2
    4630:	3610      	adds	r6, #16
        internalPermutation(&cells[0]);
    4632:	ad03      	add	r5, sp, #12
    4634:	4f0f      	ldr	r7, [pc, #60]	; (4674 <photon128+0xe4>)
    4636:	0028      	movs	r0, r5
    4638:	47b8      	blx	r7
        hash[2*i] |= cells[0];
    463a:	7823      	ldrb	r3, [r4, #0]
    463c:	782a      	ldrb	r2, [r5, #0]
    463e:	4313      	orrs	r3, r2
    4640:	7023      	strb	r3, [r4, #0]
        hash[(2*i)+1] |= cells[1];
    4642:	7863      	ldrb	r3, [r4, #1]
    4644:	786a      	ldrb	r2, [r5, #1]
    4646:	4313      	orrs	r3, r2
    4648:	7063      	strb	r3, [r4, #1]
    464a:	3402      	adds	r4, #2
    for(i=1;i<N_VAL/2;i++){
    464c:	42b4      	cmp	r4, r6
    464e:	d1f2      	bne.n	4636 <photon128+0xa6>
}
    4650:	b008      	add	sp, #32
    4652:	bc1c      	pop	{r2, r3, r4}
    4654:	4690      	mov	r8, r2
    4656:	4699      	mov	r9, r3
    4658:	46a2      	mov	sl, r4
    465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(i=0;i<message_bytes/R_VAL;i++){
    465c:	2300      	movs	r3, #0
    465e:	e7c6      	b.n	45ee <photon128+0x5e>
        cells[0] ^= 0x80;
    4660:	aa03      	add	r2, sp, #12
    4662:	7811      	ldrb	r1, [r2, #0]
    4664:	2380      	movs	r3, #128	; 0x80
    4666:	425b      	negs	r3, r3
    4668:	404b      	eors	r3, r1
    466a:	7013      	strb	r3, [r2, #0]
    466c:	e7ce      	b.n	460c <photon128+0x7c>
    466e:	46c0      	nop			; (mov r8, r8)
    4670:	00005b87 	.word	0x00005b87
    4674:	00004339 	.word	0x00004339

00004678 <addRoundKey>:

    printf("\nEnd PRESENT-80 Test\n\n");

}

static void addRoundKey(uint8_t *state, uint8_t *round_key){
    4678:	b510      	push	{r4, lr}
  int i;
  for(i=0;i<8;i++){
    467a:	2300      	movs	r3, #0
    state[i]=(state[i])^(round_key[i]);
    467c:	5cc2      	ldrb	r2, [r0, r3]
    467e:	5ccc      	ldrb	r4, [r1, r3]
    4680:	4062      	eors	r2, r4
    4682:	54c2      	strb	r2, [r0, r3]
  for(i=0;i<8;i++){
    4684:	3301      	adds	r3, #1
    4686:	2b08      	cmp	r3, #8
    4688:	d1f8      	bne.n	467c <addRoundKey+0x4>
  }
}
    468a:	bd10      	pop	{r4, pc}

0000468c <updateKey80>:
    state[i] |= dummy2[(i*8)+6] << 6;
    state[i] |= dummy2[(i*8)+7] << 7;
  }
}

static void updateKey80(uint8_t *key, uint8_t *round_key, int round){
    468c:	b5f0      	push	{r4, r5, r6, r7, lr}
    468e:	46c6      	mov	lr, r8
    4690:	b500      	push	{lr}
    4692:	b086      	sub	sp, #24
    4694:	0007      	movs	r7, r0
    4696:	9101      	str	r1, [sp, #4]
    4698:	4690      	mov	r8, r2
  uint8_t new_key[10];
  int i;
  uint8_t box_out;
  uint8_t xor_out;

  for(i=0;i<10;i++){
    469a:	2300      	movs	r3, #0
    new_key[i]=0;
    469c:	a903      	add	r1, sp, #12
    469e:	2200      	movs	r2, #0
    46a0:	545a      	strb	r2, [r3, r1]
  for(i=0;i<10;i++){
    46a2:	3301      	adds	r3, #1
    46a4:	2b0a      	cmp	r3, #10
    46a6:	d1fb      	bne.n	46a0 <updateKey80+0x14>
    46a8:	2400      	movs	r4, #0
  }

  //Rotate by 61 bits to the left
  //Bit 0 becomes bit 19, bit 1 becomes bit 20, etc.
  for(i=0;i<10;i++){
    new_key[i] = (key[(i+3)%10] << 5) & 0xE0;     //Upper 5 bits
    46aa:	4e21      	ldr	r6, [pc, #132]	; (4730 <updateKey80+0xa4>)
    46ac:	1ce0      	adds	r0, r4, #3
    46ae:	210a      	movs	r1, #10
    46b0:	47b0      	blx	r6
    46b2:	5c7d      	ldrb	r5, [r7, r1]
    46b4:	016d      	lsls	r5, r5, #5
    new_key[i] |= ((key[(i+2)%10] >> 3) & 0x1F);  //Lower 3 bits
    46b6:	1ca0      	adds	r0, r4, #2
    46b8:	210a      	movs	r1, #10
    46ba:	47b0      	blx	r6
    46bc:	5c7b      	ldrb	r3, [r7, r1]
    46be:	08db      	lsrs	r3, r3, #3
    46c0:	431d      	orrs	r5, r3
    46c2:	ab03      	add	r3, sp, #12
    46c4:	551d      	strb	r5, [r3, r4]
  for(i=0;i<10;i++){
    46c6:	3401      	adds	r4, #1
    46c8:	2c0a      	cmp	r4, #10
    46ca:	d1ef      	bne.n	46ac <updateKey80+0x20>
  }

  //Get the sbox values for bits 79 through 76
  box_out = sbox[(new_key[9]&0xF0)>>4];
    46cc:	a903      	add	r1, sp, #12
    46ce:	7a48      	ldrb	r0, [r1, #9]
    46d0:	0903      	lsrs	r3, r0, #4
  new_key[9] &= 0x0F;
  new_key[9] |= box_out << 4;
    46d2:	4a18      	ldr	r2, [pc, #96]	; (4734 <updateKey80+0xa8>)
    46d4:	5cd2      	ldrb	r2, [r2, r3]
    46d6:	0112      	lsls	r2, r2, #4
  new_key[9] &= 0x0F;
    46d8:	230f      	movs	r3, #15
    46da:	4018      	ands	r0, r3
  new_key[9] |= box_out << 4;
    46dc:	4302      	orrs	r2, r0
    46de:	724a      	strb	r2, [r1, #9]

  //XOR bits 19 through 16
  xor_out = (round & 0x1E) >> 1;
    46e0:	4642      	mov	r2, r8
    46e2:	1052      	asrs	r2, r2, #1
    46e4:	4013      	ands	r3, r2
  new_key[2] ^= xor_out;
    46e6:	788a      	ldrb	r2, [r1, #2]
    46e8:	4053      	eors	r3, r2
    46ea:	708b      	strb	r3, [r1, #2]
  //See if bit 15 needs to be xor'd with 1
  if(round%2 == 1){new_key[1] ^= 0x80;}
    46ec:	4643      	mov	r3, r8
    46ee:	0fd9      	lsrs	r1, r3, #31
    46f0:	185a      	adds	r2, r3, r1
    46f2:	2301      	movs	r3, #1
    46f4:	4013      	ands	r3, r2
    46f6:	1a5b      	subs	r3, r3, r1
    46f8:	2b01      	cmp	r3, #1
    46fa:	d012      	beq.n	4722 <updateKey80+0x96>

  //Update the keys
  key[0]=new_key[0];
    46fc:	ab03      	add	r3, sp, #12
    46fe:	781a      	ldrb	r2, [r3, #0]
    4700:	703a      	strb	r2, [r7, #0]
  key[1]=new_key[1];
    4702:	785b      	ldrb	r3, [r3, #1]
    4704:	707b      	strb	r3, [r7, #1]
    4706:	9e01      	ldr	r6, [sp, #4]
  for(i=2;i<10;i++){
    4708:	2302      	movs	r3, #2
    key[i]=new_key[i];
    470a:	a903      	add	r1, sp, #12
    470c:	5c5a      	ldrb	r2, [r3, r1]
    470e:	54fa      	strb	r2, [r7, r3]
    round_key[i-2]=key[i];
    4710:	7032      	strb	r2, [r6, #0]
  for(i=2;i<10;i++){
    4712:	3301      	adds	r3, #1
    4714:	3601      	adds	r6, #1
    4716:	2b0a      	cmp	r3, #10
    4718:	d1f8      	bne.n	470c <updateKey80+0x80>
  }
}// end updateKey80()
    471a:	b006      	add	sp, #24
    471c:	bc04      	pop	{r2}
    471e:	4690      	mov	r8, r2
    4720:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(round%2 == 1){new_key[1] ^= 0x80;}
    4722:	aa03      	add	r2, sp, #12
    4724:	7851      	ldrb	r1, [r2, #1]
    4726:	3b81      	subs	r3, #129	; 0x81
    4728:	404b      	eors	r3, r1
    472a:	7053      	strb	r3, [r2, #1]
    472c:	e7e6      	b.n	46fc <updateKey80+0x70>
    472e:	46c0      	nop			; (mov r8, r8)
    4730:	00005a95 	.word	0x00005a95
    4734:	00009410 	.word	0x00009410

00004738 <present80Encrypt>:
void present80Encrypt(uint8_t *key_in, uint8_t *text){
    4738:	b5f0      	push	{r4, r5, r6, r7, lr}
    473a:	46de      	mov	lr, fp
    473c:	4657      	mov	r7, sl
    473e:	464e      	mov	r6, r9
    4740:	4645      	mov	r5, r8
    4742:	b5e0      	push	{r5, r6, r7, lr}
    4744:	b0a9      	sub	sp, #164	; 0xa4
    4746:	000c      	movs	r4, r1
  memmove(key,key_in,10);
    4748:	220a      	movs	r2, #10
    474a:	0001      	movs	r1, r0
    474c:	a825      	add	r0, sp, #148	; 0x94
    474e:	4d3f      	ldr	r5, [pc, #252]	; (484c <present80Encrypt+0x114>)
    4750:	47a8      	blx	r5
  memmove(round_key,&key[2],8);
    4752:	2208      	movs	r2, #8
    4754:	218e      	movs	r1, #142	; 0x8e
    4756:	ab02      	add	r3, sp, #8
    4758:	469c      	mov	ip, r3
    475a:	4461      	add	r1, ip
    475c:	a823      	add	r0, sp, #140	; 0x8c
    475e:	47a8      	blx	r5
  for(round=1;round<32;round++){
    4760:	2301      	movs	r3, #1
    4762:	4699      	mov	r9, r3
    addRoundKey(STATE, round_key);
    4764:	4b3a      	ldr	r3, [pc, #232]	; (4850 <present80Encrypt+0x118>)
    4766:	9301      	str	r3, [sp, #4]
    dummy |= (sbox[(state[i] & 0xF0) >> 4] << 4);
    4768:	4b3a      	ldr	r3, [pc, #232]	; (4854 <present80Encrypt+0x11c>)
    476a:	469a      	mov	sl, r3
    476c:	e00a      	b.n	4784 <present80Encrypt+0x4c>
    updateKey80(key,round_key,round);
    476e:	464a      	mov	r2, r9
    4770:	a923      	add	r1, sp, #140	; 0x8c
    4772:	a825      	add	r0, sp, #148	; 0x94
    4774:	4b38      	ldr	r3, [pc, #224]	; (4858 <present80Encrypt+0x120>)
    4776:	4798      	blx	r3
  for(round=1;round<32;round++){
    4778:	2301      	movs	r3, #1
    477a:	469c      	mov	ip, r3
    477c:	44e1      	add	r9, ip
    477e:	464b      	mov	r3, r9
    4780:	2b20      	cmp	r3, #32
    4782:	d057      	beq.n	4834 <present80Encrypt+0xfc>
    addRoundKey(STATE, round_key);
    4784:	a923      	add	r1, sp, #140	; 0x8c
    4786:	0020      	movs	r0, r4
    4788:	9b01      	ldr	r3, [sp, #4]
    478a:	4798      	blx	r3
    478c:	46a4      	mov	ip, r4
    478e:	0020      	movs	r0, r4
    4790:	3008      	adds	r0, #8
    4792:	46a3      	mov	fp, r4
    dummy |= sbox[state[i] & 0x0F];
    4794:	210f      	movs	r1, #15
    4796:	465b      	mov	r3, fp
    4798:	781a      	ldrb	r2, [r3, #0]
    dummy |= (sbox[(state[i] & 0xF0) >> 4] << 4);
    479a:	0913      	lsrs	r3, r2, #4
    479c:	4655      	mov	r5, sl
    479e:	5ceb      	ldrb	r3, [r5, r3]
    47a0:	011b      	lsls	r3, r3, #4
    dummy |= sbox[state[i] & 0x0F];
    47a2:	400a      	ands	r2, r1
    dummy |= (sbox[(state[i] & 0xF0) >> 4] << 4);
    47a4:	5caa      	ldrb	r2, [r5, r2]
    47a6:	4313      	orrs	r3, r2
    state[i]=dummy;
    47a8:	465a      	mov	r2, fp
    47aa:	7013      	strb	r3, [r2, #0]
    47ac:	2301      	movs	r3, #1
    47ae:	4698      	mov	r8, r3
    47b0:	44c3      	add	fp, r8
  for(i=0;i<8;i++){
    47b2:	4583      	cmp	fp, r0
    47b4:	d1ef      	bne.n	4796 <present80Encrypt+0x5e>
    47b6:	2200      	movs	r2, #0
    dummy1[i]=(state[i/8]&(1<<(i%8)))>>(i%8);
    47b8:	2707      	movs	r7, #7
    47ba:	a903      	add	r1, sp, #12
    47bc:	2501      	movs	r5, #1
    47be:	17d3      	asrs	r3, r2, #31
    47c0:	0f5e      	lsrs	r6, r3, #29
    47c2:	1990      	adds	r0, r2, r6
    47c4:	4038      	ands	r0, r7
    47c6:	1b80      	subs	r0, r0, r6
    47c8:	403b      	ands	r3, r7
    47ca:	189b      	adds	r3, r3, r2
    47cc:	10db      	asrs	r3, r3, #3
    47ce:	5ce6      	ldrb	r6, [r4, r3]
    47d0:	002b      	movs	r3, r5
    47d2:	4083      	lsls	r3, r0
    47d4:	4033      	ands	r3, r6
    47d6:	4103      	asrs	r3, r0
    47d8:	5453      	strb	r3, [r2, r1]
  for(i=0;i<64;i++){
    47da:	3201      	adds	r2, #1
    47dc:	2a40      	cmp	r2, #64	; 0x40
    47de:	d1ee      	bne.n	47be <present80Encrypt+0x86>
    47e0:	2100      	movs	r1, #0
    dummy2[pbox[i]]=dummy1[i];
    47e2:	aa13      	add	r2, sp, #76	; 0x4c
    47e4:	4d1d      	ldr	r5, [pc, #116]	; (485c <present80Encrypt+0x124>)
    47e6:	ab03      	add	r3, sp, #12
    47e8:	5d48      	ldrb	r0, [r1, r5]
    47ea:	5ccf      	ldrb	r7, [r1, r3]
    47ec:	5417      	strb	r7, [r2, r0]
  for(i=0;i<64;i++){
    47ee:	3101      	adds	r1, #1
    47f0:	2940      	cmp	r1, #64	; 0x40
    47f2:	d1f9      	bne.n	47e8 <present80Encrypt+0xb0>
    47f4:	aa13      	add	r2, sp, #76	; 0x4c
    state[i] |= dummy2[(i*8)+1] << 1;
    47f6:	7853      	ldrb	r3, [r2, #1]
    47f8:	005b      	lsls	r3, r3, #1
    state[i] |= dummy2[(i*8)+2] << 2;
    47fa:	7891      	ldrb	r1, [r2, #2]
    47fc:	0089      	lsls	r1, r1, #2
    47fe:	430b      	orrs	r3, r1
    4800:	7811      	ldrb	r1, [r2, #0]
    4802:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+3] << 3;
    4804:	78d1      	ldrb	r1, [r2, #3]
    4806:	00c9      	lsls	r1, r1, #3
    4808:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+4] << 4;
    480a:	7911      	ldrb	r1, [r2, #4]
    480c:	0109      	lsls	r1, r1, #4
    480e:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+5] << 5;
    4810:	7951      	ldrb	r1, [r2, #5]
    4812:	0149      	lsls	r1, r1, #5
    4814:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+6] << 6;
    4816:	7991      	ldrb	r1, [r2, #6]
    4818:	0189      	lsls	r1, r1, #6
    481a:	430b      	orrs	r3, r1
    state[i] |= dummy2[(i*8)+7] << 7;
    481c:	79d1      	ldrb	r1, [r2, #7]
    481e:	01c9      	lsls	r1, r1, #7
    4820:	430b      	orrs	r3, r1
    4822:	4661      	mov	r1, ip
    4824:	700b      	strb	r3, [r1, #0]
    4826:	3208      	adds	r2, #8
    4828:	2301      	movs	r3, #1
    482a:	4698      	mov	r8, r3
    482c:	44c4      	add	ip, r8
  for(i=0;i<8;i++){
    482e:	45dc      	cmp	ip, fp
    4830:	d1e1      	bne.n	47f6 <present80Encrypt+0xbe>
    4832:	e79c      	b.n	476e <present80Encrypt+0x36>
  addRoundKey(STATE, round_key);
    4834:	a923      	add	r1, sp, #140	; 0x8c
    4836:	0020      	movs	r0, r4
    4838:	4b05      	ldr	r3, [pc, #20]	; (4850 <present80Encrypt+0x118>)
    483a:	4798      	blx	r3
}
    483c:	b029      	add	sp, #164	; 0xa4
    483e:	bc3c      	pop	{r2, r3, r4, r5}
    4840:	4690      	mov	r8, r2
    4842:	4699      	mov	r9, r3
    4844:	46a2      	mov	sl, r4
    4846:	46ab      	mov	fp, r5
    4848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    484a:	46c0      	nop			; (mov r8, r8)
    484c:	00005b51 	.word	0x00005b51
    4850:	00004679 	.word	0x00004679
    4854:	00009410 	.word	0x00009410
    4858:	0000468d 	.word	0x0000468d
    485c:	000093d0 	.word	0x000093d0

00004860 <present80Decrypt>:
void present80Decrypt(uint8_t *key_in, uint8_t *text){
    4860:	b5f0      	push	{r4, r5, r6, r7, lr}
    4862:	46d6      	mov	lr, sl
    4864:	464f      	mov	r7, r9
    4866:	4646      	mov	r6, r8
    4868:	b5c0      	push	{r6, r7, lr}
    486a:	4c49      	ldr	r4, [pc, #292]	; (4990 <present80Decrypt+0x130>)
    486c:	44a5      	add	sp, r4
    486e:	0006      	movs	r6, r0
    4870:	000c      	movs	r4, r1
    memmove(round_key[0],&key_in[2],8);
    4872:	1c81      	adds	r1, r0, #2
    4874:	2208      	movs	r2, #8
    4876:	a820      	add	r0, sp, #128	; 0x80
    4878:	4d46      	ldr	r5, [pc, #280]	; (4994 <present80Decrypt+0x134>)
    487a:	47a8      	blx	r5
    memmove(key[0],key_in,10);
    487c:	220a      	movs	r2, #10
    487e:	0031      	movs	r1, r6
    4880:	a860      	add	r0, sp, #384	; 0x180
    4882:	47a8      	blx	r5
    4884:	ae22      	add	r6, sp, #136	; 0x88
    4886:	25c5      	movs	r5, #197	; 0xc5
    4888:	006d      	lsls	r5, r5, #1
    488a:	446d      	add	r5, sp
    for(round=1;round<32;round++){
    488c:	2701      	movs	r7, #1
        memmove(round_key[round],round_key[round-1],8);
    488e:	4b42      	ldr	r3, [pc, #264]	; (4998 <present80Decrypt+0x138>)
    4890:	4698      	mov	r8, r3
        updateKey80(key[round],round_key[round],round);
    4892:	4b42      	ldr	r3, [pc, #264]	; (499c <present80Decrypt+0x13c>)
    4894:	4699      	mov	r9, r3
        memmove(round_key[round],round_key[round-1],8);
    4896:	0031      	movs	r1, r6
    4898:	3908      	subs	r1, #8
    489a:	2208      	movs	r2, #8
    489c:	0030      	movs	r0, r6
    489e:	47c0      	blx	r8
        memmove(key[round],key[round-1],10);
    48a0:	0029      	movs	r1, r5
    48a2:	390a      	subs	r1, #10
    48a4:	220a      	movs	r2, #10
    48a6:	0028      	movs	r0, r5
    48a8:	47c0      	blx	r8
        updateKey80(key[round],round_key[round],round);
    48aa:	003a      	movs	r2, r7
    48ac:	0031      	movs	r1, r6
    48ae:	0028      	movs	r0, r5
    48b0:	47c8      	blx	r9
    for(round=1;round<32;round++){
    48b2:	3701      	adds	r7, #1
    48b4:	3608      	adds	r6, #8
    48b6:	350a      	adds	r5, #10
    48b8:	2f20      	cmp	r7, #32
    48ba:	d1ec      	bne.n	4896 <present80Decrypt+0x36>
    48bc:	ab5e      	add	r3, sp, #376	; 0x178
    48be:	469a      	mov	sl, r3
    48c0:	ab20      	add	r3, sp, #128	; 0x80
    48c2:	4698      	mov	r8, r3
        addRoundKey(STATE, round_key[round]);
    48c4:	4b36      	ldr	r3, [pc, #216]	; (49a0 <present80Decrypt+0x140>)
    48c6:	4699      	mov	r9, r3
    dummy2[inv_pbox[i]]=dummy1[i];
    48c8:	4d36      	ldr	r5, [pc, #216]	; (49a4 <present80Decrypt+0x144>)
    48ca:	e005      	b.n	48d8 <present80Decrypt+0x78>
    48cc:	2308      	movs	r3, #8
    48ce:	425b      	negs	r3, r3
    48d0:	469c      	mov	ip, r3
    48d2:	44e2      	add	sl, ip
    for(round=31;round>0;round--){
    48d4:	45c2      	cmp	sl, r8
    48d6:	d04e      	beq.n	4976 <present80Decrypt+0x116>
        addRoundKey(STATE, round_key[round]);
    48d8:	4651      	mov	r1, sl
    48da:	0020      	movs	r0, r4
    48dc:	47c8      	blx	r9
  for(i=0;i<64;i++){
    48de:	2200      	movs	r2, #0
    dummy1[i]=(state[i/8]&(1<<(i%8)))>>(i%8);
    48e0:	2007      	movs	r0, #7
    48e2:	2601      	movs	r6, #1
    48e4:	17d3      	asrs	r3, r2, #31
    48e6:	0f5f      	lsrs	r7, r3, #29
    48e8:	19d1      	adds	r1, r2, r7
    48ea:	4001      	ands	r1, r0
    48ec:	1bc9      	subs	r1, r1, r7
    48ee:	4003      	ands	r3, r0
    48f0:	189b      	adds	r3, r3, r2
    48f2:	10db      	asrs	r3, r3, #3
    48f4:	5ce7      	ldrb	r7, [r4, r3]
    48f6:	0033      	movs	r3, r6
    48f8:	408b      	lsls	r3, r1
    48fa:	403b      	ands	r3, r7
    48fc:	410b      	asrs	r3, r1
    48fe:	4669      	mov	r1, sp
    4900:	5453      	strb	r3, [r2, r1]
  for(i=0;i<64;i++){
    4902:	3201      	adds	r2, #1
    4904:	2a40      	cmp	r2, #64	; 0x40
    4906:	d1ed      	bne.n	48e4 <present80Decrypt+0x84>
    4908:	2300      	movs	r3, #0
    dummy2[inv_pbox[i]]=dummy1[i];
    490a:	a810      	add	r0, sp, #64	; 0x40
    490c:	5d5a      	ldrb	r2, [r3, r5]
    490e:	4669      	mov	r1, sp
    4910:	5c59      	ldrb	r1, [r3, r1]
    4912:	5481      	strb	r1, [r0, r2]
  for(i=0;i<64;i++){
    4914:	3301      	adds	r3, #1
    4916:	2b40      	cmp	r3, #64	; 0x40
    4918:	d1f8      	bne.n	490c <present80Decrypt+0xac>
    491a:	aa10      	add	r2, sp, #64	; 0x40
    491c:	0021      	movs	r1, r4
    491e:	0026      	movs	r6, r4
    4920:	3608      	adds	r6, #8
    4922:	0020      	movs	r0, r4
    state[i] |= dummy2[(i*8)+1] << 1;
    4924:	7853      	ldrb	r3, [r2, #1]
    4926:	005b      	lsls	r3, r3, #1
    state[i] |= dummy2[(i*8)+2] << 2;
    4928:	7897      	ldrb	r7, [r2, #2]
    492a:	00bf      	lsls	r7, r7, #2
    492c:	433b      	orrs	r3, r7
    492e:	7817      	ldrb	r7, [r2, #0]
    4930:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+3] << 3;
    4932:	78d7      	ldrb	r7, [r2, #3]
    4934:	00ff      	lsls	r7, r7, #3
    4936:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+4] << 4;
    4938:	7917      	ldrb	r7, [r2, #4]
    493a:	013f      	lsls	r7, r7, #4
    493c:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+5] << 5;
    493e:	7957      	ldrb	r7, [r2, #5]
    4940:	017f      	lsls	r7, r7, #5
    4942:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+6] << 6;
    4944:	7997      	ldrb	r7, [r2, #6]
    4946:	01bf      	lsls	r7, r7, #6
    4948:	433b      	orrs	r3, r7
    state[i] |= dummy2[(i*8)+7] << 7;
    494a:	79d7      	ldrb	r7, [r2, #7]
    494c:	01ff      	lsls	r7, r7, #7
    494e:	433b      	orrs	r3, r7
    4950:	7003      	strb	r3, [r0, #0]
    4952:	3208      	adds	r2, #8
    4954:	3001      	adds	r0, #1
  for(i=0;i<8;i++){
    4956:	42b0      	cmp	r0, r6
    4958:	d1e4      	bne.n	4924 <present80Decrypt+0xc4>
    dummy |= (inv_sbox[(state[i] & 0xF0) >> 4] << 4);
    495a:	4e13      	ldr	r6, [pc, #76]	; (49a8 <present80Decrypt+0x148>)
    dummy |= inv_sbox[state[i] & 0x0F];
    495c:	270f      	movs	r7, #15
    495e:	780a      	ldrb	r2, [r1, #0]
    dummy |= (inv_sbox[(state[i] & 0xF0) >> 4] << 4);
    4960:	0913      	lsrs	r3, r2, #4
    4962:	5cf3      	ldrb	r3, [r6, r3]
    4964:	011b      	lsls	r3, r3, #4
    dummy |= inv_sbox[state[i] & 0x0F];
    4966:	403a      	ands	r2, r7
    dummy |= (inv_sbox[(state[i] & 0xF0) >> 4] << 4);
    4968:	5cb2      	ldrb	r2, [r6, r2]
    496a:	4313      	orrs	r3, r2
    state[i]=dummy;
    496c:	700b      	strb	r3, [r1, #0]
    496e:	3101      	adds	r1, #1
  for(i=0;i<8;i++){
    4970:	4281      	cmp	r1, r0
    4972:	d1f4      	bne.n	495e <present80Decrypt+0xfe>
    4974:	e7aa      	b.n	48cc <present80Decrypt+0x6c>
    addRoundKey(STATE, round_key[0]);
    4976:	a920      	add	r1, sp, #128	; 0x80
    4978:	0020      	movs	r0, r4
    497a:	4b09      	ldr	r3, [pc, #36]	; (49a0 <present80Decrypt+0x140>)
    497c:	4798      	blx	r3
} // end present80Decrypt()
    497e:	23b0      	movs	r3, #176	; 0xb0
    4980:	009b      	lsls	r3, r3, #2
    4982:	449d      	add	sp, r3
    4984:	bc1c      	pop	{r2, r3, r4}
    4986:	4690      	mov	r8, r2
    4988:	4699      	mov	r9, r3
    498a:	46a2      	mov	sl, r4
    498c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    498e:	46c0      	nop			; (mov r8, r8)
    4990:	fffffd40 	.word	0xfffffd40
    4994:	00005b51 	.word	0x00005b51
    4998:	00005b63 	.word	0x00005b63
    499c:	0000468d 	.word	0x0000468d
    49a0:	00004679 	.word	0x00004679
    49a4:	00009380 	.word	0x00009380
    49a8:	000093c0 	.word	0x000093c0

000049ac <Delay_ms>:
	g_normalFlag = 0;
	g_received = 0;
	g_sent = 0;
}

static void Delay_ms(uint32_t Delay) {
    49ac:	b510      	push	{r4, lr}
    49ae:	0004      	movs	r4, r0
	printf("Delayed here");
    49b0:	4805      	ldr	r0, [pc, #20]	; (49c8 <Delay_ms+0x1c>)
    49b2:	4b06      	ldr	r3, [pc, #24]	; (49cc <Delay_ms+0x20>)
    49b4:	4798      	blx	r3
	for(uint32_t i = 0; i < Delay*10000; i++);
    49b6:	4806      	ldr	r0, [pc, #24]	; (49d0 <Delay_ms+0x24>)
    49b8:	4360      	muls	r0, r4
    49ba:	2800      	cmp	r0, #0
    49bc:	d003      	beq.n	49c6 <Delay_ms+0x1a>
    49be:	2300      	movs	r3, #0
    49c0:	3301      	adds	r3, #1
    49c2:	4283      	cmp	r3, r0
    49c4:	d1fc      	bne.n	49c0 <Delay_ms+0x14>
    49c6:	bd10      	pop	{r4, pc}
    49c8:	0000957c 	.word	0x0000957c
    49cc:	00005ce9 	.word	0x00005ce9
    49d0:	00002710 	.word	0x00002710

000049d4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    49d4:	b570      	push	{r4, r5, r6, lr}
    49d6:	b082      	sub	sp, #8
    49d8:	0005      	movs	r5, r0
    49da:	000e      	movs	r6, r1
	uint16_t temp = 0;
    49dc:	2200      	movs	r2, #0
    49de:	466b      	mov	r3, sp
    49e0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    49e2:	4c06      	ldr	r4, [pc, #24]	; (49fc <usart_serial_getchar+0x28>)
    49e4:	466b      	mov	r3, sp
    49e6:	1d99      	adds	r1, r3, #6
    49e8:	0028      	movs	r0, r5
    49ea:	47a0      	blx	r4
    49ec:	2800      	cmp	r0, #0
    49ee:	d1f9      	bne.n	49e4 <usart_serial_getchar+0x10>

	*c = temp;
    49f0:	466b      	mov	r3, sp
    49f2:	3306      	adds	r3, #6
    49f4:	881b      	ldrh	r3, [r3, #0]
    49f6:	7033      	strb	r3, [r6, #0]
}
    49f8:	b002      	add	sp, #8
    49fa:	bd70      	pop	{r4, r5, r6, pc}
    49fc:	00000e9b 	.word	0x00000e9b

00004a00 <usart_serial_putchar>:
{
    4a00:	b570      	push	{r4, r5, r6, lr}
    4a02:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    4a04:	b28c      	uxth	r4, r1
    4a06:	4e03      	ldr	r6, [pc, #12]	; (4a14 <usart_serial_putchar+0x14>)
    4a08:	0021      	movs	r1, r4
    4a0a:	0028      	movs	r0, r5
    4a0c:	47b0      	blx	r6
    4a0e:	2800      	cmp	r0, #0
    4a10:	d1fa      	bne.n	4a08 <usart_serial_putchar+0x8>
}
    4a12:	bd70      	pop	{r4, r5, r6, pc}
    4a14:	00000e75 	.word	0x00000e75

00004a18 <CAN0_Handler>:
void CAN0_Handler(void) {
    4a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a1a:	46de      	mov	lr, fp
    4a1c:	464f      	mov	r7, r9
    4a1e:	4646      	mov	r6, r8
    4a20:	b5c0      	push	{r6, r7, lr}
    4a22:	b082      	sub	sp, #8
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
    4a24:	4bc3      	ldr	r3, [pc, #780]	; (4d34 <CAN0_Handler+0x31c>)
    4a26:	681b      	ldr	r3, [r3, #0]
    4a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
volatile uint32_t status = can_read_interrupt_status(&can_instance);
    4a2a:	9300      	str	r3, [sp, #0]
printf("Status = %i",status);
    4a2c:	9900      	ldr	r1, [sp, #0]
    4a2e:	48c2      	ldr	r0, [pc, #776]	; (4d38 <CAN0_Handler+0x320>)
    4a30:	4bc2      	ldr	r3, [pc, #776]	; (4d3c <CAN0_Handler+0x324>)
    4a32:	4798      	blx	r3
if ((status & CAN_PROTOCOL_ERROR_ARBITRATION)
    4a34:	9b00      	ldr	r3, [sp, #0]
    4a36:	011b      	lsls	r3, r3, #4
    4a38:	d402      	bmi.n	4a40 <CAN0_Handler+0x28>
|| (status & CAN_PROTOCOL_ERROR_DATA)) {
    4a3a:	9b00      	ldr	r3, [sp, #0]
    4a3c:	00db      	lsls	r3, r3, #3
    4a3e:	d507      	bpl.n	4a50 <CAN0_Handler+0x38>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    4a40:	4bbc      	ldr	r3, [pc, #752]	; (4d34 <CAN0_Handler+0x31c>)
    4a42:	681b      	ldr	r3, [r3, #0]
    4a44:	22c0      	movs	r2, #192	; 0xc0
    4a46:	0552      	lsls	r2, r2, #21
    4a48:	651a      	str	r2, [r3, #80]	; 0x50
	printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
    4a4a:	48bd      	ldr	r0, [pc, #756]	; (4d40 <CAN0_Handler+0x328>)
    4a4c:	4bbd      	ldr	r3, [pc, #756]	; (4d44 <CAN0_Handler+0x32c>)
    4a4e:	4798      	blx	r3
if (STAGE == ENROLLMENT) {
    4a50:	4bbd      	ldr	r3, [pc, #756]	; (4d48 <CAN0_Handler+0x330>)
    4a52:	781b      	ldrb	r3, [r3, #0]
    4a54:	2b00      	cmp	r3, #0
    4a56:	d000      	beq.n	4a5a <CAN0_Handler+0x42>
    4a58:	e0a1      	b.n	4b9e <CAN0_Handler+0x186>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    4a5a:	9b00      	ldr	r3, [sp, #0]
    4a5c:	031b      	lsls	r3, r3, #12
    4a5e:	d400      	bmi.n	4a62 <CAN0_Handler+0x4a>
    4a60:	e0a5      	b.n	4bae <CAN0_Handler+0x196>
    4a62:	4bb4      	ldr	r3, [pc, #720]	; (4d34 <CAN0_Handler+0x31c>)
    4a64:	681b      	ldr	r3, [r3, #0]
    4a66:	2280      	movs	r2, #128	; 0x80
    4a68:	0312      	lsls	r2, r2, #12
    4a6a:	651a      	str	r2, [r3, #80]	; 0x50
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4a6c:	2500      	movs	r5, #0
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    4a6e:	4bb7      	ldr	r3, [pc, #732]	; (4d4c <CAN0_Handler+0x334>)
    4a70:	4699      	mov	r9, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    4a72:	4bb7      	ldr	r3, [pc, #732]	; (4d50 <CAN0_Handler+0x338>)
    4a74:	469b      	mov	fp, r3
    4a76:	e06a      	b.n	4b4e <CAN0_Handler+0x136>
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4a78:	4bae      	ldr	r3, [pc, #696]	; (4d34 <CAN0_Handler+0x31c>)
    4a7a:	6819      	ldr	r1, [r3, #0]
    4a7c:	239c      	movs	r3, #156	; 0x9c
    4a7e:	58c8      	ldr	r0, [r1, r3]
		index -= 32;
    4a80:	002c      	movs	r4, r5
    4a82:	3c20      	subs	r4, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4a84:	3b9b      	subs	r3, #155	; 0x9b
    4a86:	40a3      	lsls	r3, r4
			if (can_rx_get_buffer_status(&can_instance, i)) {
    4a88:	4203      	tst	r3, r0
    4a8a:	d05d      	beq.n	4b48 <CAN0_Handler+0x130>
				rx_buffer_index = i;
    4a8c:	9501      	str	r5, [sp, #4]
		module_inst->hw->NDAT2.reg = (1 << index);
    4a8e:	229c      	movs	r2, #156	; 0x9c
    4a90:	508b      	str	r3, [r1, r2]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    4a92:	9a01      	ldr	r2, [sp, #4]
    4a94:	0113      	lsls	r3, r2, #4
    4a96:	189b      	adds	r3, r3, r2
    4a98:	009b      	lsls	r3, r3, #2
    4a9a:	464a      	mov	r2, r9
    4a9c:	5c9b      	ldrb	r3, [r3, r2]
    4a9e:	4698      	mov	r8, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    4aa0:	9b01      	ldr	r3, [sp, #4]
    4aa2:	9a01      	ldr	r2, [sp, #4]
    4aa4:	0119      	lsls	r1, r3, #4
    4aa6:	18c9      	adds	r1, r1, r3
    4aa8:	0089      	lsls	r1, r1, #2
    4aaa:	3104      	adds	r1, #4
    4aac:	4643      	mov	r3, r8
    4aae:	011c      	lsls	r4, r3, #4
    4ab0:	1909      	adds	r1, r1, r4
    4ab2:	4449      	add	r1, r9
    4ab4:	489f      	ldr	r0, [pc, #636]	; (4d34 <CAN0_Handler+0x31c>)
    4ab6:	47d8      	blx	fp
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    4ab8:	9a01      	ldr	r2, [sp, #4]
    4aba:	0113      	lsls	r3, r2, #4
    4abc:	189b      	adds	r3, r3, r2
    4abe:	009b      	lsls	r3, r3, #2
    4ac0:	4642      	mov	r2, r8
    4ac2:	1c51      	adds	r1, r2, #1
    4ac4:	2203      	movs	r2, #3
    4ac6:	400a      	ands	r2, r1
    4ac8:	4649      	mov	r1, r9
    4aca:	545a      	strb	r2, [r3, r1]
				if (rx_element_buff[rx_buffer_index].buffers[temp_Buff].R0.bit.XTD) {
    4acc:	9a01      	ldr	r2, [sp, #4]
    4ace:	0113      	lsls	r3, r2, #4
    4ad0:	189b      	adds	r3, r3, r2
    4ad2:	009b      	lsls	r3, r3, #2
    4ad4:	18e4      	adds	r4, r4, r3
    4ad6:	444c      	add	r4, r9
    4ad8:	6863      	ldr	r3, [r4, #4]
    4ada:	005b      	lsls	r3, r3, #1
    4adc:	d545      	bpl.n	4b6a <CAN0_Handler+0x152>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
    4ade:	489d      	ldr	r0, [pc, #628]	; (4d54 <CAN0_Handler+0x33c>)
    4ae0:	4b98      	ldr	r3, [pc, #608]	; (4d44 <CAN0_Handler+0x32c>)
    4ae2:	4798      	blx	r3
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4ae4:	9901      	ldr	r1, [sp, #4]
    4ae6:	4643      	mov	r3, r8
    4ae8:	011b      	lsls	r3, r3, #4
    4aea:	010a      	lsls	r2, r1, #4
    4aec:	1852      	adds	r2, r2, r1
    4aee:	0092      	lsls	r2, r2, #2
    4af0:	189b      	adds	r3, r3, r2
    4af2:	4a96      	ldr	r2, [pc, #600]	; (4d4c <CAN0_Handler+0x334>)
    4af4:	18d3      	adds	r3, r2, r3
    4af6:	689b      	ldr	r3, [r3, #8]
    4af8:	031b      	lsls	r3, r3, #12
    4afa:	0f1b      	lsrs	r3, r3, #28
    4afc:	2500      	movs	r5, #0
    4afe:	2b00      	cmp	r3, #0
    4b00:	dd19      	ble.n	4b36 <CAN0_Handler+0x11e>
					printf("  %d",rx_element_buff[rx_buffer_index].buffers[temp_Buff].data[i]);
    4b02:	4e92      	ldr	r6, [pc, #584]	; (4d4c <CAN0_Handler+0x334>)
    4b04:	4f8d      	ldr	r7, [pc, #564]	; (4d3c <CAN0_Handler+0x324>)
    4b06:	9a01      	ldr	r2, [sp, #4]
    4b08:	4643      	mov	r3, r8
    4b0a:	011c      	lsls	r4, r3, #4
    4b0c:	0113      	lsls	r3, r2, #4
    4b0e:	189b      	adds	r3, r3, r2
    4b10:	009b      	lsls	r3, r3, #2
    4b12:	18e3      	adds	r3, r4, r3
    4b14:	18f3      	adds	r3, r6, r3
    4b16:	195b      	adds	r3, r3, r5
    4b18:	7b19      	ldrb	r1, [r3, #12]
    4b1a:	488f      	ldr	r0, [pc, #572]	; (4d58 <CAN0_Handler+0x340>)
    4b1c:	47b8      	blx	r7
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4b1e:	3501      	adds	r5, #1
    4b20:	9a01      	ldr	r2, [sp, #4]
    4b22:	0113      	lsls	r3, r2, #4
    4b24:	189b      	adds	r3, r3, r2
    4b26:	009b      	lsls	r3, r3, #2
    4b28:	18e4      	adds	r4, r4, r3
    4b2a:	1934      	adds	r4, r6, r4
    4b2c:	68a3      	ldr	r3, [r4, #8]
    4b2e:	031b      	lsls	r3, r3, #12
    4b30:	0f1b      	lsrs	r3, r3, #28
    4b32:	42ab      	cmp	r3, r5
    4b34:	dce7      	bgt.n	4b06 <CAN0_Handler+0xee>
				printf("\r\n\r\n");
    4b36:	4889      	ldr	r0, [pc, #548]	; (4d5c <CAN0_Handler+0x344>)
    4b38:	4b82      	ldr	r3, [pc, #520]	; (4d44 <CAN0_Handler+0x32c>)
    4b3a:	4798      	blx	r3
				if (rx_buffer_index == CAN_FILTER_ENROLLMENT) {
    4b3c:	9b01      	ldr	r3, [sp, #4]
    4b3e:	2b03      	cmp	r3, #3
    4b40:	d019      	beq.n	4b76 <CAN0_Handler+0x15e>
				else if (rx_buffer_index == CAN_FILTER_PUBLICKEY) {
    4b42:	9b01      	ldr	r3, [sp, #4]
    4b44:	2b04      	cmp	r3, #4
    4b46:	d01f      	beq.n	4b88 <CAN0_Handler+0x170>
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4b48:	3501      	adds	r5, #1
    4b4a:	2d0f      	cmp	r5, #15
    4b4c:	dc2f      	bgt.n	4bae <CAN0_Handler+0x196>
	if (index < 32) {
    4b4e:	2d1f      	cmp	r5, #31
    4b50:	d892      	bhi.n	4a78 <CAN0_Handler+0x60>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    4b52:	4b78      	ldr	r3, [pc, #480]	; (4d34 <CAN0_Handler+0x31c>)
    4b54:	6819      	ldr	r1, [r3, #0]
    4b56:	2398      	movs	r3, #152	; 0x98
    4b58:	58c8      	ldr	r0, [r1, r3]
    4b5a:	3b97      	subs	r3, #151	; 0x97
    4b5c:	40ab      	lsls	r3, r5
			if (can_rx_get_buffer_status(&can_instance, i)) {
    4b5e:	4203      	tst	r3, r0
    4b60:	d0f2      	beq.n	4b48 <CAN0_Handler+0x130>
				rx_buffer_index = i;
    4b62:	9501      	str	r5, [sp, #4]
		module_inst->hw->NDAT1.reg = (1 << index);
    4b64:	2298      	movs	r2, #152	; 0x98
    4b66:	508b      	str	r3, [r1, r2]
    4b68:	e793      	b.n	4a92 <CAN0_Handler+0x7a>
					printf("\n\r Standard message received in Rx buffer %d, section %d. The received data is: \r\n",rx_buffer_index,temp_Buff);
    4b6a:	9901      	ldr	r1, [sp, #4]
    4b6c:	4642      	mov	r2, r8
    4b6e:	487c      	ldr	r0, [pc, #496]	; (4d60 <CAN0_Handler+0x348>)
    4b70:	4b72      	ldr	r3, [pc, #456]	; (4d3c <CAN0_Handler+0x324>)
    4b72:	4798      	blx	r3
    4b74:	e7b6      	b.n	4ae4 <CAN0_Handler+0xcc>
					printf("%d == %d ?\r\n",rx_buffer_index,CAN_FILTER_ENROLLMENT);
    4b76:	9901      	ldr	r1, [sp, #4]
    4b78:	2203      	movs	r2, #3
    4b7a:	487a      	ldr	r0, [pc, #488]	; (4d64 <CAN0_Handler+0x34c>)
    4b7c:	4b6f      	ldr	r3, [pc, #444]	; (4d3c <CAN0_Handler+0x324>)
    4b7e:	4798      	blx	r3
					g_rec = 1;
    4b80:	2201      	movs	r2, #1
    4b82:	4b79      	ldr	r3, [pc, #484]	; (4d68 <CAN0_Handler+0x350>)
    4b84:	601a      	str	r2, [r3, #0]
    4b86:	e7df      	b.n	4b48 <CAN0_Handler+0x130>
					printf("%d == %d ? also %d \r\n",rx_buffer_index,CAN_FILTER_PUBLICKEY,g_rec_public);
    4b88:	9901      	ldr	r1, [sp, #4]
    4b8a:	4c78      	ldr	r4, [pc, #480]	; (4d6c <CAN0_Handler+0x354>)
    4b8c:	6823      	ldr	r3, [r4, #0]
    4b8e:	2204      	movs	r2, #4
    4b90:	4877      	ldr	r0, [pc, #476]	; (4d70 <CAN0_Handler+0x358>)
    4b92:	4e6a      	ldr	r6, [pc, #424]	; (4d3c <CAN0_Handler+0x324>)
    4b94:	47b0      	blx	r6
					g_rec_public++;
    4b96:	6823      	ldr	r3, [r4, #0]
    4b98:	3301      	adds	r3, #1
    4b9a:	6023      	str	r3, [r4, #0]
    4b9c:	e7d4      	b.n	4b48 <CAN0_Handler+0x130>
else if (STAGE == AUTHENTICATION) {
    4b9e:	4b6a      	ldr	r3, [pc, #424]	; (4d48 <CAN0_Handler+0x330>)
    4ba0:	781b      	ldrb	r3, [r3, #0]
    4ba2:	2b01      	cmp	r3, #1
    4ba4:	d009      	beq.n	4bba <CAN0_Handler+0x1a2>
	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
    4ba6:	9b00      	ldr	r3, [sp, #0]
    4ba8:	07db      	lsls	r3, r3, #31
    4baa:	d500      	bpl.n	4bae <CAN0_Handler+0x196>
    4bac:	e088      	b.n	4cc0 <CAN0_Handler+0x2a8>
}
    4bae:	b002      	add	sp, #8
    4bb0:	bc1c      	pop	{r2, r3, r4}
    4bb2:	4690      	mov	r8, r2
    4bb4:	4699      	mov	r9, r3
    4bb6:	46a3      	mov	fp, r4
    4bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    4bba:	9b00      	ldr	r3, [sp, #0]
    4bbc:	031b      	lsls	r3, r3, #12
    4bbe:	d543      	bpl.n	4c48 <CAN0_Handler+0x230>
	module_inst->hw->IR.reg = source;
    4bc0:	4b5c      	ldr	r3, [pc, #368]	; (4d34 <CAN0_Handler+0x31c>)
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	2280      	movs	r2, #128	; 0x80
    4bc6:	0312      	lsls	r2, r2, #12
    4bc8:	651a      	str	r2, [r3, #80]	; 0x50
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4bca:	2500      	movs	r5, #0
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    4bcc:	4b5f      	ldr	r3, [pc, #380]	; (4d4c <CAN0_Handler+0x334>)
    4bce:	4699      	mov	r9, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    4bd0:	4b5f      	ldr	r3, [pc, #380]	; (4d50 <CAN0_Handler+0x338>)
    4bd2:	469b      	mov	fp, r3
    4bd4:	e00d      	b.n	4bf2 <CAN0_Handler+0x1da>
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4bd6:	4b57      	ldr	r3, [pc, #348]	; (4d34 <CAN0_Handler+0x31c>)
    4bd8:	6819      	ldr	r1, [r3, #0]
    4bda:	239c      	movs	r3, #156	; 0x9c
    4bdc:	58c8      	ldr	r0, [r1, r3]
		index -= 32;
    4bde:	002c      	movs	r4, r5
    4be0:	3c20      	subs	r4, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    4be2:	3b9b      	subs	r3, #155	; 0x9b
    4be4:	40a3      	lsls	r3, r4
			if (can_rx_get_buffer_status(&can_instance, i)) {
    4be6:	4203      	tst	r3, r0
    4be8:	d000      	beq.n	4bec <CAN0_Handler+0x1d4>
    4bea:	e0d5      	b.n	4d98 <CAN0_Handler+0x380>
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    4bec:	3501      	adds	r5, #1
    4bee:	2d0f      	cmp	r5, #15
    4bf0:	dc2a      	bgt.n	4c48 <CAN0_Handler+0x230>
	if (index < 32) {
    4bf2:	2d1f      	cmp	r5, #31
    4bf4:	d8ef      	bhi.n	4bd6 <CAN0_Handler+0x1be>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    4bf6:	4b4f      	ldr	r3, [pc, #316]	; (4d34 <CAN0_Handler+0x31c>)
    4bf8:	6819      	ldr	r1, [r3, #0]
    4bfa:	2398      	movs	r3, #152	; 0x98
    4bfc:	58c8      	ldr	r0, [r1, r3]
    4bfe:	3b97      	subs	r3, #151	; 0x97
    4c00:	40ab      	lsls	r3, r5
			if (can_rx_get_buffer_status(&can_instance, i)) {
    4c02:	4203      	tst	r3, r0
    4c04:	d0f2      	beq.n	4bec <CAN0_Handler+0x1d4>
				rx_buffer_index = i;
    4c06:	9501      	str	r5, [sp, #4]
		module_inst->hw->NDAT1.reg = (1 << index);
    4c08:	2298      	movs	r2, #152	; 0x98
    4c0a:	508b      	str	r3, [r1, r2]
    4c0c:	e0c7      	b.n	4d9e <CAN0_Handler+0x386>
					printf("\n\r Standard message received in Rx buffer %d, section %d. The received data is: \r\n",rx_buffer_index,temp_Buff);
    4c0e:	9901      	ldr	r1, [sp, #4]
    4c10:	4642      	mov	r2, r8
    4c12:	4853      	ldr	r0, [pc, #332]	; (4d60 <CAN0_Handler+0x348>)
    4c14:	4b49      	ldr	r3, [pc, #292]	; (4d3c <CAN0_Handler+0x324>)
    4c16:	4798      	blx	r3
    4c18:	e0eb      	b.n	4df2 <CAN0_Handler+0x3da>
				if (rx_buffer_index == CAN_FILTER_WAIT) g_waitFlag++;
    4c1a:	4a56      	ldr	r2, [pc, #344]	; (4d74 <CAN0_Handler+0x35c>)
    4c1c:	6813      	ldr	r3, [r2, #0]
    4c1e:	3301      	adds	r3, #1
    4c20:	6013      	str	r3, [r2, #0]
    4c22:	e7e3      	b.n	4bec <CAN0_Handler+0x1d4>
				else if (rx_buffer_index == CAN_FILTER_MONITOR) g_normalFlag++;
    4c24:	4a54      	ldr	r2, [pc, #336]	; (4d78 <CAN0_Handler+0x360>)
    4c26:	6813      	ldr	r3, [r2, #0]
    4c28:	3301      	adds	r3, #1
    4c2a:	6013      	str	r3, [r2, #0]
    4c2c:	e7de      	b.n	4bec <CAN0_Handler+0x1d4>
					else if ((g_sharedReceived == 1) && (g_recComplete == 1)) {
    4c2e:	4b53      	ldr	r3, [pc, #332]	; (4d7c <CAN0_Handler+0x364>)
    4c30:	681b      	ldr	r3, [r3, #0]
    4c32:	2b01      	cmp	r3, #1
    4c34:	d1da      	bne.n	4bec <CAN0_Handler+0x1d4>
    4c36:	4b52      	ldr	r3, [pc, #328]	; (4d80 <CAN0_Handler+0x368>)
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	2b01      	cmp	r3, #1
    4c3c:	d1d6      	bne.n	4bec <CAN0_Handler+0x1d4>
						g_sharedReceived++;
    4c3e:	4a4f      	ldr	r2, [pc, #316]	; (4d7c <CAN0_Handler+0x364>)
    4c40:	6813      	ldr	r3, [r2, #0]
    4c42:	3301      	adds	r3, #1
    4c44:	6013      	str	r3, [r2, #0]
    4c46:	e7d1      	b.n	4bec <CAN0_Handler+0x1d4>
	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
    4c48:	9b00      	ldr	r3, [sp, #0]
    4c4a:	07db      	lsls	r3, r3, #31
    4c4c:	d5af      	bpl.n	4bae <CAN0_Handler+0x196>
	module_inst->hw->IR.reg = source;
    4c4e:	4d39      	ldr	r5, [pc, #228]	; (4d34 <CAN0_Handler+0x31c>)
    4c50:	682b      	ldr	r3, [r5, #0]
    4c52:	2201      	movs	r2, #1
    4c54:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
    4c56:	4c4b      	ldr	r4, [pc, #300]	; (4d84 <CAN0_Handler+0x36c>)
    4c58:	6822      	ldr	r2, [r4, #0]
    4c5a:	494b      	ldr	r1, [pc, #300]	; (4d88 <CAN0_Handler+0x370>)
    4c5c:	0028      	movs	r0, r5
    4c5e:	4b4b      	ldr	r3, [pc, #300]	; (4d8c <CAN0_Handler+0x374>)
    4c60:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
    4c62:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    4c64:	6829      	ldr	r1, [r5, #0]
    4c66:	233f      	movs	r3, #63	; 0x3f
    4c68:	4013      	ands	r3, r2
    4c6a:	22a8      	movs	r2, #168	; 0xa8
    4c6c:	508b      	str	r3, [r1, r2]
		standard_receive_index++;
    4c6e:	6823      	ldr	r3, [r4, #0]
    4c70:	3301      	adds	r3, #1
    4c72:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
    4c74:	6823      	ldr	r3, [r4, #0]
    4c76:	2b10      	cmp	r3, #16
    4c78:	d01e      	beq.n	4cb8 <CAN0_Handler+0x2a0>
		printf("\n\r Standard message received in FIFO 0. The received data is: \r\n");
    4c7a:	4845      	ldr	r0, [pc, #276]	; (4d90 <CAN0_Handler+0x378>)
    4c7c:	4b31      	ldr	r3, [pc, #196]	; (4d44 <CAN0_Handler+0x32c>)
    4c7e:	4798      	blx	r3
		for (int i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    4c80:	4b41      	ldr	r3, [pc, #260]	; (4d88 <CAN0_Handler+0x370>)
    4c82:	685b      	ldr	r3, [r3, #4]
    4c84:	031b      	lsls	r3, r3, #12
    4c86:	0f1b      	lsrs	r3, r3, #28
    4c88:	2b00      	cmp	r3, #0
    4c8a:	dd0d      	ble.n	4ca8 <CAN0_Handler+0x290>
    4c8c:	2500      	movs	r5, #0
			printf("  %d",rx_element_fifo_0.data[i]);
    4c8e:	4e3e      	ldr	r6, [pc, #248]	; (4d88 <CAN0_Handler+0x370>)
    4c90:	4c31      	ldr	r4, [pc, #196]	; (4d58 <CAN0_Handler+0x340>)
    4c92:	4f2a      	ldr	r7, [pc, #168]	; (4d3c <CAN0_Handler+0x324>)
    4c94:	1973      	adds	r3, r6, r5
    4c96:	7a19      	ldrb	r1, [r3, #8]
    4c98:	0020      	movs	r0, r4
    4c9a:	47b8      	blx	r7
		for (int i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    4c9c:	3501      	adds	r5, #1
    4c9e:	6873      	ldr	r3, [r6, #4]
    4ca0:	031b      	lsls	r3, r3, #12
    4ca2:	0f1b      	lsrs	r3, r3, #28
    4ca4:	42ab      	cmp	r3, r5
    4ca6:	dcf5      	bgt.n	4c94 <CAN0_Handler+0x27c>
		printf("\r\n\r\n");
    4ca8:	482c      	ldr	r0, [pc, #176]	; (4d5c <CAN0_Handler+0x344>)
    4caa:	4b26      	ldr	r3, [pc, #152]	; (4d44 <CAN0_Handler+0x32c>)
    4cac:	4798      	blx	r3
		g_waitFlag++;
    4cae:	4a31      	ldr	r2, [pc, #196]	; (4d74 <CAN0_Handler+0x35c>)
    4cb0:	6813      	ldr	r3, [r2, #0]
    4cb2:	3301      	adds	r3, #1
    4cb4:	6013      	str	r3, [r2, #0]
    4cb6:	e77a      	b.n	4bae <CAN0_Handler+0x196>
			standard_receive_index = 0;
    4cb8:	2200      	movs	r2, #0
    4cba:	4b32      	ldr	r3, [pc, #200]	; (4d84 <CAN0_Handler+0x36c>)
    4cbc:	601a      	str	r2, [r3, #0]
    4cbe:	e7dc      	b.n	4c7a <CAN0_Handler+0x262>
	module_inst->hw->IR.reg = source;
    4cc0:	4d1c      	ldr	r5, [pc, #112]	; (4d34 <CAN0_Handler+0x31c>)
    4cc2:	682b      	ldr	r3, [r5, #0]
    4cc4:	2201      	movs	r2, #1
    4cc6:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
    4cc8:	4c2e      	ldr	r4, [pc, #184]	; (4d84 <CAN0_Handler+0x36c>)
    4cca:	6822      	ldr	r2, [r4, #0]
    4ccc:	492e      	ldr	r1, [pc, #184]	; (4d88 <CAN0_Handler+0x370>)
    4cce:	0028      	movs	r0, r5
    4cd0:	4b2e      	ldr	r3, [pc, #184]	; (4d8c <CAN0_Handler+0x374>)
    4cd2:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
    4cd4:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    4cd6:	6829      	ldr	r1, [r5, #0]
    4cd8:	233f      	movs	r3, #63	; 0x3f
    4cda:	4013      	ands	r3, r2
    4cdc:	22a8      	movs	r2, #168	; 0xa8
    4cde:	508b      	str	r3, [r1, r2]
		standard_receive_index++;
    4ce0:	6823      	ldr	r3, [r4, #0]
    4ce2:	3301      	adds	r3, #1
    4ce4:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
    4ce6:	6823      	ldr	r3, [r4, #0]
    4ce8:	2b10      	cmp	r3, #16
    4cea:	d01e      	beq.n	4d2a <CAN0_Handler+0x312>
		printf("\n\r Standard message received in FIFO 0. The received data is: \r\n");
    4cec:	4828      	ldr	r0, [pc, #160]	; (4d90 <CAN0_Handler+0x378>)
    4cee:	4b15      	ldr	r3, [pc, #84]	; (4d44 <CAN0_Handler+0x32c>)
    4cf0:	4798      	blx	r3
		for (int i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    4cf2:	4b25      	ldr	r3, [pc, #148]	; (4d88 <CAN0_Handler+0x370>)
    4cf4:	685b      	ldr	r3, [r3, #4]
    4cf6:	031b      	lsls	r3, r3, #12
    4cf8:	0f1b      	lsrs	r3, r3, #28
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	dd0d      	ble.n	4d1a <CAN0_Handler+0x302>
    4cfe:	2500      	movs	r5, #0
			printf("  %d",rx_element_fifo_0.data[i]);
    4d00:	4e21      	ldr	r6, [pc, #132]	; (4d88 <CAN0_Handler+0x370>)
    4d02:	4c15      	ldr	r4, [pc, #84]	; (4d58 <CAN0_Handler+0x340>)
    4d04:	4f0d      	ldr	r7, [pc, #52]	; (4d3c <CAN0_Handler+0x324>)
    4d06:	1973      	adds	r3, r6, r5
    4d08:	7a19      	ldrb	r1, [r3, #8]
    4d0a:	0020      	movs	r0, r4
    4d0c:	47b8      	blx	r7
		for (int i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    4d0e:	3501      	adds	r5, #1
    4d10:	6873      	ldr	r3, [r6, #4]
    4d12:	031b      	lsls	r3, r3, #12
    4d14:	0f1b      	lsrs	r3, r3, #28
    4d16:	42ab      	cmp	r3, r5
    4d18:	dcf5      	bgt.n	4d06 <CAN0_Handler+0x2ee>
		printf("\r\n\r\n");
    4d1a:	4810      	ldr	r0, [pc, #64]	; (4d5c <CAN0_Handler+0x344>)
    4d1c:	4b09      	ldr	r3, [pc, #36]	; (4d44 <CAN0_Handler+0x32c>)
    4d1e:	4798      	blx	r3
		g_received++;
    4d20:	4a1c      	ldr	r2, [pc, #112]	; (4d94 <CAN0_Handler+0x37c>)
    4d22:	6813      	ldr	r3, [r2, #0]
    4d24:	3301      	adds	r3, #1
    4d26:	6013      	str	r3, [r2, #0]
}
    4d28:	e741      	b.n	4bae <CAN0_Handler+0x196>
			standard_receive_index = 0;
    4d2a:	2200      	movs	r2, #0
    4d2c:	4b15      	ldr	r3, [pc, #84]	; (4d84 <CAN0_Handler+0x36c>)
    4d2e:	601a      	str	r2, [r3, #0]
    4d30:	e7dc      	b.n	4cec <CAN0_Handler+0x2d4>
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	20000b48 	.word	0x20000b48
    4d38:	00009420 	.word	0x00009420
    4d3c:	00005ce9 	.word	0x00005ce9
    4d40:	0000942c 	.word	0x0000942c
    4d44:	00005ddd 	.word	0x00005ddd
    4d48:	20000b38 	.word	0x20000b38
    4d4c:	20000be4 	.word	0x20000be4
    4d50:	00000549 	.word	0x00000549
    4d54:	00009470 	.word	0x00009470
    4d58:	00009508 	.word	0x00009508
    4d5c:	00009510 	.word	0x00009510
    4d60:	000094b4 	.word	0x000094b4
    4d64:	00009514 	.word	0x00009514
    4d68:	20000b3c 	.word	0x20000b3c
    4d6c:	20000b40 	.word	0x20000b40
    4d70:	00009524 	.word	0x00009524
    4d74:	20000b9c 	.word	0x20000b9c
    4d78:	20000b84 	.word	0x20000b84
    4d7c:	20000b98 	.word	0x20000b98
    4d80:	20000b8c 	.word	0x20000b8c
    4d84:	20000bb0 	.word	0x20000bb0
    4d88:	20000ba0 	.word	0x20000ba0
    4d8c:	00000599 	.word	0x00000599
    4d90:	0000953c 	.word	0x0000953c
    4d94:	20000b90 	.word	0x20000b90
				rx_buffer_index = i;
    4d98:	9501      	str	r5, [sp, #4]
		module_inst->hw->NDAT2.reg = (1 << index);
    4d9a:	229c      	movs	r2, #156	; 0x9c
    4d9c:	508b      	str	r3, [r1, r2]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    4d9e:	9a01      	ldr	r2, [sp, #4]
    4da0:	0113      	lsls	r3, r2, #4
    4da2:	189b      	adds	r3, r3, r2
    4da4:	009b      	lsls	r3, r3, #2
    4da6:	464a      	mov	r2, r9
    4da8:	5c9b      	ldrb	r3, [r3, r2]
    4daa:	4698      	mov	r8, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    4dac:	9b01      	ldr	r3, [sp, #4]
    4dae:	9a01      	ldr	r2, [sp, #4]
    4db0:	0119      	lsls	r1, r3, #4
    4db2:	18c9      	adds	r1, r1, r3
    4db4:	0089      	lsls	r1, r1, #2
    4db6:	3104      	adds	r1, #4
    4db8:	4643      	mov	r3, r8
    4dba:	011c      	lsls	r4, r3, #4
    4dbc:	1909      	adds	r1, r1, r4
    4dbe:	4449      	add	r1, r9
    4dc0:	482d      	ldr	r0, [pc, #180]	; (4e78 <CAN0_Handler+0x460>)
    4dc2:	47d8      	blx	fp
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    4dc4:	9a01      	ldr	r2, [sp, #4]
    4dc6:	0113      	lsls	r3, r2, #4
    4dc8:	189b      	adds	r3, r3, r2
    4dca:	009b      	lsls	r3, r3, #2
    4dcc:	4642      	mov	r2, r8
    4dce:	1c51      	adds	r1, r2, #1
    4dd0:	2203      	movs	r2, #3
    4dd2:	400a      	ands	r2, r1
    4dd4:	4649      	mov	r1, r9
    4dd6:	545a      	strb	r2, [r3, r1]
				if (rx_element_buff[rx_buffer_index].buffers[temp_Buff].R0.bit.XTD) {
    4dd8:	9a01      	ldr	r2, [sp, #4]
    4dda:	0113      	lsls	r3, r2, #4
    4ddc:	189b      	adds	r3, r3, r2
    4dde:	009b      	lsls	r3, r3, #2
    4de0:	18e4      	adds	r4, r4, r3
    4de2:	444c      	add	r4, r9
    4de4:	6863      	ldr	r3, [r4, #4]
    4de6:	005b      	lsls	r3, r3, #1
    4de8:	d400      	bmi.n	4dec <CAN0_Handler+0x3d4>
    4dea:	e710      	b.n	4c0e <CAN0_Handler+0x1f6>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
    4dec:	4823      	ldr	r0, [pc, #140]	; (4e7c <CAN0_Handler+0x464>)
    4dee:	4b24      	ldr	r3, [pc, #144]	; (4e80 <CAN0_Handler+0x468>)
    4df0:	4798      	blx	r3
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4df2:	9901      	ldr	r1, [sp, #4]
    4df4:	4643      	mov	r3, r8
    4df6:	011b      	lsls	r3, r3, #4
    4df8:	010a      	lsls	r2, r1, #4
    4dfa:	1852      	adds	r2, r2, r1
    4dfc:	0092      	lsls	r2, r2, #2
    4dfe:	189b      	adds	r3, r3, r2
    4e00:	4a20      	ldr	r2, [pc, #128]	; (4e84 <CAN0_Handler+0x46c>)
    4e02:	18d3      	adds	r3, r2, r3
    4e04:	689b      	ldr	r3, [r3, #8]
    4e06:	031b      	lsls	r3, r3, #12
    4e08:	0f1b      	lsrs	r3, r3, #28
    4e0a:	2500      	movs	r5, #0
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	dd19      	ble.n	4e44 <CAN0_Handler+0x42c>
					printf("  %d",rx_element_buff[rx_buffer_index].buffers[temp_Buff].data[i]);
    4e10:	4e1c      	ldr	r6, [pc, #112]	; (4e84 <CAN0_Handler+0x46c>)
    4e12:	4f1d      	ldr	r7, [pc, #116]	; (4e88 <CAN0_Handler+0x470>)
    4e14:	9a01      	ldr	r2, [sp, #4]
    4e16:	4643      	mov	r3, r8
    4e18:	011c      	lsls	r4, r3, #4
    4e1a:	0113      	lsls	r3, r2, #4
    4e1c:	189b      	adds	r3, r3, r2
    4e1e:	009b      	lsls	r3, r3, #2
    4e20:	18e3      	adds	r3, r4, r3
    4e22:	18f3      	adds	r3, r6, r3
    4e24:	195b      	adds	r3, r3, r5
    4e26:	7b19      	ldrb	r1, [r3, #12]
    4e28:	4818      	ldr	r0, [pc, #96]	; (4e8c <CAN0_Handler+0x474>)
    4e2a:	47b8      	blx	r7
				for (i = 0; i < rx_element_buff[rx_buffer_index].buffers[temp_Buff].R1.bit.DLC; i++) {
    4e2c:	3501      	adds	r5, #1
    4e2e:	9a01      	ldr	r2, [sp, #4]
    4e30:	0113      	lsls	r3, r2, #4
    4e32:	189b      	adds	r3, r3, r2
    4e34:	009b      	lsls	r3, r3, #2
    4e36:	18e4      	adds	r4, r4, r3
    4e38:	1934      	adds	r4, r6, r4
    4e3a:	68a3      	ldr	r3, [r4, #8]
    4e3c:	031b      	lsls	r3, r3, #12
    4e3e:	0f1b      	lsrs	r3, r3, #28
    4e40:	42ab      	cmp	r3, r5
    4e42:	dce7      	bgt.n	4e14 <CAN0_Handler+0x3fc>
				printf("\r\n\r\n");
    4e44:	4812      	ldr	r0, [pc, #72]	; (4e90 <CAN0_Handler+0x478>)
    4e46:	4b0e      	ldr	r3, [pc, #56]	; (4e80 <CAN0_Handler+0x468>)
    4e48:	4798      	blx	r3
				if (rx_buffer_index == CAN_FILTER_WAIT) g_waitFlag++;
    4e4a:	9b01      	ldr	r3, [sp, #4]
    4e4c:	2b02      	cmp	r3, #2
    4e4e:	d100      	bne.n	4e52 <CAN0_Handler+0x43a>
    4e50:	e6e3      	b.n	4c1a <CAN0_Handler+0x202>
				else if (rx_buffer_index == CAN_FILTER_MONITOR) g_normalFlag++;
    4e52:	9b01      	ldr	r3, [sp, #4]
    4e54:	2b01      	cmp	r3, #1
    4e56:	d100      	bne.n	4e5a <CAN0_Handler+0x442>
    4e58:	e6e4      	b.n	4c24 <CAN0_Handler+0x20c>
				else if (rx_buffer_index == CAN_FILTER_MSG2)  {
    4e5a:	9b01      	ldr	r3, [sp, #4]
    4e5c:	2b04      	cmp	r3, #4
    4e5e:	d000      	beq.n	4e62 <CAN0_Handler+0x44a>
    4e60:	e6c4      	b.n	4bec <CAN0_Handler+0x1d4>
					if(g_sharedReceived == 0) {
    4e62:	4b0c      	ldr	r3, [pc, #48]	; (4e94 <CAN0_Handler+0x47c>)
    4e64:	681b      	ldr	r3, [r3, #0]
    4e66:	2b00      	cmp	r3, #0
    4e68:	d000      	beq.n	4e6c <CAN0_Handler+0x454>
    4e6a:	e6e0      	b.n	4c2e <CAN0_Handler+0x216>
						g_sharedReceived++;
    4e6c:	4a09      	ldr	r2, [pc, #36]	; (4e94 <CAN0_Handler+0x47c>)
    4e6e:	6813      	ldr	r3, [r2, #0]
    4e70:	3301      	adds	r3, #1
    4e72:	6013      	str	r3, [r2, #0]
    4e74:	e6ba      	b.n	4bec <CAN0_Handler+0x1d4>
    4e76:	46c0      	nop			; (mov r8, r8)
    4e78:	20000b48 	.word	0x20000b48
    4e7c:	00009470 	.word	0x00009470
    4e80:	00005ddd 	.word	0x00005ddd
    4e84:	20000be4 	.word	0x20000be4
    4e88:	00005ce9 	.word	0x00005ce9
    4e8c:	00009508 	.word	0x00009508
    4e90:	00009510 	.word	0x00009510
    4e94:	20000b98 	.word	0x20000b98

00004e98 <main>:
{
    4e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e9a:	46de      	mov	lr, fp
    4e9c:	4657      	mov	r7, sl
    4e9e:	464e      	mov	r6, r9
    4ea0:	4645      	mov	r5, r8
    4ea2:	b5e0      	push	{r5, r6, r7, lr}
    4ea4:	b0d9      	sub	sp, #356	; 0x164
	system_init();
    4ea6:	4b9b      	ldr	r3, [pc, #620]	; (5114 <main+0x27c>)
    4ea8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4eaa:	ab07      	add	r3, sp, #28
    4eac:	2280      	movs	r2, #128	; 0x80
    4eae:	05d2      	lsls	r2, r2, #23
    4eb0:	9207      	str	r2, [sp, #28]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4eb2:	2200      	movs	r2, #0
    4eb4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    4eb6:	21ff      	movs	r1, #255	; 0xff
    4eb8:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4eba:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4ebc:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    4ebe:	2401      	movs	r4, #1
    4ec0:	39d3      	subs	r1, #211	; 0xd3
    4ec2:	545c      	strb	r4, [r3, r1]
	config->transmitter_enable = true;
    4ec4:	3101      	adds	r1, #1
    4ec6:	545c      	strb	r4, [r3, r1]
	config->clock_polarity_inverted = false;
    4ec8:	3101      	adds	r1, #1
    4eca:	545a      	strb	r2, [r3, r1]
	config->use_external_clock = false;
    4ecc:	3101      	adds	r1, #1
    4ece:	545a      	strb	r2, [r3, r1]
	config->ext_clock_freq   = 0;
    4ed0:	631a      	str	r2, [r3, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    4ed2:	3105      	adds	r1, #5
    4ed4:	545a      	strb	r2, [r3, r1]
	config->generator_source = GCLK_GENERATOR_0;
    4ed6:	3101      	adds	r1, #1
    4ed8:	545a      	strb	r2, [r3, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4eda:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4edc:	2100      	movs	r1, #0
    4ede:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4ee0:	76d9      	strb	r1, [r3, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    4ee2:	61da      	str	r2, [r3, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    4ee4:	841a      	strh	r2, [r3, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    4ee6:	845a      	strh	r2, [r3, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4ee8:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4eea:	3224      	adds	r2, #36	; 0x24
    4eec:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4eee:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    4ef0:	3a11      	subs	r2, #17
    4ef2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4ef4:	3213      	adds	r2, #19
    4ef6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    4ef8:	3a01      	subs	r2, #1
    4efa:	5499      	strb	r1, [r3, r2]
	config_cdc.baudrate	 = 38400;
    4efc:	2296      	movs	r2, #150	; 0x96
    4efe:	0212      	lsls	r2, r2, #8
    4f00:	629a      	str	r2, [r3, #40]	; 0x28
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    4f02:	22c4      	movs	r2, #196	; 0xc4
    4f04:	0392      	lsls	r2, r2, #14
    4f06:	60da      	str	r2, [r3, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    4f08:	2201      	movs	r2, #1
    4f0a:	4252      	negs	r2, r2
    4f0c:	639a      	str	r2, [r3, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    4f0e:	63da      	str	r2, [r3, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    4f10:	4a81      	ldr	r2, [pc, #516]	; (5118 <main+0x280>)
    4f12:	641a      	str	r2, [r3, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    4f14:	4a81      	ldr	r2, [pc, #516]	; (511c <main+0x284>)
    4f16:	645a      	str	r2, [r3, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    4f18:	4d81      	ldr	r5, [pc, #516]	; (5120 <main+0x288>)
    4f1a:	4b82      	ldr	r3, [pc, #520]	; (5124 <main+0x28c>)
    4f1c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4f1e:	4a82      	ldr	r2, [pc, #520]	; (5128 <main+0x290>)
    4f20:	4b82      	ldr	r3, [pc, #520]	; (512c <main+0x294>)
    4f22:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4f24:	4a82      	ldr	r2, [pc, #520]	; (5130 <main+0x298>)
    4f26:	4b83      	ldr	r3, [pc, #524]	; (5134 <main+0x29c>)
    4f28:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4f2a:	aa07      	add	r2, sp, #28
    4f2c:	4982      	ldr	r1, [pc, #520]	; (5138 <main+0x2a0>)
    4f2e:	0028      	movs	r0, r5
    4f30:	4b82      	ldr	r3, [pc, #520]	; (513c <main+0x2a4>)
    4f32:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4f34:	4f82      	ldr	r7, [pc, #520]	; (5140 <main+0x2a8>)
    4f36:	683b      	ldr	r3, [r7, #0]
    4f38:	6898      	ldr	r0, [r3, #8]
    4f3a:	2100      	movs	r1, #0
    4f3c:	4e81      	ldr	r6, [pc, #516]	; (5144 <main+0x2ac>)
    4f3e:	47b0      	blx	r6
	setbuf(stdin, NULL);
    4f40:	683b      	ldr	r3, [r7, #0]
    4f42:	6858      	ldr	r0, [r3, #4]
    4f44:	2100      	movs	r1, #0
    4f46:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4f48:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4f4a:	0030      	movs	r0, r6
    4f4c:	4b7e      	ldr	r3, [pc, #504]	; (5148 <main+0x2b0>)
    4f4e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4f50:	231f      	movs	r3, #31
    4f52:	4018      	ands	r0, r3
    4f54:	4084      	lsls	r4, r0
    4f56:	4b7d      	ldr	r3, [pc, #500]	; (514c <main+0x2b4>)
    4f58:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4f5a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4f5c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d1fc      	bne.n	4f5c <main+0xc4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4f62:	6833      	ldr	r3, [r6, #0]
    4f64:	2702      	movs	r7, #2
    4f66:	433b      	orrs	r3, r7
    4f68:	6033      	str	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4f6a:	ae06      	add	r6, sp, #24
    4f6c:	2400      	movs	r4, #0
    4f6e:	7074      	strb	r4, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4f70:	2501      	movs	r5, #1
    4f72:	70b5      	strb	r5, [r6, #2]
	config->powersave    = false;
    4f74:	70f4      	strb	r4, [r6, #3]
	pin_config.mux_position = CAN_TX_MUX_SETTING;
    4f76:	2306      	movs	r3, #6
    4f78:	4699      	mov	r9, r3
    4f7a:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
    4f7c:	0031      	movs	r1, r6
    4f7e:	2018      	movs	r0, #24
    4f80:	4b73      	ldr	r3, [pc, #460]	; (5150 <main+0x2b8>)
    4f82:	4698      	mov	r8, r3
    4f84:	4798      	blx	r3
	pin_config.mux_position = CAN_RX_MUX_SETTING;
    4f86:	464b      	mov	r3, r9
    4f88:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
    4f8a:	a906      	add	r1, sp, #24
    4f8c:	2019      	movs	r0, #25
    4f8e:	47c0      	blx	r8
	config->clock_source = GCLK_GENERATOR_8;
    4f90:	ab07      	add	r3, sp, #28
    4f92:	2208      	movs	r2, #8
    4f94:	701a      	strb	r2, [r3, #0]
	config->run_in_standby = false;
    4f96:	705c      	strb	r4, [r3, #1]
	config->watchdog_configuration = 0x00;
    4f98:	709c      	strb	r4, [r3, #2]
	config->transmit_pause = true;
    4f9a:	70dd      	strb	r5, [r3, #3]
	config->edge_filtering = true;
    4f9c:	711d      	strb	r5, [r3, #4]
	config->protocol_exception_handling = true;
    4f9e:	715d      	strb	r5, [r3, #5]
	config->automatic_retransmission = true;
    4fa0:	719d      	strb	r5, [r3, #6]
	config->clock_stop_request = false;
    4fa2:	71dc      	strb	r4, [r3, #7]
	config->clock_stop_acknowledge = false;
    4fa4:	721c      	strb	r4, [r3, #8]
	config->timestamp_prescaler = 0;
    4fa6:	725c      	strb	r4, [r3, #9]
	config->timeout_period = 0xFFFF;
    4fa8:	3a09      	subs	r2, #9
    4faa:	815a      	strh	r2, [r3, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
    4fac:	731c      	strb	r4, [r3, #12]
	config->timeout_enable = false;
    4fae:	735c      	strb	r4, [r3, #13]
	config->tdc_enable = false;
    4fb0:	739c      	strb	r4, [r3, #14]
	config->delay_compensation_offset = 0;
    4fb2:	73dc      	strb	r4, [r3, #15]
	config->delay_compensation_filter_window_length = 0;
    4fb4:	741c      	strb	r4, [r3, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
    4fb6:	745f      	strb	r7, [r3, #17]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
    4fb8:	749f      	strb	r7, [r3, #18]
	config->remote_frames_standard_reject = true;
    4fba:	74dd      	strb	r5, [r3, #19]
	config->remote_frames_extended_reject = true;
    4fbc:	751d      	strb	r5, [r3, #20]
	config->extended_id_mask = 0x1FFFFFFF;
    4fbe:	4a65      	ldr	r2, [pc, #404]	; (5154 <main+0x2bc>)
    4fc0:	619a      	str	r2, [r3, #24]
	config->rx_fifo_0_overwrite = true;
    4fc2:	771d      	strb	r5, [r3, #28]
	config->rx_fifo_0_watermark = 0;
    4fc4:	775c      	strb	r4, [r3, #29]
	config->rx_fifo_1_overwrite = true;
    4fc6:	779d      	strb	r5, [r3, #30]
	config->rx_fifo_1_watermark = 0;
    4fc8:	77dc      	strb	r4, [r3, #31]
	config->tx_queue_mode = false;
    4fca:	2220      	movs	r2, #32
    4fcc:	549c      	strb	r4, [r3, r2]
	config->tx_event_fifo_watermark = 0;
    4fce:	3201      	adds	r2, #1
    4fd0:	549c      	strb	r4, [r3, r2]
	can_init(&can_instance, CAN_MODULE, &config_can);
    4fd2:	4c61      	ldr	r4, [pc, #388]	; (5158 <main+0x2c0>)
    4fd4:	001a      	movs	r2, r3
    4fd6:	4961      	ldr	r1, [pc, #388]	; (515c <main+0x2c4>)
    4fd8:	0020      	movs	r0, r4
    4fda:	4b61      	ldr	r3, [pc, #388]	; (5160 <main+0x2c8>)
    4fdc:	4798      	blx	r3
	can_start(&can_instance);
    4fde:	0020      	movs	r0, r4
    4fe0:	4b60      	ldr	r3, [pc, #384]	; (5164 <main+0x2cc>)
    4fe2:	4798      	blx	r3
    4fe4:	2280      	movs	r2, #128	; 0x80
    4fe6:	0212      	lsls	r2, r2, #8
    4fe8:	4b58      	ldr	r3, [pc, #352]	; (514c <main+0x2b4>)
    4fea:	601a      	str	r2, [r3, #0]
	module_inst->hw->IE.reg |= source;
    4fec:	6822      	ldr	r2, [r4, #0]
    4fee:	6d51      	ldr	r1, [r2, #84]	; 0x54
    4ff0:	23c0      	movs	r3, #192	; 0xc0
    4ff2:	055b      	lsls	r3, r3, #21
    4ff4:	430b      	orrs	r3, r1
    4ff6:	6553      	str	r3, [r2, #84]	; 0x54
	printf("Menu :\r\n"
    4ff8:	485b      	ldr	r0, [pc, #364]	; (5168 <main+0x2d0>)
    4ffa:	4d5c      	ldr	r5, [pc, #368]	; (516c <main+0x2d4>)
    4ffc:	47a8      	blx	r5
printf("Time for enrollment\r\n");
    4ffe:	485c      	ldr	r0, [pc, #368]	; (5170 <main+0x2d8>)
    5000:	47a8      	blx	r5
bool hardcoded = (bool)Enrollment(NODE_ID, secret_key, ServerPublicKey, ec,&can_instance);
    5002:	9400      	str	r4, [sp, #0]
    5004:	ab30      	add	r3, sp, #192	; 0xc0
    5006:	aa38      	add	r2, sp, #224	; 0xe0
    5008:	a950      	add	r1, sp, #320	; 0x140
    500a:	2001      	movs	r0, #1
    500c:	4c59      	ldr	r4, [pc, #356]	; (5174 <main+0x2dc>)
    500e:	47a0      	blx	r4
    5010:	9003      	str	r0, [sp, #12]
printf("Enrollment complete\r\n");
    5012:	4859      	ldr	r0, [pc, #356]	; (5178 <main+0x2e0>)
    5014:	47a8      	blx	r5
	g_bErrFlag = 0;
    5016:	2300      	movs	r3, #0
    5018:	9304      	str	r3, [sp, #16]
	STAGE = AUTHENTICATION;
    501a:	2301      	movs	r3, #1
    501c:	466a      	mov	r2, sp
    501e:	75d3      	strb	r3, [r2, #23]
	memmove(secret_key,response,16);
    5020:	ac50      	add	r4, sp, #320	; 0x140
				g_sent = 0;
    5022:	4b56      	ldr	r3, [pc, #344]	; (517c <main+0x2e4>)
    5024:	469b      	mov	fp, r3
    5026:	e0c4      	b.n	51b2 <main+0x31a>
		printf("Generating Response\r\n");
    5028:	4855      	ldr	r0, [pc, #340]	; (5180 <main+0x2e8>)
    502a:	4b50      	ldr	r3, [pc, #320]	; (516c <main+0x2d4>)
    502c:	4798      	blx	r3
			Delay_ms(2000);
    502e:	20fa      	movs	r0, #250	; 0xfa
    5030:	00c0      	lsls	r0, r0, #3
    5032:	4b54      	ldr	r3, [pc, #336]	; (5184 <main+0x2ec>)
    5034:	4798      	blx	r3
    5036:	e0e9      	b.n	520c <main+0x374>
    5038:	0005      	movs	r5, r0
		printf("Failed Public Key Generation\r\n");
    503a:	4853      	ldr	r0, [pc, #332]	; (5188 <main+0x2f0>)
    503c:	4b4b      	ldr	r3, [pc, #300]	; (516c <main+0x2d4>)
    503e:	4798      	blx	r3
		return Status;
    5040:	0028      	movs	r0, r5
}
    5042:	b059      	add	sp, #356	; 0x164
    5044:	bc3c      	pop	{r2, r3, r4, r5}
    5046:	4690      	mov	r8, r2
    5048:	4699      	mov	r9, r3
    504a:	46a2      	mov	sl, r4
    504c:	46ab      	mov	fp, r5
    504e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5050:	0005      	movs	r5, r0
		printf("Failed Shared Secret Creation\r\n");
    5052:	484e      	ldr	r0, [pc, #312]	; (518c <main+0x2f4>)
    5054:	4b45      	ldr	r3, [pc, #276]	; (516c <main+0x2d4>)
    5056:	4798      	blx	r3
		return Status;
    5058:	0028      	movs	r0, r5
    505a:	e7f2      	b.n	5042 <main+0x1aa>
    505c:	2300      	movs	r3, #0
    505e:	e23e      	b.n	54de <main+0x646>
    5060:	2300      	movs	r3, #0
    5062:	e264      	b.n	552e <main+0x696>
    5064:	2300      	movs	r3, #0
    5066:	e277      	b.n	5558 <main+0x6c0>
		while(g_received == 0);
    5068:	4a49      	ldr	r2, [pc, #292]	; (5190 <main+0x2f8>)
    506a:	6813      	ldr	r3, [r2, #0]
    506c:	2b00      	cmp	r3, #0
    506e:	d0fc      	beq.n	506a <main+0x1d2>
		g_received = 0;
    5070:	4b47      	ldr	r3, [pc, #284]	; (5190 <main+0x2f8>)
    5072:	2200      	movs	r2, #0
    5074:	601a      	str	r2, [r3, #0]
		memcpy(message_in,rx_element_fifo_0.data,8);
    5076:	ab2b      	add	r3, sp, #172	; 0xac
    5078:	4698      	mov	r8, r3
    507a:	4b46      	ldr	r3, [pc, #280]	; (5194 <main+0x2fc>)
    507c:	3308      	adds	r3, #8
    507e:	4642      	mov	r2, r8
    5080:	cb03      	ldmia	r3!, {r0, r1}
    5082:	c203      	stmia	r2!, {r0, r1}
		present80Decrypt(session_key,message_in);
    5084:	4641      	mov	r1, r8
    5086:	a82d      	add	r0, sp, #180	; 0xb4
    5088:	4b43      	ldr	r3, [pc, #268]	; (5198 <main+0x300>)
    508a:	4798      	blx	r3
		printf("Received: 0x%08x.%08x\r\n",*((uint32_t *)&message_in[4]),*((uint32_t *)message_in));
    508c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    508e:	992c      	ldr	r1, [sp, #176]	; 0xb0
    5090:	4842      	ldr	r0, [pc, #264]	; (519c <main+0x304>)
    5092:	4b43      	ldr	r3, [pc, #268]	; (51a0 <main+0x308>)
    5094:	4798      	blx	r3
		*((uint32_t *)message_in) += NODE_ID;
    5096:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    5098:	3301      	adds	r3, #1
    509a:	932b      	str	r3, [sp, #172]	; 0xac
		memmove(message_out,message_in,8);
    509c:	ab29      	add	r3, sp, #164	; 0xa4
    509e:	4642      	mov	r2, r8
    50a0:	ca03      	ldmia	r2!, {r0, r1}
    50a2:	c303      	stmia	r3!, {r0, r1}
		Delay_ms(500);
    50a4:	20fa      	movs	r0, #250	; 0xfa
    50a6:	0040      	lsls	r0, r0, #1
    50a8:	4b36      	ldr	r3, [pc, #216]	; (5184 <main+0x2ec>)
    50aa:	4798      	blx	r3
		if ((i<TOTAL_SENDS-1) || (NODE_ID != 1)) {
    50ac:	464b      	mov	r3, r9
    50ae:	2b08      	cmp	r3, #8
    50b0:	dc1e      	bgt.n	50f0 <main+0x258>
			present80Encrypt(session_key,message_out);
    50b2:	ab29      	add	r3, sp, #164	; 0xa4
    50b4:	4698      	mov	r8, r3
    50b6:	0019      	movs	r1, r3
    50b8:	a82d      	add	r0, sp, #180	; 0xb4
    50ba:	4b3a      	ldr	r3, [pc, #232]	; (51a4 <main+0x30c>)
    50bc:	4798      	blx	r3
			memcpy(tx_element.data,message_out,8);
    50be:	ab09      	add	r3, sp, #36	; 0x24
    50c0:	4642      	mov	r2, r8
    50c2:	ca03      	ldmia	r2!, {r0, r1}
    50c4:	c303      	stmia	r3!, {r0, r1}
			can_set_tx_buffer_element(&can_instance, &tx_element,
    50c6:	4b24      	ldr	r3, [pc, #144]	; (5158 <main+0x2c0>)
    50c8:	4698      	mov	r8, r3
    50ca:	2205      	movs	r2, #5
    50cc:	a907      	add	r1, sp, #28
    50ce:	0018      	movs	r0, r3
    50d0:	4b35      	ldr	r3, [pc, #212]	; (51a8 <main+0x310>)
    50d2:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    50d4:	4643      	mov	r3, r8
    50d6:	681b      	ldr	r3, [r3, #0]
    50d8:	699a      	ldr	r2, [r3, #24]
    50da:	0792      	lsls	r2, r2, #30
    50dc:	d401      	bmi.n	50e2 <main+0x24a>
	module_inst->hw->TXBAR.reg = trig_mask;
    50de:	22d0      	movs	r2, #208	; 0xd0
    50e0:	509e      	str	r6, [r3, r2]
			g_sent=1;
    50e2:	4b26      	ldr	r3, [pc, #152]	; (517c <main+0x2e4>)
    50e4:	2201      	movs	r2, #1
    50e6:	601a      	str	r2, [r3, #0]
			Delay_ms(500);
    50e8:	20fa      	movs	r0, #250	; 0xfa
    50ea:	0040      	lsls	r0, r0, #1
    50ec:	4b25      	ldr	r3, [pc, #148]	; (5184 <main+0x2ec>)
    50ee:	4798      	blx	r3
	for (int i = 0; i < TOTAL_SENDS; i++) {
    50f0:	2301      	movs	r3, #1
    50f2:	469c      	mov	ip, r3
    50f4:	44e1      	add	r9, ip
    50f6:	464b      	mov	r3, r9
    50f8:	2b0a      	cmp	r3, #10
    50fa:	d057      	beq.n	51ac <main+0x314>
	return module_inst->hw->TXBTO.reg;
    50fc:	4653      	mov	r3, sl
    50fe:	681a      	ldr	r2, [r3, #0]
		while(g_sent != 0) {
    5100:	682b      	ldr	r3, [r5, #0]
    5102:	2b00      	cmp	r3, #0
    5104:	d0b0      	beq.n	5068 <main+0x1d0>
    5106:	59d3      	ldr	r3, [r2, r7]
			if ((can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX)))
    5108:	421e      	tst	r6, r3
    510a:	d0f9      	beq.n	5100 <main+0x268>
				g_sent = 0;
    510c:	465b      	mov	r3, fp
    510e:	2100      	movs	r1, #0
    5110:	6019      	str	r1, [r3, #0]
    5112:	e7f5      	b.n	5100 <main+0x268>
    5114:	00001741 	.word	0x00001741
    5118:	002a0003 	.word	0x002a0003
    511c:	002b0003 	.word	0x002b0003
    5120:	20000b4c 	.word	0x20000b4c
    5124:	20000be0 	.word	0x20000be0
    5128:	00004a01 	.word	0x00004a01
    512c:	20000bdc 	.word	0x20000bdc
    5130:	000049d5 	.word	0x000049d5
    5134:	20000bd8 	.word	0x20000bd8
    5138:	42001400 	.word	0x42001400
    513c:	00000ac9 	.word	0x00000ac9
    5140:	20000104 	.word	0x20000104
    5144:	00005e15 	.word	0x00005e15
    5148:	00000a39 	.word	0x00000a39
    514c:	e000e100 	.word	0xe000e100
    5150:	00001711 	.word	0x00001711
    5154:	1fffffff 	.word	0x1fffffff
    5158:	20000b48 	.word	0x20000b48
    515c:	42001c00 	.word	0x42001c00
    5160:	000001f9 	.word	0x000001f9
    5164:	000004f5 	.word	0x000004f5
    5168:	0000958c 	.word	0x0000958c
    516c:	00005ddd 	.word	0x00005ddd
    5170:	000097e8 	.word	0x000097e8
    5174:	000018c9 	.word	0x000018c9
    5178:	00009800 	.word	0x00009800
    517c:	20000b44 	.word	0x20000b44
    5180:	0000986c 	.word	0x0000986c
    5184:	000049ad 	.word	0x000049ad
    5188:	000098a0 	.word	0x000098a0
    518c:	000098d0 	.word	0x000098d0
    5190:	20000b90 	.word	0x20000b90
    5194:	20000ba0 	.word	0x20000ba0
    5198:	00004861 	.word	0x00004861
    519c:	00009a40 	.word	0x00009a40
    51a0:	00005ce9 	.word	0x00005ce9
    51a4:	00004739 	.word	0x00004739
    51a8:	000005e9 	.word	0x000005e9
	printf("Normal Operation Completed!\r\n");
    51ac:	48ee      	ldr	r0, [pc, #952]	; (5568 <main+0x6d0>)
    51ae:	4bef      	ldr	r3, [pc, #956]	; (556c <main+0x6d4>)
    51b0:	4798      	blx	r3
	g_bErrFlag = 0;
    51b2:	49ef      	ldr	r1, [pc, #956]	; (5570 <main+0x6d8>)
    51b4:	9a04      	ldr	r2, [sp, #16]
    51b6:	600a      	str	r2, [r1, #0]
	g_recComplete = 0;
    51b8:	4bee      	ldr	r3, [pc, #952]	; (5574 <main+0x6dc>)
    51ba:	601a      	str	r2, [r3, #0]
	g_resSend = 0;
    51bc:	4bee      	ldr	r3, [pc, #952]	; (5578 <main+0x6e0>)
    51be:	601a      	str	r2, [r3, #0]
	g_sharedReceived = 0;
    51c0:	4bee      	ldr	r3, [pc, #952]	; (557c <main+0x6e4>)
    51c2:	601a      	str	r2, [r3, #0]
	g_normalOp = 0;
    51c4:	4bee      	ldr	r3, [pc, #952]	; (5580 <main+0x6e8>)
    51c6:	601a      	str	r2, [r3, #0]
	g_waitFlag = 0;
    51c8:	4bee      	ldr	r3, [pc, #952]	; (5584 <main+0x6ec>)
    51ca:	601a      	str	r2, [r3, #0]
	g_normalFlag = 0;
    51cc:	4bee      	ldr	r3, [pc, #952]	; (5588 <main+0x6f0>)
    51ce:	601a      	str	r2, [r3, #0]
	g_received = 0;
    51d0:	4bee      	ldr	r3, [pc, #952]	; (558c <main+0x6f4>)
    51d2:	601a      	str	r2, [r3, #0]
	g_sent = 0;
    51d4:	4bee      	ldr	r3, [pc, #952]	; (5590 <main+0x6f8>)
    51d6:	601a      	str	r2, [r3, #0]
	STAGE = AUTHENTICATION;
    51d8:	4bee      	ldr	r3, [pc, #952]	; (5594 <main+0x6fc>)
    51da:	466a      	mov	r2, sp
    51dc:	7dd2      	ldrb	r2, [r2, #23]
    51de:	701a      	strb	r2, [r3, #0]
	printf("Initialization Complete...\r\n");
    51e0:	48ed      	ldr	r0, [pc, #948]	; (5598 <main+0x700>)
    51e2:	4de2      	ldr	r5, [pc, #904]	; (556c <main+0x6d4>)
    51e4:	47a8      	blx	r5
	printf("Trying to test this THANG...\r\n");
    51e6:	48ed      	ldr	r0, [pc, #948]	; (559c <main+0x704>)
    51e8:	47a8      	blx	r5
	memset(secret_key+16,0,16);
    51ea:	2210      	movs	r2, #16
    51ec:	2100      	movs	r1, #0
    51ee:	a854      	add	r0, sp, #336	; 0x150
    51f0:	4beb      	ldr	r3, [pc, #940]	; (55a0 <main+0x708>)
    51f2:	4798      	blx	r3
	if(hardcoded) {
    51f4:	9b03      	ldr	r3, [sp, #12]
    51f6:	2b00      	cmp	r3, #0
    51f8:	d100      	bne.n	51fc <main+0x364>
    51fa:	e715      	b.n	5028 <main+0x190>
		printf("Hardcoding Response\r\n");
    51fc:	48e9      	ldr	r0, [pc, #932]	; (55a4 <main+0x70c>)
    51fe:	4bdb      	ldr	r3, [pc, #876]	; (556c <main+0x6d4>)
    5200:	4798      	blx	r3
		memset(response,NODE_ID,16);
    5202:	2210      	movs	r2, #16
    5204:	2101      	movs	r1, #1
    5206:	a834      	add	r0, sp, #208	; 0xd0
    5208:	4be5      	ldr	r3, [pc, #916]	; (55a0 <main+0x708>)
    520a:	4798      	blx	r3
	memmove(secret_key,response,16);
    520c:	2210      	movs	r2, #16
    520e:	a934      	add	r1, sp, #208	; 0xd0
    5210:	0020      	movs	r0, r4
    5212:	4be5      	ldr	r3, [pc, #916]	; (55a8 <main+0x710>)
    5214:	4798      	blx	r3
	photon128(response,16,response_hash);
    5216:	aa25      	add	r2, sp, #148	; 0x94
    5218:	2110      	movs	r1, #16
    521a:	a834      	add	r0, sp, #208	; 0xd0
    521c:	4be3      	ldr	r3, [pc, #908]	; (55ac <main+0x714>)
    521e:	4798      	blx	r3
		printf("Hash is 0x");
    5220:	48e3      	ldr	r0, [pc, #908]	; (55b0 <main+0x718>)
    5222:	4be4      	ldr	r3, [pc, #912]	; (55b4 <main+0x71c>)
    5224:	4798      	blx	r3
		for(j = 15; j >= 0; j--) {
    5226:	270f      	movs	r7, #15
			printf("%02x",response_hash[j]);
    5228:	ae25      	add	r6, sp, #148	; 0x94
    522a:	4de2      	ldr	r5, [pc, #904]	; (55b4 <main+0x71c>)
    522c:	5db9      	ldrb	r1, [r7, r6]
    522e:	48e2      	ldr	r0, [pc, #904]	; (55b8 <main+0x720>)
    5230:	47a8      	blx	r5
		for(j = 15; j >= 0; j--) {
    5232:	3f01      	subs	r7, #1
    5234:	d2fa      	bcs.n	522c <main+0x394>
		printf("\r\n");
    5236:	48e1      	ldr	r0, [pc, #900]	; (55bc <main+0x724>)
    5238:	4bcc      	ldr	r3, [pc, #816]	; (556c <main+0x6d4>)
    523a:	4798      	blx	r3
	printf("Secret is 0x");
    523c:	48e0      	ldr	r0, [pc, #896]	; (55c0 <main+0x728>)
    523e:	4bdd      	ldr	r3, [pc, #884]	; (55b4 <main+0x71c>)
    5240:	4798      	blx	r3
	for(int j = 15; j >= 0; j--) {
    5242:	260f      	movs	r6, #15
		printf("%02x",secret_key[j]);
    5244:	4ddc      	ldr	r5, [pc, #880]	; (55b8 <main+0x720>)
    5246:	4fdb      	ldr	r7, [pc, #876]	; (55b4 <main+0x71c>)
    5248:	5d31      	ldrb	r1, [r6, r4]
    524a:	0028      	movs	r0, r5
    524c:	47b8      	blx	r7
	for(int j = 15; j >= 0; j--) {
    524e:	3e01      	subs	r6, #1
    5250:	d2fa      	bcs.n	5248 <main+0x3b0>
	printf("\r\n");
    5252:	48da      	ldr	r0, [pc, #872]	; (55bc <main+0x724>)
    5254:	4bc5      	ldr	r3, [pc, #788]	; (556c <main+0x6d4>)
    5256:	4798      	blx	r3
	Status = CompressedKeyGeneration(secret_key,public_key);
    5258:	a948      	add	r1, sp, #288	; 0x120
    525a:	0020      	movs	r0, r4
    525c:	4bd9      	ldr	r3, [pc, #868]	; (55c4 <main+0x72c>)
    525e:	4798      	blx	r3
	if (Status != ECCRYPTO_SUCCESS) {
    5260:	2801      	cmp	r0, #1
    5262:	d000      	beq.n	5266 <main+0x3ce>
    5264:	e6e8      	b.n	5038 <main+0x1a0>
	printf("Public is 0x");
    5266:	48d8      	ldr	r0, [pc, #864]	; (55c8 <main+0x730>)
    5268:	4bd2      	ldr	r3, [pc, #840]	; (55b4 <main+0x71c>)
    526a:	4798      	blx	r3
	for(int j = 15; j >= 0; j--) {
    526c:	270f      	movs	r7, #15
		printf("%02x",public_key[j]);
    526e:	ae48      	add	r6, sp, #288	; 0x120
    5270:	4dd0      	ldr	r5, [pc, #832]	; (55b4 <main+0x71c>)
    5272:	5db9      	ldrb	r1, [r7, r6]
    5274:	48d0      	ldr	r0, [pc, #832]	; (55b8 <main+0x720>)
    5276:	47a8      	blx	r5
	for(int j = 15; j >= 0; j--) {
    5278:	3f01      	subs	r7, #1
    527a:	d2fa      	bcs.n	5272 <main+0x3da>
	printf("\r\n");
    527c:	48cf      	ldr	r0, [pc, #828]	; (55bc <main+0x724>)
    527e:	4bbb      	ldr	r3, [pc, #748]	; (556c <main+0x6d4>)
    5280:	4798      	blx	r3
	Status = CompressedSecretAgreement(secret_key,ServerPublicKey,shared_secret);
    5282:	aa40      	add	r2, sp, #256	; 0x100
    5284:	a938      	add	r1, sp, #224	; 0xe0
    5286:	0020      	movs	r0, r4
    5288:	4bd0      	ldr	r3, [pc, #832]	; (55cc <main+0x734>)
    528a:	4798      	blx	r3
	if (Status != ECCRYPTO_SUCCESS) {
    528c:	2801      	cmp	r0, #1
    528e:	d000      	beq.n	5292 <main+0x3fa>
    5290:	e6de      	b.n	5050 <main+0x1b8>
		printf("Shared Secret: 0x");
    5292:	48cf      	ldr	r0, [pc, #828]	; (55d0 <main+0x738>)
    5294:	4bc7      	ldr	r3, [pc, #796]	; (55b4 <main+0x71c>)
    5296:	4798      	blx	r3
    5298:	ae40      	add	r6, sp, #256	; 0x100
    529a:	ad48      	add	r5, sp, #288	; 0x120
			printf("%02x",shared_secret[i]);
    529c:	4fc5      	ldr	r7, [pc, #788]	; (55b4 <main+0x71c>)
    529e:	7831      	ldrb	r1, [r6, #0]
    52a0:	48c5      	ldr	r0, [pc, #788]	; (55b8 <main+0x720>)
    52a2:	47b8      	blx	r7
    52a4:	3601      	adds	r6, #1
		for (int i = 0; i < sizeof(shared_secret); i++) {
    52a6:	42ae      	cmp	r6, r5
    52a8:	d1f9      	bne.n	529e <main+0x406>
		printf("\r\n");
    52aa:	48c4      	ldr	r0, [pc, #784]	; (55bc <main+0x724>)
    52ac:	4baf      	ldr	r3, [pc, #700]	; (556c <main+0x6d4>)
    52ae:	4798      	blx	r3
		printf("Public Key: 0x");
    52b0:	48c8      	ldr	r0, [pc, #800]	; (55d4 <main+0x73c>)
    52b2:	4bc0      	ldr	r3, [pc, #768]	; (55b4 <main+0x71c>)
    52b4:	4798      	blx	r3
    52b6:	ae48      	add	r6, sp, #288	; 0x120
			printf("%02x",public_key[i]);
    52b8:	4dbf      	ldr	r5, [pc, #764]	; (55b8 <main+0x720>)
    52ba:	4fbe      	ldr	r7, [pc, #760]	; (55b4 <main+0x71c>)
    52bc:	7831      	ldrb	r1, [r6, #0]
    52be:	0028      	movs	r0, r5
    52c0:	47b8      	blx	r7
    52c2:	3601      	adds	r6, #1
		for (int i = 0; i < sizeof(public_key); i++) {
    52c4:	42b4      	cmp	r4, r6
    52c6:	d1f9      	bne.n	52bc <main+0x424>
		printf("\r\n");
    52c8:	48bc      	ldr	r0, [pc, #752]	; (55bc <main+0x724>)
    52ca:	4fa8      	ldr	r7, [pc, #672]	; (556c <main+0x6d4>)
    52cc:	47b8      	blx	r7
	photon128(shared_secret,32,shared_hash);
    52ce:	aa21      	add	r2, sp, #132	; 0x84
    52d0:	2120      	movs	r1, #32
    52d2:	a840      	add	r0, sp, #256	; 0x100
    52d4:	4bb5      	ldr	r3, [pc, #724]	; (55ac <main+0x714>)
    52d6:	4798      	blx	r3
	memmove(encrypted_response_hash,response_hash,16);
    52d8:	ab25      	add	r3, sp, #148	; 0x94
    52da:	aa1d      	add	r2, sp, #116	; 0x74
    52dc:	cb23      	ldmia	r3!, {r0, r1, r5}
    52de:	c223      	stmia	r2!, {r0, r1, r5}
    52e0:	681b      	ldr	r3, [r3, #0]
    52e2:	6013      	str	r3, [r2, #0]
	present80Encrypt(shared_hash,encrypted_response_hash);
    52e4:	a91d      	add	r1, sp, #116	; 0x74
    52e6:	a821      	add	r0, sp, #132	; 0x84
    52e8:	4dbb      	ldr	r5, [pc, #748]	; (55d8 <main+0x740>)
    52ea:	47a8      	blx	r5
	present80Encrypt(shared_hash,&encrypted_response_hash[8]);
    52ec:	a91f      	add	r1, sp, #124	; 0x7c
    52ee:	a821      	add	r0, sp, #132	; 0x84
    52f0:	47a8      	blx	r5
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    52f2:	4bba      	ldr	r3, [pc, #744]	; (55dc <main+0x744>)
    52f4:	469a      	mov	sl, r3
    52f6:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID1 = 0x301;
    52f8:	9a06      	ldr	r2, [sp, #24]
    52fa:	4bb9      	ldr	r3, [pc, #740]	; (55e0 <main+0x748>)
    52fc:	4699      	mov	r9, r3
    52fe:	401a      	ands	r2, r3
    5300:	4bb8      	ldr	r3, [pc, #736]	; (55e4 <main+0x74c>)
    5302:	4313      	orrs	r3, r2
    5304:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID2 = CAN_FILTER_MONITOR;
    5306:	9b06      	ldr	r3, [sp, #24]
    5308:	0adb      	lsrs	r3, r3, #11
    530a:	02db      	lsls	r3, r3, #11
    530c:	2201      	movs	r2, #1
    530e:	4313      	orrs	r3, r2
    5310:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFEC =
    5312:	9a06      	ldr	r2, [sp, #24]
    5314:	23e0      	movs	r3, #224	; 0xe0
    5316:	059b      	lsls	r3, r3, #22
    5318:	4313      	orrs	r3, r2
    531a:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    531c:	4db2      	ldr	r5, [pc, #712]	; (55e8 <main+0x750>)
    531e:	2201      	movs	r2, #1
    5320:	a906      	add	r1, sp, #24
    5322:	0028      	movs	r0, r5
    5324:	4bb1      	ldr	r3, [pc, #708]	; (55ec <main+0x754>)
    5326:	4698      	mov	r8, r3
    5328:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    532a:	682a      	ldr	r2, [r5, #0]
    532c:	6d53      	ldr	r3, [r2, #84]	; 0x54
    532e:	2680      	movs	r6, #128	; 0x80
    5330:	0336      	lsls	r6, r6, #12
    5332:	4333      	orrs	r3, r6
    5334:	6553      	str	r3, [r2, #84]	; 0x54
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    5336:	4653      	mov	r3, sl
    5338:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID1 = 0x0;
    533a:	9b06      	ldr	r3, [sp, #24]
    533c:	464a      	mov	r2, r9
    533e:	4013      	ands	r3, r2
    5340:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID2 = 0x0;
    5342:	9b06      	ldr	r3, [sp, #24]
    5344:	0adb      	lsrs	r3, r3, #11
    5346:	02db      	lsls	r3, r3, #11
    5348:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    534a:	2202      	movs	r2, #2
    534c:	a906      	add	r1, sp, #24
    534e:	0028      	movs	r0, r5
    5350:	47c0      	blx	r8
	module_inst->hw->IE.reg |= source;
    5352:	682a      	ldr	r2, [r5, #0]
    5354:	6d53      	ldr	r3, [r2, #84]	; 0x54
    5356:	2101      	movs	r1, #1
    5358:	430b      	orrs	r3, r1
    535a:	6553      	str	r3, [r2, #84]	; 0x54
	printf("Waiting\r\n");
    535c:	48a4      	ldr	r0, [pc, #656]	; (55f0 <main+0x758>)
    535e:	47b8      	blx	r7
		Delay_ms(NODE_TOTAL * 2000);
    5360:	20fa      	movs	r0, #250	; 0xfa
    5362:	0100      	lsls	r0, r0, #4
    5364:	4ba3      	ldr	r3, [pc, #652]	; (55f4 <main+0x75c>)
    5366:	4699      	mov	r9, r3
    5368:	4798      	blx	r3
	sd_filter.S0.bit.SFEC =
    536a:	9b06      	ldr	r3, [sp, #24]
    536c:	4aa2      	ldr	r2, [pc, #648]	; (55f8 <main+0x760>)
    536e:	4013      	ands	r3, r2
    5370:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    5372:	2202      	movs	r2, #2
    5374:	a906      	add	r1, sp, #24
    5376:	0028      	movs	r0, r5
    5378:	47c0      	blx	r8
	printf("My Turn!\r\n");
    537a:	48a0      	ldr	r0, [pc, #640]	; (55fc <main+0x764>)
    537c:	47b8      	blx	r7
	Delay_ms(50);
    537e:	2032      	movs	r0, #50	; 0x32
    5380:	47c8      	blx	r9
	tx_element->T0.reg = 0;
    5382:	2300      	movs	r3, #0
    5384:	9307      	str	r3, [sp, #28]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    5386:	2388      	movs	r3, #136	; 0x88
    5388:	041b      	lsls	r3, r3, #16
    538a:	9308      	str	r3, [sp, #32]
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x100+NODE_ID);
    538c:	9a07      	ldr	r2, [sp, #28]
    538e:	4b9c      	ldr	r3, [pc, #624]	; (5600 <main+0x768>)
    5390:	4313      	orrs	r3, r2
    5392:	9307      	str	r3, [sp, #28]
	tx_element.T1.bit.DLC = 8;
    5394:	9b08      	ldr	r3, [sp, #32]
    5396:	4a9b      	ldr	r2, [pc, #620]	; (5604 <main+0x76c>)
    5398:	4013      	ands	r3, r2
    539a:	431e      	orrs	r6, r3
    539c:	9608      	str	r6, [sp, #32]
	memcpy(tx_element.data,encrypted_response_hash,8);
    539e:	ab09      	add	r3, sp, #36	; 0x24
    53a0:	aa1d      	add	r2, sp, #116	; 0x74
    53a2:	ca03      	ldmia	r2!, {r0, r1}
    53a4:	c303      	stmia	r3!, {r0, r1}
	can_set_tx_buffer_element(&can_instance, &tx_element,
    53a6:	2205      	movs	r2, #5
    53a8:	a907      	add	r1, sp, #28
    53aa:	0028      	movs	r0, r5
    53ac:	4b96      	ldr	r3, [pc, #600]	; (5608 <main+0x770>)
    53ae:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    53b0:	682a      	ldr	r2, [r5, #0]
    53b2:	6993      	ldr	r3, [r2, #24]
    53b4:	079b      	lsls	r3, r3, #30
    53b6:	d402      	bmi.n	53be <main+0x526>
	module_inst->hw->TXBAR.reg = trig_mask;
    53b8:	2120      	movs	r1, #32
    53ba:	23d0      	movs	r3, #208	; 0xd0
    53bc:	50d1      	str	r1, [r2, r3]
	return module_inst->hw->TXBTO.reg;
    53be:	20d8      	movs	r0, #216	; 0xd8
	while(!(can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX)));
    53c0:	2120      	movs	r1, #32
    53c2:	5813      	ldr	r3, [r2, r0]
    53c4:	4219      	tst	r1, r3
    53c6:	d0fc      	beq.n	53c2 <main+0x52a>
	printf("First message sent!\r\n");
    53c8:	4890      	ldr	r0, [pc, #576]	; (560c <main+0x774>)
    53ca:	4b68      	ldr	r3, [pc, #416]	; (556c <main+0x6d4>)
    53cc:	4798      	blx	r3
	Delay_ms(50);
    53ce:	2032      	movs	r0, #50	; 0x32
    53d0:	4b88      	ldr	r3, [pc, #544]	; (55f4 <main+0x75c>)
    53d2:	4798      	blx	r3
	tx_element->T0.reg = 0;
    53d4:	2300      	movs	r3, #0
    53d6:	9307      	str	r3, [sp, #28]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    53d8:	2388      	movs	r3, #136	; 0x88
    53da:	041b      	lsls	r3, r3, #16
    53dc:	9308      	str	r3, [sp, #32]
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x100+NODE_ID);
    53de:	9a07      	ldr	r2, [sp, #28]
    53e0:	4b87      	ldr	r3, [pc, #540]	; (5600 <main+0x768>)
    53e2:	4313      	orrs	r3, r2
    53e4:	9307      	str	r3, [sp, #28]
	tx_element.T1.bit.DLC = 8;
    53e6:	9b08      	ldr	r3, [sp, #32]
    53e8:	4a86      	ldr	r2, [pc, #536]	; (5604 <main+0x76c>)
    53ea:	401a      	ands	r2, r3
    53ec:	2380      	movs	r3, #128	; 0x80
    53ee:	031b      	lsls	r3, r3, #12
    53f0:	4313      	orrs	r3, r2
    53f2:	9308      	str	r3, [sp, #32]
	memcpy(tx_element.data,&encrypted_response_hash[8],8);
    53f4:	ab09      	add	r3, sp, #36	; 0x24
    53f6:	aa1f      	add	r2, sp, #124	; 0x7c
    53f8:	ca03      	ldmia	r2!, {r0, r1}
    53fa:	c303      	stmia	r3!, {r0, r1}
	can_set_tx_buffer_element(&can_instance, &tx_element,
    53fc:	4d7a      	ldr	r5, [pc, #488]	; (55e8 <main+0x750>)
    53fe:	2205      	movs	r2, #5
    5400:	a907      	add	r1, sp, #28
    5402:	0028      	movs	r0, r5
    5404:	4b80      	ldr	r3, [pc, #512]	; (5608 <main+0x770>)
    5406:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    5408:	682a      	ldr	r2, [r5, #0]
    540a:	6993      	ldr	r3, [r2, #24]
    540c:	079b      	lsls	r3, r3, #30
    540e:	d402      	bmi.n	5416 <main+0x57e>
	module_inst->hw->TXBAR.reg = trig_mask;
    5410:	2120      	movs	r1, #32
    5412:	23d0      	movs	r3, #208	; 0xd0
    5414:	50d1      	str	r1, [r2, r3]
	return module_inst->hw->TXBTO.reg;
    5416:	20d8      	movs	r0, #216	; 0xd8
	while(!(can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX)));
    5418:	2120      	movs	r1, #32
    541a:	5813      	ldr	r3, [r2, r0]
    541c:	4219      	tst	r1, r3
    541e:	d0fc      	beq.n	541a <main+0x582>
	printf("Second message sent!\r\n");
    5420:	487b      	ldr	r0, [pc, #492]	; (5610 <main+0x778>)
    5422:	4d52      	ldr	r5, [pc, #328]	; (556c <main+0x6d4>)
    5424:	47a8      	blx	r5
	g_waitFlag += 2;
    5426:	4a57      	ldr	r2, [pc, #348]	; (5584 <main+0x6ec>)
    5428:	6813      	ldr	r3, [r2, #0]
    542a:	3302      	adds	r3, #2
    542c:	6013      	str	r3, [r2, #0]
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    542e:	4b6b      	ldr	r3, [pc, #428]	; (55dc <main+0x744>)
    5430:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID1 = 0x0;
    5432:	9b06      	ldr	r3, [sp, #24]
    5434:	4a6a      	ldr	r2, [pc, #424]	; (55e0 <main+0x748>)
    5436:	4013      	ands	r3, r2
    5438:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID2 = 0x0;
    543a:	9b06      	ldr	r3, [sp, #24]
    543c:	0adb      	lsrs	r3, r3, #11
    543e:	02db      	lsls	r3, r3, #11
    5440:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    5442:	4e69      	ldr	r6, [pc, #420]	; (55e8 <main+0x750>)
    5444:	2202      	movs	r2, #2
    5446:	a906      	add	r1, sp, #24
    5448:	0030      	movs	r0, r6
    544a:	4b68      	ldr	r3, [pc, #416]	; (55ec <main+0x754>)
    544c:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    544e:	6832      	ldr	r2, [r6, #0]
    5450:	6d53      	ldr	r3, [r2, #84]	; 0x54
    5452:	2101      	movs	r1, #1
    5454:	430b      	orrs	r3, r1
    5456:	6553      	str	r3, [r2, #84]	; 0x54
	printf("Waiting for others\r\n");
    5458:	486e      	ldr	r0, [pc, #440]	; (5614 <main+0x77c>)
    545a:	47a8      	blx	r5
	while(g_waitFlag < 2*(NODE_TOTAL));
    545c:	4a49      	ldr	r2, [pc, #292]	; (5584 <main+0x6ec>)
    545e:	6813      	ldr	r3, [r2, #0]
    5460:	2b03      	cmp	r3, #3
    5462:	d9fc      	bls.n	545e <main+0x5c6>
	sd_filter.S0.bit.SFEC =
    5464:	9b06      	ldr	r3, [sp, #24]
    5466:	4a64      	ldr	r2, [pc, #400]	; (55f8 <main+0x760>)
    5468:	4013      	ands	r3, r2
    546a:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    546c:	4d5e      	ldr	r5, [pc, #376]	; (55e8 <main+0x750>)
    546e:	2202      	movs	r2, #2
    5470:	a906      	add	r1, sp, #24
    5472:	0028      	movs	r0, r5
    5474:	4e5d      	ldr	r6, [pc, #372]	; (55ec <main+0x754>)
    5476:	47b0      	blx	r6
	printf("All nodes finished sending hashed responses\r\n");
    5478:	4867      	ldr	r0, [pc, #412]	; (5618 <main+0x780>)
    547a:	4b3c      	ldr	r3, [pc, #240]	; (556c <main+0x6d4>)
    547c:	4798      	blx	r3
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    547e:	4b57      	ldr	r3, [pc, #348]	; (55dc <main+0x744>)
    5480:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID1 = 0x200 + NODE_ID;
    5482:	9b06      	ldr	r3, [sp, #24]
    5484:	4a56      	ldr	r2, [pc, #344]	; (55e0 <main+0x748>)
    5486:	401a      	ands	r2, r3
    5488:	4b64      	ldr	r3, [pc, #400]	; (561c <main+0x784>)
    548a:	4313      	orrs	r3, r2
    548c:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID2 = CAN_FILTER_MSG2;
    548e:	9b06      	ldr	r3, [sp, #24]
    5490:	0adb      	lsrs	r3, r3, #11
    5492:	02db      	lsls	r3, r3, #11
    5494:	2204      	movs	r2, #4
    5496:	4313      	orrs	r3, r2
    5498:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFEC =
    549a:	9a06      	ldr	r2, [sp, #24]
    549c:	23e0      	movs	r3, #224	; 0xe0
    549e:	059b      	lsls	r3, r3, #22
    54a0:	4313      	orrs	r3, r2
    54a2:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    54a4:	2204      	movs	r2, #4
    54a6:	a906      	add	r1, sp, #24
    54a8:	0028      	movs	r0, r5
    54aa:	47b0      	blx	r6
	while(g_sharedReceived==0);
    54ac:	4a33      	ldr	r2, [pc, #204]	; (557c <main+0x6e4>)
    54ae:	6813      	ldr	r3, [r2, #0]
    54b0:	2b00      	cmp	r3, #0
    54b2:	d0fc      	beq.n	54ae <main+0x616>
    54b4:	4a5a      	ldr	r2, [pc, #360]	; (5620 <main+0x788>)
    54b6:	2312      	movs	r3, #18
    54b8:	33ff      	adds	r3, #255	; 0xff
    54ba:	5cd3      	ldrb	r3, [r2, r3]
    54bc:	2188      	movs	r1, #136	; 0x88
    54be:	0049      	lsls	r1, r1, #1
    54c0:	5c52      	ldrb	r2, [r2, r1]
    54c2:	429a      	cmp	r2, r3
    54c4:	d100      	bne.n	54c8 <main+0x630>
    54c6:	e5c9      	b.n	505c <main+0x1c4>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    54c8:	4955      	ldr	r1, [pc, #340]	; (5620 <main+0x788>)
    54ca:	1c58      	adds	r0, r3, #1
    54cc:	2203      	movs	r2, #3
    54ce:	4002      	ands	r2, r0
    54d0:	2012      	movs	r0, #18
    54d2:	30ff      	adds	r0, #255	; 0xff
    54d4:	540a      	strb	r2, [r1, r0]
	return &(buff->buffers[last_element]);
    54d6:	011b      	lsls	r3, r3, #4
    54d8:	3315      	adds	r3, #21
    54da:	33ff      	adds	r3, #255	; 0xff
    54dc:	185b      	adds	r3, r3, r1
	memcpy(server_reply,getNextBufferElement(&rx_element_buff[CAN_FILTER_MSG2])->data,8);
    54de:	aa19      	add	r2, sp, #100	; 0x64
    54e0:	3308      	adds	r3, #8
    54e2:	cb03      	ldmia	r3!, {r0, r1}
    54e4:	c203      	stmia	r2!, {r0, r1}
	g_recComplete++;
    54e6:	4a23      	ldr	r2, [pc, #140]	; (5574 <main+0x6dc>)
    54e8:	6813      	ldr	r3, [r2, #0]
    54ea:	3301      	adds	r3, #1
    54ec:	6013      	str	r3, [r2, #0]
	printf("Received first message\r\n");
    54ee:	484d      	ldr	r0, [pc, #308]	; (5624 <main+0x78c>)
    54f0:	4b1e      	ldr	r3, [pc, #120]	; (556c <main+0x6d4>)
    54f2:	4798      	blx	r3
	while(g_sharedReceived==1);
    54f4:	4a21      	ldr	r2, [pc, #132]	; (557c <main+0x6e4>)
    54f6:	6813      	ldr	r3, [r2, #0]
    54f8:	2b01      	cmp	r3, #1
    54fa:	d0fc      	beq.n	54f6 <main+0x65e>
	printf("Received second message\r\n");
    54fc:	484a      	ldr	r0, [pc, #296]	; (5628 <main+0x790>)
    54fe:	4b1b      	ldr	r3, [pc, #108]	; (556c <main+0x6d4>)
    5500:	4798      	blx	r3
	if (buff->last_write == buff->last_read) return NULL;
    5502:	4b47      	ldr	r3, [pc, #284]	; (5620 <main+0x788>)
    5504:	2288      	movs	r2, #136	; 0x88
    5506:	0052      	lsls	r2, r2, #1
    5508:	5c9a      	ldrb	r2, [r3, r2]
    550a:	2112      	movs	r1, #18
    550c:	31ff      	adds	r1, #255	; 0xff
    550e:	5c5b      	ldrb	r3, [r3, r1]
    5510:	429a      	cmp	r2, r3
    5512:	d100      	bne.n	5516 <main+0x67e>
    5514:	e5a4      	b.n	5060 <main+0x1c8>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    5516:	4842      	ldr	r0, [pc, #264]	; (5620 <main+0x788>)
    5518:	1c5d      	adds	r5, r3, #1
    551a:	390f      	subs	r1, #15
    551c:	39ff      	subs	r1, #255	; 0xff
    551e:	4029      	ands	r1, r5
    5520:	2512      	movs	r5, #18
    5522:	35ff      	adds	r5, #255	; 0xff
    5524:	5541      	strb	r1, [r0, r5]
	return &(buff->buffers[last_element]);
    5526:	011b      	lsls	r3, r3, #4
    5528:	3315      	adds	r3, #21
    552a:	33ff      	adds	r3, #255	; 0xff
    552c:	181b      	adds	r3, r3, r0
	memcpy(server_reply,getNextBufferElement(&rx_element_buff[CAN_FILTER_MSG2])->data,8);
    552e:	a919      	add	r1, sp, #100	; 0x64
    5530:	3308      	adds	r3, #8
    5532:	cb21      	ldmia	r3!, {r0, r5}
    5534:	c121      	stmia	r1!, {r0, r5}
	if (buff->last_write == buff->last_read) return NULL;
    5536:	2312      	movs	r3, #18
    5538:	33ff      	adds	r3, #255	; 0xff
    553a:	4939      	ldr	r1, [pc, #228]	; (5620 <main+0x788>)
    553c:	5ccb      	ldrb	r3, [r1, r3]
    553e:	4293      	cmp	r3, r2
    5540:	d100      	bne.n	5544 <main+0x6ac>
    5542:	e58f      	b.n	5064 <main+0x1cc>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    5544:	1c58      	adds	r0, r3, #1
    5546:	2203      	movs	r2, #3
    5548:	4002      	ands	r2, r0
    554a:	2012      	movs	r0, #18
    554c:	30ff      	adds	r0, #255	; 0xff
    554e:	540a      	strb	r2, [r1, r0]
	return &(buff->buffers[last_element]);
    5550:	011b      	lsls	r3, r3, #4
    5552:	3315      	adds	r3, #21
    5554:	33ff      	adds	r3, #255	; 0xff
    5556:	185b      	adds	r3, r3, r1
	printf("Msg ID=0x%04x received: ",(uint32_t)(getNextBufferElement(&rx_element_buff[CAN_FILTER_MSG2])->R0.bit.ID));
    5558:	6819      	ldr	r1, [r3, #0]
    555a:	00c9      	lsls	r1, r1, #3
    555c:	08c9      	lsrs	r1, r1, #3
    555e:	4833      	ldr	r0, [pc, #204]	; (562c <main+0x794>)
    5560:	4b14      	ldr	r3, [pc, #80]	; (55b4 <main+0x71c>)
    5562:	4798      	blx	r3
	for(int i=0;i<16;i++){printf("%02x ",server_reply[i]);}
    5564:	2700      	movs	r7, #0
    5566:	e063      	b.n	5630 <main+0x798>
    5568:	00009a58 	.word	0x00009a58
    556c:	00005ddd 	.word	0x00005ddd
    5570:	20000b80 	.word	0x20000b80
    5574:	20000b8c 	.word	0x20000b8c
    5578:	20000b94 	.word	0x20000b94
    557c:	20000b98 	.word	0x20000b98
    5580:	20000b88 	.word	0x20000b88
    5584:	20000b9c 	.word	0x20000b9c
    5588:	20000b84 	.word	0x20000b84
    558c:	20000b90 	.word	0x20000b90
    5590:	20000b44 	.word	0x20000b44
    5594:	20000b38 	.word	0x20000b38
    5598:	00009818 	.word	0x00009818
    559c:	00009834 	.word	0x00009834
    55a0:	00005b87 	.word	0x00005b87
    55a4:	00009854 	.word	0x00009854
    55a8:	00005b51 	.word	0x00005b51
    55ac:	00004591 	.word	0x00004591
    55b0:	00009884 	.word	0x00009884
    55b4:	00005ce9 	.word	0x00005ce9
    55b8:	00006cf4 	.word	0x00006cf4
    55bc:	00009a0c 	.word	0x00009a0c
    55c0:	00009890 	.word	0x00009890
    55c4:	00004281 	.word	0x00004281
    55c8:	000098c0 	.word	0x000098c0
    55cc:	000042ad 	.word	0x000042ad
    55d0:	000098f0 	.word	0x000098f0
    55d4:	00009904 	.word	0x00009904
    55d8:	00004739 	.word	0x00004739
    55dc:	880007ff 	.word	0x880007ff
    55e0:	f800ffff 	.word	0xf800ffff
    55e4:	03010000 	.word	0x03010000
    55e8:	20000b48 	.word	0x20000b48
    55ec:	0000050d 	.word	0x0000050d
    55f0:	00009914 	.word	0x00009914
    55f4:	000049ad 	.word	0x000049ad
    55f8:	c7ffffff 	.word	0xc7ffffff
    55fc:	00009920 	.word	0x00009920
    5600:	04040000 	.word	0x04040000
    5604:	fff0ffff 	.word	0xfff0ffff
    5608:	000005e9 	.word	0x000005e9
    560c:	0000992c 	.word	0x0000992c
    5610:	00009944 	.word	0x00009944
    5614:	0000995c 	.word	0x0000995c
    5618:	00009970 	.word	0x00009970
    561c:	02010000 	.word	0x02010000
    5620:	20000be4 	.word	0x20000be4
    5624:	000099a0 	.word	0x000099a0
    5628:	000099b8 	.word	0x000099b8
    562c:	000099d4 	.word	0x000099d4
    5630:	ae19      	add	r6, sp, #100	; 0x64
    5632:	4d48      	ldr	r5, [pc, #288]	; (5754 <main+0x8bc>)
    5634:	5db9      	ldrb	r1, [r7, r6]
    5636:	4848      	ldr	r0, [pc, #288]	; (5758 <main+0x8c0>)
    5638:	47a8      	blx	r5
    563a:	3701      	adds	r7, #1
    563c:	2f10      	cmp	r7, #16
    563e:	d1f9      	bne.n	5634 <main+0x79c>
	printf("\r\n");
    5640:	4846      	ldr	r0, [pc, #280]	; (575c <main+0x8c4>)
    5642:	4e47      	ldr	r6, [pc, #284]	; (5760 <main+0x8c8>)
    5644:	47b0      	blx	r6
	present80Decrypt(shared_hash,server_reply);
    5646:	ad19      	add	r5, sp, #100	; 0x64
    5648:	0029      	movs	r1, r5
    564a:	a821      	add	r0, sp, #132	; 0x84
    564c:	4f45      	ldr	r7, [pc, #276]	; (5764 <main+0x8cc>)
    564e:	47b8      	blx	r7
	present80Decrypt(shared_hash,&server_reply[8]);
    5650:	a91b      	add	r1, sp, #108	; 0x6c
    5652:	a821      	add	r0, sp, #132	; 0x84
    5654:	47b8      	blx	r7
	memmove(session_key,server_reply,10);
    5656:	ab2d      	add	r3, sp, #180	; 0xb4
    5658:	cd06      	ldmia	r5!, {r1, r2}
    565a:	c306      	stmia	r3!, {r1, r2}
    565c:	001a      	movs	r2, r3
    565e:	882b      	ldrh	r3, [r5, #0]
    5660:	8013      	strh	r3, [r2, #0]
	printf("Finished Decrypting!\r\n");
    5662:	4841      	ldr	r0, [pc, #260]	; (5768 <main+0x8d0>)
    5664:	47b0      	blx	r6
	printf("Sessions key is: 0x");
    5666:	4841      	ldr	r0, [pc, #260]	; (576c <main+0x8d4>)
    5668:	4b3a      	ldr	r3, [pc, #232]	; (5754 <main+0x8bc>)
    566a:	4798      	blx	r3
	for(int i=9;i>=0;i--){printf("%02x",session_key[i]);}
    566c:	2709      	movs	r7, #9
    566e:	ae2d      	add	r6, sp, #180	; 0xb4
    5670:	4d38      	ldr	r5, [pc, #224]	; (5754 <main+0x8bc>)
    5672:	5db9      	ldrb	r1, [r7, r6]
    5674:	483e      	ldr	r0, [pc, #248]	; (5770 <main+0x8d8>)
    5676:	47a8      	blx	r5
    5678:	3f01      	subs	r7, #1
    567a:	d2fa      	bcs.n	5672 <main+0x7da>
	while(g_normalFlag == 0);
    567c:	4a3d      	ldr	r2, [pc, #244]	; (5774 <main+0x8dc>)
    567e:	6813      	ldr	r3, [r2, #0]
    5680:	2b00      	cmp	r3, #0
    5682:	d0fc      	beq.n	567e <main+0x7e6>
	STAGE = NORMAL;
    5684:	2702      	movs	r7, #2
    5686:	4b3c      	ldr	r3, [pc, #240]	; (5778 <main+0x8e0>)
    5688:	701f      	strb	r7, [r3, #0]
	sd_filter.S0.bit.SFEC =
    568a:	9b06      	ldr	r3, [sp, #24]
    568c:	4a3b      	ldr	r2, [pc, #236]	; (577c <main+0x8e4>)
    568e:	4013      	ands	r3, r2
    5690:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    5692:	4e3b      	ldr	r6, [pc, #236]	; (5780 <main+0x8e8>)
    5694:	2204      	movs	r2, #4
    5696:	a906      	add	r1, sp, #24
    5698:	0030      	movs	r0, r6
    569a:	4d3a      	ldr	r5, [pc, #232]	; (5784 <main+0x8ec>)
    569c:	47a8      	blx	r5
	printf("\r\nNormal Operation Time\r\n");
    569e:	483a      	ldr	r0, [pc, #232]	; (5788 <main+0x8f0>)
    56a0:	4b2f      	ldr	r3, [pc, #188]	; (5760 <main+0x8c8>)
    56a2:	4798      	blx	r3
    56a4:	4b39      	ldr	r3, [pc, #228]	; (578c <main+0x8f4>)
    56a6:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID1 = 0x400 + NODE_ID;
    56a8:	9b06      	ldr	r3, [sp, #24]
    56aa:	4a39      	ldr	r2, [pc, #228]	; (5790 <main+0x8f8>)
    56ac:	401a      	ands	r2, r3
    56ae:	4b39      	ldr	r3, [pc, #228]	; (5794 <main+0x8fc>)
    56b0:	4313      	orrs	r3, r2
    56b2:	9306      	str	r3, [sp, #24]
	sd_filter.S0.bit.SFID2 = 0x7F0;
    56b4:	9b06      	ldr	r3, [sp, #24]
    56b6:	0adb      	lsrs	r3, r3, #11
    56b8:	02db      	lsls	r3, r3, #11
    56ba:	22fe      	movs	r2, #254	; 0xfe
    56bc:	00d2      	lsls	r2, r2, #3
    56be:	4313      	orrs	r3, r2
    56c0:	9306      	str	r3, [sp, #24]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    56c2:	2201      	movs	r2, #1
    56c4:	a906      	add	r1, sp, #24
    56c6:	0030      	movs	r0, r6
    56c8:	47a8      	blx	r5
	module_inst->hw->IE.reg |= source;
    56ca:	6832      	ldr	r2, [r6, #0]
    56cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
    56ce:	2101      	movs	r1, #1
    56d0:	430b      	orrs	r3, r1
    56d2:	6553      	str	r3, [r2, #84]	; 0x54
	tx_element->T0.reg = 0;
    56d4:	2300      	movs	r3, #0
    56d6:	9307      	str	r3, [sp, #28]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    56d8:	2388      	movs	r3, #136	; 0x88
    56da:	041b      	lsls	r3, r3, #16
    56dc:	9308      	str	r3, [sp, #32]
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x400+NODE_ID);
    56de:	9a07      	ldr	r2, [sp, #28]
    56e0:	4b2d      	ldr	r3, [pc, #180]	; (5798 <main+0x900>)
    56e2:	4313      	orrs	r3, r2
    56e4:	9307      	str	r3, [sp, #28]
	tx_element.T1.bit.DLC = 8;
    56e6:	9b08      	ldr	r3, [sp, #32]
    56e8:	4a2c      	ldr	r2, [pc, #176]	; (579c <main+0x904>)
    56ea:	401a      	ands	r2, r3
    56ec:	2380      	movs	r3, #128	; 0x80
    56ee:	031b      	lsls	r3, r3, #12
    56f0:	4313      	orrs	r3, r2
    56f2:	9308      	str	r3, [sp, #32]
	memset(message_out,0,8);
    56f4:	ad29      	add	r5, sp, #164	; 0xa4
    56f6:	2208      	movs	r2, #8
    56f8:	2100      	movs	r1, #0
    56fa:	0028      	movs	r0, r5
    56fc:	4b28      	ldr	r3, [pc, #160]	; (57a0 <main+0x908>)
    56fe:	4798      	blx	r3
	Delay_ms(1000);
    5700:	20fa      	movs	r0, #250	; 0xfa
    5702:	0080      	lsls	r0, r0, #2
    5704:	4b27      	ldr	r3, [pc, #156]	; (57a4 <main+0x90c>)
    5706:	4798      	blx	r3
	g_sent = 0;
    5708:	4b27      	ldr	r3, [pc, #156]	; (57a8 <main+0x910>)
    570a:	2200      	movs	r2, #0
    570c:	601a      	str	r2, [r3, #0]
		present80Encrypt(session_key,message_out);
    570e:	0029      	movs	r1, r5
    5710:	a82d      	add	r0, sp, #180	; 0xb4
    5712:	4b26      	ldr	r3, [pc, #152]	; (57ac <main+0x914>)
    5714:	4798      	blx	r3
		memcpy(tx_element.data,message_out,8);
    5716:	ab09      	add	r3, sp, #36	; 0x24
    5718:	cd06      	ldmia	r5!, {r1, r2}
    571a:	c306      	stmia	r3!, {r1, r2}
		can_set_tx_buffer_element(&can_instance, &tx_element,
    571c:	2205      	movs	r2, #5
    571e:	a907      	add	r1, sp, #28
    5720:	0030      	movs	r0, r6
    5722:	4b23      	ldr	r3, [pc, #140]	; (57b0 <main+0x918>)
    5724:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    5726:	6833      	ldr	r3, [r6, #0]
    5728:	699a      	ldr	r2, [r3, #24]
    572a:	4217      	tst	r7, r2
    572c:	d102      	bne.n	5734 <main+0x89c>
	module_inst->hw->TXBAR.reg = trig_mask;
    572e:	2120      	movs	r1, #32
    5730:	22d0      	movs	r2, #208	; 0xd0
    5732:	5099      	str	r1, [r3, r2]
		g_sent = 1;
    5734:	4b1c      	ldr	r3, [pc, #112]	; (57a8 <main+0x910>)
    5736:	2201      	movs	r2, #1
    5738:	601a      	str	r2, [r3, #0]
		Delay_ms(1000);
    573a:	20fa      	movs	r0, #250	; 0xfa
    573c:	0080      	lsls	r0, r0, #2
    573e:	4b19      	ldr	r3, [pc, #100]	; (57a4 <main+0x90c>)
    5740:	4798      	blx	r3
	for (int i = 0; i < TOTAL_SENDS; i++) {
    5742:	2300      	movs	r3, #0
    5744:	4699      	mov	r9, r3
	return module_inst->hw->TXBTO.reg;
    5746:	4b0e      	ldr	r3, [pc, #56]	; (5780 <main+0x8e8>)
    5748:	469a      	mov	sl, r3
		while(g_sent != 0) {
    574a:	4d17      	ldr	r5, [pc, #92]	; (57a8 <main+0x910>)
    574c:	27d8      	movs	r7, #216	; 0xd8
			if ((can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX)))
    574e:	2620      	movs	r6, #32
    5750:	e4d4      	b.n	50fc <main+0x264>
    5752:	46c0      	nop			; (mov r8, r8)
    5754:	00005ce9 	.word	0x00005ce9
    5758:	000099f0 	.word	0x000099f0
    575c:	00009a0c 	.word	0x00009a0c
    5760:	00005ddd 	.word	0x00005ddd
    5764:	00004861 	.word	0x00004861
    5768:	000099f8 	.word	0x000099f8
    576c:	00009a10 	.word	0x00009a10
    5770:	00006cf4 	.word	0x00006cf4
    5774:	20000b84 	.word	0x20000b84
    5778:	20000b38 	.word	0x20000b38
    577c:	c7ffffff 	.word	0xc7ffffff
    5780:	20000b48 	.word	0x20000b48
    5784:	0000050d 	.word	0x0000050d
    5788:	00009a24 	.word	0x00009a24
    578c:	880007ff 	.word	0x880007ff
    5790:	f800ffff 	.word	0xf800ffff
    5794:	04010000 	.word	0x04010000
    5798:	10040000 	.word	0x10040000
    579c:	fff0ffff 	.word	0xfff0ffff
    57a0:	00005b87 	.word	0x00005b87
    57a4:	000049ad 	.word	0x000049ad
    57a8:	20000b44 	.word	0x20000b44
    57ac:	00004739 	.word	0x00004739
    57b0:	000005e9 	.word	0x000005e9

000057b4 <__udivsi3>:
    57b4:	2200      	movs	r2, #0
    57b6:	0843      	lsrs	r3, r0, #1
    57b8:	428b      	cmp	r3, r1
    57ba:	d374      	bcc.n	58a6 <__udivsi3+0xf2>
    57bc:	0903      	lsrs	r3, r0, #4
    57be:	428b      	cmp	r3, r1
    57c0:	d35f      	bcc.n	5882 <__udivsi3+0xce>
    57c2:	0a03      	lsrs	r3, r0, #8
    57c4:	428b      	cmp	r3, r1
    57c6:	d344      	bcc.n	5852 <__udivsi3+0x9e>
    57c8:	0b03      	lsrs	r3, r0, #12
    57ca:	428b      	cmp	r3, r1
    57cc:	d328      	bcc.n	5820 <__udivsi3+0x6c>
    57ce:	0c03      	lsrs	r3, r0, #16
    57d0:	428b      	cmp	r3, r1
    57d2:	d30d      	bcc.n	57f0 <__udivsi3+0x3c>
    57d4:	22ff      	movs	r2, #255	; 0xff
    57d6:	0209      	lsls	r1, r1, #8
    57d8:	ba12      	rev	r2, r2
    57da:	0c03      	lsrs	r3, r0, #16
    57dc:	428b      	cmp	r3, r1
    57de:	d302      	bcc.n	57e6 <__udivsi3+0x32>
    57e0:	1212      	asrs	r2, r2, #8
    57e2:	0209      	lsls	r1, r1, #8
    57e4:	d065      	beq.n	58b2 <__udivsi3+0xfe>
    57e6:	0b03      	lsrs	r3, r0, #12
    57e8:	428b      	cmp	r3, r1
    57ea:	d319      	bcc.n	5820 <__udivsi3+0x6c>
    57ec:	e000      	b.n	57f0 <__udivsi3+0x3c>
    57ee:	0a09      	lsrs	r1, r1, #8
    57f0:	0bc3      	lsrs	r3, r0, #15
    57f2:	428b      	cmp	r3, r1
    57f4:	d301      	bcc.n	57fa <__udivsi3+0x46>
    57f6:	03cb      	lsls	r3, r1, #15
    57f8:	1ac0      	subs	r0, r0, r3
    57fa:	4152      	adcs	r2, r2
    57fc:	0b83      	lsrs	r3, r0, #14
    57fe:	428b      	cmp	r3, r1
    5800:	d301      	bcc.n	5806 <__udivsi3+0x52>
    5802:	038b      	lsls	r3, r1, #14
    5804:	1ac0      	subs	r0, r0, r3
    5806:	4152      	adcs	r2, r2
    5808:	0b43      	lsrs	r3, r0, #13
    580a:	428b      	cmp	r3, r1
    580c:	d301      	bcc.n	5812 <__udivsi3+0x5e>
    580e:	034b      	lsls	r3, r1, #13
    5810:	1ac0      	subs	r0, r0, r3
    5812:	4152      	adcs	r2, r2
    5814:	0b03      	lsrs	r3, r0, #12
    5816:	428b      	cmp	r3, r1
    5818:	d301      	bcc.n	581e <__udivsi3+0x6a>
    581a:	030b      	lsls	r3, r1, #12
    581c:	1ac0      	subs	r0, r0, r3
    581e:	4152      	adcs	r2, r2
    5820:	0ac3      	lsrs	r3, r0, #11
    5822:	428b      	cmp	r3, r1
    5824:	d301      	bcc.n	582a <__udivsi3+0x76>
    5826:	02cb      	lsls	r3, r1, #11
    5828:	1ac0      	subs	r0, r0, r3
    582a:	4152      	adcs	r2, r2
    582c:	0a83      	lsrs	r3, r0, #10
    582e:	428b      	cmp	r3, r1
    5830:	d301      	bcc.n	5836 <__udivsi3+0x82>
    5832:	028b      	lsls	r3, r1, #10
    5834:	1ac0      	subs	r0, r0, r3
    5836:	4152      	adcs	r2, r2
    5838:	0a43      	lsrs	r3, r0, #9
    583a:	428b      	cmp	r3, r1
    583c:	d301      	bcc.n	5842 <__udivsi3+0x8e>
    583e:	024b      	lsls	r3, r1, #9
    5840:	1ac0      	subs	r0, r0, r3
    5842:	4152      	adcs	r2, r2
    5844:	0a03      	lsrs	r3, r0, #8
    5846:	428b      	cmp	r3, r1
    5848:	d301      	bcc.n	584e <__udivsi3+0x9a>
    584a:	020b      	lsls	r3, r1, #8
    584c:	1ac0      	subs	r0, r0, r3
    584e:	4152      	adcs	r2, r2
    5850:	d2cd      	bcs.n	57ee <__udivsi3+0x3a>
    5852:	09c3      	lsrs	r3, r0, #7
    5854:	428b      	cmp	r3, r1
    5856:	d301      	bcc.n	585c <__udivsi3+0xa8>
    5858:	01cb      	lsls	r3, r1, #7
    585a:	1ac0      	subs	r0, r0, r3
    585c:	4152      	adcs	r2, r2
    585e:	0983      	lsrs	r3, r0, #6
    5860:	428b      	cmp	r3, r1
    5862:	d301      	bcc.n	5868 <__udivsi3+0xb4>
    5864:	018b      	lsls	r3, r1, #6
    5866:	1ac0      	subs	r0, r0, r3
    5868:	4152      	adcs	r2, r2
    586a:	0943      	lsrs	r3, r0, #5
    586c:	428b      	cmp	r3, r1
    586e:	d301      	bcc.n	5874 <__udivsi3+0xc0>
    5870:	014b      	lsls	r3, r1, #5
    5872:	1ac0      	subs	r0, r0, r3
    5874:	4152      	adcs	r2, r2
    5876:	0903      	lsrs	r3, r0, #4
    5878:	428b      	cmp	r3, r1
    587a:	d301      	bcc.n	5880 <__udivsi3+0xcc>
    587c:	010b      	lsls	r3, r1, #4
    587e:	1ac0      	subs	r0, r0, r3
    5880:	4152      	adcs	r2, r2
    5882:	08c3      	lsrs	r3, r0, #3
    5884:	428b      	cmp	r3, r1
    5886:	d301      	bcc.n	588c <__udivsi3+0xd8>
    5888:	00cb      	lsls	r3, r1, #3
    588a:	1ac0      	subs	r0, r0, r3
    588c:	4152      	adcs	r2, r2
    588e:	0883      	lsrs	r3, r0, #2
    5890:	428b      	cmp	r3, r1
    5892:	d301      	bcc.n	5898 <__udivsi3+0xe4>
    5894:	008b      	lsls	r3, r1, #2
    5896:	1ac0      	subs	r0, r0, r3
    5898:	4152      	adcs	r2, r2
    589a:	0843      	lsrs	r3, r0, #1
    589c:	428b      	cmp	r3, r1
    589e:	d301      	bcc.n	58a4 <__udivsi3+0xf0>
    58a0:	004b      	lsls	r3, r1, #1
    58a2:	1ac0      	subs	r0, r0, r3
    58a4:	4152      	adcs	r2, r2
    58a6:	1a41      	subs	r1, r0, r1
    58a8:	d200      	bcs.n	58ac <__udivsi3+0xf8>
    58aa:	4601      	mov	r1, r0
    58ac:	4152      	adcs	r2, r2
    58ae:	4610      	mov	r0, r2
    58b0:	4770      	bx	lr
    58b2:	e7ff      	b.n	58b4 <__udivsi3+0x100>
    58b4:	b501      	push	{r0, lr}
    58b6:	2000      	movs	r0, #0
    58b8:	f000 f8f0 	bl	5a9c <__aeabi_idiv0>
    58bc:	bd02      	pop	{r1, pc}
    58be:	46c0      	nop			; (mov r8, r8)

000058c0 <__aeabi_uidivmod>:
    58c0:	2900      	cmp	r1, #0
    58c2:	d0f7      	beq.n	58b4 <__udivsi3+0x100>
    58c4:	e776      	b.n	57b4 <__udivsi3>
    58c6:	4770      	bx	lr

000058c8 <__divsi3>:
    58c8:	4603      	mov	r3, r0
    58ca:	430b      	orrs	r3, r1
    58cc:	d47f      	bmi.n	59ce <__divsi3+0x106>
    58ce:	2200      	movs	r2, #0
    58d0:	0843      	lsrs	r3, r0, #1
    58d2:	428b      	cmp	r3, r1
    58d4:	d374      	bcc.n	59c0 <__divsi3+0xf8>
    58d6:	0903      	lsrs	r3, r0, #4
    58d8:	428b      	cmp	r3, r1
    58da:	d35f      	bcc.n	599c <__divsi3+0xd4>
    58dc:	0a03      	lsrs	r3, r0, #8
    58de:	428b      	cmp	r3, r1
    58e0:	d344      	bcc.n	596c <__divsi3+0xa4>
    58e2:	0b03      	lsrs	r3, r0, #12
    58e4:	428b      	cmp	r3, r1
    58e6:	d328      	bcc.n	593a <__divsi3+0x72>
    58e8:	0c03      	lsrs	r3, r0, #16
    58ea:	428b      	cmp	r3, r1
    58ec:	d30d      	bcc.n	590a <__divsi3+0x42>
    58ee:	22ff      	movs	r2, #255	; 0xff
    58f0:	0209      	lsls	r1, r1, #8
    58f2:	ba12      	rev	r2, r2
    58f4:	0c03      	lsrs	r3, r0, #16
    58f6:	428b      	cmp	r3, r1
    58f8:	d302      	bcc.n	5900 <__divsi3+0x38>
    58fa:	1212      	asrs	r2, r2, #8
    58fc:	0209      	lsls	r1, r1, #8
    58fe:	d065      	beq.n	59cc <__divsi3+0x104>
    5900:	0b03      	lsrs	r3, r0, #12
    5902:	428b      	cmp	r3, r1
    5904:	d319      	bcc.n	593a <__divsi3+0x72>
    5906:	e000      	b.n	590a <__divsi3+0x42>
    5908:	0a09      	lsrs	r1, r1, #8
    590a:	0bc3      	lsrs	r3, r0, #15
    590c:	428b      	cmp	r3, r1
    590e:	d301      	bcc.n	5914 <__divsi3+0x4c>
    5910:	03cb      	lsls	r3, r1, #15
    5912:	1ac0      	subs	r0, r0, r3
    5914:	4152      	adcs	r2, r2
    5916:	0b83      	lsrs	r3, r0, #14
    5918:	428b      	cmp	r3, r1
    591a:	d301      	bcc.n	5920 <__divsi3+0x58>
    591c:	038b      	lsls	r3, r1, #14
    591e:	1ac0      	subs	r0, r0, r3
    5920:	4152      	adcs	r2, r2
    5922:	0b43      	lsrs	r3, r0, #13
    5924:	428b      	cmp	r3, r1
    5926:	d301      	bcc.n	592c <__divsi3+0x64>
    5928:	034b      	lsls	r3, r1, #13
    592a:	1ac0      	subs	r0, r0, r3
    592c:	4152      	adcs	r2, r2
    592e:	0b03      	lsrs	r3, r0, #12
    5930:	428b      	cmp	r3, r1
    5932:	d301      	bcc.n	5938 <__divsi3+0x70>
    5934:	030b      	lsls	r3, r1, #12
    5936:	1ac0      	subs	r0, r0, r3
    5938:	4152      	adcs	r2, r2
    593a:	0ac3      	lsrs	r3, r0, #11
    593c:	428b      	cmp	r3, r1
    593e:	d301      	bcc.n	5944 <__divsi3+0x7c>
    5940:	02cb      	lsls	r3, r1, #11
    5942:	1ac0      	subs	r0, r0, r3
    5944:	4152      	adcs	r2, r2
    5946:	0a83      	lsrs	r3, r0, #10
    5948:	428b      	cmp	r3, r1
    594a:	d301      	bcc.n	5950 <__divsi3+0x88>
    594c:	028b      	lsls	r3, r1, #10
    594e:	1ac0      	subs	r0, r0, r3
    5950:	4152      	adcs	r2, r2
    5952:	0a43      	lsrs	r3, r0, #9
    5954:	428b      	cmp	r3, r1
    5956:	d301      	bcc.n	595c <__divsi3+0x94>
    5958:	024b      	lsls	r3, r1, #9
    595a:	1ac0      	subs	r0, r0, r3
    595c:	4152      	adcs	r2, r2
    595e:	0a03      	lsrs	r3, r0, #8
    5960:	428b      	cmp	r3, r1
    5962:	d301      	bcc.n	5968 <__divsi3+0xa0>
    5964:	020b      	lsls	r3, r1, #8
    5966:	1ac0      	subs	r0, r0, r3
    5968:	4152      	adcs	r2, r2
    596a:	d2cd      	bcs.n	5908 <__divsi3+0x40>
    596c:	09c3      	lsrs	r3, r0, #7
    596e:	428b      	cmp	r3, r1
    5970:	d301      	bcc.n	5976 <__divsi3+0xae>
    5972:	01cb      	lsls	r3, r1, #7
    5974:	1ac0      	subs	r0, r0, r3
    5976:	4152      	adcs	r2, r2
    5978:	0983      	lsrs	r3, r0, #6
    597a:	428b      	cmp	r3, r1
    597c:	d301      	bcc.n	5982 <__divsi3+0xba>
    597e:	018b      	lsls	r3, r1, #6
    5980:	1ac0      	subs	r0, r0, r3
    5982:	4152      	adcs	r2, r2
    5984:	0943      	lsrs	r3, r0, #5
    5986:	428b      	cmp	r3, r1
    5988:	d301      	bcc.n	598e <__divsi3+0xc6>
    598a:	014b      	lsls	r3, r1, #5
    598c:	1ac0      	subs	r0, r0, r3
    598e:	4152      	adcs	r2, r2
    5990:	0903      	lsrs	r3, r0, #4
    5992:	428b      	cmp	r3, r1
    5994:	d301      	bcc.n	599a <__divsi3+0xd2>
    5996:	010b      	lsls	r3, r1, #4
    5998:	1ac0      	subs	r0, r0, r3
    599a:	4152      	adcs	r2, r2
    599c:	08c3      	lsrs	r3, r0, #3
    599e:	428b      	cmp	r3, r1
    59a0:	d301      	bcc.n	59a6 <__divsi3+0xde>
    59a2:	00cb      	lsls	r3, r1, #3
    59a4:	1ac0      	subs	r0, r0, r3
    59a6:	4152      	adcs	r2, r2
    59a8:	0883      	lsrs	r3, r0, #2
    59aa:	428b      	cmp	r3, r1
    59ac:	d301      	bcc.n	59b2 <__divsi3+0xea>
    59ae:	008b      	lsls	r3, r1, #2
    59b0:	1ac0      	subs	r0, r0, r3
    59b2:	4152      	adcs	r2, r2
    59b4:	0843      	lsrs	r3, r0, #1
    59b6:	428b      	cmp	r3, r1
    59b8:	d301      	bcc.n	59be <__divsi3+0xf6>
    59ba:	004b      	lsls	r3, r1, #1
    59bc:	1ac0      	subs	r0, r0, r3
    59be:	4152      	adcs	r2, r2
    59c0:	1a41      	subs	r1, r0, r1
    59c2:	d200      	bcs.n	59c6 <__divsi3+0xfe>
    59c4:	4601      	mov	r1, r0
    59c6:	4152      	adcs	r2, r2
    59c8:	4610      	mov	r0, r2
    59ca:	4770      	bx	lr
    59cc:	e05d      	b.n	5a8a <__divsi3+0x1c2>
    59ce:	0fca      	lsrs	r2, r1, #31
    59d0:	d000      	beq.n	59d4 <__divsi3+0x10c>
    59d2:	4249      	negs	r1, r1
    59d4:	1003      	asrs	r3, r0, #32
    59d6:	d300      	bcc.n	59da <__divsi3+0x112>
    59d8:	4240      	negs	r0, r0
    59da:	4053      	eors	r3, r2
    59dc:	2200      	movs	r2, #0
    59de:	469c      	mov	ip, r3
    59e0:	0903      	lsrs	r3, r0, #4
    59e2:	428b      	cmp	r3, r1
    59e4:	d32d      	bcc.n	5a42 <__divsi3+0x17a>
    59e6:	0a03      	lsrs	r3, r0, #8
    59e8:	428b      	cmp	r3, r1
    59ea:	d312      	bcc.n	5a12 <__divsi3+0x14a>
    59ec:	22fc      	movs	r2, #252	; 0xfc
    59ee:	0189      	lsls	r1, r1, #6
    59f0:	ba12      	rev	r2, r2
    59f2:	0a03      	lsrs	r3, r0, #8
    59f4:	428b      	cmp	r3, r1
    59f6:	d30c      	bcc.n	5a12 <__divsi3+0x14a>
    59f8:	0189      	lsls	r1, r1, #6
    59fa:	1192      	asrs	r2, r2, #6
    59fc:	428b      	cmp	r3, r1
    59fe:	d308      	bcc.n	5a12 <__divsi3+0x14a>
    5a00:	0189      	lsls	r1, r1, #6
    5a02:	1192      	asrs	r2, r2, #6
    5a04:	428b      	cmp	r3, r1
    5a06:	d304      	bcc.n	5a12 <__divsi3+0x14a>
    5a08:	0189      	lsls	r1, r1, #6
    5a0a:	d03a      	beq.n	5a82 <__divsi3+0x1ba>
    5a0c:	1192      	asrs	r2, r2, #6
    5a0e:	e000      	b.n	5a12 <__divsi3+0x14a>
    5a10:	0989      	lsrs	r1, r1, #6
    5a12:	09c3      	lsrs	r3, r0, #7
    5a14:	428b      	cmp	r3, r1
    5a16:	d301      	bcc.n	5a1c <__divsi3+0x154>
    5a18:	01cb      	lsls	r3, r1, #7
    5a1a:	1ac0      	subs	r0, r0, r3
    5a1c:	4152      	adcs	r2, r2
    5a1e:	0983      	lsrs	r3, r0, #6
    5a20:	428b      	cmp	r3, r1
    5a22:	d301      	bcc.n	5a28 <__divsi3+0x160>
    5a24:	018b      	lsls	r3, r1, #6
    5a26:	1ac0      	subs	r0, r0, r3
    5a28:	4152      	adcs	r2, r2
    5a2a:	0943      	lsrs	r3, r0, #5
    5a2c:	428b      	cmp	r3, r1
    5a2e:	d301      	bcc.n	5a34 <__divsi3+0x16c>
    5a30:	014b      	lsls	r3, r1, #5
    5a32:	1ac0      	subs	r0, r0, r3
    5a34:	4152      	adcs	r2, r2
    5a36:	0903      	lsrs	r3, r0, #4
    5a38:	428b      	cmp	r3, r1
    5a3a:	d301      	bcc.n	5a40 <__divsi3+0x178>
    5a3c:	010b      	lsls	r3, r1, #4
    5a3e:	1ac0      	subs	r0, r0, r3
    5a40:	4152      	adcs	r2, r2
    5a42:	08c3      	lsrs	r3, r0, #3
    5a44:	428b      	cmp	r3, r1
    5a46:	d301      	bcc.n	5a4c <__divsi3+0x184>
    5a48:	00cb      	lsls	r3, r1, #3
    5a4a:	1ac0      	subs	r0, r0, r3
    5a4c:	4152      	adcs	r2, r2
    5a4e:	0883      	lsrs	r3, r0, #2
    5a50:	428b      	cmp	r3, r1
    5a52:	d301      	bcc.n	5a58 <__divsi3+0x190>
    5a54:	008b      	lsls	r3, r1, #2
    5a56:	1ac0      	subs	r0, r0, r3
    5a58:	4152      	adcs	r2, r2
    5a5a:	d2d9      	bcs.n	5a10 <__divsi3+0x148>
    5a5c:	0843      	lsrs	r3, r0, #1
    5a5e:	428b      	cmp	r3, r1
    5a60:	d301      	bcc.n	5a66 <__divsi3+0x19e>
    5a62:	004b      	lsls	r3, r1, #1
    5a64:	1ac0      	subs	r0, r0, r3
    5a66:	4152      	adcs	r2, r2
    5a68:	1a41      	subs	r1, r0, r1
    5a6a:	d200      	bcs.n	5a6e <__divsi3+0x1a6>
    5a6c:	4601      	mov	r1, r0
    5a6e:	4663      	mov	r3, ip
    5a70:	4152      	adcs	r2, r2
    5a72:	105b      	asrs	r3, r3, #1
    5a74:	4610      	mov	r0, r2
    5a76:	d301      	bcc.n	5a7c <__divsi3+0x1b4>
    5a78:	4240      	negs	r0, r0
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	d500      	bpl.n	5a80 <__divsi3+0x1b8>
    5a7e:	4249      	negs	r1, r1
    5a80:	4770      	bx	lr
    5a82:	4663      	mov	r3, ip
    5a84:	105b      	asrs	r3, r3, #1
    5a86:	d300      	bcc.n	5a8a <__divsi3+0x1c2>
    5a88:	4240      	negs	r0, r0
    5a8a:	b501      	push	{r0, lr}
    5a8c:	2000      	movs	r0, #0
    5a8e:	f000 f805 	bl	5a9c <__aeabi_idiv0>
    5a92:	bd02      	pop	{r1, pc}

00005a94 <__aeabi_idivmod>:
    5a94:	2900      	cmp	r1, #0
    5a96:	d0f8      	beq.n	5a8a <__divsi3+0x1c2>
    5a98:	e716      	b.n	58c8 <__divsi3>
    5a9a:	4770      	bx	lr

00005a9c <__aeabi_idiv0>:
    5a9c:	4770      	bx	lr
    5a9e:	46c0      	nop			; (mov r8, r8)

00005aa0 <__aeabi_lmul>:
    5aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aa2:	46ce      	mov	lr, r9
    5aa4:	4647      	mov	r7, r8
    5aa6:	0415      	lsls	r5, r2, #16
    5aa8:	0c2d      	lsrs	r5, r5, #16
    5aaa:	002e      	movs	r6, r5
    5aac:	b580      	push	{r7, lr}
    5aae:	0407      	lsls	r7, r0, #16
    5ab0:	0c14      	lsrs	r4, r2, #16
    5ab2:	0c3f      	lsrs	r7, r7, #16
    5ab4:	4699      	mov	r9, r3
    5ab6:	0c03      	lsrs	r3, r0, #16
    5ab8:	437e      	muls	r6, r7
    5aba:	435d      	muls	r5, r3
    5abc:	4367      	muls	r7, r4
    5abe:	4363      	muls	r3, r4
    5ac0:	197f      	adds	r7, r7, r5
    5ac2:	0c34      	lsrs	r4, r6, #16
    5ac4:	19e4      	adds	r4, r4, r7
    5ac6:	469c      	mov	ip, r3
    5ac8:	42a5      	cmp	r5, r4
    5aca:	d903      	bls.n	5ad4 <__aeabi_lmul+0x34>
    5acc:	2380      	movs	r3, #128	; 0x80
    5ace:	025b      	lsls	r3, r3, #9
    5ad0:	4698      	mov	r8, r3
    5ad2:	44c4      	add	ip, r8
    5ad4:	464b      	mov	r3, r9
    5ad6:	4351      	muls	r1, r2
    5ad8:	4343      	muls	r3, r0
    5ada:	0436      	lsls	r6, r6, #16
    5adc:	0c36      	lsrs	r6, r6, #16
    5ade:	0c25      	lsrs	r5, r4, #16
    5ae0:	0424      	lsls	r4, r4, #16
    5ae2:	4465      	add	r5, ip
    5ae4:	19a4      	adds	r4, r4, r6
    5ae6:	1859      	adds	r1, r3, r1
    5ae8:	1949      	adds	r1, r1, r5
    5aea:	0020      	movs	r0, r4
    5aec:	bc0c      	pop	{r2, r3}
    5aee:	4690      	mov	r8, r2
    5af0:	4699      	mov	r9, r3
    5af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005af4 <__libc_init_array>:
    5af4:	b570      	push	{r4, r5, r6, lr}
    5af6:	2600      	movs	r6, #0
    5af8:	4d0c      	ldr	r5, [pc, #48]	; (5b2c <__libc_init_array+0x38>)
    5afa:	4c0d      	ldr	r4, [pc, #52]	; (5b30 <__libc_init_array+0x3c>)
    5afc:	1b64      	subs	r4, r4, r5
    5afe:	10a4      	asrs	r4, r4, #2
    5b00:	42a6      	cmp	r6, r4
    5b02:	d109      	bne.n	5b18 <__libc_init_array+0x24>
    5b04:	2600      	movs	r6, #0
    5b06:	f004 f803 	bl	9b10 <_init>
    5b0a:	4d0a      	ldr	r5, [pc, #40]	; (5b34 <__libc_init_array+0x40>)
    5b0c:	4c0a      	ldr	r4, [pc, #40]	; (5b38 <__libc_init_array+0x44>)
    5b0e:	1b64      	subs	r4, r4, r5
    5b10:	10a4      	asrs	r4, r4, #2
    5b12:	42a6      	cmp	r6, r4
    5b14:	d105      	bne.n	5b22 <__libc_init_array+0x2e>
    5b16:	bd70      	pop	{r4, r5, r6, pc}
    5b18:	00b3      	lsls	r3, r6, #2
    5b1a:	58eb      	ldr	r3, [r5, r3]
    5b1c:	4798      	blx	r3
    5b1e:	3601      	adds	r6, #1
    5b20:	e7ee      	b.n	5b00 <__libc_init_array+0xc>
    5b22:	00b3      	lsls	r3, r6, #2
    5b24:	58eb      	ldr	r3, [r5, r3]
    5b26:	4798      	blx	r3
    5b28:	3601      	adds	r6, #1
    5b2a:	e7f2      	b.n	5b12 <__libc_init_array+0x1e>
    5b2c:	00009b1c 	.word	0x00009b1c
    5b30:	00009b1c 	.word	0x00009b1c
    5b34:	00009b1c 	.word	0x00009b1c
    5b38:	00009b20 	.word	0x00009b20

00005b3c <malloc>:
    5b3c:	b510      	push	{r4, lr}
    5b3e:	4b03      	ldr	r3, [pc, #12]	; (5b4c <malloc+0x10>)
    5b40:	0001      	movs	r1, r0
    5b42:	6818      	ldr	r0, [r3, #0]
    5b44:	f000 f872 	bl	5c2c <_malloc_r>
    5b48:	bd10      	pop	{r4, pc}
    5b4a:	46c0      	nop			; (mov r8, r8)
    5b4c:	20000104 	.word	0x20000104

00005b50 <memcpy>:
    5b50:	2300      	movs	r3, #0
    5b52:	b510      	push	{r4, lr}
    5b54:	429a      	cmp	r2, r3
    5b56:	d100      	bne.n	5b5a <memcpy+0xa>
    5b58:	bd10      	pop	{r4, pc}
    5b5a:	5ccc      	ldrb	r4, [r1, r3]
    5b5c:	54c4      	strb	r4, [r0, r3]
    5b5e:	3301      	adds	r3, #1
    5b60:	e7f8      	b.n	5b54 <memcpy+0x4>

00005b62 <memmove>:
    5b62:	b510      	push	{r4, lr}
    5b64:	4288      	cmp	r0, r1
    5b66:	d902      	bls.n	5b6e <memmove+0xc>
    5b68:	188b      	adds	r3, r1, r2
    5b6a:	4298      	cmp	r0, r3
    5b6c:	d308      	bcc.n	5b80 <memmove+0x1e>
    5b6e:	2300      	movs	r3, #0
    5b70:	429a      	cmp	r2, r3
    5b72:	d007      	beq.n	5b84 <memmove+0x22>
    5b74:	5ccc      	ldrb	r4, [r1, r3]
    5b76:	54c4      	strb	r4, [r0, r3]
    5b78:	3301      	adds	r3, #1
    5b7a:	e7f9      	b.n	5b70 <memmove+0xe>
    5b7c:	5c8b      	ldrb	r3, [r1, r2]
    5b7e:	5483      	strb	r3, [r0, r2]
    5b80:	3a01      	subs	r2, #1
    5b82:	d2fb      	bcs.n	5b7c <memmove+0x1a>
    5b84:	bd10      	pop	{r4, pc}

00005b86 <memset>:
    5b86:	0003      	movs	r3, r0
    5b88:	1882      	adds	r2, r0, r2
    5b8a:	4293      	cmp	r3, r2
    5b8c:	d100      	bne.n	5b90 <memset+0xa>
    5b8e:	4770      	bx	lr
    5b90:	7019      	strb	r1, [r3, #0]
    5b92:	3301      	adds	r3, #1
    5b94:	e7f9      	b.n	5b8a <memset+0x4>
	...

00005b98 <_free_r>:
    5b98:	b570      	push	{r4, r5, r6, lr}
    5b9a:	0005      	movs	r5, r0
    5b9c:	2900      	cmp	r1, #0
    5b9e:	d010      	beq.n	5bc2 <_free_r+0x2a>
    5ba0:	1f0c      	subs	r4, r1, #4
    5ba2:	6823      	ldr	r3, [r4, #0]
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	da00      	bge.n	5baa <_free_r+0x12>
    5ba8:	18e4      	adds	r4, r4, r3
    5baa:	0028      	movs	r0, r5
    5bac:	f000 fcae 	bl	650c <__malloc_lock>
    5bb0:	4a1d      	ldr	r2, [pc, #116]	; (5c28 <_free_r+0x90>)
    5bb2:	6813      	ldr	r3, [r2, #0]
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	d105      	bne.n	5bc4 <_free_r+0x2c>
    5bb8:	6063      	str	r3, [r4, #4]
    5bba:	6014      	str	r4, [r2, #0]
    5bbc:	0028      	movs	r0, r5
    5bbe:	f000 fca6 	bl	650e <__malloc_unlock>
    5bc2:	bd70      	pop	{r4, r5, r6, pc}
    5bc4:	42a3      	cmp	r3, r4
    5bc6:	d909      	bls.n	5bdc <_free_r+0x44>
    5bc8:	6821      	ldr	r1, [r4, #0]
    5bca:	1860      	adds	r0, r4, r1
    5bcc:	4283      	cmp	r3, r0
    5bce:	d1f3      	bne.n	5bb8 <_free_r+0x20>
    5bd0:	6818      	ldr	r0, [r3, #0]
    5bd2:	685b      	ldr	r3, [r3, #4]
    5bd4:	1841      	adds	r1, r0, r1
    5bd6:	6021      	str	r1, [r4, #0]
    5bd8:	e7ee      	b.n	5bb8 <_free_r+0x20>
    5bda:	0013      	movs	r3, r2
    5bdc:	685a      	ldr	r2, [r3, #4]
    5bde:	2a00      	cmp	r2, #0
    5be0:	d001      	beq.n	5be6 <_free_r+0x4e>
    5be2:	42a2      	cmp	r2, r4
    5be4:	d9f9      	bls.n	5bda <_free_r+0x42>
    5be6:	6819      	ldr	r1, [r3, #0]
    5be8:	1858      	adds	r0, r3, r1
    5bea:	42a0      	cmp	r0, r4
    5bec:	d10b      	bne.n	5c06 <_free_r+0x6e>
    5bee:	6820      	ldr	r0, [r4, #0]
    5bf0:	1809      	adds	r1, r1, r0
    5bf2:	1858      	adds	r0, r3, r1
    5bf4:	6019      	str	r1, [r3, #0]
    5bf6:	4282      	cmp	r2, r0
    5bf8:	d1e0      	bne.n	5bbc <_free_r+0x24>
    5bfa:	6810      	ldr	r0, [r2, #0]
    5bfc:	6852      	ldr	r2, [r2, #4]
    5bfe:	1841      	adds	r1, r0, r1
    5c00:	6019      	str	r1, [r3, #0]
    5c02:	605a      	str	r2, [r3, #4]
    5c04:	e7da      	b.n	5bbc <_free_r+0x24>
    5c06:	42a0      	cmp	r0, r4
    5c08:	d902      	bls.n	5c10 <_free_r+0x78>
    5c0a:	230c      	movs	r3, #12
    5c0c:	602b      	str	r3, [r5, #0]
    5c0e:	e7d5      	b.n	5bbc <_free_r+0x24>
    5c10:	6821      	ldr	r1, [r4, #0]
    5c12:	1860      	adds	r0, r4, r1
    5c14:	4282      	cmp	r2, r0
    5c16:	d103      	bne.n	5c20 <_free_r+0x88>
    5c18:	6810      	ldr	r0, [r2, #0]
    5c1a:	6852      	ldr	r2, [r2, #4]
    5c1c:	1841      	adds	r1, r0, r1
    5c1e:	6021      	str	r1, [r4, #0]
    5c20:	6062      	str	r2, [r4, #4]
    5c22:	605c      	str	r4, [r3, #4]
    5c24:	e7ca      	b.n	5bbc <_free_r+0x24>
    5c26:	46c0      	nop			; (mov r8, r8)
    5c28:	20000bb4 	.word	0x20000bb4

00005c2c <_malloc_r>:
    5c2c:	2303      	movs	r3, #3
    5c2e:	b570      	push	{r4, r5, r6, lr}
    5c30:	1ccd      	adds	r5, r1, #3
    5c32:	439d      	bics	r5, r3
    5c34:	3508      	adds	r5, #8
    5c36:	0006      	movs	r6, r0
    5c38:	2d0c      	cmp	r5, #12
    5c3a:	d21e      	bcs.n	5c7a <_malloc_r+0x4e>
    5c3c:	250c      	movs	r5, #12
    5c3e:	42a9      	cmp	r1, r5
    5c40:	d81d      	bhi.n	5c7e <_malloc_r+0x52>
    5c42:	0030      	movs	r0, r6
    5c44:	f000 fc62 	bl	650c <__malloc_lock>
    5c48:	4a25      	ldr	r2, [pc, #148]	; (5ce0 <_malloc_r+0xb4>)
    5c4a:	6814      	ldr	r4, [r2, #0]
    5c4c:	0021      	movs	r1, r4
    5c4e:	2900      	cmp	r1, #0
    5c50:	d119      	bne.n	5c86 <_malloc_r+0x5a>
    5c52:	4c24      	ldr	r4, [pc, #144]	; (5ce4 <_malloc_r+0xb8>)
    5c54:	6823      	ldr	r3, [r4, #0]
    5c56:	2b00      	cmp	r3, #0
    5c58:	d103      	bne.n	5c62 <_malloc_r+0x36>
    5c5a:	0030      	movs	r0, r6
    5c5c:	f000 f8c8 	bl	5df0 <_sbrk_r>
    5c60:	6020      	str	r0, [r4, #0]
    5c62:	0029      	movs	r1, r5
    5c64:	0030      	movs	r0, r6
    5c66:	f000 f8c3 	bl	5df0 <_sbrk_r>
    5c6a:	1c43      	adds	r3, r0, #1
    5c6c:	d12c      	bne.n	5cc8 <_malloc_r+0x9c>
    5c6e:	230c      	movs	r3, #12
    5c70:	0030      	movs	r0, r6
    5c72:	6033      	str	r3, [r6, #0]
    5c74:	f000 fc4b 	bl	650e <__malloc_unlock>
    5c78:	e003      	b.n	5c82 <_malloc_r+0x56>
    5c7a:	2d00      	cmp	r5, #0
    5c7c:	dadf      	bge.n	5c3e <_malloc_r+0x12>
    5c7e:	230c      	movs	r3, #12
    5c80:	6033      	str	r3, [r6, #0]
    5c82:	2000      	movs	r0, #0
    5c84:	bd70      	pop	{r4, r5, r6, pc}
    5c86:	680b      	ldr	r3, [r1, #0]
    5c88:	1b5b      	subs	r3, r3, r5
    5c8a:	d41a      	bmi.n	5cc2 <_malloc_r+0x96>
    5c8c:	2b0b      	cmp	r3, #11
    5c8e:	d903      	bls.n	5c98 <_malloc_r+0x6c>
    5c90:	600b      	str	r3, [r1, #0]
    5c92:	18cc      	adds	r4, r1, r3
    5c94:	6025      	str	r5, [r4, #0]
    5c96:	e003      	b.n	5ca0 <_malloc_r+0x74>
    5c98:	428c      	cmp	r4, r1
    5c9a:	d10e      	bne.n	5cba <_malloc_r+0x8e>
    5c9c:	6863      	ldr	r3, [r4, #4]
    5c9e:	6013      	str	r3, [r2, #0]
    5ca0:	0030      	movs	r0, r6
    5ca2:	f000 fc34 	bl	650e <__malloc_unlock>
    5ca6:	0020      	movs	r0, r4
    5ca8:	2207      	movs	r2, #7
    5caa:	300b      	adds	r0, #11
    5cac:	1d23      	adds	r3, r4, #4
    5cae:	4390      	bics	r0, r2
    5cb0:	1ac3      	subs	r3, r0, r3
    5cb2:	d0e7      	beq.n	5c84 <_malloc_r+0x58>
    5cb4:	425a      	negs	r2, r3
    5cb6:	50e2      	str	r2, [r4, r3]
    5cb8:	e7e4      	b.n	5c84 <_malloc_r+0x58>
    5cba:	684b      	ldr	r3, [r1, #4]
    5cbc:	6063      	str	r3, [r4, #4]
    5cbe:	000c      	movs	r4, r1
    5cc0:	e7ee      	b.n	5ca0 <_malloc_r+0x74>
    5cc2:	000c      	movs	r4, r1
    5cc4:	6849      	ldr	r1, [r1, #4]
    5cc6:	e7c2      	b.n	5c4e <_malloc_r+0x22>
    5cc8:	2303      	movs	r3, #3
    5cca:	1cc4      	adds	r4, r0, #3
    5ccc:	439c      	bics	r4, r3
    5cce:	42a0      	cmp	r0, r4
    5cd0:	d0e0      	beq.n	5c94 <_malloc_r+0x68>
    5cd2:	1a21      	subs	r1, r4, r0
    5cd4:	0030      	movs	r0, r6
    5cd6:	f000 f88b 	bl	5df0 <_sbrk_r>
    5cda:	1c43      	adds	r3, r0, #1
    5cdc:	d1da      	bne.n	5c94 <_malloc_r+0x68>
    5cde:	e7c6      	b.n	5c6e <_malloc_r+0x42>
    5ce0:	20000bb4 	.word	0x20000bb4
    5ce4:	20000bb8 	.word	0x20000bb8

00005ce8 <iprintf>:
    5ce8:	b40f      	push	{r0, r1, r2, r3}
    5cea:	4b0b      	ldr	r3, [pc, #44]	; (5d18 <iprintf+0x30>)
    5cec:	b513      	push	{r0, r1, r4, lr}
    5cee:	681c      	ldr	r4, [r3, #0]
    5cf0:	2c00      	cmp	r4, #0
    5cf2:	d005      	beq.n	5d00 <iprintf+0x18>
    5cf4:	69a3      	ldr	r3, [r4, #24]
    5cf6:	2b00      	cmp	r3, #0
    5cf8:	d102      	bne.n	5d00 <iprintf+0x18>
    5cfa:	0020      	movs	r0, r4
    5cfc:	f000 fb04 	bl	6308 <__sinit>
    5d00:	ab05      	add	r3, sp, #20
    5d02:	9a04      	ldr	r2, [sp, #16]
    5d04:	68a1      	ldr	r1, [r4, #8]
    5d06:	0020      	movs	r0, r4
    5d08:	9301      	str	r3, [sp, #4]
    5d0a:	f000 fc29 	bl	6560 <_vfiprintf_r>
    5d0e:	bc16      	pop	{r1, r2, r4}
    5d10:	bc08      	pop	{r3}
    5d12:	b004      	add	sp, #16
    5d14:	4718      	bx	r3
    5d16:	46c0      	nop			; (mov r8, r8)
    5d18:	20000104 	.word	0x20000104

00005d1c <_puts_r>:
    5d1c:	b570      	push	{r4, r5, r6, lr}
    5d1e:	0005      	movs	r5, r0
    5d20:	000e      	movs	r6, r1
    5d22:	2800      	cmp	r0, #0
    5d24:	d004      	beq.n	5d30 <_puts_r+0x14>
    5d26:	6983      	ldr	r3, [r0, #24]
    5d28:	2b00      	cmp	r3, #0
    5d2a:	d101      	bne.n	5d30 <_puts_r+0x14>
    5d2c:	f000 faec 	bl	6308 <__sinit>
    5d30:	69ab      	ldr	r3, [r5, #24]
    5d32:	68ac      	ldr	r4, [r5, #8]
    5d34:	2b00      	cmp	r3, #0
    5d36:	d102      	bne.n	5d3e <_puts_r+0x22>
    5d38:	0028      	movs	r0, r5
    5d3a:	f000 fae5 	bl	6308 <__sinit>
    5d3e:	4b24      	ldr	r3, [pc, #144]	; (5dd0 <_puts_r+0xb4>)
    5d40:	429c      	cmp	r4, r3
    5d42:	d10f      	bne.n	5d64 <_puts_r+0x48>
    5d44:	686c      	ldr	r4, [r5, #4]
    5d46:	89a3      	ldrh	r3, [r4, #12]
    5d48:	071b      	lsls	r3, r3, #28
    5d4a:	d502      	bpl.n	5d52 <_puts_r+0x36>
    5d4c:	6923      	ldr	r3, [r4, #16]
    5d4e:	2b00      	cmp	r3, #0
    5d50:	d120      	bne.n	5d94 <_puts_r+0x78>
    5d52:	0021      	movs	r1, r4
    5d54:	0028      	movs	r0, r5
    5d56:	f000 f969 	bl	602c <__swsetup_r>
    5d5a:	2800      	cmp	r0, #0
    5d5c:	d01a      	beq.n	5d94 <_puts_r+0x78>
    5d5e:	2001      	movs	r0, #1
    5d60:	4240      	negs	r0, r0
    5d62:	bd70      	pop	{r4, r5, r6, pc}
    5d64:	4b1b      	ldr	r3, [pc, #108]	; (5dd4 <_puts_r+0xb8>)
    5d66:	429c      	cmp	r4, r3
    5d68:	d101      	bne.n	5d6e <_puts_r+0x52>
    5d6a:	68ac      	ldr	r4, [r5, #8]
    5d6c:	e7eb      	b.n	5d46 <_puts_r+0x2a>
    5d6e:	4b1a      	ldr	r3, [pc, #104]	; (5dd8 <_puts_r+0xbc>)
    5d70:	429c      	cmp	r4, r3
    5d72:	d1e8      	bne.n	5d46 <_puts_r+0x2a>
    5d74:	68ec      	ldr	r4, [r5, #12]
    5d76:	e7e6      	b.n	5d46 <_puts_r+0x2a>
    5d78:	3b01      	subs	r3, #1
    5d7a:	3601      	adds	r6, #1
    5d7c:	60a3      	str	r3, [r4, #8]
    5d7e:	2b00      	cmp	r3, #0
    5d80:	da04      	bge.n	5d8c <_puts_r+0x70>
    5d82:	69a2      	ldr	r2, [r4, #24]
    5d84:	4293      	cmp	r3, r2
    5d86:	db16      	blt.n	5db6 <_puts_r+0x9a>
    5d88:	290a      	cmp	r1, #10
    5d8a:	d014      	beq.n	5db6 <_puts_r+0x9a>
    5d8c:	6823      	ldr	r3, [r4, #0]
    5d8e:	1c5a      	adds	r2, r3, #1
    5d90:	6022      	str	r2, [r4, #0]
    5d92:	7019      	strb	r1, [r3, #0]
    5d94:	7831      	ldrb	r1, [r6, #0]
    5d96:	68a3      	ldr	r3, [r4, #8]
    5d98:	2900      	cmp	r1, #0
    5d9a:	d1ed      	bne.n	5d78 <_puts_r+0x5c>
    5d9c:	3b01      	subs	r3, #1
    5d9e:	60a3      	str	r3, [r4, #8]
    5da0:	2b00      	cmp	r3, #0
    5da2:	da0f      	bge.n	5dc4 <_puts_r+0xa8>
    5da4:	0022      	movs	r2, r4
    5da6:	310a      	adds	r1, #10
    5da8:	0028      	movs	r0, r5
    5daa:	f000 f8e9 	bl	5f80 <__swbuf_r>
    5dae:	1c43      	adds	r3, r0, #1
    5db0:	d0d5      	beq.n	5d5e <_puts_r+0x42>
    5db2:	200a      	movs	r0, #10
    5db4:	e7d5      	b.n	5d62 <_puts_r+0x46>
    5db6:	0022      	movs	r2, r4
    5db8:	0028      	movs	r0, r5
    5dba:	f000 f8e1 	bl	5f80 <__swbuf_r>
    5dbe:	1c43      	adds	r3, r0, #1
    5dc0:	d1e8      	bne.n	5d94 <_puts_r+0x78>
    5dc2:	e7cc      	b.n	5d5e <_puts_r+0x42>
    5dc4:	200a      	movs	r0, #10
    5dc6:	6823      	ldr	r3, [r4, #0]
    5dc8:	1c5a      	adds	r2, r3, #1
    5dca:	6022      	str	r2, [r4, #0]
    5dcc:	7018      	strb	r0, [r3, #0]
    5dce:	e7c8      	b.n	5d62 <_puts_r+0x46>
    5dd0:	00009a9c 	.word	0x00009a9c
    5dd4:	00009abc 	.word	0x00009abc
    5dd8:	00009a7c 	.word	0x00009a7c

00005ddc <puts>:
    5ddc:	b510      	push	{r4, lr}
    5dde:	4b03      	ldr	r3, [pc, #12]	; (5dec <puts+0x10>)
    5de0:	0001      	movs	r1, r0
    5de2:	6818      	ldr	r0, [r3, #0]
    5de4:	f7ff ff9a 	bl	5d1c <_puts_r>
    5de8:	bd10      	pop	{r4, pc}
    5dea:	46c0      	nop			; (mov r8, r8)
    5dec:	20000104 	.word	0x20000104

00005df0 <_sbrk_r>:
    5df0:	2300      	movs	r3, #0
    5df2:	b570      	push	{r4, r5, r6, lr}
    5df4:	4c06      	ldr	r4, [pc, #24]	; (5e10 <_sbrk_r+0x20>)
    5df6:	0005      	movs	r5, r0
    5df8:	0008      	movs	r0, r1
    5dfa:	6023      	str	r3, [r4, #0]
    5dfc:	f7fb fd46 	bl	188c <_sbrk>
    5e00:	1c43      	adds	r3, r0, #1
    5e02:	d103      	bne.n	5e0c <_sbrk_r+0x1c>
    5e04:	6823      	ldr	r3, [r4, #0]
    5e06:	2b00      	cmp	r3, #0
    5e08:	d000      	beq.n	5e0c <_sbrk_r+0x1c>
    5e0a:	602b      	str	r3, [r5, #0]
    5e0c:	bd70      	pop	{r4, r5, r6, pc}
    5e0e:	46c0      	nop			; (mov r8, r8)
    5e10:	20001024 	.word	0x20001024

00005e14 <setbuf>:
    5e14:	424a      	negs	r2, r1
    5e16:	414a      	adcs	r2, r1
    5e18:	2380      	movs	r3, #128	; 0x80
    5e1a:	b510      	push	{r4, lr}
    5e1c:	0052      	lsls	r2, r2, #1
    5e1e:	00db      	lsls	r3, r3, #3
    5e20:	f000 f802 	bl	5e28 <setvbuf>
    5e24:	bd10      	pop	{r4, pc}
	...

00005e28 <setvbuf>:
    5e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e2a:	001d      	movs	r5, r3
    5e2c:	4b4f      	ldr	r3, [pc, #316]	; (5f6c <setvbuf+0x144>)
    5e2e:	b085      	sub	sp, #20
    5e30:	681e      	ldr	r6, [r3, #0]
    5e32:	0004      	movs	r4, r0
    5e34:	000f      	movs	r7, r1
    5e36:	9200      	str	r2, [sp, #0]
    5e38:	2e00      	cmp	r6, #0
    5e3a:	d005      	beq.n	5e48 <setvbuf+0x20>
    5e3c:	69b3      	ldr	r3, [r6, #24]
    5e3e:	2b00      	cmp	r3, #0
    5e40:	d102      	bne.n	5e48 <setvbuf+0x20>
    5e42:	0030      	movs	r0, r6
    5e44:	f000 fa60 	bl	6308 <__sinit>
    5e48:	4b49      	ldr	r3, [pc, #292]	; (5f70 <setvbuf+0x148>)
    5e4a:	429c      	cmp	r4, r3
    5e4c:	d150      	bne.n	5ef0 <setvbuf+0xc8>
    5e4e:	6874      	ldr	r4, [r6, #4]
    5e50:	9b00      	ldr	r3, [sp, #0]
    5e52:	2b02      	cmp	r3, #2
    5e54:	d005      	beq.n	5e62 <setvbuf+0x3a>
    5e56:	2b01      	cmp	r3, #1
    5e58:	d900      	bls.n	5e5c <setvbuf+0x34>
    5e5a:	e084      	b.n	5f66 <setvbuf+0x13e>
    5e5c:	2d00      	cmp	r5, #0
    5e5e:	da00      	bge.n	5e62 <setvbuf+0x3a>
    5e60:	e081      	b.n	5f66 <setvbuf+0x13e>
    5e62:	0021      	movs	r1, r4
    5e64:	0030      	movs	r0, r6
    5e66:	f000 f9e1 	bl	622c <_fflush_r>
    5e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5e6c:	2900      	cmp	r1, #0
    5e6e:	d008      	beq.n	5e82 <setvbuf+0x5a>
    5e70:	0023      	movs	r3, r4
    5e72:	3344      	adds	r3, #68	; 0x44
    5e74:	4299      	cmp	r1, r3
    5e76:	d002      	beq.n	5e7e <setvbuf+0x56>
    5e78:	0030      	movs	r0, r6
    5e7a:	f7ff fe8d 	bl	5b98 <_free_r>
    5e7e:	2300      	movs	r3, #0
    5e80:	6363      	str	r3, [r4, #52]	; 0x34
    5e82:	2300      	movs	r3, #0
    5e84:	61a3      	str	r3, [r4, #24]
    5e86:	6063      	str	r3, [r4, #4]
    5e88:	89a3      	ldrh	r3, [r4, #12]
    5e8a:	061b      	lsls	r3, r3, #24
    5e8c:	d503      	bpl.n	5e96 <setvbuf+0x6e>
    5e8e:	6921      	ldr	r1, [r4, #16]
    5e90:	0030      	movs	r0, r6
    5e92:	f7ff fe81 	bl	5b98 <_free_r>
    5e96:	89a3      	ldrh	r3, [r4, #12]
    5e98:	4a36      	ldr	r2, [pc, #216]	; (5f74 <setvbuf+0x14c>)
    5e9a:	4013      	ands	r3, r2
    5e9c:	81a3      	strh	r3, [r4, #12]
    5e9e:	9b00      	ldr	r3, [sp, #0]
    5ea0:	2b02      	cmp	r3, #2
    5ea2:	d05a      	beq.n	5f5a <setvbuf+0x132>
    5ea4:	ab03      	add	r3, sp, #12
    5ea6:	aa02      	add	r2, sp, #8
    5ea8:	0021      	movs	r1, r4
    5eaa:	0030      	movs	r0, r6
    5eac:	f000 fac2 	bl	6434 <__swhatbuf_r>
    5eb0:	89a3      	ldrh	r3, [r4, #12]
    5eb2:	4318      	orrs	r0, r3
    5eb4:	81a0      	strh	r0, [r4, #12]
    5eb6:	2d00      	cmp	r5, #0
    5eb8:	d124      	bne.n	5f04 <setvbuf+0xdc>
    5eba:	9d02      	ldr	r5, [sp, #8]
    5ebc:	0028      	movs	r0, r5
    5ebe:	f7ff fe3d 	bl	5b3c <malloc>
    5ec2:	9501      	str	r5, [sp, #4]
    5ec4:	1e07      	subs	r7, r0, #0
    5ec6:	d142      	bne.n	5f4e <setvbuf+0x126>
    5ec8:	9b02      	ldr	r3, [sp, #8]
    5eca:	9301      	str	r3, [sp, #4]
    5ecc:	42ab      	cmp	r3, r5
    5ece:	d139      	bne.n	5f44 <setvbuf+0x11c>
    5ed0:	2001      	movs	r0, #1
    5ed2:	4240      	negs	r0, r0
    5ed4:	2302      	movs	r3, #2
    5ed6:	89a2      	ldrh	r2, [r4, #12]
    5ed8:	4313      	orrs	r3, r2
    5eda:	81a3      	strh	r3, [r4, #12]
    5edc:	2300      	movs	r3, #0
    5ede:	60a3      	str	r3, [r4, #8]
    5ee0:	0023      	movs	r3, r4
    5ee2:	3347      	adds	r3, #71	; 0x47
    5ee4:	6023      	str	r3, [r4, #0]
    5ee6:	6123      	str	r3, [r4, #16]
    5ee8:	2301      	movs	r3, #1
    5eea:	6163      	str	r3, [r4, #20]
    5eec:	b005      	add	sp, #20
    5eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ef0:	4b21      	ldr	r3, [pc, #132]	; (5f78 <setvbuf+0x150>)
    5ef2:	429c      	cmp	r4, r3
    5ef4:	d101      	bne.n	5efa <setvbuf+0xd2>
    5ef6:	68b4      	ldr	r4, [r6, #8]
    5ef8:	e7aa      	b.n	5e50 <setvbuf+0x28>
    5efa:	4b20      	ldr	r3, [pc, #128]	; (5f7c <setvbuf+0x154>)
    5efc:	429c      	cmp	r4, r3
    5efe:	d1a7      	bne.n	5e50 <setvbuf+0x28>
    5f00:	68f4      	ldr	r4, [r6, #12]
    5f02:	e7a5      	b.n	5e50 <setvbuf+0x28>
    5f04:	2f00      	cmp	r7, #0
    5f06:	d0d9      	beq.n	5ebc <setvbuf+0x94>
    5f08:	69b3      	ldr	r3, [r6, #24]
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d102      	bne.n	5f14 <setvbuf+0xec>
    5f0e:	0030      	movs	r0, r6
    5f10:	f000 f9fa 	bl	6308 <__sinit>
    5f14:	9b00      	ldr	r3, [sp, #0]
    5f16:	2b01      	cmp	r3, #1
    5f18:	d103      	bne.n	5f22 <setvbuf+0xfa>
    5f1a:	89a3      	ldrh	r3, [r4, #12]
    5f1c:	9a00      	ldr	r2, [sp, #0]
    5f1e:	431a      	orrs	r2, r3
    5f20:	81a2      	strh	r2, [r4, #12]
    5f22:	2008      	movs	r0, #8
    5f24:	89a3      	ldrh	r3, [r4, #12]
    5f26:	6027      	str	r7, [r4, #0]
    5f28:	6127      	str	r7, [r4, #16]
    5f2a:	6165      	str	r5, [r4, #20]
    5f2c:	4018      	ands	r0, r3
    5f2e:	d018      	beq.n	5f62 <setvbuf+0x13a>
    5f30:	2001      	movs	r0, #1
    5f32:	4018      	ands	r0, r3
    5f34:	2300      	movs	r3, #0
    5f36:	4298      	cmp	r0, r3
    5f38:	d011      	beq.n	5f5e <setvbuf+0x136>
    5f3a:	426d      	negs	r5, r5
    5f3c:	60a3      	str	r3, [r4, #8]
    5f3e:	61a5      	str	r5, [r4, #24]
    5f40:	0018      	movs	r0, r3
    5f42:	e7d3      	b.n	5eec <setvbuf+0xc4>
    5f44:	9801      	ldr	r0, [sp, #4]
    5f46:	f7ff fdf9 	bl	5b3c <malloc>
    5f4a:	1e07      	subs	r7, r0, #0
    5f4c:	d0c0      	beq.n	5ed0 <setvbuf+0xa8>
    5f4e:	2380      	movs	r3, #128	; 0x80
    5f50:	89a2      	ldrh	r2, [r4, #12]
    5f52:	9d01      	ldr	r5, [sp, #4]
    5f54:	4313      	orrs	r3, r2
    5f56:	81a3      	strh	r3, [r4, #12]
    5f58:	e7d6      	b.n	5f08 <setvbuf+0xe0>
    5f5a:	2000      	movs	r0, #0
    5f5c:	e7ba      	b.n	5ed4 <setvbuf+0xac>
    5f5e:	60a5      	str	r5, [r4, #8]
    5f60:	e7c4      	b.n	5eec <setvbuf+0xc4>
    5f62:	60a0      	str	r0, [r4, #8]
    5f64:	e7c2      	b.n	5eec <setvbuf+0xc4>
    5f66:	2001      	movs	r0, #1
    5f68:	4240      	negs	r0, r0
    5f6a:	e7bf      	b.n	5eec <setvbuf+0xc4>
    5f6c:	20000104 	.word	0x20000104
    5f70:	00009a9c 	.word	0x00009a9c
    5f74:	fffff35c 	.word	0xfffff35c
    5f78:	00009abc 	.word	0x00009abc
    5f7c:	00009a7c 	.word	0x00009a7c

00005f80 <__swbuf_r>:
    5f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f82:	0005      	movs	r5, r0
    5f84:	000e      	movs	r6, r1
    5f86:	0014      	movs	r4, r2
    5f88:	2800      	cmp	r0, #0
    5f8a:	d004      	beq.n	5f96 <__swbuf_r+0x16>
    5f8c:	6983      	ldr	r3, [r0, #24]
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d101      	bne.n	5f96 <__swbuf_r+0x16>
    5f92:	f000 f9b9 	bl	6308 <__sinit>
    5f96:	4b22      	ldr	r3, [pc, #136]	; (6020 <__swbuf_r+0xa0>)
    5f98:	429c      	cmp	r4, r3
    5f9a:	d12d      	bne.n	5ff8 <__swbuf_r+0x78>
    5f9c:	686c      	ldr	r4, [r5, #4]
    5f9e:	69a3      	ldr	r3, [r4, #24]
    5fa0:	60a3      	str	r3, [r4, #8]
    5fa2:	89a3      	ldrh	r3, [r4, #12]
    5fa4:	071b      	lsls	r3, r3, #28
    5fa6:	d531      	bpl.n	600c <__swbuf_r+0x8c>
    5fa8:	6923      	ldr	r3, [r4, #16]
    5faa:	2b00      	cmp	r3, #0
    5fac:	d02e      	beq.n	600c <__swbuf_r+0x8c>
    5fae:	6823      	ldr	r3, [r4, #0]
    5fb0:	6922      	ldr	r2, [r4, #16]
    5fb2:	b2f7      	uxtb	r7, r6
    5fb4:	1a98      	subs	r0, r3, r2
    5fb6:	6963      	ldr	r3, [r4, #20]
    5fb8:	b2f6      	uxtb	r6, r6
    5fba:	4298      	cmp	r0, r3
    5fbc:	db05      	blt.n	5fca <__swbuf_r+0x4a>
    5fbe:	0021      	movs	r1, r4
    5fc0:	0028      	movs	r0, r5
    5fc2:	f000 f933 	bl	622c <_fflush_r>
    5fc6:	2800      	cmp	r0, #0
    5fc8:	d126      	bne.n	6018 <__swbuf_r+0x98>
    5fca:	68a3      	ldr	r3, [r4, #8]
    5fcc:	3001      	adds	r0, #1
    5fce:	3b01      	subs	r3, #1
    5fd0:	60a3      	str	r3, [r4, #8]
    5fd2:	6823      	ldr	r3, [r4, #0]
    5fd4:	1c5a      	adds	r2, r3, #1
    5fd6:	6022      	str	r2, [r4, #0]
    5fd8:	701f      	strb	r7, [r3, #0]
    5fda:	6963      	ldr	r3, [r4, #20]
    5fdc:	4298      	cmp	r0, r3
    5fde:	d004      	beq.n	5fea <__swbuf_r+0x6a>
    5fe0:	89a3      	ldrh	r3, [r4, #12]
    5fe2:	07db      	lsls	r3, r3, #31
    5fe4:	d51a      	bpl.n	601c <__swbuf_r+0x9c>
    5fe6:	2e0a      	cmp	r6, #10
    5fe8:	d118      	bne.n	601c <__swbuf_r+0x9c>
    5fea:	0021      	movs	r1, r4
    5fec:	0028      	movs	r0, r5
    5fee:	f000 f91d 	bl	622c <_fflush_r>
    5ff2:	2800      	cmp	r0, #0
    5ff4:	d012      	beq.n	601c <__swbuf_r+0x9c>
    5ff6:	e00f      	b.n	6018 <__swbuf_r+0x98>
    5ff8:	4b0a      	ldr	r3, [pc, #40]	; (6024 <__swbuf_r+0xa4>)
    5ffa:	429c      	cmp	r4, r3
    5ffc:	d101      	bne.n	6002 <__swbuf_r+0x82>
    5ffe:	68ac      	ldr	r4, [r5, #8]
    6000:	e7cd      	b.n	5f9e <__swbuf_r+0x1e>
    6002:	4b09      	ldr	r3, [pc, #36]	; (6028 <__swbuf_r+0xa8>)
    6004:	429c      	cmp	r4, r3
    6006:	d1ca      	bne.n	5f9e <__swbuf_r+0x1e>
    6008:	68ec      	ldr	r4, [r5, #12]
    600a:	e7c8      	b.n	5f9e <__swbuf_r+0x1e>
    600c:	0021      	movs	r1, r4
    600e:	0028      	movs	r0, r5
    6010:	f000 f80c 	bl	602c <__swsetup_r>
    6014:	2800      	cmp	r0, #0
    6016:	d0ca      	beq.n	5fae <__swbuf_r+0x2e>
    6018:	2601      	movs	r6, #1
    601a:	4276      	negs	r6, r6
    601c:	0030      	movs	r0, r6
    601e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6020:	00009a9c 	.word	0x00009a9c
    6024:	00009abc 	.word	0x00009abc
    6028:	00009a7c 	.word	0x00009a7c

0000602c <__swsetup_r>:
    602c:	4b36      	ldr	r3, [pc, #216]	; (6108 <__swsetup_r+0xdc>)
    602e:	b570      	push	{r4, r5, r6, lr}
    6030:	681d      	ldr	r5, [r3, #0]
    6032:	0006      	movs	r6, r0
    6034:	000c      	movs	r4, r1
    6036:	2d00      	cmp	r5, #0
    6038:	d005      	beq.n	6046 <__swsetup_r+0x1a>
    603a:	69ab      	ldr	r3, [r5, #24]
    603c:	2b00      	cmp	r3, #0
    603e:	d102      	bne.n	6046 <__swsetup_r+0x1a>
    6040:	0028      	movs	r0, r5
    6042:	f000 f961 	bl	6308 <__sinit>
    6046:	4b31      	ldr	r3, [pc, #196]	; (610c <__swsetup_r+0xe0>)
    6048:	429c      	cmp	r4, r3
    604a:	d10f      	bne.n	606c <__swsetup_r+0x40>
    604c:	686c      	ldr	r4, [r5, #4]
    604e:	230c      	movs	r3, #12
    6050:	5ee2      	ldrsh	r2, [r4, r3]
    6052:	b293      	uxth	r3, r2
    6054:	0719      	lsls	r1, r3, #28
    6056:	d42d      	bmi.n	60b4 <__swsetup_r+0x88>
    6058:	06d9      	lsls	r1, r3, #27
    605a:	d411      	bmi.n	6080 <__swsetup_r+0x54>
    605c:	2309      	movs	r3, #9
    605e:	2001      	movs	r0, #1
    6060:	6033      	str	r3, [r6, #0]
    6062:	3337      	adds	r3, #55	; 0x37
    6064:	4313      	orrs	r3, r2
    6066:	81a3      	strh	r3, [r4, #12]
    6068:	4240      	negs	r0, r0
    606a:	bd70      	pop	{r4, r5, r6, pc}
    606c:	4b28      	ldr	r3, [pc, #160]	; (6110 <__swsetup_r+0xe4>)
    606e:	429c      	cmp	r4, r3
    6070:	d101      	bne.n	6076 <__swsetup_r+0x4a>
    6072:	68ac      	ldr	r4, [r5, #8]
    6074:	e7eb      	b.n	604e <__swsetup_r+0x22>
    6076:	4b27      	ldr	r3, [pc, #156]	; (6114 <__swsetup_r+0xe8>)
    6078:	429c      	cmp	r4, r3
    607a:	d1e8      	bne.n	604e <__swsetup_r+0x22>
    607c:	68ec      	ldr	r4, [r5, #12]
    607e:	e7e6      	b.n	604e <__swsetup_r+0x22>
    6080:	075b      	lsls	r3, r3, #29
    6082:	d513      	bpl.n	60ac <__swsetup_r+0x80>
    6084:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6086:	2900      	cmp	r1, #0
    6088:	d008      	beq.n	609c <__swsetup_r+0x70>
    608a:	0023      	movs	r3, r4
    608c:	3344      	adds	r3, #68	; 0x44
    608e:	4299      	cmp	r1, r3
    6090:	d002      	beq.n	6098 <__swsetup_r+0x6c>
    6092:	0030      	movs	r0, r6
    6094:	f7ff fd80 	bl	5b98 <_free_r>
    6098:	2300      	movs	r3, #0
    609a:	6363      	str	r3, [r4, #52]	; 0x34
    609c:	2224      	movs	r2, #36	; 0x24
    609e:	89a3      	ldrh	r3, [r4, #12]
    60a0:	4393      	bics	r3, r2
    60a2:	81a3      	strh	r3, [r4, #12]
    60a4:	2300      	movs	r3, #0
    60a6:	6063      	str	r3, [r4, #4]
    60a8:	6923      	ldr	r3, [r4, #16]
    60aa:	6023      	str	r3, [r4, #0]
    60ac:	2308      	movs	r3, #8
    60ae:	89a2      	ldrh	r2, [r4, #12]
    60b0:	4313      	orrs	r3, r2
    60b2:	81a3      	strh	r3, [r4, #12]
    60b4:	6923      	ldr	r3, [r4, #16]
    60b6:	2b00      	cmp	r3, #0
    60b8:	d10b      	bne.n	60d2 <__swsetup_r+0xa6>
    60ba:	21a0      	movs	r1, #160	; 0xa0
    60bc:	2280      	movs	r2, #128	; 0x80
    60be:	89a3      	ldrh	r3, [r4, #12]
    60c0:	0089      	lsls	r1, r1, #2
    60c2:	0092      	lsls	r2, r2, #2
    60c4:	400b      	ands	r3, r1
    60c6:	4293      	cmp	r3, r2
    60c8:	d003      	beq.n	60d2 <__swsetup_r+0xa6>
    60ca:	0021      	movs	r1, r4
    60cc:	0030      	movs	r0, r6
    60ce:	f000 f9d9 	bl	6484 <__smakebuf_r>
    60d2:	2301      	movs	r3, #1
    60d4:	89a2      	ldrh	r2, [r4, #12]
    60d6:	4013      	ands	r3, r2
    60d8:	d011      	beq.n	60fe <__swsetup_r+0xd2>
    60da:	2300      	movs	r3, #0
    60dc:	60a3      	str	r3, [r4, #8]
    60de:	6963      	ldr	r3, [r4, #20]
    60e0:	425b      	negs	r3, r3
    60e2:	61a3      	str	r3, [r4, #24]
    60e4:	2000      	movs	r0, #0
    60e6:	6923      	ldr	r3, [r4, #16]
    60e8:	4283      	cmp	r3, r0
    60ea:	d1be      	bne.n	606a <__swsetup_r+0x3e>
    60ec:	230c      	movs	r3, #12
    60ee:	5ee2      	ldrsh	r2, [r4, r3]
    60f0:	0613      	lsls	r3, r2, #24
    60f2:	d5ba      	bpl.n	606a <__swsetup_r+0x3e>
    60f4:	2340      	movs	r3, #64	; 0x40
    60f6:	4313      	orrs	r3, r2
    60f8:	81a3      	strh	r3, [r4, #12]
    60fa:	3801      	subs	r0, #1
    60fc:	e7b5      	b.n	606a <__swsetup_r+0x3e>
    60fe:	0792      	lsls	r2, r2, #30
    6100:	d400      	bmi.n	6104 <__swsetup_r+0xd8>
    6102:	6963      	ldr	r3, [r4, #20]
    6104:	60a3      	str	r3, [r4, #8]
    6106:	e7ed      	b.n	60e4 <__swsetup_r+0xb8>
    6108:	20000104 	.word	0x20000104
    610c:	00009a9c 	.word	0x00009a9c
    6110:	00009abc 	.word	0x00009abc
    6114:	00009a7c 	.word	0x00009a7c

00006118 <__sflush_r>:
    6118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    611a:	898a      	ldrh	r2, [r1, #12]
    611c:	0005      	movs	r5, r0
    611e:	000c      	movs	r4, r1
    6120:	0713      	lsls	r3, r2, #28
    6122:	d460      	bmi.n	61e6 <__sflush_r+0xce>
    6124:	684b      	ldr	r3, [r1, #4]
    6126:	2b00      	cmp	r3, #0
    6128:	dc04      	bgt.n	6134 <__sflush_r+0x1c>
    612a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    612c:	2b00      	cmp	r3, #0
    612e:	dc01      	bgt.n	6134 <__sflush_r+0x1c>
    6130:	2000      	movs	r0, #0
    6132:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6134:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6136:	2f00      	cmp	r7, #0
    6138:	d0fa      	beq.n	6130 <__sflush_r+0x18>
    613a:	2300      	movs	r3, #0
    613c:	682e      	ldr	r6, [r5, #0]
    613e:	602b      	str	r3, [r5, #0]
    6140:	2380      	movs	r3, #128	; 0x80
    6142:	015b      	lsls	r3, r3, #5
    6144:	401a      	ands	r2, r3
    6146:	d034      	beq.n	61b2 <__sflush_r+0x9a>
    6148:	6d60      	ldr	r0, [r4, #84]	; 0x54
    614a:	89a3      	ldrh	r3, [r4, #12]
    614c:	075b      	lsls	r3, r3, #29
    614e:	d506      	bpl.n	615e <__sflush_r+0x46>
    6150:	6863      	ldr	r3, [r4, #4]
    6152:	1ac0      	subs	r0, r0, r3
    6154:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6156:	2b00      	cmp	r3, #0
    6158:	d001      	beq.n	615e <__sflush_r+0x46>
    615a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    615c:	1ac0      	subs	r0, r0, r3
    615e:	0002      	movs	r2, r0
    6160:	6a21      	ldr	r1, [r4, #32]
    6162:	2300      	movs	r3, #0
    6164:	0028      	movs	r0, r5
    6166:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6168:	47b8      	blx	r7
    616a:	89a1      	ldrh	r1, [r4, #12]
    616c:	1c43      	adds	r3, r0, #1
    616e:	d106      	bne.n	617e <__sflush_r+0x66>
    6170:	682b      	ldr	r3, [r5, #0]
    6172:	2b1d      	cmp	r3, #29
    6174:	d831      	bhi.n	61da <__sflush_r+0xc2>
    6176:	4a2c      	ldr	r2, [pc, #176]	; (6228 <__sflush_r+0x110>)
    6178:	40da      	lsrs	r2, r3
    617a:	07d3      	lsls	r3, r2, #31
    617c:	d52d      	bpl.n	61da <__sflush_r+0xc2>
    617e:	2300      	movs	r3, #0
    6180:	6063      	str	r3, [r4, #4]
    6182:	6923      	ldr	r3, [r4, #16]
    6184:	6023      	str	r3, [r4, #0]
    6186:	04cb      	lsls	r3, r1, #19
    6188:	d505      	bpl.n	6196 <__sflush_r+0x7e>
    618a:	1c43      	adds	r3, r0, #1
    618c:	d102      	bne.n	6194 <__sflush_r+0x7c>
    618e:	682b      	ldr	r3, [r5, #0]
    6190:	2b00      	cmp	r3, #0
    6192:	d100      	bne.n	6196 <__sflush_r+0x7e>
    6194:	6560      	str	r0, [r4, #84]	; 0x54
    6196:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6198:	602e      	str	r6, [r5, #0]
    619a:	2900      	cmp	r1, #0
    619c:	d0c8      	beq.n	6130 <__sflush_r+0x18>
    619e:	0023      	movs	r3, r4
    61a0:	3344      	adds	r3, #68	; 0x44
    61a2:	4299      	cmp	r1, r3
    61a4:	d002      	beq.n	61ac <__sflush_r+0x94>
    61a6:	0028      	movs	r0, r5
    61a8:	f7ff fcf6 	bl	5b98 <_free_r>
    61ac:	2000      	movs	r0, #0
    61ae:	6360      	str	r0, [r4, #52]	; 0x34
    61b0:	e7bf      	b.n	6132 <__sflush_r+0x1a>
    61b2:	2301      	movs	r3, #1
    61b4:	6a21      	ldr	r1, [r4, #32]
    61b6:	0028      	movs	r0, r5
    61b8:	47b8      	blx	r7
    61ba:	1c43      	adds	r3, r0, #1
    61bc:	d1c5      	bne.n	614a <__sflush_r+0x32>
    61be:	682b      	ldr	r3, [r5, #0]
    61c0:	2b00      	cmp	r3, #0
    61c2:	d0c2      	beq.n	614a <__sflush_r+0x32>
    61c4:	2b1d      	cmp	r3, #29
    61c6:	d001      	beq.n	61cc <__sflush_r+0xb4>
    61c8:	2b16      	cmp	r3, #22
    61ca:	d101      	bne.n	61d0 <__sflush_r+0xb8>
    61cc:	602e      	str	r6, [r5, #0]
    61ce:	e7af      	b.n	6130 <__sflush_r+0x18>
    61d0:	2340      	movs	r3, #64	; 0x40
    61d2:	89a2      	ldrh	r2, [r4, #12]
    61d4:	4313      	orrs	r3, r2
    61d6:	81a3      	strh	r3, [r4, #12]
    61d8:	e7ab      	b.n	6132 <__sflush_r+0x1a>
    61da:	2340      	movs	r3, #64	; 0x40
    61dc:	430b      	orrs	r3, r1
    61de:	2001      	movs	r0, #1
    61e0:	81a3      	strh	r3, [r4, #12]
    61e2:	4240      	negs	r0, r0
    61e4:	e7a5      	b.n	6132 <__sflush_r+0x1a>
    61e6:	690f      	ldr	r7, [r1, #16]
    61e8:	2f00      	cmp	r7, #0
    61ea:	d0a1      	beq.n	6130 <__sflush_r+0x18>
    61ec:	680b      	ldr	r3, [r1, #0]
    61ee:	600f      	str	r7, [r1, #0]
    61f0:	1bdb      	subs	r3, r3, r7
    61f2:	9301      	str	r3, [sp, #4]
    61f4:	2300      	movs	r3, #0
    61f6:	0792      	lsls	r2, r2, #30
    61f8:	d100      	bne.n	61fc <__sflush_r+0xe4>
    61fa:	694b      	ldr	r3, [r1, #20]
    61fc:	60a3      	str	r3, [r4, #8]
    61fe:	9b01      	ldr	r3, [sp, #4]
    6200:	2b00      	cmp	r3, #0
    6202:	dc00      	bgt.n	6206 <__sflush_r+0xee>
    6204:	e794      	b.n	6130 <__sflush_r+0x18>
    6206:	9b01      	ldr	r3, [sp, #4]
    6208:	003a      	movs	r2, r7
    620a:	6a21      	ldr	r1, [r4, #32]
    620c:	0028      	movs	r0, r5
    620e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6210:	47b0      	blx	r6
    6212:	2800      	cmp	r0, #0
    6214:	dc03      	bgt.n	621e <__sflush_r+0x106>
    6216:	2340      	movs	r3, #64	; 0x40
    6218:	89a2      	ldrh	r2, [r4, #12]
    621a:	4313      	orrs	r3, r2
    621c:	e7df      	b.n	61de <__sflush_r+0xc6>
    621e:	9b01      	ldr	r3, [sp, #4]
    6220:	183f      	adds	r7, r7, r0
    6222:	1a1b      	subs	r3, r3, r0
    6224:	9301      	str	r3, [sp, #4]
    6226:	e7ea      	b.n	61fe <__sflush_r+0xe6>
    6228:	20400001 	.word	0x20400001

0000622c <_fflush_r>:
    622c:	690b      	ldr	r3, [r1, #16]
    622e:	b570      	push	{r4, r5, r6, lr}
    6230:	0005      	movs	r5, r0
    6232:	000c      	movs	r4, r1
    6234:	2b00      	cmp	r3, #0
    6236:	d101      	bne.n	623c <_fflush_r+0x10>
    6238:	2000      	movs	r0, #0
    623a:	bd70      	pop	{r4, r5, r6, pc}
    623c:	2800      	cmp	r0, #0
    623e:	d004      	beq.n	624a <_fflush_r+0x1e>
    6240:	6983      	ldr	r3, [r0, #24]
    6242:	2b00      	cmp	r3, #0
    6244:	d101      	bne.n	624a <_fflush_r+0x1e>
    6246:	f000 f85f 	bl	6308 <__sinit>
    624a:	4b0b      	ldr	r3, [pc, #44]	; (6278 <_fflush_r+0x4c>)
    624c:	429c      	cmp	r4, r3
    624e:	d109      	bne.n	6264 <_fflush_r+0x38>
    6250:	686c      	ldr	r4, [r5, #4]
    6252:	220c      	movs	r2, #12
    6254:	5ea3      	ldrsh	r3, [r4, r2]
    6256:	2b00      	cmp	r3, #0
    6258:	d0ee      	beq.n	6238 <_fflush_r+0xc>
    625a:	0021      	movs	r1, r4
    625c:	0028      	movs	r0, r5
    625e:	f7ff ff5b 	bl	6118 <__sflush_r>
    6262:	e7ea      	b.n	623a <_fflush_r+0xe>
    6264:	4b05      	ldr	r3, [pc, #20]	; (627c <_fflush_r+0x50>)
    6266:	429c      	cmp	r4, r3
    6268:	d101      	bne.n	626e <_fflush_r+0x42>
    626a:	68ac      	ldr	r4, [r5, #8]
    626c:	e7f1      	b.n	6252 <_fflush_r+0x26>
    626e:	4b04      	ldr	r3, [pc, #16]	; (6280 <_fflush_r+0x54>)
    6270:	429c      	cmp	r4, r3
    6272:	d1ee      	bne.n	6252 <_fflush_r+0x26>
    6274:	68ec      	ldr	r4, [r5, #12]
    6276:	e7ec      	b.n	6252 <_fflush_r+0x26>
    6278:	00009a9c 	.word	0x00009a9c
    627c:	00009abc 	.word	0x00009abc
    6280:	00009a7c 	.word	0x00009a7c

00006284 <_cleanup_r>:
    6284:	b510      	push	{r4, lr}
    6286:	4902      	ldr	r1, [pc, #8]	; (6290 <_cleanup_r+0xc>)
    6288:	f000 f8b2 	bl	63f0 <_fwalk_reent>
    628c:	bd10      	pop	{r4, pc}
    628e:	46c0      	nop			; (mov r8, r8)
    6290:	0000622d 	.word	0x0000622d

00006294 <std.isra.0>:
    6294:	2300      	movs	r3, #0
    6296:	b510      	push	{r4, lr}
    6298:	0004      	movs	r4, r0
    629a:	6003      	str	r3, [r0, #0]
    629c:	6043      	str	r3, [r0, #4]
    629e:	6083      	str	r3, [r0, #8]
    62a0:	8181      	strh	r1, [r0, #12]
    62a2:	6643      	str	r3, [r0, #100]	; 0x64
    62a4:	81c2      	strh	r2, [r0, #14]
    62a6:	6103      	str	r3, [r0, #16]
    62a8:	6143      	str	r3, [r0, #20]
    62aa:	6183      	str	r3, [r0, #24]
    62ac:	0019      	movs	r1, r3
    62ae:	2208      	movs	r2, #8
    62b0:	305c      	adds	r0, #92	; 0x5c
    62b2:	f7ff fc68 	bl	5b86 <memset>
    62b6:	4b05      	ldr	r3, [pc, #20]	; (62cc <std.isra.0+0x38>)
    62b8:	6224      	str	r4, [r4, #32]
    62ba:	6263      	str	r3, [r4, #36]	; 0x24
    62bc:	4b04      	ldr	r3, [pc, #16]	; (62d0 <std.isra.0+0x3c>)
    62be:	62a3      	str	r3, [r4, #40]	; 0x28
    62c0:	4b04      	ldr	r3, [pc, #16]	; (62d4 <std.isra.0+0x40>)
    62c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    62c4:	4b04      	ldr	r3, [pc, #16]	; (62d8 <std.isra.0+0x44>)
    62c6:	6323      	str	r3, [r4, #48]	; 0x30
    62c8:	bd10      	pop	{r4, pc}
    62ca:	46c0      	nop			; (mov r8, r8)
    62cc:	00006aa9 	.word	0x00006aa9
    62d0:	00006ad1 	.word	0x00006ad1
    62d4:	00006b09 	.word	0x00006b09
    62d8:	00006b35 	.word	0x00006b35

000062dc <__sfmoreglue>:
    62dc:	b570      	push	{r4, r5, r6, lr}
    62de:	2568      	movs	r5, #104	; 0x68
    62e0:	1e4a      	subs	r2, r1, #1
    62e2:	4355      	muls	r5, r2
    62e4:	000e      	movs	r6, r1
    62e6:	0029      	movs	r1, r5
    62e8:	3174      	adds	r1, #116	; 0x74
    62ea:	f7ff fc9f 	bl	5c2c <_malloc_r>
    62ee:	1e04      	subs	r4, r0, #0
    62f0:	d008      	beq.n	6304 <__sfmoreglue+0x28>
    62f2:	2100      	movs	r1, #0
    62f4:	002a      	movs	r2, r5
    62f6:	6001      	str	r1, [r0, #0]
    62f8:	6046      	str	r6, [r0, #4]
    62fa:	300c      	adds	r0, #12
    62fc:	60a0      	str	r0, [r4, #8]
    62fe:	3268      	adds	r2, #104	; 0x68
    6300:	f7ff fc41 	bl	5b86 <memset>
    6304:	0020      	movs	r0, r4
    6306:	bd70      	pop	{r4, r5, r6, pc}

00006308 <__sinit>:
    6308:	6983      	ldr	r3, [r0, #24]
    630a:	b513      	push	{r0, r1, r4, lr}
    630c:	0004      	movs	r4, r0
    630e:	2b00      	cmp	r3, #0
    6310:	d128      	bne.n	6364 <__sinit+0x5c>
    6312:	6483      	str	r3, [r0, #72]	; 0x48
    6314:	64c3      	str	r3, [r0, #76]	; 0x4c
    6316:	6503      	str	r3, [r0, #80]	; 0x50
    6318:	4b13      	ldr	r3, [pc, #76]	; (6368 <__sinit+0x60>)
    631a:	4a14      	ldr	r2, [pc, #80]	; (636c <__sinit+0x64>)
    631c:	681b      	ldr	r3, [r3, #0]
    631e:	6282      	str	r2, [r0, #40]	; 0x28
    6320:	9301      	str	r3, [sp, #4]
    6322:	4298      	cmp	r0, r3
    6324:	d101      	bne.n	632a <__sinit+0x22>
    6326:	2301      	movs	r3, #1
    6328:	6183      	str	r3, [r0, #24]
    632a:	0020      	movs	r0, r4
    632c:	f000 f820 	bl	6370 <__sfp>
    6330:	6060      	str	r0, [r4, #4]
    6332:	0020      	movs	r0, r4
    6334:	f000 f81c 	bl	6370 <__sfp>
    6338:	60a0      	str	r0, [r4, #8]
    633a:	0020      	movs	r0, r4
    633c:	f000 f818 	bl	6370 <__sfp>
    6340:	2200      	movs	r2, #0
    6342:	60e0      	str	r0, [r4, #12]
    6344:	2104      	movs	r1, #4
    6346:	6860      	ldr	r0, [r4, #4]
    6348:	f7ff ffa4 	bl	6294 <std.isra.0>
    634c:	2201      	movs	r2, #1
    634e:	2109      	movs	r1, #9
    6350:	68a0      	ldr	r0, [r4, #8]
    6352:	f7ff ff9f 	bl	6294 <std.isra.0>
    6356:	2202      	movs	r2, #2
    6358:	2112      	movs	r1, #18
    635a:	68e0      	ldr	r0, [r4, #12]
    635c:	f7ff ff9a 	bl	6294 <std.isra.0>
    6360:	2301      	movs	r3, #1
    6362:	61a3      	str	r3, [r4, #24]
    6364:	bd13      	pop	{r0, r1, r4, pc}
    6366:	46c0      	nop			; (mov r8, r8)
    6368:	00009a78 	.word	0x00009a78
    636c:	00006285 	.word	0x00006285

00006370 <__sfp>:
    6370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6372:	4b1e      	ldr	r3, [pc, #120]	; (63ec <__sfp+0x7c>)
    6374:	0007      	movs	r7, r0
    6376:	681e      	ldr	r6, [r3, #0]
    6378:	69b3      	ldr	r3, [r6, #24]
    637a:	2b00      	cmp	r3, #0
    637c:	d102      	bne.n	6384 <__sfp+0x14>
    637e:	0030      	movs	r0, r6
    6380:	f7ff ffc2 	bl	6308 <__sinit>
    6384:	3648      	adds	r6, #72	; 0x48
    6386:	68b4      	ldr	r4, [r6, #8]
    6388:	6873      	ldr	r3, [r6, #4]
    638a:	3b01      	subs	r3, #1
    638c:	d504      	bpl.n	6398 <__sfp+0x28>
    638e:	6833      	ldr	r3, [r6, #0]
    6390:	2b00      	cmp	r3, #0
    6392:	d007      	beq.n	63a4 <__sfp+0x34>
    6394:	6836      	ldr	r6, [r6, #0]
    6396:	e7f6      	b.n	6386 <__sfp+0x16>
    6398:	220c      	movs	r2, #12
    639a:	5ea5      	ldrsh	r5, [r4, r2]
    639c:	2d00      	cmp	r5, #0
    639e:	d00d      	beq.n	63bc <__sfp+0x4c>
    63a0:	3468      	adds	r4, #104	; 0x68
    63a2:	e7f2      	b.n	638a <__sfp+0x1a>
    63a4:	2104      	movs	r1, #4
    63a6:	0038      	movs	r0, r7
    63a8:	f7ff ff98 	bl	62dc <__sfmoreglue>
    63ac:	6030      	str	r0, [r6, #0]
    63ae:	2800      	cmp	r0, #0
    63b0:	d1f0      	bne.n	6394 <__sfp+0x24>
    63b2:	230c      	movs	r3, #12
    63b4:	0004      	movs	r4, r0
    63b6:	603b      	str	r3, [r7, #0]
    63b8:	0020      	movs	r0, r4
    63ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63bc:	2301      	movs	r3, #1
    63be:	0020      	movs	r0, r4
    63c0:	425b      	negs	r3, r3
    63c2:	81e3      	strh	r3, [r4, #14]
    63c4:	3302      	adds	r3, #2
    63c6:	81a3      	strh	r3, [r4, #12]
    63c8:	6665      	str	r5, [r4, #100]	; 0x64
    63ca:	6025      	str	r5, [r4, #0]
    63cc:	60a5      	str	r5, [r4, #8]
    63ce:	6065      	str	r5, [r4, #4]
    63d0:	6125      	str	r5, [r4, #16]
    63d2:	6165      	str	r5, [r4, #20]
    63d4:	61a5      	str	r5, [r4, #24]
    63d6:	2208      	movs	r2, #8
    63d8:	0029      	movs	r1, r5
    63da:	305c      	adds	r0, #92	; 0x5c
    63dc:	f7ff fbd3 	bl	5b86 <memset>
    63e0:	6365      	str	r5, [r4, #52]	; 0x34
    63e2:	63a5      	str	r5, [r4, #56]	; 0x38
    63e4:	64a5      	str	r5, [r4, #72]	; 0x48
    63e6:	64e5      	str	r5, [r4, #76]	; 0x4c
    63e8:	e7e6      	b.n	63b8 <__sfp+0x48>
    63ea:	46c0      	nop			; (mov r8, r8)
    63ec:	00009a78 	.word	0x00009a78

000063f0 <_fwalk_reent>:
    63f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    63f2:	0004      	movs	r4, r0
    63f4:	0007      	movs	r7, r0
    63f6:	2600      	movs	r6, #0
    63f8:	9101      	str	r1, [sp, #4]
    63fa:	3448      	adds	r4, #72	; 0x48
    63fc:	2c00      	cmp	r4, #0
    63fe:	d101      	bne.n	6404 <_fwalk_reent+0x14>
    6400:	0030      	movs	r0, r6
    6402:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6404:	6863      	ldr	r3, [r4, #4]
    6406:	68a5      	ldr	r5, [r4, #8]
    6408:	9300      	str	r3, [sp, #0]
    640a:	9b00      	ldr	r3, [sp, #0]
    640c:	3b01      	subs	r3, #1
    640e:	9300      	str	r3, [sp, #0]
    6410:	d501      	bpl.n	6416 <_fwalk_reent+0x26>
    6412:	6824      	ldr	r4, [r4, #0]
    6414:	e7f2      	b.n	63fc <_fwalk_reent+0xc>
    6416:	89ab      	ldrh	r3, [r5, #12]
    6418:	2b01      	cmp	r3, #1
    641a:	d908      	bls.n	642e <_fwalk_reent+0x3e>
    641c:	220e      	movs	r2, #14
    641e:	5eab      	ldrsh	r3, [r5, r2]
    6420:	3301      	adds	r3, #1
    6422:	d004      	beq.n	642e <_fwalk_reent+0x3e>
    6424:	0029      	movs	r1, r5
    6426:	0038      	movs	r0, r7
    6428:	9b01      	ldr	r3, [sp, #4]
    642a:	4798      	blx	r3
    642c:	4306      	orrs	r6, r0
    642e:	3568      	adds	r5, #104	; 0x68
    6430:	e7eb      	b.n	640a <_fwalk_reent+0x1a>
	...

00006434 <__swhatbuf_r>:
    6434:	b570      	push	{r4, r5, r6, lr}
    6436:	000e      	movs	r6, r1
    6438:	001d      	movs	r5, r3
    643a:	230e      	movs	r3, #14
    643c:	5ec9      	ldrsh	r1, [r1, r3]
    643e:	b090      	sub	sp, #64	; 0x40
    6440:	0014      	movs	r4, r2
    6442:	2900      	cmp	r1, #0
    6444:	da07      	bge.n	6456 <__swhatbuf_r+0x22>
    6446:	2300      	movs	r3, #0
    6448:	602b      	str	r3, [r5, #0]
    644a:	89b3      	ldrh	r3, [r6, #12]
    644c:	061b      	lsls	r3, r3, #24
    644e:	d411      	bmi.n	6474 <__swhatbuf_r+0x40>
    6450:	2380      	movs	r3, #128	; 0x80
    6452:	00db      	lsls	r3, r3, #3
    6454:	e00f      	b.n	6476 <__swhatbuf_r+0x42>
    6456:	aa01      	add	r2, sp, #4
    6458:	f000 fb98 	bl	6b8c <_fstat_r>
    645c:	2800      	cmp	r0, #0
    645e:	dbf2      	blt.n	6446 <__swhatbuf_r+0x12>
    6460:	22f0      	movs	r2, #240	; 0xf0
    6462:	9b02      	ldr	r3, [sp, #8]
    6464:	0212      	lsls	r2, r2, #8
    6466:	4013      	ands	r3, r2
    6468:	4a05      	ldr	r2, [pc, #20]	; (6480 <__swhatbuf_r+0x4c>)
    646a:	189b      	adds	r3, r3, r2
    646c:	425a      	negs	r2, r3
    646e:	4153      	adcs	r3, r2
    6470:	602b      	str	r3, [r5, #0]
    6472:	e7ed      	b.n	6450 <__swhatbuf_r+0x1c>
    6474:	2340      	movs	r3, #64	; 0x40
    6476:	2000      	movs	r0, #0
    6478:	6023      	str	r3, [r4, #0]
    647a:	b010      	add	sp, #64	; 0x40
    647c:	bd70      	pop	{r4, r5, r6, pc}
    647e:	46c0      	nop			; (mov r8, r8)
    6480:	ffffe000 	.word	0xffffe000

00006484 <__smakebuf_r>:
    6484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6486:	2602      	movs	r6, #2
    6488:	898b      	ldrh	r3, [r1, #12]
    648a:	0005      	movs	r5, r0
    648c:	000c      	movs	r4, r1
    648e:	4233      	tst	r3, r6
    6490:	d006      	beq.n	64a0 <__smakebuf_r+0x1c>
    6492:	0023      	movs	r3, r4
    6494:	3347      	adds	r3, #71	; 0x47
    6496:	6023      	str	r3, [r4, #0]
    6498:	6123      	str	r3, [r4, #16]
    649a:	2301      	movs	r3, #1
    649c:	6163      	str	r3, [r4, #20]
    649e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    64a0:	ab01      	add	r3, sp, #4
    64a2:	466a      	mov	r2, sp
    64a4:	f7ff ffc6 	bl	6434 <__swhatbuf_r>
    64a8:	9900      	ldr	r1, [sp, #0]
    64aa:	0007      	movs	r7, r0
    64ac:	0028      	movs	r0, r5
    64ae:	f7ff fbbd 	bl	5c2c <_malloc_r>
    64b2:	2800      	cmp	r0, #0
    64b4:	d108      	bne.n	64c8 <__smakebuf_r+0x44>
    64b6:	220c      	movs	r2, #12
    64b8:	5ea3      	ldrsh	r3, [r4, r2]
    64ba:	059a      	lsls	r2, r3, #22
    64bc:	d4ef      	bmi.n	649e <__smakebuf_r+0x1a>
    64be:	2203      	movs	r2, #3
    64c0:	4393      	bics	r3, r2
    64c2:	431e      	orrs	r6, r3
    64c4:	81a6      	strh	r6, [r4, #12]
    64c6:	e7e4      	b.n	6492 <__smakebuf_r+0xe>
    64c8:	4b0f      	ldr	r3, [pc, #60]	; (6508 <__smakebuf_r+0x84>)
    64ca:	62ab      	str	r3, [r5, #40]	; 0x28
    64cc:	2380      	movs	r3, #128	; 0x80
    64ce:	89a2      	ldrh	r2, [r4, #12]
    64d0:	6020      	str	r0, [r4, #0]
    64d2:	4313      	orrs	r3, r2
    64d4:	81a3      	strh	r3, [r4, #12]
    64d6:	9b00      	ldr	r3, [sp, #0]
    64d8:	6120      	str	r0, [r4, #16]
    64da:	6163      	str	r3, [r4, #20]
    64dc:	9b01      	ldr	r3, [sp, #4]
    64de:	2b00      	cmp	r3, #0
    64e0:	d00d      	beq.n	64fe <__smakebuf_r+0x7a>
    64e2:	230e      	movs	r3, #14
    64e4:	5ee1      	ldrsh	r1, [r4, r3]
    64e6:	0028      	movs	r0, r5
    64e8:	f000 fb62 	bl	6bb0 <_isatty_r>
    64ec:	2800      	cmp	r0, #0
    64ee:	d006      	beq.n	64fe <__smakebuf_r+0x7a>
    64f0:	2203      	movs	r2, #3
    64f2:	89a3      	ldrh	r3, [r4, #12]
    64f4:	4393      	bics	r3, r2
    64f6:	001a      	movs	r2, r3
    64f8:	2301      	movs	r3, #1
    64fa:	4313      	orrs	r3, r2
    64fc:	81a3      	strh	r3, [r4, #12]
    64fe:	89a0      	ldrh	r0, [r4, #12]
    6500:	4338      	orrs	r0, r7
    6502:	81a0      	strh	r0, [r4, #12]
    6504:	e7cb      	b.n	649e <__smakebuf_r+0x1a>
    6506:	46c0      	nop			; (mov r8, r8)
    6508:	00006285 	.word	0x00006285

0000650c <__malloc_lock>:
    650c:	4770      	bx	lr

0000650e <__malloc_unlock>:
    650e:	4770      	bx	lr

00006510 <__sfputc_r>:
    6510:	6893      	ldr	r3, [r2, #8]
    6512:	b510      	push	{r4, lr}
    6514:	3b01      	subs	r3, #1
    6516:	6093      	str	r3, [r2, #8]
    6518:	2b00      	cmp	r3, #0
    651a:	da05      	bge.n	6528 <__sfputc_r+0x18>
    651c:	6994      	ldr	r4, [r2, #24]
    651e:	42a3      	cmp	r3, r4
    6520:	db08      	blt.n	6534 <__sfputc_r+0x24>
    6522:	b2cb      	uxtb	r3, r1
    6524:	2b0a      	cmp	r3, #10
    6526:	d005      	beq.n	6534 <__sfputc_r+0x24>
    6528:	6813      	ldr	r3, [r2, #0]
    652a:	1c58      	adds	r0, r3, #1
    652c:	6010      	str	r0, [r2, #0]
    652e:	7019      	strb	r1, [r3, #0]
    6530:	b2c8      	uxtb	r0, r1
    6532:	bd10      	pop	{r4, pc}
    6534:	f7ff fd24 	bl	5f80 <__swbuf_r>
    6538:	e7fb      	b.n	6532 <__sfputc_r+0x22>

0000653a <__sfputs_r>:
    653a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    653c:	0006      	movs	r6, r0
    653e:	000f      	movs	r7, r1
    6540:	0014      	movs	r4, r2
    6542:	18d5      	adds	r5, r2, r3
    6544:	42ac      	cmp	r4, r5
    6546:	d101      	bne.n	654c <__sfputs_r+0x12>
    6548:	2000      	movs	r0, #0
    654a:	e007      	b.n	655c <__sfputs_r+0x22>
    654c:	7821      	ldrb	r1, [r4, #0]
    654e:	003a      	movs	r2, r7
    6550:	0030      	movs	r0, r6
    6552:	f7ff ffdd 	bl	6510 <__sfputc_r>
    6556:	3401      	adds	r4, #1
    6558:	1c43      	adds	r3, r0, #1
    655a:	d1f3      	bne.n	6544 <__sfputs_r+0xa>
    655c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006560 <_vfiprintf_r>:
    6560:	b5f0      	push	{r4, r5, r6, r7, lr}
    6562:	b09f      	sub	sp, #124	; 0x7c
    6564:	0006      	movs	r6, r0
    6566:	000f      	movs	r7, r1
    6568:	0014      	movs	r4, r2
    656a:	9305      	str	r3, [sp, #20]
    656c:	2800      	cmp	r0, #0
    656e:	d004      	beq.n	657a <_vfiprintf_r+0x1a>
    6570:	6983      	ldr	r3, [r0, #24]
    6572:	2b00      	cmp	r3, #0
    6574:	d101      	bne.n	657a <_vfiprintf_r+0x1a>
    6576:	f7ff fec7 	bl	6308 <__sinit>
    657a:	4b7f      	ldr	r3, [pc, #508]	; (6778 <_vfiprintf_r+0x218>)
    657c:	429f      	cmp	r7, r3
    657e:	d15c      	bne.n	663a <_vfiprintf_r+0xda>
    6580:	6877      	ldr	r7, [r6, #4]
    6582:	89bb      	ldrh	r3, [r7, #12]
    6584:	071b      	lsls	r3, r3, #28
    6586:	d562      	bpl.n	664e <_vfiprintf_r+0xee>
    6588:	693b      	ldr	r3, [r7, #16]
    658a:	2b00      	cmp	r3, #0
    658c:	d05f      	beq.n	664e <_vfiprintf_r+0xee>
    658e:	2300      	movs	r3, #0
    6590:	ad06      	add	r5, sp, #24
    6592:	616b      	str	r3, [r5, #20]
    6594:	3320      	adds	r3, #32
    6596:	766b      	strb	r3, [r5, #25]
    6598:	3310      	adds	r3, #16
    659a:	76ab      	strb	r3, [r5, #26]
    659c:	9402      	str	r4, [sp, #8]
    659e:	9c02      	ldr	r4, [sp, #8]
    65a0:	7823      	ldrb	r3, [r4, #0]
    65a2:	2b00      	cmp	r3, #0
    65a4:	d15d      	bne.n	6662 <_vfiprintf_r+0x102>
    65a6:	9b02      	ldr	r3, [sp, #8]
    65a8:	1ae3      	subs	r3, r4, r3
    65aa:	9304      	str	r3, [sp, #16]
    65ac:	d00d      	beq.n	65ca <_vfiprintf_r+0x6a>
    65ae:	9b04      	ldr	r3, [sp, #16]
    65b0:	9a02      	ldr	r2, [sp, #8]
    65b2:	0039      	movs	r1, r7
    65b4:	0030      	movs	r0, r6
    65b6:	f7ff ffc0 	bl	653a <__sfputs_r>
    65ba:	1c43      	adds	r3, r0, #1
    65bc:	d100      	bne.n	65c0 <_vfiprintf_r+0x60>
    65be:	e0cc      	b.n	675a <_vfiprintf_r+0x1fa>
    65c0:	696a      	ldr	r2, [r5, #20]
    65c2:	9b04      	ldr	r3, [sp, #16]
    65c4:	4694      	mov	ip, r2
    65c6:	4463      	add	r3, ip
    65c8:	616b      	str	r3, [r5, #20]
    65ca:	7823      	ldrb	r3, [r4, #0]
    65cc:	2b00      	cmp	r3, #0
    65ce:	d100      	bne.n	65d2 <_vfiprintf_r+0x72>
    65d0:	e0c3      	b.n	675a <_vfiprintf_r+0x1fa>
    65d2:	2201      	movs	r2, #1
    65d4:	2300      	movs	r3, #0
    65d6:	4252      	negs	r2, r2
    65d8:	606a      	str	r2, [r5, #4]
    65da:	a902      	add	r1, sp, #8
    65dc:	3254      	adds	r2, #84	; 0x54
    65de:	1852      	adds	r2, r2, r1
    65e0:	3401      	adds	r4, #1
    65e2:	602b      	str	r3, [r5, #0]
    65e4:	60eb      	str	r3, [r5, #12]
    65e6:	60ab      	str	r3, [r5, #8]
    65e8:	7013      	strb	r3, [r2, #0]
    65ea:	65ab      	str	r3, [r5, #88]	; 0x58
    65ec:	7821      	ldrb	r1, [r4, #0]
    65ee:	2205      	movs	r2, #5
    65f0:	4862      	ldr	r0, [pc, #392]	; (677c <_vfiprintf_r+0x21c>)
    65f2:	f000 fb03 	bl	6bfc <memchr>
    65f6:	1c63      	adds	r3, r4, #1
    65f8:	469c      	mov	ip, r3
    65fa:	2800      	cmp	r0, #0
    65fc:	d135      	bne.n	666a <_vfiprintf_r+0x10a>
    65fe:	6829      	ldr	r1, [r5, #0]
    6600:	06cb      	lsls	r3, r1, #27
    6602:	d504      	bpl.n	660e <_vfiprintf_r+0xae>
    6604:	2353      	movs	r3, #83	; 0x53
    6606:	aa02      	add	r2, sp, #8
    6608:	3020      	adds	r0, #32
    660a:	189b      	adds	r3, r3, r2
    660c:	7018      	strb	r0, [r3, #0]
    660e:	070b      	lsls	r3, r1, #28
    6610:	d504      	bpl.n	661c <_vfiprintf_r+0xbc>
    6612:	2353      	movs	r3, #83	; 0x53
    6614:	202b      	movs	r0, #43	; 0x2b
    6616:	aa02      	add	r2, sp, #8
    6618:	189b      	adds	r3, r3, r2
    661a:	7018      	strb	r0, [r3, #0]
    661c:	7823      	ldrb	r3, [r4, #0]
    661e:	2b2a      	cmp	r3, #42	; 0x2a
    6620:	d02c      	beq.n	667c <_vfiprintf_r+0x11c>
    6622:	2000      	movs	r0, #0
    6624:	210a      	movs	r1, #10
    6626:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6628:	7822      	ldrb	r2, [r4, #0]
    662a:	3a30      	subs	r2, #48	; 0x30
    662c:	2a09      	cmp	r2, #9
    662e:	d800      	bhi.n	6632 <_vfiprintf_r+0xd2>
    6630:	e06b      	b.n	670a <_vfiprintf_r+0x1aa>
    6632:	2800      	cmp	r0, #0
    6634:	d02a      	beq.n	668c <_vfiprintf_r+0x12c>
    6636:	9309      	str	r3, [sp, #36]	; 0x24
    6638:	e028      	b.n	668c <_vfiprintf_r+0x12c>
    663a:	4b51      	ldr	r3, [pc, #324]	; (6780 <_vfiprintf_r+0x220>)
    663c:	429f      	cmp	r7, r3
    663e:	d101      	bne.n	6644 <_vfiprintf_r+0xe4>
    6640:	68b7      	ldr	r7, [r6, #8]
    6642:	e79e      	b.n	6582 <_vfiprintf_r+0x22>
    6644:	4b4f      	ldr	r3, [pc, #316]	; (6784 <_vfiprintf_r+0x224>)
    6646:	429f      	cmp	r7, r3
    6648:	d19b      	bne.n	6582 <_vfiprintf_r+0x22>
    664a:	68f7      	ldr	r7, [r6, #12]
    664c:	e799      	b.n	6582 <_vfiprintf_r+0x22>
    664e:	0039      	movs	r1, r7
    6650:	0030      	movs	r0, r6
    6652:	f7ff fceb 	bl	602c <__swsetup_r>
    6656:	2800      	cmp	r0, #0
    6658:	d099      	beq.n	658e <_vfiprintf_r+0x2e>
    665a:	2001      	movs	r0, #1
    665c:	4240      	negs	r0, r0
    665e:	b01f      	add	sp, #124	; 0x7c
    6660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6662:	2b25      	cmp	r3, #37	; 0x25
    6664:	d09f      	beq.n	65a6 <_vfiprintf_r+0x46>
    6666:	3401      	adds	r4, #1
    6668:	e79a      	b.n	65a0 <_vfiprintf_r+0x40>
    666a:	4b44      	ldr	r3, [pc, #272]	; (677c <_vfiprintf_r+0x21c>)
    666c:	6829      	ldr	r1, [r5, #0]
    666e:	1ac0      	subs	r0, r0, r3
    6670:	2301      	movs	r3, #1
    6672:	4083      	lsls	r3, r0
    6674:	430b      	orrs	r3, r1
    6676:	602b      	str	r3, [r5, #0]
    6678:	4664      	mov	r4, ip
    667a:	e7b7      	b.n	65ec <_vfiprintf_r+0x8c>
    667c:	9b05      	ldr	r3, [sp, #20]
    667e:	1d18      	adds	r0, r3, #4
    6680:	681b      	ldr	r3, [r3, #0]
    6682:	9005      	str	r0, [sp, #20]
    6684:	2b00      	cmp	r3, #0
    6686:	db3a      	blt.n	66fe <_vfiprintf_r+0x19e>
    6688:	9309      	str	r3, [sp, #36]	; 0x24
    668a:	4664      	mov	r4, ip
    668c:	7823      	ldrb	r3, [r4, #0]
    668e:	2b2e      	cmp	r3, #46	; 0x2e
    6690:	d10b      	bne.n	66aa <_vfiprintf_r+0x14a>
    6692:	7863      	ldrb	r3, [r4, #1]
    6694:	1c62      	adds	r2, r4, #1
    6696:	2b2a      	cmp	r3, #42	; 0x2a
    6698:	d13f      	bne.n	671a <_vfiprintf_r+0x1ba>
    669a:	9b05      	ldr	r3, [sp, #20]
    669c:	3402      	adds	r4, #2
    669e:	1d1a      	adds	r2, r3, #4
    66a0:	681b      	ldr	r3, [r3, #0]
    66a2:	9205      	str	r2, [sp, #20]
    66a4:	2b00      	cmp	r3, #0
    66a6:	db35      	blt.n	6714 <_vfiprintf_r+0x1b4>
    66a8:	9307      	str	r3, [sp, #28]
    66aa:	7821      	ldrb	r1, [r4, #0]
    66ac:	2203      	movs	r2, #3
    66ae:	4836      	ldr	r0, [pc, #216]	; (6788 <_vfiprintf_r+0x228>)
    66b0:	f000 faa4 	bl	6bfc <memchr>
    66b4:	2800      	cmp	r0, #0
    66b6:	d007      	beq.n	66c8 <_vfiprintf_r+0x168>
    66b8:	4b33      	ldr	r3, [pc, #204]	; (6788 <_vfiprintf_r+0x228>)
    66ba:	682a      	ldr	r2, [r5, #0]
    66bc:	1ac0      	subs	r0, r0, r3
    66be:	2340      	movs	r3, #64	; 0x40
    66c0:	4083      	lsls	r3, r0
    66c2:	4313      	orrs	r3, r2
    66c4:	602b      	str	r3, [r5, #0]
    66c6:	3401      	adds	r4, #1
    66c8:	7821      	ldrb	r1, [r4, #0]
    66ca:	1c63      	adds	r3, r4, #1
    66cc:	2206      	movs	r2, #6
    66ce:	482f      	ldr	r0, [pc, #188]	; (678c <_vfiprintf_r+0x22c>)
    66d0:	9302      	str	r3, [sp, #8]
    66d2:	7629      	strb	r1, [r5, #24]
    66d4:	f000 fa92 	bl	6bfc <memchr>
    66d8:	2800      	cmp	r0, #0
    66da:	d044      	beq.n	6766 <_vfiprintf_r+0x206>
    66dc:	4b2c      	ldr	r3, [pc, #176]	; (6790 <_vfiprintf_r+0x230>)
    66de:	2b00      	cmp	r3, #0
    66e0:	d12f      	bne.n	6742 <_vfiprintf_r+0x1e2>
    66e2:	6829      	ldr	r1, [r5, #0]
    66e4:	9b05      	ldr	r3, [sp, #20]
    66e6:	2207      	movs	r2, #7
    66e8:	05c9      	lsls	r1, r1, #23
    66ea:	d528      	bpl.n	673e <_vfiprintf_r+0x1de>
    66ec:	189b      	adds	r3, r3, r2
    66ee:	4393      	bics	r3, r2
    66f0:	3308      	adds	r3, #8
    66f2:	9305      	str	r3, [sp, #20]
    66f4:	696b      	ldr	r3, [r5, #20]
    66f6:	9a03      	ldr	r2, [sp, #12]
    66f8:	189b      	adds	r3, r3, r2
    66fa:	616b      	str	r3, [r5, #20]
    66fc:	e74f      	b.n	659e <_vfiprintf_r+0x3e>
    66fe:	425b      	negs	r3, r3
    6700:	60eb      	str	r3, [r5, #12]
    6702:	2302      	movs	r3, #2
    6704:	430b      	orrs	r3, r1
    6706:	602b      	str	r3, [r5, #0]
    6708:	e7bf      	b.n	668a <_vfiprintf_r+0x12a>
    670a:	434b      	muls	r3, r1
    670c:	3401      	adds	r4, #1
    670e:	189b      	adds	r3, r3, r2
    6710:	2001      	movs	r0, #1
    6712:	e789      	b.n	6628 <_vfiprintf_r+0xc8>
    6714:	2301      	movs	r3, #1
    6716:	425b      	negs	r3, r3
    6718:	e7c6      	b.n	66a8 <_vfiprintf_r+0x148>
    671a:	2300      	movs	r3, #0
    671c:	0014      	movs	r4, r2
    671e:	200a      	movs	r0, #10
    6720:	001a      	movs	r2, r3
    6722:	606b      	str	r3, [r5, #4]
    6724:	7821      	ldrb	r1, [r4, #0]
    6726:	3930      	subs	r1, #48	; 0x30
    6728:	2909      	cmp	r1, #9
    672a:	d903      	bls.n	6734 <_vfiprintf_r+0x1d4>
    672c:	2b00      	cmp	r3, #0
    672e:	d0bc      	beq.n	66aa <_vfiprintf_r+0x14a>
    6730:	9207      	str	r2, [sp, #28]
    6732:	e7ba      	b.n	66aa <_vfiprintf_r+0x14a>
    6734:	4342      	muls	r2, r0
    6736:	3401      	adds	r4, #1
    6738:	1852      	adds	r2, r2, r1
    673a:	2301      	movs	r3, #1
    673c:	e7f2      	b.n	6724 <_vfiprintf_r+0x1c4>
    673e:	3307      	adds	r3, #7
    6740:	e7d5      	b.n	66ee <_vfiprintf_r+0x18e>
    6742:	ab05      	add	r3, sp, #20
    6744:	9300      	str	r3, [sp, #0]
    6746:	003a      	movs	r2, r7
    6748:	4b12      	ldr	r3, [pc, #72]	; (6794 <_vfiprintf_r+0x234>)
    674a:	0029      	movs	r1, r5
    674c:	0030      	movs	r0, r6
    674e:	e000      	b.n	6752 <_vfiprintf_r+0x1f2>
    6750:	bf00      	nop
    6752:	9003      	str	r0, [sp, #12]
    6754:	9b03      	ldr	r3, [sp, #12]
    6756:	3301      	adds	r3, #1
    6758:	d1cc      	bne.n	66f4 <_vfiprintf_r+0x194>
    675a:	89bb      	ldrh	r3, [r7, #12]
    675c:	065b      	lsls	r3, r3, #25
    675e:	d500      	bpl.n	6762 <_vfiprintf_r+0x202>
    6760:	e77b      	b.n	665a <_vfiprintf_r+0xfa>
    6762:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6764:	e77b      	b.n	665e <_vfiprintf_r+0xfe>
    6766:	ab05      	add	r3, sp, #20
    6768:	9300      	str	r3, [sp, #0]
    676a:	003a      	movs	r2, r7
    676c:	4b09      	ldr	r3, [pc, #36]	; (6794 <_vfiprintf_r+0x234>)
    676e:	0029      	movs	r1, r5
    6770:	0030      	movs	r0, r6
    6772:	f000 f87f 	bl	6874 <_printf_i>
    6776:	e7ec      	b.n	6752 <_vfiprintf_r+0x1f2>
    6778:	00009a9c 	.word	0x00009a9c
    677c:	00009adc 	.word	0x00009adc
    6780:	00009abc 	.word	0x00009abc
    6784:	00009a7c 	.word	0x00009a7c
    6788:	00009ae2 	.word	0x00009ae2
    678c:	00009ae6 	.word	0x00009ae6
    6790:	00000000 	.word	0x00000000
    6794:	0000653b 	.word	0x0000653b

00006798 <_printf_common>:
    6798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    679a:	0015      	movs	r5, r2
    679c:	9301      	str	r3, [sp, #4]
    679e:	688a      	ldr	r2, [r1, #8]
    67a0:	690b      	ldr	r3, [r1, #16]
    67a2:	9000      	str	r0, [sp, #0]
    67a4:	000c      	movs	r4, r1
    67a6:	4293      	cmp	r3, r2
    67a8:	da00      	bge.n	67ac <_printf_common+0x14>
    67aa:	0013      	movs	r3, r2
    67ac:	0022      	movs	r2, r4
    67ae:	602b      	str	r3, [r5, #0]
    67b0:	3243      	adds	r2, #67	; 0x43
    67b2:	7812      	ldrb	r2, [r2, #0]
    67b4:	2a00      	cmp	r2, #0
    67b6:	d001      	beq.n	67bc <_printf_common+0x24>
    67b8:	3301      	adds	r3, #1
    67ba:	602b      	str	r3, [r5, #0]
    67bc:	6823      	ldr	r3, [r4, #0]
    67be:	069b      	lsls	r3, r3, #26
    67c0:	d502      	bpl.n	67c8 <_printf_common+0x30>
    67c2:	682b      	ldr	r3, [r5, #0]
    67c4:	3302      	adds	r3, #2
    67c6:	602b      	str	r3, [r5, #0]
    67c8:	2706      	movs	r7, #6
    67ca:	6823      	ldr	r3, [r4, #0]
    67cc:	401f      	ands	r7, r3
    67ce:	d027      	beq.n	6820 <_printf_common+0x88>
    67d0:	0023      	movs	r3, r4
    67d2:	3343      	adds	r3, #67	; 0x43
    67d4:	781b      	ldrb	r3, [r3, #0]
    67d6:	1e5a      	subs	r2, r3, #1
    67d8:	4193      	sbcs	r3, r2
    67da:	6822      	ldr	r2, [r4, #0]
    67dc:	0692      	lsls	r2, r2, #26
    67de:	d430      	bmi.n	6842 <_printf_common+0xaa>
    67e0:	0022      	movs	r2, r4
    67e2:	9901      	ldr	r1, [sp, #4]
    67e4:	3243      	adds	r2, #67	; 0x43
    67e6:	9800      	ldr	r0, [sp, #0]
    67e8:	9e08      	ldr	r6, [sp, #32]
    67ea:	47b0      	blx	r6
    67ec:	1c43      	adds	r3, r0, #1
    67ee:	d025      	beq.n	683c <_printf_common+0xa4>
    67f0:	2306      	movs	r3, #6
    67f2:	6820      	ldr	r0, [r4, #0]
    67f4:	682a      	ldr	r2, [r5, #0]
    67f6:	68e1      	ldr	r1, [r4, #12]
    67f8:	4003      	ands	r3, r0
    67fa:	2500      	movs	r5, #0
    67fc:	2b04      	cmp	r3, #4
    67fe:	d103      	bne.n	6808 <_printf_common+0x70>
    6800:	1a8d      	subs	r5, r1, r2
    6802:	43eb      	mvns	r3, r5
    6804:	17db      	asrs	r3, r3, #31
    6806:	401d      	ands	r5, r3
    6808:	68a3      	ldr	r3, [r4, #8]
    680a:	6922      	ldr	r2, [r4, #16]
    680c:	4293      	cmp	r3, r2
    680e:	dd01      	ble.n	6814 <_printf_common+0x7c>
    6810:	1a9b      	subs	r3, r3, r2
    6812:	18ed      	adds	r5, r5, r3
    6814:	2700      	movs	r7, #0
    6816:	42bd      	cmp	r5, r7
    6818:	d120      	bne.n	685c <_printf_common+0xc4>
    681a:	2000      	movs	r0, #0
    681c:	e010      	b.n	6840 <_printf_common+0xa8>
    681e:	3701      	adds	r7, #1
    6820:	68e3      	ldr	r3, [r4, #12]
    6822:	682a      	ldr	r2, [r5, #0]
    6824:	1a9b      	subs	r3, r3, r2
    6826:	429f      	cmp	r7, r3
    6828:	dad2      	bge.n	67d0 <_printf_common+0x38>
    682a:	0022      	movs	r2, r4
    682c:	2301      	movs	r3, #1
    682e:	3219      	adds	r2, #25
    6830:	9901      	ldr	r1, [sp, #4]
    6832:	9800      	ldr	r0, [sp, #0]
    6834:	9e08      	ldr	r6, [sp, #32]
    6836:	47b0      	blx	r6
    6838:	1c43      	adds	r3, r0, #1
    683a:	d1f0      	bne.n	681e <_printf_common+0x86>
    683c:	2001      	movs	r0, #1
    683e:	4240      	negs	r0, r0
    6840:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6842:	2030      	movs	r0, #48	; 0x30
    6844:	18e1      	adds	r1, r4, r3
    6846:	3143      	adds	r1, #67	; 0x43
    6848:	7008      	strb	r0, [r1, #0]
    684a:	0021      	movs	r1, r4
    684c:	1c5a      	adds	r2, r3, #1
    684e:	3145      	adds	r1, #69	; 0x45
    6850:	7809      	ldrb	r1, [r1, #0]
    6852:	18a2      	adds	r2, r4, r2
    6854:	3243      	adds	r2, #67	; 0x43
    6856:	3302      	adds	r3, #2
    6858:	7011      	strb	r1, [r2, #0]
    685a:	e7c1      	b.n	67e0 <_printf_common+0x48>
    685c:	0022      	movs	r2, r4
    685e:	2301      	movs	r3, #1
    6860:	321a      	adds	r2, #26
    6862:	9901      	ldr	r1, [sp, #4]
    6864:	9800      	ldr	r0, [sp, #0]
    6866:	9e08      	ldr	r6, [sp, #32]
    6868:	47b0      	blx	r6
    686a:	1c43      	adds	r3, r0, #1
    686c:	d0e6      	beq.n	683c <_printf_common+0xa4>
    686e:	3701      	adds	r7, #1
    6870:	e7d1      	b.n	6816 <_printf_common+0x7e>
	...

00006874 <_printf_i>:
    6874:	b5f0      	push	{r4, r5, r6, r7, lr}
    6876:	b08b      	sub	sp, #44	; 0x2c
    6878:	9206      	str	r2, [sp, #24]
    687a:	000a      	movs	r2, r1
    687c:	3243      	adds	r2, #67	; 0x43
    687e:	9307      	str	r3, [sp, #28]
    6880:	9005      	str	r0, [sp, #20]
    6882:	9204      	str	r2, [sp, #16]
    6884:	7e0a      	ldrb	r2, [r1, #24]
    6886:	000c      	movs	r4, r1
    6888:	9b10      	ldr	r3, [sp, #64]	; 0x40
    688a:	2a6e      	cmp	r2, #110	; 0x6e
    688c:	d100      	bne.n	6890 <_printf_i+0x1c>
    688e:	e08f      	b.n	69b0 <_printf_i+0x13c>
    6890:	d817      	bhi.n	68c2 <_printf_i+0x4e>
    6892:	2a63      	cmp	r2, #99	; 0x63
    6894:	d02c      	beq.n	68f0 <_printf_i+0x7c>
    6896:	d808      	bhi.n	68aa <_printf_i+0x36>
    6898:	2a00      	cmp	r2, #0
    689a:	d100      	bne.n	689e <_printf_i+0x2a>
    689c:	e099      	b.n	69d2 <_printf_i+0x15e>
    689e:	2a58      	cmp	r2, #88	; 0x58
    68a0:	d054      	beq.n	694c <_printf_i+0xd8>
    68a2:	0026      	movs	r6, r4
    68a4:	3642      	adds	r6, #66	; 0x42
    68a6:	7032      	strb	r2, [r6, #0]
    68a8:	e029      	b.n	68fe <_printf_i+0x8a>
    68aa:	2a64      	cmp	r2, #100	; 0x64
    68ac:	d001      	beq.n	68b2 <_printf_i+0x3e>
    68ae:	2a69      	cmp	r2, #105	; 0x69
    68b0:	d1f7      	bne.n	68a2 <_printf_i+0x2e>
    68b2:	6821      	ldr	r1, [r4, #0]
    68b4:	681a      	ldr	r2, [r3, #0]
    68b6:	0608      	lsls	r0, r1, #24
    68b8:	d523      	bpl.n	6902 <_printf_i+0x8e>
    68ba:	1d11      	adds	r1, r2, #4
    68bc:	6019      	str	r1, [r3, #0]
    68be:	6815      	ldr	r5, [r2, #0]
    68c0:	e025      	b.n	690e <_printf_i+0x9a>
    68c2:	2a73      	cmp	r2, #115	; 0x73
    68c4:	d100      	bne.n	68c8 <_printf_i+0x54>
    68c6:	e088      	b.n	69da <_printf_i+0x166>
    68c8:	d808      	bhi.n	68dc <_printf_i+0x68>
    68ca:	2a6f      	cmp	r2, #111	; 0x6f
    68cc:	d029      	beq.n	6922 <_printf_i+0xae>
    68ce:	2a70      	cmp	r2, #112	; 0x70
    68d0:	d1e7      	bne.n	68a2 <_printf_i+0x2e>
    68d2:	2220      	movs	r2, #32
    68d4:	6809      	ldr	r1, [r1, #0]
    68d6:	430a      	orrs	r2, r1
    68d8:	6022      	str	r2, [r4, #0]
    68da:	e003      	b.n	68e4 <_printf_i+0x70>
    68dc:	2a75      	cmp	r2, #117	; 0x75
    68de:	d020      	beq.n	6922 <_printf_i+0xae>
    68e0:	2a78      	cmp	r2, #120	; 0x78
    68e2:	d1de      	bne.n	68a2 <_printf_i+0x2e>
    68e4:	0022      	movs	r2, r4
    68e6:	2178      	movs	r1, #120	; 0x78
    68e8:	3245      	adds	r2, #69	; 0x45
    68ea:	7011      	strb	r1, [r2, #0]
    68ec:	4a6c      	ldr	r2, [pc, #432]	; (6aa0 <_printf_i+0x22c>)
    68ee:	e030      	b.n	6952 <_printf_i+0xde>
    68f0:	000e      	movs	r6, r1
    68f2:	681a      	ldr	r2, [r3, #0]
    68f4:	3642      	adds	r6, #66	; 0x42
    68f6:	1d11      	adds	r1, r2, #4
    68f8:	6019      	str	r1, [r3, #0]
    68fa:	6813      	ldr	r3, [r2, #0]
    68fc:	7033      	strb	r3, [r6, #0]
    68fe:	2301      	movs	r3, #1
    6900:	e079      	b.n	69f6 <_printf_i+0x182>
    6902:	0649      	lsls	r1, r1, #25
    6904:	d5d9      	bpl.n	68ba <_printf_i+0x46>
    6906:	1d11      	adds	r1, r2, #4
    6908:	6019      	str	r1, [r3, #0]
    690a:	2300      	movs	r3, #0
    690c:	5ed5      	ldrsh	r5, [r2, r3]
    690e:	2d00      	cmp	r5, #0
    6910:	da03      	bge.n	691a <_printf_i+0xa6>
    6912:	232d      	movs	r3, #45	; 0x2d
    6914:	9a04      	ldr	r2, [sp, #16]
    6916:	426d      	negs	r5, r5
    6918:	7013      	strb	r3, [r2, #0]
    691a:	4b62      	ldr	r3, [pc, #392]	; (6aa4 <_printf_i+0x230>)
    691c:	270a      	movs	r7, #10
    691e:	9303      	str	r3, [sp, #12]
    6920:	e02f      	b.n	6982 <_printf_i+0x10e>
    6922:	6820      	ldr	r0, [r4, #0]
    6924:	6819      	ldr	r1, [r3, #0]
    6926:	0605      	lsls	r5, r0, #24
    6928:	d503      	bpl.n	6932 <_printf_i+0xbe>
    692a:	1d08      	adds	r0, r1, #4
    692c:	6018      	str	r0, [r3, #0]
    692e:	680d      	ldr	r5, [r1, #0]
    6930:	e005      	b.n	693e <_printf_i+0xca>
    6932:	0640      	lsls	r0, r0, #25
    6934:	d5f9      	bpl.n	692a <_printf_i+0xb6>
    6936:	680d      	ldr	r5, [r1, #0]
    6938:	1d08      	adds	r0, r1, #4
    693a:	6018      	str	r0, [r3, #0]
    693c:	b2ad      	uxth	r5, r5
    693e:	4b59      	ldr	r3, [pc, #356]	; (6aa4 <_printf_i+0x230>)
    6940:	2708      	movs	r7, #8
    6942:	9303      	str	r3, [sp, #12]
    6944:	2a6f      	cmp	r2, #111	; 0x6f
    6946:	d018      	beq.n	697a <_printf_i+0x106>
    6948:	270a      	movs	r7, #10
    694a:	e016      	b.n	697a <_printf_i+0x106>
    694c:	3145      	adds	r1, #69	; 0x45
    694e:	700a      	strb	r2, [r1, #0]
    6950:	4a54      	ldr	r2, [pc, #336]	; (6aa4 <_printf_i+0x230>)
    6952:	9203      	str	r2, [sp, #12]
    6954:	681a      	ldr	r2, [r3, #0]
    6956:	6821      	ldr	r1, [r4, #0]
    6958:	1d10      	adds	r0, r2, #4
    695a:	6018      	str	r0, [r3, #0]
    695c:	6815      	ldr	r5, [r2, #0]
    695e:	0608      	lsls	r0, r1, #24
    6960:	d522      	bpl.n	69a8 <_printf_i+0x134>
    6962:	07cb      	lsls	r3, r1, #31
    6964:	d502      	bpl.n	696c <_printf_i+0xf8>
    6966:	2320      	movs	r3, #32
    6968:	4319      	orrs	r1, r3
    696a:	6021      	str	r1, [r4, #0]
    696c:	2710      	movs	r7, #16
    696e:	2d00      	cmp	r5, #0
    6970:	d103      	bne.n	697a <_printf_i+0x106>
    6972:	2320      	movs	r3, #32
    6974:	6822      	ldr	r2, [r4, #0]
    6976:	439a      	bics	r2, r3
    6978:	6022      	str	r2, [r4, #0]
    697a:	0023      	movs	r3, r4
    697c:	2200      	movs	r2, #0
    697e:	3343      	adds	r3, #67	; 0x43
    6980:	701a      	strb	r2, [r3, #0]
    6982:	6863      	ldr	r3, [r4, #4]
    6984:	60a3      	str	r3, [r4, #8]
    6986:	2b00      	cmp	r3, #0
    6988:	db5c      	blt.n	6a44 <_printf_i+0x1d0>
    698a:	2204      	movs	r2, #4
    698c:	6821      	ldr	r1, [r4, #0]
    698e:	4391      	bics	r1, r2
    6990:	6021      	str	r1, [r4, #0]
    6992:	2d00      	cmp	r5, #0
    6994:	d158      	bne.n	6a48 <_printf_i+0x1d4>
    6996:	9e04      	ldr	r6, [sp, #16]
    6998:	2b00      	cmp	r3, #0
    699a:	d064      	beq.n	6a66 <_printf_i+0x1f2>
    699c:	0026      	movs	r6, r4
    699e:	9b03      	ldr	r3, [sp, #12]
    69a0:	3642      	adds	r6, #66	; 0x42
    69a2:	781b      	ldrb	r3, [r3, #0]
    69a4:	7033      	strb	r3, [r6, #0]
    69a6:	e05e      	b.n	6a66 <_printf_i+0x1f2>
    69a8:	0648      	lsls	r0, r1, #25
    69aa:	d5da      	bpl.n	6962 <_printf_i+0xee>
    69ac:	b2ad      	uxth	r5, r5
    69ae:	e7d8      	b.n	6962 <_printf_i+0xee>
    69b0:	6809      	ldr	r1, [r1, #0]
    69b2:	681a      	ldr	r2, [r3, #0]
    69b4:	0608      	lsls	r0, r1, #24
    69b6:	d505      	bpl.n	69c4 <_printf_i+0x150>
    69b8:	1d11      	adds	r1, r2, #4
    69ba:	6019      	str	r1, [r3, #0]
    69bc:	6813      	ldr	r3, [r2, #0]
    69be:	6962      	ldr	r2, [r4, #20]
    69c0:	601a      	str	r2, [r3, #0]
    69c2:	e006      	b.n	69d2 <_printf_i+0x15e>
    69c4:	0649      	lsls	r1, r1, #25
    69c6:	d5f7      	bpl.n	69b8 <_printf_i+0x144>
    69c8:	1d11      	adds	r1, r2, #4
    69ca:	6019      	str	r1, [r3, #0]
    69cc:	6813      	ldr	r3, [r2, #0]
    69ce:	8aa2      	ldrh	r2, [r4, #20]
    69d0:	801a      	strh	r2, [r3, #0]
    69d2:	2300      	movs	r3, #0
    69d4:	9e04      	ldr	r6, [sp, #16]
    69d6:	6123      	str	r3, [r4, #16]
    69d8:	e054      	b.n	6a84 <_printf_i+0x210>
    69da:	681a      	ldr	r2, [r3, #0]
    69dc:	1d11      	adds	r1, r2, #4
    69de:	6019      	str	r1, [r3, #0]
    69e0:	6816      	ldr	r6, [r2, #0]
    69e2:	2100      	movs	r1, #0
    69e4:	6862      	ldr	r2, [r4, #4]
    69e6:	0030      	movs	r0, r6
    69e8:	f000 f908 	bl	6bfc <memchr>
    69ec:	2800      	cmp	r0, #0
    69ee:	d001      	beq.n	69f4 <_printf_i+0x180>
    69f0:	1b80      	subs	r0, r0, r6
    69f2:	6060      	str	r0, [r4, #4]
    69f4:	6863      	ldr	r3, [r4, #4]
    69f6:	6123      	str	r3, [r4, #16]
    69f8:	2300      	movs	r3, #0
    69fa:	9a04      	ldr	r2, [sp, #16]
    69fc:	7013      	strb	r3, [r2, #0]
    69fe:	e041      	b.n	6a84 <_printf_i+0x210>
    6a00:	6923      	ldr	r3, [r4, #16]
    6a02:	0032      	movs	r2, r6
    6a04:	9906      	ldr	r1, [sp, #24]
    6a06:	9805      	ldr	r0, [sp, #20]
    6a08:	9d07      	ldr	r5, [sp, #28]
    6a0a:	47a8      	blx	r5
    6a0c:	1c43      	adds	r3, r0, #1
    6a0e:	d043      	beq.n	6a98 <_printf_i+0x224>
    6a10:	6823      	ldr	r3, [r4, #0]
    6a12:	2500      	movs	r5, #0
    6a14:	079b      	lsls	r3, r3, #30
    6a16:	d40f      	bmi.n	6a38 <_printf_i+0x1c4>
    6a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a1a:	68e0      	ldr	r0, [r4, #12]
    6a1c:	4298      	cmp	r0, r3
    6a1e:	da3d      	bge.n	6a9c <_printf_i+0x228>
    6a20:	0018      	movs	r0, r3
    6a22:	e03b      	b.n	6a9c <_printf_i+0x228>
    6a24:	0022      	movs	r2, r4
    6a26:	2301      	movs	r3, #1
    6a28:	3219      	adds	r2, #25
    6a2a:	9906      	ldr	r1, [sp, #24]
    6a2c:	9805      	ldr	r0, [sp, #20]
    6a2e:	9e07      	ldr	r6, [sp, #28]
    6a30:	47b0      	blx	r6
    6a32:	1c43      	adds	r3, r0, #1
    6a34:	d030      	beq.n	6a98 <_printf_i+0x224>
    6a36:	3501      	adds	r5, #1
    6a38:	68e3      	ldr	r3, [r4, #12]
    6a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6a3c:	1a9b      	subs	r3, r3, r2
    6a3e:	429d      	cmp	r5, r3
    6a40:	dbf0      	blt.n	6a24 <_printf_i+0x1b0>
    6a42:	e7e9      	b.n	6a18 <_printf_i+0x1a4>
    6a44:	2d00      	cmp	r5, #0
    6a46:	d0a9      	beq.n	699c <_printf_i+0x128>
    6a48:	9e04      	ldr	r6, [sp, #16]
    6a4a:	0028      	movs	r0, r5
    6a4c:	0039      	movs	r1, r7
    6a4e:	f7fe ff37 	bl	58c0 <__aeabi_uidivmod>
    6a52:	9b03      	ldr	r3, [sp, #12]
    6a54:	3e01      	subs	r6, #1
    6a56:	5c5b      	ldrb	r3, [r3, r1]
    6a58:	0028      	movs	r0, r5
    6a5a:	7033      	strb	r3, [r6, #0]
    6a5c:	0039      	movs	r1, r7
    6a5e:	f7fe fea9 	bl	57b4 <__udivsi3>
    6a62:	1e05      	subs	r5, r0, #0
    6a64:	d1f1      	bne.n	6a4a <_printf_i+0x1d6>
    6a66:	2f08      	cmp	r7, #8
    6a68:	d109      	bne.n	6a7e <_printf_i+0x20a>
    6a6a:	6823      	ldr	r3, [r4, #0]
    6a6c:	07db      	lsls	r3, r3, #31
    6a6e:	d506      	bpl.n	6a7e <_printf_i+0x20a>
    6a70:	6863      	ldr	r3, [r4, #4]
    6a72:	6922      	ldr	r2, [r4, #16]
    6a74:	4293      	cmp	r3, r2
    6a76:	dc02      	bgt.n	6a7e <_printf_i+0x20a>
    6a78:	2330      	movs	r3, #48	; 0x30
    6a7a:	3e01      	subs	r6, #1
    6a7c:	7033      	strb	r3, [r6, #0]
    6a7e:	9b04      	ldr	r3, [sp, #16]
    6a80:	1b9b      	subs	r3, r3, r6
    6a82:	6123      	str	r3, [r4, #16]
    6a84:	9b07      	ldr	r3, [sp, #28]
    6a86:	aa09      	add	r2, sp, #36	; 0x24
    6a88:	9300      	str	r3, [sp, #0]
    6a8a:	0021      	movs	r1, r4
    6a8c:	9b06      	ldr	r3, [sp, #24]
    6a8e:	9805      	ldr	r0, [sp, #20]
    6a90:	f7ff fe82 	bl	6798 <_printf_common>
    6a94:	1c43      	adds	r3, r0, #1
    6a96:	d1b3      	bne.n	6a00 <_printf_i+0x18c>
    6a98:	2001      	movs	r0, #1
    6a9a:	4240      	negs	r0, r0
    6a9c:	b00b      	add	sp, #44	; 0x2c
    6a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6aa0:	00009afe 	.word	0x00009afe
    6aa4:	00009aed 	.word	0x00009aed

00006aa8 <__sread>:
    6aa8:	b570      	push	{r4, r5, r6, lr}
    6aaa:	000c      	movs	r4, r1
    6aac:	250e      	movs	r5, #14
    6aae:	5f49      	ldrsh	r1, [r1, r5]
    6ab0:	f000 f8b0 	bl	6c14 <_read_r>
    6ab4:	2800      	cmp	r0, #0
    6ab6:	db03      	blt.n	6ac0 <__sread+0x18>
    6ab8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6aba:	181b      	adds	r3, r3, r0
    6abc:	6563      	str	r3, [r4, #84]	; 0x54
    6abe:	bd70      	pop	{r4, r5, r6, pc}
    6ac0:	89a3      	ldrh	r3, [r4, #12]
    6ac2:	4a02      	ldr	r2, [pc, #8]	; (6acc <__sread+0x24>)
    6ac4:	4013      	ands	r3, r2
    6ac6:	81a3      	strh	r3, [r4, #12]
    6ac8:	e7f9      	b.n	6abe <__sread+0x16>
    6aca:	46c0      	nop			; (mov r8, r8)
    6acc:	ffffefff 	.word	0xffffefff

00006ad0 <__swrite>:
    6ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ad2:	001f      	movs	r7, r3
    6ad4:	898b      	ldrh	r3, [r1, #12]
    6ad6:	0005      	movs	r5, r0
    6ad8:	000c      	movs	r4, r1
    6ada:	0016      	movs	r6, r2
    6adc:	05db      	lsls	r3, r3, #23
    6ade:	d505      	bpl.n	6aec <__swrite+0x1c>
    6ae0:	230e      	movs	r3, #14
    6ae2:	5ec9      	ldrsh	r1, [r1, r3]
    6ae4:	2200      	movs	r2, #0
    6ae6:	2302      	movs	r3, #2
    6ae8:	f000 f874 	bl	6bd4 <_lseek_r>
    6aec:	89a3      	ldrh	r3, [r4, #12]
    6aee:	4a05      	ldr	r2, [pc, #20]	; (6b04 <__swrite+0x34>)
    6af0:	0028      	movs	r0, r5
    6af2:	4013      	ands	r3, r2
    6af4:	81a3      	strh	r3, [r4, #12]
    6af6:	0032      	movs	r2, r6
    6af8:	230e      	movs	r3, #14
    6afa:	5ee1      	ldrsh	r1, [r4, r3]
    6afc:	003b      	movs	r3, r7
    6afe:	f000 f81f 	bl	6b40 <_write_r>
    6b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b04:	ffffefff 	.word	0xffffefff

00006b08 <__sseek>:
    6b08:	b570      	push	{r4, r5, r6, lr}
    6b0a:	000c      	movs	r4, r1
    6b0c:	250e      	movs	r5, #14
    6b0e:	5f49      	ldrsh	r1, [r1, r5]
    6b10:	f000 f860 	bl	6bd4 <_lseek_r>
    6b14:	89a3      	ldrh	r3, [r4, #12]
    6b16:	1c42      	adds	r2, r0, #1
    6b18:	d103      	bne.n	6b22 <__sseek+0x1a>
    6b1a:	4a05      	ldr	r2, [pc, #20]	; (6b30 <__sseek+0x28>)
    6b1c:	4013      	ands	r3, r2
    6b1e:	81a3      	strh	r3, [r4, #12]
    6b20:	bd70      	pop	{r4, r5, r6, pc}
    6b22:	2280      	movs	r2, #128	; 0x80
    6b24:	0152      	lsls	r2, r2, #5
    6b26:	4313      	orrs	r3, r2
    6b28:	81a3      	strh	r3, [r4, #12]
    6b2a:	6560      	str	r0, [r4, #84]	; 0x54
    6b2c:	e7f8      	b.n	6b20 <__sseek+0x18>
    6b2e:	46c0      	nop			; (mov r8, r8)
    6b30:	ffffefff 	.word	0xffffefff

00006b34 <__sclose>:
    6b34:	b510      	push	{r4, lr}
    6b36:	230e      	movs	r3, #14
    6b38:	5ec9      	ldrsh	r1, [r1, r3]
    6b3a:	f000 f815 	bl	6b68 <_close_r>
    6b3e:	bd10      	pop	{r4, pc}

00006b40 <_write_r>:
    6b40:	b570      	push	{r4, r5, r6, lr}
    6b42:	0005      	movs	r5, r0
    6b44:	0008      	movs	r0, r1
    6b46:	0011      	movs	r1, r2
    6b48:	2200      	movs	r2, #0
    6b4a:	4c06      	ldr	r4, [pc, #24]	; (6b64 <_write_r+0x24>)
    6b4c:	6022      	str	r2, [r4, #0]
    6b4e:	001a      	movs	r2, r3
    6b50:	f7fa fe74 	bl	183c <_write>
    6b54:	1c43      	adds	r3, r0, #1
    6b56:	d103      	bne.n	6b60 <_write_r+0x20>
    6b58:	6823      	ldr	r3, [r4, #0]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d000      	beq.n	6b60 <_write_r+0x20>
    6b5e:	602b      	str	r3, [r5, #0]
    6b60:	bd70      	pop	{r4, r5, r6, pc}
    6b62:	46c0      	nop			; (mov r8, r8)
    6b64:	20001024 	.word	0x20001024

00006b68 <_close_r>:
    6b68:	2300      	movs	r3, #0
    6b6a:	b570      	push	{r4, r5, r6, lr}
    6b6c:	4c06      	ldr	r4, [pc, #24]	; (6b88 <_close_r+0x20>)
    6b6e:	0005      	movs	r5, r0
    6b70:	0008      	movs	r0, r1
    6b72:	6023      	str	r3, [r4, #0]
    6b74:	f7fa fe9c 	bl	18b0 <_close>
    6b78:	1c43      	adds	r3, r0, #1
    6b7a:	d103      	bne.n	6b84 <_close_r+0x1c>
    6b7c:	6823      	ldr	r3, [r4, #0]
    6b7e:	2b00      	cmp	r3, #0
    6b80:	d000      	beq.n	6b84 <_close_r+0x1c>
    6b82:	602b      	str	r3, [r5, #0]
    6b84:	bd70      	pop	{r4, r5, r6, pc}
    6b86:	46c0      	nop			; (mov r8, r8)
    6b88:	20001024 	.word	0x20001024

00006b8c <_fstat_r>:
    6b8c:	2300      	movs	r3, #0
    6b8e:	b570      	push	{r4, r5, r6, lr}
    6b90:	4c06      	ldr	r4, [pc, #24]	; (6bac <_fstat_r+0x20>)
    6b92:	0005      	movs	r5, r0
    6b94:	0008      	movs	r0, r1
    6b96:	0011      	movs	r1, r2
    6b98:	6023      	str	r3, [r4, #0]
    6b9a:	f7fa fe8c 	bl	18b6 <_fstat>
    6b9e:	1c43      	adds	r3, r0, #1
    6ba0:	d103      	bne.n	6baa <_fstat_r+0x1e>
    6ba2:	6823      	ldr	r3, [r4, #0]
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d000      	beq.n	6baa <_fstat_r+0x1e>
    6ba8:	602b      	str	r3, [r5, #0]
    6baa:	bd70      	pop	{r4, r5, r6, pc}
    6bac:	20001024 	.word	0x20001024

00006bb0 <_isatty_r>:
    6bb0:	2300      	movs	r3, #0
    6bb2:	b570      	push	{r4, r5, r6, lr}
    6bb4:	4c06      	ldr	r4, [pc, #24]	; (6bd0 <_isatty_r+0x20>)
    6bb6:	0005      	movs	r5, r0
    6bb8:	0008      	movs	r0, r1
    6bba:	6023      	str	r3, [r4, #0]
    6bbc:	f7fa fe80 	bl	18c0 <_isatty>
    6bc0:	1c43      	adds	r3, r0, #1
    6bc2:	d103      	bne.n	6bcc <_isatty_r+0x1c>
    6bc4:	6823      	ldr	r3, [r4, #0]
    6bc6:	2b00      	cmp	r3, #0
    6bc8:	d000      	beq.n	6bcc <_isatty_r+0x1c>
    6bca:	602b      	str	r3, [r5, #0]
    6bcc:	bd70      	pop	{r4, r5, r6, pc}
    6bce:	46c0      	nop			; (mov r8, r8)
    6bd0:	20001024 	.word	0x20001024

00006bd4 <_lseek_r>:
    6bd4:	b570      	push	{r4, r5, r6, lr}
    6bd6:	0005      	movs	r5, r0
    6bd8:	0008      	movs	r0, r1
    6bda:	0011      	movs	r1, r2
    6bdc:	2200      	movs	r2, #0
    6bde:	4c06      	ldr	r4, [pc, #24]	; (6bf8 <_lseek_r+0x24>)
    6be0:	6022      	str	r2, [r4, #0]
    6be2:	001a      	movs	r2, r3
    6be4:	f7fa fe6e 	bl	18c4 <_lseek>
    6be8:	1c43      	adds	r3, r0, #1
    6bea:	d103      	bne.n	6bf4 <_lseek_r+0x20>
    6bec:	6823      	ldr	r3, [r4, #0]
    6bee:	2b00      	cmp	r3, #0
    6bf0:	d000      	beq.n	6bf4 <_lseek_r+0x20>
    6bf2:	602b      	str	r3, [r5, #0]
    6bf4:	bd70      	pop	{r4, r5, r6, pc}
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	20001024 	.word	0x20001024

00006bfc <memchr>:
    6bfc:	b2c9      	uxtb	r1, r1
    6bfe:	1882      	adds	r2, r0, r2
    6c00:	4290      	cmp	r0, r2
    6c02:	d101      	bne.n	6c08 <memchr+0xc>
    6c04:	2000      	movs	r0, #0
    6c06:	4770      	bx	lr
    6c08:	7803      	ldrb	r3, [r0, #0]
    6c0a:	428b      	cmp	r3, r1
    6c0c:	d0fb      	beq.n	6c06 <memchr+0xa>
    6c0e:	3001      	adds	r0, #1
    6c10:	e7f6      	b.n	6c00 <memchr+0x4>
	...

00006c14 <_read_r>:
    6c14:	b570      	push	{r4, r5, r6, lr}
    6c16:	0005      	movs	r5, r0
    6c18:	0008      	movs	r0, r1
    6c1a:	0011      	movs	r1, r2
    6c1c:	2200      	movs	r2, #0
    6c1e:	4c06      	ldr	r4, [pc, #24]	; (6c38 <_read_r+0x24>)
    6c20:	6022      	str	r2, [r4, #0]
    6c22:	001a      	movs	r2, r3
    6c24:	f7fa fde8 	bl	17f8 <_read>
    6c28:	1c43      	adds	r3, r0, #1
    6c2a:	d103      	bne.n	6c34 <_read_r+0x20>
    6c2c:	6823      	ldr	r3, [r4, #0]
    6c2e:	2b00      	cmp	r3, #0
    6c30:	d000      	beq.n	6c34 <_read_r+0x20>
    6c32:	602b      	str	r3, [r5, #0]
    6c34:	bd70      	pop	{r4, r5, r6, pc}
    6c36:	46c0      	nop			; (mov r8, r8)
    6c38:	20001024 	.word	0x20001024
    6c3c:	42000400 	.word	0x42000400
    6c40:	42000800 	.word	0x42000800
    6c44:	42000c00 	.word	0x42000c00
    6c48:	42001000 	.word	0x42001000
    6c4c:	42001400 	.word	0x42001400
    6c50:	42001800 	.word	0x42001800
    6c54:	000010b2 	.word	0x000010b2
    6c58:	000010ae 	.word	0x000010ae
    6c5c:	000010ae 	.word	0x000010ae
    6c60:	000010e0 	.word	0x000010e0
    6c64:	000010e0 	.word	0x000010e0
    6c68:	000010ca 	.word	0x000010ca
    6c6c:	000010b8 	.word	0x000010b8
    6c70:	000010d0 	.word	0x000010d0
    6c74:	000012a4 	.word	0x000012a4
    6c78:	00001284 	.word	0x00001284
    6c7c:	00001284 	.word	0x00001284
    6c80:	000012da 	.word	0x000012da
    6c84:	00001296 	.word	0x00001296
    6c88:	000012b2 	.word	0x000012b2
    6c8c:	00001288 	.word	0x00001288
    6c90:	000012c0 	.word	0x000012c0
    6c94:	6e697355 	.word	0x6e697355
    6c98:	61682067 	.word	0x61682067
    6c9c:	6f636472 	.word	0x6f636472
    6ca0:	20646564 	.word	0x20646564
    6ca4:	756c6176 	.word	0x756c6176
    6ca8:	2e2e7365 	.word	0x2e2e7365
    6cac:	00000d2e 	.word	0x00000d2e
    6cb0:	20465550 	.word	0x20465550
    6cb4:	66757473 	.word	0x66757473
    6cb8:	6f6e2066 	.word	0x6f6e2066
    6cbc:	76612074 	.word	0x76612074
    6cc0:	616c6961 	.word	0x616c6961
    6cc4:	2e656c62 	.word	0x2e656c62
    6cc8:	0000000d 	.word	0x0000000d
    6ccc:	64616552 	.word	0x64616552
    6cd0:	6f742079 	.word	0x6f742079
    6cd4:	61727420 	.word	0x61727420
    6cd8:	696d736e 	.word	0x696d736e
    6cdc:	65722074 	.word	0x65722074
    6ce0:	6e6f7073 	.word	0x6e6f7073
    6ce4:	000d6573 	.word	0x000d6573
    6ce8:	70736552 	.word	0x70736552
    6cec:	65736e6f 	.word	0x65736e6f
    6cf0:	0000203a 	.word	0x0000203a
    6cf4:	78323025 	.word	0x78323025
    6cf8:	00000000 	.word	0x00000000
    6cfc:	7473614c 	.word	0x7473614c
    6d00:	72617020 	.word	0x72617020
    6d04:	00000d74 	.word	0x00000d74

00006d08 <PARAMETER_d>:
    6d08:	00000142 00000000 000e4000 00000000     B........@......
    6d18:	00000000 01fc0c8d 0085223c 020fcb38     ........<"..8...
    6d28:	0211995f 005e472f                       _.../G^.

00006d30 <FIXED_BASE_TABLE>:
    6d30:	0303e631 028d3ce9 02b5fe18 02fc7540     1....<......@u..
    6d40:	00287460 00f90353 0398bdf9 02cdee02     `t(.S...........
    6d50:	00de2e1a 000c3ba0 00937edc 03c3e62c     .....;...~..,...
    6d60:	0055590b 01e093c3 00740b7c 03a01366     .YU.....|.t.f...
    6d70:	0048e448 017a5b32 02e4ea55 004ffcf5     H.H.2[z.U.....O.
    6d80:	03da42bb 02bf32ea 017c6297 00dd55b2     .B...2...b|..U..
    6d90:	005948d1 0330684c 02268e4c 01f27a81     .HY.Lh0.L.&..z..
    6da0:	01c828d0 000caf2b 01188787 02e8063f     .(..+.......?...
    6db0:	012a83a8 02062374 00554612 009f9b77     ..*.t#...FU.w...
    6dc0:	00f30cf0 02049b0b 03e2e134 001baeea     ........4.......
    6dd0:	01faf900 01096984 03789006 004b869b     .....i....x...K.
    6de0:	0018f7cd 02556066 033c2684 036eb6dc     ....f`U..&<...n.
    6df0:	03bab39e 00448e05 012829b0 03ccda27     ......D..)(.'...
    6e00:	03db4bf2 032ca55e 006d911d 003c03ee     .K..^.,...m...<.
    6e10:	00d4f6f7 025019f2 0016eafb 0006c543     ......P.....C...
    6e20:	01afa125 03d15c4f 0364d2ea 01619228     %...O\....d.(.a.
    6e30:	00729630 01313ef2 01ddc7e7 0306961b     0.r..>1.........
    6e40:	03e2ff8a 004f41c7 019790ac 0188eb96     .....AO.........
    6e50:	00a42408 021910cc 004d3385 00dd7487     .$.......3M..t..
    6e60:	01a59927 02114fc5 03839663 0074df72     '....O..c...r.t.
    6e70:	013c110b 0018c964 030d8c9a 00457f92     ..<.d.........E.
    6e80:	00076bd4 02bff3d9 00679975 03a08766     .k......u.g.f...
    6e90:	0051f3b8 00249240 00965a73 016e5852     ..Q.@.$.sZ..RXn.
    6ea0:	03706d69 028a20a7 0028aac8 01f7a57b     imp.. ....(.{...
    6eb0:	007014ca 0200e41f 03a27c0f 00441ca9     ..p......|....D.
    6ec0:	03f7241e 028e2ae2 037f4e1a 02bf20ca     .$...*...N... ..
    6ed0:	0058f28c 025400c6 02be2e3e 0063ecad     ..X...T.>.....c.
    6ee0:	0018a13a 0034b6d1 02f15097 02632ace     :.....4..P...*c.
    6ef0:	01c49f54 024005f6 006dbe77 0048e8bc     T.....@.w.m...H.
    6f00:	03ddaa05 0200663b 016fc8eb 00637192     ....;f....o..qc.
    6f10:	01ed81fa 00b1c86f 016abc5e 03bb5a01     ....o...^.j..Z..
    6f20:	004ede70 00975810 03366d6d 01aa88f3     p.N..X..mm6.....
    6f30:	0064bc2a 004752fd 03734414 01e53ac7     *.d..RG..Ds..:..
    6f40:	00662318 034b211a 0011ddf7 02b1a34e     .#f..!K.....N...
    6f50:	00ec1bdc 02770261 02cdeac1 00465575     ....a.w.....uUF.
    6f60:	02638d2b 026117e0 018ce40b 0141e40a     +.c...a.......A.
    6f70:	00488940 01b4f131 02e4e940 032fbbed     @.H.1...@...../.
    6f80:	0034a226 0004f356 015b278b 03761d44     &.4.V....'[.D.v.
    6f90:	0058a457 0395364a 0056f25e 020c977e     W.X.J6..^.V.~...
    6fa0:	01307373 0099692d 01061f5d 00078fca     ss0.-i..].......
    6fb0:	02cc22a1 02cb7b5d 02bf63bb 0214f770     ."..]{...c..p...
    6fc0:	00117b28 01c2baa2 00dd9f2e 00a8f43f     ({..........?...
    6fd0:	009783aa 0073079e 0215796d 01e64ad6     ......s.my...J..
    6fe0:	02f92017 00520367 002e7772 03372916     . ..g.R.rw...)7.
    6ff0:	02620d59 0176dbe0 01adebdd 00258f17     Y.b...v.......%.
    7000:	0168391b 00ce3f58 013a4308 017e69cd     .9h.X?...C:..i~.
    7010:	00728592 03e85114 0303f413 02b51862     ..r..Q......b...
    7020:	039d08eb 0053259e 033b1a68 000c6a12     .....%S.h.;..j..
    7030:	031fcfe0 01987e81 001a4f1d 01c928a7     .....~...O...(..
    7040:	035505a3 02a6a2dd 006b7c65 0060185c     ..U.....e|k.\.`.
    7050:	006da9b4 0025c5f7 03c03498 012d373f     ..m...%..4..?7-.
    7060:	00606209 01fa7e8d 03a9be81 008a0a41     .b`..~......A...
    7070:	01bc9dc5 004a4fe0 029e80f0 0094ea7b     .....OJ.....{...
    7080:	017337bb 022f32c4 00419a92 029a039e     .7s..2/...A.....
    7090:	008ef99a 014bb843 02ba5ca0 0001b2d1     ....C.K..\......
    70a0:	03051231 02216134 01dd7a75 0083325e     1...4a!.uz..^2..
    70b0:	0054df1e 022f22dd 0241bf8f 01a0f91d     ..T.."/...A.....
    70c0:	025d7f7c 004e36e9 03747634 021c5d1a     |.]..6N.4vt..]..
    70d0:	03433d81 02ebbb84 003e5e31 0173baa3     .=C.....1^>...s.
    70e0:	02a025e5 037c6e4d 0365f3f9 004b852a     .%..Mn|...e.*.K.
    70f0:	00418b9e 02cd19c5 02f88e08 026cbf9b     ..A...........l.
    7100:	00283d71 005c180b 00e74b79 015c8b73     q=(...\.yK..s.\.
    7110:	03bc474b 0075acfc 00561876 001ddea3     KG....u.v.V.....
    7120:	00c4b8f4 01029c4d 000c54ac 02baee08     ....M....T......
    7130:	038a1f59 008bfb92 01401a86 006f357e     Y.........@.~5o.
    7140:	011e6971 000cc67b 03d40c59 03be476b     qi..{...Y...kG..
    7150:	00747c45 012f816e 0021aa47 02f7dde4     E|t.n./.G.!.....
    7160:	03b6cecf 005dcb27 021dd2ee 03711b3e     ....'.].....>.q.
    7170:	0249843f 027dc259 0051551f 01ed9bdc     ?.I.Y.}..UQ.....
    7180:	014d3dd8 0307fb54 02cc1cfe 00453455     .=M.T.......U4E.
    7190:	03cab70b 01dcf8e0 034dff24 0179d633     ........$.M.3.y.
    71a0:	00679be2 003eee29 01fb7ca5 00f66da1     ..g.).>..|...m..
    71b0:	02e35b70 003dc9e5 013fb75b 01432e90     p[....=.[.?...C.
    71c0:	0137f56a 016f16a1 001e6531 002c7213     j.7...o.1e...r,.
    71d0:	024090a0 0252e5ff 0323d094 0073c9d8     ..@...R...#...s.
    71e0:	03198c8f 00dee18c 00f333c6 02cfb505     .........3......
    71f0:	00534f84 02dd6902 004f9cb7 033afad3     .OS..i....O...:.
    7200:	0250737c 005ed57e 0257306e 03f8074a     |sP.~.^.n0W.J...
    7210:	013f95a6 03a8d11c 0073b63d 031c2bf3     ..?.....=.s..+..
    7220:	02dc15c3 018db39c 03927c68 002df8c6     ........h|....-.
    7230:	037797e4 02f0d259 01062661 032efafa     ..w.Y...a&......
    7240:	00501ae7 00959643 00aa237a 01d515b5     ..P.C...z#......
    7250:	00a04700 00037275 001bb928 0315e88c     .G..ur..(.......
    7260:	00fc6010 01c55555 00378b31 01a02cf1     .`..UU..1.7..,..
    7270:	00fe908a 01b29f88 02e1435f 005f0047     ........_C..G._.
    7280:	00402daa 011eb8ca 022bc4d2 009ea142     .-@.......+.B...
    7290:	000d0306 00a443f5 019766a2 03089b4e     .....C...f..N...
    72a0:	01acb5b6 006ec968 02a1d987 000b823f     ....h.n.....?...
    72b0:	03600de2 034fca35 005c64e1 0261bfb7     ..`.5.O..d\...a.
    72c0:	0345efbd 0334c157 00db75d4 0056392d     ..E.W.4..u..-9V.
    72d0:	0119155c 011e362f 02afde25 00b4f4cd     \.../6..%.......
    72e0:	00146d4f 014e15e8 02f802fe 010c09bf     Om....N.........
    72f0:	0269ab7c 002b185a 0152ab7b 0149ecfb     |.i.Z.+.{.R...I.
    7300:	01e80926 0051cc40 0067997e 007cc541     &...@.Q.~.g.A.|.
    7310:	03d3fd25 01a7ab58 031feb26 0036f800     %...X...&.....6.
    7320:	000456d9 000b8c90 0297bd03 00d902f1     .V..............
    7330:	004372e4 0350d898 0132aed1 03cbf914     .rC...P...2.....
    7340:	03eb2688 0075d25a 0255cbfe 01645d9d     .&..Z.u...U..]d.
    7350:	00b07794 01985ff1 0074db21 0166d0c9     .w..._..!.t...f.
    7360:	01ec8909 03b23705 01642105 001d543b     .....7...!d.;T..
    7370:	00428783 00a02d11 003ef19c 03f62db3     ..B..-....>..-..
    7380:	00352309 0068ae72 00cf5ab0 019f4378     .#5.r.h..Z..xC..
    7390:	00688f00 004ec067 03d05bb5 020db868     ..h.g.N..[..h...
    73a0:	02fe39d9 037fc893 0044fe1a 017efb4a     .9........D.J.~.
    73b0:	01af0f39 00150a29 01a0d685 002efec8     9...)...........
    73c0:	03194bca 0067027e 012062fe 034e54f3     .K..~.g..b ..TN.
    73d0:	0018cc07 01c0b9e0 03fc85f2 03cee5bd     ................
    73e0:	0159606a 00671aa7 00f7d1a2 030ceb8a     j`Y...g.........
    73f0:	023fee1c 0124de82 001b6f25 01babb83     ..?...$.%o......
    7400:	000f4599 01211515 00db5622 0074b956     .E....!."V..V.t.
    7410:	0296f869 025eb93a 010bdbdb 00627894     i...:.^......xb.
    7420:	001507ce 02b93b13 0393553e 00929796     .....;..>U......
    7430:	017c1658 006a8176 01a833ed 01014879     X.|.v.j..3..yH..
    7440:	036442e9 00cac917 003bdea5 03d52693     .Bd.......;..&..
    7450:	01da5d7f 00ed6bea 0122e9b5 0064b948     .]...k....".H.d.
    7460:	00e33ec7 014b4065 01f259db 0369558e     .>..e@K..Y...Ui.
    7470:	0071cf65 035a8138 01cec7f6 01c22ede     e.q.8.Z.........
    7480:	00edb18b 0012e4d1 01185517 026c3099     .........U...0l.
    7490:	03dd09d1 03495ed7 0077a011 02cd84e4     .....^I...w.....
    74a0:	037172ab 012d11fe 005478d2 0046844e     .rq...-..xT.N.F.
    74b0:	004220df 008e8c64 030997a4 031d1fa3     . B.d...........
    74c0:	005b3165 0335e22e 0197bab7 0195b1c6     e1[...5.........
    74d0:	015bf115 007802b5 015bd2de 00b7bd00     ..[...x...[.....
    74e0:	026ad85a 021e55c5 0017f2ab 0060c1e5     Z.j..U........`.
    74f0:	03db4d48 00e6a19c 0346f902 00122a7a     HM........F.z*..
    7500:	005bf766 026ef219 01acf5b7 0275342b     f.[...n.....+4u.
    7510:	0020fb00 03a28538 009a89ca 00bde975     .. .8.......u...
    7520:	03a43508 007041b4 00dab057 00044cd6     .5...Ap.W....L..
    7530:	002433b3 019bc349 003d398b 03cd4708     .3$.I....9=..G..
    7540:	01666680 0009691a 0027364e 001eae24     .ff..i..N6'.$...
    7550:	0036108c 035ad813 0196866d 00de2420     ..6...Z.m... $..
    7560:	00171308 0125dcfd 02b5a45c 031ca57c     ......%.\...|...
    7570:	02e25c13 0034b06c 0335abf2 03fa39c7     .\..l.4...5..9..
    7580:	00db9dca 00663551 00698331 03af075b     ....Q5f.1.i.[...
    7590:	01d9d990 02b6d628 03955674 00200950     ....(...tV..P. .
    75a0:	00dd9074 018ff0fb 013a2d4f 01c50ab0     t.......O-:.....
    75b0:	00747331 01319356 0000c201 038ba96b     1st.V.1.....k...
    75c0:	0380910d 002c20ff 026ac01a 025446b4     ..... ,...j..FT.
    75d0:	03cf6488 0086665f 004ee327 030bf8ea     .d.._f..'.N.....
    75e0:	03f9b9c3 026d715f 02d29b42 006b617f     ...._qm.B....ak.
    75f0:	012f7324 01b72871 00277491 03c2191a     $s/.q(...t'.....
    7600:	003c8269 0037e04b 00843132 0142cc24     i.<.K.7.21..$.B.
    7610:	013e4569 004e480b 027fe35e 03bcec26     iE>..HN.^...&...
    7620:	004b2c5f 037913f6 0031a501 00a407b9     _,K...y...1.....
    7630:	00a79250 025ab79f 00f29733 000ba7e0     P.....Z.3.......
    7640:	0274d8ea 022c8162 01adca7a 0204389b     ..t.b.,.z....8..
    7650:	0046f4c7 00a1128a 01c6b3a5 02811461     ..F.........a...
    7660:	00095256 0044db55 03f18d5c 02278692     VR..U.D.\.....'.
    7670:	006b27f8 00a90fcc 004d4f17 031cffad     .'k......OM.....
    7680:	0265d9ae 01aca33a 0164934e 00625477     ..e.:...N.d.wTb.
    7690:	0225136e 0148c3b0 0211dd85 0341e364     n.%...H.....d.A.
    76a0:	001c544d 023f63ba 03a65a7d 0138212f     MT...c?.}Z../!8.
    76b0:	03725277 00069af1 03e5c256 02f3d033     wRr.....V...3...
    76c0:	03595305 02492eee 0063ae90 03b7de06     .SY...I...c.....
    76d0:	00425de4 0043ee45 03ce7f00 0009780c     .]B.E.C......x..
    76e0:	03798871 02be39fa 03a37827 01b1dd5d     q.y..9..'x..]...
    76f0:	003ace8a 02e055ba 03c184cc 0292b79d     ..:..U..........
    7700:	01eaab3a 00561dc0 020d2673 0108b660     :.....V.s&..`...
    7710:	013487e4 020f82bd 006b85df 02d8526b     ..4.......k.kR..
    7720:	0146b077 002bd1f1 039455c5 0035ead8     w.F...+..U....5.
    7730:	03c79dd4 01bbdb0c 03de46da 01349653     .........F..S.4.
    7740:	005f2ea0 0027d5fa 00df4330 0331b910     .._...'.0C....1.
    7750:	00401ec0 0053b540 014ba5a3 03c6628f     ..@.@.S...K..b..
    7760:	00195810 00966ea5 004463bd 002acf9e     .X...n...cD...*.
    7770:	02252b3b 009ce32b 0187590d 00787117     ;+%.+....Y...qx.
    7780:	011fe211 02b86cfd 02463253 00fd4d6d     .....l..S2F.mM..
    7790:	00409e4b 025e49de 00db4436 0336a3a2     K.@..I^.6D....6.
    77a0:	000a7084 0019d2b1 02aadd90 017d010d     .p............}.
    77b0:	00b19283 00541464 000942a3 02828279     ....d.T..B..y...
    77c0:	0244c61d 01f9cc18 030f2a38 003afe96     ..D.....8*....:.
    77d0:	01230693 02006d24 010919f1 02e1897f     ..#.$m..........
    77e0:	0039e28d 01d44c8e 02d40d57 0280d9fa     ..9..L..W.......
    77f0:	0369ca6c 00145155 014d76d5 033e0407     l.i.UQ...vM...>.
    7800:	02c68d3c 006a30ad 005a0faa 0354ea8a     <....0j...Z...T.
    7810:	019b2132 007733cc 038fd59b 0051052c     2!...3w.....,.Q.
    7820:	01ae9ff5 03853799 030243be 02280733     .....7...C..3.(.
    7830:	00758611 016bf15e 039e4722 013d6089     ..u.^.k."G...`=.
    7840:	00b49876 0035ff02 037d1cf9 03384f63     v.....5...}.cO8.
    7850:	038f6cd3 023e56de 004f1de9 02dc41b4     .l...V>...O..A..
    7860:	01a28918 01d2951e 00f08fdb 0061ad9e     ..............a.
    7870:	00ebdb51 03fa9920 02cf3584 001cfe77     Q... ....5..w...
    7880:	005d52fe 01f336d5 03920fab 0296a9af     .R]..6..........
    7890:	032602c5 001dfa03 03819a19 01cf51ff     ..&..........Q..
    78a0:	000ed55f 0174d844 00697bf5 02399419     _...D.t..{i...9.
    78b0:	01201111 0259fded 0119ff38 00618c94     .. ...Y.8.....a.
    78c0:	008ef50c 025ffc7c 033c0f25 02e63764     ....|._.%.<.d7..
    78d0:	0007c935 00ded5f6 01632f1e 0148fbb7     5......../c...H.
    78e0:	001abc4c 001e9a0d 034cd4db 0338515f     L.........L._Q8.
    78f0:	00994879 028658b5 0028396c 017605c3     yH...X..l9(...v.
    7900:	02568f71 027b1f50 00f69314 001e570f     q.V.P.{......W..
    7910:	00935787 01a68e41 01cce2af 01dbf740     .W..A.......@...
    7920:	00591ee3 00bc8633 02d637e2 015d1f77     ..Y.3....7..w.].
    7930:	0146cbce 005464d6 029a86ae 03025ac7     ..F..dT......Z..
    7940:	02b28afb 012fd96d 006ce2df 029d3e08     ....m./...l..>..
    7950:	02a0a34b 026d03b3 007634b5 00638201     K.....m..4v...c.
    7960:	013d193d 021f2993 016af949 0034edb5     =.=..)..I.j...4.
    7970:	0050ddf7 00ad15a9 037d9f32 01f928d5     ..P.....2.}..(..
    7980:	0262f16c 00392080 03d5a4fb 027d4837     l.b.. 9.....7H}.
    7990:	03ba9ce9 021ee1a9 00323bbc 0003c789     .........;2.....
    79a0:	03e22a36 00055e13 02f7c880 0056ffdc     6*...^........V.
    79b0:	0324c72d 03c368c6 00c163af 01991830     -.$..h...c..0...
    79c0:	00700115 02c46a13 01edfd4e 03bc276f     ..p..j..N...o'..
    79d0:	03fadc1d 001c069b 014a3c36 01c64f28     ........6<J.(O..
    79e0:	01e3d8f4 012bc223 006d73e3 017d6634     ....#.+..sm.4f}.
    79f0:	02caf64c 01ec8634 00e2ddfc 005b4047     L...4.......G@[.
    7a00:	00a1cb1d 03eaedc7 02a46f34 032b2951     ........4o..Q)+.
    7a10:	00054abb 00eda660 0372b742 01ef1e8c     .J..`...B.r.....
    7a20:	02fe562f 006971ab 01db4eaf 00e155f7     /V...qi..N...U..
    7a30:	0367c413 0216c1e6 001e1585 03a26068     ..g.........h`..
    7a40:	01c11d33 02469d22 00cacf3a 0053b36d     3...".F.:...m.S.
    7a50:	00543d08 0148f05b 0314e011 00b17dcc     .=T.[.H......}..
    7a60:	004668e9 0117acd1 03cfaf90 0131abae     .hF...........1.
    7a70:	006a9c4e 0004037d 0390c68d 00463938     N.j.}.......89F.
    7a80:	0157568e 01569130 006b80cd 0329c032     .VW.0.V...k.2.).
    7a90:	01faa295 01ab2730 017fbba6 005cc547     ....0'......G.\.
    7aa0:	0014ac75 01439093 01cd8344 01f976cf     u.....C.D....v..
    7ab0:	003f0915 00588052 038ac6d4 02f8f62c     ..?.R.X.....,...
    7ac0:	03153994 0027a899 03c2a5ed 0340e7cb     .9....'.......@.
    7ad0:	03eec0ac 03775604 004b4044 00a75958     .....Vw.D@K.XY..
    7ae0:	034627a4 033a1c04 02f39c74 00242551     .'F...:.t...Q%$.
    7af0:	01f87f05 02be5ad4 01815d95 0083e027     .....Z...]..'...
    7b00:	00029888 039483c5 03d97dce 00b43b27     .........}..';..
    7b10:	0117d0d9 002ef607 034fb8b9 01af724f     ..........O.Or..
    7b20:	03b8acb6 02d21d5a 002b86c9 039867a1     ....Z.....+..g..
    7b30:	02f6b826 029aaf8e 006139bf 00441e70     &........9a.p.D.
    7b40:	00cc1289 0094c0cc 02992fdc 016a2d35     ........./..5-j.
    7b50:	0047d8d6 00ae74be 00edbe8c 019d58c0     ..G..t.......X..
    7b60:	00f30ef6 001ca869 0018f2a6 03ac5444     ....i.......DT..
    7b70:	03ff5699 019367d3 003da047 013aab59     .V...g..G.=.Y.:.
    7b80:	01c810cf 017ff361 0184b2e1 002fa911     ....a........./.
    7b90:	002f1cac 015f6843 00619a40 02e4ce97     ../.Ch_.@.a.....
    7ba0:	0048a219 015f0bc5 01040834 01dad423     ..H..._.4...#...
    7bb0:	01411a82 0073f889 027421b8 0354c4b1     ..A...s..!t...T.
    7bc0:	0222e1ba 006cda39 00419477 004e0dff     ..".9.l.w.A...N.
    7bd0:	01c69e79 031c28cc 0391519f 004b4564     y....(...Q..dEK.
    7be0:	03e52093 027c5aab 03ea9775 03735d7e     . ...Z|.u...~]s.
    7bf0:	00391b71 034ef798 0301a52a 0130d2a1     q.9...N.*.....0.
    7c00:	01515110 00023087 03aa1aa1 02b87ff3     .QQ..0..........
    7c10:	021e74b7 00cb5ccd 0064e26f 010b54b9     .t...\..o.d..T..
    7c20:	011c0e2f 02e158da 01bfabb3 00148cfa     /....X..........
    7c30:	01c2cc3d 01b5351e 003de375 02a34c55     =....5..u.=.UL..
    7c40:	0025d44e 02bb2c43 0322fbc9 0337fd82     N.%.C,...."...7.
    7c50:	000cf49f 002c2047 03dad260 00cf660d     ....G ,.`....f..
    7c60:	03b7d5bd 005e8ce0 00779431 02a583f2     ......^.1.w.....
    7c70:	01c75a5f 01bf2120 009ca889 003c7c41     _Z.. !......A|<.
    7c80:	01f03ad3 02ef7ebc 0370492e 0031a2d8     .:...~...Ip...1.
    7c90:	005d6103 02ee75d1 038a14ee 03636ca6     .a]..u.......lc.
    7ca0:	00d1dc68 0012404b 02667e4f 00f118c9     h...K@..O~f.....
    7cb0:	023b0be1 0245be6f 002bd261 01c80f89     ..;.o.E.a.+.....
    7cc0:	00fe32eb 00b4886e 02285e53 0074520d     .2..n...S^(..Rt.
    7cd0:	024cf97e 0171d140 02b021e1 0078794f     ~.L.@.q..!..Oyx.
    7ce0:	005cee74 0399cda1 0223782b 0062c8d0     t.\.....+x#...b.
    7cf0:	02587302 00625812 01c0e934 00d0dcc8     .sX..Xb.4.......
    7d00:	037a4431 01a31093 0060bbc7 0010e143     1Dz.......`.C...
    7d10:	01c7efcf 015b8aba 027c52a4 0037b8ea     ......[..R|...7.
    7d20:	000213ff 01bb1971 0045c8d9 00a3fdde     ....q.....E.....
    7d30:	0074a088 02f607a3 02dc6536 00706bed     ..t.....6e...kp.
    7d40:	01c45872 0017e866 024059cf 02e63814     rX..f....Y@..8..
    7d50:	02f09ace 03125245 0068552a 031b3c47     ....ER..*Uh.G<..
    7d60:	00a5c6eb 01b704cd 02f37788 0068442e     .........w...Dh.
    7d70:	02867595 00a6e303 0247a196 034d8d7e     .u........G.~.M.
    7d80:	006a6955 02e393ad 02d1783c 010c46fa     Uij.....<x...F..
    7d90:	03d3f3c1 0066dd3e 01dc7df1 02deaf3f     ....>.f..}..?...
    7da0:	00f9cbb0 01d46c2f 0014eb5b 02fd411d     ..../l..[....A..
    7db0:	01e7e728 0200a1cf 01cfffc1 005c496f     (...........oI\.
    7dc0:	01426d70 01236155 018a9496 01a88c8b     pmB.Ua#.........
    7dd0:	0046c101 019b6d4f 03f6e1c3 03633b57     ..F.Om......W;c.
    7de0:	01482776 00609eb6 02dc82c5 03e459af     v'H...`......Y..
    7df0:	02f27e70 02d722be 00772fb5 00227a20     p~...".../w. z".
    7e00:	00a5366c 03c8d79a 010444b6 007f75b1     l6.......D...u..
    7e10:	02070020 0071fe23 017b198d 02ab1208      ...#.q...{.....
    7e20:	005953d0 015f33ff 0094faf8 00c45e28     .SY..3_.....(^..
    7e30:	03047985 00267d1d 019e2246 013d42ae     .y...}&.F"...B=.
    7e40:	01495be6 01720bf9 004eaaab 0260bed0     .[I...r...N...`.
    7e50:	0356b01f 01b4d927 01b79aa8 0067d378     ..V.'.......x.g.
    7e60:	036e2945 0258afc3 02a9ba71 01128d7b     E)n...X.q...{...
    7e70:	0063d938 026640ac 008a31f4 035a1b34     8.c..@f..1..4.Z.
    7e80:	034baca3 00169c38 0039dc22 025caccd     ..K.8...".9...\.
    7e90:	01e144b7 015f36a8 00714784 001d58c7     .D...6_..Gq..X..
    7ea0:	01b8497b 014f1522 025b9e3f 00669d87     {I..".O.?.[...f.
    7eb0:	0244a07f 03746aaa 03ecf750 02d56bae     ..D..jt.P....k..
    7ec0:	00327c62 014fbd25 02e3a56d 0364e006     b|2.%.O.m.....d.
    7ed0:	017407ac 002ab3f9 00d5e196 03942030     ..t...*.....0 ..
    7ee0:	02725fcb 035d695f 002a1b9b 00139b5d     ._r._i]...*.]...
    7ef0:	02cad9d6 03a731d2 02be126d 00751cf4     .....1..m.....u.
    7f00:	037d00a5 029f4b8c 024bc164 02932e0e     ..}..K..d.K.....
    7f10:	0000cee3 01be28f9 02380d9b 00502349     .....(....8.I#P.
    7f20:	0245234a 00053d89 02b0fb69 01975932     J#E..=..i...2Y..
    7f30:	00e74016 0088235a 004a9913 013f915d     .@..Z#....J.].?.
    7f40:	012ef52f 022bbba4 03e45c84 001d34b0     /.....+..\...4..
    7f50:	01e8a9f3 005371ca 00b605d1 00f754cd     .....qS......T..
    7f60:	0008e7a4 02f0f3e8 02e3a48c 00f6228d     ............."..
    7f70:	006e0099 005cb7be 02508f23 00b1e1e0     ..n...\.#.P.....
    7f80:	021b29af 0333df8e 00336ae7 01d194be     .)....3..j3.....
    7f90:	00b53b8b 028727fe 006cae29 00573d2e     .;...'..).l..=W.
    7fa0:	03b2ea36 00ba8cd8 00243333 00dd6c7d     6.......33$.}l..
    7fb0:	00200bc1 02b3260d 011f2301 01c5e65c     .. ..&...#..\...
    7fc0:	03294e65 0042021f 03b19946 039b3d26     eN)...B.F...&=..
    7fd0:	02d2c2f7 01a88c65 00311fba 03e0d70d     ....e.....1.....
    7fe0:	0304ed8a 030dcc30 00509c46 0061eeac     ....0...F.P...a.
    7ff0:	017d35d4 009a6596 021d7885 032f9af4     .5}..e...x..../.
    8000:	0070169b 0129a510 006cb42b 0394da0f     ..p...).+.l.....
    8010:	0051cb06 002ade53 009873e7 00c83706     ..Q.S.*..s...7..
    8020:	01b3811e 0253a173 002d2a17 02f621e3     ....s.S..*-..!..
    8030:	023114e9 036f7a0a 02d51497 004b06d5     ..1..zo.......K.
    8040:	0048ec1c 02459a46 00730f42 0155755e     ..H.F.E.B.s.^uU.
    8050:	001d4216 010a5b4e 018369ca 0165ff8c     .B..N[...i....e.
    8060:	00e687cd 0066dd9f 03b474a0 030a764d     ......f..t..Mv..
    8070:	01ee455a 01e928da 00429196 02e6bc89     ZE...(....B.....
    8080:	036b2a84 00310918 02401947 003d46e8     .*k...1.G.@..F=.
    8090:	000e90b1 01550c28 00a39af0 03d5b697     ....(.U.........
    80a0:	0016f62b 008c51e6 00870cd2 03cd51a0     +....Q.......Q..
    80b0:	037d8fee 000d64da 01bfea7c 023b3967     ..}..d..|...g9;.
    80c0:	0203a091 035f75d0 003b3319 039fa90c     .....u_..3;.....
    80d0:	021516e2 019e61d8 03724231 0013b792     .....a..1Br.....
    80e0:	003d0979 0364e6a7 031270a2 02fadd2f     y.=...d..p../...
    80f0:	00321a5d 026d8470 0251fffd 03c995e5     ].2.p.m...Q.....
    8100:	032bf49a 0022ec9e 03b10536 01f2a0a4     ..+...".6.......
    8110:	01846de1 03015677 00593f56 01485023     .m..wV..V?Y.#PH.
    8120:	020dccdd 00b1c114 03f7dd12 0023c6b0     ..............#.
    8130:	0227804f 02411162 02a70377 02589c9b     O.'.b.A.w.....X.
    8140:	00573e91 0235ac70 006c93cc 0385e35e     .>W.p.5...l.^...
    8150:	008127d3 0051ba08 00d47194 01246058     .'....Q..q..X`$.
    8160:	021dd4bc 0078cc23 005d29a2 026e4e33     ....#.x..)].3Nn.
    8170:	016252cf 010fb7e1 00bd3cc7 0050dbbd     .Rb......<....P.
    8180:	01a9c9de 0122f48d 00710ef2 03486d8d     ......"...q..mH.
    8190:	003418ad 02363bd2 01c8ce94 0099f96c     ..4..;6.....l...
    81a0:	02b66823 007c8414 00e6c05c 02b2d295     #h....|.\.......
    81b0:	0179abc6 0068464d 00572902 0308fa1c     ..y.MFh..)W.....
    81c0:	01f0f802 02a73062 03e785f0 003d0b4f     ....b0......O.=.
    81d0:	0190317f 01fa1d56 03e48d50 02cef1ef     .1..V...P.......
    81e0:	0075b27b 00e651f5 0203cb1b 02e4644a     {.u..Q......Jd..
    81f0:	03f06dc1 007b9795 01f9a640 01d6f7bf     .m....{.@.......
    8200:	03aa89de 002aeaff 0075ade5 030889a0     ......*...u.....
    8210:	02ac45a1 02c6cce0 03f37567 006f3ddc     .E......gu...=o.
    8220:	00de0674 01a0cd62 020736e3 00a7a8a2     t...b....6......
    8230:	00291d11 00884d61 02394e19 00d76f8b     ..).aM...N9..o..
    8240:	03c6ba15 00706ef8 03753069 02a31960     .....np.i0u.`...
    8250:	03966137 00731883 0001e45f 0376c7ba     7a....s._.....v.
    8260:	0387fe0b 01c54e28 02b38fa2 0036d29e     ....(N........6.
    8270:	030b49cb 01e7c55f 03937833 0278aeb2     .I.._...3x....x.
    8280:	0065e9c3 030cda3e 008f1141 02de59b3     ..e.>...A....Y..
    8290:	00c6adf8 0016e02f 035122b7 033cd198     ..../...."Q...<.
    82a0:	01e0953b 001f5b0b 001fd7e2 021e57ac     ;....[.......W..
    82b0:	03d7e53a 034df3a5 03a343c2 000cba06     :.....M..C......
    82c0:	03a9c392 011030e1 0180070b 010f7b87     .....0.......{..
    82d0:	001e7dc1 0239912b 022e9b5c 02d14549     .}..+.9.\...IE..
    82e0:	02805c60 00332870 032d794c 00c1bf19     `\..p(3.Ly-.....
    82f0:	02b4e6be 0044916c 002c2ce2 012ba79f     ....l.D..,,...+.
    8300:	02dc8b23 0327a109 03ea717d 00268520     #.....'.}q.. .&.
    8310:	00fe78ee 02cc0149 02698515 03b32eba     .x..I.....i.....
    8320:	00736201 0210bf78 022b044c 01843460     .bs.x...L.+.`4..
    8330:	02467110 0032d8fd 00b8f2d8 015f86c1     .qF...2......._.
    8340:	03459c95 03de6371 00775437 03a417f5     ..E.qc..7Tw.....
    8350:	003d5616 01304120 017cf9eb 002e00ec     .V=. A0...|.....
    8360:	03446288 01cf57ca 036e4fc8 024d8921     .bD..W...On.!.M.
    8370:	0032270a 00789b22 01a91f02 016bec64     .'2.".x.....d.k.
    8380:	03fa4958 002370d9 01e671c4 02be8d86     XI...p#..q......
    8390:	01fb2430 033ab07d 00156468 02417635     0$..}.:.hd..5vA.
    83a0:	0137b0bc 0258f3b8 02405f03 0031140e     ..7...X.._@...1.
    83b0:	037443fa 017e2332 024ac5c8 01759361     .Ct.2#~...J.a.u.
    83c0:	000da75f 01b0fb84 03fd121c 036c3295     _............2l.
    83d0:	002eb4cc 001b79e1 012977b3 03e650b7     .....y...w)..P..
    83e0:	01a23ffd 02343e68 004c1b19 0112864e     .?..h>4...L.N...
    83f0:	01e28930 008d0ba7 025fc9b5 0074f668     0........._.h.t.
    8400:	027ab611 01701ba1 038b93fd 00cffde1     ..z...p.........
    8410:	004b98ce 01cb9165 02d3739d 01163f7d     ..K.e....s..}?..
    8420:	028267b1 0011665a 027118b9 0263c5ab     .g..Zf....q...c.
    8430:	0109a2a4 036ed3ad 00265ec3 00ce2c86     ......n..^&..,..
    8440:	0108c19a 033853da 02aacb8c 0036e62b     .....S8.....+.6.
    8450:	01ab4478 001f529e 00875995 03f1047a     xD...R...Y..z...
    8460:	0025bfb2 03022ce1 0307b24c 00466d7a     ..%..,..L...zmF.
    8470:	02b80cf4 0023d341 0162bc00 016d197a     ....A.#...b.z.m.
    8480:	03180d29 006e8b5c 0023d021 03922d4d     )...\.n.!.#.M-..
    8490:	03335ebf 01514a03 012378c0 001e7671     .^3..JQ..x#.qv..
    84a0:	0094efab 006acdaa 01e58c24 03cd0ff0     ......j.$.......
    84b0:	001c9fc2 03d27a87 02e5958a 03015ca3     .....z.......\..
    84c0:	008a1775 0053623e 00219420 01047c07     u...>bS. .!..|..
    84d0:	002f9557 01dc25ad 00192655 0323592f     W./..%..U&../Y#.
    84e0:	004b6506 01c06d33 02870f14 0030a9a9     .eK.3m........0.
    84f0:	026e8f79 026c2cfa 03cb23d8 0077171d     y.n..,l..#....w.
    8500:	007eab75 02df6e36 026c61b9 01694c0a     u.~.6n...al..Li.
    8510:	0160fc55 004f844d 0393dffa 000608c9     U.`.M.O.........
    8520:	0054d419 002daf4e 002add44 01df6e32     ..T.N.-.D.*.2n..
    8530:	01203c4c 02417d55 0211ab8f 00318ce3     L< .U}A.......1.
    8540:	020984f4 01418b46 039f6056 018f4aff     ....F.A.V`...J..
    8550:	006ebaec 01e79790 01d7f9ca 024e7770     ..n.........pwN.
    8560:	01189322 000dd943 03a9b062 03c478b7     "...C...b....x..
    8570:	03364bf8 00957ba2 001b17d8 032c6344     .K6..{......Dc,.
    8580:	0085433d 028dc62c 02034207 00281068     =C..,....B..h.(.
    8590:	03ec91c1 012bc377 01f2ef4a 01b25df8     ....w.+.J....]..
    85a0:	001a8f0e 00b9316f 01e8e9ce 022ec72a     ....o1......*...
    85b0:	01ca3138 00323716 03a4af3b 001a4196     81...72.;....A..
    85c0:	01367c14 00922447 00081514 00b6c337     .|6.G$......7...
    85d0:	0352beaa 000e751b 026d44d0 0050e77a     ..R..u...Dm.z.P.
    85e0:	02822548 000146ca 01cfc46c 0390697b     H%...F..l...{i..
    85f0:	00024886 01cac17f 02c3be90 01675a06     .H...........Zg.
    8600:	02c06e71 00336a30 02097626 02cb0432     qn..0j3.&v..2...
    8610:	0098174f 02a923a4 002b204c 01a17b74     O....#..L +.t{..
    8620:	00b254ae 0303b690 02dae488 0039c2e9     .T............9.
    8630:	00597419 005ae6cf 01f76b92 000993c5     .tY...Z..k......
    8640:	006d9293 02ae1427 00a5f57b 013077b1     ..m.'...{....w0.
    8650:	02b7f86f 000f0744 03e6a89d 015f8996     o...D........._.
    8660:	02c1033b 0394ccd5 00282fa2 01dc772c     ;......../(.,w..
    8670:	00e65718 00ff53a0 017a24f7 004f5d8f     .W...S...$z..]O.
    8680:	0048023f 03249fbf 005ae4bf 01075a9a     ?.H...$...Z..Z..
    8690:	00596f22 0029b8a2 00f82bfb 038423cb     "oY...)..+...#..
    86a0:	00344194 0031018e 00575626 0003fa51     .A4...1.&VW.Q...
    86b0:	020112fd 01c1260b 001241d8 026781a7     .....&...A....g.
    86c0:	03559993 022ce970 02743cf7 001b05f4     ..U.p.,..<t.....
    86d0:	03717e66 013ff7d8 00e98a99 029daea2     f~q...?.........
    86e0:	00416374 03f1579a 020b3b54 02a4b8b0     tcA..W..T;......
    86f0:	03ead74a 0056781d 0065b318 0077bf46     J....xV...e.F.w.
    8700:	001f7815 02103582 0064669b 0338e14e     .x...5...fd.N.8.
    8710:	01bd2ed7 00b40e43 01042a5d 0043d438     ....C...]*..8.C.
    8720:	0266be02 00b3acf5 0028e583 02786b86     ..f.......(..kx.
    8730:	0006347d 01e3ea86 0251c6ce 01ae4697     }4........Q..F..
    8740:	01872d2d 002cf2cf 025a6ee4 02ca7ab6     --....,..nZ..z..
    8750:	01768b7a 02ca6b29 0012e75c 030d1ffc     z.v.)k..\.......
    8760:	02c44274 00e5ae65 0335acc8 0071f9be     tB..e.....5...q.
    8770:	0247eed9 00a24099 0058fdc8 00143295     ..G..@....X..2..
    8780:	0031d62d 0254c1e5 02efd48e 01491ea2     -.1...T.......I.
    8790:	02e78fb9 00602bf0 0380ad4b 029cd888     .....+`.K.......
    87a0:	01f5825a 00c9c77d 002b6b1e 02a0470d     Z...}....k+..G..
    87b0:	017bf61a 0354bdbc 0092e310 0005353c     ..{...T.....<5..
    87c0:	01e06bca 01f6cf3d 025f7a3c 023cad3a     .k..=...<z_.:.<.
    87d0:	00288a1c 02ce7ca1 014bd784 03c7dd61     ..(..|....K.a...
    87e0:	02d0d99c 0059d4c1 021fcb95 00955394     ......Y......S..
    87f0:	014401e0 003c902b 0066d398 01a4d9d1     ..D.+.<...f.....
    8800:	005bdace 02f62abf 0072a530 007fea35     ..[..*..0.r.5...
    8810:	009163ba 00adbcce 015ea3d6 013cb9e2     .c........^...<.
    8820:	000fc6b4 01a7c669 019100f3 03193d5c     ....i.......\=..
    8830:	00243980 002e4099 01fa4c2f 0303ebc5     .9$..@../L......
    8840:	036399b5 0276384a 0046295c 025b331b     ..c.J8v.\)F..3[.
    8850:	012b758e 018795ce 01cdb131 005fa7bd     .u+.....1....._.
    8860:	03d1aef2 00d1c511 0173947b 007088c9     ........{.s...p.
    8870:	0028004c 023c5299 0210df66 027e8d58     L.(..R<.f...X.~.
    8880:	00604b34 002ab19c 00037802 01c03da0     4K`...*..x...=..
    8890:	02b363ae 02002d08 001ad163 02bc2139     .c...-..c...9!..
    88a0:	01fbcdbe 03d1d45b 03fc8772 0044bcde     ....[...r.....D.
    88b0:	01e11c7b 01b6885c 00c1441c 01e7df13     {...\....D......
    88c0:	002c35ee 01c13849 00a509d6 0050a485     .5,.I8........P.
    88d0:	01bc42f8 006492d2 0050f0d9 0153a623     .B....d...P.#.S.
    88e0:	0181ba6f 02db7588 006a2db2 025e57a3     o....u...-j..W^.
    88f0:	02601aca 03d20f7d 036cee94 0057526b     ..`.}.....l.kRW.
    8900:	0100e650 039b2c7d 0334517c 02c10be3     P...},..|Q4.....
    8910:	0005d841 018de970 00029b1a 00b8eaa8     A...p...........
    8920:	0166af8b 0004f4b5 019ce49d 0037f5c9     ..f...........7.
    8930:	03935c05 02f7e536 00213839 01306204     .\..6...98!..b0.
    8940:	00496195 0305ab37 022c67e5 007d323b     .aI.7....g,.;2}.
    8950:	02b6c618 01140ac5 0195b26d 01a6aa25     ........m...%...
    8960:	00797170 01b41872 01f038db 021d0f86     pqy.r....8......
    8970:	0361b1db 0013d601 031b7383 0322c34c     ..a......s..L.".
    8980:	000752df 03cf90ba 00185472 0310eba0     .R......rT......
    8990:	0344f9ca 01b9505b 01d243de 00519a38     ..D.[P...C..8.Q.
    89a0:	03ad2500 02706cb4 037338d0 0174b3c3     .%...lp..8s...t.
    89b0:	00045da4 0062426c 0060655a 01b09640     .]..lBb.Ze`.@...
    89c0:	03d66ff8 00728d57 01a2c585 0267e1e3     .o..W.r.......g.
    89d0:	00e10f9a 00798771 004fc483 00394fe0     ....q.y...O..O9.
    89e0:	0180b315 028ae6dc 01ad9fa7 00048456     ............V...
    89f0:	0293809b 033c11d2 022bbc5f 00e963cf     ......<._.+..c..
    8a00:	0071c0c2 02fe6c43 003eaf8d 000a7b40     ..q.Cl....>.@{..
    8a10:	00fabb93 00614c2f 00e1c6c1 002a6034     ..../La.....4`*.
    8a20:	01dcc761 01f22221 001ce819 02c2cb2b     a...!"......+...
    8a30:	038727ce 0341eead 01eebcbc 00471ad0     .'....A.......G.
    8a40:	0301121b 02a0df1a 00b59d67 00a07d67     ........g...g}..
    8a50:	002a8e64 033262ca 01c0790b 0058052e     d.*..b2..y....X.
    8a60:	01f7b394 0019e0a2 03bda6ac 024705e9     ..............G.
    8a70:	031f2b56 00c46e77 0043484c 03ae49ea     V+..wn..LHC..I..
    8a80:	00555526 03ae5a68 03768897 0043a2c5     &UU.hZ....v...C.
    8a90:	01700eef 03a64abb 00856fa5 01588e46     ..p..J...o..F.X.
    8aa0:	0058911f 008c4da9 02e06879 003bd648     ..X..M..yh..H.;.
    8ab0:	0032f743 0066e6e3 029d266b 02882705     C.2...f.k&...'..
    8ac0:	03685f3b 0188c111 0020f7a8 020c3d2e     ;_h....... ..=..
    8ad0:	02d6aa86 011f1d1b 0210f444 00366c29     ........D...)l6.
    8ae0:	01cc9013 01e2d90b 023fb06c 01938427     ........l.?.'...
    8af0:	0027484a 00677464 03ab2f29 00cc18f8     JH'.dtg.)/......
    8b00:	006c7709 000b6cb3 018f0fa0 027213e2     .wl..l........r.
    8b10:	032a2df6 01d12483 002dd426 014c5c69     .-*..$..&.-.i\L.
    8b20:	004a865f 018d6c09 01fdaa63 00489ade     _.J..l..c.....H.
    8b30:	03203e28 01da7d1f 02c97458 008ff016     (> ..}..Xt......
    8b40:	00124f41 016d7d67 024dbd2b 00ff83bb     AO..g}m.+.M.....
    8b50:	03fb53c0 00330954 02f90eaf 03994011     .S..T.3......@..
    8b60:	01ebdc2c 018b53e7 007bf947 006dfb83     ,....S..G.{...m.
    8b70:	00c5ca96 03d962e9 018ad044 003c7a60     .....b..D...`z<.
    8b80:	007f0d93 02c0e5c5 010345dd 01bf1a0e     .........E......
    8b90:	0008e359 03639bfa 0399ffd9 00232374     Y.....c.....t##.
    8ba0:	00846622 0019021c 01d55efa 03d7413f     "f.......^..?A..
    8bb0:	03aa3002 0381e786 0005b4c6 0174c84c     .0..........L.t.
    8bc0:	01e3a8eb 0277de56 0209a962 001c42f7     ....V.w.b....B..
    8bd0:	02cafacd 0119a2f4 0261ce05 034fb790     ..........a...O.
    8be0:	00237668 00aebb32 011a98dd 00ef4edf     hv#.2........N..
    8bf0:	0164c73c 0031ec8c 035b5825 030ba570     <.d...1.%X[.p...
    8c00:	01603955 03a9a096 0027d8b0 027d1ec0     U9`.......'...}.
    8c10:	0225db90 03d13b7a 0301c54a 006b6cc5     ..%.z;..J....lk.
    8c20:	00b244cd 0223c328 0189703d 026a33fb     .D..(.#.=p...3j.
    8c30:	00001cae 0293a7fd 012ce87d 02c96a84     ........}.,..j..
    8c40:	032deaf7 00676c9a 00cdbd33 02daf578     ..-..lg.3...x...
    8c50:	019b8631 03703377 0029f289 02fb2eff     1...w3p...).....
    8c60:	01f55d4d 03059094 019438fa 001eb2ce     M].......8......
    8c70:	028bf405 026ce903 02e8d213 03ece7d2     ......l.........
    8c80:	004165ed 0270d6a6 007b699e 004f6e06     .eA...p..i{..nO.
    8c90:	00ca3242 002e3cc0 0056063f 020ca7b4     B2...<..?.V.....
    8ca0:	033d51ef 033927a2 006d4d01 0256d34b     .Q=..'9..Mm.K.V.
    8cb0:	00324bc5 029e0011 01385c20 006dad1c     .K2..... \8...m.
    8cc0:	00b477be 0315b164 02935584 002b5497     .w..d....U...T+.
    8cd0:	00597e5f 02b7d36d 02099363 0029e600     _~Y.m...c.....).
    8ce0:	01526672 003f5867 01546a1d 03aa277d     rfR.gX?..jT.}'..
    8cf0:	003643d7 01f668fd 0041754f 02f879a7     .C6..h..OuA..y..
    8d00:	01e5a08b 028723b0 02566098 001ab277     .....#...`V.w...
    8d10:	03ef7923 01f27c2e 02097dc3 0063b0d6     #y...|...}....c.
    8d20:	00256ec8 01dd5846 00b69702 0145c4a7     .n%.FX........E.
    8d30:	0187b72b 0051df6c 035ce819 0093f373     +...l.Q...\.s...
    8d40:	009f1aef 02566b9a 000ba6bb 017b3a9e     .....kV......:{.
    8d50:	01ef5969 00e4ae66 02468a2a 0071ffd5     iY..f...*.F...q.
    8d60:	03a7fadf 00c97e94 00f1306c 0261acb7     .....~..l0....a.
    8d70:	006667f2 012a09e4 01d469b5 0074a3ef     .gf...*..i....t.
    8d80:	010902e3 00517a10 008183f5 03377f63     .....zQ.....c.7.
    8d90:	007f1d08 031c6e05 0059237c 00395933     .....n..|#Y.3Y9.
    8da0:	0253f462 02f67fff 0164b443 00538acc     b.S.....C.d...S.
    8db0:	03f0eb1d 00738e1b 03e65ac5 02045317     ......s..Z...S..
    8dc0:	0069d42b 01bfe8b9 03b68e65 02341a17     +.i.....e.....4.
    8dd0:	023f7c16 005dc6d9 00e8be78 00134dd7     .|?...].x....M..
    8de0:	003caf23 0087b312 0031b585 0380222a     #.<.......1.*"..
    8df0:	00b60501 015c904d 00af8fb6 003dc18b     ....M.\.......=.
    8e00:	02d70d2b 03858e7c 038d0a48 029af03c     +...|...H...<...
    8e10:	004ffd54 02b7143b 00f196e9 03a9d8ae     T.O.;...........
    8e20:	007e45e3 00482eb4 03ad4f1d 02e2d3a1     .E~...H..O......
    8e30:	02b40240 01080167 006d8532 00275132     @...g...2.m.2Q'.
    8e40:	017ddf91 02349c13 01a836ab 00626107     ..}...4..6...ab.
    8e50:	0042765c 005af6ce 03d92353 02e8ea2f     \vB...Z.S#../...
    8e60:	00246165 01177a75 035dd2f5 023b61c2     ea$.uz....]..a;.
    8e70:	0264591f 00045a2f 014671a8 02d648d6     .Yd./Z...qF..H..
    8e80:	00db5ed3 03696b35 000514fa 00a0f50f     .^..5ki.........
    8e90:	025ff0d6 02a91e82 0373ca54 007cd2ba     .._.....T.s...|.
    8ea0:	029ac266 01144c3a 009790da 00f07853     f...:L......Sx..
    8eb0:	0026a0d4 0293a390 00adca7f 03ccbbb6     ..&.............
    8ec0:	02bfdfd9 00360357 007c59e8 0120d747     ....W.6..Y|.G. .
    8ed0:	0070b3ad 03f61be9 00570daf 03a3bd96     ..p.......W.....
    8ee0:	012f9a63 02ffcd7c 03b0ab5d 0017e4bd     c./.|...].......
    8ef0:	02d7dc51 0393aa7a 0118e43c 03835929     Q...z...<...)Y..
    8f00:	0058ba7a 00680555 01331f99 030b8e01     z.X.U.h...3.....
    8f10:	014f3898 0003abc9 0399be57 0218831d     .8O.....W.......
    8f20:	02952a31 028ba136 002b258f 023b2ffd     1*..6....%+../;.
    8f30:	023f7141 02556dd8 035e68ea 0017371d     Aq?..mU..h^..7..
    8f40:	00981299 02e0dd5e 02b2d927 00407642     ....^...'...Bv@.
    8f50:	00554552 00e54bd0 00c18863 02235b45     REU..K..c...E[#.
    8f60:	0197ff6d 0059109b 0180a515 00f83128     m.....Y.....(1..
    8f70:	004f4866 03907198 0041467f 00b73878     fHO..q...FA.x8..
    8f80:	0306a937 03517ae2 000b1b01 0019d3cb     7....zQ.........
    8f90:	026745f1 011f25fa 0043caa1 0068c72b     .Eg..%....C.+.h.
    8fa0:	0070dac7 02f87dfa 004fb09a 03b25b92     ..p..}....O..[..
    8fb0:	03a7d839 0067f228 038df3df 0166e33d     9...(.g.....=.f.
    8fc0:	02fa3bfb 024a9095 00366877 03177544     .;....J.wh6.Du..
    8fd0:	039707c8 01c90e1b 006d912c 00786a9e     ........,.m..jx.
    8fe0:	03ca7f5b 00bd1ce4 02b59417 02d2e2ab     [...............
    8ff0:	0062ae5b 02631b6f 02710c7e 00c6dbcd     [.b.o.c.~.q.....
    9000:	02cbb727 001fbe20 000ee085 0360a7ef     '... .........`.
    9010:	01d595fd 0056b717 00241dd3 01f7dbb6     ......V...$.....
    9020:	01a23589 012d4b4b 03fb96fb 00595a82     .5..KK-......ZY.
    9030:	0011880d 014eb833 02f76696 03fbf100     ....3.N..f......
    9040:	002b9e85 03770a81 01256d41 00731bb2     ..+...w.Am%...s.
    9050:	015d7ecd 0005d20c 02485ab2 03988d0d     .~]......ZH.....
    9060:	03ebb9d9 025997cf 0027012a 00c04ff7     ......Y.*.'..O..
    9070:	033fbd21 03fbe586 003303aa 0044a586     !.?.......3...D.
    9080:	03532e80 03f9b8bc 020fe6fb 02eabcc8     ..S.............
    9090:	0005abea 03809678 03487cb2 03ed21be     ....x....|H..!..
    90a0:	004adfab 002aa621 0210190b 0220df3d     ..J.!.*.....=. .
    90b0:	018f8e29 02f3be45 001ec8fb 00f96f6b     )...E.......ko..
    90c0:	03a6cea9 00ef31ef 00a81a2c 006a3b84     .....1..,....;j.
    90d0:	03f827f7 0352df35 01c9792d 02efcff4     .'..5.R.-y......
    90e0:	00605175 001f6d98 02ed9067 03310139     uQ`..m..g...9.1.
    90f0:	03a65e36 003a3ab2 01d5dd0b 02565072     6^...::.....rPV.
    9100:	03ce0c5c 018096ca 0034c6c7 01bb8126     \.........4.&...
    9110:	01045692 036190d4 03ac476b 007622cb     .V....a.kG..."v.
    9120:	024ef5ad 02ffe4c5 0345d785 01f4d572     ..N.......E.r...
    9130:	00719164 00ce6e5c 03c95713 02e3e117     d.q.\n...W......
    9140:	022c3a6a 00581b44 02225414 013cf2cd     j:,.D.X..T"...<.
    9150:	0068554a 0314e6f1 00790180 03c6b96f     JUh.......y.o...
    9160:	019010ed 0010b470 016ce8b0 0043cccf     ....p.....l...C.
    9170:	014c3731 02fcebf0 025741df 00c6555c     17L......AW.\U..
    9180:	001c368f 01070b5a 030bb4ed 03f6000b     .6..Z...........
    9190:	03758ecd 000332d8 009bd8f0 012c6423     ..u..2......#d,.
    91a0:	039ce074 018a36b2 002d258e 01c61e14     t....6...%-.....
    91b0:	016d2f6e 02996bba 00a568d3 000bca12     n/m..k...h......
    91c0:	032175d4 0321319b 03e78059 010e1e42     .u!..1!.Y...B...
    91d0:	001a3bed 01abb5b0 0253d5df 033e4df3     .;........S..M>.
    91e0:	0398ecf0 00304777 002c5a6a 00a753fa     ....wG0.jZ,..S..
    91f0:	037a459a 0347a239 0072e421 03312959     .Ez.9.G.!.r.Y)1.
    9200:	0188c0c4 03bb869e 02b633ca 002da03a     .........3..:.-.
    9210:	03ecb0b6 02361823 003a6285 039e9009     ....#.6..b:.....
    9220:	00343099 029a8f63 026d9d74 01886ba2     .04.c...t.m..k..
    9230:	0293dbc5 003d2028 02047d0a 0238b4a1     ....( =..}....8.
    9240:	00e20f06 0175b1dc 0014999b 0385da79     ......u.....y...
    9250:	01d29648 01cd9d18 014b0568 0078aeb5     H.......h.K...x.
    9260:	03e9c06e 03733308 01745482 027ed52d     n....3s..Tt.-.~.
    9270:	007b18a1 029a7a06 03225bbf 01c13036     ..{..z...[".60..
    9280:	0383461c 002f2c2c 025492c7 0366e7b5     .F..,,/...T...f.
    9290:	010773b2 03942067 000649c7 0365e3cb     .s..g ...I....e.
    92a0:	02d9ba9e 0303fcda 010312ab 0049b15b     ............[.I.

000092b0 <Montgomery_Rprime>:
    92b0:	5ff3d621 c81db879 ea6b387d 173ea5aa     !.._y...}8k...>.
    92c0:	2136f61c 3d01b7c7 6ac8f9d3 0006a5f1     ..6!...=...j....

000092d0 <Montgomery_rprime>:
    92d0:	79bc3929 e12fe5f0 d1fcdcf3 d75e78b8     )9.y../......x^.
    92e0:	76b5db21 bce409ed afc1c074 f32702fd     !..v....t.....'.

000092f0 <PARAMETER_d>:
    92f0:	00000142 00000000 000e4000 00000000     B........@......
    9300:	00000000 01fc0c8d 0085223c 020fcb38     ........<"..8...
    9310:	0211995f 005e472f                       _.../G^.

00009318 <curve_order>:
    9318:	c7768ce7 2fb2540e fe0f7999 dfbd004d     ..v..T./.y..M...
    9328:	9cbc14e5 f0539782 4e5e0a72 0029cbc1     ......S.r.^N..).

00009338 <A144>:
    9338:	05080201 05020208 0c060201 080f090c     ................
    9348:	050d0d08 010a030b 0e0d0f01 0208080b     ................
    9358:	08020303                                ....

0000935c <IC>:
    935c:	07030100 00000406                       ........

00009364 <RC>:
    9364:	0e070301 0c060b0d 0a050209              ............

00009370 <sbox>:
    9370:	0b06050c 0d0a0009 080f0e03 02010704     ................

00009380 <inv_pbox>:
    9380:	0c080400 1c181410 2c282420 3c383430     ........ $(,048<
    9390:	0d090501 1d191511 2d292521 3d393531     ........!%)-159=
    93a0:	0e0a0602 1e1a1612 2e2a2622 3e3a3632     ........"&*.26:>
    93b0:	0f0b0703 1f1b1713 2f2b2723 3f3b3733     ........#'+/37;?

000093c0 <inv_sbox>:
    93c0:	080f0e05 0d02010c 0306040b 0a090700     ................

000093d0 <pbox>:
    93d0:	30201000 31211101 32221202 33231303     .. 0..!1.."2..#3
    93e0:	34241404 35251505 36261606 37271707     ..$4..%5..&6..'7
    93f0:	38281808 39291909 3a2a1a0a 3b2b1b0b     ..(8..)9..*:..+;
    9400:	3c2c1c0c 3d2d1d0d 3e2e1e0e 3f2f1f0f     ..,<..-=...>../?

00009410 <sbox>:
    9410:	0b06050c 0d0a0009 080f0e03 02010704     ................
    9420:	74617453 3d207375 00692520 746f7250     Status = %i.Prot
    9430:	6c6f636f 72726520 202c726f 61656c70     ocol error, plea
    9440:	64206573 6c62756f 68632065 206b6365     se double check 
    9450:	20656874 636f6c63 6e69206b 6f777420     the clock in two
    9460:	616f6220 2e736472 0d0a0d20 00000000      boards. .......
    9470:	45200d0a 6e657478 20646564 7373656d     .. Extended mess
    9480:	20656761 65636572 64657669 206e6920     age received in 
    9490:	62207852 65666675 54202e72 72206568     Rx buffer. The r
    94a0:	69656365 20646576 61746164 3a736920     eceived data is:
    94b0:	00000d20 53200d0a 646e6174 20647261      ..... Standard 
    94c0:	7373656d 20656761 65636572 64657669     message received
    94d0:	206e6920 62207852 65666675 64252072      in Rx buffer %d
    94e0:	6573202c 6f697463 6425206e 6854202e     , section %d. Th
    94f0:	65722065 76696563 64206465 20617461     e received data 
    9500:	203a7369 00000a0d 64252020 00000000     is: ....  %d....
    9510:	000d0a0d 3d206425 6425203d 0a0d3f20     ....%d == %d ?..
    9520:	00000000 3d206425 6425203d 61203f20     ....%d == %d ? a
    9530:	206f736c 0d206425 0000000a 53200d0a     lso %d ....... S
    9540:	646e6174 20647261 7373656d 20656761     tandard message 
    9550:	65636572 64657669 206e6920 4f464946     received in FIFO
    9560:	202e3020 20656854 65636572 64657669      0. The received
    9570:	74616420 73692061 000d203a 616c6544      data is: ..Dela
    9580:	20646579 65726568 00000000 756e654d     yed here....Menu
    9590:	0a0d3a20 2d2d2020 6c655320 20746365      :..  -- Select 
    95a0:	20656874 69746361 0d3a6e6f 3020200a     the action:..  0
    95b0:	6553203a 74732074 61646e61 66206472     : Set standard f
    95c0:	65746c69 44492072 203a3020 35347830     ilter ID 0: 0x45
    95d0:	73202c41 65726f74 746e6920 7852206f     A, store into Rx
    95e0:	66756220 2e726566 200a0d20 203a3120      buffer. ..  1: 
    95f0:	20746553 6e617473 64726164 6c696620     Set standard fil
    9600:	20726574 31204449 7830203a 2c393634     ter ID 1: 0x469,
    9610:	6f747320 69206572 206f746e 46207852      store into Rx F
    9620:	204f4649 0d202e30 3220200a 6553203a     IFO 0. ..  2: Se
    9630:	7320646e 646e6174 20647261 7373656d     nd standard mess
    9640:	20656761 68746977 3a444920 34783020     age with ID: 0x4
    9650:	61204135 3420646e 74796220 61642065     5A and 4 byte da
    9660:	30206174 206f7420 0d202e33 3320200a     ta 0 to 3. ..  3
    9670:	6553203a 7320646e 646e6174 20647261     : Send standard 
    9680:	7373656d 20656761 68746977 3a444920     message with ID:
    9690:	34783020 61203936 3420646e 74796220      0x469 and 4 byt
    96a0:	61642065 31206174 74203832 3331206f     e data 128 to 13
    96b0:	0d202e31 3420200a 6553203a 78652074     1. ..  4: Set ex
    96c0:	646e6574 66206465 65746c69 44492072     tended filter ID
    96d0:	203a3020 30317830 30303030 202c3541      0: 0x100000A5, 
    96e0:	726f7473 6e692065 52206f74 75622078     store into Rx bu
    96f0:	72656666 0a0d202e 3a352020 74655320     ffer. ..  5: Set
    9700:	74786520 65646e65 69662064 7265746c      extended filter
    9710:	20444920 30203a31 30303178 39303030      ID 1: 0x1000009
    9720:	73202c36 65726f74 746e6920 7852206f     6, store into Rx
    9730:	46494620 2e31204f 200a0d20 203a3620      FIFO 1. ..  6: 
    9740:	646e6553 74786520 65646e65 656d2064     Send extended me
    9750:	67617373 69772065 49206874 30203a44     ssage with ID: 0
    9760:	30303178 41303030 6e612035 20382064     x100000A5 and 8 
    9770:	65747962 74616420 20302061 37206f74     byte data 0 to 7
    9780:	0a0d202e 3a372020 6e655320 78652064     . ..  7: Send ex
    9790:	646e6574 6d206465 61737365 77206567     tended message w
    97a0:	20687469 203a4449 30317830 30303030     ith ID: 0x100000
    97b0:	61203639 3820646e 74796220 61642065     96 and 8 byte da
    97c0:	31206174 74203832 3331206f 0d202e35     ta 128 to 135. .
    97d0:	6820200a 6944203a 616c7073 656d2079     .  h: Display me
    97e0:	0d20756e 00000d0a 656d6954 726f6620     nu .....Time for
    97f0:	726e6520 6d6c6c6f 0d746e65 00000000      enrollment.....
    9800:	6f726e45 656d6c6c 6320746e 6c706d6f     Enrollment compl
    9810:	0d657465 00000000 74696e49 696c6169     ete.....Initiali
    9820:	6974617a 43206e6f 6c706d6f 2e657465     zation Complete.
    9830:	000d2e2e 69797254 7420676e 6574206f     ....Trying to te
    9840:	74207473 20736968 4e414854 2e2e2e47     st this THANG...
    9850:	0000000d 64726148 69646f63 5220676e     ....Hardcoding R
    9860:	6f707365 0d65736e 00000000 656e6547     esponse.....Gene
    9870:	69746172 5220676e 6f707365 0d65736e     rating Response.
    9880:	00000000 68736148 20736920 00007830     ....Hash is 0x..
    9890:	72636553 69207465 78302073 00000000     Secret is 0x....
    98a0:	6c696146 50206465 696c6275 654b2063     Failed Public Ke
    98b0:	65472079 6172656e 6e6f6974 0000000d     y Generation....
    98c0:	6c627550 69206369 78302073 00000000     Public is 0x....
    98d0:	6c696146 53206465 65726168 65532064     Failed Shared Se
    98e0:	74657263 65724320 6f697461 00000d6e     cret Creation...
    98f0:	72616853 53206465 65726365 30203a74     Shared Secret: 0
    9900:	00000078 6c627550 4b206369 203a7965     x...Public Key: 
    9910:	00007830 74696157 0d676e69 00000000     0x..Waiting.....
    9920:	5420794d 216e7275 0000000d 73726946     My Turn!....Firs
    9930:	656d2074 67617373 65732065 0d21746e     t message sent!.
    9940:	00000000 6f636553 6d20646e 61737365     ....Second messa
    9950:	73206567 21746e65 0000000d 74696157     ge sent!....Wait
    9960:	20676e69 20726f66 6568746f 000d7372     ing for others..
    9970:	206c6c41 65646f6e 69662073 6873696e     All nodes finish
    9980:	73206465 69646e65 6820676e 65687361     ed sending hashe
    9990:	65722064 6e6f7073 0d736573 00000000     d responses.....
    99a0:	65636552 64657669 72696620 6d207473     Received first m
    99b0:	61737365 000d6567 65636552 64657669     essage..Received
    99c0:	63657320 20646e6f 7373656d 0d656761      second message.
    99d0:	00000000 2067734d 303d4449 34302578     ....Msg ID=0x%04
    99e0:	65722078 76696563 203a6465 00000000     x received: ....
    99f0:	78323025 00000020 696e6946 64656873     %02x ...Finished
    9a00:	63654420 74707972 21676e69 0000000d      Decrypting!....
    9a10:	73736553 736e6f69 79656b20 3a736920     Sessions key is:
    9a20:	00783020 6f4e0a0d 6c616d72 65704f20      0x...Normal Ope
    9a30:	69746172 54206e6f 0d656d69 00000000     ration Time.....
    9a40:	65636552 64657669 7830203a 78383025     Received: 0x%08x
    9a50:	3830252e 000a0d78 6d726f4e 4f206c61     .%08x...Normal O
    9a60:	61726570 6e6f6974 6d6f4320 74656c70     peration Complet
    9a70:	0d216465 00000000                       ed!.....

00009a78 <_global_impure_ptr>:
    9a78:	20000108                                ... 

00009a7c <__sf_fake_stderr>:
	...

00009a9c <__sf_fake_stdin>:
	...

00009abc <__sf_fake_stdout>:
	...
    9adc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    9aec:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    9afc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    9b0c:	00006665                                ef..

00009b10 <_init>:
    9b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b12:	46c0      	nop			; (mov r8, r8)
    9b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9b16:	bc08      	pop	{r3}
    9b18:	469e      	mov	lr, r3
    9b1a:	4770      	bx	lr

00009b1c <__init_array_start>:
    9b1c:	000000e5 	.word	0x000000e5

00009b20 <_fini>:
    9b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b22:	46c0      	nop			; (mov r8, r8)
    9b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9b26:	bc08      	pop	{r3}
    9b28:	469e      	mov	lr, r3
    9b2a:	4770      	bx	lr

00009b2c <__fini_array_start>:
    9b2c:	000000bd 	.word	0x000000bd
