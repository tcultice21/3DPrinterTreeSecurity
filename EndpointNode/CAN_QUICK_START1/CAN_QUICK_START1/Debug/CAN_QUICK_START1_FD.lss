
CAN_QUICK_START1_FD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a1ec  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000178  20000000  0000a1ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003580  20000178  0000a364  00020178  2**2
                  ALLOC
  3 .stack        00002000  200036f8  0000d8e4  00020178  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   00040cd8  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b5c  00000000  00000000  00060ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ca21  00000000  00000000  00065a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007f8  00000000  00000000  0007244e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c48  00000000  00000000  00072c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000a00c  00000000  00000000  0007388e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010018  00000000  00000000  0007d89a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a7670  00000000  00000000  0008d8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001dcc  00000000  00000000  00134f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 56 00 20 a9 29 00 00 a5 29 00 00 a5 29 00 00     .V. .)...)...)..
	...
      2c:	a5 29 00 00 00 00 00 00 00 00 00 00 a5 29 00 00     .)...........)..
      3c:	c5 5a 00 00 a5 29 00 00 a5 29 00 00 a5 29 00 00     .Z...)...)...)..
      4c:	a5 29 00 00 a5 29 00 00 a5 29 00 00 a5 29 00 00     .)...)...)...)..
      5c:	a5 29 00 00 a5 29 00 00 a1 1c 00 00 b1 1c 00 00     .)...)..........
      6c:	c1 1c 00 00 d1 1c 00 00 e1 1c 00 00 f1 1c 00 00     ................
      7c:	35 58 00 00 a5 29 00 00 a5 29 00 00 a5 29 00 00     5X...)...)...)..
      8c:	a5 29 00 00 a5 29 00 00 a5 29 00 00 a5 29 00 00     .)...)...)...)..
      9c:	a5 29 00 00 a5 29 00 00 a5 29 00 00 a5 29 00 00     .)...)...)...)..
      ac:	a5 29 00 00 a5 29 00 00 a5 29 00 00 a5 29 00 00     .)...)...)...)..

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000178 	.word	0x20000178
      dc:	00000000 	.word	0x00000000
      e0:	0000a1ec 	.word	0x0000a1ec

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000017c 	.word	0x2000017c
     110:	0000a1ec 	.word	0x0000a1ec
     114:	0000a1ec 	.word	0x0000a1ec
     118:	00000000 	.word	0x00000000

0000011c <crypto_aead_encrypt>:

int crypto_aead_encrypt(unsigned char* c, unsigned long* clen,
                        const unsigned char* m, unsigned long mlen,
                        const unsigned char* ad, unsigned long adlen,
                        const unsigned char* nsec, const unsigned char* npub,
                        const unsigned char* k) {
     11c:	b5f0      	push	{r4, r5, r6, r7, lr}
     11e:	46de      	mov	lr, fp
     120:	4657      	mov	r7, sl
     122:	464e      	mov	r6, r9
     124:	4645      	mov	r5, r8
     126:	b5e0      	push	{r5, r6, r7, lr}
     128:	b0a5      	sub	sp, #148	; 0x94
     12a:	9016      	str	r0, [sp, #88]	; 0x58
     12c:	9213      	str	r2, [sp, #76]	; 0x4c
     12e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
     130:	46a4      	mov	ip, r4
     132:	9f32      	ldr	r7, [sp, #200]	; 0xc8
  ascon_state_t s;
  (void)nsec;
  *clen = mlen + CRYPTO_ABYTES;
     134:	9317      	str	r3, [sp, #92]	; 0x5c
     136:	3308      	adds	r3, #8
     138:	600b      	str	r3, [r1, #0]
  /* undefined for n == 0 */
  return ~0ull >> (64 - 8 * n);
}

forceinline uint64_t LOAD(const uint8_t* bytes, int n) {
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     13a:	6839      	ldr	r1, [r7, #0]
     13c:	6878      	ldr	r0, [r7, #4]
  return U64TOWORD(x);
     13e:	060c      	lsls	r4, r1, #24
     140:	0e02      	lsrs	r2, r0, #24
     142:	020b      	lsls	r3, r1, #8
     144:	26ff      	movs	r6, #255	; 0xff
     146:	0436      	lsls	r6, r6, #16
     148:	4033      	ands	r3, r6
     14a:	4323      	orrs	r3, r4
     14c:	0a0d      	lsrs	r5, r1, #8
     14e:	0604      	lsls	r4, r0, #24
     150:	432c      	orrs	r4, r5
     152:	25ff      	movs	r5, #255	; 0xff
     154:	022d      	lsls	r5, r5, #8
     156:	402c      	ands	r4, r5
     158:	4323      	orrs	r3, r4
     15a:	4699      	mov	r9, r3
     15c:	0e0c      	lsrs	r4, r1, #24
     15e:	0201      	lsls	r1, r0, #8
     160:	4321      	orrs	r1, r4
     162:	23ff      	movs	r3, #255	; 0xff
     164:	469b      	mov	fp, r3
     166:	4019      	ands	r1, r3
     168:	464b      	mov	r3, r9
     16a:	4319      	orrs	r1, r3
     16c:	9112      	str	r1, [sp, #72]	; 0x48
     16e:	0a01      	lsrs	r1, r0, #8
     170:	0603      	lsls	r3, r0, #24
     172:	4313      	orrs	r3, r2
     174:	0202      	lsls	r2, r0, #8
     176:	4322      	orrs	r2, r4
     178:	4032      	ands	r2, r6
     17a:	431a      	orrs	r2, r3
     17c:	0008      	movs	r0, r1
     17e:	4028      	ands	r0, r5
     180:	4302      	orrs	r2, r0
     182:	9211      	str	r2, [sp, #68]	; 0x44
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     184:	68ba      	ldr	r2, [r7, #8]
     186:	68fb      	ldr	r3, [r7, #12]
  return U64TOWORD(x);
     188:	0614      	lsls	r4, r2, #24
     18a:	0e18      	lsrs	r0, r3, #24
     18c:	0217      	lsls	r7, r2, #8
     18e:	4037      	ands	r7, r6
     190:	4327      	orrs	r7, r4
     192:	0a14      	lsrs	r4, r2, #8
     194:	46a0      	mov	r8, r4
     196:	061c      	lsls	r4, r3, #24
     198:	4641      	mov	r1, r8
     19a:	430c      	orrs	r4, r1
     19c:	402c      	ands	r4, r5
     19e:	4327      	orrs	r7, r4
     1a0:	0e12      	lsrs	r2, r2, #24
     1a2:	021c      	lsls	r4, r3, #8
     1a4:	4314      	orrs	r4, r2
     1a6:	4659      	mov	r1, fp
     1a8:	400c      	ands	r4, r1
     1aa:	4327      	orrs	r7, r4
     1ac:	9715      	str	r7, [sp, #84]	; 0x54
     1ae:	0a1f      	lsrs	r7, r3, #8
     1b0:	061c      	lsls	r4, r3, #24
     1b2:	4320      	orrs	r0, r4
     1b4:	021b      	lsls	r3, r3, #8
     1b6:	4313      	orrs	r3, r2
     1b8:	4033      	ands	r3, r6
     1ba:	4318      	orrs	r0, r3
     1bc:	402f      	ands	r7, r5
     1be:	4338      	orrs	r0, r7
     1c0:	9014      	str	r0, [sp, #80]	; 0x50
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     1c2:	4664      	mov	r4, ip
     1c4:	6824      	ldr	r4, [r4, #0]
     1c6:	4661      	mov	r1, ip
     1c8:	684b      	ldr	r3, [r1, #4]
  return U64TOWORD(x);
     1ca:	0627      	lsls	r7, r4, #24
     1cc:	0e1a      	lsrs	r2, r3, #24
     1ce:	0220      	lsls	r0, r4, #8
     1d0:	4030      	ands	r0, r6
     1d2:	4338      	orrs	r0, r7
     1d4:	0a21      	lsrs	r1, r4, #8
     1d6:	061f      	lsls	r7, r3, #24
     1d8:	430f      	orrs	r7, r1
     1da:	402f      	ands	r7, r5
     1dc:	4338      	orrs	r0, r7
     1de:	0e24      	lsrs	r4, r4, #24
     1e0:	021f      	lsls	r7, r3, #8
     1e2:	4327      	orrs	r7, r4
     1e4:	4659      	mov	r1, fp
     1e6:	400f      	ands	r7, r1
     1e8:	4338      	orrs	r0, r7
     1ea:	0a1f      	lsrs	r7, r3, #8
     1ec:	0619      	lsls	r1, r3, #24
     1ee:	430a      	orrs	r2, r1
     1f0:	021b      	lsls	r3, r3, #8
     1f2:	431c      	orrs	r4, r3
     1f4:	4034      	ands	r4, r6
     1f6:	4322      	orrs	r2, r4
     1f8:	402f      	ands	r7, r5
     1fa:	0014      	movs	r4, r2
     1fc:	433c      	orrs	r4, r7
     1fe:	46a2      	mov	sl, r4
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     200:	4664      	mov	r4, ip
     202:	68a7      	ldr	r7, [r4, #8]
     204:	68e4      	ldr	r4, [r4, #12]
  return U64TOWORD(x);
     206:	063a      	lsls	r2, r7, #24
     208:	0e21      	lsrs	r1, r4, #24
     20a:	4688      	mov	r8, r1
     20c:	023b      	lsls	r3, r7, #8
     20e:	4033      	ands	r3, r6
     210:	431a      	orrs	r2, r3
     212:	0a39      	lsrs	r1, r7, #8
     214:	0623      	lsls	r3, r4, #24
     216:	430b      	orrs	r3, r1
     218:	402b      	ands	r3, r5
     21a:	4313      	orrs	r3, r2
     21c:	0e3f      	lsrs	r7, r7, #24
     21e:	0222      	lsls	r2, r4, #8
     220:	433a      	orrs	r2, r7
     222:	4659      	mov	r1, fp
     224:	4011      	ands	r1, r2
     226:	4319      	orrs	r1, r3
     228:	0a23      	lsrs	r3, r4, #8
     22a:	469c      	mov	ip, r3
     22c:	0623      	lsls	r3, r4, #24
     22e:	4642      	mov	r2, r8
     230:	4313      	orrs	r3, r2
     232:	0224      	lsls	r4, r4, #8
     234:	4327      	orrs	r7, r4
     236:	4037      	ands	r7, r6
     238:	433b      	orrs	r3, r7
     23a:	4664      	mov	r4, ip
     23c:	4025      	ands	r5, r4
     23e:	432b      	orrs	r3, r5
#include "printstate.h"
#include "word.h"

forceinline void ROUND_LOOP(ascon_state_t* s, uint32_t C) {
  uint32_t tmp0, tmp1;
  __asm__ __volatile__(
     240:	2400      	movs	r4, #0
     242:	46a0      	mov	r8, r4
     244:	4c6f      	ldr	r4, [pc, #444]	; (404 <rend_301+0x68>)
     246:	46a4      	mov	ip, r4
     248:	9f11      	ldr	r7, [sp, #68]	; 0x44
     24a:	9e12      	ldr	r6, [sp, #72]	; 0x48
     24c:	9d14      	ldr	r5, [sp, #80]	; 0x50
     24e:	9c15      	ldr	r4, [sp, #84]	; 0x54
     250:	46a1      	mov	r9, r4
     252:	4652      	mov	r2, sl
     254:	24f0      	movs	r4, #240	; 0xf0
     256:	9401      	str	r4, [sp, #4]
     258:	4644      	mov	r4, r8
     25a:	46b0      	mov	r8, r6
     25c:	46ca      	mov	sl, r9
     25e:	4683      	mov	fp, r0
     260:	4689      	mov	r9, r1
     262:	26f0      	movs	r6, #240	; 0xf0

00000264 <rbegin_301>:
     264:	4075      	eors	r5, r6
     266:	b440      	push	{r6}
     268:	405c      	eors	r4, r3
     26a:	4053      	eors	r3, r2
     26c:	407d      	eors	r5, r7
     26e:	43e1      	mvns	r1, r4
     270:	4319      	orrs	r1, r3
     272:	1c2e      	adds	r6, r5, #0
     274:	43be      	bics	r6, r7
     276:	4074      	eors	r4, r6
     278:	43de      	mvns	r6, r3
     27a:	4316      	orrs	r6, r2
     27c:	4075      	eors	r5, r6
     27e:	1c3e      	adds	r6, r7, #0
     280:	43a6      	bics	r6, r4
     282:	4073      	eors	r3, r6
     284:	1c16      	adds	r6, r2, #0
     286:	402e      	ands	r6, r5
     288:	407e      	eors	r6, r7
     28a:	4051      	eors	r1, r2
     28c:	4069      	eors	r1, r5
     28e:	4066      	eors	r6, r4
     290:	405c      	eors	r4, r3
     292:	4667      	mov	r7, ip
     294:	4642      	mov	r2, r8
     296:	46ac      	mov	ip, r5
     298:	46a0      	mov	r8, r4
     29a:	4654      	mov	r4, sl
     29c:	465d      	mov	r5, fp
     29e:	4648      	mov	r0, r9
     2a0:	468a      	mov	sl, r1
     2a2:	469b      	mov	fp, r3
     2a4:	4047      	eors	r7, r0
     2a6:	4068      	eors	r0, r5
     2a8:	4054      	eors	r4, r2
     2aa:	43f9      	mvns	r1, r7
     2ac:	4301      	orrs	r1, r0
     2ae:	1c23      	adds	r3, r4, #0
     2b0:	4393      	bics	r3, r2
     2b2:	405f      	eors	r7, r3
     2b4:	43c3      	mvns	r3, r0
     2b6:	432b      	orrs	r3, r5
     2b8:	405c      	eors	r4, r3
     2ba:	1c13      	adds	r3, r2, #0
     2bc:	43bb      	bics	r3, r7
     2be:	4058      	eors	r0, r3
     2c0:	1c2b      	adds	r3, r5, #0
     2c2:	4023      	ands	r3, r4
     2c4:	405a      	eors	r2, r3
     2c6:	404d      	eors	r5, r1
     2c8:	4065      	eors	r5, r4
     2ca:	407a      	eors	r2, r7
     2cc:	4047      	eors	r7, r0
     2ce:	46a9      	mov	r9, r5
     2d0:	4665      	mov	r5, ip
     2d2:	46bc      	mov	ip, r7
     2d4:	09a3      	lsrs	r3, r4, #6
     2d6:	06af      	lsls	r7, r5, #26
     2d8:	09a9      	lsrs	r1, r5, #6
     2da:	407b      	eors	r3, r7
     2dc:	06a7      	lsls	r7, r4, #26
     2de:	4079      	eors	r1, r7
     2e0:	0867      	lsrs	r7, r4, #1
     2e2:	407b      	eors	r3, r7
     2e4:	07ef      	lsls	r7, r5, #31
     2e6:	407b      	eors	r3, r7
     2e8:	086f      	lsrs	r7, r5, #1
     2ea:	4079      	eors	r1, r7
     2ec:	07e7      	lsls	r7, r4, #31
     2ee:	4079      	eors	r1, r7
     2f0:	405c      	eors	r4, r3
     2f2:	404d      	eors	r5, r1
     2f4:	00d3      	lsls	r3, r2, #3
     2f6:	0f77      	lsrs	r7, r6, #29
     2f8:	00f1      	lsls	r1, r6, #3
     2fa:	407b      	eors	r3, r7
     2fc:	0f57      	lsrs	r7, r2, #29
     2fe:	4079      	eors	r1, r7
     300:	0657      	lsls	r7, r2, #25
     302:	407b      	eors	r3, r7
     304:	09f7      	lsrs	r7, r6, #7
     306:	407b      	eors	r3, r7
     308:	0677      	lsls	r7, r6, #25
     30a:	4079      	eors	r1, r7
     30c:	09d7      	lsrs	r7, r2, #7
     30e:	4079      	eors	r1, r7
     310:	405a      	eors	r2, r3
     312:	404e      	eors	r6, r1
     314:	465b      	mov	r3, fp
     316:	46b3      	mov	fp, r6
     318:	05c6      	lsls	r6, r0, #23
     31a:	0a5f      	lsrs	r7, r3, #9
     31c:	05d9      	lsls	r1, r3, #23
     31e:	407e      	eors	r6, r7
     320:	0a47      	lsrs	r7, r0, #9
     322:	4079      	eors	r1, r7
     324:	09c7      	lsrs	r7, r0, #7
     326:	407e      	eors	r6, r7
     328:	065f      	lsls	r7, r3, #25
     32a:	407e      	eors	r6, r7
     32c:	09df      	lsrs	r7, r3, #7
     32e:	4079      	eors	r1, r7
     330:	0647      	lsls	r7, r0, #25
     332:	4079      	eors	r1, r7
     334:	4070      	eors	r0, r6
     336:	404b      	eors	r3, r1
     338:	465f      	mov	r7, fp
     33a:	464e      	mov	r6, r9
     33c:	4681      	mov	r9, r0
     33e:	4693      	mov	fp, r2
     340:	4652      	mov	r2, sl
     342:	46a2      	mov	sl, r4
     344:	0c70      	lsrs	r0, r6, #17
     346:	03d4      	lsls	r4, r2, #15
     348:	0c51      	lsrs	r1, r2, #17
     34a:	4060      	eors	r0, r4
     34c:	03f4      	lsls	r4, r6, #15
     34e:	4061      	eors	r1, r4
     350:	0ab4      	lsrs	r4, r6, #10
     352:	4060      	eors	r0, r4
     354:	0594      	lsls	r4, r2, #22
     356:	4060      	eors	r0, r4
     358:	0a94      	lsrs	r4, r2, #10
     35a:	4061      	eors	r1, r4
     35c:	05b4      	lsls	r4, r6, #22
     35e:	4061      	eors	r1, r4
     360:	4046      	eors	r6, r0
     362:	404a      	eors	r2, r1
     364:	4661      	mov	r1, ip
     366:	4644      	mov	r4, r8
     368:	469c      	mov	ip, r3
     36a:	46d8      	mov	r8, fp
     36c:	46b3      	mov	fp, r6
     36e:	0f0b      	lsrs	r3, r1, #28
     370:	0126      	lsls	r6, r4, #4
     372:	0f20      	lsrs	r0, r4, #28
     374:	4073      	eors	r3, r6
     376:	010e      	lsls	r6, r1, #4
     378:	4070      	eors	r0, r6
     37a:	0cce      	lsrs	r6, r1, #19
     37c:	4073      	eors	r3, r6
     37e:	0366      	lsls	r6, r4, #13
     380:	4073      	eors	r3, r6
     382:	0ce6      	lsrs	r6, r4, #19
     384:	4070      	eors	r0, r6
     386:	034e      	lsls	r6, r1, #13
     388:	4070      	eors	r0, r6
     38a:	bc40      	pop	{r6}
     38c:	4059      	eors	r1, r3
     38e:	4044      	eors	r4, r0
     390:	4663      	mov	r3, ip
     392:	468c      	mov	ip, r1
     394:	3e0f      	subs	r6, #15
     396:	2e3c      	cmp	r6, #60	; 0x3c
     398:	d000      	beq.n	39c <rend_301>
     39a:	e763      	b.n	264 <rbegin_301>

0000039c <rend_301>:
     39c:	4649      	mov	r1, r9
     39e:	4658      	mov	r0, fp
     3a0:	4646      	mov	r6, r8
     3a2:	941a      	str	r4, [sp, #104]	; 0x68
     3a4:	4664      	mov	r4, ip
     3a6:	941b      	str	r4, [sp, #108]	; 0x6c
     3a8:	971c      	str	r7, [sp, #112]	; 0x70
     3aa:	961d      	str	r6, [sp, #116]	; 0x74
     3ac:	951e      	str	r5, [sp, #120]	; 0x78
     3ae:	4655      	mov	r5, sl
     3b0:	951f      	str	r5, [sp, #124]	; 0x7c
  s->x[3] ^= key->x[0];
     3b2:	9c11      	ldr	r4, [sp, #68]	; 0x44
     3b4:	4062      	eors	r2, r4
     3b6:	9220      	str	r2, [sp, #128]	; 0x80
     3b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
     3ba:	4060      	eors	r0, r4
     3bc:	9021      	str	r0, [sp, #132]	; 0x84
  s->x[4] ^= key->x[1];
     3be:	9c14      	ldr	r4, [sp, #80]	; 0x50
     3c0:	4063      	eors	r3, r4
     3c2:	9322      	str	r3, [sp, #136]	; 0x88
     3c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
     3c6:	4061      	eors	r1, r4
     3c8:	9123      	str	r1, [sp, #140]	; 0x8c
  /* perform ascon computation */
  ascon_key_t key;
  ascon_loadkey(&key, k);
  ascon_initaead(&s, &key, npub);
  //ascon_adata(&s, ad, adlen);
  ascon_encrypt(&s, c, m, mlen);
     3ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     3cc:	930e      	str	r3, [sp, #56]	; 0x38
     3ce:	2300      	movs	r3, #0
     3d0:	930f      	str	r3, [sp, #60]	; 0x3c
  while (mlen >= ASCON_AEAD_RATE) {
     3d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     3d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
     3d6:	2c00      	cmp	r4, #0
     3d8:	d001      	beq.n	3de <rend_301+0x42>
     3da:	f000 fad7 	bl	98c <rend_873+0x6a>
     3de:	2b07      	cmp	r3, #7
     3e0:	d801      	bhi.n	3e6 <rend_301+0x4a>
     3e2:	f000 fad3 	bl	98c <rend_873+0x6a>
     3e6:	9304      	str	r3, [sp, #16]
     3e8:	9405      	str	r4, [sp, #20]
     3ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
     3ec:	4698      	mov	r8, r3
     3ee:	9f13      	ldr	r7, [sp, #76]	; 0x4c
     3f0:	23ff      	movs	r3, #255	; 0xff
     3f2:	041b      	lsls	r3, r3, #16
     3f4:	9303      	str	r3, [sp, #12]
     3f6:	23ff      	movs	r3, #255	; 0xff
     3f8:	021b      	lsls	r3, r3, #8
     3fa:	9310      	str	r3, [sp, #64]	; 0x40
    mlen -= ASCON_AEAD_RATE;
     3fc:	9701      	str	r7, [sp, #4]
     3fe:	4643      	mov	r3, r8
     400:	9302      	str	r3, [sp, #8]
     402:	e001      	b.n	408 <rend_301+0x6c>
     404:	80400c06 	.word	0x80400c06
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     408:	9b01      	ldr	r3, [sp, #4]
     40a:	681e      	ldr	r6, [r3, #0]
     40c:	6859      	ldr	r1, [r3, #4]
  return U64TOWORD(x);
     40e:	0633      	lsls	r3, r6, #24
     410:	0e0a      	lsrs	r2, r1, #24
     412:	0230      	lsls	r0, r6, #8
     414:	9c03      	ldr	r4, [sp, #12]
     416:	4020      	ands	r0, r4
     418:	4303      	orrs	r3, r0
     41a:	0a37      	lsrs	r7, r6, #8
     41c:	0608      	lsls	r0, r1, #24
     41e:	4338      	orrs	r0, r7
     420:	9d10      	ldr	r5, [sp, #64]	; 0x40
     422:	4028      	ands	r0, r5
     424:	4303      	orrs	r3, r0
     426:	0e36      	lsrs	r6, r6, #24
     428:	0208      	lsls	r0, r1, #8
     42a:	4330      	orrs	r0, r6
     42c:	27ff      	movs	r7, #255	; 0xff
     42e:	4038      	ands	r0, r7
     430:	4303      	orrs	r3, r0
     432:	0a08      	lsrs	r0, r1, #8
     434:	060f      	lsls	r7, r1, #24
     436:	433a      	orrs	r2, r7
     438:	0209      	lsls	r1, r1, #8
     43a:	4331      	orrs	r1, r6
     43c:	4021      	ands	r1, r4
     43e:	430a      	orrs	r2, r1
     440:	4028      	ands	r0, r5
     442:	4302      	orrs	r2, r0
    s->x[0] ^= LOAD(m, 8);
     444:	991a      	ldr	r1, [sp, #104]	; 0x68
     446:	404a      	eors	r2, r1
     448:	991b      	ldr	r1, [sp, #108]	; 0x6c
     44a:	404b      	eors	r3, r1
}

forceinline void STORE(uint8_t* bytes, uint64_t w, int n) {
  *(uint64_t*)bytes &= ~MASK(n);
  *(uint64_t*)bytes |= WORDTOU64(w);
     44c:	0611      	lsls	r1, r2, #24
     44e:	0e18      	lsrs	r0, r3, #24
     450:	0216      	lsls	r6, r2, #8
     452:	9403      	str	r4, [sp, #12]
     454:	4026      	ands	r6, r4
     456:	4331      	orrs	r1, r6
     458:	0a17      	lsrs	r7, r2, #8
     45a:	061e      	lsls	r6, r3, #24
     45c:	433e      	orrs	r6, r7
     45e:	402e      	ands	r6, r5
     460:	4331      	orrs	r1, r6
     462:	0e16      	lsrs	r6, r2, #24
     464:	46b4      	mov	ip, r6
     466:	021e      	lsls	r6, r3, #8
     468:	4667      	mov	r7, ip
     46a:	433e      	orrs	r6, r7
     46c:	27ff      	movs	r7, #255	; 0xff
     46e:	403e      	ands	r6, r7
     470:	4331      	orrs	r1, r6
     472:	0a1f      	lsrs	r7, r3, #8
     474:	061e      	lsls	r6, r3, #24
     476:	4330      	orrs	r0, r6
     478:	021e      	lsls	r6, r3, #8
     47a:	4664      	mov	r4, ip
     47c:	4326      	orrs	r6, r4
     47e:	9c03      	ldr	r4, [sp, #12]
     480:	4026      	ands	r6, r4
     482:	4330      	orrs	r0, r6
     484:	402f      	ands	r7, r5
     486:	4338      	orrs	r0, r7
     488:	9c02      	ldr	r4, [sp, #8]
     48a:	6020      	str	r0, [r4, #0]
     48c:	6061      	str	r1, [r4, #4]
     48e:	991c      	ldr	r1, [sp, #112]	; 0x70
     490:	9106      	str	r1, [sp, #24]
     492:	991d      	ldr	r1, [sp, #116]	; 0x74
     494:	9107      	str	r1, [sp, #28]
     496:	991e      	ldr	r1, [sp, #120]	; 0x78
     498:	9108      	str	r1, [sp, #32]
     49a:	991f      	ldr	r1, [sp, #124]	; 0x7c
     49c:	9109      	str	r1, [sp, #36]	; 0x24
     49e:	9920      	ldr	r1, [sp, #128]	; 0x80
     4a0:	910a      	str	r1, [sp, #40]	; 0x28
     4a2:	9921      	ldr	r1, [sp, #132]	; 0x84
     4a4:	910b      	str	r1, [sp, #44]	; 0x2c
     4a6:	9922      	ldr	r1, [sp, #136]	; 0x88
     4a8:	910c      	str	r1, [sp, #48]	; 0x30
     4aa:	9923      	ldr	r1, [sp, #140]	; 0x8c
     4ac:	910d      	str	r1, [sp, #52]	; 0x34
     4ae:	9f06      	ldr	r7, [sp, #24]
     4b0:	9e07      	ldr	r6, [sp, #28]
     4b2:	9908      	ldr	r1, [sp, #32]
     4b4:	468a      	mov	sl, r1
     4b6:	9809      	ldr	r0, [sp, #36]	; 0x24
     4b8:	990a      	ldr	r1, [sp, #40]	; 0x28
     4ba:	468b      	mov	fp, r1
     4bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
     4be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
     4c0:	0025      	movs	r5, r4
     4c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
     4c4:	46a0      	mov	r8, r4
     4c6:	2496      	movs	r4, #150	; 0x96
     4c8:	469c      	mov	ip, r3
     4ca:	46b1      	mov	r9, r6
     4cc:	4653      	mov	r3, sl
     4ce:	4682      	mov	sl, r0
     4d0:	4658      	mov	r0, fp
     4d2:	468b      	mov	fp, r1
     4d4:	0029      	movs	r1, r5

000004d6 <rbegin_538>:
     4d6:	4063      	eors	r3, r4
     4d8:	b410      	push	{r4}
     4da:	404a      	eors	r2, r1
     4dc:	4041      	eors	r1, r0
     4de:	407b      	eors	r3, r7
     4e0:	43d6      	mvns	r6, r2
     4e2:	430e      	orrs	r6, r1
     4e4:	1c1c      	adds	r4, r3, #0
     4e6:	43bc      	bics	r4, r7
     4e8:	4062      	eors	r2, r4
     4ea:	43cc      	mvns	r4, r1
     4ec:	4304      	orrs	r4, r0
     4ee:	4063      	eors	r3, r4
     4f0:	1c3c      	adds	r4, r7, #0
     4f2:	4394      	bics	r4, r2
     4f4:	4061      	eors	r1, r4
     4f6:	1c04      	adds	r4, r0, #0
     4f8:	401c      	ands	r4, r3
     4fa:	407c      	eors	r4, r7
     4fc:	4046      	eors	r6, r0
     4fe:	405e      	eors	r6, r3
     500:	4054      	eors	r4, r2
     502:	404a      	eors	r2, r1
     504:	4667      	mov	r7, ip
     506:	4648      	mov	r0, r9
     508:	469c      	mov	ip, r3
     50a:	4691      	mov	r9, r2
     50c:	4652      	mov	r2, sl
     50e:	465b      	mov	r3, fp
     510:	4645      	mov	r5, r8
     512:	46b2      	mov	sl, r6
     514:	468b      	mov	fp, r1
     516:	406f      	eors	r7, r5
     518:	405d      	eors	r5, r3
     51a:	4042      	eors	r2, r0
     51c:	43fe      	mvns	r6, r7
     51e:	432e      	orrs	r6, r5
     520:	1c11      	adds	r1, r2, #0
     522:	4381      	bics	r1, r0
     524:	404f      	eors	r7, r1
     526:	43e9      	mvns	r1, r5
     528:	4319      	orrs	r1, r3
     52a:	404a      	eors	r2, r1
     52c:	1c01      	adds	r1, r0, #0
     52e:	43b9      	bics	r1, r7
     530:	404d      	eors	r5, r1
     532:	1c19      	adds	r1, r3, #0
     534:	4011      	ands	r1, r2
     536:	4048      	eors	r0, r1
     538:	4073      	eors	r3, r6
     53a:	4053      	eors	r3, r2
     53c:	4078      	eors	r0, r7
     53e:	406f      	eors	r7, r5
     540:	4698      	mov	r8, r3
     542:	4663      	mov	r3, ip
     544:	46bc      	mov	ip, r7
     546:	0991      	lsrs	r1, r2, #6
     548:	069f      	lsls	r7, r3, #26
     54a:	099e      	lsrs	r6, r3, #6
     54c:	4079      	eors	r1, r7
     54e:	0697      	lsls	r7, r2, #26
     550:	407e      	eors	r6, r7
     552:	0857      	lsrs	r7, r2, #1
     554:	4079      	eors	r1, r7
     556:	07df      	lsls	r7, r3, #31
     558:	4079      	eors	r1, r7
     55a:	085f      	lsrs	r7, r3, #1
     55c:	407e      	eors	r6, r7
     55e:	07d7      	lsls	r7, r2, #31
     560:	407e      	eors	r6, r7
     562:	404a      	eors	r2, r1
     564:	4073      	eors	r3, r6
     566:	00c1      	lsls	r1, r0, #3
     568:	0f67      	lsrs	r7, r4, #29
     56a:	00e6      	lsls	r6, r4, #3
     56c:	4079      	eors	r1, r7
     56e:	0f47      	lsrs	r7, r0, #29
     570:	407e      	eors	r6, r7
     572:	0647      	lsls	r7, r0, #25
     574:	4079      	eors	r1, r7
     576:	09e7      	lsrs	r7, r4, #7
     578:	4079      	eors	r1, r7
     57a:	0667      	lsls	r7, r4, #25
     57c:	407e      	eors	r6, r7
     57e:	09c7      	lsrs	r7, r0, #7
     580:	407e      	eors	r6, r7
     582:	4048      	eors	r0, r1
     584:	4074      	eors	r4, r6
     586:	4659      	mov	r1, fp
     588:	46a3      	mov	fp, r4
     58a:	05ec      	lsls	r4, r5, #23
     58c:	0a4f      	lsrs	r7, r1, #9
     58e:	05ce      	lsls	r6, r1, #23
     590:	407c      	eors	r4, r7
     592:	0a6f      	lsrs	r7, r5, #9
     594:	407e      	eors	r6, r7
     596:	09ef      	lsrs	r7, r5, #7
     598:	407c      	eors	r4, r7
     59a:	064f      	lsls	r7, r1, #25
     59c:	407c      	eors	r4, r7
     59e:	09cf      	lsrs	r7, r1, #7
     5a0:	407e      	eors	r6, r7
     5a2:	066f      	lsls	r7, r5, #25
     5a4:	407e      	eors	r6, r7
     5a6:	4065      	eors	r5, r4
     5a8:	4071      	eors	r1, r6
     5aa:	465f      	mov	r7, fp
     5ac:	4644      	mov	r4, r8
     5ae:	46a8      	mov	r8, r5
     5b0:	4683      	mov	fp, r0
     5b2:	4650      	mov	r0, sl
     5b4:	4692      	mov	sl, r2
     5b6:	0c65      	lsrs	r5, r4, #17
     5b8:	03c2      	lsls	r2, r0, #15
     5ba:	0c46      	lsrs	r6, r0, #17
     5bc:	4055      	eors	r5, r2
     5be:	03e2      	lsls	r2, r4, #15
     5c0:	4056      	eors	r6, r2
     5c2:	0aa2      	lsrs	r2, r4, #10
     5c4:	4055      	eors	r5, r2
     5c6:	0582      	lsls	r2, r0, #22
     5c8:	4055      	eors	r5, r2
     5ca:	0a82      	lsrs	r2, r0, #10
     5cc:	4056      	eors	r6, r2
     5ce:	05a2      	lsls	r2, r4, #22
     5d0:	4056      	eors	r6, r2
     5d2:	406c      	eors	r4, r5
     5d4:	4070      	eors	r0, r6
     5d6:	4666      	mov	r6, ip
     5d8:	464a      	mov	r2, r9
     5da:	468c      	mov	ip, r1
     5dc:	46d9      	mov	r9, fp
     5de:	46a3      	mov	fp, r4
     5e0:	0f31      	lsrs	r1, r6, #28
     5e2:	0114      	lsls	r4, r2, #4
     5e4:	0f15      	lsrs	r5, r2, #28
     5e6:	4061      	eors	r1, r4
     5e8:	0134      	lsls	r4, r6, #4
     5ea:	4065      	eors	r5, r4
     5ec:	0cf4      	lsrs	r4, r6, #19
     5ee:	4061      	eors	r1, r4
     5f0:	0354      	lsls	r4, r2, #13
     5f2:	4061      	eors	r1, r4
     5f4:	0cd4      	lsrs	r4, r2, #19
     5f6:	4065      	eors	r5, r4
     5f8:	0374      	lsls	r4, r6, #13
     5fa:	4065      	eors	r5, r4
     5fc:	bc10      	pop	{r4}
     5fe:	404e      	eors	r6, r1
     600:	406a      	eors	r2, r5
     602:	4661      	mov	r1, ip
     604:	46b4      	mov	ip, r6
     606:	3c0f      	subs	r4, #15
     608:	2c3c      	cmp	r4, #60	; 0x3c
     60a:	d000      	beq.n	60e <rend_538>
     60c:	e763      	b.n	4d6 <rbegin_538>

0000060e <rend_538>:
     60e:	000d      	movs	r5, r1
     610:	4659      	mov	r1, fp
     612:	4683      	mov	fp, r0
     614:	4650      	mov	r0, sl
     616:	001c      	movs	r4, r3
     618:	464e      	mov	r6, r9
     61a:	4663      	mov	r3, ip
     61c:	921a      	str	r2, [sp, #104]	; 0x68
     61e:	931b      	str	r3, [sp, #108]	; 0x6c
     620:	971c      	str	r7, [sp, #112]	; 0x70
     622:	961d      	str	r6, [sp, #116]	; 0x74
     624:	941e      	str	r4, [sp, #120]	; 0x78
     626:	901f      	str	r0, [sp, #124]	; 0x7c
     628:	4658      	mov	r0, fp
     62a:	9020      	str	r0, [sp, #128]	; 0x80
     62c:	9121      	str	r1, [sp, #132]	; 0x84
     62e:	9522      	str	r5, [sp, #136]	; 0x88
     630:	4643      	mov	r3, r8
     632:	9323      	str	r3, [sp, #140]	; 0x8c
    m += ASCON_AEAD_RATE;
     634:	9b01      	ldr	r3, [sp, #4]
     636:	3308      	adds	r3, #8
     638:	9301      	str	r3, [sp, #4]
    c += ASCON_AEAD_RATE;
     63a:	9b02      	ldr	r3, [sp, #8]
     63c:	3308      	adds	r3, #8
     63e:	9302      	str	r3, [sp, #8]
    mlen -= ASCON_AEAD_RATE;
     640:	9a04      	ldr	r2, [sp, #16]
     642:	9b05      	ldr	r3, [sp, #20]
     644:	2008      	movs	r0, #8
     646:	4240      	negs	r0, r0
     648:	17c1      	asrs	r1, r0, #31
     64a:	1812      	adds	r2, r2, r0
     64c:	414b      	adcs	r3, r1
     64e:	9204      	str	r2, [sp, #16]
     650:	9305      	str	r3, [sp, #20]
  while (mlen >= ASCON_AEAD_RATE) {
     652:	2b00      	cmp	r3, #0
     654:	d000      	beq.n	658 <rend_538+0x4a>
     656:	e6d7      	b.n	408 <rend_301+0x6c>
     658:	9b04      	ldr	r3, [sp, #16]
     65a:	9c05      	ldr	r4, [sp, #20]
     65c:	2c00      	cmp	r4, #0
     65e:	d102      	bne.n	666 <rend_538+0x58>
     660:	2b07      	cmp	r3, #7
     662:	d900      	bls.n	666 <rend_538+0x58>
     664:	e6d0      	b.n	408 <rend_301+0x6c>
     666:	2208      	movs	r2, #8
     668:	4252      	negs	r2, r2
     66a:	17d3      	asrs	r3, r2, #31
     66c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
     66e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
     670:	18b6      	adds	r6, r6, r2
     672:	415f      	adcs	r7, r3
     674:	0779      	lsls	r1, r7, #29
     676:	08f0      	lsrs	r0, r6, #3
     678:	4308      	orrs	r0, r1
     67a:	08f9      	lsrs	r1, r7, #3
     67c:	1c44      	adds	r4, r0, #1
     67e:	00e4      	lsls	r4, r4, #3
     680:	9d13      	ldr	r5, [sp, #76]	; 0x4c
     682:	46ac      	mov	ip, r5
     684:	44a4      	add	ip, r4
     686:	4665      	mov	r5, ip
     688:	9513      	str	r5, [sp, #76]	; 0x4c
     68a:	9d16      	ldr	r5, [sp, #88]	; 0x58
     68c:	46ac      	mov	ip, r5
     68e:	4464      	add	r4, ip
     690:	4d46      	ldr	r5, [pc, #280]	; (7ac <rend_538+0x19e>)
     692:	47a8      	blx	r5
     694:	1980      	adds	r0, r0, r6
     696:	4179      	adcs	r1, r7
     698:	900e      	str	r0, [sp, #56]	; 0x38
     69a:	910f      	str	r1, [sp, #60]	; 0x3c
  *px ^= PAD(mlen);
     69c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
     69e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     6a0:	002b      	movs	r3, r5
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
     6a2:	2107      	movs	r1, #7
     6a4:	1b49      	subs	r1, r1, r5
     6a6:	00c9      	lsls	r1, r1, #3
     6a8:	2220      	movs	r2, #32
     6aa:	4252      	negs	r2, r2
     6ac:	1888      	adds	r0, r1, r2
     6ae:	d500      	bpl.n	6b2 <rend_538+0xa4>
     6b0:	e16e      	b.n	990 <rend_873+0x6e>
     6b2:	2580      	movs	r5, #128	; 0x80
     6b4:	4085      	lsls	r5, r0
     6b6:	2680      	movs	r6, #128	; 0x80
     6b8:	408e      	lsls	r6, r1
     6ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
     6bc:	4056      	eors	r6, r2
     6be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
     6c0:	4055      	eors	r5, r2
     6c2:	961a      	str	r6, [sp, #104]	; 0x68
     6c4:	951b      	str	r5, [sp, #108]	; 0x6c
  if (mlen) {
     6c6:	990e      	ldr	r1, [sp, #56]	; 0x38
     6c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     6ca:	0008      	movs	r0, r1
     6cc:	4310      	orrs	r0, r2
     6ce:	d06f      	beq.n	7b0 <rend_538+0x1a2>
  return ~0ull >> (64 - 8 * n);
     6d0:	2208      	movs	r2, #8
     6d2:	1ad3      	subs	r3, r2, r3
     6d4:	00db      	lsls	r3, r3, #3
     6d6:	3a28      	subs	r2, #40	; 0x28
     6d8:	189a      	adds	r2, r3, r2
     6da:	d500      	bpl.n	6de <rend_538+0xd0>
     6dc:	e15d      	b.n	99a <rend_873+0x78>
     6de:	2001      	movs	r0, #1
     6e0:	4240      	negs	r0, r0
     6e2:	40d0      	lsrs	r0, r2
     6e4:	9001      	str	r0, [sp, #4]
     6e6:	2201      	movs	r2, #1
     6e8:	4252      	negs	r2, r2
     6ea:	40da      	lsrs	r2, r3
     6ec:	4690      	mov	r8, r2
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     6ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     6f0:	681a      	ldr	r2, [r3, #0]
     6f2:	0011      	movs	r1, r2
     6f4:	9a01      	ldr	r2, [sp, #4]
     6f6:	4011      	ands	r1, r2
     6f8:	685b      	ldr	r3, [r3, #4]
     6fa:	4642      	mov	r2, r8
     6fc:	4013      	ands	r3, r2
  return U64TOWORD(x);
     6fe:	060f      	lsls	r7, r1, #24
     700:	0e1a      	lsrs	r2, r3, #24
     702:	9202      	str	r2, [sp, #8]
     704:	020a      	lsls	r2, r1, #8
     706:	20ff      	movs	r0, #255	; 0xff
     708:	0400      	lsls	r0, r0, #16
     70a:	4684      	mov	ip, r0
     70c:	4002      	ands	r2, r0
     70e:	4317      	orrs	r7, r2
     710:	46b9      	mov	r9, r7
     712:	0a0f      	lsrs	r7, r1, #8
     714:	061a      	lsls	r2, r3, #24
     716:	433a      	orrs	r2, r7
     718:	20ff      	movs	r0, #255	; 0xff
     71a:	0200      	lsls	r0, r0, #8
     71c:	4002      	ands	r2, r0
     71e:	464f      	mov	r7, r9
     720:	4317      	orrs	r7, r2
     722:	0e09      	lsrs	r1, r1, #24
     724:	021a      	lsls	r2, r3, #8
     726:	430a      	orrs	r2, r1
     728:	20ff      	movs	r0, #255	; 0xff
     72a:	4683      	mov	fp, r0
     72c:	4002      	ands	r2, r0
     72e:	433a      	orrs	r2, r7
     730:	0a18      	lsrs	r0, r3, #8
     732:	4681      	mov	r9, r0
     734:	0618      	lsls	r0, r3, #24
     736:	9f02      	ldr	r7, [sp, #8]
     738:	4307      	orrs	r7, r0
     73a:	021b      	lsls	r3, r3, #8
     73c:	430b      	orrs	r3, r1
     73e:	4661      	mov	r1, ip
     740:	400b      	ands	r3, r1
     742:	433b      	orrs	r3, r7
     744:	4649      	mov	r1, r9
     746:	20ff      	movs	r0, #255	; 0xff
     748:	0200      	lsls	r0, r0, #8
     74a:	4001      	ands	r1, r0
     74c:	430b      	orrs	r3, r1
    *px ^= LOAD(m, mlen);
     74e:	405e      	eors	r6, r3
     750:	406a      	eors	r2, r5
     752:	961a      	str	r6, [sp, #104]	; 0x68
     754:	921b      	str	r2, [sp, #108]	; 0x6c
  *(uint64_t*)bytes &= ~MASK(n);
     756:	6823      	ldr	r3, [r4, #0]
     758:	9901      	ldr	r1, [sp, #4]
     75a:	438b      	bics	r3, r1
     75c:	0018      	movs	r0, r3
     75e:	6863      	ldr	r3, [r4, #4]
     760:	4641      	mov	r1, r8
     762:	438b      	bics	r3, r1
  *(uint64_t*)bytes |= WORDTOU64(w);
     764:	0631      	lsls	r1, r6, #24
     766:	0e15      	lsrs	r5, r2, #24
     768:	4328      	orrs	r0, r5
     76a:	4319      	orrs	r1, r3
     76c:	0235      	lsls	r5, r6, #8
     76e:	4663      	mov	r3, ip
     770:	401d      	ands	r5, r3
     772:	4329      	orrs	r1, r5
     774:	0a35      	lsrs	r5, r6, #8
     776:	0613      	lsls	r3, r2, #24
     778:	432b      	orrs	r3, r5
     77a:	25ff      	movs	r5, #255	; 0xff
     77c:	022d      	lsls	r5, r5, #8
     77e:	402b      	ands	r3, r5
     780:	4319      	orrs	r1, r3
     782:	0e36      	lsrs	r6, r6, #24
     784:	0215      	lsls	r5, r2, #8
     786:	4335      	orrs	r5, r6
     788:	465b      	mov	r3, fp
     78a:	401d      	ands	r5, r3
     78c:	4329      	orrs	r1, r5
     78e:	0a15      	lsrs	r5, r2, #8
     790:	0613      	lsls	r3, r2, #24
     792:	4318      	orrs	r0, r3
     794:	0212      	lsls	r2, r2, #8
     796:	4316      	orrs	r6, r2
     798:	4663      	mov	r3, ip
     79a:	401e      	ands	r6, r3
     79c:	4330      	orrs	r0, r6
     79e:	27ff      	movs	r7, #255	; 0xff
     7a0:	023f      	lsls	r7, r7, #8
     7a2:	402f      	ands	r7, r5
     7a4:	4338      	orrs	r0, r7
     7a6:	6020      	str	r0, [r4, #0]
     7a8:	6061      	str	r1, [r4, #4]
     7aa:	e001      	b.n	7b0 <rend_538+0x1a2>
     7ac:	00006639 	.word	0x00006639
    s->x[1] ^= key->x[0];
     7b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
     7b2:	0019      	movs	r1, r3
     7b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
     7b6:	4059      	eors	r1, r3
     7b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
     7ba:	9812      	ldr	r0, [sp, #72]	; 0x48
     7bc:	4042      	eors	r2, r0
     7be:	4694      	mov	ip, r2
    s->x[2] ^= key->x[1];
     7c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
     7c2:	9201      	str	r2, [sp, #4]
     7c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
     7c6:	9c01      	ldr	r4, [sp, #4]
     7c8:	4062      	eors	r2, r4
     7ca:	0010      	movs	r0, r2
     7cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
     7ce:	9201      	str	r2, [sp, #4]
     7d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
     7d2:	4056      	eors	r6, r2
     7d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
     7d6:	4691      	mov	r9, r2
     7d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
     7da:	9b21      	ldr	r3, [sp, #132]	; 0x84
     7dc:	9c22      	ldr	r4, [sp, #136]	; 0x88
     7de:	9f23      	ldr	r7, [sp, #140]	; 0x8c
     7e0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
     7e2:	46b0      	mov	r8, r6
     7e4:	46ba      	mov	sl, r7
     7e6:	26f0      	movs	r6, #240	; 0xf0
     7e8:	469b      	mov	fp, r3

000007ea <rbegin_873>:
     7ea:	4070      	eors	r0, r6
     7ec:	b440      	push	{r6}
     7ee:	4065      	eors	r5, r4
     7f0:	4054      	eors	r4, r2
     7f2:	4048      	eors	r0, r1
     7f4:	43ef      	mvns	r7, r5
     7f6:	4327      	orrs	r7, r4
     7f8:	1c06      	adds	r6, r0, #0
     7fa:	438e      	bics	r6, r1
     7fc:	4075      	eors	r5, r6
     7fe:	43e6      	mvns	r6, r4
     800:	4316      	orrs	r6, r2
     802:	4070      	eors	r0, r6
     804:	1c0e      	adds	r6, r1, #0
     806:	43ae      	bics	r6, r5
     808:	4074      	eors	r4, r6
     80a:	1c16      	adds	r6, r2, #0
     80c:	4006      	ands	r6, r0
     80e:	404e      	eors	r6, r1
     810:	4057      	eors	r7, r2
     812:	4047      	eors	r7, r0
     814:	406e      	eors	r6, r5
     816:	4065      	eors	r5, r4
     818:	4649      	mov	r1, r9
     81a:	4662      	mov	r2, ip
     81c:	4681      	mov	r9, r0
     81e:	46ac      	mov	ip, r5
     820:	4645      	mov	r5, r8
     822:	4658      	mov	r0, fp
     824:	4653      	mov	r3, sl
     826:	46b8      	mov	r8, r7
     828:	46a3      	mov	fp, r4
     82a:	4059      	eors	r1, r3
     82c:	4043      	eors	r3, r0
     82e:	4055      	eors	r5, r2
     830:	43cf      	mvns	r7, r1
     832:	431f      	orrs	r7, r3
     834:	1c2c      	adds	r4, r5, #0
     836:	4394      	bics	r4, r2
     838:	4061      	eors	r1, r4
     83a:	43dc      	mvns	r4, r3
     83c:	4304      	orrs	r4, r0
     83e:	4065      	eors	r5, r4
     840:	1c14      	adds	r4, r2, #0
     842:	438c      	bics	r4, r1
     844:	4063      	eors	r3, r4
     846:	1c04      	adds	r4, r0, #0
     848:	402c      	ands	r4, r5
     84a:	4062      	eors	r2, r4
     84c:	4078      	eors	r0, r7
     84e:	4068      	eors	r0, r5
     850:	404a      	eors	r2, r1
     852:	4059      	eors	r1, r3
     854:	4682      	mov	sl, r0
     856:	4648      	mov	r0, r9
     858:	4689      	mov	r9, r1
     85a:	09ac      	lsrs	r4, r5, #6
     85c:	0681      	lsls	r1, r0, #26
     85e:	0987      	lsrs	r7, r0, #6
     860:	404c      	eors	r4, r1
     862:	06a9      	lsls	r1, r5, #26
     864:	404f      	eors	r7, r1
     866:	0869      	lsrs	r1, r5, #1
     868:	404c      	eors	r4, r1
     86a:	07c1      	lsls	r1, r0, #31
     86c:	404c      	eors	r4, r1
     86e:	0841      	lsrs	r1, r0, #1
     870:	404f      	eors	r7, r1
     872:	07e9      	lsls	r1, r5, #31
     874:	404f      	eors	r7, r1
     876:	4065      	eors	r5, r4
     878:	4078      	eors	r0, r7
     87a:	00d4      	lsls	r4, r2, #3
     87c:	0f71      	lsrs	r1, r6, #29
     87e:	00f7      	lsls	r7, r6, #3
     880:	404c      	eors	r4, r1
     882:	0f51      	lsrs	r1, r2, #29
     884:	404f      	eors	r7, r1
     886:	0651      	lsls	r1, r2, #25
     888:	404c      	eors	r4, r1
     88a:	09f1      	lsrs	r1, r6, #7
     88c:	404c      	eors	r4, r1
     88e:	0671      	lsls	r1, r6, #25
     890:	404f      	eors	r7, r1
     892:	09d1      	lsrs	r1, r2, #7
     894:	404f      	eors	r7, r1
     896:	4062      	eors	r2, r4
     898:	407e      	eors	r6, r7
     89a:	465c      	mov	r4, fp
     89c:	46b3      	mov	fp, r6
     89e:	05de      	lsls	r6, r3, #23
     8a0:	0a61      	lsrs	r1, r4, #9
     8a2:	05e7      	lsls	r7, r4, #23
     8a4:	404e      	eors	r6, r1
     8a6:	0a59      	lsrs	r1, r3, #9
     8a8:	404f      	eors	r7, r1
     8aa:	09d9      	lsrs	r1, r3, #7
     8ac:	404e      	eors	r6, r1
     8ae:	0661      	lsls	r1, r4, #25
     8b0:	404e      	eors	r6, r1
     8b2:	09e1      	lsrs	r1, r4, #7
     8b4:	404f      	eors	r7, r1
     8b6:	0659      	lsls	r1, r3, #25
     8b8:	404f      	eors	r7, r1
     8ba:	4073      	eors	r3, r6
     8bc:	407c      	eors	r4, r7
     8be:	4659      	mov	r1, fp
     8c0:	4656      	mov	r6, sl
     8c2:	469a      	mov	sl, r3
     8c4:	4693      	mov	fp, r2
     8c6:	4642      	mov	r2, r8
     8c8:	46a8      	mov	r8, r5
     8ca:	0c73      	lsrs	r3, r6, #17
     8cc:	03d5      	lsls	r5, r2, #15
     8ce:	0c57      	lsrs	r7, r2, #17
     8d0:	406b      	eors	r3, r5
     8d2:	03f5      	lsls	r5, r6, #15
     8d4:	406f      	eors	r7, r5
     8d6:	0ab5      	lsrs	r5, r6, #10
     8d8:	406b      	eors	r3, r5
     8da:	0595      	lsls	r5, r2, #22
     8dc:	406b      	eors	r3, r5
     8de:	0a95      	lsrs	r5, r2, #10
     8e0:	406f      	eors	r7, r5
     8e2:	05b5      	lsls	r5, r6, #22
     8e4:	406f      	eors	r7, r5
     8e6:	405e      	eors	r6, r3
     8e8:	407a      	eors	r2, r7
     8ea:	464f      	mov	r7, r9
     8ec:	4665      	mov	r5, ip
     8ee:	46a1      	mov	r9, r4
     8f0:	46dc      	mov	ip, fp
     8f2:	46b3      	mov	fp, r6
     8f4:	0f3c      	lsrs	r4, r7, #28
     8f6:	012e      	lsls	r6, r5, #4
     8f8:	0f2b      	lsrs	r3, r5, #28
     8fa:	4074      	eors	r4, r6
     8fc:	013e      	lsls	r6, r7, #4
     8fe:	4073      	eors	r3, r6
     900:	0cfe      	lsrs	r6, r7, #19
     902:	4074      	eors	r4, r6
     904:	036e      	lsls	r6, r5, #13
     906:	4074      	eors	r4, r6
     908:	0cee      	lsrs	r6, r5, #19
     90a:	4073      	eors	r3, r6
     90c:	037e      	lsls	r6, r7, #13
     90e:	4073      	eors	r3, r6
     910:	bc40      	pop	{r6}
     912:	4067      	eors	r7, r4
     914:	405d      	eors	r5, r3
     916:	464c      	mov	r4, r9
     918:	46b9      	mov	r9, r7
     91a:	3e0f      	subs	r6, #15
     91c:	2e3c      	cmp	r6, #60	; 0x3c
     91e:	d000      	beq.n	922 <rend_873>
     920:	e763      	b.n	7ea <rbegin_873>

00000922 <rend_873>:
     922:	465b      	mov	r3, fp
  s->x[3] ^= key->x[0];
     924:	9911      	ldr	r1, [sp, #68]	; 0x44
     926:	404a      	eors	r2, r1
     928:	9812      	ldr	r0, [sp, #72]	; 0x48
     92a:	4043      	eors	r3, r0
  memcpy(&x, bytes, n);
  return U64TOWORD(x);
}

forceinline void STOREBYTES(uint8_t* bytes, uint64_t w, int n) {
  uint64_t x = WORDTOU64(w);
     92c:	0611      	lsls	r1, r2, #24
     92e:	0e18      	lsrs	r0, r3, #24
     930:	0214      	lsls	r4, r2, #8
     932:	26ff      	movs	r6, #255	; 0xff
     934:	0436      	lsls	r6, r6, #16
     936:	4034      	ands	r4, r6
     938:	4321      	orrs	r1, r4
     93a:	0a15      	lsrs	r5, r2, #8
     93c:	061c      	lsls	r4, r3, #24
     93e:	432c      	orrs	r4, r5
     940:	25ff      	movs	r5, #255	; 0xff
     942:	022d      	lsls	r5, r5, #8
     944:	402c      	ands	r4, r5
     946:	4321      	orrs	r1, r4
     948:	0e12      	lsrs	r2, r2, #24
     94a:	021c      	lsls	r4, r3, #8
     94c:	4314      	orrs	r4, r2
     94e:	27ff      	movs	r7, #255	; 0xff
     950:	403c      	ands	r4, r7
     952:	4321      	orrs	r1, r4
     954:	0a1c      	lsrs	r4, r3, #8
     956:	061f      	lsls	r7, r3, #24
     958:	4338      	orrs	r0, r7
     95a:	021b      	lsls	r3, r3, #8
     95c:	4313      	orrs	r3, r2
     95e:	4033      	ands	r3, r6
     960:	4303      	orrs	r3, r0
     962:	4025      	ands	r5, r4
     964:	432b      	orrs	r3, r5
     966:	9318      	str	r3, [sp, #96]	; 0x60
     968:	9119      	str	r1, [sp, #100]	; 0x64
  ascon_final(&s, &key);
  /* set tag */
  STOREBYTES(c + mlen, s.x[3], 8);
     96a:	9b16      	ldr	r3, [sp, #88]	; 0x58
     96c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
     96e:	4694      	mov	ip, r2
     970:	4463      	add	r3, ip
     972:	0018      	movs	r0, r3
  memcpy(bytes, &x, n);
     974:	2208      	movs	r2, #8
     976:	a918      	add	r1, sp, #96	; 0x60
     978:	4b0e      	ldr	r3, [pc, #56]	; (9b4 <rend_873+0x92>)
     97a:	4798      	blx	r3
  //STOREBYTES(c + mlen + 8, s.x[4], 8);
  return 0;
}
     97c:	2000      	movs	r0, #0
     97e:	b025      	add	sp, #148	; 0x94
     980:	bc3c      	pop	{r2, r3, r4, r5}
     982:	4690      	mov	r8, r2
     984:	4699      	mov	r9, r3
     986:	46a2      	mov	sl, r4
     988:	46ab      	mov	fp, r5
     98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (mlen >= ASCON_AEAD_RATE) {
     98c:	9c16      	ldr	r4, [sp, #88]	; 0x58
     98e:	e685      	b.n	69c <rend_538+0x8e>
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
     990:	2020      	movs	r0, #32
     992:	1a40      	subs	r0, r0, r1
     994:	2580      	movs	r5, #128	; 0x80
     996:	40c5      	lsrs	r5, r0
     998:	e68d      	b.n	6b6 <rend_538+0xa8>
  return ~0ull >> (64 - 8 * n);
     99a:	2220      	movs	r2, #32
     99c:	1ad2      	subs	r2, r2, r3
     99e:	2001      	movs	r0, #1
     9a0:	4240      	negs	r0, r0
     9a2:	0001      	movs	r1, r0
     9a4:	4091      	lsls	r1, r2
     9a6:	000a      	movs	r2, r1
     9a8:	40d8      	lsrs	r0, r3
     9aa:	0001      	movs	r1, r0
     9ac:	4311      	orrs	r1, r2
     9ae:	9101      	str	r1, [sp, #4]
     9b0:	e699      	b.n	6e6 <rend_538+0xd8>
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	000066e9 	.word	0x000066e9

000009b8 <crypto_aead_decrypt>:

int crypto_aead_decrypt(unsigned char* m, unsigned long* mlen,
                        unsigned char* nsec, const unsigned char* c,
                        unsigned long clen, const unsigned char* ad,
                        unsigned long adlen, const unsigned char* npub,
                        const unsigned char* k) {
     9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ba:	46de      	mov	lr, fp
     9bc:	4657      	mov	r7, sl
     9be:	464e      	mov	r6, r9
     9c0:	4645      	mov	r5, r8
     9c2:	b5e0      	push	{r5, r6, r7, lr}
     9c4:	b0a3      	sub	sp, #140	; 0x8c
     9c6:	900f      	str	r0, [sp, #60]	; 0x3c
     9c8:	9314      	str	r3, [sp, #80]	; 0x50
     9ca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
     9cc:	4694      	mov	ip, r2
     9ce:	9830      	ldr	r0, [sp, #192]	; 0xc0
  ascon_state_t s;
  (void)nsec;
  if (clen < CRYPTO_ABYTES) return -1;
     9d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
     9d2:	2a07      	cmp	r2, #7
     9d4:	d801      	bhi.n	9da <crypto_aead_decrypt+0x22>
     9d6:	f000 fc86 	bl	12e6 <rend_1990+0xc8>
  *mlen = clen = clen - CRYPTO_ABYTES;
     9da:	3a08      	subs	r2, #8
     9dc:	9215      	str	r2, [sp, #84]	; 0x54
     9de:	600a      	str	r2, [r1, #0]
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     9e0:	6802      	ldr	r2, [r0, #0]
     9e2:	6843      	ldr	r3, [r0, #4]
  return U64TOWORD(x);
     9e4:	0611      	lsls	r1, r2, #24
     9e6:	0e1d      	lsrs	r5, r3, #24
     9e8:	0214      	lsls	r4, r2, #8
     9ea:	27ff      	movs	r7, #255	; 0xff
     9ec:	043f      	lsls	r7, r7, #16
     9ee:	403c      	ands	r4, r7
     9f0:	430c      	orrs	r4, r1
     9f2:	0a16      	lsrs	r6, r2, #8
     9f4:	0619      	lsls	r1, r3, #24
     9f6:	4331      	orrs	r1, r6
     9f8:	26ff      	movs	r6, #255	; 0xff
     9fa:	0236      	lsls	r6, r6, #8
     9fc:	4031      	ands	r1, r6
     9fe:	430c      	orrs	r4, r1
     a00:	46a1      	mov	r9, r4
     a02:	0e12      	lsrs	r2, r2, #24
     a04:	0219      	lsls	r1, r3, #8
     a06:	4311      	orrs	r1, r2
     a08:	4688      	mov	r8, r1
     a0a:	21ff      	movs	r1, #255	; 0xff
     a0c:	468b      	mov	fp, r1
     a0e:	4641      	mov	r1, r8
     a10:	465c      	mov	r4, fp
     a12:	4021      	ands	r1, r4
     a14:	464c      	mov	r4, r9
     a16:	4321      	orrs	r1, r4
     a18:	9111      	str	r1, [sp, #68]	; 0x44
     a1a:	0a1c      	lsrs	r4, r3, #8
     a1c:	46a0      	mov	r8, r4
     a1e:	061c      	lsls	r4, r3, #24
     a20:	432c      	orrs	r4, r5
     a22:	021b      	lsls	r3, r3, #8
     a24:	431a      	orrs	r2, r3
     a26:	403a      	ands	r2, r7
     a28:	4314      	orrs	r4, r2
     a2a:	4645      	mov	r5, r8
     a2c:	4035      	ands	r5, r6
     a2e:	432c      	orrs	r4, r5
     a30:	9410      	str	r4, [sp, #64]	; 0x40
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     a32:	6882      	ldr	r2, [r0, #8]
     a34:	68c3      	ldr	r3, [r0, #12]
  return U64TOWORD(x);
     a36:	0610      	lsls	r0, r2, #24
     a38:	0e1d      	lsrs	r5, r3, #24
     a3a:	0214      	lsls	r4, r2, #8
     a3c:	403c      	ands	r4, r7
     a3e:	4304      	orrs	r4, r0
     a40:	0a11      	lsrs	r1, r2, #8
     a42:	0618      	lsls	r0, r3, #24
     a44:	4308      	orrs	r0, r1
     a46:	4030      	ands	r0, r6
     a48:	4304      	orrs	r4, r0
     a4a:	0e12      	lsrs	r2, r2, #24
     a4c:	0218      	lsls	r0, r3, #8
     a4e:	4310      	orrs	r0, r2
     a50:	4659      	mov	r1, fp
     a52:	4008      	ands	r0, r1
     a54:	4304      	orrs	r4, r0
     a56:	9413      	str	r4, [sp, #76]	; 0x4c
     a58:	0a1c      	lsrs	r4, r3, #8
     a5a:	0618      	lsls	r0, r3, #24
     a5c:	4305      	orrs	r5, r0
     a5e:	021b      	lsls	r3, r3, #8
     a60:	431a      	orrs	r2, r3
     a62:	403a      	ands	r2, r7
     a64:	432a      	orrs	r2, r5
     a66:	4034      	ands	r4, r6
     a68:	0015      	movs	r5, r2
     a6a:	4325      	orrs	r5, r4
     a6c:	9512      	str	r5, [sp, #72]	; 0x48
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     a6e:	4661      	mov	r1, ip
     a70:	680c      	ldr	r4, [r1, #0]
     a72:	684b      	ldr	r3, [r1, #4]
  return U64TOWORD(x);
     a74:	0625      	lsls	r5, r4, #24
     a76:	0e1a      	lsrs	r2, r3, #24
     a78:	0220      	lsls	r0, r4, #8
     a7a:	4038      	ands	r0, r7
     a7c:	4328      	orrs	r0, r5
     a7e:	0a21      	lsrs	r1, r4, #8
     a80:	061d      	lsls	r5, r3, #24
     a82:	430d      	orrs	r5, r1
     a84:	4035      	ands	r5, r6
     a86:	4328      	orrs	r0, r5
     a88:	0e24      	lsrs	r4, r4, #24
     a8a:	021d      	lsls	r5, r3, #8
     a8c:	4325      	orrs	r5, r4
     a8e:	4659      	mov	r1, fp
     a90:	400d      	ands	r5, r1
     a92:	4328      	orrs	r0, r5
     a94:	0a1d      	lsrs	r5, r3, #8
     a96:	0619      	lsls	r1, r3, #24
     a98:	430a      	orrs	r2, r1
     a9a:	021b      	lsls	r3, r3, #8
     a9c:	431c      	orrs	r4, r3
     a9e:	403c      	ands	r4, r7
     aa0:	4322      	orrs	r2, r4
     aa2:	4035      	ands	r5, r6
     aa4:	0011      	movs	r1, r2
     aa6:	4329      	orrs	r1, r5
     aa8:	468a      	mov	sl, r1
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     aaa:	4661      	mov	r1, ip
     aac:	688d      	ldr	r5, [r1, #8]
     aae:	68cc      	ldr	r4, [r1, #12]
  return U64TOWORD(x);
     ab0:	062a      	lsls	r2, r5, #24
     ab2:	0e21      	lsrs	r1, r4, #24
     ab4:	4688      	mov	r8, r1
     ab6:	022b      	lsls	r3, r5, #8
     ab8:	403b      	ands	r3, r7
     aba:	431a      	orrs	r2, r3
     abc:	0a29      	lsrs	r1, r5, #8
     abe:	0623      	lsls	r3, r4, #24
     ac0:	430b      	orrs	r3, r1
     ac2:	4033      	ands	r3, r6
     ac4:	4313      	orrs	r3, r2
     ac6:	0e2d      	lsrs	r5, r5, #24
     ac8:	0222      	lsls	r2, r4, #8
     aca:	432a      	orrs	r2, r5
     acc:	4659      	mov	r1, fp
     ace:	4011      	ands	r1, r2
     ad0:	4319      	orrs	r1, r3
     ad2:	0a23      	lsrs	r3, r4, #8
     ad4:	469c      	mov	ip, r3
     ad6:	0623      	lsls	r3, r4, #24
     ad8:	4642      	mov	r2, r8
     ada:	4313      	orrs	r3, r2
     adc:	0224      	lsls	r4, r4, #8
     ade:	4325      	orrs	r5, r4
     ae0:	403d      	ands	r5, r7
     ae2:	432b      	orrs	r3, r5
     ae4:	4667      	mov	r7, ip
     ae6:	403e      	ands	r6, r7
     ae8:	4333      	orrs	r3, r6
     aea:	2600      	movs	r6, #0
     aec:	46b0      	mov	r8, r6
     aee:	4e6f      	ldr	r6, [pc, #444]	; (cac <rend_1362+0x66>)
     af0:	46b4      	mov	ip, r6
     af2:	9f10      	ldr	r7, [sp, #64]	; 0x40
     af4:	9a11      	ldr	r2, [sp, #68]	; 0x44
     af6:	4691      	mov	r9, r2
     af8:	9d12      	ldr	r5, [sp, #72]	; 0x48
     afa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
     afc:	4652      	mov	r2, sl
     afe:	26f0      	movs	r6, #240	; 0xf0
     b00:	9600      	str	r6, [sp, #0]
     b02:	4646      	mov	r6, r8
     b04:	46c8      	mov	r8, r9
     b06:	46a2      	mov	sl, r4
     b08:	4683      	mov	fp, r0
     b0a:	4689      	mov	r9, r1
     b0c:	21f0      	movs	r1, #240	; 0xf0

00000b0e <rbegin_1362>:
     b0e:	404d      	eors	r5, r1
     b10:	b402      	push	{r1}
     b12:	405e      	eors	r6, r3
     b14:	4053      	eors	r3, r2
     b16:	407d      	eors	r5, r7
     b18:	43f0      	mvns	r0, r6
     b1a:	4318      	orrs	r0, r3
     b1c:	1c29      	adds	r1, r5, #0
     b1e:	43b9      	bics	r1, r7
     b20:	404e      	eors	r6, r1
     b22:	43d9      	mvns	r1, r3
     b24:	4311      	orrs	r1, r2
     b26:	404d      	eors	r5, r1
     b28:	1c39      	adds	r1, r7, #0
     b2a:	43b1      	bics	r1, r6
     b2c:	404b      	eors	r3, r1
     b2e:	1c11      	adds	r1, r2, #0
     b30:	4029      	ands	r1, r5
     b32:	4079      	eors	r1, r7
     b34:	4050      	eors	r0, r2
     b36:	4068      	eors	r0, r5
     b38:	4071      	eors	r1, r6
     b3a:	405e      	eors	r6, r3
     b3c:	4667      	mov	r7, ip
     b3e:	4642      	mov	r2, r8
     b40:	46ac      	mov	ip, r5
     b42:	46b0      	mov	r8, r6
     b44:	4656      	mov	r6, sl
     b46:	465d      	mov	r5, fp
     b48:	464c      	mov	r4, r9
     b4a:	4682      	mov	sl, r0
     b4c:	469b      	mov	fp, r3
     b4e:	4067      	eors	r7, r4
     b50:	406c      	eors	r4, r5
     b52:	4056      	eors	r6, r2
     b54:	43f8      	mvns	r0, r7
     b56:	4320      	orrs	r0, r4
     b58:	1c33      	adds	r3, r6, #0
     b5a:	4393      	bics	r3, r2
     b5c:	405f      	eors	r7, r3
     b5e:	43e3      	mvns	r3, r4
     b60:	432b      	orrs	r3, r5
     b62:	405e      	eors	r6, r3
     b64:	1c13      	adds	r3, r2, #0
     b66:	43bb      	bics	r3, r7
     b68:	405c      	eors	r4, r3
     b6a:	1c2b      	adds	r3, r5, #0
     b6c:	4033      	ands	r3, r6
     b6e:	405a      	eors	r2, r3
     b70:	4045      	eors	r5, r0
     b72:	4075      	eors	r5, r6
     b74:	407a      	eors	r2, r7
     b76:	4067      	eors	r7, r4
     b78:	46a9      	mov	r9, r5
     b7a:	4665      	mov	r5, ip
     b7c:	46bc      	mov	ip, r7
     b7e:	09b3      	lsrs	r3, r6, #6
     b80:	06af      	lsls	r7, r5, #26
     b82:	09a8      	lsrs	r0, r5, #6
     b84:	407b      	eors	r3, r7
     b86:	06b7      	lsls	r7, r6, #26
     b88:	4078      	eors	r0, r7
     b8a:	0877      	lsrs	r7, r6, #1
     b8c:	407b      	eors	r3, r7
     b8e:	07ef      	lsls	r7, r5, #31
     b90:	407b      	eors	r3, r7
     b92:	086f      	lsrs	r7, r5, #1
     b94:	4078      	eors	r0, r7
     b96:	07f7      	lsls	r7, r6, #31
     b98:	4078      	eors	r0, r7
     b9a:	405e      	eors	r6, r3
     b9c:	4045      	eors	r5, r0
     b9e:	00d3      	lsls	r3, r2, #3
     ba0:	0f4f      	lsrs	r7, r1, #29
     ba2:	00c8      	lsls	r0, r1, #3
     ba4:	407b      	eors	r3, r7
     ba6:	0f57      	lsrs	r7, r2, #29
     ba8:	4078      	eors	r0, r7
     baa:	0657      	lsls	r7, r2, #25
     bac:	407b      	eors	r3, r7
     bae:	09cf      	lsrs	r7, r1, #7
     bb0:	407b      	eors	r3, r7
     bb2:	064f      	lsls	r7, r1, #25
     bb4:	4078      	eors	r0, r7
     bb6:	09d7      	lsrs	r7, r2, #7
     bb8:	4078      	eors	r0, r7
     bba:	405a      	eors	r2, r3
     bbc:	4041      	eors	r1, r0
     bbe:	465b      	mov	r3, fp
     bc0:	468b      	mov	fp, r1
     bc2:	05e1      	lsls	r1, r4, #23
     bc4:	0a5f      	lsrs	r7, r3, #9
     bc6:	05d8      	lsls	r0, r3, #23
     bc8:	4079      	eors	r1, r7
     bca:	0a67      	lsrs	r7, r4, #9
     bcc:	4078      	eors	r0, r7
     bce:	09e7      	lsrs	r7, r4, #7
     bd0:	4079      	eors	r1, r7
     bd2:	065f      	lsls	r7, r3, #25
     bd4:	4079      	eors	r1, r7
     bd6:	09df      	lsrs	r7, r3, #7
     bd8:	4078      	eors	r0, r7
     bda:	0667      	lsls	r7, r4, #25
     bdc:	4078      	eors	r0, r7
     bde:	404c      	eors	r4, r1
     be0:	4043      	eors	r3, r0
     be2:	465f      	mov	r7, fp
     be4:	4649      	mov	r1, r9
     be6:	46a1      	mov	r9, r4
     be8:	4693      	mov	fp, r2
     bea:	4652      	mov	r2, sl
     bec:	46b2      	mov	sl, r6
     bee:	0c4c      	lsrs	r4, r1, #17
     bf0:	03d6      	lsls	r6, r2, #15
     bf2:	0c50      	lsrs	r0, r2, #17
     bf4:	4074      	eors	r4, r6
     bf6:	03ce      	lsls	r6, r1, #15
     bf8:	4070      	eors	r0, r6
     bfa:	0a8e      	lsrs	r6, r1, #10
     bfc:	4074      	eors	r4, r6
     bfe:	0596      	lsls	r6, r2, #22
     c00:	4074      	eors	r4, r6
     c02:	0a96      	lsrs	r6, r2, #10
     c04:	4070      	eors	r0, r6
     c06:	058e      	lsls	r6, r1, #22
     c08:	4070      	eors	r0, r6
     c0a:	4061      	eors	r1, r4
     c0c:	4042      	eors	r2, r0
     c0e:	4660      	mov	r0, ip
     c10:	4646      	mov	r6, r8
     c12:	469c      	mov	ip, r3
     c14:	46d8      	mov	r8, fp
     c16:	468b      	mov	fp, r1
     c18:	0f03      	lsrs	r3, r0, #28
     c1a:	0131      	lsls	r1, r6, #4
     c1c:	0f34      	lsrs	r4, r6, #28
     c1e:	404b      	eors	r3, r1
     c20:	0101      	lsls	r1, r0, #4
     c22:	404c      	eors	r4, r1
     c24:	0cc1      	lsrs	r1, r0, #19
     c26:	404b      	eors	r3, r1
     c28:	0371      	lsls	r1, r6, #13
     c2a:	404b      	eors	r3, r1
     c2c:	0cf1      	lsrs	r1, r6, #19
     c2e:	404c      	eors	r4, r1
     c30:	0341      	lsls	r1, r0, #13
     c32:	404c      	eors	r4, r1
     c34:	bc02      	pop	{r1}
     c36:	4058      	eors	r0, r3
     c38:	4066      	eors	r6, r4
     c3a:	4663      	mov	r3, ip
     c3c:	4684      	mov	ip, r0
     c3e:	390f      	subs	r1, #15
     c40:	293c      	cmp	r1, #60	; 0x3c
     c42:	d000      	beq.n	c46 <rend_1362>
     c44:	e763      	b.n	b0e <rbegin_1362>

00000c46 <rend_1362>:
     c46:	4649      	mov	r1, r9
     c48:	4658      	mov	r0, fp
     c4a:	4654      	mov	r4, sl
     c4c:	46c1      	mov	r9, r8
     c4e:	9618      	str	r6, [sp, #96]	; 0x60
     c50:	4666      	mov	r6, ip
     c52:	9619      	str	r6, [sp, #100]	; 0x64
     c54:	971a      	str	r7, [sp, #104]	; 0x68
     c56:	464e      	mov	r6, r9
     c58:	961b      	str	r6, [sp, #108]	; 0x6c
     c5a:	951c      	str	r5, [sp, #112]	; 0x70
     c5c:	941d      	str	r4, [sp, #116]	; 0x74
  s->x[3] ^= key->x[0];
     c5e:	9e10      	ldr	r6, [sp, #64]	; 0x40
     c60:	4072      	eors	r2, r6
     c62:	921e      	str	r2, [sp, #120]	; 0x78
     c64:	9e11      	ldr	r6, [sp, #68]	; 0x44
     c66:	4070      	eors	r0, r6
     c68:	901f      	str	r0, [sp, #124]	; 0x7c
  s->x[4] ^= key->x[1];
     c6a:	9d12      	ldr	r5, [sp, #72]	; 0x48
     c6c:	406b      	eors	r3, r5
     c6e:	9320      	str	r3, [sp, #128]	; 0x80
     c70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
     c72:	4061      	eors	r1, r4
     c74:	9121      	str	r1, [sp, #132]	; 0x84
  /* perform ascon computation */
  ascon_key_t key;
  ascon_loadkey(&key, k);
  ascon_initaead(&s, &key, npub);
  //ascon_adata(&s, ad, adlen);
  ascon_decrypt(&s, m, c, clen);
     c76:	9a15      	ldr	r2, [sp, #84]	; 0x54
     c78:	920c      	str	r2, [sp, #48]	; 0x30
     c7a:	2200      	movs	r2, #0
     c7c:	920d      	str	r2, [sp, #52]	; 0x34
  while (clen >= ASCON_AEAD_RATE) {
     c7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     c80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     c82:	2b00      	cmp	r3, #0
     c84:	d001      	beq.n	c8a <rend_1362+0x44>
     c86:	f000 fb15 	bl	12b4 <rend_1990+0x96>
     c8a:	2a07      	cmp	r2, #7
     c8c:	d801      	bhi.n	c92 <rend_1362+0x4c>
     c8e:	f000 fb11 	bl	12b4 <rend_1990+0x96>
     c92:	9202      	str	r2, [sp, #8]
     c94:	9303      	str	r3, [sp, #12]
     c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     c98:	9b14      	ldr	r3, [sp, #80]	; 0x50
     c9a:	4698      	mov	r8, r3
     c9c:	23ff      	movs	r3, #255	; 0xff
     c9e:	021b      	lsls	r3, r3, #8
     ca0:	9300      	str	r3, [sp, #0]
    clen -= ASCON_AEAD_RATE;
     ca2:	9201      	str	r2, [sp, #4]
     ca4:	4643      	mov	r3, r8
     ca6:	9304      	str	r3, [sp, #16]
     ca8:	e002      	b.n	cb0 <rend_1362+0x6a>
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	80400c06 	.word	0x80400c06
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     cb0:	9b04      	ldr	r3, [sp, #16]
     cb2:	6818      	ldr	r0, [r3, #0]
     cb4:	6859      	ldr	r1, [r3, #4]
  return U64TOWORD(x);
     cb6:	0603      	lsls	r3, r0, #24
     cb8:	0e0a      	lsrs	r2, r1, #24
     cba:	0206      	lsls	r6, r0, #8
     cbc:	24ff      	movs	r4, #255	; 0xff
     cbe:	0424      	lsls	r4, r4, #16
     cc0:	4026      	ands	r6, r4
     cc2:	4333      	orrs	r3, r6
     cc4:	0a07      	lsrs	r7, r0, #8
     cc6:	060e      	lsls	r6, r1, #24
     cc8:	433e      	orrs	r6, r7
     cca:	9d00      	ldr	r5, [sp, #0]
     ccc:	402e      	ands	r6, r5
     cce:	4333      	orrs	r3, r6
     cd0:	0e00      	lsrs	r0, r0, #24
     cd2:	020e      	lsls	r6, r1, #8
     cd4:	4306      	orrs	r6, r0
     cd6:	24ff      	movs	r4, #255	; 0xff
     cd8:	4026      	ands	r6, r4
     cda:	4333      	orrs	r3, r6
     cdc:	0a0e      	lsrs	r6, r1, #8
     cde:	060f      	lsls	r7, r1, #24
     ce0:	433a      	orrs	r2, r7
     ce2:	0209      	lsls	r1, r1, #8
     ce4:	4301      	orrs	r1, r0
     ce6:	20ff      	movs	r0, #255	; 0xff
     ce8:	0400      	lsls	r0, r0, #16
     cea:	4001      	ands	r1, r0
     cec:	430a      	orrs	r2, r1
     cee:	402e      	ands	r6, r5
     cf0:	4332      	orrs	r2, r6
    s->x[0] ^= cx;
     cf2:	9d18      	ldr	r5, [sp, #96]	; 0x60
     cf4:	4055      	eors	r5, r2
     cf6:	9919      	ldr	r1, [sp, #100]	; 0x64
     cf8:	4059      	eors	r1, r3
  *(uint64_t*)bytes |= WORDTOU64(w);
     cfa:	062f      	lsls	r7, r5, #24
     cfc:	0e0e      	lsrs	r6, r1, #24
     cfe:	0228      	lsls	r0, r5, #8
     d00:	24ff      	movs	r4, #255	; 0xff
     d02:	0424      	lsls	r4, r4, #16
     d04:	4020      	ands	r0, r4
     d06:	4307      	orrs	r7, r0
     d08:	0a28      	lsrs	r0, r5, #8
     d0a:	4680      	mov	r8, r0
     d0c:	0608      	lsls	r0, r1, #24
     d0e:	4644      	mov	r4, r8
     d10:	4320      	orrs	r0, r4
     d12:	9c00      	ldr	r4, [sp, #0]
     d14:	4020      	ands	r0, r4
     d16:	4338      	orrs	r0, r7
     d18:	0e2d      	lsrs	r5, r5, #24
     d1a:	020f      	lsls	r7, r1, #8
     d1c:	432f      	orrs	r7, r5
     d1e:	24ff      	movs	r4, #255	; 0xff
     d20:	4027      	ands	r7, r4
     d22:	4338      	orrs	r0, r7
     d24:	0a0f      	lsrs	r7, r1, #8
     d26:	060c      	lsls	r4, r1, #24
     d28:	4326      	orrs	r6, r4
     d2a:	0209      	lsls	r1, r1, #8
     d2c:	4329      	orrs	r1, r5
     d2e:	24ff      	movs	r4, #255	; 0xff
     d30:	0424      	lsls	r4, r4, #16
     d32:	4021      	ands	r1, r4
     d34:	4331      	orrs	r1, r6
     d36:	9c00      	ldr	r4, [sp, #0]
     d38:	4027      	ands	r7, r4
     d3a:	4339      	orrs	r1, r7
     d3c:	9c01      	ldr	r4, [sp, #4]
     d3e:	6021      	str	r1, [r4, #0]
     d40:	6060      	str	r0, [r4, #4]
     d42:	991a      	ldr	r1, [sp, #104]	; 0x68
     d44:	9105      	str	r1, [sp, #20]
     d46:	991b      	ldr	r1, [sp, #108]	; 0x6c
     d48:	9106      	str	r1, [sp, #24]
     d4a:	991c      	ldr	r1, [sp, #112]	; 0x70
     d4c:	9107      	str	r1, [sp, #28]
     d4e:	991d      	ldr	r1, [sp, #116]	; 0x74
     d50:	9108      	str	r1, [sp, #32]
     d52:	991e      	ldr	r1, [sp, #120]	; 0x78
     d54:	9109      	str	r1, [sp, #36]	; 0x24
     d56:	991f      	ldr	r1, [sp, #124]	; 0x7c
     d58:	910a      	str	r1, [sp, #40]	; 0x28
     d5a:	9920      	ldr	r1, [sp, #128]	; 0x80
     d5c:	910b      	str	r1, [sp, #44]	; 0x2c
     d5e:	9921      	ldr	r1, [sp, #132]	; 0x84
     d60:	910e      	str	r1, [sp, #56]	; 0x38
     d62:	9905      	ldr	r1, [sp, #20]
     d64:	468c      	mov	ip, r1
     d66:	9f06      	ldr	r7, [sp, #24]
     d68:	9907      	ldr	r1, [sp, #28]
     d6a:	4689      	mov	r9, r1
     d6c:	9e08      	ldr	r6, [sp, #32]
     d6e:	9809      	ldr	r0, [sp, #36]	; 0x24
     d70:	4682      	mov	sl, r0
     d72:	980a      	ldr	r0, [sp, #40]	; 0x28
     d74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
     d76:	990e      	ldr	r1, [sp, #56]	; 0x38
     d78:	2496      	movs	r4, #150	; 0x96
     d7a:	9405      	str	r4, [sp, #20]
     d7c:	4698      	mov	r8, r3
     d7e:	4664      	mov	r4, ip
     d80:	46bc      	mov	ip, r7
     d82:	464b      	mov	r3, r9
     d84:	46b1      	mov	r9, r6
     d86:	4656      	mov	r6, sl
     d88:	4682      	mov	sl, r0
     d8a:	468b      	mov	fp, r1
     d8c:	2196      	movs	r1, #150	; 0x96

00000d8e <rbegin_1615>:
     d8e:	404b      	eors	r3, r1
     d90:	b402      	push	{r1}
     d92:	406a      	eors	r2, r5
     d94:	4075      	eors	r5, r6
     d96:	4063      	eors	r3, r4
     d98:	43d0      	mvns	r0, r2
     d9a:	4328      	orrs	r0, r5
     d9c:	1c19      	adds	r1, r3, #0
     d9e:	43a1      	bics	r1, r4
     da0:	404a      	eors	r2, r1
     da2:	43e9      	mvns	r1, r5
     da4:	4331      	orrs	r1, r6
     da6:	404b      	eors	r3, r1
     da8:	1c21      	adds	r1, r4, #0
     daa:	4391      	bics	r1, r2
     dac:	404d      	eors	r5, r1
     dae:	1c31      	adds	r1, r6, #0
     db0:	4019      	ands	r1, r3
     db2:	4061      	eors	r1, r4
     db4:	4070      	eors	r0, r6
     db6:	4058      	eors	r0, r3
     db8:	4051      	eors	r1, r2
     dba:	406a      	eors	r2, r5
     dbc:	4644      	mov	r4, r8
     dbe:	4666      	mov	r6, ip
     dc0:	4698      	mov	r8, r3
     dc2:	4694      	mov	ip, r2
     dc4:	464a      	mov	r2, r9
     dc6:	4653      	mov	r3, sl
     dc8:	465f      	mov	r7, fp
     dca:	4681      	mov	r9, r0
     dcc:	46aa      	mov	sl, r5
     dce:	407c      	eors	r4, r7
     dd0:	405f      	eors	r7, r3
     dd2:	4072      	eors	r2, r6
     dd4:	43e0      	mvns	r0, r4
     dd6:	4338      	orrs	r0, r7
     dd8:	1c15      	adds	r5, r2, #0
     dda:	43b5      	bics	r5, r6
     ddc:	406c      	eors	r4, r5
     dde:	43fd      	mvns	r5, r7
     de0:	431d      	orrs	r5, r3
     de2:	406a      	eors	r2, r5
     de4:	1c35      	adds	r5, r6, #0
     de6:	43a5      	bics	r5, r4
     de8:	406f      	eors	r7, r5
     dea:	1c1d      	adds	r5, r3, #0
     dec:	4015      	ands	r5, r2
     dee:	406e      	eors	r6, r5
     df0:	4043      	eors	r3, r0
     df2:	4053      	eors	r3, r2
     df4:	4066      	eors	r6, r4
     df6:	407c      	eors	r4, r7
     df8:	469b      	mov	fp, r3
     dfa:	4643      	mov	r3, r8
     dfc:	46a0      	mov	r8, r4
     dfe:	0995      	lsrs	r5, r2, #6
     e00:	069c      	lsls	r4, r3, #26
     e02:	0998      	lsrs	r0, r3, #6
     e04:	4065      	eors	r5, r4
     e06:	0694      	lsls	r4, r2, #26
     e08:	4060      	eors	r0, r4
     e0a:	0854      	lsrs	r4, r2, #1
     e0c:	4065      	eors	r5, r4
     e0e:	07dc      	lsls	r4, r3, #31
     e10:	4065      	eors	r5, r4
     e12:	085c      	lsrs	r4, r3, #1
     e14:	4060      	eors	r0, r4
     e16:	07d4      	lsls	r4, r2, #31
     e18:	4060      	eors	r0, r4
     e1a:	406a      	eors	r2, r5
     e1c:	4043      	eors	r3, r0
     e1e:	00f5      	lsls	r5, r6, #3
     e20:	0f4c      	lsrs	r4, r1, #29
     e22:	00c8      	lsls	r0, r1, #3
     e24:	4065      	eors	r5, r4
     e26:	0f74      	lsrs	r4, r6, #29
     e28:	4060      	eors	r0, r4
     e2a:	0674      	lsls	r4, r6, #25
     e2c:	4065      	eors	r5, r4
     e2e:	09cc      	lsrs	r4, r1, #7
     e30:	4065      	eors	r5, r4
     e32:	064c      	lsls	r4, r1, #25
     e34:	4060      	eors	r0, r4
     e36:	09f4      	lsrs	r4, r6, #7
     e38:	4060      	eors	r0, r4
     e3a:	406e      	eors	r6, r5
     e3c:	4041      	eors	r1, r0
     e3e:	4655      	mov	r5, sl
     e40:	468a      	mov	sl, r1
     e42:	05f9      	lsls	r1, r7, #23
     e44:	0a6c      	lsrs	r4, r5, #9
     e46:	05e8      	lsls	r0, r5, #23
     e48:	4061      	eors	r1, r4
     e4a:	0a7c      	lsrs	r4, r7, #9
     e4c:	4060      	eors	r0, r4
     e4e:	09fc      	lsrs	r4, r7, #7
     e50:	4061      	eors	r1, r4
     e52:	066c      	lsls	r4, r5, #25
     e54:	4061      	eors	r1, r4
     e56:	09ec      	lsrs	r4, r5, #7
     e58:	4060      	eors	r0, r4
     e5a:	067c      	lsls	r4, r7, #25
     e5c:	4060      	eors	r0, r4
     e5e:	404f      	eors	r7, r1
     e60:	4045      	eors	r5, r0
     e62:	4654      	mov	r4, sl
     e64:	4659      	mov	r1, fp
     e66:	46bb      	mov	fp, r7
     e68:	46b2      	mov	sl, r6
     e6a:	464e      	mov	r6, r9
     e6c:	4691      	mov	r9, r2
     e6e:	0c4f      	lsrs	r7, r1, #17
     e70:	03f2      	lsls	r2, r6, #15
     e72:	0c70      	lsrs	r0, r6, #17
     e74:	4057      	eors	r7, r2
     e76:	03ca      	lsls	r2, r1, #15
     e78:	4050      	eors	r0, r2
     e7a:	0a8a      	lsrs	r2, r1, #10
     e7c:	4057      	eors	r7, r2
     e7e:	05b2      	lsls	r2, r6, #22
     e80:	4057      	eors	r7, r2
     e82:	0ab2      	lsrs	r2, r6, #10
     e84:	4050      	eors	r0, r2
     e86:	058a      	lsls	r2, r1, #22
     e88:	4050      	eors	r0, r2
     e8a:	4079      	eors	r1, r7
     e8c:	4046      	eors	r6, r0
     e8e:	4640      	mov	r0, r8
     e90:	4662      	mov	r2, ip
     e92:	46a8      	mov	r8, r5
     e94:	46d4      	mov	ip, sl
     e96:	468a      	mov	sl, r1
     e98:	0f05      	lsrs	r5, r0, #28
     e9a:	0111      	lsls	r1, r2, #4
     e9c:	0f17      	lsrs	r7, r2, #28
     e9e:	404d      	eors	r5, r1
     ea0:	0101      	lsls	r1, r0, #4
     ea2:	404f      	eors	r7, r1
     ea4:	0cc1      	lsrs	r1, r0, #19
     ea6:	404d      	eors	r5, r1
     ea8:	0351      	lsls	r1, r2, #13
     eaa:	404d      	eors	r5, r1
     eac:	0cd1      	lsrs	r1, r2, #19
     eae:	404f      	eors	r7, r1
     eb0:	0341      	lsls	r1, r0, #13
     eb2:	404f      	eors	r7, r1
     eb4:	bc02      	pop	{r1}
     eb6:	4068      	eors	r0, r5
     eb8:	407a      	eors	r2, r7
     eba:	4645      	mov	r5, r8
     ebc:	4680      	mov	r8, r0
     ebe:	390f      	subs	r1, #15
     ec0:	293c      	cmp	r1, #60	; 0x3c
     ec2:	d000      	beq.n	ec6 <rend_1615>
     ec4:	e763      	b.n	d8e <rbegin_1615>

00000ec6 <rend_1615>:
     ec6:	4659      	mov	r1, fp
     ec8:	4650      	mov	r0, sl
     eca:	46b2      	mov	sl, r6
     ecc:	464e      	mov	r6, r9
     ece:	4699      	mov	r9, r3
     ed0:	4667      	mov	r7, ip
     ed2:	4643      	mov	r3, r8
     ed4:	9218      	str	r2, [sp, #96]	; 0x60
     ed6:	9319      	str	r3, [sp, #100]	; 0x64
     ed8:	941a      	str	r4, [sp, #104]	; 0x68
     eda:	971b      	str	r7, [sp, #108]	; 0x6c
     edc:	464b      	mov	r3, r9
     ede:	931c      	str	r3, [sp, #112]	; 0x70
     ee0:	961d      	str	r6, [sp, #116]	; 0x74
     ee2:	4653      	mov	r3, sl
     ee4:	931e      	str	r3, [sp, #120]	; 0x78
     ee6:	901f      	str	r0, [sp, #124]	; 0x7c
     ee8:	9520      	str	r5, [sp, #128]	; 0x80
     eea:	9121      	str	r1, [sp, #132]	; 0x84
    m += ASCON_AEAD_RATE;
     eec:	2308      	movs	r3, #8
     eee:	469c      	mov	ip, r3
     ef0:	9a01      	ldr	r2, [sp, #4]
     ef2:	4462      	add	r2, ip
     ef4:	9201      	str	r2, [sp, #4]
    c += ASCON_AEAD_RATE;
     ef6:	9b04      	ldr	r3, [sp, #16]
     ef8:	3308      	adds	r3, #8
     efa:	9304      	str	r3, [sp, #16]
    clen -= ASCON_AEAD_RATE;
     efc:	9a02      	ldr	r2, [sp, #8]
     efe:	9b03      	ldr	r3, [sp, #12]
     f00:	2008      	movs	r0, #8
     f02:	4240      	negs	r0, r0
     f04:	17c1      	asrs	r1, r0, #31
     f06:	1812      	adds	r2, r2, r0
     f08:	414b      	adcs	r3, r1
     f0a:	9202      	str	r2, [sp, #8]
     f0c:	9303      	str	r3, [sp, #12]
  while (clen >= ASCON_AEAD_RATE) {
     f0e:	2b00      	cmp	r3, #0
     f10:	d000      	beq.n	f14 <rend_1615+0x4e>
     f12:	e6cd      	b.n	cb0 <rend_1362+0x6a>
     f14:	9b02      	ldr	r3, [sp, #8]
     f16:	9c03      	ldr	r4, [sp, #12]
     f18:	2c00      	cmp	r4, #0
     f1a:	d102      	bne.n	f22 <rend_1615+0x5c>
     f1c:	2b07      	cmp	r3, #7
     f1e:	d900      	bls.n	f22 <rend_1615+0x5c>
     f20:	e6c6      	b.n	cb0 <rend_1362+0x6a>
     f22:	2208      	movs	r2, #8
     f24:	4252      	negs	r2, r2
     f26:	17d3      	asrs	r3, r2, #31
     f28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
     f2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
     f2c:	18a4      	adds	r4, r4, r2
     f2e:	415d      	adcs	r5, r3
     f30:	0769      	lsls	r1, r5, #29
     f32:	08e0      	lsrs	r0, r4, #3
     f34:	4308      	orrs	r0, r1
     f36:	08e9      	lsrs	r1, r5, #3
     f38:	1c46      	adds	r6, r0, #1
     f3a:	00f6      	lsls	r6, r6, #3
     f3c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
     f3e:	46bc      	mov	ip, r7
     f40:	44b4      	add	ip, r6
     f42:	4667      	mov	r7, ip
     f44:	970f      	str	r7, [sp, #60]	; 0x3c
     f46:	9f14      	ldr	r7, [sp, #80]	; 0x50
     f48:	46bc      	mov	ip, r7
     f4a:	4466      	add	r6, ip
     f4c:	4f58      	ldr	r7, [pc, #352]	; (10b0 <rend_1615+0x1ea>)
     f4e:	47b8      	blx	r7
     f50:	1900      	adds	r0, r0, r4
     f52:	4169      	adcs	r1, r5
     f54:	900c      	str	r0, [sp, #48]	; 0x30
     f56:	910d      	str	r1, [sp, #52]	; 0x34
  *px ^= PAD(clen);
     f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f5a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
     f5c:	9300      	str	r3, [sp, #0]
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
     f5e:	2207      	movs	r2, #7
     f60:	1ad2      	subs	r2, r2, r3
     f62:	00d2      	lsls	r2, r2, #3
     f64:	2320      	movs	r3, #32
     f66:	425b      	negs	r3, r3
     f68:	18d1      	adds	r1, r2, r3
     f6a:	d500      	bpl.n	f6e <rend_1615+0xa8>
     f6c:	e1a4      	b.n	12b8 <rend_1990+0x9a>
     f6e:	33a0      	adds	r3, #160	; 0xa0
     f70:	408b      	lsls	r3, r1
     f72:	2180      	movs	r1, #128	; 0x80
     f74:	4091      	lsls	r1, r2
     f76:	9a18      	ldr	r2, [sp, #96]	; 0x60
     f78:	4051      	eors	r1, r2
     f7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
     f7c:	4053      	eors	r3, r2
     f7e:	9118      	str	r1, [sp, #96]	; 0x60
     f80:	9319      	str	r3, [sp, #100]	; 0x64
  if (clen) {
     f82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
     f84:	9d0d      	ldr	r5, [sp, #52]	; 0x34
     f86:	0020      	movs	r0, r4
     f88:	4328      	orrs	r0, r5
     f8a:	d100      	bne.n	f8e <rend_1615+0xc8>
     f8c:	e092      	b.n	10b4 <rend_1615+0x1ee>
  return ~0ull >> (64 - 8 * n);
     f8e:	2208      	movs	r2, #8
     f90:	9800      	ldr	r0, [sp, #0]
     f92:	1a12      	subs	r2, r2, r0
     f94:	00d2      	lsls	r2, r2, #3
     f96:	2020      	movs	r0, #32
     f98:	4240      	negs	r0, r0
     f9a:	1810      	adds	r0, r2, r0
     f9c:	d500      	bpl.n	fa0 <rend_1615+0xda>
     f9e:	e190      	b.n	12c2 <rend_1990+0xa4>
     fa0:	2401      	movs	r4, #1
     fa2:	4264      	negs	r4, r4
     fa4:	40c4      	lsrs	r4, r0
     fa6:	2701      	movs	r7, #1
     fa8:	427f      	negs	r7, r7
     faa:	40d7      	lsrs	r7, r2
  uint64_t x = *(uint64_t*)bytes & MASK(n);
     fac:	6830      	ldr	r0, [r6, #0]
     fae:	4020      	ands	r0, r4
     fb0:	6872      	ldr	r2, [r6, #4]
     fb2:	403a      	ands	r2, r7
  return U64TOWORD(x);
     fb4:	0605      	lsls	r5, r0, #24
     fb6:	46ab      	mov	fp, r5
     fb8:	0e15      	lsrs	r5, r2, #24
     fba:	46aa      	mov	sl, r5
     fbc:	0205      	lsls	r5, r0, #8
     fbe:	26ff      	movs	r6, #255	; 0xff
     fc0:	0436      	lsls	r6, r6, #16
     fc2:	4035      	ands	r5, r6
     fc4:	465e      	mov	r6, fp
     fc6:	432e      	orrs	r6, r5
     fc8:	46b3      	mov	fp, r6
     fca:	0a05      	lsrs	r5, r0, #8
     fcc:	0616      	lsls	r6, r2, #24
     fce:	432e      	orrs	r6, r5
     fd0:	25ff      	movs	r5, #255	; 0xff
     fd2:	022d      	lsls	r5, r5, #8
     fd4:	402e      	ands	r6, r5
     fd6:	46b4      	mov	ip, r6
     fd8:	465e      	mov	r6, fp
     fda:	4665      	mov	r5, ip
     fdc:	432e      	orrs	r6, r5
     fde:	46b3      	mov	fp, r6
     fe0:	0e00      	lsrs	r0, r0, #24
     fe2:	0215      	lsls	r5, r2, #8
     fe4:	002e      	movs	r6, r5
     fe6:	4306      	orrs	r6, r0
     fe8:	25ff      	movs	r5, #255	; 0xff
     fea:	46a9      	mov	r9, r5
     fec:	402e      	ands	r6, r5
     fee:	46b4      	mov	ip, r6
     ff0:	465e      	mov	r6, fp
     ff2:	4665      	mov	r5, ip
     ff4:	432e      	orrs	r6, r5
     ff6:	46b3      	mov	fp, r6
     ff8:	0a15      	lsrs	r5, r2, #8
     ffa:	46ac      	mov	ip, r5
     ffc:	0615      	lsls	r5, r2, #24
     ffe:	4656      	mov	r6, sl
    1000:	432e      	orrs	r6, r5
    1002:	0212      	lsls	r2, r2, #8
    1004:	4302      	orrs	r2, r0
    1006:	20ff      	movs	r0, #255	; 0xff
    1008:	0400      	lsls	r0, r0, #16
    100a:	4002      	ands	r2, r0
    100c:	4332      	orrs	r2, r6
    100e:	4660      	mov	r0, ip
    1010:	25ff      	movs	r5, #255	; 0xff
    1012:	022d      	lsls	r5, r5, #8
    1014:	4028      	ands	r0, r5
    1016:	4302      	orrs	r2, r0
    *px ^= cx;
    1018:	4051      	eors	r1, r2
    101a:	4658      	mov	r0, fp
    101c:	4043      	eors	r3, r0
  *(uint64_t*)bytes &= ~MASK(n);
    101e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1020:	6805      	ldr	r5, [r0, #0]
    1022:	002e      	movs	r6, r5
    1024:	43a6      	bics	r6, r4
    1026:	0034      	movs	r4, r6
    1028:	6845      	ldr	r5, [r0, #4]
    102a:	9501      	str	r5, [sp, #4]
    102c:	002e      	movs	r6, r5
    102e:	43be      	bics	r6, r7
  *(uint64_t*)bytes |= WORDTOU64(w);
    1030:	0608      	lsls	r0, r1, #24
    1032:	0e1d      	lsrs	r5, r3, #24
    1034:	432c      	orrs	r4, r5
    1036:	4330      	orrs	r0, r6
    1038:	020f      	lsls	r7, r1, #8
    103a:	25ff      	movs	r5, #255	; 0xff
    103c:	042d      	lsls	r5, r5, #16
    103e:	402f      	ands	r7, r5
    1040:	4338      	orrs	r0, r7
    1042:	0a0d      	lsrs	r5, r1, #8
    1044:	061f      	lsls	r7, r3, #24
    1046:	432f      	orrs	r7, r5
    1048:	25ff      	movs	r5, #255	; 0xff
    104a:	022d      	lsls	r5, r5, #8
    104c:	402f      	ands	r7, r5
    104e:	4338      	orrs	r0, r7
    1050:	0e0f      	lsrs	r7, r1, #24
    1052:	021d      	lsls	r5, r3, #8
    1054:	002e      	movs	r6, r5
    1056:	433e      	orrs	r6, r7
    1058:	46b4      	mov	ip, r6
    105a:	464e      	mov	r6, r9
    105c:	4665      	mov	r5, ip
    105e:	402e      	ands	r6, r5
    1060:	4330      	orrs	r0, r6
    1062:	0a1d      	lsrs	r5, r3, #8
    1064:	46ac      	mov	ip, r5
    1066:	061d      	lsls	r5, r3, #24
    1068:	432c      	orrs	r4, r5
    106a:	021d      	lsls	r5, r3, #8
    106c:	432f      	orrs	r7, r5
    106e:	25ff      	movs	r5, #255	; 0xff
    1070:	042d      	lsls	r5, r5, #16
    1072:	402f      	ands	r7, r5
    1074:	4327      	orrs	r7, r4
    1076:	4665      	mov	r5, ip
    1078:	24ff      	movs	r4, #255	; 0xff
    107a:	0224      	lsls	r4, r4, #8
    107c:	4025      	ands	r5, r4
    107e:	432f      	orrs	r7, r5
    1080:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    1082:	6027      	str	r7, [r4, #0]
    1084:	6060      	str	r0, [r4, #4]
  uint64_t mask = ~0ull >> (8 * n);
    1086:	9800      	ldr	r0, [sp, #0]
    1088:	00c4      	lsls	r4, r0, #3
    108a:	2020      	movs	r0, #32
    108c:	4240      	negs	r0, r0
    108e:	1825      	adds	r5, r4, r0
    1090:	d500      	bpl.n	1094 <rend_1615+0x1ce>
    1092:	e11f      	b.n	12d4 <rend_1990+0xb6>
    1094:	301f      	adds	r0, #31
    1096:	40e8      	lsrs	r0, r5
    1098:	2501      	movs	r5, #1
    109a:	426d      	negs	r5, r5
    109c:	40e5      	lsrs	r5, r4
  return w & mask;
    109e:	4001      	ands	r1, r0
    10a0:	402b      	ands	r3, r5
    *px ^= cx;
    10a2:	404a      	eors	r2, r1
    10a4:	9218      	str	r2, [sp, #96]	; 0x60
    10a6:	465a      	mov	r2, fp
    10a8:	4053      	eors	r3, r2
    10aa:	9319      	str	r3, [sp, #100]	; 0x64
    10ac:	e002      	b.n	10b4 <rend_1615+0x1ee>
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	00006639 	.word	0x00006639
    s->x[1] ^= key->x[0];
    10b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    10b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    10b8:	4053      	eors	r3, r2
    10ba:	991b      	ldr	r1, [sp, #108]	; 0x6c
    10bc:	9811      	ldr	r0, [sp, #68]	; 0x44
    10be:	4041      	eors	r1, r0
    10c0:	468c      	mov	ip, r1
    s->x[2] ^= key->x[1];
    10c2:	991c      	ldr	r1, [sp, #112]	; 0x70
    10c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    10c6:	404a      	eors	r2, r1
    10c8:	991d      	ldr	r1, [sp, #116]	; 0x74
    10ca:	9100      	str	r1, [sp, #0]
    10cc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    10ce:	404f      	eors	r7, r1
    10d0:	9919      	ldr	r1, [sp, #100]	; 0x64
    10d2:	4689      	mov	r9, r1
    10d4:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    10d6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    10d8:	9920      	ldr	r1, [sp, #128]	; 0x80
    10da:	9e21      	ldr	r6, [sp, #132]	; 0x84
    10dc:	9818      	ldr	r0, [sp, #96]	; 0x60
    10de:	46b8      	mov	r8, r7
    10e0:	46b2      	mov	sl, r6
    10e2:	26f0      	movs	r6, #240	; 0xf0
    10e4:	46a3      	mov	fp, r4

000010e6 <rbegin_1990>:
    10e6:	4072      	eors	r2, r6
    10e8:	b440      	push	{r6}
    10ea:	4048      	eors	r0, r1
    10ec:	4069      	eors	r1, r5
    10ee:	405a      	eors	r2, r3
    10f0:	43c7      	mvns	r7, r0
    10f2:	430f      	orrs	r7, r1
    10f4:	1c16      	adds	r6, r2, #0
    10f6:	439e      	bics	r6, r3
    10f8:	4070      	eors	r0, r6
    10fa:	43ce      	mvns	r6, r1
    10fc:	432e      	orrs	r6, r5
    10fe:	4072      	eors	r2, r6
    1100:	1c1e      	adds	r6, r3, #0
    1102:	4386      	bics	r6, r0
    1104:	4071      	eors	r1, r6
    1106:	1c2e      	adds	r6, r5, #0
    1108:	4016      	ands	r6, r2
    110a:	405e      	eors	r6, r3
    110c:	406f      	eors	r7, r5
    110e:	4057      	eors	r7, r2
    1110:	4046      	eors	r6, r0
    1112:	4048      	eors	r0, r1
    1114:	464b      	mov	r3, r9
    1116:	4665      	mov	r5, ip
    1118:	4691      	mov	r9, r2
    111a:	4684      	mov	ip, r0
    111c:	4640      	mov	r0, r8
    111e:	465a      	mov	r2, fp
    1120:	4654      	mov	r4, sl
    1122:	46b8      	mov	r8, r7
    1124:	468b      	mov	fp, r1
    1126:	4063      	eors	r3, r4
    1128:	4054      	eors	r4, r2
    112a:	4068      	eors	r0, r5
    112c:	43df      	mvns	r7, r3
    112e:	4327      	orrs	r7, r4
    1130:	1c01      	adds	r1, r0, #0
    1132:	43a9      	bics	r1, r5
    1134:	404b      	eors	r3, r1
    1136:	43e1      	mvns	r1, r4
    1138:	4311      	orrs	r1, r2
    113a:	4048      	eors	r0, r1
    113c:	1c29      	adds	r1, r5, #0
    113e:	4399      	bics	r1, r3
    1140:	404c      	eors	r4, r1
    1142:	1c11      	adds	r1, r2, #0
    1144:	4001      	ands	r1, r0
    1146:	404d      	eors	r5, r1
    1148:	407a      	eors	r2, r7
    114a:	4042      	eors	r2, r0
    114c:	405d      	eors	r5, r3
    114e:	4063      	eors	r3, r4
    1150:	4692      	mov	sl, r2
    1152:	464a      	mov	r2, r9
    1154:	4699      	mov	r9, r3
    1156:	0981      	lsrs	r1, r0, #6
    1158:	0693      	lsls	r3, r2, #26
    115a:	0997      	lsrs	r7, r2, #6
    115c:	4059      	eors	r1, r3
    115e:	0683      	lsls	r3, r0, #26
    1160:	405f      	eors	r7, r3
    1162:	0843      	lsrs	r3, r0, #1
    1164:	4059      	eors	r1, r3
    1166:	07d3      	lsls	r3, r2, #31
    1168:	4059      	eors	r1, r3
    116a:	0853      	lsrs	r3, r2, #1
    116c:	405f      	eors	r7, r3
    116e:	07c3      	lsls	r3, r0, #31
    1170:	405f      	eors	r7, r3
    1172:	4048      	eors	r0, r1
    1174:	407a      	eors	r2, r7
    1176:	00e9      	lsls	r1, r5, #3
    1178:	0f73      	lsrs	r3, r6, #29
    117a:	00f7      	lsls	r7, r6, #3
    117c:	4059      	eors	r1, r3
    117e:	0f6b      	lsrs	r3, r5, #29
    1180:	405f      	eors	r7, r3
    1182:	066b      	lsls	r3, r5, #25
    1184:	4059      	eors	r1, r3
    1186:	09f3      	lsrs	r3, r6, #7
    1188:	4059      	eors	r1, r3
    118a:	0673      	lsls	r3, r6, #25
    118c:	405f      	eors	r7, r3
    118e:	09eb      	lsrs	r3, r5, #7
    1190:	405f      	eors	r7, r3
    1192:	404d      	eors	r5, r1
    1194:	407e      	eors	r6, r7
    1196:	4659      	mov	r1, fp
    1198:	46b3      	mov	fp, r6
    119a:	05e6      	lsls	r6, r4, #23
    119c:	0a4b      	lsrs	r3, r1, #9
    119e:	05cf      	lsls	r7, r1, #23
    11a0:	405e      	eors	r6, r3
    11a2:	0a63      	lsrs	r3, r4, #9
    11a4:	405f      	eors	r7, r3
    11a6:	09e3      	lsrs	r3, r4, #7
    11a8:	405e      	eors	r6, r3
    11aa:	064b      	lsls	r3, r1, #25
    11ac:	405e      	eors	r6, r3
    11ae:	09cb      	lsrs	r3, r1, #7
    11b0:	405f      	eors	r7, r3
    11b2:	0663      	lsls	r3, r4, #25
    11b4:	405f      	eors	r7, r3
    11b6:	4074      	eors	r4, r6
    11b8:	4079      	eors	r1, r7
    11ba:	465b      	mov	r3, fp
    11bc:	4656      	mov	r6, sl
    11be:	46a2      	mov	sl, r4
    11c0:	46ab      	mov	fp, r5
    11c2:	4645      	mov	r5, r8
    11c4:	4680      	mov	r8, r0
    11c6:	0c74      	lsrs	r4, r6, #17
    11c8:	03e8      	lsls	r0, r5, #15
    11ca:	0c6f      	lsrs	r7, r5, #17
    11cc:	4044      	eors	r4, r0
    11ce:	03f0      	lsls	r0, r6, #15
    11d0:	4047      	eors	r7, r0
    11d2:	0ab0      	lsrs	r0, r6, #10
    11d4:	4044      	eors	r4, r0
    11d6:	05a8      	lsls	r0, r5, #22
    11d8:	4044      	eors	r4, r0
    11da:	0aa8      	lsrs	r0, r5, #10
    11dc:	4047      	eors	r7, r0
    11de:	05b0      	lsls	r0, r6, #22
    11e0:	4047      	eors	r7, r0
    11e2:	4066      	eors	r6, r4
    11e4:	407d      	eors	r5, r7
    11e6:	464f      	mov	r7, r9
    11e8:	4660      	mov	r0, ip
    11ea:	4689      	mov	r9, r1
    11ec:	46dc      	mov	ip, fp
    11ee:	46b3      	mov	fp, r6
    11f0:	0f39      	lsrs	r1, r7, #28
    11f2:	0106      	lsls	r6, r0, #4
    11f4:	0f04      	lsrs	r4, r0, #28
    11f6:	4071      	eors	r1, r6
    11f8:	013e      	lsls	r6, r7, #4
    11fa:	4074      	eors	r4, r6
    11fc:	0cfe      	lsrs	r6, r7, #19
    11fe:	4071      	eors	r1, r6
    1200:	0346      	lsls	r6, r0, #13
    1202:	4071      	eors	r1, r6
    1204:	0cc6      	lsrs	r6, r0, #19
    1206:	4074      	eors	r4, r6
    1208:	037e      	lsls	r6, r7, #13
    120a:	4074      	eors	r4, r6
    120c:	bc40      	pop	{r6}
    120e:	404f      	eors	r7, r1
    1210:	4060      	eors	r0, r4
    1212:	4649      	mov	r1, r9
    1214:	46b9      	mov	r9, r7
    1216:	3e0f      	subs	r6, #15
    1218:	2e3c      	cmp	r6, #60	; 0x3c
    121a:	d000      	beq.n	121e <rend_1990>
    121c:	e763      	b.n	10e6 <rbegin_1990>

0000121e <rend_1990>:
    121e:	465c      	mov	r4, fp
  ascon_final(&s, &key);
  /* verify tag (should be constant time, check compiler output) */
  s.x[3] ^= LOADBYTES(c + clen, 8);
    1220:	9914      	ldr	r1, [sp, #80]	; 0x50
    1222:	9e15      	ldr	r6, [sp, #84]	; 0x54
    1224:	46b4      	mov	ip, r6
    1226:	4461      	add	r1, ip
  memcpy(&x, bytes, n);
    1228:	2208      	movs	r2, #8
    122a:	a816      	add	r0, sp, #88	; 0x58
    122c:	4b2f      	ldr	r3, [pc, #188]	; (12ec <rend_1990+0xce>)
    122e:	4798      	blx	r3
  return U64TOWORD(x);
    1230:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1232:	9817      	ldr	r0, [sp, #92]	; 0x5c
    1234:	0611      	lsls	r1, r2, #24
    1236:	0e03      	lsrs	r3, r0, #24
    1238:	0216      	lsls	r6, r2, #8
    123a:	27ff      	movs	r7, #255	; 0xff
    123c:	043f      	lsls	r7, r7, #16
    123e:	46bc      	mov	ip, r7
    1240:	403e      	ands	r6, r7
    1242:	4331      	orrs	r1, r6
    1244:	0a17      	lsrs	r7, r2, #8
    1246:	0606      	lsls	r6, r0, #24
    1248:	433e      	orrs	r6, r7
    124a:	27ff      	movs	r7, #255	; 0xff
    124c:	023f      	lsls	r7, r7, #8
    124e:	403e      	ands	r6, r7
    1250:	4331      	orrs	r1, r6
    1252:	0e16      	lsrs	r6, r2, #24
    1254:	46b0      	mov	r8, r6
    1256:	0206      	lsls	r6, r0, #8
    1258:	4642      	mov	r2, r8
    125a:	4316      	orrs	r6, r2
    125c:	22ff      	movs	r2, #255	; 0xff
    125e:	4016      	ands	r6, r2
    1260:	4331      	orrs	r1, r6
    1262:	468a      	mov	sl, r1
    1264:	0a06      	lsrs	r6, r0, #8
    1266:	0601      	lsls	r1, r0, #24
    1268:	430b      	orrs	r3, r1
    126a:	0200      	lsls	r0, r0, #8
    126c:	4641      	mov	r1, r8
    126e:	4308      	orrs	r0, r1
    1270:	4661      	mov	r1, ip
    1272:	4008      	ands	r0, r1
    1274:	4303      	orrs	r3, r0
    1276:	403e      	ands	r6, r7
    1278:	4333      	orrs	r3, r6
    127a:	405d      	eors	r5, r3
    127c:	4653      	mov	r3, sl
    127e:	405c      	eors	r4, r3
    1280:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1282:	405d      	eors	r5, r3
    1284:	9811      	ldr	r0, [sp, #68]	; 0x44
    1286:	4044      	eors	r4, r0
  result |= result >> 32;
    1288:	4325      	orrs	r5, r4
  result |= result >> 16;
    128a:	0421      	lsls	r1, r4, #16
    128c:	0c2b      	lsrs	r3, r5, #16
    128e:	430b      	orrs	r3, r1
    1290:	0c21      	lsrs	r1, r4, #16
    1292:	431d      	orrs	r5, r3
    1294:	430c      	orrs	r4, r1
  result |= result >> 8;
    1296:	0624      	lsls	r4, r4, #24
    1298:	0a28      	lsrs	r0, r5, #8
    129a:	4320      	orrs	r0, r4
    129c:	4328      	orrs	r0, r5
  return ((((int)(result & 0xff) - 1) >> 8) & 1) - 1;
    129e:	4010      	ands	r0, r2
    12a0:	3801      	subs	r0, #1
    12a2:	0fc0      	lsrs	r0, r0, #31
    12a4:	3801      	subs	r0, #1
  s.x[4] = 0; //^= LOADBYTES(c + clen + 8, 8);
  return NOTZERO(s.x[3], s.x[4]);
}
    12a6:	b023      	add	sp, #140	; 0x8c
    12a8:	bc3c      	pop	{r2, r3, r4, r5}
    12aa:	4690      	mov	r8, r2
    12ac:	4699      	mov	r9, r3
    12ae:	46a2      	mov	sl, r4
    12b0:	46ab      	mov	fp, r5
    12b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (clen >= ASCON_AEAD_RATE) {
    12b4:	9e14      	ldr	r6, [sp, #80]	; 0x50
    12b6:	e64f      	b.n	f58 <rend_1615+0x92>
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
    12b8:	2120      	movs	r1, #32
    12ba:	1a89      	subs	r1, r1, r2
    12bc:	2380      	movs	r3, #128	; 0x80
    12be:	40cb      	lsrs	r3, r1
    12c0:	e657      	b.n	f72 <rend_1615+0xac>
  return ~0ull >> (64 - 8 * n);
    12c2:	2020      	movs	r0, #32
    12c4:	1a80      	subs	r0, r0, r2
    12c6:	2401      	movs	r4, #1
    12c8:	4264      	negs	r4, r4
    12ca:	0025      	movs	r5, r4
    12cc:	4085      	lsls	r5, r0
    12ce:	40d4      	lsrs	r4, r2
    12d0:	432c      	orrs	r4, r5
    12d2:	e668      	b.n	fa6 <rend_1615+0xe0>
  uint64_t mask = ~0ull >> (8 * n);
    12d4:	2520      	movs	r5, #32
    12d6:	1b2d      	subs	r5, r5, r4
    12d8:	2001      	movs	r0, #1
    12da:	4240      	negs	r0, r0
    12dc:	0006      	movs	r6, r0
    12de:	40ae      	lsls	r6, r5
    12e0:	40e0      	lsrs	r0, r4
    12e2:	4330      	orrs	r0, r6
    12e4:	e6d8      	b.n	1098 <rend_1615+0x1d2>
  if (clen < CRYPTO_ABYTES) return -1;
    12e6:	2001      	movs	r0, #1
    12e8:	4240      	negs	r0, r0
    12ea:	e7dc      	b.n	12a6 <rend_1990+0x88>
    12ec:	000066e9 	.word	0x000066e9

000012f0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    12f0:	4b0c      	ldr	r3, [pc, #48]	; (1324 <cpu_irq_enter_critical+0x34>)
    12f2:	681b      	ldr	r3, [r3, #0]
    12f4:	2b00      	cmp	r3, #0
    12f6:	d106      	bne.n	1306 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    12f8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    12fc:	2b00      	cmp	r3, #0
    12fe:	d007      	beq.n	1310 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1300:	2200      	movs	r2, #0
    1302:	4b09      	ldr	r3, [pc, #36]	; (1328 <cpu_irq_enter_critical+0x38>)
    1304:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1306:	4a07      	ldr	r2, [pc, #28]	; (1324 <cpu_irq_enter_critical+0x34>)
    1308:	6813      	ldr	r3, [r2, #0]
    130a:	3301      	adds	r3, #1
    130c:	6013      	str	r3, [r2, #0]
}
    130e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1310:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1312:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1316:	2200      	movs	r2, #0
    1318:	4b04      	ldr	r3, [pc, #16]	; (132c <cpu_irq_enter_critical+0x3c>)
    131a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    131c:	3201      	adds	r2, #1
    131e:	4b02      	ldr	r3, [pc, #8]	; (1328 <cpu_irq_enter_critical+0x38>)
    1320:	701a      	strb	r2, [r3, #0]
    1322:	e7f0      	b.n	1306 <cpu_irq_enter_critical+0x16>
    1324:	20000194 	.word	0x20000194
    1328:	20000198 	.word	0x20000198
    132c:	20000000 	.word	0x20000000

00001330 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1330:	4b08      	ldr	r3, [pc, #32]	; (1354 <cpu_irq_leave_critical+0x24>)
    1332:	681a      	ldr	r2, [r3, #0]
    1334:	3a01      	subs	r2, #1
    1336:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1338:	681b      	ldr	r3, [r3, #0]
    133a:	2b00      	cmp	r3, #0
    133c:	d109      	bne.n	1352 <cpu_irq_leave_critical+0x22>
    133e:	4b06      	ldr	r3, [pc, #24]	; (1358 <cpu_irq_leave_critical+0x28>)
    1340:	781b      	ldrb	r3, [r3, #0]
    1342:	2b00      	cmp	r3, #0
    1344:	d005      	beq.n	1352 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1346:	2201      	movs	r2, #1
    1348:	4b04      	ldr	r3, [pc, #16]	; (135c <cpu_irq_leave_critical+0x2c>)
    134a:	701a      	strb	r2, [r3, #0]
    134c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1350:	b662      	cpsie	i
	}
}
    1352:	4770      	bx	lr
    1354:	20000194 	.word	0x20000194
    1358:	20000198 	.word	0x20000198
    135c:	20000000 	.word	0x20000000

00001360 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1360:	b5f0      	push	{r4, r5, r6, r7, lr}
    1362:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1364:	ac01      	add	r4, sp, #4
    1366:	2501      	movs	r5, #1
    1368:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    136a:	2700      	movs	r7, #0
    136c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    136e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1370:	0021      	movs	r1, r4
    1372:	200f      	movs	r0, #15
    1374:	4e06      	ldr	r6, [pc, #24]	; (1390 <system_board_init+0x30>)
    1376:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1378:	2280      	movs	r2, #128	; 0x80
    137a:	0212      	lsls	r2, r2, #8
    137c:	2382      	movs	r3, #130	; 0x82
    137e:	05db      	lsls	r3, r3, #23
    1380:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1382:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1384:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1386:	0021      	movs	r1, r4
    1388:	201c      	movs	r0, #28
    138a:	47b0      	blx	r6
}
    138c:	b003      	add	sp, #12
    138e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1390:	00001895 	.word	0x00001895

00001394 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
    1394:	6803      	ldr	r3, [r0, #0]
    1396:	4a0a      	ldr	r2, [pc, #40]	; (13c0 <_can_enable_peripheral_clock+0x2c>)
    1398:	4293      	cmp	r3, r2
    139a:	d003      	beq.n	13a4 <_can_enable_peripheral_clock+0x10>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
    139c:	4a09      	ldr	r2, [pc, #36]	; (13c4 <_can_enable_peripheral_clock+0x30>)
    139e:	4293      	cmp	r3, r2
    13a0:	d007      	beq.n	13b2 <_can_enable_peripheral_clock+0x1e>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
    13a2:	4770      	bx	lr
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	MCLK->AHBMASK.reg |= ahb_mask;
    13a4:	4a08      	ldr	r2, [pc, #32]	; (13c8 <_can_enable_peripheral_clock+0x34>)
    13a6:	6911      	ldr	r1, [r2, #16]
    13a8:	2380      	movs	r3, #128	; 0x80
    13aa:	005b      	lsls	r3, r3, #1
    13ac:	430b      	orrs	r3, r1
    13ae:	6113      	str	r3, [r2, #16]
    13b0:	e7f7      	b.n	13a2 <_can_enable_peripheral_clock+0xe>
    13b2:	4a05      	ldr	r2, [pc, #20]	; (13c8 <_can_enable_peripheral_clock+0x34>)
    13b4:	6911      	ldr	r1, [r2, #16]
    13b6:	2380      	movs	r3, #128	; 0x80
    13b8:	009b      	lsls	r3, r3, #2
    13ba:	430b      	orrs	r3, r1
    13bc:	6113      	str	r3, [r2, #16]
    13be:	e7f0      	b.n	13a2 <_can_enable_peripheral_clock+0xe>
    13c0:	42001c00 	.word	0x42001c00
    13c4:	42002000 	.word	0x42002000
    13c8:	40000800 	.word	0x40000800

000013cc <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
    13cc:	b570      	push	{r4, r5, r6, lr}
    13ce:	000c      	movs	r4, r1
    13d0:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    13d2:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
    13d4:	4ba6      	ldr	r3, [pc, #664]	; (1670 <can_init+0x2a4>)
    13d6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    13d8:	4ba6      	ldr	r3, [pc, #664]	; (1674 <can_init+0x2a8>)
    13da:	2200      	movs	r2, #0
    13dc:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    13de:	782a      	ldrb	r2, [r5, #0]
    13e0:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
    13e2:	4ba5      	ldr	r3, [pc, #660]	; (1678 <can_init+0x2ac>)
    13e4:	429c      	cmp	r4, r3
    13e6:	d100      	bne.n	13ea <can_init+0x1e>
    13e8:	e0c7      	b.n	157a <can_init+0x1ae>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
    13ea:	4ba4      	ldr	r3, [pc, #656]	; (167c <can_init+0x2b0>)
    13ec:	429c      	cmp	r4, r3
    13ee:	d100      	bne.n	13f2 <can_init+0x26>
    13f0:	e100      	b.n	15f4 <can_init+0x228>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    13f2:	69a3      	ldr	r3, [r4, #24]
    13f4:	2202      	movs	r2, #2
    13f6:	4313      	orrs	r3, r2
    13f8:	61a3      	str	r3, [r4, #24]
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 32) / 16 + 5) |
    13fa:	4aa1      	ldr	r2, [pc, #644]	; (1680 <can_init+0x2b4>)
    13fc:	23bc      	movs	r3, #188	; 0xbc
    13fe:	50e2      	str	r2, [r4, r3]
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 32) / 16 + 5);
    1400:	2207      	movs	r2, #7
    1402:	330c      	adds	r3, #12
    1404:	50e2      	str	r2, [r4, r3]
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
    1406:	4b9f      	ldr	r3, [pc, #636]	; (1684 <can_init+0x2b8>)
    1408:	61e3      	str	r3, [r4, #28]
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
    140a:	4b9f      	ldr	r3, [pc, #636]	; (1688 <can_init+0x2bc>)
    140c:	60e3      	str	r3, [r4, #12]
	if (config->tdc_enable) {
    140e:	7bab      	ldrb	r3, [r5, #14]
    1410:	2b00      	cmp	r3, #0
    1412:	d004      	beq.n	141e <can_init+0x52>
		hw->DBTP.reg |= CAN_DBTP_TDC;
    1414:	68e2      	ldr	r2, [r4, #12]
    1416:	2380      	movs	r3, #128	; 0x80
    1418:	041b      	lsls	r3, r3, #16
    141a:	4313      	orrs	r3, r2
    141c:	60e3      	str	r3, [r4, #12]
	if (config->run_in_standby) {
    141e:	786b      	ldrb	r3, [r5, #1]
    1420:	2b00      	cmp	r3, #0
    1422:	d003      	beq.n	142c <can_init+0x60>
		hw->MRCFG.reg |= 0x01<<6;
    1424:	68a3      	ldr	r3, [r4, #8]
    1426:	2240      	movs	r2, #64	; 0x40
    1428:	4313      	orrs	r3, r2
    142a:	60a3      	str	r3, [r4, #8]
	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
    142c:	6962      	ldr	r2, [r4, #20]
    142e:	78ab      	ldrb	r3, [r5, #2]
    1430:	4313      	orrs	r3, r2
    1432:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
    1434:	78eb      	ldrb	r3, [r5, #3]
    1436:	2b00      	cmp	r3, #0
    1438:	d004      	beq.n	1444 <can_init+0x78>
		hw->CCCR.reg |= CAN_CCCR_TXP;
    143a:	69a2      	ldr	r2, [r4, #24]
    143c:	2380      	movs	r3, #128	; 0x80
    143e:	01db      	lsls	r3, r3, #7
    1440:	4313      	orrs	r3, r2
    1442:	61a3      	str	r3, [r4, #24]
	if (config->edge_filtering) {
    1444:	792b      	ldrb	r3, [r5, #4]
    1446:	2b00      	cmp	r3, #0
    1448:	d004      	beq.n	1454 <can_init+0x88>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
    144a:	69a2      	ldr	r2, [r4, #24]
    144c:	2380      	movs	r3, #128	; 0x80
    144e:	019b      	lsls	r3, r3, #6
    1450:	4313      	orrs	r3, r2
    1452:	61a3      	str	r3, [r4, #24]
	if (config->protocol_exception_handling) {
    1454:	796b      	ldrb	r3, [r5, #5]
    1456:	2b00      	cmp	r3, #0
    1458:	d004      	beq.n	1464 <can_init+0x98>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
    145a:	69a2      	ldr	r2, [r4, #24]
    145c:	2380      	movs	r3, #128	; 0x80
    145e:	015b      	lsls	r3, r3, #5
    1460:	4313      	orrs	r3, r2
    1462:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
    1464:	79ab      	ldrb	r3, [r5, #6]
    1466:	2b00      	cmp	r3, #0
    1468:	d103      	bne.n	1472 <can_init+0xa6>
		hw->CCCR.reg |= CAN_CCCR_DAR;
    146a:	69a3      	ldr	r3, [r4, #24]
    146c:	2240      	movs	r2, #64	; 0x40
    146e:	4313      	orrs	r3, r2
    1470:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
    1472:	79eb      	ldrb	r3, [r5, #7]
    1474:	2b00      	cmp	r3, #0
    1476:	d003      	beq.n	1480 <can_init+0xb4>
		hw->CCCR.reg |= CAN_CCCR_CSR;
    1478:	69a3      	ldr	r3, [r4, #24]
    147a:	2210      	movs	r2, #16
    147c:	4313      	orrs	r3, r2
    147e:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_acknowledge) {
    1480:	7a2b      	ldrb	r3, [r5, #8]
    1482:	2b00      	cmp	r3, #0
    1484:	d003      	beq.n	148e <can_init+0xc2>
		hw->CCCR.reg |= CAN_CCCR_CSA;
    1486:	69a3      	ldr	r3, [r4, #24]
    1488:	2208      	movs	r2, #8
    148a:	4313      	orrs	r3, r2
    148c:	61a3      	str	r3, [r4, #24]
	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
    148e:	7a6b      	ldrb	r3, [r5, #9]
    1490:	041b      	lsls	r3, r3, #16
    1492:	22f0      	movs	r2, #240	; 0xf0
    1494:	0312      	lsls	r2, r2, #12
    1496:	4013      	ands	r3, r2
    1498:	2201      	movs	r2, #1
    149a:	4313      	orrs	r3, r2
    149c:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
    149e:	7b2b      	ldrb	r3, [r5, #12]
    14a0:	7b6a      	ldrb	r2, [r5, #13]
    14a2:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    14a4:	896a      	ldrh	r2, [r5, #10]
    14a6:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
    14a8:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    14aa:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    14ac:	7beb      	ldrb	r3, [r5, #15]
    14ae:	021b      	lsls	r3, r3, #8
    14b0:	22fe      	movs	r2, #254	; 0xfe
    14b2:	01d2      	lsls	r2, r2, #7
    14b4:	4013      	ands	r3, r2
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
    14b6:	7c29      	ldrb	r1, [r5, #16]
    14b8:	227f      	movs	r2, #127	; 0x7f
    14ba:	400a      	ands	r2, r1
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    14bc:	4313      	orrs	r3, r2
    14be:	64a3      	str	r3, [r4, #72]	; 0x48
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    14c0:	7c6a      	ldrb	r2, [r5, #17]
    14c2:	0112      	lsls	r2, r2, #4
    14c4:	2330      	movs	r3, #48	; 0x30
    14c6:	4013      	ands	r3, r2
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
    14c8:	7ca9      	ldrb	r1, [r5, #18]
    14ca:	0089      	lsls	r1, r1, #2
    14cc:	220c      	movs	r2, #12
    14ce:	400a      	ands	r2, r1
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    14d0:	4313      	orrs	r3, r2
    14d2:	2280      	movs	r2, #128	; 0x80
    14d4:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_standard_reject) {
    14d6:	7ceb      	ldrb	r3, [r5, #19]
    14d8:	2b00      	cmp	r3, #0
    14da:	d003      	beq.n	14e4 <can_init+0x118>
		hw->GFC.reg |= CAN_GFC_RRFS;
    14dc:	58a3      	ldr	r3, [r4, r2]
    14de:	2102      	movs	r1, #2
    14e0:	430b      	orrs	r3, r1
    14e2:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_extended_reject) {
    14e4:	7d2b      	ldrb	r3, [r5, #20]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d004      	beq.n	14f4 <can_init+0x128>
		hw->GFC.reg |= CAN_GFC_RRFE;
    14ea:	2280      	movs	r2, #128	; 0x80
    14ec:	58a3      	ldr	r3, [r4, r2]
    14ee:	2101      	movs	r1, #1
    14f0:	430b      	orrs	r3, r1
    14f2:	50a3      	str	r3, [r4, r2]
	hw->XIDAM.reg = config->extended_id_mask;
    14f4:	2390      	movs	r3, #144	; 0x90
    14f6:	69aa      	ldr	r2, [r5, #24]
    14f8:	50e2      	str	r2, [r4, r3]
	if (config->rx_fifo_0_overwrite) {
    14fa:	7f2b      	ldrb	r3, [r5, #28]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d005      	beq.n	150c <can_init+0x140>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
    1500:	22a0      	movs	r2, #160	; 0xa0
    1502:	58a1      	ldr	r1, [r4, r2]
    1504:	2380      	movs	r3, #128	; 0x80
    1506:	061b      	lsls	r3, r3, #24
    1508:	430b      	orrs	r3, r1
    150a:	50a3      	str	r3, [r4, r2]
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
    150c:	22a0      	movs	r2, #160	; 0xa0
    150e:	58a1      	ldr	r1, [r4, r2]
    1510:	7f6b      	ldrb	r3, [r5, #29]
    1512:	061b      	lsls	r3, r3, #24
    1514:	20fe      	movs	r0, #254	; 0xfe
    1516:	05c0      	lsls	r0, r0, #23
    1518:	4003      	ands	r3, r0
    151a:	430b      	orrs	r3, r1
    151c:	50a3      	str	r3, [r4, r2]
	if (config->rx_fifo_1_overwrite) {
    151e:	7fab      	ldrb	r3, [r5, #30]
    1520:	2b00      	cmp	r3, #0
    1522:	d005      	beq.n	1530 <can_init+0x164>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
    1524:	3210      	adds	r2, #16
    1526:	58a1      	ldr	r1, [r4, r2]
    1528:	2380      	movs	r3, #128	; 0x80
    152a:	061b      	lsls	r3, r3, #24
    152c:	430b      	orrs	r3, r1
    152e:	50a3      	str	r3, [r4, r2]
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
    1530:	22b0      	movs	r2, #176	; 0xb0
    1532:	58a1      	ldr	r1, [r4, r2]
    1534:	7feb      	ldrb	r3, [r5, #31]
    1536:	061b      	lsls	r3, r3, #24
    1538:	20fe      	movs	r0, #254	; 0xfe
    153a:	05c0      	lsls	r0, r0, #23
    153c:	4003      	ands	r3, r0
    153e:	430b      	orrs	r3, r1
    1540:	50a3      	str	r3, [r4, r2]
	if (config->tx_queue_mode) {
    1542:	2320      	movs	r3, #32
    1544:	5ceb      	ldrb	r3, [r5, r3]
    1546:	2b00      	cmp	r3, #0
    1548:	d005      	beq.n	1556 <can_init+0x18a>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
    154a:	3210      	adds	r2, #16
    154c:	58a1      	ldr	r1, [r4, r2]
    154e:	2380      	movs	r3, #128	; 0x80
    1550:	05db      	lsls	r3, r3, #23
    1552:	430b      	orrs	r3, r1
    1554:	50a3      	str	r3, [r4, r2]
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
    1556:	22f0      	movs	r2, #240	; 0xf0
    1558:	58a1      	ldr	r1, [r4, r2]
    155a:	2321      	movs	r3, #33	; 0x21
    155c:	5ceb      	ldrb	r3, [r5, r3]
    155e:	061b      	lsls	r3, r3, #24
    1560:	20fc      	movs	r0, #252	; 0xfc
    1562:	0580      	lsls	r0, r0, #22
    1564:	4003      	ands	r3, r0
    1566:	430b      	orrs	r3, r1
    1568:	50a3      	str	r3, [r4, r2]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
    156a:	2303      	movs	r3, #3
    156c:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
    156e:	3b04      	subs	r3, #4
    1570:	3a10      	subs	r2, #16
    1572:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
    1574:	3204      	adds	r2, #4
    1576:	50a3      	str	r3, [r4, r2]
}
    1578:	bd70      	pop	{r4, r5, r6, pc}
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
    157a:	493e      	ldr	r1, [pc, #248]	; (1674 <can_init+0x2a8>)
    157c:	201a      	movs	r0, #26
    157e:	4b43      	ldr	r3, [pc, #268]	; (168c <can_init+0x2c0>)
    1580:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
    1582:	201a      	movs	r0, #26
    1584:	4b42      	ldr	r3, [pc, #264]	; (1690 <can_init+0x2c4>)
    1586:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1588:	4b3b      	ldr	r3, [pc, #236]	; (1678 <can_init+0x2ac>)
    158a:	699a      	ldr	r2, [r3, #24]
    158c:	2102      	movs	r1, #2
    158e:	430a      	orrs	r2, r1
    1590:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
    1592:	4a40      	ldr	r2, [pc, #256]	; (1694 <can_init+0x2c8>)
    1594:	0412      	lsls	r2, r2, #16
    1596:	0c12      	lsrs	r2, r2, #16
    1598:	2180      	movs	r1, #128	; 0x80
    159a:	0389      	lsls	r1, r1, #14
    159c:	430a      	orrs	r2, r1
    159e:	2184      	movs	r1, #132	; 0x84
    15a0:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
    15a2:	4a3d      	ldr	r2, [pc, #244]	; (1698 <can_init+0x2cc>)
    15a4:	0412      	lsls	r2, r2, #16
    15a6:	0c12      	lsrs	r2, r2, #16
    15a8:	2180      	movs	r1, #128	; 0x80
    15aa:	0349      	lsls	r1, r1, #13
    15ac:	430a      	orrs	r2, r1
    15ae:	2088      	movs	r0, #136	; 0x88
    15b0:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
    15b2:	4a3a      	ldr	r2, [pc, #232]	; (169c <can_init+0x2d0>)
    15b4:	0412      	lsls	r2, r2, #16
    15b6:	0c12      	lsrs	r2, r2, #16
    15b8:	430a      	orrs	r2, r1
    15ba:	3018      	adds	r0, #24
    15bc:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
    15be:	4a38      	ldr	r2, [pc, #224]	; (16a0 <can_init+0x2d4>)
    15c0:	0412      	lsls	r2, r2, #16
    15c2:	0c12      	lsrs	r2, r2, #16
    15c4:	4311      	orrs	r1, r2
    15c6:	22b0      	movs	r2, #176	; 0xb0
    15c8:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
    15ca:	4a36      	ldr	r2, [pc, #216]	; (16a4 <can_init+0x2d8>)
    15cc:	0412      	lsls	r2, r2, #16
    15ce:	0c12      	lsrs	r2, r2, #16
    15d0:	21ac      	movs	r1, #172	; 0xac
    15d2:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    15d4:	4a34      	ldr	r2, [pc, #208]	; (16a8 <can_init+0x2dc>)
    15d6:	0412      	lsls	r2, r2, #16
    15d8:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
    15da:	4934      	ldr	r1, [pc, #208]	; (16ac <can_init+0x2e0>)
    15dc:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    15de:	21c0      	movs	r1, #192	; 0xc0
    15e0:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
    15e2:	4a33      	ldr	r2, [pc, #204]	; (16b0 <can_init+0x2e4>)
    15e4:	0412      	lsls	r2, r2, #16
    15e6:	0c12      	lsrs	r2, r2, #16
    15e8:	2180      	movs	r1, #128	; 0x80
    15ea:	0309      	lsls	r1, r1, #12
    15ec:	430a      	orrs	r2, r1
    15ee:	21f0      	movs	r1, #240	; 0xf0
    15f0:	505a      	str	r2, [r3, r1]
    15f2:	e702      	b.n	13fa <can_init+0x2e>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
    15f4:	491f      	ldr	r1, [pc, #124]	; (1674 <can_init+0x2a8>)
    15f6:	201b      	movs	r0, #27
    15f8:	4b24      	ldr	r3, [pc, #144]	; (168c <can_init+0x2c0>)
    15fa:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
    15fc:	201b      	movs	r0, #27
    15fe:	4b24      	ldr	r3, [pc, #144]	; (1690 <can_init+0x2c4>)
    1600:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1602:	4b1e      	ldr	r3, [pc, #120]	; (167c <can_init+0x2b0>)
    1604:	699a      	ldr	r2, [r3, #24]
    1606:	2102      	movs	r1, #2
    1608:	430a      	orrs	r2, r1
    160a:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
    160c:	4a29      	ldr	r2, [pc, #164]	; (16b4 <can_init+0x2e8>)
    160e:	0412      	lsls	r2, r2, #16
    1610:	0c12      	lsrs	r2, r2, #16
    1612:	2180      	movs	r1, #128	; 0x80
    1614:	0389      	lsls	r1, r1, #14
    1616:	430a      	orrs	r2, r1
    1618:	2184      	movs	r1, #132	; 0x84
    161a:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
    161c:	4a26      	ldr	r2, [pc, #152]	; (16b8 <can_init+0x2ec>)
    161e:	0412      	lsls	r2, r2, #16
    1620:	0c12      	lsrs	r2, r2, #16
    1622:	2180      	movs	r1, #128	; 0x80
    1624:	0349      	lsls	r1, r1, #13
    1626:	430a      	orrs	r2, r1
    1628:	2088      	movs	r0, #136	; 0x88
    162a:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
    162c:	4a23      	ldr	r2, [pc, #140]	; (16bc <can_init+0x2f0>)
    162e:	0412      	lsls	r2, r2, #16
    1630:	0c12      	lsrs	r2, r2, #16
    1632:	430a      	orrs	r2, r1
    1634:	3018      	adds	r0, #24
    1636:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
    1638:	4a21      	ldr	r2, [pc, #132]	; (16c0 <can_init+0x2f4>)
    163a:	0412      	lsls	r2, r2, #16
    163c:	0c12      	lsrs	r2, r2, #16
    163e:	4311      	orrs	r1, r2
    1640:	22b0      	movs	r2, #176	; 0xb0
    1642:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
    1644:	4a1f      	ldr	r2, [pc, #124]	; (16c4 <can_init+0x2f8>)
    1646:	0412      	lsls	r2, r2, #16
    1648:	0c12      	lsrs	r2, r2, #16
    164a:	21ac      	movs	r1, #172	; 0xac
    164c:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    164e:	4a1e      	ldr	r2, [pc, #120]	; (16c8 <can_init+0x2fc>)
    1650:	0412      	lsls	r2, r2, #16
    1652:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
    1654:	4915      	ldr	r1, [pc, #84]	; (16ac <can_init+0x2e0>)
    1656:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    1658:	21c0      	movs	r1, #192	; 0xc0
    165a:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
    165c:	4a1b      	ldr	r2, [pc, #108]	; (16cc <can_init+0x300>)
    165e:	0412      	lsls	r2, r2, #16
    1660:	0c12      	lsrs	r2, r2, #16
    1662:	2180      	movs	r1, #128	; 0x80
    1664:	0309      	lsls	r1, r1, #12
    1666:	430a      	orrs	r2, r1
    1668:	21f0      	movs	r1, #240	; 0xf0
    166a:	505a      	str	r2, [r3, r1]
    166c:	e6c5      	b.n	13fa <can_init+0x2e>
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	00001395 	.word	0x00001395
    1674:	20002488 	.word	0x20002488
    1678:	42001c00 	.word	0x42001c00
    167c:	42002000 	.word	0x42002000
    1680:	00000777 	.word	0x00000777
    1684:	06050a03 	.word	0x06050a03
    1688:	00000a33 	.word	0x00000a33
    168c:	0000284d 	.word	0x0000284d
    1690:	000027dd 	.word	0x000027dd
    1694:	20000f9c 	.word	0x20000f9c
    1698:	2000061c 	.word	0x2000061c
    169c:	2000069c 	.word	0x2000069c
    16a0:	20000b1c 	.word	0x20000b1c
    16a4:	2000019c 	.word	0x2000019c
    16a8:	2000101c 	.word	0x2000101c
    16ac:	04040000 	.word	0x04040000
    16b0:	2000125c 	.word	0x2000125c
    16b4:	2000209c 	.word	0x2000209c
    16b8:	2000171c 	.word	0x2000171c
    16bc:	2000179c 	.word	0x2000179c
    16c0:	20001c1c 	.word	0x20001c1c
    16c4:	2000129c 	.word	0x2000129c
    16c8:	2000211c 	.word	0x2000211c
    16cc:	2000235c 	.word	0x2000235c

000016d0 <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
    16d0:	6802      	ldr	r2, [r0, #0]
    16d2:	6993      	ldr	r3, [r2, #24]
    16d4:	2101      	movs	r1, #1
    16d6:	438b      	bics	r3, r1
    16d8:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
    16da:	6801      	ldr	r1, [r0, #0]
    16dc:	2201      	movs	r2, #1
    16de:	698b      	ldr	r3, [r1, #24]
    16e0:	421a      	tst	r2, r3
    16e2:	d1fc      	bne.n	16de <can_start+0xe>
}
    16e4:	4770      	bx	lr

000016e6 <can_enable_fd_mode>:
	while (!(module_inst->hw->CCCR.reg & CAN_CCCR_INIT));
}

void can_enable_fd_mode(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg |= CAN_CCCR_INIT;
    16e6:	6802      	ldr	r2, [r0, #0]
    16e8:	6993      	ldr	r3, [r2, #24]
    16ea:	2101      	movs	r1, #1
    16ec:	430b      	orrs	r3, r1
    16ee:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->CCCR.reg & CAN_CCCR_INIT));
    16f0:	6802      	ldr	r2, [r0, #0]
    16f2:	6993      	ldr	r3, [r2, #24]
    16f4:	4219      	tst	r1, r3
    16f6:	d0fc      	beq.n	16f2 <can_enable_fd_mode+0xc>
	module_inst->hw->CCCR.reg |= CAN_CCCR_CCE;
    16f8:	6993      	ldr	r3, [r2, #24]
    16fa:	2102      	movs	r1, #2
    16fc:	430b      	orrs	r3, r1
    16fe:	6193      	str	r3, [r2, #24]

	module_inst->hw->CCCR.reg |= CAN_CCCR_FDOE;
    1700:	6802      	ldr	r2, [r0, #0]
    1702:	6991      	ldr	r1, [r2, #24]
    1704:	2380      	movs	r3, #128	; 0x80
    1706:	005b      	lsls	r3, r3, #1
    1708:	430b      	orrs	r3, r1
    170a:	6193      	str	r3, [r2, #24]
	module_inst->hw->CCCR.reg |= CAN_CCCR_BRSE;
    170c:	6802      	ldr	r2, [r0, #0]
    170e:	6991      	ldr	r1, [r2, #24]
    1710:	2380      	movs	r3, #128	; 0x80
    1712:	009b      	lsls	r3, r3, #2
    1714:	430b      	orrs	r3, r1
    1716:	6193      	str	r3, [r2, #24]
}
    1718:	4770      	bx	lr
	...

0000171c <can_set_rx_standard_filter>:
}

enum status_code can_set_rx_standard_filter(
		struct can_module *const module_inst,
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
    171c:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    171e:	6803      	ldr	r3, [r0, #0]
    1720:	4809      	ldr	r0, [pc, #36]	; (1748 <can_set_rx_standard_filter+0x2c>)
    1722:	4283      	cmp	r3, r0
    1724:	d004      	beq.n	1730 <can_set_rx_standard_filter+0x14>
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1726:	4c09      	ldr	r4, [pc, #36]	; (174c <can_set_rx_standard_filter+0x30>)
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1728:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    172a:	42a3      	cmp	r3, r4
    172c:	d006      	beq.n	173c <can_set_rx_standard_filter+0x20>
}
    172e:	bd10      	pop	{r4, pc}
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    1730:	6809      	ldr	r1, [r1, #0]
    1732:	0092      	lsls	r2, r2, #2
    1734:	4b06      	ldr	r3, [pc, #24]	; (1750 <can_set_rx_standard_filter+0x34>)
    1736:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    1738:	2000      	movs	r0, #0
    173a:	e7f8      	b.n	172e <can_set_rx_standard_filter+0x12>
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    173c:	6809      	ldr	r1, [r1, #0]
    173e:	0092      	lsls	r2, r2, #2
    1740:	4b04      	ldr	r3, [pc, #16]	; (1754 <can_set_rx_standard_filter+0x38>)
    1742:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    1744:	2000      	movs	r0, #0
    1746:	e7f2      	b.n	172e <can_set_rx_standard_filter+0x12>
    1748:	42001c00 	.word	0x42001c00
    174c:	42002000 	.word	0x42002000
    1750:	20000f9c 	.word	0x20000f9c
    1754:	2000209c 	.word	0x2000209c

00001758 <can_get_rx_buffer_element>:
}

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
    1758:	b510      	push	{r4, lr}
    175a:	000c      	movs	r4, r1
	if (module_inst->hw == CAN0) {
    175c:	6803      	ldr	r3, [r0, #0]
    175e:	490f      	ldr	r1, [pc, #60]	; (179c <can_get_rx_buffer_element+0x44>)
    1760:	428b      	cmp	r3, r1
    1762:	d004      	beq.n	176e <can_get_rx_buffer_element+0x16>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1764:	490e      	ldr	r1, [pc, #56]	; (17a0 <can_get_rx_buffer_element+0x48>)
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1766:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    1768:	428b      	cmp	r3, r1
    176a:	d00b      	beq.n	1784 <can_get_rx_buffer_element+0x2c>
}
    176c:	bd10      	pop	{r4, pc}
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    176e:	00d1      	lsls	r1, r2, #3
    1770:	188a      	adds	r2, r1, r2
    1772:	00d2      	lsls	r2, r2, #3
    1774:	490b      	ldr	r1, [pc, #44]	; (17a4 <can_get_rx_buffer_element+0x4c>)
    1776:	1889      	adds	r1, r1, r2
    1778:	2248      	movs	r2, #72	; 0x48
    177a:	0020      	movs	r0, r4
    177c:	4b0a      	ldr	r3, [pc, #40]	; (17a8 <can_get_rx_buffer_element+0x50>)
    177e:	4798      	blx	r3
		return STATUS_OK;
    1780:	2000      	movs	r0, #0
    1782:	e7f3      	b.n	176c <can_get_rx_buffer_element+0x14>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    1784:	00d1      	lsls	r1, r2, #3
    1786:	188a      	adds	r2, r1, r2
    1788:	00d2      	lsls	r2, r2, #3
    178a:	4908      	ldr	r1, [pc, #32]	; (17ac <can_get_rx_buffer_element+0x54>)
    178c:	1889      	adds	r1, r1, r2
    178e:	2248      	movs	r2, #72	; 0x48
    1790:	0020      	movs	r0, r4
    1792:	4b05      	ldr	r3, [pc, #20]	; (17a8 <can_get_rx_buffer_element+0x50>)
    1794:	4798      	blx	r3
		return STATUS_OK;
    1796:	2000      	movs	r0, #0
    1798:	e7e8      	b.n	176c <can_get_rx_buffer_element+0x14>
    179a:	46c0      	nop			; (mov r8, r8)
    179c:	42001c00 	.word	0x42001c00
    17a0:	42002000 	.word	0x42002000
    17a4:	2000019c 	.word	0x2000019c
    17a8:	000066e9 	.word	0x000066e9
    17ac:	2000129c 	.word	0x2000129c

000017b0 <can_get_rx_fifo_0_element>:

enum status_code can_get_rx_fifo_0_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
    17b0:	b510      	push	{r4, lr}
    17b2:	000c      	movs	r4, r1
	if (module_inst->hw == CAN0) {
    17b4:	6803      	ldr	r3, [r0, #0]
    17b6:	490f      	ldr	r1, [pc, #60]	; (17f4 <can_get_rx_fifo_0_element+0x44>)
    17b8:	428b      	cmp	r3, r1
    17ba:	d004      	beq.n	17c6 <can_get_rx_fifo_0_element+0x16>
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    17bc:	490e      	ldr	r1, [pc, #56]	; (17f8 <can_get_rx_fifo_0_element+0x48>)
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    17be:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    17c0:	428b      	cmp	r3, r1
    17c2:	d00b      	beq.n	17dc <can_get_rx_fifo_0_element+0x2c>
}
    17c4:	bd10      	pop	{r4, pc}
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    17c6:	00d1      	lsls	r1, r2, #3
    17c8:	188a      	adds	r2, r1, r2
    17ca:	00d2      	lsls	r2, r2, #3
    17cc:	490b      	ldr	r1, [pc, #44]	; (17fc <can_get_rx_fifo_0_element+0x4c>)
    17ce:	1889      	adds	r1, r1, r2
    17d0:	2248      	movs	r2, #72	; 0x48
    17d2:	0020      	movs	r0, r4
    17d4:	4b0a      	ldr	r3, [pc, #40]	; (1800 <can_get_rx_fifo_0_element+0x50>)
    17d6:	4798      	blx	r3
		return STATUS_OK;
    17d8:	2000      	movs	r0, #0
    17da:	e7f3      	b.n	17c4 <can_get_rx_fifo_0_element+0x14>
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    17dc:	00d1      	lsls	r1, r2, #3
    17de:	188a      	adds	r2, r1, r2
    17e0:	00d2      	lsls	r2, r2, #3
    17e2:	4908      	ldr	r1, [pc, #32]	; (1804 <can_get_rx_fifo_0_element+0x54>)
    17e4:	1889      	adds	r1, r1, r2
    17e6:	2248      	movs	r2, #72	; 0x48
    17e8:	0020      	movs	r0, r4
    17ea:	4b05      	ldr	r3, [pc, #20]	; (1800 <can_get_rx_fifo_0_element+0x50>)
    17ec:	4798      	blx	r3
		return STATUS_OK;
    17ee:	2000      	movs	r0, #0
    17f0:	e7e8      	b.n	17c4 <can_get_rx_fifo_0_element+0x14>
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	42001c00 	.word	0x42001c00
    17f8:	42002000 	.word	0x42002000
    17fc:	2000069c 	.word	0x2000069c
    1800:	000066e9 	.word	0x000066e9
    1804:	2000179c 	.word	0x2000179c

00001808 <can_set_tx_buffer_element>:
}

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
    1808:	b530      	push	{r4, r5, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
    180a:	6803      	ldr	r3, [r0, #0]
    180c:	481d      	ldr	r0, [pc, #116]	; (1884 <can_set_tx_buffer_element+0x7c>)
    180e:	4283      	cmp	r3, r0
    1810:	d004      	beq.n	181c <can_set_tx_buffer_element+0x14>
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1812:	4c1d      	ldr	r4, [pc, #116]	; (1888 <can_set_tx_buffer_element+0x80>)
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1814:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    1816:	42a3      	cmp	r3, r4
    1818:	d01a      	beq.n	1850 <can_set_tx_buffer_element+0x48>
}
    181a:	bd30      	pop	{r4, r5, pc}
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
    181c:	680d      	ldr	r5, [r1, #0]
    181e:	481b      	ldr	r0, [pc, #108]	; (188c <can_set_tx_buffer_element+0x84>)
    1820:	00d4      	lsls	r4, r2, #3
    1822:	18a3      	adds	r3, r4, r2
    1824:	00db      	lsls	r3, r3, #3
    1826:	501d      	str	r5, [r3, r0]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
    1828:	684d      	ldr	r5, [r1, #4]
    182a:	18a3      	adds	r3, r4, r2
    182c:	00db      	lsls	r3, r3, #3
    182e:	18c3      	adds	r3, r0, r3
    1830:	605d      	str	r5, [r3, #4]
    1832:	000b      	movs	r3, r1
    1834:	3308      	adds	r3, #8
    1836:	18a2      	adds	r2, r4, r2
    1838:	00d2      	lsls	r2, r2, #3
    183a:	3208      	adds	r2, #8
    183c:	1882      	adds	r2, r0, r2
    183e:	3148      	adds	r1, #72	; 0x48
			can0_tx_buffer[index].data[i] = tx_element->data[i];
    1840:	7818      	ldrb	r0, [r3, #0]
    1842:	7010      	strb	r0, [r2, #0]
    1844:	3301      	adds	r3, #1
    1846:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    1848:	428b      	cmp	r3, r1
    184a:	d1f9      	bne.n	1840 <can_set_tx_buffer_element+0x38>
		return STATUS_OK;
    184c:	2000      	movs	r0, #0
    184e:	e7e4      	b.n	181a <can_set_tx_buffer_element+0x12>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
    1850:	680d      	ldr	r5, [r1, #0]
    1852:	480f      	ldr	r0, [pc, #60]	; (1890 <can_set_tx_buffer_element+0x88>)
    1854:	00d4      	lsls	r4, r2, #3
    1856:	18a3      	adds	r3, r4, r2
    1858:	00db      	lsls	r3, r3, #3
    185a:	501d      	str	r5, [r3, r0]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
    185c:	684d      	ldr	r5, [r1, #4]
    185e:	18a3      	adds	r3, r4, r2
    1860:	00db      	lsls	r3, r3, #3
    1862:	18c3      	adds	r3, r0, r3
    1864:	605d      	str	r5, [r3, #4]
    1866:	000b      	movs	r3, r1
    1868:	3308      	adds	r3, #8
    186a:	18a2      	adds	r2, r4, r2
    186c:	00d2      	lsls	r2, r2, #3
    186e:	3208      	adds	r2, #8
    1870:	1882      	adds	r2, r0, r2
    1872:	3148      	adds	r1, #72	; 0x48
			can1_tx_buffer[index].data[i] = tx_element->data[i];
    1874:	7818      	ldrb	r0, [r3, #0]
    1876:	7010      	strb	r0, [r2, #0]
    1878:	3301      	adds	r3, #1
    187a:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    187c:	428b      	cmp	r3, r1
    187e:	d1f9      	bne.n	1874 <can_set_tx_buffer_element+0x6c>
		return STATUS_OK;
    1880:	2000      	movs	r0, #0
    1882:	e7ca      	b.n	181a <can_set_tx_buffer_element+0x12>
    1884:	42001c00 	.word	0x42001c00
    1888:	42002000 	.word	0x42002000
    188c:	2000101c 	.word	0x2000101c
    1890:	2000211c 	.word	0x2000211c

00001894 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1894:	b500      	push	{lr}
    1896:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1898:	ab01      	add	r3, sp, #4
    189a:	2280      	movs	r2, #128	; 0x80
    189c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    189e:	780a      	ldrb	r2, [r1, #0]
    18a0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    18a2:	784a      	ldrb	r2, [r1, #1]
    18a4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    18a6:	788a      	ldrb	r2, [r1, #2]
    18a8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    18aa:	0019      	movs	r1, r3
    18ac:	4b01      	ldr	r3, [pc, #4]	; (18b4 <port_pin_set_config+0x20>)
    18ae:	4798      	blx	r3
}
    18b0:	b003      	add	sp, #12
    18b2:	bd00      	pop	{pc}
    18b4:	00002949 	.word	0x00002949

000018b8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    18b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ba:	46de      	mov	lr, fp
    18bc:	4657      	mov	r7, sl
    18be:	464e      	mov	r6, r9
    18c0:	4645      	mov	r5, r8
    18c2:	b5e0      	push	{r5, r6, r7, lr}
    18c4:	b087      	sub	sp, #28
    18c6:	4680      	mov	r8, r0
    18c8:	9104      	str	r1, [sp, #16]
    18ca:	0016      	movs	r6, r2
    18cc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    18ce:	2200      	movs	r2, #0
    18d0:	2300      	movs	r3, #0
    18d2:	2100      	movs	r1, #0
    18d4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    18d6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    18d8:	2001      	movs	r0, #1
    18da:	0021      	movs	r1, r4
    18dc:	9600      	str	r6, [sp, #0]
    18de:	9701      	str	r7, [sp, #4]
    18e0:	465c      	mov	r4, fp
    18e2:	9403      	str	r4, [sp, #12]
    18e4:	4644      	mov	r4, r8
    18e6:	9405      	str	r4, [sp, #20]
    18e8:	e013      	b.n	1912 <long_division+0x5a>
    18ea:	2420      	movs	r4, #32
    18ec:	1a64      	subs	r4, r4, r1
    18ee:	0005      	movs	r5, r0
    18f0:	40e5      	lsrs	r5, r4
    18f2:	46a8      	mov	r8, r5
    18f4:	e014      	b.n	1920 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    18f6:	9c00      	ldr	r4, [sp, #0]
    18f8:	9d01      	ldr	r5, [sp, #4]
    18fa:	1b12      	subs	r2, r2, r4
    18fc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    18fe:	465c      	mov	r4, fp
    1900:	464d      	mov	r5, r9
    1902:	432c      	orrs	r4, r5
    1904:	46a3      	mov	fp, r4
    1906:	9c03      	ldr	r4, [sp, #12]
    1908:	4645      	mov	r5, r8
    190a:	432c      	orrs	r4, r5
    190c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    190e:	3901      	subs	r1, #1
    1910:	d325      	bcc.n	195e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1912:	2420      	movs	r4, #32
    1914:	4264      	negs	r4, r4
    1916:	190c      	adds	r4, r1, r4
    1918:	d4e7      	bmi.n	18ea <long_division+0x32>
    191a:	0005      	movs	r5, r0
    191c:	40a5      	lsls	r5, r4
    191e:	46a8      	mov	r8, r5
    1920:	0004      	movs	r4, r0
    1922:	408c      	lsls	r4, r1
    1924:	46a1      	mov	r9, r4
		r = r << 1;
    1926:	1892      	adds	r2, r2, r2
    1928:	415b      	adcs	r3, r3
    192a:	0014      	movs	r4, r2
    192c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    192e:	9e05      	ldr	r6, [sp, #20]
    1930:	464f      	mov	r7, r9
    1932:	403e      	ands	r6, r7
    1934:	46b4      	mov	ip, r6
    1936:	9e04      	ldr	r6, [sp, #16]
    1938:	4647      	mov	r7, r8
    193a:	403e      	ands	r6, r7
    193c:	46b2      	mov	sl, r6
    193e:	4666      	mov	r6, ip
    1940:	4657      	mov	r7, sl
    1942:	433e      	orrs	r6, r7
    1944:	d003      	beq.n	194e <long_division+0x96>
			r |= 0x01;
    1946:	0006      	movs	r6, r0
    1948:	4326      	orrs	r6, r4
    194a:	0032      	movs	r2, r6
    194c:	002b      	movs	r3, r5
		if (r >= d) {
    194e:	9c00      	ldr	r4, [sp, #0]
    1950:	9d01      	ldr	r5, [sp, #4]
    1952:	429d      	cmp	r5, r3
    1954:	d8db      	bhi.n	190e <long_division+0x56>
    1956:	d1ce      	bne.n	18f6 <long_division+0x3e>
    1958:	4294      	cmp	r4, r2
    195a:	d8d8      	bhi.n	190e <long_division+0x56>
    195c:	e7cb      	b.n	18f6 <long_division+0x3e>
    195e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1960:	4658      	mov	r0, fp
    1962:	0019      	movs	r1, r3
    1964:	b007      	add	sp, #28
    1966:	bc3c      	pop	{r2, r3, r4, r5}
    1968:	4690      	mov	r8, r2
    196a:	4699      	mov	r9, r3
    196c:	46a2      	mov	sl, r4
    196e:	46ab      	mov	fp, r5
    1970:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001972 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1972:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1974:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1976:	2340      	movs	r3, #64	; 0x40
    1978:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    197a:	4281      	cmp	r1, r0
    197c:	d202      	bcs.n	1984 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    197e:	0018      	movs	r0, r3
    1980:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1982:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1984:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1986:	1c63      	adds	r3, r4, #1
    1988:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    198a:	4288      	cmp	r0, r1
    198c:	d9f9      	bls.n	1982 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    198e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1990:	2cff      	cmp	r4, #255	; 0xff
    1992:	d8f4      	bhi.n	197e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1994:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1996:	2300      	movs	r3, #0
    1998:	e7f1      	b.n	197e <_sercom_get_sync_baud_val+0xc>
	...

0000199c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    199c:	b5f0      	push	{r4, r5, r6, r7, lr}
    199e:	b083      	sub	sp, #12
    19a0:	000f      	movs	r7, r1
    19a2:	0016      	movs	r6, r2
    19a4:	aa08      	add	r2, sp, #32
    19a6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    19a8:	0004      	movs	r4, r0
    19aa:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19ac:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    19ae:	42bc      	cmp	r4, r7
    19b0:	d902      	bls.n	19b8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    19b2:	0010      	movs	r0, r2
    19b4:	b003      	add	sp, #12
    19b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    19b8:	2b00      	cmp	r3, #0
    19ba:	d114      	bne.n	19e6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    19bc:	0002      	movs	r2, r0
    19be:	0008      	movs	r0, r1
    19c0:	2100      	movs	r1, #0
    19c2:	4c19      	ldr	r4, [pc, #100]	; (1a28 <_sercom_get_async_baud_val+0x8c>)
    19c4:	47a0      	blx	r4
    19c6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    19c8:	003a      	movs	r2, r7
    19ca:	2300      	movs	r3, #0
    19cc:	2000      	movs	r0, #0
    19ce:	4c17      	ldr	r4, [pc, #92]	; (1a2c <_sercom_get_async_baud_val+0x90>)
    19d0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    19d2:	2200      	movs	r2, #0
    19d4:	2301      	movs	r3, #1
    19d6:	1a12      	subs	r2, r2, r0
    19d8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    19da:	0c12      	lsrs	r2, r2, #16
    19dc:	041b      	lsls	r3, r3, #16
    19de:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    19e0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    19e2:	2200      	movs	r2, #0
    19e4:	e7e5      	b.n	19b2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    19e6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    19e8:	2b01      	cmp	r3, #1
    19ea:	d1f9      	bne.n	19e0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    19ec:	000a      	movs	r2, r1
    19ee:	2300      	movs	r3, #0
    19f0:	2100      	movs	r1, #0
    19f2:	4c0d      	ldr	r4, [pc, #52]	; (1a28 <_sercom_get_async_baud_val+0x8c>)
    19f4:	47a0      	blx	r4
    19f6:	0002      	movs	r2, r0
    19f8:	000b      	movs	r3, r1
    19fa:	9200      	str	r2, [sp, #0]
    19fc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    19fe:	0038      	movs	r0, r7
    1a00:	2100      	movs	r1, #0
    1a02:	4c0a      	ldr	r4, [pc, #40]	; (1a2c <_sercom_get_async_baud_val+0x90>)
    1a04:	47a0      	blx	r4
    1a06:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1a08:	2380      	movs	r3, #128	; 0x80
    1a0a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a0c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1a0e:	4298      	cmp	r0, r3
    1a10:	d8cf      	bhi.n	19b2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1a12:	0f79      	lsrs	r1, r7, #29
    1a14:	00f8      	lsls	r0, r7, #3
    1a16:	9a00      	ldr	r2, [sp, #0]
    1a18:	9b01      	ldr	r3, [sp, #4]
    1a1a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1a1c:	00ea      	lsls	r2, r5, #3
    1a1e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1a20:	b2d2      	uxtb	r2, r2
    1a22:	0352      	lsls	r2, r2, #13
    1a24:	432a      	orrs	r2, r5
    1a26:	e7db      	b.n	19e0 <_sercom_get_async_baud_val+0x44>
    1a28:	00006639 	.word	0x00006639
    1a2c:	000018b9 	.word	0x000018b9

00001a30 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1a30:	b510      	push	{r4, lr}
    1a32:	b082      	sub	sp, #8
    1a34:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1a36:	4b0e      	ldr	r3, [pc, #56]	; (1a70 <sercom_set_gclk_generator+0x40>)
    1a38:	781b      	ldrb	r3, [r3, #0]
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d007      	beq.n	1a4e <sercom_set_gclk_generator+0x1e>
    1a3e:	2900      	cmp	r1, #0
    1a40:	d105      	bne.n	1a4e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1a42:	4b0b      	ldr	r3, [pc, #44]	; (1a70 <sercom_set_gclk_generator+0x40>)
    1a44:	785b      	ldrb	r3, [r3, #1]
    1a46:	4283      	cmp	r3, r0
    1a48:	d010      	beq.n	1a6c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1a4a:	201d      	movs	r0, #29
    1a4c:	e00c      	b.n	1a68 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1a4e:	a901      	add	r1, sp, #4
    1a50:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1a52:	2012      	movs	r0, #18
    1a54:	4b07      	ldr	r3, [pc, #28]	; (1a74 <sercom_set_gclk_generator+0x44>)
    1a56:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1a58:	2012      	movs	r0, #18
    1a5a:	4b07      	ldr	r3, [pc, #28]	; (1a78 <sercom_set_gclk_generator+0x48>)
    1a5c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1a5e:	4b04      	ldr	r3, [pc, #16]	; (1a70 <sercom_set_gclk_generator+0x40>)
    1a60:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1a62:	2201      	movs	r2, #1
    1a64:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1a66:	2000      	movs	r0, #0
}
    1a68:	b002      	add	sp, #8
    1a6a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1a6c:	2000      	movs	r0, #0
    1a6e:	e7fb      	b.n	1a68 <sercom_set_gclk_generator+0x38>
    1a70:	2000239c 	.word	0x2000239c
    1a74:	0000284d 	.word	0x0000284d
    1a78:	000027dd 	.word	0x000027dd

00001a7c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1a7c:	4b40      	ldr	r3, [pc, #256]	; (1b80 <_sercom_get_default_pad+0x104>)
    1a7e:	4298      	cmp	r0, r3
    1a80:	d031      	beq.n	1ae6 <_sercom_get_default_pad+0x6a>
    1a82:	d90a      	bls.n	1a9a <_sercom_get_default_pad+0x1e>
    1a84:	4b3f      	ldr	r3, [pc, #252]	; (1b84 <_sercom_get_default_pad+0x108>)
    1a86:	4298      	cmp	r0, r3
    1a88:	d04d      	beq.n	1b26 <_sercom_get_default_pad+0xaa>
    1a8a:	4b3f      	ldr	r3, [pc, #252]	; (1b88 <_sercom_get_default_pad+0x10c>)
    1a8c:	4298      	cmp	r0, r3
    1a8e:	d05a      	beq.n	1b46 <_sercom_get_default_pad+0xca>
    1a90:	4b3e      	ldr	r3, [pc, #248]	; (1b8c <_sercom_get_default_pad+0x110>)
    1a92:	4298      	cmp	r0, r3
    1a94:	d037      	beq.n	1b06 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1a96:	2000      	movs	r0, #0
}
    1a98:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1a9a:	4b3d      	ldr	r3, [pc, #244]	; (1b90 <_sercom_get_default_pad+0x114>)
    1a9c:	4298      	cmp	r0, r3
    1a9e:	d00c      	beq.n	1aba <_sercom_get_default_pad+0x3e>
    1aa0:	4b3c      	ldr	r3, [pc, #240]	; (1b94 <_sercom_get_default_pad+0x118>)
    1aa2:	4298      	cmp	r0, r3
    1aa4:	d1f7      	bne.n	1a96 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1aa6:	2901      	cmp	r1, #1
    1aa8:	d017      	beq.n	1ada <_sercom_get_default_pad+0x5e>
    1aaa:	2900      	cmp	r1, #0
    1aac:	d05d      	beq.n	1b6a <_sercom_get_default_pad+0xee>
    1aae:	2902      	cmp	r1, #2
    1ab0:	d015      	beq.n	1ade <_sercom_get_default_pad+0x62>
    1ab2:	2903      	cmp	r1, #3
    1ab4:	d015      	beq.n	1ae2 <_sercom_get_default_pad+0x66>
	return 0;
    1ab6:	2000      	movs	r0, #0
    1ab8:	e7ee      	b.n	1a98 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1aba:	2901      	cmp	r1, #1
    1abc:	d007      	beq.n	1ace <_sercom_get_default_pad+0x52>
    1abe:	2900      	cmp	r1, #0
    1ac0:	d051      	beq.n	1b66 <_sercom_get_default_pad+0xea>
    1ac2:	2902      	cmp	r1, #2
    1ac4:	d005      	beq.n	1ad2 <_sercom_get_default_pad+0x56>
    1ac6:	2903      	cmp	r1, #3
    1ac8:	d005      	beq.n	1ad6 <_sercom_get_default_pad+0x5a>
	return 0;
    1aca:	2000      	movs	r0, #0
    1acc:	e7e4      	b.n	1a98 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ace:	4832      	ldr	r0, [pc, #200]	; (1b98 <_sercom_get_default_pad+0x11c>)
    1ad0:	e7e2      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1ad2:	4832      	ldr	r0, [pc, #200]	; (1b9c <_sercom_get_default_pad+0x120>)
    1ad4:	e7e0      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1ad6:	4832      	ldr	r0, [pc, #200]	; (1ba0 <_sercom_get_default_pad+0x124>)
    1ad8:	e7de      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1ada:	4832      	ldr	r0, [pc, #200]	; (1ba4 <_sercom_get_default_pad+0x128>)
    1adc:	e7dc      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1ade:	4832      	ldr	r0, [pc, #200]	; (1ba8 <_sercom_get_default_pad+0x12c>)
    1ae0:	e7da      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1ae2:	4832      	ldr	r0, [pc, #200]	; (1bac <_sercom_get_default_pad+0x130>)
    1ae4:	e7d8      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1ae6:	2901      	cmp	r1, #1
    1ae8:	d007      	beq.n	1afa <_sercom_get_default_pad+0x7e>
    1aea:	2900      	cmp	r1, #0
    1aec:	d03f      	beq.n	1b6e <_sercom_get_default_pad+0xf2>
    1aee:	2902      	cmp	r1, #2
    1af0:	d005      	beq.n	1afe <_sercom_get_default_pad+0x82>
    1af2:	2903      	cmp	r1, #3
    1af4:	d005      	beq.n	1b02 <_sercom_get_default_pad+0x86>
	return 0;
    1af6:	2000      	movs	r0, #0
    1af8:	e7ce      	b.n	1a98 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1afa:	482d      	ldr	r0, [pc, #180]	; (1bb0 <_sercom_get_default_pad+0x134>)
    1afc:	e7cc      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1afe:	482d      	ldr	r0, [pc, #180]	; (1bb4 <_sercom_get_default_pad+0x138>)
    1b00:	e7ca      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b02:	482d      	ldr	r0, [pc, #180]	; (1bb8 <_sercom_get_default_pad+0x13c>)
    1b04:	e7c8      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b06:	2901      	cmp	r1, #1
    1b08:	d007      	beq.n	1b1a <_sercom_get_default_pad+0x9e>
    1b0a:	2900      	cmp	r1, #0
    1b0c:	d031      	beq.n	1b72 <_sercom_get_default_pad+0xf6>
    1b0e:	2902      	cmp	r1, #2
    1b10:	d005      	beq.n	1b1e <_sercom_get_default_pad+0xa2>
    1b12:	2903      	cmp	r1, #3
    1b14:	d005      	beq.n	1b22 <_sercom_get_default_pad+0xa6>
	return 0;
    1b16:	2000      	movs	r0, #0
    1b18:	e7be      	b.n	1a98 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b1a:	4828      	ldr	r0, [pc, #160]	; (1bbc <_sercom_get_default_pad+0x140>)
    1b1c:	e7bc      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b1e:	4828      	ldr	r0, [pc, #160]	; (1bc0 <_sercom_get_default_pad+0x144>)
    1b20:	e7ba      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b22:	4828      	ldr	r0, [pc, #160]	; (1bc4 <_sercom_get_default_pad+0x148>)
    1b24:	e7b8      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b26:	2901      	cmp	r1, #1
    1b28:	d007      	beq.n	1b3a <_sercom_get_default_pad+0xbe>
    1b2a:	2900      	cmp	r1, #0
    1b2c:	d023      	beq.n	1b76 <_sercom_get_default_pad+0xfa>
    1b2e:	2902      	cmp	r1, #2
    1b30:	d005      	beq.n	1b3e <_sercom_get_default_pad+0xc2>
    1b32:	2903      	cmp	r1, #3
    1b34:	d005      	beq.n	1b42 <_sercom_get_default_pad+0xc6>
	return 0;
    1b36:	2000      	movs	r0, #0
    1b38:	e7ae      	b.n	1a98 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b3a:	4823      	ldr	r0, [pc, #140]	; (1bc8 <_sercom_get_default_pad+0x14c>)
    1b3c:	e7ac      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b3e:	4823      	ldr	r0, [pc, #140]	; (1bcc <_sercom_get_default_pad+0x150>)
    1b40:	e7aa      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b42:	4823      	ldr	r0, [pc, #140]	; (1bd0 <_sercom_get_default_pad+0x154>)
    1b44:	e7a8      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b46:	2901      	cmp	r1, #1
    1b48:	d007      	beq.n	1b5a <_sercom_get_default_pad+0xde>
    1b4a:	2900      	cmp	r1, #0
    1b4c:	d015      	beq.n	1b7a <_sercom_get_default_pad+0xfe>
    1b4e:	2902      	cmp	r1, #2
    1b50:	d005      	beq.n	1b5e <_sercom_get_default_pad+0xe2>
    1b52:	2903      	cmp	r1, #3
    1b54:	d005      	beq.n	1b62 <_sercom_get_default_pad+0xe6>
	return 0;
    1b56:	2000      	movs	r0, #0
    1b58:	e79e      	b.n	1a98 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b5a:	481e      	ldr	r0, [pc, #120]	; (1bd4 <_sercom_get_default_pad+0x158>)
    1b5c:	e79c      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b5e:	481e      	ldr	r0, [pc, #120]	; (1bd8 <_sercom_get_default_pad+0x15c>)
    1b60:	e79a      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b62:	481e      	ldr	r0, [pc, #120]	; (1bdc <_sercom_get_default_pad+0x160>)
    1b64:	e798      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b66:	481e      	ldr	r0, [pc, #120]	; (1be0 <_sercom_get_default_pad+0x164>)
    1b68:	e796      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b6a:	481e      	ldr	r0, [pc, #120]	; (1be4 <_sercom_get_default_pad+0x168>)
    1b6c:	e794      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b6e:	481e      	ldr	r0, [pc, #120]	; (1be8 <_sercom_get_default_pad+0x16c>)
    1b70:	e792      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b72:	481e      	ldr	r0, [pc, #120]	; (1bec <_sercom_get_default_pad+0x170>)
    1b74:	e790      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b76:	481e      	ldr	r0, [pc, #120]	; (1bf0 <_sercom_get_default_pad+0x174>)
    1b78:	e78e      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b7a:	481e      	ldr	r0, [pc, #120]	; (1bf4 <_sercom_get_default_pad+0x178>)
    1b7c:	e78c      	b.n	1a98 <_sercom_get_default_pad+0x1c>
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	42000c00 	.word	0x42000c00
    1b84:	42001400 	.word	0x42001400
    1b88:	42001800 	.word	0x42001800
    1b8c:	42001000 	.word	0x42001000
    1b90:	42000400 	.word	0x42000400
    1b94:	42000800 	.word	0x42000800
    1b98:	00050003 	.word	0x00050003
    1b9c:	00060003 	.word	0x00060003
    1ba0:	00070003 	.word	0x00070003
    1ba4:	00110002 	.word	0x00110002
    1ba8:	00120002 	.word	0x00120002
    1bac:	00130002 	.word	0x00130002
    1bb0:	000d0002 	.word	0x000d0002
    1bb4:	000e0002 	.word	0x000e0002
    1bb8:	000f0002 	.word	0x000f0002
    1bbc:	00170002 	.word	0x00170002
    1bc0:	00180002 	.word	0x00180002
    1bc4:	00190002 	.word	0x00190002
    1bc8:	00290003 	.word	0x00290003
    1bcc:	002a0003 	.word	0x002a0003
    1bd0:	002b0003 	.word	0x002b0003
    1bd4:	00230003 	.word	0x00230003
    1bd8:	00200003 	.word	0x00200003
    1bdc:	00210003 	.word	0x00210003
    1be0:	00040003 	.word	0x00040003
    1be4:	00100002 	.word	0x00100002
    1be8:	000c0002 	.word	0x000c0002
    1bec:	00160002 	.word	0x00160002
    1bf0:	00280003 	.word	0x00280003
    1bf4:	00220003 	.word	0x00220003

00001bf8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1bf8:	b530      	push	{r4, r5, lr}
    1bfa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1bfc:	4b0b      	ldr	r3, [pc, #44]	; (1c2c <_sercom_get_sercom_inst_index+0x34>)
    1bfe:	466a      	mov	r2, sp
    1c00:	cb32      	ldmia	r3!, {r1, r4, r5}
    1c02:	c232      	stmia	r2!, {r1, r4, r5}
    1c04:	cb32      	ldmia	r3!, {r1, r4, r5}
    1c06:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1c08:	9b00      	ldr	r3, [sp, #0]
    1c0a:	4283      	cmp	r3, r0
    1c0c:	d00b      	beq.n	1c26 <_sercom_get_sercom_inst_index+0x2e>
    1c0e:	2301      	movs	r3, #1
    1c10:	009a      	lsls	r2, r3, #2
    1c12:	4669      	mov	r1, sp
    1c14:	5852      	ldr	r2, [r2, r1]
    1c16:	4282      	cmp	r2, r0
    1c18:	d006      	beq.n	1c28 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c1a:	3301      	adds	r3, #1
    1c1c:	2b06      	cmp	r3, #6
    1c1e:	d1f7      	bne.n	1c10 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1c20:	2000      	movs	r0, #0
}
    1c22:	b007      	add	sp, #28
    1c24:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c26:	2300      	movs	r3, #0
			return i;
    1c28:	b2d8      	uxtb	r0, r3
    1c2a:	e7fa      	b.n	1c22 <_sercom_get_sercom_inst_index+0x2a>
    1c2c:	000077d4 	.word	0x000077d4

00001c30 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1c30:	4770      	bx	lr
	...

00001c34 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1c34:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1c36:	4b0a      	ldr	r3, [pc, #40]	; (1c60 <_sercom_set_handler+0x2c>)
    1c38:	781b      	ldrb	r3, [r3, #0]
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d10c      	bne.n	1c58 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1c3e:	4f09      	ldr	r7, [pc, #36]	; (1c64 <_sercom_set_handler+0x30>)
    1c40:	4e09      	ldr	r6, [pc, #36]	; (1c68 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1c42:	4d0a      	ldr	r5, [pc, #40]	; (1c6c <_sercom_set_handler+0x38>)
    1c44:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1c46:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1c48:	195a      	adds	r2, r3, r5
    1c4a:	6014      	str	r4, [r2, #0]
    1c4c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c4e:	2b18      	cmp	r3, #24
    1c50:	d1f9      	bne.n	1c46 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1c52:	2201      	movs	r2, #1
    1c54:	4b02      	ldr	r3, [pc, #8]	; (1c60 <_sercom_set_handler+0x2c>)
    1c56:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1c58:	0080      	lsls	r0, r0, #2
    1c5a:	4b02      	ldr	r3, [pc, #8]	; (1c64 <_sercom_set_handler+0x30>)
    1c5c:	50c1      	str	r1, [r0, r3]
}
    1c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c60:	2000239e 	.word	0x2000239e
    1c64:	200023a0 	.word	0x200023a0
    1c68:	00001c31 	.word	0x00001c31
    1c6c:	2000248c 	.word	0x2000248c

00001c70 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1c70:	b500      	push	{lr}
    1c72:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1c74:	2309      	movs	r3, #9
    1c76:	466a      	mov	r2, sp
    1c78:	7013      	strb	r3, [r2, #0]
    1c7a:	3301      	adds	r3, #1
    1c7c:	7053      	strb	r3, [r2, #1]
    1c7e:	3301      	adds	r3, #1
    1c80:	7093      	strb	r3, [r2, #2]
    1c82:	3301      	adds	r3, #1
    1c84:	70d3      	strb	r3, [r2, #3]
    1c86:	3301      	adds	r3, #1
    1c88:	7113      	strb	r3, [r2, #4]
    1c8a:	3301      	adds	r3, #1
    1c8c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1c8e:	4b03      	ldr	r3, [pc, #12]	; (1c9c <_sercom_get_interrupt_vector+0x2c>)
    1c90:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1c92:	466b      	mov	r3, sp
    1c94:	5618      	ldrsb	r0, [r3, r0]
}
    1c96:	b003      	add	sp, #12
    1c98:	bd00      	pop	{pc}
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	00001bf9 	.word	0x00001bf9

00001ca0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1ca0:	b510      	push	{r4, lr}
    1ca2:	4b02      	ldr	r3, [pc, #8]	; (1cac <SERCOM0_Handler+0xc>)
    1ca4:	681b      	ldr	r3, [r3, #0]
    1ca6:	2000      	movs	r0, #0
    1ca8:	4798      	blx	r3
    1caa:	bd10      	pop	{r4, pc}
    1cac:	200023a0 	.word	0x200023a0

00001cb0 <SERCOM1_Handler>:
    1cb0:	b510      	push	{r4, lr}
    1cb2:	4b02      	ldr	r3, [pc, #8]	; (1cbc <SERCOM1_Handler+0xc>)
    1cb4:	685b      	ldr	r3, [r3, #4]
    1cb6:	2001      	movs	r0, #1
    1cb8:	4798      	blx	r3
    1cba:	bd10      	pop	{r4, pc}
    1cbc:	200023a0 	.word	0x200023a0

00001cc0 <SERCOM2_Handler>:
    1cc0:	b510      	push	{r4, lr}
    1cc2:	4b02      	ldr	r3, [pc, #8]	; (1ccc <SERCOM2_Handler+0xc>)
    1cc4:	689b      	ldr	r3, [r3, #8]
    1cc6:	2002      	movs	r0, #2
    1cc8:	4798      	blx	r3
    1cca:	bd10      	pop	{r4, pc}
    1ccc:	200023a0 	.word	0x200023a0

00001cd0 <SERCOM3_Handler>:
    1cd0:	b510      	push	{r4, lr}
    1cd2:	4b02      	ldr	r3, [pc, #8]	; (1cdc <SERCOM3_Handler+0xc>)
    1cd4:	68db      	ldr	r3, [r3, #12]
    1cd6:	2003      	movs	r0, #3
    1cd8:	4798      	blx	r3
    1cda:	bd10      	pop	{r4, pc}
    1cdc:	200023a0 	.word	0x200023a0

00001ce0 <SERCOM4_Handler>:
    1ce0:	b510      	push	{r4, lr}
    1ce2:	4b02      	ldr	r3, [pc, #8]	; (1cec <SERCOM4_Handler+0xc>)
    1ce4:	691b      	ldr	r3, [r3, #16]
    1ce6:	2004      	movs	r0, #4
    1ce8:	4798      	blx	r3
    1cea:	bd10      	pop	{r4, pc}
    1cec:	200023a0 	.word	0x200023a0

00001cf0 <SERCOM5_Handler>:
    1cf0:	b510      	push	{r4, lr}
    1cf2:	4b02      	ldr	r3, [pc, #8]	; (1cfc <SERCOM5_Handler+0xc>)
    1cf4:	695b      	ldr	r3, [r3, #20]
    1cf6:	2005      	movs	r0, #5
    1cf8:	4798      	blx	r3
    1cfa:	bd10      	pop	{r4, pc}
    1cfc:	200023a0 	.word	0x200023a0

00001d00 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d02:	46de      	mov	lr, fp
    1d04:	4657      	mov	r7, sl
    1d06:	464e      	mov	r6, r9
    1d08:	4645      	mov	r5, r8
    1d0a:	b5e0      	push	{r5, r6, r7, lr}
    1d0c:	b091      	sub	sp, #68	; 0x44
    1d0e:	0005      	movs	r5, r0
    1d10:	000c      	movs	r4, r1
    1d12:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1d14:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1d16:	0008      	movs	r0, r1
    1d18:	4bd2      	ldr	r3, [pc, #840]	; (2064 <STACK_SIZE+0x64>)
    1d1a:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
    1d1c:	2805      	cmp	r0, #5
    1d1e:	d00d      	beq.n	1d3c <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    1d20:	0007      	movs	r7, r0
    1d22:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1d24:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1d26:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1d28:	07d2      	lsls	r2, r2, #31
    1d2a:	d509      	bpl.n	1d40 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1d2c:	0018      	movs	r0, r3
    1d2e:	b011      	add	sp, #68	; 0x44
    1d30:	bc3c      	pop	{r2, r3, r4, r5}
    1d32:	4690      	mov	r8, r2
    1d34:	4699      	mov	r9, r3
    1d36:	46a2      	mov	sl, r4
    1d38:	46ab      	mov	fp, r5
    1d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    1d3c:	2719      	movs	r7, #25
    1d3e:	e7f1      	b.n	1d24 <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1d40:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    1d42:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1d44:	0792      	lsls	r2, r2, #30
    1d46:	d4f1      	bmi.n	1d2c <usart_init+0x2c>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    1d48:	4ac7      	ldr	r2, [pc, #796]	; (2068 <STACK_SIZE+0x68>)
    1d4a:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1d4c:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1d4e:	3b1b      	subs	r3, #27
    1d50:	4083      	lsls	r3, r0
    1d52:	430b      	orrs	r3, r1
    1d54:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    1d56:	a90f      	add	r1, sp, #60	; 0x3c
    1d58:	2335      	movs	r3, #53	; 0x35
    1d5a:	4698      	mov	r8, r3
    1d5c:	5cf3      	ldrb	r3, [r6, r3]
    1d5e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1d60:	b2ff      	uxtb	r7, r7
    1d62:	0038      	movs	r0, r7
    1d64:	4bc1      	ldr	r3, [pc, #772]	; (206c <STACK_SIZE+0x6c>)
    1d66:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1d68:	0038      	movs	r0, r7
    1d6a:	4bc1      	ldr	r3, [pc, #772]	; (2070 <STACK_SIZE+0x70>)
    1d6c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1d6e:	4643      	mov	r3, r8
    1d70:	5cf0      	ldrb	r0, [r6, r3]
    1d72:	2100      	movs	r1, #0
    1d74:	4bbf      	ldr	r3, [pc, #764]	; (2074 <STACK_SIZE+0x74>)
    1d76:	4798      	blx	r3
	module->character_size = config->character_size;
    1d78:	7af3      	ldrb	r3, [r6, #11]
    1d7a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1d7c:	232c      	movs	r3, #44	; 0x2c
    1d7e:	5cf3      	ldrb	r3, [r6, r3]
    1d80:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1d82:	232d      	movs	r3, #45	; 0x2d
    1d84:	5cf3      	ldrb	r3, [r6, r3]
    1d86:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1d88:	7ef3      	ldrb	r3, [r6, #27]
    1d8a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1d8c:	2324      	movs	r3, #36	; 0x24
    1d8e:	5cf3      	ldrb	r3, [r6, r3]
    1d90:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d92:	682b      	ldr	r3, [r5, #0]
    1d94:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1d96:	0018      	movs	r0, r3
    1d98:	4bb2      	ldr	r3, [pc, #712]	; (2064 <STACK_SIZE+0x64>)
    1d9a:	4798      	blx	r3
	if (sercom_index == 5) {
    1d9c:	2805      	cmp	r0, #5
    1d9e:	d01d      	beq.n	1ddc <usart_init+0xdc>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1da0:	3013      	adds	r0, #19
	uint16_t baud  = 0;
    1da2:	2200      	movs	r2, #0
    1da4:	230e      	movs	r3, #14
    1da6:	a906      	add	r1, sp, #24
    1da8:	468c      	mov	ip, r1
    1daa:	4463      	add	r3, ip
    1dac:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1dae:	8a33      	ldrh	r3, [r6, #16]
    1db0:	4698      	mov	r8, r3
    1db2:	2380      	movs	r3, #128	; 0x80
    1db4:	01db      	lsls	r3, r3, #7
    1db6:	4598      	cmp	r8, r3
    1db8:	d100      	bne.n	1dbc <usart_init+0xbc>
    1dba:	e0c3      	b.n	1f44 <usart_init+0x244>
    1dbc:	d910      	bls.n	1de0 <usart_init+0xe0>
    1dbe:	23c0      	movs	r3, #192	; 0xc0
    1dc0:	01db      	lsls	r3, r3, #7
    1dc2:	4598      	cmp	r8, r3
    1dc4:	d100      	bne.n	1dc8 <usart_init+0xc8>
    1dc6:	e0b8      	b.n	1f3a <usart_init+0x23a>
    1dc8:	2380      	movs	r3, #128	; 0x80
    1dca:	021b      	lsls	r3, r3, #8
    1dcc:	4598      	cmp	r8, r3
    1dce:	d000      	beq.n	1dd2 <usart_init+0xd2>
    1dd0:	e166      	b.n	20a0 <STACK_SIZE+0xa0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1dd2:	2303      	movs	r3, #3
    1dd4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1dd6:	2300      	movs	r3, #0
    1dd8:	9307      	str	r3, [sp, #28]
    1dda:	e00a      	b.n	1df2 <usart_init+0xf2>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1ddc:	2019      	movs	r0, #25
    1dde:	e7e0      	b.n	1da2 <usart_init+0xa2>
	switch (config->sample_rate) {
    1de0:	2380      	movs	r3, #128	; 0x80
    1de2:	019b      	lsls	r3, r3, #6
    1de4:	4598      	cmp	r8, r3
    1de6:	d000      	beq.n	1dea <usart_init+0xea>
    1de8:	e15a      	b.n	20a0 <STACK_SIZE+0xa0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1dea:	2310      	movs	r3, #16
    1dec:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1dee:	3b0f      	subs	r3, #15
    1df0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1df2:	6833      	ldr	r3, [r6, #0]
    1df4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1df6:	68f3      	ldr	r3, [r6, #12]
    1df8:	469b      	mov	fp, r3
		config->sample_adjustment |
    1dfa:	6973      	ldr	r3, [r6, #20]
    1dfc:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1dfe:	7e33      	ldrb	r3, [r6, #24]
    1e00:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1e02:	232e      	movs	r3, #46	; 0x2e
    1e04:	5cf3      	ldrb	r3, [r6, r3]
    1e06:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1e08:	6873      	ldr	r3, [r6, #4]
    1e0a:	4699      	mov	r9, r3
	switch (transfer_mode)
    1e0c:	2b00      	cmp	r3, #0
    1e0e:	d100      	bne.n	1e12 <usart_init+0x112>
    1e10:	e0c5      	b.n	1f9e <usart_init+0x29e>
    1e12:	2380      	movs	r3, #128	; 0x80
    1e14:	055b      	lsls	r3, r3, #21
    1e16:	4599      	cmp	r9, r3
    1e18:	d100      	bne.n	1e1c <usart_init+0x11c>
    1e1a:	e0a8      	b.n	1f6e <usart_init+0x26e>
	if(config->encoding_format_enable) {
    1e1c:	7e73      	ldrb	r3, [r6, #25]
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d002      	beq.n	1e28 <usart_init+0x128>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1e22:	7eb3      	ldrb	r3, [r6, #26]
    1e24:	9a02      	ldr	r2, [sp, #8]
    1e26:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1e28:	230e      	movs	r3, #14
    1e2a:	aa06      	add	r2, sp, #24
    1e2c:	4694      	mov	ip, r2
    1e2e:	4463      	add	r3, ip
    1e30:	881b      	ldrh	r3, [r3, #0]
    1e32:	9a02      	ldr	r2, [sp, #8]
    1e34:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1e36:	9a05      	ldr	r2, [sp, #20]
    1e38:	465b      	mov	r3, fp
    1e3a:	431a      	orrs	r2, r3
    1e3c:	9b03      	ldr	r3, [sp, #12]
    1e3e:	431a      	orrs	r2, r3
    1e40:	464b      	mov	r3, r9
    1e42:	431a      	orrs	r2, r3
    1e44:	4643      	mov	r3, r8
    1e46:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1e48:	9b04      	ldr	r3, [sp, #16]
    1e4a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1e4c:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1e4e:	4653      	mov	r3, sl
    1e50:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1e52:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
    1e54:	232f      	movs	r3, #47	; 0x2f
    1e56:	5cf3      	ldrb	r3, [r6, r3]
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d101      	bne.n	1e60 <usart_init+0x160>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1e5c:	3304      	adds	r3, #4
    1e5e:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e60:	7e73      	ldrb	r3, [r6, #25]
    1e62:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e64:	2124      	movs	r1, #36	; 0x24
    1e66:	5c71      	ldrb	r1, [r6, r1]
    1e68:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e6a:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e6c:	2126      	movs	r1, #38	; 0x26
    1e6e:	5c71      	ldrb	r1, [r6, r1]
    1e70:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e72:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e74:	212c      	movs	r1, #44	; 0x2c
    1e76:	5c71      	ldrb	r1, [r6, r1]
    1e78:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e7a:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1e7c:	212d      	movs	r1, #45	; 0x2d
    1e7e:	5c71      	ldrb	r1, [r6, r1]
    1e80:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e82:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    1e84:	7ab0      	ldrb	r0, [r6, #10]
    1e86:	7af1      	ldrb	r1, [r6, #11]
    1e88:	4308      	orrs	r0, r1
    1e8a:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
    1e8c:	8933      	ldrh	r3, [r6, #8]
    1e8e:	2bff      	cmp	r3, #255	; 0xff
    1e90:	d100      	bne.n	1e94 <usart_init+0x194>
    1e92:	e0aa      	b.n	1fea <usart_init+0x2ea>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1e94:	2180      	movs	r1, #128	; 0x80
    1e96:	0449      	lsls	r1, r1, #17
    1e98:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
    1e9a:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1e9c:	9902      	ldr	r1, [sp, #8]
    1e9e:	688b      	ldr	r3, [r1, #8]
    1ea0:	469c      	mov	ip, r3
						| config->lin_break_length;
    1ea2:	8c33      	ldrh	r3, [r6, #32]
    1ea4:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    1ea6:	430b      	orrs	r3, r1
    1ea8:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1eaa:	2107      	movs	r1, #7
    1eac:	4663      	mov	r3, ip
    1eae:	4019      	ands	r1, r3
						| config->lin_break_length;
    1eb0:	003b      	movs	r3, r7
    1eb2:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1eb4:	9902      	ldr	r1, [sp, #8]
    1eb6:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
    1eb8:	69f3      	ldr	r3, [r6, #28]
    1eba:	2b00      	cmp	r3, #0
    1ebc:	d002      	beq.n	1ec4 <usart_init+0x1c4>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    1ebe:	496e      	ldr	r1, [pc, #440]	; (2078 <STACK_SIZE+0x78>)
    1ec0:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
    1ec2:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1ec4:	2334      	movs	r3, #52	; 0x34
    1ec6:	5cf3      	ldrb	r3, [r6, r3]
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d103      	bne.n	1ed4 <usart_init+0x1d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1ecc:	4b6b      	ldr	r3, [pc, #428]	; (207c <STACK_SIZE+0x7c>)
    1ece:	789b      	ldrb	r3, [r3, #2]
    1ed0:	079b      	lsls	r3, r3, #30
    1ed2:	d501      	bpl.n	1ed8 <usart_init+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1ed4:	2380      	movs	r3, #128	; 0x80
    1ed6:	431a      	orrs	r2, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1ed8:	6829      	ldr	r1, [r5, #0]
    1eda:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1edc:	69cb      	ldr	r3, [r1, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d1fc      	bne.n	1edc <usart_init+0x1dc>
	usart_hw->CTRLB.reg = ctrlb;
    1ee2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ee4:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1ee6:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1ee8:	2b00      	cmp	r3, #0
    1eea:	d1fc      	bne.n	1ee6 <usart_init+0x1e6>
	usart_hw->CTRLA.reg = ctrla;
    1eec:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    1eee:	683b      	ldr	r3, [r7, #0]
    1ef0:	22f0      	movs	r2, #240	; 0xf0
    1ef2:	0512      	lsls	r2, r2, #20
    1ef4:	4013      	ands	r3, r2
    1ef6:	22e0      	movs	r2, #224	; 0xe0
    1ef8:	04d2      	lsls	r2, r2, #19
    1efa:	4293      	cmp	r3, r2
    1efc:	d00a      	beq.n	1f14 <usart_init+0x214>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    1efe:	68bb      	ldr	r3, [r7, #8]
    1f00:	2207      	movs	r2, #7
    1f02:	4393      	bics	r3, r2
    1f04:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    1f06:	68ba      	ldr	r2, [r7, #8]
    1f08:	2325      	movs	r3, #37	; 0x25
    1f0a:	5cf1      	ldrb	r1, [r6, r3]
    1f0c:	3b1e      	subs	r3, #30
    1f0e:	400b      	ands	r3, r1
    1f10:	4313      	orrs	r3, r2
    1f12:	60bb      	str	r3, [r7, #8]
    1f14:	ab0e      	add	r3, sp, #56	; 0x38
    1f16:	2280      	movs	r2, #128	; 0x80
    1f18:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f1a:	2200      	movs	r2, #0
    1f1c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1f1e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1f20:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1f22:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1f24:	930a      	str	r3, [sp, #40]	; 0x28
    1f26:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1f28:	930b      	str	r3, [sp, #44]	; 0x2c
    1f2a:	6c33      	ldr	r3, [r6, #64]	; 0x40
    1f2c:	930c      	str	r3, [sp, #48]	; 0x30
    1f2e:	6c73      	ldr	r3, [r6, #68]	; 0x44
    1f30:	9302      	str	r3, [sp, #8]
    1f32:	930d      	str	r3, [sp, #52]	; 0x34
    1f34:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1f36:	ae0a      	add	r6, sp, #40	; 0x28
    1f38:	e066      	b.n	2008 <STACK_SIZE+0x8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1f3a:	2308      	movs	r3, #8
    1f3c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1f3e:	3b07      	subs	r3, #7
    1f40:	9307      	str	r3, [sp, #28]
    1f42:	e756      	b.n	1df2 <usart_init+0xf2>
	ctrla = (uint32_t)config->data_order |
    1f44:	6833      	ldr	r3, [r6, #0]
    1f46:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1f48:	68f3      	ldr	r3, [r6, #12]
    1f4a:	469b      	mov	fp, r3
		config->sample_adjustment |
    1f4c:	6973      	ldr	r3, [r6, #20]
    1f4e:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1f50:	7e33      	ldrb	r3, [r6, #24]
    1f52:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1f54:	232e      	movs	r3, #46	; 0x2e
    1f56:	5cf3      	ldrb	r3, [r6, r3]
    1f58:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1f5a:	6873      	ldr	r3, [r6, #4]
    1f5c:	4699      	mov	r9, r3
	switch (transfer_mode)
    1f5e:	2b00      	cmp	r3, #0
    1f60:	d019      	beq.n	1f96 <usart_init+0x296>
    1f62:	2380      	movs	r3, #128	; 0x80
    1f64:	055b      	lsls	r3, r3, #21
    1f66:	4599      	cmp	r9, r3
    1f68:	d001      	beq.n	1f6e <usart_init+0x26e>
	enum status_code status_code = STATUS_OK;
    1f6a:	2300      	movs	r3, #0
    1f6c:	e027      	b.n	1fbe <usart_init+0x2be>
			if (!config->use_external_clock) {
    1f6e:	232f      	movs	r3, #47	; 0x2f
    1f70:	5cf3      	ldrb	r3, [r6, r3]
    1f72:	2b00      	cmp	r3, #0
    1f74:	d000      	beq.n	1f78 <usart_init+0x278>
    1f76:	e751      	b.n	1e1c <usart_init+0x11c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1f78:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1f7a:	001f      	movs	r7, r3
    1f7c:	b2c0      	uxtb	r0, r0
    1f7e:	4b40      	ldr	r3, [pc, #256]	; (2080 <STACK_SIZE+0x80>)
    1f80:	4798      	blx	r3
    1f82:	0001      	movs	r1, r0
    1f84:	220e      	movs	r2, #14
    1f86:	ab06      	add	r3, sp, #24
    1f88:	469c      	mov	ip, r3
    1f8a:	4462      	add	r2, ip
    1f8c:	0038      	movs	r0, r7
    1f8e:	4b3d      	ldr	r3, [pc, #244]	; (2084 <STACK_SIZE+0x84>)
    1f90:	4798      	blx	r3
    1f92:	0003      	movs	r3, r0
    1f94:	e013      	b.n	1fbe <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1f96:	2308      	movs	r3, #8
    1f98:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1f9a:	2300      	movs	r3, #0
    1f9c:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1f9e:	232f      	movs	r3, #47	; 0x2f
    1fa0:	5cf3      	ldrb	r3, [r6, r3]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d00f      	beq.n	1fc6 <usart_init+0x2c6>
				status_code =
    1fa6:	9b06      	ldr	r3, [sp, #24]
    1fa8:	9300      	str	r3, [sp, #0]
    1faa:	9b07      	ldr	r3, [sp, #28]
    1fac:	220e      	movs	r2, #14
    1fae:	a906      	add	r1, sp, #24
    1fb0:	468c      	mov	ip, r1
    1fb2:	4462      	add	r2, ip
    1fb4:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1fb6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1fb8:	4f33      	ldr	r7, [pc, #204]	; (2088 <STACK_SIZE+0x88>)
    1fba:	47b8      	blx	r7
    1fbc:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	d000      	beq.n	1fc4 <usart_init+0x2c4>
    1fc2:	e6b3      	b.n	1d2c <usart_init+0x2c>
    1fc4:	e72a      	b.n	1e1c <usart_init+0x11c>
						_sercom_get_async_baud_val(config->baudrate,
    1fc6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1fc8:	001f      	movs	r7, r3
    1fca:	b2c0      	uxtb	r0, r0
    1fcc:	4b2c      	ldr	r3, [pc, #176]	; (2080 <STACK_SIZE+0x80>)
    1fce:	4798      	blx	r3
    1fd0:	0001      	movs	r1, r0
				status_code =
    1fd2:	9b06      	ldr	r3, [sp, #24]
    1fd4:	9300      	str	r3, [sp, #0]
    1fd6:	9b07      	ldr	r3, [sp, #28]
    1fd8:	220e      	movs	r2, #14
    1fda:	a806      	add	r0, sp, #24
    1fdc:	4684      	mov	ip, r0
    1fde:	4462      	add	r2, ip
    1fe0:	0038      	movs	r0, r7
    1fe2:	4f29      	ldr	r7, [pc, #164]	; (2088 <STACK_SIZE+0x88>)
    1fe4:	47b8      	blx	r7
    1fe6:	0003      	movs	r3, r0
    1fe8:	e7e9      	b.n	1fbe <usart_init+0x2be>
		if(config->lin_slave_enable) {
    1fea:	7ef3      	ldrb	r3, [r6, #27]
    1fec:	2b00      	cmp	r3, #0
    1fee:	d100      	bne.n	1ff2 <usart_init+0x2f2>
    1ff0:	e754      	b.n	1e9c <usart_init+0x19c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1ff2:	2380      	movs	r3, #128	; 0x80
    1ff4:	04db      	lsls	r3, r3, #19
    1ff6:	431a      	orrs	r2, r3
    1ff8:	e750      	b.n	1e9c <usart_init+0x19c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1ffa:	0020      	movs	r0, r4
    1ffc:	4b23      	ldr	r3, [pc, #140]	; (208c <STACK_SIZE+0x8c>)
    1ffe:	4798      	blx	r3
    2000:	e007      	b.n	2012 <STACK_SIZE+0x12>
    2002:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2004:	2f04      	cmp	r7, #4
    2006:	d00d      	beq.n	2024 <STACK_SIZE+0x24>
    2008:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    200a:	00bb      	lsls	r3, r7, #2
    200c:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    200e:	2800      	cmp	r0, #0
    2010:	d0f3      	beq.n	1ffa <usart_init+0x2fa>
		if (current_pinmux != PINMUX_UNUSED) {
    2012:	1c43      	adds	r3, r0, #1
    2014:	d0f5      	beq.n	2002 <STACK_SIZE+0x2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2016:	a90e      	add	r1, sp, #56	; 0x38
    2018:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    201a:	0c00      	lsrs	r0, r0, #16
    201c:	b2c0      	uxtb	r0, r0
    201e:	4b1c      	ldr	r3, [pc, #112]	; (2090 <STACK_SIZE+0x90>)
    2020:	4798      	blx	r3
    2022:	e7ee      	b.n	2002 <STACK_SIZE+0x2>
		module->callback[i]            = NULL;
    2024:	2300      	movs	r3, #0
    2026:	60eb      	str	r3, [r5, #12]
    2028:	612b      	str	r3, [r5, #16]
    202a:	616b      	str	r3, [r5, #20]
    202c:	61ab      	str	r3, [r5, #24]
    202e:	61eb      	str	r3, [r5, #28]
    2030:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2032:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2034:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2036:	2200      	movs	r2, #0
    2038:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    203a:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    203c:	3330      	adds	r3, #48	; 0x30
    203e:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2040:	3301      	adds	r3, #1
    2042:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2044:	3301      	adds	r3, #1
    2046:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2048:	3301      	adds	r3, #1
    204a:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    204c:	6828      	ldr	r0, [r5, #0]
    204e:	4b05      	ldr	r3, [pc, #20]	; (2064 <STACK_SIZE+0x64>)
    2050:	4798      	blx	r3
    2052:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2054:	490f      	ldr	r1, [pc, #60]	; (2094 <STACK_SIZE+0x94>)
    2056:	4b10      	ldr	r3, [pc, #64]	; (2098 <STACK_SIZE+0x98>)
    2058:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    205a:	00a4      	lsls	r4, r4, #2
    205c:	4b0f      	ldr	r3, [pc, #60]	; (209c <STACK_SIZE+0x9c>)
    205e:	50e5      	str	r5, [r4, r3]
	return status_code;
    2060:	2300      	movs	r3, #0
    2062:	e663      	b.n	1d2c <usart_init+0x2c>
    2064:	00001bf9 	.word	0x00001bf9
    2068:	40000800 	.word	0x40000800
    206c:	0000284d 	.word	0x0000284d
    2070:	000027dd 	.word	0x000027dd
    2074:	00001a31 	.word	0x00001a31
    2078:	f0ffffff 	.word	0xf0ffffff
    207c:	41002000 	.word	0x41002000
    2080:	00002871 	.word	0x00002871
    2084:	00001973 	.word	0x00001973
    2088:	0000199d 	.word	0x0000199d
    208c:	00001a7d 	.word	0x00001a7d
    2090:	00002949 	.word	0x00002949
    2094:	0000213d 	.word	0x0000213d
    2098:	00001c35 	.word	0x00001c35
    209c:	2000248c 	.word	0x2000248c
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    20a0:	2310      	movs	r3, #16
    20a2:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    20a4:	2300      	movs	r3, #0
    20a6:	9307      	str	r3, [sp, #28]
    20a8:	e6a3      	b.n	1df2 <usart_init+0xf2>
    20aa:	46c0      	nop			; (mov r8, r8)

000020ac <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    20ac:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    20ae:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    20b0:	2a00      	cmp	r2, #0
    20b2:	d101      	bne.n	20b8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    20b4:	0018      	movs	r0, r3
    20b6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    20b8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    20ba:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    20bc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    20be:	2a00      	cmp	r2, #0
    20c0:	d1f8      	bne.n	20b4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    20c2:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    20c4:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    20c6:	2102      	movs	r1, #2
    20c8:	7e13      	ldrb	r3, [r2, #24]
    20ca:	420b      	tst	r3, r1
    20cc:	d0fc      	beq.n	20c8 <usart_write_wait+0x1c>
	return STATUS_OK;
    20ce:	2300      	movs	r3, #0
    20d0:	e7f0      	b.n	20b4 <usart_write_wait+0x8>

000020d2 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    20d2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    20d4:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    20d6:	2a00      	cmp	r2, #0
    20d8:	d101      	bne.n	20de <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    20da:	0018      	movs	r0, r3
    20dc:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    20de:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    20e0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    20e2:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    20e4:	2a00      	cmp	r2, #0
    20e6:	d1f8      	bne.n	20da <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    20e8:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    20ea:	7e10      	ldrb	r0, [r2, #24]
    20ec:	0740      	lsls	r0, r0, #29
    20ee:	d5f4      	bpl.n	20da <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    20f0:	8b53      	ldrh	r3, [r2, #26]
    20f2:	b2db      	uxtb	r3, r3
	if (error_code) {
    20f4:	0658      	lsls	r0, r3, #25
    20f6:	d01d      	beq.n	2134 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    20f8:	0798      	lsls	r0, r3, #30
    20fa:	d503      	bpl.n	2104 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    20fc:	2302      	movs	r3, #2
    20fe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2100:	3318      	adds	r3, #24
    2102:	e7ea      	b.n	20da <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2104:	0758      	lsls	r0, r3, #29
    2106:	d503      	bpl.n	2110 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2108:	2304      	movs	r3, #4
    210a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    210c:	331a      	adds	r3, #26
    210e:	e7e4      	b.n	20da <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2110:	07d8      	lsls	r0, r3, #31
    2112:	d503      	bpl.n	211c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2114:	2301      	movs	r3, #1
    2116:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2118:	3312      	adds	r3, #18
    211a:	e7de      	b.n	20da <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    211c:	06d8      	lsls	r0, r3, #27
    211e:	d503      	bpl.n	2128 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2120:	2310      	movs	r3, #16
    2122:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2124:	3332      	adds	r3, #50	; 0x32
    2126:	e7d8      	b.n	20da <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2128:	069b      	lsls	r3, r3, #26
    212a:	d503      	bpl.n	2134 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    212c:	2320      	movs	r3, #32
    212e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2130:	3321      	adds	r3, #33	; 0x21
    2132:	e7d2      	b.n	20da <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2134:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2136:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2138:	2300      	movs	r3, #0
    213a:	e7ce      	b.n	20da <usart_read_wait+0x8>

0000213c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    213e:	0080      	lsls	r0, r0, #2
    2140:	4b64      	ldr	r3, [pc, #400]	; (22d4 <_usart_interrupt_handler+0x198>)
    2142:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2144:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2146:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2148:	2b00      	cmp	r3, #0
    214a:	d1fc      	bne.n	2146 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    214c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    214e:	7da6      	ldrb	r6, [r4, #22]
    2150:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2152:	2330      	movs	r3, #48	; 0x30
    2154:	5ceb      	ldrb	r3, [r5, r3]
    2156:	2231      	movs	r2, #49	; 0x31
    2158:	5caf      	ldrb	r7, [r5, r2]
    215a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    215c:	07f3      	lsls	r3, r6, #31
    215e:	d522      	bpl.n	21a6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2160:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2162:	b29b      	uxth	r3, r3
    2164:	2b00      	cmp	r3, #0
    2166:	d01c      	beq.n	21a2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2168:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    216a:	7813      	ldrb	r3, [r2, #0]
    216c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    216e:	1c51      	adds	r1, r2, #1
    2170:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2172:	7969      	ldrb	r1, [r5, #5]
    2174:	2901      	cmp	r1, #1
    2176:	d00e      	beq.n	2196 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2178:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    217a:	05db      	lsls	r3, r3, #23
    217c:	0ddb      	lsrs	r3, r3, #23
    217e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2180:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2182:	3b01      	subs	r3, #1
    2184:	b29b      	uxth	r3, r3
    2186:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2188:	2b00      	cmp	r3, #0
    218a:	d10c      	bne.n	21a6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    218c:	3301      	adds	r3, #1
    218e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2190:	3301      	adds	r3, #1
    2192:	75a3      	strb	r3, [r4, #22]
    2194:	e007      	b.n	21a6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2196:	7851      	ldrb	r1, [r2, #1]
    2198:	0209      	lsls	r1, r1, #8
    219a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    219c:	3202      	adds	r2, #2
    219e:	62aa      	str	r2, [r5, #40]	; 0x28
    21a0:	e7eb      	b.n	217a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    21a2:	2301      	movs	r3, #1
    21a4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    21a6:	07b3      	lsls	r3, r6, #30
    21a8:	d506      	bpl.n	21b8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    21aa:	2302      	movs	r3, #2
    21ac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    21ae:	2200      	movs	r2, #0
    21b0:	3331      	adds	r3, #49	; 0x31
    21b2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    21b4:	07fb      	lsls	r3, r7, #31
    21b6:	d41e      	bmi.n	21f6 <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    21b8:	0773      	lsls	r3, r6, #29
    21ba:	d568      	bpl.n	228e <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
    21bc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    21be:	b29b      	uxth	r3, r3
    21c0:	2b00      	cmp	r3, #0
    21c2:	d062      	beq.n	228a <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    21c4:	8b63      	ldrh	r3, [r4, #26]
    21c6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    21c8:	071a      	lsls	r2, r3, #28
    21ca:	d418      	bmi.n	21fe <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    21cc:	227f      	movs	r2, #127	; 0x7f
    21ce:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    21d0:	065a      	lsls	r2, r3, #25
    21d2:	d501      	bpl.n	21d8 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    21d4:	2240      	movs	r2, #64	; 0x40
    21d6:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    21d8:	2b00      	cmp	r3, #0
    21da:	d033      	beq.n	2244 <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    21dc:	079a      	lsls	r2, r3, #30
    21de:	d511      	bpl.n	2204 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    21e0:	221a      	movs	r2, #26
    21e2:	2332      	movs	r3, #50	; 0x32
    21e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    21e6:	3b30      	subs	r3, #48	; 0x30
    21e8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    21ea:	077b      	lsls	r3, r7, #29
    21ec:	d54f      	bpl.n	228e <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    21ee:	0028      	movs	r0, r5
    21f0:	696b      	ldr	r3, [r5, #20]
    21f2:	4798      	blx	r3
    21f4:	e04b      	b.n	228e <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    21f6:	0028      	movs	r0, r5
    21f8:	68eb      	ldr	r3, [r5, #12]
    21fa:	4798      	blx	r3
    21fc:	e7dc      	b.n	21b8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    21fe:	2277      	movs	r2, #119	; 0x77
    2200:	4013      	ands	r3, r2
    2202:	e7e5      	b.n	21d0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2204:	075a      	lsls	r2, r3, #29
    2206:	d505      	bpl.n	2214 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2208:	221e      	movs	r2, #30
    220a:	2332      	movs	r3, #50	; 0x32
    220c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    220e:	3b2e      	subs	r3, #46	; 0x2e
    2210:	8363      	strh	r3, [r4, #26]
    2212:	e7ea      	b.n	21ea <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2214:	07da      	lsls	r2, r3, #31
    2216:	d505      	bpl.n	2224 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2218:	2213      	movs	r2, #19
    221a:	2332      	movs	r3, #50	; 0x32
    221c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    221e:	3b31      	subs	r3, #49	; 0x31
    2220:	8363      	strh	r3, [r4, #26]
    2222:	e7e2      	b.n	21ea <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2224:	06da      	lsls	r2, r3, #27
    2226:	d505      	bpl.n	2234 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2228:	2242      	movs	r2, #66	; 0x42
    222a:	2332      	movs	r3, #50	; 0x32
    222c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    222e:	3b22      	subs	r3, #34	; 0x22
    2230:	8363      	strh	r3, [r4, #26]
    2232:	e7da      	b.n	21ea <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2234:	069b      	lsls	r3, r3, #26
    2236:	d5d8      	bpl.n	21ea <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2238:	2241      	movs	r2, #65	; 0x41
    223a:	2332      	movs	r3, #50	; 0x32
    223c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    223e:	3b12      	subs	r3, #18
    2240:	8363      	strh	r3, [r4, #26]
    2242:	e7d2      	b.n	21ea <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2244:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2246:	05db      	lsls	r3, r3, #23
    2248:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    224a:	b2da      	uxtb	r2, r3
    224c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    224e:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2250:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2252:	1c51      	adds	r1, r2, #1
    2254:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2256:	7969      	ldrb	r1, [r5, #5]
    2258:	2901      	cmp	r1, #1
    225a:	d010      	beq.n	227e <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    225c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    225e:	3b01      	subs	r3, #1
    2260:	b29b      	uxth	r3, r3
    2262:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2264:	2b00      	cmp	r3, #0
    2266:	d112      	bne.n	228e <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2268:	3304      	adds	r3, #4
    226a:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    226c:	2200      	movs	r2, #0
    226e:	332e      	adds	r3, #46	; 0x2e
    2270:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2272:	07bb      	lsls	r3, r7, #30
    2274:	d50b      	bpl.n	228e <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2276:	0028      	movs	r0, r5
    2278:	692b      	ldr	r3, [r5, #16]
    227a:	4798      	blx	r3
    227c:	e007      	b.n	228e <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    227e:	0a1b      	lsrs	r3, r3, #8
    2280:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2282:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2284:	3301      	adds	r3, #1
    2286:	626b      	str	r3, [r5, #36]	; 0x24
    2288:	e7e8      	b.n	225c <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    228a:	2304      	movs	r3, #4
    228c:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    228e:	06f3      	lsls	r3, r6, #27
    2290:	d504      	bpl.n	229c <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2292:	2310      	movs	r3, #16
    2294:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2296:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2298:	06fb      	lsls	r3, r7, #27
    229a:	d40e      	bmi.n	22ba <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    229c:	06b3      	lsls	r3, r6, #26
    229e:	d504      	bpl.n	22aa <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    22a0:	2320      	movs	r3, #32
    22a2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    22a4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    22a6:	073b      	lsls	r3, r7, #28
    22a8:	d40b      	bmi.n	22c2 <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    22aa:	0733      	lsls	r3, r6, #28
    22ac:	d504      	bpl.n	22b8 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    22ae:	2308      	movs	r3, #8
    22b0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    22b2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    22b4:	06bb      	lsls	r3, r7, #26
    22b6:	d408      	bmi.n	22ca <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    22b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    22ba:	0028      	movs	r0, r5
    22bc:	69eb      	ldr	r3, [r5, #28]
    22be:	4798      	blx	r3
    22c0:	e7ec      	b.n	229c <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    22c2:	0028      	movs	r0, r5
    22c4:	69ab      	ldr	r3, [r5, #24]
    22c6:	4798      	blx	r3
    22c8:	e7ef      	b.n	22aa <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    22ca:	6a2b      	ldr	r3, [r5, #32]
    22cc:	0028      	movs	r0, r5
    22ce:	4798      	blx	r3
}
    22d0:	e7f2      	b.n	22b8 <_usart_interrupt_handler+0x17c>
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	2000248c 	.word	0x2000248c

000022d8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    22d8:	b510      	push	{r4, lr}
	switch (clock_source) {
    22da:	2807      	cmp	r0, #7
    22dc:	d803      	bhi.n	22e6 <system_clock_source_get_hz+0xe>
    22de:	0080      	lsls	r0, r0, #2
    22e0:	4b0f      	ldr	r3, [pc, #60]	; (2320 <system_clock_source_get_hz+0x48>)
    22e2:	581b      	ldr	r3, [r3, r0]
    22e4:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    22e6:	2000      	movs	r0, #0
    22e8:	e018      	b.n	231c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    22ea:	4b0e      	ldr	r3, [pc, #56]	; (2324 <system_clock_source_get_hz+0x4c>)
    22ec:	6858      	ldr	r0, [r3, #4]
    22ee:	e015      	b.n	231c <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    22f0:	4b0d      	ldr	r3, [pc, #52]	; (2328 <system_clock_source_get_hz+0x50>)
    22f2:	7d59      	ldrb	r1, [r3, #21]
    22f4:	0709      	lsls	r1, r1, #28
    22f6:	0f09      	lsrs	r1, r1, #28
    22f8:	3101      	adds	r1, #1
    22fa:	480c      	ldr	r0, [pc, #48]	; (232c <system_clock_source_get_hz+0x54>)
    22fc:	4b0c      	ldr	r3, [pc, #48]	; (2330 <system_clock_source_get_hz+0x58>)
    22fe:	4798      	blx	r3
    2300:	e00c      	b.n	231c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    2302:	4b08      	ldr	r3, [pc, #32]	; (2324 <system_clock_source_get_hz+0x4c>)
    2304:	6898      	ldr	r0, [r3, #8]
    2306:	e009      	b.n	231c <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2308:	4b07      	ldr	r3, [pc, #28]	; (2328 <system_clock_source_get_hz+0x50>)
    230a:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    230c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    230e:	079b      	lsls	r3, r3, #30
    2310:	d504      	bpl.n	231c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    2312:	4b04      	ldr	r3, [pc, #16]	; (2324 <system_clock_source_get_hz+0x4c>)
    2314:	6818      	ldr	r0, [r3, #0]
    2316:	e001      	b.n	231c <system_clock_source_get_hz+0x44>
		return 32768UL;
    2318:	2080      	movs	r0, #128	; 0x80
    231a:	0200      	lsls	r0, r0, #8
	}
}
    231c:	bd10      	pop	{r4, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	000077ec 	.word	0x000077ec
    2324:	200023b8 	.word	0x200023b8
    2328:	40001000 	.word	0x40001000
    232c:	02dc6c00 	.word	0x02dc6c00
    2330:	0000634d 	.word	0x0000634d

00002334 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2334:	b5f0      	push	{r4, r5, r6, r7, lr}
    2336:	46de      	mov	lr, fp
    2338:	4657      	mov	r7, sl
    233a:	464e      	mov	r6, r9
    233c:	4645      	mov	r5, r8
    233e:	b5e0      	push	{r5, r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    2340:	4a25      	ldr	r2, [pc, #148]	; (23d8 <system_clock_source_xosc32k_set_config+0xa4>)
    2342:	8a93      	ldrh	r3, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    2344:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2346:	7801      	ldrb	r1, [r0, #0]
    2348:	424c      	negs	r4, r1
    234a:	414c      	adcs	r4, r1
    234c:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    234e:	7881      	ldrb	r1, [r0, #2]
    2350:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    2352:	78c1      	ldrb	r1, [r0, #3]
    2354:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    2356:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2358:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    235a:	7a81      	ldrb	r1, [r0, #10]
    235c:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    235e:	491f      	ldr	r1, [pc, #124]	; (23dc <system_clock_source_xosc32k_set_config+0xa8>)
    2360:	6844      	ldr	r4, [r0, #4]
    2362:	608c      	str	r4, [r1, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    2364:	7ac1      	ldrb	r1, [r0, #11]
    2366:	0089      	lsls	r1, r1, #2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    2368:	7b84      	ldrb	r4, [r0, #14]
    236a:	0064      	lsls	r4, r4, #1
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
    236c:	4321      	orrs	r1, r4
    236e:	7b44      	ldrb	r4, [r0, #13]
    2370:	4321      	orrs	r1, r4
    2372:	b2c9      	uxtb	r1, r1
	OSC32KCTRL->CFDCTRL.reg =
    2374:	7591      	strb	r1, [r2, #22]

	OSC32KCTRL->EVCTRL.reg =
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);
    2376:	7b01      	ldrb	r1, [r0, #12]
	OSC32KCTRL->EVCTRL.reg =
    2378:	75d1      	strb	r1, [r2, #23]

	OSC32KCTRL->XOSC32K = temp;
    237a:	2101      	movs	r1, #1
    237c:	4648      	mov	r0, r9
    237e:	0080      	lsls	r0, r0, #2
    2380:	2404      	movs	r4, #4
    2382:	43a3      	bics	r3, r4
    2384:	4303      	orrs	r3, r0
    2386:	4640      	mov	r0, r8
    2388:	4008      	ands	r0, r1
    238a:	00c0      	lsls	r0, r0, #3
    238c:	3404      	adds	r4, #4
    238e:	43a3      	bics	r3, r4
    2390:	4303      	orrs	r3, r0
    2392:	4660      	mov	r0, ip
    2394:	4008      	ands	r0, r1
    2396:	0100      	lsls	r0, r0, #4
    2398:	3408      	adds	r4, #8
    239a:	43a3      	bics	r3, r4
    239c:	4303      	orrs	r3, r0
    239e:	400f      	ands	r7, r1
    23a0:	01bf      	lsls	r7, r7, #6
    23a2:	2040      	movs	r0, #64	; 0x40
    23a4:	4383      	bics	r3, r0
    23a6:	433b      	orrs	r3, r7
    23a8:	400e      	ands	r6, r1
    23aa:	01f6      	lsls	r6, r6, #7
    23ac:	3040      	adds	r0, #64	; 0x40
    23ae:	4383      	bics	r3, r0
    23b0:	4333      	orrs	r3, r6
    23b2:	3879      	subs	r0, #121	; 0x79
    23b4:	4005      	ands	r5, r0
    23b6:	022d      	lsls	r5, r5, #8
    23b8:	4809      	ldr	r0, [pc, #36]	; (23e0 <system_clock_source_xosc32k_set_config+0xac>)
    23ba:	4003      	ands	r3, r0
    23bc:	432b      	orrs	r3, r5
    23be:	4658      	mov	r0, fp
    23c0:	4001      	ands	r1, r0
    23c2:	0309      	lsls	r1, r1, #12
    23c4:	4807      	ldr	r0, [pc, #28]	; (23e4 <system_clock_source_xosc32k_set_config+0xb0>)
    23c6:	4003      	ands	r3, r0
    23c8:	430b      	orrs	r3, r1
    23ca:	8293      	strh	r3, [r2, #20]
}
    23cc:	bc3c      	pop	{r2, r3, r4, r5}
    23ce:	4690      	mov	r8, r2
    23d0:	4699      	mov	r9, r3
    23d2:	46a2      	mov	sl, r4
    23d4:	46ab      	mov	fp, r5
    23d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23d8:	40001400 	.word	0x40001400
    23dc:	200023b8 	.word	0x200023b8
    23e0:	fffff8ff 	.word	0xfffff8ff
    23e4:	ffffefff 	.word	0xffffefff

000023e8 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    23e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23ea:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    23ec:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    23ee:	7d03      	ldrb	r3, [r0, #20]
    23f0:	2b01      	cmp	r3, #1
    23f2:	d04d      	beq.n	2490 <system_clock_source_dpll_set_config+0xa8>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    23f4:	68a3      	ldr	r3, [r4, #8]
    23f6:	0118      	lsls	r0, r3, #4
    23f8:	0029      	movs	r1, r5
    23fa:	4b29      	ldr	r3, [pc, #164]	; (24a0 <system_clock_source_dpll_set_config+0xb8>)
    23fc:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    23fe:	220f      	movs	r2, #15
    2400:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    2402:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    2404:	7821      	ldrb	r1, [r4, #0]
    2406:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    2408:	7866      	ldrb	r6, [r4, #1]
    240a:	01b6      	lsls	r6, r6, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    240c:	4331      	orrs	r1, r6
    240e:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    2410:	4e24      	ldr	r6, [pc, #144]	; (24a4 <system_clock_source_dpll_set_config+0xbc>)
    2412:	7731      	strb	r1, [r6, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    2414:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    2416:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    2418:	051b      	lsls	r3, r3, #20
    241a:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    241c:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    241e:	6233      	str	r3, [r6, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    2420:	0037      	movs	r7, r6
    2422:	262c      	movs	r6, #44	; 0x2c
    2424:	2104      	movs	r1, #4
    2426:	5dbb      	ldrb	r3, [r7, r6]
    2428:	420b      	tst	r3, r1
    242a:	d1fc      	bne.n	2426 <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    242c:	78a3      	ldrb	r3, [r4, #2]
    242e:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    2430:	78e1      	ldrb	r1, [r4, #3]
    2432:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2434:	430b      	orrs	r3, r1
    2436:	7921      	ldrb	r1, [r4, #4]
    2438:	0089      	lsls	r1, r1, #2
    243a:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    243c:	7ca1      	ldrb	r1, [r4, #18]
    243e:	2603      	movs	r6, #3
    2440:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2442:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    2444:	8a21      	ldrh	r1, [r4, #16]
    2446:	0409      	lsls	r1, r1, #16
    2448:	4f17      	ldr	r7, [pc, #92]	; (24a8 <system_clock_source_dpll_set_config+0xc0>)
    244a:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    244c:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    244e:	7ce1      	ldrb	r1, [r4, #19]
    2450:	0209      	lsls	r1, r1, #8
    2452:	27e0      	movs	r7, #224	; 0xe0
    2454:	00ff      	lsls	r7, r7, #3
    2456:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2458:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    245a:	7d27      	ldrb	r7, [r4, #20]
    245c:	013f      	lsls	r7, r7, #4
    245e:	2130      	movs	r1, #48	; 0x30
    2460:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2462:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    2464:	490f      	ldr	r1, [pc, #60]	; (24a4 <system_clock_source_dpll_set_config+0xbc>)
    2466:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    2468:	7d63      	ldrb	r3, [r4, #21]
    246a:	401e      	ands	r6, r3
    246c:	2328      	movs	r3, #40	; 0x28
    246e:	54ce      	strb	r6, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    2470:	000f      	movs	r7, r1
    2472:	262c      	movs	r6, #44	; 0x2c
    2474:	2108      	movs	r1, #8
    2476:	5dbb      	ldrb	r3, [r7, r6]
    2478:	420b      	tst	r3, r1
    247a:	d1fc      	bne.n	2476 <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    247c:	230f      	movs	r3, #15
    247e:	4398      	bics	r0, r3
    2480:	1882      	adds	r2, r0, r2
			(refclk *
    2482:	436a      	muls	r2, r5
			) >> (4 + config->prescaler);
    2484:	7d63      	ldrb	r3, [r4, #21]
    2486:	3304      	adds	r3, #4
    2488:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    248a:	4b08      	ldr	r3, [pc, #32]	; (24ac <system_clock_source_dpll_set_config+0xc4>)
    248c:	601a      	str	r2, [r3, #0]
}
    248e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    2490:	8a01      	ldrh	r1, [r0, #16]
    2492:	3101      	adds	r1, #1
    2494:	0049      	lsls	r1, r1, #1
    2496:	0028      	movs	r0, r5
    2498:	4b01      	ldr	r3, [pc, #4]	; (24a0 <system_clock_source_dpll_set_config+0xb8>)
    249a:	4798      	blx	r3
    249c:	0005      	movs	r5, r0
    249e:	e7a9      	b.n	23f4 <system_clock_source_dpll_set_config+0xc>
    24a0:	0000634d 	.word	0x0000634d
    24a4:	40001000 	.word	0x40001000
    24a8:	07ff0000 	.word	0x07ff0000
    24ac:	200023b8 	.word	0x200023b8

000024b0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    24b0:	2807      	cmp	r0, #7
    24b2:	d803      	bhi.n	24bc <system_clock_source_enable+0xc>
    24b4:	0080      	lsls	r0, r0, #2
    24b6:	4b18      	ldr	r3, [pc, #96]	; (2518 <system_clock_source_enable+0x68>)
    24b8:	581b      	ldr	r3, [r3, r0]
    24ba:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    24bc:	2017      	movs	r0, #23
    24be:	e029      	b.n	2514 <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    24c0:	4a16      	ldr	r2, [pc, #88]	; (251c <system_clock_source_enable+0x6c>)
    24c2:	7d13      	ldrb	r3, [r2, #20]
    24c4:	2102      	movs	r1, #2
    24c6:	430b      	orrs	r3, r1
    24c8:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    24ca:	2000      	movs	r0, #0
    24cc:	e022      	b.n	2514 <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    24ce:	4a14      	ldr	r2, [pc, #80]	; (2520 <system_clock_source_enable+0x70>)
    24d0:	6993      	ldr	r3, [r2, #24]
    24d2:	2102      	movs	r1, #2
    24d4:	430b      	orrs	r3, r1
    24d6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    24d8:	2000      	movs	r0, #0
		break;
    24da:	e01b      	b.n	2514 <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    24dc:	4a0f      	ldr	r2, [pc, #60]	; (251c <system_clock_source_enable+0x6c>)
    24de:	8a13      	ldrh	r3, [r2, #16]
    24e0:	2102      	movs	r1, #2
    24e2:	430b      	orrs	r3, r1
    24e4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    24e6:	2000      	movs	r0, #0
		break;
    24e8:	e014      	b.n	2514 <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    24ea:	4a0d      	ldr	r2, [pc, #52]	; (2520 <system_clock_source_enable+0x70>)
    24ec:	8a93      	ldrh	r3, [r2, #20]
    24ee:	2102      	movs	r1, #2
    24f0:	430b      	orrs	r3, r1
    24f2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    24f4:	2000      	movs	r0, #0
		break;
    24f6:	e00d      	b.n	2514 <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    24f8:	4a08      	ldr	r2, [pc, #32]	; (251c <system_clock_source_enable+0x6c>)
    24fa:	7f13      	ldrb	r3, [r2, #28]
    24fc:	2102      	movs	r1, #2
    24fe:	430b      	orrs	r3, r1
    2500:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    2502:	0010      	movs	r0, r2
    2504:	312a      	adds	r1, #42	; 0x2a
    2506:	2202      	movs	r2, #2
    2508:	5c43      	ldrb	r3, [r0, r1]
    250a:	4213      	tst	r3, r2
    250c:	d1fc      	bne.n	2508 <system_clock_source_enable+0x58>
	return STATUS_OK;
    250e:	2000      	movs	r0, #0
    2510:	e000      	b.n	2514 <system_clock_source_enable+0x64>
		return STATUS_OK;
    2512:	2000      	movs	r0, #0
}
    2514:	4770      	bx	lr
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	0000780c 	.word	0x0000780c
    251c:	40001000 	.word	0x40001000
    2520:	40001400 	.word	0x40001400

00002524 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    2524:	b5f0      	push	{r4, r5, r6, r7, lr}
    2526:	46c6      	mov	lr, r8
    2528:	b500      	push	{lr}
    252a:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    252c:	2203      	movs	r2, #3
    252e:	4b3f      	ldr	r3, [pc, #252]	; (262c <system_clock_init+0x108>)
    2530:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2532:	4a3f      	ldr	r2, [pc, #252]	; (2630 <system_clock_init+0x10c>)
    2534:	6853      	ldr	r3, [r2, #4]
    2536:	211e      	movs	r1, #30
    2538:	438b      	bics	r3, r1
    253a:	3918      	subs	r1, #24
    253c:	430b      	orrs	r3, r1
    253e:	6053      	str	r3, [r2, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2540:	a80a      	add	r0, sp, #40	; 0x28
    2542:	2300      	movs	r3, #0
    2544:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    2546:	2280      	movs	r2, #128	; 0x80
    2548:	0212      	lsls	r2, r2, #8
    254a:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    254c:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    254e:	2201      	movs	r2, #1
    2550:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    2552:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    2554:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    2556:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    2558:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    255a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    255c:	3902      	subs	r1, #2
    255e:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2560:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    2562:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2564:	4b33      	ldr	r3, [pc, #204]	; (2634 <system_clock_init+0x110>)
    2566:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2568:	2005      	movs	r0, #5
    256a:	4b33      	ldr	r3, [pc, #204]	; (2638 <system_clock_init+0x114>)
    256c:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    256e:	4933      	ldr	r1, [pc, #204]	; (263c <system_clock_init+0x118>)
    2570:	2201      	movs	r2, #1
    2572:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2574:	421a      	tst	r2, r3
    2576:	d0fc      	beq.n	2572 <system_clock_init+0x4e>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    2578:	4b31      	ldr	r3, [pc, #196]	; (2640 <system_clock_init+0x11c>)
    257a:	7d1a      	ldrb	r2, [r3, #20]
    257c:	2180      	movs	r1, #128	; 0x80
    257e:	430a      	orrs	r2, r1
    2580:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    2582:	2202      	movs	r2, #2
    2584:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    2586:	001a      	movs	r2, r3
    2588:	6993      	ldr	r3, [r2, #24]
    258a:	2b00      	cmp	r3, #0
    258c:	d1fc      	bne.n	2588 <system_clock_init+0x64>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    258e:	4b2d      	ldr	r3, [pc, #180]	; (2644 <system_clock_init+0x120>)
    2590:	4798      	blx	r3
	config->division_factor    = 1;
    2592:	ad01      	add	r5, sp, #4
    2594:	2601      	movs	r6, #1
    2596:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2598:	2400      	movs	r4, #0
    259a:	706c      	strb	r4, [r5, #1]
	config->output_enable      = false;
    259c:	726c      	strb	r4, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    259e:	2305      	movs	r3, #5
    25a0:	702b      	strb	r3, [r5, #0]
    25a2:	722e      	strb	r6, [r5, #8]
    25a4:	0029      	movs	r1, r5
    25a6:	2001      	movs	r0, #1
    25a8:	4b27      	ldr	r3, [pc, #156]	; (2648 <system_clock_init+0x124>)
    25aa:	4698      	mov	r8, r3
    25ac:	4798      	blx	r3
    25ae:	2001      	movs	r0, #1
    25b0:	4f26      	ldr	r7, [pc, #152]	; (264c <system_clock_init+0x128>)
    25b2:	47b8      	blx	r7
	config->division_factor    = 1;
    25b4:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    25b6:	706c      	strb	r4, [r5, #1]
	config->run_in_standby     = false;
    25b8:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    25ba:	726c      	strb	r4, [r5, #9]
    25bc:	2307      	movs	r3, #7
    25be:	702b      	strb	r3, [r5, #0]
    25c0:	0029      	movs	r1, r5
    25c2:	2008      	movs	r0, #8
    25c4:	47c0      	blx	r8
    25c6:	2008      	movs	r0, #8
    25c8:	47b8      	blx	r7
	config->lock_bypass         = false;
    25ca:	a804      	add	r0, sp, #16
    25cc:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    25ce:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    25d0:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    25d2:	4b1f      	ldr	r3, [pc, #124]	; (2650 <system_clock_init+0x12c>)
    25d4:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    25d6:	8206      	strh	r6, [r0, #16]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    25d8:	7544      	strb	r4, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    25da:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    25dc:	7484      	strb	r4, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    25de:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    25e0:	2301      	movs	r3, #1
    25e2:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    25e4:	7504      	strb	r4, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    25e6:	4b1b      	ldr	r3, [pc, #108]	; (2654 <system_clock_init+0x130>)
    25e8:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    25ea:	4b1b      	ldr	r3, [pc, #108]	; (2658 <system_clock_init+0x134>)
    25ec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    25ee:	2007      	movs	r0, #7
    25f0:	4b11      	ldr	r3, [pc, #68]	; (2638 <system_clock_init+0x114>)
    25f2:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    25f4:	4812      	ldr	r0, [pc, #72]	; (2640 <system_clock_init+0x11c>)
    25f6:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    25f8:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    25fa:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    25fc:	4013      	ands	r3, r2
    25fe:	2b03      	cmp	r3, #3
    2600:	d1fb      	bne.n	25fa <system_clock_init+0xd6>
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2602:	3b02      	subs	r3, #2
    2604:	4a15      	ldr	r2, [pc, #84]	; (265c <system_clock_init+0x138>)
    2606:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    2608:	a901      	add	r1, sp, #4
    260a:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    260c:	2200      	movs	r2, #0
    260e:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    2610:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2612:	3207      	adds	r2, #7
    2614:	700a      	strb	r2, [r1, #0]
    2616:	720b      	strb	r3, [r1, #8]
    2618:	2000      	movs	r0, #0
    261a:	4b0b      	ldr	r3, [pc, #44]	; (2648 <system_clock_init+0x124>)
    261c:	4798      	blx	r3
    261e:	2000      	movs	r0, #0
    2620:	4b0a      	ldr	r3, [pc, #40]	; (264c <system_clock_init+0x128>)
    2622:	4798      	blx	r3
#endif

}
    2624:	b00e      	add	sp, #56	; 0x38
    2626:	bc04      	pop	{r2}
    2628:	4690      	mov	r8, r2
    262a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    262c:	40001800 	.word	0x40001800
    2630:	41004000 	.word	0x41004000
    2634:	00002335 	.word	0x00002335
    2638:	000024b1 	.word	0x000024b1
    263c:	40001400 	.word	0x40001400
    2640:	40001000 	.word	0x40001000
    2644:	00002661 	.word	0x00002661
    2648:	00002685 	.word	0x00002685
    264c:	00002731 	.word	0x00002731
    2650:	02dc6c00 	.word	0x02dc6c00
    2654:	00007fff 	.word	0x00007fff
    2658:	000023e9 	.word	0x000023e9
    265c:	40000800 	.word	0x40000800

00002660 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    2660:	4a06      	ldr	r2, [pc, #24]	; (267c <system_gclk_init+0x1c>)
    2662:	6953      	ldr	r3, [r2, #20]
    2664:	2180      	movs	r1, #128	; 0x80
    2666:	430b      	orrs	r3, r1
    2668:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    266a:	2201      	movs	r2, #1
    266c:	4b04      	ldr	r3, [pc, #16]	; (2680 <system_gclk_init+0x20>)
    266e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2670:	0019      	movs	r1, r3
    2672:	780b      	ldrb	r3, [r1, #0]
    2674:	4213      	tst	r3, r2
    2676:	d1fc      	bne.n	2672 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2678:	4770      	bx	lr
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	40000800 	.word	0x40000800
    2680:	40001c00 	.word	0x40001c00

00002684 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2684:	b570      	push	{r4, r5, r6, lr}
    2686:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2688:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    268a:	784b      	ldrb	r3, [r1, #1]
    268c:	2b00      	cmp	r3, #0
    268e:	d002      	beq.n	2696 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2690:	2380      	movs	r3, #128	; 0x80
    2692:	00db      	lsls	r3, r3, #3
    2694:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2696:	7a4b      	ldrb	r3, [r1, #9]
    2698:	2b00      	cmp	r3, #0
    269a:	d002      	beq.n	26a2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    269c:	2380      	movs	r3, #128	; 0x80
    269e:	011b      	lsls	r3, r3, #4
    26a0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    26a2:	6848      	ldr	r0, [r1, #4]
    26a4:	2801      	cmp	r0, #1
    26a6:	d90f      	bls.n	26c8 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    26a8:	1e43      	subs	r3, r0, #1
    26aa:	4218      	tst	r0, r3
    26ac:	d131      	bne.n	2712 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    26ae:	2802      	cmp	r0, #2
    26b0:	d92d      	bls.n	270e <system_gclk_gen_set_config+0x8a>
    26b2:	2302      	movs	r3, #2
    26b4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    26b6:	3201      	adds	r2, #1
						mask <<= 1) {
    26b8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    26ba:	4298      	cmp	r0, r3
    26bc:	d8fb      	bhi.n	26b6 <system_gclk_gen_set_config+0x32>
    26be:	2380      	movs	r3, #128	; 0x80
    26c0:	015b      	lsls	r3, r3, #5
    26c2:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    26c4:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    26c6:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    26c8:	7a0b      	ldrb	r3, [r1, #8]
    26ca:	2b00      	cmp	r3, #0
    26cc:	d002      	beq.n	26d4 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    26ce:	2380      	movs	r3, #128	; 0x80
    26d0:	019b      	lsls	r3, r3, #6
    26d2:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    26d4:	2604      	movs	r6, #4
    26d6:	40a6      	lsls	r6, r4
    26d8:	4911      	ldr	r1, [pc, #68]	; (2720 <system_gclk_gen_set_config+0x9c>)
    26da:	4a12      	ldr	r2, [pc, #72]	; (2724 <system_gclk_gen_set_config+0xa0>)
    26dc:	684b      	ldr	r3, [r1, #4]
    26de:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    26e0:	421e      	tst	r6, r3
    26e2:	d1fb      	bne.n	26dc <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    26e4:	4b10      	ldr	r3, [pc, #64]	; (2728 <system_gclk_gen_set_config+0xa4>)
    26e6:	4798      	blx	r3
    26e8:	00a4      	lsls	r4, r4, #2
    26ea:	4b0d      	ldr	r3, [pc, #52]	; (2720 <system_gclk_gen_set_config+0x9c>)
    26ec:	469c      	mov	ip, r3
    26ee:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    26f0:	6a22      	ldr	r2, [r4, #32]
    26f2:	2380      	movs	r3, #128	; 0x80
    26f4:	005b      	lsls	r3, r3, #1
    26f6:	401a      	ands	r2, r3
    26f8:	432a      	orrs	r2, r5
    26fa:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    26fc:	4661      	mov	r1, ip
    26fe:	4a09      	ldr	r2, [pc, #36]	; (2724 <system_gclk_gen_set_config+0xa0>)
    2700:	684b      	ldr	r3, [r1, #4]
    2702:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    2704:	421e      	tst	r6, r3
    2706:	d1fb      	bne.n	2700 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2708:	4b08      	ldr	r3, [pc, #32]	; (272c <system_gclk_gen_set_config+0xa8>)
    270a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    270c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    270e:	2200      	movs	r2, #0
    2710:	e7d5      	b.n	26be <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    2712:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2714:	2380      	movs	r3, #128	; 0x80
    2716:	009b      	lsls	r3, r3, #2
    2718:	4318      	orrs	r0, r3
    271a:	4305      	orrs	r5, r0
    271c:	e7d4      	b.n	26c8 <system_gclk_gen_set_config+0x44>
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	40001c00 	.word	0x40001c00
    2724:	000007fc 	.word	0x000007fc
    2728:	000012f1 	.word	0x000012f1
    272c:	00001331 	.word	0x00001331

00002730 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2730:	b510      	push	{r4, lr}
    2732:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2734:	2204      	movs	r2, #4
    2736:	4082      	lsls	r2, r0
    2738:	4809      	ldr	r0, [pc, #36]	; (2760 <system_gclk_gen_enable+0x30>)
    273a:	490a      	ldr	r1, [pc, #40]	; (2764 <system_gclk_gen_enable+0x34>)
    273c:	6843      	ldr	r3, [r0, #4]
    273e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2740:	421a      	tst	r2, r3
    2742:	d1fb      	bne.n	273c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    2744:	4b08      	ldr	r3, [pc, #32]	; (2768 <system_gclk_gen_enable+0x38>)
    2746:	4798      	blx	r3
    2748:	00a4      	lsls	r4, r4, #2
    274a:	4b05      	ldr	r3, [pc, #20]	; (2760 <system_gclk_gen_enable+0x30>)
    274c:	469c      	mov	ip, r3
    274e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    2750:	6a22      	ldr	r2, [r4, #32]
    2752:	2380      	movs	r3, #128	; 0x80
    2754:	005b      	lsls	r3, r3, #1
    2756:	4313      	orrs	r3, r2
    2758:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    275a:	4b04      	ldr	r3, [pc, #16]	; (276c <system_gclk_gen_enable+0x3c>)
    275c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    275e:	bd10      	pop	{r4, pc}
    2760:	40001c00 	.word	0x40001c00
    2764:	000007fc 	.word	0x000007fc
    2768:	000012f1 	.word	0x000012f1
    276c:	00001331 	.word	0x00001331

00002770 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2772:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2774:	2204      	movs	r2, #4
    2776:	4082      	lsls	r2, r0
    2778:	4812      	ldr	r0, [pc, #72]	; (27c4 <system_gclk_gen_get_hz+0x54>)
    277a:	4913      	ldr	r1, [pc, #76]	; (27c8 <system_gclk_gen_get_hz+0x58>)
    277c:	6843      	ldr	r3, [r0, #4]
    277e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2780:	421a      	tst	r2, r3
    2782:	d1fb      	bne.n	277c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    2784:	4b11      	ldr	r3, [pc, #68]	; (27cc <system_gclk_gen_get_hz+0x5c>)
    2786:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2788:	4f0e      	ldr	r7, [pc, #56]	; (27c4 <system_gclk_gen_get_hz+0x54>)
    278a:	3408      	adds	r4, #8
    278c:	00a4      	lsls	r4, r4, #2
    278e:	59e0      	ldr	r0, [r4, r7]
    2790:	0740      	lsls	r0, r0, #29
    2792:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2794:	4b0e      	ldr	r3, [pc, #56]	; (27d0 <system_gclk_gen_get_hz+0x60>)
    2796:	4798      	blx	r3
    2798:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    279a:	59e5      	ldr	r5, [r4, r7]
    279c:	04ed      	lsls	r5, r5, #19
    279e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    27a0:	59e4      	ldr	r4, [r4, r7]
    27a2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    27a4:	4b0b      	ldr	r3, [pc, #44]	; (27d4 <system_gclk_gen_get_hz+0x64>)
    27a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    27a8:	2d00      	cmp	r5, #0
    27aa:	d107      	bne.n	27bc <system_gclk_gen_get_hz+0x4c>
    27ac:	2c01      	cmp	r4, #1
    27ae:	d907      	bls.n	27c0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    27b0:	0021      	movs	r1, r4
    27b2:	0030      	movs	r0, r6
    27b4:	4b08      	ldr	r3, [pc, #32]	; (27d8 <system_gclk_gen_get_hz+0x68>)
    27b6:	4798      	blx	r3
    27b8:	0006      	movs	r6, r0
    27ba:	e001      	b.n	27c0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    27bc:	3401      	adds	r4, #1
    27be:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    27c0:	0030      	movs	r0, r6
    27c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27c4:	40001c00 	.word	0x40001c00
    27c8:	000007fc 	.word	0x000007fc
    27cc:	000012f1 	.word	0x000012f1
    27d0:	000022d9 	.word	0x000022d9
    27d4:	00001331 	.word	0x00001331
    27d8:	0000634d 	.word	0x0000634d

000027dc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    27dc:	b510      	push	{r4, lr}
    27de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    27e0:	4b09      	ldr	r3, [pc, #36]	; (2808 <system_gclk_chan_enable+0x2c>)
    27e2:	4798      	blx	r3
    27e4:	00a0      	lsls	r0, r4, #2
    27e6:	4b09      	ldr	r3, [pc, #36]	; (280c <system_gclk_chan_enable+0x30>)
    27e8:	469c      	mov	ip, r3
    27ea:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    27ec:	2280      	movs	r2, #128	; 0x80
    27ee:	5883      	ldr	r3, [r0, r2]
    27f0:	2140      	movs	r1, #64	; 0x40
    27f2:	430b      	orrs	r3, r1
    27f4:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    27f6:	3140      	adds	r1, #64	; 0x40
    27f8:	3a40      	subs	r2, #64	; 0x40
    27fa:	5843      	ldr	r3, [r0, r1]
    27fc:	421a      	tst	r2, r3
    27fe:	d0fc      	beq.n	27fa <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    2800:	4b03      	ldr	r3, [pc, #12]	; (2810 <system_gclk_chan_enable+0x34>)
    2802:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    2804:	bd10      	pop	{r4, pc}
    2806:	46c0      	nop			; (mov r8, r8)
    2808:	000012f1 	.word	0x000012f1
    280c:	40001c00 	.word	0x40001c00
    2810:	00001331 	.word	0x00001331

00002814 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2814:	b510      	push	{r4, lr}
    2816:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2818:	4b09      	ldr	r3, [pc, #36]	; (2840 <system_gclk_chan_disable+0x2c>)
    281a:	4798      	blx	r3
    281c:	00a0      	lsls	r0, r4, #2
    281e:	4b09      	ldr	r3, [pc, #36]	; (2844 <system_gclk_chan_disable+0x30>)
    2820:	469c      	mov	ip, r3
    2822:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    2824:	2280      	movs	r2, #128	; 0x80
    2826:	5883      	ldr	r3, [r0, r2]
    2828:	2140      	movs	r1, #64	; 0x40
    282a:	438b      	bics	r3, r1
    282c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    282e:	3140      	adds	r1, #64	; 0x40
    2830:	3a40      	subs	r2, #64	; 0x40
    2832:	5843      	ldr	r3, [r0, r1]
    2834:	421a      	tst	r2, r3
    2836:	d1fc      	bne.n	2832 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    2838:	4b03      	ldr	r3, [pc, #12]	; (2848 <system_gclk_chan_disable+0x34>)
    283a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    283c:	bd10      	pop	{r4, pc}
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	000012f1 	.word	0x000012f1
    2844:	40001c00 	.word	0x40001c00
    2848:	00001331 	.word	0x00001331

0000284c <system_gclk_chan_set_config>:
{
    284c:	b570      	push	{r4, r5, r6, lr}
    284e:	0004      	movs	r4, r0
    2850:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    2852:	4b05      	ldr	r3, [pc, #20]	; (2868 <system_gclk_chan_set_config+0x1c>)
    2854:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    2856:	782a      	ldrb	r2, [r5, #0]
    2858:	230f      	movs	r3, #15
    285a:	4013      	ands	r3, r2
    285c:	3420      	adds	r4, #32
    285e:	00a4      	lsls	r4, r4, #2
    2860:	4a02      	ldr	r2, [pc, #8]	; (286c <system_gclk_chan_set_config+0x20>)
    2862:	50a3      	str	r3, [r4, r2]
}
    2864:	bd70      	pop	{r4, r5, r6, pc}
    2866:	46c0      	nop			; (mov r8, r8)
    2868:	00002815 	.word	0x00002815
    286c:	40001c00 	.word	0x40001c00

00002870 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2870:	b510      	push	{r4, lr}
    2872:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2874:	4b06      	ldr	r3, [pc, #24]	; (2890 <system_gclk_chan_get_hz+0x20>)
    2876:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    2878:	3420      	adds	r4, #32
    287a:	00a4      	lsls	r4, r4, #2
    287c:	4b05      	ldr	r3, [pc, #20]	; (2894 <system_gclk_chan_get_hz+0x24>)
    287e:	58e4      	ldr	r4, [r4, r3]
    2880:	0724      	lsls	r4, r4, #28
    2882:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2884:	4b04      	ldr	r3, [pc, #16]	; (2898 <system_gclk_chan_get_hz+0x28>)
    2886:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2888:	0020      	movs	r0, r4
    288a:	4b04      	ldr	r3, [pc, #16]	; (289c <system_gclk_chan_get_hz+0x2c>)
    288c:	4798      	blx	r3
}
    288e:	bd10      	pop	{r4, pc}
    2890:	000012f1 	.word	0x000012f1
    2894:	40001c00 	.word	0x40001c00
    2898:	00001331 	.word	0x00001331
    289c:	00002771 	.word	0x00002771

000028a0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    28a0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    28a2:	78d3      	ldrb	r3, [r2, #3]
    28a4:	2b00      	cmp	r3, #0
    28a6:	d135      	bne.n	2914 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    28a8:	7813      	ldrb	r3, [r2, #0]
    28aa:	2b80      	cmp	r3, #128	; 0x80
    28ac:	d029      	beq.n	2902 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    28ae:	061b      	lsls	r3, r3, #24
    28b0:	2480      	movs	r4, #128	; 0x80
    28b2:	0264      	lsls	r4, r4, #9
    28b4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    28b6:	7854      	ldrb	r4, [r2, #1]
    28b8:	2502      	movs	r5, #2
    28ba:	43ac      	bics	r4, r5
    28bc:	d106      	bne.n	28cc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    28be:	7894      	ldrb	r4, [r2, #2]
    28c0:	2c00      	cmp	r4, #0
    28c2:	d120      	bne.n	2906 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    28c4:	2480      	movs	r4, #128	; 0x80
    28c6:	02a4      	lsls	r4, r4, #10
    28c8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    28ca:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    28cc:	7854      	ldrb	r4, [r2, #1]
    28ce:	3c01      	subs	r4, #1
    28d0:	2c01      	cmp	r4, #1
    28d2:	d91c      	bls.n	290e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    28d4:	040d      	lsls	r5, r1, #16
    28d6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    28d8:	24a0      	movs	r4, #160	; 0xa0
    28da:	05e4      	lsls	r4, r4, #23
    28dc:	432c      	orrs	r4, r5
    28de:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28e0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    28e2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    28e4:	24d0      	movs	r4, #208	; 0xd0
    28e6:	0624      	lsls	r4, r4, #24
    28e8:	432c      	orrs	r4, r5
    28ea:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28ec:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    28ee:	78d4      	ldrb	r4, [r2, #3]
    28f0:	2c00      	cmp	r4, #0
    28f2:	d122      	bne.n	293a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    28f4:	035b      	lsls	r3, r3, #13
    28f6:	d51c      	bpl.n	2932 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    28f8:	7893      	ldrb	r3, [r2, #2]
    28fa:	2b01      	cmp	r3, #1
    28fc:	d01e      	beq.n	293c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    28fe:	6141      	str	r1, [r0, #20]
    2900:	e017      	b.n	2932 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2902:	2300      	movs	r3, #0
    2904:	e7d7      	b.n	28b6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2906:	24c0      	movs	r4, #192	; 0xc0
    2908:	02e4      	lsls	r4, r4, #11
    290a:	4323      	orrs	r3, r4
    290c:	e7dd      	b.n	28ca <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    290e:	4c0d      	ldr	r4, [pc, #52]	; (2944 <_system_pinmux_config+0xa4>)
    2910:	4023      	ands	r3, r4
    2912:	e7df      	b.n	28d4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2914:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2916:	040c      	lsls	r4, r1, #16
    2918:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    291a:	23a0      	movs	r3, #160	; 0xa0
    291c:	05db      	lsls	r3, r3, #23
    291e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2920:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2922:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2924:	23d0      	movs	r3, #208	; 0xd0
    2926:	061b      	lsls	r3, r3, #24
    2928:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    292a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    292c:	78d3      	ldrb	r3, [r2, #3]
    292e:	2b00      	cmp	r3, #0
    2930:	d103      	bne.n	293a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2932:	7853      	ldrb	r3, [r2, #1]
    2934:	3b01      	subs	r3, #1
    2936:	2b01      	cmp	r3, #1
    2938:	d902      	bls.n	2940 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    293a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    293c:	6181      	str	r1, [r0, #24]
    293e:	e7f8      	b.n	2932 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2940:	6081      	str	r1, [r0, #8]
}
    2942:	e7fa      	b.n	293a <_system_pinmux_config+0x9a>
    2944:	fffbffff 	.word	0xfffbffff

00002948 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2948:	b510      	push	{r4, lr}
    294a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    294c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    294e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2950:	2900      	cmp	r1, #0
    2952:	d105      	bne.n	2960 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    2954:	0943      	lsrs	r3, r0, #5
    2956:	01db      	lsls	r3, r3, #7
    2958:	2182      	movs	r1, #130	; 0x82
    295a:	05c9      	lsls	r1, r1, #23
    295c:	468c      	mov	ip, r1
    295e:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2960:	241f      	movs	r4, #31
    2962:	4020      	ands	r0, r4
    2964:	2101      	movs	r1, #1
    2966:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2968:	0018      	movs	r0, r3
    296a:	4b01      	ldr	r3, [pc, #4]	; (2970 <system_pinmux_pin_set_config+0x28>)
    296c:	4798      	blx	r3
}
    296e:	bd10      	pop	{r4, pc}
    2970:	000028a1 	.word	0x000028a1

00002974 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2974:	4770      	bx	lr
	...

00002978 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2978:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    297a:	4b05      	ldr	r3, [pc, #20]	; (2990 <system_init+0x18>)
    297c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    297e:	4b05      	ldr	r3, [pc, #20]	; (2994 <system_init+0x1c>)
    2980:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2982:	4b05      	ldr	r3, [pc, #20]	; (2998 <system_init+0x20>)
    2984:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2986:	4b05      	ldr	r3, [pc, #20]	; (299c <system_init+0x24>)
    2988:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    298a:	4b05      	ldr	r3, [pc, #20]	; (29a0 <system_init+0x28>)
    298c:	4798      	blx	r3
}
    298e:	bd10      	pop	{r4, pc}
    2990:	00002525 	.word	0x00002525
    2994:	00001361 	.word	0x00001361
    2998:	00002975 	.word	0x00002975
    299c:	00002975 	.word	0x00002975
    29a0:	00002975 	.word	0x00002975

000029a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    29a4:	e7fe      	b.n	29a4 <Dummy_Handler>
	...

000029a8 <Reset_Handler>:
{
    29a8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    29aa:	4a17      	ldr	r2, [pc, #92]	; (2a08 <Reset_Handler+0x60>)
    29ac:	4b17      	ldr	r3, [pc, #92]	; (2a0c <Reset_Handler+0x64>)
    29ae:	429a      	cmp	r2, r3
    29b0:	d011      	beq.n	29d6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    29b2:	001a      	movs	r2, r3
    29b4:	4b16      	ldr	r3, [pc, #88]	; (2a10 <Reset_Handler+0x68>)
    29b6:	429a      	cmp	r2, r3
    29b8:	d20d      	bcs.n	29d6 <Reset_Handler+0x2e>
    29ba:	4a16      	ldr	r2, [pc, #88]	; (2a14 <Reset_Handler+0x6c>)
    29bc:	3303      	adds	r3, #3
    29be:	1a9b      	subs	r3, r3, r2
    29c0:	089b      	lsrs	r3, r3, #2
    29c2:	3301      	adds	r3, #1
    29c4:	009b      	lsls	r3, r3, #2
    29c6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    29c8:	4810      	ldr	r0, [pc, #64]	; (2a0c <Reset_Handler+0x64>)
    29ca:	490f      	ldr	r1, [pc, #60]	; (2a08 <Reset_Handler+0x60>)
    29cc:	588c      	ldr	r4, [r1, r2]
    29ce:	5084      	str	r4, [r0, r2]
    29d0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    29d2:	429a      	cmp	r2, r3
    29d4:	d1fa      	bne.n	29cc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    29d6:	4a10      	ldr	r2, [pc, #64]	; (2a18 <Reset_Handler+0x70>)
    29d8:	4b10      	ldr	r3, [pc, #64]	; (2a1c <Reset_Handler+0x74>)
    29da:	429a      	cmp	r2, r3
    29dc:	d20a      	bcs.n	29f4 <Reset_Handler+0x4c>
    29de:	43d3      	mvns	r3, r2
    29e0:	490e      	ldr	r1, [pc, #56]	; (2a1c <Reset_Handler+0x74>)
    29e2:	185b      	adds	r3, r3, r1
    29e4:	2103      	movs	r1, #3
    29e6:	438b      	bics	r3, r1
    29e8:	3304      	adds	r3, #4
    29ea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    29ec:	2100      	movs	r1, #0
    29ee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    29f0:	4293      	cmp	r3, r2
    29f2:	d1fc      	bne.n	29ee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    29f4:	4a0a      	ldr	r2, [pc, #40]	; (2a20 <Reset_Handler+0x78>)
    29f6:	21ff      	movs	r1, #255	; 0xff
    29f8:	4b0a      	ldr	r3, [pc, #40]	; (2a24 <Reset_Handler+0x7c>)
    29fa:	438b      	bics	r3, r1
    29fc:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    29fe:	4b0a      	ldr	r3, [pc, #40]	; (2a28 <Reset_Handler+0x80>)
    2a00:	4798      	blx	r3
        main();
    2a02:	4b0a      	ldr	r3, [pc, #40]	; (2a2c <Reset_Handler+0x84>)
    2a04:	4798      	blx	r3
    2a06:	e7fe      	b.n	2a06 <Reset_Handler+0x5e>
    2a08:	0000a1ec 	.word	0x0000a1ec
    2a0c:	20000000 	.word	0x20000000
    2a10:	20000178 	.word	0x20000178
    2a14:	20000004 	.word	0x20000004
    2a18:	20000178 	.word	0x20000178
    2a1c:	200036f8 	.word	0x200036f8
    2a20:	e000ed00 	.word	0xe000ed00
    2a24:	00000000 	.word	0x00000000
    2a28:	0000668d 	.word	0x0000668d
    2a2c:	00005ad5 	.word	0x00005ad5

00002a30 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a32:	46c6      	mov	lr, r8
    2a34:	b500      	push	{lr}
    2a36:	000c      	movs	r4, r1
    2a38:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2a3a:	2800      	cmp	r0, #0
    2a3c:	d10f      	bne.n	2a5e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2a3e:	2a00      	cmp	r2, #0
    2a40:	dd11      	ble.n	2a66 <_read+0x36>
    2a42:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2a44:	4e09      	ldr	r6, [pc, #36]	; (2a6c <_read+0x3c>)
    2a46:	4d0a      	ldr	r5, [pc, #40]	; (2a70 <_read+0x40>)
    2a48:	6830      	ldr	r0, [r6, #0]
    2a4a:	0021      	movs	r1, r4
    2a4c:	682b      	ldr	r3, [r5, #0]
    2a4e:	4798      	blx	r3
		ptr++;
    2a50:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2a52:	42bc      	cmp	r4, r7
    2a54:	d1f8      	bne.n	2a48 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2a56:	4640      	mov	r0, r8
    2a58:	bc04      	pop	{r2}
    2a5a:	4690      	mov	r8, r2
    2a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2a5e:	2301      	movs	r3, #1
    2a60:	425b      	negs	r3, r3
    2a62:	4698      	mov	r8, r3
    2a64:	e7f7      	b.n	2a56 <_read+0x26>
	for (; len > 0; --len) {
    2a66:	4680      	mov	r8, r0
    2a68:	e7f5      	b.n	2a56 <_read+0x26>
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	200024ac 	.word	0x200024ac
    2a70:	200024a4 	.word	0x200024a4

00002a74 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a76:	46c6      	mov	lr, r8
    2a78:	b500      	push	{lr}
    2a7a:	000e      	movs	r6, r1
    2a7c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2a7e:	3801      	subs	r0, #1
    2a80:	2802      	cmp	r0, #2
    2a82:	d810      	bhi.n	2aa6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2a84:	2a00      	cmp	r2, #0
    2a86:	d011      	beq.n	2aac <_write+0x38>
    2a88:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2a8a:	4b0c      	ldr	r3, [pc, #48]	; (2abc <_write+0x48>)
    2a8c:	4698      	mov	r8, r3
    2a8e:	4f0c      	ldr	r7, [pc, #48]	; (2ac0 <_write+0x4c>)
    2a90:	4643      	mov	r3, r8
    2a92:	6818      	ldr	r0, [r3, #0]
    2a94:	5d31      	ldrb	r1, [r6, r4]
    2a96:	683b      	ldr	r3, [r7, #0]
    2a98:	4798      	blx	r3
    2a9a:	2800      	cmp	r0, #0
    2a9c:	db08      	blt.n	2ab0 <_write+0x3c>
			return -1;
		}
		++nChars;
    2a9e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2aa0:	42a5      	cmp	r5, r4
    2aa2:	d1f5      	bne.n	2a90 <_write+0x1c>
    2aa4:	e006      	b.n	2ab4 <_write+0x40>
		return -1;
    2aa6:	2401      	movs	r4, #1
    2aa8:	4264      	negs	r4, r4
    2aaa:	e003      	b.n	2ab4 <_write+0x40>
	for (; len != 0; --len) {
    2aac:	0014      	movs	r4, r2
    2aae:	e001      	b.n	2ab4 <_write+0x40>
			return -1;
    2ab0:	2401      	movs	r4, #1
    2ab2:	4264      	negs	r4, r4
	}
	return nChars;
}
    2ab4:	0020      	movs	r0, r4
    2ab6:	bc04      	pop	{r2}
    2ab8:	4690      	mov	r8, r2
    2aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2abc:	200024ac 	.word	0x200024ac
    2ac0:	200024a8 	.word	0x200024a8

00002ac4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2ac4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2ac6:	4a06      	ldr	r2, [pc, #24]	; (2ae0 <_sbrk+0x1c>)
    2ac8:	6812      	ldr	r2, [r2, #0]
    2aca:	2a00      	cmp	r2, #0
    2acc:	d004      	beq.n	2ad8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2ace:	4a04      	ldr	r2, [pc, #16]	; (2ae0 <_sbrk+0x1c>)
    2ad0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2ad2:	18c3      	adds	r3, r0, r3
    2ad4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2ad6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2ad8:	4902      	ldr	r1, [pc, #8]	; (2ae4 <_sbrk+0x20>)
    2ada:	4a01      	ldr	r2, [pc, #4]	; (2ae0 <_sbrk+0x1c>)
    2adc:	6011      	str	r1, [r2, #0]
    2ade:	e7f6      	b.n	2ace <_sbrk+0xa>
    2ae0:	200023c4 	.word	0x200023c4
    2ae4:	200056f8 	.word	0x200056f8

00002ae8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2ae8:	2001      	movs	r0, #1
    2aea:	4240      	negs	r0, r0
    2aec:	4770      	bx	lr

00002aee <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2aee:	2380      	movs	r3, #128	; 0x80
    2af0:	019b      	lsls	r3, r3, #6
    2af2:	604b      	str	r3, [r1, #4]

	return 0;
}
    2af4:	2000      	movs	r0, #0
    2af6:	4770      	bx	lr

00002af8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2af8:	2001      	movs	r0, #1
    2afa:	4770      	bx	lr

00002afc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2afc:	2000      	movs	r0, #0
    2afe:	4770      	bx	lr

00002b00 <Enrollment>:
volatile unsigned char n[CRYPTO_NPUBBYTES] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
	
volatile enum OPERATION STAGE = ENROLLMENT;
struct multiBuffer rx_element_buff[CONF_CAN0_RX_BUFFER_NUM];

uint8_t Enrollment(uint8_t node_id, uint8_t *secret_key, uint8_t *ServerPublicKey, uint8_t *ec, struct can_module * can_inst) {
    2b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b02:	46de      	mov	lr, fp
    2b04:	4657      	mov	r7, sl
    2b06:	464e      	mov	r6, r9
    2b08:	4645      	mov	r5, r8
    2b0a:	b5e0      	push	{r5, r6, r7, lr}
    2b0c:	b099      	sub	sp, #100	; 0x64
    2b0e:	0005      	movs	r5, r0
    2b10:	9100      	str	r1, [sp, #0]
    2b12:	9201      	str	r2, [sp, #4]
    2b14:	9c22      	ldr	r4, [sp, #136]	; 0x88
	// Recv_Obj - Buffer 4
	// Using filter 3
	bool hardcoded = true;
	uint8_t message[8];
	
	memset(message,0,8);
    2b16:	2208      	movs	r2, #8
    2b18:	2100      	movs	r1, #0
    2b1a:	a816      	add	r0, sp, #88	; 0x58
    2b1c:	4b9e      	ldr	r3, [pc, #632]	; (2d98 <Enrollment+0x298>)
    2b1e:	4798      	blx	r3
	STAGE = ENROLLMENT;
    2b20:	2200      	movs	r2, #0
    2b22:	4b9e      	ldr	r3, [pc, #632]	; (2d9c <Enrollment+0x29c>)
    2b24:	701a      	strb	r2, [r3, #0]
 * \param[out] sd_filter  Pointer to standard filter element struct to initialize to default values
 */
static inline void can_get_standard_message_filter_element_default(
		struct can_standard_message_filter_element *sd_filter)
{
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    2b26:	4b9e      	ldr	r3, [pc, #632]	; (2da0 <Enrollment+0x2a0>)
    2b28:	469b      	mov	fp, r3
    2b2a:	9315      	str	r3, [sp, #84]	; 0x54
	
	struct can_standard_message_filter_element sd_filter;
	
	// Get Enrollment verification
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID2 = CAN_FILTER_ENROLLMENT;
    2b2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2b2e:	0adb      	lsrs	r3, r3, #11
    2b30:	02db      	lsls	r3, r3, #11
    2b32:	3203      	adds	r2, #3
    2b34:	4313      	orrs	r3, r2
    2b36:	9315      	str	r3, [sp, #84]	; 0x54
	sd_filter.S0.bit.SFID1 = 0x411;
    2b38:	9a15      	ldr	r2, [sp, #84]	; 0x54
    2b3a:	4b9a      	ldr	r3, [pc, #616]	; (2da4 <Enrollment+0x2a4>)
    2b3c:	469a      	mov	sl, r3
    2b3e:	401a      	ands	r2, r3
    2b40:	4b99      	ldr	r3, [pc, #612]	; (2da8 <Enrollment+0x2a8>)
    2b42:	4313      	orrs	r3, r2
    2b44:	9315      	str	r3, [sp, #84]	; 0x54
	sd_filter.S0.bit.SFEC =
    2b46:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2b48:	22e0      	movs	r2, #224	; 0xe0
    2b4a:	0592      	lsls	r2, r2, #22
    2b4c:	4690      	mov	r8, r2
    2b4e:	4313      	orrs	r3, r2
    2b50:	9315      	str	r3, [sp, #84]	; 0x54
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    2b52:	2203      	movs	r2, #3
    2b54:	a915      	add	r1, sp, #84	; 0x54
    2b56:	0020      	movs	r0, r4
    2b58:	4f94      	ldr	r7, [pc, #592]	; (2dac <Enrollment+0x2ac>)
    2b5a:	47b8      	blx	r7
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
    2b5c:	6822      	ldr	r2, [r4, #0]
    2b5e:	6d53      	ldr	r3, [r2, #84]	; 0x54
    2b60:	2680      	movs	r6, #128	; 0x80
    2b62:	0336      	lsls	r6, r6, #12
    2b64:	4333      	orrs	r3, r6
    2b66:	6553      	str	r3, [r2, #84]	; 0x54
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    2b68:	465b      	mov	r3, fp
    2b6a:	9315      	str	r3, [sp, #84]	; 0x54
		CAN_FILTER_ENROLLMENT);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);

	// Get Public Key (3/4 parts of it)
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID2 = CAN_FILTER_PUBLICKEY;
    2b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2b6e:	0adb      	lsrs	r3, r3, #11
    2b70:	02db      	lsls	r3, r3, #11
    2b72:	2204      	movs	r2, #4
    2b74:	4313      	orrs	r3, r2
    2b76:	9315      	str	r3, [sp, #84]	; 0x54
	sd_filter.S0.bit.SFID1 = 0x100;
    2b78:	9a15      	ldr	r2, [sp, #84]	; 0x54
    2b7a:	4653      	mov	r3, sl
    2b7c:	401a      	ands	r2, r3
    2b7e:	2380      	movs	r3, #128	; 0x80
    2b80:	045b      	lsls	r3, r3, #17
    2b82:	4313      	orrs	r3, r2
    2b84:	9315      	str	r3, [sp, #84]	; 0x54
	sd_filter.S0.bit.SFEC =
    2b86:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2b88:	4642      	mov	r2, r8
    2b8a:	4313      	orrs	r3, r2
    2b8c:	9315      	str	r3, [sp, #84]	; 0x54
	CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    2b8e:	2204      	movs	r2, #4
    2b90:	a915      	add	r1, sp, #84	; 0x54
    2b92:	0020      	movs	r0, r4
    2b94:	47b8      	blx	r7
	module_inst->hw->IE.reg |= source;
    2b96:	6823      	ldr	r3, [r4, #0]
    2b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    2b9a:	4316      	orrs	r6, r2
    2b9c:	655e      	str	r6, [r3, #84]	; 0x54
	CAN_FILTER_PUBLICKEY);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);
	
	while(g_rec == 0);
    2b9e:	4a84      	ldr	r2, [pc, #528]	; (2db0 <Enrollment+0x2b0>)
    2ba0:	6813      	ldr	r3, [r2, #0]
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d0fc      	beq.n	2ba0 <Enrollment+0xa0>
	g_rec = 0;
    2ba6:	2200      	movs	r2, #0
    2ba8:	4b81      	ldr	r3, [pc, #516]	; (2db0 <Enrollment+0x2b0>)
    2baa:	601a      	str	r2, [r3, #0]
extern volatile uint32_t ul_tickcount;
uint8_t Enrollment(uint8_t node_id, uint8_t *secret_key, uint8_t *ServerPublicKey, uint8_t *ec, struct can_module * can_inst);
// TODO: Probably use as "counter value"

inline struct can_rx_element_buffer * getNextBufferElement(struct multiBuffer * buff) {
	if (buff->last_write == buff->last_read) return NULL;
    2bac:	4b81      	ldr	r3, [pc, #516]	; (2db4 <Enrollment+0x2b4>)
    2bae:	4a82      	ldr	r2, [pc, #520]	; (2db8 <Enrollment+0x2b8>)
    2bb0:	5c9a      	ldrb	r2, [r3, r2]
    2bb2:	21db      	movs	r1, #219	; 0xdb
    2bb4:	0089      	lsls	r1, r1, #2
    2bb6:	5c5b      	ldrb	r3, [r3, r1]
    2bb8:	4293      	cmp	r3, r2
    2bba:	d100      	bne.n	2bbe <Enrollment+0xbe>
    2bbc:	e0dd      	b.n	2d7a <Enrollment+0x27a>
	register int last_element = buff->last_read;
	
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    2bbe:	487d      	ldr	r0, [pc, #500]	; (2db4 <Enrollment+0x2b4>)
    2bc0:	1c53      	adds	r3, r2, #1
    2bc2:	2103      	movs	r1, #3
    2bc4:	4019      	ands	r1, r3
    2bc6:	4b7c      	ldr	r3, [pc, #496]	; (2db8 <Enrollment+0x2b8>)
    2bc8:	54c1      	strb	r1, [r0, r3]
	
	return &(buff->buffers[last_element]);
    2bca:	00d3      	lsls	r3, r2, #3
    2bcc:	189b      	adds	r3, r3, r2
    2bce:	00db      	lsls	r3, r3, #3
    2bd0:	22dc      	movs	r2, #220	; 0xdc
    2bd2:	0092      	lsls	r2, r2, #2
    2bd4:	4694      	mov	ip, r2
    2bd6:	4463      	add	r3, ip
    2bd8:	181b      	adds	r3, r3, r0
	hardcoded = (bool)(getNextBufferElement(&rx_element_buff[CAN_FILTER_ENROLLMENT])->data[0]);
    2bda:	7a1f      	ldrb	r7, [r3, #8]
    2bdc:	003e      	movs	r6, r7
    2bde:	1e73      	subs	r3, r6, #1
    2be0:	419e      	sbcs	r6, r3
    2be2:	b2f6      	uxtb	r6, r6
// 	sd_filter.S0.bit.SFEC =
// 		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_DISABLE_Val;
// 	can_set_rx_standard_filter(can_inst, &sd_filter,
// 		CAN_FILTER_ENROLLMENT);
	
	startVal = TIMEVAL;
    2be4:	4b75      	ldr	r3, [pc, #468]	; (2dbc <Enrollment+0x2bc>)
    2be6:	689b      	ldr	r3, [r3, #8]
    2be8:	4a75      	ldr	r2, [pc, #468]	; (2dc0 <Enrollment+0x2c0>)
    2bea:	6812      	ldr	r2, [r2, #0]
    2bec:	4691      	mov	r9, r2
    2bee:	4875      	ldr	r0, [pc, #468]	; (2dc4 <Enrollment+0x2c4>)
    2bf0:	1ac0      	subs	r0, r0, r3
    2bf2:	4975      	ldr	r1, [pc, #468]	; (2dc8 <Enrollment+0x2c8>)
    2bf4:	4b75      	ldr	r3, [pc, #468]	; (2dcc <Enrollment+0x2cc>)
    2bf6:	4798      	blx	r3
    2bf8:	0001      	movs	r1, r0
    2bfa:	4449      	add	r1, r9
    2bfc:	4b74      	ldr	r3, [pc, #464]	; (2dd0 <Enrollment+0x2d0>)
    2bfe:	6019      	str	r1, [r3, #0]
	printf("Start: %d\r\n",startVal);
    2c00:	4874      	ldr	r0, [pc, #464]	; (2dd4 <Enrollment+0x2d4>)
    2c02:	4b75      	ldr	r3, [pc, #468]	; (2dd8 <Enrollment+0x2d8>)
    2c04:	4798      	blx	r3
	
	if(hardcoded) {
    2c06:	2f00      	cmp	r7, #0
    2c08:	d100      	bne.n	2c0c <Enrollment+0x10c>
    2c0a:	e0b8      	b.n	2d7e <Enrollment+0x27e>
		printf("Using hardcoded values...\r\n");
    2c0c:	4873      	ldr	r0, [pc, #460]	; (2ddc <Enrollment+0x2dc>)
    2c0e:	4b74      	ldr	r3, [pc, #464]	; (2de0 <Enrollment+0x2e0>)
    2c10:	4798      	blx	r3
		
		memset(secret_key+16,0,16);
    2c12:	9f00      	ldr	r7, [sp, #0]
    2c14:	003b      	movs	r3, r7
    2c16:	3310      	adds	r3, #16
    2c18:	0018      	movs	r0, r3
    2c1a:	2210      	movs	r2, #16
    2c1c:	2100      	movs	r1, #0
    2c1e:	4b5e      	ldr	r3, [pc, #376]	; (2d98 <Enrollment+0x298>)
    2c20:	4698      	mov	r8, r3
    2c22:	4798      	blx	r3
		memset(secret_key,node_id,16);
    2c24:	2210      	movs	r2, #16
    2c26:	0029      	movs	r1, r5
    2c28:	0038      	movs	r0, r7
    2c2a:	47c0      	blx	r8
		memset(secret_key,0,32);
	}
	
	// Get last, special part of the server public key (4/4)
	// can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID1 = 0x100 + node_id;
    2c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2c2e:	1c6a      	adds	r2, r5, #1
    2c30:	32ff      	adds	r2, #255	; 0xff
    2c32:	0412      	lsls	r2, r2, #16
    2c34:	495b      	ldr	r1, [pc, #364]	; (2da4 <Enrollment+0x2a4>)
    2c36:	400b      	ands	r3, r1
    2c38:	4313      	orrs	r3, r2
    2c3a:	9315      	str	r3, [sp, #84]	; 0x54
// 	sd_filter.S0.bit.SFID2 = CAN_FILTER_PUBLICKEY;
// 	sd_filter.S0.bit.SFEC =
// 	CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    2c3c:	2205      	movs	r2, #5
    2c3e:	a915      	add	r1, sp, #84	; 0x54
    2c40:	0020      	movs	r0, r4
    2c42:	4b5a      	ldr	r3, [pc, #360]	; (2dac <Enrollment+0x2ac>)
    2c44:	4798      	blx	r3
	for(i=0; i<3; i++) {
		while(g_rec_public == (unsigned)i);
		memcpy(&ServerPublicKey[i*8],getNextBufferElement(&rx_element_buff[CAN_FILTER_PUBLICKEY])->data,8);
	}
	*/
	while(g_rec_public <= 1);
    2c46:	4a67      	ldr	r2, [pc, #412]	; (2de4 <Enrollment+0x2e4>)
    2c48:	6813      	ldr	r3, [r2, #0]
    2c4a:	2b01      	cmp	r3, #1
    2c4c:	d9fc      	bls.n	2c48 <Enrollment+0x148>
	if (buff->last_write == buff->last_read) return NULL;
    2c4e:	4b59      	ldr	r3, [pc, #356]	; (2db4 <Enrollment+0x2b4>)
    2c50:	4a65      	ldr	r2, [pc, #404]	; (2de8 <Enrollment+0x2e8>)
    2c52:	5c99      	ldrb	r1, [r3, r2]
    2c54:	3a01      	subs	r2, #1
    2c56:	5c9b      	ldrb	r3, [r3, r2]
    2c58:	428b      	cmp	r3, r1
    2c5a:	d100      	bne.n	2c5e <Enrollment+0x15e>
    2c5c:	e098      	b.n	2d90 <Enrollment+0x290>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    2c5e:	4a55      	ldr	r2, [pc, #340]	; (2db4 <Enrollment+0x2b4>)
    2c60:	1c48      	adds	r0, r1, #1
    2c62:	2303      	movs	r3, #3
    2c64:	4003      	ands	r3, r0
    2c66:	4860      	ldr	r0, [pc, #384]	; (2de8 <Enrollment+0x2e8>)
    2c68:	5413      	strb	r3, [r2, r0]
	return &(buff->buffers[last_element]);
    2c6a:	00cb      	lsls	r3, r1, #3
    2c6c:	1859      	adds	r1, r3, r1
    2c6e:	00c9      	lsls	r1, r1, #3
    2c70:	4b5e      	ldr	r3, [pc, #376]	; (2dec <Enrollment+0x2ec>)
    2c72:	469c      	mov	ip, r3
    2c74:	4461      	add	r1, ip
    2c76:	1889      	adds	r1, r1, r2
	
	//printf("Made it here.\r\n");

	//while(g_rec_public == 1);
	memcpy(&ServerPublicKey[0],getNextBufferElement(&rx_element_buff[CAN_FILTER_PUBLICKEY])->data,24);
    2c78:	3108      	adds	r1, #8
    2c7a:	2218      	movs	r2, #24
    2c7c:	9f01      	ldr	r7, [sp, #4]
    2c7e:	0038      	movs	r0, r7
    2c80:	4b5b      	ldr	r3, [pc, #364]	; (2df0 <Enrollment+0x2f0>)
    2c82:	4798      	blx	r3
	memcpy(&ServerPublicKey[24],getNextBufferElement(&rx_element_buff[CAN_FILTER_PUBLICKEY])->data,8);
    2c84:	0038      	movs	r0, r7
    2c86:	3018      	adds	r0, #24
	if (buff->last_write == buff->last_read) return NULL;
    2c88:	4b4a      	ldr	r3, [pc, #296]	; (2db4 <Enrollment+0x2b4>)
    2c8a:	4a57      	ldr	r2, [pc, #348]	; (2de8 <Enrollment+0x2e8>)
    2c8c:	5c99      	ldrb	r1, [r3, r2]
    2c8e:	3a01      	subs	r2, #1
    2c90:	5c9b      	ldrb	r3, [r3, r2]
    2c92:	428b      	cmp	r3, r1
    2c94:	d100      	bne.n	2c98 <Enrollment+0x198>
    2c96:	e07d      	b.n	2d94 <Enrollment+0x294>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    2c98:	4a46      	ldr	r2, [pc, #280]	; (2db4 <Enrollment+0x2b4>)
    2c9a:	1c4f      	adds	r7, r1, #1
    2c9c:	2303      	movs	r3, #3
    2c9e:	403b      	ands	r3, r7
    2ca0:	4f51      	ldr	r7, [pc, #324]	; (2de8 <Enrollment+0x2e8>)
    2ca2:	55d3      	strb	r3, [r2, r7]
	return &(buff->buffers[last_element]);
    2ca4:	00cb      	lsls	r3, r1, #3
    2ca6:	1859      	adds	r1, r3, r1
    2ca8:	00c9      	lsls	r1, r1, #3
    2caa:	4b50      	ldr	r3, [pc, #320]	; (2dec <Enrollment+0x2ec>)
    2cac:	469c      	mov	ip, r3
    2cae:	4461      	add	r1, ip
    2cb0:	1889      	adds	r1, r1, r2
    2cb2:	3108      	adds	r1, #8
    2cb4:	2208      	movs	r2, #8
    2cb6:	4f4e      	ldr	r7, [pc, #312]	; (2df0 <Enrollment+0x2f0>)
    2cb8:	47b8      	blx	r7
	tx_element->T0.reg = 0;
    2cba:	2300      	movs	r3, #0
    2cbc:	9303      	str	r3, [sp, #12]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    2cbe:	2388      	movs	r3, #136	; 0x88
    2cc0:	041b      	lsls	r3, r3, #16
    2cc2:	9304      	str	r3, [sp, #16]
	// Send the response (2 packets)
	struct can_tx_element tx_element;

	// Part 1:
	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x200+node_id);
    2cc4:	9b03      	ldr	r3, [sp, #12]
    2cc6:	2280      	movs	r2, #128	; 0x80
    2cc8:	0092      	lsls	r2, r2, #2
    2cca:	4694      	mov	ip, r2
    2ccc:	4465      	add	r5, ip
    2cce:	04ad      	lsls	r5, r5, #18
    2cd0:	4a48      	ldr	r2, [pc, #288]	; (2df4 <Enrollment+0x2f4>)
    2cd2:	4015      	ands	r5, r2
    2cd4:	431d      	orrs	r5, r3
    2cd6:	9503      	str	r5, [sp, #12]
	tx_element.T1.reg = CAN_TX_ELEMENT_T1_FDF | CAN_TX_ELEMENT_T1_BRS |
    2cd8:	23e8      	movs	r3, #232	; 0xe8
    2cda:	039b      	lsls	r3, r3, #14
    2cdc:	9304      	str	r3, [sp, #16]
		CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA16_Val);
	memcpy(tx_element.data,secret_key,16);
    2cde:	2210      	movs	r2, #16
    2ce0:	9900      	ldr	r1, [sp, #0]
    2ce2:	a805      	add	r0, sp, #20
    2ce4:	47b8      	blx	r7
	can_set_tx_buffer_element(can_inst, &tx_element,
    2ce6:	2205      	movs	r2, #5
    2ce8:	a903      	add	r1, sp, #12
    2cea:	0020      	movs	r0, r4
    2cec:	4b42      	ldr	r3, [pc, #264]	; (2df8 <Enrollment+0x2f8>)
    2cee:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    2cf0:	6823      	ldr	r3, [r4, #0]
    2cf2:	699a      	ldr	r2, [r3, #24]
    2cf4:	0792      	lsls	r2, r2, #30
    2cf6:	d402      	bmi.n	2cfe <Enrollment+0x1fe>
	module_inst->hw->TXBAR.reg = trig_mask;
    2cf8:	2120      	movs	r1, #32
    2cfa:	22d0      	movs	r2, #208	; 0xd0
    2cfc:	5099      	str	r1, [r3, r2]
	return module_inst->hw->TXBTO.reg;
    2cfe:	6820      	ldr	r0, [r4, #0]
    2d00:	21d8      	movs	r1, #216	; 0xd8
		CAN_TX_FILTER_BUFFER_INDEX);
	can_tx_transfer_request(can_inst, 1 << CAN_TX_FILTER_BUFFER_INDEX);
	
	while(!(can_tx_get_transmission_status(can_inst) & (1 << CAN_TX_FILTER_BUFFER_INDEX)));
    2d02:	2220      	movs	r2, #32
    2d04:	5843      	ldr	r3, [r0, r1]
    2d06:	421a      	tst	r2, r3
    2d08:	d0fc      	beq.n	2d04 <Enrollment+0x204>
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    2d0a:	4b25      	ldr	r3, [pc, #148]	; (2da0 <Enrollment+0x2a0>)
    2d0c:	9315      	str	r3, [sp, #84]	; 0x54
	*/
	
	// Wait for final message from server confirming enrollment has completed
	//printf("Last part\r\n");
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID2 = CAN_FILTER_ENROLLMENT;
    2d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2d10:	0adb      	lsrs	r3, r3, #11
    2d12:	02db      	lsls	r3, r3, #11
    2d14:	2203      	movs	r2, #3
    2d16:	4313      	orrs	r3, r2
    2d18:	9315      	str	r3, [sp, #84]	; 0x54
	sd_filter.S0.bit.SFID1 = 0x411;
    2d1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2d1c:	4a21      	ldr	r2, [pc, #132]	; (2da4 <Enrollment+0x2a4>)
    2d1e:	401a      	ands	r2, r3
    2d20:	4b21      	ldr	r3, [pc, #132]	; (2da8 <Enrollment+0x2a8>)
    2d22:	4313      	orrs	r3, r2
    2d24:	9315      	str	r3, [sp, #84]	; 0x54
	sd_filter.S0.bit.SFEC =
    2d26:	9a15      	ldr	r2, [sp, #84]	; 0x54
    2d28:	23e0      	movs	r3, #224	; 0xe0
    2d2a:	059b      	lsls	r3, r3, #22
    2d2c:	4313      	orrs	r3, r2
    2d2e:	9315      	str	r3, [sp, #84]	; 0x54
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    2d30:	2203      	movs	r2, #3
    2d32:	a915      	add	r1, sp, #84	; 0x54
    2d34:	0020      	movs	r0, r4
    2d36:	4b1d      	ldr	r3, [pc, #116]	; (2dac <Enrollment+0x2ac>)
    2d38:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    2d3a:	6822      	ldr	r2, [r4, #0]
    2d3c:	6d51      	ldr	r1, [r2, #84]	; 0x54
    2d3e:	2380      	movs	r3, #128	; 0x80
    2d40:	031b      	lsls	r3, r3, #12
    2d42:	430b      	orrs	r3, r1
    2d44:	6553      	str	r3, [r2, #84]	; 0x54
		CAN_FILTER_ENROLLMENT);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);
	
	while(g_rec == 0);
    2d46:	4a1a      	ldr	r2, [pc, #104]	; (2db0 <Enrollment+0x2b0>)
    2d48:	6813      	ldr	r3, [r2, #0]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d0fc      	beq.n	2d48 <Enrollment+0x248>
	g_rec = 0;
    2d4e:	2200      	movs	r2, #0
    2d50:	4b17      	ldr	r3, [pc, #92]	; (2db0 <Enrollment+0x2b0>)
    2d52:	601a      	str	r2, [r3, #0]
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    2d54:	4b12      	ldr	r3, [pc, #72]	; (2da0 <Enrollment+0x2a0>)
    2d56:	9315      	str	r3, [sp, #84]	; 0x54
	
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFEC =
    2d58:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2d5a:	4a28      	ldr	r2, [pc, #160]	; (2dfc <Enrollment+0x2fc>)
    2d5c:	4013      	ands	r3, r2
    2d5e:	9315      	str	r3, [sp, #84]	; 0x54
		CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_DISABLE_Val;
	can_set_rx_standard_filter(can_inst, &sd_filter,
    2d60:	2203      	movs	r2, #3
    2d62:	a915      	add	r1, sp, #84	; 0x54
    2d64:	0020      	movs	r0, r4
    2d66:	4b11      	ldr	r3, [pc, #68]	; (2dac <Enrollment+0x2ac>)
    2d68:	4798      	blx	r3
		CAN_FILTER_ENROLLMENT);

	return hardcoded;
    2d6a:	0030      	movs	r0, r6
    2d6c:	b019      	add	sp, #100	; 0x64
    2d6e:	bc3c      	pop	{r2, r3, r4, r5}
    2d70:	4690      	mov	r8, r2
    2d72:	4699      	mov	r9, r3
    2d74:	46a2      	mov	sl, r4
    2d76:	46ab      	mov	fp, r5
    2d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buff->last_write == buff->last_read) return NULL;
    2d7a:	2300      	movs	r3, #0
    2d7c:	e72d      	b.n	2bda <Enrollment+0xda>
		printf("PUF stuff not available.\r\n");
    2d7e:	4820      	ldr	r0, [pc, #128]	; (2e00 <Enrollment+0x300>)
    2d80:	4b17      	ldr	r3, [pc, #92]	; (2de0 <Enrollment+0x2e0>)
    2d82:	4798      	blx	r3
		memset(secret_key,0,32);
    2d84:	2220      	movs	r2, #32
    2d86:	2100      	movs	r1, #0
    2d88:	9800      	ldr	r0, [sp, #0]
    2d8a:	4b03      	ldr	r3, [pc, #12]	; (2d98 <Enrollment+0x298>)
    2d8c:	4798      	blx	r3
    2d8e:	e74d      	b.n	2c2c <Enrollment+0x12c>
    2d90:	2100      	movs	r1, #0
    2d92:	e771      	b.n	2c78 <Enrollment+0x178>
    2d94:	2100      	movs	r1, #0
    2d96:	e78c      	b.n	2cb2 <Enrollment+0x1b2>
    2d98:	0000671f 	.word	0x0000671f
    2d9c:	200023c8 	.word	0x200023c8
    2da0:	880007ff 	.word	0x880007ff
    2da4:	f800ffff 	.word	0xf800ffff
    2da8:	04110000 	.word	0x04110000
    2dac:	0000171d 	.word	0x0000171d
    2db0:	200023cc 	.word	0x200023cc
    2db4:	200024b0 	.word	0x200024b0
    2db8:	0000036d 	.word	0x0000036d
    2dbc:	e000e010 	.word	0xe000e010
    2dc0:	200023d8 	.word	0x200023d8
    2dc4:	00dbb9ff 	.word	0x00dbb9ff
    2dc8:	0000bb80 	.word	0x0000bb80
    2dcc:	0000634d 	.word	0x0000634d
    2dd0:	200036f0 	.word	0x200036f0
    2dd4:	0000782c 	.word	0x0000782c
    2dd8:	00006881 	.word	0x00006881
    2ddc:	00007838 	.word	0x00007838
    2de0:	00006975 	.word	0x00006975
    2de4:	200023d0 	.word	0x200023d0
    2de8:	00000491 	.word	0x00000491
    2dec:	00000494 	.word	0x00000494
    2df0:	000066e9 	.word	0x000066e9
    2df4:	1ffc0000 	.word	0x1ffc0000
    2df8:	00001809 	.word	0x00001809
    2dfc:	c7ffffff 	.word	0xc7ffffff
    2e00:	00007854 	.word	0x00007854

00002e04 <is_zero_ct>:
static digit_t mask4000 = (digit_t)1 << (sizeof(digit_t)*8 - 2);
static digit_t mask7fff = (digit_t)(-1) >> 1;


bool is_zero_ct(digit_t* a, unsigned int nwords)
{ // Check if multiprecision element is zero
    2e04:	b510      	push	{r4, lr}
    digit_t x;
    unsigned int i;

    x = a[0];
    2e06:	6802      	ldr	r2, [r0, #0]
    for (i = 1; i < nwords; i++) {
    2e08:	2901      	cmp	r1, #1
    2e0a:	d906      	bls.n	2e1a <is_zero_ct+0x16>
    2e0c:	1d03      	adds	r3, r0, #4
    2e0e:	0089      	lsls	r1, r1, #2
    2e10:	1840      	adds	r0, r0, r1
        x |= a[i];
    2e12:	cb10      	ldmia	r3!, {r4}
    2e14:	4322      	orrs	r2, r4
    for (i = 1; i < nwords; i++) {
    2e16:	4283      	cmp	r3, r0
    2e18:	d1fb      	bne.n	2e12 <is_zero_ct+0xe>
    }

    return (bool)(1 ^ ((x | (0-x)) >> (RADIX-1)));
    2e1a:	4250      	negs	r0, r2
    2e1c:	4310      	orrs	r0, r2
    2e1e:	0fc0      	lsrs	r0, r0, #31
    2e20:	3801      	subs	r0, #1
    2e22:	4240      	negs	r0, r0
}
    2e24:	bd10      	pop	{r4, pc}
	...

00002e28 <encode>:


void encode(point_t P, unsigned char* Pencoded)
{ // Encode point P
    2e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e2a:	0005      	movs	r5, r0
    2e2c:	000e      	movs	r6, r1
  // SECURITY NOTE: this function does not run in constant time.
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    2e2e:	69c7      	ldr	r7, [r0, #28]
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    2e30:	68c4      	ldr	r4, [r0, #12]

    memmove(Pencoded, P->y, 32);
    2e32:	0001      	movs	r1, r0
    2e34:	3120      	adds	r1, #32
    2e36:	2220      	movs	r2, #32
    2e38:	0030      	movs	r0, r6
    2e3a:	4b0b      	ldr	r3, [pc, #44]	; (2e68 <encode+0x40>)
    2e3c:	4798      	blx	r3
    if (is_zero_ct((digit_t*)P->x, NWORDS_FIELD) == true) {
    2e3e:	2104      	movs	r1, #4
    2e40:	0028      	movs	r0, r5
    2e42:	4b0a      	ldr	r3, [pc, #40]	; (2e6c <encode+0x44>)
    2e44:	4798      	blx	r3
    2e46:	2800      	cmp	r0, #0
    2e48:	d106      	bne.n	2e58 <encode+0x30>
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    2e4a:	0064      	lsls	r4, r4, #1
    2e4c:	0fe4      	lsrs	r4, r4, #31
    2e4e:	07e4      	lsls	r4, r4, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    } else {
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp2;
    2e50:	69f3      	ldr	r3, [r6, #28]
    2e52:	431c      	orrs	r4, r3
    2e54:	61f4      	str	r4, [r6, #28]
    }
}
    2e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    2e58:	007f      	lsls	r7, r7, #1
    2e5a:	0fff      	lsrs	r7, r7, #31
    2e5c:	07ff      	lsls	r7, r7, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    2e5e:	69f3      	ldr	r3, [r6, #28]
    2e60:	431f      	orrs	r7, r3
    2e62:	61f7      	str	r7, [r6, #28]
    2e64:	e7f7      	b.n	2e56 <encode+0x2e>
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	000066fb 	.word	0x000066fb
    2e6c:	00002e05 	.word	0x00002e05

00002e70 <decode>:


ECCRYPTO_STATUS decode(const unsigned char* Pencoded, point_t P)
{ // Decode point P
    2e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e72:	46c6      	mov	lr, r8
    2e74:	b500      	push	{lr}
    2e76:	4c87      	ldr	r4, [pc, #540]	; (3094 <decode+0x224>)
    2e78:	44a5      	add	sp, r4
    2e7a:	0004      	movs	r4, r0
    2e7c:	000f      	movs	r7, r1
  // SECURITY NOTE: this function does not run in constant time.
    velm_t r, t, t0, t1, t2, t3, t4;
    v2elm_t u, v, one = {0};
    2e7e:	2228      	movs	r2, #40	; 0x28
    2e80:	2100      	movs	r1, #0
    2e82:	a849      	add	r0, sp, #292	; 0x124
    2e84:	4b84      	ldr	r3, [pc, #528]	; (3098 <decode+0x228>)
    2e86:	4798      	blx	r3
    digit_t sign_dec;
    vpoint_extproj_t R;
    vpoint_t VP;
    unsigned int i, sign;

    one[0] = 1;
    2e88:	2301      	movs	r3, #1
    2e8a:	9349      	str	r3, [sp, #292]	; 0x124
    memmove((unsigned char*)P->y, Pencoded, 32);   // Decoding y-coordinate and sign
    2e8c:	331f      	adds	r3, #31
    2e8e:	469c      	mov	ip, r3
    2e90:	44bc      	add	ip, r7
    2e92:	4663      	mov	r3, ip
    2e94:	4665      	mov	r5, ip
    2e96:	9301      	str	r3, [sp, #4]
    2e98:	2220      	movs	r2, #32
    2e9a:	0021      	movs	r1, r4
    2e9c:	0018      	movs	r0, r3
    2e9e:	4b7f      	ldr	r3, [pc, #508]	; (309c <decode+0x22c>)
    2ea0:	4798      	blx	r3
    sign = (unsigned int)(Pencoded[31] >> 7);
    2ea2:	7fe3      	ldrb	r3, [r4, #31]
    2ea4:	09db      	lsrs	r3, r3, #7
    2ea6:	4698      	mov	r8, r3
    P->y[1][NWORDS_FIELD-1] &= mask7fff;
    2ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2eaa:	005b      	lsls	r3, r3, #1
    2eac:	085b      	lsrs	r3, r3, #1
    2eae:	63fb      	str	r3, [r7, #60]	; 0x3c
    from_std_to_ext(P->y, VP->y);
    2eb0:	a90d      	add	r1, sp, #52	; 0x34
    2eb2:	0028      	movs	r0, r5
    2eb4:	4b7a      	ldr	r3, [pc, #488]	; (30a0 <decode+0x230>)
    2eb6:	4798      	blx	r3

    v2sqr1271(VP->y, u);
    2eb8:	a95d      	add	r1, sp, #372	; 0x174
    2eba:	a80d      	add	r0, sp, #52	; 0x34
    2ebc:	4b79      	ldr	r3, [pc, #484]	; (30a4 <decode+0x234>)
    2ebe:	4798      	blx	r3
    v2mul1271(u, (digit_t*)&PARAMETER_d, v);
    2ec0:	aa53      	add	r2, sp, #332	; 0x14c
    2ec2:	4979      	ldr	r1, [pc, #484]	; (30a8 <decode+0x238>)
    2ec4:	a85d      	add	r0, sp, #372	; 0x174
    2ec6:	4b79      	ldr	r3, [pc, #484]	; (30ac <decode+0x23c>)
    2ec8:	4798      	blx	r3
    v2sub1271(u, one, u);
    2eca:	aa5d      	add	r2, sp, #372	; 0x174
    2ecc:	a949      	add	r1, sp, #292	; 0x124
    2ece:	0010      	movs	r0, r2
    2ed0:	4b77      	ldr	r3, [pc, #476]	; (30b0 <decode+0x240>)
    2ed2:	4798      	blx	r3
    v2add1271(v, one, v);
    2ed4:	aa53      	add	r2, sp, #332	; 0x14c
    2ed6:	a949      	add	r1, sp, #292	; 0x124
    2ed8:	0010      	movs	r0, r2
    2eda:	4b76      	ldr	r3, [pc, #472]	; (30b4 <decode+0x244>)
    2edc:	4798      	blx	r3

    vsqr1271(&v[0], t0);                              // t0 = v0^2
    2ede:	a97b      	add	r1, sp, #492	; 0x1ec
    2ee0:	a853      	add	r0, sp, #332	; 0x14c
    2ee2:	4c75      	ldr	r4, [pc, #468]	; (30b8 <decode+0x248>)
    2ee4:	47a0      	blx	r4
    vsqr1271(&v[VWORDS_FIELD], t1);                   // t1 = v1^2
    2ee6:	a976      	add	r1, sp, #472	; 0x1d8
    2ee8:	a858      	add	r0, sp, #352	; 0x160
    2eea:	47a0      	blx	r4
    vadd1271(t0, t1, t0);                             // t0 = t0+t1
    2eec:	aa7b      	add	r2, sp, #492	; 0x1ec
    2eee:	a976      	add	r1, sp, #472	; 0x1d8
    2ef0:	0010      	movs	r0, r2
    2ef2:	4e72      	ldr	r6, [pc, #456]	; (30bc <decode+0x24c>)
    2ef4:	47b0      	blx	r6
    vmul1271(&u[0], &v[0], t1);                       // t1 = u0*v0
    2ef6:	aa76      	add	r2, sp, #472	; 0x1d8
    2ef8:	a953      	add	r1, sp, #332	; 0x14c
    2efa:	a85d      	add	r0, sp, #372	; 0x174
    2efc:	4d70      	ldr	r5, [pc, #448]	; (30c0 <decode+0x250>)
    2efe:	47a8      	blx	r5
    vmul1271(&u[VWORDS_FIELD], &v[VWORDS_FIELD], t2); // t2 = u1*v1 
    2f00:	aa71      	add	r2, sp, #452	; 0x1c4
    2f02:	a958      	add	r1, sp, #352	; 0x160
    2f04:	a862      	add	r0, sp, #392	; 0x188
    2f06:	47a8      	blx	r5
    vadd1271(t1, t2, t1);                             // t1 = t1+t2 
    2f08:	aa76      	add	r2, sp, #472	; 0x1d8
    2f0a:	a971      	add	r1, sp, #452	; 0x1c4
    2f0c:	0010      	movs	r0, r2
    2f0e:	47b0      	blx	r6
    vmul1271(&u[VWORDS_FIELD], &v[0], t2);            // t2 = u1*v0
    2f10:	aa71      	add	r2, sp, #452	; 0x1c4
    2f12:	a953      	add	r1, sp, #332	; 0x14c
    2f14:	a862      	add	r0, sp, #392	; 0x188
    2f16:	47a8      	blx	r5
    vmul1271(&u[0], &v[VWORDS_FIELD], t3);            // t3 = u0*v1
    2f18:	aa6c      	add	r2, sp, #432	; 0x1b0
    2f1a:	a958      	add	r1, sp, #352	; 0x160
    2f1c:	a85d      	add	r0, sp, #372	; 0x174
    2f1e:	47a8      	blx	r5
    vsub1271(t2, t3, t2);                             // t2 = t2-t3 
    2f20:	aa71      	add	r2, sp, #452	; 0x1c4
    2f22:	a96c      	add	r1, sp, #432	; 0x1b0
    2f24:	0010      	movs	r0, r2
    2f26:	4b67      	ldr	r3, [pc, #412]	; (30c4 <decode+0x254>)
    2f28:	4798      	blx	r3
    vsqr1271(t1, t3);                                 // t3 = t1^2    
    2f2a:	a96c      	add	r1, sp, #432	; 0x1b0
    2f2c:	a876      	add	r0, sp, #472	; 0x1d8
    2f2e:	47a0      	blx	r4
    vsqr1271(t2, t4);                                 // t4 = t2^2                   
    2f30:	a967      	add	r1, sp, #412	; 0x19c
    2f32:	a871      	add	r0, sp, #452	; 0x1c4
    2f34:	47a0      	blx	r4
    vadd1271(t3, t4, t3);                             // t3 = t3+t4
    2f36:	aa6c      	add	r2, sp, #432	; 0x1b0
    2f38:	a967      	add	r1, sp, #412	; 0x19c
    2f3a:	0010      	movs	r0, r2
    2f3c:	47b0      	blx	r6
    2f3e:	247d      	movs	r4, #125	; 0x7d
    for (i = 0; i < 125; i++) {                       // t3 = t3^(2^125)
        vsqr1271(t3, t3);
    2f40:	4d5d      	ldr	r5, [pc, #372]	; (30b8 <decode+0x248>)
    2f42:	a96c      	add	r1, sp, #432	; 0x1b0
    2f44:	0008      	movs	r0, r1
    2f46:	47a8      	blx	r5
    2f48:	3c01      	subs	r4, #1
    for (i = 0; i < 125; i++) {                       // t3 = t3^(2^125)
    2f4a:	2c00      	cmp	r4, #0
    2f4c:	d1f9      	bne.n	2f42 <decode+0xd2>
    }

    vadd1271(t1, t3, t);                           // t = t1+t3
    2f4e:	aa80      	add	r2, sp, #512	; 0x200
    2f50:	a96c      	add	r1, sp, #432	; 0x1b0
    2f52:	a876      	add	r0, sp, #472	; 0x1d8
    2f54:	4b59      	ldr	r3, [pc, #356]	; (30bc <decode+0x24c>)
    2f56:	4798      	blx	r3
    vmod1271(t, t);
    2f58:	a980      	add	r1, sp, #512	; 0x200
    2f5a:	0008      	movs	r0, r1
    2f5c:	4b5a      	ldr	r3, [pc, #360]	; (30c8 <decode+0x258>)
    2f5e:	4798      	blx	r3
    if (is_zero_ct(t, VWORDS_FIELD) == true) {
    2f60:	2105      	movs	r1, #5
    2f62:	a880      	add	r0, sp, #512	; 0x200
    2f64:	4b59      	ldr	r3, [pc, #356]	; (30cc <decode+0x25c>)
    2f66:	4798      	blx	r3
    2f68:	2800      	cmp	r0, #0
    2f6a:	d000      	beq.n	2f6e <decode+0xfe>
    2f6c:	e073      	b.n	3056 <decode+0x1e6>
        vsub1271(t1, t3, t);                       // t = t1-t3
    }
    vadd1271(t, t, t);                             // t = 2*t 
    2f6e:	aa80      	add	r2, sp, #512	; 0x200
    2f70:	0011      	movs	r1, r2
    2f72:	0010      	movs	r0, r2
    2f74:	4b51      	ldr	r3, [pc, #324]	; (30bc <decode+0x24c>)
    2f76:	4798      	blx	r3
    vsqr1271(t0, t3);                              // t3 = t0^2      
    2f78:	a96c      	add	r1, sp, #432	; 0x1b0
    2f7a:	a87b      	add	r0, sp, #492	; 0x1ec
    2f7c:	4d4e      	ldr	r5, [pc, #312]	; (30b8 <decode+0x248>)
    2f7e:	47a8      	blx	r5
    vmul1271(t0, t3, t3);                          // t3 = t3*t0   
    2f80:	aa6c      	add	r2, sp, #432	; 0x1b0
    2f82:	0011      	movs	r1, r2
    2f84:	a87b      	add	r0, sp, #492	; 0x1ec
    2f86:	4c4e      	ldr	r4, [pc, #312]	; (30c0 <decode+0x250>)
    2f88:	47a0      	blx	r4
    vmul1271(t, t3, t3);                           // t3 = t3*t
    2f8a:	aa6c      	add	r2, sp, #432	; 0x1b0
    2f8c:	0011      	movs	r1, r2
    2f8e:	a880      	add	r0, sp, #512	; 0x200
    2f90:	47a0      	blx	r4
    vexp1251(t3, r);                               // r = t3^(2^125-1)  
    2f92:	a985      	add	r1, sp, #532	; 0x214
    2f94:	a86c      	add	r0, sp, #432	; 0x1b0
    2f96:	4b4e      	ldr	r3, [pc, #312]	; (30d0 <decode+0x260>)
    2f98:	4798      	blx	r3
    vmul1271(t0, r, t3);                           // t3 = t0*r          
    2f9a:	aa6c      	add	r2, sp, #432	; 0x1b0
    2f9c:	a985      	add	r1, sp, #532	; 0x214
    2f9e:	a87b      	add	r0, sp, #492	; 0x1ec
    2fa0:	47a0      	blx	r4
    vmul1271(t, t3, &VP->x[0]);                    // x0 = t*t3 
    2fa2:	aa03      	add	r2, sp, #12
    2fa4:	a96c      	add	r1, sp, #432	; 0x1b0
    2fa6:	a880      	add	r0, sp, #512	; 0x200
    2fa8:	47a0      	blx	r4
    vsqr1271(&VP->x[0], t1);
    2faa:	a976      	add	r1, sp, #472	; 0x1d8
    2fac:	a803      	add	r0, sp, #12
    2fae:	47a8      	blx	r5
    vmul1271(t0, t1, t1);                          // t1 = t0*x0^2 
    2fb0:	aa76      	add	r2, sp, #472	; 0x1d8
    2fb2:	0011      	movs	r1, r2
    2fb4:	a87b      	add	r0, sp, #492	; 0x1ec
    2fb6:	47a0      	blx	r4
    vdiv1271(&VP->x[0]);                           // x0 = x0/2
    2fb8:	a803      	add	r0, sp, #12
    2fba:	4b46      	ldr	r3, [pc, #280]	; (30d4 <decode+0x264>)
    2fbc:	4798      	blx	r3
    vmul1271(t2, t3, &VP->x[VWORDS_FIELD]);        // x1 = t3*t2  
    2fbe:	aa08      	add	r2, sp, #32
    2fc0:	a96c      	add	r1, sp, #432	; 0x1b0
    2fc2:	a871      	add	r0, sp, #452	; 0x1c4
    2fc4:	47a0      	blx	r4

    vsub1271(t, t1, t);
    2fc6:	aa80      	add	r2, sp, #512	; 0x200
    2fc8:	a976      	add	r1, sp, #472	; 0x1d8
    2fca:	0010      	movs	r0, r2
    2fcc:	4b3d      	ldr	r3, [pc, #244]	; (30c4 <decode+0x254>)
    2fce:	4798      	blx	r3
    vmod1271(t, t);
    2fd0:	a980      	add	r1, sp, #512	; 0x200
    2fd2:	0008      	movs	r0, r1
    2fd4:	4b3c      	ldr	r3, [pc, #240]	; (30c8 <decode+0x258>)
    2fd6:	4798      	blx	r3
    if (is_zero_ct(t, VWORDS_FIELD) == false) {        // If t != t1 then swap x0 and x1       
    2fd8:	2105      	movs	r1, #5
    2fda:	a880      	add	r0, sp, #512	; 0x200
    2fdc:	4b3b      	ldr	r3, [pc, #236]	; (30cc <decode+0x25c>)
    2fde:	4798      	blx	r3
    2fe0:	2800      	cmp	r0, #0
    2fe2:	d03e      	beq.n	3062 <decode+0x1f2>
        memmove((unsigned char*)t0, (unsigned char*)&VP->x[0], 20);
        memmove((unsigned char*)&VP->x[0], (unsigned char*)&VP->x[VWORDS_FIELD], 20);
        memmove((unsigned char*)&VP->x[VWORDS_FIELD], (unsigned char*)t0, 20);
    }

    v2mod1271(VP->x, VP->x);
    2fe4:	a903      	add	r1, sp, #12
    2fe6:	0008      	movs	r0, r1
    2fe8:	4b3b      	ldr	r3, [pc, #236]	; (30d8 <decode+0x268>)
    2fea:	4798      	blx	r3
    if (is_zero_ct(VP->x, VWORDS_FIELD) == true) {
    2fec:	2105      	movs	r1, #5
    2fee:	a803      	add	r0, sp, #12
    2ff0:	4b36      	ldr	r3, [pc, #216]	; (30cc <decode+0x25c>)
    2ff2:	4798      	blx	r3
    2ff4:	2800      	cmp	r0, #0
    2ff6:	d049      	beq.n	308c <decode+0x21c>
        sign_dec = VP->x[2*VWORDS_FIELD-1] >> 22;
    2ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ffa:	0d9b      	lsrs	r3, r3, #22
    } else {
        sign_dec = VP->x[VWORDS_FIELD-1] >> 22;
    }

    if (sign != (unsigned int)sign_dec) {           // If sign of x-coordinate decoded != input sign bit, then negate x-coordinate
    2ffc:	4543      	cmp	r3, r8
    2ffe:	d002      	beq.n	3006 <decode+0x196>
        v2neg1271(VP->x);         
    3000:	a803      	add	r0, sp, #12
    3002:	4b36      	ldr	r3, [pc, #216]	; (30dc <decode+0x26c>)
    3004:	4798      	blx	r3
    }

    v2mod1271(VP->x, R->x);
    3006:	a917      	add	r1, sp, #92	; 0x5c
    3008:	a803      	add	r0, sp, #12
    300a:	4c33      	ldr	r4, [pc, #204]	; (30d8 <decode+0x268>)
    300c:	47a0      	blx	r4
    v2mod1271(VP->y, R->y);
    300e:	a921      	add	r1, sp, #132	; 0x84
    3010:	a80d      	add	r0, sp, #52	; 0x34
    3012:	47a0      	blx	r4
    if (ecc_point_validate(R) == false) {
    3014:	a817      	add	r0, sp, #92	; 0x5c
    3016:	4b32      	ldr	r3, [pc, #200]	; (30e0 <decode+0x270>)
    3018:	4798      	blx	r3
    301a:	2800      	cmp	r0, #0
    301c:	d108      	bne.n	3030 <decode+0x1c0>
        vneg1271(&R->x[VWORDS_FIELD]);
    301e:	a81c      	add	r0, sp, #112	; 0x70
    3020:	4b30      	ldr	r3, [pc, #192]	; (30e4 <decode+0x274>)
    3022:	4798      	blx	r3
        if (ecc_point_validate(R) == false) {       // Final point validation
    3024:	a817      	add	r0, sp, #92	; 0x5c
    3026:	4b2e      	ldr	r3, [pc, #184]	; (30e0 <decode+0x270>)
    3028:	4798      	blx	r3
            return ECCRYPTO_ERROR;
    302a:	2300      	movs	r3, #0
        if (ecc_point_validate(R) == false) {       // Final point validation
    302c:	2800      	cmp	r0, #0
    302e:	d00b      	beq.n	3048 <decode+0x1d8>
        }
    }

    v2mod1271(R->x, R->x);
    3030:	a917      	add	r1, sp, #92	; 0x5c
    3032:	0008      	movs	r0, r1
    3034:	4b28      	ldr	r3, [pc, #160]	; (30d8 <decode+0x268>)
    3036:	4798      	blx	r3
    from_ext_to_std(R->x, P->x);
    3038:	0039      	movs	r1, r7
    303a:	a817      	add	r0, sp, #92	; 0x5c
    303c:	4c2a      	ldr	r4, [pc, #168]	; (30e8 <decode+0x278>)
    303e:	47a0      	blx	r4
    from_ext_to_std(R->y, P->y);
    3040:	9901      	ldr	r1, [sp, #4]
    3042:	a821      	add	r0, sp, #132	; 0x84
    3044:	47a0      	blx	r4

    return ECCRYPTO_SUCCESS;
    3046:	2301      	movs	r3, #1
}
    3048:	0018      	movs	r0, r3
    304a:	238a      	movs	r3, #138	; 0x8a
    304c:	009b      	lsls	r3, r3, #2
    304e:	449d      	add	sp, r3
    3050:	bc04      	pop	{r2}
    3052:	4690      	mov	r8, r2
    3054:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vsub1271(t1, t3, t);                       // t = t1-t3
    3056:	aa80      	add	r2, sp, #512	; 0x200
    3058:	a96c      	add	r1, sp, #432	; 0x1b0
    305a:	a876      	add	r0, sp, #472	; 0x1d8
    305c:	4b19      	ldr	r3, [pc, #100]	; (30c4 <decode+0x254>)
    305e:	4798      	blx	r3
    3060:	e785      	b.n	2f6e <decode+0xfe>
        memmove((unsigned char*)t0, (unsigned char*)&VP->x[0], 20);
    3062:	ab7b      	add	r3, sp, #492	; 0x1ec
    3064:	aa03      	add	r2, sp, #12
    3066:	0019      	movs	r1, r3
    3068:	ca31      	ldmia	r2!, {r0, r4, r5}
    306a:	c131      	stmia	r1!, {r0, r4, r5}
    306c:	ca11      	ldmia	r2!, {r0, r4}
    306e:	c111      	stmia	r1!, {r0, r4}
        memmove((unsigned char*)&VP->x[0], (unsigned char*)&VP->x[VWORDS_FIELD], 20);
    3070:	ac03      	add	r4, sp, #12
    3072:	aa08      	add	r2, sp, #32
    3074:	0021      	movs	r1, r4
    3076:	0010      	movs	r0, r2
    3078:	c870      	ldmia	r0!, {r4, r5, r6}
    307a:	c170      	stmia	r1!, {r4, r5, r6}
    307c:	c830      	ldmia	r0!, {r4, r5}
    307e:	c130      	stmia	r1!, {r4, r5}
        memmove((unsigned char*)&VP->x[VWORDS_FIELD], (unsigned char*)t0, 20);
    3080:	cb13      	ldmia	r3!, {r0, r1, r4}
    3082:	c213      	stmia	r2!, {r0, r1, r4}
    3084:	0011      	movs	r1, r2
    3086:	cb05      	ldmia	r3!, {r0, r2}
    3088:	c105      	stmia	r1!, {r0, r2}
    308a:	e7ab      	b.n	2fe4 <decode+0x174>
        sign_dec = VP->x[VWORDS_FIELD-1] >> 22;
    308c:	9b07      	ldr	r3, [sp, #28]
    308e:	0d9b      	lsrs	r3, r3, #22
    3090:	e7b4      	b.n	2ffc <decode+0x18c>
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	fffffdd8 	.word	0xfffffdd8
    3098:	0000671f 	.word	0x0000671f
    309c:	000066fb 	.word	0x000066fb
    30a0:	000039b9 	.word	0x000039b9
    30a4:	00004471 	.word	0x00004471
    30a8:	00007870 	.word	0x00007870
    30ac:	000043fd 	.word	0x000043fd
    30b0:	0000423d 	.word	0x0000423d
    30b4:	0000421d 	.word	0x0000421d
    30b8:	00003469 	.word	0x00003469
    30bc:	0000313f 	.word	0x0000313f
    30c0:	000031d5 	.word	0x000031d5
    30c4:	0000317b 	.word	0x0000317b
    30c8:	000036ad 	.word	0x000036ad
    30cc:	00002e05 	.word	0x00002e05
    30d0:	0000373d 	.word	0x0000373d
    30d4:	00003d0d 	.word	0x00003d0d
    30d8:	000043e1 	.word	0x000043e1
    30dc:	000042c5 	.word	0x000042c5
    30e0:	00004a29 	.word	0x00004a29
    30e4:	000031a9 	.word	0x000031a9
    30e8:	00003a41 	.word	0x00003a41

000030ec <digit_x_digit>:
#define mask_26        (((uint32_t)1 << 26) - 1)
#define mask_23        (((uint32_t)1 << 23) - 1)


void digit_x_digit(digit_t a, digit_t b, digit_t* c)
{ // Digit multiplication, digit * digit -> 2-digit result    
    30ec:	b570      	push	{r4, r5, r6, lr}
    register digit_t al, ah, bl, bh, temp;
    digit_t albl, albh, ahbl, ahbh, res1, res2, res3, carry;
    digit_t mask_low = (digit_t)(-1) >> (sizeof(digit_t)*4), mask_high = (digit_t)(-1) << (sizeof(digit_t)*4);

    al = a & mask_low;                        // Low part
    30ee:	0403      	lsls	r3, r0, #16
    30f0:	0c1b      	lsrs	r3, r3, #16
    ah = a >> (sizeof(digit_t) * 4);          // High part
    30f2:	0c00      	lsrs	r0, r0, #16
    bl = b & mask_low;
    30f4:	040c      	lsls	r4, r1, #16
    30f6:	0c24      	lsrs	r4, r4, #16
    bh = b >> (sizeof(digit_t) * 4);
    30f8:	0c09      	lsrs	r1, r1, #16

    albl = al*bl;
    30fa:	0025      	movs	r5, r4
    30fc:	435d      	muls	r5, r3
    albh = al*bh;
    30fe:	434b      	muls	r3, r1
    ahbl = ah*bl;
    3100:	4344      	muls	r4, r0
    ahbh = ah*bh;
    3102:	4341      	muls	r1, r0
    c[0] = albl & mask_low;                   // C00

    res1 = albl >> (sizeof(digit_t) * 4);
    3104:	0c28      	lsrs	r0, r5, #16
    res2 = ahbl & mask_low;
    3106:	0426      	lsls	r6, r4, #16
    3108:	0c36      	lsrs	r6, r6, #16
    res3 = albh & mask_low;  
    temp = res1 + res2 + res3;
    310a:	1980      	adds	r0, r0, r6
    res3 = albh & mask_low;  
    310c:	041e      	lsls	r6, r3, #16
    310e:	0c36      	lsrs	r6, r6, #16
    temp = res1 + res2 + res3;
    3110:	1980      	adds	r0, r0, r6
    carry = temp >> (sizeof(digit_t) * 4);
    3112:	0c06      	lsrs	r6, r0, #16
    c[0] = albl & mask_low;                   // C00
    3114:	042d      	lsls	r5, r5, #16
    3116:	0c2d      	lsrs	r5, r5, #16
    c[0] ^= temp << (sizeof(digit_t) * 4);    // C01   
    3118:	0400      	lsls	r0, r0, #16
    311a:	4045      	eors	r5, r0
    311c:	6015      	str	r5, [r2, #0]

    res1 = ahbl >> (sizeof(digit_t) * 4);
    311e:	0c24      	lsrs	r4, r4, #16
    res2 = albh >> (sizeof(digit_t) * 4);
    3120:	0c1b      	lsrs	r3, r3, #16
    res3 = ahbh & mask_low;
    temp = res1 + res2 + res3 + carry;
    3122:	18e3      	adds	r3, r4, r3
    res3 = ahbh & mask_low;
    3124:	040c      	lsls	r4, r1, #16
    3126:	0c24      	lsrs	r4, r4, #16
    temp = res1 + res2 + res3 + carry;
    3128:	191b      	adds	r3, r3, r4
    312a:	199b      	adds	r3, r3, r6
    c[1] = temp & mask_low;                   // C10 
    carry = temp & mask_high; 
    312c:	0c18      	lsrs	r0, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    312e:	0c09      	lsrs	r1, r1, #16
    3130:	1809      	adds	r1, r1, r0
    3132:	0409      	lsls	r1, r1, #16
    c[1] = temp & mask_low;                   // C10 
    3134:	041b      	lsls	r3, r3, #16
    3136:	0c1b      	lsrs	r3, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    3138:	404b      	eors	r3, r1
    313a:	6053      	str	r3, [r2, #4]
}
    313c:	bd70      	pop	{r4, r5, r6, pc}

0000313e <vadd1271>:
        c[i] = a[i];
}


void vadd1271(velm_t a, velm_t b, velm_t c) 
{ // Field addition over GF(2^127-1)
    313e:	b510      	push	{r4, lr}
  // Redundant representation: 23/26/26/26/26-bit
    
    c[0] = a[0] + b[0];
    3140:	6803      	ldr	r3, [r0, #0]
    3142:	001c      	movs	r4, r3
    3144:	680b      	ldr	r3, [r1, #0]
    3146:	469c      	mov	ip, r3
    3148:	4464      	add	r4, ip
    314a:	6014      	str	r4, [r2, #0]
    c[1] = a[1] + b[1];
    314c:	6843      	ldr	r3, [r0, #4]
    314e:	001c      	movs	r4, r3
    3150:	684b      	ldr	r3, [r1, #4]
    3152:	469c      	mov	ip, r3
    3154:	4464      	add	r4, ip
    3156:	6054      	str	r4, [r2, #4]
    c[2] = a[2] + b[2];
    3158:	6883      	ldr	r3, [r0, #8]
    315a:	001c      	movs	r4, r3
    315c:	688b      	ldr	r3, [r1, #8]
    315e:	469c      	mov	ip, r3
    3160:	4464      	add	r4, ip
    3162:	6094      	str	r4, [r2, #8]
    c[3] = a[3] + b[3];
    3164:	68c3      	ldr	r3, [r0, #12]
    3166:	001c      	movs	r4, r3
    3168:	68cb      	ldr	r3, [r1, #12]
    316a:	469c      	mov	ip, r3
    316c:	4464      	add	r4, ip
    316e:	60d4      	str	r4, [r2, #12]
    c[4] = a[4] + b[4];
    3170:	6903      	ldr	r3, [r0, #16]
    3172:	6909      	ldr	r1, [r1, #16]
    3174:	185b      	adds	r3, r3, r1
    3176:	6113      	str	r3, [r2, #16]
}
    3178:	bd10      	pop	{r4, pc}

0000317a <vsub1271>:


void vsub1271(velm_t a, velm_t b, velm_t c) 
{ // Field subtraction over GF(2^127-1)
    317a:	b510      	push	{r4, lr}
  // Redundant representation: 23/26/26/26/26-bit
    
    c[0] = a[0] - b[0];
    317c:	6803      	ldr	r3, [r0, #0]
    317e:	680c      	ldr	r4, [r1, #0]
    3180:	1b1b      	subs	r3, r3, r4
    3182:	6013      	str	r3, [r2, #0]
    c[1] = a[1] - b[1];
    3184:	6843      	ldr	r3, [r0, #4]
    3186:	684c      	ldr	r4, [r1, #4]
    3188:	1b1b      	subs	r3, r3, r4
    318a:	6053      	str	r3, [r2, #4]
    c[2] = a[2] - b[2];
    318c:	6883      	ldr	r3, [r0, #8]
    318e:	688c      	ldr	r4, [r1, #8]
    3190:	1b1b      	subs	r3, r3, r4
    3192:	6093      	str	r3, [r2, #8]
    c[3] = a[3] - b[3];
    3194:	68c3      	ldr	r3, [r0, #12]
    3196:	68cc      	ldr	r4, [r1, #12]
    3198:	1b1b      	subs	r3, r3, r4
    319a:	60d3      	str	r3, [r2, #12]
    c[4] = a[4] - b[4];
    319c:	6903      	ldr	r3, [r0, #16]
    319e:	6909      	ldr	r1, [r1, #16]
    31a0:	1a5b      	subs	r3, r3, r1
    31a2:	6113      	str	r3, [r2, #16]
}
    31a4:	bd10      	pop	{r4, pc}
	...

000031a8 <vneg1271>:

void vneg1271(velm_t a) 
{ // Field negation over GF(2^127-1)
  // Redundant representation: 23/26/26/26/26-bit
    
    a[0] = mask_26 - a[0];
    31a8:	4b08      	ldr	r3, [pc, #32]	; (31cc <vneg1271+0x24>)
    31aa:	6802      	ldr	r2, [r0, #0]
    31ac:	1a9a      	subs	r2, r3, r2
    31ae:	6002      	str	r2, [r0, #0]
    a[1] = mask_26 - a[1];
    31b0:	6842      	ldr	r2, [r0, #4]
    31b2:	1a9a      	subs	r2, r3, r2
    31b4:	6042      	str	r2, [r0, #4]
    a[2] = mask_26 - a[2];
    31b6:	6882      	ldr	r2, [r0, #8]
    31b8:	1a9a      	subs	r2, r3, r2
    31ba:	6082      	str	r2, [r0, #8]
    a[3] = mask_26 - a[3];
    31bc:	68c2      	ldr	r2, [r0, #12]
    31be:	1a9b      	subs	r3, r3, r2
    31c0:	60c3      	str	r3, [r0, #12]
    a[4] = mask_23 - a[4];
    31c2:	4b03      	ldr	r3, [pc, #12]	; (31d0 <vneg1271+0x28>)
    31c4:	6902      	ldr	r2, [r0, #16]
    31c6:	1a9b      	subs	r3, r3, r2
    31c8:	6103      	str	r3, [r0, #16]
}
    31ca:	4770      	bx	lr
    31cc:	03ffffff 	.word	0x03ffffff
    31d0:	007fffff 	.word	0x007fffff

000031d4 <vmul1271>:


void vmul1271(velm_t a, velm_t b, velm_t c)
{ // Field multiplication, c = a*b mod p
    31d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31d6:	46de      	mov	lr, fp
    31d8:	4657      	mov	r7, sl
    31da:	464e      	mov	r6, r9
    31dc:	4645      	mov	r5, r8
    31de:	b5e0      	push	{r5, r6, r7, lr}
    31e0:	b09d      	sub	sp, #116	; 0x74
    31e2:	4691      	mov	r9, r2
   int64_t t1, t2, t3, t4;

   a0 = a[0]; a1 = a[1]; a2 = a[2]; a3 = a[3]; a4 = a[4]; 
   b0 = b[0]; b1 = b[1]; b2 = b[2]; b3 = b[3]; b4 = b[4];

   t1 = (int64_t)a1 << 3;
    31e4:	6844      	ldr	r4, [r0, #4]
    31e6:	17e3      	asrs	r3, r4, #31
    31e8:	9301      	str	r3, [sp, #4]
   t2 = (int64_t)a2 << 3;
    31ea:	6882      	ldr	r2, [r0, #8]
    31ec:	4690      	mov	r8, r2
    31ee:	17d2      	asrs	r2, r2, #31
    31f0:	9213      	str	r2, [sp, #76]	; 0x4c
    31f2:	4645      	mov	r5, r8
    31f4:	176d      	asrs	r5, r5, #29
    31f6:	951a      	str	r5, [sp, #104]	; 0x68
    31f8:	4646      	mov	r6, r8
    31fa:	00f6      	lsls	r6, r6, #3
    31fc:	9618      	str	r6, [sp, #96]	; 0x60
   t3 = (int64_t)a3 << 3;
    31fe:	68c7      	ldr	r7, [r0, #12]
    3200:	46ba      	mov	sl, r7
    3202:	17ff      	asrs	r7, r7, #31
    3204:	9717      	str	r7, [sp, #92]	; 0x5c
    3206:	4653      	mov	r3, sl
    3208:	175d      	asrs	r5, r3, #29
    320a:	9516      	str	r5, [sp, #88]	; 0x58
    320c:	00de      	lsls	r6, r3, #3
    320e:	9614      	str	r6, [sp, #80]	; 0x50
   t4 = (int64_t)a4 << 3;
    3210:	6903      	ldr	r3, [r0, #16]
    3212:	469b      	mov	fp, r3
    3214:	17db      	asrs	r3, r3, #31
    3216:	931b      	str	r3, [sp, #108]	; 0x6c
    3218:	465a      	mov	r2, fp
    321a:	1752      	asrs	r2, r2, #29
    321c:	9212      	str	r2, [sp, #72]	; 0x48
    321e:	465f      	mov	r7, fp
    3220:	00fd      	lsls	r5, r7, #3
    3222:	950e      	str	r5, [sp, #56]	; 0x38

   c0 = (int64_t)a0*b0 + (int64_t)t1*b4 + (int64_t)t4*b1 + (int64_t)t2*b3 + (int64_t)t3*b2;
    3224:	6803      	ldr	r3, [r0, #0]
    3226:	9302      	str	r3, [sp, #8]
    3228:	17da      	asrs	r2, r3, #31
    322a:	9203      	str	r2, [sp, #12]
    322c:	680a      	ldr	r2, [r1, #0]
    322e:	9204      	str	r2, [sp, #16]
    3230:	17d0      	asrs	r0, r2, #31
    3232:	9005      	str	r0, [sp, #20]
    3234:	6908      	ldr	r0, [r1, #16]
    3236:	0006      	movs	r6, r0
    3238:	17c5      	asrs	r5, r0, #31
    323a:	9506      	str	r5, [sp, #24]
    323c:	6848      	ldr	r0, [r1, #4]
    323e:	9007      	str	r0, [sp, #28]
    3240:	17c7      	asrs	r7, r0, #31
    3242:	9708      	str	r7, [sp, #32]
    3244:	68cd      	ldr	r5, [r1, #12]
    3246:	9509      	str	r5, [sp, #36]	; 0x24
    3248:	17ef      	asrs	r7, r5, #31
    324a:	970a      	str	r7, [sp, #40]	; 0x28
    324c:	688f      	ldr	r7, [r1, #8]
    324e:	970b      	str	r7, [sp, #44]	; 0x2c
    3250:	17f9      	asrs	r1, r7, #31
    3252:	910c      	str	r1, [sp, #48]	; 0x30
   t1 = (int64_t)a1 << 3;
    3254:	0f63      	lsrs	r3, r4, #29
    3256:	9901      	ldr	r1, [sp, #4]
    3258:	00c9      	lsls	r1, r1, #3
    325a:	4319      	orrs	r1, r3
    325c:	00e0      	lsls	r0, r4, #3
   c0 = (int64_t)a0*b0 + (int64_t)t1*b4 + (int64_t)t4*b1 + (int64_t)t2*b3 + (int64_t)t3*b2;
    325e:	4d81      	ldr	r5, [pc, #516]	; (3464 <vmul1271+0x290>)
    3260:	960d      	str	r6, [sp, #52]	; 0x34
    3262:	0032      	movs	r2, r6
    3264:	9b06      	ldr	r3, [sp, #24]
    3266:	47a8      	blx	r5
    3268:	0006      	movs	r6, r0
    326a:	000f      	movs	r7, r1
    326c:	9a04      	ldr	r2, [sp, #16]
    326e:	9b05      	ldr	r3, [sp, #20]
    3270:	9802      	ldr	r0, [sp, #8]
    3272:	9903      	ldr	r1, [sp, #12]
    3274:	47a8      	blx	r5
    3276:	1836      	adds	r6, r6, r0
    3278:	414f      	adcs	r7, r1
    327a:	9a07      	ldr	r2, [sp, #28]
    327c:	9b08      	ldr	r3, [sp, #32]
    327e:	980e      	ldr	r0, [sp, #56]	; 0x38
    3280:	9912      	ldr	r1, [sp, #72]	; 0x48
    3282:	47a8      	blx	r5
    3284:	1836      	adds	r6, r6, r0
    3286:	414f      	adcs	r7, r1
    3288:	9a09      	ldr	r2, [sp, #36]	; 0x24
    328a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    328c:	9818      	ldr	r0, [sp, #96]	; 0x60
    328e:	991a      	ldr	r1, [sp, #104]	; 0x68
    3290:	47a8      	blx	r5
    3292:	1836      	adds	r6, r6, r0
    3294:	414f      	adcs	r7, r1
    3296:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    329a:	9814      	ldr	r0, [sp, #80]	; 0x50
    329c:	9916      	ldr	r1, [sp, #88]	; 0x58
    329e:	47a8      	blx	r5
    32a0:	1836      	adds	r6, r6, r0
    32a2:	414f      	adcs	r7, r1
    32a4:	9610      	str	r6, [sp, #64]	; 0x40
    32a6:	9711      	str	r7, [sp, #68]	; 0x44
   c1 = (int64_t)a0*b1 + (int64_t)a1*b0 + (int64_t)t2*b4 + (int64_t)t4*b2 + (int64_t)t3*b3;
    32a8:	9a07      	ldr	r2, [sp, #28]
    32aa:	9b08      	ldr	r3, [sp, #32]
    32ac:	9802      	ldr	r0, [sp, #8]
    32ae:	9903      	ldr	r1, [sp, #12]
    32b0:	47a8      	blx	r5
    32b2:	0006      	movs	r6, r0
    32b4:	000f      	movs	r7, r1
    32b6:	9a04      	ldr	r2, [sp, #16]
    32b8:	9b05      	ldr	r3, [sp, #20]
    32ba:	0020      	movs	r0, r4
    32bc:	9901      	ldr	r1, [sp, #4]
    32be:	47a8      	blx	r5
    32c0:	1836      	adds	r6, r6, r0
    32c2:	414f      	adcs	r7, r1
    32c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    32c6:	9b06      	ldr	r3, [sp, #24]
    32c8:	9818      	ldr	r0, [sp, #96]	; 0x60
    32ca:	991a      	ldr	r1, [sp, #104]	; 0x68
    32cc:	47a8      	blx	r5
    32ce:	1836      	adds	r6, r6, r0
    32d0:	414f      	adcs	r7, r1
    32d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    32d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    32d6:	980e      	ldr	r0, [sp, #56]	; 0x38
    32d8:	9912      	ldr	r1, [sp, #72]	; 0x48
    32da:	47a8      	blx	r5
    32dc:	1836      	adds	r6, r6, r0
    32de:	414f      	adcs	r7, r1
    32e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    32e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    32e4:	9814      	ldr	r0, [sp, #80]	; 0x50
    32e6:	9916      	ldr	r1, [sp, #88]	; 0x58
    32e8:	47a8      	blx	r5
    32ea:	1836      	adds	r6, r6, r0
    32ec:	414f      	adcs	r7, r1
    32ee:	9618      	str	r6, [sp, #96]	; 0x60
    32f0:	9719      	str	r7, [sp, #100]	; 0x64
   c2 = (int64_t)a0*b2 + (int64_t)a2*b0 + (int64_t)a1*b1 + (int64_t)t3*b4 + (int64_t)t4*b3;
    32f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    32f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    32f6:	9802      	ldr	r0, [sp, #8]
    32f8:	9903      	ldr	r1, [sp, #12]
    32fa:	47a8      	blx	r5
    32fc:	0006      	movs	r6, r0
    32fe:	000f      	movs	r7, r1
    3300:	9a04      	ldr	r2, [sp, #16]
    3302:	9b05      	ldr	r3, [sp, #20]
    3304:	4640      	mov	r0, r8
    3306:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3308:	47a8      	blx	r5
    330a:	1836      	adds	r6, r6, r0
    330c:	414f      	adcs	r7, r1
    330e:	9a07      	ldr	r2, [sp, #28]
    3310:	9b08      	ldr	r3, [sp, #32]
    3312:	0020      	movs	r0, r4
    3314:	9901      	ldr	r1, [sp, #4]
    3316:	47a8      	blx	r5
    3318:	1836      	adds	r6, r6, r0
    331a:	414f      	adcs	r7, r1
    331c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    331e:	9b06      	ldr	r3, [sp, #24]
    3320:	9814      	ldr	r0, [sp, #80]	; 0x50
    3322:	9916      	ldr	r1, [sp, #88]	; 0x58
    3324:	47a8      	blx	r5
    3326:	1836      	adds	r6, r6, r0
    3328:	414f      	adcs	r7, r1
    332a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    332c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    332e:	980e      	ldr	r0, [sp, #56]	; 0x38
    3330:	9912      	ldr	r1, [sp, #72]	; 0x48
    3332:	47a8      	blx	r5
    3334:	0032      	movs	r2, r6
    3336:	003b      	movs	r3, r7
    3338:	1812      	adds	r2, r2, r0
    333a:	414b      	adcs	r3, r1
    333c:	9214      	str	r2, [sp, #80]	; 0x50
    333e:	9315      	str	r3, [sp, #84]	; 0x54
   c3 = (int64_t)a0*b3 + (int64_t)a3*b0 + (int64_t)a1*b2 + (int64_t)a2*b1 + (int64_t)t4*b4;
    3340:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3344:	9802      	ldr	r0, [sp, #8]
    3346:	9903      	ldr	r1, [sp, #12]
    3348:	47a8      	blx	r5
    334a:	0006      	movs	r6, r0
    334c:	000f      	movs	r7, r1
    334e:	9a04      	ldr	r2, [sp, #16]
    3350:	9b05      	ldr	r3, [sp, #20]
    3352:	4650      	mov	r0, sl
    3354:	9917      	ldr	r1, [sp, #92]	; 0x5c
    3356:	47a8      	blx	r5
    3358:	1836      	adds	r6, r6, r0
    335a:	414f      	adcs	r7, r1
    335c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    335e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3360:	0020      	movs	r0, r4
    3362:	9901      	ldr	r1, [sp, #4]
    3364:	47a8      	blx	r5
    3366:	1836      	adds	r6, r6, r0
    3368:	414f      	adcs	r7, r1
    336a:	9a07      	ldr	r2, [sp, #28]
    336c:	9b08      	ldr	r3, [sp, #32]
    336e:	4640      	mov	r0, r8
    3370:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3372:	47a8      	blx	r5
    3374:	1836      	adds	r6, r6, r0
    3376:	414f      	adcs	r7, r1
    3378:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    337a:	9b06      	ldr	r3, [sp, #24]
    337c:	980e      	ldr	r0, [sp, #56]	; 0x38
    337e:	9912      	ldr	r1, [sp, #72]	; 0x48
    3380:	47a8      	blx	r5
    3382:	1836      	adds	r6, r6, r0
    3384:	414f      	adcs	r7, r1
    3386:	960e      	str	r6, [sp, #56]	; 0x38
    3388:	970f      	str	r7, [sp, #60]	; 0x3c
   c4 = (int64_t)a0*b4 + (int64_t)a4*b0 + (int64_t)a1*b3 + (int64_t)a3*b1 + (int64_t)a2*b2;
    338a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    338c:	9b06      	ldr	r3, [sp, #24]
    338e:	9802      	ldr	r0, [sp, #8]
    3390:	9903      	ldr	r1, [sp, #12]
    3392:	47a8      	blx	r5
    3394:	0006      	movs	r6, r0
    3396:	000f      	movs	r7, r1
    3398:	9a04      	ldr	r2, [sp, #16]
    339a:	9b05      	ldr	r3, [sp, #20]
    339c:	4658      	mov	r0, fp
    339e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    33a0:	47a8      	blx	r5
    33a2:	1836      	adds	r6, r6, r0
    33a4:	414f      	adcs	r7, r1
    33a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    33a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    33aa:	0020      	movs	r0, r4
    33ac:	9901      	ldr	r1, [sp, #4]
    33ae:	47a8      	blx	r5
    33b0:	1836      	adds	r6, r6, r0
    33b2:	414f      	adcs	r7, r1
    33b4:	9a07      	ldr	r2, [sp, #28]
    33b6:	9b08      	ldr	r3, [sp, #32]
    33b8:	4650      	mov	r0, sl
    33ba:	9917      	ldr	r1, [sp, #92]	; 0x5c
    33bc:	47a8      	blx	r5
    33be:	1836      	adds	r6, r6, r0
    33c0:	414f      	adcs	r7, r1
    33c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    33c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    33c6:	4640      	mov	r0, r8
    33c8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    33ca:	47a8      	blx	r5
    33cc:	1836      	adds	r6, r6, r0
    33ce:	414f      	adcs	r7, r1
#endif
   
                    r0   = c0 & mask_26; 
    c1 += c0 >> 26; r1   = c1 & mask_26;
    33d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
    33d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
    33d4:	01ab      	lsls	r3, r5, #6
    33d6:	0ea0      	lsrs	r0, r4, #26
    33d8:	4318      	orrs	r0, r3
    33da:	16a9      	asrs	r1, r5, #26
    33dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    33de:	9c19      	ldr	r4, [sp, #100]	; 0x64
    33e0:	18c0      	adds	r0, r0, r3
    33e2:	4161      	adcs	r1, r4
    c2 += c1 >> 26; c[2] = c2 & mask_26; 
    33e4:	018b      	lsls	r3, r1, #6
    33e6:	0e84      	lsrs	r4, r0, #26
    33e8:	431c      	orrs	r4, r3
    33ea:	168d      	asrs	r5, r1, #26
    33ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
    33ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
    33f0:	18a4      	adds	r4, r4, r2
    33f2:	415d      	adcs	r5, r3
    33f4:	01a3      	lsls	r3, r4, #6
    33f6:	099b      	lsrs	r3, r3, #6
    33f8:	464a      	mov	r2, r9
    33fa:	6093      	str	r3, [r2, #8]
    c3 += c2 >> 26; c[3] = c3 & mask_26; 
    33fc:	01a9      	lsls	r1, r5, #6
    33fe:	0ea2      	lsrs	r2, r4, #26
    3400:	430a      	orrs	r2, r1
    3402:	16ab      	asrs	r3, r5, #26
    3404:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    3406:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    3408:	1912      	adds	r2, r2, r4
    340a:	416b      	adcs	r3, r5
    340c:	0191      	lsls	r1, r2, #6
    340e:	0989      	lsrs	r1, r1, #6
    3410:	464d      	mov	r5, r9
    3412:	60e9      	str	r1, [r5, #12]
    c4 += c3 >> 26; c[4] = c4 & mask_23; 
    3414:	0199      	lsls	r1, r3, #6
    3416:	0e94      	lsrs	r4, r2, #26
    3418:	430c      	orrs	r4, r1
    341a:	169d      	asrs	r5, r3, #26
    341c:	19a4      	adds	r4, r4, r6
    341e:	417d      	adcs	r5, r7
    3420:	0263      	lsls	r3, r4, #9
    3422:	0a5b      	lsrs	r3, r3, #9
    3424:	464a      	mov	r2, r9
    3426:	6113      	str	r3, [r2, #16]
                    r0   = c0 & mask_26; 
    3428:	9b10      	ldr	r3, [sp, #64]	; 0x40
    342a:	019b      	lsls	r3, r3, #6
    342c:	099b      	lsrs	r3, r3, #6
//    c4 += c3 >> 26; c[4] = c4 & mask_26; 
    
    c0   = r0 + (c4 >> 23);
    342e:	001e      	movs	r6, r3
    3430:	2700      	movs	r7, #0
    3432:	0269      	lsls	r1, r5, #9
    3434:	0de2      	lsrs	r2, r4, #23
    3436:	430a      	orrs	r2, r1
    3438:	15eb      	asrs	r3, r5, #23
    343a:	1992      	adds	r2, r2, r6
    343c:	417b      	adcs	r3, r7
//    c0   = r0 + ((c4 >> 26) << 3);                  
    c[0] = (int32_t)c0 & mask_26;
    343e:	0191      	lsls	r1, r2, #6
    3440:	0989      	lsrs	r1, r1, #6
    3442:	464c      	mov	r4, r9
    3444:	6021      	str	r1, [r4, #0]
    c1 += c0 >> 26; r1   = c1 & mask_26;
    3446:	0180      	lsls	r0, r0, #6
    3448:	0980      	lsrs	r0, r0, #6
    c[1] = r1 + (int32_t)(c0 >> 26);
    344a:	019b      	lsls	r3, r3, #6
    344c:	0e92      	lsrs	r2, r2, #26
    344e:	431a      	orrs	r2, r3
    3450:	1880      	adds	r0, r0, r2
    3452:	6060      	str	r0, [r4, #4]
}
    3454:	b01d      	add	sp, #116	; 0x74
    3456:	bc3c      	pop	{r2, r3, r4, r5}
    3458:	4690      	mov	r8, r2
    345a:	4699      	mov	r9, r3
    345c:	46a2      	mov	sl, r4
    345e:	46ab      	mov	fp, r5
    3460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	00006639 	.word	0x00006639

00003468 <vsqr1271>:


void vsqr1271(velm_t a, velm_t c)
{ // Field squaring, c = a*b mod p
    3468:	b5f0      	push	{r4, r5, r6, r7, lr}
    346a:	46de      	mov	lr, fp
    346c:	4657      	mov	r7, sl
    346e:	464e      	mov	r6, r9
    3470:	4645      	mov	r5, r8
    3472:	b5e0      	push	{r5, r6, r7, lr}
    3474:	b091      	sub	sp, #68	; 0x44
    3476:	4689      	mov	r9, r1
#else
   int64_t t0, t1, t2, t3, t4;

   a0 = a[0]; a1 = a[1]; a2 = a[2]; a3 = a[3]; a4 = a[4];

   t0 = (int64_t)a0 << 1;
    3478:	6801      	ldr	r1, [r0, #0]
    347a:	17cb      	asrs	r3, r1, #31
    347c:	004a      	lsls	r2, r1, #1
    347e:	9205      	str	r2, [sp, #20]
   t1 = (int64_t)a1 << 1;
    3480:	6844      	ldr	r4, [r0, #4]
    3482:	17e2      	asrs	r2, r4, #31
    3484:	9201      	str	r2, [sp, #4]
    3486:	9408      	str	r4, [sp, #32]
    3488:	0065      	lsls	r5, r4, #1
    348a:	950d      	str	r5, [sp, #52]	; 0x34
   t2 = (int64_t)a2 << 4;
    348c:	6886      	ldr	r6, [r0, #8]
    348e:	46b3      	mov	fp, r6
    3490:	17f4      	asrs	r4, r6, #31
    3492:	9403      	str	r4, [sp, #12]
   t3 = (int64_t)a3 << 3;
    3494:	68c6      	ldr	r6, [r0, #12]
    3496:	46b2      	mov	sl, r6
    3498:	17f5      	asrs	r5, r6, #31
    349a:	9502      	str	r5, [sp, #8]
   t4 = (int64_t)a4 << 4;
    349c:	6904      	ldr	r4, [r0, #16]
    349e:	17e6      	asrs	r6, r4, #31
    34a0:	46b0      	mov	r8, r6
    34a2:	1726      	asrs	r6, r4, #28
    34a4:	960c      	str	r6, [sp, #48]	; 0x30
    34a6:	0120      	lsls	r0, r4, #4
    34a8:	900a      	str	r0, [sp, #40]	; 0x28

   c0 = (int64_t)a0*a0 + (int64_t)t4*a1 + (int64_t)t2*a3;
    34aa:	4d65      	ldr	r5, [pc, #404]	; (3640 <vsqr1271+0x1d8>)
    34ac:	000a      	movs	r2, r1
    34ae:	0008      	movs	r0, r1
    34b0:	9304      	str	r3, [sp, #16]
    34b2:	0019      	movs	r1, r3
    34b4:	47a8      	blx	r5
    34b6:	0006      	movs	r6, r0
    34b8:	000f      	movs	r7, r1
    34ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    34bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    34be:	9808      	ldr	r0, [sp, #32]
    34c0:	9901      	ldr	r1, [sp, #4]
    34c2:	47a8      	blx	r5
    34c4:	1836      	adds	r6, r6, r0
    34c6:	414f      	adcs	r7, r1
   t2 = (int64_t)a2 << 4;
    34c8:	465b      	mov	r3, fp
    34ca:	0f1b      	lsrs	r3, r3, #28
    34cc:	9803      	ldr	r0, [sp, #12]
    34ce:	0101      	lsls	r1, r0, #4
    34d0:	4319      	orrs	r1, r3
    34d2:	465b      	mov	r3, fp
    34d4:	0118      	lsls	r0, r3, #4
   c0 = (int64_t)a0*a0 + (int64_t)t4*a1 + (int64_t)t2*a3;
    34d6:	4652      	mov	r2, sl
    34d8:	9b02      	ldr	r3, [sp, #8]
    34da:	47a8      	blx	r5
    34dc:	1836      	adds	r6, r6, r0
    34de:	414f      	adcs	r7, r1
    34e0:	9606      	str	r6, [sp, #24]
    34e2:	9707      	str	r7, [sp, #28]
   t3 = (int64_t)a3 << 3;
    34e4:	4653      	mov	r3, sl
    34e6:	0f5b      	lsrs	r3, r3, #29
    34e8:	9f02      	ldr	r7, [sp, #8]
    34ea:	00f9      	lsls	r1, r7, #3
    34ec:	4319      	orrs	r1, r3
    34ee:	4653      	mov	r3, sl
    34f0:	00d8      	lsls	r0, r3, #3
   c1 = (int64_t)t0*a1 + (int64_t)t3*a3 + (int64_t)t4*a2;
    34f2:	4652      	mov	r2, sl
    34f4:	003b      	movs	r3, r7
    34f6:	47a8      	blx	r5
    34f8:	0006      	movs	r6, r0
    34fa:	000f      	movs	r7, r1
    34fc:	9a08      	ldr	r2, [sp, #32]
    34fe:	9b01      	ldr	r3, [sp, #4]
    3500:	9805      	ldr	r0, [sp, #20]
    3502:	9904      	ldr	r1, [sp, #16]
    3504:	47a8      	blx	r5
    3506:	1836      	adds	r6, r6, r0
    3508:	414f      	adcs	r7, r1
    350a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    350c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    350e:	4658      	mov	r0, fp
    3510:	9903      	ldr	r1, [sp, #12]
    3512:	47a8      	blx	r5
    3514:	1836      	adds	r6, r6, r0
    3516:	414f      	adcs	r7, r1
    3518:	960e      	str	r6, [sp, #56]	; 0x38
    351a:	970f      	str	r7, [sp, #60]	; 0x3c
   c2 = (int64_t)t0*a2 + (int64_t)a1*a1 + (int64_t)t4*a3;
    351c:	465a      	mov	r2, fp
    351e:	9b03      	ldr	r3, [sp, #12]
    3520:	9805      	ldr	r0, [sp, #20]
    3522:	9904      	ldr	r1, [sp, #16]
    3524:	47a8      	blx	r5
    3526:	0006      	movs	r6, r0
    3528:	000f      	movs	r7, r1
    352a:	9808      	ldr	r0, [sp, #32]
    352c:	0002      	movs	r2, r0
    352e:	9901      	ldr	r1, [sp, #4]
    3530:	000b      	movs	r3, r1
    3532:	47a8      	blx	r5
    3534:	1836      	adds	r6, r6, r0
    3536:	414f      	adcs	r7, r1
    3538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    353a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    353c:	4650      	mov	r0, sl
    353e:	9902      	ldr	r1, [sp, #8]
    3540:	47a8      	blx	r5
    3542:	0032      	movs	r2, r6
    3544:	003b      	movs	r3, r7
    3546:	1812      	adds	r2, r2, r0
    3548:	414b      	adcs	r3, r1
    354a:	9208      	str	r2, [sp, #32]
    354c:	9309      	str	r3, [sp, #36]	; 0x24
   c3 = (int64_t)t0*a3 + (int64_t)t1*a2 + ((int64_t)a4 << 3)*a4;
    354e:	4652      	mov	r2, sl
    3550:	9b02      	ldr	r3, [sp, #8]
    3552:	9805      	ldr	r0, [sp, #20]
    3554:	9904      	ldr	r1, [sp, #16]
    3556:	47a8      	blx	r5
    3558:	0006      	movs	r6, r0
    355a:	000f      	movs	r7, r1
    355c:	465a      	mov	r2, fp
    355e:	9b03      	ldr	r3, [sp, #12]
    3560:	980d      	ldr	r0, [sp, #52]	; 0x34
    3562:	9901      	ldr	r1, [sp, #4]
    3564:	47a8      	blx	r5
    3566:	1836      	adds	r6, r6, r0
    3568:	414f      	adcs	r7, r1
    356a:	0f63      	lsrs	r3, r4, #29
    356c:	4640      	mov	r0, r8
    356e:	00c1      	lsls	r1, r0, #3
    3570:	4319      	orrs	r1, r3
    3572:	00e0      	lsls	r0, r4, #3
    3574:	0022      	movs	r2, r4
    3576:	4643      	mov	r3, r8
    3578:	47a8      	blx	r5
    357a:	1836      	adds	r6, r6, r0
    357c:	414f      	adcs	r7, r1
    357e:	960a      	str	r6, [sp, #40]	; 0x28
    3580:	970b      	str	r7, [sp, #44]	; 0x2c
   c4 = (int64_t)t0*a4 + (int64_t)t1*a3 + (int64_t)a2*a2;
    3582:	0022      	movs	r2, r4
    3584:	4643      	mov	r3, r8
    3586:	9805      	ldr	r0, [sp, #20]
    3588:	9904      	ldr	r1, [sp, #16]
    358a:	47a8      	blx	r5
    358c:	0006      	movs	r6, r0
    358e:	000f      	movs	r7, r1
    3590:	4652      	mov	r2, sl
    3592:	9b02      	ldr	r3, [sp, #8]
    3594:	980d      	ldr	r0, [sp, #52]	; 0x34
    3596:	9901      	ldr	r1, [sp, #4]
    3598:	47a8      	blx	r5
    359a:	1836      	adds	r6, r6, r0
    359c:	414f      	adcs	r7, r1
    359e:	465a      	mov	r2, fp
    35a0:	9903      	ldr	r1, [sp, #12]
    35a2:	000b      	movs	r3, r1
    35a4:	4658      	mov	r0, fp
    35a6:	47a8      	blx	r5
    35a8:	1836      	adds	r6, r6, r0
    35aa:	414f      	adcs	r7, r1
#endif
   
                    r0   = c0 & mask_26; 
    c1 += c0 >> 26; r1   = c1 & mask_26;
    35ac:	9c06      	ldr	r4, [sp, #24]
    35ae:	9d07      	ldr	r5, [sp, #28]
    35b0:	01ab      	lsls	r3, r5, #6
    35b2:	0ea0      	lsrs	r0, r4, #26
    35b4:	4318      	orrs	r0, r3
    35b6:	16a9      	asrs	r1, r5, #26
    35b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    35ba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    35bc:	18c0      	adds	r0, r0, r3
    35be:	4161      	adcs	r1, r4
    c2 += c1 >> 26; c[2] = c2 & mask_26; 
    35c0:	018b      	lsls	r3, r1, #6
    35c2:	0e84      	lsrs	r4, r0, #26
    35c4:	431c      	orrs	r4, r3
    35c6:	168d      	asrs	r5, r1, #26
    35c8:	9a08      	ldr	r2, [sp, #32]
    35ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35cc:	18a4      	adds	r4, r4, r2
    35ce:	415d      	adcs	r5, r3
    35d0:	01a3      	lsls	r3, r4, #6
    35d2:	099b      	lsrs	r3, r3, #6
    35d4:	464a      	mov	r2, r9
    35d6:	6093      	str	r3, [r2, #8]
    c3 += c2 >> 26; c[3] = c3 & mask_26; 
    35d8:	01a9      	lsls	r1, r5, #6
    35da:	0ea2      	lsrs	r2, r4, #26
    35dc:	430a      	orrs	r2, r1
    35de:	16ab      	asrs	r3, r5, #26
    35e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    35e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    35e4:	1912      	adds	r2, r2, r4
    35e6:	416b      	adcs	r3, r5
    35e8:	0191      	lsls	r1, r2, #6
    35ea:	0989      	lsrs	r1, r1, #6
    35ec:	464d      	mov	r5, r9
    35ee:	60e9      	str	r1, [r5, #12]
    c4 += c3 >> 26; c[4] = c4 & mask_23; 
    35f0:	0199      	lsls	r1, r3, #6
    35f2:	0e94      	lsrs	r4, r2, #26
    35f4:	430c      	orrs	r4, r1
    35f6:	169d      	asrs	r5, r3, #26
    35f8:	19a4      	adds	r4, r4, r6
    35fa:	417d      	adcs	r5, r7
    35fc:	0263      	lsls	r3, r4, #9
    35fe:	0a5b      	lsrs	r3, r3, #9
    3600:	464a      	mov	r2, r9
    3602:	6113      	str	r3, [r2, #16]
                    r0   = c0 & mask_26; 
    3604:	9b06      	ldr	r3, [sp, #24]
    3606:	019b      	lsls	r3, r3, #6
    3608:	099b      	lsrs	r3, r3, #6
//    c4 += c3 >> 26; c[4] = c4 & mask_26; 
    
    c0   = r0 + (c4 >> 23);
    360a:	001e      	movs	r6, r3
    360c:	2700      	movs	r7, #0
    360e:	0269      	lsls	r1, r5, #9
    3610:	0de2      	lsrs	r2, r4, #23
    3612:	430a      	orrs	r2, r1
    3614:	15eb      	asrs	r3, r5, #23
    3616:	1992      	adds	r2, r2, r6
    3618:	417b      	adcs	r3, r7
//    c0   = r0 + ((c4 >> 26) << 3);                  
    c[0] = (int32_t)c0 & mask_26;
    361a:	0191      	lsls	r1, r2, #6
    361c:	0989      	lsrs	r1, r1, #6
    361e:	464c      	mov	r4, r9
    3620:	6021      	str	r1, [r4, #0]
    c1 += c0 >> 26; r1   = c1 & mask_26;
    3622:	0180      	lsls	r0, r0, #6
    3624:	0980      	lsrs	r0, r0, #6
    c[1] = r1 + (int32_t)(c0 >> 26);
    3626:	019b      	lsls	r3, r3, #6
    3628:	0e92      	lsrs	r2, r2, #26
    362a:	431a      	orrs	r2, r3
    362c:	1880      	adds	r0, r0, r2
    362e:	6060      	str	r0, [r4, #4]
}
    3630:	b011      	add	sp, #68	; 0x44
    3632:	bc3c      	pop	{r2, r3, r4, r5}
    3634:	4690      	mov	r8, r2
    3636:	4699      	mov	r9, r3
    3638:	46a2      	mov	sl, r4
    363a:	46ab      	mov	fp, r5
    363c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    363e:	46c0      	nop			; (mov r8, r8)
    3640:	00006639 	.word	0x00006639

00003644 <vmod1271_incomplete>:


void vmod1271_incomplete(velm_t a, velm_t c)
{ // Reduce field element modulo 2^127-1
    3644:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Redundant representation: 23/26/26/26/26-bit
  // Output is in the range [0, 2^127-1]
    int32_t t0, t1, t2, t3, t4;
    uint32_t rem;

    t0 = a[0]; t1 = a[1]; t2 = a[2]; t3 = a[3]; t4 = a[4];   
    3646:	6805      	ldr	r5, [r0, #0]
    3648:	6847      	ldr	r7, [r0, #4]
    364a:	6882      	ldr	r2, [r0, #8]
    364c:	68c6      	ldr	r6, [r0, #12]
    364e:	6903      	ldr	r3, [r0, #16]

    // Carry propagation
    t1 += (t0 >> 26); t0 &= mask_26; 
    3650:	16ac      	asrs	r4, r5, #26
    3652:	19e4      	adds	r4, r4, r7
    t2 += (t1 >> 26); t1 &= mask_26; 
    3654:	16a0      	asrs	r0, r4, #26
    3656:	1880      	adds	r0, r0, r2
    3658:	01a4      	lsls	r4, r4, #6
    365a:	09a4      	lsrs	r4, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    365c:	1682      	asrs	r2, r0, #26
    365e:	1992      	adds	r2, r2, r6
    3660:	0180      	lsls	r0, r0, #6
    3662:	0980      	lsrs	r0, r0, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    3664:	1696      	asrs	r6, r2, #26
    3666:	18f6      	adds	r6, r6, r3
    3668:	0192      	lsls	r2, r2, #6
    366a:	0992      	lsrs	r2, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    366c:	0277      	lsls	r7, r6, #9
    366e:	0a7f      	lsrs	r7, r7, #9
    3670:	15f6      	asrs	r6, r6, #23
    t1 += (t0 >> 26); t0 &= mask_26; 
    3672:	01ad      	lsls	r5, r5, #6
    3674:	09ad      	lsrs	r5, r5, #6
    
    // Correction
    t0 += rem; 
    3676:	1973      	adds	r3, r6, r5
    t1 += (t0 >> 26); t0 &= mask_26; 
    3678:	169d      	asrs	r5, r3, #26
    367a:	192c      	adds	r4, r5, r4
    t2 += (t1 >> 26); t1 &= mask_26; 
    367c:	16a5      	asrs	r5, r4, #26
    367e:	1828      	adds	r0, r5, r0
    t3 += (t2 >> 26); t2 &= mask_26; 
    3680:	1685      	asrs	r5, r0, #26
    3682:	18aa      	adds	r2, r5, r2
    t4 += (t3 >> 26); t3 &= mask_26;
    3684:	1696      	asrs	r6, r2, #26
    3686:	19f6      	adds	r6, r6, r7
    rem = (t4 >> 23); t4 &= mask_23;
    3688:	15f7      	asrs	r7, r6, #23
    t1 += (t0 >> 26); t0 &= mask_26; 
    368a:	019d      	lsls	r5, r3, #6
    368c:	09ad      	lsrs	r5, r5, #6
    t0 += rem; 
    368e:	197d      	adds	r5, r7, r5

    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    3690:	600d      	str	r5, [r1, #0]
    t2 += (t1 >> 26); t1 &= mask_26; 
    3692:	01a4      	lsls	r4, r4, #6
    3694:	09a4      	lsrs	r4, r4, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    3696:	604c      	str	r4, [r1, #4]
    t3 += (t2 >> 26); t2 &= mask_26; 
    3698:	0180      	lsls	r0, r0, #6
    369a:	0980      	lsrs	r0, r0, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    369c:	6088      	str	r0, [r1, #8]
    t4 += (t3 >> 26); t3 &= mask_26;
    369e:	0192      	lsls	r2, r2, #6
    36a0:	0992      	lsrs	r2, r2, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    36a2:	60ca      	str	r2, [r1, #12]
    rem = (t4 >> 23); t4 &= mask_23;
    36a4:	0273      	lsls	r3, r6, #9
    36a6:	0a5b      	lsrs	r3, r3, #9
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    36a8:	610b      	str	r3, [r1, #16]
}
    36aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000036ac <vmod1271>:


void vmod1271(velm_t a, velm_t c)
{ // Reduce field element modulo 2^127-1
    36ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Output is in the range [0, 2^127-2]
  // Redundant representation: 23/26/26/26/26-bit
    int32_t t0, t1, t2, t3, t4;
    uint32_t mask, rem;

    t0 = a[0]; t1 = a[1]; t2 = a[2]; t3 = a[3]; t4 = a[4];   
    36ae:	6803      	ldr	r3, [r0, #0]
    36b0:	6847      	ldr	r7, [r0, #4]
    36b2:	6882      	ldr	r2, [r0, #8]
    36b4:	68c6      	ldr	r6, [r0, #12]
    36b6:	6905      	ldr	r5, [r0, #16]

    // First carry propagation
    t1 += (t0 >> 26); t0 &= mask_26; 
    36b8:	169c      	asrs	r4, r3, #26
    36ba:	19e4      	adds	r4, r4, r7
    t2 += (t1 >> 26); t1 &= mask_26; 
    36bc:	16a7      	asrs	r7, r4, #26
    36be:	18bf      	adds	r7, r7, r2
    36c0:	01a4      	lsls	r4, r4, #6
    36c2:	09a4      	lsrs	r4, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    36c4:	16ba      	asrs	r2, r7, #26
    36c6:	1992      	adds	r2, r2, r6
    36c8:	01bf      	lsls	r7, r7, #6
    36ca:	09bf      	lsrs	r7, r7, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    36cc:	1690      	asrs	r0, r2, #26
    36ce:	1940      	adds	r0, r0, r5
    36d0:	0192      	lsls	r2, r2, #6
    36d2:	0992      	lsrs	r2, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    36d4:	0246      	lsls	r6, r0, #9
    36d6:	0a76      	lsrs	r6, r6, #9
    t1 += (t0 >> 26); t0 &= mask_26; 
    36d8:	019b      	lsls	r3, r3, #6
    36da:	099b      	lsrs	r3, r3, #6
    
    // First correction adding rem+1
    t0 += rem + 1; 
    36dc:	3301      	adds	r3, #1
    rem = (t4 >> 23); t4 &= mask_23;
    36de:	15c0      	asrs	r0, r0, #23
    t0 += rem + 1; 
    36e0:	181b      	adds	r3, r3, r0
    t1 += (t0 >> 26); t0 &= mask_26; 
    36e2:	1698      	asrs	r0, r3, #26
    36e4:	1904      	adds	r4, r0, r4
    t2 += (t1 >> 26); t1 &= mask_26; 
    36e6:	16a0      	asrs	r0, r4, #26
    36e8:	19c7      	adds	r7, r0, r7
    36ea:	01a4      	lsls	r4, r4, #6
    36ec:	09a0      	lsrs	r0, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    36ee:	16bc      	asrs	r4, r7, #26
    36f0:	18a2      	adds	r2, r4, r2
    36f2:	01bf      	lsls	r7, r7, #6
    36f4:	09bf      	lsrs	r7, r7, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    36f6:	1695      	asrs	r5, r2, #26
    36f8:	19ad      	adds	r5, r5, r6
    36fa:	0192      	lsls	r2, r2, #6
    36fc:	0996      	lsrs	r6, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    36fe:	026c      	lsls	r4, r5, #9
    3700:	0a64      	lsrs	r4, r4, #9
    t1 += (t0 >> 26); t0 &= mask_26; 
    3702:	019b      	lsls	r3, r3, #6
    3704:	099b      	lsrs	r3, r3, #6
    rem = (t4 >> 23); t4 &= mask_23;
    3706:	15ed      	asrs	r5, r5, #23

    // If final carry = 0 then subtract 1
    mask = rem - 1;
    3708:	3d01      	subs	r5, #1
    t0 -= (mask & 1);
    370a:	2201      	movs	r2, #1
    370c:	4015      	ands	r5, r2
    370e:	1b5b      	subs	r3, r3, r5
    t1 += (t0 >> 26); t0 &= mask_26; 
    3710:	169d      	asrs	r5, r3, #26
    3712:	182d      	adds	r5, r5, r0
    t2 += (t1 >> 26); t1 &= mask_26; 
    3714:	16a8      	asrs	r0, r5, #26
    3716:	19c0      	adds	r0, r0, r7
    t3 += (t2 >> 26); t2 &= mask_26; 
    3718:	1682      	asrs	r2, r0, #26
    371a:	1992      	adds	r2, r2, r6
    t1 += (t0 >> 26); t0 &= mask_26; 
    371c:	019b      	lsls	r3, r3, #6
    371e:	099b      	lsrs	r3, r3, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    3720:	600b      	str	r3, [r1, #0]
    t2 += (t1 >> 26); t1 &= mask_26; 
    3722:	01ad      	lsls	r5, r5, #6
    3724:	09ad      	lsrs	r5, r5, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    3726:	604d      	str	r5, [r1, #4]
    t3 += (t2 >> 26); t2 &= mask_26; 
    3728:	0180      	lsls	r0, r0, #6
    372a:	0980      	lsrs	r0, r0, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    372c:	6088      	str	r0, [r1, #8]
    t4 += (t3 >> 26); t3 &= mask_26;
    372e:	0193      	lsls	r3, r2, #6
    3730:	099b      	lsrs	r3, r3, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    3732:	60cb      	str	r3, [r1, #12]
    t4 += (t3 >> 26); t3 &= mask_26;
    3734:	1692      	asrs	r2, r2, #26
    3736:	1914      	adds	r4, r2, r4
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    3738:	610c      	str	r4, [r1, #16]
}
    373a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000373c <vexp1251>:


__inline void vexp1251(felm_t a, felm_t af)
{ // Exponentiation over GF(p), af = a^(125-1)
    373c:	b5f0      	push	{r4, r5, r6, r7, lr}
    373e:	b09b      	sub	sp, #108	; 0x6c
    3740:	0005      	movs	r5, r0
    3742:	000e      	movs	r6, r1
	int i;
	velm_t t1, t2, t3, t4, t5;

	vsqr1271(a, t2);
    3744:	a910      	add	r1, sp, #64	; 0x40
    3746:	4c48      	ldr	r4, [pc, #288]	; (3868 <vexp1251+0x12c>)
    3748:	47a0      	blx	r4
	vmul1271(a, t2, t2);
    374a:	aa10      	add	r2, sp, #64	; 0x40
    374c:	0011      	movs	r1, r2
    374e:	0028      	movs	r0, r5
    3750:	4f46      	ldr	r7, [pc, #280]	; (386c <vexp1251+0x130>)
    3752:	47b8      	blx	r7
	vsqr1271(t2, t3);
    3754:	a90b      	add	r1, sp, #44	; 0x2c
    3756:	a810      	add	r0, sp, #64	; 0x40
    3758:	47a0      	blx	r4
	vsqr1271(t3, t3);
    375a:	a90b      	add	r1, sp, #44	; 0x2c
    375c:	0008      	movs	r0, r1
    375e:	47a0      	blx	r4
	vmul1271(t2, t3, t3);
    3760:	aa0b      	add	r2, sp, #44	; 0x2c
    3762:	0011      	movs	r1, r2
    3764:	a810      	add	r0, sp, #64	; 0x40
    3766:	47b8      	blx	r7
	vsqr1271(t3, t4);
    3768:	a906      	add	r1, sp, #24
    376a:	a80b      	add	r0, sp, #44	; 0x2c
    376c:	47a0      	blx	r4
	vsqr1271(t4, t4);
    376e:	a906      	add	r1, sp, #24
    3770:	0008      	movs	r0, r1
    3772:	47a0      	blx	r4
	vsqr1271(t4, t4);
    3774:	a906      	add	r1, sp, #24
    3776:	0008      	movs	r0, r1
    3778:	47a0      	blx	r4
	vsqr1271(t4, t4);
    377a:	a906      	add	r1, sp, #24
    377c:	0008      	movs	r0, r1
    377e:	47a0      	blx	r4
	vmul1271(t3, t4, t4);
    3780:	aa06      	add	r2, sp, #24
    3782:	0011      	movs	r1, r2
    3784:	a80b      	add	r0, sp, #44	; 0x2c
    3786:	47b8      	blx	r7
	vsqr1271(t4, t5);
    3788:	a901      	add	r1, sp, #4
    378a:	a806      	add	r0, sp, #24
    378c:	47a0      	blx	r4
    378e:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) vsqr1271(t5, t5);
    3790:	4f35      	ldr	r7, [pc, #212]	; (3868 <vexp1251+0x12c>)
    3792:	a901      	add	r1, sp, #4
    3794:	0008      	movs	r0, r1
    3796:	47b8      	blx	r7
    3798:	3c01      	subs	r4, #1
    379a:	2c00      	cmp	r4, #0
    379c:	d1f9      	bne.n	3792 <vexp1251+0x56>
	vmul1271(t4, t5, t5);
    379e:	aa01      	add	r2, sp, #4
    37a0:	0011      	movs	r1, r2
    37a2:	a806      	add	r0, sp, #24
    37a4:	4b31      	ldr	r3, [pc, #196]	; (386c <vexp1251+0x130>)
    37a6:	4798      	blx	r3
	vsqr1271(t5, t2);
    37a8:	a910      	add	r1, sp, #64	; 0x40
    37aa:	a801      	add	r0, sp, #4
    37ac:	4b2e      	ldr	r3, [pc, #184]	; (3868 <vexp1251+0x12c>)
    37ae:	4798      	blx	r3
    37b0:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) vsqr1271(t2, t2);
    37b2:	4f2d      	ldr	r7, [pc, #180]	; (3868 <vexp1251+0x12c>)
    37b4:	a910      	add	r1, sp, #64	; 0x40
    37b6:	0008      	movs	r0, r1
    37b8:	47b8      	blx	r7
    37ba:	3c01      	subs	r4, #1
    37bc:	2c00      	cmp	r4, #0
    37be:	d1f9      	bne.n	37b4 <vexp1251+0x78>
	vmul1271(t5, t2, t2);
    37c0:	aa10      	add	r2, sp, #64	; 0x40
    37c2:	0011      	movs	r1, r2
    37c4:	a801      	add	r0, sp, #4
    37c6:	4b29      	ldr	r3, [pc, #164]	; (386c <vexp1251+0x130>)
    37c8:	4798      	blx	r3
	vsqr1271(t2, t1);
    37ca:	a915      	add	r1, sp, #84	; 0x54
    37cc:	a810      	add	r0, sp, #64	; 0x40
    37ce:	4b26      	ldr	r3, [pc, #152]	; (3868 <vexp1251+0x12c>)
    37d0:	4798      	blx	r3
    37d2:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) vsqr1271(t1, t1);
    37d4:	4f24      	ldr	r7, [pc, #144]	; (3868 <vexp1251+0x12c>)
    37d6:	a915      	add	r1, sp, #84	; 0x54
    37d8:	0008      	movs	r0, r1
    37da:	47b8      	blx	r7
    37dc:	3c01      	subs	r4, #1
    37de:	2c00      	cmp	r4, #0
    37e0:	d1f9      	bne.n	37d6 <vexp1251+0x9a>
	vmul1271(t2, t1, t1);
    37e2:	aa15      	add	r2, sp, #84	; 0x54
    37e4:	0011      	movs	r1, r2
    37e6:	a810      	add	r0, sp, #64	; 0x40
    37e8:	4b20      	ldr	r3, [pc, #128]	; (386c <vexp1251+0x130>)
    37ea:	4798      	blx	r3
    37ec:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) vsqr1271(t1, t1);
    37ee:	4f1e      	ldr	r7, [pc, #120]	; (3868 <vexp1251+0x12c>)
    37f0:	a915      	add	r1, sp, #84	; 0x54
    37f2:	0008      	movs	r0, r1
    37f4:	47b8      	blx	r7
    37f6:	3c01      	subs	r4, #1
    37f8:	2c00      	cmp	r4, #0
    37fa:	d1f9      	bne.n	37f0 <vexp1251+0xb4>
	vmul1271(t1, t2, t1);
    37fc:	aa15      	add	r2, sp, #84	; 0x54
    37fe:	a910      	add	r1, sp, #64	; 0x40
    3800:	0010      	movs	r0, r2
    3802:	4b1a      	ldr	r3, [pc, #104]	; (386c <vexp1251+0x130>)
    3804:	4798      	blx	r3
    3806:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) vsqr1271(t1, t1);
    3808:	4f17      	ldr	r7, [pc, #92]	; (3868 <vexp1251+0x12c>)
    380a:	a915      	add	r1, sp, #84	; 0x54
    380c:	0008      	movs	r0, r1
    380e:	47b8      	blx	r7
    3810:	3c01      	subs	r4, #1
    3812:	2c00      	cmp	r4, #0
    3814:	d1f9      	bne.n	380a <vexp1251+0xce>
	vmul1271(t5, t1, t1);
    3816:	aa15      	add	r2, sp, #84	; 0x54
    3818:	0011      	movs	r1, r2
    381a:	a801      	add	r0, sp, #4
    381c:	4b13      	ldr	r3, [pc, #76]	; (386c <vexp1251+0x130>)
    381e:	4798      	blx	r3
    3820:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) vsqr1271(t1, t1);
    3822:	4f11      	ldr	r7, [pc, #68]	; (3868 <vexp1251+0x12c>)
    3824:	a915      	add	r1, sp, #84	; 0x54
    3826:	0008      	movs	r0, r1
    3828:	47b8      	blx	r7
    382a:	3c01      	subs	r4, #1
    382c:	2c00      	cmp	r4, #0
    382e:	d1f9      	bne.n	3824 <vexp1251+0xe8>
	vmul1271(t4, t1, t1);
    3830:	aa15      	add	r2, sp, #84	; 0x54
    3832:	0011      	movs	r1, r2
    3834:	a806      	add	r0, sp, #24
    3836:	4b0d      	ldr	r3, [pc, #52]	; (386c <vexp1251+0x130>)
    3838:	4798      	blx	r3
    383a:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) vsqr1271(t1, t1);
    383c:	4f0a      	ldr	r7, [pc, #40]	; (3868 <vexp1251+0x12c>)
    383e:	a915      	add	r1, sp, #84	; 0x54
    3840:	0008      	movs	r0, r1
    3842:	47b8      	blx	r7
    3844:	3c01      	subs	r4, #1
    3846:	2c00      	cmp	r4, #0
    3848:	d1f9      	bne.n	383e <vexp1251+0x102>
	vmul1271(t3, t1, t1);
    384a:	aa15      	add	r2, sp, #84	; 0x54
    384c:	0011      	movs	r1, r2
    384e:	a80b      	add	r0, sp, #44	; 0x2c
    3850:	4c06      	ldr	r4, [pc, #24]	; (386c <vexp1251+0x130>)
    3852:	47a0      	blx	r4
	vsqr1271(t1, t1);
    3854:	a915      	add	r1, sp, #84	; 0x54
    3856:	0008      	movs	r0, r1
    3858:	4b03      	ldr	r3, [pc, #12]	; (3868 <vexp1251+0x12c>)
    385a:	4798      	blx	r3
	vmul1271(a, t1, af);
    385c:	0032      	movs	r2, r6
    385e:	a915      	add	r1, sp, #84	; 0x54
    3860:	0028      	movs	r0, r5
    3862:	47a0      	blx	r4
}
    3864:	b01b      	add	sp, #108	; 0x6c
    3866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3868:	00003469 	.word	0x00003469
    386c:	000031d5 	.word	0x000031d5

00003870 <vinv1271>:


void vinv1271(felm_t a)
{ // Field inversion, af = a^-1 = a^(p-2) mod p
    3870:	b570      	push	{r4, r5, r6, lr}
    3872:	b09e      	sub	sp, #120	; 0x78
    3874:	0005      	movs	r5, r0
	vsqr1271(a, t2);
    3876:	a905      	add	r1, sp, #20
    3878:	4c4d      	ldr	r4, [pc, #308]	; (39b0 <vinv1271+0x140>)
    387a:	47a0      	blx	r4
	vmul1271(a, t2, t2);
    387c:	aa05      	add	r2, sp, #20
    387e:	0011      	movs	r1, r2
    3880:	0028      	movs	r0, r5
    3882:	4e4c      	ldr	r6, [pc, #304]	; (39b4 <vinv1271+0x144>)
    3884:	47b0      	blx	r6
	vsqr1271(t2, t3);
    3886:	a90a      	add	r1, sp, #40	; 0x28
    3888:	a805      	add	r0, sp, #20
    388a:	47a0      	blx	r4
	vsqr1271(t3, t3);
    388c:	a90a      	add	r1, sp, #40	; 0x28
    388e:	0008      	movs	r0, r1
    3890:	47a0      	blx	r4
	vmul1271(t2, t3, t3);
    3892:	aa0a      	add	r2, sp, #40	; 0x28
    3894:	0011      	movs	r1, r2
    3896:	a805      	add	r0, sp, #20
    3898:	47b0      	blx	r6
	vsqr1271(t3, t4);
    389a:	a90f      	add	r1, sp, #60	; 0x3c
    389c:	a80a      	add	r0, sp, #40	; 0x28
    389e:	47a0      	blx	r4
	vsqr1271(t4, t4);
    38a0:	a90f      	add	r1, sp, #60	; 0x3c
    38a2:	0008      	movs	r0, r1
    38a4:	47a0      	blx	r4
	vsqr1271(t4, t4);
    38a6:	a90f      	add	r1, sp, #60	; 0x3c
    38a8:	0008      	movs	r0, r1
    38aa:	47a0      	blx	r4
	vsqr1271(t4, t4);
    38ac:	a90f      	add	r1, sp, #60	; 0x3c
    38ae:	0008      	movs	r0, r1
    38b0:	47a0      	blx	r4
	vmul1271(t3, t4, t4);
    38b2:	aa0f      	add	r2, sp, #60	; 0x3c
    38b4:	0011      	movs	r1, r2
    38b6:	a80a      	add	r0, sp, #40	; 0x28
    38b8:	47b0      	blx	r6
	vsqr1271(t4, t5);
    38ba:	a914      	add	r1, sp, #80	; 0x50
    38bc:	a80f      	add	r0, sp, #60	; 0x3c
    38be:	47a0      	blx	r4
    38c0:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) vsqr1271(t5, t5);
    38c2:	4e3b      	ldr	r6, [pc, #236]	; (39b0 <vinv1271+0x140>)
    38c4:	a914      	add	r1, sp, #80	; 0x50
    38c6:	0008      	movs	r0, r1
    38c8:	47b0      	blx	r6
    38ca:	3c01      	subs	r4, #1
    38cc:	2c00      	cmp	r4, #0
    38ce:	d1f9      	bne.n	38c4 <vinv1271+0x54>
	vmul1271(t4, t5, t5);
    38d0:	aa14      	add	r2, sp, #80	; 0x50
    38d2:	0011      	movs	r1, r2
    38d4:	a80f      	add	r0, sp, #60	; 0x3c
    38d6:	4b37      	ldr	r3, [pc, #220]	; (39b4 <vinv1271+0x144>)
    38d8:	4798      	blx	r3
	vsqr1271(t5, t2);
    38da:	a905      	add	r1, sp, #20
    38dc:	a814      	add	r0, sp, #80	; 0x50
    38de:	4b34      	ldr	r3, [pc, #208]	; (39b0 <vinv1271+0x140>)
    38e0:	4798      	blx	r3
    38e2:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) vsqr1271(t2, t2);
    38e4:	4e32      	ldr	r6, [pc, #200]	; (39b0 <vinv1271+0x140>)
    38e6:	a905      	add	r1, sp, #20
    38e8:	0008      	movs	r0, r1
    38ea:	47b0      	blx	r6
    38ec:	3c01      	subs	r4, #1
    38ee:	2c00      	cmp	r4, #0
    38f0:	d1f9      	bne.n	38e6 <vinv1271+0x76>
	vmul1271(t5, t2, t2);
    38f2:	aa05      	add	r2, sp, #20
    38f4:	0011      	movs	r1, r2
    38f6:	a814      	add	r0, sp, #80	; 0x50
    38f8:	4b2e      	ldr	r3, [pc, #184]	; (39b4 <vinv1271+0x144>)
    38fa:	4798      	blx	r3
	vsqr1271(t2, t1);
    38fc:	4669      	mov	r1, sp
    38fe:	a805      	add	r0, sp, #20
    3900:	4b2b      	ldr	r3, [pc, #172]	; (39b0 <vinv1271+0x140>)
    3902:	4798      	blx	r3
    3904:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) vsqr1271(t1, t1);
    3906:	4e2a      	ldr	r6, [pc, #168]	; (39b0 <vinv1271+0x140>)
    3908:	4669      	mov	r1, sp
    390a:	4668      	mov	r0, sp
    390c:	47b0      	blx	r6
    390e:	3c01      	subs	r4, #1
    3910:	2c00      	cmp	r4, #0
    3912:	d1f9      	bne.n	3908 <vinv1271+0x98>
	vmul1271(t2, t1, t1);
    3914:	466a      	mov	r2, sp
    3916:	4669      	mov	r1, sp
    3918:	a805      	add	r0, sp, #20
    391a:	4b26      	ldr	r3, [pc, #152]	; (39b4 <vinv1271+0x144>)
    391c:	4798      	blx	r3
    391e:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) vsqr1271(t1, t1);
    3920:	4e23      	ldr	r6, [pc, #140]	; (39b0 <vinv1271+0x140>)
    3922:	4669      	mov	r1, sp
    3924:	4668      	mov	r0, sp
    3926:	47b0      	blx	r6
    3928:	3c01      	subs	r4, #1
    392a:	2c00      	cmp	r4, #0
    392c:	d1f9      	bne.n	3922 <vinv1271+0xb2>
	vmul1271(t1, t2, t1);
    392e:	466a      	mov	r2, sp
    3930:	a905      	add	r1, sp, #20
    3932:	4668      	mov	r0, sp
    3934:	4b1f      	ldr	r3, [pc, #124]	; (39b4 <vinv1271+0x144>)
    3936:	4798      	blx	r3
    3938:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) vsqr1271(t1, t1);
    393a:	4e1d      	ldr	r6, [pc, #116]	; (39b0 <vinv1271+0x140>)
    393c:	4669      	mov	r1, sp
    393e:	4668      	mov	r0, sp
    3940:	47b0      	blx	r6
    3942:	3c01      	subs	r4, #1
    3944:	2c00      	cmp	r4, #0
    3946:	d1f9      	bne.n	393c <vinv1271+0xcc>
	vmul1271(t5, t1, t1);
    3948:	466a      	mov	r2, sp
    394a:	4669      	mov	r1, sp
    394c:	a814      	add	r0, sp, #80	; 0x50
    394e:	4b19      	ldr	r3, [pc, #100]	; (39b4 <vinv1271+0x144>)
    3950:	4798      	blx	r3
    3952:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) vsqr1271(t1, t1);
    3954:	4e16      	ldr	r6, [pc, #88]	; (39b0 <vinv1271+0x140>)
    3956:	4669      	mov	r1, sp
    3958:	4668      	mov	r0, sp
    395a:	47b0      	blx	r6
    395c:	3c01      	subs	r4, #1
    395e:	2c00      	cmp	r4, #0
    3960:	d1f9      	bne.n	3956 <vinv1271+0xe6>
	vmul1271(t4, t1, t1);
    3962:	466a      	mov	r2, sp
    3964:	4669      	mov	r1, sp
    3966:	a80f      	add	r0, sp, #60	; 0x3c
    3968:	4b12      	ldr	r3, [pc, #72]	; (39b4 <vinv1271+0x144>)
    396a:	4798      	blx	r3
    396c:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) vsqr1271(t1, t1);
    396e:	4e10      	ldr	r6, [pc, #64]	; (39b0 <vinv1271+0x140>)
    3970:	4669      	mov	r1, sp
    3972:	4668      	mov	r0, sp
    3974:	47b0      	blx	r6
    3976:	3c01      	subs	r4, #1
    3978:	2c00      	cmp	r4, #0
    397a:	d1f9      	bne.n	3970 <vinv1271+0x100>
	vmul1271(t3, t1, t1);
    397c:	466a      	mov	r2, sp
    397e:	4669      	mov	r1, sp
    3980:	a80a      	add	r0, sp, #40	; 0x28
    3982:	4c0c      	ldr	r4, [pc, #48]	; (39b4 <vinv1271+0x144>)
    3984:	47a0      	blx	r4
	vsqr1271(t1, t1);
    3986:	4669      	mov	r1, sp
    3988:	4668      	mov	r0, sp
    398a:	4e09      	ldr	r6, [pc, #36]	; (39b0 <vinv1271+0x140>)
    398c:	47b0      	blx	r6
	vmul1271(a, t1, af);
    398e:	aa19      	add	r2, sp, #100	; 0x64
    3990:	4669      	mov	r1, sp
    3992:	0028      	movs	r0, r5
    3994:	47a0      	blx	r4
  // Hardcoded for p = 2^127-1
	velm_t t;

	vexp1251(a, t);
	vsqr1271(t, t);
    3996:	a919      	add	r1, sp, #100	; 0x64
    3998:	0008      	movs	r0, r1
    399a:	47b0      	blx	r6
	vsqr1271(t, t);
    399c:	a919      	add	r1, sp, #100	; 0x64
    399e:	0008      	movs	r0, r1
    39a0:	47b0      	blx	r6
	vmul1271(a, t, a);
    39a2:	002a      	movs	r2, r5
    39a4:	a919      	add	r1, sp, #100	; 0x64
    39a6:	0028      	movs	r0, r5
    39a8:	47a0      	blx	r4
}
    39aa:	b01e      	add	sp, #120	; 0x78
    39ac:	bd70      	pop	{r4, r5, r6, pc}
    39ae:	46c0      	nop			; (mov r8, r8)
    39b0:	00003469 	.word	0x00003469
    39b4:	000031d5 	.word	0x000031d5

000039b8 <from_std_to_ext>:


void from_std_to_ext(f2elm_t a, v2elm_t c)
{ // Expand GF(p^2) element represented with two 4 32-bit digits to 23/26/26/26/26/23/26/26/26/26-bit vector representation
    39b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Assumes fully reduced input in [0, 2^127-1]  
    const uint32_t mask_8  = ((uint32_t)1 <<  8) - 1;   
    const uint32_t mask_14 = ((uint32_t)1 << 14) - 1;  
    const uint32_t mask_20 = ((uint32_t)1 << 20) - 1; 

    c[0] = a[0][0] & mask_26;
    39ba:	6803      	ldr	r3, [r0, #0]
    39bc:	019b      	lsls	r3, r3, #6
    39be:	099b      	lsrs	r3, r3, #6
    39c0:	600b      	str	r3, [r1, #0]
    c[1] = (a[0][0] >> 26) | ((a[0][1] & mask_20) <<  6);
    39c2:	6843      	ldr	r3, [r0, #4]
    39c4:	019b      	lsls	r3, r3, #6
    39c6:	4a1c      	ldr	r2, [pc, #112]	; (3a38 <from_std_to_ext+0x80>)
    39c8:	4013      	ands	r3, r2
    39ca:	6804      	ldr	r4, [r0, #0]
    39cc:	0ea4      	lsrs	r4, r4, #26
    39ce:	4323      	orrs	r3, r4
    39d0:	604b      	str	r3, [r1, #4]
    c[2] = (a[0][1] >> 20) | ((a[0][2] & mask_14) << 12);
    39d2:	6883      	ldr	r3, [r0, #8]
    39d4:	031b      	lsls	r3, r3, #12
    39d6:	4f19      	ldr	r7, [pc, #100]	; (3a3c <from_std_to_ext+0x84>)
    39d8:	403b      	ands	r3, r7
    39da:	6844      	ldr	r4, [r0, #4]
    39dc:	0d24      	lsrs	r4, r4, #20
    39de:	4323      	orrs	r3, r4
    39e0:	608b      	str	r3, [r1, #8]
    c[3] = (a[0][2] >> 14) | ((a[0][3] & mask_8 ) << 18);
    39e2:	68c3      	ldr	r3, [r0, #12]
    39e4:	049d      	lsls	r5, r3, #18
    39e6:	26ff      	movs	r6, #255	; 0xff
    39e8:	04b6      	lsls	r6, r6, #18
    39ea:	4035      	ands	r5, r6
    39ec:	6883      	ldr	r3, [r0, #8]
    39ee:	0b9b      	lsrs	r3, r3, #14
    39f0:	431d      	orrs	r5, r3
    39f2:	60cd      	str	r5, [r1, #12]
    c[4] = (a[0][3] >>  8) & mask_23;
    39f4:	68c3      	ldr	r3, [r0, #12]
    39f6:	005b      	lsls	r3, r3, #1
    39f8:	0a5b      	lsrs	r3, r3, #9
    39fa:	610b      	str	r3, [r1, #16]

    c[5] = a[1][0] & mask_26;
    39fc:	6903      	ldr	r3, [r0, #16]
    39fe:	019b      	lsls	r3, r3, #6
    3a00:	099b      	lsrs	r3, r3, #6
    3a02:	614b      	str	r3, [r1, #20]
    c[6] = (a[1][0] >> 26) | ((a[1][1] & mask_20) <<  6);
    3a04:	6943      	ldr	r3, [r0, #20]
    3a06:	019c      	lsls	r4, r3, #6
    3a08:	4014      	ands	r4, r2
    3a0a:	6903      	ldr	r3, [r0, #16]
    3a0c:	0e9b      	lsrs	r3, r3, #26
    3a0e:	431c      	orrs	r4, r3
    3a10:	618c      	str	r4, [r1, #24]
    c[7] = (a[1][1] >> 20) | ((a[1][2] & mask_14) << 12);
    3a12:	6983      	ldr	r3, [r0, #24]
    3a14:	031a      	lsls	r2, r3, #12
    3a16:	403a      	ands	r2, r7
    3a18:	6943      	ldr	r3, [r0, #20]
    3a1a:	0d1b      	lsrs	r3, r3, #20
    3a1c:	431a      	orrs	r2, r3
    3a1e:	61ca      	str	r2, [r1, #28]
    c[8] = (a[1][2] >> 14) | ((a[1][3] & mask_8 ) << 18);
    3a20:	69c3      	ldr	r3, [r0, #28]
    3a22:	049b      	lsls	r3, r3, #18
    3a24:	4033      	ands	r3, r6
    3a26:	6982      	ldr	r2, [r0, #24]
    3a28:	0b92      	lsrs	r2, r2, #14
    3a2a:	4313      	orrs	r3, r2
    3a2c:	620b      	str	r3, [r1, #32]
    c[9] = (a[1][3] >>  8) & mask_23;
    3a2e:	69c3      	ldr	r3, [r0, #28]
    3a30:	005b      	lsls	r3, r3, #1
    3a32:	0a5b      	lsrs	r3, r3, #9
    3a34:	624b      	str	r3, [r1, #36]	; 0x24
}
    3a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a38:	03ffffc0 	.word	0x03ffffc0
    3a3c:	03fff000 	.word	0x03fff000

00003a40 <from_ext_to_std>:

void from_ext_to_std(v2elm_t a, f2elm_t c)
{ // Contract GF(p^2) element in 23/26/26/26/26/23/26/26/26/26-bit vector representation to two 4 32-bit digits
  // Assumes fully reduced input in [0, 2^127-1]
        
    c[0][0]  = (a[1] << 26) |  a[0];
    3a40:	6843      	ldr	r3, [r0, #4]
    3a42:	069b      	lsls	r3, r3, #26
    3a44:	6802      	ldr	r2, [r0, #0]
    3a46:	4313      	orrs	r3, r2
    3a48:	600b      	str	r3, [r1, #0]
    c[0][1]  = (a[2] << 20) | (a[1] >>  6);
    3a4a:	6883      	ldr	r3, [r0, #8]
    3a4c:	051b      	lsls	r3, r3, #20
    3a4e:	6842      	ldr	r2, [r0, #4]
    3a50:	0992      	lsrs	r2, r2, #6
    3a52:	4313      	orrs	r3, r2
    3a54:	604b      	str	r3, [r1, #4]
    c[0][2]  = (a[3] << 14) | (a[2] >> 12);
    3a56:	68c3      	ldr	r3, [r0, #12]
    3a58:	039b      	lsls	r3, r3, #14
    3a5a:	6882      	ldr	r2, [r0, #8]
    3a5c:	0b12      	lsrs	r2, r2, #12
    3a5e:	4313      	orrs	r3, r2
    3a60:	608b      	str	r3, [r1, #8]
    c[0][3]  = (a[4] <<  8) | (a[3] >> 18);
    3a62:	6903      	ldr	r3, [r0, #16]
    3a64:	021b      	lsls	r3, r3, #8
    3a66:	68c2      	ldr	r2, [r0, #12]
    3a68:	0c92      	lsrs	r2, r2, #18
    3a6a:	4313      	orrs	r3, r2
    3a6c:	60cb      	str	r3, [r1, #12]
        
    c[1][0]  = (a[6] << 26) |  a[5];
    3a6e:	6983      	ldr	r3, [r0, #24]
    3a70:	069b      	lsls	r3, r3, #26
    3a72:	6942      	ldr	r2, [r0, #20]
    3a74:	4313      	orrs	r3, r2
    3a76:	610b      	str	r3, [r1, #16]
    c[1][1]  = (a[7] << 20) | (a[6] >>  6);
    3a78:	69c3      	ldr	r3, [r0, #28]
    3a7a:	051b      	lsls	r3, r3, #20
    3a7c:	6982      	ldr	r2, [r0, #24]
    3a7e:	0992      	lsrs	r2, r2, #6
    3a80:	4313      	orrs	r3, r2
    3a82:	614b      	str	r3, [r1, #20]
    c[1][2]  = (a[8] << 14) | (a[7] >> 12);
    3a84:	6a03      	ldr	r3, [r0, #32]
    3a86:	039b      	lsls	r3, r3, #14
    3a88:	69c2      	ldr	r2, [r0, #28]
    3a8a:	0b12      	lsrs	r2, r2, #12
    3a8c:	4313      	orrs	r3, r2
    3a8e:	618b      	str	r3, [r1, #24]
    c[1][3]  = (a[9] <<  8) | (a[8] >> 18);
    3a90:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3a92:	021b      	lsls	r3, r3, #8
    3a94:	6a02      	ldr	r2, [r0, #32]
    3a96:	0c92      	lsrs	r2, r2, #18
    3a98:	4313      	orrs	r3, r2
    3a9a:	61cb      	str	r3, [r1, #28]
}
    3a9c:	4770      	bx	lr
	...

00003aa0 <mp_mul>:


void mp_mul(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Schoolbook multiprecision multiply, c = a*b   
    3aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aa2:	46de      	mov	lr, fp
    3aa4:	4657      	mov	r7, sl
    3aa6:	464e      	mov	r6, r9
    3aa8:	4645      	mov	r5, r8
    3aaa:	b5e0      	push	{r5, r6, r7, lr}
    3aac:	b087      	sub	sp, #28
    3aae:	9103      	str	r1, [sp, #12]
    3ab0:	4699      	mov	r9, r3
    unsigned int i, j;
    digit_t u, v, UV[2];
    unsigned int carry = 0;

    for (i = 0; i < (2*nwords); i++) c[i] = 0;
    3ab2:	0059      	lsls	r1, r3, #1
    3ab4:	d006      	beq.n	3ac4 <mp_mul+0x24>
    3ab6:	0013      	movs	r3, r2
    3ab8:	0089      	lsls	r1, r1, #2
    3aba:	1851      	adds	r1, r2, r1
    3abc:	2400      	movs	r4, #0
    3abe:	c310      	stmia	r3!, {r4}
    3ac0:	428b      	cmp	r3, r1
    3ac2:	d1fc      	bne.n	3abe <mp_mul+0x1e>

    for (i = 0; i < nwords; i++) {
    3ac4:	464b      	mov	r3, r9
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d035      	beq.n	3b36 <mp_mul+0x96>
    3aca:	9201      	str	r2, [sp, #4]
    3acc:	4680      	mov	r8, r0
    3ace:	009b      	lsls	r3, r3, #2
    3ad0:	9302      	str	r3, [sp, #8]
    3ad2:	2300      	movs	r3, #0
    3ad4:	469b      	mov	fp, r3
        u = 0;
        for (j = 0; j < nwords; j++) {
            MUL(a[i], b[j], UV+1, UV[0]); 
    3ad6:	4b1b      	ldr	r3, [pc, #108]	; (3b44 <mp_mul+0xa4>)
    3ad8:	469a      	mov	sl, r3
    3ada:	9f03      	ldr	r7, [sp, #12]
{ // Schoolbook multiprecision multiply, c = a*b   
    3adc:	9e01      	ldr	r6, [sp, #4]
    3ade:	2400      	movs	r4, #0
    3ae0:	2500      	movs	r5, #0
            MUL(a[i], b[j], UV+1, UV[0]); 
    3ae2:	cf02      	ldmia	r7!, {r1}
    3ae4:	aa04      	add	r2, sp, #16
    3ae6:	4643      	mov	r3, r8
    3ae8:	6818      	ldr	r0, [r3, #0]
    3aea:	47d0      	blx	sl
            ADDC(0, UV[0], u, carry, v); 
    3aec:	9a04      	ldr	r2, [sp, #16]
    3aee:	1913      	adds	r3, r2, r4
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
}

static __inline unsigned int is_digit_lessthan_ct(digit_t x, digit_t y)
{ // Is x < y?
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    3af0:	0011      	movs	r1, r2
    3af2:	4059      	eors	r1, r3
    3af4:	4054      	eors	r4, r2
    3af6:	430c      	orrs	r4, r1
    3af8:	405c      	eors	r4, r3
    3afa:	0fe4      	lsrs	r4, r4, #31
            u = UV[1] + carry;
    3afc:	9a05      	ldr	r2, [sp, #20]
    3afe:	9200      	str	r2, [sp, #0]
    3b00:	18a1      	adds	r1, r4, r2
            ADDC(0, c[i+j], v, carry, v); 
    3b02:	6830      	ldr	r0, [r6, #0]
    3b04:	181a      	adds	r2, r3, r0
    3b06:	4043      	eors	r3, r0
    3b08:	001c      	movs	r4, r3
    3b0a:	4050      	eors	r0, r2
    3b0c:	4304      	orrs	r4, r0
    3b0e:	4054      	eors	r4, r2
    3b10:	0fe4      	lsrs	r4, r4, #31
            u = u + carry;
    3b12:	1864      	adds	r4, r4, r1
            c[i+j] = v;
    3b14:	c604      	stmia	r6!, {r2}
        for (j = 0; j < nwords; j++) {
    3b16:	3501      	adds	r5, #1
    3b18:	45a9      	cmp	r9, r5
    3b1a:	d1e2      	bne.n	3ae2 <mp_mul+0x42>
        }
        c[nwords+i] = u;
    3b1c:	9b01      	ldr	r3, [sp, #4]
    3b1e:	9a02      	ldr	r2, [sp, #8]
    3b20:	509c      	str	r4, [r3, r2]
    for (i = 0; i < nwords; i++) {
    3b22:	2201      	movs	r2, #1
    3b24:	4694      	mov	ip, r2
    3b26:	44e3      	add	fp, ip
    3b28:	3304      	adds	r3, #4
    3b2a:	9301      	str	r3, [sp, #4]
    3b2c:	2304      	movs	r3, #4
    3b2e:	469c      	mov	ip, r3
    3b30:	44e0      	add	r8, ip
    3b32:	455d      	cmp	r5, fp
    3b34:	d1d1      	bne.n	3ada <mp_mul+0x3a>
    }
}
    3b36:	b007      	add	sp, #28
    3b38:	bc3c      	pop	{r2, r3, r4, r5}
    3b3a:	4690      	mov	r8, r2
    3b3c:	4699      	mov	r9, r3
    3b3e:	46a2      	mov	sl, r4
    3b40:	46ab      	mov	fp, r5
    3b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b44:	000030ed 	.word	0x000030ed

00003b48 <subtract>:
    return carry;
}


unsigned int subtract(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Multiprecision subtraction, c = a-b, where lng(a) = lng(b) = nwords. Returns the borrow bit
    3b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b4a:	46d6      	mov	lr, sl
    3b4c:	464f      	mov	r7, r9
    3b4e:	4646      	mov	r6, r8
    3b50:	b5c0      	push	{r6, r7, lr}
    3b52:	4684      	mov	ip, r0
    3b54:	4691      	mov	r9, r2
    unsigned int i, borrow = 0;

    for (i = 0; i < nwords; i++) {
    3b56:	2b00      	cmp	r3, #0
    3b58:	d022      	beq.n	3ba0 <subtract+0x58>
    3b5a:	009b      	lsls	r3, r3, #2
    3b5c:	4698      	mov	r8, r3
    3b5e:	2600      	movs	r6, #0
    3b60:	2200      	movs	r2, #0
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    3b62:	2301      	movs	r3, #1
    3b64:	469a      	mov	sl, r3
        SUBC(borrow, a[i], b[i], borrow, c[i]);
    3b66:	4663      	mov	r3, ip
    3b68:	599b      	ldr	r3, [r3, r6]
    3b6a:	598f      	ldr	r7, [r1, r6]
    3b6c:	1bdd      	subs	r5, r3, r7
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    3b6e:	426c      	negs	r4, r5
    3b70:	432c      	orrs	r4, r5
    3b72:	0fe4      	lsrs	r4, r4, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    3b74:	4650      	mov	r0, sl
    3b76:	4044      	eors	r4, r0
    3b78:	4014      	ands	r4, r2
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    3b7a:	0018      	movs	r0, r3
    3b7c:	4078      	eors	r0, r7
    3b7e:	406f      	eors	r7, r5
    3b80:	4338      	orrs	r0, r7
    3b82:	4058      	eors	r0, r3
    3b84:	0fc0      	lsrs	r0, r0, #31
    3b86:	4320      	orrs	r0, r4
    3b88:	1aad      	subs	r5, r5, r2
    3b8a:	464b      	mov	r3, r9
    3b8c:	519d      	str	r5, [r3, r6]
    3b8e:	3604      	adds	r6, #4
    3b90:	0002      	movs	r2, r0
    for (i = 0; i < nwords; i++) {
    3b92:	4546      	cmp	r6, r8
    3b94:	d1e7      	bne.n	3b66 <subtract+0x1e>
    }

    return borrow;
}
    3b96:	bc1c      	pop	{r2, r3, r4}
    3b98:	4690      	mov	r8, r2
    3b9a:	4699      	mov	r9, r3
    3b9c:	46a2      	mov	sl, r4
    3b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsigned int i, borrow = 0;
    3ba0:	2000      	movs	r0, #0
    return borrow;
    3ba2:	e7f8      	b.n	3b96 <subtract+0x4e>

00003ba4 <Montgomery_multiply_mod_order>:
	subtract_mod_order(c, (digit_t*)&curve_order, c);  // if c >= order then c = c - order
}
 

void Montgomery_multiply_mod_order(const digit_t* ma, const digit_t* mb, digit_t* mc)
{ // 256-bit Montgomery multiplication modulo the curve order, mc = ma*mb*r' mod order, where ma,mb,mc in [0, order-1]
    3ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ba6:	b0b1      	sub	sp, #196	; 0xc4
    3ba8:	0015      	movs	r5, r2
    mp_mul(a, b, c, NWORDS_ORDER);
    3baa:	2308      	movs	r3, #8
    3bac:	aa20      	add	r2, sp, #128	; 0x80
    3bae:	4c2c      	ldr	r4, [pc, #176]	; (3c60 <Montgomery_multiply_mod_order+0xbc>)
    3bb0:	47a0      	blx	r4
    3bb2:	2308      	movs	r3, #8
    3bb4:	aa10      	add	r2, sp, #64	; 0x40
    3bb6:	492b      	ldr	r1, [pc, #172]	; (3c64 <Montgomery_multiply_mod_order+0xc0>)
    3bb8:	a820      	add	r0, sp, #128	; 0x80
    3bba:	47a0      	blx	r4
    3bbc:	2308      	movs	r3, #8
    3bbe:	466a      	mov	r2, sp
    3bc0:	4929      	ldr	r1, [pc, #164]	; (3c68 <Montgomery_multiply_mod_order+0xc4>)
    3bc2:	a810      	add	r0, sp, #64	; 0x40
    3bc4:	47a0      	blx	r4
    3bc6:	2600      	movs	r6, #0
    unsigned int i, carry = 0;
    3bc8:	2400      	movs	r4, #0
        ADDC(carry, a[i], b[i], carry, c[i]);
    3bca:	a920      	add	r1, sp, #128	; 0x80
    3bcc:	5873      	ldr	r3, [r6, r1]
    3bce:	191a      	adds	r2, r3, r4
    3bd0:	4668      	mov	r0, sp
    3bd2:	5830      	ldr	r0, [r6, r0]
    3bd4:	4684      	mov	ip, r0
    3bd6:	1817      	adds	r7, r2, r0
    3bd8:	4668      	mov	r0, sp
    3bda:	5037      	str	r7, [r6, r0]
    3bdc:	0010      	movs	r0, r2
    3bde:	4060      	eors	r0, r4
    3be0:	405c      	eors	r4, r3
    3be2:	4320      	orrs	r0, r4
    3be4:	4050      	eors	r0, r2
    3be6:	0013      	movs	r3, r2
    3be8:	407b      	eors	r3, r7
    3bea:	4664      	mov	r4, ip
    3bec:	4054      	eors	r4, r2
    3bee:	431c      	orrs	r4, r3
    3bf0:	407c      	eors	r4, r7
    3bf2:	4304      	orrs	r4, r0
    3bf4:	0fe4      	lsrs	r4, r4, #31
    3bf6:	3604      	adds	r6, #4
    for (i = 0; i < nwords; i++) {
    3bf8:	2e40      	cmp	r6, #64	; 0x40
    3bfa:	d1e7      	bne.n	3bcc <Montgomery_multiply_mod_order+0x28>
    3bfc:	2300      	movs	r3, #0
    multiply(P, (digit_t*)&Montgomery_rprime, Q);      // Q = P * r' mod 2^(log_2(r))
    multiply(Q, (digit_t*)&curve_order, temp);         // temp = Q * r
    cout = add(P, temp, temp, 2*NWORDS_ORDER);         // (cout, temp) = P + Q * r     

    for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
        mc[i] = temp[NWORDS_ORDER + i];
    3bfe:	001a      	movs	r2, r3
    3c00:	446a      	add	r2, sp
    3c02:	6a12      	ldr	r2, [r2, #32]
    3c04:	50ea      	str	r2, [r5, r3]
    3c06:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
    3c08:	2b20      	cmp	r3, #32
    3c0a:	d1f8      	bne.n	3bfe <Montgomery_multiply_mod_order+0x5a>
    }

    // Final, constant-time subtraction     
    bout = subtract(mc, (digit_t*)&curve_order, mc, NWORDS_ORDER);    // (cout, mc) = (cout, mc) - r
    3c0c:	3b18      	subs	r3, #24
    3c0e:	002a      	movs	r2, r5
    3c10:	4915      	ldr	r1, [pc, #84]	; (3c68 <Montgomery_multiply_mod_order+0xc4>)
    3c12:	0028      	movs	r0, r5
    3c14:	4e15      	ldr	r6, [pc, #84]	; (3c6c <Montgomery_multiply_mod_order+0xc8>)
    3c16:	47b0      	blx	r6
    mask = (digit_t)cout - (digit_t)bout;              // if (cout, mc) >= 0 then mask = 0x00..0, else if (cout, mc) < 0 then mask = 0xFF..F
    3c18:	1a24      	subs	r4, r4, r0
    3c1a:	2300      	movs	r3, #0

    for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
        temp[i] = (order[i] & mask);
    3c1c:	4912      	ldr	r1, [pc, #72]	; (3c68 <Montgomery_multiply_mod_order+0xc4>)
    3c1e:	585a      	ldr	r2, [r3, r1]
    3c20:	4022      	ands	r2, r4
    3c22:	4668      	mov	r0, sp
    3c24:	501a      	str	r2, [r3, r0]
    3c26:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
    3c28:	2b20      	cmp	r3, #32
    3c2a:	d1f8      	bne.n	3c1e <Montgomery_multiply_mod_order+0x7a>
    3c2c:	2600      	movs	r6, #0
    3c2e:	2300      	movs	r3, #0
        ADDC(carry, a[i], b[i], carry, c[i]);
    3c30:	59aa      	ldr	r2, [r5, r6]
    3c32:	18d1      	adds	r1, r2, r3
    3c34:	4668      	mov	r0, sp
    3c36:	5834      	ldr	r4, [r6, r0]
    3c38:	190f      	adds	r7, r1, r4
    3c3a:	51af      	str	r7, [r5, r6]
    3c3c:	0008      	movs	r0, r1
    3c3e:	4058      	eors	r0, r3
    3c40:	4053      	eors	r3, r2
    3c42:	4318      	orrs	r0, r3
    3c44:	4048      	eors	r0, r1
    3c46:	000a      	movs	r2, r1
    3c48:	407a      	eors	r2, r7
    3c4a:	000b      	movs	r3, r1
    3c4c:	4063      	eors	r3, r4
    3c4e:	4313      	orrs	r3, r2
    3c50:	407b      	eors	r3, r7
    3c52:	4303      	orrs	r3, r0
    3c54:	0fdb      	lsrs	r3, r3, #31
    3c56:	3604      	adds	r6, #4
    for (i = 0; i < nwords; i++) {
    3c58:	2e20      	cmp	r6, #32
    3c5a:	d1e9      	bne.n	3c30 <Montgomery_multiply_mod_order+0x8c>
    }
    add(mc, temp, mc, NWORDS_ORDER);                   //  mc = mc + (mask & r)

    return;
}
    3c5c:	b031      	add	sp, #196	; 0xc4
    3c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c60:	00003aa1 	.word	0x00003aa1
    3c64:	00009e38 	.word	0x00009e38
    3c68:	00009e80 	.word	0x00009e80
    3c6c:	00003b49 	.word	0x00003b49

00003c70 <modulo_order>:


void modulo_order(digit_t* a, digit_t* c)
{ // Reduction modulo the order using Montgomery arithmetic
    3c70:	b530      	push	{r4, r5, lr}
    3c72:	b091      	sub	sp, #68	; 0x44
    3c74:	0004      	movs	r4, r0
    3c76:	000d      	movs	r5, r1
  // ma = a*Montgomery_Rprime mod r, where a,ma in [0, r-1], a,ma,r < 2^256
  // c = ma*1*Montgomery_Rprime^(-1) mod r, where ma,c in [0, r-1], ma,c,r < 2^256
	digit_t ma[NWORDS_ORDER], one[NWORDS_ORDER] = {0};
    3c78:	2220      	movs	r2, #32
    3c7a:	2100      	movs	r1, #0
    3c7c:	4668      	mov	r0, sp
    3c7e:	4b07      	ldr	r3, [pc, #28]	; (3c9c <modulo_order+0x2c>)
    3c80:	4798      	blx	r3
    
    one[0] = 1;
    3c82:	2301      	movs	r3, #1
    3c84:	9300      	str	r3, [sp, #0]
    Montgomery_multiply_mod_order(a, (digit_t*)&Montgomery_Rprime, ma);
    3c86:	aa08      	add	r2, sp, #32
    3c88:	4905      	ldr	r1, [pc, #20]	; (3ca0 <modulo_order+0x30>)
    3c8a:	0020      	movs	r0, r4
    3c8c:	4c05      	ldr	r4, [pc, #20]	; (3ca4 <modulo_order+0x34>)
    3c8e:	47a0      	blx	r4
    Montgomery_multiply_mod_order(ma, one, c);
    3c90:	002a      	movs	r2, r5
    3c92:	4669      	mov	r1, sp
    3c94:	a808      	add	r0, sp, #32
    3c96:	47a0      	blx	r4
}
    3c98:	b011      	add	sp, #68	; 0x44
    3c9a:	bd30      	pop	{r4, r5, pc}
    3c9c:	0000671f 	.word	0x0000671f
    3ca0:	00009e18 	.word	0x00009e18
    3ca4:	00003ba5 	.word	0x00003ba5

00003ca8 <conversion_to_odd>:


void conversion_to_odd(digit_t* k, digit_t* k_odd)
{ // Convert scalar to odd if even using the prime subgroup order r
    3ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3caa:	46d6      	mov	lr, sl
    3cac:	464f      	mov	r7, r9
    3cae:	4646      	mov	r6, r8
    3cb0:	b5c0      	push	{r6, r7, lr}
    3cb2:	4689      	mov	r9, r1
    digit_t mask;
    digit_t* order = (digit_t*)curve_order;
    unsigned int i, carry = 0;

    mask = ~(0 - (k[0] & 1));     
    3cb4:	2601      	movs	r6, #1
    3cb6:	6803      	ldr	r3, [r0, #0]
    3cb8:	401e      	ands	r6, r3
    3cba:	1e73      	subs	r3, r6, #1
    3cbc:	469c      	mov	ip, r3
    3cbe:	2500      	movs	r5, #0
    unsigned int i, carry = 0;
    3cc0:	2300      	movs	r3, #0

    for (i = 0; i < NWORDS_ORDER; i++) {   // If (k is odd) then k_odd = k else k_odd = k + r
        ADDC(carry, order[i] & mask, k[i], carry, k_odd[i]);
    3cc2:	4a11      	ldr	r2, [pc, #68]	; (3d08 <conversion_to_odd+0x60>)
    3cc4:	4692      	mov	sl, r2
    3cc6:	4652      	mov	r2, sl
    3cc8:	58aa      	ldr	r2, [r5, r2]
    3cca:	4661      	mov	r1, ip
    3ccc:	400a      	ands	r2, r1
    3cce:	18d4      	adds	r4, r2, r3
    3cd0:	5946      	ldr	r6, [r0, r5]
    3cd2:	19a1      	adds	r1, r4, r6
    3cd4:	464f      	mov	r7, r9
    3cd6:	5179      	str	r1, [r7, r5]
    3cd8:	0027      	movs	r7, r4
    3cda:	405f      	eors	r7, r3
    3cdc:	405a      	eors	r2, r3
    3cde:	433a      	orrs	r2, r7
    3ce0:	4062      	eors	r2, r4
    3ce2:	4690      	mov	r8, r2
    3ce4:	0022      	movs	r2, r4
    3ce6:	404a      	eors	r2, r1
    3ce8:	0023      	movs	r3, r4
    3cea:	4073      	eors	r3, r6
    3cec:	4313      	orrs	r3, r2
    3cee:	404b      	eors	r3, r1
    3cf0:	4642      	mov	r2, r8
    3cf2:	4313      	orrs	r3, r2
    3cf4:	0fdb      	lsrs	r3, r3, #31
    3cf6:	3504      	adds	r5, #4
    for (i = 0; i < NWORDS_ORDER; i++) {   // If (k is odd) then k_odd = k else k_odd = k + r
    3cf8:	2d20      	cmp	r5, #32
    3cfa:	d1e4      	bne.n	3cc6 <conversion_to_odd+0x1e>
    }
}
    3cfc:	bc1c      	pop	{r2, r3, r4}
    3cfe:	4690      	mov	r8, r2
    3d00:	4699      	mov	r9, r3
    3d02:	46a2      	mov	sl, r4
    3d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d06:	46c0      	nop			; (mov r8, r8)
    3d08:	00009e80 	.word	0x00009e80

00003d0c <vdiv1271>:


__inline void vdiv1271(uint32_t* a) 
{ // GF(p) division by two, c = a/2 mod p
    3d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Redundant representation: 23/26/26/26/26-bit
    digit_t mask;

    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    3d0e:	6803      	ldr	r3, [r0, #0]
    3d10:	07dc      	lsls	r4, r3, #31
    3d12:	17e4      	asrs	r4, r4, #31
    3d14:	09a6      	lsrs	r6, r4, #6
    
    a[0] += mask;
    a[1] += mask;
    3d16:	6842      	ldr	r2, [r0, #4]
    3d18:	18b1      	adds	r1, r6, r2
    a[2] += mask;
    3d1a:	6882      	ldr	r2, [r0, #8]
    3d1c:	18b2      	adds	r2, r6, r2
    a[3] += mask;
    3d1e:	68c5      	ldr	r5, [r0, #12]
    3d20:	1975      	adds	r5, r6, r5
    a[4] += (mask >> 3);
    3d22:	0a64      	lsrs	r4, r4, #9
    3d24:	6907      	ldr	r7, [r0, #16]
    3d26:	46bc      	mov	ip, r7
    3d28:	4464      	add	r4, ip
    a[0] += mask;
    3d2a:	199b      	adds	r3, r3, r6

    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    3d2c:	105b      	asrs	r3, r3, #1
    3d2e:	064f      	lsls	r7, r1, #25
    3d30:	2680      	movs	r6, #128	; 0x80
    3d32:	04b6      	lsls	r6, r6, #18
    3d34:	4037      	ands	r7, r6
    3d36:	19db      	adds	r3, r3, r7
    3d38:	6003      	str	r3, [r0, #0]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    3d3a:	0653      	lsls	r3, r2, #25
    3d3c:	4033      	ands	r3, r6
    3d3e:	1049      	asrs	r1, r1, #1
    3d40:	1859      	adds	r1, r3, r1
    3d42:	6041      	str	r1, [r0, #4]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    3d44:	0669      	lsls	r1, r5, #25
    3d46:	4031      	ands	r1, r6
    3d48:	1052      	asrs	r2, r2, #1
    3d4a:	188a      	adds	r2, r1, r2
    3d4c:	6082      	str	r2, [r0, #8]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    3d4e:	0663      	lsls	r3, r4, #25
    3d50:	4033      	ands	r3, r6
    3d52:	106d      	asrs	r5, r5, #1
    3d54:	195d      	adds	r5, r3, r5
    3d56:	60c5      	str	r5, [r0, #12]
    a[4] = ((sdigit_t)a[4] >> 1);
    3d58:	1064      	asrs	r4, r4, #1
    3d5a:	6104      	str	r4, [r0, #16]
}
    3d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003d5e <v2copy1271>:


void v2copy1271(v2elm_t a, v2elm_t c) 
{ // Copy vectorized GF(p^2) element, c <- a

    c[0] = a[0]; c[1] = a[1]; c[2] = a[2]; c[3] = a[3]; c[4] = a[4]; 
    3d5e:	6803      	ldr	r3, [r0, #0]
    3d60:	600b      	str	r3, [r1, #0]
    3d62:	6843      	ldr	r3, [r0, #4]
    3d64:	604b      	str	r3, [r1, #4]
    3d66:	6883      	ldr	r3, [r0, #8]
    3d68:	608b      	str	r3, [r1, #8]
    3d6a:	68c3      	ldr	r3, [r0, #12]
    3d6c:	60cb      	str	r3, [r1, #12]
    3d6e:	6903      	ldr	r3, [r0, #16]
    3d70:	610b      	str	r3, [r1, #16]
    c[5] = a[5]; c[6] = a[6]; c[7] = a[7]; c[8] = a[8]; c[9] = a[9];
    3d72:	6943      	ldr	r3, [r0, #20]
    3d74:	614b      	str	r3, [r1, #20]
    3d76:	6983      	ldr	r3, [r0, #24]
    3d78:	618b      	str	r3, [r1, #24]
    3d7a:	69c3      	ldr	r3, [r0, #28]
    3d7c:	61cb      	str	r3, [r1, #28]
    3d7e:	6a03      	ldr	r3, [r0, #32]
    3d80:	620b      	str	r3, [r1, #32]
    3d82:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3d84:	624b      	str	r3, [r1, #36]	; 0x24
}
    3d86:	4770      	bx	lr

00003d88 <table_lookup_1x8>:

#include "FourQ_internal.h"                        


void table_lookup_1x8(vpoint_extproj_precomp_t* table, vpoint_extproj_precomp_t P, unsigned int digit, unsigned int sign_mask)
{ // Constant-time table lookup to extract a point represented as (X+Y,Y-X,2Z,2dT) corresponding to extended twisted Edwards coordinates (X:Y:Z:T)
    3d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d8a:	46d6      	mov	lr, sl
    3d8c:	464f      	mov	r7, r9
    3d8e:	4646      	mov	r6, r8
    3d90:	b5c0      	push	{r6, r7, lr}
    3d92:	b0d2      	sub	sp, #328	; 0x148
    3d94:	0004      	movs	r4, r0
    3d96:	468a      	mov	sl, r1
    3d98:	4690      	mov	r8, r2
    3d9a:	001e      	movs	r6, r3
#else
    vpoint_extproj_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                  
    ecccopy_precomp(table[0], point);                                        // point = table[0]
    3d9c:	a92a      	add	r1, sp, #168	; 0xa8
    3d9e:	4dcc      	ldr	r5, [pc, #816]	; (40d0 <table_lookup_1x8+0x348>)
    3da0:	47a8      	blx	r5
    3da2:	0020      	movs	r0, r4
    3da4:	3028      	adds	r0, #40	; 0x28
    3da6:	a934      	add	r1, sp, #208	; 0xd0
    3da8:	47a8      	blx	r5
    3daa:	0020      	movs	r0, r4
    3dac:	3050      	adds	r0, #80	; 0x50
    3dae:	a93e      	add	r1, sp, #248	; 0xf8
    3db0:	47a8      	blx	r5
    3db2:	0020      	movs	r0, r4
    3db4:	3078      	adds	r0, #120	; 0x78
    3db6:	a948      	add	r1, sp, #288	; 0x120
    3db8:	47a8      	blx	r5
    3dba:	0025      	movs	r5, r4
    3dbc:	35a0      	adds	r5, #160	; 0xa0
    3dbe:	23a0      	movs	r3, #160	; 0xa0
    3dc0:	00db      	lsls	r3, r3, #3
    3dc2:	4699      	mov	r9, r3
    3dc4:	44a1      	add	r9, r4
    for (i = 1; i < 8; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    3dc6:	4fc2      	ldr	r7, [pc, #776]	; (40d0 <table_lookup_1x8+0x348>)
        digit--;
    3dc8:	2301      	movs	r3, #1
    3dca:	425b      	negs	r3, r3
    3dcc:	469c      	mov	ip, r3
    3dce:	44e0      	add	r8, ip
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    3dd0:	4643      	mov	r3, r8
    3dd2:	0fdc      	lsrs	r4, r3, #31
    3dd4:	4464      	add	r4, ip
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    3dd6:	a902      	add	r1, sp, #8
    3dd8:	0028      	movs	r0, r5
    3dda:	47b8      	blx	r7
    3ddc:	0028      	movs	r0, r5
    3dde:	3028      	adds	r0, #40	; 0x28
    3de0:	a90c      	add	r1, sp, #48	; 0x30
    3de2:	47b8      	blx	r7
    3de4:	0028      	movs	r0, r5
    3de6:	3050      	adds	r0, #80	; 0x50
    3de8:	a916      	add	r1, sp, #88	; 0x58
    3dea:	47b8      	blx	r7
    3dec:	0028      	movs	r0, r5
    3dee:	3078      	adds	r0, #120	; 0x78
    3df0:	a920      	add	r1, sp, #128	; 0x80
    3df2:	47b8      	blx	r7
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point            
        point->xy[0] = (mask & (point->xy[0] ^ temp_point->xy[0])) ^ point->xy[0];
    3df4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    3df6:	9b02      	ldr	r3, [sp, #8]
    3df8:	4053      	eors	r3, r2
    3dfa:	4023      	ands	r3, r4
    3dfc:	4053      	eors	r3, r2
    3dfe:	932a      	str	r3, [sp, #168]	; 0xa8
        point->xy[1] = (mask & (point->xy[1] ^ temp_point->xy[1])) ^ point->xy[1];
    3e00:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    3e02:	9b03      	ldr	r3, [sp, #12]
    3e04:	4053      	eors	r3, r2
    3e06:	4023      	ands	r3, r4
    3e08:	4053      	eors	r3, r2
    3e0a:	932b      	str	r3, [sp, #172]	; 0xac
        point->xy[2] = (mask & (point->xy[2] ^ temp_point->xy[2])) ^ point->xy[2];
    3e0c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    3e0e:	9b04      	ldr	r3, [sp, #16]
    3e10:	4053      	eors	r3, r2
    3e12:	4023      	ands	r3, r4
    3e14:	4053      	eors	r3, r2
    3e16:	932c      	str	r3, [sp, #176]	; 0xb0
        point->xy[3] = (mask & (point->xy[3] ^ temp_point->xy[3])) ^ point->xy[3];
    3e18:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    3e1a:	9b05      	ldr	r3, [sp, #20]
    3e1c:	4053      	eors	r3, r2
    3e1e:	4023      	ands	r3, r4
    3e20:	4053      	eors	r3, r2
    3e22:	932d      	str	r3, [sp, #180]	; 0xb4
        point->xy[4] = (mask & (point->xy[4] ^ temp_point->xy[4])) ^ point->xy[4];
    3e24:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    3e26:	9b06      	ldr	r3, [sp, #24]
    3e28:	4053      	eors	r3, r2
    3e2a:	4023      	ands	r3, r4
    3e2c:	4053      	eors	r3, r2
    3e2e:	932e      	str	r3, [sp, #184]	; 0xb8
        point->xy[5] = (mask & (point->xy[5] ^ temp_point->xy[5])) ^ point->xy[5];
    3e30:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    3e32:	9b07      	ldr	r3, [sp, #28]
    3e34:	4053      	eors	r3, r2
    3e36:	4023      	ands	r3, r4
    3e38:	4053      	eors	r3, r2
    3e3a:	932f      	str	r3, [sp, #188]	; 0xbc
        point->xy[6] = (mask & (point->xy[6] ^ temp_point->xy[6])) ^ point->xy[6];
    3e3c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    3e3e:	9b08      	ldr	r3, [sp, #32]
    3e40:	4053      	eors	r3, r2
    3e42:	4023      	ands	r3, r4
    3e44:	4053      	eors	r3, r2
    3e46:	9330      	str	r3, [sp, #192]	; 0xc0
        point->xy[7] = (mask & (point->xy[7] ^ temp_point->xy[7])) ^ point->xy[7];
    3e48:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    3e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e4c:	4053      	eors	r3, r2
    3e4e:	4023      	ands	r3, r4
    3e50:	4053      	eors	r3, r2
    3e52:	9331      	str	r3, [sp, #196]	; 0xc4
        point->xy[8] = (mask & (point->xy[8] ^ temp_point->xy[8])) ^ point->xy[8];
    3e54:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    3e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3e58:	4053      	eors	r3, r2
    3e5a:	4023      	ands	r3, r4
    3e5c:	4053      	eors	r3, r2
    3e5e:	9332      	str	r3, [sp, #200]	; 0xc8
        point->xy[9] = (mask & (point->xy[9] ^ temp_point->xy[9])) ^ point->xy[9];
    3e60:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    3e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3e64:	4053      	eors	r3, r2
    3e66:	4023      	ands	r3, r4
    3e68:	4053      	eors	r3, r2
    3e6a:	9333      	str	r3, [sp, #204]	; 0xcc
        point->yx[0] = (mask & (point->yx[0] ^ temp_point->yx[0])) ^ point->yx[0];
    3e6c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    3e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3e70:	4053      	eors	r3, r2
    3e72:	4023      	ands	r3, r4
    3e74:	4053      	eors	r3, r2
    3e76:	9334      	str	r3, [sp, #208]	; 0xd0
        point->yx[1] = (mask & (point->yx[1] ^ temp_point->yx[1])) ^ point->yx[1];
    3e78:	9a35      	ldr	r2, [sp, #212]	; 0xd4
    3e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3e7c:	4053      	eors	r3, r2
    3e7e:	4023      	ands	r3, r4
    3e80:	4053      	eors	r3, r2
    3e82:	9335      	str	r3, [sp, #212]	; 0xd4
        point->yx[2] = (mask & (point->yx[2] ^ temp_point->yx[2])) ^ point->yx[2];
    3e84:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    3e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3e88:	4053      	eors	r3, r2
    3e8a:	4023      	ands	r3, r4
    3e8c:	4053      	eors	r3, r2
    3e8e:	9336      	str	r3, [sp, #216]	; 0xd8
        point->yx[3] = (mask & (point->yx[3] ^ temp_point->yx[3])) ^ point->yx[3];
    3e90:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    3e92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3e94:	4053      	eors	r3, r2
    3e96:	4023      	ands	r3, r4
    3e98:	4053      	eors	r3, r2
    3e9a:	9337      	str	r3, [sp, #220]	; 0xdc
        point->yx[4] = (mask & (point->yx[4] ^ temp_point->yx[4])) ^ point->yx[4];
    3e9c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    3e9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3ea0:	4053      	eors	r3, r2
    3ea2:	4023      	ands	r3, r4
    3ea4:	4053      	eors	r3, r2
    3ea6:	9338      	str	r3, [sp, #224]	; 0xe0
        point->yx[5] = (mask & (point->yx[5] ^ temp_point->yx[5])) ^ point->yx[5];
    3ea8:	9a39      	ldr	r2, [sp, #228]	; 0xe4
    3eaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3eac:	4053      	eors	r3, r2
    3eae:	4023      	ands	r3, r4
    3eb0:	4053      	eors	r3, r2
    3eb2:	9339      	str	r3, [sp, #228]	; 0xe4
        point->yx[6] = (mask & (point->yx[6] ^ temp_point->yx[6])) ^ point->yx[6];
    3eb4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    3eb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3eb8:	4053      	eors	r3, r2
    3eba:	4023      	ands	r3, r4
    3ebc:	4053      	eors	r3, r2
    3ebe:	933a      	str	r3, [sp, #232]	; 0xe8
        point->yx[7] = (mask & (point->yx[7] ^ temp_point->yx[7])) ^ point->yx[7];
    3ec0:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    3ec2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3ec4:	4053      	eors	r3, r2
    3ec6:	4023      	ands	r3, r4
    3ec8:	4053      	eors	r3, r2
    3eca:	933b      	str	r3, [sp, #236]	; 0xec
        point->yx[8] = (mask & (point->yx[8] ^ temp_point->yx[8])) ^ point->yx[8];
    3ecc:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    3ece:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3ed0:	4053      	eors	r3, r2
    3ed2:	4023      	ands	r3, r4
    3ed4:	4053      	eors	r3, r2
    3ed6:	933c      	str	r3, [sp, #240]	; 0xf0
        point->yx[9] = (mask & (point->yx[9] ^ temp_point->yx[9])) ^ point->yx[9];
    3ed8:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    3eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3edc:	4053      	eors	r3, r2
    3ede:	4023      	ands	r3, r4
    3ee0:	4053      	eors	r3, r2
    3ee2:	933d      	str	r3, [sp, #244]	; 0xf4
        point->z2[0] = (mask & (point->z2[0] ^ temp_point->z2[0])) ^ point->z2[0];
    3ee4:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    3ee6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3ee8:	4053      	eors	r3, r2
    3eea:	4023      	ands	r3, r4
    3eec:	4053      	eors	r3, r2
    3eee:	933e      	str	r3, [sp, #248]	; 0xf8
        point->z2[1] = (mask & (point->z2[1] ^ temp_point->z2[1])) ^ point->z2[1];
    3ef0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    3ef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3ef4:	4053      	eors	r3, r2
    3ef6:	4023      	ands	r3, r4
    3ef8:	4053      	eors	r3, r2
    3efa:	933f      	str	r3, [sp, #252]	; 0xfc
        point->z2[2] = (mask & (point->z2[2] ^ temp_point->z2[2])) ^ point->z2[2];
    3efc:	9a40      	ldr	r2, [sp, #256]	; 0x100
    3efe:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3f00:	4053      	eors	r3, r2
    3f02:	4023      	ands	r3, r4
    3f04:	4053      	eors	r3, r2
    3f06:	9340      	str	r3, [sp, #256]	; 0x100
        point->z2[3] = (mask & (point->z2[3] ^ temp_point->z2[3])) ^ point->z2[3];
    3f08:	9a41      	ldr	r2, [sp, #260]	; 0x104
    3f0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3f0c:	4053      	eors	r3, r2
    3f0e:	4023      	ands	r3, r4
    3f10:	4053      	eors	r3, r2
    3f12:	9341      	str	r3, [sp, #260]	; 0x104
        point->z2[4] = (mask & (point->z2[4] ^ temp_point->z2[4])) ^ point->z2[4];
    3f14:	9a42      	ldr	r2, [sp, #264]	; 0x108
    3f16:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    3f18:	4053      	eors	r3, r2
    3f1a:	4023      	ands	r3, r4
    3f1c:	4053      	eors	r3, r2
    3f1e:	9342      	str	r3, [sp, #264]	; 0x108
        point->z2[5] = (mask & (point->z2[5] ^ temp_point->z2[5])) ^ point->z2[5];
    3f20:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3f22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    3f24:	4053      	eors	r3, r2
    3f26:	4023      	ands	r3, r4
    3f28:	4053      	eors	r3, r2
    3f2a:	9343      	str	r3, [sp, #268]	; 0x10c
        point->z2[6] = (mask & (point->z2[6] ^ temp_point->z2[6])) ^ point->z2[6];
    3f2c:	9a44      	ldr	r2, [sp, #272]	; 0x110
    3f2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    3f30:	4053      	eors	r3, r2
    3f32:	4023      	ands	r3, r4
    3f34:	4053      	eors	r3, r2
    3f36:	9344      	str	r3, [sp, #272]	; 0x110
        point->z2[7] = (mask & (point->z2[7] ^ temp_point->z2[7])) ^ point->z2[7];
    3f38:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3f3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    3f3c:	4053      	eors	r3, r2
    3f3e:	4023      	ands	r3, r4
    3f40:	4053      	eors	r3, r2
    3f42:	9345      	str	r3, [sp, #276]	; 0x114
        point->z2[8] = (mask & (point->z2[8] ^ temp_point->z2[8])) ^ point->z2[8];
    3f44:	9a46      	ldr	r2, [sp, #280]	; 0x118
    3f46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    3f48:	4053      	eors	r3, r2
    3f4a:	4023      	ands	r3, r4
    3f4c:	4053      	eors	r3, r2
    3f4e:	9346      	str	r3, [sp, #280]	; 0x118
        point->z2[9] = (mask & (point->z2[9] ^ temp_point->z2[9])) ^ point->z2[9];
    3f50:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    3f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    3f54:	4053      	eors	r3, r2
    3f56:	4023      	ands	r3, r4
    3f58:	4053      	eors	r3, r2
    3f5a:	9347      	str	r3, [sp, #284]	; 0x11c
        point->t2[0] = (mask & (point->t2[0] ^ temp_point->t2[0])) ^ point->t2[0];
    3f5c:	9a48      	ldr	r2, [sp, #288]	; 0x120
    3f5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3f60:	4053      	eors	r3, r2
    3f62:	4023      	ands	r3, r4
    3f64:	4053      	eors	r3, r2
    3f66:	9348      	str	r3, [sp, #288]	; 0x120
        point->t2[1] = (mask & (point->t2[1] ^ temp_point->t2[1])) ^ point->t2[1];
    3f68:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    3f6c:	4053      	eors	r3, r2
    3f6e:	4023      	ands	r3, r4
    3f70:	4053      	eors	r3, r2
    3f72:	9349      	str	r3, [sp, #292]	; 0x124
        point->t2[2] = (mask & (point->t2[2] ^ temp_point->t2[2])) ^ point->t2[2];
    3f74:	2280      	movs	r2, #128	; 0x80
    3f76:	ab02      	add	r3, sp, #8
    3f78:	21a0      	movs	r1, #160	; 0xa0
    3f7a:	185b      	adds	r3, r3, r1
    3f7c:	5899      	ldr	r1, [r3, r2]
    3f7e:	ab02      	add	r3, sp, #8
    3f80:	589b      	ldr	r3, [r3, r2]
    3f82:	404b      	eors	r3, r1
    3f84:	4023      	ands	r3, r4
    3f86:	404b      	eors	r3, r1
    3f88:	a902      	add	r1, sp, #8
    3f8a:	20a0      	movs	r0, #160	; 0xa0
    3f8c:	1809      	adds	r1, r1, r0
    3f8e:	508b      	str	r3, [r1, r2]
        point->t2[3] = (mask & (point->t2[3] ^ temp_point->t2[3])) ^ point->t2[3];
    3f90:	3204      	adds	r2, #4
    3f92:	ab02      	add	r3, sp, #8
    3f94:	21a0      	movs	r1, #160	; 0xa0
    3f96:	185b      	adds	r3, r3, r1
    3f98:	5899      	ldr	r1, [r3, r2]
    3f9a:	ab02      	add	r3, sp, #8
    3f9c:	589b      	ldr	r3, [r3, r2]
    3f9e:	404b      	eors	r3, r1
    3fa0:	4023      	ands	r3, r4
    3fa2:	404b      	eors	r3, r1
    3fa4:	a902      	add	r1, sp, #8
    3fa6:	1809      	adds	r1, r1, r0
    3fa8:	508b      	str	r3, [r1, r2]
        point->t2[4] = (mask & (point->t2[4] ^ temp_point->t2[4])) ^ point->t2[4];
    3faa:	3204      	adds	r2, #4
    3fac:	ab02      	add	r3, sp, #8
    3fae:	21a0      	movs	r1, #160	; 0xa0
    3fb0:	185b      	adds	r3, r3, r1
    3fb2:	5899      	ldr	r1, [r3, r2]
    3fb4:	ab02      	add	r3, sp, #8
    3fb6:	589b      	ldr	r3, [r3, r2]
    3fb8:	404b      	eors	r3, r1
    3fba:	4023      	ands	r3, r4
    3fbc:	404b      	eors	r3, r1
    3fbe:	a902      	add	r1, sp, #8
    3fc0:	1809      	adds	r1, r1, r0
    3fc2:	508b      	str	r3, [r1, r2]
        point->t2[5] = (mask & (point->t2[5] ^ temp_point->t2[5])) ^ point->t2[5];
    3fc4:	3204      	adds	r2, #4
    3fc6:	ab02      	add	r3, sp, #8
    3fc8:	21a0      	movs	r1, #160	; 0xa0
    3fca:	185b      	adds	r3, r3, r1
    3fcc:	5899      	ldr	r1, [r3, r2]
    3fce:	ab02      	add	r3, sp, #8
    3fd0:	589b      	ldr	r3, [r3, r2]
    3fd2:	404b      	eors	r3, r1
    3fd4:	4023      	ands	r3, r4
    3fd6:	404b      	eors	r3, r1
    3fd8:	a902      	add	r1, sp, #8
    3fda:	1809      	adds	r1, r1, r0
    3fdc:	508b      	str	r3, [r1, r2]
        point->t2[6] = (mask & (point->t2[6] ^ temp_point->t2[6])) ^ point->t2[6];
    3fde:	3204      	adds	r2, #4
    3fe0:	ab02      	add	r3, sp, #8
    3fe2:	21a0      	movs	r1, #160	; 0xa0
    3fe4:	185b      	adds	r3, r3, r1
    3fe6:	5899      	ldr	r1, [r3, r2]
    3fe8:	ab02      	add	r3, sp, #8
    3fea:	589b      	ldr	r3, [r3, r2]
    3fec:	404b      	eors	r3, r1
    3fee:	4023      	ands	r3, r4
    3ff0:	404b      	eors	r3, r1
    3ff2:	a902      	add	r1, sp, #8
    3ff4:	1809      	adds	r1, r1, r0
    3ff6:	508b      	str	r3, [r1, r2]
        point->t2[7] = (mask & (point->t2[7] ^ temp_point->t2[7])) ^ point->t2[7];
    3ff8:	3204      	adds	r2, #4
    3ffa:	ab02      	add	r3, sp, #8
    3ffc:	21a0      	movs	r1, #160	; 0xa0
    3ffe:	185b      	adds	r3, r3, r1
    4000:	5899      	ldr	r1, [r3, r2]
    4002:	ab02      	add	r3, sp, #8
    4004:	589b      	ldr	r3, [r3, r2]
    4006:	404b      	eors	r3, r1
    4008:	4023      	ands	r3, r4
    400a:	404b      	eors	r3, r1
    400c:	a902      	add	r1, sp, #8
    400e:	1809      	adds	r1, r1, r0
    4010:	508b      	str	r3, [r1, r2]
        point->t2[8] = (mask & (point->t2[8] ^ temp_point->t2[8])) ^ point->t2[8];
    4012:	3204      	adds	r2, #4
    4014:	ab02      	add	r3, sp, #8
    4016:	21a0      	movs	r1, #160	; 0xa0
    4018:	185b      	adds	r3, r3, r1
    401a:	5899      	ldr	r1, [r3, r2]
    401c:	ab02      	add	r3, sp, #8
    401e:	589b      	ldr	r3, [r3, r2]
    4020:	404b      	eors	r3, r1
    4022:	4023      	ands	r3, r4
    4024:	404b      	eors	r3, r1
    4026:	a902      	add	r1, sp, #8
    4028:	1809      	adds	r1, r1, r0
    402a:	508b      	str	r3, [r1, r2]
        point->t2[9] = (mask & (point->t2[9] ^ temp_point->t2[9])) ^ point->t2[9];
    402c:	239c      	movs	r3, #156	; 0x9c
    402e:	aa02      	add	r2, sp, #8
    4030:	21a0      	movs	r1, #160	; 0xa0
    4032:	1852      	adds	r2, r2, r1
    4034:	58d1      	ldr	r1, [r2, r3]
    4036:	aa02      	add	r2, sp, #8
    4038:	58d2      	ldr	r2, [r2, r3]
    403a:	9201      	str	r2, [sp, #4]
    403c:	404a      	eors	r2, r1
    403e:	4014      	ands	r4, r2
    4040:	404c      	eors	r4, r1
    4042:	aa02      	add	r2, sp, #8
    4044:	21a0      	movs	r1, #160	; 0xa0
    4046:	1852      	adds	r2, r2, r1
    4048:	50d4      	str	r4, [r2, r3]
    404a:	35a0      	adds	r5, #160	; 0xa0
    for (i = 1; i < 8; i++)
    404c:	454d      	cmp	r5, r9
    404e:	d000      	beq.n	4052 <table_lookup_1x8+0x2ca>
    4050:	e6ba      	b.n	3dc8 <table_lookup_1x8+0x40>
    }
    
    v2copy1271(point->t2, temp_point->t2);
    4052:	a920      	add	r1, sp, #128	; 0x80
    4054:	a848      	add	r0, sp, #288	; 0x120
    4056:	4c1e      	ldr	r4, [pc, #120]	; (40d0 <table_lookup_1x8+0x348>)
    4058:	47a0      	blx	r4
    v2copy1271(point->xy, temp_point->yx);                                   // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    405a:	a90c      	add	r1, sp, #48	; 0x30
    405c:	a82a      	add	r0, sp, #168	; 0xa8
    405e:	47a0      	blx	r4
    v2copy1271(point->yx, temp_point->xy);                                   
    4060:	a902      	add	r1, sp, #8
    4062:	a834      	add	r0, sp, #208	; 0xd0
    4064:	47a0      	blx	r4
    vneg1271(&temp_point->t2[0]);                                            // Negate 2dt coordinate
    4066:	a820      	add	r0, sp, #128	; 0x80
    4068:	4c1a      	ldr	r4, [pc, #104]	; (40d4 <table_lookup_1x8+0x34c>)
    406a:	47a0      	blx	r4
    vneg1271(&temp_point->t2[VWORDS_FIELD]);             
    406c:	a825      	add	r0, sp, #148	; 0x94
    406e:	47a0      	blx	r4
    4070:	ab2a      	add	r3, sp, #168	; 0xa8
    4072:	a902      	add	r1, sp, #8
    4074:	a834      	add	r0, sp, #208	; 0xd0
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                   // If sign_mask = 0 then choose negative of the point
        point->xy[j] = ((digit_t)((int)sign_mask) & (point->xy[j] ^ temp_point->xy[j])) ^ temp_point->xy[j];
    4076:	680c      	ldr	r4, [r1, #0]
    4078:	681a      	ldr	r2, [r3, #0]
    407a:	4062      	eors	r2, r4
    407c:	4032      	ands	r2, r6
    407e:	4062      	eors	r2, r4
    4080:	601a      	str	r2, [r3, #0]
        point->yx[j] = ((digit_t)((int)sign_mask) & (point->yx[j] ^ temp_point->yx[j])) ^ temp_point->yx[j];
    4082:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    4084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4086:	4062      	eors	r2, r4
    4088:	4032      	ands	r2, r6
    408a:	4062      	eors	r2, r4
    408c:	629a      	str	r2, [r3, #40]	; 0x28
        point->t2[j] = ((digit_t)((int)sign_mask) & (point->t2[j] ^ temp_point->t2[j])) ^ temp_point->t2[j];
    408e:	6f8c      	ldr	r4, [r1, #120]	; 0x78
    4090:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    4092:	4062      	eors	r2, r4
    4094:	4032      	ands	r2, r6
    4096:	4062      	eors	r2, r4
    4098:	679a      	str	r2, [r3, #120]	; 0x78
    409a:	3304      	adds	r3, #4
    409c:	3104      	adds	r1, #4
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                   // If sign_mask = 0 then choose negative of the point
    409e:	4283      	cmp	r3, r0
    40a0:	d1e9      	bne.n	4076 <table_lookup_1x8+0x2ee>
    }                                
    ecccopy_precomp(point, P); 
    40a2:	4651      	mov	r1, sl
    40a4:	a82a      	add	r0, sp, #168	; 0xa8
    40a6:	4c0a      	ldr	r4, [pc, #40]	; (40d0 <table_lookup_1x8+0x348>)
    40a8:	47a0      	blx	r4
    40aa:	4651      	mov	r1, sl
    40ac:	3128      	adds	r1, #40	; 0x28
    40ae:	a834      	add	r0, sp, #208	; 0xd0
    40b0:	47a0      	blx	r4
    40b2:	4651      	mov	r1, sl
    40b4:	3150      	adds	r1, #80	; 0x50
    40b6:	a83e      	add	r0, sp, #248	; 0xf8
    40b8:	47a0      	blx	r4
    40ba:	4651      	mov	r1, sl
    40bc:	3178      	adds	r1, #120	; 0x78
    40be:	a848      	add	r0, sp, #288	; 0x120
    40c0:	47a0      	blx	r4
#endif
}
    40c2:	b052      	add	sp, #328	; 0x148
    40c4:	bc1c      	pop	{r2, r3, r4}
    40c6:	4690      	mov	r8, r2
    40c8:	4699      	mov	r9, r3
    40ca:	46a2      	mov	sl, r4
    40cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40ce:	46c0      	nop			; (mov r8, r8)
    40d0:	00003d5f 	.word	0x00003d5f
    40d4:	000031a9 	.word	0x000031a9

000040d8 <table_lookup_fixed_base>:


void table_lookup_fixed_base(vpoint_precomp_t* table, vpoint_precomp_t P, unsigned int digit, unsigned int sign)
{ // Constant-time table lookup to extract a point represented as (x+y,y-x,2t) corresponding to extended twisted Edwards coordinates (X:Y:Z:T) with Z=1
    40d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    40da:	46de      	mov	lr, fp
    40dc:	4657      	mov	r7, sl
    40de:	464e      	mov	r6, r9
    40e0:	4645      	mov	r5, r8
    40e2:	b5e0      	push	{r5, r6, r7, lr}
    40e4:	b0bf      	sub	sp, #252	; 0xfc
    40e6:	0004      	movs	r4, r0
    40e8:	9101      	str	r1, [sp, #4]
    40ea:	4692      	mov	sl, r2
    40ec:	469b      	mov	fp, r3
#else
    vpoint_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                   
    ecccopy_precomp_fixed_base(table[0], point);                             // point = table[0]
    40ee:	a920      	add	r1, sp, #128	; 0x80
    40f0:	4d42      	ldr	r5, [pc, #264]	; (41fc <table_lookup_fixed_base+0x124>)
    40f2:	47a8      	blx	r5
    40f4:	0020      	movs	r0, r4
    40f6:	3028      	adds	r0, #40	; 0x28
    40f8:	a92a      	add	r1, sp, #168	; 0xa8
    40fa:	47a8      	blx	r5
    40fc:	0020      	movs	r0, r4
    40fe:	3050      	adds	r0, #80	; 0x50
    4100:	a934      	add	r1, sp, #208	; 0xd0
    4102:	47a8      	blx	r5
    4104:	0027      	movs	r7, r4
    4106:	3778      	adds	r7, #120	; 0x78
    4108:	0023      	movs	r3, r4
    410a:	22f0      	movs	r2, #240	; 0xf0
    410c:	00d2      	lsls	r2, r2, #3
    410e:	4694      	mov	ip, r2
    4110:	4463      	add	r3, ip
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    4112:	4a3a      	ldr	r2, [pc, #232]	; (41fc <table_lookup_fixed_base+0x124>)
    4114:	4691      	mov	r9, r2
    4116:	4698      	mov	r8, r3
    4118:	4654      	mov	r4, sl
    411a:	e003      	b.n	4124 <table_lookup_fixed_base+0x4c>
    411c:	4664      	mov	r4, ip
    411e:	3778      	adds	r7, #120	; 0x78
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    4120:	4547      	cmp	r7, r8
    4122:	d02e      	beq.n	4182 <table_lookup_fixed_base+0xaa>
        digit--;
    4124:	3c01      	subs	r4, #1
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    4126:	0fe5      	lsrs	r5, r4, #31
    4128:	3d01      	subs	r5, #1
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    412a:	a902      	add	r1, sp, #8
    412c:	0038      	movs	r0, r7
    412e:	47c8      	blx	r9
    4130:	0038      	movs	r0, r7
    4132:	3028      	adds	r0, #40	; 0x28
    4134:	a90c      	add	r1, sp, #48	; 0x30
    4136:	47c8      	blx	r9
    4138:	0038      	movs	r0, r7
    413a:	3050      	adds	r0, #80	; 0x50
    413c:	a916      	add	r1, sp, #88	; 0x58
    413e:	47c8      	blx	r9
    4140:	ae20      	add	r6, sp, #128	; 0x80
    4142:	ab02      	add	r3, sp, #8
    4144:	469a      	mov	sl, r3
    4146:	a82a      	add	r0, sp, #168	; 0xa8
    4148:	0019      	movs	r1, r3
    414a:	0032      	movs	r2, r6
    414c:	46a4      	mov	ip, r4
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point
        for (j = 0; j < 2*VWORDS_FIELD; j++) {
            point->xy[j] = (mask & (point->xy[j] ^ temp_point->xy[j])) ^ point->xy[j];
    414e:	6813      	ldr	r3, [r2, #0]
    4150:	680c      	ldr	r4, [r1, #0]
    4152:	4063      	eors	r3, r4
    4154:	402b      	ands	r3, r5
    4156:	6814      	ldr	r4, [r2, #0]
    4158:	4063      	eors	r3, r4
    415a:	6013      	str	r3, [r2, #0]
            point->yx[j] = (mask & (point->yx[j] ^ temp_point->yx[j])) ^ point->yx[j];
    415c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    415e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    4160:	4063      	eors	r3, r4
    4162:	402b      	ands	r3, r5
    4164:	6a94      	ldr	r4, [r2, #40]	; 0x28
    4166:	4063      	eors	r3, r4
    4168:	6293      	str	r3, [r2, #40]	; 0x28
            point->t2[j] = (mask & (point->t2[j] ^ temp_point->t2[j])) ^ point->t2[j];
    416a:	6d13      	ldr	r3, [r2, #80]	; 0x50
    416c:	6d0c      	ldr	r4, [r1, #80]	; 0x50
    416e:	4063      	eors	r3, r4
    4170:	402b      	ands	r3, r5
    4172:	6d14      	ldr	r4, [r2, #80]	; 0x50
    4174:	4063      	eors	r3, r4
    4176:	6513      	str	r3, [r2, #80]	; 0x50
    4178:	3204      	adds	r2, #4
    417a:	3104      	adds	r1, #4
        for (j = 0; j < 2*VWORDS_FIELD; j++) {
    417c:	4282      	cmp	r2, r0
    417e:	d1e6      	bne.n	414e <table_lookup_fixed_base+0x76>
    4180:	e7cc      	b.n	411c <table_lookup_fixed_base+0x44>
    4182:	0014      	movs	r4, r2
        }
    }
    
    v2copy1271(point->t2, temp_point->t2);
    4184:	a916      	add	r1, sp, #88	; 0x58
    4186:	a834      	add	r0, sp, #208	; 0xd0
    4188:	4d1c      	ldr	r5, [pc, #112]	; (41fc <table_lookup_fixed_base+0x124>)
    418a:	47a8      	blx	r5
    v2copy1271(point->xy, temp_point->yx);                                  // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    418c:	a90c      	add	r1, sp, #48	; 0x30
    418e:	a820      	add	r0, sp, #128	; 0x80
    4190:	47a8      	blx	r5
    v2copy1271(point->yx, temp_point->xy);                                   
    4192:	a902      	add	r1, sp, #8
    4194:	a82a      	add	r0, sp, #168	; 0xa8
    4196:	47a8      	blx	r5
    vneg1271(&temp_point->t2[0]);                                            // Negate 2dt coordinate
    4198:	a816      	add	r0, sp, #88	; 0x58
    419a:	4d19      	ldr	r5, [pc, #100]	; (4200 <table_lookup_fixed_base+0x128>)
    419c:	47a8      	blx	r5
    vneg1271(&temp_point->t2[VWORDS_FIELD]);             
    419e:	a81b      	add	r0, sp, #108	; 0x6c
    41a0:	47a8      	blx	r5
    41a2:	4652      	mov	r2, sl
    41a4:	4659      	mov	r1, fp
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
        point->xy[j] = ((digit_t)((int)sign) & (point->xy[j] ^ temp_point->xy[j])) ^ point->xy[j];
    41a6:	6830      	ldr	r0, [r6, #0]
    41a8:	6813      	ldr	r3, [r2, #0]
    41aa:	4043      	eors	r3, r0
    41ac:	400b      	ands	r3, r1
    41ae:	4043      	eors	r3, r0
    41b0:	6033      	str	r3, [r6, #0]
        point->yx[j] = ((digit_t)((int)sign) & (point->yx[j] ^ temp_point->yx[j])) ^ point->yx[j];
    41b2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    41b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    41b6:	4043      	eors	r3, r0
    41b8:	400b      	ands	r3, r1
    41ba:	4043      	eors	r3, r0
    41bc:	62b3      	str	r3, [r6, #40]	; 0x28
        point->t2[j] = ((digit_t)((int)sign) & (point->t2[j] ^ temp_point->t2[j])) ^ point->t2[j];
    41be:	6d30      	ldr	r0, [r6, #80]	; 0x50
    41c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
    41c2:	4043      	eors	r3, r0
    41c4:	400b      	ands	r3, r1
    41c6:	4043      	eors	r3, r0
    41c8:	6533      	str	r3, [r6, #80]	; 0x50
    41ca:	3604      	adds	r6, #4
    41cc:	3204      	adds	r2, #4
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
    41ce:	42a6      	cmp	r6, r4
    41d0:	d1e9      	bne.n	41a6 <table_lookup_fixed_base+0xce>
    }                                  
    ecccopy_precomp_fixed_base(point, P);
    41d2:	9d01      	ldr	r5, [sp, #4]
    41d4:	0029      	movs	r1, r5
    41d6:	a820      	add	r0, sp, #128	; 0x80
    41d8:	4c08      	ldr	r4, [pc, #32]	; (41fc <table_lookup_fixed_base+0x124>)
    41da:	47a0      	blx	r4
    41dc:	0029      	movs	r1, r5
    41de:	3128      	adds	r1, #40	; 0x28
    41e0:	a82a      	add	r0, sp, #168	; 0xa8
    41e2:	47a0      	blx	r4
    41e4:	0029      	movs	r1, r5
    41e6:	3150      	adds	r1, #80	; 0x50
    41e8:	a834      	add	r0, sp, #208	; 0xd0
    41ea:	47a0      	blx	r4
#endif
}
    41ec:	b03f      	add	sp, #252	; 0xfc
    41ee:	bc3c      	pop	{r2, r3, r4, r5}
    41f0:	4690      	mov	r8, r2
    41f2:	4699      	mov	r9, r3
    41f4:	46a2      	mov	sl, r4
    41f6:	46ab      	mov	fp, r5
    41f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41fa:	46c0      	nop			; (mov r8, r8)
    41fc:	00003d5f 	.word	0x00003d5f
    4200:	000031a9 	.word	0x000031a9

00004204 <v2zero1271>:


void v2zero1271(v2elm_t a) 
{ // Zeroing vectorized GF(p^2) element, a = 0
    
    a[0] = 0; a[1] = 0; a[2] = 0; a[3] = 0; a[4] = 0; 
    4204:	2300      	movs	r3, #0
    4206:	6003      	str	r3, [r0, #0]
    4208:	6043      	str	r3, [r0, #4]
    420a:	6083      	str	r3, [r0, #8]
    420c:	60c3      	str	r3, [r0, #12]
    420e:	6103      	str	r3, [r0, #16]
    a[5] = 0; a[6] = 0; a[7] = 0; a[8] = 0; a[9] = 0;
    4210:	6143      	str	r3, [r0, #20]
    4212:	6183      	str	r3, [r0, #24]
    4214:	61c3      	str	r3, [r0, #28]
    4216:	6203      	str	r3, [r0, #32]
    4218:	6243      	str	r3, [r0, #36]	; 0x24
}
    421a:	4770      	bx	lr

0000421c <v2add1271>:


__inline void v2add1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) addition, c = a+b in GF((2^127-1)^2)
    421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    421e:	0004      	movs	r4, r0
    4220:	000d      	movs	r5, r1
    4222:	0016      	movs	r6, r2
    vadd1271(&a[0], &b[0], &c[0]);
    4224:	4f04      	ldr	r7, [pc, #16]	; (4238 <v2add1271+0x1c>)
    4226:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4228:	0032      	movs	r2, r6
    422a:	3214      	adds	r2, #20
    422c:	0029      	movs	r1, r5
    422e:	3114      	adds	r1, #20
    4230:	0020      	movs	r0, r4
    4232:	3014      	adds	r0, #20
    4234:	47b8      	blx	r7
}
    4236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4238:	0000313f 	.word	0x0000313f

0000423c <v2sub1271>:


__inline void v2sub1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) subtraction, c = a-b in GF((2^127-1)^2)
    423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    423e:	0004      	movs	r4, r0
    4240:	000d      	movs	r5, r1
    4242:	0016      	movs	r6, r2
    vsub1271(&a[0], &b[0], &c[0]);
    4244:	4f04      	ldr	r7, [pc, #16]	; (4258 <v2sub1271+0x1c>)
    4246:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4248:	0032      	movs	r2, r6
    424a:	3214      	adds	r2, #20
    424c:	0029      	movs	r1, r5
    424e:	3114      	adds	r1, #20
    4250:	0020      	movs	r0, r4
    4252:	3014      	adds	r0, #20
    4254:	47b8      	blx	r7
}
    4256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4258:	0000317b 	.word	0x0000317b

0000425c <v2dblsub1271>:


void v2dblsub1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) addition followed by subtraction, c = 2a-b in GF((2^127-1)^2) 
    425c:	b510      	push	{r4, lr}
    
    c[0] = (a[0] << 1) - b[0];
    425e:	6803      	ldr	r3, [r0, #0]
    4260:	005b      	lsls	r3, r3, #1
    4262:	680c      	ldr	r4, [r1, #0]
    4264:	1b1b      	subs	r3, r3, r4
    4266:	6013      	str	r3, [r2, #0]
    c[1] = (a[1] << 1) - b[1];
    4268:	6843      	ldr	r3, [r0, #4]
    426a:	005b      	lsls	r3, r3, #1
    426c:	684c      	ldr	r4, [r1, #4]
    426e:	1b1b      	subs	r3, r3, r4
    4270:	6053      	str	r3, [r2, #4]
    c[2] = (a[2] << 1) - b[2];
    4272:	6883      	ldr	r3, [r0, #8]
    4274:	005b      	lsls	r3, r3, #1
    4276:	688c      	ldr	r4, [r1, #8]
    4278:	1b1b      	subs	r3, r3, r4
    427a:	6093      	str	r3, [r2, #8]
    c[3] = (a[3] << 1) - b[3];
    427c:	68c3      	ldr	r3, [r0, #12]
    427e:	005b      	lsls	r3, r3, #1
    4280:	68cc      	ldr	r4, [r1, #12]
    4282:	1b1b      	subs	r3, r3, r4
    4284:	60d3      	str	r3, [r2, #12]
    c[4] = (a[4] << 1) - b[4];
    4286:	6903      	ldr	r3, [r0, #16]
    4288:	005b      	lsls	r3, r3, #1
    428a:	690c      	ldr	r4, [r1, #16]
    428c:	1b1b      	subs	r3, r3, r4
    428e:	6113      	str	r3, [r2, #16]
    c[5] = (a[5] << 1) - b[5];
    4290:	6943      	ldr	r3, [r0, #20]
    4292:	005b      	lsls	r3, r3, #1
    4294:	694c      	ldr	r4, [r1, #20]
    4296:	1b1b      	subs	r3, r3, r4
    4298:	6153      	str	r3, [r2, #20]
    c[6] = (a[6] << 1) - b[6];
    429a:	6983      	ldr	r3, [r0, #24]
    429c:	005b      	lsls	r3, r3, #1
    429e:	698c      	ldr	r4, [r1, #24]
    42a0:	1b1b      	subs	r3, r3, r4
    42a2:	6193      	str	r3, [r2, #24]
    c[7] = (a[7] << 1) - b[7];
    42a4:	69c3      	ldr	r3, [r0, #28]
    42a6:	005b      	lsls	r3, r3, #1
    42a8:	69cc      	ldr	r4, [r1, #28]
    42aa:	1b1b      	subs	r3, r3, r4
    42ac:	61d3      	str	r3, [r2, #28]
    c[8] = (a[8] << 1) - b[8];
    42ae:	6a03      	ldr	r3, [r0, #32]
    42b0:	005b      	lsls	r3, r3, #1
    42b2:	6a0c      	ldr	r4, [r1, #32]
    42b4:	1b1b      	subs	r3, r3, r4
    42b6:	6213      	str	r3, [r2, #32]
    c[9] = (a[9] << 1) - b[9];
    42b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    42ba:	005b      	lsls	r3, r3, #1
    42bc:	6a49      	ldr	r1, [r1, #36]	; 0x24
    42be:	1a5b      	subs	r3, r3, r1
    42c0:	6253      	str	r3, [r2, #36]	; 0x24
}
    42c2:	bd10      	pop	{r4, pc}

000042c4 <v2neg1271>:

void v2neg1271(v2elm_t a) 
{ // Vectorized GF(p^2) negation
  // Representation: 23/26/26/26/26/23/26/26/26/26-bit
    
    a[0] = mask_26 - a[0];
    42c4:	4b10      	ldr	r3, [pc, #64]	; (4308 <v2neg1271+0x44>)
    42c6:	6802      	ldr	r2, [r0, #0]
    42c8:	1a9a      	subs	r2, r3, r2
    42ca:	6002      	str	r2, [r0, #0]
    a[1] = mask_26 - a[1];
    42cc:	6842      	ldr	r2, [r0, #4]
    42ce:	1a9a      	subs	r2, r3, r2
    42d0:	6042      	str	r2, [r0, #4]
    a[2] = mask_26 - a[2];
    42d2:	6882      	ldr	r2, [r0, #8]
    42d4:	1a9a      	subs	r2, r3, r2
    42d6:	6082      	str	r2, [r0, #8]
    a[3] = mask_26 - a[3];
    42d8:	68c2      	ldr	r2, [r0, #12]
    42da:	1a9a      	subs	r2, r3, r2
    42dc:	60c2      	str	r2, [r0, #12]
    a[4] = mask_23 - a[4];
    42de:	4a0b      	ldr	r2, [pc, #44]	; (430c <v2neg1271+0x48>)
    42e0:	6901      	ldr	r1, [r0, #16]
    42e2:	1a51      	subs	r1, r2, r1
    42e4:	6101      	str	r1, [r0, #16]
    a[5] = mask_26 - a[5];
    42e6:	6941      	ldr	r1, [r0, #20]
    42e8:	1a59      	subs	r1, r3, r1
    42ea:	6141      	str	r1, [r0, #20]
    a[6] = mask_26 - a[6];
    42ec:	6981      	ldr	r1, [r0, #24]
    42ee:	1a59      	subs	r1, r3, r1
    42f0:	6181      	str	r1, [r0, #24]
    a[7] = mask_26 - a[7];
    42f2:	69c1      	ldr	r1, [r0, #28]
    42f4:	1a59      	subs	r1, r3, r1
    42f6:	61c1      	str	r1, [r0, #28]
    a[8] = mask_26 - a[8];
    42f8:	6a01      	ldr	r1, [r0, #32]
    42fa:	1a5b      	subs	r3, r3, r1
    42fc:	6203      	str	r3, [r0, #32]
    a[9] = mask_23 - a[9];
    42fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4300:	1ad2      	subs	r2, r2, r3
    4302:	6242      	str	r2, [r0, #36]	; 0x24
}
    4304:	4770      	bx	lr
    4306:	46c0      	nop			; (mov r8, r8)
    4308:	03ffffff 	.word	0x03ffffff
    430c:	007fffff 	.word	0x007fffff

00004310 <v2div1271>:


void v2div1271(uint32_t* a) 
{ // GF(p^2) division by two, c = a/2 mod p
    4310:	b5f0      	push	{r4, r5, r6, r7, lr}
    4312:	46c6      	mov	lr, r8
    4314:	b500      	push	{lr}
    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    4316:	6804      	ldr	r4, [r0, #0]
    4318:	2301      	movs	r3, #1
    431a:	4698      	mov	r8, r3
    431c:	001a      	movs	r2, r3
    431e:	4022      	ands	r2, r4
    4320:	4252      	negs	r2, r2
    4322:	0991      	lsrs	r1, r2, #6
    a[1] += mask;
    4324:	6843      	ldr	r3, [r0, #4]
    4326:	18ce      	adds	r6, r1, r3
    a[2] += mask;
    4328:	6883      	ldr	r3, [r0, #8]
    432a:	18cd      	adds	r5, r1, r3
    a[3] += mask;
    432c:	68c3      	ldr	r3, [r0, #12]
    432e:	18cf      	adds	r7, r1, r3
    a[4] += (mask >> 3);
    4330:	0a52      	lsrs	r2, r2, #9
    4332:	6903      	ldr	r3, [r0, #16]
    4334:	469c      	mov	ip, r3
    4336:	4462      	add	r2, ip
    a[0] += mask;
    4338:	1864      	adds	r4, r4, r1
    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    433a:	1064      	asrs	r4, r4, #1
    433c:	0673      	lsls	r3, r6, #25
    433e:	2180      	movs	r1, #128	; 0x80
    4340:	0489      	lsls	r1, r1, #18
    4342:	400b      	ands	r3, r1
    4344:	469c      	mov	ip, r3
    4346:	4464      	add	r4, ip
    4348:	6004      	str	r4, [r0, #0]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    434a:	066c      	lsls	r4, r5, #25
    434c:	400c      	ands	r4, r1
    434e:	1076      	asrs	r6, r6, #1
    4350:	19a6      	adds	r6, r4, r6
    4352:	6046      	str	r6, [r0, #4]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    4354:	067c      	lsls	r4, r7, #25
    4356:	400c      	ands	r4, r1
    4358:	106d      	asrs	r5, r5, #1
    435a:	1965      	adds	r5, r4, r5
    435c:	6085      	str	r5, [r0, #8]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    435e:	0654      	lsls	r4, r2, #25
    4360:	400c      	ands	r4, r1
    4362:	107f      	asrs	r7, r7, #1
    4364:	19e7      	adds	r7, r4, r7
    4366:	60c7      	str	r7, [r0, #12]
    a[4] = ((sdigit_t)a[4] >> 1);
    4368:	1052      	asrs	r2, r2, #1
    436a:	6102      	str	r2, [r0, #16]
    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    436c:	6942      	ldr	r2, [r0, #20]
    436e:	4643      	mov	r3, r8
    4370:	4013      	ands	r3, r2
    4372:	425b      	negs	r3, r3
    4374:	099f      	lsrs	r7, r3, #6
    a[1] += mask;
    4376:	6984      	ldr	r4, [r0, #24]
    4378:	193e      	adds	r6, r7, r4
    a[2] += mask;
    437a:	69c4      	ldr	r4, [r0, #28]
    437c:	193d      	adds	r5, r7, r4
    a[3] += mask;
    437e:	6a04      	ldr	r4, [r0, #32]
    4380:	193c      	adds	r4, r7, r4
    a[4] += (mask >> 3);
    4382:	0a5b      	lsrs	r3, r3, #9
    4384:	4698      	mov	r8, r3
    4386:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4388:	469c      	mov	ip, r3
    438a:	4643      	mov	r3, r8
    438c:	4463      	add	r3, ip
    a[0] += mask;
    438e:	19d2      	adds	r2, r2, r7
    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    4390:	1052      	asrs	r2, r2, #1
    4392:	0677      	lsls	r7, r6, #25
    4394:	400f      	ands	r7, r1
    4396:	19d2      	adds	r2, r2, r7
    4398:	6142      	str	r2, [r0, #20]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    439a:	066a      	lsls	r2, r5, #25
    439c:	400a      	ands	r2, r1
    439e:	1076      	asrs	r6, r6, #1
    43a0:	1996      	adds	r6, r2, r6
    43a2:	6186      	str	r6, [r0, #24]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    43a4:	0662      	lsls	r2, r4, #25
    43a6:	400a      	ands	r2, r1
    43a8:	106d      	asrs	r5, r5, #1
    43aa:	1955      	adds	r5, r2, r5
    43ac:	61c5      	str	r5, [r0, #28]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    43ae:	065a      	lsls	r2, r3, #25
    43b0:	4011      	ands	r1, r2
    43b2:	1064      	asrs	r4, r4, #1
    43b4:	190c      	adds	r4, r1, r4
    43b6:	6204      	str	r4, [r0, #32]
    a[4] = ((sdigit_t)a[4] >> 1);
    43b8:	105b      	asrs	r3, r3, #1
    43ba:	6243      	str	r3, [r0, #36]	; 0x24
    vdiv1271(&a[0]);
    vdiv1271(&a[VWORDS_FIELD]);
}
    43bc:	bc04      	pop	{r2}
    43be:	4690      	mov	r8, r2
    43c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000043c4 <v2mod1271_incomplete>:


void v2mod1271_incomplete(uint32_t* a, uint32_t* c) 
{ // Reduction of GF(p^2) element
    43c4:	b570      	push	{r4, r5, r6, lr}
    43c6:	0004      	movs	r4, r0
    43c8:	000d      	movs	r5, r1
    vmod1271_incomplete(&a[0], &c[0]);
    43ca:	4e04      	ldr	r6, [pc, #16]	; (43dc <v2mod1271_incomplete+0x18>)
    43cc:	47b0      	blx	r6
    vmod1271_incomplete(&a[VWORDS_FIELD], &c[VWORDS_FIELD]);
    43ce:	0029      	movs	r1, r5
    43d0:	3114      	adds	r1, #20
    43d2:	0020      	movs	r0, r4
    43d4:	3014      	adds	r0, #20
    43d6:	47b0      	blx	r6
}
    43d8:	bd70      	pop	{r4, r5, r6, pc}
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	00003645 	.word	0x00003645

000043e0 <v2mod1271>:


void v2mod1271(uint32_t* a, uint32_t* c) 
{ // Reduction of GF(p^2) element
    43e0:	b570      	push	{r4, r5, r6, lr}
    43e2:	0004      	movs	r4, r0
    43e4:	000d      	movs	r5, r1
    vmod1271(&a[0], &c[0]);
    43e6:	4e04      	ldr	r6, [pc, #16]	; (43f8 <v2mod1271+0x18>)
    43e8:	47b0      	blx	r6
    vmod1271(&a[VWORDS_FIELD], &c[VWORDS_FIELD]);
    43ea:	0029      	movs	r1, r5
    43ec:	3114      	adds	r1, #20
    43ee:	0020      	movs	r0, r4
    43f0:	3014      	adds	r0, #20
    43f2:	47b0      	blx	r6
}
    43f4:	bd70      	pop	{r4, r5, r6, pc}
    43f6:	46c0      	nop			; (mov r8, r8)
    43f8:	000036ad 	.word	0x000036ad

000043fc <v2mul1271>:


void v2mul1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // GF(p^2) multiplication, c = a*b in GF((2^127-1)^2) 
    43fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    43fe:	b097      	sub	sp, #92	; 0x5c
    4400:	0006      	movs	r6, r0
    4402:	000d      	movs	r5, r1
    4404:	9201      	str	r2, [sp, #4]
    velm_t t1, t2, t3, t4;
    
    vmul1271(&a[0], &b[0], t1);                        // t1 = a0*b0
    4406:	ab11      	add	r3, sp, #68	; 0x44
    4408:	001a      	movs	r2, r3
    440a:	4c16      	ldr	r4, [pc, #88]	; (4464 <v2mul1271+0x68>)
    440c:	47a0      	blx	r4
    vmul1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], t2);  // t2 = a1*b1
    440e:	2314      	movs	r3, #20
    4410:	469c      	mov	ip, r3
    4412:	44b4      	add	ip, r6
    4414:	4663      	mov	r3, ip
    4416:	002f      	movs	r7, r5
    4418:	3714      	adds	r7, #20
    441a:	a90c      	add	r1, sp, #48	; 0x30
    441c:	000a      	movs	r2, r1
    441e:	0039      	movs	r1, r7
    4420:	9300      	str	r3, [sp, #0]
    4422:	4660      	mov	r0, ip
    4424:	47a0      	blx	r4
    vadd1271(&a[0], &a[VWORDS_FIELD], t3);             // t3 = a0+a1
    4426:	a807      	add	r0, sp, #28
    4428:	0002      	movs	r2, r0
    442a:	9900      	ldr	r1, [sp, #0]
    442c:	0030      	movs	r0, r6
    442e:	4e0e      	ldr	r6, [pc, #56]	; (4468 <v2mul1271+0x6c>)
    4430:	47b0      	blx	r6
    vadd1271(&b[0], &b[VWORDS_FIELD], t4);             // t4 = b0+b1
    4432:	aa02      	add	r2, sp, #8
    4434:	0039      	movs	r1, r7
    4436:	0028      	movs	r0, r5
    4438:	47b0      	blx	r6
    vsub1271(t1, t2, &c[0]);                           // c[0] = a0*b0 - a1*b1
    443a:	9e01      	ldr	r6, [sp, #4]
    443c:	0032      	movs	r2, r6
    443e:	a90c      	add	r1, sp, #48	; 0x30
    4440:	a811      	add	r0, sp, #68	; 0x44
    4442:	4d0a      	ldr	r5, [pc, #40]	; (446c <v2mul1271+0x70>)
    4444:	47a8      	blx	r5
    vmul1271(t3, t4, t3);                              // t3 = (a0+a1)*(b0+b1)
    4446:	aa07      	add	r2, sp, #28
    4448:	a902      	add	r1, sp, #8
    444a:	0010      	movs	r0, r2
    444c:	47a0      	blx	r4
    vsub1271(t3, t1, t3);                              // t3 = (a0+a1)*(b0+b1) - a0*b0
    444e:	aa07      	add	r2, sp, #28
    4450:	a911      	add	r1, sp, #68	; 0x44
    4452:	0010      	movs	r0, r2
    4454:	47a8      	blx	r5
    vsub1271(t3, t2, &c[VWORDS_FIELD]);                // c[1] = (a0+a1)*(b0+b1) - a0*b0 - a1*b1
    4456:	0032      	movs	r2, r6
    4458:	3214      	adds	r2, #20
    445a:	a90c      	add	r1, sp, #48	; 0x30
    445c:	a807      	add	r0, sp, #28
    445e:	47a8      	blx	r5
}
    4460:	b017      	add	sp, #92	; 0x5c
    4462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4464:	000031d5 	.word	0x000031d5
    4468:	0000313f 	.word	0x0000313f
    446c:	0000317b 	.word	0x0000317b

00004470 <v2sqr1271>:


void v2sqr1271(v2elm_t a, v2elm_t c)
{ // GF(p^2) squaring, c = a^2 in GF((2^127-1)^2) 
    4470:	b5f0      	push	{r4, r5, r6, r7, lr}
    4472:	b091      	sub	sp, #68	; 0x44
    4474:	0005      	movs	r5, r0
    4476:	000c      	movs	r4, r1
    velm_t t1, t2, t3;

    vadd1271(&a[0], &a[VWORDS_FIELD], t1);             // t1 = a0+a1 
    4478:	0006      	movs	r6, r0
    447a:	3614      	adds	r6, #20
    447c:	aa0b      	add	r2, sp, #44	; 0x2c
    447e:	0031      	movs	r1, r6
    4480:	4f0b      	ldr	r7, [pc, #44]	; (44b0 <v2sqr1271+0x40>)
    4482:	47b8      	blx	r7
    vsub1271(&a[0], &a[VWORDS_FIELD], t2);             // t2 = a0-a1
    4484:	aa06      	add	r2, sp, #24
    4486:	0031      	movs	r1, r6
    4488:	0028      	movs	r0, r5
    448a:	4b0a      	ldr	r3, [pc, #40]	; (44b4 <v2sqr1271+0x44>)
    448c:	4798      	blx	r3
    vmul1271(&a[0], &a[VWORDS_FIELD], t3);             // t3 = a0*a1
    448e:	aa01      	add	r2, sp, #4
    4490:	0031      	movs	r1, r6
    4492:	0028      	movs	r0, r5
    4494:	4d08      	ldr	r5, [pc, #32]	; (44b8 <v2sqr1271+0x48>)
    4496:	47a8      	blx	r5
    vmul1271(t1, t2, &c[0]);                           // c0 = (a0+a1)(a0-a1)
    4498:	0022      	movs	r2, r4
    449a:	a906      	add	r1, sp, #24
    449c:	a80b      	add	r0, sp, #44	; 0x2c
    449e:	47a8      	blx	r5
    vadd1271(t3, t3, &c[VWORDS_FIELD]);                // c1 = 2a0*a1
    44a0:	0022      	movs	r2, r4
    44a2:	3214      	adds	r2, #20
    44a4:	a901      	add	r1, sp, #4
    44a6:	0008      	movs	r0, r1
    44a8:	47b8      	blx	r7
}
    44aa:	b011      	add	sp, #68	; 0x44
    44ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	0000313f 	.word	0x0000313f
    44b4:	0000317b 	.word	0x0000317b
    44b8:	000031d5 	.word	0x000031d5

000044bc <v2inv1271>:


void v2inv1271(v2elm_t a)
{ // Vectorized GF(p^2) inversion, a = (a0-i*a1)/(a0^2+a1^2)
    44bc:	b570      	push	{r4, r5, r6, lr}
    44be:	b08a      	sub	sp, #40	; 0x28
    44c0:	0005      	movs	r5, r0
    velm_t t0, t1; 

    vsqr1271(&a[0], t0);                               // t0 = a0^2
    44c2:	a905      	add	r1, sp, #20
    44c4:	4e0e      	ldr	r6, [pc, #56]	; (4500 <v2inv1271+0x44>)
    44c6:	47b0      	blx	r6
    vsqr1271(&a[VWORDS_FIELD], t1);                    // t1 = a1^2 
    44c8:	002c      	movs	r4, r5
    44ca:	3414      	adds	r4, #20
    44cc:	4669      	mov	r1, sp
    44ce:	0020      	movs	r0, r4
    44d0:	47b0      	blx	r6
    vadd1271(t0, t1, t0);                              // t0 = a0^2+a1^2 
    44d2:	aa05      	add	r2, sp, #20
    44d4:	4669      	mov	r1, sp
    44d6:	0010      	movs	r0, r2
    44d8:	4b0a      	ldr	r3, [pc, #40]	; (4504 <v2inv1271+0x48>)
    44da:	4798      	blx	r3
    vinv1271(t0);                                      // t0 = (a0^2+a1^2)^-1 
    44dc:	a805      	add	r0, sp, #20
    44de:	4b0a      	ldr	r3, [pc, #40]	; (4508 <v2inv1271+0x4c>)
    44e0:	4798      	blx	r3
    vneg1271(&a[VWORDS_FIELD]);                        // a = a0-i*a1 
    44e2:	0020      	movs	r0, r4
    44e4:	4b09      	ldr	r3, [pc, #36]	; (450c <v2inv1271+0x50>)
    44e6:	4798      	blx	r3
    vmul1271(&a[0], t0, &a[0]);
    44e8:	002a      	movs	r2, r5
    44ea:	a905      	add	r1, sp, #20
    44ec:	0028      	movs	r0, r5
    44ee:	4d08      	ldr	r5, [pc, #32]	; (4510 <v2inv1271+0x54>)
    44f0:	47a8      	blx	r5
    vmul1271(&a[VWORDS_FIELD], t0, &a[VWORDS_FIELD]);  // a = (a0-i*a1)*(a0^2+a1^2)^-1
    44f2:	0022      	movs	r2, r4
    44f4:	a905      	add	r1, sp, #20
    44f6:	0020      	movs	r0, r4
    44f8:	47a8      	blx	r5
}
    44fa:	b00a      	add	sp, #40	; 0x28
    44fc:	bd70      	pop	{r4, r5, r6, pc}
    44fe:	46c0      	nop			; (mov r8, r8)
    4500:	00003469 	.word	0x00003469
    4504:	0000313f 	.word	0x0000313f
    4508:	00003871 	.word	0x00003871
    450c:	000031a9 	.word	0x000031a9
    4510:	000031d5 	.word	0x000031d5

00004514 <clear_words>:
  // It has been tested with MSVS 2013 and GNU GCC 4.6.3, 4.7.3, 4.8.2 and 4.8.4. Users are responsible for verifying correctness with different compilers.  
  // See "Compliant Solution (C99)" at https://www.securecoding.cert.org/confluence/display/c/MSC06-C.+Beware+of+compiler+optimizations 
	unsigned int i;
	volatile unsigned int *v = mem;

	for (i = 0; i < nwords; i++)
    4514:	2900      	cmp	r1, #0
    4516:	d006      	beq.n	4526 <clear_words+0x12>
    4518:	0003      	movs	r3, r0
    451a:	0089      	lsls	r1, r1, #2
    451c:	1840      	adds	r0, r0, r1
		v[i] = 0;
    451e:	2200      	movs	r2, #0
    4520:	c304      	stmia	r3!, {r2}
	for (i = 0; i < nwords; i++)
    4522:	4283      	cmp	r3, r0
    4524:	d1fc      	bne.n	4520 <clear_words+0xc>
}
    4526:	4770      	bx	lr

00004528 <eccnorm>:
	fp2copy1271((felm_t*)&GENERATOR_y, P->y);    // Y1
}


__inline void eccnorm(vpoint_extproj_t P, vpoint_t Q)
{ // Normalize a projective point (X1:Y1:Z1), including full reduction
    4528:	b5f0      	push	{r4, r5, r6, r7, lr}
    452a:	b083      	sub	sp, #12
    452c:	0004      	movs	r4, r0
    452e:	000d      	movs	r5, r1
  // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates    
  // Output: Q = (X1/Z1,Y1/Z1), corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    
    v2inv1271(P->z);                      // Z1 = Z1^-1
    4530:	0007      	movs	r7, r0
    4532:	3750      	adds	r7, #80	; 0x50
    4534:	0038      	movs	r0, r7
    4536:	4b0d      	ldr	r3, [pc, #52]	; (456c <eccnorm+0x44>)
    4538:	4798      	blx	r3
    v2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    453a:	002a      	movs	r2, r5
    453c:	0039      	movs	r1, r7
    453e:	0020      	movs	r0, r4
    4540:	4e0b      	ldr	r6, [pc, #44]	; (4570 <eccnorm+0x48>)
    4542:	47b0      	blx	r6
    v2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    4544:	2328      	movs	r3, #40	; 0x28
    4546:	469c      	mov	ip, r3
    4548:	44ac      	add	ip, r5
    454a:	4663      	mov	r3, ip
    454c:	0020      	movs	r0, r4
    454e:	3028      	adds	r0, #40	; 0x28
    4550:	9301      	str	r3, [sp, #4]
    4552:	4662      	mov	r2, ip
    4554:	0039      	movs	r1, r7
    4556:	47b0      	blx	r6
    v2mod1271(Q->x, Q->x); 
    4558:	0029      	movs	r1, r5
    455a:	0028      	movs	r0, r5
    455c:	4c05      	ldr	r4, [pc, #20]	; (4574 <eccnorm+0x4c>)
    455e:	47a0      	blx	r4
    v2mod1271(Q->y, Q->y); 
    4560:	9801      	ldr	r0, [sp, #4]
    4562:	0001      	movs	r1, r0
    4564:	47a0      	blx	r4
}
    4566:	b003      	add	sp, #12
    4568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    456a:	46c0      	nop			; (mov r8, r8)
    456c:	000044bd 	.word	0x000044bd
    4570:	000043fd 	.word	0x000043fd
    4574:	000043e1 	.word	0x000043e1

00004578 <R1_to_R2>:


void R1_to_R2(vpoint_extproj_t P, vpoint_extproj_precomp_t Q) 
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT), where T = Ta*Tb
    4578:	b5f0      	push	{r4, r5, r6, r7, lr}
    457a:	b085      	sub	sp, #20
    457c:	0005      	movs	r5, r0
    457e:	000c      	movs	r4, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    
    v2add1271(P->ta, P->ta, Q->t2);              // T = 2*Ta
    4580:	3078      	adds	r0, #120	; 0x78
    4582:	2378      	movs	r3, #120	; 0x78
    4584:	469c      	mov	ip, r3
    4586:	448c      	add	ip, r1
    4588:	4663      	mov	r3, ip
    vadd1271(&a[0], &b[0], &c[0]);
    458a:	9301      	str	r3, [sp, #4]
    458c:	4662      	mov	r2, ip
    458e:	0001      	movs	r1, r0
    4590:	4e20      	ldr	r6, [pc, #128]	; (4614 <R1_to_R2+0x9c>)
    4592:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4594:	002a      	movs	r2, r5
    4596:	328c      	adds	r2, #140	; 0x8c
    4598:	0010      	movs	r0, r2
    459a:	0022      	movs	r2, r4
    459c:	328c      	adds	r2, #140	; 0x8c
    459e:	0001      	movs	r1, r0
    45a0:	47b0      	blx	r6
    v2add1271(P->x, P->y, Q->xy);                // QX = X+Y
    45a2:	002f      	movs	r7, r5
    45a4:	3728      	adds	r7, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    45a6:	0022      	movs	r2, r4
    45a8:	0039      	movs	r1, r7
    45aa:	0028      	movs	r0, r5
    45ac:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    45ae:	2214      	movs	r2, #20
    45b0:	4694      	mov	ip, r2
    45b2:	44ac      	add	ip, r5
    45b4:	4663      	mov	r3, ip
    45b6:	223c      	movs	r2, #60	; 0x3c
    45b8:	4694      	mov	ip, r2
    45ba:	44ac      	add	ip, r5
    45bc:	4661      	mov	r1, ip
    45be:	0022      	movs	r2, r4
    45c0:	3214      	adds	r2, #20
    45c2:	9103      	str	r1, [sp, #12]
    45c4:	9302      	str	r3, [sp, #8]
    45c6:	0018      	movs	r0, r3
    45c8:	47b0      	blx	r6
    v2sub1271(P->y, P->x, Q->yx);                // QY = Y-X 
    45ca:	0022      	movs	r2, r4
    45cc:	3228      	adds	r2, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    45ce:	0029      	movs	r1, r5
    45d0:	0038      	movs	r0, r7
    45d2:	4f11      	ldr	r7, [pc, #68]	; (4618 <R1_to_R2+0xa0>)
    45d4:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    45d6:	0022      	movs	r2, r4
    45d8:	323c      	adds	r2, #60	; 0x3c
    45da:	9902      	ldr	r1, [sp, #8]
    45dc:	9803      	ldr	r0, [sp, #12]
    45de:	47b8      	blx	r7
    v2mul1271(Q->t2, P->tb, Q->t2);              // T = 2*T
    45e0:	0029      	movs	r1, r5
    45e2:	31a0      	adds	r1, #160	; 0xa0
    45e4:	9801      	ldr	r0, [sp, #4]
    45e6:	0002      	movs	r2, r0
    45e8:	4f0c      	ldr	r7, [pc, #48]	; (461c <R1_to_R2+0xa4>)
    45ea:	47b8      	blx	r7
    v2add1271(P->z, P->z, Q->z2);                // QZ = 2*Z
    45ec:	002a      	movs	r2, r5
    45ee:	3250      	adds	r2, #80	; 0x50
    45f0:	0010      	movs	r0, r2
    45f2:	0022      	movs	r2, r4
    45f4:	3250      	adds	r2, #80	; 0x50
    vadd1271(&a[0], &b[0], &c[0]);
    45f6:	0001      	movs	r1, r0
    45f8:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    45fa:	3564      	adds	r5, #100	; 0x64
    45fc:	0028      	movs	r0, r5
    45fe:	0022      	movs	r2, r4
    4600:	3264      	adds	r2, #100	; 0x64
    4602:	0029      	movs	r1, r5
    4604:	47b0      	blx	r6
    v2mul1271(Q->t2, (digit_t*)&PARAMETER_d, Q->t2);       // QT = 2d*T
    4606:	9801      	ldr	r0, [sp, #4]
    4608:	0002      	movs	r2, r0
    460a:	4905      	ldr	r1, [pc, #20]	; (4620 <R1_to_R2+0xa8>)
    460c:	47b8      	blx	r7
}
    460e:	b005      	add	sp, #20
    4610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4612:	46c0      	nop			; (mov r8, r8)
    4614:	0000313f 	.word	0x0000313f
    4618:	0000317b 	.word	0x0000317b
    461c:	000043fd 	.word	0x000043fd
    4620:	00009e58 	.word	0x00009e58

00004624 <R1_to_R3>:


void R1_to_R3(vpoint_extproj_t P, vpoint_extproj_precomp_t Q)      
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T), where T = Ta*Tb 
    4624:	b5f0      	push	{r4, r5, r6, r7, lr}
    4626:	b083      	sub	sp, #12
    4628:	0004      	movs	r4, r0
    462a:	000d      	movs	r5, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,Z1,T1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates 
    
    v2add1271(P->x, P->y, Q->xy);            // XQ = (X1+Y1) 
    462c:	0007      	movs	r7, r0
    462e:	3728      	adds	r7, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    4630:	000a      	movs	r2, r1
    4632:	0039      	movs	r1, r7
    4634:	4e15      	ldr	r6, [pc, #84]	; (468c <R1_to_R3+0x68>)
    4636:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4638:	2314      	movs	r3, #20
    463a:	469c      	mov	ip, r3
    463c:	44a4      	add	ip, r4
    463e:	4663      	mov	r3, ip
    4640:	223c      	movs	r2, #60	; 0x3c
    4642:	4694      	mov	ip, r2
    4644:	44a4      	add	ip, r4
    4646:	4661      	mov	r1, ip
    4648:	002a      	movs	r2, r5
    464a:	3214      	adds	r2, #20
    464c:	9101      	str	r1, [sp, #4]
    464e:	9300      	str	r3, [sp, #0]
    4650:	0018      	movs	r0, r3
    4652:	47b0      	blx	r6
    v2sub1271(P->y, P->x, Q->yx);            // YQ = (Y1-X1) 
    4654:	002a      	movs	r2, r5
    4656:	3228      	adds	r2, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    4658:	0021      	movs	r1, r4
    465a:	0038      	movs	r0, r7
    465c:	4f0c      	ldr	r7, [pc, #48]	; (4690 <R1_to_R3+0x6c>)
    465e:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4660:	002a      	movs	r2, r5
    4662:	323c      	adds	r2, #60	; 0x3c
    4664:	9900      	ldr	r1, [sp, #0]
    4666:	9801      	ldr	r0, [sp, #4]
    4668:	47b8      	blx	r7
    v2mul1271(P->ta, P->tb, Q->t2);          // TQ = T1
    466a:	002a      	movs	r2, r5
    466c:	3278      	adds	r2, #120	; 0x78
    466e:	0021      	movs	r1, r4
    4670:	31a0      	adds	r1, #160	; 0xa0
    4672:	0020      	movs	r0, r4
    4674:	3078      	adds	r0, #120	; 0x78
    4676:	4b07      	ldr	r3, [pc, #28]	; (4694 <R1_to_R3+0x70>)
    4678:	4798      	blx	r3
    v2copy1271(P->z, Q->z2);                 // ZQ = Z1 
    467a:	0029      	movs	r1, r5
    467c:	3150      	adds	r1, #80	; 0x50
    467e:	0020      	movs	r0, r4
    4680:	3050      	adds	r0, #80	; 0x50
    4682:	4b05      	ldr	r3, [pc, #20]	; (4698 <R1_to_R3+0x74>)
    4684:	4798      	blx	r3
}
    4686:	b003      	add	sp, #12
    4688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    468a:	46c0      	nop			; (mov r8, r8)
    468c:	0000313f 	.word	0x0000313f
    4690:	0000317b 	.word	0x0000317b
    4694:	000043fd 	.word	0x000043fd
    4698:	00003d5f 	.word	0x00003d5f

0000469c <R2_to_R4>:


void R2_to_R4(vpoint_extproj_precomp_t P, vpoint_extproj_t Q)      
{ // Conversion from representation (X+Y,Y-X,2Z,2dT) to (2X,2Y,2Z,2dT) 
    469c:	b5f0      	push	{r4, r5, r6, r7, lr}
    469e:	b083      	sub	sp, #12
    46a0:	0006      	movs	r6, r0
    46a2:	000d      	movs	r5, r1
  // Input:  P = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (2X1,2Y1,2Z1) corresponding to (X1:Y1:Z1) in twisted Edwards coordinates 
    
    v2sub1271(P->xy, P->yx, Q->x);           // XQ = 2*X1
    46a4:	0007      	movs	r7, r0
    46a6:	3728      	adds	r7, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    46a8:	000a      	movs	r2, r1
    46aa:	0039      	movs	r1, r7
    46ac:	4c15      	ldr	r4, [pc, #84]	; (4704 <R2_to_R4+0x68>)
    46ae:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    46b0:	2314      	movs	r3, #20
    46b2:	469c      	mov	ip, r3
    46b4:	44b4      	add	ip, r6
    46b6:	4663      	mov	r3, ip
    46b8:	223c      	movs	r2, #60	; 0x3c
    46ba:	4694      	mov	ip, r2
    46bc:	44b4      	add	ip, r6
    46be:	4661      	mov	r1, ip
    46c0:	002a      	movs	r2, r5
    46c2:	3214      	adds	r2, #20
    46c4:	9101      	str	r1, [sp, #4]
    46c6:	9300      	str	r3, [sp, #0]
    46c8:	0018      	movs	r0, r3
    46ca:	47a0      	blx	r4
    v2add1271(P->xy, P->yx, Q->y);           // YQ = 2*Y1
    46cc:	002c      	movs	r4, r5
    46ce:	3428      	adds	r4, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    46d0:	0022      	movs	r2, r4
    46d2:	0039      	movs	r1, r7
    46d4:	0030      	movs	r0, r6
    46d6:	4f0c      	ldr	r7, [pc, #48]	; (4708 <R2_to_R4+0x6c>)
    46d8:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    46da:	002a      	movs	r2, r5
    46dc:	323c      	adds	r2, #60	; 0x3c
    46de:	9901      	ldr	r1, [sp, #4]
    46e0:	9800      	ldr	r0, [sp, #0]
    46e2:	47b8      	blx	r7
    v2copy1271(P->z2, Q->z);                 // ZQ = 2*Z1
    46e4:	0029      	movs	r1, r5
    46e6:	3150      	adds	r1, #80	; 0x50
    46e8:	0030      	movs	r0, r6
    46ea:	3050      	adds	r0, #80	; 0x50
    46ec:	4b07      	ldr	r3, [pc, #28]	; (470c <R2_to_R4+0x70>)
    46ee:	4798      	blx	r3
    v2mod1271_incomplete(Q->x, Q->x);   
    46f0:	0029      	movs	r1, r5
    46f2:	0028      	movs	r0, r5
    46f4:	4d06      	ldr	r5, [pc, #24]	; (4710 <R2_to_R4+0x74>)
    46f6:	47a8      	blx	r5
    v2mod1271_incomplete(Q->y, Q->y);   
    46f8:	0021      	movs	r1, r4
    46fa:	0020      	movs	r0, r4
    46fc:	47a8      	blx	r5
}
    46fe:	b003      	add	sp, #12
    4700:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4702:	46c0      	nop			; (mov r8, r8)
    4704:	0000317b 	.word	0x0000317b
    4708:	0000313f 	.word	0x0000313f
    470c:	00003d5f 	.word	0x00003d5f
    4710:	000043c5 	.word	0x000043c5

00004714 <eccdouble>:


void eccdouble(vpoint_extproj_t P)
{ // Point doubling 2P
    4714:	b5f0      	push	{r4, r5, r6, r7, lr}
    4716:	b099      	sub	sp, #100	; 0x64
    4718:	0007      	movs	r7, r0
  // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates
  // Output: 2P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    v2elm_t t1, t2; 
  
    v2sqr1271(P->x, t1);                              // t1 = X1^2 
    471a:	a90e      	add	r1, sp, #56	; 0x38
    471c:	4e2f      	ldr	r6, [pc, #188]	; (47dc <eccdouble+0xc8>)
    471e:	47b0      	blx	r6
    v2sqr1271(P->y, t2);                              // t2 = Y1^2
    4720:	2328      	movs	r3, #40	; 0x28
    4722:	469c      	mov	ip, r3
    4724:	44bc      	add	ip, r7
    4726:	4663      	mov	r3, ip
    4728:	4664      	mov	r4, ip
    472a:	a904      	add	r1, sp, #16
    472c:	0018      	movs	r0, r3
    472e:	47b0      	blx	r6
    vadd1271(&a[0], &b[0], &c[0]);
    4730:	003a      	movs	r2, r7
    4732:	9400      	str	r4, [sp, #0]
    4734:	0021      	movs	r1, r4
    4736:	0038      	movs	r0, r7
    4738:	4c29      	ldr	r4, [pc, #164]	; (47e0 <eccdouble+0xcc>)
    473a:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    473c:	0038      	movs	r0, r7
    473e:	3014      	adds	r0, #20
    4740:	0039      	movs	r1, r7
    4742:	313c      	adds	r1, #60	; 0x3c
    4744:	0002      	movs	r2, r0
    4746:	47a0      	blx	r4
    v2add1271(P->x, P->y, P->x);                      // X = X1+Y1
    v2add1271(t1, t2, P->tb);                         // Tbfinal = X1^2+Y1^2 
    4748:	23a0      	movs	r3, #160	; 0xa0
    474a:	469c      	mov	ip, r3
    474c:	44bc      	add	ip, r7
    474e:	4663      	mov	r3, ip
    vadd1271(&a[0], &b[0], &c[0]);
    4750:	9301      	str	r3, [sp, #4]
    4752:	4662      	mov	r2, ip
    4754:	a904      	add	r1, sp, #16
    4756:	a80e      	add	r0, sp, #56	; 0x38
    4758:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    475a:	21b4      	movs	r1, #180	; 0xb4
    475c:	468c      	mov	ip, r1
    475e:	44bc      	add	ip, r7
    4760:	4661      	mov	r1, ip
    4762:	9103      	str	r1, [sp, #12]
    4764:	4662      	mov	r2, ip
    4766:	a809      	add	r0, sp, #36	; 0x24
    4768:	0001      	movs	r1, r0
    476a:	a813      	add	r0, sp, #76	; 0x4c
    476c:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    476e:	aa0e      	add	r2, sp, #56	; 0x38
    4770:	0011      	movs	r1, r2
    4772:	a804      	add	r0, sp, #16
    4774:	4d1b      	ldr	r5, [pc, #108]	; (47e4 <eccdouble+0xd0>)
    4776:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4778:	aa13      	add	r2, sp, #76	; 0x4c
    477a:	0011      	movs	r1, r2
    477c:	a809      	add	r0, sp, #36	; 0x24
    477e:	47a8      	blx	r5
    v2sub1271(t2, t1, t1);                            // t1 = Y1^2-X1^2 
    v2sqr1271(P->z, t2);                              // t2 = Z1^2 
    4780:	2050      	movs	r0, #80	; 0x50
    4782:	4684      	mov	ip, r0
    4784:	44bc      	add	ip, r7
    4786:	4660      	mov	r0, ip
    4788:	a904      	add	r1, sp, #16
    478a:	9002      	str	r0, [sp, #8]
    478c:	47b0      	blx	r6
    v2sqr1271(P->x, P->ta);                           // Ta = (X1+Y1)^2 
    478e:	003c      	movs	r4, r7
    4790:	3478      	adds	r4, #120	; 0x78
    4792:	0021      	movs	r1, r4
    4794:	0038      	movs	r0, r7
    4796:	47b0      	blx	r6
    v2dblsub1271(t2, t1, t2);                         // t2 = 2Z1^2-(Y1^2-X1^2)
    4798:	aa04      	add	r2, sp, #16
    479a:	ae0e      	add	r6, sp, #56	; 0x38
    479c:	0031      	movs	r1, r6
    479e:	0010      	movs	r0, r2
    47a0:	4b11      	ldr	r3, [pc, #68]	; (47e8 <eccdouble+0xd4>)
    47a2:	4798      	blx	r3
    vsub1271(&a[0], &b[0], &c[0]);
    47a4:	0022      	movs	r2, r4
    47a6:	9e01      	ldr	r6, [sp, #4]
    47a8:	0031      	movs	r1, r6
    47aa:	0020      	movs	r0, r4
    47ac:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    47ae:	003b      	movs	r3, r7
    47b0:	338c      	adds	r3, #140	; 0x8c
    47b2:	0018      	movs	r0, r3
    47b4:	001a      	movs	r2, r3
    47b6:	9903      	ldr	r1, [sp, #12]
    47b8:	47a8      	blx	r5
    v2sub1271(P->ta, P->tb, P->ta);                   // Tafinal = 2X1*Y1 = (X1+Y1)^2-(X1^2+Y1^2)
    v2mul1271(t1, P->tb, P->y);                       // Yfinal = (X1^2+Y1^2)(Y1^2-X1^2) 
    47ba:	9a00      	ldr	r2, [sp, #0]
    47bc:	0031      	movs	r1, r6
    47be:	ab0e      	add	r3, sp, #56	; 0x38
    47c0:	0018      	movs	r0, r3
    47c2:	4d0a      	ldr	r5, [pc, #40]	; (47ec <eccdouble+0xd8>)
    47c4:	47a8      	blx	r5
    v2mul1271(t2, P->ta, P->x);                       // Xfinal = 2X1*Y1*[2Z1^2-(Y1^2-X1^2)]
    47c6:	003a      	movs	r2, r7
    47c8:	0021      	movs	r1, r4
    47ca:	a804      	add	r0, sp, #16
    47cc:	47a8      	blx	r5
    v2mul1271(t1, t2, P->z);                          // Zfinal = (Y1^2-X1^2)[2Z1^2-(Y1^2-X1^2)] 
    47ce:	9a02      	ldr	r2, [sp, #8]
    47d0:	a904      	add	r1, sp, #16
    47d2:	a80e      	add	r0, sp, #56	; 0x38
    47d4:	47a8      	blx	r5
}
    47d6:	b019      	add	sp, #100	; 0x64
    47d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	00004471 	.word	0x00004471
    47e0:	0000313f 	.word	0x0000313f
    47e4:	0000317b 	.word	0x0000317b
    47e8:	0000425d 	.word	0x0000425d
    47ec:	000043fd 	.word	0x000043fd

000047f0 <eccadd_core>:


__inline void eccadd_core(vpoint_extproj_precomp_t P, vpoint_extproj_precomp_t Q, vpoint_extproj_t R)      
{ // Basic point addition R = P+Q or R = P+P
    47f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47f2:	b09b      	sub	sp, #108	; 0x6c
    47f4:	0006      	movs	r6, r0
    47f6:	000f      	movs	r7, r1
    47f8:	0015      	movs	r5, r2
  //         Q = (X2+Y2,Y2-X2,Z2,T2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates    
  // Output: R = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    v2elm_t t1, t2; 
          
    v2mul1271(P->t2, Q->t2, R->z);                            // Z = 2dT1*T2 
    47fa:	2350      	movs	r3, #80	; 0x50
    47fc:	469c      	mov	ip, r3
    47fe:	4494      	add	ip, r2
    4800:	4663      	mov	r3, ip
    4802:	3178      	adds	r1, #120	; 0x78
    4804:	3078      	adds	r0, #120	; 0x78
    4806:	9301      	str	r3, [sp, #4]
    4808:	4662      	mov	r2, ip
    480a:	4c2f      	ldr	r4, [pc, #188]	; (48c8 <eccadd_core+0xd8>)
    480c:	47a0      	blx	r4
    v2mul1271(P->z2, Q->z2, t1);                              // t1 = 2Z1*Z2 
    480e:	0039      	movs	r1, r7
    4810:	3150      	adds	r1, #80	; 0x50
    4812:	0030      	movs	r0, r6
    4814:	3050      	adds	r0, #80	; 0x50
    4816:	aa10      	add	r2, sp, #64	; 0x40
    4818:	47a0      	blx	r4
    v2mul1271(P->xy, Q->xy, R->x);                            // X = (X1+Y1)(X2+Y2)
    481a:	002a      	movs	r2, r5
    481c:	0039      	movs	r1, r7
    481e:	0030      	movs	r0, r6
    4820:	47a0      	blx	r4
    v2mul1271(P->yx, Q->yx, R->y);                            // Y = (Y1-X1)(Y2-X2)
    4822:	2228      	movs	r2, #40	; 0x28
    4824:	4694      	mov	ip, r2
    4826:	44ac      	add	ip, r5
    4828:	4662      	mov	r2, ip
    482a:	0039      	movs	r1, r7
    482c:	3128      	adds	r1, #40	; 0x28
    482e:	0030      	movs	r0, r6
    4830:	3028      	adds	r0, #40	; 0x28
    4832:	9202      	str	r2, [sp, #8]
    4834:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    4836:	aa06      	add	r2, sp, #24
    4838:	9f01      	ldr	r7, [sp, #4]
    483a:	0039      	movs	r1, r7
    483c:	a810      	add	r0, sp, #64	; 0x40
    483e:	4e23      	ldr	r6, [pc, #140]	; (48cc <eccadd_core+0xdc>)
    4840:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4842:	2364      	movs	r3, #100	; 0x64
    4844:	469c      	mov	ip, r3
    4846:	44ac      	add	ip, r5
    4848:	4663      	mov	r3, ip
    484a:	aa0b      	add	r2, sp, #44	; 0x2c
    484c:	9303      	str	r3, [sp, #12]
    484e:	4661      	mov	r1, ip
    4850:	a815      	add	r0, sp, #84	; 0x54
    4852:	47b0      	blx	r6
    vadd1271(&a[0], &b[0], &c[0]);
    4854:	a810      	add	r0, sp, #64	; 0x40
    4856:	0002      	movs	r2, r0
    4858:	9701      	str	r7, [sp, #4]
    485a:	0039      	movs	r1, r7
    485c:	4f1c      	ldr	r7, [pc, #112]	; (48d0 <eccadd_core+0xe0>)
    485e:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4860:	a815      	add	r0, sp, #84	; 0x54
    4862:	0002      	movs	r2, r0
    4864:	9903      	ldr	r1, [sp, #12]
    4866:	47b8      	blx	r7
    v2sub1271(t1, R->z, t2);                                  // t2 = theta
    v2add1271(t1, R->z, t1);                                  // t1 = alpha
    v2sub1271(R->x, R->y, R->tb);                             // Tbfinal = beta
    4868:	23a0      	movs	r3, #160	; 0xa0
    486a:	469c      	mov	ip, r3
    486c:	44ac      	add	ip, r5
    486e:	4663      	mov	r3, ip
    vsub1271(&a[0], &b[0], &c[0]);
    4870:	9303      	str	r3, [sp, #12]
    4872:	4662      	mov	r2, ip
    4874:	9902      	ldr	r1, [sp, #8]
    4876:	0028      	movs	r0, r5
    4878:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    487a:	2114      	movs	r1, #20
    487c:	468c      	mov	ip, r1
    487e:	44ac      	add	ip, r5
    4880:	4660      	mov	r0, ip
    4882:	213c      	movs	r1, #60	; 0x3c
    4884:	468c      	mov	ip, r1
    4886:	44ac      	add	ip, r5
    4888:	4661      	mov	r1, ip
    488a:	002a      	movs	r2, r5
    488c:	32b4      	adds	r2, #180	; 0xb4
    488e:	9105      	str	r1, [sp, #20]
    4890:	9004      	str	r0, [sp, #16]
    4892:	47b0      	blx	r6
    v2add1271(R->x, R->y, R->ta);                             // Tafinal = omega
    4894:	002e      	movs	r6, r5
    4896:	3678      	adds	r6, #120	; 0x78
    vadd1271(&a[0], &b[0], &c[0]);
    4898:	0032      	movs	r2, r6
    489a:	9902      	ldr	r1, [sp, #8]
    489c:	0028      	movs	r0, r5
    489e:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    48a0:	002a      	movs	r2, r5
    48a2:	328c      	adds	r2, #140	; 0x8c
    48a4:	9905      	ldr	r1, [sp, #20]
    48a6:	9804      	ldr	r0, [sp, #16]
    48a8:	47b8      	blx	r7
    v2mul1271(R->tb, t2, R->x);                               // Xfinal = beta*theta
    48aa:	002a      	movs	r2, r5
    48ac:	a906      	add	r1, sp, #24
    48ae:	9803      	ldr	r0, [sp, #12]
    48b0:	47a0      	blx	r4
    v2mul1271(t1, t2, R->z);                                  // Zfinal = theta*alpha
    48b2:	9a01      	ldr	r2, [sp, #4]
    48b4:	a906      	add	r1, sp, #24
    48b6:	a810      	add	r0, sp, #64	; 0x40
    48b8:	47a0      	blx	r4
    v2mul1271(R->ta, t1, R->y);                               // Yfinal = alpha*omega
    48ba:	9a02      	ldr	r2, [sp, #8]
    48bc:	a910      	add	r1, sp, #64	; 0x40
    48be:	0030      	movs	r0, r6
    48c0:	47a0      	blx	r4
}
    48c2:	b01b      	add	sp, #108	; 0x6c
    48c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48c6:	46c0      	nop			; (mov r8, r8)
    48c8:	000043fd 	.word	0x000043fd
    48cc:	0000317b 	.word	0x0000317b
    48d0:	0000313f 	.word	0x0000313f

000048d4 <eccadd>:


void eccadd(vpoint_extproj_precomp_t Q, vpoint_extproj_t P)      
{ // Complete point addition P = P+Q or P = P+P
    48d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    48d6:	46de      	mov	lr, fp
    48d8:	b500      	push	{lr}
    48da:	b0ae      	sub	sp, #184	; 0xb8
    48dc:	0007      	movs	r7, r0
    48de:	000d      	movs	r5, r1
  // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal, 
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    vpoint_precomp_t R;
    v2elm_t t1; 

    v2add1271(P->y, P->x, R->xy);            // XR = (X1+Y1)
    48e0:	2328      	movs	r3, #40	; 0x28
    48e2:	469c      	mov	ip, r3
    48e4:	448c      	add	ip, r1
    48e6:	4663      	mov	r3, ip
    48e8:	4666      	mov	r6, ip
    vadd1271(&a[0], &b[0], &c[0]);
    48ea:	aa10      	add	r2, sp, #64	; 0x40
    48ec:	0018      	movs	r0, r3
    48ee:	4c3a      	ldr	r4, [pc, #232]	; (49d8 <eccadd+0x104>)
    48f0:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    48f2:	233c      	movs	r3, #60	; 0x3c
    48f4:	469c      	mov	ip, r3
    48f6:	44ac      	add	ip, r5
    48f8:	4663      	mov	r3, ip
    48fa:	2214      	movs	r2, #20
    48fc:	4694      	mov	ip, r2
    48fe:	44ac      	add	ip, r5
    4900:	4661      	mov	r1, ip
    4902:	aa15      	add	r2, sp, #84	; 0x54
    4904:	9102      	str	r1, [sp, #8]
    4906:	9301      	str	r3, [sp, #4]
    4908:	0018      	movs	r0, r3
    490a:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    490c:	aa1a      	add	r2, sp, #104	; 0x68
    490e:	0029      	movs	r1, r5
    4910:	9603      	str	r6, [sp, #12]
    4912:	0030      	movs	r0, r6
    4914:	4e31      	ldr	r6, [pc, #196]	; (49dc <eccadd+0x108>)
    4916:	46b3      	mov	fp, r6
    4918:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    491a:	aa1f      	add	r2, sp, #124	; 0x7c
    491c:	9902      	ldr	r1, [sp, #8]
    491e:	9801      	ldr	r0, [sp, #4]
    4920:	47b0      	blx	r6
    v2sub1271(P->y, P->x, R->yx);            // YR = (Y1-X1)
    v2mul1271(P->ta, P->tb, R->t2);          // TR = T1 
    4922:	2078      	movs	r0, #120	; 0x78
    4924:	4684      	mov	ip, r0
    4926:	44ac      	add	ip, r5
    4928:	4660      	mov	r0, ip
    492a:	22a0      	movs	r2, #160	; 0xa0
    492c:	4694      	mov	ip, r2
    492e:	44ac      	add	ip, r5
    4930:	4661      	mov	r1, ip
    4932:	aa24      	add	r2, sp, #144	; 0x90
    4934:	9105      	str	r1, [sp, #20]
    4936:	9004      	str	r0, [sp, #16]
    4938:	4e29      	ldr	r6, [pc, #164]	; (49e0 <eccadd+0x10c>)
    493a:	47b0      	blx	r6
    v2mul1271(Q->z2, P->z, t1);              // t1 = 2Z1*Z2      
    493c:	2350      	movs	r3, #80	; 0x50
    493e:	469c      	mov	ip, r3
    4940:	44ac      	add	ip, r5
    4942:	4663      	mov	r3, ip
    4944:	0038      	movs	r0, r7
    4946:	3050      	adds	r0, #80	; 0x50
    4948:	aa06      	add	r2, sp, #24
    494a:	9300      	str	r3, [sp, #0]
    494c:	4661      	mov	r1, ip
    494e:	47b0      	blx	r6
    v2mul1271(Q->t2, R->t2, P->z);           // Z = 2dT1*T2 
    4950:	0038      	movs	r0, r7
    4952:	3078      	adds	r0, #120	; 0x78
    4954:	9a00      	ldr	r2, [sp, #0]
    4956:	a924      	add	r1, sp, #144	; 0x90
    4958:	47b0      	blx	r6
    v2mul1271(Q->xy, R->xy, P->x);           // X = (X1+Y1)(X2+Y2)
    495a:	002a      	movs	r2, r5
    495c:	a910      	add	r1, sp, #64	; 0x40
    495e:	0038      	movs	r0, r7
    4960:	47b0      	blx	r6
    v2mul1271(Q->yx, R->yx, P->y);           // Y = (Y1-X1)(Y2-X2)
    4962:	3728      	adds	r7, #40	; 0x28
    4964:	0038      	movs	r0, r7
    4966:	9a03      	ldr	r2, [sp, #12]
    4968:	a91a      	add	r1, sp, #104	; 0x68
    496a:	47b0      	blx	r6
    vsub1271(&a[0], &b[0], &c[0]);
    496c:	aa24      	add	r2, sp, #144	; 0x90
    496e:	9900      	ldr	r1, [sp, #0]
    4970:	a806      	add	r0, sp, #24
    4972:	47d8      	blx	fp
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4974:	002f      	movs	r7, r5
    4976:	3764      	adds	r7, #100	; 0x64
    4978:	aa29      	add	r2, sp, #164	; 0xa4
    497a:	0039      	movs	r1, r7
    497c:	a80b      	add	r0, sp, #44	; 0x2c
    497e:	47d8      	blx	fp
    vadd1271(&a[0], &b[0], &c[0]);
    4980:	aa06      	add	r2, sp, #24
    4982:	9900      	ldr	r1, [sp, #0]
    4984:	0010      	movs	r0, r2
    4986:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4988:	aa0b      	add	r2, sp, #44	; 0x2c
    498a:	0039      	movs	r1, r7
    498c:	0010      	movs	r0, r2
    498e:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    4990:	9a05      	ldr	r2, [sp, #20]
    4992:	9f03      	ldr	r7, [sp, #12]
    4994:	0039      	movs	r1, r7
    4996:	0028      	movs	r0, r5
    4998:	47d8      	blx	fp
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    499a:	002a      	movs	r2, r5
    499c:	32b4      	adds	r2, #180	; 0xb4
    499e:	9901      	ldr	r1, [sp, #4]
    49a0:	9802      	ldr	r0, [sp, #8]
    49a2:	47d8      	blx	fp
    vadd1271(&a[0], &b[0], &c[0]);
    49a4:	9a04      	ldr	r2, [sp, #16]
    49a6:	0039      	movs	r1, r7
    49a8:	0028      	movs	r0, r5
    49aa:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    49ac:	002a      	movs	r2, r5
    49ae:	328c      	adds	r2, #140	; 0x8c
    49b0:	9901      	ldr	r1, [sp, #4]
    49b2:	9802      	ldr	r0, [sp, #8]
    49b4:	47a0      	blx	r4
    v2sub1271(t1, P->z, R->t2);              // TR = theta
    v2add1271(t1, P->z, t1);                 // t1 = alpha
    v2sub1271(P->x, P->y, P->tb);            // Tbfinal = beta
    v2add1271(P->x, P->y, P->ta);            // Tafinal = omega
    v2mul1271(P->tb, R->t2, P->x);           // Xfinal = beta*theta
    49b6:	002a      	movs	r2, r5
    49b8:	a924      	add	r1, sp, #144	; 0x90
    49ba:	9805      	ldr	r0, [sp, #20]
    49bc:	47b0      	blx	r6
    v2mul1271(t1, R->t2, P->z);              // Zfinal = theta*alpha
    49be:	9a00      	ldr	r2, [sp, #0]
    49c0:	a924      	add	r1, sp, #144	; 0x90
    49c2:	a806      	add	r0, sp, #24
    49c4:	47b0      	blx	r6
    v2mul1271(P->ta, t1, P->y);              // Yfinal = alpha*omega
    49c6:	003a      	movs	r2, r7
    49c8:	a906      	add	r1, sp, #24
    49ca:	9804      	ldr	r0, [sp, #16]
    49cc:	47b0      	blx	r6
}
    49ce:	b02e      	add	sp, #184	; 0xb8
    49d0:	bc04      	pop	{r2}
    49d2:	4693      	mov	fp, r2
    49d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49d6:	46c0      	nop			; (mov r8, r8)
    49d8:	0000313f 	.word	0x0000313f
    49dc:	0000317b 	.word	0x0000317b
    49e0:	000043fd 	.word	0x000043fd

000049e4 <point_setup>:


void point_setup(point_t P, vpoint_extproj_t Q)
{ // Point conversion to vectorized representation (X,Y,Z,Ta,Tb) 
    49e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49e6:	0005      	movs	r5, r0
    49e8:	000c      	movs	r4, r1
  // Input: P = (x,y) in affine coordinates
  // Output: P = (X,Y,1,Ta,Tb), where Ta=X, Tb=Y and T=Ta*Tb, corresponding to (X:Y:Z:T) in extended twisted Edwards coordinates

    from_std_to_ext(P->x, Q->x);
    49ea:	4f0c      	ldr	r7, [pc, #48]	; (4a1c <point_setup+0x38>)
    49ec:	47b8      	blx	r7
    from_std_to_ext(P->y, Q->y);
    49ee:	0026      	movs	r6, r4
    49f0:	3628      	adds	r6, #40	; 0x28
    49f2:	0028      	movs	r0, r5
    49f4:	3020      	adds	r0, #32
    49f6:	0031      	movs	r1, r6
    49f8:	47b8      	blx	r7
    v2copy1271(Q->x, Q->ta);              // Ta = X1
    49fa:	0021      	movs	r1, r4
    49fc:	3178      	adds	r1, #120	; 0x78
    49fe:	0020      	movs	r0, r4
    4a00:	4d07      	ldr	r5, [pc, #28]	; (4a20 <point_setup+0x3c>)
    4a02:	47a8      	blx	r5
    v2copy1271(Q->y, Q->tb);              // Tb = Y1
    4a04:	0021      	movs	r1, r4
    4a06:	31a0      	adds	r1, #160	; 0xa0
    4a08:	0030      	movs	r0, r6
    4a0a:	47a8      	blx	r5
    v2zero1271(Q->z); Q->z[0]=1;          // Z1 = 1
    4a0c:	0020      	movs	r0, r4
    4a0e:	3050      	adds	r0, #80	; 0x50
    4a10:	4b04      	ldr	r3, [pc, #16]	; (4a24 <point_setup+0x40>)
    4a12:	4798      	blx	r3
    4a14:	2301      	movs	r3, #1
    4a16:	6523      	str	r3, [r4, #80]	; 0x50
}
    4a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	000039b9 	.word	0x000039b9
    4a20:	00003d5f 	.word	0x00003d5f
    4a24:	00004205 	.word	0x00004205

00004a28 <ecc_point_validate>:


bool ecc_point_validate(vpoint_extproj_t P)
{ // Point validation: check if point lies on the curve
    4a28:	b530      	push	{r4, r5, lr}
    4a2a:	b09f      	sub	sp, #124	; 0x7c
    4a2c:	0005      	movs	r5, r0
  // Output: TRUE (1) if point lies on the curve E: -x^2+y^2-1-dx^2*y^2 = 0, FALSE (0) otherwise.
  // SECURITY NOTE: this function does not run in constant time (input point P is assumed to be public).
    v2elm_t t1, t2, t3;
    unsigned int i;

    v2sqr1271(P->y, t1);  
    4a2e:	3028      	adds	r0, #40	; 0x28
    4a30:	a914      	add	r1, sp, #80	; 0x50
    4a32:	4c21      	ldr	r4, [pc, #132]	; (4ab8 <ecc_point_validate+0x90>)
    4a34:	47a0      	blx	r4
    v2sqr1271(P->x, t2);
    4a36:	a90a      	add	r1, sp, #40	; 0x28
    4a38:	0028      	movs	r0, r5
    4a3a:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    4a3c:	466a      	mov	r2, sp
    4a3e:	a90a      	add	r1, sp, #40	; 0x28
    4a40:	a814      	add	r0, sp, #80	; 0x50
    4a42:	4c1e      	ldr	r4, [pc, #120]	; (4abc <ecc_point_validate+0x94>)
    4a44:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4a46:	aa05      	add	r2, sp, #20
    4a48:	a90f      	add	r1, sp, #60	; 0x3c
    4a4a:	a819      	add	r0, sp, #100	; 0x64
    4a4c:	47a0      	blx	r4
    v2sub1271(t1, t2, t3);                    // -x^2 + y^2 
    v2mul1271(t1, t2, t1);                    // x^2*y^2
    4a4e:	aa14      	add	r2, sp, #80	; 0x50
    4a50:	a90a      	add	r1, sp, #40	; 0x28
    4a52:	0010      	movs	r0, r2
    4a54:	4d1a      	ldr	r5, [pc, #104]	; (4ac0 <ecc_point_validate+0x98>)
    4a56:	47a8      	blx	r5
    v2mul1271((digit_t*)&PARAMETER_d, t1, t2);          // dx^2*y^2
    4a58:	aa0a      	add	r2, sp, #40	; 0x28
    4a5a:	a914      	add	r1, sp, #80	; 0x50
    4a5c:	4819      	ldr	r0, [pc, #100]	; (4ac4 <ecc_point_validate+0x9c>)
    4a5e:	47a8      	blx	r5
    v2zero1271(t1);  t1[0] = 1;               // t1 = 1
    4a60:	a814      	add	r0, sp, #80	; 0x50
    4a62:	4b19      	ldr	r3, [pc, #100]	; (4ac8 <ecc_point_validate+0xa0>)
    4a64:	4798      	blx	r3
    4a66:	2301      	movs	r3, #1
    4a68:	9314      	str	r3, [sp, #80]	; 0x50
    vadd1271(&a[0], &b[0], &c[0]);
    4a6a:	aa0a      	add	r2, sp, #40	; 0x28
    4a6c:	a914      	add	r1, sp, #80	; 0x50
    4a6e:	0010      	movs	r0, r2
    4a70:	4d16      	ldr	r5, [pc, #88]	; (4acc <ecc_point_validate+0xa4>)
    4a72:	47a8      	blx	r5
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4a74:	aa0f      	add	r2, sp, #60	; 0x3c
    4a76:	a919      	add	r1, sp, #100	; 0x64
    4a78:	0010      	movs	r0, r2
    4a7a:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    4a7c:	aa14      	add	r2, sp, #80	; 0x50
    4a7e:	a90a      	add	r1, sp, #40	; 0x28
    4a80:	4668      	mov	r0, sp
    4a82:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4a84:	aa19      	add	r2, sp, #100	; 0x64
    4a86:	a90f      	add	r1, sp, #60	; 0x3c
    4a88:	a805      	add	r0, sp, #20
    4a8a:	47a0      	blx	r4
    v2add1271(t2, t1, t2);                    // 1 + dx^2*y^2
    v2sub1271(t3, t2, t1);                    // -x^2 + y^2 - 1 - dx^2*y^2
    v2mod1271(t1, t1);
    4a8c:	a914      	add	r1, sp, #80	; 0x50
    4a8e:	0008      	movs	r0, r1
    4a90:	4b0f      	ldr	r3, [pc, #60]	; (4ad0 <ecc_point_validate+0xa8>)
    4a92:	4798      	blx	r3
    
    for (i = 0; i < 2*VWORDS_FIELD-1; i++) {
        if (t1[i] != 0) return false;
    4a94:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4a96:	2b00      	cmp	r3, #0
    4a98:	d10a      	bne.n	4ab0 <ecc_point_validate+0x88>
    4a9a:	ab14      	add	r3, sp, #80	; 0x50
    4a9c:	aa1c      	add	r2, sp, #112	; 0x70
    4a9e:	6859      	ldr	r1, [r3, #4]
    4aa0:	2900      	cmp	r1, #0
    4aa2:	d107      	bne.n	4ab4 <ecc_point_validate+0x8c>
    4aa4:	3304      	adds	r3, #4
    for (i = 0; i < 2*VWORDS_FIELD-1; i++) {
    4aa6:	4293      	cmp	r3, r2
    4aa8:	d1f9      	bne.n	4a9e <ecc_point_validate+0x76>
    }
    return true; 
    4aaa:	2001      	movs	r0, #1
}
    4aac:	b01f      	add	sp, #124	; 0x7c
    4aae:	bd30      	pop	{r4, r5, pc}
        if (t1[i] != 0) return false;
    4ab0:	2000      	movs	r0, #0
    4ab2:	e7fb      	b.n	4aac <ecc_point_validate+0x84>
    4ab4:	2000      	movs	r0, #0
    4ab6:	e7f9      	b.n	4aac <ecc_point_validate+0x84>
    4ab8:	00004471 	.word	0x00004471
    4abc:	0000317b 	.word	0x0000317b
    4ac0:	000043fd 	.word	0x000043fd
    4ac4:	00009e58 	.word	0x00009e58
    4ac8:	00004205 	.word	0x00004205
    4acc:	0000313f 	.word	0x0000313f
    4ad0:	000043e1 	.word	0x000043e1

00004ad4 <mLSB_set_recode>:
    return true;
}


void mLSB_set_recode(uint64_t* scalar, unsigned int *digits)
{ // Computes the modified LSB-set representation of a scalar
    4ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ad6:	46de      	mov	lr, fp
    4ad8:	4657      	mov	r7, sl
    4ada:	464e      	mov	r6, r9
    4adc:	4645      	mov	r5, r8
    4ade:	b5e0      	push	{r5, r6, r7, lr}
    4ae0:	b087      	sub	sp, #28
    4ae2:	0005      	movs	r5, r0
    4ae4:	468b      	mov	fp, r1
  //         where l = d*w and d = ceil(bitlength(order)/(w*v))*v. The values v and w are fixed and must be in the range [1, 10] (see FourQ.h); they determine the size 
  //         of the precomputed table "FIXED_BASE_TABLE" used by ecc_mul_fixed(). 
    unsigned int i, j, d = D_FIXEDBASE, l = L_FIXEDBASE;
    uint64_t temp, carry;
    
    digits[d-1] = 0;
    4ae6:	2200      	movs	r2, #0
    4ae8:	23c4      	movs	r3, #196	; 0xc4
    4aea:	50ca      	str	r2, [r1, r3]
    4aec:	9004      	str	r0, [sp, #16]
    4aee:	0004      	movs	r4, r0
    4af0:	3418      	adds	r4, #24
    4af2:	0003      	movs	r3, r0

    // Shift scalar to the right by 1   
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
        SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    4af4:	685a      	ldr	r2, [r3, #4]
    4af6:	07d0      	lsls	r0, r2, #31
    4af8:	6819      	ldr	r1, [r3, #0]
    4afa:	0849      	lsrs	r1, r1, #1
    4afc:	4301      	orrs	r1, r0
    4afe:	0852      	lsrs	r2, r2, #1
    4b00:	6898      	ldr	r0, [r3, #8]
    4b02:	07c0      	lsls	r0, r0, #31
    4b04:	6019      	str	r1, [r3, #0]
    4b06:	4042      	eors	r2, r0
    4b08:	605a      	str	r2, [r3, #4]
    4b0a:	3308      	adds	r3, #8
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    4b0c:	42a3      	cmp	r3, r4
    4b0e:	d1f1      	bne.n	4af4 <mLSB_set_recode+0x20>
    4b10:	4699      	mov	r9, r3
    }
    scalar[NWORDS64_ORDER-1] >>= 1;
    4b12:	69ea      	ldr	r2, [r5, #28]
    4b14:	07d1      	lsls	r1, r2, #31
    4b16:	69ab      	ldr	r3, [r5, #24]
    4b18:	085b      	lsrs	r3, r3, #1
    4b1a:	430b      	orrs	r3, r1
    4b1c:	61ab      	str	r3, [r5, #24]
    4b1e:	0852      	lsrs	r2, r2, #1
    4b20:	61ea      	str	r2, [r5, #28]
    4b22:	4659      	mov	r1, fp
    4b24:	23c4      	movs	r3, #196	; 0xc4
    4b26:	445b      	add	r3, fp
    4b28:	4698      	mov	r8, r3

    for (i = 0; i < (d-1); i++)
    {
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    4b2a:	2301      	movs	r3, #1
    4b2c:	469c      	mov	ip, r3
    4b2e:	9600      	str	r6, [sp, #0]
    4b30:	9701      	str	r7, [sp, #4]
    4b32:	4648      	mov	r0, r9
    4b34:	e00a      	b.n	4b4c <mLSB_set_recode+0x78>
                                                          // if scalar_(i+1) = 0 then digit_i = -1 (negative), else if scalar_(i+1) = 1 then digit_i = 0 (positive)
        // Shift scalar to the right by 1   
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    4b36:	69ef      	ldr	r7, [r5, #28]
    4b38:	07fb      	lsls	r3, r7, #31
    4b3a:	69aa      	ldr	r2, [r5, #24]
    4b3c:	0852      	lsrs	r2, r2, #1
    4b3e:	431a      	orrs	r2, r3
    4b40:	61aa      	str	r2, [r5, #24]
    4b42:	087b      	lsrs	r3, r7, #1
    4b44:	61eb      	str	r3, [r5, #28]
    4b46:	3104      	adds	r1, #4
    for (i = 0; i < (d-1); i++)
    4b48:	4541      	cmp	r1, r8
    4b4a:	d014      	beq.n	4b76 <mLSB_set_recode+0xa2>
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    4b4c:	682b      	ldr	r3, [r5, #0]
    4b4e:	4662      	mov	r2, ip
    4b50:	4013      	ands	r3, r2
    4b52:	3b01      	subs	r3, #1
    4b54:	600b      	str	r3, [r1, #0]
    4b56:	9c04      	ldr	r4, [sp, #16]
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    4b58:	6863      	ldr	r3, [r4, #4]
    4b5a:	07de      	lsls	r6, r3, #31
    4b5c:	6822      	ldr	r2, [r4, #0]
    4b5e:	0852      	lsrs	r2, r2, #1
    4b60:	4332      	orrs	r2, r6
    4b62:	085b      	lsrs	r3, r3, #1
    4b64:	68a6      	ldr	r6, [r4, #8]
    4b66:	07f6      	lsls	r6, r6, #31
    4b68:	6022      	str	r2, [r4, #0]
    4b6a:	4073      	eors	r3, r6
    4b6c:	6063      	str	r3, [r4, #4]
    4b6e:	3408      	adds	r4, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    4b70:	4284      	cmp	r4, r0
    4b72:	d1f1      	bne.n	4b58 <mLSB_set_recode+0x84>
    4b74:	e7df      	b.n	4b36 <mLSB_set_recode+0x62>
    4b76:	9e00      	ldr	r6, [sp, #0]
    4b78:	9f01      	ldr	r7, [sp, #4]
    4b7a:	23c8      	movs	r3, #200	; 0xc8
    4b7c:	445b      	add	r3, fp
    4b7e:	4698      	mov	r8, r3
    for (i = 0; i < (d-1); i++)
    4b80:	2332      	movs	r3, #50	; 0x32
    4b82:	2220      	movs	r2, #32
    4b84:	4691      	mov	r9, r2
    4b86:	44a9      	add	r9, r5
    4b88:	46a2      	mov	sl, r4
    4b8a:	4644      	mov	r4, r8
    4b8c:	4698      	mov	r8, r3
    4b8e:	465b      	mov	r3, fp
    4b90:	9305      	str	r3, [sp, #20]
    4b92:	e007      	b.n	4ba4 <mLSB_set_recode+0xd0>
    4b94:	4681      	mov	r9, r0
    } 

    for (i = d; i < l; i++)
    4b96:	2301      	movs	r3, #1
    4b98:	469c      	mov	ip, r3
    4b9a:	44e0      	add	r8, ip
    4b9c:	3404      	adds	r4, #4
    4b9e:	4643      	mov	r3, r8
    4ba0:	2bfa      	cmp	r3, #250	; 0xfa
    4ba2:	d056      	beq.n	4c52 <mLSB_set_recode+0x17e>
    4ba4:	46a3      	mov	fp, r4
    {
        digits[i] = (unsigned int)(scalar[0] & 1);        // digits_i = k mod 2. Sign is determined by the "sign" row
    4ba6:	2301      	movs	r3, #1
    4ba8:	682a      	ldr	r2, [r5, #0]
    4baa:	4013      	ands	r3, r2
    4bac:	6023      	str	r3, [r4, #0]
    4bae:	9904      	ldr	r1, [sp, #16]
    4bb0:	9600      	str	r6, [sp, #0]
    4bb2:	9701      	str	r7, [sp, #4]
    4bb4:	4657      	mov	r7, sl

        // Shift scalar to the right by 1  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    4bb6:	684b      	ldr	r3, [r1, #4]
    4bb8:	07d8      	lsls	r0, r3, #31
    4bba:	680a      	ldr	r2, [r1, #0]
    4bbc:	0852      	lsrs	r2, r2, #1
    4bbe:	4302      	orrs	r2, r0
    4bc0:	085b      	lsrs	r3, r3, #1
    4bc2:	6888      	ldr	r0, [r1, #8]
    4bc4:	07c0      	lsls	r0, r0, #31
    4bc6:	600a      	str	r2, [r1, #0]
    4bc8:	4043      	eors	r3, r0
    4bca:	604b      	str	r3, [r1, #4]
    4bcc:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    4bce:	42b9      	cmp	r1, r7
    4bd0:	d1f1      	bne.n	4bb6 <mLSB_set_recode+0xe2>
    4bd2:	46ba      	mov	sl, r7
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    4bd4:	69ea      	ldr	r2, [r5, #28]
    4bd6:	07d1      	lsls	r1, r2, #31
    4bd8:	69ab      	ldr	r3, [r5, #24]
    4bda:	085b      	lsrs	r3, r3, #1
    4bdc:	430b      	orrs	r3, r1
    4bde:	61ab      	str	r3, [r5, #24]
    4be0:	0852      	lsrs	r2, r2, #1
    4be2:	61ea      	str	r2, [r5, #28]

        temp = (0 - digits[i-(i/d)*d]) & digits[i];       // if (digits_i=0 \/ 1) then temp = 0, else if (digits_i=-1) then temp = 1 
    4be4:	2132      	movs	r1, #50	; 0x32
    4be6:	4640      	mov	r0, r8
    4be8:	4b1d      	ldr	r3, [pc, #116]	; (4c60 <mLSB_set_recode+0x18c>)
    4bea:	4798      	blx	r3
    4bec:	0089      	lsls	r1, r1, #2
    4bee:	9b05      	ldr	r3, [sp, #20]
    4bf0:	58cb      	ldr	r3, [r1, r3]
    4bf2:	425b      	negs	r3, r3
    4bf4:	465a      	mov	r2, fp
    4bf6:	6810      	ldr	r0, [r2, #0]
    4bf8:	4018      	ands	r0, r3
    4bfa:	4684      	mov	ip, r0
    4bfc:	9002      	str	r0, [sp, #8]
    4bfe:	2300      	movs	r3, #0
    4c00:	9303      	str	r3, [sp, #12]
            
        // floor(scalar/2) + temp
        scalar[0] = scalar[0] + temp;
    4c02:	9a02      	ldr	r2, [sp, #8]
    4c04:	9b03      	ldr	r3, [sp, #12]
    4c06:	6828      	ldr	r0, [r5, #0]
    4c08:	6869      	ldr	r1, [r5, #4]
    4c0a:	1812      	adds	r2, r2, r0
    4c0c:	414b      	adcs	r3, r1
    4c0e:	0029      	movs	r1, r5
    4c10:	c10c      	stmia	r1!, {r2, r3}
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    4c12:	9200      	str	r2, [sp, #0]
    4c14:	9301      	str	r3, [sp, #4]
    4c16:	4253      	negs	r3, r2
    4c18:	9a00      	ldr	r2, [sp, #0]
    4c1a:	4313      	orrs	r3, r2
    4c1c:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    4c1e:	2201      	movs	r2, #1
    4c20:	4053      	eors	r3, r2
        carry = (temp & (uint64_t)is_digit_zero_ct((digit_t)scalar[0]));       // carry = (scalar[0] < temp);
    4c22:	4660      	mov	r0, ip
    4c24:	4018      	ands	r0, r3
    4c26:	0006      	movs	r6, r0
    4c28:	2700      	movs	r7, #0
    4c2a:	4648      	mov	r0, r9
        for (j = 1; j < NWORDS64_ORDER; j++)
        {
            scalar[j] = scalar[j] + carry; 
    4c2c:	680a      	ldr	r2, [r1, #0]
    4c2e:	684b      	ldr	r3, [r1, #4]
    4c30:	1992      	adds	r2, r2, r6
    4c32:	417b      	adcs	r3, r7
    4c34:	c10c      	stmia	r1!, {r2, r3}
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    4c36:	9200      	str	r2, [sp, #0]
    4c38:	9301      	str	r3, [sp, #4]
    4c3a:	4253      	negs	r3, r2
    4c3c:	9a00      	ldr	r2, [sp, #0]
    4c3e:	4313      	orrs	r3, r2
    4c40:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    4c42:	2201      	movs	r2, #1
    4c44:	4053      	eors	r3, r2
            carry = (carry & (uint64_t)is_digit_zero_ct((digit_t)scalar[j]));  // carry = (scalar[j] < temp);
    4c46:	4033      	ands	r3, r6
    4c48:	001e      	movs	r6, r3
    4c4a:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    4c4c:	4281      	cmp	r1, r0
    4c4e:	d1ed      	bne.n	4c2c <mLSB_set_recode+0x158>
    4c50:	e7a0      	b.n	4b94 <mLSB_set_recode+0xc0>
        }
    } 
    return;              
}
    4c52:	b007      	add	sp, #28
    4c54:	bc3c      	pop	{r2, r3, r4, r5}
    4c56:	4690      	mov	r8, r2
    4c58:	4699      	mov	r9, r3
    4c5a:	46a2      	mov	sl, r4
    4c5c:	46ab      	mov	fp, r5
    4c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c60:	00006459 	.word	0x00006459

00004c64 <ecc_mul_fixed>:
{ // Fixed-base scalar multiplication Q = k*G, where G is the generator. FIXED_BASE_TABLE stores v*2^(w-1) = 80 multiples of G.
    4c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c66:	46de      	mov	lr, fp
    4c68:	4657      	mov	r7, sl
    4c6a:	464e      	mov	r6, r9
    4c6c:	4645      	mov	r5, r8
    4c6e:	b5e0      	push	{r5, r6, r7, lr}
    4c70:	4cce      	ldr	r4, [pc, #824]	; (4fac <ecc_mul_fixed+0x348>)
    4c72:	44a5      	add	sp, r4
    4c74:	0005      	movs	r5, r0
    4c76:	9103      	str	r1, [sp, #12]
    unsigned int digit = 0, digits[NBITS_ORDER_PLUS_ONE+(W_FIXEDBASE*V_FIXEDBASE)-1] = {0}; 
    4c78:	ac85      	add	r4, sp, #532	; 0x214
    4c7a:	4acd      	ldr	r2, [pc, #820]	; (4fb0 <ecc_mul_fixed+0x34c>)
    4c7c:	2100      	movs	r1, #0
    4c7e:	0020      	movs	r0, r4
    4c80:	4bcc      	ldr	r3, [pc, #816]	; (4fb4 <ecc_mul_fixed+0x350>)
    4c82:	4798      	blx	r3
	modulo_order(k, temp);                                      // temp = k mod (order) 
    4c84:	a97d      	add	r1, sp, #500	; 0x1f4
    4c86:	0028      	movs	r0, r5
    4c88:	4bcb      	ldr	r3, [pc, #812]	; (4fb8 <ecc_mul_fixed+0x354>)
    4c8a:	4798      	blx	r3
	conversion_to_odd(temp, temp);                              // Converting scalar to odd using the prime subgroup order
    4c8c:	a97d      	add	r1, sp, #500	; 0x1f4
    4c8e:	0008      	movs	r0, r1
    4c90:	4bca      	ldr	r3, [pc, #808]	; (4fbc <ecc_mul_fixed+0x358>)
    4c92:	4798      	blx	r3
	mLSB_set_recode((uint64_t*)temp, digits);                   // Scalar recoding
    4c94:	a985      	add	r1, sp, #532	; 0x214
    4c96:	a87d      	add	r0, sp, #500	; 0x1f4
    4c98:	4bc9      	ldr	r3, [pc, #804]	; (4fc0 <ecc_mul_fixed+0x35c>)
    4c9a:	4798      	blx	r3
    digit = digits[w*d-1];
    4c9c:	23f9      	movs	r3, #249	; 0xf9
    4c9e:	009b      	lsls	r3, r3, #2
        digit = 2*digit + digits[i];
    4ca0:	58e2      	ldr	r2, [r4, r3]
    4ca2:	0052      	lsls	r2, r2, #1
    4ca4:	3bc8      	subs	r3, #200	; 0xc8
    4ca6:	58e3      	ldr	r3, [r4, r3]
    4ca8:	18d2      	adds	r2, r2, r3
    4caa:	0052      	lsls	r2, r2, #1
    4cac:	2395      	movs	r3, #149	; 0x95
    4cae:	009b      	lsls	r3, r3, #2
    4cb0:	58e3      	ldr	r3, [r4, r3]
    4cb2:	18d2      	adds	r2, r2, r3
    4cb4:	0052      	lsls	r2, r2, #1
    table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    4cb6:	23c4      	movs	r3, #196	; 0xc4
    4cb8:	58e3      	ldr	r3, [r4, r3]
        digit = 2*digit + digits[i];
    4cba:	21c6      	movs	r1, #198	; 0xc6
    4cbc:	0049      	lsls	r1, r1, #1
    4cbe:	5861      	ldr	r1, [r4, r1]
    4cc0:	1852      	adds	r2, r2, r1
    table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    4cc2:	4cc0      	ldr	r4, [pc, #768]	; (4fc4 <ecc_mul_fixed+0x360>)
    4cc4:	21f0      	movs	r1, #240	; 0xf0
    4cc6:	0149      	lsls	r1, r1, #5
    4cc8:	1860      	adds	r0, r4, r1
    4cca:	a919      	add	r1, sp, #100	; 0x64
    4ccc:	4dbe      	ldr	r5, [pc, #760]	; (4fc8 <ecc_mul_fixed+0x364>)
    4cce:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    4cd0:	aa37      	add	r2, sp, #220	; 0xdc
    4cd2:	a923      	add	r1, sp, #140	; 0x8c
    4cd4:	a819      	add	r0, sp, #100	; 0x64
    4cd6:	4dbd      	ldr	r5, [pc, #756]	; (4fcc <ecc_mul_fixed+0x368>)
    4cd8:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4cda:	aa3c      	add	r2, sp, #240	; 0xf0
    4cdc:	a928      	add	r1, sp, #160	; 0xa0
    4cde:	a81e      	add	r0, sp, #120	; 0x78
    4ce0:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    4ce2:	aa41      	add	r2, sp, #260	; 0x104
    4ce4:	a923      	add	r1, sp, #140	; 0x8c
    4ce6:	a819      	add	r0, sp, #100	; 0x64
    4ce8:	4db9      	ldr	r5, [pc, #740]	; (4fd0 <ecc_mul_fixed+0x36c>)
    4cea:	47a8      	blx	r5
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4cec:	aa46      	add	r2, sp, #280	; 0x118
    4cee:	a928      	add	r1, sp, #160	; 0xa0
    4cf0:	a81e      	add	r0, sp, #120	; 0x78
    4cf2:	47a8      	blx	r5
    v2zero1271(Q->z); Q->z[0]=1;             // ZQ = 1
    4cf4:	a84b      	add	r0, sp, #300	; 0x12c
    4cf6:	4bb7      	ldr	r3, [pc, #732]	; (4fd4 <ecc_mul_fixed+0x370>)
    4cf8:	4798      	blx	r3
    4cfa:	2301      	movs	r3, #1
    4cfc:	934b      	str	r3, [sp, #300]	; 0x12c
    v2div1271(Q->x);                         // XQ = x1
    4cfe:	a837      	add	r0, sp, #220	; 0xdc
    4d00:	4db5      	ldr	r5, [pc, #724]	; (4fd8 <ecc_mul_fixed+0x374>)
    4d02:	47a8      	blx	r5
    v2div1271(Q->y);                         // YQ = y1 
    4d04:	a841      	add	r0, sp, #260	; 0x104
    4d06:	47a8      	blx	r5
    v2copy1271(Q->x, Q->ta);                 // TaQ = x1
    4d08:	a955      	add	r1, sp, #340	; 0x154
    4d0a:	a837      	add	r0, sp, #220	; 0xdc
    4d0c:	4db3      	ldr	r5, [pc, #716]	; (4fdc <ecc_mul_fixed+0x378>)
    4d0e:	47a8      	blx	r5
    v2copy1271(Q->y, Q->tb);                 // TbQ = y1
    4d10:	a95f      	add	r1, sp, #380	; 0x17c
    4d12:	a841      	add	r0, sp, #260	; 0x104
    4d14:	47a8      	blx	r5
    4d16:	23b4      	movs	r3, #180	; 0xb4
    4d18:	015b      	lsls	r3, r3, #5
    4d1a:	4698      	mov	r8, r3
    4d1c:	44a0      	add	r8, r4
    4d1e:	23a1      	movs	r3, #161	; 0xa1
    4d20:	00db      	lsls	r3, r3, #3
    4d22:	446b      	add	r3, sp
    4d24:	469a      	mov	sl, r3
    4d26:	26bd      	movs	r6, #189	; 0xbd
        table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);   
    4d28:	4ba7      	ldr	r3, [pc, #668]	; (4fc8 <ecc_mul_fixed+0x364>)
    4d2a:	4699      	mov	r9, r3
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    4d2c:	4dac      	ldr	r5, [pc, #688]	; (4fe0 <ecc_mul_fixed+0x37c>)
    vadd1271(&a[0], &b[0], &c[0]);
    4d2e:	4ca8      	ldr	r4, [pc, #672]	; (4fd0 <ecc_mul_fixed+0x36c>)
    4d30:	46d3      	mov	fp, sl
    4d32:	46dc      	mov	ip, fp
        digit = digits[w*d-(j+1)*e-1];
    4d34:	465b      	mov	r3, fp
    4d36:	33c8      	adds	r3, #200	; 0xc8
    4d38:	681a      	ldr	r2, [r3, #0]
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)           
    4d3a:	0033      	movs	r3, r6
    4d3c:	0030      	movs	r0, r6
    4d3e:	3864      	subs	r0, #100	; 0x64
    4d40:	4286      	cmp	r6, r0
    4d42:	db08      	blt.n	4d56 <ecc_mul_fixed+0xf2>
    4d44:	4659      	mov	r1, fp
            digit = 2*digit + digits[i];
    4d46:	0052      	lsls	r2, r2, #1
    4d48:	680f      	ldr	r7, [r1, #0]
    4d4a:	46ba      	mov	sl, r7
    4d4c:	4452      	add	r2, sl
    4d4e:	3b32      	subs	r3, #50	; 0x32
    4d50:	39c8      	subs	r1, #200	; 0xc8
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)           
    4d52:	4298      	cmp	r0, r3
    4d54:	ddf7      	ble.n	4d46 <ecc_mul_fixed+0xe2>
        table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);   
    4d56:	4ba3      	ldr	r3, [pc, #652]	; (4fe4 <ecc_mul_fixed+0x380>)
    4d58:	4463      	add	r3, ip
    4d5a:	681b      	ldr	r3, [r3, #0]
    4d5c:	a919      	add	r1, sp, #100	; 0x64
    4d5e:	4640      	mov	r0, r8
    4d60:	47c8      	blx	r9
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    4d62:	aa55      	add	r2, sp, #340	; 0x154
    4d64:	a95f      	add	r1, sp, #380	; 0x17c
    4d66:	0010      	movs	r0, r2
    4d68:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    4d6a:	aa05      	add	r2, sp, #20
    4d6c:	a94b      	add	r1, sp, #300	; 0x12c
    4d6e:	0008      	movs	r0, r1
    4d70:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4d72:	aa0a      	add	r2, sp, #40	; 0x28
    4d74:	a950      	add	r1, sp, #320	; 0x140
    4d76:	0008      	movs	r0, r1
    4d78:	47a0      	blx	r4
    v2mul1271(P->ta, Q->t2, P->ta);                       // Ta = 2dT1*t2 
    4d7a:	aa55      	add	r2, sp, #340	; 0x154
    4d7c:	a92d      	add	r1, sp, #180	; 0xb4
    4d7e:	0010      	movs	r0, r2
    4d80:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    4d82:	aa4b      	add	r2, sp, #300	; 0x12c
    4d84:	a941      	add	r1, sp, #260	; 0x104
    4d86:	a837      	add	r0, sp, #220	; 0xdc
    4d88:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4d8a:	aa50      	add	r2, sp, #320	; 0x140
    4d8c:	a946      	add	r1, sp, #280	; 0x118
    4d8e:	a83c      	add	r0, sp, #240	; 0xf0
    4d90:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    4d92:	aa5f      	add	r2, sp, #380	; 0x17c
    4d94:	a937      	add	r1, sp, #220	; 0xdc
    4d96:	a841      	add	r0, sp, #260	; 0x104
    4d98:	4b8c      	ldr	r3, [pc, #560]	; (4fcc <ecc_mul_fixed+0x368>)
    4d9a:	469a      	mov	sl, r3
    4d9c:	4798      	blx	r3
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4d9e:	aa64      	add	r2, sp, #400	; 0x190
    4da0:	a93c      	add	r1, sp, #240	; 0xf0
    4da2:	a846      	add	r0, sp, #280	; 0x118
    4da4:	47d0      	blx	sl
    vsub1271(&a[0], &b[0], &c[0]);
    4da6:	aa0f      	add	r2, sp, #60	; 0x3c
    4da8:	a955      	add	r1, sp, #340	; 0x154
    4daa:	a805      	add	r0, sp, #20
    4dac:	47d0      	blx	sl
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4dae:	aa14      	add	r2, sp, #80	; 0x50
    4db0:	a95a      	add	r1, sp, #360	; 0x168
    4db2:	a80a      	add	r0, sp, #40	; 0x28
    4db4:	47d0      	blx	sl
    vadd1271(&a[0], &b[0], &c[0]);
    4db6:	aa05      	add	r2, sp, #20
    4db8:	a955      	add	r1, sp, #340	; 0x154
    4dba:	0010      	movs	r0, r2
    4dbc:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4dbe:	aa0a      	add	r2, sp, #40	; 0x28
    4dc0:	a95a      	add	r1, sp, #360	; 0x168
    4dc2:	0010      	movs	r0, r2
    4dc4:	47a0      	blx	r4
    v2mul1271(Q->xy, P->z, P->ta);                        // Ta = (X1+Y1)(x2+y2)
    4dc6:	aa55      	add	r2, sp, #340	; 0x154
    4dc8:	a94b      	add	r1, sp, #300	; 0x12c
    4dca:	a819      	add	r0, sp, #100	; 0x64
    4dcc:	47a8      	blx	r5
    v2mul1271(Q->yx, P->tb, P->x);                        // X = (Y1-X1)(y2-x2)
    4dce:	aa37      	add	r2, sp, #220	; 0xdc
    4dd0:	a95f      	add	r1, sp, #380	; 0x17c
    4dd2:	a823      	add	r0, sp, #140	; 0x8c
    4dd4:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    4dd6:	aa5f      	add	r2, sp, #380	; 0x17c
    4dd8:	a937      	add	r1, sp, #220	; 0xdc
    4dda:	a855      	add	r0, sp, #340	; 0x154
    4ddc:	47d0      	blx	sl
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4dde:	aa64      	add	r2, sp, #400	; 0x190
    4de0:	a93c      	add	r1, sp, #240	; 0xf0
    4de2:	a85a      	add	r0, sp, #360	; 0x168
    4de4:	47d0      	blx	sl
    vadd1271(&a[0], &b[0], &c[0]);
    4de6:	aa55      	add	r2, sp, #340	; 0x154
    4de8:	a937      	add	r1, sp, #220	; 0xdc
    4dea:	0010      	movs	r0, r2
    4dec:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4dee:	aa5a      	add	r2, sp, #360	; 0x168
    4df0:	a93c      	add	r1, sp, #240	; 0xf0
    4df2:	0010      	movs	r0, r2
    4df4:	47a0      	blx	r4
    v2mul1271(t1, t2, P->z);                              // Zfinal = theta*alpha
    4df6:	aa4b      	add	r2, sp, #300	; 0x12c
    4df8:	a90f      	add	r1, sp, #60	; 0x3c
    4dfa:	a805      	add	r0, sp, #20
    4dfc:	47a8      	blx	r5
    v2mul1271(P->tb, t2, P->x);                           // Xfinal = beta*theta
    4dfe:	aa37      	add	r2, sp, #220	; 0xdc
    4e00:	a90f      	add	r1, sp, #60	; 0x3c
    4e02:	a85f      	add	r0, sp, #380	; 0x17c
    4e04:	47a8      	blx	r5
    v2mul1271(P->ta, t1, P->y);                           // Yfinal = alpha*omega
    4e06:	aa41      	add	r2, sp, #260	; 0x104
    4e08:	a905      	add	r1, sp, #20
    4e0a:	a855      	add	r0, sp, #340	; 0x154
    4e0c:	47a8      	blx	r5
    4e0e:	3e0a      	subs	r6, #10
    4e10:	4b75      	ldr	r3, [pc, #468]	; (4fe8 <ecc_mul_fixed+0x384>)
    4e12:	469c      	mov	ip, r3
    4e14:	44e0      	add	r8, ip
    4e16:	2328      	movs	r3, #40	; 0x28
    4e18:	425b      	negs	r3, r3
    4e1a:	469c      	mov	ip, r3
    4e1c:	44e3      	add	fp, ip
    for (j = 0; j < (v-1); j++)
    4e1e:	2e95      	cmp	r6, #149	; 0x95
    4e20:	d187      	bne.n	4d32 <ecc_mul_fixed+0xce>
    4e22:	4b72      	ldr	r3, [pc, #456]	; (4fec <ecc_mul_fixed+0x388>)
    4e24:	aa04      	add	r2, sp, #16
    4e26:	4694      	mov	ip, r2
    4e28:	4463      	add	r3, ip
    4e2a:	9302      	str	r3, [sp, #8]
    4e2c:	23c6      	movs	r3, #198	; 0xc6
    4e2e:	9301      	str	r3, [sp, #4]
            table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]); 
    4e30:	4b65      	ldr	r3, [pc, #404]	; (4fc8 <ecc_mul_fixed+0x364>)
    4e32:	469b      	mov	fp, r3
    4e34:	e008      	b.n	4e48 <ecc_mul_fixed+0x1e4>
    4e36:	9b01      	ldr	r3, [sp, #4]
    4e38:	3b01      	subs	r3, #1
    4e3a:	9301      	str	r3, [sp, #4]
    4e3c:	9a02      	ldr	r2, [sp, #8]
    4e3e:	3a04      	subs	r2, #4
    4e40:	9202      	str	r2, [sp, #8]
    for (ii = (e-2); ii >= 0; ii--)
    4e42:	2bbd      	cmp	r3, #189	; 0xbd
    4e44:	d100      	bne.n	4e48 <ecc_mul_fixed+0x1e4>
    4e46:	e08b      	b.n	4f60 <ecc_mul_fixed+0x2fc>
        eccdouble(R);                                           // R = 2*R using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    4e48:	a837      	add	r0, sp, #220	; 0xdc
    4e4a:	4b69      	ldr	r3, [pc, #420]	; (4ff0 <ecc_mul_fixed+0x38c>)
    4e4c:	4798      	blx	r3
    4e4e:	4b5d      	ldr	r3, [pc, #372]	; (4fc4 <ecc_mul_fixed+0x360>)
    4e50:	22f0      	movs	r2, #240	; 0xf0
    4e52:	0152      	lsls	r2, r2, #5
    4e54:	4694      	mov	ip, r2
    4e56:	4463      	add	r3, ip
    4e58:	4699      	mov	r9, r3
    4e5a:	9f01      	ldr	r7, [sp, #4]
    4e5c:	003b      	movs	r3, r7
    4e5e:	2232      	movs	r2, #50	; 0x32
    4e60:	4252      	negs	r2, r2
    4e62:	4694      	mov	ip, r2
    4e64:	4463      	add	r3, ip
    4e66:	469a      	mov	sl, r3
    4e68:	9b02      	ldr	r3, [sp, #8]
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    4e6a:	4d5d      	ldr	r5, [pc, #372]	; (4fe0 <ecc_mul_fixed+0x37c>)
    vadd1271(&a[0], &b[0], &c[0]);
    4e6c:	4c58      	ldr	r4, [pc, #352]	; (4fd0 <ecc_mul_fixed+0x36c>)
    4e6e:	001e      	movs	r6, r3
    4e70:	46b4      	mov	ip, r6
            digit = digits[w*d-j*e+ii-e];
    4e72:	0033      	movs	r3, r6
    4e74:	33c8      	adds	r3, #200	; 0xc8
    4e76:	681a      	ldr	r2, [r3, #0]
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)           
    4e78:	003b      	movs	r3, r7
    4e7a:	0038      	movs	r0, r7
    4e7c:	3864      	subs	r0, #100	; 0x64
    4e7e:	4287      	cmp	r7, r0
    4e80:	db0a      	blt.n	4e98 <ecc_mul_fixed+0x234>
    4e82:	0031      	movs	r1, r6
    4e84:	9600      	str	r6, [sp, #0]
                digit = 2*digit + digits[i];
    4e86:	0052      	lsls	r2, r2, #1
    4e88:	680e      	ldr	r6, [r1, #0]
    4e8a:	46b0      	mov	r8, r6
    4e8c:	4442      	add	r2, r8
    4e8e:	3b32      	subs	r3, #50	; 0x32
    4e90:	39c8      	subs	r1, #200	; 0xc8
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)           
    4e92:	4283      	cmp	r3, r0
    4e94:	daf7      	bge.n	4e86 <ecc_mul_fixed+0x222>
    4e96:	9e00      	ldr	r6, [sp, #0]
            table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]); 
    4e98:	4b52      	ldr	r3, [pc, #328]	; (4fe4 <ecc_mul_fixed+0x380>)
    4e9a:	4463      	add	r3, ip
    4e9c:	681b      	ldr	r3, [r3, #0]
    4e9e:	a919      	add	r1, sp, #100	; 0x64
    4ea0:	4648      	mov	r0, r9
    4ea2:	47d8      	blx	fp
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    4ea4:	aa55      	add	r2, sp, #340	; 0x154
    4ea6:	a95f      	add	r1, sp, #380	; 0x17c
    4ea8:	0010      	movs	r0, r2
    4eaa:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    4eac:	aa05      	add	r2, sp, #20
    4eae:	a94b      	add	r1, sp, #300	; 0x12c
    4eb0:	0008      	movs	r0, r1
    4eb2:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4eb4:	aa0a      	add	r2, sp, #40	; 0x28
    4eb6:	a950      	add	r1, sp, #320	; 0x140
    4eb8:	0008      	movs	r0, r1
    4eba:	47a0      	blx	r4
    v2mul1271(P->ta, Q->t2, P->ta);                       // Ta = 2dT1*t2 
    4ebc:	aa55      	add	r2, sp, #340	; 0x154
    4ebe:	a92d      	add	r1, sp, #180	; 0xb4
    4ec0:	0010      	movs	r0, r2
    4ec2:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    4ec4:	aa4b      	add	r2, sp, #300	; 0x12c
    4ec6:	a941      	add	r1, sp, #260	; 0x104
    4ec8:	a837      	add	r0, sp, #220	; 0xdc
    4eca:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4ecc:	aa50      	add	r2, sp, #320	; 0x140
    4ece:	a946      	add	r1, sp, #280	; 0x118
    4ed0:	a83c      	add	r0, sp, #240	; 0xf0
    4ed2:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    4ed4:	aa5f      	add	r2, sp, #380	; 0x17c
    4ed6:	a937      	add	r1, sp, #220	; 0xdc
    4ed8:	a841      	add	r0, sp, #260	; 0x104
    4eda:	4b3c      	ldr	r3, [pc, #240]	; (4fcc <ecc_mul_fixed+0x368>)
    4edc:	4698      	mov	r8, r3
    4ede:	4798      	blx	r3
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4ee0:	aa64      	add	r2, sp, #400	; 0x190
    4ee2:	a93c      	add	r1, sp, #240	; 0xf0
    4ee4:	a846      	add	r0, sp, #280	; 0x118
    4ee6:	47c0      	blx	r8
    vsub1271(&a[0], &b[0], &c[0]);
    4ee8:	aa0f      	add	r2, sp, #60	; 0x3c
    4eea:	a955      	add	r1, sp, #340	; 0x154
    4eec:	a805      	add	r0, sp, #20
    4eee:	47c0      	blx	r8
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4ef0:	aa14      	add	r2, sp, #80	; 0x50
    4ef2:	a95a      	add	r1, sp, #360	; 0x168
    4ef4:	a80a      	add	r0, sp, #40	; 0x28
    4ef6:	47c0      	blx	r8
    vadd1271(&a[0], &b[0], &c[0]);
    4ef8:	aa05      	add	r2, sp, #20
    4efa:	a955      	add	r1, sp, #340	; 0x154
    4efc:	0010      	movs	r0, r2
    4efe:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4f00:	aa0a      	add	r2, sp, #40	; 0x28
    4f02:	a95a      	add	r1, sp, #360	; 0x168
    4f04:	0010      	movs	r0, r2
    4f06:	47a0      	blx	r4
    v2mul1271(Q->xy, P->z, P->ta);                        // Ta = (X1+Y1)(x2+y2)
    4f08:	aa55      	add	r2, sp, #340	; 0x154
    4f0a:	a94b      	add	r1, sp, #300	; 0x12c
    4f0c:	a819      	add	r0, sp, #100	; 0x64
    4f0e:	47a8      	blx	r5
    v2mul1271(Q->yx, P->tb, P->x);                        // X = (Y1-X1)(y2-x2)
    4f10:	aa37      	add	r2, sp, #220	; 0xdc
    4f12:	a95f      	add	r1, sp, #380	; 0x17c
    4f14:	a823      	add	r0, sp, #140	; 0x8c
    4f16:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    4f18:	aa5f      	add	r2, sp, #380	; 0x17c
    4f1a:	a937      	add	r1, sp, #220	; 0xdc
    4f1c:	a855      	add	r0, sp, #340	; 0x154
    4f1e:	47c0      	blx	r8
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4f20:	aa64      	add	r2, sp, #400	; 0x190
    4f22:	a93c      	add	r1, sp, #240	; 0xf0
    4f24:	a85a      	add	r0, sp, #360	; 0x168
    4f26:	47c0      	blx	r8
    vadd1271(&a[0], &b[0], &c[0]);
    4f28:	aa55      	add	r2, sp, #340	; 0x154
    4f2a:	a937      	add	r1, sp, #220	; 0xdc
    4f2c:	0010      	movs	r0, r2
    4f2e:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4f30:	aa5a      	add	r2, sp, #360	; 0x168
    4f32:	a93c      	add	r1, sp, #240	; 0xf0
    4f34:	0010      	movs	r0, r2
    4f36:	47a0      	blx	r4
    v2mul1271(t1, t2, P->z);                              // Zfinal = theta*alpha
    4f38:	aa4b      	add	r2, sp, #300	; 0x12c
    4f3a:	a90f      	add	r1, sp, #60	; 0x3c
    4f3c:	a805      	add	r0, sp, #20
    4f3e:	47a8      	blx	r5
    v2mul1271(P->tb, t2, P->x);                           // Xfinal = beta*theta
    4f40:	aa37      	add	r2, sp, #220	; 0xdc
    4f42:	a90f      	add	r1, sp, #60	; 0x3c
    4f44:	a85f      	add	r0, sp, #380	; 0x17c
    4f46:	47a8      	blx	r5
    v2mul1271(P->ta, t1, P->y);                           // Yfinal = alpha*omega
    4f48:	aa41      	add	r2, sp, #260	; 0x104
    4f4a:	a905      	add	r1, sp, #20
    4f4c:	a855      	add	r0, sp, #340	; 0x154
    4f4e:	47a8      	blx	r5
    4f50:	3f0a      	subs	r7, #10
    4f52:	4b25      	ldr	r3, [pc, #148]	; (4fe8 <ecc_mul_fixed+0x384>)
    4f54:	469c      	mov	ip, r3
    4f56:	44e1      	add	r9, ip
    4f58:	3e28      	subs	r6, #40	; 0x28
        for (j = 0; j < v; j++)
    4f5a:	4557      	cmp	r7, sl
    4f5c:	d188      	bne.n	4e70 <ecc_mul_fixed+0x20c>
    4f5e:	e76a      	b.n	4e36 <ecc_mul_fixed+0x1d2>
    v2inv1271(P->z);                      // Z1 = Z1^-1
    4f60:	a84b      	add	r0, sp, #300	; 0x12c
    4f62:	4b24      	ldr	r3, [pc, #144]	; (4ff4 <ecc_mul_fixed+0x390>)
    4f64:	4798      	blx	r3
    v2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    4f66:	aa69      	add	r2, sp, #420	; 0x1a4
    4f68:	a94b      	add	r1, sp, #300	; 0x12c
    4f6a:	a837      	add	r0, sp, #220	; 0xdc
    4f6c:	4c1c      	ldr	r4, [pc, #112]	; (4fe0 <ecc_mul_fixed+0x37c>)
    4f6e:	47a0      	blx	r4
    v2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    4f70:	aa73      	add	r2, sp, #460	; 0x1cc
    4f72:	a94b      	add	r1, sp, #300	; 0x12c
    4f74:	a841      	add	r0, sp, #260	; 0x104
    4f76:	47a0      	blx	r4
    v2mod1271(Q->x, Q->x); 
    4f78:	a969      	add	r1, sp, #420	; 0x1a4
    4f7a:	0008      	movs	r0, r1
    4f7c:	4c1e      	ldr	r4, [pc, #120]	; (4ff8 <ecc_mul_fixed+0x394>)
    4f7e:	47a0      	blx	r4
    v2mod1271(Q->y, Q->y); 
    4f80:	a973      	add	r1, sp, #460	; 0x1cc
    4f82:	0008      	movs	r0, r1
    4f84:	47a0      	blx	r4
    from_ext_to_std(A->x, Q->x);
    4f86:	9d03      	ldr	r5, [sp, #12]
    4f88:	0029      	movs	r1, r5
    4f8a:	a869      	add	r0, sp, #420	; 0x1a4
    4f8c:	4c1b      	ldr	r4, [pc, #108]	; (4ffc <ecc_mul_fixed+0x398>)
    4f8e:	47a0      	blx	r4
    from_ext_to_std(A->y, Q->y); 
    4f90:	0029      	movs	r1, r5
    4f92:	3120      	adds	r1, #32
    4f94:	a873      	add	r0, sp, #460	; 0x1cc
    4f96:	47a0      	blx	r4
}
    4f98:	2001      	movs	r0, #1
    4f9a:	4b19      	ldr	r3, [pc, #100]	; (5000 <ecc_mul_fixed+0x39c>)
    4f9c:	449d      	add	sp, r3
    4f9e:	bc3c      	pop	{r2, r3, r4, r5}
    4fa0:	4690      	mov	r8, r2
    4fa2:	4699      	mov	r9, r3
    4fa4:	46a2      	mov	sl, r4
    4fa6:	46ab      	mov	fp, r5
    4fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4faa:	46c0      	nop			; (mov r8, r8)
    4fac:	fffff9ac 	.word	0xfffff9ac
    4fb0:	0000043c 	.word	0x0000043c
    4fb4:	0000671f 	.word	0x0000671f
    4fb8:	00003c71 	.word	0x00003c71
    4fbc:	00003ca9 	.word	0x00003ca9
    4fc0:	00004ad5 	.word	0x00004ad5
    4fc4:	00007898 	.word	0x00007898
    4fc8:	000040d9 	.word	0x000040d9
    4fcc:	0000317b 	.word	0x0000317b
    4fd0:	0000313f 	.word	0x0000313f
    4fd4:	00004205 	.word	0x00004205
    4fd8:	00004311 	.word	0x00004311
    4fdc:	00003d5f 	.word	0x00003d5f
    4fe0:	000043fd 	.word	0x000043fd
    4fe4:	fffffda8 	.word	0xfffffda8
    4fe8:	fffff880 	.word	0xfffff880
    4fec:	0000051c 	.word	0x0000051c
    4ff0:	00004715 	.word	0x00004715
    4ff4:	000044bd 	.word	0x000044bd
    4ff8:	000043e1 	.word	0x000043e1
    4ffc:	00003a41 	.word	0x00003a41
    5000:	00000654 	.word	0x00000654

00005004 <fixed_window_recode>:

/***********************************************/
/**********  CURVE/SCALAR FUNCTIONS  ***********/

void fixed_window_recode(uint64_t* scalar, unsigned int* digits, unsigned int* sign_masks)
{ // Converting scalar to the fixed window representation used by the variable-base scalar multiplication
    5004:	b5f0      	push	{r4, r5, r6, r7, lr}
    5006:	46de      	mov	lr, fp
    5008:	4657      	mov	r7, sl
    500a:	464e      	mov	r6, r9
    500c:	4645      	mov	r5, r8
    500e:	b5e0      	push	{r5, r6, r7, lr}
    5010:	b089      	sub	sp, #36	; 0x24
    5012:	4692      	mov	sl, r2
    5014:	2300      	movs	r3, #0
    5016:	469c      	mov	ip, r3
    5018:	3320      	adds	r3, #32
    501a:	4699      	mov	r9, r3
    501c:	4481      	add	r9, r0
    501e:	3b08      	subs	r3, #8
    5020:	4698      	mov	r8, r3
    5022:	4480      	add	r8, r0
    5024:	4643      	mov	r3, r8
    5026:	9300      	str	r3, [sp, #0]
    5028:	9107      	str	r1, [sp, #28]
    502a:	4683      	mov	fp, r0
    502c:	e011      	b.n	5052 <fixed_window_recode+0x4e>
    502e:	9400      	str	r4, [sp, #0]
        }    
  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] = scalar[NWORDS64_ORDER-1] >> (W_VARBASE-1);
    5030:	465b      	mov	r3, fp
    5032:	69db      	ldr	r3, [r3, #28]
    5034:	0719      	lsls	r1, r3, #28
    5036:	465a      	mov	r2, fp
    5038:	6992      	ldr	r2, [r2, #24]
    503a:	0912      	lsrs	r2, r2, #4
    503c:	430a      	orrs	r2, r1
    503e:	4659      	mov	r1, fp
    5040:	618a      	str	r2, [r1, #24]
    5042:	091b      	lsrs	r3, r3, #4
    5044:	61cb      	str	r3, [r1, #28]
    5046:	2304      	movs	r3, #4
    5048:	4698      	mov	r8, r3
    504a:	44c4      	add	ip, r8
    for (i = 0; i < t_VARBASE; i++)
    504c:	4663      	mov	r3, ip
    504e:	2bf8      	cmp	r3, #248	; 0xf8
    5050:	d069      	beq.n	5126 <fixed_window_recode+0x122>
        temp = (scalar[0] & val1) - val2;    // ki = (k mod 2^w)/2^(w-1)
    5052:	465a      	mov	r2, fp
    5054:	231f      	movs	r3, #31
    5056:	6812      	ldr	r2, [r2, #0]
    5058:	4013      	ands	r3, r2
    505a:	9304      	str	r3, [sp, #16]
    505c:	2300      	movs	r3, #0
    505e:	9305      	str	r3, [sp, #20]
    5060:	9a04      	ldr	r2, [sp, #16]
    5062:	9b05      	ldr	r3, [sp, #20]
    5064:	2010      	movs	r0, #16
    5066:	4240      	negs	r0, r0
    5068:	17c1      	asrs	r1, r0, #31
    506a:	1812      	adds	r2, r2, r0
    506c:	414b      	adcs	r3, r1
        sign_masks[i] = ~((unsigned int)(temp >> (RADIX64-1)));
    506e:	17d9      	asrs	r1, r3, #31
    5070:	9102      	str	r1, [sp, #8]
    5072:	9103      	str	r1, [sp, #12]
    5074:	43c9      	mvns	r1, r1
    5076:	4650      	mov	r0, sl
    5078:	4665      	mov	r5, ip
    507a:	5141      	str	r1, [r0, r5]
        digits[i] = ((sign_masks[i] & (unsigned int)(temp ^ -temp)) ^ (unsigned int)-temp) >> 1;        
    507c:	4250      	negs	r0, r2
    507e:	0004      	movs	r4, r0
    5080:	4054      	eors	r4, r2
    5082:	4021      	ands	r1, r4
    5084:	4048      	eors	r0, r1
    5086:	0840      	lsrs	r0, r0, #1
    5088:	9907      	ldr	r1, [sp, #28]
    508a:	5148      	str	r0, [r1, r5]
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    508c:	4659      	mov	r1, fp
    508e:	6809      	ldr	r1, [r1, #0]
    5090:	1a8d      	subs	r5, r1, r2
    5092:	4055      	eors	r5, r2
    5094:	4659      	mov	r1, fp
    5096:	6809      	ldr	r1, [r1, #0]
    5098:	4051      	eors	r1, r2
    509a:	000c      	movs	r4, r1
    509c:	432c      	orrs	r4, r5
    509e:	4659      	mov	r1, fp
    50a0:	6809      	ldr	r1, [r1, #0]
    50a2:	404c      	eors	r4, r1
    50a4:	0fe1      	lsrs	r1, r4, #31
    50a6:	4688      	mov	r8, r1
        borrow = ((temp >> (RADIX64-1)) - 1) & (uint64_t)is_digit_lessthan_ct((digit_t)scalar[0], (digit_t)temp);
    50a8:	9c02      	ldr	r4, [sp, #8]
    50aa:	9d03      	ldr	r5, [sp, #12]
    50ac:	2001      	movs	r0, #1
    50ae:	4240      	negs	r0, r0
    50b0:	17c1      	asrs	r1, r0, #31
    50b2:	1824      	adds	r4, r4, r0
    50b4:	414d      	adcs	r5, r1
    50b6:	4641      	mov	r1, r8
    50b8:	4021      	ands	r1, r4
    50ba:	000e      	movs	r6, r1
    50bc:	2700      	movs	r7, #0
        res = scalar[0] - temp;              // k = (k - ki) / 2^(w-1) 
    50be:	4659      	mov	r1, fp
    50c0:	6808      	ldr	r0, [r1, #0]
    50c2:	6849      	ldr	r1, [r1, #4]
    50c4:	1a80      	subs	r0, r0, r2
    50c6:	4199      	sbcs	r1, r3
    50c8:	0002      	movs	r2, r0
    50ca:	000b      	movs	r3, r1
        scalar[0] = res;
    50cc:	4659      	mov	r1, fp
    50ce:	c10c      	stmia	r1!, {r2, r3}
    50d0:	9b00      	ldr	r3, [sp, #0]
    50d2:	4698      	mov	r8, r3
    50d4:	4648      	mov	r0, r9
            res = scalar[j];
    50d6:	680b      	ldr	r3, [r1, #0]
    50d8:	684c      	ldr	r4, [r1, #4]
    50da:	001a      	movs	r2, r3
    50dc:	0023      	movs	r3, r4
            scalar[j] = res - borrow;
    50de:	0014      	movs	r4, r2
    50e0:	001d      	movs	r5, r3
    50e2:	1ba4      	subs	r4, r4, r6
    50e4:	41bd      	sbcs	r5, r7
    50e6:	c130      	stmia	r1!, {r4, r5}
    50e8:	9200      	str	r2, [sp, #0]
    50ea:	9301      	str	r3, [sp, #4]
    50ec:	1b93      	subs	r3, r2, r6
    50ee:	4073      	eors	r3, r6
    50f0:	0034      	movs	r4, r6
    50f2:	9d00      	ldr	r5, [sp, #0]
    50f4:	406c      	eors	r4, r5
    50f6:	4323      	orrs	r3, r4
    50f8:	406b      	eors	r3, r5
            borrow = (uint64_t)is_digit_lessthan_ct((digit_t)res, (digit_t)borrow); 
    50fa:	0fde      	lsrs	r6, r3, #31
    50fc:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    50fe:	4281      	cmp	r1, r0
    5100:	d1e9      	bne.n	50d6 <fixed_window_recode+0xd2>
    5102:	4681      	mov	r9, r0
    5104:	4659      	mov	r1, fp
    5106:	4644      	mov	r4, r8
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
    5108:	684b      	ldr	r3, [r1, #4]
    510a:	0718      	lsls	r0, r3, #28
    510c:	680a      	ldr	r2, [r1, #0]
    510e:	0912      	lsrs	r2, r2, #4
    5110:	4302      	orrs	r2, r0
    5112:	091b      	lsrs	r3, r3, #4
    5114:	6888      	ldr	r0, [r1, #8]
    5116:	0700      	lsls	r0, r0, #28
    5118:	600a      	str	r2, [r1, #0]
    511a:	4043      	eors	r3, r0
    511c:	604b      	str	r3, [r1, #4]
    511e:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
    5120:	428c      	cmp	r4, r1
    5122:	d1f1      	bne.n	5108 <fixed_window_recode+0x104>
    5124:	e783      	b.n	502e <fixed_window_recode+0x2a>
    5126:	4658      	mov	r0, fp
    5128:	9b07      	ldr	r3, [sp, #28]
    512a:	469b      	mov	fp, r3

    } 
    sign_masks[t_VARBASE] = ~((unsigned int)(scalar[0] >> (RADIX64-1)));
    512c:	684b      	ldr	r3, [r1, #4]
    512e:	0fdb      	lsrs	r3, r3, #31
    5130:	43db      	mvns	r3, r3
    5132:	21f8      	movs	r1, #248	; 0xf8
    5134:	4652      	mov	r2, sl
    5136:	5053      	str	r3, [r2, r1]
    digits[t_VARBASE] = ((sign_masks[t_VARBASE] & (unsigned int)(scalar[0] ^ (0-scalar[0]))) ^ (unsigned int)(0-scalar[0])) >> 1;    // kt = k  (t_VARBASE+1 digits)
    5138:	6802      	ldr	r2, [r0, #0]
    513a:	4250      	negs	r0, r2
    513c:	4042      	eors	r2, r0
    513e:	4013      	ands	r3, r2
    5140:	4043      	eors	r3, r0
    5142:	085b      	lsrs	r3, r3, #1
    5144:	465a      	mov	r2, fp
    5146:	5053      	str	r3, [r2, r1]
}
    5148:	b009      	add	sp, #36	; 0x24
    514a:	bc3c      	pop	{r2, r3, r4, r5}
    514c:	4690      	mov	r8, r2
    514e:	4699      	mov	r9, r3
    5150:	46a2      	mov	sl, r4
    5152:	46ab      	mov	fp, r5
    5154:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00005158 <ecc_precomp>:


void ecc_precomp(vpoint_extproj_t P, vpoint_extproj_precomp_t *T)
{ // Generation of the precomputation table used by the variable-base scalar multiplication ecc_mul().
    5158:	b5f0      	push	{r4, r5, r6, r7, lr}
    515a:	b0db      	sub	sp, #364	; 0x16c
    515c:	0004      	movs	r4, r0
    515e:	000d      	movs	r5, r1
    vpoint_extproj_precomp_t P2;
    vpoint_extproj_t Q;
    unsigned int i; 

    // Generating P2 = 2(X1,Y1,Z1,T1a,T1b) = (XP2+YP2,Y2P-X2P,ZP2,TP2) and T[0] = P = (X1+Y1,Y1-X1,2*Z1,2*d*T1)
    ecccopy(P, Q);
    5160:	4669      	mov	r1, sp
    5162:	4e18      	ldr	r6, [pc, #96]	; (51c4 <ecc_precomp+0x6c>)
    5164:	47b0      	blx	r6
    5166:	0020      	movs	r0, r4
    5168:	3028      	adds	r0, #40	; 0x28
    516a:	a90a      	add	r1, sp, #40	; 0x28
    516c:	47b0      	blx	r6
    516e:	0020      	movs	r0, r4
    5170:	3050      	adds	r0, #80	; 0x50
    5172:	a914      	add	r1, sp, #80	; 0x50
    5174:	47b0      	blx	r6
    5176:	0020      	movs	r0, r4
    5178:	3078      	adds	r0, #120	; 0x78
    517a:	a91e      	add	r1, sp, #120	; 0x78
    517c:	47b0      	blx	r6
    517e:	0020      	movs	r0, r4
    5180:	30a0      	adds	r0, #160	; 0xa0
    5182:	a928      	add	r1, sp, #160	; 0xa0
    5184:	47b0      	blx	r6
    R1_to_R2(P, T[0]);
    5186:	0029      	movs	r1, r5
    5188:	0020      	movs	r0, r4
    518a:	4b0f      	ldr	r3, [pc, #60]	; (51c8 <ecc_precomp+0x70>)
    518c:	4798      	blx	r3
    eccdouble(Q);
    518e:	4668      	mov	r0, sp
    5190:	4b0e      	ldr	r3, [pc, #56]	; (51cc <ecc_precomp+0x74>)
    5192:	4798      	blx	r3
    R1_to_R3(Q, P2);
    5194:	a932      	add	r1, sp, #200	; 0xc8
    5196:	4668      	mov	r0, sp
    5198:	4b0d      	ldr	r3, [pc, #52]	; (51d0 <ecc_precomp+0x78>)
    519a:	4798      	blx	r3
    519c:	002c      	movs	r4, r5
    519e:	238c      	movs	r3, #140	; 0x8c
    51a0:	00db      	lsls	r3, r3, #3
    51a2:	469c      	mov	ip, r3
    51a4:	4465      	add	r5, ip

    for (i = 1; i < NPOINTS_VARBASE; i++) {
        // T[i] = 2P+T[i-1] = (2*i+1)P = (XP2+YP2,Y2P-X2P,ZP2,TP2) + (X_(2*i-1)+Y_(2*i-1), Y_(2*i-1)-X_(2*i-1), 2Z_(2*i-1), 2T_(2*i-1)) = (X_(2*i+1)+Y_(2*i+1), Y_(2*i+1)-X_(2*i+1), 2Z_(2*i+1), 2dT_(2*i+1))
        eccadd_core(P2, T[i-1], Q);
    51a6:	4f0b      	ldr	r7, [pc, #44]	; (51d4 <ecc_precomp+0x7c>)
        R1_to_R2(Q, T[i]);
    51a8:	4e07      	ldr	r6, [pc, #28]	; (51c8 <ecc_precomp+0x70>)
        eccadd_core(P2, T[i-1], Q);
    51aa:	466a      	mov	r2, sp
    51ac:	0021      	movs	r1, r4
    51ae:	a832      	add	r0, sp, #200	; 0xc8
    51b0:	47b8      	blx	r7
    51b2:	34a0      	adds	r4, #160	; 0xa0
        R1_to_R2(Q, T[i]);
    51b4:	0021      	movs	r1, r4
    51b6:	4668      	mov	r0, sp
    51b8:	47b0      	blx	r6
    for (i = 1; i < NPOINTS_VARBASE; i++) {
    51ba:	42ac      	cmp	r4, r5
    51bc:	d1f5      	bne.n	51aa <ecc_precomp+0x52>
    }
}
    51be:	b05b      	add	sp, #364	; 0x16c
    51c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51c2:	46c0      	nop			; (mov r8, r8)
    51c4:	00003d5f 	.word	0x00003d5f
    51c8:	00004579 	.word	0x00004579
    51cc:	00004715 	.word	0x00004715
    51d0:	00004625 	.word	0x00004625
    51d4:	000047f1 	.word	0x000047f1

000051d8 <cofactor_clearing>:


void cofactor_clearing(vpoint_extproj_t P)
{ // Co-factor clearing
    51d8:	b570      	push	{r4, r5, r6, lr}
    51da:	b0a8      	sub	sp, #160	; 0xa0
    51dc:	0004      	movs	r4, r0
  // Input: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: P = 392*P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    vpoint_extproj_precomp_t Q;
     
    R1_to_R2(P, Q);                      // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
    51de:	4669      	mov	r1, sp
    51e0:	4b0d      	ldr	r3, [pc, #52]	; (5218 <cofactor_clearing+0x40>)
    51e2:	4798      	blx	r3
    eccdouble(P);                        // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    51e4:	0020      	movs	r0, r4
    51e6:	4d0d      	ldr	r5, [pc, #52]	; (521c <cofactor_clearing+0x44>)
    51e8:	47a8      	blx	r5
    eccadd(Q, P);                        // P = P+Q using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    51ea:	0021      	movs	r1, r4
    51ec:	4668      	mov	r0, sp
    51ee:	4e0c      	ldr	r6, [pc, #48]	; (5220 <cofactor_clearing+0x48>)
    51f0:	47b0      	blx	r6
    eccdouble(P);
    51f2:	0020      	movs	r0, r4
    51f4:	47a8      	blx	r5
    eccdouble(P);
    51f6:	0020      	movs	r0, r4
    51f8:	47a8      	blx	r5
    eccdouble(P);
    51fa:	0020      	movs	r0, r4
    51fc:	47a8      	blx	r5
    eccdouble(P);
    51fe:	0020      	movs	r0, r4
    5200:	47a8      	blx	r5
    eccadd(Q, P);
    5202:	0021      	movs	r1, r4
    5204:	4668      	mov	r0, sp
    5206:	47b0      	blx	r6
    eccdouble(P);
    5208:	0020      	movs	r0, r4
    520a:	47a8      	blx	r5
    eccdouble(P);
    520c:	0020      	movs	r0, r4
    520e:	47a8      	blx	r5
    eccdouble(P);
    5210:	0020      	movs	r0, r4
    5212:	47a8      	blx	r5
}
    5214:	b028      	add	sp, #160	; 0xa0
    5216:	bd70      	pop	{r4, r5, r6, pc}
    5218:	00004579 	.word	0x00004579
    521c:	00004715 	.word	0x00004715
    5220:	000048d5 	.word	0x000048d5

00005224 <ecc_mul>:


bool ecc_mul(point_t P, digit_t* k, point_t Q, bool clear_cofactor)
{ // Scalar multiplication Q = k*P
    5224:	b5f0      	push	{r4, r5, r6, r7, lr}
    5226:	4c5a      	ldr	r4, [pc, #360]	; (5390 <ecc_mul+0x16c>)
    5228:	44a5      	add	sp, r4
    522a:	0007      	movs	r7, r0
    522c:	000c      	movs	r4, r1
    522e:	9201      	str	r2, [sp, #4]
    5230:	001d      	movs	r5, r3
  // Output: Q = k*P in affine coordinates (x,y).
  // This function performs point validation and (if selected) cofactor clearing.
    vpoint_t A;
    vpoint_extproj_t R;
    vpoint_extproj_precomp_t S, Table[NPOINTS_VARBASE];
    unsigned int digits[t_VARBASE+1] = {0}, sign_masks[t_VARBASE+1] = {0};
    5232:	22fc      	movs	r2, #252	; 0xfc
    5234:	2100      	movs	r1, #0
    5236:	a849      	add	r0, sp, #292	; 0x124
    5238:	4e56      	ldr	r6, [pc, #344]	; (5394 <ecc_mul+0x170>)
    523a:	47b0      	blx	r6
    523c:	22fc      	movs	r2, #252	; 0xfc
    523e:	2100      	movs	r1, #0
    5240:	a80a      	add	r0, sp, #40	; 0x28
    5242:	47b0      	blx	r6
    digit_t k_odd[NWORDS_ORDER];
    int i;

    point_setup(P, R);                                         // Convert to representation (X,Y,1,Ta,Tb)
    5244:	23f7      	movs	r3, #247	; 0xf7
    5246:	00db      	lsls	r3, r3, #3
    5248:	aa02      	add	r2, sp, #8
    524a:	4694      	mov	ip, r2
    524c:	4463      	add	r3, ip
    524e:	0019      	movs	r1, r3
    5250:	0038      	movs	r0, r7
    5252:	4b51      	ldr	r3, [pc, #324]	; (5398 <ecc_mul+0x174>)
    5254:	4798      	blx	r3

    if (ecc_point_validate(R) == false) {                      // Check if point lies on the curve
    5256:	23f7      	movs	r3, #247	; 0xf7
    5258:	00db      	lsls	r3, r3, #3
    525a:	aa02      	add	r2, sp, #8
    525c:	4694      	mov	ip, r2
    525e:	4463      	add	r3, ip
    5260:	0018      	movs	r0, r3
    5262:	4b4e      	ldr	r3, [pc, #312]	; (539c <ecc_mul+0x178>)
    5264:	4798      	blx	r3
    5266:	9000      	str	r0, [sp, #0]
    5268:	2800      	cmp	r0, #0
    526a:	d100      	bne.n	526e <ecc_mul+0x4a>
    526c:	e083      	b.n	5376 <ecc_mul+0x152>
        return false;
    }

    if (clear_cofactor == true) {
    526e:	2d00      	cmp	r5, #0
    5270:	d000      	beq.n	5274 <ecc_mul+0x50>
    5272:	e084      	b.n	537e <ecc_mul+0x15a>
        cofactor_clearing(R);
    }

    modulo_order(k, k_odd);                                    // k_odd = k mod (order)      
    5274:	a902      	add	r1, sp, #8
    5276:	0020      	movs	r0, r4
    5278:	4b49      	ldr	r3, [pc, #292]	; (53a0 <ecc_mul+0x17c>)
    527a:	4798      	blx	r3
    conversion_to_odd(k_odd, k_odd);                           // Converting scalar to odd using the prime subgroup order 
    527c:	a902      	add	r1, sp, #8
    527e:	0008      	movs	r0, r1
    5280:	4b48      	ldr	r3, [pc, #288]	; (53a4 <ecc_mul+0x180>)
    5282:	4798      	blx	r3
    ecc_precomp(R, Table);                                     // Precomputation of points T[0],...,T[npoints-1] 
    5284:	a988      	add	r1, sp, #544	; 0x220
    5286:	23f7      	movs	r3, #247	; 0xf7
    5288:	00db      	lsls	r3, r3, #3
    528a:	aa02      	add	r2, sp, #8
    528c:	4694      	mov	ip, r2
    528e:	4463      	add	r3, ip
    5290:	0018      	movs	r0, r3
    5292:	4b45      	ldr	r3, [pc, #276]	; (53a8 <ecc_mul+0x184>)
    5294:	4798      	blx	r3
    fixed_window_recode((uint64_t*)k_odd, digits, sign_masks); // Scalar recoding
    5296:	aa0a      	add	r2, sp, #40	; 0x28
    5298:	a949      	add	r1, sp, #292	; 0x124
    529a:	a802      	add	r0, sp, #8
    529c:	4b43      	ldr	r3, [pc, #268]	; (53ac <ecc_mul+0x188>)
    529e:	4798      	blx	r3
    table_lookup_1x8(Table, S, digits[t_VARBASE], sign_masks[t_VARBASE]);       
    52a0:	9b48      	ldr	r3, [sp, #288]	; 0x120
    52a2:	9a87      	ldr	r2, [sp, #540]	; 0x21c
    52a4:	21e3      	movs	r1, #227	; 0xe3
    52a6:	00c9      	lsls	r1, r1, #3
    52a8:	a802      	add	r0, sp, #8
    52aa:	4684      	mov	ip, r0
    52ac:	4461      	add	r1, ip
    52ae:	a888      	add	r0, sp, #544	; 0x220
    52b0:	4c3f      	ldr	r4, [pc, #252]	; (53b0 <ecc_mul+0x18c>)
    52b2:	47a0      	blx	r4
    R2_to_R4(S, R);                                            // Conversion to representation (2X,2Y,2Z)
    52b4:	23f7      	movs	r3, #247	; 0xf7
    52b6:	00db      	lsls	r3, r3, #3
    52b8:	aa02      	add	r2, sp, #8
    52ba:	4694      	mov	ip, r2
    52bc:	4463      	add	r3, ip
    52be:	0019      	movs	r1, r3
    52c0:	23e3      	movs	r3, #227	; 0xe3
    52c2:	00db      	lsls	r3, r3, #3
    52c4:	4463      	add	r3, ip
    52c6:	0018      	movs	r0, r3
    52c8:	4b3a      	ldr	r3, [pc, #232]	; (53b4 <ecc_mul+0x190>)
    52ca:	4798      	blx	r3
    52cc:	24f4      	movs	r4, #244	; 0xf4
    
    for (i = (t_VARBASE-1); i >= 0; i--)
    {
        eccdouble(R);
    52ce:	4d3a      	ldr	r5, [pc, #232]	; (53b8 <ecc_mul+0x194>)
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    52d0:	4f37      	ldr	r7, [pc, #220]	; (53b0 <ecc_mul+0x18c>)
        eccdouble(R);
        eccdouble(R);
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    52d2:	4e3a      	ldr	r6, [pc, #232]	; (53bc <ecc_mul+0x198>)
        eccdouble(R);
    52d4:	23f7      	movs	r3, #247	; 0xf7
    52d6:	00db      	lsls	r3, r3, #3
    52d8:	aa02      	add	r2, sp, #8
    52da:	4694      	mov	ip, r2
    52dc:	4463      	add	r3, ip
    52de:	0018      	movs	r0, r3
    52e0:	47a8      	blx	r5
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    52e2:	ab0a      	add	r3, sp, #40	; 0x28
    52e4:	58e3      	ldr	r3, [r4, r3]
    52e6:	aa49      	add	r2, sp, #292	; 0x124
    52e8:	58a2      	ldr	r2, [r4, r2]
    52ea:	21e3      	movs	r1, #227	; 0xe3
    52ec:	00c9      	lsls	r1, r1, #3
    52ee:	a802      	add	r0, sp, #8
    52f0:	4684      	mov	ip, r0
    52f2:	4461      	add	r1, ip
    52f4:	a888      	add	r0, sp, #544	; 0x220
    52f6:	47b8      	blx	r7
        eccdouble(R);
    52f8:	23f7      	movs	r3, #247	; 0xf7
    52fa:	00db      	lsls	r3, r3, #3
    52fc:	aa02      	add	r2, sp, #8
    52fe:	4694      	mov	ip, r2
    5300:	4463      	add	r3, ip
    5302:	0018      	movs	r0, r3
    5304:	47a8      	blx	r5
        eccdouble(R);
    5306:	23f7      	movs	r3, #247	; 0xf7
    5308:	00db      	lsls	r3, r3, #3
    530a:	aa02      	add	r2, sp, #8
    530c:	4694      	mov	ip, r2
    530e:	4463      	add	r3, ip
    5310:	0018      	movs	r0, r3
    5312:	47a8      	blx	r5
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    5314:	23f7      	movs	r3, #247	; 0xf7
    5316:	00db      	lsls	r3, r3, #3
    5318:	aa02      	add	r2, sp, #8
    531a:	4694      	mov	ip, r2
    531c:	4463      	add	r3, ip
    531e:	0018      	movs	r0, r3
    5320:	47a8      	blx	r5
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    5322:	23f7      	movs	r3, #247	; 0xf7
    5324:	00db      	lsls	r3, r3, #3
    5326:	aa02      	add	r2, sp, #8
    5328:	4694      	mov	ip, r2
    532a:	4463      	add	r3, ip
    532c:	0019      	movs	r1, r3
    532e:	23e3      	movs	r3, #227	; 0xe3
    5330:	00db      	lsls	r3, r3, #3
    5332:	4463      	add	r3, ip
    5334:	0018      	movs	r0, r3
    5336:	47b0      	blx	r6
    5338:	3c04      	subs	r4, #4
    for (i = (t_VARBASE-1); i >= 0; i--)
    533a:	1d23      	adds	r3, r4, #4
    533c:	d1ca      	bne.n	52d4 <ecc_mul+0xb0>
    }
    eccnorm(R, A);                                             // Conversion to affine coordinates (x,y) and modular correction. 
    533e:	2388      	movs	r3, #136	; 0x88
    5340:	011b      	lsls	r3, r3, #4
    5342:	aa02      	add	r2, sp, #8
    5344:	4694      	mov	ip, r2
    5346:	4463      	add	r3, ip
    5348:	0019      	movs	r1, r3
    534a:	20f7      	movs	r0, #247	; 0xf7
    534c:	00c0      	lsls	r0, r0, #3
    534e:	4460      	add	r0, ip
    5350:	4b1b      	ldr	r3, [pc, #108]	; (53c0 <ecc_mul+0x19c>)
    5352:	4798      	blx	r3
    from_ext_to_std(A->x, Q->x);
    5354:	9d01      	ldr	r5, [sp, #4]
    5356:	0029      	movs	r1, r5
    5358:	2388      	movs	r3, #136	; 0x88
    535a:	011b      	lsls	r3, r3, #4
    535c:	aa02      	add	r2, sp, #8
    535e:	4694      	mov	ip, r2
    5360:	4463      	add	r3, ip
    5362:	0018      	movs	r0, r3
    5364:	4c17      	ldr	r4, [pc, #92]	; (53c4 <ecc_mul+0x1a0>)
    5366:	47a0      	blx	r4
    from_ext_to_std(A->y, Q->y); 
    5368:	0029      	movs	r1, r5
    536a:	3120      	adds	r1, #32
    536c:	4816      	ldr	r0, [pc, #88]	; (53c8 <ecc_mul+0x1a4>)
    536e:	ab02      	add	r3, sp, #8
    5370:	469c      	mov	ip, r3
    5372:	4460      	add	r0, ip
    5374:	47a0      	blx	r4
    
    return true;
}
    5376:	9800      	ldr	r0, [sp, #0]
    5378:	4b14      	ldr	r3, [pc, #80]	; (53cc <ecc_mul+0x1a8>)
    537a:	449d      	add	sp, r3
    537c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cofactor_clearing(R);
    537e:	20f7      	movs	r0, #247	; 0xf7
    5380:	00c0      	lsls	r0, r0, #3
    5382:	ab02      	add	r3, sp, #8
    5384:	469c      	mov	ip, r3
    5386:	4460      	add	r0, ip
    5388:	4b11      	ldr	r3, [pc, #68]	; (53d0 <ecc_mul+0x1ac>)
    538a:	4798      	blx	r3
    538c:	e772      	b.n	5274 <ecc_mul+0x50>
    538e:	46c0      	nop			; (mov r8, r8)
    5390:	fffff724 	.word	0xfffff724
    5394:	0000671f 	.word	0x0000671f
    5398:	000049e5 	.word	0x000049e5
    539c:	00004a29 	.word	0x00004a29
    53a0:	00003c71 	.word	0x00003c71
    53a4:	00003ca9 	.word	0x00003ca9
    53a8:	00005159 	.word	0x00005159
    53ac:	00005005 	.word	0x00005005
    53b0:	00003d89 	.word	0x00003d89
    53b4:	0000469d 	.word	0x0000469d
    53b8:	00004715 	.word	0x00004715
    53bc:	000048d5 	.word	0x000048d5
    53c0:	00004529 	.word	0x00004529
    53c4:	00003a41 	.word	0x00003a41
    53c8:	000008a8 	.word	0x000008a8
    53cc:	000008dc 	.word	0x000008dc
    53d0:	000051d9 	.word	0x000051d9

000053d4 <CompressedPublicKeyGeneration>:


/*************** ECDH USING COMPRESSED, 32-BYTE PUBLIC KEYS ***************/

ECCRYPTO_STATUS CompressedPublicKeyGeneration(const unsigned char* SecretKey, unsigned char* PublicKey)
{ // Compressed public key generation for key exchange
    53d4:	b510      	push	{r4, lr}
    53d6:	b090      	sub	sp, #64	; 0x40
    53d8:	000c      	movs	r4, r1
  // It produces a public key PublicKey, which is the encoding of P = SecretKey*G (G is the generator).
  // Input:  32-byte SecretKey
  // Output: 32-byte PublicKey
    point_t P;
    
    ecc_mul_fixed((digit_t*)SecretKey, P);  // Compute public key                                       
    53da:	4669      	mov	r1, sp
    53dc:	4b04      	ldr	r3, [pc, #16]	; (53f0 <CompressedPublicKeyGeneration+0x1c>)
    53de:	4798      	blx	r3
	encode(P, PublicKey);                   // Encode public key
    53e0:	0021      	movs	r1, r4
    53e2:	4668      	mov	r0, sp
    53e4:	4b03      	ldr	r3, [pc, #12]	; (53f4 <CompressedPublicKeyGeneration+0x20>)
    53e6:	4798      	blx	r3

    return ECCRYPTO_SUCCESS;
}
    53e8:	2001      	movs	r0, #1
    53ea:	b010      	add	sp, #64	; 0x40
    53ec:	bd10      	pop	{r4, pc}
    53ee:	46c0      	nop			; (mov r8, r8)
    53f0:	00004c65 	.word	0x00004c65
    53f4:	00002e29 	.word	0x00002e29

000053f8 <CompressedKeyGeneration>:


ECCRYPTO_STATUS CompressedKeyGeneration(unsigned char* SecretKey, unsigned char* PublicKey)
{ // Keypair generation for key exchange. Public key is compressed to 32 bytes
    53f8:	b570      	push	{r4, r5, r6, lr}
    53fa:	0006      	movs	r6, r0
    53fc:	000d      	movs	r5, r1
	//Status = RandomBytesFunction(SecretKey, 32);
	//if (Status != ECCRYPTO_SUCCESS) {
	//	goto cleanup;
	//}
  
    Status = CompressedPublicKeyGeneration(SecretKey, PublicKey);
    53fe:	4b07      	ldr	r3, [pc, #28]	; (541c <CompressedKeyGeneration+0x24>)
    5400:	4798      	blx	r3
    5402:	0004      	movs	r4, r0
    if (Status != ECCRYPTO_SUCCESS) {
    5404:	2801      	cmp	r0, #1
    5406:	d006      	beq.n	5416 <CompressedKeyGeneration+0x1e>
    }

    return ECCRYPTO_SUCCESS;

cleanup:
    clear_words((unsigned int*)SecretKey, 256/(sizeof(unsigned int)*8));
    5408:	2108      	movs	r1, #8
    540a:	0030      	movs	r0, r6
    540c:	4e04      	ldr	r6, [pc, #16]	; (5420 <CompressedKeyGeneration+0x28>)
    540e:	47b0      	blx	r6
    clear_words((unsigned int*)PublicKey, 256/(sizeof(unsigned int)*8));
    5410:	2108      	movs	r1, #8
    5412:	0028      	movs	r0, r5
    5414:	47b0      	blx	r6

    return Status;
}
    5416:	0020      	movs	r0, r4
    5418:	bd70      	pop	{r4, r5, r6, pc}
    541a:	46c0      	nop			; (mov r8, r8)
    541c:	000053d5 	.word	0x000053d5
    5420:	00004515 	.word	0x00004515

00005424 <CompressedSecretAgreement>:


ECCRYPTO_STATUS CompressedSecretAgreement(const unsigned char* SecretKey, const unsigned char* PublicKey, unsigned char* SharedSecret)
{ // Secret agreement computation for key exchange using a compressed, 32-byte public key
    5424:	b570      	push	{r4, r5, r6, lr}
    5426:	b090      	sub	sp, #64	; 0x40
    5428:	0006      	movs	r6, r0
    542a:	0008      	movs	r0, r1
    542c:	0015      	movs	r5, r2
  // Inputs: 32-byte SecretKey and 32-byte PublicKey
  // Output: 32-byte SharedSecret
    point_t A;
    ECCRYPTO_STATUS Status = ECCRYPTO_ERROR_UNKNOWN;

    if ((PublicKey[15] & 0x80) != 0) {  // Is bit128(PublicKey) = 0?
    542e:	7bcb      	ldrb	r3, [r1, #15]
    5430:	2b7f      	cmp	r3, #127	; 0x7f
    5432:	d830      	bhi.n	5496 <CompressedSecretAgreement+0x72>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
		goto cleanup;
    }

	Status = decode(PublicKey, A);    // Also verifies that A is on the curve. If it is not, it fails
    5434:	4669      	mov	r1, sp
    5436:	4b19      	ldr	r3, [pc, #100]	; (549c <CompressedSecretAgreement+0x78>)
    5438:	4798      	blx	r3
    543a:	0004      	movs	r4, r0
	if (Status != ECCRYPTO_SUCCESS) {
    543c:	2801      	cmp	r0, #1
    543e:	d006      	beq.n	544e <CompressedSecretAgreement+0x2a>
	memmove(SharedSecret, (unsigned char*)A->y, 32);

	return ECCRYPTO_SUCCESS;
    
cleanup:
    clear_words((unsigned int*)SharedSecret, 256/(sizeof(unsigned int)*8));
    5440:	2108      	movs	r1, #8
    5442:	0028      	movs	r0, r5
    5444:	4b16      	ldr	r3, [pc, #88]	; (54a0 <CompressedSecretAgreement+0x7c>)
    5446:	4798      	blx	r3
    
    return Status;
}
    5448:	0020      	movs	r0, r4
    544a:	b010      	add	sp, #64	; 0x40
    544c:	bd70      	pop	{r4, r5, r6, pc}
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    544e:	2301      	movs	r3, #1
    5450:	466a      	mov	r2, sp
    5452:	0031      	movs	r1, r6
    5454:	4668      	mov	r0, sp
    5456:	4e13      	ldr	r6, [pc, #76]	; (54a4 <CompressedSecretAgreement+0x80>)
    5458:	47b0      	blx	r6
	if (Status != ECCRYPTO_SUCCESS) {
    545a:	2800      	cmp	r0, #0
    545c:	d101      	bne.n	5462 <CompressedSecretAgreement+0x3e>
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    545e:	2400      	movs	r4, #0
    5460:	e7ee      	b.n	5440 <CompressedSecretAgreement+0x1c>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    5462:	2108      	movs	r1, #8
    5464:	4668      	mov	r0, sp
    5466:	4b10      	ldr	r3, [pc, #64]	; (54a8 <CompressedSecretAgreement+0x84>)
    5468:	4798      	blx	r3
    546a:	2800      	cmp	r0, #0
    546c:	d105      	bne.n	547a <CompressedSecretAgreement+0x56>
	memmove(SharedSecret, (unsigned char*)A->y, 32);
    546e:	2220      	movs	r2, #32
    5470:	a908      	add	r1, sp, #32
    5472:	0028      	movs	r0, r5
    5474:	4b0d      	ldr	r3, [pc, #52]	; (54ac <CompressedSecretAgreement+0x88>)
    5476:	4798      	blx	r3
	return ECCRYPTO_SUCCESS;
    5478:	e7e6      	b.n	5448 <CompressedSecretAgreement+0x24>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    547a:	2107      	movs	r1, #7
    547c:	a809      	add	r0, sp, #36	; 0x24
    547e:	4b0a      	ldr	r3, [pc, #40]	; (54a8 <CompressedSecretAgreement+0x84>)
    5480:	4798      	blx	r3
    5482:	2800      	cmp	r0, #0
    5484:	d0f3      	beq.n	546e <CompressedSecretAgreement+0x4a>
    5486:	9908      	ldr	r1, [sp, #32]
    5488:	1e4b      	subs	r3, r1, #1
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    548a:	2201      	movs	r2, #1
    548c:	1a52      	subs	r2, r2, r1
    548e:	4313      	orrs	r3, r2
    if (is_neutral_point(A)) {  // Is output = neutral point (0,1)?
    5490:	d4ed      	bmi.n	546e <CompressedSecretAgreement+0x4a>
		Status = ECCRYPTO_ERROR_SHARED_KEY;
    5492:	2407      	movs	r4, #7
    5494:	e7d4      	b.n	5440 <CompressedSecretAgreement+0x1c>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
    5496:	2406      	movs	r4, #6
    5498:	e7d2      	b.n	5440 <CompressedSecretAgreement+0x1c>
    549a:	46c0      	nop			; (mov r8, r8)
    549c:	00002e71 	.word	0x00002e71
    54a0:	00004515 	.word	0x00004515
    54a4:	00005225 	.word	0x00005225
    54a8:	00002e05 	.word	0x00002e05
    54ac:	000066e9 	.word	0x000066e9

000054b0 <internalPermutation>:
static void messageFold(const uint8_t *message, uint8_t *cells){
    cells[0] ^= message[0];
    cells[1] ^= message[1];
}

static void internalPermutation(uint8_t *cells){
    54b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54b2:	46de      	mov	lr, fp
    54b4:	4657      	mov	r7, sl
    54b6:	464e      	mov	r6, r9
    54b8:	4645      	mov	r5, r8
    54ba:	b5e0      	push	{r5, r6, r7, lr}
    54bc:	b08b      	sub	sp, #44	; 0x2c
    54be:	0007      	movs	r7, r0
    int round;
    for(round=0;round<12;round++){
    54c0:	2300      	movs	r3, #0
    54c2:	9307      	str	r3, [sp, #28]
    54c4:	e0c6      	b.n	5654 <internalPermutation+0x1a4>
    for(i=0;i<D_VAL;i++){
        tmp_cells[i]=0;
        for(j=0;j<D_VAL;j++){
            uint8_t nib = cells[(col+(D_VAL*j))/2];
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
            else{nib = (nib & 0x0F);}
    54c6:	200f      	movs	r0, #15
    54c8:	4002      	ands	r2, r0
    54ca:	e03e      	b.n	554a <internalPermutation+0x9a>
                ret=MMUL[loc];
                b=0;
            }
            else{
                // Account for odd value as (a x 3) is (a x (2 + 1))
                if(b&1){
    54cc:	2301      	movs	r3, #1
    54ce:	4223      	tst	r3, r4
    54d0:	d003      	beq.n	54da <internalPermutation+0x2a>
                    odd ^= ret;
    54d2:	4661      	mov	r1, ip
    54d4:	4051      	eors	r1, r2
    54d6:	b2cb      	uxtb	r3, r1
    54d8:	469c      	mov	ip, r3
                }

                loc=ret; // loc holds the current value to be multiplied by 2
                // (a x 2) not found
                if(MMUL[32 + loc] > 0xF){
    54da:	9204      	str	r2, [sp, #16]
    54dc:	2320      	movs	r3, #32
    54de:	4698      	mov	r8, r3
    54e0:	4490      	add	r8, r2
    54e2:	4b83      	ldr	r3, [pc, #524]	; (56f0 <internalPermutation+0x240>)
    54e4:	4641      	mov	r1, r8
    54e6:	5c59      	ldrb	r1, [r3, r1]
    54e8:	290f      	cmp	r1, #15
    54ea:	d912      	bls.n	5512 <internalPermutation+0x62>
                    ret = ret << 1;
    54ec:	0052      	lsls	r2, r2, #1
    54ee:	b2d1      	uxtb	r1, r2
                    // XOR with constant if shifted results is larger than 4 bits
                    if(ret&0x10){ret^=G_CON;}
    54f0:	2310      	movs	r3, #16
    54f2:	420b      	tst	r3, r1
    54f4:	d002      	beq.n	54fc <internalPermutation+0x4c>
    54f6:	3b0d      	subs	r3, #13
    54f8:	4059      	eors	r1, r3
    54fa:	b2c9      	uxtb	r1, r1

                    ret &= 0xF; // Only care about lower nibble
    54fc:	230f      	movs	r3, #15
    54fe:	4019      	ands	r1, r3
                    MMUL[32 + loc] = ret;
    5500:	4b7b      	ldr	r3, [pc, #492]	; (56f0 <internalPermutation+0x240>)
    5502:	4642      	mov	r2, r8
    5504:	5499      	strb	r1, [r3, r2]
                    MMUL[16*loc + 2] = ret;
    5506:	9b04      	ldr	r3, [sp, #16]
    5508:	011a      	lsls	r2, r3, #4
    550a:	4b79      	ldr	r3, [pc, #484]	; (56f0 <internalPermutation+0x240>)
    550c:	4698      	mov	r8, r3
    550e:	4442      	add	r2, r8
    5510:	7091      	strb	r1, [r2, #2]
                }
                else{
                    ret = MMUL[32 + loc];
                }
                b = b >> 1;
    5512:	0864      	lsrs	r4, r4, #1
    5514:	b2e4      	uxtb	r4, r4
    5516:	000a      	movs	r2, r1
    5518:	e034      	b.n	5584 <internalPermutation+0xd4>
    551a:	9b01      	ldr	r3, [sp, #4]
        while(b>1){
    551c:	0011      	movs	r1, r2
    551e:	e03b      	b.n	5598 <internalPermutation+0xe8>
        if(b==1){return a;} // Multiply a by 1 is a
    5520:	0003      	movs	r3, r0
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    5522:	aa08      	add	r2, sp, #32
    5524:	5cba      	ldrb	r2, [r7, r2]
    5526:	4053      	eors	r3, r2
    5528:	aa08      	add	r2, sp, #32
    552a:	54bb      	strb	r3, [r7, r2]
    552c:	3506      	adds	r5, #6
    552e:	3601      	adds	r6, #1
        for(j=0;j<D_VAL;j++){
    5530:	2d24      	cmp	r5, #36	; 0x24
    5532:	d03f      	beq.n	55b4 <internalPermutation+0x104>
            uint8_t nib = cells[(col+(D_VAL*j))/2];
    5534:	4653      	mov	r3, sl
    5536:	18ea      	adds	r2, r5, r3
    5538:	0fd3      	lsrs	r3, r2, #31
    553a:	189b      	adds	r3, r3, r2
    553c:	105b      	asrs	r3, r3, #1
    553e:	465a      	mov	r2, fp
    5540:	5cd2      	ldrb	r2, [r2, r3]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    5542:	464b      	mov	r3, r9
    5544:	2b00      	cmp	r3, #0
    5546:	d1be      	bne.n	54c6 <internalPermutation+0x16>
    5548:	0912      	lsrs	r2, r2, #4
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    554a:	7831      	ldrb	r1, [r6, #0]
    uint8_t ret = MMUL[(16*a)+b];
    554c:	0108      	lsls	r0, r1, #4
    554e:	4b68      	ldr	r3, [pc, #416]	; (56f0 <internalPermutation+0x240>)
    5550:	181b      	adds	r3, r3, r0
    5552:	5c9b      	ldrb	r3, [r3, r2]
    if(ret > 0x0F){
    5554:	2b0f      	cmp	r3, #15
    5556:	d9e4      	bls.n	5522 <internalPermutation+0x72>
    a &= 0x0F;
    5558:	230f      	movs	r3, #15
    555a:	0018      	movs	r0, r3
    555c:	4008      	ands	r0, r1
    b &= 0x0F;
    555e:	4013      	ands	r3, r2
        if(a<b){SWAP(a,b);} // Want a to be larger to reduce computation
    5560:	4298      	cmp	r0, r3
    5562:	d206      	bcs.n	5572 <internalPermutation+0xc2>
    5564:	4051      	eors	r1, r2
    5566:	404a      	eors	r2, r1
    5568:	200f      	movs	r0, #15
    556a:	0003      	movs	r3, r0
    556c:	4013      	ands	r3, r2
    556e:	4051      	eors	r1, r2
    5570:	4008      	ands	r0, r1
        if(b==0){return b;} // Multiply a by 0 is 0
    5572:	2b00      	cmp	r3, #0
    5574:	d0d5      	beq.n	5522 <internalPermutation+0x72>
        if(b==1){return a;} // Multiply a by 1 is a
    5576:	2b01      	cmp	r3, #1
    5578:	d0d2      	beq.n	5520 <internalPermutation+0x70>
    557a:	0002      	movs	r2, r0
    557c:	001c      	movs	r4, r3
    557e:	2100      	movs	r1, #0
    5580:	468c      	mov	ip, r1
    5582:	9301      	str	r3, [sp, #4]
        while(b>1){
    5584:	2c01      	cmp	r4, #1
    5586:	d9c8      	bls.n	551a <internalPermutation+0x6a>
            loc=(ret*16)+b;
    5588:	0111      	lsls	r1, r2, #4
    558a:	1861      	adds	r1, r4, r1
            if(MMUL[loc]<0x10){
    558c:	b2c9      	uxtb	r1, r1
    558e:	4b58      	ldr	r3, [pc, #352]	; (56f0 <internalPermutation+0x240>)
    5590:	5c59      	ldrb	r1, [r3, r1]
    5592:	290f      	cmp	r1, #15
    5594:	d89a      	bhi.n	54cc <internalPermutation+0x1c>
    5596:	9b01      	ldr	r3, [sp, #4]
            }
        }
        ret ^= odd; // One last "add" if multiplying by odd number at any point
    5598:	4662      	mov	r2, ip
    559a:	404a      	eors	r2, r1
    559c:	0011      	movs	r1, r2
        ret &= 0xF; // Only care about lower nibble
    559e:	220f      	movs	r2, #15
    55a0:	4011      	ands	r1, r2

        // Update map so won't have to recompute a x b
        MMUL[(a*16)+b_orig]=ret;
    55a2:	4a53      	ldr	r2, [pc, #332]	; (56f0 <internalPermutation+0x240>)
    55a4:	0104      	lsls	r4, r0, #4
    55a6:	1914      	adds	r4, r2, r4
    55a8:	54e1      	strb	r1, [r4, r3]
        MMUL[(b_orig*16)+a]=ret;
    55aa:	011b      	lsls	r3, r3, #4
    55ac:	18d2      	adds	r2, r2, r3
    55ae:	5411      	strb	r1, [r2, r0]
        ret &= 0xF; // Only care about lower nibble
    55b0:	000b      	movs	r3, r1
    55b2:	e7b6      	b.n	5522 <internalPermutation+0x72>
    for(i=0;i<D_VAL;i++){
    55b4:	9b02      	ldr	r3, [sp, #8]
    55b6:	3301      	adds	r3, #1
    55b8:	9302      	str	r3, [sp, #8]
    55ba:	9a03      	ldr	r2, [sp, #12]
    55bc:	3206      	adds	r2, #6
    55be:	9203      	str	r2, [sp, #12]
    55c0:	2b06      	cmp	r3, #6
    55c2:	d00b      	beq.n	55dc <internalPermutation+0x12c>
    55c4:	9902      	ldr	r1, [sp, #8]
    55c6:	000f      	movs	r7, r1
        tmp_cells[i]=0;
    55c8:	2300      	movs	r3, #0
    55ca:	aa08      	add	r2, sp, #32
    55cc:	548b      	strb	r3, [r1, r2]
    55ce:	9e03      	ldr	r6, [sp, #12]
    55d0:	9d06      	ldr	r5, [sp, #24]
    55d2:	33ff      	adds	r3, #255	; 0xff
    55d4:	9a05      	ldr	r2, [sp, #20]
    55d6:	401a      	ands	r2, r3
    55d8:	4692      	mov	sl, r2
    55da:	e7ab      	b.n	5534 <internalPermutation+0x84>
    55dc:	9b05      	ldr	r3, [sp, #20]
    55de:	469c      	mov	ip, r3
    55e0:	464f      	mov	r7, r9
    55e2:	4650      	mov	r0, sl
    for(i=0;i<D_VAL;i++){
    55e4:	2100      	movs	r1, #0
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    55e6:	240f      	movs	r4, #15
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    55e8:	465a      	mov	r2, fp
    55ea:	e00d      	b.n	5608 <internalPermutation+0x158>
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    55ec:	0fc3      	lsrs	r3, r0, #31
    55ee:	181b      	adds	r3, r3, r0
    55f0:	105b      	asrs	r3, r3, #1
    55f2:	18d3      	adds	r3, r2, r3
    55f4:	781d      	ldrb	r5, [r3, #0]
    55f6:	43a5      	bics	r5, r4
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    55f8:	ae08      	add	r6, sp, #32
    55fa:	5d8e      	ldrb	r6, [r1, r6]
    55fc:	4335      	orrs	r5, r6
    55fe:	701d      	strb	r5, [r3, #0]
    for(i=0;i<D_VAL;i++){
    5600:	3101      	adds	r1, #1
    5602:	3006      	adds	r0, #6
    5604:	2906      	cmp	r1, #6
    5606:	d00d      	beq.n	5624 <internalPermutation+0x174>
        if(col%2 == 0){
    5608:	2f00      	cmp	r7, #0
    560a:	d1ef      	bne.n	55ec <internalPermutation+0x13c>
            cells[(col+(D_VAL*i))/2] &= 0x0F;
    560c:	0fc3      	lsrs	r3, r0, #31
    560e:	181b      	adds	r3, r3, r0
    5610:	105b      	asrs	r3, r3, #1
    5612:	18d3      	adds	r3, r2, r3
    5614:	781d      	ldrb	r5, [r3, #0]
    5616:	4025      	ands	r5, r4
            cells[(col+(D_VAL*i))/2] |= (tmp_cells[i] << 4);
    5618:	ae08      	add	r6, sp, #32
    561a:	5d8e      	ldrb	r6, [r1, r6]
    561c:	0136      	lsls	r6, r6, #4
    561e:	4335      	orrs	r5, r6
    5620:	701d      	strb	r5, [r3, #0]
    5622:	e7ed      	b.n	5600 <internalPermutation+0x150>
    5624:	4693      	mov	fp, r2
    for(i=0;i<D_VAL;i++){
    5626:	2301      	movs	r3, #1
    5628:	4698      	mov	r8, r3
    562a:	44c4      	add	ip, r8
    562c:	4663      	mov	r3, ip
    562e:	2b06      	cmp	r3, #6
    5630:	d00a      	beq.n	5648 <internalPermutation+0x198>
    5632:	4b30      	ldr	r3, [pc, #192]	; (56f4 <internalPermutation+0x244>)
    5634:	9303      	str	r3, [sp, #12]
    for(i=0;i<D_VAL;i++){
    5636:	2300      	movs	r3, #0
    5638:	9302      	str	r3, [sp, #8]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    563a:	4667      	mov	r7, ip
    563c:	3301      	adds	r3, #1
    563e:	401f      	ands	r7, r3
    5640:	4663      	mov	r3, ip
    5642:	9305      	str	r3, [sp, #20]
    5644:	46b9      	mov	r9, r7
    5646:	e7bd      	b.n	55c4 <internalPermutation+0x114>
    5648:	0017      	movs	r7, r2
    for(round=0;round<12;round++){
    564a:	9b07      	ldr	r3, [sp, #28]
    564c:	3301      	adds	r3, #1
    564e:	9307      	str	r3, [sp, #28]
    5650:	2b0c      	cmp	r3, #12
    5652:	d046      	beq.n	56e2 <internalPermutation+0x232>
        cells[i*T_VAL/D_VAL] ^= (RC[round] ^ IC[i]) << 4;
    5654:	4b28      	ldr	r3, [pc, #160]	; (56f8 <internalPermutation+0x248>)
    5656:	9a07      	ldr	r2, [sp, #28]
    5658:	5cd3      	ldrb	r3, [r2, r3]
    565a:	4698      	mov	r8, r3
    565c:	4d27      	ldr	r5, [pc, #156]	; (56fc <internalPermutation+0x24c>)
    565e:	2400      	movs	r4, #0
    5660:	4e27      	ldr	r6, [pc, #156]	; (5700 <internalPermutation+0x250>)
    5662:	003b      	movs	r3, r7
    5664:	4647      	mov	r7, r8
    5666:	4698      	mov	r8, r3
    5668:	2106      	movs	r1, #6
    566a:	0020      	movs	r0, r4
    566c:	47b0      	blx	r6
    566e:	4440      	add	r0, r8
    5670:	782b      	ldrb	r3, [r5, #0]
    5672:	407b      	eors	r3, r7
    5674:	011b      	lsls	r3, r3, #4
    5676:	7802      	ldrb	r2, [r0, #0]
    5678:	4053      	eors	r3, r2
    567a:	7003      	strb	r3, [r0, #0]
    567c:	3412      	adds	r4, #18
    567e:	3501      	adds	r5, #1
    for(i=0;i<D_VAL;i++){
    5680:	2c6c      	cmp	r4, #108	; 0x6c
    5682:	d1f1      	bne.n	5668 <internalPermutation+0x1b8>
    5684:	4647      	mov	r7, r8
    5686:	4641      	mov	r1, r8
    5688:	4645      	mov	r5, r8
    568a:	3512      	adds	r5, #18
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    568c:	481d      	ldr	r0, [pc, #116]	; (5704 <internalPermutation+0x254>)
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    568e:	3c5d      	subs	r4, #93	; 0x5d
        uint16_t tmp=cells[i];
    5690:	780a      	ldrb	r2, [r1, #0]
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    5692:	0913      	lsrs	r3, r2, #4
    5694:	5cc3      	ldrb	r3, [r0, r3]
    5696:	011b      	lsls	r3, r3, #4
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    5698:	4022      	ands	r2, r4
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    569a:	5c82      	ldrb	r2, [r0, r2]
    569c:	4313      	orrs	r3, r2
    569e:	700b      	strb	r3, [r1, #0]
    56a0:	3101      	adds	r1, #1
    for(i=0;i<T_VAL;i++){
    56a2:	428d      	cmp	r5, r1
    56a4:	d1f4      	bne.n	5690 <internalPermutation+0x1e0>
    56a6:	1cf9      	adds	r1, r7, #3
    56a8:	2314      	movs	r3, #20
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    56aa:	2018      	movs	r0, #24
    56ac:	001a      	movs	r2, r3
        tmp1|=(cells[i*3]<<16);
    56ae:	780b      	ldrb	r3, [r1, #0]
    56b0:	041b      	lsls	r3, r3, #16
        tmp1|=(cells[(i*3)+1]<<8);
    56b2:	784c      	ldrb	r4, [r1, #1]
    56b4:	0224      	lsls	r4, r4, #8
        tmp1|=(cells[(i*3)+2]);
    56b6:	4323      	orrs	r3, r4
    56b8:	788c      	ldrb	r4, [r1, #2]
    56ba:	4323      	orrs	r3, r4
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    56bc:	1a84      	subs	r4, r0, r2
    56be:	001d      	movs	r5, r3
    56c0:	40a5      	lsls	r5, r4
    56c2:	40d3      	lsrs	r3, r2
    56c4:	432b      	orrs	r3, r5
        cells[i*3]=(tmp1 & 0xFF0000) >> 16;
    56c6:	0c1c      	lsrs	r4, r3, #16
    56c8:	700c      	strb	r4, [r1, #0]
        cells[(i*3)+1] = (tmp1 & 0xFF00) >> 8;
    56ca:	0a1c      	lsrs	r4, r3, #8
    56cc:	704c      	strb	r4, [r1, #1]
        cells[(i*3)+2] = (tmp1 & 0xFF);
    56ce:	708b      	strb	r3, [r1, #2]
    56d0:	3103      	adds	r1, #3
    56d2:	3a04      	subs	r2, #4
    for(i=1;i<D_VAL;i++){
    56d4:	2a00      	cmp	r2, #0
    56d6:	d1ea      	bne.n	56ae <internalPermutation+0x1fe>
    56d8:	9206      	str	r2, [sp, #24]
    56da:	2300      	movs	r3, #0
    56dc:	469c      	mov	ip, r3
    56de:	46bb      	mov	fp, r7
    56e0:	e7a7      	b.n	5632 <internalPermutation+0x182>
}
    56e2:	b00b      	add	sp, #44	; 0x2c
    56e4:	bc3c      	pop	{r2, r3, r4, r5}
    56e6:	4690      	mov	r8, r2
    56e8:	4699      	mov	r9, r3
    56ea:	46a2      	mov	sl, r4
    56ec:	46ab      	mov	fp, r5
    56ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56f0:	20000014 	.word	0x20000014
    56f4:	00009ea0 	.word	0x00009ea0
    56f8:	00009ecc 	.word	0x00009ecc
    56fc:	00009ec4 	.word	0x00009ec4
    5700:	00006461 	.word	0x00006461
    5704:	00009ed8 	.word	0x00009ed8

00005708 <photon128>:
void photon128(uint8_t *message, const int32_t message_bytes, uint8_t *hash){
    5708:	b5f0      	push	{r4, r5, r6, r7, lr}
    570a:	46d6      	mov	lr, sl
    570c:	464f      	mov	r7, r9
    570e:	4646      	mov	r6, r8
    5710:	b5c0      	push	{r6, r7, lr}
    5712:	b088      	sub	sp, #32
    5714:	0005      	movs	r5, r0
    5716:	9001      	str	r0, [sp, #4]
    5718:	4689      	mov	r9, r1
    571a:	0016      	movs	r6, r2
    memset((uint8_t *) cells,0,T_VAL-3);
    571c:	ac03      	add	r4, sp, #12
    571e:	220f      	movs	r2, #15
    5720:	2100      	movs	r1, #0
    5722:	0020      	movs	r0, r4
    5724:	4b30      	ldr	r3, [pc, #192]	; (57e8 <photon128+0xe0>)
    5726:	4798      	blx	r3
    cells[15]=0x20;
    5728:	2320      	movs	r3, #32
    572a:	73e3      	strb	r3, [r4, #15]
    cells[16]=0x10;
    572c:	3b10      	subs	r3, #16
    572e:	7423      	strb	r3, [r4, #16]
    cells[17]=0x10;
    5730:	7463      	strb	r3, [r4, #17]
    for(i=0;i<message_bytes/R_VAL;i++){
    5732:	464b      	mov	r3, r9
    5734:	0fdb      	lsrs	r3, r3, #31
    5736:	444b      	add	r3, r9
    5738:	105b      	asrs	r3, r3, #1
    573a:	469a      	mov	sl, r3
    573c:	2b00      	cmp	r3, #0
    573e:	dd49      	ble.n	57d4 <photon128+0xcc>
    5740:	005b      	lsls	r3, r3, #1
    5742:	46a8      	mov	r8, r5
    5744:	4498      	add	r8, r3
    cells[0] ^= message[0];
    5746:	ac03      	add	r4, sp, #12
        internalPermutation(&cells[0]);
    5748:	4f28      	ldr	r7, [pc, #160]	; (57ec <photon128+0xe4>)
    cells[0] ^= message[0];
    574a:	7823      	ldrb	r3, [r4, #0]
    574c:	782a      	ldrb	r2, [r5, #0]
    574e:	4053      	eors	r3, r2
    5750:	7023      	strb	r3, [r4, #0]
    cells[1] ^= message[1];
    5752:	7863      	ldrb	r3, [r4, #1]
    5754:	786a      	ldrb	r2, [r5, #1]
    5756:	4053      	eors	r3, r2
    5758:	7063      	strb	r3, [r4, #1]
        internalPermutation(&cells[0]);
    575a:	0020      	movs	r0, r4
    575c:	47b8      	blx	r7
    575e:	3502      	adds	r5, #2
    for(i=0;i<message_bytes/R_VAL;i++){
    5760:	4545      	cmp	r5, r8
    5762:	d1f2      	bne.n	574a <photon128+0x42>
    5764:	4653      	mov	r3, sl
    if(message_bytes%2){
    5766:	464a      	mov	r2, r9
    5768:	07d2      	lsls	r2, r2, #31
    576a:	d535      	bpl.n	57d8 <photon128+0xd0>
        cells[0] ^= message[i*2];
    576c:	aa03      	add	r2, sp, #12
    576e:	005b      	lsls	r3, r3, #1
    5770:	9901      	ldr	r1, [sp, #4]
    5772:	5c5b      	ldrb	r3, [r3, r1]
    5774:	7811      	ldrb	r1, [r2, #0]
    5776:	404b      	eors	r3, r1
    5778:	7013      	strb	r3, [r2, #0]
        cells[1] ^= 0x80; //Padding
    577a:	7851      	ldrb	r1, [r2, #1]
    577c:	2380      	movs	r3, #128	; 0x80
    577e:	425b      	negs	r3, r3
    5780:	404b      	eors	r3, r1
    5782:	7053      	strb	r3, [r2, #1]
    internalPermutation(&cells[0]);
    5784:	ac03      	add	r4, sp, #12
    5786:	0020      	movs	r0, r4
    5788:	4b18      	ldr	r3, [pc, #96]	; (57ec <photon128+0xe4>)
    578a:	4798      	blx	r3
    memset(hash,0,N_VAL);
    578c:	2210      	movs	r2, #16
    578e:	2100      	movs	r1, #0
    5790:	0030      	movs	r0, r6
    5792:	4b15      	ldr	r3, [pc, #84]	; (57e8 <photon128+0xe0>)
    5794:	4798      	blx	r3
    hash[0] |= cells[0];
    5796:	7833      	ldrb	r3, [r6, #0]
    5798:	7822      	ldrb	r2, [r4, #0]
    579a:	4313      	orrs	r3, r2
    579c:	7033      	strb	r3, [r6, #0]
    hash[1] |= cells[1];
    579e:	7873      	ldrb	r3, [r6, #1]
    57a0:	7862      	ldrb	r2, [r4, #1]
    57a2:	4313      	orrs	r3, r2
    57a4:	7073      	strb	r3, [r6, #1]
    57a6:	1cb4      	adds	r4, r6, #2
    57a8:	3610      	adds	r6, #16
        internalPermutation(&cells[0]);
    57aa:	ad03      	add	r5, sp, #12
    57ac:	4f0f      	ldr	r7, [pc, #60]	; (57ec <photon128+0xe4>)
    57ae:	0028      	movs	r0, r5
    57b0:	47b8      	blx	r7
        hash[2*i] |= cells[0];
    57b2:	7823      	ldrb	r3, [r4, #0]
    57b4:	782a      	ldrb	r2, [r5, #0]
    57b6:	4313      	orrs	r3, r2
    57b8:	7023      	strb	r3, [r4, #0]
        hash[(2*i)+1] |= cells[1];
    57ba:	7863      	ldrb	r3, [r4, #1]
    57bc:	786a      	ldrb	r2, [r5, #1]
    57be:	4313      	orrs	r3, r2
    57c0:	7063      	strb	r3, [r4, #1]
    57c2:	3402      	adds	r4, #2
    for(i=1;i<N_VAL/2;i++){
    57c4:	42b4      	cmp	r4, r6
    57c6:	d1f2      	bne.n	57ae <photon128+0xa6>
}
    57c8:	b008      	add	sp, #32
    57ca:	bc1c      	pop	{r2, r3, r4}
    57cc:	4690      	mov	r8, r2
    57ce:	4699      	mov	r9, r3
    57d0:	46a2      	mov	sl, r4
    57d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(i=0;i<message_bytes/R_VAL;i++){
    57d4:	2300      	movs	r3, #0
    57d6:	e7c6      	b.n	5766 <photon128+0x5e>
        cells[0] ^= 0x80;
    57d8:	aa03      	add	r2, sp, #12
    57da:	7811      	ldrb	r1, [r2, #0]
    57dc:	2380      	movs	r3, #128	; 0x80
    57de:	425b      	negs	r3, r3
    57e0:	404b      	eors	r3, r1
    57e2:	7013      	strb	r3, [r2, #0]
    57e4:	e7ce      	b.n	5784 <photon128+0x7c>
    57e6:	46c0      	nop			; (mov r8, r8)
    57e8:	0000671f 	.word	0x0000671f
    57ec:	000054b1 	.word	0x000054b1

000057f0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    57f0:	b570      	push	{r4, r5, r6, lr}
    57f2:	b082      	sub	sp, #8
    57f4:	0005      	movs	r5, r0
    57f6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    57f8:	2200      	movs	r2, #0
    57fa:	466b      	mov	r3, sp
    57fc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    57fe:	4c06      	ldr	r4, [pc, #24]	; (5818 <usart_serial_getchar+0x28>)
    5800:	466b      	mov	r3, sp
    5802:	1d99      	adds	r1, r3, #6
    5804:	0028      	movs	r0, r5
    5806:	47a0      	blx	r4
    5808:	2800      	cmp	r0, #0
    580a:	d1f9      	bne.n	5800 <usart_serial_getchar+0x10>

	*c = temp;
    580c:	466b      	mov	r3, sp
    580e:	3306      	adds	r3, #6
    5810:	881b      	ldrh	r3, [r3, #0]
    5812:	7033      	strb	r3, [r6, #0]
}
    5814:	b002      	add	sp, #8
    5816:	bd70      	pop	{r4, r5, r6, pc}
    5818:	000020d3 	.word	0x000020d3

0000581c <usart_serial_putchar>:
{
    581c:	b570      	push	{r4, r5, r6, lr}
    581e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    5820:	b28c      	uxth	r4, r1
    5822:	4e03      	ldr	r6, [pc, #12]	; (5830 <usart_serial_putchar+0x14>)
    5824:	0021      	movs	r1, r4
    5826:	0028      	movs	r0, r5
    5828:	47b0      	blx	r6
    582a:	2800      	cmp	r0, #0
    582c:	d1fa      	bne.n	5824 <usart_serial_putchar+0x8>
}
    582e:	bd70      	pop	{r4, r5, r6, pc}
    5830:	000020ad 	.word	0x000020ad

00005834 <CAN0_Handler>:
	can_enable_interrupt(&can_instance, CAN_PROTOCOL_ERROR_ARBITRATION
	| CAN_PROTOCOL_ERROR_DATA);
}
//! [can_init_setup]

void CAN0_Handler(void) {
    5834:	b5f0      	push	{r4, r5, r6, r7, lr}
    5836:	46ce      	mov	lr, r9
    5838:	4647      	mov	r7, r8
    583a:	b580      	push	{r7, lr}
    583c:	b083      	sub	sp, #12
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
    583e:	4b91      	ldr	r3, [pc, #580]	; (5a84 <CAN0_Handler+0x250>)
    5840:	681b      	ldr	r3, [r3, #0]
    5842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
volatile uint32_t rx_buffer_index;
volatile uint32_t status = can_read_interrupt_status(&can_instance);
    5844:	9200      	str	r2, [sp, #0]

//printf("Status = %i",status);

if ((status & CAN_PROTOCOL_ERROR_ARBITRATION)
    5846:	9a00      	ldr	r2, [sp, #0]
    5848:	0112      	lsls	r2, r2, #4
    584a:	d402      	bmi.n	5852 <CAN0_Handler+0x1e>
|| (status & CAN_PROTOCOL_ERROR_DATA)) {
    584c:	9a00      	ldr	r2, [sp, #0]
    584e:	00d2      	lsls	r2, r2, #3
    5850:	d505      	bpl.n	585e <CAN0_Handler+0x2a>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    5852:	22c0      	movs	r2, #192	; 0xc0
    5854:	0552      	lsls	r2, r2, #21
    5856:	651a      	str	r2, [r3, #80]	; 0x50
	can_clear_interrupt_status(&can_instance, CAN_PROTOCOL_ERROR_ARBITRATION
		| CAN_PROTOCOL_ERROR_DATA);
	printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
    5858:	488b      	ldr	r0, [pc, #556]	; (5a88 <CAN0_Handler+0x254>)
    585a:	4b8c      	ldr	r3, [pc, #560]	; (5a8c <CAN0_Handler+0x258>)
    585c:	4798      	blx	r3
}

// Enrollment stage:
if (STAGE == ENROLLMENT) {
    585e:	4b8c      	ldr	r3, [pc, #560]	; (5a90 <CAN0_Handler+0x25c>)
    5860:	781b      	ldrb	r3, [r3, #0]
    5862:	2b00      	cmp	r3, #0
    5864:	d152      	bne.n	590c <CAN0_Handler+0xd8>
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    5866:	9b00      	ldr	r3, [sp, #0]
    5868:	031b      	lsls	r3, r3, #12
    586a:	d557      	bpl.n	591c <CAN0_Handler+0xe8>
    586c:	4b85      	ldr	r3, [pc, #532]	; (5a84 <CAN0_Handler+0x250>)
    586e:	681b      	ldr	r3, [r3, #0]
    5870:	2280      	movs	r2, #128	; 0x80
    5872:	0312      	lsls	r2, r2, #12
    5874:	651a      	str	r2, [r3, #80]	; 0x50
    5876:	2720      	movs	r7, #32
    5878:	427f      	negs	r7, r7
		can_clear_interrupt_status(&can_instance,CAN_RX_BUFFER_NEW_MESSAGE);
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    587a:	2400      	movs	r4, #0
			if (can_rx_get_buffer_status(&can_instance, i)) {
				rx_buffer_index = i;
				can_rx_clear_buffer_status(&can_instance, i);
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    587c:	4b85      	ldr	r3, [pc, #532]	; (5a94 <CAN0_Handler+0x260>)
    587e:	4698      	mov	r8, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    5880:	4b85      	ldr	r3, [pc, #532]	; (5a98 <CAN0_Handler+0x264>)
    5882:	4699      	mov	r9, r3
    5884:	e012      	b.n	58ac <CAN0_Handler+0x78>
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    5886:	4b7f      	ldr	r3, [pc, #508]	; (5a84 <CAN0_Handler+0x250>)
    5888:	681a      	ldr	r2, [r3, #0]
    588a:	239c      	movs	r3, #156	; 0x9c
    588c:	58d0      	ldr	r0, [r2, r3]
    588e:	3b9b      	subs	r3, #155	; 0x9b
    5890:	40bb      	lsls	r3, r7
			if (can_rx_get_buffer_status(&can_instance, i)) {
    5892:	4203      	tst	r3, r0
    5894:	d006      	beq.n	58a4 <CAN0_Handler+0x70>
				rx_buffer_index = i;
    5896:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT2.reg = (1 << index);
    5898:	219c      	movs	r1, #156	; 0x9c
    589a:	5053      	str	r3, [r2, r1]
    589c:	e013      	b.n	58c6 <CAN0_Handler+0x92>
				
				
				// Change flags based on buffer index:
				if (rx_buffer_index == CAN_FILTER_ENROLLMENT) {
					//printf("%d == %d ?\r\n",rx_buffer_index,CAN_FILTER_ENROLLMENT);
					g_rec = 1;
    589e:	2201      	movs	r2, #1
    58a0:	4b7e      	ldr	r3, [pc, #504]	; (5a9c <CAN0_Handler+0x268>)
    58a2:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    58a4:	3401      	adds	r4, #1
    58a6:	3701      	adds	r7, #1
    58a8:	2c10      	cmp	r4, #16
    58aa:	d037      	beq.n	591c <CAN0_Handler+0xe8>
	if (index < 32) {
    58ac:	2c1f      	cmp	r4, #31
    58ae:	d8ea      	bhi.n	5886 <CAN0_Handler+0x52>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    58b0:	4b74      	ldr	r3, [pc, #464]	; (5a84 <CAN0_Handler+0x250>)
    58b2:	681a      	ldr	r2, [r3, #0]
    58b4:	2398      	movs	r3, #152	; 0x98
    58b6:	58d0      	ldr	r0, [r2, r3]
    58b8:	3b97      	subs	r3, #151	; 0x97
    58ba:	40a3      	lsls	r3, r4
			if (can_rx_get_buffer_status(&can_instance, i)) {
    58bc:	4203      	tst	r3, r0
    58be:	d0f1      	beq.n	58a4 <CAN0_Handler+0x70>
				rx_buffer_index = i;
    58c0:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT1.reg = (1 << index);
    58c2:	2198      	movs	r1, #152	; 0x98
    58c4:	5053      	str	r3, [r2, r1]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    58c6:	9b01      	ldr	r3, [sp, #4]
    58c8:	2592      	movs	r5, #146	; 0x92
    58ca:	006d      	lsls	r5, r5, #1
    58cc:	436b      	muls	r3, r5
    58ce:	4642      	mov	r2, r8
    58d0:	5c9e      	ldrb	r6, [r3, r2]
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    58d2:	9901      	ldr	r1, [sp, #4]
    58d4:	9a01      	ldr	r2, [sp, #4]
    58d6:	4369      	muls	r1, r5
    58d8:	3104      	adds	r1, #4
    58da:	00f3      	lsls	r3, r6, #3
    58dc:	199b      	adds	r3, r3, r6
    58de:	00db      	lsls	r3, r3, #3
    58e0:	18c9      	adds	r1, r1, r3
    58e2:	4441      	add	r1, r8
    58e4:	4867      	ldr	r0, [pc, #412]	; (5a84 <CAN0_Handler+0x250>)
    58e6:	47c8      	blx	r9
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    58e8:	9b01      	ldr	r3, [sp, #4]
    58ea:	435d      	muls	r5, r3
    58ec:	3601      	adds	r6, #1
    58ee:	2303      	movs	r3, #3
    58f0:	401e      	ands	r6, r3
    58f2:	4643      	mov	r3, r8
    58f4:	54ee      	strb	r6, [r5, r3]
				if (rx_buffer_index == CAN_FILTER_ENROLLMENT) {
    58f6:	9b01      	ldr	r3, [sp, #4]
    58f8:	2b03      	cmp	r3, #3
    58fa:	d0d0      	beq.n	589e <CAN0_Handler+0x6a>
				}
					// Received message about type of communication
				
				else if (rx_buffer_index == CAN_FILTER_PUBLICKEY) {
    58fc:	9b01      	ldr	r3, [sp, #4]
    58fe:	2b04      	cmp	r3, #4
    5900:	d1d0      	bne.n	58a4 <CAN0_Handler+0x70>
					//printf("%d == %d ? also %d \r\n",rx_buffer_index,CAN_FILTER_PUBLICKEY,g_rec_public);
					g_rec_public++;
    5902:	4a67      	ldr	r2, [pc, #412]	; (5aa0 <CAN0_Handler+0x26c>)
    5904:	6813      	ldr	r3, [r2, #0]
    5906:	3301      	adds	r3, #1
    5908:	6013      	str	r3, [r2, #0]
    590a:	e7cb      	b.n	58a4 <CAN0_Handler+0x70>
		}
	}
}

// Authentication Stage:
else if (STAGE == AUTHENTICATION) {
    590c:	4b60      	ldr	r3, [pc, #384]	; (5a90 <CAN0_Handler+0x25c>)
    590e:	781b      	ldrb	r3, [r3, #0]
    5910:	2b01      	cmp	r3, #1
    5912:	d008      	beq.n	5926 <CAN0_Handler+0xf2>
		// Received Wait packet.
		
	}
}
else {
	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
    5914:	9b00      	ldr	r3, [sp, #0]
    5916:	07db      	lsls	r3, r3, #31
    5918:	d500      	bpl.n	591c <CAN0_Handler+0xe8>
    591a:	e094      	b.n	5a46 <CAN0_Handler+0x212>
		// Do thing here
		g_received++;
		//g_waitFlag++;
	}
}
}
    591c:	b003      	add	sp, #12
    591e:	bc0c      	pop	{r2, r3}
    5920:	4690      	mov	r8, r2
    5922:	4699      	mov	r9, r3
    5924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    5926:	9b00      	ldr	r3, [sp, #0]
    5928:	031b      	lsls	r3, r3, #12
    592a:	d569      	bpl.n	5a00 <CAN0_Handler+0x1cc>
	module_inst->hw->IR.reg = source;
    592c:	4b55      	ldr	r3, [pc, #340]	; (5a84 <CAN0_Handler+0x250>)
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	2280      	movs	r2, #128	; 0x80
    5932:	0312      	lsls	r2, r2, #12
    5934:	651a      	str	r2, [r3, #80]	; 0x50
    5936:	2720      	movs	r7, #32
    5938:	427f      	negs	r7, r7
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    593a:	2400      	movs	r4, #0
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    593c:	4b55      	ldr	r3, [pc, #340]	; (5a94 <CAN0_Handler+0x260>)
    593e:	4698      	mov	r8, r3
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    5940:	4b55      	ldr	r3, [pc, #340]	; (5a98 <CAN0_Handler+0x264>)
    5942:	4699      	mov	r9, r3
    5944:	e013      	b.n	596e <CAN0_Handler+0x13a>
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    5946:	4b4f      	ldr	r3, [pc, #316]	; (5a84 <CAN0_Handler+0x250>)
    5948:	681a      	ldr	r2, [r3, #0]
    594a:	239c      	movs	r3, #156	; 0x9c
    594c:	58d0      	ldr	r0, [r2, r3]
    594e:	3b9b      	subs	r3, #155	; 0x9b
    5950:	40bb      	lsls	r3, r7
			if (can_rx_get_buffer_status(&can_instance, i)) {
    5952:	4203      	tst	r3, r0
    5954:	d007      	beq.n	5966 <CAN0_Handler+0x132>
				rx_buffer_index = i;
    5956:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT2.reg = (1 << index);
    5958:	219c      	movs	r1, #156	; 0x9c
    595a:	5053      	str	r3, [r2, r1]
    595c:	e014      	b.n	5988 <CAN0_Handler+0x154>
				if (rx_buffer_index == CAN_FILTER_WAIT) g_waitFlag++;
    595e:	4a51      	ldr	r2, [pc, #324]	; (5aa4 <CAN0_Handler+0x270>)
    5960:	6813      	ldr	r3, [r2, #0]
    5962:	3301      	adds	r3, #1
    5964:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    5966:	3401      	adds	r4, #1
    5968:	3701      	adds	r7, #1
    596a:	2c10      	cmp	r4, #16
    596c:	d048      	beq.n	5a00 <CAN0_Handler+0x1cc>
	if (index < 32) {
    596e:	2c1f      	cmp	r4, #31
    5970:	d8e9      	bhi.n	5946 <CAN0_Handler+0x112>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    5972:	4b44      	ldr	r3, [pc, #272]	; (5a84 <CAN0_Handler+0x250>)
    5974:	681a      	ldr	r2, [r3, #0]
    5976:	2398      	movs	r3, #152	; 0x98
    5978:	58d0      	ldr	r0, [r2, r3]
    597a:	3b97      	subs	r3, #151	; 0x97
    597c:	40a3      	lsls	r3, r4
			if (can_rx_get_buffer_status(&can_instance, i)) {
    597e:	4203      	tst	r3, r0
    5980:	d0f1      	beq.n	5966 <CAN0_Handler+0x132>
				rx_buffer_index = i;
    5982:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT1.reg = (1 << index);
    5984:	2198      	movs	r1, #152	; 0x98
    5986:	5053      	str	r3, [r2, r1]
				int temp_Buff = rx_element_buff[rx_buffer_index].last_write;
    5988:	9b01      	ldr	r3, [sp, #4]
    598a:	2592      	movs	r5, #146	; 0x92
    598c:	006d      	lsls	r5, r5, #1
    598e:	436b      	muls	r3, r5
    5990:	4642      	mov	r2, r8
    5992:	5c9e      	ldrb	r6, [r3, r2]
				can_get_rx_buffer_element(&can_instance, &(rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    5994:	9901      	ldr	r1, [sp, #4]
    5996:	9a01      	ldr	r2, [sp, #4]
    5998:	4369      	muls	r1, r5
    599a:	3104      	adds	r1, #4
    599c:	00f3      	lsls	r3, r6, #3
    599e:	199b      	adds	r3, r3, r6
    59a0:	00db      	lsls	r3, r3, #3
    59a2:	18c9      	adds	r1, r1, r3
    59a4:	4441      	add	r1, r8
    59a6:	4837      	ldr	r0, [pc, #220]	; (5a84 <CAN0_Handler+0x250>)
    59a8:	47c8      	blx	r9
				rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % MAX_BUFFS;
    59aa:	9b01      	ldr	r3, [sp, #4]
    59ac:	435d      	muls	r5, r3
    59ae:	3601      	adds	r6, #1
    59b0:	2303      	movs	r3, #3
    59b2:	401e      	ands	r6, r3
    59b4:	4643      	mov	r3, r8
    59b6:	54ee      	strb	r6, [r5, r3]
				if (rx_buffer_index == CAN_FILTER_WAIT) g_waitFlag++;
    59b8:	9b01      	ldr	r3, [sp, #4]
    59ba:	2b02      	cmp	r3, #2
    59bc:	d0cf      	beq.n	595e <CAN0_Handler+0x12a>
				else if (rx_buffer_index == CAN_FILTER_MONITOR) g_normalFlag++;
    59be:	9b01      	ldr	r3, [sp, #4]
    59c0:	2b01      	cmp	r3, #1
    59c2:	d00b      	beq.n	59dc <CAN0_Handler+0x1a8>
				else if (rx_buffer_index == CAN_FILTER_MSG2)  {
    59c4:	9b01      	ldr	r3, [sp, #4]
    59c6:	2b04      	cmp	r3, #4
    59c8:	d1cd      	bne.n	5966 <CAN0_Handler+0x132>
					if(g_sharedReceived == 0) {
    59ca:	4b37      	ldr	r3, [pc, #220]	; (5aa8 <CAN0_Handler+0x274>)
    59cc:	681b      	ldr	r3, [r3, #0]
    59ce:	2b00      	cmp	r3, #0
    59d0:	d109      	bne.n	59e6 <CAN0_Handler+0x1b2>
						g_sharedReceived++;
    59d2:	4a35      	ldr	r2, [pc, #212]	; (5aa8 <CAN0_Handler+0x274>)
    59d4:	6813      	ldr	r3, [r2, #0]
    59d6:	3301      	adds	r3, #1
    59d8:	6013      	str	r3, [r2, #0]
    59da:	e7c4      	b.n	5966 <CAN0_Handler+0x132>
				else if (rx_buffer_index == CAN_FILTER_MONITOR) g_normalFlag++;
    59dc:	4a33      	ldr	r2, [pc, #204]	; (5aac <CAN0_Handler+0x278>)
    59de:	6813      	ldr	r3, [r2, #0]
    59e0:	3301      	adds	r3, #1
    59e2:	6013      	str	r3, [r2, #0]
    59e4:	e7bf      	b.n	5966 <CAN0_Handler+0x132>
					else if ((g_sharedReceived == 1) && (g_recComplete == 1)) {
    59e6:	4b30      	ldr	r3, [pc, #192]	; (5aa8 <CAN0_Handler+0x274>)
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	2b01      	cmp	r3, #1
    59ec:	d1bb      	bne.n	5966 <CAN0_Handler+0x132>
    59ee:	4b30      	ldr	r3, [pc, #192]	; (5ab0 <CAN0_Handler+0x27c>)
    59f0:	681b      	ldr	r3, [r3, #0]
    59f2:	2b01      	cmp	r3, #1
    59f4:	d1b7      	bne.n	5966 <CAN0_Handler+0x132>
						g_sharedReceived++;
    59f6:	4a2c      	ldr	r2, [pc, #176]	; (5aa8 <CAN0_Handler+0x274>)
    59f8:	6813      	ldr	r3, [r2, #0]
    59fa:	3301      	adds	r3, #1
    59fc:	6013      	str	r3, [r2, #0]
    59fe:	e7b2      	b.n	5966 <CAN0_Handler+0x132>
	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
    5a00:	9b00      	ldr	r3, [sp, #0]
    5a02:	07db      	lsls	r3, r3, #31
    5a04:	d400      	bmi.n	5a08 <CAN0_Handler+0x1d4>
    5a06:	e789      	b.n	591c <CAN0_Handler+0xe8>
	module_inst->hw->IR.reg = source;
    5a08:	4d1e      	ldr	r5, [pc, #120]	; (5a84 <CAN0_Handler+0x250>)
    5a0a:	682b      	ldr	r3, [r5, #0]
    5a0c:	2201      	movs	r2, #1
    5a0e:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
    5a10:	4c28      	ldr	r4, [pc, #160]	; (5ab4 <CAN0_Handler+0x280>)
    5a12:	6822      	ldr	r2, [r4, #0]
    5a14:	4928      	ldr	r1, [pc, #160]	; (5ab8 <CAN0_Handler+0x284>)
    5a16:	0028      	movs	r0, r5
    5a18:	4b28      	ldr	r3, [pc, #160]	; (5abc <CAN0_Handler+0x288>)
    5a1a:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
    5a1c:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    5a1e:	6829      	ldr	r1, [r5, #0]
    5a20:	233f      	movs	r3, #63	; 0x3f
    5a22:	4013      	ands	r3, r2
    5a24:	22a8      	movs	r2, #168	; 0xa8
    5a26:	508b      	str	r3, [r1, r2]
		standard_receive_index++;
    5a28:	6823      	ldr	r3, [r4, #0]
    5a2a:	3301      	adds	r3, #1
    5a2c:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
    5a2e:	6823      	ldr	r3, [r4, #0]
    5a30:	2b10      	cmp	r3, #16
    5a32:	d004      	beq.n	5a3e <CAN0_Handler+0x20a>
		g_waitFlag++;
    5a34:	4a1b      	ldr	r2, [pc, #108]	; (5aa4 <CAN0_Handler+0x270>)
    5a36:	6813      	ldr	r3, [r2, #0]
    5a38:	3301      	adds	r3, #1
    5a3a:	6013      	str	r3, [r2, #0]
    5a3c:	e76e      	b.n	591c <CAN0_Handler+0xe8>
			standard_receive_index = 0;
    5a3e:	2200      	movs	r2, #0
    5a40:	4b1c      	ldr	r3, [pc, #112]	; (5ab4 <CAN0_Handler+0x280>)
    5a42:	601a      	str	r2, [r3, #0]
    5a44:	e7f6      	b.n	5a34 <CAN0_Handler+0x200>
	module_inst->hw->IR.reg = source;
    5a46:	4d0f      	ldr	r5, [pc, #60]	; (5a84 <CAN0_Handler+0x250>)
    5a48:	682b      	ldr	r3, [r5, #0]
    5a4a:	2201      	movs	r2, #1
    5a4c:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
    5a4e:	4c19      	ldr	r4, [pc, #100]	; (5ab4 <CAN0_Handler+0x280>)
    5a50:	6822      	ldr	r2, [r4, #0]
    5a52:	4919      	ldr	r1, [pc, #100]	; (5ab8 <CAN0_Handler+0x284>)
    5a54:	0028      	movs	r0, r5
    5a56:	4b19      	ldr	r3, [pc, #100]	; (5abc <CAN0_Handler+0x288>)
    5a58:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
    5a5a:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    5a5c:	6829      	ldr	r1, [r5, #0]
    5a5e:	233f      	movs	r3, #63	; 0x3f
    5a60:	4013      	ands	r3, r2
    5a62:	22a8      	movs	r2, #168	; 0xa8
    5a64:	508b      	str	r3, [r1, r2]
		standard_receive_index++;
    5a66:	6823      	ldr	r3, [r4, #0]
    5a68:	3301      	adds	r3, #1
    5a6a:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
    5a6c:	6823      	ldr	r3, [r4, #0]
    5a6e:	2b10      	cmp	r3, #16
    5a70:	d004      	beq.n	5a7c <CAN0_Handler+0x248>
		g_received++;
    5a72:	4a13      	ldr	r2, [pc, #76]	; (5ac0 <CAN0_Handler+0x28c>)
    5a74:	6813      	ldr	r3, [r2, #0]
    5a76:	3301      	adds	r3, #1
    5a78:	6013      	str	r3, [r2, #0]
}
    5a7a:	e74f      	b.n	591c <CAN0_Handler+0xe8>
			standard_receive_index = 0;
    5a7c:	2200      	movs	r2, #0
    5a7e:	4b0d      	ldr	r3, [pc, #52]	; (5ab4 <CAN0_Handler+0x280>)
    5a80:	601a      	str	r2, [r3, #0]
    5a82:	e7f6      	b.n	5a72 <CAN0_Handler+0x23e>
    5a84:	200023dc 	.word	0x200023dc
    5a88:	00009ee8 	.word	0x00009ee8
    5a8c:	00006975 	.word	0x00006975
    5a90:	200023c8 	.word	0x200023c8
    5a94:	200024b0 	.word	0x200024b0
    5a98:	00001759 	.word	0x00001759
    5a9c:	200023cc 	.word	0x200023cc
    5aa0:	200023d0 	.word	0x200023d0
    5aa4:	20002430 	.word	0x20002430
    5aa8:	2000242c 	.word	0x2000242c
    5aac:	20002418 	.word	0x20002418
    5ab0:	20002420 	.word	0x20002420
    5ab4:	2000247c 	.word	0x2000247c
    5ab8:	20002434 	.word	0x20002434
    5abc:	000017b1 	.word	0x000017b1
    5ac0:	20002424 	.word	0x20002424

00005ac4 <SysTick_Handler>:
//uint32_t ul_tickcount = 0;

//! [setup]
void SysTick_Handler(void){
	
	ul_tickcount += 300;
    5ac4:	4a02      	ldr	r2, [pc, #8]	; (5ad0 <SysTick_Handler+0xc>)
    5ac6:	6813      	ldr	r3, [r2, #0]
    5ac8:	332d      	adds	r3, #45	; 0x2d
    5aca:	33ff      	adds	r3, #255	; 0xff
    5acc:	6013      	str	r3, [r2, #0]
}
    5ace:	4770      	bx	lr
    5ad0:	200023d8 	.word	0x200023d8

00005ad4 <main>:

#define TIMEVAL (ul_tickcount+(14400000UL-1-SysTick->VAL)/48000UL)

int main(void)
{
    5ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ad6:	46de      	mov	lr, fp
    5ad8:	4657      	mov	r7, sl
    5ada:	464e      	mov	r6, r9
    5adc:	4645      	mov	r5, r8
    5ade:	b5e0      	push	{r5, r6, r7, lr}
    5ae0:	b0f3      	sub	sp, #460	; 0x1cc
	//uint8_t key;

//! [setup_init]
	system_init();
    5ae2:	4bcb      	ldr	r3, [pc, #812]	; (5e10 <main+0x33c>)
    5ae4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5ae6:	ab0d      	add	r3, sp, #52	; 0x34
    5ae8:	2280      	movs	r2, #128	; 0x80
    5aea:	05d2      	lsls	r2, r2, #23
    5aec:	920d      	str	r2, [sp, #52]	; 0x34
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5aee:	2200      	movs	r2, #0
    5af0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    5af2:	21ff      	movs	r1, #255	; 0xff
    5af4:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    5af6:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5af8:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5afa:	2401      	movs	r4, #1
    5afc:	39d3      	subs	r1, #211	; 0xd3
    5afe:	545c      	strb	r4, [r3, r1]
	config->transmitter_enable = true;
    5b00:	3101      	adds	r1, #1
    5b02:	545c      	strb	r4, [r3, r1]
	config->clock_polarity_inverted = false;
    5b04:	3101      	adds	r1, #1
    5b06:	545a      	strb	r2, [r3, r1]
	config->use_external_clock = false;
    5b08:	3101      	adds	r1, #1
    5b0a:	545a      	strb	r2, [r3, r1]
	config->ext_clock_freq   = 0;
    5b0c:	631a      	str	r2, [r3, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    5b0e:	3105      	adds	r1, #5
    5b10:	545a      	strb	r2, [r3, r1]
	config->generator_source = GCLK_GENERATOR_0;
    5b12:	3101      	adds	r1, #1
    5b14:	545a      	strb	r2, [r3, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5b16:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5b18:	2100      	movs	r1, #0
    5b1a:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5b1c:	76d9      	strb	r1, [r3, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    5b1e:	61da      	str	r2, [r3, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    5b20:	841a      	strh	r2, [r3, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    5b22:	845a      	strh	r2, [r3, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    5b24:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    5b26:	3224      	adds	r2, #36	; 0x24
    5b28:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    5b2a:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    5b2c:	3a11      	subs	r2, #17
    5b2e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    5b30:	3213      	adds	r2, #19
    5b32:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    5b34:	3a01      	subs	r2, #1
    5b36:	5499      	strb	r1, [r3, r2]
	config_cdc.baudrate	 = 115200;
    5b38:	22e1      	movs	r2, #225	; 0xe1
    5b3a:	0252      	lsls	r2, r2, #9
    5b3c:	629a      	str	r2, [r3, #40]	; 0x28
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    5b3e:	22c4      	movs	r2, #196	; 0xc4
    5b40:	0392      	lsls	r2, r2, #14
    5b42:	60da      	str	r2, [r3, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5b44:	2201      	movs	r2, #1
    5b46:	4252      	negs	r2, r2
    5b48:	639a      	str	r2, [r3, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    5b4a:	63da      	str	r2, [r3, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    5b4c:	4ab1      	ldr	r2, [pc, #708]	; (5e14 <main+0x340>)
    5b4e:	641a      	str	r2, [r3, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5b50:	4ab1      	ldr	r2, [pc, #708]	; (5e18 <main+0x344>)
    5b52:	645a      	str	r2, [r3, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    5b54:	4db1      	ldr	r5, [pc, #708]	; (5e1c <main+0x348>)
    5b56:	4bb2      	ldr	r3, [pc, #712]	; (5e20 <main+0x34c>)
    5b58:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    5b5a:	4ab2      	ldr	r2, [pc, #712]	; (5e24 <main+0x350>)
    5b5c:	4bb2      	ldr	r3, [pc, #712]	; (5e28 <main+0x354>)
    5b5e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5b60:	4ab2      	ldr	r2, [pc, #712]	; (5e2c <main+0x358>)
    5b62:	4bb3      	ldr	r3, [pc, #716]	; (5e30 <main+0x35c>)
    5b64:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    5b66:	aa0d      	add	r2, sp, #52	; 0x34
    5b68:	49b2      	ldr	r1, [pc, #712]	; (5e34 <main+0x360>)
    5b6a:	0028      	movs	r0, r5
    5b6c:	4bb2      	ldr	r3, [pc, #712]	; (5e38 <main+0x364>)
    5b6e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    5b70:	4fb2      	ldr	r7, [pc, #712]	; (5e3c <main+0x368>)
    5b72:	683b      	ldr	r3, [r7, #0]
    5b74:	6898      	ldr	r0, [r3, #8]
    5b76:	2100      	movs	r1, #0
    5b78:	4eb1      	ldr	r6, [pc, #708]	; (5e40 <main+0x36c>)
    5b7a:	47b0      	blx	r6
	setbuf(stdin, NULL);
    5b7c:	683b      	ldr	r3, [r7, #0]
    5b7e:	6858      	ldr	r0, [r3, #4]
    5b80:	2100      	movs	r1, #0
    5b82:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5b84:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5b86:	0030      	movs	r0, r6
    5b88:	4bae      	ldr	r3, [pc, #696]	; (5e44 <main+0x370>)
    5b8a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5b8c:	231f      	movs	r3, #31
    5b8e:	4018      	ands	r0, r3
    5b90:	4084      	lsls	r4, r0
    5b92:	4bad      	ldr	r3, [pc, #692]	; (5e48 <main+0x374>)
    5b94:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5b96:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5b98:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5b9a:	2b00      	cmp	r3, #0
    5b9c:	d1fc      	bne.n	5b98 <main+0xc4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5b9e:	6833      	ldr	r3, [r6, #0]
    5ba0:	2202      	movs	r2, #2
    5ba2:	4313      	orrs	r3, r2
    5ba4:	6033      	str	r3, [r6, #0]
	configure_usart_cdc();
//! [setup_init]
	SysTick->CTRL = 0;					// Disable SysTick
    5ba6:	4aa9      	ldr	r2, [pc, #676]	; (5e4c <main+0x378>)
    5ba8:	2000      	movs	r0, #0
    5baa:	6010      	str	r0, [r2, #0]
	SysTick->LOAD = 14400000UL-1;			// Set reload register for 1mS interrupts
    5bac:	4ba8      	ldr	r3, [pc, #672]	; (5e50 <main+0x37c>)
    5bae:	6053      	str	r3, [r2, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5bb0:	4ca8      	ldr	r4, [pc, #672]	; (5e54 <main+0x380>)
    5bb2:	6a23      	ldr	r3, [r4, #32]
    5bb4:	021b      	lsls	r3, r3, #8
    5bb6:	0a1b      	lsrs	r3, r3, #8
    5bb8:	21c0      	movs	r1, #192	; 0xc0
    5bba:	0609      	lsls	r1, r1, #24
    5bbc:	430b      	orrs	r3, r1
    5bbe:	6223      	str	r3, [r4, #32]
	NVIC_SetPriority(SysTick_IRQn, 3);	// Set interrupt priority to least urgency
	SysTick->VAL = 0;					// Reset the SysTick counter value
    5bc0:	6090      	str	r0, [r2, #8]
	SysTick->CTRL = 0x00000007;			// Enable SysTick, Enable SysTick Exceptions, Use CPU Clock
    5bc2:	2307      	movs	r3, #7
    5bc4:	6013      	str	r3, [r2, #0]
    5bc6:	3339      	adds	r3, #57	; 0x39
    5bc8:	3b01      	subs	r3, #1
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    5bca:	2b00      	cmp	r3, #0
    5bcc:	d1fc      	bne.n	5bc8 <main+0xf4>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5bce:	ae0c      	add	r6, sp, #48	; 0x30
    5bd0:	2400      	movs	r4, #0
    5bd2:	7074      	strb	r4, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5bd4:	2501      	movs	r5, #1
    5bd6:	70b5      	strb	r5, [r6, #2]
	config->powersave    = false;
    5bd8:	70f4      	strb	r4, [r6, #3]
	pin_config.mux_position = CAN_TX_MUX_SETTING;
    5bda:	3306      	adds	r3, #6
    5bdc:	4698      	mov	r8, r3
    5bde:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
    5be0:	0031      	movs	r1, r6
    5be2:	2018      	movs	r0, #24
    5be4:	4f9c      	ldr	r7, [pc, #624]	; (5e58 <main+0x384>)
    5be6:	47b8      	blx	r7
	pin_config.mux_position = CAN_RX_MUX_SETTING;
    5be8:	4643      	mov	r3, r8
    5bea:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
    5bec:	a90c      	add	r1, sp, #48	; 0x30
    5bee:	2019      	movs	r0, #25
    5bf0:	47b8      	blx	r7
	config->clock_source = GCLK_GENERATOR_8;
    5bf2:	ab0d      	add	r3, sp, #52	; 0x34
    5bf4:	2208      	movs	r2, #8
    5bf6:	701a      	strb	r2, [r3, #0]
	config->run_in_standby = false;
    5bf8:	705c      	strb	r4, [r3, #1]
	config->watchdog_configuration = 0x00;
    5bfa:	709c      	strb	r4, [r3, #2]
	config->transmit_pause = true;
    5bfc:	70dd      	strb	r5, [r3, #3]
	config->edge_filtering = true;
    5bfe:	711d      	strb	r5, [r3, #4]
	config->protocol_exception_handling = true;
    5c00:	715d      	strb	r5, [r3, #5]
	config->automatic_retransmission = true;
    5c02:	719d      	strb	r5, [r3, #6]
	config->clock_stop_request = false;
    5c04:	71dc      	strb	r4, [r3, #7]
	config->clock_stop_acknowledge = false;
    5c06:	721c      	strb	r4, [r3, #8]
	config->timestamp_prescaler = 0;
    5c08:	725c      	strb	r4, [r3, #9]
	config->timeout_period = 0xFFFF;
    5c0a:	3a09      	subs	r2, #9
    5c0c:	815a      	strh	r2, [r3, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
    5c0e:	731c      	strb	r4, [r3, #12]
	config->timeout_enable = false;
    5c10:	735c      	strb	r4, [r3, #13]
	config->tdc_enable = false;
    5c12:	739c      	strb	r4, [r3, #14]
	config->delay_compensation_offset = 0;
    5c14:	73dc      	strb	r4, [r3, #15]
	config->delay_compensation_filter_window_length = 0;
    5c16:	741c      	strb	r4, [r3, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
    5c18:	3203      	adds	r2, #3
    5c1a:	745a      	strb	r2, [r3, #17]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
    5c1c:	749a      	strb	r2, [r3, #18]
	config->remote_frames_standard_reject = true;
    5c1e:	74dd      	strb	r5, [r3, #19]
	config->remote_frames_extended_reject = true;
    5c20:	751d      	strb	r5, [r3, #20]
	config->extended_id_mask = 0x1FFFFFFF;
    5c22:	4a8e      	ldr	r2, [pc, #568]	; (5e5c <main+0x388>)
    5c24:	619a      	str	r2, [r3, #24]
	config->rx_fifo_0_overwrite = true;
    5c26:	771d      	strb	r5, [r3, #28]
	config->rx_fifo_0_watermark = 0;
    5c28:	775c      	strb	r4, [r3, #29]
	config->rx_fifo_1_overwrite = true;
    5c2a:	779d      	strb	r5, [r3, #30]
	config->rx_fifo_1_watermark = 0;
    5c2c:	77dc      	strb	r4, [r3, #31]
	config->tx_queue_mode = false;
    5c2e:	2220      	movs	r2, #32
    5c30:	549c      	strb	r4, [r3, r2]
	config->tx_event_fifo_watermark = 0;
    5c32:	3201      	adds	r2, #1
    5c34:	549c      	strb	r4, [r3, r2]
	can_init(&can_instance, CAN_MODULE, &config_can);
    5c36:	4c8a      	ldr	r4, [pc, #552]	; (5e60 <main+0x38c>)
    5c38:	001a      	movs	r2, r3
    5c3a:	498a      	ldr	r1, [pc, #552]	; (5e64 <main+0x390>)
    5c3c:	0020      	movs	r0, r4
    5c3e:	4b8a      	ldr	r3, [pc, #552]	; (5e68 <main+0x394>)
    5c40:	4798      	blx	r3
	can_enable_fd_mode(&can_instance);
    5c42:	0020      	movs	r0, r4
    5c44:	4b89      	ldr	r3, [pc, #548]	; (5e6c <main+0x398>)
    5c46:	4798      	blx	r3
	can_start(&can_instance);
    5c48:	0020      	movs	r0, r4
    5c4a:	4b89      	ldr	r3, [pc, #548]	; (5e70 <main+0x39c>)
    5c4c:	4798      	blx	r3
    5c4e:	2280      	movs	r2, #128	; 0x80
    5c50:	0212      	lsls	r2, r2, #8
    5c52:	4b7d      	ldr	r3, [pc, #500]	; (5e48 <main+0x374>)
    5c54:	601a      	str	r2, [r3, #0]
	module_inst->hw->IE.reg |= source;
    5c56:	6822      	ldr	r2, [r4, #0]
    5c58:	6d51      	ldr	r1, [r2, #84]	; 0x54
    5c5a:	23c0      	movs	r3, #192	; 0xc0
    5c5c:	055b      	lsls	r3, r3, #21
    5c5e:	430b      	orrs	r3, r1
    5c60:	6553      	str	r3, [r2, #84]	; 0x54
	configure_can();
//! [configure_can]

//! [display_user_menu]
	//display_menu();
	printf("Starting.\r\n");
    5c62:	4884      	ldr	r0, [pc, #528]	; (5e74 <main+0x3a0>)
    5c64:	4b84      	ldr	r3, [pc, #528]	; (5e78 <main+0x3a4>)
    5c66:	4798      	blx	r3
uint8_t encrypted_response_hash[32];
uint8_t server_reply[32];
ECCRYPTO_STATUS Status;

//printf("Time for enrollment\r\n");
bool hardcoded = (bool)Enrollment(NODE_ID, secret_key, ServerPublicKey, ec,&can_instance);
    5c68:	9400      	str	r4, [sp, #0]
    5c6a:	ab4a      	add	r3, sp, #296	; 0x128
    5c6c:	aa52      	add	r2, sp, #328	; 0x148
    5c6e:	a96a      	add	r1, sp, #424	; 0x1a8
    5c70:	2001      	movs	r0, #1
    5c72:	4c82      	ldr	r4, [pc, #520]	; (5e7c <main+0x3a8>)
    5c74:	47a0      	blx	r4
    5c76:	9008      	str	r0, [sp, #32]

printf("Enrollment complete time: %d\r\n",TIMEVAL-startVal);
    5c78:	4b74      	ldr	r3, [pc, #464]	; (5e4c <main+0x378>)
    5c7a:	689b      	ldr	r3, [r3, #8]
    5c7c:	4a80      	ldr	r2, [pc, #512]	; (5e80 <main+0x3ac>)
    5c7e:	6814      	ldr	r4, [r2, #0]
    5c80:	4873      	ldr	r0, [pc, #460]	; (5e50 <main+0x37c>)
    5c82:	1ac0      	subs	r0, r0, r3
    5c84:	497f      	ldr	r1, [pc, #508]	; (5e84 <main+0x3b0>)
    5c86:	4b80      	ldr	r3, [pc, #512]	; (5e88 <main+0x3b4>)
    5c88:	4798      	blx	r3
    5c8a:	4b80      	ldr	r3, [pc, #512]	; (5e8c <main+0x3b8>)
    5c8c:	6819      	ldr	r1, [r3, #0]
    5c8e:	1a61      	subs	r1, r4, r1
    5c90:	1841      	adds	r1, r0, r1
    5c92:	487f      	ldr	r0, [pc, #508]	; (5e90 <main+0x3bc>)
    5c94:	4b7f      	ldr	r3, [pc, #508]	; (5e94 <main+0x3c0>)
    5c96:	4798      	blx	r3

//! [main_setup]
}

static void resetFlags(void) {
	g_bErrFlag = 0;
    5c98:	2300      	movs	r3, #0
    5c9a:	4698      	mov	r8, r3
	STAGE = AUTHENTICATION;
    5c9c:	2301      	movs	r3, #1
    5c9e:	466a      	mov	r2, sp
    5ca0:	2127      	movs	r1, #39	; 0x27
    5ca2:	1852      	adds	r2, r2, r1
    5ca4:	7013      	strb	r3, [r2, #0]
		crypto_aead_decrypt(message_in, &mlen, (void*)0, rx_element_fifo_0.data, 24, NULL, NULL, n, session_key);
    5ca6:	4b7c      	ldr	r3, [pc, #496]	; (5e98 <main+0x3c4>)
    5ca8:	3308      	adds	r3, #8
    5caa:	9307      	str	r3, [sp, #28]
    5cac:	e114      	b.n	5ed8 <main+0x404>
		printf("Generating Response\r\n");
    5cae:	487b      	ldr	r0, [pc, #492]	; (5e9c <main+0x3c8>)
    5cb0:	4b71      	ldr	r3, [pc, #452]	; (5e78 <main+0x3a4>)
    5cb2:	4798      	blx	r3
    5cb4:	e143      	b.n	5f3e <main+0x46a>
    5cb6:	0006      	movs	r6, r0
		printf("Failed Public Key Generation\r\n");
    5cb8:	4879      	ldr	r0, [pc, #484]	; (5ea0 <main+0x3cc>)
    5cba:	4b6f      	ldr	r3, [pc, #444]	; (5e78 <main+0x3a4>)
    5cbc:	4798      	blx	r3
		return Status;
    5cbe:	0030      	movs	r0, r6
}
    5cc0:	b073      	add	sp, #460	; 0x1cc
    5cc2:	bc3c      	pop	{r2, r3, r4, r5}
    5cc4:	4690      	mov	r8, r2
    5cc6:	4699      	mov	r9, r3
    5cc8:	46a2      	mov	sl, r4
    5cca:	46ab      	mov	fp, r5
    5ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cce:	0006      	movs	r6, r0
		printf("Failed Shared Secret Creation\r\n");
    5cd0:	4874      	ldr	r0, [pc, #464]	; (5ea4 <main+0x3d0>)
    5cd2:	4b69      	ldr	r3, [pc, #420]	; (5e78 <main+0x3a4>)
    5cd4:	4798      	blx	r3
		return Status;
    5cd6:	0030      	movs	r0, r6
    5cd8:	e7f2      	b.n	5cc0 <main+0x1ec>
    5cda:	2200      	movs	r2, #0
    5cdc:	e21c      	b.n	6118 <main+0x644>
		while(g_received == 0);
    5cde:	4a72      	ldr	r2, [pc, #456]	; (5ea8 <main+0x3d4>)
    5ce0:	6813      	ldr	r3, [r2, #0]
    5ce2:	2b00      	cmp	r3, #0
    5ce4:	d0fc      	beq.n	5ce0 <main+0x20c>
		uint32_t recTime = TIMEVAL;
    5ce6:	4b59      	ldr	r3, [pc, #356]	; (5e4c <main+0x378>)
    5ce8:	469b      	mov	fp, r3
    5cea:	689b      	ldr	r3, [r3, #8]
    5cec:	9306      	str	r3, [sp, #24]
    5cee:	4a64      	ldr	r2, [pc, #400]	; (5e80 <main+0x3ac>)
    5cf0:	4690      	mov	r8, r2
    5cf2:	6812      	ldr	r2, [r2, #0]
    5cf4:	4692      	mov	sl, r2
		g_received = 0;
    5cf6:	4b6c      	ldr	r3, [pc, #432]	; (5ea8 <main+0x3d4>)
    5cf8:	2200      	movs	r2, #0
    5cfa:	601a      	str	r2, [r3, #0]
		crypto_aead_decrypt(message_in, &mlen, (void*)0, rx_element_fifo_0.data, 24, NULL, NULL, n, session_key);
    5cfc:	ab44      	add	r3, sp, #272	; 0x110
    5cfe:	9304      	str	r3, [sp, #16]
    5d00:	4b6a      	ldr	r3, [pc, #424]	; (5eac <main+0x3d8>)
    5d02:	9303      	str	r3, [sp, #12]
    5d04:	9602      	str	r6, [sp, #8]
    5d06:	9601      	str	r6, [sp, #4]
    5d08:	2318      	movs	r3, #24
    5d0a:	9300      	str	r3, [sp, #0]
    5d0c:	9b07      	ldr	r3, [sp, #28]
    5d0e:	0032      	movs	r2, r6
    5d10:	a943      	add	r1, sp, #268	; 0x10c
    5d12:	a83d      	add	r0, sp, #244	; 0xf4
    5d14:	4d66      	ldr	r5, [pc, #408]	; (5eb0 <main+0x3dc>)
    5d16:	47a8      	blx	r5
		printf("Received: 0x%08x.%08x\r\n",*((uint32_t *)&message_in[4]),*((uint32_t *)message_in));
    5d18:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    5d1a:	993e      	ldr	r1, [sp, #248]	; 0xf8
    5d1c:	4865      	ldr	r0, [pc, #404]	; (5eb4 <main+0x3e0>)
    5d1e:	4d5d      	ldr	r5, [pc, #372]	; (5e94 <main+0x3c0>)
    5d20:	46a9      	mov	r9, r5
    5d22:	47a8      	blx	r5
		*((uint32_t *)message_in) += 1;
    5d24:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    5d26:	1c53      	adds	r3, r2, #1
    5d28:	933d      	str	r3, [sp, #244]	; 0xf4
		memmove(message_out,message_in,16);
    5d2a:	ab37      	add	r3, sp, #220	; 0xdc
    5d2c:	ad3d      	add	r5, sp, #244	; 0xf4
    5d2e:	cd07      	ldmia	r5!, {r0, r1, r2}
    5d30:	c307      	stmia	r3!, {r0, r1, r2}
    5d32:	6829      	ldr	r1, [r5, #0]
    5d34:	6019      	str	r1, [r3, #0]
		printf("///////////////\r\nTime to receive: %d\r\n",TIMEVAL-recTime);
    5d36:	465a      	mov	r2, fp
    5d38:	6890      	ldr	r0, [r2, #8]
    5d3a:	4642      	mov	r2, r8
    5d3c:	6812      	ldr	r2, [r2, #0]
    5d3e:	4690      	mov	r8, r2
    5d40:	4d43      	ldr	r5, [pc, #268]	; (5e50 <main+0x37c>)
    5d42:	1a28      	subs	r0, r5, r0
    5d44:	4a50      	ldr	r2, [pc, #320]	; (5e88 <main+0x3b4>)
    5d46:	4693      	mov	fp, r2
    5d48:	494e      	ldr	r1, [pc, #312]	; (5e84 <main+0x3b0>)
    5d4a:	4790      	blx	r2
    5d4c:	4642      	mov	r2, r8
    5d4e:	4651      	mov	r1, sl
    5d50:	1a51      	subs	r1, r2, r1
    5d52:	4680      	mov	r8, r0
    5d54:	4488      	add	r8, r1
		uint32_t recTime = TIMEVAL;
    5d56:	9b06      	ldr	r3, [sp, #24]
    5d58:	1ae8      	subs	r0, r5, r3
    5d5a:	494a      	ldr	r1, [pc, #296]	; (5e84 <main+0x3b0>)
    5d5c:	47d8      	blx	fp
		printf("///////////////\r\nTime to receive: %d\r\n",TIMEVAL-recTime);
    5d5e:	4643      	mov	r3, r8
    5d60:	1a19      	subs	r1, r3, r0
    5d62:	4855      	ldr	r0, [pc, #340]	; (5eb8 <main+0x3e4>)
    5d64:	47c8      	blx	r9
		if ((i<TOTAL_SENDS-1) || (NODE_ID != 1)) {
    5d66:	2f08      	cmp	r7, #8
    5d68:	dc40      	bgt.n	5dec <main+0x318>
			timeOut = TIMEVAL;	
    5d6a:	4b38      	ldr	r3, [pc, #224]	; (5e4c <main+0x378>)
    5d6c:	689b      	ldr	r3, [r3, #8]
    5d6e:	4a44      	ldr	r2, [pc, #272]	; (5e80 <main+0x3ac>)
    5d70:	6815      	ldr	r5, [r2, #0]
    5d72:	4837      	ldr	r0, [pc, #220]	; (5e50 <main+0x37c>)
    5d74:	1ac0      	subs	r0, r0, r3
    5d76:	4943      	ldr	r1, [pc, #268]	; (5e84 <main+0x3b0>)
    5d78:	4b43      	ldr	r3, [pc, #268]	; (5e88 <main+0x3b4>)
    5d7a:	4798      	blx	r3
    5d7c:	1940      	adds	r0, r0, r5
    5d7e:	900c      	str	r0, [sp, #48]	; 0x30
			crypto_aead_encrypt(tx_element.data, &clen, message_out, 16, NULL, NULL, NULL, n, session_key);
    5d80:	ab44      	add	r3, sp, #272	; 0x110
    5d82:	9304      	str	r3, [sp, #16]
    5d84:	4b49      	ldr	r3, [pc, #292]	; (5eac <main+0x3d8>)
    5d86:	9303      	str	r3, [sp, #12]
    5d88:	9602      	str	r6, [sp, #8]
    5d8a:	9601      	str	r6, [sp, #4]
    5d8c:	9600      	str	r6, [sp, #0]
    5d8e:	2310      	movs	r3, #16
    5d90:	aa37      	add	r2, sp, #220	; 0xdc
    5d92:	a90b      	add	r1, sp, #44	; 0x2c
    5d94:	a80f      	add	r0, sp, #60	; 0x3c
    5d96:	4d49      	ldr	r5, [pc, #292]	; (5ebc <main+0x3e8>)
    5d98:	47a8      	blx	r5
			can_set_tx_buffer_element(&can_instance, &tx_element,
    5d9a:	4d31      	ldr	r5, [pc, #196]	; (5e60 <main+0x38c>)
    5d9c:	2205      	movs	r2, #5
    5d9e:	a90d      	add	r1, sp, #52	; 0x34
    5da0:	0028      	movs	r0, r5
    5da2:	4b47      	ldr	r3, [pc, #284]	; (5ec0 <main+0x3ec>)
    5da4:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    5da6:	682a      	ldr	r2, [r5, #0]
    5da8:	6993      	ldr	r3, [r2, #24]
    5daa:	079b      	lsls	r3, r3, #30
    5dac:	d402      	bmi.n	5db4 <main+0x2e0>
	module_inst->hw->TXBAR.reg = trig_mask;
    5dae:	2120      	movs	r1, #32
    5db0:	23d0      	movs	r3, #208	; 0xd0
    5db2:	50d1      	str	r1, [r2, r3]
			while(!(can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX)));
    5db4:	2120      	movs	r1, #32
	return module_inst->hw->TXBTO.reg;
    5db6:	5913      	ldr	r3, [r2, r4]
    5db8:	4219      	tst	r1, r3
    5dba:	d0fc      	beq.n	5db6 <main+0x2e2>
			g_sent = 0;
    5dbc:	4b41      	ldr	r3, [pc, #260]	; (5ec4 <main+0x3f0>)
    5dbe:	2200      	movs	r2, #0
    5dc0:	601a      	str	r2, [r3, #0]
			g_waitFlag++;
    5dc2:	4a41      	ldr	r2, [pc, #260]	; (5ec8 <main+0x3f4>)
    5dc4:	6813      	ldr	r3, [r2, #0]
    5dc6:	3301      	adds	r3, #1
    5dc8:	6013      	str	r3, [r2, #0]
			printf("///////////////\r\nTime to send: %d\r\n",TIMEVAL-timeOut);
    5dca:	4b20      	ldr	r3, [pc, #128]	; (5e4c <main+0x378>)
    5dcc:	689b      	ldr	r3, [r3, #8]
    5dce:	4a2c      	ldr	r2, [pc, #176]	; (5e80 <main+0x3ac>)
    5dd0:	6815      	ldr	r5, [r2, #0]
    5dd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5dd4:	4690      	mov	r8, r2
    5dd6:	481e      	ldr	r0, [pc, #120]	; (5e50 <main+0x37c>)
    5dd8:	1ac0      	subs	r0, r0, r3
    5dda:	492a      	ldr	r1, [pc, #168]	; (5e84 <main+0x3b0>)
    5ddc:	4b2a      	ldr	r3, [pc, #168]	; (5e88 <main+0x3b4>)
    5dde:	4798      	blx	r3
    5de0:	4643      	mov	r3, r8
    5de2:	1ae9      	subs	r1, r5, r3
    5de4:	1841      	adds	r1, r0, r1
    5de6:	4839      	ldr	r0, [pc, #228]	; (5ecc <main+0x3f8>)
    5de8:	4b2a      	ldr	r3, [pc, #168]	; (5e94 <main+0x3c0>)
    5dea:	4798      	blx	r3
	for (int i = 0; i < TOTAL_SENDS; i++) {
    5dec:	3701      	adds	r7, #1
    5dee:	2f0a      	cmp	r7, #10
    5df0:	d06e      	beq.n	5ed0 <main+0x3fc>
    5df2:	4b1b      	ldr	r3, [pc, #108]	; (5e60 <main+0x38c>)
    5df4:	6818      	ldr	r0, [r3, #0]
		while(g_sent != 0) {
    5df6:	4a33      	ldr	r2, [pc, #204]	; (5ec4 <main+0x3f0>)
			if ((can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX))) {
    5df8:	2120      	movs	r1, #32
		while(g_sent != 0) {
    5dfa:	6813      	ldr	r3, [r2, #0]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d100      	bne.n	5e02 <main+0x32e>
    5e00:	e76d      	b.n	5cde <main+0x20a>
    5e02:	5903      	ldr	r3, [r0, r4]
			if ((can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX))) {
    5e04:	4219      	tst	r1, r3
    5e06:	d0f8      	beq.n	5dfa <main+0x326>
				g_sent = 0;
    5e08:	4b2e      	ldr	r3, [pc, #184]	; (5ec4 <main+0x3f0>)
    5e0a:	2500      	movs	r5, #0
    5e0c:	601d      	str	r5, [r3, #0]
    5e0e:	e7f4      	b.n	5dfa <main+0x326>
    5e10:	00002979 	.word	0x00002979
    5e14:	002a0003 	.word	0x002a0003
    5e18:	002b0003 	.word	0x002b0003
    5e1c:	200023e0 	.word	0x200023e0
    5e20:	200024ac 	.word	0x200024ac
    5e24:	0000581d 	.word	0x0000581d
    5e28:	200024a8 	.word	0x200024a8
    5e2c:	000057f1 	.word	0x000057f1
    5e30:	200024a4 	.word	0x200024a4
    5e34:	42001400 	.word	0x42001400
    5e38:	00001d01 	.word	0x00001d01
    5e3c:	20000114 	.word	0x20000114
    5e40:	000069ad 	.word	0x000069ad
    5e44:	00001c71 	.word	0x00001c71
    5e48:	e000e100 	.word	0xe000e100
    5e4c:	e000e010 	.word	0xe000e010
    5e50:	00dbb9ff 	.word	0x00dbb9ff
    5e54:	e000ed00 	.word	0xe000ed00
    5e58:	00002949 	.word	0x00002949
    5e5c:	1fffffff 	.word	0x1fffffff
    5e60:	200023dc 	.word	0x200023dc
    5e64:	42001c00 	.word	0x42001c00
    5e68:	000013cd 	.word	0x000013cd
    5e6c:	000016e7 	.word	0x000016e7
    5e70:	000016d1 	.word	0x000016d1
    5e74:	00009f2c 	.word	0x00009f2c
    5e78:	00006975 	.word	0x00006975
    5e7c:	00002b01 	.word	0x00002b01
    5e80:	200023d8 	.word	0x200023d8
    5e84:	0000bb80 	.word	0x0000bb80
    5e88:	0000634d 	.word	0x0000634d
    5e8c:	200036f0 	.word	0x200036f0
    5e90:	00009f38 	.word	0x00009f38
    5e94:	00006881 	.word	0x00006881
    5e98:	20002434 	.word	0x20002434
    5e9c:	00009f58 	.word	0x00009f58
    5ea0:	00009f70 	.word	0x00009f70
    5ea4:	00009f90 	.word	0x00009f90
    5ea8:	20002424 	.word	0x20002424
    5eac:	20000004 	.word	0x20000004
    5eb0:	000009b9 	.word	0x000009b9
    5eb4:	0000a0b0 	.word	0x0000a0b0
    5eb8:	0000a0c8 	.word	0x0000a0c8
    5ebc:	0000011d 	.word	0x0000011d
    5ec0:	00001809 	.word	0x00001809
    5ec4:	200023d4 	.word	0x200023d4
    5ec8:	20002430 	.word	0x20002430
    5ecc:	0000a0f0 	.word	0x0000a0f0
    5ed0:	46b0      	mov	r8, r6
	printf("Normal Operation Completed!\r\n");
    5ed2:	48ea      	ldr	r0, [pc, #936]	; (627c <main+0x7a8>)
    5ed4:	4bea      	ldr	r3, [pc, #936]	; (6280 <main+0x7ac>)
    5ed6:	4798      	blx	r3
	startVal = TIMEVAL;
    5ed8:	4bea      	ldr	r3, [pc, #936]	; (6284 <main+0x7b0>)
    5eda:	689b      	ldr	r3, [r3, #8]
    5edc:	4aea      	ldr	r2, [pc, #936]	; (6288 <main+0x7b4>)
    5ede:	6814      	ldr	r4, [r2, #0]
    5ee0:	48ea      	ldr	r0, [pc, #936]	; (628c <main+0x7b8>)
    5ee2:	1ac0      	subs	r0, r0, r3
    5ee4:	49ea      	ldr	r1, [pc, #936]	; (6290 <main+0x7bc>)
    5ee6:	4beb      	ldr	r3, [pc, #940]	; (6294 <main+0x7c0>)
    5ee8:	4798      	blx	r3
    5eea:	1900      	adds	r0, r0, r4
    5eec:	4bea      	ldr	r3, [pc, #936]	; (6298 <main+0x7c4>)
    5eee:	6018      	str	r0, [r3, #0]
	g_bErrFlag = 0;
    5ef0:	4bea      	ldr	r3, [pc, #936]	; (629c <main+0x7c8>)
    5ef2:	4642      	mov	r2, r8
    5ef4:	601a      	str	r2, [r3, #0]
	g_recComplete = 0;
    5ef6:	4bea      	ldr	r3, [pc, #936]	; (62a0 <main+0x7cc>)
    5ef8:	601a      	str	r2, [r3, #0]
	g_resSend = 0;
    5efa:	4bea      	ldr	r3, [pc, #936]	; (62a4 <main+0x7d0>)
    5efc:	601a      	str	r2, [r3, #0]
	g_sharedReceived = 0;
    5efe:	4bea      	ldr	r3, [pc, #936]	; (62a8 <main+0x7d4>)
    5f00:	601a      	str	r2, [r3, #0]
	g_normalOp = 0;
    5f02:	4bea      	ldr	r3, [pc, #936]	; (62ac <main+0x7d8>)
    5f04:	601a      	str	r2, [r3, #0]
	g_waitFlag = 0;
    5f06:	4bea      	ldr	r3, [pc, #936]	; (62b0 <main+0x7dc>)
    5f08:	601a      	str	r2, [r3, #0]
	g_normalFlag = 0;
    5f0a:	4bea      	ldr	r3, [pc, #936]	; (62b4 <main+0x7e0>)
    5f0c:	601a      	str	r2, [r3, #0]
	g_received = 0;
    5f0e:	4bea      	ldr	r3, [pc, #936]	; (62b8 <main+0x7e4>)
    5f10:	601a      	str	r2, [r3, #0]
	g_sent = 0;
    5f12:	4bea      	ldr	r3, [pc, #936]	; (62bc <main+0x7e8>)
    5f14:	601a      	str	r2, [r3, #0]
	STAGE = AUTHENTICATION;
    5f16:	4bea      	ldr	r3, [pc, #936]	; (62c0 <main+0x7ec>)
    5f18:	466a      	mov	r2, sp
    5f1a:	2127      	movs	r1, #39	; 0x27
    5f1c:	1852      	adds	r2, r2, r1
    5f1e:	7812      	ldrb	r2, [r2, #0]
    5f20:	701a      	strb	r2, [r3, #0]
	memset(secret_key+16,0,16);
    5f22:	2210      	movs	r2, #16
    5f24:	2100      	movs	r1, #0
    5f26:	a86e      	add	r0, sp, #440	; 0x1b8
    5f28:	4be6      	ldr	r3, [pc, #920]	; (62c4 <main+0x7f0>)
    5f2a:	4798      	blx	r3
	if(hardcoded) {
    5f2c:	9b08      	ldr	r3, [sp, #32]
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d100      	bne.n	5f34 <main+0x460>
    5f32:	e6bc      	b.n	5cae <main+0x1da>
		memset(response,NODE_ID,16);
    5f34:	2210      	movs	r2, #16
    5f36:	2101      	movs	r1, #1
    5f38:	a84e      	add	r0, sp, #312	; 0x138
    5f3a:	4be2      	ldr	r3, [pc, #904]	; (62c4 <main+0x7f0>)
    5f3c:	4798      	blx	r3
	uint32_t tempVal = TIMEVAL;
    5f3e:	4bd1      	ldr	r3, [pc, #836]	; (6284 <main+0x7b0>)
    5f40:	689b      	ldr	r3, [r3, #8]
    5f42:	48d2      	ldr	r0, [pc, #840]	; (628c <main+0x7b8>)
    5f44:	1ac0      	subs	r0, r0, r3
    5f46:	49d2      	ldr	r1, [pc, #840]	; (6290 <main+0x7bc>)
    5f48:	4bd2      	ldr	r3, [pc, #840]	; (6294 <main+0x7c0>)
    5f4a:	4798      	blx	r3
    5f4c:	4682      	mov	sl, r0
    5f4e:	4bce      	ldr	r3, [pc, #824]	; (6288 <main+0x7b4>)
    5f50:	681b      	ldr	r3, [r3, #0]
    5f52:	4699      	mov	r9, r3
	memmove(secret_key,response,16);
    5f54:	2210      	movs	r2, #16
    5f56:	a94e      	add	r1, sp, #312	; 0x138
    5f58:	a86a      	add	r0, sp, #424	; 0x1a8
    5f5a:	4bdb      	ldr	r3, [pc, #876]	; (62c8 <main+0x7f4>)
    5f5c:	4798      	blx	r3
	photon128(response,16,response_hash);
    5f5e:	aa33      	add	r2, sp, #204	; 0xcc
    5f60:	2110      	movs	r1, #16
    5f62:	a84e      	add	r0, sp, #312	; 0x138
    5f64:	4bd9      	ldr	r3, [pc, #868]	; (62cc <main+0x7f8>)
    5f66:	4798      	blx	r3
	Status = CompressedKeyGeneration(secret_key,public_key);
    5f68:	a962      	add	r1, sp, #392	; 0x188
    5f6a:	a86a      	add	r0, sp, #424	; 0x1a8
    5f6c:	4bd8      	ldr	r3, [pc, #864]	; (62d0 <main+0x7fc>)
    5f6e:	4798      	blx	r3
	if (Status != ECCRYPTO_SUCCESS) {
    5f70:	2801      	cmp	r0, #1
    5f72:	d000      	beq.n	5f76 <main+0x4a2>
    5f74:	e69f      	b.n	5cb6 <main+0x1e2>
	Status = CompressedSecretAgreement(secret_key,ServerPublicKey,shared_secret);
    5f76:	aa5a      	add	r2, sp, #360	; 0x168
    5f78:	a952      	add	r1, sp, #328	; 0x148
    5f7a:	a86a      	add	r0, sp, #424	; 0x1a8
    5f7c:	4bd5      	ldr	r3, [pc, #852]	; (62d4 <main+0x800>)
    5f7e:	4798      	blx	r3
	if (Status != ECCRYPTO_SUCCESS) {
    5f80:	2801      	cmp	r0, #1
    5f82:	d000      	beq.n	5f86 <main+0x4b2>
    5f84:	e6a3      	b.n	5cce <main+0x1fa>
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    5f86:	4fd4      	ldr	r7, [pc, #848]	; (62d8 <main+0x804>)
    5f88:	970a      	str	r7, [sp, #40]	; 0x28
	sd_filter.S0.bit.SFID1 = 0x0;
    5f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5f8c:	4ed3      	ldr	r6, [pc, #844]	; (62dc <main+0x808>)
    5f8e:	4033      	ands	r3, r6
    5f90:	930a      	str	r3, [sp, #40]	; 0x28
	sd_filter.S0.bit.SFID2 = 0x0;
    5f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5f94:	0adb      	lsrs	r3, r3, #11
    5f96:	02db      	lsls	r3, r3, #11
    5f98:	930a      	str	r3, [sp, #40]	; 0x28
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    5f9a:	4dd1      	ldr	r5, [pc, #836]	; (62e0 <main+0x80c>)
    5f9c:	2202      	movs	r2, #2
    5f9e:	a90a      	add	r1, sp, #40	; 0x28
    5fa0:	0028      	movs	r0, r5
    5fa2:	4cd0      	ldr	r4, [pc, #832]	; (62e4 <main+0x810>)
    5fa4:	47a0      	blx	r4
	module_inst->hw->IE.reg |= source;
    5fa6:	682a      	ldr	r2, [r5, #0]
    5fa8:	6d53      	ldr	r3, [r2, #84]	; 0x54
    5faa:	2101      	movs	r1, #1
    5fac:	430b      	orrs	r3, r1
    5fae:	6553      	str	r3, [r2, #84]	; 0x54
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    5fb0:	970a      	str	r7, [sp, #40]	; 0x28
	sd_filter.S0.bit.SFID1 = 0x301;
    5fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5fb4:	4033      	ands	r3, r6
    5fb6:	4ecc      	ldr	r6, [pc, #816]	; (62e8 <main+0x814>)
    5fb8:	431e      	orrs	r6, r3
    5fba:	960a      	str	r6, [sp, #40]	; 0x28
	sd_filter.S0.bit.SFID2 = CAN_FILTER_MONITOR;
    5fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5fbe:	0adb      	lsrs	r3, r3, #11
    5fc0:	02db      	lsls	r3, r3, #11
    5fc2:	2201      	movs	r2, #1
    5fc4:	4313      	orrs	r3, r2
    5fc6:	930a      	str	r3, [sp, #40]	; 0x28
	sd_filter.S0.bit.SFEC =
    5fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5fca:	23e0      	movs	r3, #224	; 0xe0
    5fcc:	059b      	lsls	r3, r3, #22
    5fce:	4313      	orrs	r3, r2
    5fd0:	930a      	str	r3, [sp, #40]	; 0x28
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    5fd2:	2201      	movs	r2, #1
    5fd4:	a90a      	add	r1, sp, #40	; 0x28
    5fd6:	0028      	movs	r0, r5
    5fd8:	47a0      	blx	r4
	module_inst->hw->IE.reg |= source;
    5fda:	682a      	ldr	r2, [r5, #0]
    5fdc:	6d51      	ldr	r1, [r2, #84]	; 0x54
    5fde:	2380      	movs	r3, #128	; 0x80
    5fe0:	031b      	lsls	r3, r3, #12
    5fe2:	430b      	orrs	r3, r1
    5fe4:	6553      	str	r3, [r2, #84]	; 0x54
	photon128(shared_secret,32,shared_hash);
    5fe6:	af2f      	add	r7, sp, #188	; 0xbc
    5fe8:	003a      	movs	r2, r7
    5fea:	2120      	movs	r1, #32
    5fec:	a85a      	add	r0, sp, #360	; 0x168
    5fee:	4bb7      	ldr	r3, [pc, #732]	; (62cc <main+0x7f8>)
    5ff0:	4798      	blx	r3
	unsigned long clen = 16;
    5ff2:	2310      	movs	r3, #16
    5ff4:	930b      	str	r3, [sp, #44]	; 0x2c
	printf("Hash Encrypt: Input to tx_element size: %04x\r\n",clen);
    5ff6:	2110      	movs	r1, #16
    5ff8:	48bc      	ldr	r0, [pc, #752]	; (62ec <main+0x818>)
    5ffa:	4ebd      	ldr	r6, [pc, #756]	; (62f0 <main+0x81c>)
    5ffc:	47b0      	blx	r6
	crypto_aead_encrypt(encrypted_response_hash, &clen, response_hash, 16, NULL, NULL, NULL, n, shared_hash);
    5ffe:	ac27      	add	r4, sp, #156	; 0x9c
    6000:	9704      	str	r7, [sp, #16]
    6002:	4bbc      	ldr	r3, [pc, #752]	; (62f4 <main+0x820>)
    6004:	9303      	str	r3, [sp, #12]
    6006:	4643      	mov	r3, r8
    6008:	9302      	str	r3, [sp, #8]
    600a:	9301      	str	r3, [sp, #4]
    600c:	9300      	str	r3, [sp, #0]
    600e:	2310      	movs	r3, #16
    6010:	aa33      	add	r2, sp, #204	; 0xcc
    6012:	a90b      	add	r1, sp, #44	; 0x2c
    6014:	0020      	movs	r0, r4
    6016:	4fb8      	ldr	r7, [pc, #736]	; (62f8 <main+0x824>)
    6018:	47b8      	blx	r7
	printf("Hash Encrypt: Output to tx_element size: %04x\r\n",clen);
    601a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    601c:	48b7      	ldr	r0, [pc, #732]	; (62fc <main+0x828>)
    601e:	47b0      	blx	r6
	printf("TEMP TIME: %d\r\n",TIMEVAL-tempVal);
    6020:	4b98      	ldr	r3, [pc, #608]	; (6284 <main+0x7b0>)
    6022:	689b      	ldr	r3, [r3, #8]
    6024:	4a98      	ldr	r2, [pc, #608]	; (6288 <main+0x7b4>)
    6026:	6817      	ldr	r7, [r2, #0]
    6028:	4898      	ldr	r0, [pc, #608]	; (628c <main+0x7b8>)
    602a:	1ac0      	subs	r0, r0, r3
    602c:	4998      	ldr	r1, [pc, #608]	; (6290 <main+0x7bc>)
    602e:	4b99      	ldr	r3, [pc, #612]	; (6294 <main+0x7c0>)
    6030:	4798      	blx	r3
    6032:	464b      	mov	r3, r9
    6034:	1af9      	subs	r1, r7, r3
    6036:	1841      	adds	r1, r0, r1
    6038:	4653      	mov	r3, sl
    603a:	1ac9      	subs	r1, r1, r3
    603c:	48b0      	ldr	r0, [pc, #704]	; (6300 <main+0x82c>)
    603e:	47b0      	blx	r6
	printf("My Turn!\r\n");
    6040:	48b0      	ldr	r0, [pc, #704]	; (6304 <main+0x830>)
    6042:	4b8f      	ldr	r3, [pc, #572]	; (6280 <main+0x7ac>)
    6044:	4798      	blx	r3
	tx_element->T0.reg = 0;
    6046:	2300      	movs	r3, #0
    6048:	930d      	str	r3, [sp, #52]	; 0x34
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    604a:	2388      	movs	r3, #136	; 0x88
    604c:	041b      	lsls	r3, r3, #16
    604e:	930e      	str	r3, [sp, #56]	; 0x38
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x100+NODE_ID);
    6050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6052:	4bad      	ldr	r3, [pc, #692]	; (6308 <main+0x834>)
    6054:	4313      	orrs	r3, r2
    6056:	930d      	str	r3, [sp, #52]	; 0x34
	tx_element.T1.reg = CAN_TX_ELEMENT_T1_FDF | CAN_TX_ELEMENT_T1_BRS |
    6058:	23e8      	movs	r3, #232	; 0xe8
    605a:	039b      	lsls	r3, r3, #14
    605c:	930e      	str	r3, [sp, #56]	; 0x38
	memcpy(tx_element.data,encrypted_response_hash,16);
    605e:	ab0f      	add	r3, sp, #60	; 0x3c
    6060:	cc07      	ldmia	r4!, {r0, r1, r2}
    6062:	c307      	stmia	r3!, {r0, r1, r2}
    6064:	001a      	movs	r2, r3
    6066:	6823      	ldr	r3, [r4, #0]
    6068:	6013      	str	r3, [r2, #0]
	can_set_tx_buffer_element(&can_instance, &tx_element,
    606a:	2205      	movs	r2, #5
    606c:	a90d      	add	r1, sp, #52	; 0x34
    606e:	0028      	movs	r0, r5
    6070:	4ba6      	ldr	r3, [pc, #664]	; (630c <main+0x838>)
    6072:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    6074:	682a      	ldr	r2, [r5, #0]
    6076:	6993      	ldr	r3, [r2, #24]
    6078:	079b      	lsls	r3, r3, #30
    607a:	d402      	bmi.n	6082 <main+0x5ae>
	module_inst->hw->TXBAR.reg = trig_mask;
    607c:	2120      	movs	r1, #32
    607e:	23d0      	movs	r3, #208	; 0xd0
    6080:	50d1      	str	r1, [r2, r3]
	return module_inst->hw->TXBTO.reg;
    6082:	20d8      	movs	r0, #216	; 0xd8
	while(!(can_tx_get_transmission_status(&can_instance) & (1 << CAN_TX_FILTER_BUFFER_INDEX)));
    6084:	2120      	movs	r1, #32
    6086:	5813      	ldr	r3, [r2, r0]
    6088:	4219      	tst	r1, r3
    608a:	d0fc      	beq.n	6086 <main+0x5b2>
	g_waitFlag += 1;
    608c:	4a88      	ldr	r2, [pc, #544]	; (62b0 <main+0x7dc>)
    608e:	6813      	ldr	r3, [r2, #0]
    6090:	3301      	adds	r3, #1
    6092:	6013      	str	r3, [r2, #0]
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    6094:	4b90      	ldr	r3, [pc, #576]	; (62d8 <main+0x804>)
    6096:	930a      	str	r3, [sp, #40]	; 0x28
	sd_filter.S0.bit.SFID1 = 0x200 + NODE_ID;
    6098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    609a:	4a90      	ldr	r2, [pc, #576]	; (62dc <main+0x808>)
    609c:	401a      	ands	r2, r3
    609e:	4b9c      	ldr	r3, [pc, #624]	; (6310 <main+0x83c>)
    60a0:	4313      	orrs	r3, r2
    60a2:	930a      	str	r3, [sp, #40]	; 0x28
	sd_filter.S0.bit.SFID2 = CAN_FILTER_MSG2;
    60a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    60a6:	0adb      	lsrs	r3, r3, #11
    60a8:	02db      	lsls	r3, r3, #11
    60aa:	2204      	movs	r2, #4
    60ac:	4313      	orrs	r3, r2
    60ae:	930a      	str	r3, [sp, #40]	; 0x28
	sd_filter.S0.bit.SFEC =
    60b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    60b2:	23e0      	movs	r3, #224	; 0xe0
    60b4:	059b      	lsls	r3, r3, #22
    60b6:	4313      	orrs	r3, r2
    60b8:	930a      	str	r3, [sp, #40]	; 0x28
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    60ba:	2204      	movs	r2, #4
    60bc:	a90a      	add	r1, sp, #40	; 0x28
    60be:	4888      	ldr	r0, [pc, #544]	; (62e0 <main+0x80c>)
    60c0:	4b88      	ldr	r3, [pc, #544]	; (62e4 <main+0x810>)
    60c2:	4798      	blx	r3
	while(g_waitFlag < (NODE_TOTAL));
    60c4:	4a7a      	ldr	r2, [pc, #488]	; (62b0 <main+0x7dc>)
    60c6:	6813      	ldr	r3, [r2, #0]
    60c8:	2b01      	cmp	r3, #1
    60ca:	d9fc      	bls.n	60c6 <main+0x5f2>
	printf("After \"Waiting for others\"\r\n");
    60cc:	4891      	ldr	r0, [pc, #580]	; (6314 <main+0x840>)
    60ce:	4b6c      	ldr	r3, [pc, #432]	; (6280 <main+0x7ac>)
    60d0:	4798      	blx	r3
	sd_filter.S0.bit.SFEC =
    60d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    60d4:	4a90      	ldr	r2, [pc, #576]	; (6318 <main+0x844>)
    60d6:	4013      	ands	r3, r2
    60d8:	930a      	str	r3, [sp, #40]	; 0x28
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    60da:	2202      	movs	r2, #2
    60dc:	a90a      	add	r1, sp, #40	; 0x28
    60de:	4880      	ldr	r0, [pc, #512]	; (62e0 <main+0x80c>)
    60e0:	4b80      	ldr	r3, [pc, #512]	; (62e4 <main+0x810>)
    60e2:	4798      	blx	r3
	while(g_sharedReceived==0);
    60e4:	4a70      	ldr	r2, [pc, #448]	; (62a8 <main+0x7d4>)
    60e6:	6813      	ldr	r3, [r2, #0]
    60e8:	2b00      	cmp	r3, #0
    60ea:	d0fc      	beq.n	60e6 <main+0x612>
    60ec:	4a8b      	ldr	r2, [pc, #556]	; (631c <main+0x848>)
    60ee:	4b8c      	ldr	r3, [pc, #560]	; (6320 <main+0x84c>)
    60f0:	5cd3      	ldrb	r3, [r2, r3]
    60f2:	2192      	movs	r1, #146	; 0x92
    60f4:	00c9      	lsls	r1, r1, #3
    60f6:	5c52      	ldrb	r2, [r2, r1]
    60f8:	429a      	cmp	r2, r3
    60fa:	d100      	bne.n	60fe <main+0x62a>
    60fc:	e5ed      	b.n	5cda <main+0x206>
	buff->last_read = (buff->last_read + 1) % MAX_BUFFS;
    60fe:	4887      	ldr	r0, [pc, #540]	; (631c <main+0x848>)
    6100:	1c5a      	adds	r2, r3, #1
    6102:	2103      	movs	r1, #3
    6104:	4011      	ands	r1, r2
    6106:	4a86      	ldr	r2, [pc, #536]	; (6320 <main+0x84c>)
    6108:	5481      	strb	r1, [r0, r2]
	return &(buff->buffers[last_element]);
    610a:	00da      	lsls	r2, r3, #3
    610c:	18d2      	adds	r2, r2, r3
    610e:	00d2      	lsls	r2, r2, #3
    6110:	4b84      	ldr	r3, [pc, #528]	; (6324 <main+0x850>)
    6112:	469c      	mov	ip, r3
    6114:	4462      	add	r2, ip
    6116:	1812      	adds	r2, r2, r0
	memcpy(server_reply,getNextBufferElement(&rx_element_buff[CAN_FILTER_MSG2])->data,24);
    6118:	ab1f      	add	r3, sp, #124	; 0x7c
    611a:	3208      	adds	r2, #8
    611c:	0019      	movs	r1, r3
    611e:	ca31      	ldmia	r2!, {r0, r4, r5}
    6120:	c131      	stmia	r1!, {r0, r4, r5}
    6122:	ca31      	ldmia	r2!, {r0, r4, r5}
    6124:	c131      	stmia	r1!, {r0, r4, r5}
	g_recComplete++;
    6126:	495e      	ldr	r1, [pc, #376]	; (62a0 <main+0x7cc>)
    6128:	680a      	ldr	r2, [r1, #0]
    612a:	3201      	adds	r2, #1
    612c:	600a      	str	r2, [r1, #0]
	crypto_aead_decrypt(initData, &mlen, (void*)0, server_reply, 24, NULL, NULL, n, shared_hash);
    612e:	aa2f      	add	r2, sp, #188	; 0xbc
    6130:	9204      	str	r2, [sp, #16]
    6132:	4a70      	ldr	r2, [pc, #448]	; (62f4 <main+0x820>)
    6134:	9203      	str	r2, [sp, #12]
    6136:	4642      	mov	r2, r8
    6138:	9202      	str	r2, [sp, #8]
    613a:	9201      	str	r2, [sp, #4]
    613c:	2218      	movs	r2, #24
    613e:	9200      	str	r2, [sp, #0]
    6140:	2200      	movs	r2, #0
    6142:	a943      	add	r1, sp, #268	; 0x10c
    6144:	a844      	add	r0, sp, #272	; 0x110
    6146:	4c78      	ldr	r4, [pc, #480]	; (6328 <main+0x854>)
    6148:	47a0      	blx	r4
	printf("Session key Decrypt: Output to message_in size: %i\r\n",mlen);
    614a:	9943      	ldr	r1, [sp, #268]	; 0x10c
    614c:	4877      	ldr	r0, [pc, #476]	; (632c <main+0x858>)
    614e:	4c68      	ldr	r4, [pc, #416]	; (62f0 <main+0x81c>)
    6150:	47a0      	blx	r4
	printf("SessionKey:");
    6152:	4877      	ldr	r0, [pc, #476]	; (6330 <main+0x85c>)
    6154:	47a0      	blx	r4
	for(int i = 0; i < 16; i++) {
    6156:	2600      	movs	r6, #0
		printf("%x ",session_key[i]);
    6158:	ad44      	add	r5, sp, #272	; 0x110
    615a:	4c76      	ldr	r4, [pc, #472]	; (6334 <main+0x860>)
    615c:	4f64      	ldr	r7, [pc, #400]	; (62f0 <main+0x81c>)
    615e:	5d71      	ldrb	r1, [r6, r5]
    6160:	0020      	movs	r0, r4
    6162:	47b8      	blx	r7
	for(int i = 0; i < 16; i++) {
    6164:	3601      	adds	r6, #1
    6166:	2e10      	cmp	r6, #16
    6168:	d1f9      	bne.n	615e <main+0x68a>
	printf("\r\n");
    616a:	4873      	ldr	r0, [pc, #460]	; (6338 <main+0x864>)
    616c:	4b44      	ldr	r3, [pc, #272]	; (6280 <main+0x7ac>)
    616e:	4798      	blx	r3
    6170:	4b59      	ldr	r3, [pc, #356]	; (62d8 <main+0x804>)
    6172:	930a      	str	r3, [sp, #40]	; 0x28
	sd_filter.S0.bit.SFID1 = 0x400 + NODE_ID;
    6174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6176:	4a59      	ldr	r2, [pc, #356]	; (62dc <main+0x808>)
    6178:	401a      	ands	r2, r3
    617a:	4b70      	ldr	r3, [pc, #448]	; (633c <main+0x868>)
    617c:	4313      	orrs	r3, r2
    617e:	930a      	str	r3, [sp, #40]	; 0x28
	sd_filter.S0.bit.SFID2 = 0x7F0;
    6180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6182:	0adb      	lsrs	r3, r3, #11
    6184:	02db      	lsls	r3, r3, #11
    6186:	22fe      	movs	r2, #254	; 0xfe
    6188:	00d2      	lsls	r2, r2, #3
    618a:	4313      	orrs	r3, r2
    618c:	930a      	str	r3, [sp, #40]	; 0x28
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    618e:	4c54      	ldr	r4, [pc, #336]	; (62e0 <main+0x80c>)
    6190:	2201      	movs	r2, #1
    6192:	a90a      	add	r1, sp, #40	; 0x28
    6194:	0020      	movs	r0, r4
    6196:	4b53      	ldr	r3, [pc, #332]	; (62e4 <main+0x810>)
    6198:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    619a:	6822      	ldr	r2, [r4, #0]
    619c:	6d53      	ldr	r3, [r2, #84]	; 0x54
    619e:	2101      	movs	r1, #1
    61a0:	430b      	orrs	r3, r1
    61a2:	6553      	str	r3, [r2, #84]	; 0x54
	while(g_normalFlag == 0);
    61a4:	4a43      	ldr	r2, [pc, #268]	; (62b4 <main+0x7e0>)
    61a6:	6813      	ldr	r3, [r2, #0]
    61a8:	2b00      	cmp	r3, #0
    61aa:	d0fc      	beq.n	61a6 <main+0x6d2>
	STAGE = NORMAL;
    61ac:	2602      	movs	r6, #2
    61ae:	4b44      	ldr	r3, [pc, #272]	; (62c0 <main+0x7ec>)
    61b0:	701e      	strb	r6, [r3, #0]
	sd_filter.S0.bit.SFEC =
    61b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    61b4:	4a58      	ldr	r2, [pc, #352]	; (6318 <main+0x844>)
    61b6:	4013      	ands	r3, r2
    61b8:	930a      	str	r3, [sp, #40]	; 0x28
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    61ba:	4d49      	ldr	r5, [pc, #292]	; (62e0 <main+0x80c>)
    61bc:	2204      	movs	r2, #4
    61be:	a90a      	add	r1, sp, #40	; 0x28
    61c0:	0028      	movs	r0, r5
    61c2:	4b48      	ldr	r3, [pc, #288]	; (62e4 <main+0x810>)
    61c4:	4798      	blx	r3
	tx_element->T0.reg = 0;
    61c6:	2300      	movs	r3, #0
    61c8:	930d      	str	r3, [sp, #52]	; 0x34
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    61ca:	2388      	movs	r3, #136	; 0x88
    61cc:	041b      	lsls	r3, r3, #16
    61ce:	930e      	str	r3, [sp, #56]	; 0x38
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(0x400+NODE_ID);
    61d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    61d2:	4b5b      	ldr	r3, [pc, #364]	; (6340 <main+0x86c>)
    61d4:	4313      	orrs	r3, r2
    61d6:	930d      	str	r3, [sp, #52]	; 0x34
	tx_element.T1.reg = CAN_TX_ELEMENT_T1_FDF | CAN_TX_ELEMENT_T1_BRS |
    61d8:	23f0      	movs	r3, #240	; 0xf0
    61da:	039b      	lsls	r3, r3, #14
    61dc:	930e      	str	r3, [sp, #56]	; 0x38
	memset(message_out,0,16);
    61de:	2210      	movs	r2, #16
    61e0:	2100      	movs	r1, #0
    61e2:	a837      	add	r0, sp, #220	; 0xdc
    61e4:	4b37      	ldr	r3, [pc, #220]	; (62c4 <main+0x7f0>)
    61e6:	4798      	blx	r3
	g_sent = 0;
    61e8:	4b34      	ldr	r3, [pc, #208]	; (62bc <main+0x7e8>)
    61ea:	2200      	movs	r2, #0
    61ec:	601a      	str	r2, [r3, #0]
	uint32_t endVal = TIMEVAL;
    61ee:	4b25      	ldr	r3, [pc, #148]	; (6284 <main+0x7b0>)
    61f0:	689b      	ldr	r3, [r3, #8]
    61f2:	4a25      	ldr	r2, [pc, #148]	; (6288 <main+0x7b4>)
    61f4:	6814      	ldr	r4, [r2, #0]
    61f6:	4825      	ldr	r0, [pc, #148]	; (628c <main+0x7b8>)
    61f8:	1ac0      	subs	r0, r0, r3
    61fa:	4925      	ldr	r1, [pc, #148]	; (6290 <main+0x7bc>)
    61fc:	4b25      	ldr	r3, [pc, #148]	; (6294 <main+0x7c0>)
    61fe:	4798      	blx	r3
    6200:	1904      	adds	r4, r0, r4
	printf("End: %d\r\n",endVal);
    6202:	0021      	movs	r1, r4
    6204:	484f      	ldr	r0, [pc, #316]	; (6344 <main+0x870>)
    6206:	4f3a      	ldr	r7, [pc, #232]	; (62f0 <main+0x81c>)
    6208:	47b8      	blx	r7
	printf("Difference: %d\r\n",endVal-startVal);
    620a:	4b23      	ldr	r3, [pc, #140]	; (6298 <main+0x7c4>)
    620c:	6819      	ldr	r1, [r3, #0]
    620e:	1a61      	subs	r1, r4, r1
    6210:	484d      	ldr	r0, [pc, #308]	; (6348 <main+0x874>)
    6212:	47b8      	blx	r7
	g_waitFlag = 0;
    6214:	4b26      	ldr	r3, [pc, #152]	; (62b0 <main+0x7dc>)
    6216:	2200      	movs	r2, #0
    6218:	601a      	str	r2, [r3, #0]
		crypto_aead_encrypt(tx_element.data, &clen, message_out, 16, NULL, NULL, NULL, n, session_key);
    621a:	ab44      	add	r3, sp, #272	; 0x110
    621c:	9304      	str	r3, [sp, #16]
    621e:	4b35      	ldr	r3, [pc, #212]	; (62f4 <main+0x820>)
    6220:	9303      	str	r3, [sp, #12]
    6222:	4643      	mov	r3, r8
    6224:	9302      	str	r3, [sp, #8]
    6226:	9301      	str	r3, [sp, #4]
    6228:	9300      	str	r3, [sp, #0]
    622a:	2310      	movs	r3, #16
    622c:	aa37      	add	r2, sp, #220	; 0xdc
    622e:	a90b      	add	r1, sp, #44	; 0x2c
    6230:	a80f      	add	r0, sp, #60	; 0x3c
    6232:	4c31      	ldr	r4, [pc, #196]	; (62f8 <main+0x824>)
    6234:	47a0      	blx	r4
		can_set_tx_buffer_element(&can_instance, &tx_element,
    6236:	2205      	movs	r2, #5
    6238:	a90d      	add	r1, sp, #52	; 0x34
    623a:	0028      	movs	r0, r5
    623c:	4b33      	ldr	r3, [pc, #204]	; (630c <main+0x838>)
    623e:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    6240:	682b      	ldr	r3, [r5, #0]
    6242:	699a      	ldr	r2, [r3, #24]
    6244:	4216      	tst	r6, r2
    6246:	d102      	bne.n	624e <main+0x77a>
	module_inst->hw->TXBAR.reg = trig_mask;
    6248:	2120      	movs	r1, #32
    624a:	22d0      	movs	r2, #208	; 0xd0
    624c:	5099      	str	r1, [r3, r2]
		g_sent = 1;
    624e:	4b1b      	ldr	r3, [pc, #108]	; (62bc <main+0x7e8>)
    6250:	2201      	movs	r2, #1
    6252:	601a      	str	r2, [r3, #0]
		g_waitFlag++;
    6254:	4a16      	ldr	r2, [pc, #88]	; (62b0 <main+0x7dc>)
    6256:	6813      	ldr	r3, [r2, #0]
    6258:	3301      	adds	r3, #1
    625a:	6013      	str	r3, [r2, #0]
	volatile uint32_t timeOut = TIMEVAL;
    625c:	4b09      	ldr	r3, [pc, #36]	; (6284 <main+0x7b0>)
    625e:	689b      	ldr	r3, [r3, #8]
    6260:	4a09      	ldr	r2, [pc, #36]	; (6288 <main+0x7b4>)
    6262:	6814      	ldr	r4, [r2, #0]
    6264:	4809      	ldr	r0, [pc, #36]	; (628c <main+0x7b8>)
    6266:	1ac0      	subs	r0, r0, r3
    6268:	4909      	ldr	r1, [pc, #36]	; (6290 <main+0x7bc>)
    626a:	4b0a      	ldr	r3, [pc, #40]	; (6294 <main+0x7c0>)
    626c:	4798      	blx	r3
    626e:	1900      	adds	r0, r0, r4
    6270:	900c      	str	r0, [sp, #48]	; 0x30
	for (int i = 0; i < TOTAL_SENDS; i++) {
    6272:	2300      	movs	r3, #0
	return module_inst->hw->TXBTO.reg;
    6274:	24d8      	movs	r4, #216	; 0xd8
    6276:	001f      	movs	r7, r3
    6278:	4646      	mov	r6, r8
    627a:	e5ba      	b.n	5df2 <main+0x31e>
    627c:	0000a114 	.word	0x0000a114
    6280:	00006975 	.word	0x00006975
    6284:	e000e010 	.word	0xe000e010
    6288:	200023d8 	.word	0x200023d8
    628c:	00dbb9ff 	.word	0x00dbb9ff
    6290:	0000bb80 	.word	0x0000bb80
    6294:	0000634d 	.word	0x0000634d
    6298:	200036f0 	.word	0x200036f0
    629c:	20002414 	.word	0x20002414
    62a0:	20002420 	.word	0x20002420
    62a4:	20002428 	.word	0x20002428
    62a8:	2000242c 	.word	0x2000242c
    62ac:	2000241c 	.word	0x2000241c
    62b0:	20002430 	.word	0x20002430
    62b4:	20002418 	.word	0x20002418
    62b8:	20002424 	.word	0x20002424
    62bc:	200023d4 	.word	0x200023d4
    62c0:	200023c8 	.word	0x200023c8
    62c4:	0000671f 	.word	0x0000671f
    62c8:	000066e9 	.word	0x000066e9
    62cc:	00005709 	.word	0x00005709
    62d0:	000053f9 	.word	0x000053f9
    62d4:	00005425 	.word	0x00005425
    62d8:	880007ff 	.word	0x880007ff
    62dc:	f800ffff 	.word	0xf800ffff
    62e0:	200023dc 	.word	0x200023dc
    62e4:	0000171d 	.word	0x0000171d
    62e8:	03010000 	.word	0x03010000
    62ec:	00009fb0 	.word	0x00009fb0
    62f0:	00006881 	.word	0x00006881
    62f4:	20000004 	.word	0x20000004
    62f8:	0000011d 	.word	0x0000011d
    62fc:	00009fe0 	.word	0x00009fe0
    6300:	0000a010 	.word	0x0000a010
    6304:	0000a020 	.word	0x0000a020
    6308:	04040000 	.word	0x04040000
    630c:	00001809 	.word	0x00001809
    6310:	02010000 	.word	0x02010000
    6314:	0000a02c 	.word	0x0000a02c
    6318:	c7ffffff 	.word	0xc7ffffff
    631c:	200024b0 	.word	0x200024b0
    6320:	00000491 	.word	0x00000491
    6324:	00000494 	.word	0x00000494
    6328:	000009b9 	.word	0x000009b9
    632c:	0000a048 	.word	0x0000a048
    6330:	0000a080 	.word	0x0000a080
    6334:	0000a08c 	.word	0x0000a08c
    6338:	0000a028 	.word	0x0000a028
    633c:	04010000 	.word	0x04010000
    6340:	10040000 	.word	0x10040000
    6344:	0000a090 	.word	0x0000a090
    6348:	0000a09c 	.word	0x0000a09c

0000634c <__udivsi3>:
    634c:	2200      	movs	r2, #0
    634e:	0843      	lsrs	r3, r0, #1
    6350:	428b      	cmp	r3, r1
    6352:	d374      	bcc.n	643e <__udivsi3+0xf2>
    6354:	0903      	lsrs	r3, r0, #4
    6356:	428b      	cmp	r3, r1
    6358:	d35f      	bcc.n	641a <__udivsi3+0xce>
    635a:	0a03      	lsrs	r3, r0, #8
    635c:	428b      	cmp	r3, r1
    635e:	d344      	bcc.n	63ea <__udivsi3+0x9e>
    6360:	0b03      	lsrs	r3, r0, #12
    6362:	428b      	cmp	r3, r1
    6364:	d328      	bcc.n	63b8 <__udivsi3+0x6c>
    6366:	0c03      	lsrs	r3, r0, #16
    6368:	428b      	cmp	r3, r1
    636a:	d30d      	bcc.n	6388 <__udivsi3+0x3c>
    636c:	22ff      	movs	r2, #255	; 0xff
    636e:	0209      	lsls	r1, r1, #8
    6370:	ba12      	rev	r2, r2
    6372:	0c03      	lsrs	r3, r0, #16
    6374:	428b      	cmp	r3, r1
    6376:	d302      	bcc.n	637e <__udivsi3+0x32>
    6378:	1212      	asrs	r2, r2, #8
    637a:	0209      	lsls	r1, r1, #8
    637c:	d065      	beq.n	644a <__udivsi3+0xfe>
    637e:	0b03      	lsrs	r3, r0, #12
    6380:	428b      	cmp	r3, r1
    6382:	d319      	bcc.n	63b8 <__udivsi3+0x6c>
    6384:	e000      	b.n	6388 <__udivsi3+0x3c>
    6386:	0a09      	lsrs	r1, r1, #8
    6388:	0bc3      	lsrs	r3, r0, #15
    638a:	428b      	cmp	r3, r1
    638c:	d301      	bcc.n	6392 <__udivsi3+0x46>
    638e:	03cb      	lsls	r3, r1, #15
    6390:	1ac0      	subs	r0, r0, r3
    6392:	4152      	adcs	r2, r2
    6394:	0b83      	lsrs	r3, r0, #14
    6396:	428b      	cmp	r3, r1
    6398:	d301      	bcc.n	639e <__udivsi3+0x52>
    639a:	038b      	lsls	r3, r1, #14
    639c:	1ac0      	subs	r0, r0, r3
    639e:	4152      	adcs	r2, r2
    63a0:	0b43      	lsrs	r3, r0, #13
    63a2:	428b      	cmp	r3, r1
    63a4:	d301      	bcc.n	63aa <__udivsi3+0x5e>
    63a6:	034b      	lsls	r3, r1, #13
    63a8:	1ac0      	subs	r0, r0, r3
    63aa:	4152      	adcs	r2, r2
    63ac:	0b03      	lsrs	r3, r0, #12
    63ae:	428b      	cmp	r3, r1
    63b0:	d301      	bcc.n	63b6 <__udivsi3+0x6a>
    63b2:	030b      	lsls	r3, r1, #12
    63b4:	1ac0      	subs	r0, r0, r3
    63b6:	4152      	adcs	r2, r2
    63b8:	0ac3      	lsrs	r3, r0, #11
    63ba:	428b      	cmp	r3, r1
    63bc:	d301      	bcc.n	63c2 <__udivsi3+0x76>
    63be:	02cb      	lsls	r3, r1, #11
    63c0:	1ac0      	subs	r0, r0, r3
    63c2:	4152      	adcs	r2, r2
    63c4:	0a83      	lsrs	r3, r0, #10
    63c6:	428b      	cmp	r3, r1
    63c8:	d301      	bcc.n	63ce <__udivsi3+0x82>
    63ca:	028b      	lsls	r3, r1, #10
    63cc:	1ac0      	subs	r0, r0, r3
    63ce:	4152      	adcs	r2, r2
    63d0:	0a43      	lsrs	r3, r0, #9
    63d2:	428b      	cmp	r3, r1
    63d4:	d301      	bcc.n	63da <__udivsi3+0x8e>
    63d6:	024b      	lsls	r3, r1, #9
    63d8:	1ac0      	subs	r0, r0, r3
    63da:	4152      	adcs	r2, r2
    63dc:	0a03      	lsrs	r3, r0, #8
    63de:	428b      	cmp	r3, r1
    63e0:	d301      	bcc.n	63e6 <__udivsi3+0x9a>
    63e2:	020b      	lsls	r3, r1, #8
    63e4:	1ac0      	subs	r0, r0, r3
    63e6:	4152      	adcs	r2, r2
    63e8:	d2cd      	bcs.n	6386 <__udivsi3+0x3a>
    63ea:	09c3      	lsrs	r3, r0, #7
    63ec:	428b      	cmp	r3, r1
    63ee:	d301      	bcc.n	63f4 <__udivsi3+0xa8>
    63f0:	01cb      	lsls	r3, r1, #7
    63f2:	1ac0      	subs	r0, r0, r3
    63f4:	4152      	adcs	r2, r2
    63f6:	0983      	lsrs	r3, r0, #6
    63f8:	428b      	cmp	r3, r1
    63fa:	d301      	bcc.n	6400 <__udivsi3+0xb4>
    63fc:	018b      	lsls	r3, r1, #6
    63fe:	1ac0      	subs	r0, r0, r3
    6400:	4152      	adcs	r2, r2
    6402:	0943      	lsrs	r3, r0, #5
    6404:	428b      	cmp	r3, r1
    6406:	d301      	bcc.n	640c <__udivsi3+0xc0>
    6408:	014b      	lsls	r3, r1, #5
    640a:	1ac0      	subs	r0, r0, r3
    640c:	4152      	adcs	r2, r2
    640e:	0903      	lsrs	r3, r0, #4
    6410:	428b      	cmp	r3, r1
    6412:	d301      	bcc.n	6418 <__udivsi3+0xcc>
    6414:	010b      	lsls	r3, r1, #4
    6416:	1ac0      	subs	r0, r0, r3
    6418:	4152      	adcs	r2, r2
    641a:	08c3      	lsrs	r3, r0, #3
    641c:	428b      	cmp	r3, r1
    641e:	d301      	bcc.n	6424 <__udivsi3+0xd8>
    6420:	00cb      	lsls	r3, r1, #3
    6422:	1ac0      	subs	r0, r0, r3
    6424:	4152      	adcs	r2, r2
    6426:	0883      	lsrs	r3, r0, #2
    6428:	428b      	cmp	r3, r1
    642a:	d301      	bcc.n	6430 <__udivsi3+0xe4>
    642c:	008b      	lsls	r3, r1, #2
    642e:	1ac0      	subs	r0, r0, r3
    6430:	4152      	adcs	r2, r2
    6432:	0843      	lsrs	r3, r0, #1
    6434:	428b      	cmp	r3, r1
    6436:	d301      	bcc.n	643c <__udivsi3+0xf0>
    6438:	004b      	lsls	r3, r1, #1
    643a:	1ac0      	subs	r0, r0, r3
    643c:	4152      	adcs	r2, r2
    643e:	1a41      	subs	r1, r0, r1
    6440:	d200      	bcs.n	6444 <__udivsi3+0xf8>
    6442:	4601      	mov	r1, r0
    6444:	4152      	adcs	r2, r2
    6446:	4610      	mov	r0, r2
    6448:	4770      	bx	lr
    644a:	e7ff      	b.n	644c <__udivsi3+0x100>
    644c:	b501      	push	{r0, lr}
    644e:	2000      	movs	r0, #0
    6450:	f000 f8f0 	bl	6634 <__aeabi_idiv0>
    6454:	bd02      	pop	{r1, pc}
    6456:	46c0      	nop			; (mov r8, r8)

00006458 <__aeabi_uidivmod>:
    6458:	2900      	cmp	r1, #0
    645a:	d0f7      	beq.n	644c <__udivsi3+0x100>
    645c:	e776      	b.n	634c <__udivsi3>
    645e:	4770      	bx	lr

00006460 <__divsi3>:
    6460:	4603      	mov	r3, r0
    6462:	430b      	orrs	r3, r1
    6464:	d47f      	bmi.n	6566 <__divsi3+0x106>
    6466:	2200      	movs	r2, #0
    6468:	0843      	lsrs	r3, r0, #1
    646a:	428b      	cmp	r3, r1
    646c:	d374      	bcc.n	6558 <__divsi3+0xf8>
    646e:	0903      	lsrs	r3, r0, #4
    6470:	428b      	cmp	r3, r1
    6472:	d35f      	bcc.n	6534 <__divsi3+0xd4>
    6474:	0a03      	lsrs	r3, r0, #8
    6476:	428b      	cmp	r3, r1
    6478:	d344      	bcc.n	6504 <__divsi3+0xa4>
    647a:	0b03      	lsrs	r3, r0, #12
    647c:	428b      	cmp	r3, r1
    647e:	d328      	bcc.n	64d2 <__divsi3+0x72>
    6480:	0c03      	lsrs	r3, r0, #16
    6482:	428b      	cmp	r3, r1
    6484:	d30d      	bcc.n	64a2 <__divsi3+0x42>
    6486:	22ff      	movs	r2, #255	; 0xff
    6488:	0209      	lsls	r1, r1, #8
    648a:	ba12      	rev	r2, r2
    648c:	0c03      	lsrs	r3, r0, #16
    648e:	428b      	cmp	r3, r1
    6490:	d302      	bcc.n	6498 <__divsi3+0x38>
    6492:	1212      	asrs	r2, r2, #8
    6494:	0209      	lsls	r1, r1, #8
    6496:	d065      	beq.n	6564 <__divsi3+0x104>
    6498:	0b03      	lsrs	r3, r0, #12
    649a:	428b      	cmp	r3, r1
    649c:	d319      	bcc.n	64d2 <__divsi3+0x72>
    649e:	e000      	b.n	64a2 <__divsi3+0x42>
    64a0:	0a09      	lsrs	r1, r1, #8
    64a2:	0bc3      	lsrs	r3, r0, #15
    64a4:	428b      	cmp	r3, r1
    64a6:	d301      	bcc.n	64ac <__divsi3+0x4c>
    64a8:	03cb      	lsls	r3, r1, #15
    64aa:	1ac0      	subs	r0, r0, r3
    64ac:	4152      	adcs	r2, r2
    64ae:	0b83      	lsrs	r3, r0, #14
    64b0:	428b      	cmp	r3, r1
    64b2:	d301      	bcc.n	64b8 <__divsi3+0x58>
    64b4:	038b      	lsls	r3, r1, #14
    64b6:	1ac0      	subs	r0, r0, r3
    64b8:	4152      	adcs	r2, r2
    64ba:	0b43      	lsrs	r3, r0, #13
    64bc:	428b      	cmp	r3, r1
    64be:	d301      	bcc.n	64c4 <__divsi3+0x64>
    64c0:	034b      	lsls	r3, r1, #13
    64c2:	1ac0      	subs	r0, r0, r3
    64c4:	4152      	adcs	r2, r2
    64c6:	0b03      	lsrs	r3, r0, #12
    64c8:	428b      	cmp	r3, r1
    64ca:	d301      	bcc.n	64d0 <__divsi3+0x70>
    64cc:	030b      	lsls	r3, r1, #12
    64ce:	1ac0      	subs	r0, r0, r3
    64d0:	4152      	adcs	r2, r2
    64d2:	0ac3      	lsrs	r3, r0, #11
    64d4:	428b      	cmp	r3, r1
    64d6:	d301      	bcc.n	64dc <__divsi3+0x7c>
    64d8:	02cb      	lsls	r3, r1, #11
    64da:	1ac0      	subs	r0, r0, r3
    64dc:	4152      	adcs	r2, r2
    64de:	0a83      	lsrs	r3, r0, #10
    64e0:	428b      	cmp	r3, r1
    64e2:	d301      	bcc.n	64e8 <__divsi3+0x88>
    64e4:	028b      	lsls	r3, r1, #10
    64e6:	1ac0      	subs	r0, r0, r3
    64e8:	4152      	adcs	r2, r2
    64ea:	0a43      	lsrs	r3, r0, #9
    64ec:	428b      	cmp	r3, r1
    64ee:	d301      	bcc.n	64f4 <__divsi3+0x94>
    64f0:	024b      	lsls	r3, r1, #9
    64f2:	1ac0      	subs	r0, r0, r3
    64f4:	4152      	adcs	r2, r2
    64f6:	0a03      	lsrs	r3, r0, #8
    64f8:	428b      	cmp	r3, r1
    64fa:	d301      	bcc.n	6500 <__divsi3+0xa0>
    64fc:	020b      	lsls	r3, r1, #8
    64fe:	1ac0      	subs	r0, r0, r3
    6500:	4152      	adcs	r2, r2
    6502:	d2cd      	bcs.n	64a0 <__divsi3+0x40>
    6504:	09c3      	lsrs	r3, r0, #7
    6506:	428b      	cmp	r3, r1
    6508:	d301      	bcc.n	650e <__divsi3+0xae>
    650a:	01cb      	lsls	r3, r1, #7
    650c:	1ac0      	subs	r0, r0, r3
    650e:	4152      	adcs	r2, r2
    6510:	0983      	lsrs	r3, r0, #6
    6512:	428b      	cmp	r3, r1
    6514:	d301      	bcc.n	651a <__divsi3+0xba>
    6516:	018b      	lsls	r3, r1, #6
    6518:	1ac0      	subs	r0, r0, r3
    651a:	4152      	adcs	r2, r2
    651c:	0943      	lsrs	r3, r0, #5
    651e:	428b      	cmp	r3, r1
    6520:	d301      	bcc.n	6526 <__divsi3+0xc6>
    6522:	014b      	lsls	r3, r1, #5
    6524:	1ac0      	subs	r0, r0, r3
    6526:	4152      	adcs	r2, r2
    6528:	0903      	lsrs	r3, r0, #4
    652a:	428b      	cmp	r3, r1
    652c:	d301      	bcc.n	6532 <__divsi3+0xd2>
    652e:	010b      	lsls	r3, r1, #4
    6530:	1ac0      	subs	r0, r0, r3
    6532:	4152      	adcs	r2, r2
    6534:	08c3      	lsrs	r3, r0, #3
    6536:	428b      	cmp	r3, r1
    6538:	d301      	bcc.n	653e <__divsi3+0xde>
    653a:	00cb      	lsls	r3, r1, #3
    653c:	1ac0      	subs	r0, r0, r3
    653e:	4152      	adcs	r2, r2
    6540:	0883      	lsrs	r3, r0, #2
    6542:	428b      	cmp	r3, r1
    6544:	d301      	bcc.n	654a <__divsi3+0xea>
    6546:	008b      	lsls	r3, r1, #2
    6548:	1ac0      	subs	r0, r0, r3
    654a:	4152      	adcs	r2, r2
    654c:	0843      	lsrs	r3, r0, #1
    654e:	428b      	cmp	r3, r1
    6550:	d301      	bcc.n	6556 <__divsi3+0xf6>
    6552:	004b      	lsls	r3, r1, #1
    6554:	1ac0      	subs	r0, r0, r3
    6556:	4152      	adcs	r2, r2
    6558:	1a41      	subs	r1, r0, r1
    655a:	d200      	bcs.n	655e <__divsi3+0xfe>
    655c:	4601      	mov	r1, r0
    655e:	4152      	adcs	r2, r2
    6560:	4610      	mov	r0, r2
    6562:	4770      	bx	lr
    6564:	e05d      	b.n	6622 <__divsi3+0x1c2>
    6566:	0fca      	lsrs	r2, r1, #31
    6568:	d000      	beq.n	656c <__divsi3+0x10c>
    656a:	4249      	negs	r1, r1
    656c:	1003      	asrs	r3, r0, #32
    656e:	d300      	bcc.n	6572 <__divsi3+0x112>
    6570:	4240      	negs	r0, r0
    6572:	4053      	eors	r3, r2
    6574:	2200      	movs	r2, #0
    6576:	469c      	mov	ip, r3
    6578:	0903      	lsrs	r3, r0, #4
    657a:	428b      	cmp	r3, r1
    657c:	d32d      	bcc.n	65da <__divsi3+0x17a>
    657e:	0a03      	lsrs	r3, r0, #8
    6580:	428b      	cmp	r3, r1
    6582:	d312      	bcc.n	65aa <__divsi3+0x14a>
    6584:	22fc      	movs	r2, #252	; 0xfc
    6586:	0189      	lsls	r1, r1, #6
    6588:	ba12      	rev	r2, r2
    658a:	0a03      	lsrs	r3, r0, #8
    658c:	428b      	cmp	r3, r1
    658e:	d30c      	bcc.n	65aa <__divsi3+0x14a>
    6590:	0189      	lsls	r1, r1, #6
    6592:	1192      	asrs	r2, r2, #6
    6594:	428b      	cmp	r3, r1
    6596:	d308      	bcc.n	65aa <__divsi3+0x14a>
    6598:	0189      	lsls	r1, r1, #6
    659a:	1192      	asrs	r2, r2, #6
    659c:	428b      	cmp	r3, r1
    659e:	d304      	bcc.n	65aa <__divsi3+0x14a>
    65a0:	0189      	lsls	r1, r1, #6
    65a2:	d03a      	beq.n	661a <__divsi3+0x1ba>
    65a4:	1192      	asrs	r2, r2, #6
    65a6:	e000      	b.n	65aa <__divsi3+0x14a>
    65a8:	0989      	lsrs	r1, r1, #6
    65aa:	09c3      	lsrs	r3, r0, #7
    65ac:	428b      	cmp	r3, r1
    65ae:	d301      	bcc.n	65b4 <__divsi3+0x154>
    65b0:	01cb      	lsls	r3, r1, #7
    65b2:	1ac0      	subs	r0, r0, r3
    65b4:	4152      	adcs	r2, r2
    65b6:	0983      	lsrs	r3, r0, #6
    65b8:	428b      	cmp	r3, r1
    65ba:	d301      	bcc.n	65c0 <__divsi3+0x160>
    65bc:	018b      	lsls	r3, r1, #6
    65be:	1ac0      	subs	r0, r0, r3
    65c0:	4152      	adcs	r2, r2
    65c2:	0943      	lsrs	r3, r0, #5
    65c4:	428b      	cmp	r3, r1
    65c6:	d301      	bcc.n	65cc <__divsi3+0x16c>
    65c8:	014b      	lsls	r3, r1, #5
    65ca:	1ac0      	subs	r0, r0, r3
    65cc:	4152      	adcs	r2, r2
    65ce:	0903      	lsrs	r3, r0, #4
    65d0:	428b      	cmp	r3, r1
    65d2:	d301      	bcc.n	65d8 <__divsi3+0x178>
    65d4:	010b      	lsls	r3, r1, #4
    65d6:	1ac0      	subs	r0, r0, r3
    65d8:	4152      	adcs	r2, r2
    65da:	08c3      	lsrs	r3, r0, #3
    65dc:	428b      	cmp	r3, r1
    65de:	d301      	bcc.n	65e4 <__divsi3+0x184>
    65e0:	00cb      	lsls	r3, r1, #3
    65e2:	1ac0      	subs	r0, r0, r3
    65e4:	4152      	adcs	r2, r2
    65e6:	0883      	lsrs	r3, r0, #2
    65e8:	428b      	cmp	r3, r1
    65ea:	d301      	bcc.n	65f0 <__divsi3+0x190>
    65ec:	008b      	lsls	r3, r1, #2
    65ee:	1ac0      	subs	r0, r0, r3
    65f0:	4152      	adcs	r2, r2
    65f2:	d2d9      	bcs.n	65a8 <__divsi3+0x148>
    65f4:	0843      	lsrs	r3, r0, #1
    65f6:	428b      	cmp	r3, r1
    65f8:	d301      	bcc.n	65fe <__divsi3+0x19e>
    65fa:	004b      	lsls	r3, r1, #1
    65fc:	1ac0      	subs	r0, r0, r3
    65fe:	4152      	adcs	r2, r2
    6600:	1a41      	subs	r1, r0, r1
    6602:	d200      	bcs.n	6606 <__divsi3+0x1a6>
    6604:	4601      	mov	r1, r0
    6606:	4663      	mov	r3, ip
    6608:	4152      	adcs	r2, r2
    660a:	105b      	asrs	r3, r3, #1
    660c:	4610      	mov	r0, r2
    660e:	d301      	bcc.n	6614 <__divsi3+0x1b4>
    6610:	4240      	negs	r0, r0
    6612:	2b00      	cmp	r3, #0
    6614:	d500      	bpl.n	6618 <__divsi3+0x1b8>
    6616:	4249      	negs	r1, r1
    6618:	4770      	bx	lr
    661a:	4663      	mov	r3, ip
    661c:	105b      	asrs	r3, r3, #1
    661e:	d300      	bcc.n	6622 <__divsi3+0x1c2>
    6620:	4240      	negs	r0, r0
    6622:	b501      	push	{r0, lr}
    6624:	2000      	movs	r0, #0
    6626:	f000 f805 	bl	6634 <__aeabi_idiv0>
    662a:	bd02      	pop	{r1, pc}

0000662c <__aeabi_idivmod>:
    662c:	2900      	cmp	r1, #0
    662e:	d0f8      	beq.n	6622 <__divsi3+0x1c2>
    6630:	e716      	b.n	6460 <__divsi3>
    6632:	4770      	bx	lr

00006634 <__aeabi_idiv0>:
    6634:	4770      	bx	lr
    6636:	46c0      	nop			; (mov r8, r8)

00006638 <__aeabi_lmul>:
    6638:	b5f0      	push	{r4, r5, r6, r7, lr}
    663a:	46ce      	mov	lr, r9
    663c:	4647      	mov	r7, r8
    663e:	0415      	lsls	r5, r2, #16
    6640:	0c2d      	lsrs	r5, r5, #16
    6642:	002e      	movs	r6, r5
    6644:	b580      	push	{r7, lr}
    6646:	0407      	lsls	r7, r0, #16
    6648:	0c14      	lsrs	r4, r2, #16
    664a:	0c3f      	lsrs	r7, r7, #16
    664c:	4699      	mov	r9, r3
    664e:	0c03      	lsrs	r3, r0, #16
    6650:	437e      	muls	r6, r7
    6652:	435d      	muls	r5, r3
    6654:	4367      	muls	r7, r4
    6656:	4363      	muls	r3, r4
    6658:	197f      	adds	r7, r7, r5
    665a:	0c34      	lsrs	r4, r6, #16
    665c:	19e4      	adds	r4, r4, r7
    665e:	469c      	mov	ip, r3
    6660:	42a5      	cmp	r5, r4
    6662:	d903      	bls.n	666c <__aeabi_lmul+0x34>
    6664:	2380      	movs	r3, #128	; 0x80
    6666:	025b      	lsls	r3, r3, #9
    6668:	4698      	mov	r8, r3
    666a:	44c4      	add	ip, r8
    666c:	464b      	mov	r3, r9
    666e:	4351      	muls	r1, r2
    6670:	4343      	muls	r3, r0
    6672:	0436      	lsls	r6, r6, #16
    6674:	0c36      	lsrs	r6, r6, #16
    6676:	0c25      	lsrs	r5, r4, #16
    6678:	0424      	lsls	r4, r4, #16
    667a:	4465      	add	r5, ip
    667c:	19a4      	adds	r4, r4, r6
    667e:	1859      	adds	r1, r3, r1
    6680:	1949      	adds	r1, r1, r5
    6682:	0020      	movs	r0, r4
    6684:	bc0c      	pop	{r2, r3}
    6686:	4690      	mov	r8, r2
    6688:	4699      	mov	r9, r3
    668a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000668c <__libc_init_array>:
    668c:	b570      	push	{r4, r5, r6, lr}
    668e:	2600      	movs	r6, #0
    6690:	4d0c      	ldr	r5, [pc, #48]	; (66c4 <__libc_init_array+0x38>)
    6692:	4c0d      	ldr	r4, [pc, #52]	; (66c8 <__libc_init_array+0x3c>)
    6694:	1b64      	subs	r4, r4, r5
    6696:	10a4      	asrs	r4, r4, #2
    6698:	42a6      	cmp	r6, r4
    669a:	d109      	bne.n	66b0 <__libc_init_array+0x24>
    669c:	2600      	movs	r6, #0
    669e:	f003 fd95 	bl	a1cc <_init>
    66a2:	4d0a      	ldr	r5, [pc, #40]	; (66cc <__libc_init_array+0x40>)
    66a4:	4c0a      	ldr	r4, [pc, #40]	; (66d0 <__libc_init_array+0x44>)
    66a6:	1b64      	subs	r4, r4, r5
    66a8:	10a4      	asrs	r4, r4, #2
    66aa:	42a6      	cmp	r6, r4
    66ac:	d105      	bne.n	66ba <__libc_init_array+0x2e>
    66ae:	bd70      	pop	{r4, r5, r6, pc}
    66b0:	00b3      	lsls	r3, r6, #2
    66b2:	58eb      	ldr	r3, [r5, r3]
    66b4:	4798      	blx	r3
    66b6:	3601      	adds	r6, #1
    66b8:	e7ee      	b.n	6698 <__libc_init_array+0xc>
    66ba:	00b3      	lsls	r3, r6, #2
    66bc:	58eb      	ldr	r3, [r5, r3]
    66be:	4798      	blx	r3
    66c0:	3601      	adds	r6, #1
    66c2:	e7f2      	b.n	66aa <__libc_init_array+0x1e>
    66c4:	0000a1d8 	.word	0x0000a1d8
    66c8:	0000a1d8 	.word	0x0000a1d8
    66cc:	0000a1d8 	.word	0x0000a1d8
    66d0:	0000a1dc 	.word	0x0000a1dc

000066d4 <malloc>:
    66d4:	b510      	push	{r4, lr}
    66d6:	4b03      	ldr	r3, [pc, #12]	; (66e4 <malloc+0x10>)
    66d8:	0001      	movs	r1, r0
    66da:	6818      	ldr	r0, [r3, #0]
    66dc:	f000 f872 	bl	67c4 <_malloc_r>
    66e0:	bd10      	pop	{r4, pc}
    66e2:	46c0      	nop			; (mov r8, r8)
    66e4:	20000114 	.word	0x20000114

000066e8 <memcpy>:
    66e8:	2300      	movs	r3, #0
    66ea:	b510      	push	{r4, lr}
    66ec:	429a      	cmp	r2, r3
    66ee:	d100      	bne.n	66f2 <memcpy+0xa>
    66f0:	bd10      	pop	{r4, pc}
    66f2:	5ccc      	ldrb	r4, [r1, r3]
    66f4:	54c4      	strb	r4, [r0, r3]
    66f6:	3301      	adds	r3, #1
    66f8:	e7f8      	b.n	66ec <memcpy+0x4>

000066fa <memmove>:
    66fa:	b510      	push	{r4, lr}
    66fc:	4288      	cmp	r0, r1
    66fe:	d902      	bls.n	6706 <memmove+0xc>
    6700:	188b      	adds	r3, r1, r2
    6702:	4298      	cmp	r0, r3
    6704:	d308      	bcc.n	6718 <memmove+0x1e>
    6706:	2300      	movs	r3, #0
    6708:	429a      	cmp	r2, r3
    670a:	d007      	beq.n	671c <memmove+0x22>
    670c:	5ccc      	ldrb	r4, [r1, r3]
    670e:	54c4      	strb	r4, [r0, r3]
    6710:	3301      	adds	r3, #1
    6712:	e7f9      	b.n	6708 <memmove+0xe>
    6714:	5c8b      	ldrb	r3, [r1, r2]
    6716:	5483      	strb	r3, [r0, r2]
    6718:	3a01      	subs	r2, #1
    671a:	d2fb      	bcs.n	6714 <memmove+0x1a>
    671c:	bd10      	pop	{r4, pc}

0000671e <memset>:
    671e:	0003      	movs	r3, r0
    6720:	1882      	adds	r2, r0, r2
    6722:	4293      	cmp	r3, r2
    6724:	d100      	bne.n	6728 <memset+0xa>
    6726:	4770      	bx	lr
    6728:	7019      	strb	r1, [r3, #0]
    672a:	3301      	adds	r3, #1
    672c:	e7f9      	b.n	6722 <memset+0x4>
	...

00006730 <_free_r>:
    6730:	b570      	push	{r4, r5, r6, lr}
    6732:	0005      	movs	r5, r0
    6734:	2900      	cmp	r1, #0
    6736:	d010      	beq.n	675a <_free_r+0x2a>
    6738:	1f0c      	subs	r4, r1, #4
    673a:	6823      	ldr	r3, [r4, #0]
    673c:	2b00      	cmp	r3, #0
    673e:	da00      	bge.n	6742 <_free_r+0x12>
    6740:	18e4      	adds	r4, r4, r3
    6742:	0028      	movs	r0, r5
    6744:	f000 fcae 	bl	70a4 <__malloc_lock>
    6748:	4a1d      	ldr	r2, [pc, #116]	; (67c0 <_free_r+0x90>)
    674a:	6813      	ldr	r3, [r2, #0]
    674c:	2b00      	cmp	r3, #0
    674e:	d105      	bne.n	675c <_free_r+0x2c>
    6750:	6063      	str	r3, [r4, #4]
    6752:	6014      	str	r4, [r2, #0]
    6754:	0028      	movs	r0, r5
    6756:	f000 fca6 	bl	70a6 <__malloc_unlock>
    675a:	bd70      	pop	{r4, r5, r6, pc}
    675c:	42a3      	cmp	r3, r4
    675e:	d909      	bls.n	6774 <_free_r+0x44>
    6760:	6821      	ldr	r1, [r4, #0]
    6762:	1860      	adds	r0, r4, r1
    6764:	4283      	cmp	r3, r0
    6766:	d1f3      	bne.n	6750 <_free_r+0x20>
    6768:	6818      	ldr	r0, [r3, #0]
    676a:	685b      	ldr	r3, [r3, #4]
    676c:	1841      	adds	r1, r0, r1
    676e:	6021      	str	r1, [r4, #0]
    6770:	e7ee      	b.n	6750 <_free_r+0x20>
    6772:	0013      	movs	r3, r2
    6774:	685a      	ldr	r2, [r3, #4]
    6776:	2a00      	cmp	r2, #0
    6778:	d001      	beq.n	677e <_free_r+0x4e>
    677a:	42a2      	cmp	r2, r4
    677c:	d9f9      	bls.n	6772 <_free_r+0x42>
    677e:	6819      	ldr	r1, [r3, #0]
    6780:	1858      	adds	r0, r3, r1
    6782:	42a0      	cmp	r0, r4
    6784:	d10b      	bne.n	679e <_free_r+0x6e>
    6786:	6820      	ldr	r0, [r4, #0]
    6788:	1809      	adds	r1, r1, r0
    678a:	1858      	adds	r0, r3, r1
    678c:	6019      	str	r1, [r3, #0]
    678e:	4282      	cmp	r2, r0
    6790:	d1e0      	bne.n	6754 <_free_r+0x24>
    6792:	6810      	ldr	r0, [r2, #0]
    6794:	6852      	ldr	r2, [r2, #4]
    6796:	1841      	adds	r1, r0, r1
    6798:	6019      	str	r1, [r3, #0]
    679a:	605a      	str	r2, [r3, #4]
    679c:	e7da      	b.n	6754 <_free_r+0x24>
    679e:	42a0      	cmp	r0, r4
    67a0:	d902      	bls.n	67a8 <_free_r+0x78>
    67a2:	230c      	movs	r3, #12
    67a4:	602b      	str	r3, [r5, #0]
    67a6:	e7d5      	b.n	6754 <_free_r+0x24>
    67a8:	6821      	ldr	r1, [r4, #0]
    67aa:	1860      	adds	r0, r4, r1
    67ac:	4282      	cmp	r2, r0
    67ae:	d103      	bne.n	67b8 <_free_r+0x88>
    67b0:	6810      	ldr	r0, [r2, #0]
    67b2:	6852      	ldr	r2, [r2, #4]
    67b4:	1841      	adds	r1, r0, r1
    67b6:	6021      	str	r1, [r4, #0]
    67b8:	6062      	str	r2, [r4, #4]
    67ba:	605c      	str	r4, [r3, #4]
    67bc:	e7ca      	b.n	6754 <_free_r+0x24>
    67be:	46c0      	nop			; (mov r8, r8)
    67c0:	20002480 	.word	0x20002480

000067c4 <_malloc_r>:
    67c4:	2303      	movs	r3, #3
    67c6:	b570      	push	{r4, r5, r6, lr}
    67c8:	1ccd      	adds	r5, r1, #3
    67ca:	439d      	bics	r5, r3
    67cc:	3508      	adds	r5, #8
    67ce:	0006      	movs	r6, r0
    67d0:	2d0c      	cmp	r5, #12
    67d2:	d21e      	bcs.n	6812 <_malloc_r+0x4e>
    67d4:	250c      	movs	r5, #12
    67d6:	42a9      	cmp	r1, r5
    67d8:	d81d      	bhi.n	6816 <_malloc_r+0x52>
    67da:	0030      	movs	r0, r6
    67dc:	f000 fc62 	bl	70a4 <__malloc_lock>
    67e0:	4a25      	ldr	r2, [pc, #148]	; (6878 <_malloc_r+0xb4>)
    67e2:	6814      	ldr	r4, [r2, #0]
    67e4:	0021      	movs	r1, r4
    67e6:	2900      	cmp	r1, #0
    67e8:	d119      	bne.n	681e <_malloc_r+0x5a>
    67ea:	4c24      	ldr	r4, [pc, #144]	; (687c <_malloc_r+0xb8>)
    67ec:	6823      	ldr	r3, [r4, #0]
    67ee:	2b00      	cmp	r3, #0
    67f0:	d103      	bne.n	67fa <_malloc_r+0x36>
    67f2:	0030      	movs	r0, r6
    67f4:	f000 f8c8 	bl	6988 <_sbrk_r>
    67f8:	6020      	str	r0, [r4, #0]
    67fa:	0029      	movs	r1, r5
    67fc:	0030      	movs	r0, r6
    67fe:	f000 f8c3 	bl	6988 <_sbrk_r>
    6802:	1c43      	adds	r3, r0, #1
    6804:	d12c      	bne.n	6860 <_malloc_r+0x9c>
    6806:	230c      	movs	r3, #12
    6808:	0030      	movs	r0, r6
    680a:	6033      	str	r3, [r6, #0]
    680c:	f000 fc4b 	bl	70a6 <__malloc_unlock>
    6810:	e003      	b.n	681a <_malloc_r+0x56>
    6812:	2d00      	cmp	r5, #0
    6814:	dadf      	bge.n	67d6 <_malloc_r+0x12>
    6816:	230c      	movs	r3, #12
    6818:	6033      	str	r3, [r6, #0]
    681a:	2000      	movs	r0, #0
    681c:	bd70      	pop	{r4, r5, r6, pc}
    681e:	680b      	ldr	r3, [r1, #0]
    6820:	1b5b      	subs	r3, r3, r5
    6822:	d41a      	bmi.n	685a <_malloc_r+0x96>
    6824:	2b0b      	cmp	r3, #11
    6826:	d903      	bls.n	6830 <_malloc_r+0x6c>
    6828:	600b      	str	r3, [r1, #0]
    682a:	18cc      	adds	r4, r1, r3
    682c:	6025      	str	r5, [r4, #0]
    682e:	e003      	b.n	6838 <_malloc_r+0x74>
    6830:	428c      	cmp	r4, r1
    6832:	d10e      	bne.n	6852 <_malloc_r+0x8e>
    6834:	6863      	ldr	r3, [r4, #4]
    6836:	6013      	str	r3, [r2, #0]
    6838:	0030      	movs	r0, r6
    683a:	f000 fc34 	bl	70a6 <__malloc_unlock>
    683e:	0020      	movs	r0, r4
    6840:	2207      	movs	r2, #7
    6842:	300b      	adds	r0, #11
    6844:	1d23      	adds	r3, r4, #4
    6846:	4390      	bics	r0, r2
    6848:	1ac3      	subs	r3, r0, r3
    684a:	d0e7      	beq.n	681c <_malloc_r+0x58>
    684c:	425a      	negs	r2, r3
    684e:	50e2      	str	r2, [r4, r3]
    6850:	e7e4      	b.n	681c <_malloc_r+0x58>
    6852:	684b      	ldr	r3, [r1, #4]
    6854:	6063      	str	r3, [r4, #4]
    6856:	000c      	movs	r4, r1
    6858:	e7ee      	b.n	6838 <_malloc_r+0x74>
    685a:	000c      	movs	r4, r1
    685c:	6849      	ldr	r1, [r1, #4]
    685e:	e7c2      	b.n	67e6 <_malloc_r+0x22>
    6860:	2303      	movs	r3, #3
    6862:	1cc4      	adds	r4, r0, #3
    6864:	439c      	bics	r4, r3
    6866:	42a0      	cmp	r0, r4
    6868:	d0e0      	beq.n	682c <_malloc_r+0x68>
    686a:	1a21      	subs	r1, r4, r0
    686c:	0030      	movs	r0, r6
    686e:	f000 f88b 	bl	6988 <_sbrk_r>
    6872:	1c43      	adds	r3, r0, #1
    6874:	d1da      	bne.n	682c <_malloc_r+0x68>
    6876:	e7c6      	b.n	6806 <_malloc_r+0x42>
    6878:	20002480 	.word	0x20002480
    687c:	20002484 	.word	0x20002484

00006880 <iprintf>:
    6880:	b40f      	push	{r0, r1, r2, r3}
    6882:	4b0b      	ldr	r3, [pc, #44]	; (68b0 <iprintf+0x30>)
    6884:	b513      	push	{r0, r1, r4, lr}
    6886:	681c      	ldr	r4, [r3, #0]
    6888:	2c00      	cmp	r4, #0
    688a:	d005      	beq.n	6898 <iprintf+0x18>
    688c:	69a3      	ldr	r3, [r4, #24]
    688e:	2b00      	cmp	r3, #0
    6890:	d102      	bne.n	6898 <iprintf+0x18>
    6892:	0020      	movs	r0, r4
    6894:	f000 fb04 	bl	6ea0 <__sinit>
    6898:	ab05      	add	r3, sp, #20
    689a:	9a04      	ldr	r2, [sp, #16]
    689c:	68a1      	ldr	r1, [r4, #8]
    689e:	0020      	movs	r0, r4
    68a0:	9301      	str	r3, [sp, #4]
    68a2:	f000 fc29 	bl	70f8 <_vfiprintf_r>
    68a6:	bc16      	pop	{r1, r2, r4}
    68a8:	bc08      	pop	{r3}
    68aa:	b004      	add	sp, #16
    68ac:	4718      	bx	r3
    68ae:	46c0      	nop			; (mov r8, r8)
    68b0:	20000114 	.word	0x20000114

000068b4 <_puts_r>:
    68b4:	b570      	push	{r4, r5, r6, lr}
    68b6:	0005      	movs	r5, r0
    68b8:	000e      	movs	r6, r1
    68ba:	2800      	cmp	r0, #0
    68bc:	d004      	beq.n	68c8 <_puts_r+0x14>
    68be:	6983      	ldr	r3, [r0, #24]
    68c0:	2b00      	cmp	r3, #0
    68c2:	d101      	bne.n	68c8 <_puts_r+0x14>
    68c4:	f000 faec 	bl	6ea0 <__sinit>
    68c8:	69ab      	ldr	r3, [r5, #24]
    68ca:	68ac      	ldr	r4, [r5, #8]
    68cc:	2b00      	cmp	r3, #0
    68ce:	d102      	bne.n	68d6 <_puts_r+0x22>
    68d0:	0028      	movs	r0, r5
    68d2:	f000 fae5 	bl	6ea0 <__sinit>
    68d6:	4b24      	ldr	r3, [pc, #144]	; (6968 <_puts_r+0xb4>)
    68d8:	429c      	cmp	r4, r3
    68da:	d10f      	bne.n	68fc <_puts_r+0x48>
    68dc:	686c      	ldr	r4, [r5, #4]
    68de:	89a3      	ldrh	r3, [r4, #12]
    68e0:	071b      	lsls	r3, r3, #28
    68e2:	d502      	bpl.n	68ea <_puts_r+0x36>
    68e4:	6923      	ldr	r3, [r4, #16]
    68e6:	2b00      	cmp	r3, #0
    68e8:	d120      	bne.n	692c <_puts_r+0x78>
    68ea:	0021      	movs	r1, r4
    68ec:	0028      	movs	r0, r5
    68ee:	f000 f969 	bl	6bc4 <__swsetup_r>
    68f2:	2800      	cmp	r0, #0
    68f4:	d01a      	beq.n	692c <_puts_r+0x78>
    68f6:	2001      	movs	r0, #1
    68f8:	4240      	negs	r0, r0
    68fa:	bd70      	pop	{r4, r5, r6, pc}
    68fc:	4b1b      	ldr	r3, [pc, #108]	; (696c <_puts_r+0xb8>)
    68fe:	429c      	cmp	r4, r3
    6900:	d101      	bne.n	6906 <_puts_r+0x52>
    6902:	68ac      	ldr	r4, [r5, #8]
    6904:	e7eb      	b.n	68de <_puts_r+0x2a>
    6906:	4b1a      	ldr	r3, [pc, #104]	; (6970 <_puts_r+0xbc>)
    6908:	429c      	cmp	r4, r3
    690a:	d1e8      	bne.n	68de <_puts_r+0x2a>
    690c:	68ec      	ldr	r4, [r5, #12]
    690e:	e7e6      	b.n	68de <_puts_r+0x2a>
    6910:	3b01      	subs	r3, #1
    6912:	3601      	adds	r6, #1
    6914:	60a3      	str	r3, [r4, #8]
    6916:	2b00      	cmp	r3, #0
    6918:	da04      	bge.n	6924 <_puts_r+0x70>
    691a:	69a2      	ldr	r2, [r4, #24]
    691c:	4293      	cmp	r3, r2
    691e:	db16      	blt.n	694e <_puts_r+0x9a>
    6920:	290a      	cmp	r1, #10
    6922:	d014      	beq.n	694e <_puts_r+0x9a>
    6924:	6823      	ldr	r3, [r4, #0]
    6926:	1c5a      	adds	r2, r3, #1
    6928:	6022      	str	r2, [r4, #0]
    692a:	7019      	strb	r1, [r3, #0]
    692c:	7831      	ldrb	r1, [r6, #0]
    692e:	68a3      	ldr	r3, [r4, #8]
    6930:	2900      	cmp	r1, #0
    6932:	d1ed      	bne.n	6910 <_puts_r+0x5c>
    6934:	3b01      	subs	r3, #1
    6936:	60a3      	str	r3, [r4, #8]
    6938:	2b00      	cmp	r3, #0
    693a:	da0f      	bge.n	695c <_puts_r+0xa8>
    693c:	0022      	movs	r2, r4
    693e:	310a      	adds	r1, #10
    6940:	0028      	movs	r0, r5
    6942:	f000 f8e9 	bl	6b18 <__swbuf_r>
    6946:	1c43      	adds	r3, r0, #1
    6948:	d0d5      	beq.n	68f6 <_puts_r+0x42>
    694a:	200a      	movs	r0, #10
    694c:	e7d5      	b.n	68fa <_puts_r+0x46>
    694e:	0022      	movs	r2, r4
    6950:	0028      	movs	r0, r5
    6952:	f000 f8e1 	bl	6b18 <__swbuf_r>
    6956:	1c43      	adds	r3, r0, #1
    6958:	d1e8      	bne.n	692c <_puts_r+0x78>
    695a:	e7cc      	b.n	68f6 <_puts_r+0x42>
    695c:	200a      	movs	r0, #10
    695e:	6823      	ldr	r3, [r4, #0]
    6960:	1c5a      	adds	r2, r3, #1
    6962:	6022      	str	r2, [r4, #0]
    6964:	7018      	strb	r0, [r3, #0]
    6966:	e7c8      	b.n	68fa <_puts_r+0x46>
    6968:	0000a158 	.word	0x0000a158
    696c:	0000a178 	.word	0x0000a178
    6970:	0000a138 	.word	0x0000a138

00006974 <puts>:
    6974:	b510      	push	{r4, lr}
    6976:	4b03      	ldr	r3, [pc, #12]	; (6984 <puts+0x10>)
    6978:	0001      	movs	r1, r0
    697a:	6818      	ldr	r0, [r3, #0]
    697c:	f7ff ff9a 	bl	68b4 <_puts_r>
    6980:	bd10      	pop	{r4, pc}
    6982:	46c0      	nop			; (mov r8, r8)
    6984:	20000114 	.word	0x20000114

00006988 <_sbrk_r>:
    6988:	2300      	movs	r3, #0
    698a:	b570      	push	{r4, r5, r6, lr}
    698c:	4c06      	ldr	r4, [pc, #24]	; (69a8 <_sbrk_r+0x20>)
    698e:	0005      	movs	r5, r0
    6990:	0008      	movs	r0, r1
    6992:	6023      	str	r3, [r4, #0]
    6994:	f7fc f896 	bl	2ac4 <_sbrk>
    6998:	1c43      	adds	r3, r0, #1
    699a:	d103      	bne.n	69a4 <_sbrk_r+0x1c>
    699c:	6823      	ldr	r3, [r4, #0]
    699e:	2b00      	cmp	r3, #0
    69a0:	d000      	beq.n	69a4 <_sbrk_r+0x1c>
    69a2:	602b      	str	r3, [r5, #0]
    69a4:	bd70      	pop	{r4, r5, r6, pc}
    69a6:	46c0      	nop			; (mov r8, r8)
    69a8:	200036f4 	.word	0x200036f4

000069ac <setbuf>:
    69ac:	424a      	negs	r2, r1
    69ae:	414a      	adcs	r2, r1
    69b0:	2380      	movs	r3, #128	; 0x80
    69b2:	b510      	push	{r4, lr}
    69b4:	0052      	lsls	r2, r2, #1
    69b6:	00db      	lsls	r3, r3, #3
    69b8:	f000 f802 	bl	69c0 <setvbuf>
    69bc:	bd10      	pop	{r4, pc}
	...

000069c0 <setvbuf>:
    69c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    69c2:	001d      	movs	r5, r3
    69c4:	4b4f      	ldr	r3, [pc, #316]	; (6b04 <setvbuf+0x144>)
    69c6:	b085      	sub	sp, #20
    69c8:	681e      	ldr	r6, [r3, #0]
    69ca:	0004      	movs	r4, r0
    69cc:	000f      	movs	r7, r1
    69ce:	9200      	str	r2, [sp, #0]
    69d0:	2e00      	cmp	r6, #0
    69d2:	d005      	beq.n	69e0 <setvbuf+0x20>
    69d4:	69b3      	ldr	r3, [r6, #24]
    69d6:	2b00      	cmp	r3, #0
    69d8:	d102      	bne.n	69e0 <setvbuf+0x20>
    69da:	0030      	movs	r0, r6
    69dc:	f000 fa60 	bl	6ea0 <__sinit>
    69e0:	4b49      	ldr	r3, [pc, #292]	; (6b08 <setvbuf+0x148>)
    69e2:	429c      	cmp	r4, r3
    69e4:	d150      	bne.n	6a88 <setvbuf+0xc8>
    69e6:	6874      	ldr	r4, [r6, #4]
    69e8:	9b00      	ldr	r3, [sp, #0]
    69ea:	2b02      	cmp	r3, #2
    69ec:	d005      	beq.n	69fa <setvbuf+0x3a>
    69ee:	2b01      	cmp	r3, #1
    69f0:	d900      	bls.n	69f4 <setvbuf+0x34>
    69f2:	e084      	b.n	6afe <setvbuf+0x13e>
    69f4:	2d00      	cmp	r5, #0
    69f6:	da00      	bge.n	69fa <setvbuf+0x3a>
    69f8:	e081      	b.n	6afe <setvbuf+0x13e>
    69fa:	0021      	movs	r1, r4
    69fc:	0030      	movs	r0, r6
    69fe:	f000 f9e1 	bl	6dc4 <_fflush_r>
    6a02:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6a04:	2900      	cmp	r1, #0
    6a06:	d008      	beq.n	6a1a <setvbuf+0x5a>
    6a08:	0023      	movs	r3, r4
    6a0a:	3344      	adds	r3, #68	; 0x44
    6a0c:	4299      	cmp	r1, r3
    6a0e:	d002      	beq.n	6a16 <setvbuf+0x56>
    6a10:	0030      	movs	r0, r6
    6a12:	f7ff fe8d 	bl	6730 <_free_r>
    6a16:	2300      	movs	r3, #0
    6a18:	6363      	str	r3, [r4, #52]	; 0x34
    6a1a:	2300      	movs	r3, #0
    6a1c:	61a3      	str	r3, [r4, #24]
    6a1e:	6063      	str	r3, [r4, #4]
    6a20:	89a3      	ldrh	r3, [r4, #12]
    6a22:	061b      	lsls	r3, r3, #24
    6a24:	d503      	bpl.n	6a2e <setvbuf+0x6e>
    6a26:	6921      	ldr	r1, [r4, #16]
    6a28:	0030      	movs	r0, r6
    6a2a:	f7ff fe81 	bl	6730 <_free_r>
    6a2e:	89a3      	ldrh	r3, [r4, #12]
    6a30:	4a36      	ldr	r2, [pc, #216]	; (6b0c <setvbuf+0x14c>)
    6a32:	4013      	ands	r3, r2
    6a34:	81a3      	strh	r3, [r4, #12]
    6a36:	9b00      	ldr	r3, [sp, #0]
    6a38:	2b02      	cmp	r3, #2
    6a3a:	d05a      	beq.n	6af2 <setvbuf+0x132>
    6a3c:	ab03      	add	r3, sp, #12
    6a3e:	aa02      	add	r2, sp, #8
    6a40:	0021      	movs	r1, r4
    6a42:	0030      	movs	r0, r6
    6a44:	f000 fac2 	bl	6fcc <__swhatbuf_r>
    6a48:	89a3      	ldrh	r3, [r4, #12]
    6a4a:	4318      	orrs	r0, r3
    6a4c:	81a0      	strh	r0, [r4, #12]
    6a4e:	2d00      	cmp	r5, #0
    6a50:	d124      	bne.n	6a9c <setvbuf+0xdc>
    6a52:	9d02      	ldr	r5, [sp, #8]
    6a54:	0028      	movs	r0, r5
    6a56:	f7ff fe3d 	bl	66d4 <malloc>
    6a5a:	9501      	str	r5, [sp, #4]
    6a5c:	1e07      	subs	r7, r0, #0
    6a5e:	d142      	bne.n	6ae6 <setvbuf+0x126>
    6a60:	9b02      	ldr	r3, [sp, #8]
    6a62:	9301      	str	r3, [sp, #4]
    6a64:	42ab      	cmp	r3, r5
    6a66:	d139      	bne.n	6adc <setvbuf+0x11c>
    6a68:	2001      	movs	r0, #1
    6a6a:	4240      	negs	r0, r0
    6a6c:	2302      	movs	r3, #2
    6a6e:	89a2      	ldrh	r2, [r4, #12]
    6a70:	4313      	orrs	r3, r2
    6a72:	81a3      	strh	r3, [r4, #12]
    6a74:	2300      	movs	r3, #0
    6a76:	60a3      	str	r3, [r4, #8]
    6a78:	0023      	movs	r3, r4
    6a7a:	3347      	adds	r3, #71	; 0x47
    6a7c:	6023      	str	r3, [r4, #0]
    6a7e:	6123      	str	r3, [r4, #16]
    6a80:	2301      	movs	r3, #1
    6a82:	6163      	str	r3, [r4, #20]
    6a84:	b005      	add	sp, #20
    6a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a88:	4b21      	ldr	r3, [pc, #132]	; (6b10 <setvbuf+0x150>)
    6a8a:	429c      	cmp	r4, r3
    6a8c:	d101      	bne.n	6a92 <setvbuf+0xd2>
    6a8e:	68b4      	ldr	r4, [r6, #8]
    6a90:	e7aa      	b.n	69e8 <setvbuf+0x28>
    6a92:	4b20      	ldr	r3, [pc, #128]	; (6b14 <setvbuf+0x154>)
    6a94:	429c      	cmp	r4, r3
    6a96:	d1a7      	bne.n	69e8 <setvbuf+0x28>
    6a98:	68f4      	ldr	r4, [r6, #12]
    6a9a:	e7a5      	b.n	69e8 <setvbuf+0x28>
    6a9c:	2f00      	cmp	r7, #0
    6a9e:	d0d9      	beq.n	6a54 <setvbuf+0x94>
    6aa0:	69b3      	ldr	r3, [r6, #24]
    6aa2:	2b00      	cmp	r3, #0
    6aa4:	d102      	bne.n	6aac <setvbuf+0xec>
    6aa6:	0030      	movs	r0, r6
    6aa8:	f000 f9fa 	bl	6ea0 <__sinit>
    6aac:	9b00      	ldr	r3, [sp, #0]
    6aae:	2b01      	cmp	r3, #1
    6ab0:	d103      	bne.n	6aba <setvbuf+0xfa>
    6ab2:	89a3      	ldrh	r3, [r4, #12]
    6ab4:	9a00      	ldr	r2, [sp, #0]
    6ab6:	431a      	orrs	r2, r3
    6ab8:	81a2      	strh	r2, [r4, #12]
    6aba:	2008      	movs	r0, #8
    6abc:	89a3      	ldrh	r3, [r4, #12]
    6abe:	6027      	str	r7, [r4, #0]
    6ac0:	6127      	str	r7, [r4, #16]
    6ac2:	6165      	str	r5, [r4, #20]
    6ac4:	4018      	ands	r0, r3
    6ac6:	d018      	beq.n	6afa <setvbuf+0x13a>
    6ac8:	2001      	movs	r0, #1
    6aca:	4018      	ands	r0, r3
    6acc:	2300      	movs	r3, #0
    6ace:	4298      	cmp	r0, r3
    6ad0:	d011      	beq.n	6af6 <setvbuf+0x136>
    6ad2:	426d      	negs	r5, r5
    6ad4:	60a3      	str	r3, [r4, #8]
    6ad6:	61a5      	str	r5, [r4, #24]
    6ad8:	0018      	movs	r0, r3
    6ada:	e7d3      	b.n	6a84 <setvbuf+0xc4>
    6adc:	9801      	ldr	r0, [sp, #4]
    6ade:	f7ff fdf9 	bl	66d4 <malloc>
    6ae2:	1e07      	subs	r7, r0, #0
    6ae4:	d0c0      	beq.n	6a68 <setvbuf+0xa8>
    6ae6:	2380      	movs	r3, #128	; 0x80
    6ae8:	89a2      	ldrh	r2, [r4, #12]
    6aea:	9d01      	ldr	r5, [sp, #4]
    6aec:	4313      	orrs	r3, r2
    6aee:	81a3      	strh	r3, [r4, #12]
    6af0:	e7d6      	b.n	6aa0 <setvbuf+0xe0>
    6af2:	2000      	movs	r0, #0
    6af4:	e7ba      	b.n	6a6c <setvbuf+0xac>
    6af6:	60a5      	str	r5, [r4, #8]
    6af8:	e7c4      	b.n	6a84 <setvbuf+0xc4>
    6afa:	60a0      	str	r0, [r4, #8]
    6afc:	e7c2      	b.n	6a84 <setvbuf+0xc4>
    6afe:	2001      	movs	r0, #1
    6b00:	4240      	negs	r0, r0
    6b02:	e7bf      	b.n	6a84 <setvbuf+0xc4>
    6b04:	20000114 	.word	0x20000114
    6b08:	0000a158 	.word	0x0000a158
    6b0c:	fffff35c 	.word	0xfffff35c
    6b10:	0000a178 	.word	0x0000a178
    6b14:	0000a138 	.word	0x0000a138

00006b18 <__swbuf_r>:
    6b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b1a:	0005      	movs	r5, r0
    6b1c:	000e      	movs	r6, r1
    6b1e:	0014      	movs	r4, r2
    6b20:	2800      	cmp	r0, #0
    6b22:	d004      	beq.n	6b2e <__swbuf_r+0x16>
    6b24:	6983      	ldr	r3, [r0, #24]
    6b26:	2b00      	cmp	r3, #0
    6b28:	d101      	bne.n	6b2e <__swbuf_r+0x16>
    6b2a:	f000 f9b9 	bl	6ea0 <__sinit>
    6b2e:	4b22      	ldr	r3, [pc, #136]	; (6bb8 <__swbuf_r+0xa0>)
    6b30:	429c      	cmp	r4, r3
    6b32:	d12d      	bne.n	6b90 <__swbuf_r+0x78>
    6b34:	686c      	ldr	r4, [r5, #4]
    6b36:	69a3      	ldr	r3, [r4, #24]
    6b38:	60a3      	str	r3, [r4, #8]
    6b3a:	89a3      	ldrh	r3, [r4, #12]
    6b3c:	071b      	lsls	r3, r3, #28
    6b3e:	d531      	bpl.n	6ba4 <__swbuf_r+0x8c>
    6b40:	6923      	ldr	r3, [r4, #16]
    6b42:	2b00      	cmp	r3, #0
    6b44:	d02e      	beq.n	6ba4 <__swbuf_r+0x8c>
    6b46:	6823      	ldr	r3, [r4, #0]
    6b48:	6922      	ldr	r2, [r4, #16]
    6b4a:	b2f7      	uxtb	r7, r6
    6b4c:	1a98      	subs	r0, r3, r2
    6b4e:	6963      	ldr	r3, [r4, #20]
    6b50:	b2f6      	uxtb	r6, r6
    6b52:	4298      	cmp	r0, r3
    6b54:	db05      	blt.n	6b62 <__swbuf_r+0x4a>
    6b56:	0021      	movs	r1, r4
    6b58:	0028      	movs	r0, r5
    6b5a:	f000 f933 	bl	6dc4 <_fflush_r>
    6b5e:	2800      	cmp	r0, #0
    6b60:	d126      	bne.n	6bb0 <__swbuf_r+0x98>
    6b62:	68a3      	ldr	r3, [r4, #8]
    6b64:	3001      	adds	r0, #1
    6b66:	3b01      	subs	r3, #1
    6b68:	60a3      	str	r3, [r4, #8]
    6b6a:	6823      	ldr	r3, [r4, #0]
    6b6c:	1c5a      	adds	r2, r3, #1
    6b6e:	6022      	str	r2, [r4, #0]
    6b70:	701f      	strb	r7, [r3, #0]
    6b72:	6963      	ldr	r3, [r4, #20]
    6b74:	4298      	cmp	r0, r3
    6b76:	d004      	beq.n	6b82 <__swbuf_r+0x6a>
    6b78:	89a3      	ldrh	r3, [r4, #12]
    6b7a:	07db      	lsls	r3, r3, #31
    6b7c:	d51a      	bpl.n	6bb4 <__swbuf_r+0x9c>
    6b7e:	2e0a      	cmp	r6, #10
    6b80:	d118      	bne.n	6bb4 <__swbuf_r+0x9c>
    6b82:	0021      	movs	r1, r4
    6b84:	0028      	movs	r0, r5
    6b86:	f000 f91d 	bl	6dc4 <_fflush_r>
    6b8a:	2800      	cmp	r0, #0
    6b8c:	d012      	beq.n	6bb4 <__swbuf_r+0x9c>
    6b8e:	e00f      	b.n	6bb0 <__swbuf_r+0x98>
    6b90:	4b0a      	ldr	r3, [pc, #40]	; (6bbc <__swbuf_r+0xa4>)
    6b92:	429c      	cmp	r4, r3
    6b94:	d101      	bne.n	6b9a <__swbuf_r+0x82>
    6b96:	68ac      	ldr	r4, [r5, #8]
    6b98:	e7cd      	b.n	6b36 <__swbuf_r+0x1e>
    6b9a:	4b09      	ldr	r3, [pc, #36]	; (6bc0 <__swbuf_r+0xa8>)
    6b9c:	429c      	cmp	r4, r3
    6b9e:	d1ca      	bne.n	6b36 <__swbuf_r+0x1e>
    6ba0:	68ec      	ldr	r4, [r5, #12]
    6ba2:	e7c8      	b.n	6b36 <__swbuf_r+0x1e>
    6ba4:	0021      	movs	r1, r4
    6ba6:	0028      	movs	r0, r5
    6ba8:	f000 f80c 	bl	6bc4 <__swsetup_r>
    6bac:	2800      	cmp	r0, #0
    6bae:	d0ca      	beq.n	6b46 <__swbuf_r+0x2e>
    6bb0:	2601      	movs	r6, #1
    6bb2:	4276      	negs	r6, r6
    6bb4:	0030      	movs	r0, r6
    6bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bb8:	0000a158 	.word	0x0000a158
    6bbc:	0000a178 	.word	0x0000a178
    6bc0:	0000a138 	.word	0x0000a138

00006bc4 <__swsetup_r>:
    6bc4:	4b36      	ldr	r3, [pc, #216]	; (6ca0 <__swsetup_r+0xdc>)
    6bc6:	b570      	push	{r4, r5, r6, lr}
    6bc8:	681d      	ldr	r5, [r3, #0]
    6bca:	0006      	movs	r6, r0
    6bcc:	000c      	movs	r4, r1
    6bce:	2d00      	cmp	r5, #0
    6bd0:	d005      	beq.n	6bde <__swsetup_r+0x1a>
    6bd2:	69ab      	ldr	r3, [r5, #24]
    6bd4:	2b00      	cmp	r3, #0
    6bd6:	d102      	bne.n	6bde <__swsetup_r+0x1a>
    6bd8:	0028      	movs	r0, r5
    6bda:	f000 f961 	bl	6ea0 <__sinit>
    6bde:	4b31      	ldr	r3, [pc, #196]	; (6ca4 <__swsetup_r+0xe0>)
    6be0:	429c      	cmp	r4, r3
    6be2:	d10f      	bne.n	6c04 <__swsetup_r+0x40>
    6be4:	686c      	ldr	r4, [r5, #4]
    6be6:	230c      	movs	r3, #12
    6be8:	5ee2      	ldrsh	r2, [r4, r3]
    6bea:	b293      	uxth	r3, r2
    6bec:	0719      	lsls	r1, r3, #28
    6bee:	d42d      	bmi.n	6c4c <__swsetup_r+0x88>
    6bf0:	06d9      	lsls	r1, r3, #27
    6bf2:	d411      	bmi.n	6c18 <__swsetup_r+0x54>
    6bf4:	2309      	movs	r3, #9
    6bf6:	2001      	movs	r0, #1
    6bf8:	6033      	str	r3, [r6, #0]
    6bfa:	3337      	adds	r3, #55	; 0x37
    6bfc:	4313      	orrs	r3, r2
    6bfe:	81a3      	strh	r3, [r4, #12]
    6c00:	4240      	negs	r0, r0
    6c02:	bd70      	pop	{r4, r5, r6, pc}
    6c04:	4b28      	ldr	r3, [pc, #160]	; (6ca8 <__swsetup_r+0xe4>)
    6c06:	429c      	cmp	r4, r3
    6c08:	d101      	bne.n	6c0e <__swsetup_r+0x4a>
    6c0a:	68ac      	ldr	r4, [r5, #8]
    6c0c:	e7eb      	b.n	6be6 <__swsetup_r+0x22>
    6c0e:	4b27      	ldr	r3, [pc, #156]	; (6cac <__swsetup_r+0xe8>)
    6c10:	429c      	cmp	r4, r3
    6c12:	d1e8      	bne.n	6be6 <__swsetup_r+0x22>
    6c14:	68ec      	ldr	r4, [r5, #12]
    6c16:	e7e6      	b.n	6be6 <__swsetup_r+0x22>
    6c18:	075b      	lsls	r3, r3, #29
    6c1a:	d513      	bpl.n	6c44 <__swsetup_r+0x80>
    6c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6c1e:	2900      	cmp	r1, #0
    6c20:	d008      	beq.n	6c34 <__swsetup_r+0x70>
    6c22:	0023      	movs	r3, r4
    6c24:	3344      	adds	r3, #68	; 0x44
    6c26:	4299      	cmp	r1, r3
    6c28:	d002      	beq.n	6c30 <__swsetup_r+0x6c>
    6c2a:	0030      	movs	r0, r6
    6c2c:	f7ff fd80 	bl	6730 <_free_r>
    6c30:	2300      	movs	r3, #0
    6c32:	6363      	str	r3, [r4, #52]	; 0x34
    6c34:	2224      	movs	r2, #36	; 0x24
    6c36:	89a3      	ldrh	r3, [r4, #12]
    6c38:	4393      	bics	r3, r2
    6c3a:	81a3      	strh	r3, [r4, #12]
    6c3c:	2300      	movs	r3, #0
    6c3e:	6063      	str	r3, [r4, #4]
    6c40:	6923      	ldr	r3, [r4, #16]
    6c42:	6023      	str	r3, [r4, #0]
    6c44:	2308      	movs	r3, #8
    6c46:	89a2      	ldrh	r2, [r4, #12]
    6c48:	4313      	orrs	r3, r2
    6c4a:	81a3      	strh	r3, [r4, #12]
    6c4c:	6923      	ldr	r3, [r4, #16]
    6c4e:	2b00      	cmp	r3, #0
    6c50:	d10b      	bne.n	6c6a <__swsetup_r+0xa6>
    6c52:	21a0      	movs	r1, #160	; 0xa0
    6c54:	2280      	movs	r2, #128	; 0x80
    6c56:	89a3      	ldrh	r3, [r4, #12]
    6c58:	0089      	lsls	r1, r1, #2
    6c5a:	0092      	lsls	r2, r2, #2
    6c5c:	400b      	ands	r3, r1
    6c5e:	4293      	cmp	r3, r2
    6c60:	d003      	beq.n	6c6a <__swsetup_r+0xa6>
    6c62:	0021      	movs	r1, r4
    6c64:	0030      	movs	r0, r6
    6c66:	f000 f9d9 	bl	701c <__smakebuf_r>
    6c6a:	2301      	movs	r3, #1
    6c6c:	89a2      	ldrh	r2, [r4, #12]
    6c6e:	4013      	ands	r3, r2
    6c70:	d011      	beq.n	6c96 <__swsetup_r+0xd2>
    6c72:	2300      	movs	r3, #0
    6c74:	60a3      	str	r3, [r4, #8]
    6c76:	6963      	ldr	r3, [r4, #20]
    6c78:	425b      	negs	r3, r3
    6c7a:	61a3      	str	r3, [r4, #24]
    6c7c:	2000      	movs	r0, #0
    6c7e:	6923      	ldr	r3, [r4, #16]
    6c80:	4283      	cmp	r3, r0
    6c82:	d1be      	bne.n	6c02 <__swsetup_r+0x3e>
    6c84:	230c      	movs	r3, #12
    6c86:	5ee2      	ldrsh	r2, [r4, r3]
    6c88:	0613      	lsls	r3, r2, #24
    6c8a:	d5ba      	bpl.n	6c02 <__swsetup_r+0x3e>
    6c8c:	2340      	movs	r3, #64	; 0x40
    6c8e:	4313      	orrs	r3, r2
    6c90:	81a3      	strh	r3, [r4, #12]
    6c92:	3801      	subs	r0, #1
    6c94:	e7b5      	b.n	6c02 <__swsetup_r+0x3e>
    6c96:	0792      	lsls	r2, r2, #30
    6c98:	d400      	bmi.n	6c9c <__swsetup_r+0xd8>
    6c9a:	6963      	ldr	r3, [r4, #20]
    6c9c:	60a3      	str	r3, [r4, #8]
    6c9e:	e7ed      	b.n	6c7c <__swsetup_r+0xb8>
    6ca0:	20000114 	.word	0x20000114
    6ca4:	0000a158 	.word	0x0000a158
    6ca8:	0000a178 	.word	0x0000a178
    6cac:	0000a138 	.word	0x0000a138

00006cb0 <__sflush_r>:
    6cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6cb2:	898a      	ldrh	r2, [r1, #12]
    6cb4:	0005      	movs	r5, r0
    6cb6:	000c      	movs	r4, r1
    6cb8:	0713      	lsls	r3, r2, #28
    6cba:	d460      	bmi.n	6d7e <__sflush_r+0xce>
    6cbc:	684b      	ldr	r3, [r1, #4]
    6cbe:	2b00      	cmp	r3, #0
    6cc0:	dc04      	bgt.n	6ccc <__sflush_r+0x1c>
    6cc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6cc4:	2b00      	cmp	r3, #0
    6cc6:	dc01      	bgt.n	6ccc <__sflush_r+0x1c>
    6cc8:	2000      	movs	r0, #0
    6cca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6ccc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6cce:	2f00      	cmp	r7, #0
    6cd0:	d0fa      	beq.n	6cc8 <__sflush_r+0x18>
    6cd2:	2300      	movs	r3, #0
    6cd4:	682e      	ldr	r6, [r5, #0]
    6cd6:	602b      	str	r3, [r5, #0]
    6cd8:	2380      	movs	r3, #128	; 0x80
    6cda:	015b      	lsls	r3, r3, #5
    6cdc:	401a      	ands	r2, r3
    6cde:	d034      	beq.n	6d4a <__sflush_r+0x9a>
    6ce0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6ce2:	89a3      	ldrh	r3, [r4, #12]
    6ce4:	075b      	lsls	r3, r3, #29
    6ce6:	d506      	bpl.n	6cf6 <__sflush_r+0x46>
    6ce8:	6863      	ldr	r3, [r4, #4]
    6cea:	1ac0      	subs	r0, r0, r3
    6cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6cee:	2b00      	cmp	r3, #0
    6cf0:	d001      	beq.n	6cf6 <__sflush_r+0x46>
    6cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6cf4:	1ac0      	subs	r0, r0, r3
    6cf6:	0002      	movs	r2, r0
    6cf8:	6a21      	ldr	r1, [r4, #32]
    6cfa:	2300      	movs	r3, #0
    6cfc:	0028      	movs	r0, r5
    6cfe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6d00:	47b8      	blx	r7
    6d02:	89a1      	ldrh	r1, [r4, #12]
    6d04:	1c43      	adds	r3, r0, #1
    6d06:	d106      	bne.n	6d16 <__sflush_r+0x66>
    6d08:	682b      	ldr	r3, [r5, #0]
    6d0a:	2b1d      	cmp	r3, #29
    6d0c:	d831      	bhi.n	6d72 <__sflush_r+0xc2>
    6d0e:	4a2c      	ldr	r2, [pc, #176]	; (6dc0 <__sflush_r+0x110>)
    6d10:	40da      	lsrs	r2, r3
    6d12:	07d3      	lsls	r3, r2, #31
    6d14:	d52d      	bpl.n	6d72 <__sflush_r+0xc2>
    6d16:	2300      	movs	r3, #0
    6d18:	6063      	str	r3, [r4, #4]
    6d1a:	6923      	ldr	r3, [r4, #16]
    6d1c:	6023      	str	r3, [r4, #0]
    6d1e:	04cb      	lsls	r3, r1, #19
    6d20:	d505      	bpl.n	6d2e <__sflush_r+0x7e>
    6d22:	1c43      	adds	r3, r0, #1
    6d24:	d102      	bne.n	6d2c <__sflush_r+0x7c>
    6d26:	682b      	ldr	r3, [r5, #0]
    6d28:	2b00      	cmp	r3, #0
    6d2a:	d100      	bne.n	6d2e <__sflush_r+0x7e>
    6d2c:	6560      	str	r0, [r4, #84]	; 0x54
    6d2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6d30:	602e      	str	r6, [r5, #0]
    6d32:	2900      	cmp	r1, #0
    6d34:	d0c8      	beq.n	6cc8 <__sflush_r+0x18>
    6d36:	0023      	movs	r3, r4
    6d38:	3344      	adds	r3, #68	; 0x44
    6d3a:	4299      	cmp	r1, r3
    6d3c:	d002      	beq.n	6d44 <__sflush_r+0x94>
    6d3e:	0028      	movs	r0, r5
    6d40:	f7ff fcf6 	bl	6730 <_free_r>
    6d44:	2000      	movs	r0, #0
    6d46:	6360      	str	r0, [r4, #52]	; 0x34
    6d48:	e7bf      	b.n	6cca <__sflush_r+0x1a>
    6d4a:	2301      	movs	r3, #1
    6d4c:	6a21      	ldr	r1, [r4, #32]
    6d4e:	0028      	movs	r0, r5
    6d50:	47b8      	blx	r7
    6d52:	1c43      	adds	r3, r0, #1
    6d54:	d1c5      	bne.n	6ce2 <__sflush_r+0x32>
    6d56:	682b      	ldr	r3, [r5, #0]
    6d58:	2b00      	cmp	r3, #0
    6d5a:	d0c2      	beq.n	6ce2 <__sflush_r+0x32>
    6d5c:	2b1d      	cmp	r3, #29
    6d5e:	d001      	beq.n	6d64 <__sflush_r+0xb4>
    6d60:	2b16      	cmp	r3, #22
    6d62:	d101      	bne.n	6d68 <__sflush_r+0xb8>
    6d64:	602e      	str	r6, [r5, #0]
    6d66:	e7af      	b.n	6cc8 <__sflush_r+0x18>
    6d68:	2340      	movs	r3, #64	; 0x40
    6d6a:	89a2      	ldrh	r2, [r4, #12]
    6d6c:	4313      	orrs	r3, r2
    6d6e:	81a3      	strh	r3, [r4, #12]
    6d70:	e7ab      	b.n	6cca <__sflush_r+0x1a>
    6d72:	2340      	movs	r3, #64	; 0x40
    6d74:	430b      	orrs	r3, r1
    6d76:	2001      	movs	r0, #1
    6d78:	81a3      	strh	r3, [r4, #12]
    6d7a:	4240      	negs	r0, r0
    6d7c:	e7a5      	b.n	6cca <__sflush_r+0x1a>
    6d7e:	690f      	ldr	r7, [r1, #16]
    6d80:	2f00      	cmp	r7, #0
    6d82:	d0a1      	beq.n	6cc8 <__sflush_r+0x18>
    6d84:	680b      	ldr	r3, [r1, #0]
    6d86:	600f      	str	r7, [r1, #0]
    6d88:	1bdb      	subs	r3, r3, r7
    6d8a:	9301      	str	r3, [sp, #4]
    6d8c:	2300      	movs	r3, #0
    6d8e:	0792      	lsls	r2, r2, #30
    6d90:	d100      	bne.n	6d94 <__sflush_r+0xe4>
    6d92:	694b      	ldr	r3, [r1, #20]
    6d94:	60a3      	str	r3, [r4, #8]
    6d96:	9b01      	ldr	r3, [sp, #4]
    6d98:	2b00      	cmp	r3, #0
    6d9a:	dc00      	bgt.n	6d9e <__sflush_r+0xee>
    6d9c:	e794      	b.n	6cc8 <__sflush_r+0x18>
    6d9e:	9b01      	ldr	r3, [sp, #4]
    6da0:	003a      	movs	r2, r7
    6da2:	6a21      	ldr	r1, [r4, #32]
    6da4:	0028      	movs	r0, r5
    6da6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6da8:	47b0      	blx	r6
    6daa:	2800      	cmp	r0, #0
    6dac:	dc03      	bgt.n	6db6 <__sflush_r+0x106>
    6dae:	2340      	movs	r3, #64	; 0x40
    6db0:	89a2      	ldrh	r2, [r4, #12]
    6db2:	4313      	orrs	r3, r2
    6db4:	e7df      	b.n	6d76 <__sflush_r+0xc6>
    6db6:	9b01      	ldr	r3, [sp, #4]
    6db8:	183f      	adds	r7, r7, r0
    6dba:	1a1b      	subs	r3, r3, r0
    6dbc:	9301      	str	r3, [sp, #4]
    6dbe:	e7ea      	b.n	6d96 <__sflush_r+0xe6>
    6dc0:	20400001 	.word	0x20400001

00006dc4 <_fflush_r>:
    6dc4:	690b      	ldr	r3, [r1, #16]
    6dc6:	b570      	push	{r4, r5, r6, lr}
    6dc8:	0005      	movs	r5, r0
    6dca:	000c      	movs	r4, r1
    6dcc:	2b00      	cmp	r3, #0
    6dce:	d101      	bne.n	6dd4 <_fflush_r+0x10>
    6dd0:	2000      	movs	r0, #0
    6dd2:	bd70      	pop	{r4, r5, r6, pc}
    6dd4:	2800      	cmp	r0, #0
    6dd6:	d004      	beq.n	6de2 <_fflush_r+0x1e>
    6dd8:	6983      	ldr	r3, [r0, #24]
    6dda:	2b00      	cmp	r3, #0
    6ddc:	d101      	bne.n	6de2 <_fflush_r+0x1e>
    6dde:	f000 f85f 	bl	6ea0 <__sinit>
    6de2:	4b0b      	ldr	r3, [pc, #44]	; (6e10 <_fflush_r+0x4c>)
    6de4:	429c      	cmp	r4, r3
    6de6:	d109      	bne.n	6dfc <_fflush_r+0x38>
    6de8:	686c      	ldr	r4, [r5, #4]
    6dea:	220c      	movs	r2, #12
    6dec:	5ea3      	ldrsh	r3, [r4, r2]
    6dee:	2b00      	cmp	r3, #0
    6df0:	d0ee      	beq.n	6dd0 <_fflush_r+0xc>
    6df2:	0021      	movs	r1, r4
    6df4:	0028      	movs	r0, r5
    6df6:	f7ff ff5b 	bl	6cb0 <__sflush_r>
    6dfa:	e7ea      	b.n	6dd2 <_fflush_r+0xe>
    6dfc:	4b05      	ldr	r3, [pc, #20]	; (6e14 <_fflush_r+0x50>)
    6dfe:	429c      	cmp	r4, r3
    6e00:	d101      	bne.n	6e06 <_fflush_r+0x42>
    6e02:	68ac      	ldr	r4, [r5, #8]
    6e04:	e7f1      	b.n	6dea <_fflush_r+0x26>
    6e06:	4b04      	ldr	r3, [pc, #16]	; (6e18 <_fflush_r+0x54>)
    6e08:	429c      	cmp	r4, r3
    6e0a:	d1ee      	bne.n	6dea <_fflush_r+0x26>
    6e0c:	68ec      	ldr	r4, [r5, #12]
    6e0e:	e7ec      	b.n	6dea <_fflush_r+0x26>
    6e10:	0000a158 	.word	0x0000a158
    6e14:	0000a178 	.word	0x0000a178
    6e18:	0000a138 	.word	0x0000a138

00006e1c <_cleanup_r>:
    6e1c:	b510      	push	{r4, lr}
    6e1e:	4902      	ldr	r1, [pc, #8]	; (6e28 <_cleanup_r+0xc>)
    6e20:	f000 f8b2 	bl	6f88 <_fwalk_reent>
    6e24:	bd10      	pop	{r4, pc}
    6e26:	46c0      	nop			; (mov r8, r8)
    6e28:	00006dc5 	.word	0x00006dc5

00006e2c <std.isra.0>:
    6e2c:	2300      	movs	r3, #0
    6e2e:	b510      	push	{r4, lr}
    6e30:	0004      	movs	r4, r0
    6e32:	6003      	str	r3, [r0, #0]
    6e34:	6043      	str	r3, [r0, #4]
    6e36:	6083      	str	r3, [r0, #8]
    6e38:	8181      	strh	r1, [r0, #12]
    6e3a:	6643      	str	r3, [r0, #100]	; 0x64
    6e3c:	81c2      	strh	r2, [r0, #14]
    6e3e:	6103      	str	r3, [r0, #16]
    6e40:	6143      	str	r3, [r0, #20]
    6e42:	6183      	str	r3, [r0, #24]
    6e44:	0019      	movs	r1, r3
    6e46:	2208      	movs	r2, #8
    6e48:	305c      	adds	r0, #92	; 0x5c
    6e4a:	f7ff fc68 	bl	671e <memset>
    6e4e:	4b05      	ldr	r3, [pc, #20]	; (6e64 <std.isra.0+0x38>)
    6e50:	6224      	str	r4, [r4, #32]
    6e52:	6263      	str	r3, [r4, #36]	; 0x24
    6e54:	4b04      	ldr	r3, [pc, #16]	; (6e68 <std.isra.0+0x3c>)
    6e56:	62a3      	str	r3, [r4, #40]	; 0x28
    6e58:	4b04      	ldr	r3, [pc, #16]	; (6e6c <std.isra.0+0x40>)
    6e5a:	62e3      	str	r3, [r4, #44]	; 0x2c
    6e5c:	4b04      	ldr	r3, [pc, #16]	; (6e70 <std.isra.0+0x44>)
    6e5e:	6323      	str	r3, [r4, #48]	; 0x30
    6e60:	bd10      	pop	{r4, pc}
    6e62:	46c0      	nop			; (mov r8, r8)
    6e64:	00007641 	.word	0x00007641
    6e68:	00007669 	.word	0x00007669
    6e6c:	000076a1 	.word	0x000076a1
    6e70:	000076cd 	.word	0x000076cd

00006e74 <__sfmoreglue>:
    6e74:	b570      	push	{r4, r5, r6, lr}
    6e76:	2568      	movs	r5, #104	; 0x68
    6e78:	1e4a      	subs	r2, r1, #1
    6e7a:	4355      	muls	r5, r2
    6e7c:	000e      	movs	r6, r1
    6e7e:	0029      	movs	r1, r5
    6e80:	3174      	adds	r1, #116	; 0x74
    6e82:	f7ff fc9f 	bl	67c4 <_malloc_r>
    6e86:	1e04      	subs	r4, r0, #0
    6e88:	d008      	beq.n	6e9c <__sfmoreglue+0x28>
    6e8a:	2100      	movs	r1, #0
    6e8c:	002a      	movs	r2, r5
    6e8e:	6001      	str	r1, [r0, #0]
    6e90:	6046      	str	r6, [r0, #4]
    6e92:	300c      	adds	r0, #12
    6e94:	60a0      	str	r0, [r4, #8]
    6e96:	3268      	adds	r2, #104	; 0x68
    6e98:	f7ff fc41 	bl	671e <memset>
    6e9c:	0020      	movs	r0, r4
    6e9e:	bd70      	pop	{r4, r5, r6, pc}

00006ea0 <__sinit>:
    6ea0:	6983      	ldr	r3, [r0, #24]
    6ea2:	b513      	push	{r0, r1, r4, lr}
    6ea4:	0004      	movs	r4, r0
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d128      	bne.n	6efc <__sinit+0x5c>
    6eaa:	6483      	str	r3, [r0, #72]	; 0x48
    6eac:	64c3      	str	r3, [r0, #76]	; 0x4c
    6eae:	6503      	str	r3, [r0, #80]	; 0x50
    6eb0:	4b13      	ldr	r3, [pc, #76]	; (6f00 <__sinit+0x60>)
    6eb2:	4a14      	ldr	r2, [pc, #80]	; (6f04 <__sinit+0x64>)
    6eb4:	681b      	ldr	r3, [r3, #0]
    6eb6:	6282      	str	r2, [r0, #40]	; 0x28
    6eb8:	9301      	str	r3, [sp, #4]
    6eba:	4298      	cmp	r0, r3
    6ebc:	d101      	bne.n	6ec2 <__sinit+0x22>
    6ebe:	2301      	movs	r3, #1
    6ec0:	6183      	str	r3, [r0, #24]
    6ec2:	0020      	movs	r0, r4
    6ec4:	f000 f820 	bl	6f08 <__sfp>
    6ec8:	6060      	str	r0, [r4, #4]
    6eca:	0020      	movs	r0, r4
    6ecc:	f000 f81c 	bl	6f08 <__sfp>
    6ed0:	60a0      	str	r0, [r4, #8]
    6ed2:	0020      	movs	r0, r4
    6ed4:	f000 f818 	bl	6f08 <__sfp>
    6ed8:	2200      	movs	r2, #0
    6eda:	60e0      	str	r0, [r4, #12]
    6edc:	2104      	movs	r1, #4
    6ede:	6860      	ldr	r0, [r4, #4]
    6ee0:	f7ff ffa4 	bl	6e2c <std.isra.0>
    6ee4:	2201      	movs	r2, #1
    6ee6:	2109      	movs	r1, #9
    6ee8:	68a0      	ldr	r0, [r4, #8]
    6eea:	f7ff ff9f 	bl	6e2c <std.isra.0>
    6eee:	2202      	movs	r2, #2
    6ef0:	2112      	movs	r1, #18
    6ef2:	68e0      	ldr	r0, [r4, #12]
    6ef4:	f7ff ff9a 	bl	6e2c <std.isra.0>
    6ef8:	2301      	movs	r3, #1
    6efa:	61a3      	str	r3, [r4, #24]
    6efc:	bd13      	pop	{r0, r1, r4, pc}
    6efe:	46c0      	nop			; (mov r8, r8)
    6f00:	0000a134 	.word	0x0000a134
    6f04:	00006e1d 	.word	0x00006e1d

00006f08 <__sfp>:
    6f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f0a:	4b1e      	ldr	r3, [pc, #120]	; (6f84 <__sfp+0x7c>)
    6f0c:	0007      	movs	r7, r0
    6f0e:	681e      	ldr	r6, [r3, #0]
    6f10:	69b3      	ldr	r3, [r6, #24]
    6f12:	2b00      	cmp	r3, #0
    6f14:	d102      	bne.n	6f1c <__sfp+0x14>
    6f16:	0030      	movs	r0, r6
    6f18:	f7ff ffc2 	bl	6ea0 <__sinit>
    6f1c:	3648      	adds	r6, #72	; 0x48
    6f1e:	68b4      	ldr	r4, [r6, #8]
    6f20:	6873      	ldr	r3, [r6, #4]
    6f22:	3b01      	subs	r3, #1
    6f24:	d504      	bpl.n	6f30 <__sfp+0x28>
    6f26:	6833      	ldr	r3, [r6, #0]
    6f28:	2b00      	cmp	r3, #0
    6f2a:	d007      	beq.n	6f3c <__sfp+0x34>
    6f2c:	6836      	ldr	r6, [r6, #0]
    6f2e:	e7f6      	b.n	6f1e <__sfp+0x16>
    6f30:	220c      	movs	r2, #12
    6f32:	5ea5      	ldrsh	r5, [r4, r2]
    6f34:	2d00      	cmp	r5, #0
    6f36:	d00d      	beq.n	6f54 <__sfp+0x4c>
    6f38:	3468      	adds	r4, #104	; 0x68
    6f3a:	e7f2      	b.n	6f22 <__sfp+0x1a>
    6f3c:	2104      	movs	r1, #4
    6f3e:	0038      	movs	r0, r7
    6f40:	f7ff ff98 	bl	6e74 <__sfmoreglue>
    6f44:	6030      	str	r0, [r6, #0]
    6f46:	2800      	cmp	r0, #0
    6f48:	d1f0      	bne.n	6f2c <__sfp+0x24>
    6f4a:	230c      	movs	r3, #12
    6f4c:	0004      	movs	r4, r0
    6f4e:	603b      	str	r3, [r7, #0]
    6f50:	0020      	movs	r0, r4
    6f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f54:	2301      	movs	r3, #1
    6f56:	0020      	movs	r0, r4
    6f58:	425b      	negs	r3, r3
    6f5a:	81e3      	strh	r3, [r4, #14]
    6f5c:	3302      	adds	r3, #2
    6f5e:	81a3      	strh	r3, [r4, #12]
    6f60:	6665      	str	r5, [r4, #100]	; 0x64
    6f62:	6025      	str	r5, [r4, #0]
    6f64:	60a5      	str	r5, [r4, #8]
    6f66:	6065      	str	r5, [r4, #4]
    6f68:	6125      	str	r5, [r4, #16]
    6f6a:	6165      	str	r5, [r4, #20]
    6f6c:	61a5      	str	r5, [r4, #24]
    6f6e:	2208      	movs	r2, #8
    6f70:	0029      	movs	r1, r5
    6f72:	305c      	adds	r0, #92	; 0x5c
    6f74:	f7ff fbd3 	bl	671e <memset>
    6f78:	6365      	str	r5, [r4, #52]	; 0x34
    6f7a:	63a5      	str	r5, [r4, #56]	; 0x38
    6f7c:	64a5      	str	r5, [r4, #72]	; 0x48
    6f7e:	64e5      	str	r5, [r4, #76]	; 0x4c
    6f80:	e7e6      	b.n	6f50 <__sfp+0x48>
    6f82:	46c0      	nop			; (mov r8, r8)
    6f84:	0000a134 	.word	0x0000a134

00006f88 <_fwalk_reent>:
    6f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6f8a:	0004      	movs	r4, r0
    6f8c:	0007      	movs	r7, r0
    6f8e:	2600      	movs	r6, #0
    6f90:	9101      	str	r1, [sp, #4]
    6f92:	3448      	adds	r4, #72	; 0x48
    6f94:	2c00      	cmp	r4, #0
    6f96:	d101      	bne.n	6f9c <_fwalk_reent+0x14>
    6f98:	0030      	movs	r0, r6
    6f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6f9c:	6863      	ldr	r3, [r4, #4]
    6f9e:	68a5      	ldr	r5, [r4, #8]
    6fa0:	9300      	str	r3, [sp, #0]
    6fa2:	9b00      	ldr	r3, [sp, #0]
    6fa4:	3b01      	subs	r3, #1
    6fa6:	9300      	str	r3, [sp, #0]
    6fa8:	d501      	bpl.n	6fae <_fwalk_reent+0x26>
    6faa:	6824      	ldr	r4, [r4, #0]
    6fac:	e7f2      	b.n	6f94 <_fwalk_reent+0xc>
    6fae:	89ab      	ldrh	r3, [r5, #12]
    6fb0:	2b01      	cmp	r3, #1
    6fb2:	d908      	bls.n	6fc6 <_fwalk_reent+0x3e>
    6fb4:	220e      	movs	r2, #14
    6fb6:	5eab      	ldrsh	r3, [r5, r2]
    6fb8:	3301      	adds	r3, #1
    6fba:	d004      	beq.n	6fc6 <_fwalk_reent+0x3e>
    6fbc:	0029      	movs	r1, r5
    6fbe:	0038      	movs	r0, r7
    6fc0:	9b01      	ldr	r3, [sp, #4]
    6fc2:	4798      	blx	r3
    6fc4:	4306      	orrs	r6, r0
    6fc6:	3568      	adds	r5, #104	; 0x68
    6fc8:	e7eb      	b.n	6fa2 <_fwalk_reent+0x1a>
	...

00006fcc <__swhatbuf_r>:
    6fcc:	b570      	push	{r4, r5, r6, lr}
    6fce:	000e      	movs	r6, r1
    6fd0:	001d      	movs	r5, r3
    6fd2:	230e      	movs	r3, #14
    6fd4:	5ec9      	ldrsh	r1, [r1, r3]
    6fd6:	b090      	sub	sp, #64	; 0x40
    6fd8:	0014      	movs	r4, r2
    6fda:	2900      	cmp	r1, #0
    6fdc:	da07      	bge.n	6fee <__swhatbuf_r+0x22>
    6fde:	2300      	movs	r3, #0
    6fe0:	602b      	str	r3, [r5, #0]
    6fe2:	89b3      	ldrh	r3, [r6, #12]
    6fe4:	061b      	lsls	r3, r3, #24
    6fe6:	d411      	bmi.n	700c <__swhatbuf_r+0x40>
    6fe8:	2380      	movs	r3, #128	; 0x80
    6fea:	00db      	lsls	r3, r3, #3
    6fec:	e00f      	b.n	700e <__swhatbuf_r+0x42>
    6fee:	aa01      	add	r2, sp, #4
    6ff0:	f000 fb98 	bl	7724 <_fstat_r>
    6ff4:	2800      	cmp	r0, #0
    6ff6:	dbf2      	blt.n	6fde <__swhatbuf_r+0x12>
    6ff8:	22f0      	movs	r2, #240	; 0xf0
    6ffa:	9b02      	ldr	r3, [sp, #8]
    6ffc:	0212      	lsls	r2, r2, #8
    6ffe:	4013      	ands	r3, r2
    7000:	4a05      	ldr	r2, [pc, #20]	; (7018 <__swhatbuf_r+0x4c>)
    7002:	189b      	adds	r3, r3, r2
    7004:	425a      	negs	r2, r3
    7006:	4153      	adcs	r3, r2
    7008:	602b      	str	r3, [r5, #0]
    700a:	e7ed      	b.n	6fe8 <__swhatbuf_r+0x1c>
    700c:	2340      	movs	r3, #64	; 0x40
    700e:	2000      	movs	r0, #0
    7010:	6023      	str	r3, [r4, #0]
    7012:	b010      	add	sp, #64	; 0x40
    7014:	bd70      	pop	{r4, r5, r6, pc}
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	ffffe000 	.word	0xffffe000

0000701c <__smakebuf_r>:
    701c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    701e:	2602      	movs	r6, #2
    7020:	898b      	ldrh	r3, [r1, #12]
    7022:	0005      	movs	r5, r0
    7024:	000c      	movs	r4, r1
    7026:	4233      	tst	r3, r6
    7028:	d006      	beq.n	7038 <__smakebuf_r+0x1c>
    702a:	0023      	movs	r3, r4
    702c:	3347      	adds	r3, #71	; 0x47
    702e:	6023      	str	r3, [r4, #0]
    7030:	6123      	str	r3, [r4, #16]
    7032:	2301      	movs	r3, #1
    7034:	6163      	str	r3, [r4, #20]
    7036:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7038:	ab01      	add	r3, sp, #4
    703a:	466a      	mov	r2, sp
    703c:	f7ff ffc6 	bl	6fcc <__swhatbuf_r>
    7040:	9900      	ldr	r1, [sp, #0]
    7042:	0007      	movs	r7, r0
    7044:	0028      	movs	r0, r5
    7046:	f7ff fbbd 	bl	67c4 <_malloc_r>
    704a:	2800      	cmp	r0, #0
    704c:	d108      	bne.n	7060 <__smakebuf_r+0x44>
    704e:	220c      	movs	r2, #12
    7050:	5ea3      	ldrsh	r3, [r4, r2]
    7052:	059a      	lsls	r2, r3, #22
    7054:	d4ef      	bmi.n	7036 <__smakebuf_r+0x1a>
    7056:	2203      	movs	r2, #3
    7058:	4393      	bics	r3, r2
    705a:	431e      	orrs	r6, r3
    705c:	81a6      	strh	r6, [r4, #12]
    705e:	e7e4      	b.n	702a <__smakebuf_r+0xe>
    7060:	4b0f      	ldr	r3, [pc, #60]	; (70a0 <__smakebuf_r+0x84>)
    7062:	62ab      	str	r3, [r5, #40]	; 0x28
    7064:	2380      	movs	r3, #128	; 0x80
    7066:	89a2      	ldrh	r2, [r4, #12]
    7068:	6020      	str	r0, [r4, #0]
    706a:	4313      	orrs	r3, r2
    706c:	81a3      	strh	r3, [r4, #12]
    706e:	9b00      	ldr	r3, [sp, #0]
    7070:	6120      	str	r0, [r4, #16]
    7072:	6163      	str	r3, [r4, #20]
    7074:	9b01      	ldr	r3, [sp, #4]
    7076:	2b00      	cmp	r3, #0
    7078:	d00d      	beq.n	7096 <__smakebuf_r+0x7a>
    707a:	230e      	movs	r3, #14
    707c:	5ee1      	ldrsh	r1, [r4, r3]
    707e:	0028      	movs	r0, r5
    7080:	f000 fb62 	bl	7748 <_isatty_r>
    7084:	2800      	cmp	r0, #0
    7086:	d006      	beq.n	7096 <__smakebuf_r+0x7a>
    7088:	2203      	movs	r2, #3
    708a:	89a3      	ldrh	r3, [r4, #12]
    708c:	4393      	bics	r3, r2
    708e:	001a      	movs	r2, r3
    7090:	2301      	movs	r3, #1
    7092:	4313      	orrs	r3, r2
    7094:	81a3      	strh	r3, [r4, #12]
    7096:	89a0      	ldrh	r0, [r4, #12]
    7098:	4338      	orrs	r0, r7
    709a:	81a0      	strh	r0, [r4, #12]
    709c:	e7cb      	b.n	7036 <__smakebuf_r+0x1a>
    709e:	46c0      	nop			; (mov r8, r8)
    70a0:	00006e1d 	.word	0x00006e1d

000070a4 <__malloc_lock>:
    70a4:	4770      	bx	lr

000070a6 <__malloc_unlock>:
    70a6:	4770      	bx	lr

000070a8 <__sfputc_r>:
    70a8:	6893      	ldr	r3, [r2, #8]
    70aa:	b510      	push	{r4, lr}
    70ac:	3b01      	subs	r3, #1
    70ae:	6093      	str	r3, [r2, #8]
    70b0:	2b00      	cmp	r3, #0
    70b2:	da05      	bge.n	70c0 <__sfputc_r+0x18>
    70b4:	6994      	ldr	r4, [r2, #24]
    70b6:	42a3      	cmp	r3, r4
    70b8:	db08      	blt.n	70cc <__sfputc_r+0x24>
    70ba:	b2cb      	uxtb	r3, r1
    70bc:	2b0a      	cmp	r3, #10
    70be:	d005      	beq.n	70cc <__sfputc_r+0x24>
    70c0:	6813      	ldr	r3, [r2, #0]
    70c2:	1c58      	adds	r0, r3, #1
    70c4:	6010      	str	r0, [r2, #0]
    70c6:	7019      	strb	r1, [r3, #0]
    70c8:	b2c8      	uxtb	r0, r1
    70ca:	bd10      	pop	{r4, pc}
    70cc:	f7ff fd24 	bl	6b18 <__swbuf_r>
    70d0:	e7fb      	b.n	70ca <__sfputc_r+0x22>

000070d2 <__sfputs_r>:
    70d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70d4:	0006      	movs	r6, r0
    70d6:	000f      	movs	r7, r1
    70d8:	0014      	movs	r4, r2
    70da:	18d5      	adds	r5, r2, r3
    70dc:	42ac      	cmp	r4, r5
    70de:	d101      	bne.n	70e4 <__sfputs_r+0x12>
    70e0:	2000      	movs	r0, #0
    70e2:	e007      	b.n	70f4 <__sfputs_r+0x22>
    70e4:	7821      	ldrb	r1, [r4, #0]
    70e6:	003a      	movs	r2, r7
    70e8:	0030      	movs	r0, r6
    70ea:	f7ff ffdd 	bl	70a8 <__sfputc_r>
    70ee:	3401      	adds	r4, #1
    70f0:	1c43      	adds	r3, r0, #1
    70f2:	d1f3      	bne.n	70dc <__sfputs_r+0xa>
    70f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000070f8 <_vfiprintf_r>:
    70f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    70fa:	b09f      	sub	sp, #124	; 0x7c
    70fc:	0006      	movs	r6, r0
    70fe:	000f      	movs	r7, r1
    7100:	0014      	movs	r4, r2
    7102:	9305      	str	r3, [sp, #20]
    7104:	2800      	cmp	r0, #0
    7106:	d004      	beq.n	7112 <_vfiprintf_r+0x1a>
    7108:	6983      	ldr	r3, [r0, #24]
    710a:	2b00      	cmp	r3, #0
    710c:	d101      	bne.n	7112 <_vfiprintf_r+0x1a>
    710e:	f7ff fec7 	bl	6ea0 <__sinit>
    7112:	4b7f      	ldr	r3, [pc, #508]	; (7310 <_vfiprintf_r+0x218>)
    7114:	429f      	cmp	r7, r3
    7116:	d15c      	bne.n	71d2 <_vfiprintf_r+0xda>
    7118:	6877      	ldr	r7, [r6, #4]
    711a:	89bb      	ldrh	r3, [r7, #12]
    711c:	071b      	lsls	r3, r3, #28
    711e:	d562      	bpl.n	71e6 <_vfiprintf_r+0xee>
    7120:	693b      	ldr	r3, [r7, #16]
    7122:	2b00      	cmp	r3, #0
    7124:	d05f      	beq.n	71e6 <_vfiprintf_r+0xee>
    7126:	2300      	movs	r3, #0
    7128:	ad06      	add	r5, sp, #24
    712a:	616b      	str	r3, [r5, #20]
    712c:	3320      	adds	r3, #32
    712e:	766b      	strb	r3, [r5, #25]
    7130:	3310      	adds	r3, #16
    7132:	76ab      	strb	r3, [r5, #26]
    7134:	9402      	str	r4, [sp, #8]
    7136:	9c02      	ldr	r4, [sp, #8]
    7138:	7823      	ldrb	r3, [r4, #0]
    713a:	2b00      	cmp	r3, #0
    713c:	d15d      	bne.n	71fa <_vfiprintf_r+0x102>
    713e:	9b02      	ldr	r3, [sp, #8]
    7140:	1ae3      	subs	r3, r4, r3
    7142:	9304      	str	r3, [sp, #16]
    7144:	d00d      	beq.n	7162 <_vfiprintf_r+0x6a>
    7146:	9b04      	ldr	r3, [sp, #16]
    7148:	9a02      	ldr	r2, [sp, #8]
    714a:	0039      	movs	r1, r7
    714c:	0030      	movs	r0, r6
    714e:	f7ff ffc0 	bl	70d2 <__sfputs_r>
    7152:	1c43      	adds	r3, r0, #1
    7154:	d100      	bne.n	7158 <_vfiprintf_r+0x60>
    7156:	e0cc      	b.n	72f2 <_vfiprintf_r+0x1fa>
    7158:	696a      	ldr	r2, [r5, #20]
    715a:	9b04      	ldr	r3, [sp, #16]
    715c:	4694      	mov	ip, r2
    715e:	4463      	add	r3, ip
    7160:	616b      	str	r3, [r5, #20]
    7162:	7823      	ldrb	r3, [r4, #0]
    7164:	2b00      	cmp	r3, #0
    7166:	d100      	bne.n	716a <_vfiprintf_r+0x72>
    7168:	e0c3      	b.n	72f2 <_vfiprintf_r+0x1fa>
    716a:	2201      	movs	r2, #1
    716c:	2300      	movs	r3, #0
    716e:	4252      	negs	r2, r2
    7170:	606a      	str	r2, [r5, #4]
    7172:	a902      	add	r1, sp, #8
    7174:	3254      	adds	r2, #84	; 0x54
    7176:	1852      	adds	r2, r2, r1
    7178:	3401      	adds	r4, #1
    717a:	602b      	str	r3, [r5, #0]
    717c:	60eb      	str	r3, [r5, #12]
    717e:	60ab      	str	r3, [r5, #8]
    7180:	7013      	strb	r3, [r2, #0]
    7182:	65ab      	str	r3, [r5, #88]	; 0x58
    7184:	7821      	ldrb	r1, [r4, #0]
    7186:	2205      	movs	r2, #5
    7188:	4862      	ldr	r0, [pc, #392]	; (7314 <_vfiprintf_r+0x21c>)
    718a:	f000 fb03 	bl	7794 <memchr>
    718e:	1c63      	adds	r3, r4, #1
    7190:	469c      	mov	ip, r3
    7192:	2800      	cmp	r0, #0
    7194:	d135      	bne.n	7202 <_vfiprintf_r+0x10a>
    7196:	6829      	ldr	r1, [r5, #0]
    7198:	06cb      	lsls	r3, r1, #27
    719a:	d504      	bpl.n	71a6 <_vfiprintf_r+0xae>
    719c:	2353      	movs	r3, #83	; 0x53
    719e:	aa02      	add	r2, sp, #8
    71a0:	3020      	adds	r0, #32
    71a2:	189b      	adds	r3, r3, r2
    71a4:	7018      	strb	r0, [r3, #0]
    71a6:	070b      	lsls	r3, r1, #28
    71a8:	d504      	bpl.n	71b4 <_vfiprintf_r+0xbc>
    71aa:	2353      	movs	r3, #83	; 0x53
    71ac:	202b      	movs	r0, #43	; 0x2b
    71ae:	aa02      	add	r2, sp, #8
    71b0:	189b      	adds	r3, r3, r2
    71b2:	7018      	strb	r0, [r3, #0]
    71b4:	7823      	ldrb	r3, [r4, #0]
    71b6:	2b2a      	cmp	r3, #42	; 0x2a
    71b8:	d02c      	beq.n	7214 <_vfiprintf_r+0x11c>
    71ba:	2000      	movs	r0, #0
    71bc:	210a      	movs	r1, #10
    71be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    71c0:	7822      	ldrb	r2, [r4, #0]
    71c2:	3a30      	subs	r2, #48	; 0x30
    71c4:	2a09      	cmp	r2, #9
    71c6:	d800      	bhi.n	71ca <_vfiprintf_r+0xd2>
    71c8:	e06b      	b.n	72a2 <_vfiprintf_r+0x1aa>
    71ca:	2800      	cmp	r0, #0
    71cc:	d02a      	beq.n	7224 <_vfiprintf_r+0x12c>
    71ce:	9309      	str	r3, [sp, #36]	; 0x24
    71d0:	e028      	b.n	7224 <_vfiprintf_r+0x12c>
    71d2:	4b51      	ldr	r3, [pc, #324]	; (7318 <_vfiprintf_r+0x220>)
    71d4:	429f      	cmp	r7, r3
    71d6:	d101      	bne.n	71dc <_vfiprintf_r+0xe4>
    71d8:	68b7      	ldr	r7, [r6, #8]
    71da:	e79e      	b.n	711a <_vfiprintf_r+0x22>
    71dc:	4b4f      	ldr	r3, [pc, #316]	; (731c <_vfiprintf_r+0x224>)
    71de:	429f      	cmp	r7, r3
    71e0:	d19b      	bne.n	711a <_vfiprintf_r+0x22>
    71e2:	68f7      	ldr	r7, [r6, #12]
    71e4:	e799      	b.n	711a <_vfiprintf_r+0x22>
    71e6:	0039      	movs	r1, r7
    71e8:	0030      	movs	r0, r6
    71ea:	f7ff fceb 	bl	6bc4 <__swsetup_r>
    71ee:	2800      	cmp	r0, #0
    71f0:	d099      	beq.n	7126 <_vfiprintf_r+0x2e>
    71f2:	2001      	movs	r0, #1
    71f4:	4240      	negs	r0, r0
    71f6:	b01f      	add	sp, #124	; 0x7c
    71f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71fa:	2b25      	cmp	r3, #37	; 0x25
    71fc:	d09f      	beq.n	713e <_vfiprintf_r+0x46>
    71fe:	3401      	adds	r4, #1
    7200:	e79a      	b.n	7138 <_vfiprintf_r+0x40>
    7202:	4b44      	ldr	r3, [pc, #272]	; (7314 <_vfiprintf_r+0x21c>)
    7204:	6829      	ldr	r1, [r5, #0]
    7206:	1ac0      	subs	r0, r0, r3
    7208:	2301      	movs	r3, #1
    720a:	4083      	lsls	r3, r0
    720c:	430b      	orrs	r3, r1
    720e:	602b      	str	r3, [r5, #0]
    7210:	4664      	mov	r4, ip
    7212:	e7b7      	b.n	7184 <_vfiprintf_r+0x8c>
    7214:	9b05      	ldr	r3, [sp, #20]
    7216:	1d18      	adds	r0, r3, #4
    7218:	681b      	ldr	r3, [r3, #0]
    721a:	9005      	str	r0, [sp, #20]
    721c:	2b00      	cmp	r3, #0
    721e:	db3a      	blt.n	7296 <_vfiprintf_r+0x19e>
    7220:	9309      	str	r3, [sp, #36]	; 0x24
    7222:	4664      	mov	r4, ip
    7224:	7823      	ldrb	r3, [r4, #0]
    7226:	2b2e      	cmp	r3, #46	; 0x2e
    7228:	d10b      	bne.n	7242 <_vfiprintf_r+0x14a>
    722a:	7863      	ldrb	r3, [r4, #1]
    722c:	1c62      	adds	r2, r4, #1
    722e:	2b2a      	cmp	r3, #42	; 0x2a
    7230:	d13f      	bne.n	72b2 <_vfiprintf_r+0x1ba>
    7232:	9b05      	ldr	r3, [sp, #20]
    7234:	3402      	adds	r4, #2
    7236:	1d1a      	adds	r2, r3, #4
    7238:	681b      	ldr	r3, [r3, #0]
    723a:	9205      	str	r2, [sp, #20]
    723c:	2b00      	cmp	r3, #0
    723e:	db35      	blt.n	72ac <_vfiprintf_r+0x1b4>
    7240:	9307      	str	r3, [sp, #28]
    7242:	7821      	ldrb	r1, [r4, #0]
    7244:	2203      	movs	r2, #3
    7246:	4836      	ldr	r0, [pc, #216]	; (7320 <_vfiprintf_r+0x228>)
    7248:	f000 faa4 	bl	7794 <memchr>
    724c:	2800      	cmp	r0, #0
    724e:	d007      	beq.n	7260 <_vfiprintf_r+0x168>
    7250:	4b33      	ldr	r3, [pc, #204]	; (7320 <_vfiprintf_r+0x228>)
    7252:	682a      	ldr	r2, [r5, #0]
    7254:	1ac0      	subs	r0, r0, r3
    7256:	2340      	movs	r3, #64	; 0x40
    7258:	4083      	lsls	r3, r0
    725a:	4313      	orrs	r3, r2
    725c:	602b      	str	r3, [r5, #0]
    725e:	3401      	adds	r4, #1
    7260:	7821      	ldrb	r1, [r4, #0]
    7262:	1c63      	adds	r3, r4, #1
    7264:	2206      	movs	r2, #6
    7266:	482f      	ldr	r0, [pc, #188]	; (7324 <_vfiprintf_r+0x22c>)
    7268:	9302      	str	r3, [sp, #8]
    726a:	7629      	strb	r1, [r5, #24]
    726c:	f000 fa92 	bl	7794 <memchr>
    7270:	2800      	cmp	r0, #0
    7272:	d044      	beq.n	72fe <_vfiprintf_r+0x206>
    7274:	4b2c      	ldr	r3, [pc, #176]	; (7328 <_vfiprintf_r+0x230>)
    7276:	2b00      	cmp	r3, #0
    7278:	d12f      	bne.n	72da <_vfiprintf_r+0x1e2>
    727a:	6829      	ldr	r1, [r5, #0]
    727c:	9b05      	ldr	r3, [sp, #20]
    727e:	2207      	movs	r2, #7
    7280:	05c9      	lsls	r1, r1, #23
    7282:	d528      	bpl.n	72d6 <_vfiprintf_r+0x1de>
    7284:	189b      	adds	r3, r3, r2
    7286:	4393      	bics	r3, r2
    7288:	3308      	adds	r3, #8
    728a:	9305      	str	r3, [sp, #20]
    728c:	696b      	ldr	r3, [r5, #20]
    728e:	9a03      	ldr	r2, [sp, #12]
    7290:	189b      	adds	r3, r3, r2
    7292:	616b      	str	r3, [r5, #20]
    7294:	e74f      	b.n	7136 <_vfiprintf_r+0x3e>
    7296:	425b      	negs	r3, r3
    7298:	60eb      	str	r3, [r5, #12]
    729a:	2302      	movs	r3, #2
    729c:	430b      	orrs	r3, r1
    729e:	602b      	str	r3, [r5, #0]
    72a0:	e7bf      	b.n	7222 <_vfiprintf_r+0x12a>
    72a2:	434b      	muls	r3, r1
    72a4:	3401      	adds	r4, #1
    72a6:	189b      	adds	r3, r3, r2
    72a8:	2001      	movs	r0, #1
    72aa:	e789      	b.n	71c0 <_vfiprintf_r+0xc8>
    72ac:	2301      	movs	r3, #1
    72ae:	425b      	negs	r3, r3
    72b0:	e7c6      	b.n	7240 <_vfiprintf_r+0x148>
    72b2:	2300      	movs	r3, #0
    72b4:	0014      	movs	r4, r2
    72b6:	200a      	movs	r0, #10
    72b8:	001a      	movs	r2, r3
    72ba:	606b      	str	r3, [r5, #4]
    72bc:	7821      	ldrb	r1, [r4, #0]
    72be:	3930      	subs	r1, #48	; 0x30
    72c0:	2909      	cmp	r1, #9
    72c2:	d903      	bls.n	72cc <_vfiprintf_r+0x1d4>
    72c4:	2b00      	cmp	r3, #0
    72c6:	d0bc      	beq.n	7242 <_vfiprintf_r+0x14a>
    72c8:	9207      	str	r2, [sp, #28]
    72ca:	e7ba      	b.n	7242 <_vfiprintf_r+0x14a>
    72cc:	4342      	muls	r2, r0
    72ce:	3401      	adds	r4, #1
    72d0:	1852      	adds	r2, r2, r1
    72d2:	2301      	movs	r3, #1
    72d4:	e7f2      	b.n	72bc <_vfiprintf_r+0x1c4>
    72d6:	3307      	adds	r3, #7
    72d8:	e7d5      	b.n	7286 <_vfiprintf_r+0x18e>
    72da:	ab05      	add	r3, sp, #20
    72dc:	9300      	str	r3, [sp, #0]
    72de:	003a      	movs	r2, r7
    72e0:	4b12      	ldr	r3, [pc, #72]	; (732c <_vfiprintf_r+0x234>)
    72e2:	0029      	movs	r1, r5
    72e4:	0030      	movs	r0, r6
    72e6:	e000      	b.n	72ea <_vfiprintf_r+0x1f2>
    72e8:	bf00      	nop
    72ea:	9003      	str	r0, [sp, #12]
    72ec:	9b03      	ldr	r3, [sp, #12]
    72ee:	3301      	adds	r3, #1
    72f0:	d1cc      	bne.n	728c <_vfiprintf_r+0x194>
    72f2:	89bb      	ldrh	r3, [r7, #12]
    72f4:	065b      	lsls	r3, r3, #25
    72f6:	d500      	bpl.n	72fa <_vfiprintf_r+0x202>
    72f8:	e77b      	b.n	71f2 <_vfiprintf_r+0xfa>
    72fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    72fc:	e77b      	b.n	71f6 <_vfiprintf_r+0xfe>
    72fe:	ab05      	add	r3, sp, #20
    7300:	9300      	str	r3, [sp, #0]
    7302:	003a      	movs	r2, r7
    7304:	4b09      	ldr	r3, [pc, #36]	; (732c <_vfiprintf_r+0x234>)
    7306:	0029      	movs	r1, r5
    7308:	0030      	movs	r0, r6
    730a:	f000 f87f 	bl	740c <_printf_i>
    730e:	e7ec      	b.n	72ea <_vfiprintf_r+0x1f2>
    7310:	0000a158 	.word	0x0000a158
    7314:	0000a198 	.word	0x0000a198
    7318:	0000a178 	.word	0x0000a178
    731c:	0000a138 	.word	0x0000a138
    7320:	0000a19e 	.word	0x0000a19e
    7324:	0000a1a2 	.word	0x0000a1a2
    7328:	00000000 	.word	0x00000000
    732c:	000070d3 	.word	0x000070d3

00007330 <_printf_common>:
    7330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7332:	0015      	movs	r5, r2
    7334:	9301      	str	r3, [sp, #4]
    7336:	688a      	ldr	r2, [r1, #8]
    7338:	690b      	ldr	r3, [r1, #16]
    733a:	9000      	str	r0, [sp, #0]
    733c:	000c      	movs	r4, r1
    733e:	4293      	cmp	r3, r2
    7340:	da00      	bge.n	7344 <_printf_common+0x14>
    7342:	0013      	movs	r3, r2
    7344:	0022      	movs	r2, r4
    7346:	602b      	str	r3, [r5, #0]
    7348:	3243      	adds	r2, #67	; 0x43
    734a:	7812      	ldrb	r2, [r2, #0]
    734c:	2a00      	cmp	r2, #0
    734e:	d001      	beq.n	7354 <_printf_common+0x24>
    7350:	3301      	adds	r3, #1
    7352:	602b      	str	r3, [r5, #0]
    7354:	6823      	ldr	r3, [r4, #0]
    7356:	069b      	lsls	r3, r3, #26
    7358:	d502      	bpl.n	7360 <_printf_common+0x30>
    735a:	682b      	ldr	r3, [r5, #0]
    735c:	3302      	adds	r3, #2
    735e:	602b      	str	r3, [r5, #0]
    7360:	2706      	movs	r7, #6
    7362:	6823      	ldr	r3, [r4, #0]
    7364:	401f      	ands	r7, r3
    7366:	d027      	beq.n	73b8 <_printf_common+0x88>
    7368:	0023      	movs	r3, r4
    736a:	3343      	adds	r3, #67	; 0x43
    736c:	781b      	ldrb	r3, [r3, #0]
    736e:	1e5a      	subs	r2, r3, #1
    7370:	4193      	sbcs	r3, r2
    7372:	6822      	ldr	r2, [r4, #0]
    7374:	0692      	lsls	r2, r2, #26
    7376:	d430      	bmi.n	73da <_printf_common+0xaa>
    7378:	0022      	movs	r2, r4
    737a:	9901      	ldr	r1, [sp, #4]
    737c:	3243      	adds	r2, #67	; 0x43
    737e:	9800      	ldr	r0, [sp, #0]
    7380:	9e08      	ldr	r6, [sp, #32]
    7382:	47b0      	blx	r6
    7384:	1c43      	adds	r3, r0, #1
    7386:	d025      	beq.n	73d4 <_printf_common+0xa4>
    7388:	2306      	movs	r3, #6
    738a:	6820      	ldr	r0, [r4, #0]
    738c:	682a      	ldr	r2, [r5, #0]
    738e:	68e1      	ldr	r1, [r4, #12]
    7390:	4003      	ands	r3, r0
    7392:	2500      	movs	r5, #0
    7394:	2b04      	cmp	r3, #4
    7396:	d103      	bne.n	73a0 <_printf_common+0x70>
    7398:	1a8d      	subs	r5, r1, r2
    739a:	43eb      	mvns	r3, r5
    739c:	17db      	asrs	r3, r3, #31
    739e:	401d      	ands	r5, r3
    73a0:	68a3      	ldr	r3, [r4, #8]
    73a2:	6922      	ldr	r2, [r4, #16]
    73a4:	4293      	cmp	r3, r2
    73a6:	dd01      	ble.n	73ac <_printf_common+0x7c>
    73a8:	1a9b      	subs	r3, r3, r2
    73aa:	18ed      	adds	r5, r5, r3
    73ac:	2700      	movs	r7, #0
    73ae:	42bd      	cmp	r5, r7
    73b0:	d120      	bne.n	73f4 <_printf_common+0xc4>
    73b2:	2000      	movs	r0, #0
    73b4:	e010      	b.n	73d8 <_printf_common+0xa8>
    73b6:	3701      	adds	r7, #1
    73b8:	68e3      	ldr	r3, [r4, #12]
    73ba:	682a      	ldr	r2, [r5, #0]
    73bc:	1a9b      	subs	r3, r3, r2
    73be:	429f      	cmp	r7, r3
    73c0:	dad2      	bge.n	7368 <_printf_common+0x38>
    73c2:	0022      	movs	r2, r4
    73c4:	2301      	movs	r3, #1
    73c6:	3219      	adds	r2, #25
    73c8:	9901      	ldr	r1, [sp, #4]
    73ca:	9800      	ldr	r0, [sp, #0]
    73cc:	9e08      	ldr	r6, [sp, #32]
    73ce:	47b0      	blx	r6
    73d0:	1c43      	adds	r3, r0, #1
    73d2:	d1f0      	bne.n	73b6 <_printf_common+0x86>
    73d4:	2001      	movs	r0, #1
    73d6:	4240      	negs	r0, r0
    73d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    73da:	2030      	movs	r0, #48	; 0x30
    73dc:	18e1      	adds	r1, r4, r3
    73de:	3143      	adds	r1, #67	; 0x43
    73e0:	7008      	strb	r0, [r1, #0]
    73e2:	0021      	movs	r1, r4
    73e4:	1c5a      	adds	r2, r3, #1
    73e6:	3145      	adds	r1, #69	; 0x45
    73e8:	7809      	ldrb	r1, [r1, #0]
    73ea:	18a2      	adds	r2, r4, r2
    73ec:	3243      	adds	r2, #67	; 0x43
    73ee:	3302      	adds	r3, #2
    73f0:	7011      	strb	r1, [r2, #0]
    73f2:	e7c1      	b.n	7378 <_printf_common+0x48>
    73f4:	0022      	movs	r2, r4
    73f6:	2301      	movs	r3, #1
    73f8:	321a      	adds	r2, #26
    73fa:	9901      	ldr	r1, [sp, #4]
    73fc:	9800      	ldr	r0, [sp, #0]
    73fe:	9e08      	ldr	r6, [sp, #32]
    7400:	47b0      	blx	r6
    7402:	1c43      	adds	r3, r0, #1
    7404:	d0e6      	beq.n	73d4 <_printf_common+0xa4>
    7406:	3701      	adds	r7, #1
    7408:	e7d1      	b.n	73ae <_printf_common+0x7e>
	...

0000740c <_printf_i>:
    740c:	b5f0      	push	{r4, r5, r6, r7, lr}
    740e:	b08b      	sub	sp, #44	; 0x2c
    7410:	9206      	str	r2, [sp, #24]
    7412:	000a      	movs	r2, r1
    7414:	3243      	adds	r2, #67	; 0x43
    7416:	9307      	str	r3, [sp, #28]
    7418:	9005      	str	r0, [sp, #20]
    741a:	9204      	str	r2, [sp, #16]
    741c:	7e0a      	ldrb	r2, [r1, #24]
    741e:	000c      	movs	r4, r1
    7420:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7422:	2a6e      	cmp	r2, #110	; 0x6e
    7424:	d100      	bne.n	7428 <_printf_i+0x1c>
    7426:	e08f      	b.n	7548 <_printf_i+0x13c>
    7428:	d817      	bhi.n	745a <_printf_i+0x4e>
    742a:	2a63      	cmp	r2, #99	; 0x63
    742c:	d02c      	beq.n	7488 <_printf_i+0x7c>
    742e:	d808      	bhi.n	7442 <_printf_i+0x36>
    7430:	2a00      	cmp	r2, #0
    7432:	d100      	bne.n	7436 <_printf_i+0x2a>
    7434:	e099      	b.n	756a <_printf_i+0x15e>
    7436:	2a58      	cmp	r2, #88	; 0x58
    7438:	d054      	beq.n	74e4 <_printf_i+0xd8>
    743a:	0026      	movs	r6, r4
    743c:	3642      	adds	r6, #66	; 0x42
    743e:	7032      	strb	r2, [r6, #0]
    7440:	e029      	b.n	7496 <_printf_i+0x8a>
    7442:	2a64      	cmp	r2, #100	; 0x64
    7444:	d001      	beq.n	744a <_printf_i+0x3e>
    7446:	2a69      	cmp	r2, #105	; 0x69
    7448:	d1f7      	bne.n	743a <_printf_i+0x2e>
    744a:	6821      	ldr	r1, [r4, #0]
    744c:	681a      	ldr	r2, [r3, #0]
    744e:	0608      	lsls	r0, r1, #24
    7450:	d523      	bpl.n	749a <_printf_i+0x8e>
    7452:	1d11      	adds	r1, r2, #4
    7454:	6019      	str	r1, [r3, #0]
    7456:	6815      	ldr	r5, [r2, #0]
    7458:	e025      	b.n	74a6 <_printf_i+0x9a>
    745a:	2a73      	cmp	r2, #115	; 0x73
    745c:	d100      	bne.n	7460 <_printf_i+0x54>
    745e:	e088      	b.n	7572 <_printf_i+0x166>
    7460:	d808      	bhi.n	7474 <_printf_i+0x68>
    7462:	2a6f      	cmp	r2, #111	; 0x6f
    7464:	d029      	beq.n	74ba <_printf_i+0xae>
    7466:	2a70      	cmp	r2, #112	; 0x70
    7468:	d1e7      	bne.n	743a <_printf_i+0x2e>
    746a:	2220      	movs	r2, #32
    746c:	6809      	ldr	r1, [r1, #0]
    746e:	430a      	orrs	r2, r1
    7470:	6022      	str	r2, [r4, #0]
    7472:	e003      	b.n	747c <_printf_i+0x70>
    7474:	2a75      	cmp	r2, #117	; 0x75
    7476:	d020      	beq.n	74ba <_printf_i+0xae>
    7478:	2a78      	cmp	r2, #120	; 0x78
    747a:	d1de      	bne.n	743a <_printf_i+0x2e>
    747c:	0022      	movs	r2, r4
    747e:	2178      	movs	r1, #120	; 0x78
    7480:	3245      	adds	r2, #69	; 0x45
    7482:	7011      	strb	r1, [r2, #0]
    7484:	4a6c      	ldr	r2, [pc, #432]	; (7638 <_printf_i+0x22c>)
    7486:	e030      	b.n	74ea <_printf_i+0xde>
    7488:	000e      	movs	r6, r1
    748a:	681a      	ldr	r2, [r3, #0]
    748c:	3642      	adds	r6, #66	; 0x42
    748e:	1d11      	adds	r1, r2, #4
    7490:	6019      	str	r1, [r3, #0]
    7492:	6813      	ldr	r3, [r2, #0]
    7494:	7033      	strb	r3, [r6, #0]
    7496:	2301      	movs	r3, #1
    7498:	e079      	b.n	758e <_printf_i+0x182>
    749a:	0649      	lsls	r1, r1, #25
    749c:	d5d9      	bpl.n	7452 <_printf_i+0x46>
    749e:	1d11      	adds	r1, r2, #4
    74a0:	6019      	str	r1, [r3, #0]
    74a2:	2300      	movs	r3, #0
    74a4:	5ed5      	ldrsh	r5, [r2, r3]
    74a6:	2d00      	cmp	r5, #0
    74a8:	da03      	bge.n	74b2 <_printf_i+0xa6>
    74aa:	232d      	movs	r3, #45	; 0x2d
    74ac:	9a04      	ldr	r2, [sp, #16]
    74ae:	426d      	negs	r5, r5
    74b0:	7013      	strb	r3, [r2, #0]
    74b2:	4b62      	ldr	r3, [pc, #392]	; (763c <_printf_i+0x230>)
    74b4:	270a      	movs	r7, #10
    74b6:	9303      	str	r3, [sp, #12]
    74b8:	e02f      	b.n	751a <_printf_i+0x10e>
    74ba:	6820      	ldr	r0, [r4, #0]
    74bc:	6819      	ldr	r1, [r3, #0]
    74be:	0605      	lsls	r5, r0, #24
    74c0:	d503      	bpl.n	74ca <_printf_i+0xbe>
    74c2:	1d08      	adds	r0, r1, #4
    74c4:	6018      	str	r0, [r3, #0]
    74c6:	680d      	ldr	r5, [r1, #0]
    74c8:	e005      	b.n	74d6 <_printf_i+0xca>
    74ca:	0640      	lsls	r0, r0, #25
    74cc:	d5f9      	bpl.n	74c2 <_printf_i+0xb6>
    74ce:	680d      	ldr	r5, [r1, #0]
    74d0:	1d08      	adds	r0, r1, #4
    74d2:	6018      	str	r0, [r3, #0]
    74d4:	b2ad      	uxth	r5, r5
    74d6:	4b59      	ldr	r3, [pc, #356]	; (763c <_printf_i+0x230>)
    74d8:	2708      	movs	r7, #8
    74da:	9303      	str	r3, [sp, #12]
    74dc:	2a6f      	cmp	r2, #111	; 0x6f
    74de:	d018      	beq.n	7512 <_printf_i+0x106>
    74e0:	270a      	movs	r7, #10
    74e2:	e016      	b.n	7512 <_printf_i+0x106>
    74e4:	3145      	adds	r1, #69	; 0x45
    74e6:	700a      	strb	r2, [r1, #0]
    74e8:	4a54      	ldr	r2, [pc, #336]	; (763c <_printf_i+0x230>)
    74ea:	9203      	str	r2, [sp, #12]
    74ec:	681a      	ldr	r2, [r3, #0]
    74ee:	6821      	ldr	r1, [r4, #0]
    74f0:	1d10      	adds	r0, r2, #4
    74f2:	6018      	str	r0, [r3, #0]
    74f4:	6815      	ldr	r5, [r2, #0]
    74f6:	0608      	lsls	r0, r1, #24
    74f8:	d522      	bpl.n	7540 <_printf_i+0x134>
    74fa:	07cb      	lsls	r3, r1, #31
    74fc:	d502      	bpl.n	7504 <_printf_i+0xf8>
    74fe:	2320      	movs	r3, #32
    7500:	4319      	orrs	r1, r3
    7502:	6021      	str	r1, [r4, #0]
    7504:	2710      	movs	r7, #16
    7506:	2d00      	cmp	r5, #0
    7508:	d103      	bne.n	7512 <_printf_i+0x106>
    750a:	2320      	movs	r3, #32
    750c:	6822      	ldr	r2, [r4, #0]
    750e:	439a      	bics	r2, r3
    7510:	6022      	str	r2, [r4, #0]
    7512:	0023      	movs	r3, r4
    7514:	2200      	movs	r2, #0
    7516:	3343      	adds	r3, #67	; 0x43
    7518:	701a      	strb	r2, [r3, #0]
    751a:	6863      	ldr	r3, [r4, #4]
    751c:	60a3      	str	r3, [r4, #8]
    751e:	2b00      	cmp	r3, #0
    7520:	db5c      	blt.n	75dc <_printf_i+0x1d0>
    7522:	2204      	movs	r2, #4
    7524:	6821      	ldr	r1, [r4, #0]
    7526:	4391      	bics	r1, r2
    7528:	6021      	str	r1, [r4, #0]
    752a:	2d00      	cmp	r5, #0
    752c:	d158      	bne.n	75e0 <_printf_i+0x1d4>
    752e:	9e04      	ldr	r6, [sp, #16]
    7530:	2b00      	cmp	r3, #0
    7532:	d064      	beq.n	75fe <_printf_i+0x1f2>
    7534:	0026      	movs	r6, r4
    7536:	9b03      	ldr	r3, [sp, #12]
    7538:	3642      	adds	r6, #66	; 0x42
    753a:	781b      	ldrb	r3, [r3, #0]
    753c:	7033      	strb	r3, [r6, #0]
    753e:	e05e      	b.n	75fe <_printf_i+0x1f2>
    7540:	0648      	lsls	r0, r1, #25
    7542:	d5da      	bpl.n	74fa <_printf_i+0xee>
    7544:	b2ad      	uxth	r5, r5
    7546:	e7d8      	b.n	74fa <_printf_i+0xee>
    7548:	6809      	ldr	r1, [r1, #0]
    754a:	681a      	ldr	r2, [r3, #0]
    754c:	0608      	lsls	r0, r1, #24
    754e:	d505      	bpl.n	755c <_printf_i+0x150>
    7550:	1d11      	adds	r1, r2, #4
    7552:	6019      	str	r1, [r3, #0]
    7554:	6813      	ldr	r3, [r2, #0]
    7556:	6962      	ldr	r2, [r4, #20]
    7558:	601a      	str	r2, [r3, #0]
    755a:	e006      	b.n	756a <_printf_i+0x15e>
    755c:	0649      	lsls	r1, r1, #25
    755e:	d5f7      	bpl.n	7550 <_printf_i+0x144>
    7560:	1d11      	adds	r1, r2, #4
    7562:	6019      	str	r1, [r3, #0]
    7564:	6813      	ldr	r3, [r2, #0]
    7566:	8aa2      	ldrh	r2, [r4, #20]
    7568:	801a      	strh	r2, [r3, #0]
    756a:	2300      	movs	r3, #0
    756c:	9e04      	ldr	r6, [sp, #16]
    756e:	6123      	str	r3, [r4, #16]
    7570:	e054      	b.n	761c <_printf_i+0x210>
    7572:	681a      	ldr	r2, [r3, #0]
    7574:	1d11      	adds	r1, r2, #4
    7576:	6019      	str	r1, [r3, #0]
    7578:	6816      	ldr	r6, [r2, #0]
    757a:	2100      	movs	r1, #0
    757c:	6862      	ldr	r2, [r4, #4]
    757e:	0030      	movs	r0, r6
    7580:	f000 f908 	bl	7794 <memchr>
    7584:	2800      	cmp	r0, #0
    7586:	d001      	beq.n	758c <_printf_i+0x180>
    7588:	1b80      	subs	r0, r0, r6
    758a:	6060      	str	r0, [r4, #4]
    758c:	6863      	ldr	r3, [r4, #4]
    758e:	6123      	str	r3, [r4, #16]
    7590:	2300      	movs	r3, #0
    7592:	9a04      	ldr	r2, [sp, #16]
    7594:	7013      	strb	r3, [r2, #0]
    7596:	e041      	b.n	761c <_printf_i+0x210>
    7598:	6923      	ldr	r3, [r4, #16]
    759a:	0032      	movs	r2, r6
    759c:	9906      	ldr	r1, [sp, #24]
    759e:	9805      	ldr	r0, [sp, #20]
    75a0:	9d07      	ldr	r5, [sp, #28]
    75a2:	47a8      	blx	r5
    75a4:	1c43      	adds	r3, r0, #1
    75a6:	d043      	beq.n	7630 <_printf_i+0x224>
    75a8:	6823      	ldr	r3, [r4, #0]
    75aa:	2500      	movs	r5, #0
    75ac:	079b      	lsls	r3, r3, #30
    75ae:	d40f      	bmi.n	75d0 <_printf_i+0x1c4>
    75b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    75b2:	68e0      	ldr	r0, [r4, #12]
    75b4:	4298      	cmp	r0, r3
    75b6:	da3d      	bge.n	7634 <_printf_i+0x228>
    75b8:	0018      	movs	r0, r3
    75ba:	e03b      	b.n	7634 <_printf_i+0x228>
    75bc:	0022      	movs	r2, r4
    75be:	2301      	movs	r3, #1
    75c0:	3219      	adds	r2, #25
    75c2:	9906      	ldr	r1, [sp, #24]
    75c4:	9805      	ldr	r0, [sp, #20]
    75c6:	9e07      	ldr	r6, [sp, #28]
    75c8:	47b0      	blx	r6
    75ca:	1c43      	adds	r3, r0, #1
    75cc:	d030      	beq.n	7630 <_printf_i+0x224>
    75ce:	3501      	adds	r5, #1
    75d0:	68e3      	ldr	r3, [r4, #12]
    75d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    75d4:	1a9b      	subs	r3, r3, r2
    75d6:	429d      	cmp	r5, r3
    75d8:	dbf0      	blt.n	75bc <_printf_i+0x1b0>
    75da:	e7e9      	b.n	75b0 <_printf_i+0x1a4>
    75dc:	2d00      	cmp	r5, #0
    75de:	d0a9      	beq.n	7534 <_printf_i+0x128>
    75e0:	9e04      	ldr	r6, [sp, #16]
    75e2:	0028      	movs	r0, r5
    75e4:	0039      	movs	r1, r7
    75e6:	f7fe ff37 	bl	6458 <__aeabi_uidivmod>
    75ea:	9b03      	ldr	r3, [sp, #12]
    75ec:	3e01      	subs	r6, #1
    75ee:	5c5b      	ldrb	r3, [r3, r1]
    75f0:	0028      	movs	r0, r5
    75f2:	7033      	strb	r3, [r6, #0]
    75f4:	0039      	movs	r1, r7
    75f6:	f7fe fea9 	bl	634c <__udivsi3>
    75fa:	1e05      	subs	r5, r0, #0
    75fc:	d1f1      	bne.n	75e2 <_printf_i+0x1d6>
    75fe:	2f08      	cmp	r7, #8
    7600:	d109      	bne.n	7616 <_printf_i+0x20a>
    7602:	6823      	ldr	r3, [r4, #0]
    7604:	07db      	lsls	r3, r3, #31
    7606:	d506      	bpl.n	7616 <_printf_i+0x20a>
    7608:	6863      	ldr	r3, [r4, #4]
    760a:	6922      	ldr	r2, [r4, #16]
    760c:	4293      	cmp	r3, r2
    760e:	dc02      	bgt.n	7616 <_printf_i+0x20a>
    7610:	2330      	movs	r3, #48	; 0x30
    7612:	3e01      	subs	r6, #1
    7614:	7033      	strb	r3, [r6, #0]
    7616:	9b04      	ldr	r3, [sp, #16]
    7618:	1b9b      	subs	r3, r3, r6
    761a:	6123      	str	r3, [r4, #16]
    761c:	9b07      	ldr	r3, [sp, #28]
    761e:	aa09      	add	r2, sp, #36	; 0x24
    7620:	9300      	str	r3, [sp, #0]
    7622:	0021      	movs	r1, r4
    7624:	9b06      	ldr	r3, [sp, #24]
    7626:	9805      	ldr	r0, [sp, #20]
    7628:	f7ff fe82 	bl	7330 <_printf_common>
    762c:	1c43      	adds	r3, r0, #1
    762e:	d1b3      	bne.n	7598 <_printf_i+0x18c>
    7630:	2001      	movs	r0, #1
    7632:	4240      	negs	r0, r0
    7634:	b00b      	add	sp, #44	; 0x2c
    7636:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7638:	0000a1ba 	.word	0x0000a1ba
    763c:	0000a1a9 	.word	0x0000a1a9

00007640 <__sread>:
    7640:	b570      	push	{r4, r5, r6, lr}
    7642:	000c      	movs	r4, r1
    7644:	250e      	movs	r5, #14
    7646:	5f49      	ldrsh	r1, [r1, r5]
    7648:	f000 f8b0 	bl	77ac <_read_r>
    764c:	2800      	cmp	r0, #0
    764e:	db03      	blt.n	7658 <__sread+0x18>
    7650:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7652:	181b      	adds	r3, r3, r0
    7654:	6563      	str	r3, [r4, #84]	; 0x54
    7656:	bd70      	pop	{r4, r5, r6, pc}
    7658:	89a3      	ldrh	r3, [r4, #12]
    765a:	4a02      	ldr	r2, [pc, #8]	; (7664 <__sread+0x24>)
    765c:	4013      	ands	r3, r2
    765e:	81a3      	strh	r3, [r4, #12]
    7660:	e7f9      	b.n	7656 <__sread+0x16>
    7662:	46c0      	nop			; (mov r8, r8)
    7664:	ffffefff 	.word	0xffffefff

00007668 <__swrite>:
    7668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    766a:	001f      	movs	r7, r3
    766c:	898b      	ldrh	r3, [r1, #12]
    766e:	0005      	movs	r5, r0
    7670:	000c      	movs	r4, r1
    7672:	0016      	movs	r6, r2
    7674:	05db      	lsls	r3, r3, #23
    7676:	d505      	bpl.n	7684 <__swrite+0x1c>
    7678:	230e      	movs	r3, #14
    767a:	5ec9      	ldrsh	r1, [r1, r3]
    767c:	2200      	movs	r2, #0
    767e:	2302      	movs	r3, #2
    7680:	f000 f874 	bl	776c <_lseek_r>
    7684:	89a3      	ldrh	r3, [r4, #12]
    7686:	4a05      	ldr	r2, [pc, #20]	; (769c <__swrite+0x34>)
    7688:	0028      	movs	r0, r5
    768a:	4013      	ands	r3, r2
    768c:	81a3      	strh	r3, [r4, #12]
    768e:	0032      	movs	r2, r6
    7690:	230e      	movs	r3, #14
    7692:	5ee1      	ldrsh	r1, [r4, r3]
    7694:	003b      	movs	r3, r7
    7696:	f000 f81f 	bl	76d8 <_write_r>
    769a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    769c:	ffffefff 	.word	0xffffefff

000076a0 <__sseek>:
    76a0:	b570      	push	{r4, r5, r6, lr}
    76a2:	000c      	movs	r4, r1
    76a4:	250e      	movs	r5, #14
    76a6:	5f49      	ldrsh	r1, [r1, r5]
    76a8:	f000 f860 	bl	776c <_lseek_r>
    76ac:	89a3      	ldrh	r3, [r4, #12]
    76ae:	1c42      	adds	r2, r0, #1
    76b0:	d103      	bne.n	76ba <__sseek+0x1a>
    76b2:	4a05      	ldr	r2, [pc, #20]	; (76c8 <__sseek+0x28>)
    76b4:	4013      	ands	r3, r2
    76b6:	81a3      	strh	r3, [r4, #12]
    76b8:	bd70      	pop	{r4, r5, r6, pc}
    76ba:	2280      	movs	r2, #128	; 0x80
    76bc:	0152      	lsls	r2, r2, #5
    76be:	4313      	orrs	r3, r2
    76c0:	81a3      	strh	r3, [r4, #12]
    76c2:	6560      	str	r0, [r4, #84]	; 0x54
    76c4:	e7f8      	b.n	76b8 <__sseek+0x18>
    76c6:	46c0      	nop			; (mov r8, r8)
    76c8:	ffffefff 	.word	0xffffefff

000076cc <__sclose>:
    76cc:	b510      	push	{r4, lr}
    76ce:	230e      	movs	r3, #14
    76d0:	5ec9      	ldrsh	r1, [r1, r3]
    76d2:	f000 f815 	bl	7700 <_close_r>
    76d6:	bd10      	pop	{r4, pc}

000076d8 <_write_r>:
    76d8:	b570      	push	{r4, r5, r6, lr}
    76da:	0005      	movs	r5, r0
    76dc:	0008      	movs	r0, r1
    76de:	0011      	movs	r1, r2
    76e0:	2200      	movs	r2, #0
    76e2:	4c06      	ldr	r4, [pc, #24]	; (76fc <_write_r+0x24>)
    76e4:	6022      	str	r2, [r4, #0]
    76e6:	001a      	movs	r2, r3
    76e8:	f7fb f9c4 	bl	2a74 <_write>
    76ec:	1c43      	adds	r3, r0, #1
    76ee:	d103      	bne.n	76f8 <_write_r+0x20>
    76f0:	6823      	ldr	r3, [r4, #0]
    76f2:	2b00      	cmp	r3, #0
    76f4:	d000      	beq.n	76f8 <_write_r+0x20>
    76f6:	602b      	str	r3, [r5, #0]
    76f8:	bd70      	pop	{r4, r5, r6, pc}
    76fa:	46c0      	nop			; (mov r8, r8)
    76fc:	200036f4 	.word	0x200036f4

00007700 <_close_r>:
    7700:	2300      	movs	r3, #0
    7702:	b570      	push	{r4, r5, r6, lr}
    7704:	4c06      	ldr	r4, [pc, #24]	; (7720 <_close_r+0x20>)
    7706:	0005      	movs	r5, r0
    7708:	0008      	movs	r0, r1
    770a:	6023      	str	r3, [r4, #0]
    770c:	f7fb f9ec 	bl	2ae8 <_close>
    7710:	1c43      	adds	r3, r0, #1
    7712:	d103      	bne.n	771c <_close_r+0x1c>
    7714:	6823      	ldr	r3, [r4, #0]
    7716:	2b00      	cmp	r3, #0
    7718:	d000      	beq.n	771c <_close_r+0x1c>
    771a:	602b      	str	r3, [r5, #0]
    771c:	bd70      	pop	{r4, r5, r6, pc}
    771e:	46c0      	nop			; (mov r8, r8)
    7720:	200036f4 	.word	0x200036f4

00007724 <_fstat_r>:
    7724:	2300      	movs	r3, #0
    7726:	b570      	push	{r4, r5, r6, lr}
    7728:	4c06      	ldr	r4, [pc, #24]	; (7744 <_fstat_r+0x20>)
    772a:	0005      	movs	r5, r0
    772c:	0008      	movs	r0, r1
    772e:	0011      	movs	r1, r2
    7730:	6023      	str	r3, [r4, #0]
    7732:	f7fb f9dc 	bl	2aee <_fstat>
    7736:	1c43      	adds	r3, r0, #1
    7738:	d103      	bne.n	7742 <_fstat_r+0x1e>
    773a:	6823      	ldr	r3, [r4, #0]
    773c:	2b00      	cmp	r3, #0
    773e:	d000      	beq.n	7742 <_fstat_r+0x1e>
    7740:	602b      	str	r3, [r5, #0]
    7742:	bd70      	pop	{r4, r5, r6, pc}
    7744:	200036f4 	.word	0x200036f4

00007748 <_isatty_r>:
    7748:	2300      	movs	r3, #0
    774a:	b570      	push	{r4, r5, r6, lr}
    774c:	4c06      	ldr	r4, [pc, #24]	; (7768 <_isatty_r+0x20>)
    774e:	0005      	movs	r5, r0
    7750:	0008      	movs	r0, r1
    7752:	6023      	str	r3, [r4, #0]
    7754:	f7fb f9d0 	bl	2af8 <_isatty>
    7758:	1c43      	adds	r3, r0, #1
    775a:	d103      	bne.n	7764 <_isatty_r+0x1c>
    775c:	6823      	ldr	r3, [r4, #0]
    775e:	2b00      	cmp	r3, #0
    7760:	d000      	beq.n	7764 <_isatty_r+0x1c>
    7762:	602b      	str	r3, [r5, #0]
    7764:	bd70      	pop	{r4, r5, r6, pc}
    7766:	46c0      	nop			; (mov r8, r8)
    7768:	200036f4 	.word	0x200036f4

0000776c <_lseek_r>:
    776c:	b570      	push	{r4, r5, r6, lr}
    776e:	0005      	movs	r5, r0
    7770:	0008      	movs	r0, r1
    7772:	0011      	movs	r1, r2
    7774:	2200      	movs	r2, #0
    7776:	4c06      	ldr	r4, [pc, #24]	; (7790 <_lseek_r+0x24>)
    7778:	6022      	str	r2, [r4, #0]
    777a:	001a      	movs	r2, r3
    777c:	f7fb f9be 	bl	2afc <_lseek>
    7780:	1c43      	adds	r3, r0, #1
    7782:	d103      	bne.n	778c <_lseek_r+0x20>
    7784:	6823      	ldr	r3, [r4, #0]
    7786:	2b00      	cmp	r3, #0
    7788:	d000      	beq.n	778c <_lseek_r+0x20>
    778a:	602b      	str	r3, [r5, #0]
    778c:	bd70      	pop	{r4, r5, r6, pc}
    778e:	46c0      	nop			; (mov r8, r8)
    7790:	200036f4 	.word	0x200036f4

00007794 <memchr>:
    7794:	b2c9      	uxtb	r1, r1
    7796:	1882      	adds	r2, r0, r2
    7798:	4290      	cmp	r0, r2
    779a:	d101      	bne.n	77a0 <memchr+0xc>
    779c:	2000      	movs	r0, #0
    779e:	4770      	bx	lr
    77a0:	7803      	ldrb	r3, [r0, #0]
    77a2:	428b      	cmp	r3, r1
    77a4:	d0fb      	beq.n	779e <memchr+0xa>
    77a6:	3001      	adds	r0, #1
    77a8:	e7f6      	b.n	7798 <memchr+0x4>
	...

000077ac <_read_r>:
    77ac:	b570      	push	{r4, r5, r6, lr}
    77ae:	0005      	movs	r5, r0
    77b0:	0008      	movs	r0, r1
    77b2:	0011      	movs	r1, r2
    77b4:	2200      	movs	r2, #0
    77b6:	4c06      	ldr	r4, [pc, #24]	; (77d0 <_read_r+0x24>)
    77b8:	6022      	str	r2, [r4, #0]
    77ba:	001a      	movs	r2, r3
    77bc:	f7fb f938 	bl	2a30 <_read>
    77c0:	1c43      	adds	r3, r0, #1
    77c2:	d103      	bne.n	77cc <_read_r+0x20>
    77c4:	6823      	ldr	r3, [r4, #0]
    77c6:	2b00      	cmp	r3, #0
    77c8:	d000      	beq.n	77cc <_read_r+0x20>
    77ca:	602b      	str	r3, [r5, #0]
    77cc:	bd70      	pop	{r4, r5, r6, pc}
    77ce:	46c0      	nop			; (mov r8, r8)
    77d0:	200036f4 	.word	0x200036f4
    77d4:	42000400 	.word	0x42000400
    77d8:	42000800 	.word	0x42000800
    77dc:	42000c00 	.word	0x42000c00
    77e0:	42001000 	.word	0x42001000
    77e4:	42001400 	.word	0x42001400
    77e8:	42001800 	.word	0x42001800
    77ec:	000022ea 	.word	0x000022ea
    77f0:	000022e6 	.word	0x000022e6
    77f4:	000022e6 	.word	0x000022e6
    77f8:	00002318 	.word	0x00002318
    77fc:	00002318 	.word	0x00002318
    7800:	00002302 	.word	0x00002302
    7804:	000022f0 	.word	0x000022f0
    7808:	00002308 	.word	0x00002308
    780c:	000024dc 	.word	0x000024dc
    7810:	000024bc 	.word	0x000024bc
    7814:	000024bc 	.word	0x000024bc
    7818:	00002512 	.word	0x00002512
    781c:	000024ce 	.word	0x000024ce
    7820:	000024ea 	.word	0x000024ea
    7824:	000024c0 	.word	0x000024c0
    7828:	000024f8 	.word	0x000024f8
    782c:	72617453 	.word	0x72617453
    7830:	25203a74 	.word	0x25203a74
    7834:	000a0d64 	.word	0x000a0d64
    7838:	6e697355 	.word	0x6e697355
    783c:	61682067 	.word	0x61682067
    7840:	6f636472 	.word	0x6f636472
    7844:	20646564 	.word	0x20646564
    7848:	756c6176 	.word	0x756c6176
    784c:	2e2e7365 	.word	0x2e2e7365
    7850:	00000d2e 	.word	0x00000d2e
    7854:	20465550 	.word	0x20465550
    7858:	66757473 	.word	0x66757473
    785c:	6f6e2066 	.word	0x6f6e2066
    7860:	76612074 	.word	0x76612074
    7864:	616c6961 	.word	0x616c6961
    7868:	2e656c62 	.word	0x2e656c62
    786c:	0000000d 	.word	0x0000000d

00007870 <PARAMETER_d>:
    7870:	00000142 00000000 000e4000 00000000     B........@......
    7880:	00000000 01fc0c8d 0085223c 020fcb38     ........<"..8...
    7890:	0211995f 005e472f                       _.../G^.

00007898 <FIXED_BASE_TABLE>:
    7898:	0303e631 028d3ce9 02b5fe18 02fc7540     1....<......@u..
    78a8:	00287460 00f90353 0398bdf9 02cdee02     `t(.S...........
    78b8:	00de2e1a 000c3ba0 00937edc 03c3e62c     .....;...~..,...
    78c8:	0055590b 01e093c3 00740b7c 03a01366     .YU.....|.t.f...
    78d8:	0048e448 017a5b32 02e4ea55 004ffcf5     H.H.2[z.U.....O.
    78e8:	03da42bb 02bf32ea 017c6297 00dd55b2     .B...2...b|..U..
    78f8:	005948d1 0330684c 02268e4c 01f27a81     .HY.Lh0.L.&..z..
    7908:	01c828d0 000caf2b 01188787 02e8063f     .(..+.......?...
    7918:	012a83a8 02062374 00554612 009f9b77     ..*.t#...FU.w...
    7928:	00f30cf0 02049b0b 03e2e134 001baeea     ........4.......
    7938:	01faf900 01096984 03789006 004b869b     .....i....x...K.
    7948:	0018f7cd 02556066 033c2684 036eb6dc     ....f`U..&<...n.
    7958:	03bab39e 00448e05 012829b0 03ccda27     ......D..)(.'...
    7968:	03db4bf2 032ca55e 006d911d 003c03ee     .K..^.,...m...<.
    7978:	00d4f6f7 025019f2 0016eafb 0006c543     ......P.....C...
    7988:	01afa125 03d15c4f 0364d2ea 01619228     %...O\....d.(.a.
    7998:	00729630 01313ef2 01ddc7e7 0306961b     0.r..>1.........
    79a8:	03e2ff8a 004f41c7 019790ac 0188eb96     .....AO.........
    79b8:	00a42408 021910cc 004d3385 00dd7487     .$.......3M..t..
    79c8:	01a59927 02114fc5 03839663 0074df72     '....O..c...r.t.
    79d8:	013c110b 0018c964 030d8c9a 00457f92     ..<.d.........E.
    79e8:	00076bd4 02bff3d9 00679975 03a08766     .k......u.g.f...
    79f8:	0051f3b8 00249240 00965a73 016e5852     ..Q.@.$.sZ..RXn.
    7a08:	03706d69 028a20a7 0028aac8 01f7a57b     imp.. ....(.{...
    7a18:	007014ca 0200e41f 03a27c0f 00441ca9     ..p......|....D.
    7a28:	03f7241e 028e2ae2 037f4e1a 02bf20ca     .$...*...N... ..
    7a38:	0058f28c 025400c6 02be2e3e 0063ecad     ..X...T.>.....c.
    7a48:	0018a13a 0034b6d1 02f15097 02632ace     :.....4..P...*c.
    7a58:	01c49f54 024005f6 006dbe77 0048e8bc     T.....@.w.m...H.
    7a68:	03ddaa05 0200663b 016fc8eb 00637192     ....;f....o..qc.
    7a78:	01ed81fa 00b1c86f 016abc5e 03bb5a01     ....o...^.j..Z..
    7a88:	004ede70 00975810 03366d6d 01aa88f3     p.N..X..mm6.....
    7a98:	0064bc2a 004752fd 03734414 01e53ac7     *.d..RG..Ds..:..
    7aa8:	00662318 034b211a 0011ddf7 02b1a34e     .#f..!K.....N...
    7ab8:	00ec1bdc 02770261 02cdeac1 00465575     ....a.w.....uUF.
    7ac8:	02638d2b 026117e0 018ce40b 0141e40a     +.c...a.......A.
    7ad8:	00488940 01b4f131 02e4e940 032fbbed     @.H.1...@...../.
    7ae8:	0034a226 0004f356 015b278b 03761d44     &.4.V....'[.D.v.
    7af8:	0058a457 0395364a 0056f25e 020c977e     W.X.J6..^.V.~...
    7b08:	01307373 0099692d 01061f5d 00078fca     ss0.-i..].......
    7b18:	02cc22a1 02cb7b5d 02bf63bb 0214f770     ."..]{...c..p...
    7b28:	00117b28 01c2baa2 00dd9f2e 00a8f43f     ({..........?...
    7b38:	009783aa 0073079e 0215796d 01e64ad6     ......s.my...J..
    7b48:	02f92017 00520367 002e7772 03372916     . ..g.R.rw...)7.
    7b58:	02620d59 0176dbe0 01adebdd 00258f17     Y.b...v.......%.
    7b68:	0168391b 00ce3f58 013a4308 017e69cd     .9h.X?...C:..i~.
    7b78:	00728592 03e85114 0303f413 02b51862     ..r..Q......b...
    7b88:	039d08eb 0053259e 033b1a68 000c6a12     .....%S.h.;..j..
    7b98:	031fcfe0 01987e81 001a4f1d 01c928a7     .....~...O...(..
    7ba8:	035505a3 02a6a2dd 006b7c65 0060185c     ..U.....e|k.\.`.
    7bb8:	006da9b4 0025c5f7 03c03498 012d373f     ..m...%..4..?7-.
    7bc8:	00606209 01fa7e8d 03a9be81 008a0a41     .b`..~......A...
    7bd8:	01bc9dc5 004a4fe0 029e80f0 0094ea7b     .....OJ.....{...
    7be8:	017337bb 022f32c4 00419a92 029a039e     .7s..2/...A.....
    7bf8:	008ef99a 014bb843 02ba5ca0 0001b2d1     ....C.K..\......
    7c08:	03051231 02216134 01dd7a75 0083325e     1...4a!.uz..^2..
    7c18:	0054df1e 022f22dd 0241bf8f 01a0f91d     ..T.."/...A.....
    7c28:	025d7f7c 004e36e9 03747634 021c5d1a     |.]..6N.4vt..]..
    7c38:	03433d81 02ebbb84 003e5e31 0173baa3     .=C.....1^>...s.
    7c48:	02a025e5 037c6e4d 0365f3f9 004b852a     .%..Mn|...e.*.K.
    7c58:	00418b9e 02cd19c5 02f88e08 026cbf9b     ..A...........l.
    7c68:	00283d71 005c180b 00e74b79 015c8b73     q=(...\.yK..s.\.
    7c78:	03bc474b 0075acfc 00561876 001ddea3     KG....u.v.V.....
    7c88:	00c4b8f4 01029c4d 000c54ac 02baee08     ....M....T......
    7c98:	038a1f59 008bfb92 01401a86 006f357e     Y.........@.~5o.
    7ca8:	011e6971 000cc67b 03d40c59 03be476b     qi..{...Y...kG..
    7cb8:	00747c45 012f816e 0021aa47 02f7dde4     E|t.n./.G.!.....
    7cc8:	03b6cecf 005dcb27 021dd2ee 03711b3e     ....'.].....>.q.
    7cd8:	0249843f 027dc259 0051551f 01ed9bdc     ?.I.Y.}..UQ.....
    7ce8:	014d3dd8 0307fb54 02cc1cfe 00453455     .=M.T.......U4E.
    7cf8:	03cab70b 01dcf8e0 034dff24 0179d633     ........$.M.3.y.
    7d08:	00679be2 003eee29 01fb7ca5 00f66da1     ..g.).>..|...m..
    7d18:	02e35b70 003dc9e5 013fb75b 01432e90     p[....=.[.?...C.
    7d28:	0137f56a 016f16a1 001e6531 002c7213     j.7...o.1e...r,.
    7d38:	024090a0 0252e5ff 0323d094 0073c9d8     ..@...R...#...s.
    7d48:	03198c8f 00dee18c 00f333c6 02cfb505     .........3......
    7d58:	00534f84 02dd6902 004f9cb7 033afad3     .OS..i....O...:.
    7d68:	0250737c 005ed57e 0257306e 03f8074a     |sP.~.^.n0W.J...
    7d78:	013f95a6 03a8d11c 0073b63d 031c2bf3     ..?.....=.s..+..
    7d88:	02dc15c3 018db39c 03927c68 002df8c6     ........h|....-.
    7d98:	037797e4 02f0d259 01062661 032efafa     ..w.Y...a&......
    7da8:	00501ae7 00959643 00aa237a 01d515b5     ..P.C...z#......
    7db8:	00a04700 00037275 001bb928 0315e88c     .G..ur..(.......
    7dc8:	00fc6010 01c55555 00378b31 01a02cf1     .`..UU..1.7..,..
    7dd8:	00fe908a 01b29f88 02e1435f 005f0047     ........_C..G._.
    7de8:	00402daa 011eb8ca 022bc4d2 009ea142     .-@.......+.B...
    7df8:	000d0306 00a443f5 019766a2 03089b4e     .....C...f..N...
    7e08:	01acb5b6 006ec968 02a1d987 000b823f     ....h.n.....?...
    7e18:	03600de2 034fca35 005c64e1 0261bfb7     ..`.5.O..d\...a.
    7e28:	0345efbd 0334c157 00db75d4 0056392d     ..E.W.4..u..-9V.
    7e38:	0119155c 011e362f 02afde25 00b4f4cd     \.../6..%.......
    7e48:	00146d4f 014e15e8 02f802fe 010c09bf     Om....N.........
    7e58:	0269ab7c 002b185a 0152ab7b 0149ecfb     |.i.Z.+.{.R...I.
    7e68:	01e80926 0051cc40 0067997e 007cc541     &...@.Q.~.g.A.|.
    7e78:	03d3fd25 01a7ab58 031feb26 0036f800     %...X...&.....6.
    7e88:	000456d9 000b8c90 0297bd03 00d902f1     .V..............
    7e98:	004372e4 0350d898 0132aed1 03cbf914     .rC...P...2.....
    7ea8:	03eb2688 0075d25a 0255cbfe 01645d9d     .&..Z.u...U..]d.
    7eb8:	00b07794 01985ff1 0074db21 0166d0c9     .w..._..!.t...f.
    7ec8:	01ec8909 03b23705 01642105 001d543b     .....7...!d.;T..
    7ed8:	00428783 00a02d11 003ef19c 03f62db3     ..B..-....>..-..
    7ee8:	00352309 0068ae72 00cf5ab0 019f4378     .#5.r.h..Z..xC..
    7ef8:	00688f00 004ec067 03d05bb5 020db868     ..h.g.N..[..h...
    7f08:	02fe39d9 037fc893 0044fe1a 017efb4a     .9........D.J.~.
    7f18:	01af0f39 00150a29 01a0d685 002efec8     9...)...........
    7f28:	03194bca 0067027e 012062fe 034e54f3     .K..~.g..b ..TN.
    7f38:	0018cc07 01c0b9e0 03fc85f2 03cee5bd     ................
    7f48:	0159606a 00671aa7 00f7d1a2 030ceb8a     j`Y...g.........
    7f58:	023fee1c 0124de82 001b6f25 01babb83     ..?...$.%o......
    7f68:	000f4599 01211515 00db5622 0074b956     .E....!."V..V.t.
    7f78:	0296f869 025eb93a 010bdbdb 00627894     i...:.^......xb.
    7f88:	001507ce 02b93b13 0393553e 00929796     .....;..>U......
    7f98:	017c1658 006a8176 01a833ed 01014879     X.|.v.j..3..yH..
    7fa8:	036442e9 00cac917 003bdea5 03d52693     .Bd.......;..&..
    7fb8:	01da5d7f 00ed6bea 0122e9b5 0064b948     .]...k....".H.d.
    7fc8:	00e33ec7 014b4065 01f259db 0369558e     .>..e@K..Y...Ui.
    7fd8:	0071cf65 035a8138 01cec7f6 01c22ede     e.q.8.Z.........
    7fe8:	00edb18b 0012e4d1 01185517 026c3099     .........U...0l.
    7ff8:	03dd09d1 03495ed7 0077a011 02cd84e4     .....^I...w.....
    8008:	037172ab 012d11fe 005478d2 0046844e     .rq...-..xT.N.F.
    8018:	004220df 008e8c64 030997a4 031d1fa3     . B.d...........
    8028:	005b3165 0335e22e 0197bab7 0195b1c6     e1[...5.........
    8038:	015bf115 007802b5 015bd2de 00b7bd00     ..[...x...[.....
    8048:	026ad85a 021e55c5 0017f2ab 0060c1e5     Z.j..U........`.
    8058:	03db4d48 00e6a19c 0346f902 00122a7a     HM........F.z*..
    8068:	005bf766 026ef219 01acf5b7 0275342b     f.[...n.....+4u.
    8078:	0020fb00 03a28538 009a89ca 00bde975     .. .8.......u...
    8088:	03a43508 007041b4 00dab057 00044cd6     .5...Ap.W....L..
    8098:	002433b3 019bc349 003d398b 03cd4708     .3$.I....9=..G..
    80a8:	01666680 0009691a 0027364e 001eae24     .ff..i..N6'.$...
    80b8:	0036108c 035ad813 0196866d 00de2420     ..6...Z.m... $..
    80c8:	00171308 0125dcfd 02b5a45c 031ca57c     ......%.\...|...
    80d8:	02e25c13 0034b06c 0335abf2 03fa39c7     .\..l.4...5..9..
    80e8:	00db9dca 00663551 00698331 03af075b     ....Q5f.1.i.[...
    80f8:	01d9d990 02b6d628 03955674 00200950     ....(...tV..P. .
    8108:	00dd9074 018ff0fb 013a2d4f 01c50ab0     t.......O-:.....
    8118:	00747331 01319356 0000c201 038ba96b     1st.V.1.....k...
    8128:	0380910d 002c20ff 026ac01a 025446b4     ..... ,...j..FT.
    8138:	03cf6488 0086665f 004ee327 030bf8ea     .d.._f..'.N.....
    8148:	03f9b9c3 026d715f 02d29b42 006b617f     ...._qm.B....ak.
    8158:	012f7324 01b72871 00277491 03c2191a     $s/.q(...t'.....
    8168:	003c8269 0037e04b 00843132 0142cc24     i.<.K.7.21..$.B.
    8178:	013e4569 004e480b 027fe35e 03bcec26     iE>..HN.^...&...
    8188:	004b2c5f 037913f6 0031a501 00a407b9     _,K...y...1.....
    8198:	00a79250 025ab79f 00f29733 000ba7e0     P.....Z.3.......
    81a8:	0274d8ea 022c8162 01adca7a 0204389b     ..t.b.,.z....8..
    81b8:	0046f4c7 00a1128a 01c6b3a5 02811461     ..F.........a...
    81c8:	00095256 0044db55 03f18d5c 02278692     VR..U.D.\.....'.
    81d8:	006b27f8 00a90fcc 004d4f17 031cffad     .'k......OM.....
    81e8:	0265d9ae 01aca33a 0164934e 00625477     ..e.:...N.d.wTb.
    81f8:	0225136e 0148c3b0 0211dd85 0341e364     n.%...H.....d.A.
    8208:	001c544d 023f63ba 03a65a7d 0138212f     MT...c?.}Z../!8.
    8218:	03725277 00069af1 03e5c256 02f3d033     wRr.....V...3...
    8228:	03595305 02492eee 0063ae90 03b7de06     .SY...I...c.....
    8238:	00425de4 0043ee45 03ce7f00 0009780c     .]B.E.C......x..
    8248:	03798871 02be39fa 03a37827 01b1dd5d     q.y..9..'x..]...
    8258:	003ace8a 02e055ba 03c184cc 0292b79d     ..:..U..........
    8268:	01eaab3a 00561dc0 020d2673 0108b660     :.....V.s&..`...
    8278:	013487e4 020f82bd 006b85df 02d8526b     ..4.......k.kR..
    8288:	0146b077 002bd1f1 039455c5 0035ead8     w.F...+..U....5.
    8298:	03c79dd4 01bbdb0c 03de46da 01349653     .........F..S.4.
    82a8:	005f2ea0 0027d5fa 00df4330 0331b910     .._...'.0C....1.
    82b8:	00401ec0 0053b540 014ba5a3 03c6628f     ..@.@.S...K..b..
    82c8:	00195810 00966ea5 004463bd 002acf9e     .X...n...cD...*.
    82d8:	02252b3b 009ce32b 0187590d 00787117     ;+%.+....Y...qx.
    82e8:	011fe211 02b86cfd 02463253 00fd4d6d     .....l..S2F.mM..
    82f8:	00409e4b 025e49de 00db4436 0336a3a2     K.@..I^.6D....6.
    8308:	000a7084 0019d2b1 02aadd90 017d010d     .p............}.
    8318:	00b19283 00541464 000942a3 02828279     ....d.T..B..y...
    8328:	0244c61d 01f9cc18 030f2a38 003afe96     ..D.....8*....:.
    8338:	01230693 02006d24 010919f1 02e1897f     ..#.$m..........
    8348:	0039e28d 01d44c8e 02d40d57 0280d9fa     ..9..L..W.......
    8358:	0369ca6c 00145155 014d76d5 033e0407     l.i.UQ...vM...>.
    8368:	02c68d3c 006a30ad 005a0faa 0354ea8a     <....0j...Z...T.
    8378:	019b2132 007733cc 038fd59b 0051052c     2!...3w.....,.Q.
    8388:	01ae9ff5 03853799 030243be 02280733     .....7...C..3.(.
    8398:	00758611 016bf15e 039e4722 013d6089     ..u.^.k."G...`=.
    83a8:	00b49876 0035ff02 037d1cf9 03384f63     v.....5...}.cO8.
    83b8:	038f6cd3 023e56de 004f1de9 02dc41b4     .l...V>...O..A..
    83c8:	01a28918 01d2951e 00f08fdb 0061ad9e     ..............a.
    83d8:	00ebdb51 03fa9920 02cf3584 001cfe77     Q... ....5..w...
    83e8:	005d52fe 01f336d5 03920fab 0296a9af     .R]..6..........
    83f8:	032602c5 001dfa03 03819a19 01cf51ff     ..&..........Q..
    8408:	000ed55f 0174d844 00697bf5 02399419     _...D.t..{i...9.
    8418:	01201111 0259fded 0119ff38 00618c94     .. ...Y.8.....a.
    8428:	008ef50c 025ffc7c 033c0f25 02e63764     ....|._.%.<.d7..
    8438:	0007c935 00ded5f6 01632f1e 0148fbb7     5......../c...H.
    8448:	001abc4c 001e9a0d 034cd4db 0338515f     L.........L._Q8.
    8458:	00994879 028658b5 0028396c 017605c3     yH...X..l9(...v.
    8468:	02568f71 027b1f50 00f69314 001e570f     q.V.P.{......W..
    8478:	00935787 01a68e41 01cce2af 01dbf740     .W..A.......@...
    8488:	00591ee3 00bc8633 02d637e2 015d1f77     ..Y.3....7..w.].
    8498:	0146cbce 005464d6 029a86ae 03025ac7     ..F..dT......Z..
    84a8:	02b28afb 012fd96d 006ce2df 029d3e08     ....m./...l..>..
    84b8:	02a0a34b 026d03b3 007634b5 00638201     K.....m..4v...c.
    84c8:	013d193d 021f2993 016af949 0034edb5     =.=..)..I.j...4.
    84d8:	0050ddf7 00ad15a9 037d9f32 01f928d5     ..P.....2.}..(..
    84e8:	0262f16c 00392080 03d5a4fb 027d4837     l.b.. 9.....7H}.
    84f8:	03ba9ce9 021ee1a9 00323bbc 0003c789     .........;2.....
    8508:	03e22a36 00055e13 02f7c880 0056ffdc     6*...^........V.
    8518:	0324c72d 03c368c6 00c163af 01991830     -.$..h...c..0...
    8528:	00700115 02c46a13 01edfd4e 03bc276f     ..p..j..N...o'..
    8538:	03fadc1d 001c069b 014a3c36 01c64f28     ........6<J.(O..
    8548:	01e3d8f4 012bc223 006d73e3 017d6634     ....#.+..sm.4f}.
    8558:	02caf64c 01ec8634 00e2ddfc 005b4047     L...4.......G@[.
    8568:	00a1cb1d 03eaedc7 02a46f34 032b2951     ........4o..Q)+.
    8578:	00054abb 00eda660 0372b742 01ef1e8c     .J..`...B.r.....
    8588:	02fe562f 006971ab 01db4eaf 00e155f7     /V...qi..N...U..
    8598:	0367c413 0216c1e6 001e1585 03a26068     ..g.........h`..
    85a8:	01c11d33 02469d22 00cacf3a 0053b36d     3...".F.:...m.S.
    85b8:	00543d08 0148f05b 0314e011 00b17dcc     .=T.[.H......}..
    85c8:	004668e9 0117acd1 03cfaf90 0131abae     .hF...........1.
    85d8:	006a9c4e 0004037d 0390c68d 00463938     N.j.}.......89F.
    85e8:	0157568e 01569130 006b80cd 0329c032     .VW.0.V...k.2.).
    85f8:	01faa295 01ab2730 017fbba6 005cc547     ....0'......G.\.
    8608:	0014ac75 01439093 01cd8344 01f976cf     u.....C.D....v..
    8618:	003f0915 00588052 038ac6d4 02f8f62c     ..?.R.X.....,...
    8628:	03153994 0027a899 03c2a5ed 0340e7cb     .9....'.......@.
    8638:	03eec0ac 03775604 004b4044 00a75958     .....Vw.D@K.XY..
    8648:	034627a4 033a1c04 02f39c74 00242551     .'F...:.t...Q%$.
    8658:	01f87f05 02be5ad4 01815d95 0083e027     .....Z...]..'...
    8668:	00029888 039483c5 03d97dce 00b43b27     .........}..';..
    8678:	0117d0d9 002ef607 034fb8b9 01af724f     ..........O.Or..
    8688:	03b8acb6 02d21d5a 002b86c9 039867a1     ....Z.....+..g..
    8698:	02f6b826 029aaf8e 006139bf 00441e70     &........9a.p.D.
    86a8:	00cc1289 0094c0cc 02992fdc 016a2d35     ........./..5-j.
    86b8:	0047d8d6 00ae74be 00edbe8c 019d58c0     ..G..t.......X..
    86c8:	00f30ef6 001ca869 0018f2a6 03ac5444     ....i.......DT..
    86d8:	03ff5699 019367d3 003da047 013aab59     .V...g..G.=.Y.:.
    86e8:	01c810cf 017ff361 0184b2e1 002fa911     ....a........./.
    86f8:	002f1cac 015f6843 00619a40 02e4ce97     ../.Ch_.@.a.....
    8708:	0048a219 015f0bc5 01040834 01dad423     ..H..._.4...#...
    8718:	01411a82 0073f889 027421b8 0354c4b1     ..A...s..!t...T.
    8728:	0222e1ba 006cda39 00419477 004e0dff     ..".9.l.w.A...N.
    8738:	01c69e79 031c28cc 0391519f 004b4564     y....(...Q..dEK.
    8748:	03e52093 027c5aab 03ea9775 03735d7e     . ...Z|.u...~]s.
    8758:	00391b71 034ef798 0301a52a 0130d2a1     q.9...N.*.....0.
    8768:	01515110 00023087 03aa1aa1 02b87ff3     .QQ..0..........
    8778:	021e74b7 00cb5ccd 0064e26f 010b54b9     .t...\..o.d..T..
    8788:	011c0e2f 02e158da 01bfabb3 00148cfa     /....X..........
    8798:	01c2cc3d 01b5351e 003de375 02a34c55     =....5..u.=.UL..
    87a8:	0025d44e 02bb2c43 0322fbc9 0337fd82     N.%.C,...."...7.
    87b8:	000cf49f 002c2047 03dad260 00cf660d     ....G ,.`....f..
    87c8:	03b7d5bd 005e8ce0 00779431 02a583f2     ......^.1.w.....
    87d8:	01c75a5f 01bf2120 009ca889 003c7c41     _Z.. !......A|<.
    87e8:	01f03ad3 02ef7ebc 0370492e 0031a2d8     .:...~...Ip...1.
    87f8:	005d6103 02ee75d1 038a14ee 03636ca6     .a]..u.......lc.
    8808:	00d1dc68 0012404b 02667e4f 00f118c9     h...K@..O~f.....
    8818:	023b0be1 0245be6f 002bd261 01c80f89     ..;.o.E.a.+.....
    8828:	00fe32eb 00b4886e 02285e53 0074520d     .2..n...S^(..Rt.
    8838:	024cf97e 0171d140 02b021e1 0078794f     ~.L.@.q..!..Oyx.
    8848:	005cee74 0399cda1 0223782b 0062c8d0     t.\.....+x#...b.
    8858:	02587302 00625812 01c0e934 00d0dcc8     .sX..Xb.4.......
    8868:	037a4431 01a31093 0060bbc7 0010e143     1Dz.......`.C...
    8878:	01c7efcf 015b8aba 027c52a4 0037b8ea     ......[..R|...7.
    8888:	000213ff 01bb1971 0045c8d9 00a3fdde     ....q.....E.....
    8898:	0074a088 02f607a3 02dc6536 00706bed     ..t.....6e...kp.
    88a8:	01c45872 0017e866 024059cf 02e63814     rX..f....Y@..8..
    88b8:	02f09ace 03125245 0068552a 031b3c47     ....ER..*Uh.G<..
    88c8:	00a5c6eb 01b704cd 02f37788 0068442e     .........w...Dh.
    88d8:	02867595 00a6e303 0247a196 034d8d7e     .u........G.~.M.
    88e8:	006a6955 02e393ad 02d1783c 010c46fa     Uij.....<x...F..
    88f8:	03d3f3c1 0066dd3e 01dc7df1 02deaf3f     ....>.f..}..?...
    8908:	00f9cbb0 01d46c2f 0014eb5b 02fd411d     ..../l..[....A..
    8918:	01e7e728 0200a1cf 01cfffc1 005c496f     (...........oI\.
    8928:	01426d70 01236155 018a9496 01a88c8b     pmB.Ua#.........
    8938:	0046c101 019b6d4f 03f6e1c3 03633b57     ..F.Om......W;c.
    8948:	01482776 00609eb6 02dc82c5 03e459af     v'H...`......Y..
    8958:	02f27e70 02d722be 00772fb5 00227a20     p~...".../w. z".
    8968:	00a5366c 03c8d79a 010444b6 007f75b1     l6.......D...u..
    8978:	02070020 0071fe23 017b198d 02ab1208      ...#.q...{.....
    8988:	005953d0 015f33ff 0094faf8 00c45e28     .SY..3_.....(^..
    8998:	03047985 00267d1d 019e2246 013d42ae     .y...}&.F"...B=.
    89a8:	01495be6 01720bf9 004eaaab 0260bed0     .[I...r...N...`.
    89b8:	0356b01f 01b4d927 01b79aa8 0067d378     ..V.'.......x.g.
    89c8:	036e2945 0258afc3 02a9ba71 01128d7b     E)n...X.q...{...
    89d8:	0063d938 026640ac 008a31f4 035a1b34     8.c..@f..1..4.Z.
    89e8:	034baca3 00169c38 0039dc22 025caccd     ..K.8...".9...\.
    89f8:	01e144b7 015f36a8 00714784 001d58c7     .D...6_..Gq..X..
    8a08:	01b8497b 014f1522 025b9e3f 00669d87     {I..".O.?.[...f.
    8a18:	0244a07f 03746aaa 03ecf750 02d56bae     ..D..jt.P....k..
    8a28:	00327c62 014fbd25 02e3a56d 0364e006     b|2.%.O.m.....d.
    8a38:	017407ac 002ab3f9 00d5e196 03942030     ..t...*.....0 ..
    8a48:	02725fcb 035d695f 002a1b9b 00139b5d     ._r._i]...*.]...
    8a58:	02cad9d6 03a731d2 02be126d 00751cf4     .....1..m.....u.
    8a68:	037d00a5 029f4b8c 024bc164 02932e0e     ..}..K..d.K.....
    8a78:	0000cee3 01be28f9 02380d9b 00502349     .....(....8.I#P.
    8a88:	0245234a 00053d89 02b0fb69 01975932     J#E..=..i...2Y..
    8a98:	00e74016 0088235a 004a9913 013f915d     .@..Z#....J.].?.
    8aa8:	012ef52f 022bbba4 03e45c84 001d34b0     /.....+..\...4..
    8ab8:	01e8a9f3 005371ca 00b605d1 00f754cd     .....qS......T..
    8ac8:	0008e7a4 02f0f3e8 02e3a48c 00f6228d     ............."..
    8ad8:	006e0099 005cb7be 02508f23 00b1e1e0     ..n...\.#.P.....
    8ae8:	021b29af 0333df8e 00336ae7 01d194be     .)....3..j3.....
    8af8:	00b53b8b 028727fe 006cae29 00573d2e     .;...'..).l..=W.
    8b08:	03b2ea36 00ba8cd8 00243333 00dd6c7d     6.......33$.}l..
    8b18:	00200bc1 02b3260d 011f2301 01c5e65c     .. ..&...#..\...
    8b28:	03294e65 0042021f 03b19946 039b3d26     eN)...B.F...&=..
    8b38:	02d2c2f7 01a88c65 00311fba 03e0d70d     ....e.....1.....
    8b48:	0304ed8a 030dcc30 00509c46 0061eeac     ....0...F.P...a.
    8b58:	017d35d4 009a6596 021d7885 032f9af4     .5}..e...x..../.
    8b68:	0070169b 0129a510 006cb42b 0394da0f     ..p...).+.l.....
    8b78:	0051cb06 002ade53 009873e7 00c83706     ..Q.S.*..s...7..
    8b88:	01b3811e 0253a173 002d2a17 02f621e3     ....s.S..*-..!..
    8b98:	023114e9 036f7a0a 02d51497 004b06d5     ..1..zo.......K.
    8ba8:	0048ec1c 02459a46 00730f42 0155755e     ..H.F.E.B.s.^uU.
    8bb8:	001d4216 010a5b4e 018369ca 0165ff8c     .B..N[...i....e.
    8bc8:	00e687cd 0066dd9f 03b474a0 030a764d     ......f..t..Mv..
    8bd8:	01ee455a 01e928da 00429196 02e6bc89     ZE...(....B.....
    8be8:	036b2a84 00310918 02401947 003d46e8     .*k...1.G.@..F=.
    8bf8:	000e90b1 01550c28 00a39af0 03d5b697     ....(.U.........
    8c08:	0016f62b 008c51e6 00870cd2 03cd51a0     +....Q.......Q..
    8c18:	037d8fee 000d64da 01bfea7c 023b3967     ..}..d..|...g9;.
    8c28:	0203a091 035f75d0 003b3319 039fa90c     .....u_..3;.....
    8c38:	021516e2 019e61d8 03724231 0013b792     .....a..1Br.....
    8c48:	003d0979 0364e6a7 031270a2 02fadd2f     y.=...d..p../...
    8c58:	00321a5d 026d8470 0251fffd 03c995e5     ].2.p.m...Q.....
    8c68:	032bf49a 0022ec9e 03b10536 01f2a0a4     ..+...".6.......
    8c78:	01846de1 03015677 00593f56 01485023     .m..wV..V?Y.#PH.
    8c88:	020dccdd 00b1c114 03f7dd12 0023c6b0     ..............#.
    8c98:	0227804f 02411162 02a70377 02589c9b     O.'.b.A.w.....X.
    8ca8:	00573e91 0235ac70 006c93cc 0385e35e     .>W.p.5...l.^...
    8cb8:	008127d3 0051ba08 00d47194 01246058     .'....Q..q..X`$.
    8cc8:	021dd4bc 0078cc23 005d29a2 026e4e33     ....#.x..)].3Nn.
    8cd8:	016252cf 010fb7e1 00bd3cc7 0050dbbd     .Rb......<....P.
    8ce8:	01a9c9de 0122f48d 00710ef2 03486d8d     ......"...q..mH.
    8cf8:	003418ad 02363bd2 01c8ce94 0099f96c     ..4..;6.....l...
    8d08:	02b66823 007c8414 00e6c05c 02b2d295     #h....|.\.......
    8d18:	0179abc6 0068464d 00572902 0308fa1c     ..y.MFh..)W.....
    8d28:	01f0f802 02a73062 03e785f0 003d0b4f     ....b0......O.=.
    8d38:	0190317f 01fa1d56 03e48d50 02cef1ef     .1..V...P.......
    8d48:	0075b27b 00e651f5 0203cb1b 02e4644a     {.u..Q......Jd..
    8d58:	03f06dc1 007b9795 01f9a640 01d6f7bf     .m....{.@.......
    8d68:	03aa89de 002aeaff 0075ade5 030889a0     ......*...u.....
    8d78:	02ac45a1 02c6cce0 03f37567 006f3ddc     .E......gu...=o.
    8d88:	00de0674 01a0cd62 020736e3 00a7a8a2     t...b....6......
    8d98:	00291d11 00884d61 02394e19 00d76f8b     ..).aM...N9..o..
    8da8:	03c6ba15 00706ef8 03753069 02a31960     .....np.i0u.`...
    8db8:	03966137 00731883 0001e45f 0376c7ba     7a....s._.....v.
    8dc8:	0387fe0b 01c54e28 02b38fa2 0036d29e     ....(N........6.
    8dd8:	030b49cb 01e7c55f 03937833 0278aeb2     .I.._...3x....x.
    8de8:	0065e9c3 030cda3e 008f1141 02de59b3     ..e.>...A....Y..
    8df8:	00c6adf8 0016e02f 035122b7 033cd198     ..../...."Q...<.
    8e08:	01e0953b 001f5b0b 001fd7e2 021e57ac     ;....[.......W..
    8e18:	03d7e53a 034df3a5 03a343c2 000cba06     :.....M..C......
    8e28:	03a9c392 011030e1 0180070b 010f7b87     .....0.......{..
    8e38:	001e7dc1 0239912b 022e9b5c 02d14549     .}..+.9.\...IE..
    8e48:	02805c60 00332870 032d794c 00c1bf19     `\..p(3.Ly-.....
    8e58:	02b4e6be 0044916c 002c2ce2 012ba79f     ....l.D..,,...+.
    8e68:	02dc8b23 0327a109 03ea717d 00268520     #.....'.}q.. .&.
    8e78:	00fe78ee 02cc0149 02698515 03b32eba     .x..I.....i.....
    8e88:	00736201 0210bf78 022b044c 01843460     .bs.x...L.+.`4..
    8e98:	02467110 0032d8fd 00b8f2d8 015f86c1     .qF...2......._.
    8ea8:	03459c95 03de6371 00775437 03a417f5     ..E.qc..7Tw.....
    8eb8:	003d5616 01304120 017cf9eb 002e00ec     .V=. A0...|.....
    8ec8:	03446288 01cf57ca 036e4fc8 024d8921     .bD..W...On.!.M.
    8ed8:	0032270a 00789b22 01a91f02 016bec64     .'2.".x.....d.k.
    8ee8:	03fa4958 002370d9 01e671c4 02be8d86     XI...p#..q......
    8ef8:	01fb2430 033ab07d 00156468 02417635     0$..}.:.hd..5vA.
    8f08:	0137b0bc 0258f3b8 02405f03 0031140e     ..7...X.._@...1.
    8f18:	037443fa 017e2332 024ac5c8 01759361     .Ct.2#~...J.a.u.
    8f28:	000da75f 01b0fb84 03fd121c 036c3295     _............2l.
    8f38:	002eb4cc 001b79e1 012977b3 03e650b7     .....y...w)..P..
    8f48:	01a23ffd 02343e68 004c1b19 0112864e     .?..h>4...L.N...
    8f58:	01e28930 008d0ba7 025fc9b5 0074f668     0........._.h.t.
    8f68:	027ab611 01701ba1 038b93fd 00cffde1     ..z...p.........
    8f78:	004b98ce 01cb9165 02d3739d 01163f7d     ..K.e....s..}?..
    8f88:	028267b1 0011665a 027118b9 0263c5ab     .g..Zf....q...c.
    8f98:	0109a2a4 036ed3ad 00265ec3 00ce2c86     ......n..^&..,..
    8fa8:	0108c19a 033853da 02aacb8c 0036e62b     .....S8.....+.6.
    8fb8:	01ab4478 001f529e 00875995 03f1047a     xD...R...Y..z...
    8fc8:	0025bfb2 03022ce1 0307b24c 00466d7a     ..%..,..L...zmF.
    8fd8:	02b80cf4 0023d341 0162bc00 016d197a     ....A.#...b.z.m.
    8fe8:	03180d29 006e8b5c 0023d021 03922d4d     )...\.n.!.#.M-..
    8ff8:	03335ebf 01514a03 012378c0 001e7671     .^3..JQ..x#.qv..
    9008:	0094efab 006acdaa 01e58c24 03cd0ff0     ......j.$.......
    9018:	001c9fc2 03d27a87 02e5958a 03015ca3     .....z.......\..
    9028:	008a1775 0053623e 00219420 01047c07     u...>bS. .!..|..
    9038:	002f9557 01dc25ad 00192655 0323592f     W./..%..U&../Y#.
    9048:	004b6506 01c06d33 02870f14 0030a9a9     .eK.3m........0.
    9058:	026e8f79 026c2cfa 03cb23d8 0077171d     y.n..,l..#....w.
    9068:	007eab75 02df6e36 026c61b9 01694c0a     u.~.6n...al..Li.
    9078:	0160fc55 004f844d 0393dffa 000608c9     U.`.M.O.........
    9088:	0054d419 002daf4e 002add44 01df6e32     ..T.N.-.D.*.2n..
    9098:	01203c4c 02417d55 0211ab8f 00318ce3     L< .U}A.......1.
    90a8:	020984f4 01418b46 039f6056 018f4aff     ....F.A.V`...J..
    90b8:	006ebaec 01e79790 01d7f9ca 024e7770     ..n.........pwN.
    90c8:	01189322 000dd943 03a9b062 03c478b7     "...C...b....x..
    90d8:	03364bf8 00957ba2 001b17d8 032c6344     .K6..{......Dc,.
    90e8:	0085433d 028dc62c 02034207 00281068     =C..,....B..h.(.
    90f8:	03ec91c1 012bc377 01f2ef4a 01b25df8     ....w.+.J....]..
    9108:	001a8f0e 00b9316f 01e8e9ce 022ec72a     ....o1......*...
    9118:	01ca3138 00323716 03a4af3b 001a4196     81...72.;....A..
    9128:	01367c14 00922447 00081514 00b6c337     .|6.G$......7...
    9138:	0352beaa 000e751b 026d44d0 0050e77a     ..R..u...Dm.z.P.
    9148:	02822548 000146ca 01cfc46c 0390697b     H%...F..l...{i..
    9158:	00024886 01cac17f 02c3be90 01675a06     .H...........Zg.
    9168:	02c06e71 00336a30 02097626 02cb0432     qn..0j3.&v..2...
    9178:	0098174f 02a923a4 002b204c 01a17b74     O....#..L +.t{..
    9188:	00b254ae 0303b690 02dae488 0039c2e9     .T............9.
    9198:	00597419 005ae6cf 01f76b92 000993c5     .tY...Z..k......
    91a8:	006d9293 02ae1427 00a5f57b 013077b1     ..m.'...{....w0.
    91b8:	02b7f86f 000f0744 03e6a89d 015f8996     o...D........._.
    91c8:	02c1033b 0394ccd5 00282fa2 01dc772c     ;......../(.,w..
    91d8:	00e65718 00ff53a0 017a24f7 004f5d8f     .W...S...$z..]O.
    91e8:	0048023f 03249fbf 005ae4bf 01075a9a     ?.H...$...Z..Z..
    91f8:	00596f22 0029b8a2 00f82bfb 038423cb     "oY...)..+...#..
    9208:	00344194 0031018e 00575626 0003fa51     .A4...1.&VW.Q...
    9218:	020112fd 01c1260b 001241d8 026781a7     .....&...A....g.
    9228:	03559993 022ce970 02743cf7 001b05f4     ..U.p.,..<t.....
    9238:	03717e66 013ff7d8 00e98a99 029daea2     f~q...?.........
    9248:	00416374 03f1579a 020b3b54 02a4b8b0     tcA..W..T;......
    9258:	03ead74a 0056781d 0065b318 0077bf46     J....xV...e.F.w.
    9268:	001f7815 02103582 0064669b 0338e14e     .x...5...fd.N.8.
    9278:	01bd2ed7 00b40e43 01042a5d 0043d438     ....C...]*..8.C.
    9288:	0266be02 00b3acf5 0028e583 02786b86     ..f.......(..kx.
    9298:	0006347d 01e3ea86 0251c6ce 01ae4697     }4........Q..F..
    92a8:	01872d2d 002cf2cf 025a6ee4 02ca7ab6     --....,..nZ..z..
    92b8:	01768b7a 02ca6b29 0012e75c 030d1ffc     z.v.)k..\.......
    92c8:	02c44274 00e5ae65 0335acc8 0071f9be     tB..e.....5...q.
    92d8:	0247eed9 00a24099 0058fdc8 00143295     ..G..@....X..2..
    92e8:	0031d62d 0254c1e5 02efd48e 01491ea2     -.1...T.......I.
    92f8:	02e78fb9 00602bf0 0380ad4b 029cd888     .....+`.K.......
    9308:	01f5825a 00c9c77d 002b6b1e 02a0470d     Z...}....k+..G..
    9318:	017bf61a 0354bdbc 0092e310 0005353c     ..{...T.....<5..
    9328:	01e06bca 01f6cf3d 025f7a3c 023cad3a     .k..=...<z_.:.<.
    9338:	00288a1c 02ce7ca1 014bd784 03c7dd61     ..(..|....K.a...
    9348:	02d0d99c 0059d4c1 021fcb95 00955394     ......Y......S..
    9358:	014401e0 003c902b 0066d398 01a4d9d1     ..D.+.<...f.....
    9368:	005bdace 02f62abf 0072a530 007fea35     ..[..*..0.r.5...
    9378:	009163ba 00adbcce 015ea3d6 013cb9e2     .c........^...<.
    9388:	000fc6b4 01a7c669 019100f3 03193d5c     ....i.......\=..
    9398:	00243980 002e4099 01fa4c2f 0303ebc5     .9$..@../L......
    93a8:	036399b5 0276384a 0046295c 025b331b     ..c.J8v.\)F..3[.
    93b8:	012b758e 018795ce 01cdb131 005fa7bd     .u+.....1....._.
    93c8:	03d1aef2 00d1c511 0173947b 007088c9     ........{.s...p.
    93d8:	0028004c 023c5299 0210df66 027e8d58     L.(..R<.f...X.~.
    93e8:	00604b34 002ab19c 00037802 01c03da0     4K`...*..x...=..
    93f8:	02b363ae 02002d08 001ad163 02bc2139     .c...-..c...9!..
    9408:	01fbcdbe 03d1d45b 03fc8772 0044bcde     ....[...r.....D.
    9418:	01e11c7b 01b6885c 00c1441c 01e7df13     {...\....D......
    9428:	002c35ee 01c13849 00a509d6 0050a485     .5,.I8........P.
    9438:	01bc42f8 006492d2 0050f0d9 0153a623     .B....d...P.#.S.
    9448:	0181ba6f 02db7588 006a2db2 025e57a3     o....u...-j..W^.
    9458:	02601aca 03d20f7d 036cee94 0057526b     ..`.}.....l.kRW.
    9468:	0100e650 039b2c7d 0334517c 02c10be3     P...},..|Q4.....
    9478:	0005d841 018de970 00029b1a 00b8eaa8     A...p...........
    9488:	0166af8b 0004f4b5 019ce49d 0037f5c9     ..f...........7.
    9498:	03935c05 02f7e536 00213839 01306204     .\..6...98!..b0.
    94a8:	00496195 0305ab37 022c67e5 007d323b     .aI.7....g,.;2}.
    94b8:	02b6c618 01140ac5 0195b26d 01a6aa25     ........m...%...
    94c8:	00797170 01b41872 01f038db 021d0f86     pqy.r....8......
    94d8:	0361b1db 0013d601 031b7383 0322c34c     ..a......s..L.".
    94e8:	000752df 03cf90ba 00185472 0310eba0     .R......rT......
    94f8:	0344f9ca 01b9505b 01d243de 00519a38     ..D.[P...C..8.Q.
    9508:	03ad2500 02706cb4 037338d0 0174b3c3     .%...lp..8s...t.
    9518:	00045da4 0062426c 0060655a 01b09640     .]..lBb.Ze`.@...
    9528:	03d66ff8 00728d57 01a2c585 0267e1e3     .o..W.r.......g.
    9538:	00e10f9a 00798771 004fc483 00394fe0     ....q.y...O..O9.
    9548:	0180b315 028ae6dc 01ad9fa7 00048456     ............V...
    9558:	0293809b 033c11d2 022bbc5f 00e963cf     ......<._.+..c..
    9568:	0071c0c2 02fe6c43 003eaf8d 000a7b40     ..q.Cl....>.@{..
    9578:	00fabb93 00614c2f 00e1c6c1 002a6034     ..../La.....4`*.
    9588:	01dcc761 01f22221 001ce819 02c2cb2b     a...!"......+...
    9598:	038727ce 0341eead 01eebcbc 00471ad0     .'....A.......G.
    95a8:	0301121b 02a0df1a 00b59d67 00a07d67     ........g...g}..
    95b8:	002a8e64 033262ca 01c0790b 0058052e     d.*..b2..y....X.
    95c8:	01f7b394 0019e0a2 03bda6ac 024705e9     ..............G.
    95d8:	031f2b56 00c46e77 0043484c 03ae49ea     V+..wn..LHC..I..
    95e8:	00555526 03ae5a68 03768897 0043a2c5     &UU.hZ....v...C.
    95f8:	01700eef 03a64abb 00856fa5 01588e46     ..p..J...o..F.X.
    9608:	0058911f 008c4da9 02e06879 003bd648     ..X..M..yh..H.;.
    9618:	0032f743 0066e6e3 029d266b 02882705     C.2...f.k&...'..
    9628:	03685f3b 0188c111 0020f7a8 020c3d2e     ;_h....... ..=..
    9638:	02d6aa86 011f1d1b 0210f444 00366c29     ........D...)l6.
    9648:	01cc9013 01e2d90b 023fb06c 01938427     ........l.?.'...
    9658:	0027484a 00677464 03ab2f29 00cc18f8     JH'.dtg.)/......
    9668:	006c7709 000b6cb3 018f0fa0 027213e2     .wl..l........r.
    9678:	032a2df6 01d12483 002dd426 014c5c69     .-*..$..&.-.i\L.
    9688:	004a865f 018d6c09 01fdaa63 00489ade     _.J..l..c.....H.
    9698:	03203e28 01da7d1f 02c97458 008ff016     (> ..}..Xt......
    96a8:	00124f41 016d7d67 024dbd2b 00ff83bb     AO..g}m.+.M.....
    96b8:	03fb53c0 00330954 02f90eaf 03994011     .S..T.3......@..
    96c8:	01ebdc2c 018b53e7 007bf947 006dfb83     ,....S..G.{...m.
    96d8:	00c5ca96 03d962e9 018ad044 003c7a60     .....b..D...`z<.
    96e8:	007f0d93 02c0e5c5 010345dd 01bf1a0e     .........E......
    96f8:	0008e359 03639bfa 0399ffd9 00232374     Y.....c.....t##.
    9708:	00846622 0019021c 01d55efa 03d7413f     "f.......^..?A..
    9718:	03aa3002 0381e786 0005b4c6 0174c84c     .0..........L.t.
    9728:	01e3a8eb 0277de56 0209a962 001c42f7     ....V.w.b....B..
    9738:	02cafacd 0119a2f4 0261ce05 034fb790     ..........a...O.
    9748:	00237668 00aebb32 011a98dd 00ef4edf     hv#.2........N..
    9758:	0164c73c 0031ec8c 035b5825 030ba570     <.d...1.%X[.p...
    9768:	01603955 03a9a096 0027d8b0 027d1ec0     U9`.......'...}.
    9778:	0225db90 03d13b7a 0301c54a 006b6cc5     ..%.z;..J....lk.
    9788:	00b244cd 0223c328 0189703d 026a33fb     .D..(.#.=p...3j.
    9798:	00001cae 0293a7fd 012ce87d 02c96a84     ........}.,..j..
    97a8:	032deaf7 00676c9a 00cdbd33 02daf578     ..-..lg.3...x...
    97b8:	019b8631 03703377 0029f289 02fb2eff     1...w3p...).....
    97c8:	01f55d4d 03059094 019438fa 001eb2ce     M].......8......
    97d8:	028bf405 026ce903 02e8d213 03ece7d2     ......l.........
    97e8:	004165ed 0270d6a6 007b699e 004f6e06     .eA...p..i{..nO.
    97f8:	00ca3242 002e3cc0 0056063f 020ca7b4     B2...<..?.V.....
    9808:	033d51ef 033927a2 006d4d01 0256d34b     .Q=..'9..Mm.K.V.
    9818:	00324bc5 029e0011 01385c20 006dad1c     .K2..... \8...m.
    9828:	00b477be 0315b164 02935584 002b5497     .w..d....U...T+.
    9838:	00597e5f 02b7d36d 02099363 0029e600     _~Y.m...c.....).
    9848:	01526672 003f5867 01546a1d 03aa277d     rfR.gX?..jT.}'..
    9858:	003643d7 01f668fd 0041754f 02f879a7     .C6..h..OuA..y..
    9868:	01e5a08b 028723b0 02566098 001ab277     .....#...`V.w...
    9878:	03ef7923 01f27c2e 02097dc3 0063b0d6     #y...|...}....c.
    9888:	00256ec8 01dd5846 00b69702 0145c4a7     .n%.FX........E.
    9898:	0187b72b 0051df6c 035ce819 0093f373     +...l.Q...\.s...
    98a8:	009f1aef 02566b9a 000ba6bb 017b3a9e     .....kV......:{.
    98b8:	01ef5969 00e4ae66 02468a2a 0071ffd5     iY..f...*.F...q.
    98c8:	03a7fadf 00c97e94 00f1306c 0261acb7     .....~..l0....a.
    98d8:	006667f2 012a09e4 01d469b5 0074a3ef     .gf...*..i....t.
    98e8:	010902e3 00517a10 008183f5 03377f63     .....zQ.....c.7.
    98f8:	007f1d08 031c6e05 0059237c 00395933     .....n..|#Y.3Y9.
    9908:	0253f462 02f67fff 0164b443 00538acc     b.S.....C.d...S.
    9918:	03f0eb1d 00738e1b 03e65ac5 02045317     ......s..Z...S..
    9928:	0069d42b 01bfe8b9 03b68e65 02341a17     +.i.....e.....4.
    9938:	023f7c16 005dc6d9 00e8be78 00134dd7     .|?...].x....M..
    9948:	003caf23 0087b312 0031b585 0380222a     #.<.......1.*"..
    9958:	00b60501 015c904d 00af8fb6 003dc18b     ....M.\.......=.
    9968:	02d70d2b 03858e7c 038d0a48 029af03c     +...|...H...<...
    9978:	004ffd54 02b7143b 00f196e9 03a9d8ae     T.O.;...........
    9988:	007e45e3 00482eb4 03ad4f1d 02e2d3a1     .E~...H..O......
    9998:	02b40240 01080167 006d8532 00275132     @...g...2.m.2Q'.
    99a8:	017ddf91 02349c13 01a836ab 00626107     ..}...4..6...ab.
    99b8:	0042765c 005af6ce 03d92353 02e8ea2f     \vB...Z.S#../...
    99c8:	00246165 01177a75 035dd2f5 023b61c2     ea$.uz....]..a;.
    99d8:	0264591f 00045a2f 014671a8 02d648d6     .Yd./Z...qF..H..
    99e8:	00db5ed3 03696b35 000514fa 00a0f50f     .^..5ki.........
    99f8:	025ff0d6 02a91e82 0373ca54 007cd2ba     .._.....T.s...|.
    9a08:	029ac266 01144c3a 009790da 00f07853     f...:L......Sx..
    9a18:	0026a0d4 0293a390 00adca7f 03ccbbb6     ..&.............
    9a28:	02bfdfd9 00360357 007c59e8 0120d747     ....W.6..Y|.G. .
    9a38:	0070b3ad 03f61be9 00570daf 03a3bd96     ..p.......W.....
    9a48:	012f9a63 02ffcd7c 03b0ab5d 0017e4bd     c./.|...].......
    9a58:	02d7dc51 0393aa7a 0118e43c 03835929     Q...z...<...)Y..
    9a68:	0058ba7a 00680555 01331f99 030b8e01     z.X.U.h...3.....
    9a78:	014f3898 0003abc9 0399be57 0218831d     .8O.....W.......
    9a88:	02952a31 028ba136 002b258f 023b2ffd     1*..6....%+../;.
    9a98:	023f7141 02556dd8 035e68ea 0017371d     Aq?..mU..h^..7..
    9aa8:	00981299 02e0dd5e 02b2d927 00407642     ....^...'...Bv@.
    9ab8:	00554552 00e54bd0 00c18863 02235b45     REU..K..c...E[#.
    9ac8:	0197ff6d 0059109b 0180a515 00f83128     m.....Y.....(1..
    9ad8:	004f4866 03907198 0041467f 00b73878     fHO..q...FA.x8..
    9ae8:	0306a937 03517ae2 000b1b01 0019d3cb     7....zQ.........
    9af8:	026745f1 011f25fa 0043caa1 0068c72b     .Eg..%....C.+.h.
    9b08:	0070dac7 02f87dfa 004fb09a 03b25b92     ..p..}....O..[..
    9b18:	03a7d839 0067f228 038df3df 0166e33d     9...(.g.....=.f.
    9b28:	02fa3bfb 024a9095 00366877 03177544     .;....J.wh6.Du..
    9b38:	039707c8 01c90e1b 006d912c 00786a9e     ........,.m..jx.
    9b48:	03ca7f5b 00bd1ce4 02b59417 02d2e2ab     [...............
    9b58:	0062ae5b 02631b6f 02710c7e 00c6dbcd     [.b.o.c.~.q.....
    9b68:	02cbb727 001fbe20 000ee085 0360a7ef     '... .........`.
    9b78:	01d595fd 0056b717 00241dd3 01f7dbb6     ......V...$.....
    9b88:	01a23589 012d4b4b 03fb96fb 00595a82     .5..KK-......ZY.
    9b98:	0011880d 014eb833 02f76696 03fbf100     ....3.N..f......
    9ba8:	002b9e85 03770a81 01256d41 00731bb2     ..+...w.Am%...s.
    9bb8:	015d7ecd 0005d20c 02485ab2 03988d0d     .~]......ZH.....
    9bc8:	03ebb9d9 025997cf 0027012a 00c04ff7     ......Y.*.'..O..
    9bd8:	033fbd21 03fbe586 003303aa 0044a586     !.?.......3...D.
    9be8:	03532e80 03f9b8bc 020fe6fb 02eabcc8     ..S.............
    9bf8:	0005abea 03809678 03487cb2 03ed21be     ....x....|H..!..
    9c08:	004adfab 002aa621 0210190b 0220df3d     ..J.!.*.....=. .
    9c18:	018f8e29 02f3be45 001ec8fb 00f96f6b     )...E.......ko..
    9c28:	03a6cea9 00ef31ef 00a81a2c 006a3b84     .....1..,....;j.
    9c38:	03f827f7 0352df35 01c9792d 02efcff4     .'..5.R.-y......
    9c48:	00605175 001f6d98 02ed9067 03310139     uQ`..m..g...9.1.
    9c58:	03a65e36 003a3ab2 01d5dd0b 02565072     6^...::.....rPV.
    9c68:	03ce0c5c 018096ca 0034c6c7 01bb8126     \.........4.&...
    9c78:	01045692 036190d4 03ac476b 007622cb     .V....a.kG..."v.
    9c88:	024ef5ad 02ffe4c5 0345d785 01f4d572     ..N.......E.r...
    9c98:	00719164 00ce6e5c 03c95713 02e3e117     d.q.\n...W......
    9ca8:	022c3a6a 00581b44 02225414 013cf2cd     j:,.D.X..T"...<.
    9cb8:	0068554a 0314e6f1 00790180 03c6b96f     JUh.......y.o...
    9cc8:	019010ed 0010b470 016ce8b0 0043cccf     ....p.....l...C.
    9cd8:	014c3731 02fcebf0 025741df 00c6555c     17L......AW.\U..
    9ce8:	001c368f 01070b5a 030bb4ed 03f6000b     .6..Z...........
    9cf8:	03758ecd 000332d8 009bd8f0 012c6423     ..u..2......#d,.
    9d08:	039ce074 018a36b2 002d258e 01c61e14     t....6...%-.....
    9d18:	016d2f6e 02996bba 00a568d3 000bca12     n/m..k...h......
    9d28:	032175d4 0321319b 03e78059 010e1e42     .u!..1!.Y...B...
    9d38:	001a3bed 01abb5b0 0253d5df 033e4df3     .;........S..M>.
    9d48:	0398ecf0 00304777 002c5a6a 00a753fa     ....wG0.jZ,..S..
    9d58:	037a459a 0347a239 0072e421 03312959     .Ez.9.G.!.r.Y)1.
    9d68:	0188c0c4 03bb869e 02b633ca 002da03a     .........3..:.-.
    9d78:	03ecb0b6 02361823 003a6285 039e9009     ....#.6..b:.....
    9d88:	00343099 029a8f63 026d9d74 01886ba2     .04.c...t.m..k..
    9d98:	0293dbc5 003d2028 02047d0a 0238b4a1     ....( =..}....8.
    9da8:	00e20f06 0175b1dc 0014999b 0385da79     ......u.....y...
    9db8:	01d29648 01cd9d18 014b0568 0078aeb5     H.......h.K...x.
    9dc8:	03e9c06e 03733308 01745482 027ed52d     n....3s..Tt.-.~.
    9dd8:	007b18a1 029a7a06 03225bbf 01c13036     ..{..z...[".60..
    9de8:	0383461c 002f2c2c 025492c7 0366e7b5     .F..,,/...T...f.
    9df8:	010773b2 03942067 000649c7 0365e3cb     .s..g ...I....e.
    9e08:	02d9ba9e 0303fcda 010312ab 0049b15b     ............[.I.

00009e18 <Montgomery_Rprime>:
    9e18:	5ff3d621 c81db879 ea6b387d 173ea5aa     !.._y...}8k...>.
    9e28:	2136f61c 3d01b7c7 6ac8f9d3 0006a5f1     ..6!...=...j....

00009e38 <Montgomery_rprime>:
    9e38:	79bc3929 e12fe5f0 d1fcdcf3 d75e78b8     )9.y../......x^.
    9e48:	76b5db21 bce409ed afc1c074 f32702fd     !..v....t.....'.

00009e58 <PARAMETER_d>:
    9e58:	00000142 00000000 000e4000 00000000     B........@......
    9e68:	00000000 01fc0c8d 0085223c 020fcb38     ........<"..8...
    9e78:	0211995f 005e472f                       _.../G^.

00009e80 <curve_order>:
    9e80:	c7768ce7 2fb2540e fe0f7999 dfbd004d     ..v..T./.y..M...
    9e90:	9cbc14e5 f0539782 4e5e0a72 0029cbc1     ......S.r.^N..).

00009ea0 <A144>:
    9ea0:	05080201 05020208 0c060201 080f090c     ................
    9eb0:	050d0d08 010a030b 0e0d0f01 0208080b     ................
    9ec0:	08020303                                ....

00009ec4 <IC>:
    9ec4:	07030100 00000406                       ........

00009ecc <RC>:
    9ecc:	0e070301 0c060b0d 0a050209              ............

00009ed8 <sbox>:
    9ed8:	0b06050c 0d0a0009 080f0e03 02010704     ................
    9ee8:	746f7250 6c6f636f 72726520 202c726f     Protocol error, 
    9ef8:	61656c70 64206573 6c62756f 68632065     please double ch
    9f08:	206b6365 20656874 636f6c63 6e69206b     eck the clock in
    9f18:	6f777420 616f6220 2e736472 0d0a0d20      two boards. ...
    9f28:	00000000 72617453 676e6974 00000d2e     ....Starting....
    9f38:	6f726e45 656d6c6c 6320746e 6c706d6f     Enrollment compl
    9f48:	20657465 656d6974 6425203a 00000a0d     ete time: %d....
    9f58:	656e6547 69746172 5220676e 6f707365     Generating Respo
    9f68:	0d65736e 00000000 6c696146 50206465     nse.....Failed P
    9f78:	696c6275 654b2063 65472079 6172656e     ublic Key Genera
    9f88:	6e6f6974 0000000d 6c696146 53206465     tion....Failed S
    9f98:	65726168 65532064 74657263 65724320     hared Secret Cre
    9fa8:	6f697461 00000d6e 68736148 636e4520     ation...Hash Enc
    9fb8:	74707972 6e49203a 20747570 74206f74     rypt: Input to t
    9fc8:	6c655f78 6e656d65 69732074 203a657a     x_element size: 
    9fd8:	78343025 00000a0d 68736148 636e4520     %04x....Hash Enc
    9fe8:	74707972 754f203a 74757074 206f7420     rypt: Output to 
    9ff8:	655f7874 656d656c 7320746e 3a657a69     tx_element size:
    a008:	34302520 000a0d78 504d4554 4d495420      %04x...TEMP TIM
    a018:	25203a45 000a0d64 5420794d 216e7275     E: %d...My Turn!
    a028:	0000000d 65746641 57222072 69746961     ....After "Waiti
    a038:	6620676e 6f20726f 72656874 000d2273     ng for others"..
    a048:	73736553 206e6f69 2079656b 72636544     Session key Decr
    a058:	3a747079 74754f20 20747570 6d206f74     ypt: Output to m
    a068:	61737365 695f6567 6973206e 203a657a     essage_in size: 
    a078:	0a0d6925 00000000 73736553 4b6e6f69     %i......SessionK
    a088:	003a7965 00207825 3a646e45 0d642520     ey:.%x .End: %d.
    a098:	0000000a 66666944 6e657265 203a6563     ....Difference: 
    a0a8:	0a0d6425 00000000 65636552 64657669     %d......Received
    a0b8:	7830203a 78383025 3830252e 000a0d78     : 0x%08x.%08x...
    a0c8:	2f2f2f2f 2f2f2f2f 2f2f2f2f 0d2f2f2f     ///////////////.
    a0d8:	6d69540a 6f742065 63657220 65766965     .Time to receive
    a0e8:	6425203a 00000a0d 2f2f2f2f 2f2f2f2f     : %d....////////
    a0f8:	2f2f2f2f 0d2f2f2f 6d69540a 6f742065     ///////..Time to
    a108:	6e657320 25203a64 000a0d64 6d726f4e      send: %d...Norm
    a118:	4f206c61 61726570 6e6f6974 6d6f4320     al Operation Com
    a128:	74656c70 0d216465 00000000              pleted!.....

0000a134 <_global_impure_ptr>:
    a134:	20000118                                ... 

0000a138 <__sf_fake_stderr>:
	...

0000a158 <__sf_fake_stdin>:
	...

0000a178 <__sf_fake_stdout>:
	...
    a198:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    a1a8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    a1b8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    a1c8:	00006665                                ef..

0000a1cc <_init>:
    a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1ce:	46c0      	nop			; (mov r8, r8)
    a1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a1d2:	bc08      	pop	{r3}
    a1d4:	469e      	mov	lr, r3
    a1d6:	4770      	bx	lr

0000a1d8 <__init_array_start>:
    a1d8:	000000e5 	.word	0x000000e5

0000a1dc <_fini>:
    a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1de:	46c0      	nop			; (mov r8, r8)
    a1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a1e2:	bc08      	pop	{r3}
    a1e4:	469e      	mov	lr, r3
    a1e6:	4770      	bx	lr

0000a1e8 <__fini_array_start>:
    a1e8:	000000bd 	.word	0x000000bd
