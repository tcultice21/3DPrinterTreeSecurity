
CAN_QUICK_START1_FD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000aebc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000274  20000000  0000aebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000293c  20000274  0000b130  00020274  2**2
                  ALLOC
  3 .stack        00004000  20002bb0  0000da6c  00020274  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000507b5  00000000  00000000  000202f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006197  00000000  00000000  00070aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000a28  00000000  00000000  00076c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000df8  00000000  00000000  00077669  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000249ca  00000000  00000000  00078461  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000157a7  00000000  00000000  0009ce2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000a889e  00000000  00000000  000b25d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000023d0  00000000  00000000  0015ae70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e4b2  00000000  00000000  0015d240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 6b 00 20 71 3a 00 00 6d 3a 00 00 6d 3a 00 00     .k. q:..m:..m:..
	...
      2c:	6d 3a 00 00 00 00 00 00 00 00 00 00 6d 3a 00 00     m:..........m:..
      3c:	6d 3a 00 00 6d 3a 00 00 6d 3a 00 00 6d 3a 00 00     m:..m:..m:..m:..
      4c:	6d 3a 00 00 6d 3a 00 00 e9 09 00 00 6d 3a 00 00     m:..m:......m:..
      5c:	6d 3a 00 00 6d 3a 00 00 69 2d 00 00 79 2d 00 00     m:..m:..i-..y-..
      6c:	89 2d 00 00 99 2d 00 00 a9 2d 00 00 b9 2d 00 00     .-...-...-...-..
      7c:	fd 65 00 00 6d 3a 00 00 6d 3a 00 00 6d 3a 00 00     .e..m:..m:..m:..
      8c:	6d 3a 00 00 cd 07 00 00 dd 07 00 00 ed 07 00 00     m:..............
      9c:	fd 07 00 00 0d 08 00 00 6d 3a 00 00 6d 3a 00 00     ........m:..m:..
      ac:	6d 3a 00 00 6d 3a 00 00 6d 3a 00 00 6d 3a 00 00     m:..m:..m:..m:..

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000274 	.word	0x20000274
      dc:	00000000 	.word	0x00000000
      e0:	0000aebc 	.word	0x0000aebc

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000278 	.word	0x20000278
     110:	0000aebc 	.word	0x0000aebc
     114:	0000aebc 	.word	0x0000aebc
     118:	00000000 	.word	0x00000000

0000011c <def_cb_nodef_void>:
	return -1;
}

void def_cb_nodef_void(void) {
	return;
}
     11c:	4770      	bx	lr
	...

00000120 <node_msg_cmd_to_len>:
				printf("%x ", buff[sizeof(struct node_msg_header)+i]);
			}
			printf("\r\n");
			debug_print("Session Key: \n");
			for (int i = 0; i < 16; i++) {
				printf("%x ",source->encryption_data->session_key[i]);
     120:	280f      	cmp	r0, #15
     122:	d811      	bhi.n	148 <node_msg_cmd_to_len+0x28>
     124:	0080      	lsls	r0, r0, #2
     126:	4b0a      	ldr	r3, [pc, #40]	; (150 <node_msg_cmd_to_len+0x30>)
     128:	581b      	ldr	r3, [r3, r0]
			for (int i = 0; i < 16; i++) {
     12a:	469f      	mov	pc, r3
     12c:	200c      	movs	r0, #12
     12e:	4770      	bx	lr
			}
			printf("\r\n");
     130:	200d      	movs	r0, #13
     132:	e7fc      	b.n	12e <node_msg_cmd_to_len+0xe>
     134:	200e      	movs	r0, #14
			debug_print("Nonce: \n");
     136:	e7fa      	b.n	12e <node_msg_cmd_to_len+0xe>
     138:	2038      	movs	r0, #56	; 0x38
     13a:	e7f8      	b.n	12e <node_msg_cmd_to_len+0xe>
     13c:	2038      	movs	r0, #56	; 0x38
     13e:	e7f6      	b.n	12e <node_msg_cmd_to_len+0xe>
			for (int i = 0; i < 16; i++) {
     140:	201c      	movs	r0, #28
				printf("%x ",source->encryption_data->nonce[i]);
     142:	e7f4      	b.n	12e <node_msg_cmd_to_len+0xe>
     144:	2010      	movs	r0, #16
     146:	e7f2      	b.n	12e <node_msg_cmd_to_len+0xe>
     148:	2000      	movs	r0, #0
     14a:	e7f0      	b.n	12e <node_msg_cmd_to_len+0xe>
     14c:	2008      	movs	r0, #8
     14e:	e7ee      	b.n	12e <node_msg_cmd_to_len+0xe>
     150:	000080d0 	.word	0x000080d0

00000154 <node_msg_addr_fill>:
			for (int i = 0; i < 16; i++) {
     154:	b570      	push	{r4, r5, r6, lr}
     156:	2301      	movs	r3, #1
			}
			printf("\r\n");
     158:	425b      	negs	r3, r3
     15a:	8003      	strh	r3, [r0, #0]
     15c:	680b      	ldr	r3, [r1, #0]
			*((uint32_t *)&source->encryption_data->nonce[0]) -= msg_generic->header.counter;
     15e:	2b00      	cmp	r3, #0
     160:	dd0c      	ble.n	17c <node_msg_addr_fill+0x28>
     162:	1d0d      	adds	r5, r1, #4
     164:	2400      	movs	r4, #0
     166:	260f      	movs	r6, #15
     168:	8803      	ldrh	r3, [r0, #0]
			exit(1);
     16a:	011b      	lsls	r3, r3, #4
     16c:	cd04      	ldmia	r5!, {r2}
     16e:	4032      	ands	r2, r6
     170:	4313      	orrs	r3, r2
     172:	8003      	strh	r3, [r0, #0]
     174:	3401      	adds	r4, #1
     176:	680b      	ldr	r3, [r1, #0]
     178:	42a3      	cmp	r3, r4
     17a:	dcf5      	bgt.n	168 <node_msg_addr_fill+0x14>
     17c:	bd70      	pop	{r4, r5, r6, pc}
	...

00000180 <node_make_parent>:
     180:	b570      	push	{r4, r5, r6, lr}
     182:	0006      	movs	r6, r0
     184:	000c      	movs	r4, r1
     186:	2300      	movs	r3, #0
     188:	830b      	strh	r3, [r1, #24]
     18a:	604b      	str	r3, [r1, #4]
     18c:	2501      	movs	r5, #1
     18e:	600d      	str	r5, [r1, #0]
     190:	0008      	movs	r0, r1
     192:	3014      	adds	r0, #20
     194:	2204      	movs	r2, #4
     196:	2100      	movs	r1, #0
     198:	4b02      	ldr	r3, [pc, #8]	; (1a4 <node_make_parent+0x24>)
     19a:	4798      	blx	r3
     19c:	61e5      	str	r5, [r4, #28]
     19e:	6266      	str	r6, [r4, #36]	; 0x24
     1a0:	bd70      	pop	{r4, r5, r6, pc}
     1a2:	46c0      	nop			; (mov r8, r8)
     1a4:	00006fa5 	.word	0x00006fa5

000001a8 <node_make_broadcast>:
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0005      	movs	r5, r0
void node_make_broadcast(struct network* network, struct node* broadcast) {
     1ac:	000c      	movs	r4, r1
	addr->CAN_addr = PARENT_NODE_ID;
}

inline void network_addr_make_broadcast(struct network* network, struct network_addr* addr) {
	(void)network;
	addr->CAN_addr = BROADCAST_ID;
     1ae:	2301      	movs	r3, #1
     1b0:	425b      	negs	r3, r3
     1b2:	830b      	strh	r3, [r1, #24]
	broadcast->addr.hops[0] = (uint16_t) -1U;
     1b4:	4b06      	ldr	r3, [pc, #24]	; (1d0 <node_make_broadcast+0x28>)
     1b6:	604b      	str	r3, [r1, #4]
	broadcast->addr.len = 1;
     1b8:	2301      	movs	r3, #1
     1ba:	600b      	str	r3, [r1, #0]
	memset((char*)&broadcast->hid, 0, sizeof(broadcast->hid));
     1bc:	0008      	movs	r0, r1
     1be:	3014      	adds	r0, #20
     1c0:	2204      	movs	r2, #4
     1c2:	2100      	movs	r1, #0
     1c4:	4b03      	ldr	r3, [pc, #12]	; (1d4 <node_make_broadcast+0x2c>)
     1c6:	4798      	blx	r3
	broadcast->type = NODE_TYPE_NONE;
     1c8:	2300      	movs	r3, #0
     1ca:	61e3      	str	r3, [r4, #28]
	broadcast->network = network;
     1cc:	6265      	str	r5, [r4, #36]	; 0x24
}
     1ce:	bd70      	pop	{r4, r5, r6, pc}
     1d0:	0000ffff 	.word	0x0000ffff
     1d4:	00006fa5 	.word	0x00006fa5

000001d8 <node_make_source_from_msg>:
void node_make_source_from_msg(struct network* network, struct node* source, struct node* node_table, int num_nodes, void* msg) {
     1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1da:	46de      	mov	lr, fp
     1dc:	4657      	mov	r7, sl
     1de:	464e      	mov	r6, r9
     1e0:	4645      	mov	r5, r8
     1e2:	b5e0      	push	{r5, r6, r7, lr}
     1e4:	b083      	sub	sp, #12
     1e6:	9000      	str	r0, [sp, #0]
     1e8:	4689      	mov	r9, r1
     1ea:	9201      	str	r2, [sp, #4]
     1ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int addr_len = 0;
     1ee:	2400      	movs	r4, #0
		debug_print("addr[%d] = %d\n", addr_len, ((msg_generic->header.addr >> (addr_len * 4)) & 0xf));
     1f0:	4b2c      	ldr	r3, [pc, #176]	; (2a4 <node_make_source_from_msg+0xcc>)
     1f2:	469b      	mov	fp, r3
     1f4:	4b2c      	ldr	r3, [pc, #176]	; (2a8 <node_make_source_from_msg+0xd0>)
     1f6:	469a      	mov	sl, r3
     1f8:	00a6      	lsls	r6, r4, #2
     1fa:	883b      	ldrh	r3, [r7, #0]
     1fc:	4133      	asrs	r3, r6
     1fe:	250f      	movs	r5, #15
     200:	402b      	ands	r3, r5
     202:	0022      	movs	r2, r4
     204:	4659      	mov	r1, fp
     206:	6809      	ldr	r1, [r1, #0]
     208:	4828      	ldr	r0, [pc, #160]	; (2ac <node_make_source_from_msg+0xd4>)
     20a:	47d0      	blx	sl
		if (((msg_generic->header.addr >> (addr_len * 4)) & 0xf) == 0xf) {
     20c:	883b      	ldrh	r3, [r7, #0]
     20e:	4133      	asrs	r3, r6
     210:	401d      	ands	r5, r3
     212:	2d0f      	cmp	r5, #15
     214:	d007      	beq.n	226 <node_make_source_from_msg+0x4e>
	for (; addr_len < 4; addr_len++) {
     216:	3401      	adds	r4, #1
     218:	2c04      	cmp	r4, #4
     21a:	d1ed      	bne.n	1f8 <node_make_source_from_msg+0x20>
	for (int i = addr_len - 1; i >= 0; i--) {
     21c:	46a3      	mov	fp, r4
     21e:	1e63      	subs	r3, r4, #1
     220:	d41c      	bmi.n	25c <node_make_source_from_msg+0x84>
     222:	001c      	movs	r4, r3
     224:	e003      	b.n	22e <node_make_source_from_msg+0x56>
		addr_len = 1;
     226:	2301      	movs	r3, #1
     228:	469b      	mov	fp, r3
	if (addr_len == 0) {
     22a:	2c00      	cmp	r4, #0
     22c:	d1f6      	bne.n	21c <node_make_source_from_msg+0x44>
     22e:	00a5      	lsls	r5, r4, #2
		debug_print("hops[%d] = %d\n", i, source->addr.hops[i]);
     230:	4b1c      	ldr	r3, [pc, #112]	; (2a4 <node_make_source_from_msg+0xcc>)
     232:	469a      	mov	sl, r3
     234:	4e1c      	ldr	r6, [pc, #112]	; (2a8 <node_make_source_from_msg+0xd0>)
     236:	46b8      	mov	r8, r7
     238:	464f      	mov	r7, r9
		source->addr.hops[i] = (msg_generic->header.addr >> (i * 4)) & 0xf;
     23a:	4643      	mov	r3, r8
     23c:	881a      	ldrh	r2, [r3, #0]
     23e:	412a      	asrs	r2, r5
     240:	230f      	movs	r3, #15
     242:	4013      	ands	r3, r2
     244:	197a      	adds	r2, r7, r5
     246:	6053      	str	r3, [r2, #4]
		debug_print("hops[%d] = %d\n", i, source->addr.hops[i]);
     248:	0022      	movs	r2, r4
     24a:	4651      	mov	r1, sl
     24c:	6809      	ldr	r1, [r1, #0]
     24e:	4818      	ldr	r0, [pc, #96]	; (2b0 <node_make_source_from_msg+0xd8>)
     250:	47b0      	blx	r6
     252:	3d04      	subs	r5, #4
	for (int i = addr_len - 1; i >= 0; i--) {
     254:	3c01      	subs	r4, #1
     256:	d5f0      	bpl.n	23a <node_make_source_from_msg+0x62>
     258:	46b9      	mov	r9, r7
     25a:	4647      	mov	r7, r8
	source->addr.len = addr_len;
     25c:	464b      	mov	r3, r9
     25e:	465a      	mov	r2, fp
     260:	601a      	str	r2, [r3, #0]
	memset((char*)&source->hid, 0, sizeof(source->hid));
     262:	4648      	mov	r0, r9
     264:	3014      	adds	r0, #20
     266:	2204      	movs	r2, #4
     268:	2100      	movs	r1, #0
     26a:	4b12      	ldr	r3, [pc, #72]	; (2b4 <node_make_source_from_msg+0xdc>)
     26c:	4798      	blx	r3
	memmove(&source->haddr, &node_table[msg_generic->header.ret].haddr, sizeof(source->haddr));
     26e:	797b      	ldrb	r3, [r7, #5]
     270:	0099      	lsls	r1, r3, #2
     272:	18c9      	adds	r1, r1, r3
     274:	00c9      	lsls	r1, r1, #3
     276:	9b01      	ldr	r3, [sp, #4]
     278:	469c      	mov	ip, r3
     27a:	4461      	add	r1, ip
     27c:	3118      	adds	r1, #24
     27e:	4648      	mov	r0, r9
     280:	3018      	adds	r0, #24
     282:	2202      	movs	r2, #2
     284:	4b0c      	ldr	r3, [pc, #48]	; (2b8 <node_make_source_from_msg+0xe0>)
     286:	4798      	blx	r3
	source->type = NODE_TYPE_NONE;
     288:	2300      	movs	r3, #0
     28a:	464a      	mov	r2, r9
     28c:	61d3      	str	r3, [r2, #28]
	source->network = network;
     28e:	464b      	mov	r3, r9
     290:	9a00      	ldr	r2, [sp, #0]
     292:	625a      	str	r2, [r3, #36]	; 0x24
}
     294:	b003      	add	sp, #12
     296:	bc3c      	pop	{r2, r3, r4, r5}
     298:	4690      	mov	r8, r2
     29a:	4699      	mov	r9, r3
     29c:	46a2      	mov	sl, r4
     29e:	46ab      	mov	fp, r5
     2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	20002ba8 	.word	0x20002ba8
     2a8:	00007105 	.word	0x00007105
     2ac:	00008110 	.word	0x00008110
     2b0:	00008124 	.word	0x00008124
     2b4:	00006fa5 	.word	0x00006fa5
     2b8:	00006f81 	.word	0x00006f81

000002bc <node_msg_cmd_encrypted>:
	switch (cmd) {
     2bc:	3805      	subs	r0, #5
     2be:	b2c3      	uxtb	r3, r0
		return 1;
     2c0:	2000      	movs	r0, #0
     2c2:	220a      	movs	r2, #10
     2c4:	429a      	cmp	r2, r3
     2c6:	4140      	adcs	r0, r0
}
     2c8:	4770      	bx	lr
	...

000002cc <node_msg_send>:
void node_msg_send(struct node* self, struct node* destination, enum node_cmd cmd, void* msg) {
     2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ce:	46c6      	mov	lr, r8
     2d0:	b500      	push	{lr}
     2d2:	b09a      	sub	sp, #104	; 0x68
     2d4:	0006      	movs	r6, r0
     2d6:	000d      	movs	r5, r1
     2d8:	9207      	str	r2, [sp, #28]
     2da:	001c      	movs	r4, r3
	node_msg_addr_fill(&msg_generic->header, &destination->addr);
     2dc:	0018      	movs	r0, r3
     2de:	4b2c      	ldr	r3, [pc, #176]	; (390 <node_msg_send+0xc4>)
     2e0:	4798      	blx	r3
	debug_print("Sending to naddr %x, len %d\n", *((uint16_t*)&msg_generic->header.addr), destination->addr.len);
     2e2:	8822      	ldrh	r2, [r4, #0]
     2e4:	4b2b      	ldr	r3, [pc, #172]	; (394 <node_msg_send+0xc8>)
     2e6:	6819      	ldr	r1, [r3, #0]
     2e8:	682b      	ldr	r3, [r5, #0]
     2ea:	482b      	ldr	r0, [pc, #172]	; (398 <node_msg_send+0xcc>)
     2ec:	4f2b      	ldr	r7, [pc, #172]	; (39c <node_msg_send+0xd0>)
     2ee:	47b8      	blx	r7
	msg_generic->header.counter = rand(); // need to figure out how to configure this
     2f0:	4b2b      	ldr	r3, [pc, #172]	; (3a0 <node_msg_send+0xd4>)
     2f2:	4798      	blx	r3
     2f4:	4680      	mov	r8, r0
     2f6:	8060      	strh	r0, [r4, #2]
	msg_generic->header.TTL = destination->addr.len - 1;
     2f8:	6829      	ldr	r1, [r5, #0]
     2fa:	1e4b      	subs	r3, r1, #1
     2fc:	7123      	strb	r3, [r4, #4]
	header->ret = ret_addr->hops[0]; // by convention, first is local addr
     2fe:	7931      	ldrb	r1, [r6, #4]
     300:	7161      	strb	r1, [r4, #5]
	msg_generic->header.cmd = cmd;
     302:	9b07      	ldr	r3, [sp, #28]
     304:	71a3      	strb	r3, [r4, #6]
	msg_generic->header.len = node_msg_cmd_to_len(cmd);
     306:	0018      	movs	r0, r3
     308:	4b26      	ldr	r3, [pc, #152]	; (3a4 <node_msg_send+0xd8>)
     30a:	4798      	blx	r3
     30c:	0007      	movs	r7, r0
     30e:	71e0      	strb	r0, [r4, #7]
	if(node_msg_cmd_encrypted(cmd)) {
     310:	9807      	ldr	r0, [sp, #28]
     312:	4b25      	ldr	r3, [pc, #148]	; (3a8 <node_msg_send+0xdc>)
     314:	4798      	blx	r3
     316:	2800      	cmp	r0, #0
     318:	d10a      	bne.n	330 <node_msg_send+0x64>
	network_send(destination->network, &destination->haddr, (uint8_t*)msg_generic, msg_generic->header.len);
     31a:	0029      	movs	r1, r5
     31c:	3118      	adds	r1, #24
     31e:	6a68      	ldr	r0, [r5, #36]	; 0x24
     320:	003b      	movs	r3, r7
     322:	0022      	movs	r2, r4
     324:	4c21      	ldr	r4, [pc, #132]	; (3ac <node_msg_send+0xe0>)
     326:	47a0      	blx	r4
}
     328:	b01a      	add	sp, #104	; 0x68
     32a:	bc04      	pop	{r2}
     32c:	4690      	mov	r8, r2
     32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*((uint32_t *)&self->encryption_data->nonce[0]) += msg_generic->header.counter;
     330:	6a32      	ldr	r2, [r6, #32]
     332:	4643      	mov	r3, r8
     334:	041b      	lsls	r3, r3, #16
     336:	0c1b      	lsrs	r3, r3, #16
     338:	6911      	ldr	r1, [r2, #16]
     33a:	468c      	mov	ip, r1
     33c:	4463      	add	r3, ip
     33e:	6113      	str	r3, [r2, #16]
		uint32_t tempLen[2] = {0,0};
     340:	2100      	movs	r1, #0
     342:	9108      	str	r1, [sp, #32]
     344:	9109      	str	r1, [sp, #36]	; 0x24
		crypto_aead_encrypt(&buff[sizeof(struct node_msg_header)],&tempLen[0],msg_generic->data,tempInLen[0],NULL,NULL,NULL,self->encryption_data->nonce,self->encryption_data->session_key);
     346:	6a30      	ldr	r0, [r6, #32]
		uint32_t tempInLen[2] = {((msg_generic->header.len-sizeof(struct node_msg_header)+7)/8)*8,0};
     348:	79e3      	ldrb	r3, [r4, #7]
     34a:	3b01      	subs	r3, #1
     34c:	2207      	movs	r2, #7
     34e:	4393      	bics	r3, r2
		crypto_aead_encrypt(&buff[sizeof(struct node_msg_header)],&tempLen[0],msg_generic->data,tempInLen[0],NULL,NULL,NULL,self->encryption_data->nonce,self->encryption_data->session_key);
     350:	0022      	movs	r2, r4
     352:	3208      	adds	r2, #8
     354:	9004      	str	r0, [sp, #16]
     356:	3010      	adds	r0, #16
     358:	9003      	str	r0, [sp, #12]
     35a:	9102      	str	r1, [sp, #8]
     35c:	9101      	str	r1, [sp, #4]
     35e:	9100      	str	r1, [sp, #0]
     360:	a908      	add	r1, sp, #32
     362:	a80c      	add	r0, sp, #48	; 0x30
     364:	4f12      	ldr	r7, [pc, #72]	; (3b0 <node_msg_send+0xe4>)
     366:	47b8      	blx	r7
		*((uint32_t *)&self->encryption_data->nonce[0]) -= msg_generic->header.counter;
     368:	6a32      	ldr	r2, [r6, #32]
     36a:	8863      	ldrh	r3, [r4, #2]
     36c:	6911      	ldr	r1, [r2, #16]
     36e:	1acb      	subs	r3, r1, r3
     370:	6113      	str	r3, [r2, #16]
		memcpy(buff,&msg_generic->header,sizeof(struct node_msg_header));
     372:	2208      	movs	r2, #8
     374:	0021      	movs	r1, r4
     376:	a80a      	add	r0, sp, #40	; 0x28
     378:	4b0e      	ldr	r3, [pc, #56]	; (3b4 <node_msg_send+0xe8>)
     37a:	4798      	blx	r3
		network_send(destination->network, &destination->haddr, (uint8_t*)buff, tempLen[0]+sizeof(struct node_msg_header));
     37c:	9b08      	ldr	r3, [sp, #32]
     37e:	3308      	adds	r3, #8
     380:	0029      	movs	r1, r5
     382:	3118      	adds	r1, #24
     384:	6a68      	ldr	r0, [r5, #36]	; 0x24
     386:	aa0a      	add	r2, sp, #40	; 0x28
     388:	4c08      	ldr	r4, [pc, #32]	; (3ac <node_msg_send+0xe0>)
     38a:	47a0      	blx	r4
     38c:	e7cc      	b.n	328 <node_msg_send+0x5c>
     38e:	46c0      	nop			; (mov r8, r8)
     390:	00000155 	.word	0x00000155
     394:	20002ba8 	.word	0x20002ba8
     398:	00008160 	.word	0x00008160
     39c:	00007105 	.word	0x00007105
     3a0:	0000720d 	.word	0x0000720d
     3a4:	00000121 	.word	0x00000121
     3a8:	000002bd 	.word	0x000002bd
     3ac:	00000c49 	.word	0x00000c49
     3b0:	0000123d 	.word	0x0000123d
     3b4:	00006f6f 	.word	0x00006f6f

000003b8 <node_msg_send_generic>:
void node_msg_send_generic(struct node* self, struct node* destination, enum node_cmd cmd, void* msg, uint8_t len) {
     3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ba:	46ce      	mov	lr, r9
     3bc:	4647      	mov	r7, r8
     3be:	b580      	push	{r7, lr}
     3c0:	b09b      	sub	sp, #108	; 0x6c
     3c2:	4680      	mov	r8, r0
     3c4:	000f      	movs	r7, r1
     3c6:	9207      	str	r2, [sp, #28]
     3c8:	001e      	movs	r6, r3
     3ca:	ab22      	add	r3, sp, #136	; 0x88
     3cc:	781c      	ldrb	r4, [r3, #0]
	len += sizeof(struct node_msg_header);
     3ce:	3408      	adds	r4, #8
     3d0:	b2e4      	uxtb	r4, r4
	int proper_len = (len < sizeof(struct node_msg_generic)) ? len : sizeof(struct node_msg_generic);
     3d2:	2c37      	cmp	r4, #55	; 0x37
     3d4:	d900      	bls.n	3d8 <node_msg_send_generic+0x20>
     3d6:	2438      	movs	r4, #56	; 0x38
	node_msg_addr_fill(&msg_generic->header, &destination->addr);
     3d8:	0039      	movs	r1, r7
     3da:	0030      	movs	r0, r6
     3dc:	4b25      	ldr	r3, [pc, #148]	; (474 <node_msg_send_generic+0xbc>)
     3de:	4798      	blx	r3
	debug_print("Sending to naddr %x, len %d\n", *((uint16_t*)&msg_generic->header.addr), destination->addr.len);
     3e0:	8832      	ldrh	r2, [r6, #0]
     3e2:	4b25      	ldr	r3, [pc, #148]	; (478 <node_msg_send_generic+0xc0>)
     3e4:	6819      	ldr	r1, [r3, #0]
     3e6:	683b      	ldr	r3, [r7, #0]
     3e8:	4824      	ldr	r0, [pc, #144]	; (47c <node_msg_send_generic+0xc4>)
     3ea:	4d25      	ldr	r5, [pc, #148]	; (480 <node_msg_send_generic+0xc8>)
     3ec:	47a8      	blx	r5
	msg_generic->header.counter = 0;
     3ee:	2300      	movs	r3, #0
     3f0:	8073      	strh	r3, [r6, #2]
	msg_generic->header.TTL = destination->addr.len - 1;
     3f2:	683b      	ldr	r3, [r7, #0]
     3f4:	3b01      	subs	r3, #1
     3f6:	7133      	strb	r3, [r6, #4]
	header->ret = ret_addr->hops[0]; // by convention, first is local addr
     3f8:	4643      	mov	r3, r8
     3fa:	791b      	ldrb	r3, [r3, #4]
     3fc:	7173      	strb	r3, [r6, #5]
	msg_generic->header.cmd = cmd;
     3fe:	9807      	ldr	r0, [sp, #28]
     400:	71b0      	strb	r0, [r6, #6]
	msg_generic->header.len = proper_len;
     402:	71f4      	strb	r4, [r6, #7]
	if(node_msg_cmd_encrypted(cmd)) {
     404:	4b1f      	ldr	r3, [pc, #124]	; (484 <node_msg_send_generic+0xcc>)
     406:	4798      	blx	r3
     408:	2800      	cmp	r0, #0
     40a:	d10b      	bne.n	424 <node_msg_send_generic+0x6c>
	network_send(destination->network, &destination->haddr, (uint8_t*)msg_generic, proper_len);
     40c:	0039      	movs	r1, r7
     40e:	3118      	adds	r1, #24
     410:	6a78      	ldr	r0, [r7, #36]	; 0x24
     412:	0023      	movs	r3, r4
     414:	0032      	movs	r2, r6
     416:	4c1c      	ldr	r4, [pc, #112]	; (488 <node_msg_send_generic+0xd0>)
     418:	47a0      	blx	r4
}
     41a:	b01b      	add	sp, #108	; 0x6c
     41c:	bc0c      	pop	{r2, r3}
     41e:	4690      	mov	r8, r2
     420:	4699      	mov	r9, r3
     422:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*((uint32_t *)&self->encryption_data->nonce[0]) += msg_generic->header.counter;
     424:	4643      	mov	r3, r8
     426:	6a18      	ldr	r0, [r3, #32]
		uint32_t tempLen[2] = {0,0};
     428:	2100      	movs	r1, #0
     42a:	9108      	str	r1, [sp, #32]
     42c:	9109      	str	r1, [sp, #36]	; 0x24
		uint32_t tempInLen[2] = {((msg_generic->header.len-sizeof(struct node_msg_header)+7)/8)*8,0};
     42e:	1e63      	subs	r3, r4, #1
     430:	2207      	movs	r2, #7
     432:	4393      	bics	r3, r2
		crypto_aead_encrypt(&buff[sizeof(struct node_msg_header)],&tempLen[0],msg_generic->data,tempInLen[0],NULL,NULL,NULL,self->encryption_data->nonce,self->encryption_data->session_key);
     434:	0032      	movs	r2, r6
     436:	3208      	adds	r2, #8
     438:	9004      	str	r0, [sp, #16]
     43a:	3010      	adds	r0, #16
     43c:	9003      	str	r0, [sp, #12]
     43e:	9102      	str	r1, [sp, #8]
     440:	9101      	str	r1, [sp, #4]
     442:	9100      	str	r1, [sp, #0]
     444:	a908      	add	r1, sp, #32
     446:	a80c      	add	r0, sp, #48	; 0x30
     448:	4c10      	ldr	r4, [pc, #64]	; (48c <node_msg_send_generic+0xd4>)
     44a:	47a0      	blx	r4
		*((uint32_t *)&self->encryption_data->nonce[0]) -= msg_generic->header.counter;
     44c:	4643      	mov	r3, r8
     44e:	6a1a      	ldr	r2, [r3, #32]
     450:	8873      	ldrh	r3, [r6, #2]
     452:	6911      	ldr	r1, [r2, #16]
     454:	1acb      	subs	r3, r1, r3
     456:	6113      	str	r3, [r2, #16]
		memcpy(buff,&msg_generic->header,sizeof(struct node_msg_header));
     458:	2208      	movs	r2, #8
     45a:	0031      	movs	r1, r6
     45c:	a80a      	add	r0, sp, #40	; 0x28
     45e:	4b0c      	ldr	r3, [pc, #48]	; (490 <node_msg_send_generic+0xd8>)
     460:	4798      	blx	r3
		network_send(destination->network, &destination->haddr, (uint8_t*)buff, tempLen[0]+sizeof(struct node_msg_header));
     462:	9b08      	ldr	r3, [sp, #32]
     464:	3308      	adds	r3, #8
     466:	0039      	movs	r1, r7
     468:	3118      	adds	r1, #24
     46a:	6a78      	ldr	r0, [r7, #36]	; 0x24
     46c:	aa0a      	add	r2, sp, #40	; 0x28
     46e:	4c06      	ldr	r4, [pc, #24]	; (488 <node_msg_send_generic+0xd0>)
     470:	47a0      	blx	r4
     472:	e7d2      	b.n	41a <node_msg_send_generic+0x62>
     474:	00000155 	.word	0x00000155
     478:	20002ba8 	.word	0x20002ba8
     47c:	00008160 	.word	0x00008160
     480:	00007105 	.word	0x00007105
     484:	000002bd 	.word	0x000002bd
     488:	00000c49 	.word	0x00000c49
     48c:	0000123d 	.word	0x0000123d
     490:	00006f6f 	.word	0x00006f6f

00000494 <node_msg_wait>:
void node_msg_wait(struct node* self, void* msg_buff) {
     494:	b5f0      	push	{r4, r5, r6, r7, lr}
     496:	46c6      	mov	lr, r8
     498:	b500      	push	{lr}
     49a:	b096      	sub	sp, #88	; 0x58
     49c:	0005      	movs	r5, r0
     49e:	000c      	movs	r4, r1
		received = network_check_any(self->network, NULL, msg_buff, sizeof(struct node_msg_generic));
     4a0:	4e48      	ldr	r6, [pc, #288]	; (5c4 <node_msg_wait+0x130>)
     4a2:	2338      	movs	r3, #56	; 0x38
     4a4:	0022      	movs	r2, r4
     4a6:	2100      	movs	r1, #0
     4a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
     4aa:	47b0      	blx	r6
	} while (received == 0);
     4ac:	2800      	cmp	r0, #0
     4ae:	d0f8      	beq.n	4a2 <node_msg_wait+0xe>
	if(node_msg_cmd_encrypted(msg_generic->header.cmd)) {
     4b0:	79a0      	ldrb	r0, [r4, #6]
     4b2:	4b45      	ldr	r3, [pc, #276]	; (5c8 <node_msg_wait+0x134>)
     4b4:	4798      	blx	r3
     4b6:	2800      	cmp	r0, #0
     4b8:	d10d      	bne.n	4d6 <node_msg_wait+0x42>
	int shift = msg_generic->header.TTL * 4;
     4ba:	7922      	ldrb	r2, [r4, #4]
     4bc:	0092      	lsls	r2, r2, #2
	msg_generic->header.addr = (msg_generic->header.addr & ~(0xf << shift)) | (msg_generic->header.ret << shift);
     4be:	210f      	movs	r1, #15
     4c0:	4091      	lsls	r1, r2
     4c2:	8823      	ldrh	r3, [r4, #0]
     4c4:	438b      	bics	r3, r1
     4c6:	7961      	ldrb	r1, [r4, #5]
     4c8:	4091      	lsls	r1, r2
     4ca:	430b      	orrs	r3, r1
     4cc:	8023      	strh	r3, [r4, #0]
}
     4ce:	b016      	add	sp, #88	; 0x58
     4d0:	bc04      	pop	{r2}
     4d2:	4690      	mov	r8, r2
     4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t unpaddedVal = ((msg_generic->header.len-sizeof(struct node_msg_header)+7)/8)*8+8;
     4d6:	79e6      	ldrb	r6, [r4, #7]
     4d8:	3e01      	subs	r6, #1
     4da:	2307      	movs	r3, #7
     4dc:	439e      	bics	r6, r3
     4de:	3608      	adds	r6, #8
		*((uint32_t *)&self->encryption_data->nonce[0]) += msg_generic->header.counter;
     4e0:	6a2a      	ldr	r2, [r5, #32]
     4e2:	8863      	ldrh	r3, [r4, #2]
     4e4:	6911      	ldr	r1, [r2, #16]
     4e6:	468c      	mov	ip, r1
     4e8:	4463      	add	r3, ip
     4ea:	6113      	str	r3, [r2, #16]
		uint32_t tempLen[2] = {0,0};
     4ec:	2200      	movs	r2, #0
     4ee:	9206      	str	r2, [sp, #24]
     4f0:	9207      	str	r2, [sp, #28]
		if (crypto_aead_decrypt(buff,&tempLen[0],NULL,msg_generic->data,unpaddedVal,NULL,NULL,self->encryption_data->nonce,self->encryption_data->session_key)) {
     4f2:	6a29      	ldr	r1, [r5, #32]
     4f4:	0023      	movs	r3, r4
     4f6:	3308      	adds	r3, #8
     4f8:	9104      	str	r1, [sp, #16]
     4fa:	3110      	adds	r1, #16
     4fc:	9103      	str	r1, [sp, #12]
     4fe:	9202      	str	r2, [sp, #8]
     500:	9201      	str	r2, [sp, #4]
     502:	9600      	str	r6, [sp, #0]
     504:	a906      	add	r1, sp, #24
     506:	a808      	add	r0, sp, #32
     508:	4f30      	ldr	r7, [pc, #192]	; (5cc <node_msg_wait+0x138>)
     50a:	47b8      	blx	r7
     50c:	2800      	cmp	r0, #0
     50e:	d10b      	bne.n	528 <node_msg_wait+0x94>
		*((uint32_t *)&self->encryption_data->nonce[0]) -= msg_generic->header.counter;
     510:	6a2a      	ldr	r2, [r5, #32]
     512:	8863      	ldrh	r3, [r4, #2]
     514:	6911      	ldr	r1, [r2, #16]
     516:	1acb      	subs	r3, r1, r3
     518:	6113      	str	r3, [r2, #16]
		memcpy(&msg_buff[sizeof(struct node_msg_header)],buff,tempLen[0]);
     51a:	0020      	movs	r0, r4
     51c:	3008      	adds	r0, #8
     51e:	9a06      	ldr	r2, [sp, #24]
     520:	a908      	add	r1, sp, #32
     522:	4b2b      	ldr	r3, [pc, #172]	; (5d0 <node_msg_wait+0x13c>)
     524:	4798      	blx	r3
     526:	e7c8      	b.n	4ba <node_msg_wait+0x26>
			debug_print("Decrypt Tag Failed %i, %i\n",unpaddedVal,tempLen[0]);
     528:	4f2a      	ldr	r7, [pc, #168]	; (5d4 <node_msg_wait+0x140>)
     52a:	9b06      	ldr	r3, [sp, #24]
     52c:	0032      	movs	r2, r6
     52e:	6839      	ldr	r1, [r7, #0]
     530:	4829      	ldr	r0, [pc, #164]	; (5d8 <node_msg_wait+0x144>)
     532:	4e2a      	ldr	r6, [pc, #168]	; (5dc <node_msg_wait+0x148>)
     534:	47b0      	blx	r6
			debug_print("Received: \n");
     536:	6839      	ldr	r1, [r7, #0]
     538:	4829      	ldr	r0, [pc, #164]	; (5e0 <node_msg_wait+0x14c>)
     53a:	47b0      	blx	r6
			for (int i = 0; i < tempLen[0]; i++) {
     53c:	9b06      	ldr	r3, [sp, #24]
     53e:	2b00      	cmp	r3, #0
     540:	d00c      	beq.n	55c <node_msg_wait+0xc8>
     542:	2600      	movs	r6, #0
				printf("%x ", buff[sizeof(struct node_msg_header)+i]);
     544:	4b27      	ldr	r3, [pc, #156]	; (5e4 <node_msg_wait+0x150>)
     546:	4698      	mov	r8, r3
     548:	4f24      	ldr	r7, [pc, #144]	; (5dc <node_msg_wait+0x148>)
     54a:	ab08      	add	r3, sp, #32
     54c:	199b      	adds	r3, r3, r6
     54e:	7a19      	ldrb	r1, [r3, #8]
     550:	4640      	mov	r0, r8
     552:	47b8      	blx	r7
			for (int i = 0; i < tempLen[0]; i++) {
     554:	3601      	adds	r6, #1
     556:	9b06      	ldr	r3, [sp, #24]
     558:	42b3      	cmp	r3, r6
     55a:	d8f6      	bhi.n	54a <node_msg_wait+0xb6>
			printf("\r\n");
     55c:	4822      	ldr	r0, [pc, #136]	; (5e8 <node_msg_wait+0x154>)
     55e:	4b23      	ldr	r3, [pc, #140]	; (5ec <node_msg_wait+0x158>)
     560:	4798      	blx	r3
			debug_print("Session Key: \n");
     562:	4b1c      	ldr	r3, [pc, #112]	; (5d4 <node_msg_wait+0x140>)
     564:	6819      	ldr	r1, [r3, #0]
     566:	4822      	ldr	r0, [pc, #136]	; (5f0 <node_msg_wait+0x15c>)
     568:	4b1c      	ldr	r3, [pc, #112]	; (5dc <node_msg_wait+0x148>)
     56a:	4798      	blx	r3
			for (int i = 0; i < 16; i++) {
     56c:	2600      	movs	r6, #0
				printf("%x ",self->encryption_data->session_key[i]);
     56e:	4b1d      	ldr	r3, [pc, #116]	; (5e4 <node_msg_wait+0x150>)
     570:	4698      	mov	r8, r3
     572:	4f1a      	ldr	r7, [pc, #104]	; (5dc <node_msg_wait+0x148>)
     574:	6a2b      	ldr	r3, [r5, #32]
     576:	5d99      	ldrb	r1, [r3, r6]
     578:	4640      	mov	r0, r8
     57a:	47b8      	blx	r7
			for (int i = 0; i < 16; i++) {
     57c:	3601      	adds	r6, #1
     57e:	2e10      	cmp	r6, #16
     580:	d1f8      	bne.n	574 <node_msg_wait+0xe0>
			printf("\r\n");
     582:	4819      	ldr	r0, [pc, #100]	; (5e8 <node_msg_wait+0x154>)
     584:	4b19      	ldr	r3, [pc, #100]	; (5ec <node_msg_wait+0x158>)
     586:	4798      	blx	r3
			debug_print("Nonce: \n");
     588:	4b12      	ldr	r3, [pc, #72]	; (5d4 <node_msg_wait+0x140>)
     58a:	6819      	ldr	r1, [r3, #0]
     58c:	4819      	ldr	r0, [pc, #100]	; (5f4 <node_msg_wait+0x160>)
     58e:	4b13      	ldr	r3, [pc, #76]	; (5dc <node_msg_wait+0x148>)
     590:	4798      	blx	r3
			for (int i = 0; i < 16; i++) {
     592:	2600      	movs	r6, #0
				printf("%x ",self->encryption_data->nonce[i]);
     594:	4b13      	ldr	r3, [pc, #76]	; (5e4 <node_msg_wait+0x150>)
     596:	4698      	mov	r8, r3
     598:	4f10      	ldr	r7, [pc, #64]	; (5dc <node_msg_wait+0x148>)
     59a:	6a2b      	ldr	r3, [r5, #32]
     59c:	199b      	adds	r3, r3, r6
     59e:	7c19      	ldrb	r1, [r3, #16]
     5a0:	b2c9      	uxtb	r1, r1
     5a2:	4640      	mov	r0, r8
     5a4:	47b8      	blx	r7
			for (int i = 0; i < 16; i++) {
     5a6:	3601      	adds	r6, #1
     5a8:	2e10      	cmp	r6, #16
     5aa:	d1f6      	bne.n	59a <node_msg_wait+0x106>
			printf("\r\n");
     5ac:	480e      	ldr	r0, [pc, #56]	; (5e8 <node_msg_wait+0x154>)
     5ae:	4b0f      	ldr	r3, [pc, #60]	; (5ec <node_msg_wait+0x158>)
     5b0:	4798      	blx	r3
			*((uint32_t *)&self->encryption_data->nonce[0]) -= msg_generic->header.counter;
     5b2:	6a2a      	ldr	r2, [r5, #32]
     5b4:	8863      	ldrh	r3, [r4, #2]
     5b6:	6911      	ldr	r1, [r2, #16]
     5b8:	1acb      	subs	r3, r1, r3
     5ba:	6113      	str	r3, [r2, #16]
			exit(1);
     5bc:	2001      	movs	r0, #1
     5be:	4b0e      	ldr	r3, [pc, #56]	; (5f8 <node_msg_wait+0x164>)
     5c0:	4798      	blx	r3
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	00000ced 	.word	0x00000ced
     5c8:	000002bd 	.word	0x000002bd
     5cc:	00001ad9 	.word	0x00001ad9
     5d0:	00006f6f 	.word	0x00006f6f
     5d4:	20002ba8 	.word	0x20002ba8
     5d8:	00008184 	.word	0x00008184
     5dc:	00007105 	.word	0x00007105
     5e0:	000081a4 	.word	0x000081a4
     5e4:	000081b8 	.word	0x000081b8
     5e8:	000081dc 	.word	0x000081dc
     5ec:	000071f9 	.word	0x000071f9
     5f0:	000081bc 	.word	0x000081bc
     5f4:	000081d0 	.word	0x000081d0
     5f8:	00006ec9 	.word	0x00006ec9

000005fc <node_msg_check>:
}

// source is the node to check for a message from
// msg_buff is the buffer to write the received message to (if any)
// Returns: the length written if a message is available, 0 otherwise
int node_msg_check(struct node* source, void* msg_buff) {
     5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fe:	b097      	sub	sp, #92	; 0x5c
     600:	0006      	movs	r6, r0
     602:	000d      	movs	r5, r1
	int written = network_check_any(source->network, NULL, msg_buff, sizeof(struct node_msg_generic));
     604:	2338      	movs	r3, #56	; 0x38
     606:	000a      	movs	r2, r1
     608:	2100      	movs	r1, #0
     60a:	6a40      	ldr	r0, [r0, #36]	; 0x24
     60c:	4c47      	ldr	r4, [pc, #284]	; (72c <node_msg_check+0x130>)
     60e:	47a0      	blx	r4
	if (written > 0) {
     610:	2800      	cmp	r0, #0
     612:	dc00      	bgt.n	616 <node_msg_check+0x1a>
     614:	e087      	b.n	726 <node_msg_check+0x12a>
		struct node_msg_generic* msg_generic = msg_buff;
		uint32_t unpaddedVal = ((msg_generic->header.len-sizeof(struct node_msg_header)+7)/8)*8+8;
     616:	79ec      	ldrb	r4, [r5, #7]
     618:	3c01      	subs	r4, #1
     61a:	2307      	movs	r3, #7
     61c:	439c      	bics	r4, r3
     61e:	3408      	adds	r4, #8
		if(node_msg_cmd_encrypted(msg_generic->header.cmd)) {
     620:	79a8      	ldrb	r0, [r5, #6]
     622:	4b43      	ldr	r3, [pc, #268]	; (730 <node_msg_check+0x134>)
     624:	4798      	blx	r3
     626:	2800      	cmp	r0, #0
     628:	d022      	beq.n	670 <node_msg_check+0x74>
			uint8_t buff[56];
			*((uint32_t *)&source->encryption_data->nonce[0]) += msg_generic->header.counter;
     62a:	6a32      	ldr	r2, [r6, #32]
     62c:	886b      	ldrh	r3, [r5, #2]
     62e:	6911      	ldr	r1, [r2, #16]
     630:	468c      	mov	ip, r1
     632:	4463      	add	r3, ip
     634:	6113      	str	r3, [r2, #16]
			uint32_t tempLen[2] = {0,0};
     636:	2200      	movs	r2, #0
     638:	9206      	str	r2, [sp, #24]
     63a:	9207      	str	r2, [sp, #28]
			if (crypto_aead_decrypt(buff,&tempLen[0],NULL,msg_generic->data,unpaddedVal,NULL,NULL,source->encryption_data->nonce,source->encryption_data->session_key)) {
     63c:	6a31      	ldr	r1, [r6, #32]
     63e:	002b      	movs	r3, r5
     640:	3308      	adds	r3, #8
     642:	9104      	str	r1, [sp, #16]
     644:	3110      	adds	r1, #16
     646:	9103      	str	r1, [sp, #12]
     648:	9202      	str	r2, [sp, #8]
     64a:	9201      	str	r2, [sp, #4]
     64c:	9400      	str	r4, [sp, #0]
     64e:	a906      	add	r1, sp, #24
     650:	a808      	add	r0, sp, #32
     652:	4f38      	ldr	r7, [pc, #224]	; (734 <node_msg_check+0x138>)
     654:	47b8      	blx	r7
     656:	2800      	cmp	r0, #0
     658:	d11e      	bne.n	698 <node_msg_check+0x9c>
				printf("\r\n");
				*((uint32_t *)&source->encryption_data->nonce[0]) -= msg_generic->header.counter;
				exit(1);
			}
			
			*((uint32_t *)&source->encryption_data->nonce[0]) -= msg_generic->header.counter;
     65a:	6a32      	ldr	r2, [r6, #32]
     65c:	886b      	ldrh	r3, [r5, #2]
     65e:	6911      	ldr	r1, [r2, #16]
     660:	1acb      	subs	r3, r1, r3
     662:	6113      	str	r3, [r2, #16]
			memcpy(&msg_buff[sizeof(struct node_msg_header)],buff,tempLen[0]);
     664:	0028      	movs	r0, r5
     666:	3008      	adds	r0, #8
     668:	9a06      	ldr	r2, [sp, #24]
     66a:	a908      	add	r1, sp, #32
     66c:	4b32      	ldr	r3, [pc, #200]	; (738 <node_msg_check+0x13c>)
     66e:	4798      	blx	r3
		}
		int shift = msg_generic->header.TTL * 4;
     670:	7929      	ldrb	r1, [r5, #4]
     672:	0089      	lsls	r1, r1, #2
		msg_generic->header.addr = (msg_generic->header.addr & ~(0xf << shift)) | (msg_generic->header.ret << shift);
     674:	796b      	ldrb	r3, [r5, #5]
     676:	200f      	movs	r0, #15
     678:	4088      	lsls	r0, r1
     67a:	882a      	ldrh	r2, [r5, #0]
     67c:	4382      	bics	r2, r0
     67e:	0018      	movs	r0, r3
     680:	4088      	lsls	r0, r1
     682:	4302      	orrs	r2, r0
     684:	b292      	uxth	r2, r2
     686:	802a      	strh	r2, [r5, #0]
		debug_print("Receiving from naddr %x, ret %x\n", *((uint16_t*)&msg_generic->header.addr), msg_generic->header.ret);
     688:	492c      	ldr	r1, [pc, #176]	; (73c <node_msg_check+0x140>)
     68a:	6809      	ldr	r1, [r1, #0]
     68c:	482c      	ldr	r0, [pc, #176]	; (740 <node_msg_check+0x144>)
     68e:	4d2d      	ldr	r5, [pc, #180]	; (744 <node_msg_check+0x148>)
     690:	47a8      	blx	r5
		return unpaddedVal;
     692:	0020      	movs	r0, r4
	}
	return 0;
}
     694:	b017      	add	sp, #92	; 0x5c
     696:	bdf0      	pop	{r4, r5, r6, r7, pc}
				debug_print("Decrypt Tag Failed %i, %i\n",unpaddedVal,tempLen[0]);
     698:	4f28      	ldr	r7, [pc, #160]	; (73c <node_msg_check+0x140>)
     69a:	9b06      	ldr	r3, [sp, #24]
     69c:	0022      	movs	r2, r4
     69e:	6839      	ldr	r1, [r7, #0]
     6a0:	4829      	ldr	r0, [pc, #164]	; (748 <node_msg_check+0x14c>)
     6a2:	4c28      	ldr	r4, [pc, #160]	; (744 <node_msg_check+0x148>)
     6a4:	47a0      	blx	r4
				debug_print("Received: \n");
     6a6:	6839      	ldr	r1, [r7, #0]
     6a8:	4828      	ldr	r0, [pc, #160]	; (74c <node_msg_check+0x150>)
     6aa:	47a0      	blx	r4
				for (int i = 0; i < tempLen[0]; i++) {
     6ac:	9b06      	ldr	r3, [sp, #24]
     6ae:	2b00      	cmp	r3, #0
     6b0:	d00a      	beq.n	6c8 <node_msg_check+0xcc>
     6b2:	2400      	movs	r4, #0
					printf("%x ", buff[sizeof(struct node_msg_header)+i]);
     6b4:	4f23      	ldr	r7, [pc, #140]	; (744 <node_msg_check+0x148>)
     6b6:	ab08      	add	r3, sp, #32
     6b8:	191b      	adds	r3, r3, r4
     6ba:	7a19      	ldrb	r1, [r3, #8]
     6bc:	4824      	ldr	r0, [pc, #144]	; (750 <node_msg_check+0x154>)
     6be:	47b8      	blx	r7
				for (int i = 0; i < tempLen[0]; i++) {
     6c0:	3401      	adds	r4, #1
     6c2:	9b06      	ldr	r3, [sp, #24]
     6c4:	42a3      	cmp	r3, r4
     6c6:	d8f6      	bhi.n	6b6 <node_msg_check+0xba>
				printf("\r\n");
     6c8:	4822      	ldr	r0, [pc, #136]	; (754 <node_msg_check+0x158>)
     6ca:	4b23      	ldr	r3, [pc, #140]	; (758 <node_msg_check+0x15c>)
     6cc:	4798      	blx	r3
				debug_print("Session Key: \n");
     6ce:	4b1b      	ldr	r3, [pc, #108]	; (73c <node_msg_check+0x140>)
     6d0:	6819      	ldr	r1, [r3, #0]
     6d2:	4822      	ldr	r0, [pc, #136]	; (75c <node_msg_check+0x160>)
     6d4:	4b1b      	ldr	r3, [pc, #108]	; (744 <node_msg_check+0x148>)
     6d6:	4798      	blx	r3
				for (int i = 0; i < 16; i++) {
     6d8:	2400      	movs	r4, #0
					printf("%x ",source->encryption_data->session_key[i]);
     6da:	4f1a      	ldr	r7, [pc, #104]	; (744 <node_msg_check+0x148>)
     6dc:	6a33      	ldr	r3, [r6, #32]
     6de:	5d19      	ldrb	r1, [r3, r4]
     6e0:	481b      	ldr	r0, [pc, #108]	; (750 <node_msg_check+0x154>)
     6e2:	47b8      	blx	r7
				for (int i = 0; i < 16; i++) {
     6e4:	3401      	adds	r4, #1
     6e6:	2c10      	cmp	r4, #16
     6e8:	d1f8      	bne.n	6dc <node_msg_check+0xe0>
				printf("\r\n");
     6ea:	481a      	ldr	r0, [pc, #104]	; (754 <node_msg_check+0x158>)
     6ec:	4b1a      	ldr	r3, [pc, #104]	; (758 <node_msg_check+0x15c>)
     6ee:	4798      	blx	r3
				debug_print("Nonce: \n");
     6f0:	4b12      	ldr	r3, [pc, #72]	; (73c <node_msg_check+0x140>)
     6f2:	6819      	ldr	r1, [r3, #0]
     6f4:	481a      	ldr	r0, [pc, #104]	; (760 <node_msg_check+0x164>)
     6f6:	4b13      	ldr	r3, [pc, #76]	; (744 <node_msg_check+0x148>)
     6f8:	4798      	blx	r3
				for (int i = 0; i < 16; i++) {
     6fa:	2400      	movs	r4, #0
					printf("%x ",source->encryption_data->nonce[i]);
     6fc:	4f11      	ldr	r7, [pc, #68]	; (744 <node_msg_check+0x148>)
     6fe:	6a33      	ldr	r3, [r6, #32]
     700:	191b      	adds	r3, r3, r4
     702:	7c19      	ldrb	r1, [r3, #16]
     704:	b2c9      	uxtb	r1, r1
     706:	4812      	ldr	r0, [pc, #72]	; (750 <node_msg_check+0x154>)
     708:	47b8      	blx	r7
				for (int i = 0; i < 16; i++) {
     70a:	3401      	adds	r4, #1
     70c:	2c10      	cmp	r4, #16
     70e:	d1f6      	bne.n	6fe <node_msg_check+0x102>
				printf("\r\n");
     710:	4810      	ldr	r0, [pc, #64]	; (754 <node_msg_check+0x158>)
     712:	4b11      	ldr	r3, [pc, #68]	; (758 <node_msg_check+0x15c>)
     714:	4798      	blx	r3
				*((uint32_t *)&source->encryption_data->nonce[0]) -= msg_generic->header.counter;
     716:	6a32      	ldr	r2, [r6, #32]
     718:	886b      	ldrh	r3, [r5, #2]
     71a:	6911      	ldr	r1, [r2, #16]
     71c:	1acb      	subs	r3, r1, r3
     71e:	6113      	str	r3, [r2, #16]
				exit(1);
     720:	2001      	movs	r0, #1
     722:	4b10      	ldr	r3, [pc, #64]	; (764 <node_msg_check+0x168>)
     724:	4798      	blx	r3
	return 0;
     726:	2000      	movs	r0, #0
     728:	e7b4      	b.n	694 <node_msg_check+0x98>
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	00000ced 	.word	0x00000ced
     730:	000002bd 	.word	0x000002bd
     734:	00001ad9 	.word	0x00001ad9
     738:	00006f6f 	.word	0x00006f6f
     73c:	20002ba8 	.word	0x20002ba8
     740:	00008138 	.word	0x00008138
     744:	00007105 	.word	0x00007105
     748:	00008184 	.word	0x00008184
     74c:	000081a4 	.word	0x000081a4
     750:	000081b8 	.word	0x000081b8
     754:	000081dc 	.word	0x000081dc
     758:	000071f9 	.word	0x000071f9
     75c:	000081bc 	.word	0x000081bc
     760:	000081d0 	.word	0x000081d0
     764:	00006ec9 	.word	0x00006ec9

00000768 <_tc_interrupt_handler>:
     768:	b570      	push	{r4, r5, r6, lr}
     76a:	0080      	lsls	r0, r0, #2
     76c:	4b16      	ldr	r3, [pc, #88]	; (7c8 <_tc_interrupt_handler+0x60>)
     76e:	58c4      	ldr	r4, [r0, r3]
     770:	6823      	ldr	r3, [r4, #0]
     772:	7a9d      	ldrb	r5, [r3, #10]
     774:	7e22      	ldrb	r2, [r4, #24]
     776:	7e63      	ldrb	r3, [r4, #25]
     778:	4013      	ands	r3, r2
     77a:	401d      	ands	r5, r3
     77c:	07eb      	lsls	r3, r5, #31
     77e:	d406      	bmi.n	78e <_tc_interrupt_handler+0x26>
     780:	07ab      	lsls	r3, r5, #30
     782:	d40b      	bmi.n	79c <_tc_interrupt_handler+0x34>
     784:	06eb      	lsls	r3, r5, #27
     786:	d410      	bmi.n	7aa <_tc_interrupt_handler+0x42>
     788:	06ab      	lsls	r3, r5, #26
     78a:	d415      	bmi.n	7b8 <_tc_interrupt_handler+0x50>
     78c:	bd70      	pop	{r4, r5, r6, pc}
     78e:	0020      	movs	r0, r4
     790:	68a3      	ldr	r3, [r4, #8]
     792:	4798      	blx	r3
     794:	2301      	movs	r3, #1
     796:	6822      	ldr	r2, [r4, #0]
     798:	7293      	strb	r3, [r2, #10]
     79a:	e7f1      	b.n	780 <_tc_interrupt_handler+0x18>
     79c:	0020      	movs	r0, r4
     79e:	68e3      	ldr	r3, [r4, #12]
     7a0:	4798      	blx	r3
     7a2:	2302      	movs	r3, #2
     7a4:	6822      	ldr	r2, [r4, #0]
     7a6:	7293      	strb	r3, [r2, #10]
     7a8:	e7ec      	b.n	784 <_tc_interrupt_handler+0x1c>
     7aa:	0020      	movs	r0, r4
     7ac:	6923      	ldr	r3, [r4, #16]
     7ae:	4798      	blx	r3
     7b0:	2310      	movs	r3, #16
     7b2:	6822      	ldr	r2, [r4, #0]
     7b4:	7293      	strb	r3, [r2, #10]
     7b6:	e7e7      	b.n	788 <_tc_interrupt_handler+0x20>
     7b8:	0020      	movs	r0, r4
     7ba:	6963      	ldr	r3, [r4, #20]
     7bc:	4798      	blx	r3
     7be:	6823      	ldr	r3, [r4, #0]
     7c0:	2220      	movs	r2, #32
     7c2:	729a      	strb	r2, [r3, #10]
     7c4:	e7e2      	b.n	78c <_tc_interrupt_handler+0x24>
     7c6:	46c0      	nop			; (mov r8, r8)
     7c8:	200026a0 	.word	0x200026a0

000007cc <TC0_Handler>:
     7cc:	b510      	push	{r4, lr}
     7ce:	2000      	movs	r0, #0
     7d0:	4b01      	ldr	r3, [pc, #4]	; (7d8 <TC0_Handler+0xc>)
     7d2:	4798      	blx	r3
     7d4:	bd10      	pop	{r4, pc}
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	00000769 	.word	0x00000769

000007dc <TC1_Handler>:
     7dc:	b510      	push	{r4, lr}
     7de:	2001      	movs	r0, #1
     7e0:	4b01      	ldr	r3, [pc, #4]	; (7e8 <TC1_Handler+0xc>)
     7e2:	4798      	blx	r3
     7e4:	bd10      	pop	{r4, pc}
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	00000769 	.word	0x00000769

000007ec <TC2_Handler>:
     7ec:	b510      	push	{r4, lr}
     7ee:	2002      	movs	r0, #2
     7f0:	4b01      	ldr	r3, [pc, #4]	; (7f8 <TC2_Handler+0xc>)
     7f2:	4798      	blx	r3
     7f4:	bd10      	pop	{r4, pc}
     7f6:	46c0      	nop			; (mov r8, r8)
     7f8:	00000769 	.word	0x00000769

000007fc <TC3_Handler>:
     7fc:	b510      	push	{r4, lr}
     7fe:	2003      	movs	r0, #3
     800:	4b01      	ldr	r3, [pc, #4]	; (808 <TC3_Handler+0xc>)
     802:	4798      	blx	r3
     804:	bd10      	pop	{r4, pc}
     806:	46c0      	nop			; (mov r8, r8)
     808:	00000769 	.word	0x00000769

0000080c <TC4_Handler>:
     80c:	b510      	push	{r4, lr}
     80e:	2004      	movs	r0, #4
     810:	4b01      	ldr	r3, [pc, #4]	; (818 <TC4_Handler+0xc>)
     812:	4798      	blx	r3
     814:	bd10      	pop	{r4, pc}
     816:	46c0      	nop			; (mov r8, r8)
     818:	00000769 	.word	0x00000769

0000081c <tsens_complete_callback>:
volatile bool tsens_read_done = false;
uint32_t TEMPOFFSETVAL = 0;

static void tsens_complete_callback(enum tsens_callback i)
{
	tsens_read_done = true;
     81c:	2201      	movs	r2, #1
     81e:	4b01      	ldr	r3, [pc, #4]	; (824 <tsens_complete_callback+0x8>)
     820:	701a      	strb	r2, [r3, #0]
}
     822:	4770      	bx	lr
     824:	20000294 	.word	0x20000294

00000828 <initTSENS>:
	tsens_enable_callback(TSENS_CALLBACK_RESULT_READY);
	//! [setup_enable_callback]
}
//! [setup]

int initTSENS(void) {
     828:	b500      	push	{lr}
     82a:	b089      	sub	sp, #36	; 0x24
	tsens_get_config_defaults(&config_tsens);
     82c:	a801      	add	r0, sp, #4
     82e:	4b10      	ldr	r3, [pc, #64]	; (870 <initTSENS+0x48>)
     830:	4798      	blx	r3
	tsens_init(&config_tsens);
     832:	a801      	add	r0, sp, #4
     834:	4b0f      	ldr	r3, [pc, #60]	; (874 <initTSENS+0x4c>)
     836:	4798      	blx	r3
 * Enables an TSENS module that has previously been configured.

 */
static inline void tsens_enable(void)
{
	TSENS->CTRLA.reg |= TSENS_CTRLA_ENABLE;
     838:	4a0f      	ldr	r2, [pc, #60]	; (878 <initTSENS+0x50>)
     83a:	7813      	ldrb	r3, [r2, #0]
     83c:	2102      	movs	r1, #2
     83e:	430b      	orrs	r3, r1
     840:	7013      	strb	r3, [r2, #0]
	if (TSENS->SYNCBUSY.reg) {
     842:	6893      	ldr	r3, [r2, #8]

	while (tsens_is_syncing()) {
     844:	2b00      	cmp	r3, #0
     846:	d1fc      	bne.n	842 <initTSENS+0x1a>
	tsens_register_callback(&tsens_instance,
     848:	2200      	movs	r2, #0
     84a:	490c      	ldr	r1, [pc, #48]	; (87c <initTSENS+0x54>)
     84c:	480c      	ldr	r0, [pc, #48]	; (880 <initTSENS+0x58>)
     84e:	4b0d      	ldr	r3, [pc, #52]	; (884 <initTSENS+0x5c>)
     850:	4798      	blx	r3
		default:
			break;
	}

	/* Enable the interrupt for the callback */
	TSENS->INTENSET.reg = inenset_temp;
     852:	2301      	movs	r3, #1
     854:	4a08      	ldr	r2, [pc, #32]	; (878 <initTSENS+0x50>)
     856:	7153      	strb	r3, [r2, #5]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     858:	2120      	movs	r1, #32
     85a:	4a0b      	ldr	r2, [pc, #44]	; (888 <initTSENS+0x60>)
     85c:	6011      	str	r1, [r2, #0]
	cpu_irq_enable();
     85e:	4a0b      	ldr	r2, [pc, #44]	; (88c <initTSENS+0x64>)
     860:	7013      	strb	r3, [r2, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     862:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     866:	b662      	cpsie	i
	configure_tsens_callbacks();
	
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_TSENS);
	system_interrupt_enable_global();
	return 0;
}
     868:	2000      	movs	r0, #0
     86a:	b009      	add	sp, #36	; 0x24
     86c:	bd00      	pop	{pc}
     86e:	46c0      	nop			; (mov r8, r8)
     870:	000009b1 	.word	0x000009b1
     874:	000008f5 	.word	0x000008f5
     878:	40003000 	.word	0x40003000
     87c:	0000081d 	.word	0x0000081d
     880:	200026b4 	.word	0x200026b4
     884:	00000a49 	.word	0x00000a49
     888:	e000e100 	.word	0xe000e100
     88c:	200000ec 	.word	0x200000ec

00000890 <set_tsens_offset>:

int set_tsens_offset(uint32_t offset) {
	TEMPOFFSETVAL = offset;
     890:	4b01      	ldr	r3, [pc, #4]	; (898 <set_tsens_offset+0x8>)
     892:	6018      	str	r0, [r3, #0]
	return 0;
}
     894:	2000      	movs	r0, #0
     896:	4770      	bx	lr
     898:	20000290 	.word	0x20000290

0000089c <get_tsens_offset>:

int get_tsens_offset(void) {
	return TEMPOFFSETVAL;
     89c:	4b01      	ldr	r3, [pc, #4]	; (8a4 <get_tsens_offset+0x8>)
     89e:	6818      	ldr	r0, [r3, #0]
}
     8a0:	4770      	bx	lr
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	20000290 	.word	0x20000290

000008a8 <tsens_get_temp>:

int tsens_get_temp(void) {
     8a8:	b510      	push	{r4, lr}
	tsens_read_job(&tsens_instance, &tsens_result);
     8aa:	490c      	ldr	r1, [pc, #48]	; (8dc <tsens_get_temp+0x34>)
     8ac:	480c      	ldr	r0, [pc, #48]	; (8e0 <tsens_get_temp+0x38>)
     8ae:	4b0d      	ldr	r3, [pc, #52]	; (8e4 <tsens_get_temp+0x3c>)
     8b0:	4798      	blx	r3

	while (tsens_read_done == false) {
     8b2:	4a0d      	ldr	r2, [pc, #52]	; (8e8 <tsens_get_temp+0x40>)
     8b4:	7813      	ldrb	r3, [r2, #0]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d0fc      	beq.n	8b4 <tsens_get_temp+0xc>
	}
	tsens_read_done = false;
     8ba:	2200      	movs	r2, #0
     8bc:	4b0a      	ldr	r3, [pc, #40]	; (8e8 <tsens_get_temp+0x40>)
     8be:	701a      	strb	r2, [r3, #0]
	tsens_read_job(&tsens_instance, &tsens_result);
     8c0:	4c06      	ldr	r4, [pc, #24]	; (8dc <tsens_get_temp+0x34>)
     8c2:	0021      	movs	r1, r4
     8c4:	4806      	ldr	r0, [pc, #24]	; (8e0 <tsens_get_temp+0x38>)
     8c6:	4b07      	ldr	r3, [pc, #28]	; (8e4 <tsens_get_temp+0x3c>)
     8c8:	4798      	blx	r3
	//printf("Value read: %i\r\n",(-(int)tsens_result)/100);

	return (-TEMPOFFSETVAL-(int)tsens_result)/100;
     8ca:	4b08      	ldr	r3, [pc, #32]	; (8ec <tsens_get_temp+0x44>)
     8cc:	6818      	ldr	r0, [r3, #0]
     8ce:	6823      	ldr	r3, [r4, #0]
     8d0:	18c0      	adds	r0, r0, r3
     8d2:	4240      	negs	r0, r0
     8d4:	2164      	movs	r1, #100	; 0x64
     8d6:	4b06      	ldr	r3, [pc, #24]	; (8f0 <tsens_get_temp+0x48>)
     8d8:	4798      	blx	r3
     8da:	bd10      	pop	{r4, pc}
     8dc:	20000298 	.word	0x20000298
     8e0:	200026b4 	.word	0x200026b4
     8e4:	00000a65 	.word	0x00000a65
     8e8:	20000294 	.word	0x20000294
     8ec:	20000290 	.word	0x20000290
     8f0:	00006b89 	.word	0x00006b89

000008f4 <tsens_init>:
 * \retval STATUS_ERR_INVALID_ARG   Invalid argument(s) were provided
 * \retval STATUS_BUSY              The module is busy with a reset operation
 * \retval STATUS_ERR_DENIED        The module is enabled
 */
enum status_code tsens_init(struct tsens_config *config)
{
     8f4:	b510      	push	{r4, lr}
     8f6:	b082      	sub	sp, #8
     8f8:	0004      	movs	r4, r0
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     8fa:	4a28      	ldr	r2, [pc, #160]	; (99c <tsens_init+0xa8>)
     8fc:	6951      	ldr	r1, [r2, #20]
     8fe:	2380      	movs	r3, #128	; 0x80
     900:	015b      	lsls	r3, r3, #5
     902:	430b      	orrs	r3, r1
     904:	6153      	str	r3, [r2, #20]
	Assert(config);

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_TSENS);

	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
     906:	4b26      	ldr	r3, [pc, #152]	; (9a0 <tsens_init+0xac>)
     908:	781b      	ldrb	r3, [r3, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     90a:	2005      	movs	r0, #5
	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
     90c:	07db      	lsls	r3, r3, #31
     90e:	d501      	bpl.n	914 <tsens_init+0x20>
		return STATUS_ERR_DENIED;
	}

	/* Write configuration to module */
	return _tsens_set_config(config);
}
     910:	b002      	add	sp, #8
     912:	bd10      	pop	{r4, pc}
	if (TSENS->CTRLA.reg & TSENS_CTRLA_ENABLE) {
     914:	4b22      	ldr	r3, [pc, #136]	; (9a0 <tsens_init+0xac>)
     916:	781b      	ldrb	r3, [r3, #0]
		return STATUS_ERR_DENIED;
     918:	3017      	adds	r0, #23
	if (TSENS->CTRLA.reg & TSENS_CTRLA_ENABLE) {
     91a:	079b      	lsls	r3, r3, #30
     91c:	d4f8      	bmi.n	910 <tsens_init+0x1c>
	gclk_chan_conf.source_generator = config->clock_source;
     91e:	a901      	add	r1, sp, #4
     920:	7823      	ldrb	r3, [r4, #0]
     922:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(TSENS_GCLK_ID, &gclk_chan_conf);
     924:	3817      	subs	r0, #23
     926:	4b1f      	ldr	r3, [pc, #124]	; (9a4 <tsens_init+0xb0>)
     928:	4798      	blx	r3
	system_gclk_chan_enable(TSENS_GCLK_ID);
     92a:	2005      	movs	r0, #5
     92c:	4b1e      	ldr	r3, [pc, #120]	; (9a8 <tsens_init+0xb4>)
     92e:	4798      	blx	r3
	TSENS->CTRLA.reg = (config->run_in_standby << TSENS_CTRLA_RUNSTDBY_Pos);
     930:	78a3      	ldrb	r3, [r4, #2]
     932:	019b      	lsls	r3, r3, #6
     934:	b2db      	uxtb	r3, r3
     936:	4a1a      	ldr	r2, [pc, #104]	; (9a0 <tsens_init+0xac>)
     938:	7013      	strb	r3, [r2, #0]
	if (config->window.window_mode != TSENS_WINDOW_MODE_DISABLE) {
     93a:	7923      	ldrb	r3, [r4, #4]
     93c:	2b00      	cmp	r3, #0
     93e:	d006      	beq.n	94e <tsens_init+0x5a>
				return STATUS_ERR_INVALID_ARG;
     940:	2017      	movs	r0, #23
		if((config->window.window_lower_value < WINDOW_MIN_VALUE) || \
     942:	68a2      	ldr	r2, [r4, #8]
     944:	3228      	adds	r2, #40	; 0x28
     946:	dbe3      	blt.n	910 <tsens_init+0x1c>
     948:	68e2      	ldr	r2, [r4, #12]
     94a:	2a69      	cmp	r2, #105	; 0x69
     94c:	dce0      	bgt.n	910 <tsens_init+0x1c>
			(config->free_running << TSENS_CTRLC_FREERUN_Pos) | \
     94e:	7862      	ldrb	r2, [r4, #1]
     950:	0112      	lsls	r2, r2, #4
     952:	431a      	orrs	r2, r3
     954:	b2d2      	uxtb	r2, r2
	TSENS->CTRLC.reg =
     956:	4b12      	ldr	r3, [pc, #72]	; (9a0 <tsens_init+0xac>)
     958:	709a      	strb	r2, [r3, #2]
	TSENS->WINLT.reg = TSENS_WINLT_WINLT(config->window.window_upper_value);
     95a:	68e2      	ldr	r2, [r4, #12]
     95c:	0212      	lsls	r2, r2, #8
     95e:	0a12      	lsrs	r2, r2, #8
     960:	611a      	str	r2, [r3, #16]
	TSENS->WINUT.reg = TSENS_WINLT_WINLT(config->window.window_lower_value);
     962:	68a2      	ldr	r2, [r4, #8]
     964:	0212      	lsls	r2, r2, #8
     966:	0a12      	lsrs	r2, r2, #8
     968:	615a      	str	r2, [r3, #20]
	TSENS->EVCTRL.reg = config->event_action;
     96a:	7c22      	ldrb	r2, [r4, #16]
     96c:	70da      	strb	r2, [r3, #3]
	TSENS->INTENCLR.reg =
     96e:	220f      	movs	r2, #15
     970:	711a      	strb	r2, [r3, #4]
	uint32_t tsens_bits = *((uint32_t *)NVMCTRL_TEMP_LOG);
     972:	4a0e      	ldr	r2, [pc, #56]	; (9ac <tsens_init+0xb8>)
     974:	6812      	ldr	r2, [r2, #0]
	uint32_t tsens_fcal = \
     976:	0511      	lsls	r1, r2, #20
     978:	0e89      	lsrs	r1, r1, #26
	TSENS->CAL.reg = TSENS_CAL_TCAL(tsens_tcal) | TSENS_CAL_FCAL(tsens_fcal);
     97a:	0212      	lsls	r2, r2, #8
     97c:	20fc      	movs	r0, #252	; 0xfc
     97e:	0180      	lsls	r0, r0, #6
     980:	4002      	ands	r2, r0
     982:	430a      	orrs	r2, r1
     984:	621a      	str	r2, [r3, #32]
	TSENS->GAIN.reg = TSENS_GAIN_GAIN(config->calibration.gain);
     986:	6962      	ldr	r2, [r4, #20]
     988:	0212      	lsls	r2, r2, #8
     98a:	0a12      	lsrs	r2, r2, #8
     98c:	619a      	str	r2, [r3, #24]
	TSENS->OFFSET.reg = TSENS_OFFSET_OFFSETC(config->calibration.offset);
     98e:	69a2      	ldr	r2, [r4, #24]
     990:	0212      	lsls	r2, r2, #8
     992:	0a12      	lsrs	r2, r2, #8
     994:	61da      	str	r2, [r3, #28]
	return STATUS_OK;
     996:	2000      	movs	r0, #0
     998:	e7ba      	b.n	910 <tsens_init+0x1c>
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	40000800 	.word	0x40000800
     9a0:	40003000 	.word	0x40003000
     9a4:	00003915 	.word	0x00003915
     9a8:	000038a5 	.word	0x000038a5
     9ac:	00806030 	.word	0x00806030

000009b0 <tsens_get_config_defaults>:
 *                     default values
 */
void tsens_get_config_defaults(struct tsens_config *const config)
{
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     9b0:	2300      	movs	r3, #0
     9b2:	7003      	strb	r3, [r0, #0]
	config->free_running                  = false;
     9b4:	7043      	strb	r3, [r0, #1]
	config->run_in_standby                = false;
     9b6:	7083      	strb	r3, [r0, #2]
	config->window.window_mode            = TSENS_WINDOW_MODE_DISABLE;
     9b8:	7103      	strb	r3, [r0, #4]
	config->window.window_upper_value     = 0;
     9ba:	60c3      	str	r3, [r0, #12]
	config->window.window_lower_value     = 0;
     9bc:	6083      	str	r3, [r0, #8]
	config->event_action                  = TSENS_EVENT_ACTION_DISABLED;
     9be:	7403      	strb	r3, [r0, #16]

	uint32_t tsens_bits[2];
	tsens_bits[0] = *((uint32_t *)NVMCTRL_TEMP_LOG);
     9c0:	4b07      	ldr	r3, [pc, #28]	; (9e0 <tsens_get_config_defaults+0x30>)
     9c2:	681a      	ldr	r2, [r3, #0]
	tsens_bits[1] = *(((uint32_t *)NVMCTRL_TEMP_LOG) + 1);
     9c4:	4b07      	ldr	r3, [pc, #28]	; (9e4 <tsens_get_config_defaults+0x34>)
     9c6:	681b      	ldr	r3, [r3, #0]
	config->calibration.offset   = \
		((tsens_bits[1] & TSENS_FUSES_OFFSET_Msk) >> TSENS_FUSES_OFFSET_Pos);
     9c8:	0119      	lsls	r1, r3, #4
     9ca:	0a09      	lsrs	r1, r1, #8
	config->calibration.offset   = \
     9cc:	6181      	str	r1, [r0, #24]
	config->calibration.gain     = \
		((tsens_bits[0] & TSENS_FUSES_GAIN_0_Msk) >> TSENS_FUSES_GAIN_0_Pos) | \
		(((tsens_bits[1] & TSENS_FUSES_GAIN_1_Msk) >> TSENS_FUSES_GAIN_1_Pos) << GAIN_1_OFFSET);
     9ce:	051b      	lsls	r3, r3, #20
     9d0:	21f0      	movs	r1, #240	; 0xf0
     9d2:	0409      	lsls	r1, r1, #16
     9d4:	400b      	ands	r3, r1
		((tsens_bits[0] & TSENS_FUSES_GAIN_0_Msk) >> TSENS_FUSES_GAIN_0_Pos) | \
     9d6:	0b12      	lsrs	r2, r2, #12
     9d8:	4313      	orrs	r3, r2
	config->calibration.gain     = \
     9da:	6143      	str	r3, [r0, #20]
}
     9dc:	4770      	bx	lr
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	00806030 	.word	0x00806030
     9e4:	00806034 	.word	0x00806034

000009e8 <TSENS_Handler>:

struct tsens_module *_tsens_instances;

/** Interrupt handler for the TSENS module. */
void TSENS_Handler(void)
{
     9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ea:	46c6      	mov	lr, r8
     9ec:	b500      	push	{lr}
	struct tsens_module *module = _tsens_instances;
     9ee:	4b14      	ldr	r3, [pc, #80]	; (a40 <TSENS_Handler+0x58>)
     9f0:	681f      	ldr	r7, [r3, #0]
	Assert(module);

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = TSENS->INTFLAG.reg;
     9f2:	4b14      	ldr	r3, [pc, #80]	; (a44 <TSENS_Handler+0x5c>)
     9f4:	799e      	ldrb	r6, [r3, #6]
     9f6:	b2f6      	uxtb	r6, r6

	/* store TSENS result in job buffer */
	uint32_t temp = TSENS->VALUE.reg;
     9f8:	68db      	ldr	r3, [r3, #12]
	if(temp & 0x00800000) {
     9fa:	021a      	lsls	r2, r3, #8
     9fc:	d502      	bpl.n	a04 <TSENS_Handler+0x1c>
		temp |= ~TSENS_VALUE_MASK;
     9fe:	22ff      	movs	r2, #255	; 0xff
     a00:	0612      	lsls	r2, r2, #24
     a02:	4313      	orrs	r3, r2
	}

#if (ERRATA_14476)
	*(module->value) = temp * (-1);
     a04:	693a      	ldr	r2, [r7, #16]
     a06:	425b      	negs	r3, r3
     a08:	6013      	str	r3, [r2, #0]
     a0a:	2400      	movs	r4, #0
	*(module->value) = temp;
#endif

	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
	{
		if (flags & ((uint32_t)0x01 << i)) {
     a0c:	2501      	movs	r5, #1
			/* Clear the INTFLAG anyway */
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     a0e:	4b0d      	ldr	r3, [pc, #52]	; (a44 <TSENS_Handler+0x5c>)
     a10:	4698      	mov	r8, r3
     a12:	e002      	b.n	a1a <TSENS_Handler+0x32>
     a14:	3401      	adds	r4, #1
	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
     a16:	2c04      	cmp	r4, #4
     a18:	d00f      	beq.n	a3a <TSENS_Handler+0x52>
     a1a:	b2e0      	uxtb	r0, r4
		if (flags & ((uint32_t)0x01 << i)) {
     a1c:	0033      	movs	r3, r6
     a1e:	40e3      	lsrs	r3, r4
     a20:	421d      	tst	r5, r3
     a22:	d0f7      	beq.n	a14 <TSENS_Handler+0x2c>
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     a24:	002b      	movs	r3, r5
     a26:	40a3      	lsls	r3, r4
     a28:	b2db      	uxtb	r3, r3
     a2a:	4642      	mov	r2, r8
     a2c:	7193      	strb	r3, [r2, #6]

			if(module->callback[i] != NULL) {
     a2e:	00a3      	lsls	r3, r4, #2
     a30:	58fb      	ldr	r3, [r7, r3]
     a32:	2b00      	cmp	r3, #0
     a34:	d0ee      	beq.n	a14 <TSENS_Handler+0x2c>
				module->callback[i]((enum tsens_callback)i);
     a36:	4798      	blx	r3
     a38:	e7ec      	b.n	a14 <TSENS_Handler+0x2c>
			}
		}
	}
}
     a3a:	bc04      	pop	{r2}
     a3c:	4690      	mov	r8, r2
     a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a40:	200026c8 	.word	0x200026c8
     a44:	40003000 	.word	0x40003000

00000a48 <tsens_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	if(callback_type > TSENS_CALLBACK_NUM) {
		return STATUS_ERR_INVALID_ARG;
     a48:	2317      	movs	r3, #23
	if(callback_type > TSENS_CALLBACK_NUM) {
     a4a:	2a04      	cmp	r2, #4
     a4c:	d901      	bls.n	a52 <tsens_register_callback+0xa>
	/* Register callback function */
	module->callback[callback_type] = callback_func;
	_tsens_instances = module;

	return STATUS_OK;
}
     a4e:	0018      	movs	r0, r3
     a50:	4770      	bx	lr
	module->callback[callback_type] = callback_func;
     a52:	0092      	lsls	r2, r2, #2
     a54:	5011      	str	r1, [r2, r0]
	_tsens_instances = module;
     a56:	4b02      	ldr	r3, [pc, #8]	; (a60 <tsens_register_callback+0x18>)
     a58:	6018      	str	r0, [r3, #0]
	return STATUS_OK;
     a5a:	2300      	movs	r3, #0
     a5c:	e7f7      	b.n	a4e <tsens_register_callback+0x6>
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	200026c8 	.word	0x200026c8

00000a64 <tsens_read_job>:
		int32_t *result)
{
	Assert(module_inst);
	Assert(result);

	module_inst->value = result;
     a64:	6101      	str	r1, [r0, #16]

	if(!(TSENS->CTRLC.reg & TSENS_CTRLC_FREERUN)) {
     a66:	4b07      	ldr	r3, [pc, #28]	; (a84 <tsens_read_job+0x20>)
     a68:	789b      	ldrb	r3, [r3, #2]
     a6a:	06db      	lsls	r3, r3, #27
     a6c:	d500      	bpl.n	a70 <tsens_read_job+0xc>
		tsens_start_conversion();
	}
}
     a6e:	4770      	bx	lr
 * Start a new TSENS conversion.
 *
 */
static inline void tsens_start_conversion(void)
{
	TSENS->CTRLB.reg |= TSENS_CTRLB_START;
     a70:	4a04      	ldr	r2, [pc, #16]	; (a84 <tsens_read_job+0x20>)
     a72:	7853      	ldrb	r3, [r2, #1]
     a74:	2101      	movs	r1, #1
     a76:	430b      	orrs	r3, r1
     a78:	7053      	strb	r3, [r2, #1]
	if (TSENS->SYNCBUSY.reg) {
     a7a:	6893      	ldr	r3, [r2, #8]

	while (tsens_is_syncing()) {
     a7c:	2b00      	cmp	r3, #0
     a7e:	d1fc      	bne.n	a7a <tsens_read_job+0x16>
     a80:	e7f5      	b.n	a6e <tsens_read_job+0xa>
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	40003000 	.word	0x40003000

00000a88 <CAN_Rx>:
struct multiBuffer CAN1_rx_element_buff[NETWORK_MAX_BUFFS];
#endif

//struct multiBuffer rx_element_buff[CONF_CAN0_RX_BUFFER_NUM];

uint8_t * CAN_Rx(uint16_t idVal, int bufferNum, struct can_module * can_inst) {
     a88:	b510      	push	{r4, lr}
     a8a:	b082      	sub	sp, #8
     a8c:	0014      	movs	r4, r2
 * \param[out] sd_filter  Pointer to standard filter element struct to initialize to default values
 */
static inline void can_get_standard_message_filter_element_default(
		struct can_standard_message_filter_element *sd_filter)
{
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
     a8e:	4b11      	ldr	r3, [pc, #68]	; (ad4 <CAN_Rx+0x4c>)
     a90:	9301      	str	r3, [sp, #4]
	struct can_standard_message_filter_element sd_filter;
	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID1 = idVal;
     a92:	9b01      	ldr	r3, [sp, #4]
     a94:	0540      	lsls	r0, r0, #21
     a96:	0942      	lsrs	r2, r0, #5
     a98:	480f      	ldr	r0, [pc, #60]	; (ad8 <CAN_Rx+0x50>)
     a9a:	4018      	ands	r0, r3
     a9c:	4310      	orrs	r0, r2
     a9e:	9001      	str	r0, [sp, #4]
	sd_filter.S0.bit.SFID2 = bufferNum;
     aa0:	9b01      	ldr	r3, [sp, #4]
     aa2:	054a      	lsls	r2, r1, #21
     aa4:	0d52      	lsrs	r2, r2, #21
     aa6:	0adb      	lsrs	r3, r3, #11
     aa8:	02db      	lsls	r3, r3, #11
     aaa:	4313      	orrs	r3, r2
     aac:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFEC = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
     aae:	9a01      	ldr	r2, [sp, #4]
     ab0:	23e0      	movs	r3, #224	; 0xe0
     ab2:	059b      	lsls	r3, r3, #22
     ab4:	4313      	orrs	r3, r2
     ab6:	9301      	str	r3, [sp, #4]
	can_set_rx_standard_filter(can_inst, &sd_filter,
     ab8:	000a      	movs	r2, r1
     aba:	a901      	add	r1, sp, #4
     abc:	0020      	movs	r0, r4
     abe:	4b07      	ldr	r3, [pc, #28]	; (adc <CAN_Rx+0x54>)
     ac0:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     ac2:	6822      	ldr	r2, [r4, #0]
     ac4:	6d51      	ldr	r1, [r2, #84]	; 0x54
     ac6:	2380      	movs	r3, #128	; 0x80
     ac8:	031b      	lsls	r3, r3, #12
     aca:	430b      	orrs	r3, r1
     acc:	6553      	str	r3, [r2, #84]	; 0x54
		bufferNum);
	can_enable_interrupt(can_inst, CAN_RX_BUFFER_NEW_MESSAGE);
	return NULL;//rx_element_buff[bufferNum].buffers[rx_element_buff[bufferNum].last_read].data;
}
     ace:	2000      	movs	r0, #0
     ad0:	b002      	add	sp, #8
     ad2:	bd10      	pop	{r4, pc}
     ad4:	880007ff 	.word	0x880007ff
     ad8:	f800ffff 	.word	0xf800ffff
     adc:	0000283d 	.word	0x0000283d

00000ae0 <num_to_CAN>:
	return 0;
}

int num_to_CAN(int num) {
	if (num <= 8) {
		return 12;
     ae0:	230c      	movs	r3, #12
	if (num <= 8) {
     ae2:	2808      	cmp	r0, #8
     ae4:	dc01      	bgt.n	aea <num_to_CAN+0xa>
		return ((num+7)>>2)+5;
	}
	else {
		return ((num+15)>>4)+11;
	}
}
     ae6:	0018      	movs	r0, r3
     ae8:	4770      	bx	lr
	else if (num <= 24) {
     aea:	2818      	cmp	r0, #24
     aec:	dd04      	ble.n	af8 <num_to_CAN+0x18>
		return ((num+15)>>4)+11;
     aee:	300f      	adds	r0, #15
     af0:	1100      	asrs	r0, r0, #4
     af2:	0003      	movs	r3, r0
     af4:	330b      	adds	r3, #11
     af6:	e7f6      	b.n	ae6 <num_to_CAN+0x6>
		return ((num+7)>>2)+5;
     af8:	3007      	adds	r0, #7
     afa:	1080      	asrs	r0, r0, #2
     afc:	1d43      	adds	r3, r0, #5
     afe:	e7f2      	b.n	ae6 <num_to_CAN+0x6>

00000b00 <CAN_Tx_Raw>:

const char map[16] = {-1,1,2,3,4,5,6,7,8,12,16,20,24,32,48,64};

int CAN_Tx_Raw(uint16_t idVal, struct can_tx_element * tx_element, uint32_t dataLen, int buffer, struct can_module * can_inst) {
     b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b02:	000c      	movs	r4, r1
     b04:	0016      	movs	r6, r2
     b06:	001d      	movs	r5, r3
	tx_element->T0.reg = 0;
     b08:	2300      	movs	r3, #0
     b0a:	600b      	str	r3, [r1, #0]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
     b0c:	2388      	movs	r3, #136	; 0x88
     b0e:	041b      	lsls	r3, r3, #16
     b10:	604b      	str	r3, [r1, #4]
	can_get_tx_buffer_element_defaults(tx_element);
	tx_element->T0.reg = CAN_TX_ELEMENT_T0_STANDARD_ID(idVal);
     b12:	0480      	lsls	r0, r0, #18
     b14:	4b29      	ldr	r3, [pc, #164]	; (bbc <CAN_Tx_Raw+0xbc>)
     b16:	4018      	ands	r0, r3
     b18:	6008      	str	r0, [r1, #0]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_FDF | CAN_TX_ELEMENT_T1_BRS;
     b1a:	23c0      	movs	r3, #192	; 0xc0
     b1c:	039b      	lsls	r3, r3, #14
     b1e:	604b      	str	r3, [r1, #4]
	switch(map[num_to_CAN(dataLen)]) {
     b20:	0010      	movs	r0, r2
     b22:	4b27      	ldr	r3, [pc, #156]	; (bc0 <CAN_Tx_Raw+0xc0>)
     b24:	4798      	blx	r3
     b26:	4b27      	ldr	r3, [pc, #156]	; (bc4 <CAN_Tx_Raw+0xc4>)
     b28:	5c1f      	ldrb	r7, [r3, r0]
     b2a:	003b      	movs	r3, r7
     b2c:	3b0c      	subs	r3, #12
     b2e:	b2da      	uxtb	r2, r3
     b30:	2a34      	cmp	r2, #52	; 0x34
     b32:	d83c      	bhi.n	bae <CAN_Tx_Raw+0xae>
     b34:	0093      	lsls	r3, r2, #2
     b36:	4a24      	ldr	r2, [pc, #144]	; (bc8 <CAN_Tx_Raw+0xc8>)
     b38:	58d3      	ldr	r3, [r2, r3]
     b3a:	469f      	mov	pc, r3
		case 12:
			tx_element->T1.reg |= CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA12_Val);
     b3c:	6862      	ldr	r2, [r4, #4]
     b3e:	2390      	movs	r3, #144	; 0x90
     b40:	031b      	lsls	r3, r3, #12
     b42:	4313      	orrs	r3, r2
     b44:	6063      	str	r3, [r4, #4]
			break;
		default:
			printf("An unexpected value was encountered in CAN_Tx_Raw, %d %d.\r\n",dataLen,map[num_to_CAN(dataLen)]);
			return 3;
	}
	can_set_tx_buffer_element(can_inst, tx_element,
     b46:	002a      	movs	r2, r5
     b48:	0021      	movs	r1, r4
     b4a:	9806      	ldr	r0, [sp, #24]
     b4c:	4b1f      	ldr	r3, [pc, #124]	; (bcc <CAN_Tx_Raw+0xcc>)
     b4e:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
     b50:	9b06      	ldr	r3, [sp, #24]
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	699a      	ldr	r2, [r3, #24]
     b56:	0792      	lsls	r2, r2, #30
     b58:	d403      	bmi.n	b62 <CAN_Tx_Raw+0x62>
		buffer);
	can_tx_transfer_request(can_inst, 1 << buffer);
     b5a:	2201      	movs	r2, #1
     b5c:	40aa      	lsls	r2, r5
	module_inst->hw->TXBAR.reg = trig_mask;
     b5e:	21d0      	movs	r1, #208	; 0xd0
     b60:	505a      	str	r2, [r3, r1]
	//can_enable_interrupt(can_inst, CAN_TX_EVENT_FIFO_NEW_ENTRY);
	return map[num_to_CAN(dataLen)];
}
     b62:	0038      	movs	r0, r7
     b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			tx_element->T1.reg |= CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA16_Val);
     b66:	6862      	ldr	r2, [r4, #4]
     b68:	23a0      	movs	r3, #160	; 0xa0
     b6a:	031b      	lsls	r3, r3, #12
     b6c:	4313      	orrs	r3, r2
     b6e:	6063      	str	r3, [r4, #4]
			break;
     b70:	e7e9      	b.n	b46 <CAN_Tx_Raw+0x46>
			tx_element->T1.reg |= CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA20_Val);
     b72:	6862      	ldr	r2, [r4, #4]
     b74:	23b0      	movs	r3, #176	; 0xb0
     b76:	031b      	lsls	r3, r3, #12
     b78:	4313      	orrs	r3, r2
     b7a:	6063      	str	r3, [r4, #4]
			break;
     b7c:	e7e3      	b.n	b46 <CAN_Tx_Raw+0x46>
			tx_element->T1.reg |= CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA24_Val);
     b7e:	6862      	ldr	r2, [r4, #4]
     b80:	23c0      	movs	r3, #192	; 0xc0
     b82:	031b      	lsls	r3, r3, #12
     b84:	4313      	orrs	r3, r2
     b86:	6063      	str	r3, [r4, #4]
			break;
     b88:	e7dd      	b.n	b46 <CAN_Tx_Raw+0x46>
			tx_element->T1.reg |= CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA32_Val);
     b8a:	6862      	ldr	r2, [r4, #4]
     b8c:	23d0      	movs	r3, #208	; 0xd0
     b8e:	031b      	lsls	r3, r3, #12
     b90:	4313      	orrs	r3, r2
     b92:	6063      	str	r3, [r4, #4]
			break;
     b94:	e7d7      	b.n	b46 <CAN_Tx_Raw+0x46>
			tx_element->T1.reg |= CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA48_Val);
     b96:	6862      	ldr	r2, [r4, #4]
     b98:	23e0      	movs	r3, #224	; 0xe0
     b9a:	031b      	lsls	r3, r3, #12
     b9c:	4313      	orrs	r3, r2
     b9e:	6063      	str	r3, [r4, #4]
			break;
     ba0:	e7d1      	b.n	b46 <CAN_Tx_Raw+0x46>
			tx_element->T1.reg |= CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA64_Val);
     ba2:	6862      	ldr	r2, [r4, #4]
     ba4:	23f0      	movs	r3, #240	; 0xf0
     ba6:	031b      	lsls	r3, r3, #12
     ba8:	4313      	orrs	r3, r2
     baa:	6063      	str	r3, [r4, #4]
			break;
     bac:	e7cb      	b.n	b46 <CAN_Tx_Raw+0x46>
			printf("An unexpected value was encountered in CAN_Tx_Raw, %d %d.\r\n",dataLen,map[num_to_CAN(dataLen)]);
     bae:	003a      	movs	r2, r7
     bb0:	0031      	movs	r1, r6
     bb2:	4807      	ldr	r0, [pc, #28]	; (bd0 <CAN_Tx_Raw+0xd0>)
     bb4:	4b07      	ldr	r3, [pc, #28]	; (bd4 <CAN_Tx_Raw+0xd4>)
     bb6:	4798      	blx	r3
			return 3;
     bb8:	2703      	movs	r7, #3
     bba:	e7d2      	b.n	b62 <CAN_Tx_Raw+0x62>
     bbc:	1ffc0000 	.word	0x1ffc0000
     bc0:	00000ae1 	.word	0x00000ae1
     bc4:	00008398 	.word	0x00008398
     bc8:	000081e0 	.word	0x000081e0
     bcc:	000028d1 	.word	0x000028d1
     bd0:	0000835c 	.word	0x0000835c
     bd4:	00007105 	.word	0x00007105

00000bd8 <CAN_Tx>:

int CAN_Tx(uint16_t idVal, uint8_t *data, uint32_t dataLen, int buffer, struct can_module * can_inst) {
     bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bda:	b095      	sub	sp, #84	; 0x54
     bdc:	0005      	movs	r5, r0
     bde:	000f      	movs	r7, r1
     be0:	0014      	movs	r4, r2
     be2:	001e      	movs	r6, r3
	struct can_tx_element tx_element;
	/*if (dataLen > 56 || dataLen < 8 || dataLen % 8 != 0) {
		printf("WARNING: CAN_Tx received value of %d",dataLen);
	}*/
	
	memset(tx_element.data,0,64);
     be4:	2240      	movs	r2, #64	; 0x40
     be6:	2100      	movs	r1, #0
     be8:	a804      	add	r0, sp, #16
     bea:	4b08      	ldr	r3, [pc, #32]	; (c0c <CAN_Tx+0x34>)
     bec:	4798      	blx	r3
	memcpy(tx_element.data,data,dataLen);
     bee:	0022      	movs	r2, r4
     bf0:	0039      	movs	r1, r7
     bf2:	a804      	add	r0, sp, #16
     bf4:	4b06      	ldr	r3, [pc, #24]	; (c10 <CAN_Tx+0x38>)
     bf6:	4798      	blx	r3
	return CAN_Tx_Raw(idVal,&tx_element,dataLen,buffer,can_inst);
     bf8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     bfa:	9300      	str	r3, [sp, #0]
     bfc:	0033      	movs	r3, r6
     bfe:	0022      	movs	r2, r4
     c00:	a902      	add	r1, sp, #8
     c02:	0028      	movs	r0, r5
     c04:	4c03      	ldr	r4, [pc, #12]	; (c14 <CAN_Tx+0x3c>)
     c06:	47a0      	blx	r4
	can_set_tx_buffer_element(can_inst, &tx_element,
	buffer);
	can_tx_transfer_request(can_inst, 1 << buffer);
	while(!(can_tx_get_transmission_status(can_inst) & (1 << buffer)));
	can_enable_interrupt(can_inst, CAN_TX_EVENT_FIFO_NEW_ENTRY);*/
}
     c08:	b015      	add	sp, #84	; 0x54
     c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c0c:	00006fa5 	.word	0x00006fa5
     c10:	00006f6f 	.word	0x00006f6f
     c14:	00000b01 	.word	0x00000b01

00000c18 <network_start_listening>:

int network_start_listening(struct network* network, struct network_addr* selfAddr) {
     c18:	b510      	push	{r4, lr}
	// This is trying to setup the broadcast listen.
	if(selfAddr->CAN_addr == BROADCAST_ID) {
     c1a:	880b      	ldrh	r3, [r1, #0]
     c1c:	4a08      	ldr	r2, [pc, #32]	; (c40 <network_start_listening+0x28>)
     c1e:	4293      	cmp	r3, r2
     c20:	d006      	beq.n	c30 <network_start_listening+0x18>
		CAN_Rx(selfAddr->CAN_addr,network->broadcast_buff_num, network->can_instance);
		return 1;
	}
	// This is trying to setup a different listen.
	CAN_Rx(selfAddr->CAN_addr,network->buff_num, network->can_instance);
     c22:	6802      	ldr	r2, [r0, #0]
     c24:	6881      	ldr	r1, [r0, #8]
     c26:	0018      	movs	r0, r3
     c28:	4b06      	ldr	r3, [pc, #24]	; (c44 <network_start_listening+0x2c>)
     c2a:	4798      	blx	r3
	return 0;
     c2c:	2000      	movs	r0, #0
}
     c2e:	bd10      	pop	{r4, pc}
		CAN_Rx(selfAddr->CAN_addr,network->broadcast_buff_num, network->can_instance);
     c30:	6802      	ldr	r2, [r0, #0]
     c32:	68c1      	ldr	r1, [r0, #12]
     c34:	4802      	ldr	r0, [pc, #8]	; (c40 <network_start_listening+0x28>)
     c36:	4b03      	ldr	r3, [pc, #12]	; (c44 <network_start_listening+0x2c>)
     c38:	4798      	blx	r3
		return 1;
     c3a:	2001      	movs	r0, #1
     c3c:	e7f7      	b.n	c2e <network_start_listening+0x16>
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	0000ffff 	.word	0x0000ffff
     c44:	00000a89 	.word	0x00000a89

00000c48 <network_send>:

// Tx only uses one Buff per network
// Rx receives on multiple buffers based on broadcast or not (is set up on its own)
void network_send(struct network* network, struct network_addr* addr, uint8_t* data, size_t len) {
     c48:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4a:	46de      	mov	lr, fp
     c4c:	4657      	mov	r7, sl
     c4e:	464e      	mov	r6, r9
     c50:	b5c0      	push	{r6, r7, lr}
     c52:	b084      	sub	sp, #16
     c54:	0006      	movs	r6, r0
     c56:	468a      	mov	sl, r1
     c58:	0014      	movs	r4, r2
     c5a:	9203      	str	r2, [sp, #12]
     c5c:	4699      	mov	r9, r3
	struct can_module * can_instance = network->can_instance;
     c5e:	6803      	ldr	r3, [r0, #0]
     c60:	469b      	mov	fp, r3
	debug_print("Network send - Message: \n");
     c62:	4b1a      	ldr	r3, [pc, #104]	; (ccc <network_send+0x84>)
     c64:	6819      	ldr	r1, [r3, #0]
     c66:	481a      	ldr	r0, [pc, #104]	; (cd0 <network_send+0x88>)
     c68:	4b1a      	ldr	r3, [pc, #104]	; (cd4 <network_send+0x8c>)
     c6a:	4798      	blx	r3
	for (int sex = 0; sex < len; sex++) {
     c6c:	464b      	mov	r3, r9
     c6e:	2b00      	cmp	r3, #0
     c70:	d009      	beq.n	c86 <network_send+0x3e>
     c72:	0023      	movs	r3, r4
     c74:	444b      	add	r3, r9
     c76:	001f      	movs	r7, r3
		printf("%x ",data[sex]);
     c78:	4d16      	ldr	r5, [pc, #88]	; (cd4 <network_send+0x8c>)
     c7a:	7821      	ldrb	r1, [r4, #0]
     c7c:	4816      	ldr	r0, [pc, #88]	; (cd8 <network_send+0x90>)
     c7e:	47a8      	blx	r5
     c80:	3401      	adds	r4, #1
	for (int sex = 0; sex < len; sex++) {
     c82:	42bc      	cmp	r4, r7
     c84:	d1f9      	bne.n	c7a <network_send+0x32>
	}
	printf("\r\n");
     c86:	4815      	ldr	r0, [pc, #84]	; (cdc <network_send+0x94>)
     c88:	4b15      	ldr	r3, [pc, #84]	; (ce0 <network_send+0x98>)
     c8a:	4798      	blx	r3
	CAN_Tx(addr->CAN_addr,data,len,network->buff_num,can_instance);
     c8c:	4653      	mov	r3, sl
     c8e:	8818      	ldrh	r0, [r3, #0]
     c90:	465b      	mov	r3, fp
     c92:	9300      	str	r3, [sp, #0]
     c94:	68b3      	ldr	r3, [r6, #8]
     c96:	464a      	mov	r2, r9
     c98:	9903      	ldr	r1, [sp, #12]
     c9a:	4c12      	ldr	r4, [pc, #72]	; (ce4 <network_send+0x9c>)
     c9c:	47a0      	blx	r4
	return module_inst->hw->TXBTO.reg;
     c9e:	465b      	mov	r3, fp
     ca0:	6818      	ldr	r0, [r3, #0]
}

////////////////////////////////////////////////////////////////////////
inline static void CAN_Tx_Wait(int buffer, struct can_module * can_inst) {
	while(!(can_tx_get_transmission_status(can_inst) & (1 << buffer)));
     ca2:	68b3      	ldr	r3, [r6, #8]
     ca4:	2201      	movs	r2, #1
     ca6:	409a      	lsls	r2, r3
     ca8:	21d8      	movs	r1, #216	; 0xd8
     caa:	5843      	ldr	r3, [r0, r1]
     cac:	421a      	tst	r2, r3
     cae:	d0fc      	beq.n	caa <network_send+0x62>
	CAN_Tx_Wait(network->buff_num,can_instance);
	debug_print("Successfully Sent Data to ID %d.\n", addr->CAN_addr);
     cb0:	4653      	mov	r3, sl
     cb2:	881a      	ldrh	r2, [r3, #0]
     cb4:	4b05      	ldr	r3, [pc, #20]	; (ccc <network_send+0x84>)
     cb6:	6819      	ldr	r1, [r3, #0]
     cb8:	480b      	ldr	r0, [pc, #44]	; (ce8 <network_send+0xa0>)
     cba:	4b06      	ldr	r3, [pc, #24]	; (cd4 <network_send+0x8c>)
     cbc:	4798      	blx	r3
}
     cbe:	b004      	add	sp, #16
     cc0:	bc1c      	pop	{r2, r3, r4}
     cc2:	4691      	mov	r9, r2
     cc4:	469a      	mov	sl, r3
     cc6:	46a3      	mov	fp, r4
     cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	20002ba8 	.word	0x20002ba8
     cd0:	0000846c 	.word	0x0000846c
     cd4:	00007105 	.word	0x00007105
     cd8:	000081b8 	.word	0x000081b8
     cdc:	000081dc 	.word	0x000081dc
     ce0:	000071f9 	.word	0x000071f9
     ce4:	00000bd9 	.word	0x00000bd9
     ce8:	0000848c 	.word	0x0000848c

00000cec <network_check_any>:

int network_check_any(struct network* network, struct network_addr* source, uint8_t* buff, size_t len) {
     cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cee:	0006      	movs	r6, r0
     cf0:	0017      	movs	r7, r2
     cf2:	001c      	movs	r4, r3
	(void)source;
	//struct node_msg_generic structBuf;
	unsigned long mlen;
	
	
	if (network->rx_element_buff[network->buff_num].last_read != network->rx_element_buff[network->buff_num].last_write) {
     cf4:	6842      	ldr	r2, [r0, #4]
     cf6:	2391      	movs	r3, #145	; 0x91
     cf8:	009b      	lsls	r3, r3, #2
     cfa:	6881      	ldr	r1, [r0, #8]
     cfc:	434b      	muls	r3, r1
     cfe:	18d3      	adds	r3, r2, r3
     d00:	7859      	ldrb	r1, [r3, #1]
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	4299      	cmp	r1, r3
     d06:	d100      	bne.n	d0a <network_check_any+0x1e>
     d08:	e097      	b.n	e3a <network_check_any+0x14e>
		debug_print("Received regular data.\n");
     d0a:	4b9f      	ldr	r3, [pc, #636]	; (f88 <network_check_any+0x29c>)
     d0c:	6819      	ldr	r1, [r3, #0]
     d0e:	489f      	ldr	r0, [pc, #636]	; (f8c <network_check_any+0x2a0>)
     d10:	4b9f      	ldr	r3, [pc, #636]	; (f90 <network_check_any+0x2a4>)
     d12:	4798      	blx	r3
		struct can_rx_element_buffer * message = getNextBufferElement(&(network->rx_element_buff[network->buff_num]));
     d14:	2191      	movs	r1, #145	; 0x91
     d16:	0089      	lsls	r1, r1, #2
     d18:	68b3      	ldr	r3, [r6, #8]
     d1a:	4359      	muls	r1, r3
     d1c:	6876      	ldr	r6, [r6, #4]
     d1e:	1876      	adds	r6, r6, r1
		return 0;
	}
}

inline struct can_rx_element_buffer * getNextBufferElement(struct multiBuffer * buff) {
	if (buff->last_write == buff->last_read) return NULL;
     d20:	7873      	ldrb	r3, [r6, #1]
     d22:	7832      	ldrb	r2, [r6, #0]
     d24:	429a      	cmp	r2, r3
     d26:	d015      	beq.n	d54 <network_check_any+0x68>
	register int last_element = buff->last_read;
	
	buff->last_read = (buff->last_read + 1) % NETWORK_MAX_BUFFER_ELEMENTS;
     d28:	1c59      	adds	r1, r3, #1
     d2a:	2207      	movs	r2, #7
     d2c:	400a      	ands	r2, r1
     d2e:	7072      	strb	r2, [r6, #1]
	
	return &(buff->buffers[last_element]);
     d30:	00d9      	lsls	r1, r3, #3
     d32:	18c9      	adds	r1, r1, r3
     d34:	00c9      	lsls	r1, r1, #3
     d36:	3104      	adds	r1, #4
     d38:	1876      	adds	r6, r6, r1
		uint8_t dataLen = ((DLC_to_Val(message->R1.bit.DLC) < len) ? DLC_to_Val(message->R1.bit.DLC) : len);
     d3a:	6873      	ldr	r3, [r6, #4]
     d3c:	031b      	lsls	r3, r3, #12
     d3e:	0f1b      	lsrs	r3, r3, #28
	switch(input) {
     d40:	3307      	adds	r3, #7
     d42:	220f      	movs	r2, #15
     d44:	4013      	ands	r3, r2
     d46:	b2da      	uxtb	r2, r3
     d48:	2a06      	cmp	r2, #6
     d4a:	d811      	bhi.n	d70 <network_check_any+0x84>
     d4c:	009b      	lsls	r3, r3, #2
     d4e:	4a91      	ldr	r2, [pc, #580]	; (f94 <network_check_any+0x2a8>)
     d50:	58d3      	ldr	r3, [r2, r3]
     d52:	469f      	mov	pc, r3
	if (buff->last_write == buff->last_read) return NULL;
     d54:	2600      	movs	r6, #0
     d56:	e7f0      	b.n	d3a <network_check_any+0x4e>
		return 16;
     d58:	2310      	movs	r3, #16
     d5a:	e00f      	b.n	d7c <network_check_any+0x90>
		return 20;
     d5c:	2314      	movs	r3, #20
     d5e:	e00d      	b.n	d7c <network_check_any+0x90>
		return 24;
     d60:	2318      	movs	r3, #24
     d62:	e00b      	b.n	d7c <network_check_any+0x90>
		return 32;
     d64:	2320      	movs	r3, #32
     d66:	e009      	b.n	d7c <network_check_any+0x90>
		return 48;
     d68:	2330      	movs	r3, #48	; 0x30
     d6a:	e007      	b.n	d7c <network_check_any+0x90>
		return 64;
     d6c:	2340      	movs	r3, #64	; 0x40
     d6e:	e005      	b.n	d7c <network_check_any+0x90>
		printf("What did you just give me.\r\n");
     d70:	4889      	ldr	r0, [pc, #548]	; (f98 <network_check_any+0x2ac>)
     d72:	4b8a      	ldr	r3, [pc, #552]	; (f9c <network_check_any+0x2b0>)
     d74:	4798      	blx	r3
		return 0;
     d76:	2300      	movs	r3, #0
     d78:	e000      	b.n	d7c <network_check_any+0x90>
		return 12;
     d7a:	230c      	movs	r3, #12
     d7c:	42a3      	cmp	r3, r4
     d7e:	d22c      	bcs.n	dda <network_check_any+0xee>
     d80:	6873      	ldr	r3, [r6, #4]
     d82:	031b      	lsls	r3, r3, #12
     d84:	0f1b      	lsrs	r3, r3, #28
	switch(input) {
     d86:	3307      	adds	r3, #7
     d88:	220f      	movs	r2, #15
     d8a:	4013      	ands	r3, r2
     d8c:	b2da      	uxtb	r2, r3
     d8e:	2a06      	cmp	r2, #6
     d90:	d80f      	bhi.n	db2 <network_check_any+0xc6>
     d92:	009b      	lsls	r3, r3, #2
     d94:	4a82      	ldr	r2, [pc, #520]	; (fa0 <network_check_any+0x2b4>)
     d96:	58d3      	ldr	r3, [r2, r3]
     d98:	469f      	mov	pc, r3
		return 16;
     d9a:	2510      	movs	r5, #16
     d9c:	e00f      	b.n	dbe <network_check_any+0xd2>
		return 20;
     d9e:	2514      	movs	r5, #20
     da0:	e00d      	b.n	dbe <network_check_any+0xd2>
		return 24;
     da2:	2518      	movs	r5, #24
     da4:	e00b      	b.n	dbe <network_check_any+0xd2>
		return 32;
     da6:	2520      	movs	r5, #32
     da8:	e009      	b.n	dbe <network_check_any+0xd2>
		return 48;
     daa:	2530      	movs	r5, #48	; 0x30
     dac:	e007      	b.n	dbe <network_check_any+0xd2>
		return 64;
     dae:	2540      	movs	r5, #64	; 0x40
     db0:	e005      	b.n	dbe <network_check_any+0xd2>
		printf("What did you just give me.\r\n");
     db2:	4879      	ldr	r0, [pc, #484]	; (f98 <network_check_any+0x2ac>)
     db4:	4b79      	ldr	r3, [pc, #484]	; (f9c <network_check_any+0x2b0>)
     db6:	4798      	blx	r3
		return 0;
     db8:	2500      	movs	r5, #0
     dba:	e000      	b.n	dbe <network_check_any+0xd2>
		return 12;
     dbc:	250c      	movs	r5, #12
     dbe:	b2ed      	uxtb	r5, r5
		
		printf("DEBUG: DLC to Val: %d\r\n",DLC_to_Val(message->R1.bit.DLC));
     dc0:	6873      	ldr	r3, [r6, #4]
     dc2:	031b      	lsls	r3, r3, #12
     dc4:	0f1b      	lsrs	r3, r3, #28
	switch(input) {
     dc6:	3307      	adds	r3, #7
     dc8:	220f      	movs	r2, #15
     dca:	4013      	ands	r3, r2
     dcc:	b2da      	uxtb	r2, r3
     dce:	2a06      	cmp	r2, #6
     dd0:	d811      	bhi.n	df6 <network_check_any+0x10a>
     dd2:	009b      	lsls	r3, r3, #2
     dd4:	4a73      	ldr	r2, [pc, #460]	; (fa4 <network_check_any+0x2b8>)
     dd6:	58d3      	ldr	r3, [r2, r3]
     dd8:	469f      	mov	pc, r3
		uint8_t dataLen = ((DLC_to_Val(message->R1.bit.DLC) < len) ? DLC_to_Val(message->R1.bit.DLC) : len);
     dda:	b2e5      	uxtb	r5, r4
     ddc:	e7f0      	b.n	dc0 <network_check_any+0xd4>
		return 16;
     dde:	2110      	movs	r1, #16
     de0:	e00f      	b.n	e02 <network_check_any+0x116>
		return 20;
     de2:	2114      	movs	r1, #20
     de4:	e00d      	b.n	e02 <network_check_any+0x116>
		return 24;
     de6:	2118      	movs	r1, #24
     de8:	e00b      	b.n	e02 <network_check_any+0x116>
		return 32;
     dea:	2120      	movs	r1, #32
     dec:	e009      	b.n	e02 <network_check_any+0x116>
		return 48;
     dee:	2130      	movs	r1, #48	; 0x30
     df0:	e007      	b.n	e02 <network_check_any+0x116>
		return 64;
     df2:	2140      	movs	r1, #64	; 0x40
     df4:	e005      	b.n	e02 <network_check_any+0x116>
		printf("What did you just give me.\r\n");
     df6:	4868      	ldr	r0, [pc, #416]	; (f98 <network_check_any+0x2ac>)
     df8:	4b68      	ldr	r3, [pc, #416]	; (f9c <network_check_any+0x2b0>)
     dfa:	4798      	blx	r3
		return 0;
     dfc:	2100      	movs	r1, #0
     dfe:	e000      	b.n	e02 <network_check_any+0x116>
		return 12;
     e00:	210c      	movs	r1, #12
		printf("DEBUG: DLC to Val: %d\r\n",DLC_to_Val(message->R1.bit.DLC));
     e02:	4869      	ldr	r0, [pc, #420]	; (fa8 <network_check_any+0x2bc>)
     e04:	4c62      	ldr	r4, [pc, #392]	; (f90 <network_check_any+0x2a4>)
     e06:	47a0      	blx	r4
		memcpy(buff,message->data,dataLen);
     e08:	0031      	movs	r1, r6
     e0a:	3108      	adds	r1, #8
     e0c:	002a      	movs	r2, r5
     e0e:	0038      	movs	r0, r7
     e10:	4b66      	ldr	r3, [pc, #408]	; (fac <network_check_any+0x2c0>)
     e12:	4798      	blx	r3
		debug_print("Network Receive - Message: \n");
     e14:	4b5c      	ldr	r3, [pc, #368]	; (f88 <network_check_any+0x29c>)
     e16:	6819      	ldr	r1, [r3, #0]
     e18:	4865      	ldr	r0, [pc, #404]	; (fb0 <network_check_any+0x2c4>)
     e1a:	47a0      	blx	r4
		for (int sex = 0; sex < dataLen; sex++) {
     e1c:	2d00      	cmp	r5, #0
     e1e:	dd07      	ble.n	e30 <network_check_any+0x144>
     e20:	2400      	movs	r4, #0
			printf("%x ",buff[sex]);
     e22:	4e5b      	ldr	r6, [pc, #364]	; (f90 <network_check_any+0x2a4>)
     e24:	5d39      	ldrb	r1, [r7, r4]
     e26:	4863      	ldr	r0, [pc, #396]	; (fb4 <network_check_any+0x2c8>)
     e28:	47b0      	blx	r6
		for (int sex = 0; sex < dataLen; sex++) {
     e2a:	3401      	adds	r4, #1
     e2c:	42ac      	cmp	r4, r5
     e2e:	dbf9      	blt.n	e24 <network_check_any+0x138>
		}
		printf("\r\n");
     e30:	4861      	ldr	r0, [pc, #388]	; (fb8 <network_check_any+0x2cc>)
     e32:	4b5a      	ldr	r3, [pc, #360]	; (f9c <network_check_any+0x2b0>)
     e34:	4798      	blx	r3
		return dataLen;
	}
	else {
		return 0;
	}
     e36:	0028      	movs	r0, r5
     e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (network->broadcast_buff_num != (uint16_t)-1U && network->rx_element_buff[network->broadcast_buff_num].last_read != network->rx_element_buff[network->broadcast_buff_num].last_write) {
     e3a:	68c1      	ldr	r1, [r0, #12]
     e3c:	4b5f      	ldr	r3, [pc, #380]	; (fbc <network_check_any+0x2d0>)
     e3e:	4299      	cmp	r1, r3
     e40:	d100      	bne.n	e44 <network_check_any+0x158>
     e42:	e09f      	b.n	f84 <network_check_any+0x298>
     e44:	2391      	movs	r3, #145	; 0x91
     e46:	009b      	lsls	r3, r3, #2
     e48:	434b      	muls	r3, r1
     e4a:	18d2      	adds	r2, r2, r3
     e4c:	7851      	ldrb	r1, [r2, #1]
     e4e:	7813      	ldrb	r3, [r2, #0]
		return 0;
     e50:	2500      	movs	r5, #0
	else if (network->broadcast_buff_num != (uint16_t)-1U && network->rx_element_buff[network->broadcast_buff_num].last_read != network->rx_element_buff[network->broadcast_buff_num].last_write) {
     e52:	4299      	cmp	r1, r3
     e54:	d0ef      	beq.n	e36 <network_check_any+0x14a>
		debug_print("Received broadcast data.\n");
     e56:	4b4c      	ldr	r3, [pc, #304]	; (f88 <network_check_any+0x29c>)
     e58:	6819      	ldr	r1, [r3, #0]
     e5a:	4859      	ldr	r0, [pc, #356]	; (fc0 <network_check_any+0x2d4>)
     e5c:	4b4c      	ldr	r3, [pc, #304]	; (f90 <network_check_any+0x2a4>)
     e5e:	4798      	blx	r3
		struct can_rx_element_buffer * message = getNextBufferElement(&(network->rx_element_buff[network->broadcast_buff_num]));
     e60:	2191      	movs	r1, #145	; 0x91
     e62:	0089      	lsls	r1, r1, #2
     e64:	68f3      	ldr	r3, [r6, #12]
     e66:	4359      	muls	r1, r3
     e68:	6876      	ldr	r6, [r6, #4]
     e6a:	1876      	adds	r6, r6, r1
	if (buff->last_write == buff->last_read) return NULL;
     e6c:	7873      	ldrb	r3, [r6, #1]
     e6e:	7832      	ldrb	r2, [r6, #0]
     e70:	429a      	cmp	r2, r3
     e72:	d015      	beq.n	ea0 <network_check_any+0x1b4>
	buff->last_read = (buff->last_read + 1) % NETWORK_MAX_BUFFER_ELEMENTS;
     e74:	1c59      	adds	r1, r3, #1
     e76:	2207      	movs	r2, #7
     e78:	400a      	ands	r2, r1
     e7a:	7072      	strb	r2, [r6, #1]
	return &(buff->buffers[last_element]);
     e7c:	00d9      	lsls	r1, r3, #3
     e7e:	18c9      	adds	r1, r1, r3
     e80:	00c9      	lsls	r1, r1, #3
     e82:	3104      	adds	r1, #4
     e84:	1876      	adds	r6, r6, r1
		uint8_t dataLen = ((DLC_to_Val(message->R1.bit.DLC) < len) ? DLC_to_Val(message->R1.bit.DLC) : len);
     e86:	6873      	ldr	r3, [r6, #4]
     e88:	031b      	lsls	r3, r3, #12
     e8a:	0f1b      	lsrs	r3, r3, #28
	switch(input) {
     e8c:	3307      	adds	r3, #7
     e8e:	220f      	movs	r2, #15
     e90:	4013      	ands	r3, r2
     e92:	b2da      	uxtb	r2, r3
     e94:	2a06      	cmp	r2, #6
     e96:	d811      	bhi.n	ebc <network_check_any+0x1d0>
     e98:	009b      	lsls	r3, r3, #2
     e9a:	4a4a      	ldr	r2, [pc, #296]	; (fc4 <network_check_any+0x2d8>)
     e9c:	58d3      	ldr	r3, [r2, r3]
     e9e:	469f      	mov	pc, r3
	if (buff->last_write == buff->last_read) return NULL;
     ea0:	2600      	movs	r6, #0
     ea2:	e7f0      	b.n	e86 <network_check_any+0x19a>
		return 16;
     ea4:	2310      	movs	r3, #16
     ea6:	e00f      	b.n	ec8 <network_check_any+0x1dc>
		return 20;
     ea8:	2314      	movs	r3, #20
     eaa:	e00d      	b.n	ec8 <network_check_any+0x1dc>
		return 24;
     eac:	2318      	movs	r3, #24
     eae:	e00b      	b.n	ec8 <network_check_any+0x1dc>
		return 32;
     eb0:	2320      	movs	r3, #32
     eb2:	e009      	b.n	ec8 <network_check_any+0x1dc>
		return 48;
     eb4:	2330      	movs	r3, #48	; 0x30
     eb6:	e007      	b.n	ec8 <network_check_any+0x1dc>
		return 64;
     eb8:	2340      	movs	r3, #64	; 0x40
     eba:	e005      	b.n	ec8 <network_check_any+0x1dc>
		printf("What did you just give me.\r\n");
     ebc:	4836      	ldr	r0, [pc, #216]	; (f98 <network_check_any+0x2ac>)
     ebe:	4b37      	ldr	r3, [pc, #220]	; (f9c <network_check_any+0x2b0>)
     ec0:	4798      	blx	r3
		return 0;
     ec2:	2300      	movs	r3, #0
     ec4:	e000      	b.n	ec8 <network_check_any+0x1dc>
		return 12;
     ec6:	230c      	movs	r3, #12
     ec8:	429c      	cmp	r4, r3
     eca:	d92c      	bls.n	f26 <network_check_any+0x23a>
     ecc:	6873      	ldr	r3, [r6, #4]
     ece:	031b      	lsls	r3, r3, #12
     ed0:	0f1b      	lsrs	r3, r3, #28
	switch(input) {
     ed2:	3307      	adds	r3, #7
     ed4:	220f      	movs	r2, #15
     ed6:	4013      	ands	r3, r2
     ed8:	b2da      	uxtb	r2, r3
     eda:	2a06      	cmp	r2, #6
     edc:	d80f      	bhi.n	efe <network_check_any+0x212>
     ede:	009b      	lsls	r3, r3, #2
     ee0:	4a39      	ldr	r2, [pc, #228]	; (fc8 <network_check_any+0x2dc>)
     ee2:	58d3      	ldr	r3, [r2, r3]
     ee4:	469f      	mov	pc, r3
		return 16;
     ee6:	2510      	movs	r5, #16
     ee8:	e00f      	b.n	f0a <network_check_any+0x21e>
		return 20;
     eea:	2514      	movs	r5, #20
     eec:	e00d      	b.n	f0a <network_check_any+0x21e>
		return 24;
     eee:	2518      	movs	r5, #24
     ef0:	e00b      	b.n	f0a <network_check_any+0x21e>
		return 32;
     ef2:	2520      	movs	r5, #32
     ef4:	e009      	b.n	f0a <network_check_any+0x21e>
		return 48;
     ef6:	2530      	movs	r5, #48	; 0x30
     ef8:	e007      	b.n	f0a <network_check_any+0x21e>
		return 64;
     efa:	2540      	movs	r5, #64	; 0x40
     efc:	e005      	b.n	f0a <network_check_any+0x21e>
		printf("What did you just give me.\r\n");
     efe:	4826      	ldr	r0, [pc, #152]	; (f98 <network_check_any+0x2ac>)
     f00:	4b26      	ldr	r3, [pc, #152]	; (f9c <network_check_any+0x2b0>)
     f02:	4798      	blx	r3
		return 0;
     f04:	2500      	movs	r5, #0
     f06:	e000      	b.n	f0a <network_check_any+0x21e>
		return 12;
     f08:	250c      	movs	r5, #12
     f0a:	b2ed      	uxtb	r5, r5
		printf("DEBUG: DLC to Val: %d\r\n",DLC_to_Val(message->R1.bit.DLC));
     f0c:	6873      	ldr	r3, [r6, #4]
     f0e:	031b      	lsls	r3, r3, #12
     f10:	0f1b      	lsrs	r3, r3, #28
	switch(input) {
     f12:	3307      	adds	r3, #7
     f14:	220f      	movs	r2, #15
     f16:	4013      	ands	r3, r2
     f18:	b2da      	uxtb	r2, r3
     f1a:	2a06      	cmp	r2, #6
     f1c:	d811      	bhi.n	f42 <network_check_any+0x256>
     f1e:	009b      	lsls	r3, r3, #2
     f20:	4a2a      	ldr	r2, [pc, #168]	; (fcc <network_check_any+0x2e0>)
     f22:	58d3      	ldr	r3, [r2, r3]
     f24:	469f      	mov	pc, r3
		uint8_t dataLen = ((DLC_to_Val(message->R1.bit.DLC) < len) ? DLC_to_Val(message->R1.bit.DLC) : len);
     f26:	b2e5      	uxtb	r5, r4
     f28:	e7f0      	b.n	f0c <network_check_any+0x220>
		return 16;
     f2a:	2110      	movs	r1, #16
     f2c:	e00f      	b.n	f4e <network_check_any+0x262>
		return 20;
     f2e:	2114      	movs	r1, #20
     f30:	e00d      	b.n	f4e <network_check_any+0x262>
		return 24;
     f32:	2118      	movs	r1, #24
     f34:	e00b      	b.n	f4e <network_check_any+0x262>
		return 32;
     f36:	2120      	movs	r1, #32
     f38:	e009      	b.n	f4e <network_check_any+0x262>
		return 48;
     f3a:	2130      	movs	r1, #48	; 0x30
     f3c:	e007      	b.n	f4e <network_check_any+0x262>
		return 64;
     f3e:	2140      	movs	r1, #64	; 0x40
     f40:	e005      	b.n	f4e <network_check_any+0x262>
		printf("What did you just give me.\r\n");
     f42:	4815      	ldr	r0, [pc, #84]	; (f98 <network_check_any+0x2ac>)
     f44:	4b15      	ldr	r3, [pc, #84]	; (f9c <network_check_any+0x2b0>)
     f46:	4798      	blx	r3
		return 0;
     f48:	2100      	movs	r1, #0
     f4a:	e000      	b.n	f4e <network_check_any+0x262>
		return 12;
     f4c:	210c      	movs	r1, #12
		printf("DEBUG: DLC to Val: %d\r\n",DLC_to_Val(message->R1.bit.DLC));
     f4e:	4816      	ldr	r0, [pc, #88]	; (fa8 <network_check_any+0x2bc>)
     f50:	4c0f      	ldr	r4, [pc, #60]	; (f90 <network_check_any+0x2a4>)
     f52:	47a0      	blx	r4
		memcpy(buff,message->data,dataLen);
     f54:	0031      	movs	r1, r6
     f56:	3108      	adds	r1, #8
     f58:	002a      	movs	r2, r5
     f5a:	0038      	movs	r0, r7
     f5c:	4b13      	ldr	r3, [pc, #76]	; (fac <network_check_any+0x2c0>)
     f5e:	4798      	blx	r3
		debug_print("Broadcast Network Receive - Message: \n");
     f60:	4b09      	ldr	r3, [pc, #36]	; (f88 <network_check_any+0x29c>)
     f62:	6819      	ldr	r1, [r3, #0]
     f64:	481a      	ldr	r0, [pc, #104]	; (fd0 <network_check_any+0x2e4>)
     f66:	47a0      	blx	r4
		for (int sex = 0; sex < dataLen; sex++) {
     f68:	2d00      	cmp	r5, #0
     f6a:	dd07      	ble.n	f7c <network_check_any+0x290>
     f6c:	2400      	movs	r4, #0
			printf("%x ",buff[sex]);
     f6e:	4e08      	ldr	r6, [pc, #32]	; (f90 <network_check_any+0x2a4>)
     f70:	5d39      	ldrb	r1, [r7, r4]
     f72:	4810      	ldr	r0, [pc, #64]	; (fb4 <network_check_any+0x2c8>)
     f74:	47b0      	blx	r6
		for (int sex = 0; sex < dataLen; sex++) {
     f76:	3401      	adds	r4, #1
     f78:	42ac      	cmp	r4, r5
     f7a:	dbf9      	blt.n	f70 <network_check_any+0x284>
		printf("\r\n");
     f7c:	480e      	ldr	r0, [pc, #56]	; (fb8 <network_check_any+0x2cc>)
     f7e:	4b07      	ldr	r3, [pc, #28]	; (f9c <network_check_any+0x2b0>)
     f80:	4798      	blx	r3
		return dataLen;
     f82:	e758      	b.n	e36 <network_check_any+0x14a>
		return 0;
     f84:	2500      	movs	r5, #0
     f86:	e756      	b.n	e36 <network_check_any+0x14a>
     f88:	20002ba8 	.word	0x20002ba8
     f8c:	000083a8 	.word	0x000083a8
     f90:	00007105 	.word	0x00007105
     f94:	000082b4 	.word	0x000082b4
     f98:	000083c8 	.word	0x000083c8
     f9c:	000071f9 	.word	0x000071f9
     fa0:	000082d0 	.word	0x000082d0
     fa4:	000082ec 	.word	0x000082ec
     fa8:	000083e4 	.word	0x000083e4
     fac:	00006f6f 	.word	0x00006f6f
     fb0:	000083fc 	.word	0x000083fc
     fb4:	000081b8 	.word	0x000081b8
     fb8:	000081dc 	.word	0x000081dc
     fbc:	0000ffff 	.word	0x0000ffff
     fc0:	00008420 	.word	0x00008420
     fc4:	00008308 	.word	0x00008308
     fc8:	00008324 	.word	0x00008324
     fcc:	00008340 	.word	0x00008340
     fd0:	00008440 	.word	0x00008440

00000fd4 <InitKWIDKeyData>:
#define TEMP_NODE_ID 1
#define TEMP_FILTER_VAL 1

struct Crypto_Data selfData = {.ASCON_data = {.nonce = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}}, .child_ASCON_data = {.nonce = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}}};

int InitKWIDKeyData() {
     fd4:	b570      	push	{r4, r5, r6, lr}
     fd6:	b088      	sub	sp, #32
	// Takes the table of HWIDTable and initializes all the values (because we don't want to have to hand copy them all...
	uint8_t secret_key[32];
	//Create your secret key.
	memset(selfData.secret_key,HARDWARE_ID_VAL,32);
     fd8:	2220      	movs	r2, #32
     fda:	2109      	movs	r1, #9
     fdc:	480c      	ldr	r0, [pc, #48]	; (1010 <InitKWIDKeyData+0x3c>)
     fde:	4d0d      	ldr	r5, [pc, #52]	; (1014 <InitKWIDKeyData+0x40>)
     fe0:	47a8      	blx	r5
	#endif
	#ifdef SYSTEM_ENDPOINT_TYPE
		// Generate router's public key... even though you shouldn't be doing this.
		ECCRYPTO_STATUS Status;
		
		memset(secret_key,(uint8_t)(parentStoredKeys->hw_id.data),sizeof(secret_key));
     fe2:	4e0d      	ldr	r6, [pc, #52]	; (1018 <InitKWIDKeyData+0x44>)
     fe4:	6834      	ldr	r4, [r6, #0]
     fe6:	7821      	ldrb	r1, [r4, #0]
     fe8:	2220      	movs	r2, #32
     fea:	4668      	mov	r0, sp
     fec:	47a8      	blx	r5
		memset(parentStoredKeys->router_data.public_key,0,32);
     fee:	3414      	adds	r4, #20
     ff0:	2220      	movs	r2, #32
     ff2:	2100      	movs	r1, #0
     ff4:	0020      	movs	r0, r4
     ff6:	47a8      	blx	r5
		
		// Generate the public key (this technically shouldn't be done on the OTHER nodes lol)
		Status = CompressedKeyGeneration(secret_key,parentStoredKeys->router_data.public_key);
     ff8:	0021      	movs	r1, r4
     ffa:	4668      	mov	r0, sp
     ffc:	4b07      	ldr	r3, [pc, #28]	; (101c <InitKWIDKeyData+0x48>)
     ffe:	4798      	blx	r3
		
		// Generate its expected response hash
		photon128(secret_key,32,parentStoredKeys->router_data.response_hash);
    1000:	6832      	ldr	r2, [r6, #0]
    1002:	3204      	adds	r2, #4
    1004:	2120      	movs	r1, #32
    1006:	4668      	mov	r0, sp
    1008:	4b05      	ldr	r3, [pc, #20]	; (1020 <InitKWIDKeyData+0x4c>)
    100a:	4798      	blx	r3
	#endif
}
    100c:	b008      	add	sp, #32
    100e:	bd70      	pop	{r4, r5, r6, pc}
    1010:	2000003c 	.word	0x2000003c
    1014:	00006fa5 	.word	0x00006fa5
    1018:	20000038 	.word	0x20000038
    101c:	000061c1 	.word	0x000061c1
    1020:	000064d1 	.word	0x000064d1

00001024 <authToParent>:

// TODO: This probably doesn't need passed the nodes, just the parent and itself?
// WHEN COPYING DO NOT OVERWRITE THE OTHER SIDE WITH THIS.
int authToParent(struct node* my_parent_info, struct node* parent_info, struct node* parent_broadcast_info) {
    1024:	b5f0      	push	{r4, r5, r6, r7, lr}
    1026:	b09d      	sub	sp, #116	; 0x74
    1028:	0006      	movs	r6, r0
    102a:	000c      	movs	r4, r1
    102c:	9207      	str	r2, [sp, #28]
	
	// (For my purpose only)
	// Enable monitoring
	//CAN_Rx(TEMP_NODE_ID,TEMP_FILTER_VAL,can_instance);
	
	ECCRYPTO_STATUS Status = CompressedKeyGeneration(selfData.secret_key,selfData.public_key);
    102e:	486c      	ldr	r0, [pc, #432]	; (11e0 <authToParent+0x1bc>)
    1030:	0001      	movs	r1, r0
    1032:	3120      	adds	r1, #32
    1034:	4b6b      	ldr	r3, [pc, #428]	; (11e4 <authToParent+0x1c0>)
    1036:	4798      	blx	r3
    1038:	0005      	movs	r5, r0
	if (Status != ECCRYPTO_SUCCESS) {
    103a:	2801      	cmp	r0, #1
    103c:	d005      	beq.n	104a <authToParent+0x26>
		printf("Failed Public Key Generation\r\n");
    103e:	486a      	ldr	r0, [pc, #424]	; (11e8 <authToParent+0x1c4>)
    1040:	4b6a      	ldr	r3, [pc, #424]	; (11ec <authToParent+0x1c8>)
    1042:	4798      	blx	r3
		return Status;
    1044:	0028      	movs	r0, r5
	printf("\r\n");*/
	
	// Receive broadcast saying init is over, time for GO (because you are a router, your next step will be to do the server-side yourself)
	while(node_msg_check(parent_broadcast_info, &message) == 0);
	debug_print("Completed Parent's Authentication\n");
}
    1046:	b01d      	add	sp, #116	; 0x74
    1048:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = CompressedSecretAgreement(selfData.secret_key,parentStoredKeys->router_data.public_key,selfData.shared_secret);
    104a:	4865      	ldr	r0, [pc, #404]	; (11e0 <authToParent+0x1bc>)
    104c:	0002      	movs	r2, r0
    104e:	3240      	adds	r2, #64	; 0x40
    1050:	4b67      	ldr	r3, [pc, #412]	; (11f0 <authToParent+0x1cc>)
    1052:	6819      	ldr	r1, [r3, #0]
    1054:	3114      	adds	r1, #20
    1056:	4b67      	ldr	r3, [pc, #412]	; (11f4 <authToParent+0x1d0>)
    1058:	4798      	blx	r3
    105a:	0005      	movs	r5, r0
	if (Status != ECCRYPTO_SUCCESS) {
    105c:	2801      	cmp	r0, #1
    105e:	d004      	beq.n	106a <authToParent+0x46>
		printf("Failed Shared Secret Creation\r\n");
    1060:	4865      	ldr	r0, [pc, #404]	; (11f8 <authToParent+0x1d4>)
    1062:	4b62      	ldr	r3, [pc, #392]	; (11ec <authToParent+0x1c8>)
    1064:	4798      	blx	r3
		return Status;
    1066:	0028      	movs	r0, r5
    1068:	e7ed      	b.n	1046 <authToParent+0x22>
	photon128(selfData.shared_secret,32,selfData.shared_hash);
    106a:	485d      	ldr	r0, [pc, #372]	; (11e0 <authToParent+0x1bc>)
    106c:	0002      	movs	r2, r0
    106e:	3260      	adds	r2, #96	; 0x60
    1070:	3040      	adds	r0, #64	; 0x40
    1072:	2120      	movs	r1, #32
    1074:	4b61      	ldr	r3, [pc, #388]	; (11fc <authToParent+0x1d8>)
    1076:	4798      	blx	r3
	while(node_msg_check(parent_info, &message) == 0 || message.header.cmd != NODE_CMD_AUTH_PLN);
    1078:	ad0e      	add	r5, sp, #56	; 0x38
    107a:	4f61      	ldr	r7, [pc, #388]	; (1200 <authToParent+0x1dc>)
    107c:	0029      	movs	r1, r5
    107e:	0020      	movs	r0, r4
    1080:	47b8      	blx	r7
    1082:	2800      	cmp	r0, #0
    1084:	d0fa      	beq.n	107c <authToParent+0x58>
    1086:	79ab      	ldrb	r3, [r5, #6]
    1088:	2b04      	cmp	r3, #4
    108a:	d1f7      	bne.n	107c <authToParent+0x58>
	memcpy(message.data,selfData.public_key,FOURQ_KEY_SIZE);
    108c:	aa10      	add	r2, sp, #64	; 0x40
    108e:	4b54      	ldr	r3, [pc, #336]	; (11e0 <authToParent+0x1bc>)
    1090:	3320      	adds	r3, #32
    1092:	cb23      	ldmia	r3!, {r0, r1, r5}
    1094:	c223      	stmia	r2!, {r0, r1, r5}
    1096:	cb23      	ldmia	r3!, {r0, r1, r5}
    1098:	c223      	stmia	r2!, {r0, r1, r5}
    109a:	cb03      	ldmia	r3!, {r0, r1}
    109c:	c203      	stmia	r2!, {r0, r1}
	node_msg_send_generic(my_parent_info,parent_info,NODE_CMD_AUTH_PLN,&message,FOURQ_KEY_SIZE);
    109e:	2320      	movs	r3, #32
    10a0:	9300      	str	r3, [sp, #0]
    10a2:	ab0e      	add	r3, sp, #56	; 0x38
    10a4:	2204      	movs	r2, #4
    10a6:	0021      	movs	r1, r4
    10a8:	0030      	movs	r0, r6
    10aa:	4d56      	ldr	r5, [pc, #344]	; (1204 <authToParent+0x1e0>)
    10ac:	47a8      	blx	r5
	while(node_msg_check(parent_info, &message) == 0 || message.header.cmd != NODE_CMD_AUTH_PLN);
    10ae:	ad0e      	add	r5, sp, #56	; 0x38
    10b0:	4f53      	ldr	r7, [pc, #332]	; (1200 <authToParent+0x1dc>)
    10b2:	0029      	movs	r1, r5
    10b4:	0020      	movs	r0, r4
    10b6:	47b8      	blx	r7
    10b8:	2800      	cmp	r0, #0
    10ba:	d0fa      	beq.n	10b2 <authToParent+0x8e>
    10bc:	79ab      	ldrb	r3, [r5, #6]
    10be:	2b04      	cmp	r3, #4
    10c0:	d1f7      	bne.n	10b2 <authToParent+0x8e>
	crypto_aead_decrypt(response,&mlen,NULL,message.data,message.header.len-8,NULL,NULL,selfData.ASCON_data.nonce,selfData.shared_hash);
    10c2:	4b47      	ldr	r3, [pc, #284]	; (11e0 <authToParent+0x1bc>)
    10c4:	001a      	movs	r2, r3
    10c6:	3260      	adds	r2, #96	; 0x60
    10c8:	9204      	str	r2, [sp, #16]
    10ca:	3380      	adds	r3, #128	; 0x80
    10cc:	9303      	str	r3, [sp, #12]
    10ce:	2300      	movs	r3, #0
    10d0:	9302      	str	r3, [sp, #8]
    10d2:	9301      	str	r3, [sp, #4]
    10d4:	ab0e      	add	r3, sp, #56	; 0x38
    10d6:	79db      	ldrb	r3, [r3, #7]
    10d8:	3b08      	subs	r3, #8
    10da:	9300      	str	r3, [sp, #0]
    10dc:	ab10      	add	r3, sp, #64	; 0x40
    10de:	2200      	movs	r2, #0
    10e0:	a909      	add	r1, sp, #36	; 0x24
    10e2:	a80a      	add	r0, sp, #40	; 0x28
    10e4:	4d48      	ldr	r5, [pc, #288]	; (1208 <authToParent+0x1e4>)
    10e6:	47a8      	blx	r5
	if (memcmp(response,parentStoredKeys->router_data.response_hash,mlen) != 0) {
    10e8:	4b41      	ldr	r3, [pc, #260]	; (11f0 <authToParent+0x1cc>)
    10ea:	6819      	ldr	r1, [r3, #0]
    10ec:	3104      	adds	r1, #4
    10ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10f0:	a80a      	add	r0, sp, #40	; 0x28
    10f2:	4b46      	ldr	r3, [pc, #280]	; (120c <authToParent+0x1e8>)
    10f4:	4798      	blx	r3
    10f6:	2800      	cmp	r0, #0
    10f8:	d13e      	bne.n	1178 <authToParent+0x154>
	memset(message.data,1,8);
    10fa:	2208      	movs	r2, #8
    10fc:	2101      	movs	r1, #1
    10fe:	a810      	add	r0, sp, #64	; 0x40
    1100:	4b43      	ldr	r3, [pc, #268]	; (1210 <authToParent+0x1ec>)
    1102:	4798      	blx	r3
	node_msg_send_generic(my_parent_info,parent_info,NODE_CMD_AUTH_PLN,&message,8);
    1104:	2308      	movs	r3, #8
    1106:	9300      	str	r3, [sp, #0]
    1108:	ab0e      	add	r3, sp, #56	; 0x38
    110a:	2204      	movs	r2, #4
    110c:	0021      	movs	r1, r4
    110e:	0030      	movs	r0, r6
    1110:	4c3c      	ldr	r4, [pc, #240]	; (1204 <authToParent+0x1e0>)
    1112:	47a0      	blx	r4
	while(node_msg_check(my_parent_info, &message) == 0 || message.header.cmd != NODE_CMD_AUTH_PLN);
    1114:	ac0e      	add	r4, sp, #56	; 0x38
    1116:	4d3a      	ldr	r5, [pc, #232]	; (1200 <authToParent+0x1dc>)
    1118:	0021      	movs	r1, r4
    111a:	0030      	movs	r0, r6
    111c:	47a8      	blx	r5
    111e:	2800      	cmp	r0, #0
    1120:	d0fa      	beq.n	1118 <authToParent+0xf4>
    1122:	79a3      	ldrb	r3, [r4, #6]
    1124:	2b04      	cmp	r3, #4
    1126:	d1f7      	bne.n	1118 <authToParent+0xf4>
	if (crypto_aead_decrypt(response,&mlen,NULL,message.data,message.header.len-8,NULL,NULL,selfData.ASCON_data.nonce,selfData.shared_hash)) {
    1128:	4b2d      	ldr	r3, [pc, #180]	; (11e0 <authToParent+0x1bc>)
    112a:	001a      	movs	r2, r3
    112c:	3260      	adds	r2, #96	; 0x60
    112e:	9204      	str	r2, [sp, #16]
    1130:	3380      	adds	r3, #128	; 0x80
    1132:	9303      	str	r3, [sp, #12]
    1134:	2300      	movs	r3, #0
    1136:	9302      	str	r3, [sp, #8]
    1138:	9301      	str	r3, [sp, #4]
    113a:	ab0e      	add	r3, sp, #56	; 0x38
    113c:	79db      	ldrb	r3, [r3, #7]
    113e:	3b08      	subs	r3, #8
    1140:	9300      	str	r3, [sp, #0]
    1142:	ab10      	add	r3, sp, #64	; 0x40
    1144:	2200      	movs	r2, #0
    1146:	a909      	add	r1, sp, #36	; 0x24
    1148:	a80a      	add	r0, sp, #40	; 0x28
    114a:	4c2f      	ldr	r4, [pc, #188]	; (1208 <authToParent+0x1e4>)
    114c:	47a0      	blx	r4
    114e:	2800      	cmp	r0, #0
    1150:	d13e      	bne.n	11d0 <authToParent+0x1ac>
	memcpy(selfData.ASCON_data.session_key,response,16);
    1152:	aa0a      	add	r2, sp, #40	; 0x28
    1154:	4b22      	ldr	r3, [pc, #136]	; (11e0 <authToParent+0x1bc>)
    1156:	3370      	adds	r3, #112	; 0x70
    1158:	ca13      	ldmia	r2!, {r0, r1, r4}
    115a:	c313      	stmia	r3!, {r0, r1, r4}
    115c:	6812      	ldr	r2, [r2, #0]
    115e:	601a      	str	r2, [r3, #0]
	while(node_msg_check(parent_broadcast_info, &message) == 0);
    1160:	4c27      	ldr	r4, [pc, #156]	; (1200 <authToParent+0x1dc>)
    1162:	a90e      	add	r1, sp, #56	; 0x38
    1164:	9807      	ldr	r0, [sp, #28]
    1166:	47a0      	blx	r4
    1168:	2800      	cmp	r0, #0
    116a:	d0fa      	beq.n	1162 <authToParent+0x13e>
	debug_print("Completed Parent's Authentication\n");
    116c:	4b29      	ldr	r3, [pc, #164]	; (1214 <authToParent+0x1f0>)
    116e:	6819      	ldr	r1, [r3, #0]
    1170:	4829      	ldr	r0, [pc, #164]	; (1218 <authToParent+0x1f4>)
    1172:	4b2a      	ldr	r3, [pc, #168]	; (121c <authToParent+0x1f8>)
    1174:	4798      	blx	r3
}
    1176:	e766      	b.n	1046 <authToParent+0x22>
		printf("The server is not the one you want to connect to!\r\n");
    1178:	4829      	ldr	r0, [pc, #164]	; (1220 <authToParent+0x1fc>)
    117a:	4b1c      	ldr	r3, [pc, #112]	; (11ec <authToParent+0x1c8>)
    117c:	4798      	blx	r3
		debug_print("Expected Response: \n");
    117e:	4b25      	ldr	r3, [pc, #148]	; (1214 <authToParent+0x1f0>)
    1180:	6819      	ldr	r1, [r3, #0]
    1182:	4828      	ldr	r0, [pc, #160]	; (1224 <authToParent+0x200>)
    1184:	4b25      	ldr	r3, [pc, #148]	; (121c <authToParent+0x1f8>)
    1186:	4798      	blx	r3
		for (int sex = 0; sex < RESPONSE_SIZE; sex++) {
    1188:	2400      	movs	r4, #0
			printf("%x ",parentStoredKeys->router_data.response_hash[sex]);
    118a:	4f19      	ldr	r7, [pc, #100]	; (11f0 <authToParent+0x1cc>)
    118c:	4e26      	ldr	r6, [pc, #152]	; (1228 <authToParent+0x204>)
    118e:	4d23      	ldr	r5, [pc, #140]	; (121c <authToParent+0x1f8>)
    1190:	683b      	ldr	r3, [r7, #0]
    1192:	191b      	adds	r3, r3, r4
    1194:	7919      	ldrb	r1, [r3, #4]
    1196:	0030      	movs	r0, r6
    1198:	47a8      	blx	r5
		for (int sex = 0; sex < RESPONSE_SIZE; sex++) {
    119a:	3401      	adds	r4, #1
    119c:	2c10      	cmp	r4, #16
    119e:	d1f7      	bne.n	1190 <authToParent+0x16c>
		printf("\r\n");
    11a0:	4822      	ldr	r0, [pc, #136]	; (122c <authToParent+0x208>)
    11a2:	4b12      	ldr	r3, [pc, #72]	; (11ec <authToParent+0x1c8>)
    11a4:	4798      	blx	r3
		debug_print("Received Response: \n");
    11a6:	4b1b      	ldr	r3, [pc, #108]	; (1214 <authToParent+0x1f0>)
    11a8:	6819      	ldr	r1, [r3, #0]
    11aa:	4821      	ldr	r0, [pc, #132]	; (1230 <authToParent+0x20c>)
    11ac:	4b1b      	ldr	r3, [pc, #108]	; (121c <authToParent+0x1f8>)
    11ae:	4798      	blx	r3
		for (int sex = 0; sex < RESPONSE_SIZE; sex++) {
    11b0:	2400      	movs	r4, #0
			printf("%x ",response[sex]);
    11b2:	af0a      	add	r7, sp, #40	; 0x28
    11b4:	4e1c      	ldr	r6, [pc, #112]	; (1228 <authToParent+0x204>)
    11b6:	4d19      	ldr	r5, [pc, #100]	; (121c <authToParent+0x1f8>)
    11b8:	5de1      	ldrb	r1, [r4, r7]
    11ba:	0030      	movs	r0, r6
    11bc:	47a8      	blx	r5
		for (int sex = 0; sex < RESPONSE_SIZE; sex++) {
    11be:	3401      	adds	r4, #1
    11c0:	2c10      	cmp	r4, #16
    11c2:	d1f9      	bne.n	11b8 <authToParent+0x194>
		printf("\r\n");
    11c4:	4819      	ldr	r0, [pc, #100]	; (122c <authToParent+0x208>)
    11c6:	4b09      	ldr	r3, [pc, #36]	; (11ec <authToParent+0x1c8>)
    11c8:	4798      	blx	r3
		exit(2);
    11ca:	2002      	movs	r0, #2
    11cc:	4b19      	ldr	r3, [pc, #100]	; (1234 <authToParent+0x210>)
    11ce:	4798      	blx	r3
		debug_print("Signature for Session Key was Incorrect!\n");
    11d0:	4b10      	ldr	r3, [pc, #64]	; (1214 <authToParent+0x1f0>)
    11d2:	6819      	ldr	r1, [r3, #0]
    11d4:	4818      	ldr	r0, [pc, #96]	; (1238 <authToParent+0x214>)
    11d6:	4b11      	ldr	r3, [pc, #68]	; (121c <authToParent+0x1f8>)
    11d8:	4798      	blx	r3
		exit(2);
    11da:	2002      	movs	r0, #2
    11dc:	4b15      	ldr	r3, [pc, #84]	; (1234 <authToParent+0x210>)
    11de:	4798      	blx	r3
    11e0:	2000003c 	.word	0x2000003c
    11e4:	000061c1 	.word	0x000061c1
    11e8:	000084b8 	.word	0x000084b8
    11ec:	000071f9 	.word	0x000071f9
    11f0:	20000038 	.word	0x20000038
    11f4:	000061ed 	.word	0x000061ed
    11f8:	000084d8 	.word	0x000084d8
    11fc:	000064d1 	.word	0x000064d1
    1200:	000005fd 	.word	0x000005fd
    1204:	000003b9 	.word	0x000003b9
    1208:	00001ad9 	.word	0x00001ad9
    120c:	00006f51 	.word	0x00006f51
    1210:	00006fa5 	.word	0x00006fa5
    1214:	20002ba8 	.word	0x20002ba8
    1218:	00008594 	.word	0x00008594
    121c:	00007105 	.word	0x00007105
    1220:	000084f8 	.word	0x000084f8
    1224:	0000852c 	.word	0x0000852c
    1228:	000081b8 	.word	0x000081b8
    122c:	000081dc 	.word	0x000081dc
    1230:	00008548 	.word	0x00008548
    1234:	00006ec9 	.word	0x00006ec9
    1238:	00008564 	.word	0x00008564

0000123c <crypto_aead_encrypt>:

int crypto_aead_encrypt(unsigned char* c, unsigned long* clen,
                        const unsigned char* m, unsigned long mlen,
                        const unsigned char* ad, unsigned long adlen,
                        const unsigned char* nsec, const unsigned char* npub,
                        const unsigned char* k) {
    123c:	b5f0      	push	{r4, r5, r6, r7, lr}
    123e:	46de      	mov	lr, fp
    1240:	4657      	mov	r7, sl
    1242:	464e      	mov	r6, r9
    1244:	4645      	mov	r5, r8
    1246:	b5e0      	push	{r5, r6, r7, lr}
    1248:	b0a5      	sub	sp, #148	; 0x94
    124a:	9016      	str	r0, [sp, #88]	; 0x58
    124c:	9213      	str	r2, [sp, #76]	; 0x4c
    124e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    1250:	46a4      	mov	ip, r4
    1252:	9f32      	ldr	r7, [sp, #200]	; 0xc8
  ascon_state_t s;
  (void)nsec;
  *clen = mlen + CRYPTO_ABYTES;
    1254:	9317      	str	r3, [sp, #92]	; 0x5c
    1256:	3308      	adds	r3, #8
    1258:	600b      	str	r3, [r1, #0]
  /* undefined for n == 0 */
  return ~(uint64_t)0 >> (64 - 8 * n);
}

forceinline uint64_t LOAD(const uint8_t* bytes, int n) {
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    125a:	6839      	ldr	r1, [r7, #0]
    125c:	6878      	ldr	r0, [r7, #4]
  return U64TOWORD(x);
    125e:	060c      	lsls	r4, r1, #24
    1260:	0e02      	lsrs	r2, r0, #24
    1262:	020b      	lsls	r3, r1, #8
    1264:	26ff      	movs	r6, #255	; 0xff
    1266:	0436      	lsls	r6, r6, #16
    1268:	4033      	ands	r3, r6
    126a:	4323      	orrs	r3, r4
    126c:	0a0d      	lsrs	r5, r1, #8
    126e:	0604      	lsls	r4, r0, #24
    1270:	432c      	orrs	r4, r5
    1272:	25ff      	movs	r5, #255	; 0xff
    1274:	022d      	lsls	r5, r5, #8
    1276:	402c      	ands	r4, r5
    1278:	4323      	orrs	r3, r4
    127a:	4699      	mov	r9, r3
    127c:	0e0c      	lsrs	r4, r1, #24
    127e:	0201      	lsls	r1, r0, #8
    1280:	4321      	orrs	r1, r4
    1282:	23ff      	movs	r3, #255	; 0xff
    1284:	469b      	mov	fp, r3
    1286:	4019      	ands	r1, r3
    1288:	464b      	mov	r3, r9
    128a:	4319      	orrs	r1, r3
    128c:	9112      	str	r1, [sp, #72]	; 0x48
    128e:	0a01      	lsrs	r1, r0, #8
    1290:	0603      	lsls	r3, r0, #24
    1292:	4313      	orrs	r3, r2
    1294:	0202      	lsls	r2, r0, #8
    1296:	4322      	orrs	r2, r4
    1298:	4032      	ands	r2, r6
    129a:	431a      	orrs	r2, r3
    129c:	0008      	movs	r0, r1
    129e:	4028      	ands	r0, r5
    12a0:	4302      	orrs	r2, r0
    12a2:	9211      	str	r2, [sp, #68]	; 0x44
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    12a4:	68ba      	ldr	r2, [r7, #8]
    12a6:	68fb      	ldr	r3, [r7, #12]
  return U64TOWORD(x);
    12a8:	0614      	lsls	r4, r2, #24
    12aa:	0e18      	lsrs	r0, r3, #24
    12ac:	0217      	lsls	r7, r2, #8
    12ae:	4037      	ands	r7, r6
    12b0:	4327      	orrs	r7, r4
    12b2:	0a14      	lsrs	r4, r2, #8
    12b4:	46a0      	mov	r8, r4
    12b6:	061c      	lsls	r4, r3, #24
    12b8:	4641      	mov	r1, r8
    12ba:	430c      	orrs	r4, r1
    12bc:	402c      	ands	r4, r5
    12be:	4327      	orrs	r7, r4
    12c0:	0e12      	lsrs	r2, r2, #24
    12c2:	021c      	lsls	r4, r3, #8
    12c4:	4314      	orrs	r4, r2
    12c6:	4659      	mov	r1, fp
    12c8:	400c      	ands	r4, r1
    12ca:	4327      	orrs	r7, r4
    12cc:	9715      	str	r7, [sp, #84]	; 0x54
    12ce:	0a1f      	lsrs	r7, r3, #8
    12d0:	061c      	lsls	r4, r3, #24
    12d2:	4320      	orrs	r0, r4
    12d4:	021b      	lsls	r3, r3, #8
    12d6:	4313      	orrs	r3, r2
    12d8:	4033      	ands	r3, r6
    12da:	4318      	orrs	r0, r3
    12dc:	402f      	ands	r7, r5
    12de:	4338      	orrs	r0, r7
    12e0:	9014      	str	r0, [sp, #80]	; 0x50
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    12e2:	4664      	mov	r4, ip
    12e4:	6824      	ldr	r4, [r4, #0]
    12e6:	4661      	mov	r1, ip
    12e8:	684b      	ldr	r3, [r1, #4]
  return U64TOWORD(x);
    12ea:	0627      	lsls	r7, r4, #24
    12ec:	0e1a      	lsrs	r2, r3, #24
    12ee:	0220      	lsls	r0, r4, #8
    12f0:	4030      	ands	r0, r6
    12f2:	4338      	orrs	r0, r7
    12f4:	0a21      	lsrs	r1, r4, #8
    12f6:	061f      	lsls	r7, r3, #24
    12f8:	430f      	orrs	r7, r1
    12fa:	402f      	ands	r7, r5
    12fc:	4338      	orrs	r0, r7
    12fe:	0e24      	lsrs	r4, r4, #24
    1300:	021f      	lsls	r7, r3, #8
    1302:	4327      	orrs	r7, r4
    1304:	4659      	mov	r1, fp
    1306:	400f      	ands	r7, r1
    1308:	4338      	orrs	r0, r7
    130a:	0a1f      	lsrs	r7, r3, #8
    130c:	0619      	lsls	r1, r3, #24
    130e:	430a      	orrs	r2, r1
    1310:	021b      	lsls	r3, r3, #8
    1312:	431c      	orrs	r4, r3
    1314:	4034      	ands	r4, r6
    1316:	4322      	orrs	r2, r4
    1318:	402f      	ands	r7, r5
    131a:	0014      	movs	r4, r2
    131c:	433c      	orrs	r4, r7
    131e:	46a2      	mov	sl, r4
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    1320:	4664      	mov	r4, ip
    1322:	68a7      	ldr	r7, [r4, #8]
    1324:	68e4      	ldr	r4, [r4, #12]
  return U64TOWORD(x);
    1326:	063a      	lsls	r2, r7, #24
    1328:	0e21      	lsrs	r1, r4, #24
    132a:	4688      	mov	r8, r1
    132c:	023b      	lsls	r3, r7, #8
    132e:	4033      	ands	r3, r6
    1330:	431a      	orrs	r2, r3
    1332:	0a39      	lsrs	r1, r7, #8
    1334:	0623      	lsls	r3, r4, #24
    1336:	430b      	orrs	r3, r1
    1338:	402b      	ands	r3, r5
    133a:	4313      	orrs	r3, r2
    133c:	0e3f      	lsrs	r7, r7, #24
    133e:	0222      	lsls	r2, r4, #8
    1340:	433a      	orrs	r2, r7
    1342:	4659      	mov	r1, fp
    1344:	4011      	ands	r1, r2
    1346:	4319      	orrs	r1, r3
    1348:	0a23      	lsrs	r3, r4, #8
    134a:	469c      	mov	ip, r3
    134c:	0623      	lsls	r3, r4, #24
    134e:	4642      	mov	r2, r8
    1350:	4313      	orrs	r3, r2
    1352:	0224      	lsls	r4, r4, #8
    1354:	4327      	orrs	r7, r4
    1356:	4037      	ands	r7, r6
    1358:	433b      	orrs	r3, r7
    135a:	4664      	mov	r4, ip
    135c:	4025      	ands	r5, r4
    135e:	432b      	orrs	r3, r5
#include "printstate.h"
#include "word.h"

forceinline void ROUND_LOOP(ascon_state_t* s, uint32_t C) {
  uint32_t tmp0, tmp1;
  __asm__ __volatile__(
    1360:	2400      	movs	r4, #0
    1362:	46a0      	mov	r8, r4
    1364:	4c6f      	ldr	r4, [pc, #444]	; (1524 <rend_301+0x68>)
    1366:	46a4      	mov	ip, r4
    1368:	9f11      	ldr	r7, [sp, #68]	; 0x44
    136a:	9e12      	ldr	r6, [sp, #72]	; 0x48
    136c:	9d14      	ldr	r5, [sp, #80]	; 0x50
    136e:	9c15      	ldr	r4, [sp, #84]	; 0x54
    1370:	46a1      	mov	r9, r4
    1372:	4652      	mov	r2, sl
    1374:	24f0      	movs	r4, #240	; 0xf0
    1376:	9401      	str	r4, [sp, #4]
    1378:	4644      	mov	r4, r8
    137a:	46b0      	mov	r8, r6
    137c:	46ca      	mov	sl, r9
    137e:	4683      	mov	fp, r0
    1380:	4689      	mov	r9, r1
    1382:	26f0      	movs	r6, #240	; 0xf0

00001384 <rbegin_301>:
    1384:	4075      	eors	r5, r6
    1386:	b440      	push	{r6}
    1388:	405c      	eors	r4, r3
    138a:	4053      	eors	r3, r2
    138c:	407d      	eors	r5, r7
    138e:	43e1      	mvns	r1, r4
    1390:	4319      	orrs	r1, r3
    1392:	1c2e      	adds	r6, r5, #0
    1394:	43be      	bics	r6, r7
    1396:	4074      	eors	r4, r6
    1398:	43de      	mvns	r6, r3
    139a:	4316      	orrs	r6, r2
    139c:	4075      	eors	r5, r6
    139e:	1c3e      	adds	r6, r7, #0
    13a0:	43a6      	bics	r6, r4
    13a2:	4073      	eors	r3, r6
    13a4:	1c16      	adds	r6, r2, #0
    13a6:	402e      	ands	r6, r5
    13a8:	407e      	eors	r6, r7
    13aa:	4051      	eors	r1, r2
    13ac:	4069      	eors	r1, r5
    13ae:	4066      	eors	r6, r4
    13b0:	405c      	eors	r4, r3
    13b2:	4667      	mov	r7, ip
    13b4:	4642      	mov	r2, r8
    13b6:	46ac      	mov	ip, r5
    13b8:	46a0      	mov	r8, r4
    13ba:	4654      	mov	r4, sl
    13bc:	465d      	mov	r5, fp
    13be:	4648      	mov	r0, r9
    13c0:	468a      	mov	sl, r1
    13c2:	469b      	mov	fp, r3
    13c4:	4047      	eors	r7, r0
    13c6:	4068      	eors	r0, r5
    13c8:	4054      	eors	r4, r2
    13ca:	43f9      	mvns	r1, r7
    13cc:	4301      	orrs	r1, r0
    13ce:	1c23      	adds	r3, r4, #0
    13d0:	4393      	bics	r3, r2
    13d2:	405f      	eors	r7, r3
    13d4:	43c3      	mvns	r3, r0
    13d6:	432b      	orrs	r3, r5
    13d8:	405c      	eors	r4, r3
    13da:	1c13      	adds	r3, r2, #0
    13dc:	43bb      	bics	r3, r7
    13de:	4058      	eors	r0, r3
    13e0:	1c2b      	adds	r3, r5, #0
    13e2:	4023      	ands	r3, r4
    13e4:	405a      	eors	r2, r3
    13e6:	404d      	eors	r5, r1
    13e8:	4065      	eors	r5, r4
    13ea:	407a      	eors	r2, r7
    13ec:	4047      	eors	r7, r0
    13ee:	46a9      	mov	r9, r5
    13f0:	4665      	mov	r5, ip
    13f2:	46bc      	mov	ip, r7
    13f4:	09a3      	lsrs	r3, r4, #6
    13f6:	06af      	lsls	r7, r5, #26
    13f8:	09a9      	lsrs	r1, r5, #6
    13fa:	407b      	eors	r3, r7
    13fc:	06a7      	lsls	r7, r4, #26
    13fe:	4079      	eors	r1, r7
    1400:	0867      	lsrs	r7, r4, #1
    1402:	407b      	eors	r3, r7
    1404:	07ef      	lsls	r7, r5, #31
    1406:	407b      	eors	r3, r7
    1408:	086f      	lsrs	r7, r5, #1
    140a:	4079      	eors	r1, r7
    140c:	07e7      	lsls	r7, r4, #31
    140e:	4079      	eors	r1, r7
    1410:	405c      	eors	r4, r3
    1412:	404d      	eors	r5, r1
    1414:	00d3      	lsls	r3, r2, #3
    1416:	0f77      	lsrs	r7, r6, #29
    1418:	00f1      	lsls	r1, r6, #3
    141a:	407b      	eors	r3, r7
    141c:	0f57      	lsrs	r7, r2, #29
    141e:	4079      	eors	r1, r7
    1420:	0657      	lsls	r7, r2, #25
    1422:	407b      	eors	r3, r7
    1424:	09f7      	lsrs	r7, r6, #7
    1426:	407b      	eors	r3, r7
    1428:	0677      	lsls	r7, r6, #25
    142a:	4079      	eors	r1, r7
    142c:	09d7      	lsrs	r7, r2, #7
    142e:	4079      	eors	r1, r7
    1430:	405a      	eors	r2, r3
    1432:	404e      	eors	r6, r1
    1434:	465b      	mov	r3, fp
    1436:	46b3      	mov	fp, r6
    1438:	05c6      	lsls	r6, r0, #23
    143a:	0a5f      	lsrs	r7, r3, #9
    143c:	05d9      	lsls	r1, r3, #23
    143e:	407e      	eors	r6, r7
    1440:	0a47      	lsrs	r7, r0, #9
    1442:	4079      	eors	r1, r7
    1444:	09c7      	lsrs	r7, r0, #7
    1446:	407e      	eors	r6, r7
    1448:	065f      	lsls	r7, r3, #25
    144a:	407e      	eors	r6, r7
    144c:	09df      	lsrs	r7, r3, #7
    144e:	4079      	eors	r1, r7
    1450:	0647      	lsls	r7, r0, #25
    1452:	4079      	eors	r1, r7
    1454:	4070      	eors	r0, r6
    1456:	404b      	eors	r3, r1
    1458:	465f      	mov	r7, fp
    145a:	464e      	mov	r6, r9
    145c:	4681      	mov	r9, r0
    145e:	4693      	mov	fp, r2
    1460:	4652      	mov	r2, sl
    1462:	46a2      	mov	sl, r4
    1464:	0c70      	lsrs	r0, r6, #17
    1466:	03d4      	lsls	r4, r2, #15
    1468:	0c51      	lsrs	r1, r2, #17
    146a:	4060      	eors	r0, r4
    146c:	03f4      	lsls	r4, r6, #15
    146e:	4061      	eors	r1, r4
    1470:	0ab4      	lsrs	r4, r6, #10
    1472:	4060      	eors	r0, r4
    1474:	0594      	lsls	r4, r2, #22
    1476:	4060      	eors	r0, r4
    1478:	0a94      	lsrs	r4, r2, #10
    147a:	4061      	eors	r1, r4
    147c:	05b4      	lsls	r4, r6, #22
    147e:	4061      	eors	r1, r4
    1480:	4046      	eors	r6, r0
    1482:	404a      	eors	r2, r1
    1484:	4661      	mov	r1, ip
    1486:	4644      	mov	r4, r8
    1488:	469c      	mov	ip, r3
    148a:	46d8      	mov	r8, fp
    148c:	46b3      	mov	fp, r6
    148e:	0f0b      	lsrs	r3, r1, #28
    1490:	0126      	lsls	r6, r4, #4
    1492:	0f20      	lsrs	r0, r4, #28
    1494:	4073      	eors	r3, r6
    1496:	010e      	lsls	r6, r1, #4
    1498:	4070      	eors	r0, r6
    149a:	0cce      	lsrs	r6, r1, #19
    149c:	4073      	eors	r3, r6
    149e:	0366      	lsls	r6, r4, #13
    14a0:	4073      	eors	r3, r6
    14a2:	0ce6      	lsrs	r6, r4, #19
    14a4:	4070      	eors	r0, r6
    14a6:	034e      	lsls	r6, r1, #13
    14a8:	4070      	eors	r0, r6
    14aa:	bc40      	pop	{r6}
    14ac:	4059      	eors	r1, r3
    14ae:	4044      	eors	r4, r0
    14b0:	4663      	mov	r3, ip
    14b2:	468c      	mov	ip, r1
    14b4:	3e0f      	subs	r6, #15
    14b6:	2e3c      	cmp	r6, #60	; 0x3c
    14b8:	d000      	beq.n	14bc <rend_301>
    14ba:	e763      	b.n	1384 <rbegin_301>

000014bc <rend_301>:
    14bc:	4649      	mov	r1, r9
    14be:	4658      	mov	r0, fp
    14c0:	4646      	mov	r6, r8
    14c2:	941a      	str	r4, [sp, #104]	; 0x68
    14c4:	4664      	mov	r4, ip
    14c6:	941b      	str	r4, [sp, #108]	; 0x6c
    14c8:	971c      	str	r7, [sp, #112]	; 0x70
    14ca:	961d      	str	r6, [sp, #116]	; 0x74
    14cc:	951e      	str	r5, [sp, #120]	; 0x78
    14ce:	4655      	mov	r5, sl
    14d0:	951f      	str	r5, [sp, #124]	; 0x7c
  s->x[3] ^= key->x[0];
    14d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
    14d4:	4062      	eors	r2, r4
    14d6:	9220      	str	r2, [sp, #128]	; 0x80
    14d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
    14da:	4060      	eors	r0, r4
    14dc:	9021      	str	r0, [sp, #132]	; 0x84
  s->x[4] ^= key->x[1];
    14de:	9c14      	ldr	r4, [sp, #80]	; 0x50
    14e0:	4063      	eors	r3, r4
    14e2:	9322      	str	r3, [sp, #136]	; 0x88
    14e4:	9c15      	ldr	r4, [sp, #84]	; 0x54
    14e6:	4061      	eors	r1, r4
    14e8:	9123      	str	r1, [sp, #140]	; 0x8c
  /* perform ascon computation */
  ascon_key_t key;
  ascon_loadkey(&key, k);
  ascon_initaead(&s, &key, npub);
  //ascon_adata(&s, ad, adlen);
  ascon_encrypt(&s, c, m, mlen);
    14ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    14ec:	930e      	str	r3, [sp, #56]	; 0x38
    14ee:	2300      	movs	r3, #0
    14f0:	930f      	str	r3, [sp, #60]	; 0x3c
  while (mlen >= ASCON_AEAD_RATE) {
    14f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    14f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    14f6:	2c00      	cmp	r4, #0
    14f8:	d001      	beq.n	14fe <rend_301+0x42>
    14fa:	f000 fad7 	bl	1aac <rend_873+0x6a>
    14fe:	2b07      	cmp	r3, #7
    1500:	d801      	bhi.n	1506 <rend_301+0x4a>
    1502:	f000 fad3 	bl	1aac <rend_873+0x6a>
    1506:	9304      	str	r3, [sp, #16]
    1508:	9405      	str	r4, [sp, #20]
    150a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    150c:	4698      	mov	r8, r3
    150e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    1510:	23ff      	movs	r3, #255	; 0xff
    1512:	041b      	lsls	r3, r3, #16
    1514:	9303      	str	r3, [sp, #12]
    1516:	23ff      	movs	r3, #255	; 0xff
    1518:	021b      	lsls	r3, r3, #8
    151a:	9310      	str	r3, [sp, #64]	; 0x40
    mlen -= ASCON_AEAD_RATE;
    151c:	9701      	str	r7, [sp, #4]
    151e:	4643      	mov	r3, r8
    1520:	9302      	str	r3, [sp, #8]
    1522:	e001      	b.n	1528 <rend_301+0x6c>
    1524:	80400c06 	.word	0x80400c06
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    1528:	9b01      	ldr	r3, [sp, #4]
    152a:	681e      	ldr	r6, [r3, #0]
    152c:	6859      	ldr	r1, [r3, #4]
  return U64TOWORD(x);
    152e:	0633      	lsls	r3, r6, #24
    1530:	0e0a      	lsrs	r2, r1, #24
    1532:	0230      	lsls	r0, r6, #8
    1534:	9c03      	ldr	r4, [sp, #12]
    1536:	4020      	ands	r0, r4
    1538:	4303      	orrs	r3, r0
    153a:	0a37      	lsrs	r7, r6, #8
    153c:	0608      	lsls	r0, r1, #24
    153e:	4338      	orrs	r0, r7
    1540:	9d10      	ldr	r5, [sp, #64]	; 0x40
    1542:	4028      	ands	r0, r5
    1544:	4303      	orrs	r3, r0
    1546:	0e36      	lsrs	r6, r6, #24
    1548:	0208      	lsls	r0, r1, #8
    154a:	4330      	orrs	r0, r6
    154c:	27ff      	movs	r7, #255	; 0xff
    154e:	4038      	ands	r0, r7
    1550:	4303      	orrs	r3, r0
    1552:	0a08      	lsrs	r0, r1, #8
    1554:	060f      	lsls	r7, r1, #24
    1556:	433a      	orrs	r2, r7
    1558:	0209      	lsls	r1, r1, #8
    155a:	4331      	orrs	r1, r6
    155c:	4021      	ands	r1, r4
    155e:	430a      	orrs	r2, r1
    1560:	4028      	ands	r0, r5
    1562:	4302      	orrs	r2, r0
    s->x[0] ^= LOAD(m, 8);
    1564:	991a      	ldr	r1, [sp, #104]	; 0x68
    1566:	404a      	eors	r2, r1
    1568:	991b      	ldr	r1, [sp, #108]	; 0x6c
    156a:	404b      	eors	r3, r1
}

forceinline void STORE(uint8_t* bytes, uint64_t w, int n) {
  *(uint64_t*)bytes &= ~MASK(n);
  *(uint64_t*)bytes |= WORDTOU64(w);
    156c:	0611      	lsls	r1, r2, #24
    156e:	0e18      	lsrs	r0, r3, #24
    1570:	0216      	lsls	r6, r2, #8
    1572:	9403      	str	r4, [sp, #12]
    1574:	4026      	ands	r6, r4
    1576:	4331      	orrs	r1, r6
    1578:	0a17      	lsrs	r7, r2, #8
    157a:	061e      	lsls	r6, r3, #24
    157c:	433e      	orrs	r6, r7
    157e:	402e      	ands	r6, r5
    1580:	4331      	orrs	r1, r6
    1582:	0e16      	lsrs	r6, r2, #24
    1584:	46b4      	mov	ip, r6
    1586:	021e      	lsls	r6, r3, #8
    1588:	4667      	mov	r7, ip
    158a:	433e      	orrs	r6, r7
    158c:	27ff      	movs	r7, #255	; 0xff
    158e:	403e      	ands	r6, r7
    1590:	4331      	orrs	r1, r6
    1592:	0a1f      	lsrs	r7, r3, #8
    1594:	061e      	lsls	r6, r3, #24
    1596:	4330      	orrs	r0, r6
    1598:	021e      	lsls	r6, r3, #8
    159a:	4664      	mov	r4, ip
    159c:	4326      	orrs	r6, r4
    159e:	9c03      	ldr	r4, [sp, #12]
    15a0:	4026      	ands	r6, r4
    15a2:	4330      	orrs	r0, r6
    15a4:	402f      	ands	r7, r5
    15a6:	4338      	orrs	r0, r7
    15a8:	9c02      	ldr	r4, [sp, #8]
    15aa:	6020      	str	r0, [r4, #0]
    15ac:	6061      	str	r1, [r4, #4]
    15ae:	991c      	ldr	r1, [sp, #112]	; 0x70
    15b0:	9106      	str	r1, [sp, #24]
    15b2:	991d      	ldr	r1, [sp, #116]	; 0x74
    15b4:	9107      	str	r1, [sp, #28]
    15b6:	991e      	ldr	r1, [sp, #120]	; 0x78
    15b8:	9108      	str	r1, [sp, #32]
    15ba:	991f      	ldr	r1, [sp, #124]	; 0x7c
    15bc:	9109      	str	r1, [sp, #36]	; 0x24
    15be:	9920      	ldr	r1, [sp, #128]	; 0x80
    15c0:	910a      	str	r1, [sp, #40]	; 0x28
    15c2:	9921      	ldr	r1, [sp, #132]	; 0x84
    15c4:	910b      	str	r1, [sp, #44]	; 0x2c
    15c6:	9922      	ldr	r1, [sp, #136]	; 0x88
    15c8:	910c      	str	r1, [sp, #48]	; 0x30
    15ca:	9923      	ldr	r1, [sp, #140]	; 0x8c
    15cc:	910d      	str	r1, [sp, #52]	; 0x34
    15ce:	9f06      	ldr	r7, [sp, #24]
    15d0:	9e07      	ldr	r6, [sp, #28]
    15d2:	9908      	ldr	r1, [sp, #32]
    15d4:	468a      	mov	sl, r1
    15d6:	9809      	ldr	r0, [sp, #36]	; 0x24
    15d8:	990a      	ldr	r1, [sp, #40]	; 0x28
    15da:	468b      	mov	fp, r1
    15dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    15de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    15e0:	0025      	movs	r5, r4
    15e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    15e4:	46a0      	mov	r8, r4
    15e6:	2496      	movs	r4, #150	; 0x96
    15e8:	469c      	mov	ip, r3
    15ea:	46b1      	mov	r9, r6
    15ec:	4653      	mov	r3, sl
    15ee:	4682      	mov	sl, r0
    15f0:	4658      	mov	r0, fp
    15f2:	468b      	mov	fp, r1
    15f4:	0029      	movs	r1, r5

000015f6 <rbegin_538>:
    15f6:	4063      	eors	r3, r4
    15f8:	b410      	push	{r4}
    15fa:	404a      	eors	r2, r1
    15fc:	4041      	eors	r1, r0
    15fe:	407b      	eors	r3, r7
    1600:	43d6      	mvns	r6, r2
    1602:	430e      	orrs	r6, r1
    1604:	1c1c      	adds	r4, r3, #0
    1606:	43bc      	bics	r4, r7
    1608:	4062      	eors	r2, r4
    160a:	43cc      	mvns	r4, r1
    160c:	4304      	orrs	r4, r0
    160e:	4063      	eors	r3, r4
    1610:	1c3c      	adds	r4, r7, #0
    1612:	4394      	bics	r4, r2
    1614:	4061      	eors	r1, r4
    1616:	1c04      	adds	r4, r0, #0
    1618:	401c      	ands	r4, r3
    161a:	407c      	eors	r4, r7
    161c:	4046      	eors	r6, r0
    161e:	405e      	eors	r6, r3
    1620:	4054      	eors	r4, r2
    1622:	404a      	eors	r2, r1
    1624:	4667      	mov	r7, ip
    1626:	4648      	mov	r0, r9
    1628:	469c      	mov	ip, r3
    162a:	4691      	mov	r9, r2
    162c:	4652      	mov	r2, sl
    162e:	465b      	mov	r3, fp
    1630:	4645      	mov	r5, r8
    1632:	46b2      	mov	sl, r6
    1634:	468b      	mov	fp, r1
    1636:	406f      	eors	r7, r5
    1638:	405d      	eors	r5, r3
    163a:	4042      	eors	r2, r0
    163c:	43fe      	mvns	r6, r7
    163e:	432e      	orrs	r6, r5
    1640:	1c11      	adds	r1, r2, #0
    1642:	4381      	bics	r1, r0
    1644:	404f      	eors	r7, r1
    1646:	43e9      	mvns	r1, r5
    1648:	4319      	orrs	r1, r3
    164a:	404a      	eors	r2, r1
    164c:	1c01      	adds	r1, r0, #0
    164e:	43b9      	bics	r1, r7
    1650:	404d      	eors	r5, r1
    1652:	1c19      	adds	r1, r3, #0
    1654:	4011      	ands	r1, r2
    1656:	4048      	eors	r0, r1
    1658:	4073      	eors	r3, r6
    165a:	4053      	eors	r3, r2
    165c:	4078      	eors	r0, r7
    165e:	406f      	eors	r7, r5
    1660:	4698      	mov	r8, r3
    1662:	4663      	mov	r3, ip
    1664:	46bc      	mov	ip, r7
    1666:	0991      	lsrs	r1, r2, #6
    1668:	069f      	lsls	r7, r3, #26
    166a:	099e      	lsrs	r6, r3, #6
    166c:	4079      	eors	r1, r7
    166e:	0697      	lsls	r7, r2, #26
    1670:	407e      	eors	r6, r7
    1672:	0857      	lsrs	r7, r2, #1
    1674:	4079      	eors	r1, r7
    1676:	07df      	lsls	r7, r3, #31
    1678:	4079      	eors	r1, r7
    167a:	085f      	lsrs	r7, r3, #1
    167c:	407e      	eors	r6, r7
    167e:	07d7      	lsls	r7, r2, #31
    1680:	407e      	eors	r6, r7
    1682:	404a      	eors	r2, r1
    1684:	4073      	eors	r3, r6
    1686:	00c1      	lsls	r1, r0, #3
    1688:	0f67      	lsrs	r7, r4, #29
    168a:	00e6      	lsls	r6, r4, #3
    168c:	4079      	eors	r1, r7
    168e:	0f47      	lsrs	r7, r0, #29
    1690:	407e      	eors	r6, r7
    1692:	0647      	lsls	r7, r0, #25
    1694:	4079      	eors	r1, r7
    1696:	09e7      	lsrs	r7, r4, #7
    1698:	4079      	eors	r1, r7
    169a:	0667      	lsls	r7, r4, #25
    169c:	407e      	eors	r6, r7
    169e:	09c7      	lsrs	r7, r0, #7
    16a0:	407e      	eors	r6, r7
    16a2:	4048      	eors	r0, r1
    16a4:	4074      	eors	r4, r6
    16a6:	4659      	mov	r1, fp
    16a8:	46a3      	mov	fp, r4
    16aa:	05ec      	lsls	r4, r5, #23
    16ac:	0a4f      	lsrs	r7, r1, #9
    16ae:	05ce      	lsls	r6, r1, #23
    16b0:	407c      	eors	r4, r7
    16b2:	0a6f      	lsrs	r7, r5, #9
    16b4:	407e      	eors	r6, r7
    16b6:	09ef      	lsrs	r7, r5, #7
    16b8:	407c      	eors	r4, r7
    16ba:	064f      	lsls	r7, r1, #25
    16bc:	407c      	eors	r4, r7
    16be:	09cf      	lsrs	r7, r1, #7
    16c0:	407e      	eors	r6, r7
    16c2:	066f      	lsls	r7, r5, #25
    16c4:	407e      	eors	r6, r7
    16c6:	4065      	eors	r5, r4
    16c8:	4071      	eors	r1, r6
    16ca:	465f      	mov	r7, fp
    16cc:	4644      	mov	r4, r8
    16ce:	46a8      	mov	r8, r5
    16d0:	4683      	mov	fp, r0
    16d2:	4650      	mov	r0, sl
    16d4:	4692      	mov	sl, r2
    16d6:	0c65      	lsrs	r5, r4, #17
    16d8:	03c2      	lsls	r2, r0, #15
    16da:	0c46      	lsrs	r6, r0, #17
    16dc:	4055      	eors	r5, r2
    16de:	03e2      	lsls	r2, r4, #15
    16e0:	4056      	eors	r6, r2
    16e2:	0aa2      	lsrs	r2, r4, #10
    16e4:	4055      	eors	r5, r2
    16e6:	0582      	lsls	r2, r0, #22
    16e8:	4055      	eors	r5, r2
    16ea:	0a82      	lsrs	r2, r0, #10
    16ec:	4056      	eors	r6, r2
    16ee:	05a2      	lsls	r2, r4, #22
    16f0:	4056      	eors	r6, r2
    16f2:	406c      	eors	r4, r5
    16f4:	4070      	eors	r0, r6
    16f6:	4666      	mov	r6, ip
    16f8:	464a      	mov	r2, r9
    16fa:	468c      	mov	ip, r1
    16fc:	46d9      	mov	r9, fp
    16fe:	46a3      	mov	fp, r4
    1700:	0f31      	lsrs	r1, r6, #28
    1702:	0114      	lsls	r4, r2, #4
    1704:	0f15      	lsrs	r5, r2, #28
    1706:	4061      	eors	r1, r4
    1708:	0134      	lsls	r4, r6, #4
    170a:	4065      	eors	r5, r4
    170c:	0cf4      	lsrs	r4, r6, #19
    170e:	4061      	eors	r1, r4
    1710:	0354      	lsls	r4, r2, #13
    1712:	4061      	eors	r1, r4
    1714:	0cd4      	lsrs	r4, r2, #19
    1716:	4065      	eors	r5, r4
    1718:	0374      	lsls	r4, r6, #13
    171a:	4065      	eors	r5, r4
    171c:	bc10      	pop	{r4}
    171e:	404e      	eors	r6, r1
    1720:	406a      	eors	r2, r5
    1722:	4661      	mov	r1, ip
    1724:	46b4      	mov	ip, r6
    1726:	3c0f      	subs	r4, #15
    1728:	2c3c      	cmp	r4, #60	; 0x3c
    172a:	d000      	beq.n	172e <rend_538>
    172c:	e763      	b.n	15f6 <rbegin_538>

0000172e <rend_538>:
    172e:	000d      	movs	r5, r1
    1730:	4659      	mov	r1, fp
    1732:	4683      	mov	fp, r0
    1734:	4650      	mov	r0, sl
    1736:	001c      	movs	r4, r3
    1738:	464e      	mov	r6, r9
    173a:	4663      	mov	r3, ip
    173c:	921a      	str	r2, [sp, #104]	; 0x68
    173e:	931b      	str	r3, [sp, #108]	; 0x6c
    1740:	971c      	str	r7, [sp, #112]	; 0x70
    1742:	961d      	str	r6, [sp, #116]	; 0x74
    1744:	941e      	str	r4, [sp, #120]	; 0x78
    1746:	901f      	str	r0, [sp, #124]	; 0x7c
    1748:	4658      	mov	r0, fp
    174a:	9020      	str	r0, [sp, #128]	; 0x80
    174c:	9121      	str	r1, [sp, #132]	; 0x84
    174e:	9522      	str	r5, [sp, #136]	; 0x88
    1750:	4643      	mov	r3, r8
    1752:	9323      	str	r3, [sp, #140]	; 0x8c
    m += ASCON_AEAD_RATE;
    1754:	9b01      	ldr	r3, [sp, #4]
    1756:	3308      	adds	r3, #8
    1758:	9301      	str	r3, [sp, #4]
    c += ASCON_AEAD_RATE;
    175a:	9b02      	ldr	r3, [sp, #8]
    175c:	3308      	adds	r3, #8
    175e:	9302      	str	r3, [sp, #8]
    mlen -= ASCON_AEAD_RATE;
    1760:	9a04      	ldr	r2, [sp, #16]
    1762:	9b05      	ldr	r3, [sp, #20]
    1764:	2008      	movs	r0, #8
    1766:	4240      	negs	r0, r0
    1768:	17c1      	asrs	r1, r0, #31
    176a:	1812      	adds	r2, r2, r0
    176c:	414b      	adcs	r3, r1
    176e:	9204      	str	r2, [sp, #16]
    1770:	9305      	str	r3, [sp, #20]
  while (mlen >= ASCON_AEAD_RATE) {
    1772:	2b00      	cmp	r3, #0
    1774:	d000      	beq.n	1778 <rend_538+0x4a>
    1776:	e6d7      	b.n	1528 <rend_301+0x6c>
    1778:	9b04      	ldr	r3, [sp, #16]
    177a:	9c05      	ldr	r4, [sp, #20]
    177c:	2c00      	cmp	r4, #0
    177e:	d102      	bne.n	1786 <rend_538+0x58>
    1780:	2b07      	cmp	r3, #7
    1782:	d900      	bls.n	1786 <rend_538+0x58>
    1784:	e6d0      	b.n	1528 <rend_301+0x6c>
    1786:	2208      	movs	r2, #8
    1788:	4252      	negs	r2, r2
    178a:	17d3      	asrs	r3, r2, #31
    178c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    178e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    1790:	18b6      	adds	r6, r6, r2
    1792:	415f      	adcs	r7, r3
    1794:	0779      	lsls	r1, r7, #29
    1796:	08f0      	lsrs	r0, r6, #3
    1798:	4308      	orrs	r0, r1
    179a:	08f9      	lsrs	r1, r7, #3
    179c:	1c44      	adds	r4, r0, #1
    179e:	00e4      	lsls	r4, r4, #3
    17a0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    17a2:	46ac      	mov	ip, r5
    17a4:	44a4      	add	ip, r4
    17a6:	4665      	mov	r5, ip
    17a8:	9513      	str	r5, [sp, #76]	; 0x4c
    17aa:	9d16      	ldr	r5, [sp, #88]	; 0x58
    17ac:	46ac      	mov	ip, r5
    17ae:	4464      	add	r4, ip
    17b0:	4d46      	ldr	r5, [pc, #280]	; (18cc <rend_538+0x19e>)
    17b2:	47a8      	blx	r5
    17b4:	1980      	adds	r0, r0, r6
    17b6:	4179      	adcs	r1, r7
    17b8:	900e      	str	r0, [sp, #56]	; 0x38
    17ba:	910f      	str	r1, [sp, #60]	; 0x3c
  *px ^= PAD(mlen);
    17bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    17be:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    17c0:	002b      	movs	r3, r5
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
    17c2:	2107      	movs	r1, #7
    17c4:	1b49      	subs	r1, r1, r5
    17c6:	00c9      	lsls	r1, r1, #3
    17c8:	2220      	movs	r2, #32
    17ca:	4252      	negs	r2, r2
    17cc:	1888      	adds	r0, r1, r2
    17ce:	d500      	bpl.n	17d2 <rend_538+0xa4>
    17d0:	e16e      	b.n	1ab0 <rend_873+0x6e>
    17d2:	2580      	movs	r5, #128	; 0x80
    17d4:	4085      	lsls	r5, r0
    17d6:	2680      	movs	r6, #128	; 0x80
    17d8:	408e      	lsls	r6, r1
    17da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    17dc:	4056      	eors	r6, r2
    17de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    17e0:	4055      	eors	r5, r2
    17e2:	961a      	str	r6, [sp, #104]	; 0x68
    17e4:	951b      	str	r5, [sp, #108]	; 0x6c
  if (mlen) {
    17e6:	990e      	ldr	r1, [sp, #56]	; 0x38
    17e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    17ea:	0008      	movs	r0, r1
    17ec:	4310      	orrs	r0, r2
    17ee:	d06f      	beq.n	18d0 <rend_538+0x1a2>
  return ~(uint64_t)0 >> (64 - 8 * n);
    17f0:	2208      	movs	r2, #8
    17f2:	1ad3      	subs	r3, r2, r3
    17f4:	00db      	lsls	r3, r3, #3
    17f6:	3a28      	subs	r2, #40	; 0x28
    17f8:	189a      	adds	r2, r3, r2
    17fa:	d500      	bpl.n	17fe <rend_538+0xd0>
    17fc:	e15d      	b.n	1aba <rend_873+0x78>
    17fe:	2001      	movs	r0, #1
    1800:	4240      	negs	r0, r0
    1802:	40d0      	lsrs	r0, r2
    1804:	9001      	str	r0, [sp, #4]
    1806:	2201      	movs	r2, #1
    1808:	4252      	negs	r2, r2
    180a:	40da      	lsrs	r2, r3
    180c:	4690      	mov	r8, r2
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    180e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1810:	681a      	ldr	r2, [r3, #0]
    1812:	0011      	movs	r1, r2
    1814:	9a01      	ldr	r2, [sp, #4]
    1816:	4011      	ands	r1, r2
    1818:	685b      	ldr	r3, [r3, #4]
    181a:	4642      	mov	r2, r8
    181c:	4013      	ands	r3, r2
  return U64TOWORD(x);
    181e:	060f      	lsls	r7, r1, #24
    1820:	0e1a      	lsrs	r2, r3, #24
    1822:	9202      	str	r2, [sp, #8]
    1824:	020a      	lsls	r2, r1, #8
    1826:	20ff      	movs	r0, #255	; 0xff
    1828:	0400      	lsls	r0, r0, #16
    182a:	4684      	mov	ip, r0
    182c:	4002      	ands	r2, r0
    182e:	4317      	orrs	r7, r2
    1830:	46b9      	mov	r9, r7
    1832:	0a0f      	lsrs	r7, r1, #8
    1834:	061a      	lsls	r2, r3, #24
    1836:	433a      	orrs	r2, r7
    1838:	20ff      	movs	r0, #255	; 0xff
    183a:	0200      	lsls	r0, r0, #8
    183c:	4002      	ands	r2, r0
    183e:	464f      	mov	r7, r9
    1840:	4317      	orrs	r7, r2
    1842:	0e09      	lsrs	r1, r1, #24
    1844:	021a      	lsls	r2, r3, #8
    1846:	430a      	orrs	r2, r1
    1848:	20ff      	movs	r0, #255	; 0xff
    184a:	4683      	mov	fp, r0
    184c:	4002      	ands	r2, r0
    184e:	433a      	orrs	r2, r7
    1850:	0a18      	lsrs	r0, r3, #8
    1852:	4681      	mov	r9, r0
    1854:	0618      	lsls	r0, r3, #24
    1856:	9f02      	ldr	r7, [sp, #8]
    1858:	4307      	orrs	r7, r0
    185a:	021b      	lsls	r3, r3, #8
    185c:	430b      	orrs	r3, r1
    185e:	4661      	mov	r1, ip
    1860:	400b      	ands	r3, r1
    1862:	433b      	orrs	r3, r7
    1864:	4649      	mov	r1, r9
    1866:	20ff      	movs	r0, #255	; 0xff
    1868:	0200      	lsls	r0, r0, #8
    186a:	4001      	ands	r1, r0
    186c:	430b      	orrs	r3, r1
    *px ^= LOAD(m, mlen);
    186e:	405e      	eors	r6, r3
    1870:	406a      	eors	r2, r5
    1872:	961a      	str	r6, [sp, #104]	; 0x68
    1874:	921b      	str	r2, [sp, #108]	; 0x6c
  *(uint64_t*)bytes &= ~MASK(n);
    1876:	6823      	ldr	r3, [r4, #0]
    1878:	9901      	ldr	r1, [sp, #4]
    187a:	438b      	bics	r3, r1
    187c:	0018      	movs	r0, r3
    187e:	6863      	ldr	r3, [r4, #4]
    1880:	4641      	mov	r1, r8
    1882:	438b      	bics	r3, r1
  *(uint64_t*)bytes |= WORDTOU64(w);
    1884:	0631      	lsls	r1, r6, #24
    1886:	0e15      	lsrs	r5, r2, #24
    1888:	4328      	orrs	r0, r5
    188a:	4319      	orrs	r1, r3
    188c:	0235      	lsls	r5, r6, #8
    188e:	4663      	mov	r3, ip
    1890:	401d      	ands	r5, r3
    1892:	4329      	orrs	r1, r5
    1894:	0a35      	lsrs	r5, r6, #8
    1896:	0613      	lsls	r3, r2, #24
    1898:	432b      	orrs	r3, r5
    189a:	25ff      	movs	r5, #255	; 0xff
    189c:	022d      	lsls	r5, r5, #8
    189e:	402b      	ands	r3, r5
    18a0:	4319      	orrs	r1, r3
    18a2:	0e36      	lsrs	r6, r6, #24
    18a4:	0215      	lsls	r5, r2, #8
    18a6:	4335      	orrs	r5, r6
    18a8:	465b      	mov	r3, fp
    18aa:	401d      	ands	r5, r3
    18ac:	4329      	orrs	r1, r5
    18ae:	0a15      	lsrs	r5, r2, #8
    18b0:	0613      	lsls	r3, r2, #24
    18b2:	4318      	orrs	r0, r3
    18b4:	0212      	lsls	r2, r2, #8
    18b6:	4316      	orrs	r6, r2
    18b8:	4663      	mov	r3, ip
    18ba:	401e      	ands	r6, r3
    18bc:	4330      	orrs	r0, r6
    18be:	27ff      	movs	r7, #255	; 0xff
    18c0:	023f      	lsls	r7, r7, #8
    18c2:	402f      	ands	r7, r5
    18c4:	4338      	orrs	r0, r7
    18c6:	6020      	str	r0, [r4, #0]
    18c8:	6061      	str	r1, [r4, #4]
    18ca:	e001      	b.n	18d0 <rend_538+0x1a2>
    18cc:	00006e75 	.word	0x00006e75
    s->x[1] ^= key->x[0];
    18d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    18d2:	0019      	movs	r1, r3
    18d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    18d6:	4059      	eors	r1, r3
    18d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    18da:	9812      	ldr	r0, [sp, #72]	; 0x48
    18dc:	4042      	eors	r2, r0
    18de:	4694      	mov	ip, r2
    s->x[2] ^= key->x[1];
    18e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    18e2:	9201      	str	r2, [sp, #4]
    18e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    18e6:	9c01      	ldr	r4, [sp, #4]
    18e8:	4062      	eors	r2, r4
    18ea:	0010      	movs	r0, r2
    18ec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    18ee:	9201      	str	r2, [sp, #4]
    18f0:	9e15      	ldr	r6, [sp, #84]	; 0x54
    18f2:	4056      	eors	r6, r2
    18f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    18f6:	4691      	mov	r9, r2
    18f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
    18fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
    18fc:	9c22      	ldr	r4, [sp, #136]	; 0x88
    18fe:	9f23      	ldr	r7, [sp, #140]	; 0x8c
    1900:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    1902:	46b0      	mov	r8, r6
    1904:	46ba      	mov	sl, r7
    1906:	26f0      	movs	r6, #240	; 0xf0
    1908:	469b      	mov	fp, r3

0000190a <rbegin_873>:
    190a:	4070      	eors	r0, r6
    190c:	b440      	push	{r6}
    190e:	4065      	eors	r5, r4
    1910:	4054      	eors	r4, r2
    1912:	4048      	eors	r0, r1
    1914:	43ef      	mvns	r7, r5
    1916:	4327      	orrs	r7, r4
    1918:	1c06      	adds	r6, r0, #0
    191a:	438e      	bics	r6, r1
    191c:	4075      	eors	r5, r6
    191e:	43e6      	mvns	r6, r4
    1920:	4316      	orrs	r6, r2
    1922:	4070      	eors	r0, r6
    1924:	1c0e      	adds	r6, r1, #0
    1926:	43ae      	bics	r6, r5
    1928:	4074      	eors	r4, r6
    192a:	1c16      	adds	r6, r2, #0
    192c:	4006      	ands	r6, r0
    192e:	404e      	eors	r6, r1
    1930:	4057      	eors	r7, r2
    1932:	4047      	eors	r7, r0
    1934:	406e      	eors	r6, r5
    1936:	4065      	eors	r5, r4
    1938:	4649      	mov	r1, r9
    193a:	4662      	mov	r2, ip
    193c:	4681      	mov	r9, r0
    193e:	46ac      	mov	ip, r5
    1940:	4645      	mov	r5, r8
    1942:	4658      	mov	r0, fp
    1944:	4653      	mov	r3, sl
    1946:	46b8      	mov	r8, r7
    1948:	46a3      	mov	fp, r4
    194a:	4059      	eors	r1, r3
    194c:	4043      	eors	r3, r0
    194e:	4055      	eors	r5, r2
    1950:	43cf      	mvns	r7, r1
    1952:	431f      	orrs	r7, r3
    1954:	1c2c      	adds	r4, r5, #0
    1956:	4394      	bics	r4, r2
    1958:	4061      	eors	r1, r4
    195a:	43dc      	mvns	r4, r3
    195c:	4304      	orrs	r4, r0
    195e:	4065      	eors	r5, r4
    1960:	1c14      	adds	r4, r2, #0
    1962:	438c      	bics	r4, r1
    1964:	4063      	eors	r3, r4
    1966:	1c04      	adds	r4, r0, #0
    1968:	402c      	ands	r4, r5
    196a:	4062      	eors	r2, r4
    196c:	4078      	eors	r0, r7
    196e:	4068      	eors	r0, r5
    1970:	404a      	eors	r2, r1
    1972:	4059      	eors	r1, r3
    1974:	4682      	mov	sl, r0
    1976:	4648      	mov	r0, r9
    1978:	4689      	mov	r9, r1
    197a:	09ac      	lsrs	r4, r5, #6
    197c:	0681      	lsls	r1, r0, #26
    197e:	0987      	lsrs	r7, r0, #6
    1980:	404c      	eors	r4, r1
    1982:	06a9      	lsls	r1, r5, #26
    1984:	404f      	eors	r7, r1
    1986:	0869      	lsrs	r1, r5, #1
    1988:	404c      	eors	r4, r1
    198a:	07c1      	lsls	r1, r0, #31
    198c:	404c      	eors	r4, r1
    198e:	0841      	lsrs	r1, r0, #1
    1990:	404f      	eors	r7, r1
    1992:	07e9      	lsls	r1, r5, #31
    1994:	404f      	eors	r7, r1
    1996:	4065      	eors	r5, r4
    1998:	4078      	eors	r0, r7
    199a:	00d4      	lsls	r4, r2, #3
    199c:	0f71      	lsrs	r1, r6, #29
    199e:	00f7      	lsls	r7, r6, #3
    19a0:	404c      	eors	r4, r1
    19a2:	0f51      	lsrs	r1, r2, #29
    19a4:	404f      	eors	r7, r1
    19a6:	0651      	lsls	r1, r2, #25
    19a8:	404c      	eors	r4, r1
    19aa:	09f1      	lsrs	r1, r6, #7
    19ac:	404c      	eors	r4, r1
    19ae:	0671      	lsls	r1, r6, #25
    19b0:	404f      	eors	r7, r1
    19b2:	09d1      	lsrs	r1, r2, #7
    19b4:	404f      	eors	r7, r1
    19b6:	4062      	eors	r2, r4
    19b8:	407e      	eors	r6, r7
    19ba:	465c      	mov	r4, fp
    19bc:	46b3      	mov	fp, r6
    19be:	05de      	lsls	r6, r3, #23
    19c0:	0a61      	lsrs	r1, r4, #9
    19c2:	05e7      	lsls	r7, r4, #23
    19c4:	404e      	eors	r6, r1
    19c6:	0a59      	lsrs	r1, r3, #9
    19c8:	404f      	eors	r7, r1
    19ca:	09d9      	lsrs	r1, r3, #7
    19cc:	404e      	eors	r6, r1
    19ce:	0661      	lsls	r1, r4, #25
    19d0:	404e      	eors	r6, r1
    19d2:	09e1      	lsrs	r1, r4, #7
    19d4:	404f      	eors	r7, r1
    19d6:	0659      	lsls	r1, r3, #25
    19d8:	404f      	eors	r7, r1
    19da:	4073      	eors	r3, r6
    19dc:	407c      	eors	r4, r7
    19de:	4659      	mov	r1, fp
    19e0:	4656      	mov	r6, sl
    19e2:	469a      	mov	sl, r3
    19e4:	4693      	mov	fp, r2
    19e6:	4642      	mov	r2, r8
    19e8:	46a8      	mov	r8, r5
    19ea:	0c73      	lsrs	r3, r6, #17
    19ec:	03d5      	lsls	r5, r2, #15
    19ee:	0c57      	lsrs	r7, r2, #17
    19f0:	406b      	eors	r3, r5
    19f2:	03f5      	lsls	r5, r6, #15
    19f4:	406f      	eors	r7, r5
    19f6:	0ab5      	lsrs	r5, r6, #10
    19f8:	406b      	eors	r3, r5
    19fa:	0595      	lsls	r5, r2, #22
    19fc:	406b      	eors	r3, r5
    19fe:	0a95      	lsrs	r5, r2, #10
    1a00:	406f      	eors	r7, r5
    1a02:	05b5      	lsls	r5, r6, #22
    1a04:	406f      	eors	r7, r5
    1a06:	405e      	eors	r6, r3
    1a08:	407a      	eors	r2, r7
    1a0a:	464f      	mov	r7, r9
    1a0c:	4665      	mov	r5, ip
    1a0e:	46a1      	mov	r9, r4
    1a10:	46dc      	mov	ip, fp
    1a12:	46b3      	mov	fp, r6
    1a14:	0f3c      	lsrs	r4, r7, #28
    1a16:	012e      	lsls	r6, r5, #4
    1a18:	0f2b      	lsrs	r3, r5, #28
    1a1a:	4074      	eors	r4, r6
    1a1c:	013e      	lsls	r6, r7, #4
    1a1e:	4073      	eors	r3, r6
    1a20:	0cfe      	lsrs	r6, r7, #19
    1a22:	4074      	eors	r4, r6
    1a24:	036e      	lsls	r6, r5, #13
    1a26:	4074      	eors	r4, r6
    1a28:	0cee      	lsrs	r6, r5, #19
    1a2a:	4073      	eors	r3, r6
    1a2c:	037e      	lsls	r6, r7, #13
    1a2e:	4073      	eors	r3, r6
    1a30:	bc40      	pop	{r6}
    1a32:	4067      	eors	r7, r4
    1a34:	405d      	eors	r5, r3
    1a36:	464c      	mov	r4, r9
    1a38:	46b9      	mov	r9, r7
    1a3a:	3e0f      	subs	r6, #15
    1a3c:	2e3c      	cmp	r6, #60	; 0x3c
    1a3e:	d000      	beq.n	1a42 <rend_873>
    1a40:	e763      	b.n	190a <rbegin_873>

00001a42 <rend_873>:
    1a42:	465b      	mov	r3, fp
  s->x[3] ^= key->x[0];
    1a44:	9911      	ldr	r1, [sp, #68]	; 0x44
    1a46:	404a      	eors	r2, r1
    1a48:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a4a:	4043      	eors	r3, r0
  memcpy(&x, bytes, n);
  return U64TOWORD(x);
}

forceinline void STOREBYTES(uint8_t* bytes, uint64_t w, int n) {
  uint64_t x = WORDTOU64(w);
    1a4c:	0611      	lsls	r1, r2, #24
    1a4e:	0e18      	lsrs	r0, r3, #24
    1a50:	0214      	lsls	r4, r2, #8
    1a52:	26ff      	movs	r6, #255	; 0xff
    1a54:	0436      	lsls	r6, r6, #16
    1a56:	4034      	ands	r4, r6
    1a58:	4321      	orrs	r1, r4
    1a5a:	0a15      	lsrs	r5, r2, #8
    1a5c:	061c      	lsls	r4, r3, #24
    1a5e:	432c      	orrs	r4, r5
    1a60:	25ff      	movs	r5, #255	; 0xff
    1a62:	022d      	lsls	r5, r5, #8
    1a64:	402c      	ands	r4, r5
    1a66:	4321      	orrs	r1, r4
    1a68:	0e12      	lsrs	r2, r2, #24
    1a6a:	021c      	lsls	r4, r3, #8
    1a6c:	4314      	orrs	r4, r2
    1a6e:	27ff      	movs	r7, #255	; 0xff
    1a70:	403c      	ands	r4, r7
    1a72:	4321      	orrs	r1, r4
    1a74:	0a1c      	lsrs	r4, r3, #8
    1a76:	061f      	lsls	r7, r3, #24
    1a78:	4338      	orrs	r0, r7
    1a7a:	021b      	lsls	r3, r3, #8
    1a7c:	4313      	orrs	r3, r2
    1a7e:	4033      	ands	r3, r6
    1a80:	4303      	orrs	r3, r0
    1a82:	4025      	ands	r5, r4
    1a84:	432b      	orrs	r3, r5
    1a86:	9318      	str	r3, [sp, #96]	; 0x60
    1a88:	9119      	str	r1, [sp, #100]	; 0x64
  ascon_final(&s, &key);
  /* set tag */
  STOREBYTES(c + mlen, s.x[3], 8);
    1a8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1a8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    1a8e:	4694      	mov	ip, r2
    1a90:	4463      	add	r3, ip
    1a92:	0018      	movs	r0, r3
  memcpy(bytes, &x, n);
    1a94:	2208      	movs	r2, #8
    1a96:	a918      	add	r1, sp, #96	; 0x60
    1a98:	4b0e      	ldr	r3, [pc, #56]	; (1ad4 <rend_873+0x92>)
    1a9a:	4798      	blx	r3
  //STOREBYTES(c + mlen + 8, s.x[4], 8);
  return 0;
}
    1a9c:	2000      	movs	r0, #0
    1a9e:	b025      	add	sp, #148	; 0x94
    1aa0:	bc3c      	pop	{r2, r3, r4, r5}
    1aa2:	4690      	mov	r8, r2
    1aa4:	4699      	mov	r9, r3
    1aa6:	46a2      	mov	sl, r4
    1aa8:	46ab      	mov	fp, r5
    1aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (mlen >= ASCON_AEAD_RATE) {
    1aac:	9c16      	ldr	r4, [sp, #88]	; 0x58
    1aae:	e685      	b.n	17bc <rend_538+0x8e>
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
    1ab0:	2020      	movs	r0, #32
    1ab2:	1a40      	subs	r0, r0, r1
    1ab4:	2580      	movs	r5, #128	; 0x80
    1ab6:	40c5      	lsrs	r5, r0
    1ab8:	e68d      	b.n	17d6 <rend_538+0xa8>
  return ~(uint64_t)0 >> (64 - 8 * n);
    1aba:	2220      	movs	r2, #32
    1abc:	1ad2      	subs	r2, r2, r3
    1abe:	2001      	movs	r0, #1
    1ac0:	4240      	negs	r0, r0
    1ac2:	0001      	movs	r1, r0
    1ac4:	4091      	lsls	r1, r2
    1ac6:	000a      	movs	r2, r1
    1ac8:	40d8      	lsrs	r0, r3
    1aca:	0001      	movs	r1, r0
    1acc:	4311      	orrs	r1, r2
    1ace:	9101      	str	r1, [sp, #4]
    1ad0:	e699      	b.n	1806 <rend_538+0xd8>
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	00006f6f 	.word	0x00006f6f

00001ad8 <crypto_aead_decrypt>:

int crypto_aead_decrypt(unsigned char* m, unsigned long* mlen,
                        unsigned char* nsec, const unsigned char* c,
                        unsigned long clen, const unsigned char* ad,
                        unsigned long adlen, const unsigned char* npub,
                        const unsigned char* k) {
    1ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ada:	46de      	mov	lr, fp
    1adc:	4657      	mov	r7, sl
    1ade:	464e      	mov	r6, r9
    1ae0:	4645      	mov	r5, r8
    1ae2:	b5e0      	push	{r5, r6, r7, lr}
    1ae4:	b0a3      	sub	sp, #140	; 0x8c
    1ae6:	900f      	str	r0, [sp, #60]	; 0x3c
    1ae8:	9314      	str	r3, [sp, #80]	; 0x50
    1aea:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    1aec:	4694      	mov	ip, r2
    1aee:	9830      	ldr	r0, [sp, #192]	; 0xc0
  ascon_state_t s;
  (void)nsec;
  if (clen < CRYPTO_ABYTES) return -1;
    1af0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1af2:	2a07      	cmp	r2, #7
    1af4:	d801      	bhi.n	1afa <crypto_aead_decrypt+0x22>
    1af6:	f000 fc86 	bl	2406 <rend_1990+0xc8>
  *mlen = clen = clen - CRYPTO_ABYTES;
    1afa:	3a08      	subs	r2, #8
    1afc:	9215      	str	r2, [sp, #84]	; 0x54
    1afe:	600a      	str	r2, [r1, #0]
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    1b00:	6802      	ldr	r2, [r0, #0]
    1b02:	6843      	ldr	r3, [r0, #4]
  return U64TOWORD(x);
    1b04:	0611      	lsls	r1, r2, #24
    1b06:	0e1d      	lsrs	r5, r3, #24
    1b08:	0214      	lsls	r4, r2, #8
    1b0a:	27ff      	movs	r7, #255	; 0xff
    1b0c:	043f      	lsls	r7, r7, #16
    1b0e:	403c      	ands	r4, r7
    1b10:	430c      	orrs	r4, r1
    1b12:	0a16      	lsrs	r6, r2, #8
    1b14:	0619      	lsls	r1, r3, #24
    1b16:	4331      	orrs	r1, r6
    1b18:	26ff      	movs	r6, #255	; 0xff
    1b1a:	0236      	lsls	r6, r6, #8
    1b1c:	4031      	ands	r1, r6
    1b1e:	430c      	orrs	r4, r1
    1b20:	46a1      	mov	r9, r4
    1b22:	0e12      	lsrs	r2, r2, #24
    1b24:	0219      	lsls	r1, r3, #8
    1b26:	4311      	orrs	r1, r2
    1b28:	4688      	mov	r8, r1
    1b2a:	21ff      	movs	r1, #255	; 0xff
    1b2c:	468b      	mov	fp, r1
    1b2e:	4641      	mov	r1, r8
    1b30:	465c      	mov	r4, fp
    1b32:	4021      	ands	r1, r4
    1b34:	464c      	mov	r4, r9
    1b36:	4321      	orrs	r1, r4
    1b38:	9111      	str	r1, [sp, #68]	; 0x44
    1b3a:	0a1c      	lsrs	r4, r3, #8
    1b3c:	46a0      	mov	r8, r4
    1b3e:	061c      	lsls	r4, r3, #24
    1b40:	432c      	orrs	r4, r5
    1b42:	021b      	lsls	r3, r3, #8
    1b44:	431a      	orrs	r2, r3
    1b46:	403a      	ands	r2, r7
    1b48:	4314      	orrs	r4, r2
    1b4a:	4645      	mov	r5, r8
    1b4c:	4035      	ands	r5, r6
    1b4e:	432c      	orrs	r4, r5
    1b50:	9410      	str	r4, [sp, #64]	; 0x40
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    1b52:	6882      	ldr	r2, [r0, #8]
    1b54:	68c3      	ldr	r3, [r0, #12]
  return U64TOWORD(x);
    1b56:	0610      	lsls	r0, r2, #24
    1b58:	0e1d      	lsrs	r5, r3, #24
    1b5a:	0214      	lsls	r4, r2, #8
    1b5c:	403c      	ands	r4, r7
    1b5e:	4304      	orrs	r4, r0
    1b60:	0a11      	lsrs	r1, r2, #8
    1b62:	0618      	lsls	r0, r3, #24
    1b64:	4308      	orrs	r0, r1
    1b66:	4030      	ands	r0, r6
    1b68:	4304      	orrs	r4, r0
    1b6a:	0e12      	lsrs	r2, r2, #24
    1b6c:	0218      	lsls	r0, r3, #8
    1b6e:	4310      	orrs	r0, r2
    1b70:	4659      	mov	r1, fp
    1b72:	4008      	ands	r0, r1
    1b74:	4304      	orrs	r4, r0
    1b76:	9413      	str	r4, [sp, #76]	; 0x4c
    1b78:	0a1c      	lsrs	r4, r3, #8
    1b7a:	0618      	lsls	r0, r3, #24
    1b7c:	4305      	orrs	r5, r0
    1b7e:	021b      	lsls	r3, r3, #8
    1b80:	431a      	orrs	r2, r3
    1b82:	403a      	ands	r2, r7
    1b84:	432a      	orrs	r2, r5
    1b86:	4034      	ands	r4, r6
    1b88:	0015      	movs	r5, r2
    1b8a:	4325      	orrs	r5, r4
    1b8c:	9512      	str	r5, [sp, #72]	; 0x48
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    1b8e:	4661      	mov	r1, ip
    1b90:	680c      	ldr	r4, [r1, #0]
    1b92:	684b      	ldr	r3, [r1, #4]
  return U64TOWORD(x);
    1b94:	0625      	lsls	r5, r4, #24
    1b96:	0e1a      	lsrs	r2, r3, #24
    1b98:	0220      	lsls	r0, r4, #8
    1b9a:	4038      	ands	r0, r7
    1b9c:	4328      	orrs	r0, r5
    1b9e:	0a21      	lsrs	r1, r4, #8
    1ba0:	061d      	lsls	r5, r3, #24
    1ba2:	430d      	orrs	r5, r1
    1ba4:	4035      	ands	r5, r6
    1ba6:	4328      	orrs	r0, r5
    1ba8:	0e24      	lsrs	r4, r4, #24
    1baa:	021d      	lsls	r5, r3, #8
    1bac:	4325      	orrs	r5, r4
    1bae:	4659      	mov	r1, fp
    1bb0:	400d      	ands	r5, r1
    1bb2:	4328      	orrs	r0, r5
    1bb4:	0a1d      	lsrs	r5, r3, #8
    1bb6:	0619      	lsls	r1, r3, #24
    1bb8:	430a      	orrs	r2, r1
    1bba:	021b      	lsls	r3, r3, #8
    1bbc:	431c      	orrs	r4, r3
    1bbe:	403c      	ands	r4, r7
    1bc0:	4322      	orrs	r2, r4
    1bc2:	4035      	ands	r5, r6
    1bc4:	0011      	movs	r1, r2
    1bc6:	4329      	orrs	r1, r5
    1bc8:	468a      	mov	sl, r1
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    1bca:	4661      	mov	r1, ip
    1bcc:	688d      	ldr	r5, [r1, #8]
    1bce:	68cc      	ldr	r4, [r1, #12]
  return U64TOWORD(x);
    1bd0:	062a      	lsls	r2, r5, #24
    1bd2:	0e21      	lsrs	r1, r4, #24
    1bd4:	4688      	mov	r8, r1
    1bd6:	022b      	lsls	r3, r5, #8
    1bd8:	403b      	ands	r3, r7
    1bda:	431a      	orrs	r2, r3
    1bdc:	0a29      	lsrs	r1, r5, #8
    1bde:	0623      	lsls	r3, r4, #24
    1be0:	430b      	orrs	r3, r1
    1be2:	4033      	ands	r3, r6
    1be4:	4313      	orrs	r3, r2
    1be6:	0e2d      	lsrs	r5, r5, #24
    1be8:	0222      	lsls	r2, r4, #8
    1bea:	432a      	orrs	r2, r5
    1bec:	4659      	mov	r1, fp
    1bee:	4011      	ands	r1, r2
    1bf0:	4319      	orrs	r1, r3
    1bf2:	0a23      	lsrs	r3, r4, #8
    1bf4:	469c      	mov	ip, r3
    1bf6:	0623      	lsls	r3, r4, #24
    1bf8:	4642      	mov	r2, r8
    1bfa:	4313      	orrs	r3, r2
    1bfc:	0224      	lsls	r4, r4, #8
    1bfe:	4325      	orrs	r5, r4
    1c00:	403d      	ands	r5, r7
    1c02:	432b      	orrs	r3, r5
    1c04:	4667      	mov	r7, ip
    1c06:	403e      	ands	r6, r7
    1c08:	4333      	orrs	r3, r6
    1c0a:	2600      	movs	r6, #0
    1c0c:	46b0      	mov	r8, r6
    1c0e:	4e6f      	ldr	r6, [pc, #444]	; (1dcc <rend_1362+0x66>)
    1c10:	46b4      	mov	ip, r6
    1c12:	9f10      	ldr	r7, [sp, #64]	; 0x40
    1c14:	9a11      	ldr	r2, [sp, #68]	; 0x44
    1c16:	4691      	mov	r9, r2
    1c18:	9d12      	ldr	r5, [sp, #72]	; 0x48
    1c1a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    1c1c:	4652      	mov	r2, sl
    1c1e:	26f0      	movs	r6, #240	; 0xf0
    1c20:	9600      	str	r6, [sp, #0]
    1c22:	4646      	mov	r6, r8
    1c24:	46c8      	mov	r8, r9
    1c26:	46a2      	mov	sl, r4
    1c28:	4683      	mov	fp, r0
    1c2a:	4689      	mov	r9, r1
    1c2c:	21f0      	movs	r1, #240	; 0xf0

00001c2e <rbegin_1362>:
    1c2e:	404d      	eors	r5, r1
    1c30:	b402      	push	{r1}
    1c32:	405e      	eors	r6, r3
    1c34:	4053      	eors	r3, r2
    1c36:	407d      	eors	r5, r7
    1c38:	43f0      	mvns	r0, r6
    1c3a:	4318      	orrs	r0, r3
    1c3c:	1c29      	adds	r1, r5, #0
    1c3e:	43b9      	bics	r1, r7
    1c40:	404e      	eors	r6, r1
    1c42:	43d9      	mvns	r1, r3
    1c44:	4311      	orrs	r1, r2
    1c46:	404d      	eors	r5, r1
    1c48:	1c39      	adds	r1, r7, #0
    1c4a:	43b1      	bics	r1, r6
    1c4c:	404b      	eors	r3, r1
    1c4e:	1c11      	adds	r1, r2, #0
    1c50:	4029      	ands	r1, r5
    1c52:	4079      	eors	r1, r7
    1c54:	4050      	eors	r0, r2
    1c56:	4068      	eors	r0, r5
    1c58:	4071      	eors	r1, r6
    1c5a:	405e      	eors	r6, r3
    1c5c:	4667      	mov	r7, ip
    1c5e:	4642      	mov	r2, r8
    1c60:	46ac      	mov	ip, r5
    1c62:	46b0      	mov	r8, r6
    1c64:	4656      	mov	r6, sl
    1c66:	465d      	mov	r5, fp
    1c68:	464c      	mov	r4, r9
    1c6a:	4682      	mov	sl, r0
    1c6c:	469b      	mov	fp, r3
    1c6e:	4067      	eors	r7, r4
    1c70:	406c      	eors	r4, r5
    1c72:	4056      	eors	r6, r2
    1c74:	43f8      	mvns	r0, r7
    1c76:	4320      	orrs	r0, r4
    1c78:	1c33      	adds	r3, r6, #0
    1c7a:	4393      	bics	r3, r2
    1c7c:	405f      	eors	r7, r3
    1c7e:	43e3      	mvns	r3, r4
    1c80:	432b      	orrs	r3, r5
    1c82:	405e      	eors	r6, r3
    1c84:	1c13      	adds	r3, r2, #0
    1c86:	43bb      	bics	r3, r7
    1c88:	405c      	eors	r4, r3
    1c8a:	1c2b      	adds	r3, r5, #0
    1c8c:	4033      	ands	r3, r6
    1c8e:	405a      	eors	r2, r3
    1c90:	4045      	eors	r5, r0
    1c92:	4075      	eors	r5, r6
    1c94:	407a      	eors	r2, r7
    1c96:	4067      	eors	r7, r4
    1c98:	46a9      	mov	r9, r5
    1c9a:	4665      	mov	r5, ip
    1c9c:	46bc      	mov	ip, r7
    1c9e:	09b3      	lsrs	r3, r6, #6
    1ca0:	06af      	lsls	r7, r5, #26
    1ca2:	09a8      	lsrs	r0, r5, #6
    1ca4:	407b      	eors	r3, r7
    1ca6:	06b7      	lsls	r7, r6, #26
    1ca8:	4078      	eors	r0, r7
    1caa:	0877      	lsrs	r7, r6, #1
    1cac:	407b      	eors	r3, r7
    1cae:	07ef      	lsls	r7, r5, #31
    1cb0:	407b      	eors	r3, r7
    1cb2:	086f      	lsrs	r7, r5, #1
    1cb4:	4078      	eors	r0, r7
    1cb6:	07f7      	lsls	r7, r6, #31
    1cb8:	4078      	eors	r0, r7
    1cba:	405e      	eors	r6, r3
    1cbc:	4045      	eors	r5, r0
    1cbe:	00d3      	lsls	r3, r2, #3
    1cc0:	0f4f      	lsrs	r7, r1, #29
    1cc2:	00c8      	lsls	r0, r1, #3
    1cc4:	407b      	eors	r3, r7
    1cc6:	0f57      	lsrs	r7, r2, #29
    1cc8:	4078      	eors	r0, r7
    1cca:	0657      	lsls	r7, r2, #25
    1ccc:	407b      	eors	r3, r7
    1cce:	09cf      	lsrs	r7, r1, #7
    1cd0:	407b      	eors	r3, r7
    1cd2:	064f      	lsls	r7, r1, #25
    1cd4:	4078      	eors	r0, r7
    1cd6:	09d7      	lsrs	r7, r2, #7
    1cd8:	4078      	eors	r0, r7
    1cda:	405a      	eors	r2, r3
    1cdc:	4041      	eors	r1, r0
    1cde:	465b      	mov	r3, fp
    1ce0:	468b      	mov	fp, r1
    1ce2:	05e1      	lsls	r1, r4, #23
    1ce4:	0a5f      	lsrs	r7, r3, #9
    1ce6:	05d8      	lsls	r0, r3, #23
    1ce8:	4079      	eors	r1, r7
    1cea:	0a67      	lsrs	r7, r4, #9
    1cec:	4078      	eors	r0, r7
    1cee:	09e7      	lsrs	r7, r4, #7
    1cf0:	4079      	eors	r1, r7
    1cf2:	065f      	lsls	r7, r3, #25
    1cf4:	4079      	eors	r1, r7
    1cf6:	09df      	lsrs	r7, r3, #7
    1cf8:	4078      	eors	r0, r7
    1cfa:	0667      	lsls	r7, r4, #25
    1cfc:	4078      	eors	r0, r7
    1cfe:	404c      	eors	r4, r1
    1d00:	4043      	eors	r3, r0
    1d02:	465f      	mov	r7, fp
    1d04:	4649      	mov	r1, r9
    1d06:	46a1      	mov	r9, r4
    1d08:	4693      	mov	fp, r2
    1d0a:	4652      	mov	r2, sl
    1d0c:	46b2      	mov	sl, r6
    1d0e:	0c4c      	lsrs	r4, r1, #17
    1d10:	03d6      	lsls	r6, r2, #15
    1d12:	0c50      	lsrs	r0, r2, #17
    1d14:	4074      	eors	r4, r6
    1d16:	03ce      	lsls	r6, r1, #15
    1d18:	4070      	eors	r0, r6
    1d1a:	0a8e      	lsrs	r6, r1, #10
    1d1c:	4074      	eors	r4, r6
    1d1e:	0596      	lsls	r6, r2, #22
    1d20:	4074      	eors	r4, r6
    1d22:	0a96      	lsrs	r6, r2, #10
    1d24:	4070      	eors	r0, r6
    1d26:	058e      	lsls	r6, r1, #22
    1d28:	4070      	eors	r0, r6
    1d2a:	4061      	eors	r1, r4
    1d2c:	4042      	eors	r2, r0
    1d2e:	4660      	mov	r0, ip
    1d30:	4646      	mov	r6, r8
    1d32:	469c      	mov	ip, r3
    1d34:	46d8      	mov	r8, fp
    1d36:	468b      	mov	fp, r1
    1d38:	0f03      	lsrs	r3, r0, #28
    1d3a:	0131      	lsls	r1, r6, #4
    1d3c:	0f34      	lsrs	r4, r6, #28
    1d3e:	404b      	eors	r3, r1
    1d40:	0101      	lsls	r1, r0, #4
    1d42:	404c      	eors	r4, r1
    1d44:	0cc1      	lsrs	r1, r0, #19
    1d46:	404b      	eors	r3, r1
    1d48:	0371      	lsls	r1, r6, #13
    1d4a:	404b      	eors	r3, r1
    1d4c:	0cf1      	lsrs	r1, r6, #19
    1d4e:	404c      	eors	r4, r1
    1d50:	0341      	lsls	r1, r0, #13
    1d52:	404c      	eors	r4, r1
    1d54:	bc02      	pop	{r1}
    1d56:	4058      	eors	r0, r3
    1d58:	4066      	eors	r6, r4
    1d5a:	4663      	mov	r3, ip
    1d5c:	4684      	mov	ip, r0
    1d5e:	390f      	subs	r1, #15
    1d60:	293c      	cmp	r1, #60	; 0x3c
    1d62:	d000      	beq.n	1d66 <rend_1362>
    1d64:	e763      	b.n	1c2e <rbegin_1362>

00001d66 <rend_1362>:
    1d66:	4649      	mov	r1, r9
    1d68:	4658      	mov	r0, fp
    1d6a:	4654      	mov	r4, sl
    1d6c:	46c1      	mov	r9, r8
    1d6e:	9618      	str	r6, [sp, #96]	; 0x60
    1d70:	4666      	mov	r6, ip
    1d72:	9619      	str	r6, [sp, #100]	; 0x64
    1d74:	971a      	str	r7, [sp, #104]	; 0x68
    1d76:	464e      	mov	r6, r9
    1d78:	961b      	str	r6, [sp, #108]	; 0x6c
    1d7a:	951c      	str	r5, [sp, #112]	; 0x70
    1d7c:	941d      	str	r4, [sp, #116]	; 0x74
  s->x[3] ^= key->x[0];
    1d7e:	9e10      	ldr	r6, [sp, #64]	; 0x40
    1d80:	4072      	eors	r2, r6
    1d82:	921e      	str	r2, [sp, #120]	; 0x78
    1d84:	9e11      	ldr	r6, [sp, #68]	; 0x44
    1d86:	4070      	eors	r0, r6
    1d88:	901f      	str	r0, [sp, #124]	; 0x7c
  s->x[4] ^= key->x[1];
    1d8a:	9d12      	ldr	r5, [sp, #72]	; 0x48
    1d8c:	406b      	eors	r3, r5
    1d8e:	9320      	str	r3, [sp, #128]	; 0x80
    1d90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    1d92:	4061      	eors	r1, r4
    1d94:	9121      	str	r1, [sp, #132]	; 0x84
  /* perform ascon computation */
  ascon_key_t key;
  ascon_loadkey(&key, k);
  ascon_initaead(&s, &key, npub);
  //ascon_adata(&s, ad, adlen);
  ascon_decrypt(&s, m, c, clen);
    1d96:	9a15      	ldr	r2, [sp, #84]	; 0x54
    1d98:	920c      	str	r2, [sp, #48]	; 0x30
    1d9a:	2200      	movs	r2, #0
    1d9c:	920d      	str	r2, [sp, #52]	; 0x34
  while (clen >= ASCON_AEAD_RATE) {
    1d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1da0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1da2:	2b00      	cmp	r3, #0
    1da4:	d001      	beq.n	1daa <rend_1362+0x44>
    1da6:	f000 fb15 	bl	23d4 <rend_1990+0x96>
    1daa:	2a07      	cmp	r2, #7
    1dac:	d801      	bhi.n	1db2 <rend_1362+0x4c>
    1dae:	f000 fb11 	bl	23d4 <rend_1990+0x96>
    1db2:	9202      	str	r2, [sp, #8]
    1db4:	9303      	str	r3, [sp, #12]
    1db6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1db8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1dba:	4698      	mov	r8, r3
    1dbc:	23ff      	movs	r3, #255	; 0xff
    1dbe:	021b      	lsls	r3, r3, #8
    1dc0:	9300      	str	r3, [sp, #0]
    clen -= ASCON_AEAD_RATE;
    1dc2:	9201      	str	r2, [sp, #4]
    1dc4:	4643      	mov	r3, r8
    1dc6:	9304      	str	r3, [sp, #16]
    1dc8:	e002      	b.n	1dd0 <rend_1362+0x6a>
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	80400c06 	.word	0x80400c06
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    1dd0:	9b04      	ldr	r3, [sp, #16]
    1dd2:	6818      	ldr	r0, [r3, #0]
    1dd4:	6859      	ldr	r1, [r3, #4]
  return U64TOWORD(x);
    1dd6:	0603      	lsls	r3, r0, #24
    1dd8:	0e0a      	lsrs	r2, r1, #24
    1dda:	0206      	lsls	r6, r0, #8
    1ddc:	24ff      	movs	r4, #255	; 0xff
    1dde:	0424      	lsls	r4, r4, #16
    1de0:	4026      	ands	r6, r4
    1de2:	4333      	orrs	r3, r6
    1de4:	0a07      	lsrs	r7, r0, #8
    1de6:	060e      	lsls	r6, r1, #24
    1de8:	433e      	orrs	r6, r7
    1dea:	9d00      	ldr	r5, [sp, #0]
    1dec:	402e      	ands	r6, r5
    1dee:	4333      	orrs	r3, r6
    1df0:	0e00      	lsrs	r0, r0, #24
    1df2:	020e      	lsls	r6, r1, #8
    1df4:	4306      	orrs	r6, r0
    1df6:	24ff      	movs	r4, #255	; 0xff
    1df8:	4026      	ands	r6, r4
    1dfa:	4333      	orrs	r3, r6
    1dfc:	0a0e      	lsrs	r6, r1, #8
    1dfe:	060f      	lsls	r7, r1, #24
    1e00:	433a      	orrs	r2, r7
    1e02:	0209      	lsls	r1, r1, #8
    1e04:	4301      	orrs	r1, r0
    1e06:	20ff      	movs	r0, #255	; 0xff
    1e08:	0400      	lsls	r0, r0, #16
    1e0a:	4001      	ands	r1, r0
    1e0c:	430a      	orrs	r2, r1
    1e0e:	402e      	ands	r6, r5
    1e10:	4332      	orrs	r2, r6
    s->x[0] ^= cx;
    1e12:	9d18      	ldr	r5, [sp, #96]	; 0x60
    1e14:	4055      	eors	r5, r2
    1e16:	9919      	ldr	r1, [sp, #100]	; 0x64
    1e18:	4059      	eors	r1, r3
  *(uint64_t*)bytes |= WORDTOU64(w);
    1e1a:	062f      	lsls	r7, r5, #24
    1e1c:	0e0e      	lsrs	r6, r1, #24
    1e1e:	0228      	lsls	r0, r5, #8
    1e20:	24ff      	movs	r4, #255	; 0xff
    1e22:	0424      	lsls	r4, r4, #16
    1e24:	4020      	ands	r0, r4
    1e26:	4307      	orrs	r7, r0
    1e28:	0a28      	lsrs	r0, r5, #8
    1e2a:	4680      	mov	r8, r0
    1e2c:	0608      	lsls	r0, r1, #24
    1e2e:	4644      	mov	r4, r8
    1e30:	4320      	orrs	r0, r4
    1e32:	9c00      	ldr	r4, [sp, #0]
    1e34:	4020      	ands	r0, r4
    1e36:	4338      	orrs	r0, r7
    1e38:	0e2d      	lsrs	r5, r5, #24
    1e3a:	020f      	lsls	r7, r1, #8
    1e3c:	432f      	orrs	r7, r5
    1e3e:	24ff      	movs	r4, #255	; 0xff
    1e40:	4027      	ands	r7, r4
    1e42:	4338      	orrs	r0, r7
    1e44:	0a0f      	lsrs	r7, r1, #8
    1e46:	060c      	lsls	r4, r1, #24
    1e48:	4326      	orrs	r6, r4
    1e4a:	0209      	lsls	r1, r1, #8
    1e4c:	4329      	orrs	r1, r5
    1e4e:	24ff      	movs	r4, #255	; 0xff
    1e50:	0424      	lsls	r4, r4, #16
    1e52:	4021      	ands	r1, r4
    1e54:	4331      	orrs	r1, r6
    1e56:	9c00      	ldr	r4, [sp, #0]
    1e58:	4027      	ands	r7, r4
    1e5a:	4339      	orrs	r1, r7
    1e5c:	9c01      	ldr	r4, [sp, #4]
    1e5e:	6021      	str	r1, [r4, #0]
    1e60:	6060      	str	r0, [r4, #4]
    1e62:	991a      	ldr	r1, [sp, #104]	; 0x68
    1e64:	9105      	str	r1, [sp, #20]
    1e66:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1e68:	9106      	str	r1, [sp, #24]
    1e6a:	991c      	ldr	r1, [sp, #112]	; 0x70
    1e6c:	9107      	str	r1, [sp, #28]
    1e6e:	991d      	ldr	r1, [sp, #116]	; 0x74
    1e70:	9108      	str	r1, [sp, #32]
    1e72:	991e      	ldr	r1, [sp, #120]	; 0x78
    1e74:	9109      	str	r1, [sp, #36]	; 0x24
    1e76:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1e78:	910a      	str	r1, [sp, #40]	; 0x28
    1e7a:	9920      	ldr	r1, [sp, #128]	; 0x80
    1e7c:	910b      	str	r1, [sp, #44]	; 0x2c
    1e7e:	9921      	ldr	r1, [sp, #132]	; 0x84
    1e80:	910e      	str	r1, [sp, #56]	; 0x38
    1e82:	9905      	ldr	r1, [sp, #20]
    1e84:	468c      	mov	ip, r1
    1e86:	9f06      	ldr	r7, [sp, #24]
    1e88:	9907      	ldr	r1, [sp, #28]
    1e8a:	4689      	mov	r9, r1
    1e8c:	9e08      	ldr	r6, [sp, #32]
    1e8e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1e90:	4682      	mov	sl, r0
    1e92:	980a      	ldr	r0, [sp, #40]	; 0x28
    1e94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    1e96:	990e      	ldr	r1, [sp, #56]	; 0x38
    1e98:	2496      	movs	r4, #150	; 0x96
    1e9a:	9405      	str	r4, [sp, #20]
    1e9c:	4698      	mov	r8, r3
    1e9e:	4664      	mov	r4, ip
    1ea0:	46bc      	mov	ip, r7
    1ea2:	464b      	mov	r3, r9
    1ea4:	46b1      	mov	r9, r6
    1ea6:	4656      	mov	r6, sl
    1ea8:	4682      	mov	sl, r0
    1eaa:	468b      	mov	fp, r1
    1eac:	2196      	movs	r1, #150	; 0x96

00001eae <rbegin_1615>:
    1eae:	404b      	eors	r3, r1
    1eb0:	b402      	push	{r1}
    1eb2:	406a      	eors	r2, r5
    1eb4:	4075      	eors	r5, r6
    1eb6:	4063      	eors	r3, r4
    1eb8:	43d0      	mvns	r0, r2
    1eba:	4328      	orrs	r0, r5
    1ebc:	1c19      	adds	r1, r3, #0
    1ebe:	43a1      	bics	r1, r4
    1ec0:	404a      	eors	r2, r1
    1ec2:	43e9      	mvns	r1, r5
    1ec4:	4331      	orrs	r1, r6
    1ec6:	404b      	eors	r3, r1
    1ec8:	1c21      	adds	r1, r4, #0
    1eca:	4391      	bics	r1, r2
    1ecc:	404d      	eors	r5, r1
    1ece:	1c31      	adds	r1, r6, #0
    1ed0:	4019      	ands	r1, r3
    1ed2:	4061      	eors	r1, r4
    1ed4:	4070      	eors	r0, r6
    1ed6:	4058      	eors	r0, r3
    1ed8:	4051      	eors	r1, r2
    1eda:	406a      	eors	r2, r5
    1edc:	4644      	mov	r4, r8
    1ede:	4666      	mov	r6, ip
    1ee0:	4698      	mov	r8, r3
    1ee2:	4694      	mov	ip, r2
    1ee4:	464a      	mov	r2, r9
    1ee6:	4653      	mov	r3, sl
    1ee8:	465f      	mov	r7, fp
    1eea:	4681      	mov	r9, r0
    1eec:	46aa      	mov	sl, r5
    1eee:	407c      	eors	r4, r7
    1ef0:	405f      	eors	r7, r3
    1ef2:	4072      	eors	r2, r6
    1ef4:	43e0      	mvns	r0, r4
    1ef6:	4338      	orrs	r0, r7
    1ef8:	1c15      	adds	r5, r2, #0
    1efa:	43b5      	bics	r5, r6
    1efc:	406c      	eors	r4, r5
    1efe:	43fd      	mvns	r5, r7
    1f00:	431d      	orrs	r5, r3
    1f02:	406a      	eors	r2, r5
    1f04:	1c35      	adds	r5, r6, #0
    1f06:	43a5      	bics	r5, r4
    1f08:	406f      	eors	r7, r5
    1f0a:	1c1d      	adds	r5, r3, #0
    1f0c:	4015      	ands	r5, r2
    1f0e:	406e      	eors	r6, r5
    1f10:	4043      	eors	r3, r0
    1f12:	4053      	eors	r3, r2
    1f14:	4066      	eors	r6, r4
    1f16:	407c      	eors	r4, r7
    1f18:	469b      	mov	fp, r3
    1f1a:	4643      	mov	r3, r8
    1f1c:	46a0      	mov	r8, r4
    1f1e:	0995      	lsrs	r5, r2, #6
    1f20:	069c      	lsls	r4, r3, #26
    1f22:	0998      	lsrs	r0, r3, #6
    1f24:	4065      	eors	r5, r4
    1f26:	0694      	lsls	r4, r2, #26
    1f28:	4060      	eors	r0, r4
    1f2a:	0854      	lsrs	r4, r2, #1
    1f2c:	4065      	eors	r5, r4
    1f2e:	07dc      	lsls	r4, r3, #31
    1f30:	4065      	eors	r5, r4
    1f32:	085c      	lsrs	r4, r3, #1
    1f34:	4060      	eors	r0, r4
    1f36:	07d4      	lsls	r4, r2, #31
    1f38:	4060      	eors	r0, r4
    1f3a:	406a      	eors	r2, r5
    1f3c:	4043      	eors	r3, r0
    1f3e:	00f5      	lsls	r5, r6, #3
    1f40:	0f4c      	lsrs	r4, r1, #29
    1f42:	00c8      	lsls	r0, r1, #3
    1f44:	4065      	eors	r5, r4
    1f46:	0f74      	lsrs	r4, r6, #29
    1f48:	4060      	eors	r0, r4
    1f4a:	0674      	lsls	r4, r6, #25
    1f4c:	4065      	eors	r5, r4
    1f4e:	09cc      	lsrs	r4, r1, #7
    1f50:	4065      	eors	r5, r4
    1f52:	064c      	lsls	r4, r1, #25
    1f54:	4060      	eors	r0, r4
    1f56:	09f4      	lsrs	r4, r6, #7
    1f58:	4060      	eors	r0, r4
    1f5a:	406e      	eors	r6, r5
    1f5c:	4041      	eors	r1, r0
    1f5e:	4655      	mov	r5, sl
    1f60:	468a      	mov	sl, r1
    1f62:	05f9      	lsls	r1, r7, #23
    1f64:	0a6c      	lsrs	r4, r5, #9
    1f66:	05e8      	lsls	r0, r5, #23
    1f68:	4061      	eors	r1, r4
    1f6a:	0a7c      	lsrs	r4, r7, #9
    1f6c:	4060      	eors	r0, r4
    1f6e:	09fc      	lsrs	r4, r7, #7
    1f70:	4061      	eors	r1, r4
    1f72:	066c      	lsls	r4, r5, #25
    1f74:	4061      	eors	r1, r4
    1f76:	09ec      	lsrs	r4, r5, #7
    1f78:	4060      	eors	r0, r4
    1f7a:	067c      	lsls	r4, r7, #25
    1f7c:	4060      	eors	r0, r4
    1f7e:	404f      	eors	r7, r1
    1f80:	4045      	eors	r5, r0
    1f82:	4654      	mov	r4, sl
    1f84:	4659      	mov	r1, fp
    1f86:	46bb      	mov	fp, r7
    1f88:	46b2      	mov	sl, r6
    1f8a:	464e      	mov	r6, r9
    1f8c:	4691      	mov	r9, r2
    1f8e:	0c4f      	lsrs	r7, r1, #17
    1f90:	03f2      	lsls	r2, r6, #15
    1f92:	0c70      	lsrs	r0, r6, #17
    1f94:	4057      	eors	r7, r2
    1f96:	03ca      	lsls	r2, r1, #15
    1f98:	4050      	eors	r0, r2
    1f9a:	0a8a      	lsrs	r2, r1, #10
    1f9c:	4057      	eors	r7, r2
    1f9e:	05b2      	lsls	r2, r6, #22
    1fa0:	4057      	eors	r7, r2
    1fa2:	0ab2      	lsrs	r2, r6, #10
    1fa4:	4050      	eors	r0, r2
    1fa6:	058a      	lsls	r2, r1, #22
    1fa8:	4050      	eors	r0, r2
    1faa:	4079      	eors	r1, r7
    1fac:	4046      	eors	r6, r0
    1fae:	4640      	mov	r0, r8
    1fb0:	4662      	mov	r2, ip
    1fb2:	46a8      	mov	r8, r5
    1fb4:	46d4      	mov	ip, sl
    1fb6:	468a      	mov	sl, r1
    1fb8:	0f05      	lsrs	r5, r0, #28
    1fba:	0111      	lsls	r1, r2, #4
    1fbc:	0f17      	lsrs	r7, r2, #28
    1fbe:	404d      	eors	r5, r1
    1fc0:	0101      	lsls	r1, r0, #4
    1fc2:	404f      	eors	r7, r1
    1fc4:	0cc1      	lsrs	r1, r0, #19
    1fc6:	404d      	eors	r5, r1
    1fc8:	0351      	lsls	r1, r2, #13
    1fca:	404d      	eors	r5, r1
    1fcc:	0cd1      	lsrs	r1, r2, #19
    1fce:	404f      	eors	r7, r1
    1fd0:	0341      	lsls	r1, r0, #13
    1fd2:	404f      	eors	r7, r1
    1fd4:	bc02      	pop	{r1}
    1fd6:	4068      	eors	r0, r5
    1fd8:	407a      	eors	r2, r7
    1fda:	4645      	mov	r5, r8
    1fdc:	4680      	mov	r8, r0
    1fde:	390f      	subs	r1, #15
    1fe0:	293c      	cmp	r1, #60	; 0x3c
    1fe2:	d000      	beq.n	1fe6 <rend_1615>
    1fe4:	e763      	b.n	1eae <rbegin_1615>

00001fe6 <rend_1615>:
    1fe6:	4659      	mov	r1, fp
    1fe8:	4650      	mov	r0, sl
    1fea:	46b2      	mov	sl, r6
    1fec:	464e      	mov	r6, r9
    1fee:	4699      	mov	r9, r3
    1ff0:	4667      	mov	r7, ip
    1ff2:	4643      	mov	r3, r8
    1ff4:	9218      	str	r2, [sp, #96]	; 0x60
    1ff6:	9319      	str	r3, [sp, #100]	; 0x64
    1ff8:	941a      	str	r4, [sp, #104]	; 0x68
    1ffa:	971b      	str	r7, [sp, #108]	; 0x6c
    1ffc:	464b      	mov	r3, r9
    1ffe:	931c      	str	r3, [sp, #112]	; 0x70
    2000:	961d      	str	r6, [sp, #116]	; 0x74
    2002:	4653      	mov	r3, sl
    2004:	931e      	str	r3, [sp, #120]	; 0x78
    2006:	901f      	str	r0, [sp, #124]	; 0x7c
    2008:	9520      	str	r5, [sp, #128]	; 0x80
    200a:	9121      	str	r1, [sp, #132]	; 0x84
    m += ASCON_AEAD_RATE;
    200c:	2308      	movs	r3, #8
    200e:	469c      	mov	ip, r3
    2010:	9a01      	ldr	r2, [sp, #4]
    2012:	4462      	add	r2, ip
    2014:	9201      	str	r2, [sp, #4]
    c += ASCON_AEAD_RATE;
    2016:	9b04      	ldr	r3, [sp, #16]
    2018:	3308      	adds	r3, #8
    201a:	9304      	str	r3, [sp, #16]
    clen -= ASCON_AEAD_RATE;
    201c:	9a02      	ldr	r2, [sp, #8]
    201e:	9b03      	ldr	r3, [sp, #12]
    2020:	2008      	movs	r0, #8
    2022:	4240      	negs	r0, r0
    2024:	17c1      	asrs	r1, r0, #31
    2026:	1812      	adds	r2, r2, r0
    2028:	414b      	adcs	r3, r1
    202a:	9202      	str	r2, [sp, #8]
    202c:	9303      	str	r3, [sp, #12]
  while (clen >= ASCON_AEAD_RATE) {
    202e:	2b00      	cmp	r3, #0
    2030:	d000      	beq.n	2034 <rend_1615+0x4e>
    2032:	e6cd      	b.n	1dd0 <rend_1362+0x6a>
    2034:	9b02      	ldr	r3, [sp, #8]
    2036:	9c03      	ldr	r4, [sp, #12]
    2038:	2c00      	cmp	r4, #0
    203a:	d102      	bne.n	2042 <rend_1615+0x5c>
    203c:	2b07      	cmp	r3, #7
    203e:	d900      	bls.n	2042 <rend_1615+0x5c>
    2040:	e6c6      	b.n	1dd0 <rend_1362+0x6a>
    2042:	2208      	movs	r2, #8
    2044:	4252      	negs	r2, r2
    2046:	17d3      	asrs	r3, r2, #31
    2048:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    204a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    204c:	18a4      	adds	r4, r4, r2
    204e:	415d      	adcs	r5, r3
    2050:	0769      	lsls	r1, r5, #29
    2052:	08e0      	lsrs	r0, r4, #3
    2054:	4308      	orrs	r0, r1
    2056:	08e9      	lsrs	r1, r5, #3
    2058:	1c46      	adds	r6, r0, #1
    205a:	00f6      	lsls	r6, r6, #3
    205c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    205e:	46bc      	mov	ip, r7
    2060:	44b4      	add	ip, r6
    2062:	4667      	mov	r7, ip
    2064:	970f      	str	r7, [sp, #60]	; 0x3c
    2066:	9f14      	ldr	r7, [sp, #80]	; 0x50
    2068:	46bc      	mov	ip, r7
    206a:	4466      	add	r6, ip
    206c:	4f58      	ldr	r7, [pc, #352]	; (21d0 <rend_1615+0x1ea>)
    206e:	47b8      	blx	r7
    2070:	1900      	adds	r0, r0, r4
    2072:	4169      	adcs	r1, r5
    2074:	900c      	str	r0, [sp, #48]	; 0x30
    2076:	910d      	str	r1, [sp, #52]	; 0x34
  *px ^= PAD(clen);
    2078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    207a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    207c:	9300      	str	r3, [sp, #0]
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
    207e:	2207      	movs	r2, #7
    2080:	1ad2      	subs	r2, r2, r3
    2082:	00d2      	lsls	r2, r2, #3
    2084:	2320      	movs	r3, #32
    2086:	425b      	negs	r3, r3
    2088:	18d1      	adds	r1, r2, r3
    208a:	d500      	bpl.n	208e <rend_1615+0xa8>
    208c:	e1a4      	b.n	23d8 <rend_1990+0x9a>
    208e:	33a0      	adds	r3, #160	; 0xa0
    2090:	408b      	lsls	r3, r1
    2092:	2180      	movs	r1, #128	; 0x80
    2094:	4091      	lsls	r1, r2
    2096:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2098:	4051      	eors	r1, r2
    209a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    209c:	4053      	eors	r3, r2
    209e:	9118      	str	r1, [sp, #96]	; 0x60
    20a0:	9319      	str	r3, [sp, #100]	; 0x64
  if (clen) {
    20a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    20a4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    20a6:	0020      	movs	r0, r4
    20a8:	4328      	orrs	r0, r5
    20aa:	d100      	bne.n	20ae <rend_1615+0xc8>
    20ac:	e092      	b.n	21d4 <rend_1615+0x1ee>
  return ~(uint64_t)0 >> (64 - 8 * n);
    20ae:	2208      	movs	r2, #8
    20b0:	9800      	ldr	r0, [sp, #0]
    20b2:	1a12      	subs	r2, r2, r0
    20b4:	00d2      	lsls	r2, r2, #3
    20b6:	2020      	movs	r0, #32
    20b8:	4240      	negs	r0, r0
    20ba:	1810      	adds	r0, r2, r0
    20bc:	d500      	bpl.n	20c0 <rend_1615+0xda>
    20be:	e190      	b.n	23e2 <rend_1990+0xa4>
    20c0:	2401      	movs	r4, #1
    20c2:	4264      	negs	r4, r4
    20c4:	40c4      	lsrs	r4, r0
    20c6:	2701      	movs	r7, #1
    20c8:	427f      	negs	r7, r7
    20ca:	40d7      	lsrs	r7, r2
  uint64_t x = *(uint64_t*)bytes & MASK(n);
    20cc:	6830      	ldr	r0, [r6, #0]
    20ce:	4020      	ands	r0, r4
    20d0:	6872      	ldr	r2, [r6, #4]
    20d2:	403a      	ands	r2, r7
  return U64TOWORD(x);
    20d4:	0605      	lsls	r5, r0, #24
    20d6:	46ab      	mov	fp, r5
    20d8:	0e15      	lsrs	r5, r2, #24
    20da:	46aa      	mov	sl, r5
    20dc:	0205      	lsls	r5, r0, #8
    20de:	26ff      	movs	r6, #255	; 0xff
    20e0:	0436      	lsls	r6, r6, #16
    20e2:	4035      	ands	r5, r6
    20e4:	465e      	mov	r6, fp
    20e6:	432e      	orrs	r6, r5
    20e8:	46b3      	mov	fp, r6
    20ea:	0a05      	lsrs	r5, r0, #8
    20ec:	0616      	lsls	r6, r2, #24
    20ee:	432e      	orrs	r6, r5
    20f0:	25ff      	movs	r5, #255	; 0xff
    20f2:	022d      	lsls	r5, r5, #8
    20f4:	402e      	ands	r6, r5
    20f6:	46b4      	mov	ip, r6
    20f8:	465e      	mov	r6, fp
    20fa:	4665      	mov	r5, ip
    20fc:	432e      	orrs	r6, r5
    20fe:	46b3      	mov	fp, r6
    2100:	0e00      	lsrs	r0, r0, #24
    2102:	0215      	lsls	r5, r2, #8
    2104:	002e      	movs	r6, r5
    2106:	4306      	orrs	r6, r0
    2108:	25ff      	movs	r5, #255	; 0xff
    210a:	46a9      	mov	r9, r5
    210c:	402e      	ands	r6, r5
    210e:	46b4      	mov	ip, r6
    2110:	465e      	mov	r6, fp
    2112:	4665      	mov	r5, ip
    2114:	432e      	orrs	r6, r5
    2116:	46b3      	mov	fp, r6
    2118:	0a15      	lsrs	r5, r2, #8
    211a:	46ac      	mov	ip, r5
    211c:	0615      	lsls	r5, r2, #24
    211e:	4656      	mov	r6, sl
    2120:	432e      	orrs	r6, r5
    2122:	0212      	lsls	r2, r2, #8
    2124:	4302      	orrs	r2, r0
    2126:	20ff      	movs	r0, #255	; 0xff
    2128:	0400      	lsls	r0, r0, #16
    212a:	4002      	ands	r2, r0
    212c:	4332      	orrs	r2, r6
    212e:	4660      	mov	r0, ip
    2130:	25ff      	movs	r5, #255	; 0xff
    2132:	022d      	lsls	r5, r5, #8
    2134:	4028      	ands	r0, r5
    2136:	4302      	orrs	r2, r0
    *px ^= cx;
    2138:	4051      	eors	r1, r2
    213a:	4658      	mov	r0, fp
    213c:	4043      	eors	r3, r0
  *(uint64_t*)bytes &= ~MASK(n);
    213e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2140:	6805      	ldr	r5, [r0, #0]
    2142:	002e      	movs	r6, r5
    2144:	43a6      	bics	r6, r4
    2146:	0034      	movs	r4, r6
    2148:	6845      	ldr	r5, [r0, #4]
    214a:	9501      	str	r5, [sp, #4]
    214c:	002e      	movs	r6, r5
    214e:	43be      	bics	r6, r7
  *(uint64_t*)bytes |= WORDTOU64(w);
    2150:	0608      	lsls	r0, r1, #24
    2152:	0e1d      	lsrs	r5, r3, #24
    2154:	432c      	orrs	r4, r5
    2156:	4330      	orrs	r0, r6
    2158:	020f      	lsls	r7, r1, #8
    215a:	25ff      	movs	r5, #255	; 0xff
    215c:	042d      	lsls	r5, r5, #16
    215e:	402f      	ands	r7, r5
    2160:	4338      	orrs	r0, r7
    2162:	0a0d      	lsrs	r5, r1, #8
    2164:	061f      	lsls	r7, r3, #24
    2166:	432f      	orrs	r7, r5
    2168:	25ff      	movs	r5, #255	; 0xff
    216a:	022d      	lsls	r5, r5, #8
    216c:	402f      	ands	r7, r5
    216e:	4338      	orrs	r0, r7
    2170:	0e0f      	lsrs	r7, r1, #24
    2172:	021d      	lsls	r5, r3, #8
    2174:	002e      	movs	r6, r5
    2176:	433e      	orrs	r6, r7
    2178:	46b4      	mov	ip, r6
    217a:	464e      	mov	r6, r9
    217c:	4665      	mov	r5, ip
    217e:	402e      	ands	r6, r5
    2180:	4330      	orrs	r0, r6
    2182:	0a1d      	lsrs	r5, r3, #8
    2184:	46ac      	mov	ip, r5
    2186:	061d      	lsls	r5, r3, #24
    2188:	432c      	orrs	r4, r5
    218a:	021d      	lsls	r5, r3, #8
    218c:	432f      	orrs	r7, r5
    218e:	25ff      	movs	r5, #255	; 0xff
    2190:	042d      	lsls	r5, r5, #16
    2192:	402f      	ands	r7, r5
    2194:	4327      	orrs	r7, r4
    2196:	4665      	mov	r5, ip
    2198:	24ff      	movs	r4, #255	; 0xff
    219a:	0224      	lsls	r4, r4, #8
    219c:	4025      	ands	r5, r4
    219e:	432f      	orrs	r7, r5
    21a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    21a2:	6027      	str	r7, [r4, #0]
    21a4:	6060      	str	r0, [r4, #4]
  uint64_t mask = ~0ull >> (8 * n);
    21a6:	9800      	ldr	r0, [sp, #0]
    21a8:	00c4      	lsls	r4, r0, #3
    21aa:	2020      	movs	r0, #32
    21ac:	4240      	negs	r0, r0
    21ae:	1825      	adds	r5, r4, r0
    21b0:	d500      	bpl.n	21b4 <rend_1615+0x1ce>
    21b2:	e11f      	b.n	23f4 <rend_1990+0xb6>
    21b4:	301f      	adds	r0, #31
    21b6:	40e8      	lsrs	r0, r5
    21b8:	2501      	movs	r5, #1
    21ba:	426d      	negs	r5, r5
    21bc:	40e5      	lsrs	r5, r4
  return w & mask;
    21be:	4001      	ands	r1, r0
    21c0:	402b      	ands	r3, r5
    *px ^= cx;
    21c2:	404a      	eors	r2, r1
    21c4:	9218      	str	r2, [sp, #96]	; 0x60
    21c6:	465a      	mov	r2, fp
    21c8:	4053      	eors	r3, r2
    21ca:	9319      	str	r3, [sp, #100]	; 0x64
    21cc:	e002      	b.n	21d4 <rend_1615+0x1ee>
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	00006e75 	.word	0x00006e75
    s->x[1] ^= key->x[0];
    21d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    21d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    21d8:	4053      	eors	r3, r2
    21da:	991b      	ldr	r1, [sp, #108]	; 0x6c
    21dc:	9811      	ldr	r0, [sp, #68]	; 0x44
    21de:	4041      	eors	r1, r0
    21e0:	468c      	mov	ip, r1
    s->x[2] ^= key->x[1];
    21e2:	991c      	ldr	r1, [sp, #112]	; 0x70
    21e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    21e6:	404a      	eors	r2, r1
    21e8:	991d      	ldr	r1, [sp, #116]	; 0x74
    21ea:	9100      	str	r1, [sp, #0]
    21ec:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    21ee:	404f      	eors	r7, r1
    21f0:	9919      	ldr	r1, [sp, #100]	; 0x64
    21f2:	4689      	mov	r9, r1
    21f4:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    21f6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    21f8:	9920      	ldr	r1, [sp, #128]	; 0x80
    21fa:	9e21      	ldr	r6, [sp, #132]	; 0x84
    21fc:	9818      	ldr	r0, [sp, #96]	; 0x60
    21fe:	46b8      	mov	r8, r7
    2200:	46b2      	mov	sl, r6
    2202:	26f0      	movs	r6, #240	; 0xf0
    2204:	46a3      	mov	fp, r4

00002206 <rbegin_1990>:
    2206:	4072      	eors	r2, r6
    2208:	b440      	push	{r6}
    220a:	4048      	eors	r0, r1
    220c:	4069      	eors	r1, r5
    220e:	405a      	eors	r2, r3
    2210:	43c7      	mvns	r7, r0
    2212:	430f      	orrs	r7, r1
    2214:	1c16      	adds	r6, r2, #0
    2216:	439e      	bics	r6, r3
    2218:	4070      	eors	r0, r6
    221a:	43ce      	mvns	r6, r1
    221c:	432e      	orrs	r6, r5
    221e:	4072      	eors	r2, r6
    2220:	1c1e      	adds	r6, r3, #0
    2222:	4386      	bics	r6, r0
    2224:	4071      	eors	r1, r6
    2226:	1c2e      	adds	r6, r5, #0
    2228:	4016      	ands	r6, r2
    222a:	405e      	eors	r6, r3
    222c:	406f      	eors	r7, r5
    222e:	4057      	eors	r7, r2
    2230:	4046      	eors	r6, r0
    2232:	4048      	eors	r0, r1
    2234:	464b      	mov	r3, r9
    2236:	4665      	mov	r5, ip
    2238:	4691      	mov	r9, r2
    223a:	4684      	mov	ip, r0
    223c:	4640      	mov	r0, r8
    223e:	465a      	mov	r2, fp
    2240:	4654      	mov	r4, sl
    2242:	46b8      	mov	r8, r7
    2244:	468b      	mov	fp, r1
    2246:	4063      	eors	r3, r4
    2248:	4054      	eors	r4, r2
    224a:	4068      	eors	r0, r5
    224c:	43df      	mvns	r7, r3
    224e:	4327      	orrs	r7, r4
    2250:	1c01      	adds	r1, r0, #0
    2252:	43a9      	bics	r1, r5
    2254:	404b      	eors	r3, r1
    2256:	43e1      	mvns	r1, r4
    2258:	4311      	orrs	r1, r2
    225a:	4048      	eors	r0, r1
    225c:	1c29      	adds	r1, r5, #0
    225e:	4399      	bics	r1, r3
    2260:	404c      	eors	r4, r1
    2262:	1c11      	adds	r1, r2, #0
    2264:	4001      	ands	r1, r0
    2266:	404d      	eors	r5, r1
    2268:	407a      	eors	r2, r7
    226a:	4042      	eors	r2, r0
    226c:	405d      	eors	r5, r3
    226e:	4063      	eors	r3, r4
    2270:	4692      	mov	sl, r2
    2272:	464a      	mov	r2, r9
    2274:	4699      	mov	r9, r3
    2276:	0981      	lsrs	r1, r0, #6
    2278:	0693      	lsls	r3, r2, #26
    227a:	0997      	lsrs	r7, r2, #6
    227c:	4059      	eors	r1, r3
    227e:	0683      	lsls	r3, r0, #26
    2280:	405f      	eors	r7, r3
    2282:	0843      	lsrs	r3, r0, #1
    2284:	4059      	eors	r1, r3
    2286:	07d3      	lsls	r3, r2, #31
    2288:	4059      	eors	r1, r3
    228a:	0853      	lsrs	r3, r2, #1
    228c:	405f      	eors	r7, r3
    228e:	07c3      	lsls	r3, r0, #31
    2290:	405f      	eors	r7, r3
    2292:	4048      	eors	r0, r1
    2294:	407a      	eors	r2, r7
    2296:	00e9      	lsls	r1, r5, #3
    2298:	0f73      	lsrs	r3, r6, #29
    229a:	00f7      	lsls	r7, r6, #3
    229c:	4059      	eors	r1, r3
    229e:	0f6b      	lsrs	r3, r5, #29
    22a0:	405f      	eors	r7, r3
    22a2:	066b      	lsls	r3, r5, #25
    22a4:	4059      	eors	r1, r3
    22a6:	09f3      	lsrs	r3, r6, #7
    22a8:	4059      	eors	r1, r3
    22aa:	0673      	lsls	r3, r6, #25
    22ac:	405f      	eors	r7, r3
    22ae:	09eb      	lsrs	r3, r5, #7
    22b0:	405f      	eors	r7, r3
    22b2:	404d      	eors	r5, r1
    22b4:	407e      	eors	r6, r7
    22b6:	4659      	mov	r1, fp
    22b8:	46b3      	mov	fp, r6
    22ba:	05e6      	lsls	r6, r4, #23
    22bc:	0a4b      	lsrs	r3, r1, #9
    22be:	05cf      	lsls	r7, r1, #23
    22c0:	405e      	eors	r6, r3
    22c2:	0a63      	lsrs	r3, r4, #9
    22c4:	405f      	eors	r7, r3
    22c6:	09e3      	lsrs	r3, r4, #7
    22c8:	405e      	eors	r6, r3
    22ca:	064b      	lsls	r3, r1, #25
    22cc:	405e      	eors	r6, r3
    22ce:	09cb      	lsrs	r3, r1, #7
    22d0:	405f      	eors	r7, r3
    22d2:	0663      	lsls	r3, r4, #25
    22d4:	405f      	eors	r7, r3
    22d6:	4074      	eors	r4, r6
    22d8:	4079      	eors	r1, r7
    22da:	465b      	mov	r3, fp
    22dc:	4656      	mov	r6, sl
    22de:	46a2      	mov	sl, r4
    22e0:	46ab      	mov	fp, r5
    22e2:	4645      	mov	r5, r8
    22e4:	4680      	mov	r8, r0
    22e6:	0c74      	lsrs	r4, r6, #17
    22e8:	03e8      	lsls	r0, r5, #15
    22ea:	0c6f      	lsrs	r7, r5, #17
    22ec:	4044      	eors	r4, r0
    22ee:	03f0      	lsls	r0, r6, #15
    22f0:	4047      	eors	r7, r0
    22f2:	0ab0      	lsrs	r0, r6, #10
    22f4:	4044      	eors	r4, r0
    22f6:	05a8      	lsls	r0, r5, #22
    22f8:	4044      	eors	r4, r0
    22fa:	0aa8      	lsrs	r0, r5, #10
    22fc:	4047      	eors	r7, r0
    22fe:	05b0      	lsls	r0, r6, #22
    2300:	4047      	eors	r7, r0
    2302:	4066      	eors	r6, r4
    2304:	407d      	eors	r5, r7
    2306:	464f      	mov	r7, r9
    2308:	4660      	mov	r0, ip
    230a:	4689      	mov	r9, r1
    230c:	46dc      	mov	ip, fp
    230e:	46b3      	mov	fp, r6
    2310:	0f39      	lsrs	r1, r7, #28
    2312:	0106      	lsls	r6, r0, #4
    2314:	0f04      	lsrs	r4, r0, #28
    2316:	4071      	eors	r1, r6
    2318:	013e      	lsls	r6, r7, #4
    231a:	4074      	eors	r4, r6
    231c:	0cfe      	lsrs	r6, r7, #19
    231e:	4071      	eors	r1, r6
    2320:	0346      	lsls	r6, r0, #13
    2322:	4071      	eors	r1, r6
    2324:	0cc6      	lsrs	r6, r0, #19
    2326:	4074      	eors	r4, r6
    2328:	037e      	lsls	r6, r7, #13
    232a:	4074      	eors	r4, r6
    232c:	bc40      	pop	{r6}
    232e:	404f      	eors	r7, r1
    2330:	4060      	eors	r0, r4
    2332:	4649      	mov	r1, r9
    2334:	46b9      	mov	r9, r7
    2336:	3e0f      	subs	r6, #15
    2338:	2e3c      	cmp	r6, #60	; 0x3c
    233a:	d000      	beq.n	233e <rend_1990>
    233c:	e763      	b.n	2206 <rbegin_1990>

0000233e <rend_1990>:
    233e:	465c      	mov	r4, fp
  ascon_final(&s, &key);
  /* verify tag (should be constant time, check compiler output) */
  s.x[3] ^= LOADBYTES(c + clen, 8);
    2340:	9914      	ldr	r1, [sp, #80]	; 0x50
    2342:	9e15      	ldr	r6, [sp, #84]	; 0x54
    2344:	46b4      	mov	ip, r6
    2346:	4461      	add	r1, ip
  memcpy(&x, bytes, n);
    2348:	2208      	movs	r2, #8
    234a:	a816      	add	r0, sp, #88	; 0x58
    234c:	4b2f      	ldr	r3, [pc, #188]	; (240c <rend_1990+0xce>)
    234e:	4798      	blx	r3
  return U64TOWORD(x);
    2350:	9a16      	ldr	r2, [sp, #88]	; 0x58
    2352:	9817      	ldr	r0, [sp, #92]	; 0x5c
    2354:	0611      	lsls	r1, r2, #24
    2356:	0e03      	lsrs	r3, r0, #24
    2358:	0216      	lsls	r6, r2, #8
    235a:	27ff      	movs	r7, #255	; 0xff
    235c:	043f      	lsls	r7, r7, #16
    235e:	46bc      	mov	ip, r7
    2360:	403e      	ands	r6, r7
    2362:	4331      	orrs	r1, r6
    2364:	0a17      	lsrs	r7, r2, #8
    2366:	0606      	lsls	r6, r0, #24
    2368:	433e      	orrs	r6, r7
    236a:	27ff      	movs	r7, #255	; 0xff
    236c:	023f      	lsls	r7, r7, #8
    236e:	403e      	ands	r6, r7
    2370:	4331      	orrs	r1, r6
    2372:	0e16      	lsrs	r6, r2, #24
    2374:	46b0      	mov	r8, r6
    2376:	0206      	lsls	r6, r0, #8
    2378:	4642      	mov	r2, r8
    237a:	4316      	orrs	r6, r2
    237c:	22ff      	movs	r2, #255	; 0xff
    237e:	4016      	ands	r6, r2
    2380:	4331      	orrs	r1, r6
    2382:	468a      	mov	sl, r1
    2384:	0a06      	lsrs	r6, r0, #8
    2386:	0601      	lsls	r1, r0, #24
    2388:	430b      	orrs	r3, r1
    238a:	0200      	lsls	r0, r0, #8
    238c:	4641      	mov	r1, r8
    238e:	4308      	orrs	r0, r1
    2390:	4661      	mov	r1, ip
    2392:	4008      	ands	r0, r1
    2394:	4303      	orrs	r3, r0
    2396:	403e      	ands	r6, r7
    2398:	4333      	orrs	r3, r6
    239a:	405d      	eors	r5, r3
    239c:	4653      	mov	r3, sl
    239e:	405c      	eors	r4, r3
    23a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    23a2:	405d      	eors	r5, r3
    23a4:	9811      	ldr	r0, [sp, #68]	; 0x44
    23a6:	4044      	eors	r4, r0
  result |= result >> 32;
    23a8:	4325      	orrs	r5, r4
  result |= result >> 16;
    23aa:	0421      	lsls	r1, r4, #16
    23ac:	0c2b      	lsrs	r3, r5, #16
    23ae:	430b      	orrs	r3, r1
    23b0:	0c21      	lsrs	r1, r4, #16
    23b2:	431d      	orrs	r5, r3
    23b4:	430c      	orrs	r4, r1
  result |= result >> 8;
    23b6:	0624      	lsls	r4, r4, #24
    23b8:	0a28      	lsrs	r0, r5, #8
    23ba:	4320      	orrs	r0, r4
    23bc:	4328      	orrs	r0, r5
  return ((((int)(result & 0xff) - 1) >> 8) & 1) - 1;
    23be:	4010      	ands	r0, r2
    23c0:	3801      	subs	r0, #1
    23c2:	0fc0      	lsrs	r0, r0, #31
    23c4:	3801      	subs	r0, #1
  s.x[4] = 0; //^= LOADBYTES(c + clen + 8, 8);
  return NOTZERO(s.x[3], s.x[4]);
}
    23c6:	b023      	add	sp, #140	; 0x8c
    23c8:	bc3c      	pop	{r2, r3, r4, r5}
    23ca:	4690      	mov	r8, r2
    23cc:	4699      	mov	r9, r3
    23ce:	46a2      	mov	sl, r4
    23d0:	46ab      	mov	fp, r5
    23d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (clen >= ASCON_AEAD_RATE) {
    23d4:	9e14      	ldr	r6, [sp, #80]	; 0x50
    23d6:	e64f      	b.n	2078 <rend_1615+0x92>
forceinline uint64_t PAD(int i) { return 0x80ull << (56 - 8 * i); }
    23d8:	2120      	movs	r1, #32
    23da:	1a89      	subs	r1, r1, r2
    23dc:	2380      	movs	r3, #128	; 0x80
    23de:	40cb      	lsrs	r3, r1
    23e0:	e657      	b.n	2092 <rend_1615+0xac>
  return ~(uint64_t)0 >> (64 - 8 * n);
    23e2:	2020      	movs	r0, #32
    23e4:	1a80      	subs	r0, r0, r2
    23e6:	2401      	movs	r4, #1
    23e8:	4264      	negs	r4, r4
    23ea:	0025      	movs	r5, r4
    23ec:	4085      	lsls	r5, r0
    23ee:	40d4      	lsrs	r4, r2
    23f0:	432c      	orrs	r4, r5
    23f2:	e668      	b.n	20c6 <rend_1615+0xe0>
  uint64_t mask = ~0ull >> (8 * n);
    23f4:	2520      	movs	r5, #32
    23f6:	1b2d      	subs	r5, r5, r4
    23f8:	2001      	movs	r0, #1
    23fa:	4240      	negs	r0, r0
    23fc:	0006      	movs	r6, r0
    23fe:	40ae      	lsls	r6, r5
    2400:	40e0      	lsrs	r0, r4
    2402:	4330      	orrs	r0, r6
    2404:	e6d8      	b.n	21b8 <rend_1615+0x1d2>
  if (clen < CRYPTO_ABYTES) return -1;
    2406:	2001      	movs	r0, #1
    2408:	4240      	negs	r0, r0
    240a:	e7dc      	b.n	23c6 <rend_1990+0x88>
    240c:	00006f6f 	.word	0x00006f6f

00002410 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2410:	4b0c      	ldr	r3, [pc, #48]	; (2444 <cpu_irq_enter_critical+0x34>)
    2412:	681b      	ldr	r3, [r3, #0]
    2414:	2b00      	cmp	r3, #0
    2416:	d106      	bne.n	2426 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2418:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    241c:	2b00      	cmp	r3, #0
    241e:	d007      	beq.n	2430 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2420:	2200      	movs	r2, #0
    2422:	4b09      	ldr	r3, [pc, #36]	; (2448 <cpu_irq_enter_critical+0x38>)
    2424:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2426:	4a07      	ldr	r2, [pc, #28]	; (2444 <cpu_irq_enter_critical+0x34>)
    2428:	6813      	ldr	r3, [r2, #0]
    242a:	3301      	adds	r3, #1
    242c:	6013      	str	r3, [r2, #0]
}
    242e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2430:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2432:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2436:	2200      	movs	r2, #0
    2438:	4b04      	ldr	r3, [pc, #16]	; (244c <cpu_irq_enter_critical+0x3c>)
    243a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    243c:	3201      	adds	r2, #1
    243e:	4b02      	ldr	r3, [pc, #8]	; (2448 <cpu_irq_enter_critical+0x38>)
    2440:	701a      	strb	r2, [r3, #0]
    2442:	e7f0      	b.n	2426 <cpu_irq_enter_critical+0x16>
    2444:	2000029c 	.word	0x2000029c
    2448:	200002a0 	.word	0x200002a0
    244c:	200000ec 	.word	0x200000ec

00002450 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2450:	4b08      	ldr	r3, [pc, #32]	; (2474 <cpu_irq_leave_critical+0x24>)
    2452:	681a      	ldr	r2, [r3, #0]
    2454:	3a01      	subs	r2, #1
    2456:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2458:	681b      	ldr	r3, [r3, #0]
    245a:	2b00      	cmp	r3, #0
    245c:	d109      	bne.n	2472 <cpu_irq_leave_critical+0x22>
    245e:	4b06      	ldr	r3, [pc, #24]	; (2478 <cpu_irq_leave_critical+0x28>)
    2460:	781b      	ldrb	r3, [r3, #0]
    2462:	2b00      	cmp	r3, #0
    2464:	d005      	beq.n	2472 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2466:	2201      	movs	r2, #1
    2468:	4b04      	ldr	r3, [pc, #16]	; (247c <cpu_irq_leave_critical+0x2c>)
    246a:	701a      	strb	r2, [r3, #0]
    246c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2470:	b662      	cpsie	i
	}
}
    2472:	4770      	bx	lr
    2474:	2000029c 	.word	0x2000029c
    2478:	200002a0 	.word	0x200002a0
    247c:	200000ec 	.word	0x200000ec

00002480 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2480:	b5f0      	push	{r4, r5, r6, r7, lr}
    2482:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2484:	ac01      	add	r4, sp, #4
    2486:	2501      	movs	r5, #1
    2488:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    248a:	2700      	movs	r7, #0
    248c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    248e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2490:	0021      	movs	r1, r4
    2492:	200f      	movs	r0, #15
    2494:	4e06      	ldr	r6, [pc, #24]	; (24b0 <system_board_init+0x30>)
    2496:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2498:	2280      	movs	r2, #128	; 0x80
    249a:	0212      	lsls	r2, r2, #8
    249c:	2382      	movs	r3, #130	; 0x82
    249e:	05db      	lsls	r3, r3, #23
    24a0:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    24a2:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    24a4:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    24a6:	0021      	movs	r1, r4
    24a8:	201c      	movs	r0, #28
    24aa:	47b0      	blx	r6
}
    24ac:	b003      	add	sp, #12
    24ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24b0:	0000295d 	.word	0x0000295d

000024b4 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
    24b4:	6803      	ldr	r3, [r0, #0]
    24b6:	4a0a      	ldr	r2, [pc, #40]	; (24e0 <_can_enable_peripheral_clock+0x2c>)
    24b8:	4293      	cmp	r3, r2
    24ba:	d003      	beq.n	24c4 <_can_enable_peripheral_clock+0x10>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
    24bc:	4a09      	ldr	r2, [pc, #36]	; (24e4 <_can_enable_peripheral_clock+0x30>)
    24be:	4293      	cmp	r3, r2
    24c0:	d007      	beq.n	24d2 <_can_enable_peripheral_clock+0x1e>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
    24c2:	4770      	bx	lr
	MCLK->AHBMASK.reg |= ahb_mask;
    24c4:	4a08      	ldr	r2, [pc, #32]	; (24e8 <_can_enable_peripheral_clock+0x34>)
    24c6:	6911      	ldr	r1, [r2, #16]
    24c8:	2380      	movs	r3, #128	; 0x80
    24ca:	005b      	lsls	r3, r3, #1
    24cc:	430b      	orrs	r3, r1
    24ce:	6113      	str	r3, [r2, #16]
    24d0:	e7f7      	b.n	24c2 <_can_enable_peripheral_clock+0xe>
    24d2:	4a05      	ldr	r2, [pc, #20]	; (24e8 <_can_enable_peripheral_clock+0x34>)
    24d4:	6911      	ldr	r1, [r2, #16]
    24d6:	2380      	movs	r3, #128	; 0x80
    24d8:	009b      	lsls	r3, r3, #2
    24da:	430b      	orrs	r3, r1
    24dc:	6113      	str	r3, [r2, #16]
    24de:	e7f0      	b.n	24c2 <_can_enable_peripheral_clock+0xe>
    24e0:	42001c00 	.word	0x42001c00
    24e4:	42002000 	.word	0x42002000
    24e8:	40000800 	.word	0x40000800

000024ec <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
    24ec:	b570      	push	{r4, r5, r6, lr}
    24ee:	000c      	movs	r4, r1
    24f0:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    24f2:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
    24f4:	4ba6      	ldr	r3, [pc, #664]	; (2790 <can_init+0x2a4>)
    24f6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    24f8:	4ba6      	ldr	r3, [pc, #664]	; (2794 <can_init+0x2a8>)
    24fa:	2200      	movs	r2, #0
    24fc:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    24fe:	782a      	ldrb	r2, [r5, #0]
    2500:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
    2502:	4ba5      	ldr	r3, [pc, #660]	; (2798 <can_init+0x2ac>)
    2504:	429c      	cmp	r4, r3
    2506:	d100      	bne.n	250a <can_init+0x1e>
    2508:	e0c7      	b.n	269a <can_init+0x1ae>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
    250a:	4ba4      	ldr	r3, [pc, #656]	; (279c <can_init+0x2b0>)
    250c:	429c      	cmp	r4, r3
    250e:	d100      	bne.n	2512 <can_init+0x26>
    2510:	e100      	b.n	2714 <can_init+0x228>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    2512:	69a3      	ldr	r3, [r4, #24]
    2514:	2202      	movs	r2, #2
    2516:	4313      	orrs	r3, r2
    2518:	61a3      	str	r3, [r4, #24]
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 32) / 16 + 5) |
    251a:	4aa1      	ldr	r2, [pc, #644]	; (27a0 <can_init+0x2b4>)
    251c:	23bc      	movs	r3, #188	; 0xbc
    251e:	50e2      	str	r2, [r4, r3]
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 32) / 16 + 5);
    2520:	2207      	movs	r2, #7
    2522:	330c      	adds	r3, #12
    2524:	50e2      	str	r2, [r4, r3]
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
    2526:	4b9f      	ldr	r3, [pc, #636]	; (27a4 <can_init+0x2b8>)
    2528:	61e3      	str	r3, [r4, #28]
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
    252a:	4b9f      	ldr	r3, [pc, #636]	; (27a8 <can_init+0x2bc>)
    252c:	60e3      	str	r3, [r4, #12]
	if (config->tdc_enable) {
    252e:	7bab      	ldrb	r3, [r5, #14]
    2530:	2b00      	cmp	r3, #0
    2532:	d004      	beq.n	253e <can_init+0x52>
		hw->DBTP.reg |= CAN_DBTP_TDC;
    2534:	68e2      	ldr	r2, [r4, #12]
    2536:	2380      	movs	r3, #128	; 0x80
    2538:	041b      	lsls	r3, r3, #16
    253a:	4313      	orrs	r3, r2
    253c:	60e3      	str	r3, [r4, #12]
	if (config->run_in_standby) {
    253e:	786b      	ldrb	r3, [r5, #1]
    2540:	2b00      	cmp	r3, #0
    2542:	d003      	beq.n	254c <can_init+0x60>
		hw->MRCFG.reg |= 0x01<<6;
    2544:	68a3      	ldr	r3, [r4, #8]
    2546:	2240      	movs	r2, #64	; 0x40
    2548:	4313      	orrs	r3, r2
    254a:	60a3      	str	r3, [r4, #8]
	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
    254c:	6962      	ldr	r2, [r4, #20]
    254e:	78ab      	ldrb	r3, [r5, #2]
    2550:	4313      	orrs	r3, r2
    2552:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
    2554:	78eb      	ldrb	r3, [r5, #3]
    2556:	2b00      	cmp	r3, #0
    2558:	d004      	beq.n	2564 <can_init+0x78>
		hw->CCCR.reg |= CAN_CCCR_TXP;
    255a:	69a2      	ldr	r2, [r4, #24]
    255c:	2380      	movs	r3, #128	; 0x80
    255e:	01db      	lsls	r3, r3, #7
    2560:	4313      	orrs	r3, r2
    2562:	61a3      	str	r3, [r4, #24]
	if (config->edge_filtering) {
    2564:	792b      	ldrb	r3, [r5, #4]
    2566:	2b00      	cmp	r3, #0
    2568:	d004      	beq.n	2574 <can_init+0x88>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
    256a:	69a2      	ldr	r2, [r4, #24]
    256c:	2380      	movs	r3, #128	; 0x80
    256e:	019b      	lsls	r3, r3, #6
    2570:	4313      	orrs	r3, r2
    2572:	61a3      	str	r3, [r4, #24]
	if (config->protocol_exception_handling) {
    2574:	796b      	ldrb	r3, [r5, #5]
    2576:	2b00      	cmp	r3, #0
    2578:	d004      	beq.n	2584 <can_init+0x98>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
    257a:	69a2      	ldr	r2, [r4, #24]
    257c:	2380      	movs	r3, #128	; 0x80
    257e:	015b      	lsls	r3, r3, #5
    2580:	4313      	orrs	r3, r2
    2582:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
    2584:	79ab      	ldrb	r3, [r5, #6]
    2586:	2b00      	cmp	r3, #0
    2588:	d103      	bne.n	2592 <can_init+0xa6>
		hw->CCCR.reg |= CAN_CCCR_DAR;
    258a:	69a3      	ldr	r3, [r4, #24]
    258c:	2240      	movs	r2, #64	; 0x40
    258e:	4313      	orrs	r3, r2
    2590:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
    2592:	79eb      	ldrb	r3, [r5, #7]
    2594:	2b00      	cmp	r3, #0
    2596:	d003      	beq.n	25a0 <can_init+0xb4>
		hw->CCCR.reg |= CAN_CCCR_CSR;
    2598:	69a3      	ldr	r3, [r4, #24]
    259a:	2210      	movs	r2, #16
    259c:	4313      	orrs	r3, r2
    259e:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_acknowledge) {
    25a0:	7a2b      	ldrb	r3, [r5, #8]
    25a2:	2b00      	cmp	r3, #0
    25a4:	d003      	beq.n	25ae <can_init+0xc2>
		hw->CCCR.reg |= CAN_CCCR_CSA;
    25a6:	69a3      	ldr	r3, [r4, #24]
    25a8:	2208      	movs	r2, #8
    25aa:	4313      	orrs	r3, r2
    25ac:	61a3      	str	r3, [r4, #24]
	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
    25ae:	7a6b      	ldrb	r3, [r5, #9]
    25b0:	041b      	lsls	r3, r3, #16
    25b2:	22f0      	movs	r2, #240	; 0xf0
    25b4:	0312      	lsls	r2, r2, #12
    25b6:	4013      	ands	r3, r2
    25b8:	2201      	movs	r2, #1
    25ba:	4313      	orrs	r3, r2
    25bc:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
    25be:	7b2b      	ldrb	r3, [r5, #12]
    25c0:	7b6a      	ldrb	r2, [r5, #13]
    25c2:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    25c4:	896a      	ldrh	r2, [r5, #10]
    25c6:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
    25c8:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    25ca:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    25cc:	7beb      	ldrb	r3, [r5, #15]
    25ce:	021b      	lsls	r3, r3, #8
    25d0:	22fe      	movs	r2, #254	; 0xfe
    25d2:	01d2      	lsls	r2, r2, #7
    25d4:	4013      	ands	r3, r2
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
    25d6:	7c29      	ldrb	r1, [r5, #16]
    25d8:	227f      	movs	r2, #127	; 0x7f
    25da:	400a      	ands	r2, r1
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    25dc:	4313      	orrs	r3, r2
    25de:	64a3      	str	r3, [r4, #72]	; 0x48
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    25e0:	7c6a      	ldrb	r2, [r5, #17]
    25e2:	0112      	lsls	r2, r2, #4
    25e4:	2330      	movs	r3, #48	; 0x30
    25e6:	4013      	ands	r3, r2
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
    25e8:	7ca9      	ldrb	r1, [r5, #18]
    25ea:	0089      	lsls	r1, r1, #2
    25ec:	220c      	movs	r2, #12
    25ee:	400a      	ands	r2, r1
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    25f0:	4313      	orrs	r3, r2
    25f2:	2280      	movs	r2, #128	; 0x80
    25f4:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_standard_reject) {
    25f6:	7ceb      	ldrb	r3, [r5, #19]
    25f8:	2b00      	cmp	r3, #0
    25fa:	d003      	beq.n	2604 <can_init+0x118>
		hw->GFC.reg |= CAN_GFC_RRFS;
    25fc:	58a3      	ldr	r3, [r4, r2]
    25fe:	2102      	movs	r1, #2
    2600:	430b      	orrs	r3, r1
    2602:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_extended_reject) {
    2604:	7d2b      	ldrb	r3, [r5, #20]
    2606:	2b00      	cmp	r3, #0
    2608:	d004      	beq.n	2614 <can_init+0x128>
		hw->GFC.reg |= CAN_GFC_RRFE;
    260a:	2280      	movs	r2, #128	; 0x80
    260c:	58a3      	ldr	r3, [r4, r2]
    260e:	2101      	movs	r1, #1
    2610:	430b      	orrs	r3, r1
    2612:	50a3      	str	r3, [r4, r2]
	hw->XIDAM.reg = config->extended_id_mask;
    2614:	2390      	movs	r3, #144	; 0x90
    2616:	69aa      	ldr	r2, [r5, #24]
    2618:	50e2      	str	r2, [r4, r3]
	if (config->rx_fifo_0_overwrite) {
    261a:	7f2b      	ldrb	r3, [r5, #28]
    261c:	2b00      	cmp	r3, #0
    261e:	d005      	beq.n	262c <can_init+0x140>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
    2620:	22a0      	movs	r2, #160	; 0xa0
    2622:	58a1      	ldr	r1, [r4, r2]
    2624:	2380      	movs	r3, #128	; 0x80
    2626:	061b      	lsls	r3, r3, #24
    2628:	430b      	orrs	r3, r1
    262a:	50a3      	str	r3, [r4, r2]
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
    262c:	22a0      	movs	r2, #160	; 0xa0
    262e:	58a1      	ldr	r1, [r4, r2]
    2630:	7f6b      	ldrb	r3, [r5, #29]
    2632:	061b      	lsls	r3, r3, #24
    2634:	20fe      	movs	r0, #254	; 0xfe
    2636:	05c0      	lsls	r0, r0, #23
    2638:	4003      	ands	r3, r0
    263a:	430b      	orrs	r3, r1
    263c:	50a3      	str	r3, [r4, r2]
	if (config->rx_fifo_1_overwrite) {
    263e:	7fab      	ldrb	r3, [r5, #30]
    2640:	2b00      	cmp	r3, #0
    2642:	d005      	beq.n	2650 <can_init+0x164>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
    2644:	3210      	adds	r2, #16
    2646:	58a1      	ldr	r1, [r4, r2]
    2648:	2380      	movs	r3, #128	; 0x80
    264a:	061b      	lsls	r3, r3, #24
    264c:	430b      	orrs	r3, r1
    264e:	50a3      	str	r3, [r4, r2]
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
    2650:	22b0      	movs	r2, #176	; 0xb0
    2652:	58a1      	ldr	r1, [r4, r2]
    2654:	7feb      	ldrb	r3, [r5, #31]
    2656:	061b      	lsls	r3, r3, #24
    2658:	20fe      	movs	r0, #254	; 0xfe
    265a:	05c0      	lsls	r0, r0, #23
    265c:	4003      	ands	r3, r0
    265e:	430b      	orrs	r3, r1
    2660:	50a3      	str	r3, [r4, r2]
	if (config->tx_queue_mode) {
    2662:	2320      	movs	r3, #32
    2664:	5ceb      	ldrb	r3, [r5, r3]
    2666:	2b00      	cmp	r3, #0
    2668:	d005      	beq.n	2676 <can_init+0x18a>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
    266a:	3210      	adds	r2, #16
    266c:	58a1      	ldr	r1, [r4, r2]
    266e:	2380      	movs	r3, #128	; 0x80
    2670:	05db      	lsls	r3, r3, #23
    2672:	430b      	orrs	r3, r1
    2674:	50a3      	str	r3, [r4, r2]
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
    2676:	22f0      	movs	r2, #240	; 0xf0
    2678:	58a1      	ldr	r1, [r4, r2]
    267a:	2321      	movs	r3, #33	; 0x21
    267c:	5ceb      	ldrb	r3, [r5, r3]
    267e:	061b      	lsls	r3, r3, #24
    2680:	20fc      	movs	r0, #252	; 0xfc
    2682:	0580      	lsls	r0, r0, #22
    2684:	4003      	ands	r3, r0
    2686:	430b      	orrs	r3, r1
    2688:	50a3      	str	r3, [r4, r2]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
    268a:	2303      	movs	r3, #3
    268c:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
    268e:	3b04      	subs	r3, #4
    2690:	3a10      	subs	r2, #16
    2692:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
    2694:	3204      	adds	r2, #4
    2696:	50a3      	str	r3, [r4, r2]
}
    2698:	bd70      	pop	{r4, r5, r6, pc}
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
    269a:	493e      	ldr	r1, [pc, #248]	; (2794 <can_init+0x2a8>)
    269c:	201a      	movs	r0, #26
    269e:	4b43      	ldr	r3, [pc, #268]	; (27ac <can_init+0x2c0>)
    26a0:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
    26a2:	201a      	movs	r0, #26
    26a4:	4b42      	ldr	r3, [pc, #264]	; (27b0 <can_init+0x2c4>)
    26a6:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    26a8:	4b3b      	ldr	r3, [pc, #236]	; (2798 <can_init+0x2ac>)
    26aa:	699a      	ldr	r2, [r3, #24]
    26ac:	2102      	movs	r1, #2
    26ae:	430a      	orrs	r2, r1
    26b0:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
    26b2:	4a40      	ldr	r2, [pc, #256]	; (27b4 <can_init+0x2c8>)
    26b4:	0412      	lsls	r2, r2, #16
    26b6:	0c12      	lsrs	r2, r2, #16
    26b8:	2180      	movs	r1, #128	; 0x80
    26ba:	0389      	lsls	r1, r1, #14
    26bc:	430a      	orrs	r2, r1
    26be:	2184      	movs	r1, #132	; 0x84
    26c0:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
    26c2:	4a3d      	ldr	r2, [pc, #244]	; (27b8 <can_init+0x2cc>)
    26c4:	0412      	lsls	r2, r2, #16
    26c6:	0c12      	lsrs	r2, r2, #16
    26c8:	2180      	movs	r1, #128	; 0x80
    26ca:	0349      	lsls	r1, r1, #13
    26cc:	430a      	orrs	r2, r1
    26ce:	2088      	movs	r0, #136	; 0x88
    26d0:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
    26d2:	4a3a      	ldr	r2, [pc, #232]	; (27bc <can_init+0x2d0>)
    26d4:	0412      	lsls	r2, r2, #16
    26d6:	0c12      	lsrs	r2, r2, #16
    26d8:	430a      	orrs	r2, r1
    26da:	3018      	adds	r0, #24
    26dc:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
    26de:	4a38      	ldr	r2, [pc, #224]	; (27c0 <can_init+0x2d4>)
    26e0:	0412      	lsls	r2, r2, #16
    26e2:	0c12      	lsrs	r2, r2, #16
    26e4:	4311      	orrs	r1, r2
    26e6:	22b0      	movs	r2, #176	; 0xb0
    26e8:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
    26ea:	4a36      	ldr	r2, [pc, #216]	; (27c4 <can_init+0x2d8>)
    26ec:	0412      	lsls	r2, r2, #16
    26ee:	0c12      	lsrs	r2, r2, #16
    26f0:	21ac      	movs	r1, #172	; 0xac
    26f2:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    26f4:	4a34      	ldr	r2, [pc, #208]	; (27c8 <can_init+0x2dc>)
    26f6:	0412      	lsls	r2, r2, #16
    26f8:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
    26fa:	4934      	ldr	r1, [pc, #208]	; (27cc <can_init+0x2e0>)
    26fc:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    26fe:	21c0      	movs	r1, #192	; 0xc0
    2700:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
    2702:	4a33      	ldr	r2, [pc, #204]	; (27d0 <can_init+0x2e4>)
    2704:	0412      	lsls	r2, r2, #16
    2706:	0c12      	lsrs	r2, r2, #16
    2708:	2180      	movs	r1, #128	; 0x80
    270a:	0309      	lsls	r1, r1, #12
    270c:	430a      	orrs	r2, r1
    270e:	21f0      	movs	r1, #240	; 0xf0
    2710:	505a      	str	r2, [r3, r1]
    2712:	e702      	b.n	251a <can_init+0x2e>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
    2714:	491f      	ldr	r1, [pc, #124]	; (2794 <can_init+0x2a8>)
    2716:	201b      	movs	r0, #27
    2718:	4b24      	ldr	r3, [pc, #144]	; (27ac <can_init+0x2c0>)
    271a:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
    271c:	201b      	movs	r0, #27
    271e:	4b24      	ldr	r3, [pc, #144]	; (27b0 <can_init+0x2c4>)
    2720:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    2722:	4b1e      	ldr	r3, [pc, #120]	; (279c <can_init+0x2b0>)
    2724:	699a      	ldr	r2, [r3, #24]
    2726:	2102      	movs	r1, #2
    2728:	430a      	orrs	r2, r1
    272a:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
    272c:	4a29      	ldr	r2, [pc, #164]	; (27d4 <can_init+0x2e8>)
    272e:	0412      	lsls	r2, r2, #16
    2730:	0c12      	lsrs	r2, r2, #16
    2732:	2180      	movs	r1, #128	; 0x80
    2734:	0389      	lsls	r1, r1, #14
    2736:	430a      	orrs	r2, r1
    2738:	2184      	movs	r1, #132	; 0x84
    273a:	505a      	str	r2, [r3, r1]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
    273c:	4a26      	ldr	r2, [pc, #152]	; (27d8 <can_init+0x2ec>)
    273e:	0412      	lsls	r2, r2, #16
    2740:	0c12      	lsrs	r2, r2, #16
    2742:	2180      	movs	r1, #128	; 0x80
    2744:	0349      	lsls	r1, r1, #13
    2746:	430a      	orrs	r2, r1
    2748:	2088      	movs	r0, #136	; 0x88
    274a:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
    274c:	4a23      	ldr	r2, [pc, #140]	; (27dc <can_init+0x2f0>)
    274e:	0412      	lsls	r2, r2, #16
    2750:	0c12      	lsrs	r2, r2, #16
    2752:	430a      	orrs	r2, r1
    2754:	3018      	adds	r0, #24
    2756:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
    2758:	4a21      	ldr	r2, [pc, #132]	; (27e0 <can_init+0x2f4>)
    275a:	0412      	lsls	r2, r2, #16
    275c:	0c12      	lsrs	r2, r2, #16
    275e:	4311      	orrs	r1, r2
    2760:	22b0      	movs	r2, #176	; 0xb0
    2762:	5099      	str	r1, [r3, r2]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
    2764:	4a1f      	ldr	r2, [pc, #124]	; (27e4 <can_init+0x2f8>)
    2766:	0412      	lsls	r2, r2, #16
    2768:	0c12      	lsrs	r2, r2, #16
    276a:	21ac      	movs	r1, #172	; 0xac
    276c:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    276e:	4a1e      	ldr	r2, [pc, #120]	; (27e8 <can_init+0x2fc>)
    2770:	0412      	lsls	r2, r2, #16
    2772:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
    2774:	4915      	ldr	r1, [pc, #84]	; (27cc <can_init+0x2e0>)
    2776:	430a      	orrs	r2, r1
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    2778:	21c0      	movs	r1, #192	; 0xc0
    277a:	505a      	str	r2, [r3, r1]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
    277c:	4a1b      	ldr	r2, [pc, #108]	; (27ec <can_init+0x300>)
    277e:	0412      	lsls	r2, r2, #16
    2780:	0c12      	lsrs	r2, r2, #16
    2782:	2180      	movs	r1, #128	; 0x80
    2784:	0309      	lsls	r1, r1, #12
    2786:	430a      	orrs	r2, r1
    2788:	21f0      	movs	r1, #240	; 0xf0
    278a:	505a      	str	r2, [r3, r1]
    278c:	e6c5      	b.n	251a <can_init+0x2e>
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	000024b5 	.word	0x000024b5
    2794:	20002b58 	.word	0x20002b58
    2798:	42001c00 	.word	0x42001c00
    279c:	42002000 	.word	0x42002000
    27a0:	00000777 	.word	0x00000777
    27a4:	06050a03 	.word	0x06050a03
    27a8:	00000a33 	.word	0x00000a33
    27ac:	00003915 	.word	0x00003915
    27b0:	000038a5 	.word	0x000038a5
    27b4:	200010a4 	.word	0x200010a4
    27b8:	20000724 	.word	0x20000724
    27bc:	200007a4 	.word	0x200007a4
    27c0:	20000c24 	.word	0x20000c24
    27c4:	200002a4 	.word	0x200002a4
    27c8:	20001124 	.word	0x20001124
    27cc:	04040000 	.word	0x04040000
    27d0:	20001364 	.word	0x20001364
    27d4:	200021a4 	.word	0x200021a4
    27d8:	20001824 	.word	0x20001824
    27dc:	200018a4 	.word	0x200018a4
    27e0:	20001d24 	.word	0x20001d24
    27e4:	200013a4 	.word	0x200013a4
    27e8:	20002224 	.word	0x20002224
    27ec:	20002464 	.word	0x20002464

000027f0 <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
    27f0:	6802      	ldr	r2, [r0, #0]
    27f2:	6993      	ldr	r3, [r2, #24]
    27f4:	2101      	movs	r1, #1
    27f6:	438b      	bics	r3, r1
    27f8:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
    27fa:	6801      	ldr	r1, [r0, #0]
    27fc:	2201      	movs	r2, #1
    27fe:	698b      	ldr	r3, [r1, #24]
    2800:	421a      	tst	r2, r3
    2802:	d1fc      	bne.n	27fe <can_start+0xe>
}
    2804:	4770      	bx	lr

00002806 <can_enable_fd_mode>:
	while (!(module_inst->hw->CCCR.reg & CAN_CCCR_INIT));
}

void can_enable_fd_mode(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg |= CAN_CCCR_INIT;
    2806:	6802      	ldr	r2, [r0, #0]
    2808:	6993      	ldr	r3, [r2, #24]
    280a:	2101      	movs	r1, #1
    280c:	430b      	orrs	r3, r1
    280e:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->CCCR.reg & CAN_CCCR_INIT));
    2810:	6802      	ldr	r2, [r0, #0]
    2812:	6993      	ldr	r3, [r2, #24]
    2814:	4219      	tst	r1, r3
    2816:	d0fc      	beq.n	2812 <can_enable_fd_mode+0xc>
	module_inst->hw->CCCR.reg |= CAN_CCCR_CCE;
    2818:	6993      	ldr	r3, [r2, #24]
    281a:	2102      	movs	r1, #2
    281c:	430b      	orrs	r3, r1
    281e:	6193      	str	r3, [r2, #24]

	module_inst->hw->CCCR.reg |= CAN_CCCR_FDOE;
    2820:	6802      	ldr	r2, [r0, #0]
    2822:	6991      	ldr	r1, [r2, #24]
    2824:	2380      	movs	r3, #128	; 0x80
    2826:	005b      	lsls	r3, r3, #1
    2828:	430b      	orrs	r3, r1
    282a:	6193      	str	r3, [r2, #24]
	module_inst->hw->CCCR.reg |= CAN_CCCR_BRSE;
    282c:	6802      	ldr	r2, [r0, #0]
    282e:	6991      	ldr	r1, [r2, #24]
    2830:	2380      	movs	r3, #128	; 0x80
    2832:	009b      	lsls	r3, r3, #2
    2834:	430b      	orrs	r3, r1
    2836:	6193      	str	r3, [r2, #24]
}
    2838:	4770      	bx	lr
	...

0000283c <can_set_rx_standard_filter>:
}

enum status_code can_set_rx_standard_filter(
		struct can_module *const module_inst,
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
    283c:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    283e:	6803      	ldr	r3, [r0, #0]
    2840:	4809      	ldr	r0, [pc, #36]	; (2868 <can_set_rx_standard_filter+0x2c>)
    2842:	4283      	cmp	r3, r0
    2844:	d004      	beq.n	2850 <can_set_rx_standard_filter+0x14>
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    2846:	4c09      	ldr	r4, [pc, #36]	; (286c <can_set_rx_standard_filter+0x30>)
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    2848:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    284a:	42a3      	cmp	r3, r4
    284c:	d006      	beq.n	285c <can_set_rx_standard_filter+0x20>
}
    284e:	bd10      	pop	{r4, pc}
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    2850:	6809      	ldr	r1, [r1, #0]
    2852:	0092      	lsls	r2, r2, #2
    2854:	4b06      	ldr	r3, [pc, #24]	; (2870 <can_set_rx_standard_filter+0x34>)
    2856:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    2858:	2000      	movs	r0, #0
    285a:	e7f8      	b.n	284e <can_set_rx_standard_filter+0x12>
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    285c:	6809      	ldr	r1, [r1, #0]
    285e:	0092      	lsls	r2, r2, #2
    2860:	4b04      	ldr	r3, [pc, #16]	; (2874 <can_set_rx_standard_filter+0x38>)
    2862:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    2864:	2000      	movs	r0, #0
    2866:	e7f2      	b.n	284e <can_set_rx_standard_filter+0x12>
    2868:	42001c00 	.word	0x42001c00
    286c:	42002000 	.word	0x42002000
    2870:	200010a4 	.word	0x200010a4
    2874:	200021a4 	.word	0x200021a4

00002878 <can_get_rx_buffer_element>:
}

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
    2878:	b510      	push	{r4, lr}
    287a:	000c      	movs	r4, r1
	if (module_inst->hw == CAN0) {
    287c:	6803      	ldr	r3, [r0, #0]
    287e:	490f      	ldr	r1, [pc, #60]	; (28bc <can_get_rx_buffer_element+0x44>)
    2880:	428b      	cmp	r3, r1
    2882:	d004      	beq.n	288e <can_get_rx_buffer_element+0x16>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    2884:	490e      	ldr	r1, [pc, #56]	; (28c0 <can_get_rx_buffer_element+0x48>)
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    2886:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    2888:	428b      	cmp	r3, r1
    288a:	d00b      	beq.n	28a4 <can_get_rx_buffer_element+0x2c>
}
    288c:	bd10      	pop	{r4, pc}
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    288e:	00d1      	lsls	r1, r2, #3
    2890:	188a      	adds	r2, r1, r2
    2892:	00d2      	lsls	r2, r2, #3
    2894:	490b      	ldr	r1, [pc, #44]	; (28c4 <can_get_rx_buffer_element+0x4c>)
    2896:	1889      	adds	r1, r1, r2
    2898:	2248      	movs	r2, #72	; 0x48
    289a:	0020      	movs	r0, r4
    289c:	4b0a      	ldr	r3, [pc, #40]	; (28c8 <can_get_rx_buffer_element+0x50>)
    289e:	4798      	blx	r3
		return STATUS_OK;
    28a0:	2000      	movs	r0, #0
    28a2:	e7f3      	b.n	288c <can_get_rx_buffer_element+0x14>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    28a4:	00d1      	lsls	r1, r2, #3
    28a6:	188a      	adds	r2, r1, r2
    28a8:	00d2      	lsls	r2, r2, #3
    28aa:	4908      	ldr	r1, [pc, #32]	; (28cc <can_get_rx_buffer_element+0x54>)
    28ac:	1889      	adds	r1, r1, r2
    28ae:	2248      	movs	r2, #72	; 0x48
    28b0:	0020      	movs	r0, r4
    28b2:	4b05      	ldr	r3, [pc, #20]	; (28c8 <can_get_rx_buffer_element+0x50>)
    28b4:	4798      	blx	r3
		return STATUS_OK;
    28b6:	2000      	movs	r0, #0
    28b8:	e7e8      	b.n	288c <can_get_rx_buffer_element+0x14>
    28ba:	46c0      	nop			; (mov r8, r8)
    28bc:	42001c00 	.word	0x42001c00
    28c0:	42002000 	.word	0x42002000
    28c4:	200002a4 	.word	0x200002a4
    28c8:	00006f6f 	.word	0x00006f6f
    28cc:	200013a4 	.word	0x200013a4

000028d0 <can_set_tx_buffer_element>:
}

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
    28d0:	b530      	push	{r4, r5, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
    28d2:	6803      	ldr	r3, [r0, #0]
    28d4:	481d      	ldr	r0, [pc, #116]	; (294c <can_set_tx_buffer_element+0x7c>)
    28d6:	4283      	cmp	r3, r0
    28d8:	d004      	beq.n	28e4 <can_set_tx_buffer_element+0x14>
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    28da:	4c1d      	ldr	r4, [pc, #116]	; (2950 <can_set_tx_buffer_element+0x80>)
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    28dc:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    28de:	42a3      	cmp	r3, r4
    28e0:	d01a      	beq.n	2918 <can_set_tx_buffer_element+0x48>
}
    28e2:	bd30      	pop	{r4, r5, pc}
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
    28e4:	680d      	ldr	r5, [r1, #0]
    28e6:	481b      	ldr	r0, [pc, #108]	; (2954 <can_set_tx_buffer_element+0x84>)
    28e8:	00d4      	lsls	r4, r2, #3
    28ea:	18a3      	adds	r3, r4, r2
    28ec:	00db      	lsls	r3, r3, #3
    28ee:	501d      	str	r5, [r3, r0]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
    28f0:	684d      	ldr	r5, [r1, #4]
    28f2:	18a3      	adds	r3, r4, r2
    28f4:	00db      	lsls	r3, r3, #3
    28f6:	18c3      	adds	r3, r0, r3
    28f8:	605d      	str	r5, [r3, #4]
    28fa:	000b      	movs	r3, r1
    28fc:	3308      	adds	r3, #8
    28fe:	18a2      	adds	r2, r4, r2
    2900:	00d2      	lsls	r2, r2, #3
    2902:	3208      	adds	r2, #8
    2904:	1882      	adds	r2, r0, r2
    2906:	3148      	adds	r1, #72	; 0x48
			can0_tx_buffer[index].data[i] = tx_element->data[i];
    2908:	7818      	ldrb	r0, [r3, #0]
    290a:	7010      	strb	r0, [r2, #0]
    290c:	3301      	adds	r3, #1
    290e:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    2910:	428b      	cmp	r3, r1
    2912:	d1f9      	bne.n	2908 <can_set_tx_buffer_element+0x38>
		return STATUS_OK;
    2914:	2000      	movs	r0, #0
    2916:	e7e4      	b.n	28e2 <can_set_tx_buffer_element+0x12>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
    2918:	680d      	ldr	r5, [r1, #0]
    291a:	480f      	ldr	r0, [pc, #60]	; (2958 <can_set_tx_buffer_element+0x88>)
    291c:	00d4      	lsls	r4, r2, #3
    291e:	18a3      	adds	r3, r4, r2
    2920:	00db      	lsls	r3, r3, #3
    2922:	501d      	str	r5, [r3, r0]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
    2924:	684d      	ldr	r5, [r1, #4]
    2926:	18a3      	adds	r3, r4, r2
    2928:	00db      	lsls	r3, r3, #3
    292a:	18c3      	adds	r3, r0, r3
    292c:	605d      	str	r5, [r3, #4]
    292e:	000b      	movs	r3, r1
    2930:	3308      	adds	r3, #8
    2932:	18a2      	adds	r2, r4, r2
    2934:	00d2      	lsls	r2, r2, #3
    2936:	3208      	adds	r2, #8
    2938:	1882      	adds	r2, r0, r2
    293a:	3148      	adds	r1, #72	; 0x48
			can1_tx_buffer[index].data[i] = tx_element->data[i];
    293c:	7818      	ldrb	r0, [r3, #0]
    293e:	7010      	strb	r0, [r2, #0]
    2940:	3301      	adds	r3, #1
    2942:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    2944:	428b      	cmp	r3, r1
    2946:	d1f9      	bne.n	293c <can_set_tx_buffer_element+0x6c>
		return STATUS_OK;
    2948:	2000      	movs	r0, #0
    294a:	e7ca      	b.n	28e2 <can_set_tx_buffer_element+0x12>
    294c:	42001c00 	.word	0x42001c00
    2950:	42002000 	.word	0x42002000
    2954:	20001124 	.word	0x20001124
    2958:	20002224 	.word	0x20002224

0000295c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    295c:	b500      	push	{lr}
    295e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2960:	ab01      	add	r3, sp, #4
    2962:	2280      	movs	r2, #128	; 0x80
    2964:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2966:	780a      	ldrb	r2, [r1, #0]
    2968:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    296a:	784a      	ldrb	r2, [r1, #1]
    296c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    296e:	788a      	ldrb	r2, [r1, #2]
    2970:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2972:	0019      	movs	r1, r3
    2974:	4b01      	ldr	r3, [pc, #4]	; (297c <port_pin_set_config+0x20>)
    2976:	4798      	blx	r3
}
    2978:	b003      	add	sp, #12
    297a:	bd00      	pop	{pc}
    297c:	00003a11 	.word	0x00003a11

00002980 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    2980:	b5f0      	push	{r4, r5, r6, r7, lr}
    2982:	46de      	mov	lr, fp
    2984:	4657      	mov	r7, sl
    2986:	464e      	mov	r6, r9
    2988:	4645      	mov	r5, r8
    298a:	b5e0      	push	{r5, r6, r7, lr}
    298c:	b087      	sub	sp, #28
    298e:	4680      	mov	r8, r0
    2990:	9104      	str	r1, [sp, #16]
    2992:	0016      	movs	r6, r2
    2994:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2996:	2200      	movs	r2, #0
    2998:	2300      	movs	r3, #0
    299a:	2100      	movs	r1, #0
    299c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    299e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    29a0:	2001      	movs	r0, #1
    29a2:	0021      	movs	r1, r4
    29a4:	9600      	str	r6, [sp, #0]
    29a6:	9701      	str	r7, [sp, #4]
    29a8:	465c      	mov	r4, fp
    29aa:	9403      	str	r4, [sp, #12]
    29ac:	4644      	mov	r4, r8
    29ae:	9405      	str	r4, [sp, #20]
    29b0:	e013      	b.n	29da <long_division+0x5a>
    29b2:	2420      	movs	r4, #32
    29b4:	1a64      	subs	r4, r4, r1
    29b6:	0005      	movs	r5, r0
    29b8:	40e5      	lsrs	r5, r4
    29ba:	46a8      	mov	r8, r5
    29bc:	e014      	b.n	29e8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    29be:	9c00      	ldr	r4, [sp, #0]
    29c0:	9d01      	ldr	r5, [sp, #4]
    29c2:	1b12      	subs	r2, r2, r4
    29c4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    29c6:	465c      	mov	r4, fp
    29c8:	464d      	mov	r5, r9
    29ca:	432c      	orrs	r4, r5
    29cc:	46a3      	mov	fp, r4
    29ce:	9c03      	ldr	r4, [sp, #12]
    29d0:	4645      	mov	r5, r8
    29d2:	432c      	orrs	r4, r5
    29d4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    29d6:	3901      	subs	r1, #1
    29d8:	d325      	bcc.n	2a26 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    29da:	2420      	movs	r4, #32
    29dc:	4264      	negs	r4, r4
    29de:	190c      	adds	r4, r1, r4
    29e0:	d4e7      	bmi.n	29b2 <long_division+0x32>
    29e2:	0005      	movs	r5, r0
    29e4:	40a5      	lsls	r5, r4
    29e6:	46a8      	mov	r8, r5
    29e8:	0004      	movs	r4, r0
    29ea:	408c      	lsls	r4, r1
    29ec:	46a1      	mov	r9, r4
		r = r << 1;
    29ee:	1892      	adds	r2, r2, r2
    29f0:	415b      	adcs	r3, r3
    29f2:	0014      	movs	r4, r2
    29f4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    29f6:	9e05      	ldr	r6, [sp, #20]
    29f8:	464f      	mov	r7, r9
    29fa:	403e      	ands	r6, r7
    29fc:	46b4      	mov	ip, r6
    29fe:	9e04      	ldr	r6, [sp, #16]
    2a00:	4647      	mov	r7, r8
    2a02:	403e      	ands	r6, r7
    2a04:	46b2      	mov	sl, r6
    2a06:	4666      	mov	r6, ip
    2a08:	4657      	mov	r7, sl
    2a0a:	433e      	orrs	r6, r7
    2a0c:	d003      	beq.n	2a16 <long_division+0x96>
			r |= 0x01;
    2a0e:	0006      	movs	r6, r0
    2a10:	4326      	orrs	r6, r4
    2a12:	0032      	movs	r2, r6
    2a14:	002b      	movs	r3, r5
		if (r >= d) {
    2a16:	9c00      	ldr	r4, [sp, #0]
    2a18:	9d01      	ldr	r5, [sp, #4]
    2a1a:	429d      	cmp	r5, r3
    2a1c:	d8db      	bhi.n	29d6 <long_division+0x56>
    2a1e:	d1ce      	bne.n	29be <long_division+0x3e>
    2a20:	4294      	cmp	r4, r2
    2a22:	d8d8      	bhi.n	29d6 <long_division+0x56>
    2a24:	e7cb      	b.n	29be <long_division+0x3e>
    2a26:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    2a28:	4658      	mov	r0, fp
    2a2a:	0019      	movs	r1, r3
    2a2c:	b007      	add	sp, #28
    2a2e:	bc3c      	pop	{r2, r3, r4, r5}
    2a30:	4690      	mov	r8, r2
    2a32:	4699      	mov	r9, r3
    2a34:	46a2      	mov	sl, r4
    2a36:	46ab      	mov	fp, r5
    2a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002a3a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2a3a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2a3c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2a3e:	2340      	movs	r3, #64	; 0x40
    2a40:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    2a42:	4281      	cmp	r1, r0
    2a44:	d202      	bcs.n	2a4c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    2a46:	0018      	movs	r0, r3
    2a48:	bd10      	pop	{r4, pc}
		baud_calculated++;
    2a4a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    2a4c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    2a4e:	1c63      	adds	r3, r4, #1
    2a50:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    2a52:	4288      	cmp	r0, r1
    2a54:	d9f9      	bls.n	2a4a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2a56:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    2a58:	2cff      	cmp	r4, #255	; 0xff
    2a5a:	d8f4      	bhi.n	2a46 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    2a5c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    2a5e:	2300      	movs	r3, #0
    2a60:	e7f1      	b.n	2a46 <_sercom_get_sync_baud_val+0xc>
	...

00002a64 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a66:	b083      	sub	sp, #12
    2a68:	000f      	movs	r7, r1
    2a6a:	0016      	movs	r6, r2
    2a6c:	aa08      	add	r2, sp, #32
    2a6e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2a70:	0004      	movs	r4, r0
    2a72:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2a74:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    2a76:	42bc      	cmp	r4, r7
    2a78:	d902      	bls.n	2a80 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    2a7a:	0010      	movs	r0, r2
    2a7c:	b003      	add	sp, #12
    2a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2a80:	2b00      	cmp	r3, #0
    2a82:	d114      	bne.n	2aae <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2a84:	0002      	movs	r2, r0
    2a86:	0008      	movs	r0, r1
    2a88:	2100      	movs	r1, #0
    2a8a:	4c19      	ldr	r4, [pc, #100]	; (2af0 <_sercom_get_async_baud_val+0x8c>)
    2a8c:	47a0      	blx	r4
    2a8e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    2a90:	003a      	movs	r2, r7
    2a92:	2300      	movs	r3, #0
    2a94:	2000      	movs	r0, #0
    2a96:	4c17      	ldr	r4, [pc, #92]	; (2af4 <_sercom_get_async_baud_val+0x90>)
    2a98:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2a9a:	2200      	movs	r2, #0
    2a9c:	2301      	movs	r3, #1
    2a9e:	1a12      	subs	r2, r2, r0
    2aa0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    2aa2:	0c12      	lsrs	r2, r2, #16
    2aa4:	041b      	lsls	r3, r3, #16
    2aa6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    2aa8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    2aaa:	2200      	movs	r2, #0
    2aac:	e7e5      	b.n	2a7a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    2aae:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2ab0:	2b01      	cmp	r3, #1
    2ab2:	d1f9      	bne.n	2aa8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    2ab4:	000a      	movs	r2, r1
    2ab6:	2300      	movs	r3, #0
    2ab8:	2100      	movs	r1, #0
    2aba:	4c0d      	ldr	r4, [pc, #52]	; (2af0 <_sercom_get_async_baud_val+0x8c>)
    2abc:	47a0      	blx	r4
    2abe:	0002      	movs	r2, r0
    2ac0:	000b      	movs	r3, r1
    2ac2:	9200      	str	r2, [sp, #0]
    2ac4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    2ac6:	0038      	movs	r0, r7
    2ac8:	2100      	movs	r1, #0
    2aca:	4c0a      	ldr	r4, [pc, #40]	; (2af4 <_sercom_get_async_baud_val+0x90>)
    2acc:	47a0      	blx	r4
    2ace:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    2ad0:	2380      	movs	r3, #128	; 0x80
    2ad2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2ad4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    2ad6:	4298      	cmp	r0, r3
    2ad8:	d8cf      	bhi.n	2a7a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2ada:	0f79      	lsrs	r1, r7, #29
    2adc:	00f8      	lsls	r0, r7, #3
    2ade:	9a00      	ldr	r2, [sp, #0]
    2ae0:	9b01      	ldr	r3, [sp, #4]
    2ae2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    2ae4:	00ea      	lsls	r2, r5, #3
    2ae6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    2ae8:	b2d2      	uxtb	r2, r2
    2aea:	0352      	lsls	r2, r2, #13
    2aec:	432a      	orrs	r2, r5
    2aee:	e7db      	b.n	2aa8 <_sercom_get_async_baud_val+0x44>
    2af0:	00006e75 	.word	0x00006e75
    2af4:	00002981 	.word	0x00002981

00002af8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2af8:	b510      	push	{r4, lr}
    2afa:	b082      	sub	sp, #8
    2afc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2afe:	4b0e      	ldr	r3, [pc, #56]	; (2b38 <sercom_set_gclk_generator+0x40>)
    2b00:	781b      	ldrb	r3, [r3, #0]
    2b02:	2b00      	cmp	r3, #0
    2b04:	d007      	beq.n	2b16 <sercom_set_gclk_generator+0x1e>
    2b06:	2900      	cmp	r1, #0
    2b08:	d105      	bne.n	2b16 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2b0a:	4b0b      	ldr	r3, [pc, #44]	; (2b38 <sercom_set_gclk_generator+0x40>)
    2b0c:	785b      	ldrb	r3, [r3, #1]
    2b0e:	4283      	cmp	r3, r0
    2b10:	d010      	beq.n	2b34 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2b12:	201d      	movs	r0, #29
    2b14:	e00c      	b.n	2b30 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    2b16:	a901      	add	r1, sp, #4
    2b18:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2b1a:	2012      	movs	r0, #18
    2b1c:	4b07      	ldr	r3, [pc, #28]	; (2b3c <sercom_set_gclk_generator+0x44>)
    2b1e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2b20:	2012      	movs	r0, #18
    2b22:	4b07      	ldr	r3, [pc, #28]	; (2b40 <sercom_set_gclk_generator+0x48>)
    2b24:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    2b26:	4b04      	ldr	r3, [pc, #16]	; (2b38 <sercom_set_gclk_generator+0x40>)
    2b28:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    2b2a:	2201      	movs	r2, #1
    2b2c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2b2e:	2000      	movs	r0, #0
}
    2b30:	b002      	add	sp, #8
    2b32:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2b34:	2000      	movs	r0, #0
    2b36:	e7fb      	b.n	2b30 <sercom_set_gclk_generator+0x38>
    2b38:	200024a4 	.word	0x200024a4
    2b3c:	00003915 	.word	0x00003915
    2b40:	000038a5 	.word	0x000038a5

00002b44 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2b44:	4b40      	ldr	r3, [pc, #256]	; (2c48 <_sercom_get_default_pad+0x104>)
    2b46:	4298      	cmp	r0, r3
    2b48:	d031      	beq.n	2bae <_sercom_get_default_pad+0x6a>
    2b4a:	d90a      	bls.n	2b62 <_sercom_get_default_pad+0x1e>
    2b4c:	4b3f      	ldr	r3, [pc, #252]	; (2c4c <_sercom_get_default_pad+0x108>)
    2b4e:	4298      	cmp	r0, r3
    2b50:	d04d      	beq.n	2bee <_sercom_get_default_pad+0xaa>
    2b52:	4b3f      	ldr	r3, [pc, #252]	; (2c50 <_sercom_get_default_pad+0x10c>)
    2b54:	4298      	cmp	r0, r3
    2b56:	d05a      	beq.n	2c0e <_sercom_get_default_pad+0xca>
    2b58:	4b3e      	ldr	r3, [pc, #248]	; (2c54 <_sercom_get_default_pad+0x110>)
    2b5a:	4298      	cmp	r0, r3
    2b5c:	d037      	beq.n	2bce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2b5e:	2000      	movs	r0, #0
}
    2b60:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    2b62:	4b3d      	ldr	r3, [pc, #244]	; (2c58 <_sercom_get_default_pad+0x114>)
    2b64:	4298      	cmp	r0, r3
    2b66:	d00c      	beq.n	2b82 <_sercom_get_default_pad+0x3e>
    2b68:	4b3c      	ldr	r3, [pc, #240]	; (2c5c <_sercom_get_default_pad+0x118>)
    2b6a:	4298      	cmp	r0, r3
    2b6c:	d1f7      	bne.n	2b5e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2b6e:	2901      	cmp	r1, #1
    2b70:	d017      	beq.n	2ba2 <_sercom_get_default_pad+0x5e>
    2b72:	2900      	cmp	r1, #0
    2b74:	d05d      	beq.n	2c32 <_sercom_get_default_pad+0xee>
    2b76:	2902      	cmp	r1, #2
    2b78:	d015      	beq.n	2ba6 <_sercom_get_default_pad+0x62>
    2b7a:	2903      	cmp	r1, #3
    2b7c:	d015      	beq.n	2baa <_sercom_get_default_pad+0x66>
	return 0;
    2b7e:	2000      	movs	r0, #0
    2b80:	e7ee      	b.n	2b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2b82:	2901      	cmp	r1, #1
    2b84:	d007      	beq.n	2b96 <_sercom_get_default_pad+0x52>
    2b86:	2900      	cmp	r1, #0
    2b88:	d051      	beq.n	2c2e <_sercom_get_default_pad+0xea>
    2b8a:	2902      	cmp	r1, #2
    2b8c:	d005      	beq.n	2b9a <_sercom_get_default_pad+0x56>
    2b8e:	2903      	cmp	r1, #3
    2b90:	d005      	beq.n	2b9e <_sercom_get_default_pad+0x5a>
	return 0;
    2b92:	2000      	movs	r0, #0
    2b94:	e7e4      	b.n	2b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2b96:	4832      	ldr	r0, [pc, #200]	; (2c60 <_sercom_get_default_pad+0x11c>)
    2b98:	e7e2      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2b9a:	4832      	ldr	r0, [pc, #200]	; (2c64 <_sercom_get_default_pad+0x120>)
    2b9c:	e7e0      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2b9e:	4832      	ldr	r0, [pc, #200]	; (2c68 <_sercom_get_default_pad+0x124>)
    2ba0:	e7de      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2ba2:	4832      	ldr	r0, [pc, #200]	; (2c6c <_sercom_get_default_pad+0x128>)
    2ba4:	e7dc      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2ba6:	4832      	ldr	r0, [pc, #200]	; (2c70 <_sercom_get_default_pad+0x12c>)
    2ba8:	e7da      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2baa:	4832      	ldr	r0, [pc, #200]	; (2c74 <_sercom_get_default_pad+0x130>)
    2bac:	e7d8      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2bae:	2901      	cmp	r1, #1
    2bb0:	d007      	beq.n	2bc2 <_sercom_get_default_pad+0x7e>
    2bb2:	2900      	cmp	r1, #0
    2bb4:	d03f      	beq.n	2c36 <_sercom_get_default_pad+0xf2>
    2bb6:	2902      	cmp	r1, #2
    2bb8:	d005      	beq.n	2bc6 <_sercom_get_default_pad+0x82>
    2bba:	2903      	cmp	r1, #3
    2bbc:	d005      	beq.n	2bca <_sercom_get_default_pad+0x86>
	return 0;
    2bbe:	2000      	movs	r0, #0
    2bc0:	e7ce      	b.n	2b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2bc2:	482d      	ldr	r0, [pc, #180]	; (2c78 <_sercom_get_default_pad+0x134>)
    2bc4:	e7cc      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2bc6:	482d      	ldr	r0, [pc, #180]	; (2c7c <_sercom_get_default_pad+0x138>)
    2bc8:	e7ca      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2bca:	482d      	ldr	r0, [pc, #180]	; (2c80 <_sercom_get_default_pad+0x13c>)
    2bcc:	e7c8      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2bce:	2901      	cmp	r1, #1
    2bd0:	d007      	beq.n	2be2 <_sercom_get_default_pad+0x9e>
    2bd2:	2900      	cmp	r1, #0
    2bd4:	d031      	beq.n	2c3a <_sercom_get_default_pad+0xf6>
    2bd6:	2902      	cmp	r1, #2
    2bd8:	d005      	beq.n	2be6 <_sercom_get_default_pad+0xa2>
    2bda:	2903      	cmp	r1, #3
    2bdc:	d005      	beq.n	2bea <_sercom_get_default_pad+0xa6>
	return 0;
    2bde:	2000      	movs	r0, #0
    2be0:	e7be      	b.n	2b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2be2:	4828      	ldr	r0, [pc, #160]	; (2c84 <_sercom_get_default_pad+0x140>)
    2be4:	e7bc      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2be6:	4828      	ldr	r0, [pc, #160]	; (2c88 <_sercom_get_default_pad+0x144>)
    2be8:	e7ba      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2bea:	4828      	ldr	r0, [pc, #160]	; (2c8c <_sercom_get_default_pad+0x148>)
    2bec:	e7b8      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2bee:	2901      	cmp	r1, #1
    2bf0:	d007      	beq.n	2c02 <_sercom_get_default_pad+0xbe>
    2bf2:	2900      	cmp	r1, #0
    2bf4:	d023      	beq.n	2c3e <_sercom_get_default_pad+0xfa>
    2bf6:	2902      	cmp	r1, #2
    2bf8:	d005      	beq.n	2c06 <_sercom_get_default_pad+0xc2>
    2bfa:	2903      	cmp	r1, #3
    2bfc:	d005      	beq.n	2c0a <_sercom_get_default_pad+0xc6>
	return 0;
    2bfe:	2000      	movs	r0, #0
    2c00:	e7ae      	b.n	2b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c02:	4823      	ldr	r0, [pc, #140]	; (2c90 <_sercom_get_default_pad+0x14c>)
    2c04:	e7ac      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c06:	4823      	ldr	r0, [pc, #140]	; (2c94 <_sercom_get_default_pad+0x150>)
    2c08:	e7aa      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c0a:	4823      	ldr	r0, [pc, #140]	; (2c98 <_sercom_get_default_pad+0x154>)
    2c0c:	e7a8      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c0e:	2901      	cmp	r1, #1
    2c10:	d007      	beq.n	2c22 <_sercom_get_default_pad+0xde>
    2c12:	2900      	cmp	r1, #0
    2c14:	d015      	beq.n	2c42 <_sercom_get_default_pad+0xfe>
    2c16:	2902      	cmp	r1, #2
    2c18:	d005      	beq.n	2c26 <_sercom_get_default_pad+0xe2>
    2c1a:	2903      	cmp	r1, #3
    2c1c:	d005      	beq.n	2c2a <_sercom_get_default_pad+0xe6>
	return 0;
    2c1e:	2000      	movs	r0, #0
    2c20:	e79e      	b.n	2b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c22:	481e      	ldr	r0, [pc, #120]	; (2c9c <_sercom_get_default_pad+0x158>)
    2c24:	e79c      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c26:	481e      	ldr	r0, [pc, #120]	; (2ca0 <_sercom_get_default_pad+0x15c>)
    2c28:	e79a      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c2a:	481e      	ldr	r0, [pc, #120]	; (2ca4 <_sercom_get_default_pad+0x160>)
    2c2c:	e798      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c2e:	481e      	ldr	r0, [pc, #120]	; (2ca8 <_sercom_get_default_pad+0x164>)
    2c30:	e796      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c32:	481e      	ldr	r0, [pc, #120]	; (2cac <_sercom_get_default_pad+0x168>)
    2c34:	e794      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c36:	481e      	ldr	r0, [pc, #120]	; (2cb0 <_sercom_get_default_pad+0x16c>)
    2c38:	e792      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c3a:	481e      	ldr	r0, [pc, #120]	; (2cb4 <_sercom_get_default_pad+0x170>)
    2c3c:	e790      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c3e:	481e      	ldr	r0, [pc, #120]	; (2cb8 <_sercom_get_default_pad+0x174>)
    2c40:	e78e      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c42:	481e      	ldr	r0, [pc, #120]	; (2cbc <_sercom_get_default_pad+0x178>)
    2c44:	e78c      	b.n	2b60 <_sercom_get_default_pad+0x1c>
    2c46:	46c0      	nop			; (mov r8, r8)
    2c48:	42000c00 	.word	0x42000c00
    2c4c:	42001400 	.word	0x42001400
    2c50:	42001800 	.word	0x42001800
    2c54:	42001000 	.word	0x42001000
    2c58:	42000400 	.word	0x42000400
    2c5c:	42000800 	.word	0x42000800
    2c60:	00050003 	.word	0x00050003
    2c64:	00060003 	.word	0x00060003
    2c68:	00070003 	.word	0x00070003
    2c6c:	00110002 	.word	0x00110002
    2c70:	00120002 	.word	0x00120002
    2c74:	00130002 	.word	0x00130002
    2c78:	000d0002 	.word	0x000d0002
    2c7c:	000e0002 	.word	0x000e0002
    2c80:	000f0002 	.word	0x000f0002
    2c84:	00170002 	.word	0x00170002
    2c88:	00180002 	.word	0x00180002
    2c8c:	00190002 	.word	0x00190002
    2c90:	00290003 	.word	0x00290003
    2c94:	002a0003 	.word	0x002a0003
    2c98:	002b0003 	.word	0x002b0003
    2c9c:	00230003 	.word	0x00230003
    2ca0:	00200003 	.word	0x00200003
    2ca4:	00210003 	.word	0x00210003
    2ca8:	00040003 	.word	0x00040003
    2cac:	00100002 	.word	0x00100002
    2cb0:	000c0002 	.word	0x000c0002
    2cb4:	00160002 	.word	0x00160002
    2cb8:	00280003 	.word	0x00280003
    2cbc:	00220003 	.word	0x00220003

00002cc0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2cc0:	b530      	push	{r4, r5, lr}
    2cc2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2cc4:	4b0b      	ldr	r3, [pc, #44]	; (2cf4 <_sercom_get_sercom_inst_index+0x34>)
    2cc6:	466a      	mov	r2, sp
    2cc8:	cb32      	ldmia	r3!, {r1, r4, r5}
    2cca:	c232      	stmia	r2!, {r1, r4, r5}
    2ccc:	cb32      	ldmia	r3!, {r1, r4, r5}
    2cce:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2cd0:	9b00      	ldr	r3, [sp, #0]
    2cd2:	4283      	cmp	r3, r0
    2cd4:	d00b      	beq.n	2cee <_sercom_get_sercom_inst_index+0x2e>
    2cd6:	2301      	movs	r3, #1
    2cd8:	009a      	lsls	r2, r3, #2
    2cda:	4669      	mov	r1, sp
    2cdc:	5852      	ldr	r2, [r2, r1]
    2cde:	4282      	cmp	r2, r0
    2ce0:	d006      	beq.n	2cf0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2ce2:	3301      	adds	r3, #1
    2ce4:	2b06      	cmp	r3, #6
    2ce6:	d1f7      	bne.n	2cd8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2ce8:	2000      	movs	r0, #0
}
    2cea:	b007      	add	sp, #28
    2cec:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2cee:	2300      	movs	r3, #0
			return i;
    2cf0:	b2d8      	uxtb	r0, r3
    2cf2:	e7fa      	b.n	2cea <_sercom_get_sercom_inst_index+0x2a>
    2cf4:	000085c8 	.word	0x000085c8

00002cf8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2cf8:	4770      	bx	lr
	...

00002cfc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2cfe:	4b0a      	ldr	r3, [pc, #40]	; (2d28 <_sercom_set_handler+0x2c>)
    2d00:	781b      	ldrb	r3, [r3, #0]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d10c      	bne.n	2d20 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2d06:	4f09      	ldr	r7, [pc, #36]	; (2d2c <_sercom_set_handler+0x30>)
    2d08:	4e09      	ldr	r6, [pc, #36]	; (2d30 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2d0a:	4d0a      	ldr	r5, [pc, #40]	; (2d34 <_sercom_set_handler+0x38>)
    2d0c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2d0e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2d10:	195a      	adds	r2, r3, r5
    2d12:	6014      	str	r4, [r2, #0]
    2d14:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2d16:	2b18      	cmp	r3, #24
    2d18:	d1f9      	bne.n	2d0e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2d1a:	2201      	movs	r2, #1
    2d1c:	4b02      	ldr	r3, [pc, #8]	; (2d28 <_sercom_set_handler+0x2c>)
    2d1e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2d20:	0080      	lsls	r0, r0, #2
    2d22:	4b02      	ldr	r3, [pc, #8]	; (2d2c <_sercom_set_handler+0x30>)
    2d24:	50c1      	str	r1, [r0, r3]
}
    2d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d28:	200024a6 	.word	0x200024a6
    2d2c:	200024a8 	.word	0x200024a8
    2d30:	00002cf9 	.word	0x00002cf9
    2d34:	20002b5c 	.word	0x20002b5c

00002d38 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2d38:	b500      	push	{lr}
    2d3a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2d3c:	2309      	movs	r3, #9
    2d3e:	466a      	mov	r2, sp
    2d40:	7013      	strb	r3, [r2, #0]
    2d42:	3301      	adds	r3, #1
    2d44:	7053      	strb	r3, [r2, #1]
    2d46:	3301      	adds	r3, #1
    2d48:	7093      	strb	r3, [r2, #2]
    2d4a:	3301      	adds	r3, #1
    2d4c:	70d3      	strb	r3, [r2, #3]
    2d4e:	3301      	adds	r3, #1
    2d50:	7113      	strb	r3, [r2, #4]
    2d52:	3301      	adds	r3, #1
    2d54:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2d56:	4b03      	ldr	r3, [pc, #12]	; (2d64 <_sercom_get_interrupt_vector+0x2c>)
    2d58:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2d5a:	466b      	mov	r3, sp
    2d5c:	5618      	ldrsb	r0, [r3, r0]
}
    2d5e:	b003      	add	sp, #12
    2d60:	bd00      	pop	{pc}
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	00002cc1 	.word	0x00002cc1

00002d68 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2d68:	b510      	push	{r4, lr}
    2d6a:	4b02      	ldr	r3, [pc, #8]	; (2d74 <SERCOM0_Handler+0xc>)
    2d6c:	681b      	ldr	r3, [r3, #0]
    2d6e:	2000      	movs	r0, #0
    2d70:	4798      	blx	r3
    2d72:	bd10      	pop	{r4, pc}
    2d74:	200024a8 	.word	0x200024a8

00002d78 <SERCOM1_Handler>:
    2d78:	b510      	push	{r4, lr}
    2d7a:	4b02      	ldr	r3, [pc, #8]	; (2d84 <SERCOM1_Handler+0xc>)
    2d7c:	685b      	ldr	r3, [r3, #4]
    2d7e:	2001      	movs	r0, #1
    2d80:	4798      	blx	r3
    2d82:	bd10      	pop	{r4, pc}
    2d84:	200024a8 	.word	0x200024a8

00002d88 <SERCOM2_Handler>:
    2d88:	b510      	push	{r4, lr}
    2d8a:	4b02      	ldr	r3, [pc, #8]	; (2d94 <SERCOM2_Handler+0xc>)
    2d8c:	689b      	ldr	r3, [r3, #8]
    2d8e:	2002      	movs	r0, #2
    2d90:	4798      	blx	r3
    2d92:	bd10      	pop	{r4, pc}
    2d94:	200024a8 	.word	0x200024a8

00002d98 <SERCOM3_Handler>:
    2d98:	b510      	push	{r4, lr}
    2d9a:	4b02      	ldr	r3, [pc, #8]	; (2da4 <SERCOM3_Handler+0xc>)
    2d9c:	68db      	ldr	r3, [r3, #12]
    2d9e:	2003      	movs	r0, #3
    2da0:	4798      	blx	r3
    2da2:	bd10      	pop	{r4, pc}
    2da4:	200024a8 	.word	0x200024a8

00002da8 <SERCOM4_Handler>:
    2da8:	b510      	push	{r4, lr}
    2daa:	4b02      	ldr	r3, [pc, #8]	; (2db4 <SERCOM4_Handler+0xc>)
    2dac:	691b      	ldr	r3, [r3, #16]
    2dae:	2004      	movs	r0, #4
    2db0:	4798      	blx	r3
    2db2:	bd10      	pop	{r4, pc}
    2db4:	200024a8 	.word	0x200024a8

00002db8 <SERCOM5_Handler>:
    2db8:	b510      	push	{r4, lr}
    2dba:	4b02      	ldr	r3, [pc, #8]	; (2dc4 <SERCOM5_Handler+0xc>)
    2dbc:	695b      	ldr	r3, [r3, #20]
    2dbe:	2005      	movs	r0, #5
    2dc0:	4798      	blx	r3
    2dc2:	bd10      	pop	{r4, pc}
    2dc4:	200024a8 	.word	0x200024a8

00002dc8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dca:	46de      	mov	lr, fp
    2dcc:	4657      	mov	r7, sl
    2dce:	464e      	mov	r6, r9
    2dd0:	4645      	mov	r5, r8
    2dd2:	b5e0      	push	{r5, r6, r7, lr}
    2dd4:	b091      	sub	sp, #68	; 0x44
    2dd6:	0005      	movs	r5, r0
    2dd8:	000c      	movs	r4, r1
    2dda:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2ddc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2dde:	0008      	movs	r0, r1
    2de0:	4bd2      	ldr	r3, [pc, #840]	; (312c <usart_init+0x364>)
    2de2:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
    2de4:	2805      	cmp	r0, #5
    2de6:	d00d      	beq.n	2e04 <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    2de8:	0007      	movs	r7, r0
    2dea:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2dec:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2dee:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2df0:	07d2      	lsls	r2, r2, #31
    2df2:	d509      	bpl.n	2e08 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2df4:	0018      	movs	r0, r3
    2df6:	b011      	add	sp, #68	; 0x44
    2df8:	bc3c      	pop	{r2, r3, r4, r5}
    2dfa:	4690      	mov	r8, r2
    2dfc:	4699      	mov	r9, r3
    2dfe:	46a2      	mov	sl, r4
    2e00:	46ab      	mov	fp, r5
    2e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    2e04:	2719      	movs	r7, #25
    2e06:	e7f1      	b.n	2dec <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2e08:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    2e0a:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2e0c:	0792      	lsls	r2, r2, #30
    2e0e:	d4f1      	bmi.n	2df4 <usart_init+0x2c>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    2e10:	4ac7      	ldr	r2, [pc, #796]	; (3130 <usart_init+0x368>)
    2e12:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    2e14:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2e16:	3b1b      	subs	r3, #27
    2e18:	4083      	lsls	r3, r0
    2e1a:	430b      	orrs	r3, r1
    2e1c:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    2e1e:	a90f      	add	r1, sp, #60	; 0x3c
    2e20:	2335      	movs	r3, #53	; 0x35
    2e22:	4698      	mov	r8, r3
    2e24:	5cf3      	ldrb	r3, [r6, r3]
    2e26:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2e28:	b2ff      	uxtb	r7, r7
    2e2a:	0038      	movs	r0, r7
    2e2c:	4bc1      	ldr	r3, [pc, #772]	; (3134 <usart_init+0x36c>)
    2e2e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2e30:	0038      	movs	r0, r7
    2e32:	4bc1      	ldr	r3, [pc, #772]	; (3138 <usart_init+0x370>)
    2e34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2e36:	4643      	mov	r3, r8
    2e38:	5cf0      	ldrb	r0, [r6, r3]
    2e3a:	2100      	movs	r1, #0
    2e3c:	4bbf      	ldr	r3, [pc, #764]	; (313c <usart_init+0x374>)
    2e3e:	4798      	blx	r3
	module->character_size = config->character_size;
    2e40:	7af3      	ldrb	r3, [r6, #11]
    2e42:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2e44:	232c      	movs	r3, #44	; 0x2c
    2e46:	5cf3      	ldrb	r3, [r6, r3]
    2e48:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2e4a:	232d      	movs	r3, #45	; 0x2d
    2e4c:	5cf3      	ldrb	r3, [r6, r3]
    2e4e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2e50:	7ef3      	ldrb	r3, [r6, #27]
    2e52:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2e54:	2324      	movs	r3, #36	; 0x24
    2e56:	5cf3      	ldrb	r3, [r6, r3]
    2e58:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e5a:	682b      	ldr	r3, [r5, #0]
    2e5c:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2e5e:	0018      	movs	r0, r3
    2e60:	4bb2      	ldr	r3, [pc, #712]	; (312c <usart_init+0x364>)
    2e62:	4798      	blx	r3
	if (sercom_index == 5) {
    2e64:	2805      	cmp	r0, #5
    2e66:	d01d      	beq.n	2ea4 <usart_init+0xdc>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2e68:	3013      	adds	r0, #19
	uint16_t baud  = 0;
    2e6a:	2200      	movs	r2, #0
    2e6c:	230e      	movs	r3, #14
    2e6e:	a906      	add	r1, sp, #24
    2e70:	468c      	mov	ip, r1
    2e72:	4463      	add	r3, ip
    2e74:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2e76:	8a33      	ldrh	r3, [r6, #16]
    2e78:	4698      	mov	r8, r3
    2e7a:	2380      	movs	r3, #128	; 0x80
    2e7c:	01db      	lsls	r3, r3, #7
    2e7e:	4598      	cmp	r8, r3
    2e80:	d100      	bne.n	2e84 <usart_init+0xbc>
    2e82:	e0c3      	b.n	300c <usart_init+0x244>
    2e84:	d910      	bls.n	2ea8 <usart_init+0xe0>
    2e86:	23c0      	movs	r3, #192	; 0xc0
    2e88:	01db      	lsls	r3, r3, #7
    2e8a:	4598      	cmp	r8, r3
    2e8c:	d100      	bne.n	2e90 <usart_init+0xc8>
    2e8e:	e0b8      	b.n	3002 <usart_init+0x23a>
    2e90:	2380      	movs	r3, #128	; 0x80
    2e92:	021b      	lsls	r3, r3, #8
    2e94:	4598      	cmp	r8, r3
    2e96:	d000      	beq.n	2e9a <usart_init+0xd2>
    2e98:	e166      	b.n	3168 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2e9a:	2303      	movs	r3, #3
    2e9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2e9e:	2300      	movs	r3, #0
    2ea0:	9307      	str	r3, [sp, #28]
    2ea2:	e00a      	b.n	2eba <usart_init+0xf2>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    2ea4:	2019      	movs	r0, #25
    2ea6:	e7e0      	b.n	2e6a <usart_init+0xa2>
	switch (config->sample_rate) {
    2ea8:	2380      	movs	r3, #128	; 0x80
    2eaa:	019b      	lsls	r3, r3, #6
    2eac:	4598      	cmp	r8, r3
    2eae:	d000      	beq.n	2eb2 <usart_init+0xea>
    2eb0:	e15a      	b.n	3168 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2eb2:	2310      	movs	r3, #16
    2eb4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2eb6:	3b0f      	subs	r3, #15
    2eb8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2eba:	6833      	ldr	r3, [r6, #0]
    2ebc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2ebe:	68f3      	ldr	r3, [r6, #12]
    2ec0:	469b      	mov	fp, r3
		config->sample_adjustment |
    2ec2:	6973      	ldr	r3, [r6, #20]
    2ec4:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2ec6:	7e33      	ldrb	r3, [r6, #24]
    2ec8:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2eca:	232e      	movs	r3, #46	; 0x2e
    2ecc:	5cf3      	ldrb	r3, [r6, r3]
    2ece:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2ed0:	6873      	ldr	r3, [r6, #4]
    2ed2:	4699      	mov	r9, r3
	switch (transfer_mode)
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d100      	bne.n	2eda <usart_init+0x112>
    2ed8:	e0c5      	b.n	3066 <usart_init+0x29e>
    2eda:	2380      	movs	r3, #128	; 0x80
    2edc:	055b      	lsls	r3, r3, #21
    2ede:	4599      	cmp	r9, r3
    2ee0:	d100      	bne.n	2ee4 <usart_init+0x11c>
    2ee2:	e0a8      	b.n	3036 <usart_init+0x26e>
	if(config->encoding_format_enable) {
    2ee4:	7e73      	ldrb	r3, [r6, #25]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d002      	beq.n	2ef0 <usart_init+0x128>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2eea:	7eb3      	ldrb	r3, [r6, #26]
    2eec:	9a02      	ldr	r2, [sp, #8]
    2eee:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    2ef0:	230e      	movs	r3, #14
    2ef2:	aa06      	add	r2, sp, #24
    2ef4:	4694      	mov	ip, r2
    2ef6:	4463      	add	r3, ip
    2ef8:	881b      	ldrh	r3, [r3, #0]
    2efa:	9a02      	ldr	r2, [sp, #8]
    2efc:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2efe:	9a05      	ldr	r2, [sp, #20]
    2f00:	465b      	mov	r3, fp
    2f02:	431a      	orrs	r2, r3
    2f04:	9b03      	ldr	r3, [sp, #12]
    2f06:	431a      	orrs	r2, r3
    2f08:	464b      	mov	r3, r9
    2f0a:	431a      	orrs	r2, r3
    2f0c:	4643      	mov	r3, r8
    2f0e:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2f10:	9b04      	ldr	r3, [sp, #16]
    2f12:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2f14:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2f16:	4653      	mov	r3, sl
    2f18:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2f1a:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
    2f1c:	232f      	movs	r3, #47	; 0x2f
    2f1e:	5cf3      	ldrb	r3, [r6, r3]
    2f20:	2b00      	cmp	r3, #0
    2f22:	d101      	bne.n	2f28 <usart_init+0x160>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2f24:	3304      	adds	r3, #4
    2f26:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2f28:	7e73      	ldrb	r3, [r6, #25]
    2f2a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2f2c:	2124      	movs	r1, #36	; 0x24
    2f2e:	5c71      	ldrb	r1, [r6, r1]
    2f30:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2f32:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2f34:	2126      	movs	r1, #38	; 0x26
    2f36:	5c71      	ldrb	r1, [r6, r1]
    2f38:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2f3a:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2f3c:	212c      	movs	r1, #44	; 0x2c
    2f3e:	5c71      	ldrb	r1, [r6, r1]
    2f40:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2f42:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2f44:	212d      	movs	r1, #45	; 0x2d
    2f46:	5c71      	ldrb	r1, [r6, r1]
    2f48:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2f4a:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    2f4c:	7ab0      	ldrb	r0, [r6, #10]
    2f4e:	7af1      	ldrb	r1, [r6, #11]
    2f50:	4308      	orrs	r0, r1
    2f52:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
    2f54:	8933      	ldrh	r3, [r6, #8]
    2f56:	2bff      	cmp	r3, #255	; 0xff
    2f58:	d100      	bne.n	2f5c <usart_init+0x194>
    2f5a:	e0aa      	b.n	30b2 <usart_init+0x2ea>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2f5c:	2180      	movs	r1, #128	; 0x80
    2f5e:	0449      	lsls	r1, r1, #17
    2f60:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
    2f62:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    2f64:	9902      	ldr	r1, [sp, #8]
    2f66:	688b      	ldr	r3, [r1, #8]
    2f68:	469c      	mov	ip, r3
						| config->lin_break_length;
    2f6a:	8c33      	ldrh	r3, [r6, #32]
    2f6c:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    2f6e:	430b      	orrs	r3, r1
    2f70:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    2f72:	2107      	movs	r1, #7
    2f74:	4663      	mov	r3, ip
    2f76:	4019      	ands	r1, r3
						| config->lin_break_length;
    2f78:	003b      	movs	r3, r7
    2f7a:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    2f7c:	9902      	ldr	r1, [sp, #8]
    2f7e:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
    2f80:	69f3      	ldr	r3, [r6, #28]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d002      	beq.n	2f8c <usart_init+0x1c4>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    2f86:	496e      	ldr	r1, [pc, #440]	; (3140 <usart_init+0x378>)
    2f88:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
    2f8a:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2f8c:	2334      	movs	r3, #52	; 0x34
    2f8e:	5cf3      	ldrb	r3, [r6, r3]
    2f90:	2b00      	cmp	r3, #0
    2f92:	d103      	bne.n	2f9c <usart_init+0x1d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2f94:	4b6b      	ldr	r3, [pc, #428]	; (3144 <usart_init+0x37c>)
    2f96:	789b      	ldrb	r3, [r3, #2]
    2f98:	079b      	lsls	r3, r3, #30
    2f9a:	d501      	bpl.n	2fa0 <usart_init+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2f9c:	2380      	movs	r3, #128	; 0x80
    2f9e:	431a      	orrs	r2, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2fa0:	6829      	ldr	r1, [r5, #0]
    2fa2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2fa4:	69cb      	ldr	r3, [r1, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d1fc      	bne.n	2fa4 <usart_init+0x1dc>
	usart_hw->CTRLB.reg = ctrlb;
    2faa:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2fac:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2fae:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d1fc      	bne.n	2fae <usart_init+0x1e6>
	usart_hw->CTRLA.reg = ctrla;
    2fb4:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    2fb6:	683b      	ldr	r3, [r7, #0]
    2fb8:	22f0      	movs	r2, #240	; 0xf0
    2fba:	0512      	lsls	r2, r2, #20
    2fbc:	4013      	ands	r3, r2
    2fbe:	22e0      	movs	r2, #224	; 0xe0
    2fc0:	04d2      	lsls	r2, r2, #19
    2fc2:	4293      	cmp	r3, r2
    2fc4:	d00a      	beq.n	2fdc <usart_init+0x214>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    2fc6:	68bb      	ldr	r3, [r7, #8]
    2fc8:	2207      	movs	r2, #7
    2fca:	4393      	bics	r3, r2
    2fcc:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    2fce:	68ba      	ldr	r2, [r7, #8]
    2fd0:	2325      	movs	r3, #37	; 0x25
    2fd2:	5cf1      	ldrb	r1, [r6, r3]
    2fd4:	3b1e      	subs	r3, #30
    2fd6:	400b      	ands	r3, r1
    2fd8:	4313      	orrs	r3, r2
    2fda:	60bb      	str	r3, [r7, #8]
    2fdc:	ab0e      	add	r3, sp, #56	; 0x38
    2fde:	2280      	movs	r2, #128	; 0x80
    2fe0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2fe2:	2200      	movs	r2, #0
    2fe4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2fe6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2fe8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2fea:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2fec:	930a      	str	r3, [sp, #40]	; 0x28
    2fee:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2ff0:	930b      	str	r3, [sp, #44]	; 0x2c
    2ff2:	6c33      	ldr	r3, [r6, #64]	; 0x40
    2ff4:	930c      	str	r3, [sp, #48]	; 0x30
    2ff6:	6c73      	ldr	r3, [r6, #68]	; 0x44
    2ff8:	9302      	str	r3, [sp, #8]
    2ffa:	930d      	str	r3, [sp, #52]	; 0x34
    2ffc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2ffe:	ae0a      	add	r6, sp, #40	; 0x28
    3000:	e066      	b.n	30d0 <usart_init+0x308>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3002:	2308      	movs	r3, #8
    3004:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3006:	3b07      	subs	r3, #7
    3008:	9307      	str	r3, [sp, #28]
    300a:	e756      	b.n	2eba <usart_init+0xf2>
	ctrla = (uint32_t)config->data_order |
    300c:	6833      	ldr	r3, [r6, #0]
    300e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    3010:	68f3      	ldr	r3, [r6, #12]
    3012:	469b      	mov	fp, r3
		config->sample_adjustment |
    3014:	6973      	ldr	r3, [r6, #20]
    3016:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3018:	7e33      	ldrb	r3, [r6, #24]
    301a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    301c:	232e      	movs	r3, #46	; 0x2e
    301e:	5cf3      	ldrb	r3, [r6, r3]
    3020:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3022:	6873      	ldr	r3, [r6, #4]
    3024:	4699      	mov	r9, r3
	switch (transfer_mode)
    3026:	2b00      	cmp	r3, #0
    3028:	d019      	beq.n	305e <usart_init+0x296>
    302a:	2380      	movs	r3, #128	; 0x80
    302c:	055b      	lsls	r3, r3, #21
    302e:	4599      	cmp	r9, r3
    3030:	d001      	beq.n	3036 <usart_init+0x26e>
	enum status_code status_code = STATUS_OK;
    3032:	2300      	movs	r3, #0
    3034:	e027      	b.n	3086 <usart_init+0x2be>
			if (!config->use_external_clock) {
    3036:	232f      	movs	r3, #47	; 0x2f
    3038:	5cf3      	ldrb	r3, [r6, r3]
    303a:	2b00      	cmp	r3, #0
    303c:	d000      	beq.n	3040 <usart_init+0x278>
    303e:	e751      	b.n	2ee4 <usart_init+0x11c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3040:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3042:	001f      	movs	r7, r3
    3044:	b2c0      	uxtb	r0, r0
    3046:	4b40      	ldr	r3, [pc, #256]	; (3148 <usart_init+0x380>)
    3048:	4798      	blx	r3
    304a:	0001      	movs	r1, r0
    304c:	220e      	movs	r2, #14
    304e:	ab06      	add	r3, sp, #24
    3050:	469c      	mov	ip, r3
    3052:	4462      	add	r2, ip
    3054:	0038      	movs	r0, r7
    3056:	4b3d      	ldr	r3, [pc, #244]	; (314c <usart_init+0x384>)
    3058:	4798      	blx	r3
    305a:	0003      	movs	r3, r0
    305c:	e013      	b.n	3086 <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    305e:	2308      	movs	r3, #8
    3060:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3062:	2300      	movs	r3, #0
    3064:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    3066:	232f      	movs	r3, #47	; 0x2f
    3068:	5cf3      	ldrb	r3, [r6, r3]
    306a:	2b00      	cmp	r3, #0
    306c:	d00f      	beq.n	308e <usart_init+0x2c6>
				status_code =
    306e:	9b06      	ldr	r3, [sp, #24]
    3070:	9300      	str	r3, [sp, #0]
    3072:	9b07      	ldr	r3, [sp, #28]
    3074:	220e      	movs	r2, #14
    3076:	a906      	add	r1, sp, #24
    3078:	468c      	mov	ip, r1
    307a:	4462      	add	r2, ip
    307c:	6b31      	ldr	r1, [r6, #48]	; 0x30
    307e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    3080:	4f33      	ldr	r7, [pc, #204]	; (3150 <usart_init+0x388>)
    3082:	47b8      	blx	r7
    3084:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
    3086:	2b00      	cmp	r3, #0
    3088:	d000      	beq.n	308c <usart_init+0x2c4>
    308a:	e6b3      	b.n	2df4 <usart_init+0x2c>
    308c:	e72a      	b.n	2ee4 <usart_init+0x11c>
						_sercom_get_async_baud_val(config->baudrate,
    308e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3090:	001f      	movs	r7, r3
    3092:	b2c0      	uxtb	r0, r0
    3094:	4b2c      	ldr	r3, [pc, #176]	; (3148 <usart_init+0x380>)
    3096:	4798      	blx	r3
    3098:	0001      	movs	r1, r0
				status_code =
    309a:	9b06      	ldr	r3, [sp, #24]
    309c:	9300      	str	r3, [sp, #0]
    309e:	9b07      	ldr	r3, [sp, #28]
    30a0:	220e      	movs	r2, #14
    30a2:	a806      	add	r0, sp, #24
    30a4:	4684      	mov	ip, r0
    30a6:	4462      	add	r2, ip
    30a8:	0038      	movs	r0, r7
    30aa:	4f29      	ldr	r7, [pc, #164]	; (3150 <usart_init+0x388>)
    30ac:	47b8      	blx	r7
    30ae:	0003      	movs	r3, r0
    30b0:	e7e9      	b.n	3086 <usart_init+0x2be>
		if(config->lin_slave_enable) {
    30b2:	7ef3      	ldrb	r3, [r6, #27]
    30b4:	2b00      	cmp	r3, #0
    30b6:	d100      	bne.n	30ba <usart_init+0x2f2>
    30b8:	e754      	b.n	2f64 <usart_init+0x19c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    30ba:	2380      	movs	r3, #128	; 0x80
    30bc:	04db      	lsls	r3, r3, #19
    30be:	431a      	orrs	r2, r3
    30c0:	e750      	b.n	2f64 <usart_init+0x19c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    30c2:	0020      	movs	r0, r4
    30c4:	4b23      	ldr	r3, [pc, #140]	; (3154 <usart_init+0x38c>)
    30c6:	4798      	blx	r3
    30c8:	e007      	b.n	30da <usart_init+0x312>
    30ca:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    30cc:	2f04      	cmp	r7, #4
    30ce:	d00d      	beq.n	30ec <usart_init+0x324>
    30d0:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    30d2:	00bb      	lsls	r3, r7, #2
    30d4:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    30d6:	2800      	cmp	r0, #0
    30d8:	d0f3      	beq.n	30c2 <usart_init+0x2fa>
		if (current_pinmux != PINMUX_UNUSED) {
    30da:	1c43      	adds	r3, r0, #1
    30dc:	d0f5      	beq.n	30ca <usart_init+0x302>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    30de:	a90e      	add	r1, sp, #56	; 0x38
    30e0:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    30e2:	0c00      	lsrs	r0, r0, #16
    30e4:	b2c0      	uxtb	r0, r0
    30e6:	4b1c      	ldr	r3, [pc, #112]	; (3158 <usart_init+0x390>)
    30e8:	4798      	blx	r3
    30ea:	e7ee      	b.n	30ca <usart_init+0x302>
		module->callback[i]            = NULL;
    30ec:	2300      	movs	r3, #0
    30ee:	60eb      	str	r3, [r5, #12]
    30f0:	612b      	str	r3, [r5, #16]
    30f2:	616b      	str	r3, [r5, #20]
    30f4:	61ab      	str	r3, [r5, #24]
    30f6:	61eb      	str	r3, [r5, #28]
    30f8:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    30fa:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    30fc:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    30fe:	2200      	movs	r2, #0
    3100:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    3102:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    3104:	3330      	adds	r3, #48	; 0x30
    3106:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    3108:	3301      	adds	r3, #1
    310a:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    310c:	3301      	adds	r3, #1
    310e:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    3110:	3301      	adds	r3, #1
    3112:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3114:	6828      	ldr	r0, [r5, #0]
    3116:	4b05      	ldr	r3, [pc, #20]	; (312c <usart_init+0x364>)
    3118:	4798      	blx	r3
    311a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    311c:	490f      	ldr	r1, [pc, #60]	; (315c <usart_init+0x394>)
    311e:	4b10      	ldr	r3, [pc, #64]	; (3160 <usart_init+0x398>)
    3120:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3122:	00a4      	lsls	r4, r4, #2
    3124:	4b0f      	ldr	r3, [pc, #60]	; (3164 <usart_init+0x39c>)
    3126:	50e5      	str	r5, [r4, r3]
	return status_code;
    3128:	2300      	movs	r3, #0
    312a:	e663      	b.n	2df4 <usart_init+0x2c>
    312c:	00002cc1 	.word	0x00002cc1
    3130:	40000800 	.word	0x40000800
    3134:	00003915 	.word	0x00003915
    3138:	000038a5 	.word	0x000038a5
    313c:	00002af9 	.word	0x00002af9
    3140:	f0ffffff 	.word	0xf0ffffff
    3144:	41002000 	.word	0x41002000
    3148:	00003939 	.word	0x00003939
    314c:	00002a3b 	.word	0x00002a3b
    3150:	00002a65 	.word	0x00002a65
    3154:	00002b45 	.word	0x00002b45
    3158:	00003a11 	.word	0x00003a11
    315c:	00003205 	.word	0x00003205
    3160:	00002cfd 	.word	0x00002cfd
    3164:	20002b5c 	.word	0x20002b5c
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3168:	2310      	movs	r3, #16
    316a:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    316c:	2300      	movs	r3, #0
    316e:	9307      	str	r3, [sp, #28]
    3170:	e6a3      	b.n	2eba <usart_init+0xf2>
    3172:	46c0      	nop			; (mov r8, r8)

00003174 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3174:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    3176:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    3178:	2a00      	cmp	r2, #0
    317a:	d101      	bne.n	3180 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    317c:	0018      	movs	r0, r3
    317e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    3180:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    3182:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    3184:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    3186:	2a00      	cmp	r2, #0
    3188:	d1f8      	bne.n	317c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    318a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    318c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    318e:	2102      	movs	r1, #2
    3190:	7e13      	ldrb	r3, [r2, #24]
    3192:	420b      	tst	r3, r1
    3194:	d0fc      	beq.n	3190 <usart_write_wait+0x1c>
	return STATUS_OK;
    3196:	2300      	movs	r3, #0
    3198:	e7f0      	b.n	317c <usart_write_wait+0x8>

0000319a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    319a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    319c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    319e:	2a00      	cmp	r2, #0
    31a0:	d101      	bne.n	31a6 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    31a2:	0018      	movs	r0, r3
    31a4:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    31a6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    31a8:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    31aa:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    31ac:	2a00      	cmp	r2, #0
    31ae:	d1f8      	bne.n	31a2 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    31b0:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    31b2:	7e10      	ldrb	r0, [r2, #24]
    31b4:	0740      	lsls	r0, r0, #29
    31b6:	d5f4      	bpl.n	31a2 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    31b8:	8b53      	ldrh	r3, [r2, #26]
    31ba:	b2db      	uxtb	r3, r3
	if (error_code) {
    31bc:	0658      	lsls	r0, r3, #25
    31be:	d01d      	beq.n	31fc <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    31c0:	0798      	lsls	r0, r3, #30
    31c2:	d503      	bpl.n	31cc <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    31c4:	2302      	movs	r3, #2
    31c6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    31c8:	3318      	adds	r3, #24
    31ca:	e7ea      	b.n	31a2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    31cc:	0758      	lsls	r0, r3, #29
    31ce:	d503      	bpl.n	31d8 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    31d0:	2304      	movs	r3, #4
    31d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    31d4:	331a      	adds	r3, #26
    31d6:	e7e4      	b.n	31a2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    31d8:	07d8      	lsls	r0, r3, #31
    31da:	d503      	bpl.n	31e4 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    31dc:	2301      	movs	r3, #1
    31de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    31e0:	3312      	adds	r3, #18
    31e2:	e7de      	b.n	31a2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    31e4:	06d8      	lsls	r0, r3, #27
    31e6:	d503      	bpl.n	31f0 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    31e8:	2310      	movs	r3, #16
    31ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    31ec:	3332      	adds	r3, #50	; 0x32
    31ee:	e7d8      	b.n	31a2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    31f0:	069b      	lsls	r3, r3, #26
    31f2:	d503      	bpl.n	31fc <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    31f4:	2320      	movs	r3, #32
    31f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    31f8:	3321      	adds	r3, #33	; 0x21
    31fa:	e7d2      	b.n	31a2 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    31fc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    31fe:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    3200:	2300      	movs	r3, #0
    3202:	e7ce      	b.n	31a2 <usart_read_wait+0x8>

00003204 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    3204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    3206:	0080      	lsls	r0, r0, #2
    3208:	4b64      	ldr	r3, [pc, #400]	; (339c <_usart_interrupt_handler+0x198>)
    320a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    320c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    320e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    3210:	2b00      	cmp	r3, #0
    3212:	d1fc      	bne.n	320e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    3214:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    3216:	7da6      	ldrb	r6, [r4, #22]
    3218:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    321a:	2330      	movs	r3, #48	; 0x30
    321c:	5ceb      	ldrb	r3, [r5, r3]
    321e:	2231      	movs	r2, #49	; 0x31
    3220:	5caf      	ldrb	r7, [r5, r2]
    3222:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    3224:	07f3      	lsls	r3, r6, #31
    3226:	d522      	bpl.n	326e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    3228:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    322a:	b29b      	uxth	r3, r3
    322c:	2b00      	cmp	r3, #0
    322e:	d01c      	beq.n	326a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3230:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3232:	7813      	ldrb	r3, [r2, #0]
    3234:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    3236:	1c51      	adds	r1, r2, #1
    3238:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    323a:	7969      	ldrb	r1, [r5, #5]
    323c:	2901      	cmp	r1, #1
    323e:	d00e      	beq.n	325e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3240:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    3242:	05db      	lsls	r3, r3, #23
    3244:	0ddb      	lsrs	r3, r3, #23
    3246:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    3248:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    324a:	3b01      	subs	r3, #1
    324c:	b29b      	uxth	r3, r3
    324e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    3250:	2b00      	cmp	r3, #0
    3252:	d10c      	bne.n	326e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3254:	3301      	adds	r3, #1
    3256:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    3258:	3301      	adds	r3, #1
    325a:	75a3      	strb	r3, [r4, #22]
    325c:	e007      	b.n	326e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    325e:	7851      	ldrb	r1, [r2, #1]
    3260:	0209      	lsls	r1, r1, #8
    3262:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    3264:	3202      	adds	r2, #2
    3266:	62aa      	str	r2, [r5, #40]	; 0x28
    3268:	e7eb      	b.n	3242 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    326a:	2301      	movs	r3, #1
    326c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    326e:	07b3      	lsls	r3, r6, #30
    3270:	d506      	bpl.n	3280 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    3272:	2302      	movs	r3, #2
    3274:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    3276:	2200      	movs	r2, #0
    3278:	3331      	adds	r3, #49	; 0x31
    327a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    327c:	07fb      	lsls	r3, r7, #31
    327e:	d41e      	bmi.n	32be <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3280:	0773      	lsls	r3, r6, #29
    3282:	d568      	bpl.n	3356 <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
    3284:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3286:	b29b      	uxth	r3, r3
    3288:	2b00      	cmp	r3, #0
    328a:	d062      	beq.n	3352 <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    328c:	8b63      	ldrh	r3, [r4, #26]
    328e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3290:	071a      	lsls	r2, r3, #28
    3292:	d418      	bmi.n	32c6 <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3294:	227f      	movs	r2, #127	; 0x7f
    3296:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    3298:	065a      	lsls	r2, r3, #25
    329a:	d501      	bpl.n	32a0 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    329c:	2240      	movs	r2, #64	; 0x40
    329e:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    32a0:	2b00      	cmp	r3, #0
    32a2:	d033      	beq.n	330c <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    32a4:	079a      	lsls	r2, r3, #30
    32a6:	d511      	bpl.n	32cc <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    32a8:	221a      	movs	r2, #26
    32aa:	2332      	movs	r3, #50	; 0x32
    32ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    32ae:	3b30      	subs	r3, #48	; 0x30
    32b0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    32b2:	077b      	lsls	r3, r7, #29
    32b4:	d54f      	bpl.n	3356 <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    32b6:	0028      	movs	r0, r5
    32b8:	696b      	ldr	r3, [r5, #20]
    32ba:	4798      	blx	r3
    32bc:	e04b      	b.n	3356 <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    32be:	0028      	movs	r0, r5
    32c0:	68eb      	ldr	r3, [r5, #12]
    32c2:	4798      	blx	r3
    32c4:	e7dc      	b.n	3280 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    32c6:	2277      	movs	r2, #119	; 0x77
    32c8:	4013      	ands	r3, r2
    32ca:	e7e5      	b.n	3298 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    32cc:	075a      	lsls	r2, r3, #29
    32ce:	d505      	bpl.n	32dc <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    32d0:	221e      	movs	r2, #30
    32d2:	2332      	movs	r3, #50	; 0x32
    32d4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    32d6:	3b2e      	subs	r3, #46	; 0x2e
    32d8:	8363      	strh	r3, [r4, #26]
    32da:	e7ea      	b.n	32b2 <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    32dc:	07da      	lsls	r2, r3, #31
    32de:	d505      	bpl.n	32ec <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    32e0:	2213      	movs	r2, #19
    32e2:	2332      	movs	r3, #50	; 0x32
    32e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    32e6:	3b31      	subs	r3, #49	; 0x31
    32e8:	8363      	strh	r3, [r4, #26]
    32ea:	e7e2      	b.n	32b2 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    32ec:	06da      	lsls	r2, r3, #27
    32ee:	d505      	bpl.n	32fc <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    32f0:	2242      	movs	r2, #66	; 0x42
    32f2:	2332      	movs	r3, #50	; 0x32
    32f4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    32f6:	3b22      	subs	r3, #34	; 0x22
    32f8:	8363      	strh	r3, [r4, #26]
    32fa:	e7da      	b.n	32b2 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    32fc:	069b      	lsls	r3, r3, #26
    32fe:	d5d8      	bpl.n	32b2 <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    3300:	2241      	movs	r2, #65	; 0x41
    3302:	2332      	movs	r3, #50	; 0x32
    3304:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3306:	3b12      	subs	r3, #18
    3308:	8363      	strh	r3, [r4, #26]
    330a:	e7d2      	b.n	32b2 <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    330c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    330e:	05db      	lsls	r3, r3, #23
    3310:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3312:	b2da      	uxtb	r2, r3
    3314:	6a69      	ldr	r1, [r5, #36]	; 0x24
    3316:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    3318:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    331a:	1c51      	adds	r1, r2, #1
    331c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    331e:	7969      	ldrb	r1, [r5, #5]
    3320:	2901      	cmp	r1, #1
    3322:	d010      	beq.n	3346 <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    3324:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3326:	3b01      	subs	r3, #1
    3328:	b29b      	uxth	r3, r3
    332a:	85ab      	strh	r3, [r5, #44]	; 0x2c
    332c:	2b00      	cmp	r3, #0
    332e:	d112      	bne.n	3356 <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3330:	3304      	adds	r3, #4
    3332:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    3334:	2200      	movs	r2, #0
    3336:	332e      	adds	r3, #46	; 0x2e
    3338:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    333a:	07bb      	lsls	r3, r7, #30
    333c:	d50b      	bpl.n	3356 <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    333e:	0028      	movs	r0, r5
    3340:	692b      	ldr	r3, [r5, #16]
    3342:	4798      	blx	r3
    3344:	e007      	b.n	3356 <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3346:	0a1b      	lsrs	r3, r3, #8
    3348:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    334a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    334c:	3301      	adds	r3, #1
    334e:	626b      	str	r3, [r5, #36]	; 0x24
    3350:	e7e8      	b.n	3324 <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3352:	2304      	movs	r3, #4
    3354:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    3356:	06f3      	lsls	r3, r6, #27
    3358:	d504      	bpl.n	3364 <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    335a:	2310      	movs	r3, #16
    335c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    335e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    3360:	06fb      	lsls	r3, r7, #27
    3362:	d40e      	bmi.n	3382 <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    3364:	06b3      	lsls	r3, r6, #26
    3366:	d504      	bpl.n	3372 <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    3368:	2320      	movs	r3, #32
    336a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    336c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    336e:	073b      	lsls	r3, r7, #28
    3370:	d40b      	bmi.n	338a <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    3372:	0733      	lsls	r3, r6, #28
    3374:	d504      	bpl.n	3380 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    3376:	2308      	movs	r3, #8
    3378:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    337a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    337c:	06bb      	lsls	r3, r7, #26
    337e:	d408      	bmi.n	3392 <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    3380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    3382:	0028      	movs	r0, r5
    3384:	69eb      	ldr	r3, [r5, #28]
    3386:	4798      	blx	r3
    3388:	e7ec      	b.n	3364 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    338a:	0028      	movs	r0, r5
    338c:	69ab      	ldr	r3, [r5, #24]
    338e:	4798      	blx	r3
    3390:	e7ef      	b.n	3372 <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3392:	6a2b      	ldr	r3, [r5, #32]
    3394:	0028      	movs	r0, r5
    3396:	4798      	blx	r3
}
    3398:	e7f2      	b.n	3380 <_usart_interrupt_handler+0x17c>
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	20002b5c 	.word	0x20002b5c

000033a0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    33a0:	b510      	push	{r4, lr}
	switch (clock_source) {
    33a2:	2807      	cmp	r0, #7
    33a4:	d803      	bhi.n	33ae <system_clock_source_get_hz+0xe>
    33a6:	0080      	lsls	r0, r0, #2
    33a8:	4b0f      	ldr	r3, [pc, #60]	; (33e8 <system_clock_source_get_hz+0x48>)
    33aa:	581b      	ldr	r3, [r3, r0]
    33ac:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    33ae:	2000      	movs	r0, #0
    33b0:	e018      	b.n	33e4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    33b2:	4b0e      	ldr	r3, [pc, #56]	; (33ec <system_clock_source_get_hz+0x4c>)
    33b4:	6858      	ldr	r0, [r3, #4]
    33b6:	e015      	b.n	33e4 <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    33b8:	4b0d      	ldr	r3, [pc, #52]	; (33f0 <system_clock_source_get_hz+0x50>)
    33ba:	7d59      	ldrb	r1, [r3, #21]
    33bc:	0709      	lsls	r1, r1, #28
    33be:	0f09      	lsrs	r1, r1, #28
    33c0:	3101      	adds	r1, #1
    33c2:	480c      	ldr	r0, [pc, #48]	; (33f4 <system_clock_source_get_hz+0x54>)
    33c4:	4b0c      	ldr	r3, [pc, #48]	; (33f8 <system_clock_source_get_hz+0x58>)
    33c6:	4798      	blx	r3
    33c8:	e00c      	b.n	33e4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    33ca:	4b08      	ldr	r3, [pc, #32]	; (33ec <system_clock_source_get_hz+0x4c>)
    33cc:	6898      	ldr	r0, [r3, #8]
    33ce:	e009      	b.n	33e4 <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    33d0:	4b07      	ldr	r3, [pc, #28]	; (33f0 <system_clock_source_get_hz+0x50>)
    33d2:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    33d4:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    33d6:	079b      	lsls	r3, r3, #30
    33d8:	d504      	bpl.n	33e4 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    33da:	4b04      	ldr	r3, [pc, #16]	; (33ec <system_clock_source_get_hz+0x4c>)
    33dc:	6818      	ldr	r0, [r3, #0]
    33de:	e001      	b.n	33e4 <system_clock_source_get_hz+0x44>
		return 32768UL;
    33e0:	2080      	movs	r0, #128	; 0x80
    33e2:	0200      	lsls	r0, r0, #8
	}
}
    33e4:	bd10      	pop	{r4, pc}
    33e6:	46c0      	nop			; (mov r8, r8)
    33e8:	000085e0 	.word	0x000085e0
    33ec:	200024c0 	.word	0x200024c0
    33f0:	40001000 	.word	0x40001000
    33f4:	02dc6c00 	.word	0x02dc6c00
    33f8:	00006b89 	.word	0x00006b89

000033fc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    33fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    33fe:	46de      	mov	lr, fp
    3400:	4657      	mov	r7, sl
    3402:	464e      	mov	r6, r9
    3404:	4645      	mov	r5, r8
    3406:	b5e0      	push	{r5, r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    3408:	4a25      	ldr	r2, [pc, #148]	; (34a0 <system_clock_source_xosc32k_set_config+0xa4>)
    340a:	8a93      	ldrh	r3, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    340c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    340e:	7801      	ldrb	r1, [r0, #0]
    3410:	424c      	negs	r4, r1
    3412:	414c      	adcs	r4, r1
    3414:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    3416:	7881      	ldrb	r1, [r0, #2]
    3418:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    341a:	78c1      	ldrb	r1, [r0, #3]
    341c:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    341e:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3420:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    3422:	7a81      	ldrb	r1, [r0, #10]
    3424:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    3426:	491f      	ldr	r1, [pc, #124]	; (34a4 <system_clock_source_xosc32k_set_config+0xa8>)
    3428:	6844      	ldr	r4, [r0, #4]
    342a:	608c      	str	r4, [r1, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    342c:	7ac1      	ldrb	r1, [r0, #11]
    342e:	0089      	lsls	r1, r1, #2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    3430:	7b84      	ldrb	r4, [r0, #14]
    3432:	0064      	lsls	r4, r4, #1
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
    3434:	4321      	orrs	r1, r4
    3436:	7b44      	ldrb	r4, [r0, #13]
    3438:	4321      	orrs	r1, r4
    343a:	b2c9      	uxtb	r1, r1
	OSC32KCTRL->CFDCTRL.reg =
    343c:	7591      	strb	r1, [r2, #22]

	OSC32KCTRL->EVCTRL.reg =
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);
    343e:	7b01      	ldrb	r1, [r0, #12]
	OSC32KCTRL->EVCTRL.reg =
    3440:	75d1      	strb	r1, [r2, #23]

	OSC32KCTRL->XOSC32K = temp;
    3442:	2101      	movs	r1, #1
    3444:	4648      	mov	r0, r9
    3446:	0080      	lsls	r0, r0, #2
    3448:	2404      	movs	r4, #4
    344a:	43a3      	bics	r3, r4
    344c:	4303      	orrs	r3, r0
    344e:	4640      	mov	r0, r8
    3450:	4008      	ands	r0, r1
    3452:	00c0      	lsls	r0, r0, #3
    3454:	3404      	adds	r4, #4
    3456:	43a3      	bics	r3, r4
    3458:	4303      	orrs	r3, r0
    345a:	4660      	mov	r0, ip
    345c:	4008      	ands	r0, r1
    345e:	0100      	lsls	r0, r0, #4
    3460:	3408      	adds	r4, #8
    3462:	43a3      	bics	r3, r4
    3464:	4303      	orrs	r3, r0
    3466:	400f      	ands	r7, r1
    3468:	01bf      	lsls	r7, r7, #6
    346a:	2040      	movs	r0, #64	; 0x40
    346c:	4383      	bics	r3, r0
    346e:	433b      	orrs	r3, r7
    3470:	400e      	ands	r6, r1
    3472:	01f6      	lsls	r6, r6, #7
    3474:	3040      	adds	r0, #64	; 0x40
    3476:	4383      	bics	r3, r0
    3478:	4333      	orrs	r3, r6
    347a:	3879      	subs	r0, #121	; 0x79
    347c:	4005      	ands	r5, r0
    347e:	022d      	lsls	r5, r5, #8
    3480:	4809      	ldr	r0, [pc, #36]	; (34a8 <system_clock_source_xosc32k_set_config+0xac>)
    3482:	4003      	ands	r3, r0
    3484:	432b      	orrs	r3, r5
    3486:	4658      	mov	r0, fp
    3488:	4001      	ands	r1, r0
    348a:	0309      	lsls	r1, r1, #12
    348c:	4807      	ldr	r0, [pc, #28]	; (34ac <system_clock_source_xosc32k_set_config+0xb0>)
    348e:	4003      	ands	r3, r0
    3490:	430b      	orrs	r3, r1
    3492:	8293      	strh	r3, [r2, #20]
}
    3494:	bc3c      	pop	{r2, r3, r4, r5}
    3496:	4690      	mov	r8, r2
    3498:	4699      	mov	r9, r3
    349a:	46a2      	mov	sl, r4
    349c:	46ab      	mov	fp, r5
    349e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34a0:	40001400 	.word	0x40001400
    34a4:	200024c0 	.word	0x200024c0
    34a8:	fffff8ff 	.word	0xfffff8ff
    34ac:	ffffefff 	.word	0xffffefff

000034b0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    34b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34b2:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    34b4:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    34b6:	7d03      	ldrb	r3, [r0, #20]
    34b8:	2b01      	cmp	r3, #1
    34ba:	d04d      	beq.n	3558 <system_clock_source_dpll_set_config+0xa8>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    34bc:	68a3      	ldr	r3, [r4, #8]
    34be:	0118      	lsls	r0, r3, #4
    34c0:	0029      	movs	r1, r5
    34c2:	4b29      	ldr	r3, [pc, #164]	; (3568 <system_clock_source_dpll_set_config+0xb8>)
    34c4:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    34c6:	220f      	movs	r2, #15
    34c8:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    34ca:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    34cc:	7821      	ldrb	r1, [r4, #0]
    34ce:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    34d0:	7866      	ldrb	r6, [r4, #1]
    34d2:	01b6      	lsls	r6, r6, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    34d4:	4331      	orrs	r1, r6
    34d6:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    34d8:	4e24      	ldr	r6, [pc, #144]	; (356c <system_clock_source_dpll_set_config+0xbc>)
    34da:	7731      	strb	r1, [r6, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    34dc:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    34de:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    34e0:	051b      	lsls	r3, r3, #20
    34e2:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    34e4:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    34e6:	6233      	str	r3, [r6, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    34e8:	0037      	movs	r7, r6
    34ea:	262c      	movs	r6, #44	; 0x2c
    34ec:	2104      	movs	r1, #4
    34ee:	5dbb      	ldrb	r3, [r7, r6]
    34f0:	420b      	tst	r3, r1
    34f2:	d1fc      	bne.n	34ee <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    34f4:	78a3      	ldrb	r3, [r4, #2]
    34f6:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    34f8:	78e1      	ldrb	r1, [r4, #3]
    34fa:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    34fc:	430b      	orrs	r3, r1
    34fe:	7921      	ldrb	r1, [r4, #4]
    3500:	0089      	lsls	r1, r1, #2
    3502:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    3504:	7ca1      	ldrb	r1, [r4, #18]
    3506:	2603      	movs	r6, #3
    3508:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    350a:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    350c:	8a21      	ldrh	r1, [r4, #16]
    350e:	0409      	lsls	r1, r1, #16
    3510:	4f17      	ldr	r7, [pc, #92]	; (3570 <system_clock_source_dpll_set_config+0xc0>)
    3512:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    3514:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    3516:	7ce1      	ldrb	r1, [r4, #19]
    3518:	0209      	lsls	r1, r1, #8
    351a:	27e0      	movs	r7, #224	; 0xe0
    351c:	00ff      	lsls	r7, r7, #3
    351e:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    3520:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    3522:	7d27      	ldrb	r7, [r4, #20]
    3524:	013f      	lsls	r7, r7, #4
    3526:	2130      	movs	r1, #48	; 0x30
    3528:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    352a:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    352c:	490f      	ldr	r1, [pc, #60]	; (356c <system_clock_source_dpll_set_config+0xbc>)
    352e:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    3530:	7d63      	ldrb	r3, [r4, #21]
    3532:	401e      	ands	r6, r3
    3534:	2328      	movs	r3, #40	; 0x28
    3536:	54ce      	strb	r6, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    3538:	000f      	movs	r7, r1
    353a:	262c      	movs	r6, #44	; 0x2c
    353c:	2108      	movs	r1, #8
    353e:	5dbb      	ldrb	r3, [r7, r6]
    3540:	420b      	tst	r3, r1
    3542:	d1fc      	bne.n	353e <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    3544:	230f      	movs	r3, #15
    3546:	4398      	bics	r0, r3
    3548:	1882      	adds	r2, r0, r2
			(refclk *
    354a:	436a      	muls	r2, r5
			) >> (4 + config->prescaler);
    354c:	7d63      	ldrb	r3, [r4, #21]
    354e:	3304      	adds	r3, #4
    3550:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    3552:	4b08      	ldr	r3, [pc, #32]	; (3574 <system_clock_source_dpll_set_config+0xc4>)
    3554:	601a      	str	r2, [r3, #0]
}
    3556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    3558:	8a01      	ldrh	r1, [r0, #16]
    355a:	3101      	adds	r1, #1
    355c:	0049      	lsls	r1, r1, #1
    355e:	0028      	movs	r0, r5
    3560:	4b01      	ldr	r3, [pc, #4]	; (3568 <system_clock_source_dpll_set_config+0xb8>)
    3562:	4798      	blx	r3
    3564:	0005      	movs	r5, r0
    3566:	e7a9      	b.n	34bc <system_clock_source_dpll_set_config+0xc>
    3568:	00006b89 	.word	0x00006b89
    356c:	40001000 	.word	0x40001000
    3570:	07ff0000 	.word	0x07ff0000
    3574:	200024c0 	.word	0x200024c0

00003578 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3578:	2807      	cmp	r0, #7
    357a:	d803      	bhi.n	3584 <system_clock_source_enable+0xc>
    357c:	0080      	lsls	r0, r0, #2
    357e:	4b18      	ldr	r3, [pc, #96]	; (35e0 <system_clock_source_enable+0x68>)
    3580:	581b      	ldr	r3, [r3, r0]
    3582:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3584:	2017      	movs	r0, #23
    3586:	e029      	b.n	35dc <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    3588:	4a16      	ldr	r2, [pc, #88]	; (35e4 <system_clock_source_enable+0x6c>)
    358a:	7d13      	ldrb	r3, [r2, #20]
    358c:	2102      	movs	r1, #2
    358e:	430b      	orrs	r3, r1
    3590:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    3592:	2000      	movs	r0, #0
    3594:	e022      	b.n	35dc <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    3596:	4a14      	ldr	r2, [pc, #80]	; (35e8 <system_clock_source_enable+0x70>)
    3598:	6993      	ldr	r3, [r2, #24]
    359a:	2102      	movs	r1, #2
    359c:	430b      	orrs	r3, r1
    359e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    35a0:	2000      	movs	r0, #0
		break;
    35a2:	e01b      	b.n	35dc <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    35a4:	4a0f      	ldr	r2, [pc, #60]	; (35e4 <system_clock_source_enable+0x6c>)
    35a6:	8a13      	ldrh	r3, [r2, #16]
    35a8:	2102      	movs	r1, #2
    35aa:	430b      	orrs	r3, r1
    35ac:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    35ae:	2000      	movs	r0, #0
		break;
    35b0:	e014      	b.n	35dc <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    35b2:	4a0d      	ldr	r2, [pc, #52]	; (35e8 <system_clock_source_enable+0x70>)
    35b4:	8a93      	ldrh	r3, [r2, #20]
    35b6:	2102      	movs	r1, #2
    35b8:	430b      	orrs	r3, r1
    35ba:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    35bc:	2000      	movs	r0, #0
		break;
    35be:	e00d      	b.n	35dc <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    35c0:	4a08      	ldr	r2, [pc, #32]	; (35e4 <system_clock_source_enable+0x6c>)
    35c2:	7f13      	ldrb	r3, [r2, #28]
    35c4:	2102      	movs	r1, #2
    35c6:	430b      	orrs	r3, r1
    35c8:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    35ca:	0010      	movs	r0, r2
    35cc:	312a      	adds	r1, #42	; 0x2a
    35ce:	2202      	movs	r2, #2
    35d0:	5c43      	ldrb	r3, [r0, r1]
    35d2:	4213      	tst	r3, r2
    35d4:	d1fc      	bne.n	35d0 <system_clock_source_enable+0x58>
	return STATUS_OK;
    35d6:	2000      	movs	r0, #0
    35d8:	e000      	b.n	35dc <system_clock_source_enable+0x64>
		return STATUS_OK;
    35da:	2000      	movs	r0, #0
}
    35dc:	4770      	bx	lr
    35de:	46c0      	nop			; (mov r8, r8)
    35e0:	00008600 	.word	0x00008600
    35e4:	40001000 	.word	0x40001000
    35e8:	40001400 	.word	0x40001400

000035ec <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    35ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ee:	46c6      	mov	lr, r8
    35f0:	b500      	push	{lr}
    35f2:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    35f4:	2203      	movs	r2, #3
    35f6:	4b3f      	ldr	r3, [pc, #252]	; (36f4 <system_clock_init+0x108>)
    35f8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    35fa:	4a3f      	ldr	r2, [pc, #252]	; (36f8 <system_clock_init+0x10c>)
    35fc:	6853      	ldr	r3, [r2, #4]
    35fe:	211e      	movs	r1, #30
    3600:	438b      	bics	r3, r1
    3602:	3918      	subs	r1, #24
    3604:	430b      	orrs	r3, r1
    3606:	6053      	str	r3, [r2, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    3608:	a80a      	add	r0, sp, #40	; 0x28
    360a:	2300      	movs	r3, #0
    360c:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    360e:	2280      	movs	r2, #128	; 0x80
    3610:	0212      	lsls	r2, r2, #8
    3612:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    3614:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    3616:	2201      	movs	r2, #1
    3618:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    361a:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    361c:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    361e:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    3620:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    3622:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    3624:	3902      	subs	r1, #2
    3626:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    3628:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    362a:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    362c:	4b33      	ldr	r3, [pc, #204]	; (36fc <system_clock_init+0x110>)
    362e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3630:	2005      	movs	r0, #5
    3632:	4b33      	ldr	r3, [pc, #204]	; (3700 <system_clock_init+0x114>)
    3634:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    3636:	4933      	ldr	r1, [pc, #204]	; (3704 <system_clock_init+0x118>)
    3638:	2201      	movs	r2, #1
    363a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    363c:	421a      	tst	r2, r3
    363e:	d0fc      	beq.n	363a <system_clock_init+0x4e>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    3640:	4b31      	ldr	r3, [pc, #196]	; (3708 <system_clock_init+0x11c>)
    3642:	7d1a      	ldrb	r2, [r3, #20]
    3644:	2180      	movs	r1, #128	; 0x80
    3646:	430a      	orrs	r2, r1
    3648:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    364a:	2202      	movs	r2, #2
    364c:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    364e:	001a      	movs	r2, r3
    3650:	6993      	ldr	r3, [r2, #24]
    3652:	2b00      	cmp	r3, #0
    3654:	d1fc      	bne.n	3650 <system_clock_init+0x64>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3656:	4b2d      	ldr	r3, [pc, #180]	; (370c <system_clock_init+0x120>)
    3658:	4798      	blx	r3
	config->division_factor    = 1;
    365a:	ad01      	add	r5, sp, #4
    365c:	2601      	movs	r6, #1
    365e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    3660:	2400      	movs	r4, #0
    3662:	706c      	strb	r4, [r5, #1]
	config->output_enable      = false;
    3664:	726c      	strb	r4, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3666:	2305      	movs	r3, #5
    3668:	702b      	strb	r3, [r5, #0]
    366a:	722e      	strb	r6, [r5, #8]
    366c:	0029      	movs	r1, r5
    366e:	2001      	movs	r0, #1
    3670:	4b27      	ldr	r3, [pc, #156]	; (3710 <system_clock_init+0x124>)
    3672:	4698      	mov	r8, r3
    3674:	4798      	blx	r3
    3676:	2001      	movs	r0, #1
    3678:	4f26      	ldr	r7, [pc, #152]	; (3714 <system_clock_init+0x128>)
    367a:	47b8      	blx	r7
	config->division_factor    = 1;
    367c:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    367e:	706c      	strb	r4, [r5, #1]
	config->run_in_standby     = false;
    3680:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    3682:	726c      	strb	r4, [r5, #9]
    3684:	2307      	movs	r3, #7
    3686:	702b      	strb	r3, [r5, #0]
    3688:	0029      	movs	r1, r5
    368a:	2008      	movs	r0, #8
    368c:	47c0      	blx	r8
    368e:	2008      	movs	r0, #8
    3690:	47b8      	blx	r7
	config->lock_bypass         = false;
    3692:	a804      	add	r0, sp, #16
    3694:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    3696:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    3698:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    369a:	4b1f      	ldr	r3, [pc, #124]	; (3718 <system_clock_init+0x12c>)
    369c:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    369e:	8206      	strh	r6, [r0, #16]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    36a0:	7544      	strb	r4, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    36a2:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    36a4:	7484      	strb	r4, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    36a6:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    36a8:	2301      	movs	r3, #1
    36aa:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    36ac:	7504      	strb	r4, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    36ae:	4b1b      	ldr	r3, [pc, #108]	; (371c <system_clock_init+0x130>)
    36b0:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    36b2:	4b1b      	ldr	r3, [pc, #108]	; (3720 <system_clock_init+0x134>)
    36b4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    36b6:	2007      	movs	r0, #7
    36b8:	4b11      	ldr	r3, [pc, #68]	; (3700 <system_clock_init+0x114>)
    36ba:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    36bc:	4812      	ldr	r0, [pc, #72]	; (3708 <system_clock_init+0x11c>)
    36be:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    36c0:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    36c2:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    36c4:	4013      	ands	r3, r2
    36c6:	2b03      	cmp	r3, #3
    36c8:	d1fb      	bne.n	36c2 <system_clock_init+0xd6>
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    36ca:	3b02      	subs	r3, #2
    36cc:	4a15      	ldr	r2, [pc, #84]	; (3724 <system_clock_init+0x138>)
    36ce:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    36d0:	a901      	add	r1, sp, #4
    36d2:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    36d4:	2200      	movs	r2, #0
    36d6:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    36d8:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    36da:	3207      	adds	r2, #7
    36dc:	700a      	strb	r2, [r1, #0]
    36de:	720b      	strb	r3, [r1, #8]
    36e0:	2000      	movs	r0, #0
    36e2:	4b0b      	ldr	r3, [pc, #44]	; (3710 <system_clock_init+0x124>)
    36e4:	4798      	blx	r3
    36e6:	2000      	movs	r0, #0
    36e8:	4b0a      	ldr	r3, [pc, #40]	; (3714 <system_clock_init+0x128>)
    36ea:	4798      	blx	r3
#endif

}
    36ec:	b00e      	add	sp, #56	; 0x38
    36ee:	bc04      	pop	{r2}
    36f0:	4690      	mov	r8, r2
    36f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36f4:	40001800 	.word	0x40001800
    36f8:	41004000 	.word	0x41004000
    36fc:	000033fd 	.word	0x000033fd
    3700:	00003579 	.word	0x00003579
    3704:	40001400 	.word	0x40001400
    3708:	40001000 	.word	0x40001000
    370c:	00003729 	.word	0x00003729
    3710:	0000374d 	.word	0x0000374d
    3714:	000037f9 	.word	0x000037f9
    3718:	02dc6c00 	.word	0x02dc6c00
    371c:	00007fff 	.word	0x00007fff
    3720:	000034b1 	.word	0x000034b1
    3724:	40000800 	.word	0x40000800

00003728 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    3728:	4a06      	ldr	r2, [pc, #24]	; (3744 <system_gclk_init+0x1c>)
    372a:	6953      	ldr	r3, [r2, #20]
    372c:	2180      	movs	r1, #128	; 0x80
    372e:	430b      	orrs	r3, r1
    3730:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    3732:	2201      	movs	r2, #1
    3734:	4b04      	ldr	r3, [pc, #16]	; (3748 <system_gclk_init+0x20>)
    3736:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3738:	0019      	movs	r1, r3
    373a:	780b      	ldrb	r3, [r1, #0]
    373c:	4213      	tst	r3, r2
    373e:	d1fc      	bne.n	373a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3740:	4770      	bx	lr
    3742:	46c0      	nop			; (mov r8, r8)
    3744:	40000800 	.word	0x40000800
    3748:	40001c00 	.word	0x40001c00

0000374c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    374c:	b570      	push	{r4, r5, r6, lr}
    374e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3750:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3752:	784b      	ldrb	r3, [r1, #1]
    3754:	2b00      	cmp	r3, #0
    3756:	d002      	beq.n	375e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3758:	2380      	movs	r3, #128	; 0x80
    375a:	00db      	lsls	r3, r3, #3
    375c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    375e:	7a4b      	ldrb	r3, [r1, #9]
    3760:	2b00      	cmp	r3, #0
    3762:	d002      	beq.n	376a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3764:	2380      	movs	r3, #128	; 0x80
    3766:	011b      	lsls	r3, r3, #4
    3768:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    376a:	6848      	ldr	r0, [r1, #4]
    376c:	2801      	cmp	r0, #1
    376e:	d90f      	bls.n	3790 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3770:	1e43      	subs	r3, r0, #1
    3772:	4218      	tst	r0, r3
    3774:	d131      	bne.n	37da <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3776:	2802      	cmp	r0, #2
    3778:	d92d      	bls.n	37d6 <system_gclk_gen_set_config+0x8a>
    377a:	2302      	movs	r3, #2
    377c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    377e:	3201      	adds	r2, #1
						mask <<= 1) {
    3780:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3782:	4298      	cmp	r0, r3
    3784:	d8fb      	bhi.n	377e <system_gclk_gen_set_config+0x32>
    3786:	2380      	movs	r3, #128	; 0x80
    3788:	015b      	lsls	r3, r3, #5
    378a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    378c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    378e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3790:	7a0b      	ldrb	r3, [r1, #8]
    3792:	2b00      	cmp	r3, #0
    3794:	d002      	beq.n	379c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3796:	2380      	movs	r3, #128	; 0x80
    3798:	019b      	lsls	r3, r3, #6
    379a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    379c:	2604      	movs	r6, #4
    379e:	40a6      	lsls	r6, r4
    37a0:	4911      	ldr	r1, [pc, #68]	; (37e8 <system_gclk_gen_set_config+0x9c>)
    37a2:	4a12      	ldr	r2, [pc, #72]	; (37ec <system_gclk_gen_set_config+0xa0>)
    37a4:	684b      	ldr	r3, [r1, #4]
    37a6:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    37a8:	421e      	tst	r6, r3
    37aa:	d1fb      	bne.n	37a4 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    37ac:	4b10      	ldr	r3, [pc, #64]	; (37f0 <system_gclk_gen_set_config+0xa4>)
    37ae:	4798      	blx	r3
    37b0:	00a4      	lsls	r4, r4, #2
    37b2:	4b0d      	ldr	r3, [pc, #52]	; (37e8 <system_gclk_gen_set_config+0x9c>)
    37b4:	469c      	mov	ip, r3
    37b6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    37b8:	6a22      	ldr	r2, [r4, #32]
    37ba:	2380      	movs	r3, #128	; 0x80
    37bc:	005b      	lsls	r3, r3, #1
    37be:	401a      	ands	r2, r3
    37c0:	432a      	orrs	r2, r5
    37c2:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    37c4:	4661      	mov	r1, ip
    37c6:	4a09      	ldr	r2, [pc, #36]	; (37ec <system_gclk_gen_set_config+0xa0>)
    37c8:	684b      	ldr	r3, [r1, #4]
    37ca:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    37cc:	421e      	tst	r6, r3
    37ce:	d1fb      	bne.n	37c8 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    37d0:	4b08      	ldr	r3, [pc, #32]	; (37f4 <system_gclk_gen_set_config+0xa8>)
    37d2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    37d4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    37d6:	2200      	movs	r2, #0
    37d8:	e7d5      	b.n	3786 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    37da:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    37dc:	2380      	movs	r3, #128	; 0x80
    37de:	009b      	lsls	r3, r3, #2
    37e0:	4318      	orrs	r0, r3
    37e2:	4305      	orrs	r5, r0
    37e4:	e7d4      	b.n	3790 <system_gclk_gen_set_config+0x44>
    37e6:	46c0      	nop			; (mov r8, r8)
    37e8:	40001c00 	.word	0x40001c00
    37ec:	000007fc 	.word	0x000007fc
    37f0:	00002411 	.word	0x00002411
    37f4:	00002451 	.word	0x00002451

000037f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    37f8:	b510      	push	{r4, lr}
    37fa:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    37fc:	2204      	movs	r2, #4
    37fe:	4082      	lsls	r2, r0
    3800:	4809      	ldr	r0, [pc, #36]	; (3828 <system_gclk_gen_enable+0x30>)
    3802:	490a      	ldr	r1, [pc, #40]	; (382c <system_gclk_gen_enable+0x34>)
    3804:	6843      	ldr	r3, [r0, #4]
    3806:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3808:	421a      	tst	r2, r3
    380a:	d1fb      	bne.n	3804 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    380c:	4b08      	ldr	r3, [pc, #32]	; (3830 <system_gclk_gen_enable+0x38>)
    380e:	4798      	blx	r3
    3810:	00a4      	lsls	r4, r4, #2
    3812:	4b05      	ldr	r3, [pc, #20]	; (3828 <system_gclk_gen_enable+0x30>)
    3814:	469c      	mov	ip, r3
    3816:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    3818:	6a22      	ldr	r2, [r4, #32]
    381a:	2380      	movs	r3, #128	; 0x80
    381c:	005b      	lsls	r3, r3, #1
    381e:	4313      	orrs	r3, r2
    3820:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    3822:	4b04      	ldr	r3, [pc, #16]	; (3834 <system_gclk_gen_enable+0x3c>)
    3824:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3826:	bd10      	pop	{r4, pc}
    3828:	40001c00 	.word	0x40001c00
    382c:	000007fc 	.word	0x000007fc
    3830:	00002411 	.word	0x00002411
    3834:	00002451 	.word	0x00002451

00003838 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    383a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    383c:	2204      	movs	r2, #4
    383e:	4082      	lsls	r2, r0
    3840:	4812      	ldr	r0, [pc, #72]	; (388c <system_gclk_gen_get_hz+0x54>)
    3842:	4913      	ldr	r1, [pc, #76]	; (3890 <system_gclk_gen_get_hz+0x58>)
    3844:	6843      	ldr	r3, [r0, #4]
    3846:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3848:	421a      	tst	r2, r3
    384a:	d1fb      	bne.n	3844 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    384c:	4b11      	ldr	r3, [pc, #68]	; (3894 <system_gclk_gen_get_hz+0x5c>)
    384e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    3850:	4f0e      	ldr	r7, [pc, #56]	; (388c <system_gclk_gen_get_hz+0x54>)
    3852:	3408      	adds	r4, #8
    3854:	00a4      	lsls	r4, r4, #2
    3856:	59e0      	ldr	r0, [r4, r7]
    3858:	0740      	lsls	r0, r0, #29
    385a:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    385c:	4b0e      	ldr	r3, [pc, #56]	; (3898 <system_gclk_gen_get_hz+0x60>)
    385e:	4798      	blx	r3
    3860:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    3862:	59e5      	ldr	r5, [r4, r7]
    3864:	04ed      	lsls	r5, r5, #19
    3866:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    3868:	59e4      	ldr	r4, [r4, r7]
    386a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    386c:	4b0b      	ldr	r3, [pc, #44]	; (389c <system_gclk_gen_get_hz+0x64>)
    386e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3870:	2d00      	cmp	r5, #0
    3872:	d107      	bne.n	3884 <system_gclk_gen_get_hz+0x4c>
    3874:	2c01      	cmp	r4, #1
    3876:	d907      	bls.n	3888 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    3878:	0021      	movs	r1, r4
    387a:	0030      	movs	r0, r6
    387c:	4b08      	ldr	r3, [pc, #32]	; (38a0 <system_gclk_gen_get_hz+0x68>)
    387e:	4798      	blx	r3
    3880:	0006      	movs	r6, r0
    3882:	e001      	b.n	3888 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3884:	3401      	adds	r4, #1
    3886:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    3888:	0030      	movs	r0, r6
    388a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    388c:	40001c00 	.word	0x40001c00
    3890:	000007fc 	.word	0x000007fc
    3894:	00002411 	.word	0x00002411
    3898:	000033a1 	.word	0x000033a1
    389c:	00002451 	.word	0x00002451
    38a0:	00006b89 	.word	0x00006b89

000038a4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    38a4:	b510      	push	{r4, lr}
    38a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    38a8:	4b09      	ldr	r3, [pc, #36]	; (38d0 <system_gclk_chan_enable+0x2c>)
    38aa:	4798      	blx	r3
    38ac:	00a0      	lsls	r0, r4, #2
    38ae:	4b09      	ldr	r3, [pc, #36]	; (38d4 <system_gclk_chan_enable+0x30>)
    38b0:	469c      	mov	ip, r3
    38b2:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    38b4:	2280      	movs	r2, #128	; 0x80
    38b6:	5883      	ldr	r3, [r0, r2]
    38b8:	2140      	movs	r1, #64	; 0x40
    38ba:	430b      	orrs	r3, r1
    38bc:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    38be:	3140      	adds	r1, #64	; 0x40
    38c0:	3a40      	subs	r2, #64	; 0x40
    38c2:	5843      	ldr	r3, [r0, r1]
    38c4:	421a      	tst	r2, r3
    38c6:	d0fc      	beq.n	38c2 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    38c8:	4b03      	ldr	r3, [pc, #12]	; (38d8 <system_gclk_chan_enable+0x34>)
    38ca:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    38cc:	bd10      	pop	{r4, pc}
    38ce:	46c0      	nop			; (mov r8, r8)
    38d0:	00002411 	.word	0x00002411
    38d4:	40001c00 	.word	0x40001c00
    38d8:	00002451 	.word	0x00002451

000038dc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    38dc:	b510      	push	{r4, lr}
    38de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    38e0:	4b09      	ldr	r3, [pc, #36]	; (3908 <system_gclk_chan_disable+0x2c>)
    38e2:	4798      	blx	r3
    38e4:	00a0      	lsls	r0, r4, #2
    38e6:	4b09      	ldr	r3, [pc, #36]	; (390c <system_gclk_chan_disable+0x30>)
    38e8:	469c      	mov	ip, r3
    38ea:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    38ec:	2280      	movs	r2, #128	; 0x80
    38ee:	5883      	ldr	r3, [r0, r2]
    38f0:	2140      	movs	r1, #64	; 0x40
    38f2:	438b      	bics	r3, r1
    38f4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    38f6:	3140      	adds	r1, #64	; 0x40
    38f8:	3a40      	subs	r2, #64	; 0x40
    38fa:	5843      	ldr	r3, [r0, r1]
    38fc:	421a      	tst	r2, r3
    38fe:	d1fc      	bne.n	38fa <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    3900:	4b03      	ldr	r3, [pc, #12]	; (3910 <system_gclk_chan_disable+0x34>)
    3902:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3904:	bd10      	pop	{r4, pc}
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	00002411 	.word	0x00002411
    390c:	40001c00 	.word	0x40001c00
    3910:	00002451 	.word	0x00002451

00003914 <system_gclk_chan_set_config>:
{
    3914:	b570      	push	{r4, r5, r6, lr}
    3916:	0004      	movs	r4, r0
    3918:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    391a:	4b05      	ldr	r3, [pc, #20]	; (3930 <system_gclk_chan_set_config+0x1c>)
    391c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    391e:	782a      	ldrb	r2, [r5, #0]
    3920:	230f      	movs	r3, #15
    3922:	4013      	ands	r3, r2
    3924:	3420      	adds	r4, #32
    3926:	00a4      	lsls	r4, r4, #2
    3928:	4a02      	ldr	r2, [pc, #8]	; (3934 <system_gclk_chan_set_config+0x20>)
    392a:	50a3      	str	r3, [r4, r2]
}
    392c:	bd70      	pop	{r4, r5, r6, pc}
    392e:	46c0      	nop			; (mov r8, r8)
    3930:	000038dd 	.word	0x000038dd
    3934:	40001c00 	.word	0x40001c00

00003938 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3938:	b510      	push	{r4, lr}
    393a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    393c:	4b06      	ldr	r3, [pc, #24]	; (3958 <system_gclk_chan_get_hz+0x20>)
    393e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    3940:	3420      	adds	r4, #32
    3942:	00a4      	lsls	r4, r4, #2
    3944:	4b05      	ldr	r3, [pc, #20]	; (395c <system_gclk_chan_get_hz+0x24>)
    3946:	58e4      	ldr	r4, [r4, r3]
    3948:	0724      	lsls	r4, r4, #28
    394a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    394c:	4b04      	ldr	r3, [pc, #16]	; (3960 <system_gclk_chan_get_hz+0x28>)
    394e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3950:	0020      	movs	r0, r4
    3952:	4b04      	ldr	r3, [pc, #16]	; (3964 <system_gclk_chan_get_hz+0x2c>)
    3954:	4798      	blx	r3
}
    3956:	bd10      	pop	{r4, pc}
    3958:	00002411 	.word	0x00002411
    395c:	40001c00 	.word	0x40001c00
    3960:	00002451 	.word	0x00002451
    3964:	00003839 	.word	0x00003839

00003968 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3968:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    396a:	78d3      	ldrb	r3, [r2, #3]
    396c:	2b00      	cmp	r3, #0
    396e:	d135      	bne.n	39dc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3970:	7813      	ldrb	r3, [r2, #0]
    3972:	2b80      	cmp	r3, #128	; 0x80
    3974:	d029      	beq.n	39ca <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3976:	061b      	lsls	r3, r3, #24
    3978:	2480      	movs	r4, #128	; 0x80
    397a:	0264      	lsls	r4, r4, #9
    397c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    397e:	7854      	ldrb	r4, [r2, #1]
    3980:	2502      	movs	r5, #2
    3982:	43ac      	bics	r4, r5
    3984:	d106      	bne.n	3994 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3986:	7894      	ldrb	r4, [r2, #2]
    3988:	2c00      	cmp	r4, #0
    398a:	d120      	bne.n	39ce <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    398c:	2480      	movs	r4, #128	; 0x80
    398e:	02a4      	lsls	r4, r4, #10
    3990:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3992:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3994:	7854      	ldrb	r4, [r2, #1]
    3996:	3c01      	subs	r4, #1
    3998:	2c01      	cmp	r4, #1
    399a:	d91c      	bls.n	39d6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    399c:	040d      	lsls	r5, r1, #16
    399e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    39a0:	24a0      	movs	r4, #160	; 0xa0
    39a2:	05e4      	lsls	r4, r4, #23
    39a4:	432c      	orrs	r4, r5
    39a6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39a8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    39aa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    39ac:	24d0      	movs	r4, #208	; 0xd0
    39ae:	0624      	lsls	r4, r4, #24
    39b0:	432c      	orrs	r4, r5
    39b2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39b4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    39b6:	78d4      	ldrb	r4, [r2, #3]
    39b8:	2c00      	cmp	r4, #0
    39ba:	d122      	bne.n	3a02 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    39bc:	035b      	lsls	r3, r3, #13
    39be:	d51c      	bpl.n	39fa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    39c0:	7893      	ldrb	r3, [r2, #2]
    39c2:	2b01      	cmp	r3, #1
    39c4:	d01e      	beq.n	3a04 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    39c6:	6141      	str	r1, [r0, #20]
    39c8:	e017      	b.n	39fa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    39ca:	2300      	movs	r3, #0
    39cc:	e7d7      	b.n	397e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    39ce:	24c0      	movs	r4, #192	; 0xc0
    39d0:	02e4      	lsls	r4, r4, #11
    39d2:	4323      	orrs	r3, r4
    39d4:	e7dd      	b.n	3992 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    39d6:	4c0d      	ldr	r4, [pc, #52]	; (3a0c <_system_pinmux_config+0xa4>)
    39d8:	4023      	ands	r3, r4
    39da:	e7df      	b.n	399c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    39dc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    39de:	040c      	lsls	r4, r1, #16
    39e0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    39e2:	23a0      	movs	r3, #160	; 0xa0
    39e4:	05db      	lsls	r3, r3, #23
    39e6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39e8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    39ea:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    39ec:	23d0      	movs	r3, #208	; 0xd0
    39ee:	061b      	lsls	r3, r3, #24
    39f0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39f2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    39f4:	78d3      	ldrb	r3, [r2, #3]
    39f6:	2b00      	cmp	r3, #0
    39f8:	d103      	bne.n	3a02 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    39fa:	7853      	ldrb	r3, [r2, #1]
    39fc:	3b01      	subs	r3, #1
    39fe:	2b01      	cmp	r3, #1
    3a00:	d902      	bls.n	3a08 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3a02:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3a04:	6181      	str	r1, [r0, #24]
    3a06:	e7f8      	b.n	39fa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3a08:	6081      	str	r1, [r0, #8]
}
    3a0a:	e7fa      	b.n	3a02 <_system_pinmux_config+0x9a>
    3a0c:	fffbffff 	.word	0xfffbffff

00003a10 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3a10:	b510      	push	{r4, lr}
    3a12:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3a14:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3a16:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3a18:	2900      	cmp	r1, #0
    3a1a:	d105      	bne.n	3a28 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    3a1c:	0943      	lsrs	r3, r0, #5
    3a1e:	01db      	lsls	r3, r3, #7
    3a20:	2182      	movs	r1, #130	; 0x82
    3a22:	05c9      	lsls	r1, r1, #23
    3a24:	468c      	mov	ip, r1
    3a26:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3a28:	241f      	movs	r4, #31
    3a2a:	4020      	ands	r0, r4
    3a2c:	2101      	movs	r1, #1
    3a2e:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3a30:	0018      	movs	r0, r3
    3a32:	4b01      	ldr	r3, [pc, #4]	; (3a38 <system_pinmux_pin_set_config+0x28>)
    3a34:	4798      	blx	r3
}
    3a36:	bd10      	pop	{r4, pc}
    3a38:	00003969 	.word	0x00003969

00003a3c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3a3c:	4770      	bx	lr
	...

00003a40 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3a40:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3a42:	4b05      	ldr	r3, [pc, #20]	; (3a58 <system_init+0x18>)
    3a44:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3a46:	4b05      	ldr	r3, [pc, #20]	; (3a5c <system_init+0x1c>)
    3a48:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3a4a:	4b05      	ldr	r3, [pc, #20]	; (3a60 <system_init+0x20>)
    3a4c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3a4e:	4b05      	ldr	r3, [pc, #20]	; (3a64 <system_init+0x24>)
    3a50:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3a52:	4b05      	ldr	r3, [pc, #20]	; (3a68 <system_init+0x28>)
    3a54:	4798      	blx	r3
}
    3a56:	bd10      	pop	{r4, pc}
    3a58:	000035ed 	.word	0x000035ed
    3a5c:	00002481 	.word	0x00002481
    3a60:	00003a3d 	.word	0x00003a3d
    3a64:	00003a3d 	.word	0x00003a3d
    3a68:	00003a3d 	.word	0x00003a3d

00003a6c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3a6c:	e7fe      	b.n	3a6c <Dummy_Handler>
	...

00003a70 <Reset_Handler>:
{
    3a70:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    3a72:	4a17      	ldr	r2, [pc, #92]	; (3ad0 <Reset_Handler+0x60>)
    3a74:	4b17      	ldr	r3, [pc, #92]	; (3ad4 <Reset_Handler+0x64>)
    3a76:	429a      	cmp	r2, r3
    3a78:	d011      	beq.n	3a9e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    3a7a:	001a      	movs	r2, r3
    3a7c:	4b16      	ldr	r3, [pc, #88]	; (3ad8 <Reset_Handler+0x68>)
    3a7e:	429a      	cmp	r2, r3
    3a80:	d20d      	bcs.n	3a9e <Reset_Handler+0x2e>
    3a82:	4a16      	ldr	r2, [pc, #88]	; (3adc <Reset_Handler+0x6c>)
    3a84:	3303      	adds	r3, #3
    3a86:	1a9b      	subs	r3, r3, r2
    3a88:	089b      	lsrs	r3, r3, #2
    3a8a:	3301      	adds	r3, #1
    3a8c:	009b      	lsls	r3, r3, #2
    3a8e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3a90:	4810      	ldr	r0, [pc, #64]	; (3ad4 <Reset_Handler+0x64>)
    3a92:	490f      	ldr	r1, [pc, #60]	; (3ad0 <Reset_Handler+0x60>)
    3a94:	588c      	ldr	r4, [r1, r2]
    3a96:	5084      	str	r4, [r0, r2]
    3a98:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3a9a:	429a      	cmp	r2, r3
    3a9c:	d1fa      	bne.n	3a94 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3a9e:	4a10      	ldr	r2, [pc, #64]	; (3ae0 <Reset_Handler+0x70>)
    3aa0:	4b10      	ldr	r3, [pc, #64]	; (3ae4 <Reset_Handler+0x74>)
    3aa2:	429a      	cmp	r2, r3
    3aa4:	d20a      	bcs.n	3abc <Reset_Handler+0x4c>
    3aa6:	43d3      	mvns	r3, r2
    3aa8:	490e      	ldr	r1, [pc, #56]	; (3ae4 <Reset_Handler+0x74>)
    3aaa:	185b      	adds	r3, r3, r1
    3aac:	2103      	movs	r1, #3
    3aae:	438b      	bics	r3, r1
    3ab0:	3304      	adds	r3, #4
    3ab2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3ab4:	2100      	movs	r1, #0
    3ab6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3ab8:	4293      	cmp	r3, r2
    3aba:	d1fc      	bne.n	3ab6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3abc:	4a0a      	ldr	r2, [pc, #40]	; (3ae8 <Reset_Handler+0x78>)
    3abe:	21ff      	movs	r1, #255	; 0xff
    3ac0:	4b0a      	ldr	r3, [pc, #40]	; (3aec <Reset_Handler+0x7c>)
    3ac2:	438b      	bics	r3, r1
    3ac4:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    3ac6:	4b0a      	ldr	r3, [pc, #40]	; (3af0 <Reset_Handler+0x80>)
    3ac8:	4798      	blx	r3
        main();
    3aca:	4b0a      	ldr	r3, [pc, #40]	; (3af4 <Reset_Handler+0x84>)
    3acc:	4798      	blx	r3
    3ace:	e7fe      	b.n	3ace <Reset_Handler+0x5e>
    3ad0:	0000aebc 	.word	0x0000aebc
    3ad4:	20000000 	.word	0x20000000
    3ad8:	20000274 	.word	0x20000274
    3adc:	20000004 	.word	0x20000004
    3ae0:	20000274 	.word	0x20000274
    3ae4:	20002bb0 	.word	0x20002bb0
    3ae8:	e000ed00 	.word	0xe000ed00
    3aec:	00000000 	.word	0x00000000
    3af0:	00006ef5 	.word	0x00006ef5
    3af4:	0000679d 	.word	0x0000679d

00003af8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3afa:	46c6      	mov	lr, r8
    3afc:	b500      	push	{lr}
    3afe:	000c      	movs	r4, r1
    3b00:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3b02:	2800      	cmp	r0, #0
    3b04:	d10f      	bne.n	3b26 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3b06:	2a00      	cmp	r2, #0
    3b08:	dd11      	ble.n	3b2e <_read+0x36>
    3b0a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3b0c:	4e09      	ldr	r6, [pc, #36]	; (3b34 <_read+0x3c>)
    3b0e:	4d0a      	ldr	r5, [pc, #40]	; (3b38 <_read+0x40>)
    3b10:	6830      	ldr	r0, [r6, #0]
    3b12:	0021      	movs	r1, r4
    3b14:	682b      	ldr	r3, [r5, #0]
    3b16:	4798      	blx	r3
		ptr++;
    3b18:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3b1a:	42bc      	cmp	r4, r7
    3b1c:	d1f8      	bne.n	3b10 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3b1e:	4640      	mov	r0, r8
    3b20:	bc04      	pop	{r2}
    3b22:	4690      	mov	r8, r2
    3b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3b26:	2301      	movs	r3, #1
    3b28:	425b      	negs	r3, r3
    3b2a:	4698      	mov	r8, r3
    3b2c:	e7f7      	b.n	3b1e <_read+0x26>
	for (; len > 0; --len) {
    3b2e:	4680      	mov	r8, r0
    3b30:	e7f5      	b.n	3b1e <_read+0x26>
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	20002b7c 	.word	0x20002b7c
    3b38:	20002b74 	.word	0x20002b74

00003b3c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b3e:	46c6      	mov	lr, r8
    3b40:	b500      	push	{lr}
    3b42:	000e      	movs	r6, r1
    3b44:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3b46:	3801      	subs	r0, #1
    3b48:	2802      	cmp	r0, #2
    3b4a:	d810      	bhi.n	3b6e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3b4c:	2a00      	cmp	r2, #0
    3b4e:	d011      	beq.n	3b74 <_write+0x38>
    3b50:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3b52:	4b0c      	ldr	r3, [pc, #48]	; (3b84 <_write+0x48>)
    3b54:	4698      	mov	r8, r3
    3b56:	4f0c      	ldr	r7, [pc, #48]	; (3b88 <_write+0x4c>)
    3b58:	4643      	mov	r3, r8
    3b5a:	6818      	ldr	r0, [r3, #0]
    3b5c:	5d31      	ldrb	r1, [r6, r4]
    3b5e:	683b      	ldr	r3, [r7, #0]
    3b60:	4798      	blx	r3
    3b62:	2800      	cmp	r0, #0
    3b64:	db08      	blt.n	3b78 <_write+0x3c>
			return -1;
		}
		++nChars;
    3b66:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3b68:	42a5      	cmp	r5, r4
    3b6a:	d1f5      	bne.n	3b58 <_write+0x1c>
    3b6c:	e006      	b.n	3b7c <_write+0x40>
		return -1;
    3b6e:	2401      	movs	r4, #1
    3b70:	4264      	negs	r4, r4
    3b72:	e003      	b.n	3b7c <_write+0x40>
	for (; len != 0; --len) {
    3b74:	0014      	movs	r4, r2
    3b76:	e001      	b.n	3b7c <_write+0x40>
			return -1;
    3b78:	2401      	movs	r4, #1
    3b7a:	4264      	negs	r4, r4
	}
	return nChars;
}
    3b7c:	0020      	movs	r0, r4
    3b7e:	bc04      	pop	{r2}
    3b80:	4690      	mov	r8, r2
    3b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b84:	20002b7c 	.word	0x20002b7c
    3b88:	20002b78 	.word	0x20002b78

00003b8c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3b8c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3b8e:	4a06      	ldr	r2, [pc, #24]	; (3ba8 <_sbrk+0x1c>)
    3b90:	6812      	ldr	r2, [r2, #0]
    3b92:	2a00      	cmp	r2, #0
    3b94:	d004      	beq.n	3ba0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3b96:	4a04      	ldr	r2, [pc, #16]	; (3ba8 <_sbrk+0x1c>)
    3b98:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3b9a:	18c3      	adds	r3, r0, r3
    3b9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3b9e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3ba0:	4902      	ldr	r1, [pc, #8]	; (3bac <_sbrk+0x20>)
    3ba2:	4a01      	ldr	r2, [pc, #4]	; (3ba8 <_sbrk+0x1c>)
    3ba4:	6011      	str	r1, [r2, #0]
    3ba6:	e7f6      	b.n	3b96 <_sbrk+0xa>
    3ba8:	200024cc 	.word	0x200024cc
    3bac:	20006bb0 	.word	0x20006bb0

00003bb0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3bb0:	2001      	movs	r0, #1
    3bb2:	4240      	negs	r0, r0
    3bb4:	4770      	bx	lr

00003bb6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3bb6:	2380      	movs	r3, #128	; 0x80
    3bb8:	019b      	lsls	r3, r3, #6
    3bba:	604b      	str	r3, [r1, #4]

	return 0;
}
    3bbc:	2000      	movs	r0, #0
    3bbe:	4770      	bx	lr

00003bc0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3bc0:	2001      	movs	r0, #1
    3bc2:	4770      	bx	lr

00003bc4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3bc4:	2000      	movs	r0, #0
    3bc6:	4770      	bx	lr

00003bc8 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    3bc8:	be00      	bkpt	0x0000
    3bca:	e7fe      	b.n	3bca <_exit+0x2>

00003bcc <is_zero_ct>:
static digit_t mask4000 = (digit_t)1 << (sizeof(digit_t)*8 - 2);
static digit_t mask7fff = (digit_t)(-1) >> 1;


bool is_zero_ct(digit_t* a, unsigned int nwords)
{ // Check if multiprecision element is zero
    3bcc:	b510      	push	{r4, lr}
    digit_t x;
    unsigned int i;

    x = a[0];
    3bce:	6802      	ldr	r2, [r0, #0]
    for (i = 1; i < nwords; i++) {
    3bd0:	2901      	cmp	r1, #1
    3bd2:	d906      	bls.n	3be2 <is_zero_ct+0x16>
    3bd4:	1d03      	adds	r3, r0, #4
    3bd6:	0089      	lsls	r1, r1, #2
    3bd8:	1840      	adds	r0, r0, r1
        x |= a[i];
    3bda:	cb10      	ldmia	r3!, {r4}
    3bdc:	4322      	orrs	r2, r4
    for (i = 1; i < nwords; i++) {
    3bde:	4283      	cmp	r3, r0
    3be0:	d1fb      	bne.n	3bda <is_zero_ct+0xe>
    }

    return (bool)(1 ^ ((x | (0-x)) >> (RADIX-1)));
    3be2:	4250      	negs	r0, r2
    3be4:	4310      	orrs	r0, r2
    3be6:	0fc0      	lsrs	r0, r0, #31
    3be8:	3801      	subs	r0, #1
    3bea:	4240      	negs	r0, r0
}
    3bec:	bd10      	pop	{r4, pc}
	...

00003bf0 <encode>:


void encode(point_t P, unsigned char* Pencoded)
{ // Encode point P
    3bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bf2:	0005      	movs	r5, r0
    3bf4:	000e      	movs	r6, r1
  // SECURITY NOTE: this function does not run in constant time.
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    3bf6:	69c7      	ldr	r7, [r0, #28]
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    3bf8:	68c4      	ldr	r4, [r0, #12]

    memmove(Pencoded, P->y, 32);
    3bfa:	0001      	movs	r1, r0
    3bfc:	3120      	adds	r1, #32
    3bfe:	2220      	movs	r2, #32
    3c00:	0030      	movs	r0, r6
    3c02:	4b0b      	ldr	r3, [pc, #44]	; (3c30 <encode+0x40>)
    3c04:	4798      	blx	r3
    if (is_zero_ct((digit_t*)P->x, NWORDS_FIELD) == true) {
    3c06:	2104      	movs	r1, #4
    3c08:	0028      	movs	r0, r5
    3c0a:	4b0a      	ldr	r3, [pc, #40]	; (3c34 <encode+0x44>)
    3c0c:	4798      	blx	r3
    3c0e:	2800      	cmp	r0, #0
    3c10:	d106      	bne.n	3c20 <encode+0x30>
    digit_t temp2 = (P->x[0][NWORDS_FIELD-1] & mask4000) << 1;
    3c12:	0064      	lsls	r4, r4, #1
    3c14:	0fe4      	lsrs	r4, r4, #31
    3c16:	07e4      	lsls	r4, r4, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    } else {
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp2;
    3c18:	69f3      	ldr	r3, [r6, #28]
    3c1a:	431c      	orrs	r4, r3
    3c1c:	61f4      	str	r4, [r6, #28]
    }
}
    3c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    digit_t temp1 = (P->x[1][NWORDS_FIELD-1] & mask4000) << 1;
    3c20:	007f      	lsls	r7, r7, #1
    3c22:	0fff      	lsrs	r7, r7, #31
    3c24:	07ff      	lsls	r7, r7, #31
        ((digit_t*)Pencoded)[2*NWORDS_FIELD-1] |= temp1;
    3c26:	69f3      	ldr	r3, [r6, #28]
    3c28:	431f      	orrs	r7, r3
    3c2a:	61f7      	str	r7, [r6, #28]
    3c2c:	e7f7      	b.n	3c1e <encode+0x2e>
    3c2e:	46c0      	nop			; (mov r8, r8)
    3c30:	00006f81 	.word	0x00006f81
    3c34:	00003bcd 	.word	0x00003bcd

00003c38 <decode>:


ECCRYPTO_STATUS decode(const unsigned char* Pencoded, point_t P)
{ // Decode point P
    3c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c3a:	46c6      	mov	lr, r8
    3c3c:	b500      	push	{lr}
    3c3e:	4c87      	ldr	r4, [pc, #540]	; (3e5c <decode+0x224>)
    3c40:	44a5      	add	sp, r4
    3c42:	0004      	movs	r4, r0
    3c44:	000f      	movs	r7, r1
  // SECURITY NOTE: this function does not run in constant time.
    velm_t r, t, t0, t1, t2, t3, t4;
    v2elm_t u, v, one = {0};
    3c46:	2228      	movs	r2, #40	; 0x28
    3c48:	2100      	movs	r1, #0
    3c4a:	a849      	add	r0, sp, #292	; 0x124
    3c4c:	4b84      	ldr	r3, [pc, #528]	; (3e60 <decode+0x228>)
    3c4e:	4798      	blx	r3
    digit_t sign_dec;
    vpoint_extproj_t R;
    vpoint_t VP;
    unsigned int i, sign;

    one[0] = 1;
    3c50:	2301      	movs	r3, #1
    3c52:	9349      	str	r3, [sp, #292]	; 0x124
    memmove((unsigned char*)P->y, Pencoded, 32);   // Decoding y-coordinate and sign
    3c54:	331f      	adds	r3, #31
    3c56:	469c      	mov	ip, r3
    3c58:	44bc      	add	ip, r7
    3c5a:	4663      	mov	r3, ip
    3c5c:	4665      	mov	r5, ip
    3c5e:	9301      	str	r3, [sp, #4]
    3c60:	2220      	movs	r2, #32
    3c62:	0021      	movs	r1, r4
    3c64:	0018      	movs	r0, r3
    3c66:	4b7f      	ldr	r3, [pc, #508]	; (3e64 <decode+0x22c>)
    3c68:	4798      	blx	r3
    sign = (unsigned int)(Pencoded[31] >> 7);
    3c6a:	7fe3      	ldrb	r3, [r4, #31]
    3c6c:	09db      	lsrs	r3, r3, #7
    3c6e:	4698      	mov	r8, r3
    P->y[1][NWORDS_FIELD-1] &= mask7fff;
    3c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3c72:	005b      	lsls	r3, r3, #1
    3c74:	085b      	lsrs	r3, r3, #1
    3c76:	63fb      	str	r3, [r7, #60]	; 0x3c
    from_std_to_ext(P->y, VP->y);
    3c78:	a90d      	add	r1, sp, #52	; 0x34
    3c7a:	0028      	movs	r0, r5
    3c7c:	4b7a      	ldr	r3, [pc, #488]	; (3e68 <decode+0x230>)
    3c7e:	4798      	blx	r3

    v2sqr1271(VP->y, u);
    3c80:	a95d      	add	r1, sp, #372	; 0x174
    3c82:	a80d      	add	r0, sp, #52	; 0x34
    3c84:	4b79      	ldr	r3, [pc, #484]	; (3e6c <decode+0x234>)
    3c86:	4798      	blx	r3
    v2mul1271(u, (digit_t*)&PARAMETER_d, v);
    3c88:	aa53      	add	r2, sp, #332	; 0x14c
    3c8a:	4979      	ldr	r1, [pc, #484]	; (3e70 <decode+0x238>)
    3c8c:	a85d      	add	r0, sp, #372	; 0x174
    3c8e:	4b79      	ldr	r3, [pc, #484]	; (3e74 <decode+0x23c>)
    3c90:	4798      	blx	r3
    v2sub1271(u, one, u);
    3c92:	aa5d      	add	r2, sp, #372	; 0x174
    3c94:	a949      	add	r1, sp, #292	; 0x124
    3c96:	0010      	movs	r0, r2
    3c98:	4b77      	ldr	r3, [pc, #476]	; (3e78 <decode+0x240>)
    3c9a:	4798      	blx	r3
    v2add1271(v, one, v);
    3c9c:	aa53      	add	r2, sp, #332	; 0x14c
    3c9e:	a949      	add	r1, sp, #292	; 0x124
    3ca0:	0010      	movs	r0, r2
    3ca2:	4b76      	ldr	r3, [pc, #472]	; (3e7c <decode+0x244>)
    3ca4:	4798      	blx	r3

    vsqr1271(&v[0], t0);                              // t0 = v0^2
    3ca6:	a97b      	add	r1, sp, #492	; 0x1ec
    3ca8:	a853      	add	r0, sp, #332	; 0x14c
    3caa:	4c75      	ldr	r4, [pc, #468]	; (3e80 <decode+0x248>)
    3cac:	47a0      	blx	r4
    vsqr1271(&v[VWORDS_FIELD], t1);                   // t1 = v1^2
    3cae:	a976      	add	r1, sp, #472	; 0x1d8
    3cb0:	a858      	add	r0, sp, #352	; 0x160
    3cb2:	47a0      	blx	r4
    vadd1271(t0, t1, t0);                             // t0 = t0+t1
    3cb4:	aa7b      	add	r2, sp, #492	; 0x1ec
    3cb6:	a976      	add	r1, sp, #472	; 0x1d8
    3cb8:	0010      	movs	r0, r2
    3cba:	4e72      	ldr	r6, [pc, #456]	; (3e84 <decode+0x24c>)
    3cbc:	47b0      	blx	r6
    vmul1271(&u[0], &v[0], t1);                       // t1 = u0*v0
    3cbe:	aa76      	add	r2, sp, #472	; 0x1d8
    3cc0:	a953      	add	r1, sp, #332	; 0x14c
    3cc2:	a85d      	add	r0, sp, #372	; 0x174
    3cc4:	4d70      	ldr	r5, [pc, #448]	; (3e88 <decode+0x250>)
    3cc6:	47a8      	blx	r5
    vmul1271(&u[VWORDS_FIELD], &v[VWORDS_FIELD], t2); // t2 = u1*v1 
    3cc8:	aa71      	add	r2, sp, #452	; 0x1c4
    3cca:	a958      	add	r1, sp, #352	; 0x160
    3ccc:	a862      	add	r0, sp, #392	; 0x188
    3cce:	47a8      	blx	r5
    vadd1271(t1, t2, t1);                             // t1 = t1+t2 
    3cd0:	aa76      	add	r2, sp, #472	; 0x1d8
    3cd2:	a971      	add	r1, sp, #452	; 0x1c4
    3cd4:	0010      	movs	r0, r2
    3cd6:	47b0      	blx	r6
    vmul1271(&u[VWORDS_FIELD], &v[0], t2);            // t2 = u1*v0
    3cd8:	aa71      	add	r2, sp, #452	; 0x1c4
    3cda:	a953      	add	r1, sp, #332	; 0x14c
    3cdc:	a862      	add	r0, sp, #392	; 0x188
    3cde:	47a8      	blx	r5
    vmul1271(&u[0], &v[VWORDS_FIELD], t3);            // t3 = u0*v1
    3ce0:	aa6c      	add	r2, sp, #432	; 0x1b0
    3ce2:	a958      	add	r1, sp, #352	; 0x160
    3ce4:	a85d      	add	r0, sp, #372	; 0x174
    3ce6:	47a8      	blx	r5
    vsub1271(t2, t3, t2);                             // t2 = t2-t3 
    3ce8:	aa71      	add	r2, sp, #452	; 0x1c4
    3cea:	a96c      	add	r1, sp, #432	; 0x1b0
    3cec:	0010      	movs	r0, r2
    3cee:	4b67      	ldr	r3, [pc, #412]	; (3e8c <decode+0x254>)
    3cf0:	4798      	blx	r3
    vsqr1271(t1, t3);                                 // t3 = t1^2    
    3cf2:	a96c      	add	r1, sp, #432	; 0x1b0
    3cf4:	a876      	add	r0, sp, #472	; 0x1d8
    3cf6:	47a0      	blx	r4
    vsqr1271(t2, t4);                                 // t4 = t2^2                   
    3cf8:	a967      	add	r1, sp, #412	; 0x19c
    3cfa:	a871      	add	r0, sp, #452	; 0x1c4
    3cfc:	47a0      	blx	r4
    vadd1271(t3, t4, t3);                             // t3 = t3+t4
    3cfe:	aa6c      	add	r2, sp, #432	; 0x1b0
    3d00:	a967      	add	r1, sp, #412	; 0x19c
    3d02:	0010      	movs	r0, r2
    3d04:	47b0      	blx	r6
    3d06:	247d      	movs	r4, #125	; 0x7d
    for (i = 0; i < 125; i++) {                       // t3 = t3^(2^125)
        vsqr1271(t3, t3);
    3d08:	4d5d      	ldr	r5, [pc, #372]	; (3e80 <decode+0x248>)
    3d0a:	a96c      	add	r1, sp, #432	; 0x1b0
    3d0c:	0008      	movs	r0, r1
    3d0e:	47a8      	blx	r5
    3d10:	3c01      	subs	r4, #1
    for (i = 0; i < 125; i++) {                       // t3 = t3^(2^125)
    3d12:	2c00      	cmp	r4, #0
    3d14:	d1f9      	bne.n	3d0a <decode+0xd2>
    }

    vadd1271(t1, t3, t);                           // t = t1+t3
    3d16:	aa80      	add	r2, sp, #512	; 0x200
    3d18:	a96c      	add	r1, sp, #432	; 0x1b0
    3d1a:	a876      	add	r0, sp, #472	; 0x1d8
    3d1c:	4b59      	ldr	r3, [pc, #356]	; (3e84 <decode+0x24c>)
    3d1e:	4798      	blx	r3
    vmod1271(t, t);
    3d20:	a980      	add	r1, sp, #512	; 0x200
    3d22:	0008      	movs	r0, r1
    3d24:	4b5a      	ldr	r3, [pc, #360]	; (3e90 <decode+0x258>)
    3d26:	4798      	blx	r3
    if (is_zero_ct(t, VWORDS_FIELD) == true) {
    3d28:	2105      	movs	r1, #5
    3d2a:	a880      	add	r0, sp, #512	; 0x200
    3d2c:	4b59      	ldr	r3, [pc, #356]	; (3e94 <decode+0x25c>)
    3d2e:	4798      	blx	r3
    3d30:	2800      	cmp	r0, #0
    3d32:	d000      	beq.n	3d36 <decode+0xfe>
    3d34:	e073      	b.n	3e1e <decode+0x1e6>
        vsub1271(t1, t3, t);                       // t = t1-t3
    }
    vadd1271(t, t, t);                             // t = 2*t 
    3d36:	aa80      	add	r2, sp, #512	; 0x200
    3d38:	0011      	movs	r1, r2
    3d3a:	0010      	movs	r0, r2
    3d3c:	4b51      	ldr	r3, [pc, #324]	; (3e84 <decode+0x24c>)
    3d3e:	4798      	blx	r3
    vsqr1271(t0, t3);                              // t3 = t0^2      
    3d40:	a96c      	add	r1, sp, #432	; 0x1b0
    3d42:	a87b      	add	r0, sp, #492	; 0x1ec
    3d44:	4d4e      	ldr	r5, [pc, #312]	; (3e80 <decode+0x248>)
    3d46:	47a8      	blx	r5
    vmul1271(t0, t3, t3);                          // t3 = t3*t0   
    3d48:	aa6c      	add	r2, sp, #432	; 0x1b0
    3d4a:	0011      	movs	r1, r2
    3d4c:	a87b      	add	r0, sp, #492	; 0x1ec
    3d4e:	4c4e      	ldr	r4, [pc, #312]	; (3e88 <decode+0x250>)
    3d50:	47a0      	blx	r4
    vmul1271(t, t3, t3);                           // t3 = t3*t
    3d52:	aa6c      	add	r2, sp, #432	; 0x1b0
    3d54:	0011      	movs	r1, r2
    3d56:	a880      	add	r0, sp, #512	; 0x200
    3d58:	47a0      	blx	r4
    vexp1251(t3, r);                               // r = t3^(2^125-1)  
    3d5a:	a985      	add	r1, sp, #532	; 0x214
    3d5c:	a86c      	add	r0, sp, #432	; 0x1b0
    3d5e:	4b4e      	ldr	r3, [pc, #312]	; (3e98 <decode+0x260>)
    3d60:	4798      	blx	r3
    vmul1271(t0, r, t3);                           // t3 = t0*r          
    3d62:	aa6c      	add	r2, sp, #432	; 0x1b0
    3d64:	a985      	add	r1, sp, #532	; 0x214
    3d66:	a87b      	add	r0, sp, #492	; 0x1ec
    3d68:	47a0      	blx	r4
    vmul1271(t, t3, &VP->x[0]);                    // x0 = t*t3 
    3d6a:	aa03      	add	r2, sp, #12
    3d6c:	a96c      	add	r1, sp, #432	; 0x1b0
    3d6e:	a880      	add	r0, sp, #512	; 0x200
    3d70:	47a0      	blx	r4
    vsqr1271(&VP->x[0], t1);
    3d72:	a976      	add	r1, sp, #472	; 0x1d8
    3d74:	a803      	add	r0, sp, #12
    3d76:	47a8      	blx	r5
    vmul1271(t0, t1, t1);                          // t1 = t0*x0^2 
    3d78:	aa76      	add	r2, sp, #472	; 0x1d8
    3d7a:	0011      	movs	r1, r2
    3d7c:	a87b      	add	r0, sp, #492	; 0x1ec
    3d7e:	47a0      	blx	r4
    vdiv1271(&VP->x[0]);                           // x0 = x0/2
    3d80:	a803      	add	r0, sp, #12
    3d82:	4b46      	ldr	r3, [pc, #280]	; (3e9c <decode+0x264>)
    3d84:	4798      	blx	r3
    vmul1271(t2, t3, &VP->x[VWORDS_FIELD]);        // x1 = t3*t2  
    3d86:	aa08      	add	r2, sp, #32
    3d88:	a96c      	add	r1, sp, #432	; 0x1b0
    3d8a:	a871      	add	r0, sp, #452	; 0x1c4
    3d8c:	47a0      	blx	r4

    vsub1271(t, t1, t);
    3d8e:	aa80      	add	r2, sp, #512	; 0x200
    3d90:	a976      	add	r1, sp, #472	; 0x1d8
    3d92:	0010      	movs	r0, r2
    3d94:	4b3d      	ldr	r3, [pc, #244]	; (3e8c <decode+0x254>)
    3d96:	4798      	blx	r3
    vmod1271(t, t);
    3d98:	a980      	add	r1, sp, #512	; 0x200
    3d9a:	0008      	movs	r0, r1
    3d9c:	4b3c      	ldr	r3, [pc, #240]	; (3e90 <decode+0x258>)
    3d9e:	4798      	blx	r3
    if (is_zero_ct(t, VWORDS_FIELD) == false) {        // If t != t1 then swap x0 and x1       
    3da0:	2105      	movs	r1, #5
    3da2:	a880      	add	r0, sp, #512	; 0x200
    3da4:	4b3b      	ldr	r3, [pc, #236]	; (3e94 <decode+0x25c>)
    3da6:	4798      	blx	r3
    3da8:	2800      	cmp	r0, #0
    3daa:	d03e      	beq.n	3e2a <decode+0x1f2>
        memmove((unsigned char*)t0, (unsigned char*)&VP->x[0], 20);
        memmove((unsigned char*)&VP->x[0], (unsigned char*)&VP->x[VWORDS_FIELD], 20);
        memmove((unsigned char*)&VP->x[VWORDS_FIELD], (unsigned char*)t0, 20);
    }

    v2mod1271(VP->x, VP->x);
    3dac:	a903      	add	r1, sp, #12
    3dae:	0008      	movs	r0, r1
    3db0:	4b3b      	ldr	r3, [pc, #236]	; (3ea0 <decode+0x268>)
    3db2:	4798      	blx	r3
    if (is_zero_ct(VP->x, VWORDS_FIELD) == true) {
    3db4:	2105      	movs	r1, #5
    3db6:	a803      	add	r0, sp, #12
    3db8:	4b36      	ldr	r3, [pc, #216]	; (3e94 <decode+0x25c>)
    3dba:	4798      	blx	r3
    3dbc:	2800      	cmp	r0, #0
    3dbe:	d049      	beq.n	3e54 <decode+0x21c>
        sign_dec = VP->x[2*VWORDS_FIELD-1] >> 22;
    3dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3dc2:	0d9b      	lsrs	r3, r3, #22
    } else {
        sign_dec = VP->x[VWORDS_FIELD-1] >> 22;
    }

    if (sign != (unsigned int)sign_dec) {           // If sign of x-coordinate decoded != input sign bit, then negate x-coordinate
    3dc4:	4543      	cmp	r3, r8
    3dc6:	d002      	beq.n	3dce <decode+0x196>
        v2neg1271(VP->x);         
    3dc8:	a803      	add	r0, sp, #12
    3dca:	4b36      	ldr	r3, [pc, #216]	; (3ea4 <decode+0x26c>)
    3dcc:	4798      	blx	r3
    }

    v2mod1271(VP->x, R->x);
    3dce:	a917      	add	r1, sp, #92	; 0x5c
    3dd0:	a803      	add	r0, sp, #12
    3dd2:	4c33      	ldr	r4, [pc, #204]	; (3ea0 <decode+0x268>)
    3dd4:	47a0      	blx	r4
    v2mod1271(VP->y, R->y);
    3dd6:	a921      	add	r1, sp, #132	; 0x84
    3dd8:	a80d      	add	r0, sp, #52	; 0x34
    3dda:	47a0      	blx	r4
    if (ecc_point_validate(R) == false) {
    3ddc:	a817      	add	r0, sp, #92	; 0x5c
    3dde:	4b32      	ldr	r3, [pc, #200]	; (3ea8 <decode+0x270>)
    3de0:	4798      	blx	r3
    3de2:	2800      	cmp	r0, #0
    3de4:	d108      	bne.n	3df8 <decode+0x1c0>
        vneg1271(&R->x[VWORDS_FIELD]);
    3de6:	a81c      	add	r0, sp, #112	; 0x70
    3de8:	4b30      	ldr	r3, [pc, #192]	; (3eac <decode+0x274>)
    3dea:	4798      	blx	r3
        if (ecc_point_validate(R) == false) {       // Final point validation
    3dec:	a817      	add	r0, sp, #92	; 0x5c
    3dee:	4b2e      	ldr	r3, [pc, #184]	; (3ea8 <decode+0x270>)
    3df0:	4798      	blx	r3
            return ECCRYPTO_ERROR;
    3df2:	2300      	movs	r3, #0
        if (ecc_point_validate(R) == false) {       // Final point validation
    3df4:	2800      	cmp	r0, #0
    3df6:	d00b      	beq.n	3e10 <decode+0x1d8>
        }
    }

    v2mod1271(R->x, R->x);
    3df8:	a917      	add	r1, sp, #92	; 0x5c
    3dfa:	0008      	movs	r0, r1
    3dfc:	4b28      	ldr	r3, [pc, #160]	; (3ea0 <decode+0x268>)
    3dfe:	4798      	blx	r3
    from_ext_to_std(R->x, P->x);
    3e00:	0039      	movs	r1, r7
    3e02:	a817      	add	r0, sp, #92	; 0x5c
    3e04:	4c2a      	ldr	r4, [pc, #168]	; (3eb0 <decode+0x278>)
    3e06:	47a0      	blx	r4
    from_ext_to_std(R->y, P->y);
    3e08:	9901      	ldr	r1, [sp, #4]
    3e0a:	a821      	add	r0, sp, #132	; 0x84
    3e0c:	47a0      	blx	r4

    return ECCRYPTO_SUCCESS;
    3e0e:	2301      	movs	r3, #1
}
    3e10:	0018      	movs	r0, r3
    3e12:	238a      	movs	r3, #138	; 0x8a
    3e14:	009b      	lsls	r3, r3, #2
    3e16:	449d      	add	sp, r3
    3e18:	bc04      	pop	{r2}
    3e1a:	4690      	mov	r8, r2
    3e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vsub1271(t1, t3, t);                       // t = t1-t3
    3e1e:	aa80      	add	r2, sp, #512	; 0x200
    3e20:	a96c      	add	r1, sp, #432	; 0x1b0
    3e22:	a876      	add	r0, sp, #472	; 0x1d8
    3e24:	4b19      	ldr	r3, [pc, #100]	; (3e8c <decode+0x254>)
    3e26:	4798      	blx	r3
    3e28:	e785      	b.n	3d36 <decode+0xfe>
        memmove((unsigned char*)t0, (unsigned char*)&VP->x[0], 20);
    3e2a:	ab7b      	add	r3, sp, #492	; 0x1ec
    3e2c:	aa03      	add	r2, sp, #12
    3e2e:	0019      	movs	r1, r3
    3e30:	ca31      	ldmia	r2!, {r0, r4, r5}
    3e32:	c131      	stmia	r1!, {r0, r4, r5}
    3e34:	ca11      	ldmia	r2!, {r0, r4}
    3e36:	c111      	stmia	r1!, {r0, r4}
        memmove((unsigned char*)&VP->x[0], (unsigned char*)&VP->x[VWORDS_FIELD], 20);
    3e38:	ac03      	add	r4, sp, #12
    3e3a:	aa08      	add	r2, sp, #32
    3e3c:	0021      	movs	r1, r4
    3e3e:	0010      	movs	r0, r2
    3e40:	c870      	ldmia	r0!, {r4, r5, r6}
    3e42:	c170      	stmia	r1!, {r4, r5, r6}
    3e44:	c830      	ldmia	r0!, {r4, r5}
    3e46:	c130      	stmia	r1!, {r4, r5}
        memmove((unsigned char*)&VP->x[VWORDS_FIELD], (unsigned char*)t0, 20);
    3e48:	cb13      	ldmia	r3!, {r0, r1, r4}
    3e4a:	c213      	stmia	r2!, {r0, r1, r4}
    3e4c:	0011      	movs	r1, r2
    3e4e:	cb05      	ldmia	r3!, {r0, r2}
    3e50:	c105      	stmia	r1!, {r0, r2}
    3e52:	e7ab      	b.n	3dac <decode+0x174>
        sign_dec = VP->x[VWORDS_FIELD-1] >> 22;
    3e54:	9b07      	ldr	r3, [sp, #28]
    3e56:	0d9b      	lsrs	r3, r3, #22
    3e58:	e7b4      	b.n	3dc4 <decode+0x18c>
    3e5a:	46c0      	nop			; (mov r8, r8)
    3e5c:	fffffdd8 	.word	0xfffffdd8
    3e60:	00006fa5 	.word	0x00006fa5
    3e64:	00006f81 	.word	0x00006f81
    3e68:	00004781 	.word	0x00004781
    3e6c:	00005239 	.word	0x00005239
    3e70:	00008620 	.word	0x00008620
    3e74:	000051c5 	.word	0x000051c5
    3e78:	00005005 	.word	0x00005005
    3e7c:	00004fe5 	.word	0x00004fe5
    3e80:	00004231 	.word	0x00004231
    3e84:	00003f07 	.word	0x00003f07
    3e88:	00003f9d 	.word	0x00003f9d
    3e8c:	00003f43 	.word	0x00003f43
    3e90:	00004475 	.word	0x00004475
    3e94:	00003bcd 	.word	0x00003bcd
    3e98:	00004505 	.word	0x00004505
    3e9c:	00004ad5 	.word	0x00004ad5
    3ea0:	000051a9 	.word	0x000051a9
    3ea4:	0000508d 	.word	0x0000508d
    3ea8:	000057f1 	.word	0x000057f1
    3eac:	00003f71 	.word	0x00003f71
    3eb0:	00004809 	.word	0x00004809

00003eb4 <digit_x_digit>:
#define mask_26        (((uint32_t)1 << 26) - 1)
#define mask_23        (((uint32_t)1 << 23) - 1)


void digit_x_digit(digit_t a, digit_t b, digit_t* c)
{ // Digit multiplication, digit * digit -> 2-digit result    
    3eb4:	b570      	push	{r4, r5, r6, lr}
    register digit_t al, ah, bl, bh, temp;
    digit_t albl, albh, ahbl, ahbh, res1, res2, res3, carry;
    digit_t mask_low = (digit_t)(-1) >> (sizeof(digit_t)*4), mask_high = (digit_t)(-1) << (sizeof(digit_t)*4);

    al = a & mask_low;                        // Low part
    3eb6:	0403      	lsls	r3, r0, #16
    3eb8:	0c1b      	lsrs	r3, r3, #16
    ah = a >> (sizeof(digit_t) * 4);          // High part
    3eba:	0c00      	lsrs	r0, r0, #16
    bl = b & mask_low;
    3ebc:	040c      	lsls	r4, r1, #16
    3ebe:	0c24      	lsrs	r4, r4, #16
    bh = b >> (sizeof(digit_t) * 4);
    3ec0:	0c09      	lsrs	r1, r1, #16

    albl = al*bl;
    3ec2:	0025      	movs	r5, r4
    3ec4:	435d      	muls	r5, r3
    albh = al*bh;
    3ec6:	434b      	muls	r3, r1
    ahbl = ah*bl;
    3ec8:	4344      	muls	r4, r0
    ahbh = ah*bh;
    3eca:	4341      	muls	r1, r0
    c[0] = albl & mask_low;                   // C00

    res1 = albl >> (sizeof(digit_t) * 4);
    3ecc:	0c28      	lsrs	r0, r5, #16
    res2 = ahbl & mask_low;
    3ece:	0426      	lsls	r6, r4, #16
    3ed0:	0c36      	lsrs	r6, r6, #16
    res3 = albh & mask_low;  
    temp = res1 + res2 + res3;
    3ed2:	1980      	adds	r0, r0, r6
    res3 = albh & mask_low;  
    3ed4:	041e      	lsls	r6, r3, #16
    3ed6:	0c36      	lsrs	r6, r6, #16
    temp = res1 + res2 + res3;
    3ed8:	1980      	adds	r0, r0, r6
    carry = temp >> (sizeof(digit_t) * 4);
    3eda:	0c06      	lsrs	r6, r0, #16
    c[0] = albl & mask_low;                   // C00
    3edc:	042d      	lsls	r5, r5, #16
    3ede:	0c2d      	lsrs	r5, r5, #16
    c[0] ^= temp << (sizeof(digit_t) * 4);    // C01   
    3ee0:	0400      	lsls	r0, r0, #16
    3ee2:	4045      	eors	r5, r0
    3ee4:	6015      	str	r5, [r2, #0]

    res1 = ahbl >> (sizeof(digit_t) * 4);
    3ee6:	0c24      	lsrs	r4, r4, #16
    res2 = albh >> (sizeof(digit_t) * 4);
    3ee8:	0c1b      	lsrs	r3, r3, #16
    res3 = ahbh & mask_low;
    temp = res1 + res2 + res3 + carry;
    3eea:	18e3      	adds	r3, r4, r3
    res3 = ahbh & mask_low;
    3eec:	040c      	lsls	r4, r1, #16
    3eee:	0c24      	lsrs	r4, r4, #16
    temp = res1 + res2 + res3 + carry;
    3ef0:	191b      	adds	r3, r3, r4
    3ef2:	199b      	adds	r3, r3, r6
    c[1] = temp & mask_low;                   // C10 
    carry = temp & mask_high; 
    3ef4:	0c18      	lsrs	r0, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    3ef6:	0c09      	lsrs	r1, r1, #16
    3ef8:	1809      	adds	r1, r1, r0
    3efa:	0409      	lsls	r1, r1, #16
    c[1] = temp & mask_low;                   // C10 
    3efc:	041b      	lsls	r3, r3, #16
    3efe:	0c1b      	lsrs	r3, r3, #16
    c[1] ^= (ahbh & mask_high) + carry;       // C11
    3f00:	404b      	eors	r3, r1
    3f02:	6053      	str	r3, [r2, #4]
}
    3f04:	bd70      	pop	{r4, r5, r6, pc}

00003f06 <vadd1271>:
        c[i] = a[i];
}


void vadd1271(velm_t a, velm_t b, velm_t c) 
{ // Field addition over GF(2^127-1)
    3f06:	b510      	push	{r4, lr}
  // Redundant representation: 23/26/26/26/26-bit
    
    c[0] = a[0] + b[0];
    3f08:	6803      	ldr	r3, [r0, #0]
    3f0a:	001c      	movs	r4, r3
    3f0c:	680b      	ldr	r3, [r1, #0]
    3f0e:	469c      	mov	ip, r3
    3f10:	4464      	add	r4, ip
    3f12:	6014      	str	r4, [r2, #0]
    c[1] = a[1] + b[1];
    3f14:	6843      	ldr	r3, [r0, #4]
    3f16:	001c      	movs	r4, r3
    3f18:	684b      	ldr	r3, [r1, #4]
    3f1a:	469c      	mov	ip, r3
    3f1c:	4464      	add	r4, ip
    3f1e:	6054      	str	r4, [r2, #4]
    c[2] = a[2] + b[2];
    3f20:	6883      	ldr	r3, [r0, #8]
    3f22:	001c      	movs	r4, r3
    3f24:	688b      	ldr	r3, [r1, #8]
    3f26:	469c      	mov	ip, r3
    3f28:	4464      	add	r4, ip
    3f2a:	6094      	str	r4, [r2, #8]
    c[3] = a[3] + b[3];
    3f2c:	68c3      	ldr	r3, [r0, #12]
    3f2e:	001c      	movs	r4, r3
    3f30:	68cb      	ldr	r3, [r1, #12]
    3f32:	469c      	mov	ip, r3
    3f34:	4464      	add	r4, ip
    3f36:	60d4      	str	r4, [r2, #12]
    c[4] = a[4] + b[4];
    3f38:	6903      	ldr	r3, [r0, #16]
    3f3a:	6909      	ldr	r1, [r1, #16]
    3f3c:	185b      	adds	r3, r3, r1
    3f3e:	6113      	str	r3, [r2, #16]
}
    3f40:	bd10      	pop	{r4, pc}

00003f42 <vsub1271>:


void vsub1271(velm_t a, velm_t b, velm_t c) 
{ // Field subtraction over GF(2^127-1)
    3f42:	b510      	push	{r4, lr}
  // Redundant representation: 23/26/26/26/26-bit
    
    c[0] = a[0] - b[0];
    3f44:	6803      	ldr	r3, [r0, #0]
    3f46:	680c      	ldr	r4, [r1, #0]
    3f48:	1b1b      	subs	r3, r3, r4
    3f4a:	6013      	str	r3, [r2, #0]
    c[1] = a[1] - b[1];
    3f4c:	6843      	ldr	r3, [r0, #4]
    3f4e:	684c      	ldr	r4, [r1, #4]
    3f50:	1b1b      	subs	r3, r3, r4
    3f52:	6053      	str	r3, [r2, #4]
    c[2] = a[2] - b[2];
    3f54:	6883      	ldr	r3, [r0, #8]
    3f56:	688c      	ldr	r4, [r1, #8]
    3f58:	1b1b      	subs	r3, r3, r4
    3f5a:	6093      	str	r3, [r2, #8]
    c[3] = a[3] - b[3];
    3f5c:	68c3      	ldr	r3, [r0, #12]
    3f5e:	68cc      	ldr	r4, [r1, #12]
    3f60:	1b1b      	subs	r3, r3, r4
    3f62:	60d3      	str	r3, [r2, #12]
    c[4] = a[4] - b[4];
    3f64:	6903      	ldr	r3, [r0, #16]
    3f66:	6909      	ldr	r1, [r1, #16]
    3f68:	1a5b      	subs	r3, r3, r1
    3f6a:	6113      	str	r3, [r2, #16]
}
    3f6c:	bd10      	pop	{r4, pc}
	...

00003f70 <vneg1271>:

void vneg1271(velm_t a) 
{ // Field negation over GF(2^127-1)
  // Redundant representation: 23/26/26/26/26-bit
    
    a[0] = mask_26 - a[0];
    3f70:	4b08      	ldr	r3, [pc, #32]	; (3f94 <vneg1271+0x24>)
    3f72:	6802      	ldr	r2, [r0, #0]
    3f74:	1a9a      	subs	r2, r3, r2
    3f76:	6002      	str	r2, [r0, #0]
    a[1] = mask_26 - a[1];
    3f78:	6842      	ldr	r2, [r0, #4]
    3f7a:	1a9a      	subs	r2, r3, r2
    3f7c:	6042      	str	r2, [r0, #4]
    a[2] = mask_26 - a[2];
    3f7e:	6882      	ldr	r2, [r0, #8]
    3f80:	1a9a      	subs	r2, r3, r2
    3f82:	6082      	str	r2, [r0, #8]
    a[3] = mask_26 - a[3];
    3f84:	68c2      	ldr	r2, [r0, #12]
    3f86:	1a9b      	subs	r3, r3, r2
    3f88:	60c3      	str	r3, [r0, #12]
    a[4] = mask_23 - a[4];
    3f8a:	4b03      	ldr	r3, [pc, #12]	; (3f98 <vneg1271+0x28>)
    3f8c:	6902      	ldr	r2, [r0, #16]
    3f8e:	1a9b      	subs	r3, r3, r2
    3f90:	6103      	str	r3, [r0, #16]
}
    3f92:	4770      	bx	lr
    3f94:	03ffffff 	.word	0x03ffffff
    3f98:	007fffff 	.word	0x007fffff

00003f9c <vmul1271>:


void vmul1271(velm_t a, velm_t b, velm_t c)
{ // Field multiplication, c = a*b mod p
    3f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f9e:	46de      	mov	lr, fp
    3fa0:	4657      	mov	r7, sl
    3fa2:	464e      	mov	r6, r9
    3fa4:	4645      	mov	r5, r8
    3fa6:	b5e0      	push	{r5, r6, r7, lr}
    3fa8:	b09d      	sub	sp, #116	; 0x74
    3faa:	4691      	mov	r9, r2
   int64_t t1, t2, t3, t4;

   a0 = a[0]; a1 = a[1]; a2 = a[2]; a3 = a[3]; a4 = a[4]; 
   b0 = b[0]; b1 = b[1]; b2 = b[2]; b3 = b[3]; b4 = b[4];

   t1 = (int64_t)a1 << 3;
    3fac:	6844      	ldr	r4, [r0, #4]
    3fae:	17e3      	asrs	r3, r4, #31
    3fb0:	9301      	str	r3, [sp, #4]
   t2 = (int64_t)a2 << 3;
    3fb2:	6882      	ldr	r2, [r0, #8]
    3fb4:	4690      	mov	r8, r2
    3fb6:	17d2      	asrs	r2, r2, #31
    3fb8:	9213      	str	r2, [sp, #76]	; 0x4c
    3fba:	4645      	mov	r5, r8
    3fbc:	176d      	asrs	r5, r5, #29
    3fbe:	951a      	str	r5, [sp, #104]	; 0x68
    3fc0:	4646      	mov	r6, r8
    3fc2:	00f6      	lsls	r6, r6, #3
    3fc4:	9618      	str	r6, [sp, #96]	; 0x60
   t3 = (int64_t)a3 << 3;
    3fc6:	68c7      	ldr	r7, [r0, #12]
    3fc8:	46ba      	mov	sl, r7
    3fca:	17ff      	asrs	r7, r7, #31
    3fcc:	9717      	str	r7, [sp, #92]	; 0x5c
    3fce:	4653      	mov	r3, sl
    3fd0:	175d      	asrs	r5, r3, #29
    3fd2:	9516      	str	r5, [sp, #88]	; 0x58
    3fd4:	00de      	lsls	r6, r3, #3
    3fd6:	9614      	str	r6, [sp, #80]	; 0x50
   t4 = (int64_t)a4 << 3;
    3fd8:	6903      	ldr	r3, [r0, #16]
    3fda:	469b      	mov	fp, r3
    3fdc:	17db      	asrs	r3, r3, #31
    3fde:	931b      	str	r3, [sp, #108]	; 0x6c
    3fe0:	465a      	mov	r2, fp
    3fe2:	1752      	asrs	r2, r2, #29
    3fe4:	9212      	str	r2, [sp, #72]	; 0x48
    3fe6:	465f      	mov	r7, fp
    3fe8:	00fd      	lsls	r5, r7, #3
    3fea:	950e      	str	r5, [sp, #56]	; 0x38

   c0 = (int64_t)a0*b0 + (int64_t)t1*b4 + (int64_t)t4*b1 + (int64_t)t2*b3 + (int64_t)t3*b2;
    3fec:	6803      	ldr	r3, [r0, #0]
    3fee:	9302      	str	r3, [sp, #8]
    3ff0:	17da      	asrs	r2, r3, #31
    3ff2:	9203      	str	r2, [sp, #12]
    3ff4:	680a      	ldr	r2, [r1, #0]
    3ff6:	9204      	str	r2, [sp, #16]
    3ff8:	17d0      	asrs	r0, r2, #31
    3ffa:	9005      	str	r0, [sp, #20]
    3ffc:	6908      	ldr	r0, [r1, #16]
    3ffe:	0006      	movs	r6, r0
    4000:	17c5      	asrs	r5, r0, #31
    4002:	9506      	str	r5, [sp, #24]
    4004:	6848      	ldr	r0, [r1, #4]
    4006:	9007      	str	r0, [sp, #28]
    4008:	17c7      	asrs	r7, r0, #31
    400a:	9708      	str	r7, [sp, #32]
    400c:	68cd      	ldr	r5, [r1, #12]
    400e:	9509      	str	r5, [sp, #36]	; 0x24
    4010:	17ef      	asrs	r7, r5, #31
    4012:	970a      	str	r7, [sp, #40]	; 0x28
    4014:	688f      	ldr	r7, [r1, #8]
    4016:	970b      	str	r7, [sp, #44]	; 0x2c
    4018:	17f9      	asrs	r1, r7, #31
    401a:	910c      	str	r1, [sp, #48]	; 0x30
   t1 = (int64_t)a1 << 3;
    401c:	0f63      	lsrs	r3, r4, #29
    401e:	9901      	ldr	r1, [sp, #4]
    4020:	00c9      	lsls	r1, r1, #3
    4022:	4319      	orrs	r1, r3
    4024:	00e0      	lsls	r0, r4, #3
   c0 = (int64_t)a0*b0 + (int64_t)t1*b4 + (int64_t)t4*b1 + (int64_t)t2*b3 + (int64_t)t3*b2;
    4026:	4d81      	ldr	r5, [pc, #516]	; (422c <STACK_SIZE+0x22c>)
    4028:	960d      	str	r6, [sp, #52]	; 0x34
    402a:	0032      	movs	r2, r6
    402c:	9b06      	ldr	r3, [sp, #24]
    402e:	47a8      	blx	r5
    4030:	0006      	movs	r6, r0
    4032:	000f      	movs	r7, r1
    4034:	9a04      	ldr	r2, [sp, #16]
    4036:	9b05      	ldr	r3, [sp, #20]
    4038:	9802      	ldr	r0, [sp, #8]
    403a:	9903      	ldr	r1, [sp, #12]
    403c:	47a8      	blx	r5
    403e:	1836      	adds	r6, r6, r0
    4040:	414f      	adcs	r7, r1
    4042:	9a07      	ldr	r2, [sp, #28]
    4044:	9b08      	ldr	r3, [sp, #32]
    4046:	980e      	ldr	r0, [sp, #56]	; 0x38
    4048:	9912      	ldr	r1, [sp, #72]	; 0x48
    404a:	47a8      	blx	r5
    404c:	1836      	adds	r6, r6, r0
    404e:	414f      	adcs	r7, r1
    4050:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4054:	9818      	ldr	r0, [sp, #96]	; 0x60
    4056:	991a      	ldr	r1, [sp, #104]	; 0x68
    4058:	47a8      	blx	r5
    405a:	1836      	adds	r6, r6, r0
    405c:	414f      	adcs	r7, r1
    405e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4062:	9814      	ldr	r0, [sp, #80]	; 0x50
    4064:	9916      	ldr	r1, [sp, #88]	; 0x58
    4066:	47a8      	blx	r5
    4068:	1836      	adds	r6, r6, r0
    406a:	414f      	adcs	r7, r1
    406c:	9610      	str	r6, [sp, #64]	; 0x40
    406e:	9711      	str	r7, [sp, #68]	; 0x44
   c1 = (int64_t)a0*b1 + (int64_t)a1*b0 + (int64_t)t2*b4 + (int64_t)t4*b2 + (int64_t)t3*b3;
    4070:	9a07      	ldr	r2, [sp, #28]
    4072:	9b08      	ldr	r3, [sp, #32]
    4074:	9802      	ldr	r0, [sp, #8]
    4076:	9903      	ldr	r1, [sp, #12]
    4078:	47a8      	blx	r5
    407a:	0006      	movs	r6, r0
    407c:	000f      	movs	r7, r1
    407e:	9a04      	ldr	r2, [sp, #16]
    4080:	9b05      	ldr	r3, [sp, #20]
    4082:	0020      	movs	r0, r4
    4084:	9901      	ldr	r1, [sp, #4]
    4086:	47a8      	blx	r5
    4088:	1836      	adds	r6, r6, r0
    408a:	414f      	adcs	r7, r1
    408c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    408e:	9b06      	ldr	r3, [sp, #24]
    4090:	9818      	ldr	r0, [sp, #96]	; 0x60
    4092:	991a      	ldr	r1, [sp, #104]	; 0x68
    4094:	47a8      	blx	r5
    4096:	1836      	adds	r6, r6, r0
    4098:	414f      	adcs	r7, r1
    409a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    409c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    409e:	980e      	ldr	r0, [sp, #56]	; 0x38
    40a0:	9912      	ldr	r1, [sp, #72]	; 0x48
    40a2:	47a8      	blx	r5
    40a4:	1836      	adds	r6, r6, r0
    40a6:	414f      	adcs	r7, r1
    40a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    40aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    40ac:	9814      	ldr	r0, [sp, #80]	; 0x50
    40ae:	9916      	ldr	r1, [sp, #88]	; 0x58
    40b0:	47a8      	blx	r5
    40b2:	1836      	adds	r6, r6, r0
    40b4:	414f      	adcs	r7, r1
    40b6:	9618      	str	r6, [sp, #96]	; 0x60
    40b8:	9719      	str	r7, [sp, #100]	; 0x64
   c2 = (int64_t)a0*b2 + (int64_t)a2*b0 + (int64_t)a1*b1 + (int64_t)t3*b4 + (int64_t)t4*b3;
    40ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    40bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    40be:	9802      	ldr	r0, [sp, #8]
    40c0:	9903      	ldr	r1, [sp, #12]
    40c2:	47a8      	blx	r5
    40c4:	0006      	movs	r6, r0
    40c6:	000f      	movs	r7, r1
    40c8:	9a04      	ldr	r2, [sp, #16]
    40ca:	9b05      	ldr	r3, [sp, #20]
    40cc:	4640      	mov	r0, r8
    40ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
    40d0:	47a8      	blx	r5
    40d2:	1836      	adds	r6, r6, r0
    40d4:	414f      	adcs	r7, r1
    40d6:	9a07      	ldr	r2, [sp, #28]
    40d8:	9b08      	ldr	r3, [sp, #32]
    40da:	0020      	movs	r0, r4
    40dc:	9901      	ldr	r1, [sp, #4]
    40de:	47a8      	blx	r5
    40e0:	1836      	adds	r6, r6, r0
    40e2:	414f      	adcs	r7, r1
    40e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    40e6:	9b06      	ldr	r3, [sp, #24]
    40e8:	9814      	ldr	r0, [sp, #80]	; 0x50
    40ea:	9916      	ldr	r1, [sp, #88]	; 0x58
    40ec:	47a8      	blx	r5
    40ee:	1836      	adds	r6, r6, r0
    40f0:	414f      	adcs	r7, r1
    40f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    40f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    40f6:	980e      	ldr	r0, [sp, #56]	; 0x38
    40f8:	9912      	ldr	r1, [sp, #72]	; 0x48
    40fa:	47a8      	blx	r5
    40fc:	0032      	movs	r2, r6
    40fe:	003b      	movs	r3, r7
    4100:	1812      	adds	r2, r2, r0
    4102:	414b      	adcs	r3, r1
    4104:	9214      	str	r2, [sp, #80]	; 0x50
    4106:	9315      	str	r3, [sp, #84]	; 0x54
   c3 = (int64_t)a0*b3 + (int64_t)a3*b0 + (int64_t)a1*b2 + (int64_t)a2*b1 + (int64_t)t4*b4;
    4108:	9a09      	ldr	r2, [sp, #36]	; 0x24
    410a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    410c:	9802      	ldr	r0, [sp, #8]
    410e:	9903      	ldr	r1, [sp, #12]
    4110:	47a8      	blx	r5
    4112:	0006      	movs	r6, r0
    4114:	000f      	movs	r7, r1
    4116:	9a04      	ldr	r2, [sp, #16]
    4118:	9b05      	ldr	r3, [sp, #20]
    411a:	4650      	mov	r0, sl
    411c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    411e:	47a8      	blx	r5
    4120:	1836      	adds	r6, r6, r0
    4122:	414f      	adcs	r7, r1
    4124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4128:	0020      	movs	r0, r4
    412a:	9901      	ldr	r1, [sp, #4]
    412c:	47a8      	blx	r5
    412e:	1836      	adds	r6, r6, r0
    4130:	414f      	adcs	r7, r1
    4132:	9a07      	ldr	r2, [sp, #28]
    4134:	9b08      	ldr	r3, [sp, #32]
    4136:	4640      	mov	r0, r8
    4138:	9913      	ldr	r1, [sp, #76]	; 0x4c
    413a:	47a8      	blx	r5
    413c:	1836      	adds	r6, r6, r0
    413e:	414f      	adcs	r7, r1
    4140:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4142:	9b06      	ldr	r3, [sp, #24]
    4144:	980e      	ldr	r0, [sp, #56]	; 0x38
    4146:	9912      	ldr	r1, [sp, #72]	; 0x48
    4148:	47a8      	blx	r5
    414a:	1836      	adds	r6, r6, r0
    414c:	414f      	adcs	r7, r1
    414e:	960e      	str	r6, [sp, #56]	; 0x38
    4150:	970f      	str	r7, [sp, #60]	; 0x3c
   c4 = (int64_t)a0*b4 + (int64_t)a4*b0 + (int64_t)a1*b3 + (int64_t)a3*b1 + (int64_t)a2*b2;
    4152:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4154:	9b06      	ldr	r3, [sp, #24]
    4156:	9802      	ldr	r0, [sp, #8]
    4158:	9903      	ldr	r1, [sp, #12]
    415a:	47a8      	blx	r5
    415c:	0006      	movs	r6, r0
    415e:	000f      	movs	r7, r1
    4160:	9a04      	ldr	r2, [sp, #16]
    4162:	9b05      	ldr	r3, [sp, #20]
    4164:	4658      	mov	r0, fp
    4166:	991b      	ldr	r1, [sp, #108]	; 0x6c
    4168:	47a8      	blx	r5
    416a:	1836      	adds	r6, r6, r0
    416c:	414f      	adcs	r7, r1
    416e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4172:	0020      	movs	r0, r4
    4174:	9901      	ldr	r1, [sp, #4]
    4176:	47a8      	blx	r5
    4178:	1836      	adds	r6, r6, r0
    417a:	414f      	adcs	r7, r1
    417c:	9a07      	ldr	r2, [sp, #28]
    417e:	9b08      	ldr	r3, [sp, #32]
    4180:	4650      	mov	r0, sl
    4182:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4184:	47a8      	blx	r5
    4186:	1836      	adds	r6, r6, r0
    4188:	414f      	adcs	r7, r1
    418a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    418c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    418e:	4640      	mov	r0, r8
    4190:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4192:	47a8      	blx	r5
    4194:	1836      	adds	r6, r6, r0
    4196:	414f      	adcs	r7, r1
#endif
   
                    r0   = c0 & mask_26; 
    c1 += c0 >> 26; r1   = c1 & mask_26;
    4198:	9c10      	ldr	r4, [sp, #64]	; 0x40
    419a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    419c:	01ab      	lsls	r3, r5, #6
    419e:	0ea0      	lsrs	r0, r4, #26
    41a0:	4318      	orrs	r0, r3
    41a2:	16a9      	asrs	r1, r5, #26
    41a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    41a6:	9c19      	ldr	r4, [sp, #100]	; 0x64
    41a8:	18c0      	adds	r0, r0, r3
    41aa:	4161      	adcs	r1, r4
    c2 += c1 >> 26; c[2] = c2 & mask_26; 
    41ac:	018b      	lsls	r3, r1, #6
    41ae:	0e84      	lsrs	r4, r0, #26
    41b0:	431c      	orrs	r4, r3
    41b2:	168d      	asrs	r5, r1, #26
    41b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    41b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    41b8:	18a4      	adds	r4, r4, r2
    41ba:	415d      	adcs	r5, r3
    41bc:	01a3      	lsls	r3, r4, #6
    41be:	099b      	lsrs	r3, r3, #6
    41c0:	464a      	mov	r2, r9
    41c2:	6093      	str	r3, [r2, #8]
    c3 += c2 >> 26; c[3] = c3 & mask_26; 
    41c4:	01a9      	lsls	r1, r5, #6
    41c6:	0ea2      	lsrs	r2, r4, #26
    41c8:	430a      	orrs	r2, r1
    41ca:	16ab      	asrs	r3, r5, #26
    41cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    41ce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    41d0:	1912      	adds	r2, r2, r4
    41d2:	416b      	adcs	r3, r5
    41d4:	0191      	lsls	r1, r2, #6
    41d6:	0989      	lsrs	r1, r1, #6
    41d8:	464d      	mov	r5, r9
    41da:	60e9      	str	r1, [r5, #12]
    c4 += c3 >> 26; c[4] = c4 & mask_23; 
    41dc:	0199      	lsls	r1, r3, #6
    41de:	0e94      	lsrs	r4, r2, #26
    41e0:	430c      	orrs	r4, r1
    41e2:	169d      	asrs	r5, r3, #26
    41e4:	19a4      	adds	r4, r4, r6
    41e6:	417d      	adcs	r5, r7
    41e8:	0263      	lsls	r3, r4, #9
    41ea:	0a5b      	lsrs	r3, r3, #9
    41ec:	464a      	mov	r2, r9
    41ee:	6113      	str	r3, [r2, #16]
                    r0   = c0 & mask_26; 
    41f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    41f2:	019b      	lsls	r3, r3, #6
    41f4:	099b      	lsrs	r3, r3, #6
//    c4 += c3 >> 26; c[4] = c4 & mask_26; 
    
    c0   = r0 + (c4 >> 23);
    41f6:	001e      	movs	r6, r3
    41f8:	2700      	movs	r7, #0
    41fa:	0269      	lsls	r1, r5, #9
    41fc:	0de2      	lsrs	r2, r4, #23
    41fe:	430a      	orrs	r2, r1
    4200:	15eb      	asrs	r3, r5, #23
    4202:	1992      	adds	r2, r2, r6
    4204:	417b      	adcs	r3, r7
//    c0   = r0 + ((c4 >> 26) << 3);                  
    c[0] = (int32_t)c0 & mask_26;
    4206:	0191      	lsls	r1, r2, #6
    4208:	0989      	lsrs	r1, r1, #6
    420a:	464c      	mov	r4, r9
    420c:	6021      	str	r1, [r4, #0]
    c1 += c0 >> 26; r1   = c1 & mask_26;
    420e:	0180      	lsls	r0, r0, #6
    4210:	0980      	lsrs	r0, r0, #6
    c[1] = r1 + (int32_t)(c0 >> 26);
    4212:	019b      	lsls	r3, r3, #6
    4214:	0e92      	lsrs	r2, r2, #26
    4216:	431a      	orrs	r2, r3
    4218:	1880      	adds	r0, r0, r2
    421a:	6060      	str	r0, [r4, #4]
}
    421c:	b01d      	add	sp, #116	; 0x74
    421e:	bc3c      	pop	{r2, r3, r4, r5}
    4220:	4690      	mov	r8, r2
    4222:	4699      	mov	r9, r3
    4224:	46a2      	mov	sl, r4
    4226:	46ab      	mov	fp, r5
    4228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    422a:	46c0      	nop			; (mov r8, r8)
    422c:	00006e75 	.word	0x00006e75

00004230 <vsqr1271>:


void vsqr1271(velm_t a, velm_t c)
{ // Field squaring, c = a*b mod p
    4230:	b5f0      	push	{r4, r5, r6, r7, lr}
    4232:	46de      	mov	lr, fp
    4234:	4657      	mov	r7, sl
    4236:	464e      	mov	r6, r9
    4238:	4645      	mov	r5, r8
    423a:	b5e0      	push	{r5, r6, r7, lr}
    423c:	b091      	sub	sp, #68	; 0x44
    423e:	4689      	mov	r9, r1
#else
   int64_t t0, t1, t2, t3, t4;

   a0 = a[0]; a1 = a[1]; a2 = a[2]; a3 = a[3]; a4 = a[4];

   t0 = (int64_t)a0 << 1;
    4240:	6801      	ldr	r1, [r0, #0]
    4242:	17cb      	asrs	r3, r1, #31
    4244:	004a      	lsls	r2, r1, #1
    4246:	9205      	str	r2, [sp, #20]
   t1 = (int64_t)a1 << 1;
    4248:	6844      	ldr	r4, [r0, #4]
    424a:	17e2      	asrs	r2, r4, #31
    424c:	9201      	str	r2, [sp, #4]
    424e:	9408      	str	r4, [sp, #32]
    4250:	0065      	lsls	r5, r4, #1
    4252:	950d      	str	r5, [sp, #52]	; 0x34
   t2 = (int64_t)a2 << 4;
    4254:	6886      	ldr	r6, [r0, #8]
    4256:	46b3      	mov	fp, r6
    4258:	17f4      	asrs	r4, r6, #31
    425a:	9403      	str	r4, [sp, #12]
   t3 = (int64_t)a3 << 3;
    425c:	68c6      	ldr	r6, [r0, #12]
    425e:	46b2      	mov	sl, r6
    4260:	17f5      	asrs	r5, r6, #31
    4262:	9502      	str	r5, [sp, #8]
   t4 = (int64_t)a4 << 4;
    4264:	6904      	ldr	r4, [r0, #16]
    4266:	17e6      	asrs	r6, r4, #31
    4268:	46b0      	mov	r8, r6
    426a:	1726      	asrs	r6, r4, #28
    426c:	960c      	str	r6, [sp, #48]	; 0x30
    426e:	0120      	lsls	r0, r4, #4
    4270:	900a      	str	r0, [sp, #40]	; 0x28

   c0 = (int64_t)a0*a0 + (int64_t)t4*a1 + (int64_t)t2*a3;
    4272:	4d65      	ldr	r5, [pc, #404]	; (4408 <vsqr1271+0x1d8>)
    4274:	000a      	movs	r2, r1
    4276:	0008      	movs	r0, r1
    4278:	9304      	str	r3, [sp, #16]
    427a:	0019      	movs	r1, r3
    427c:	47a8      	blx	r5
    427e:	0006      	movs	r6, r0
    4280:	000f      	movs	r7, r1
    4282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4286:	9808      	ldr	r0, [sp, #32]
    4288:	9901      	ldr	r1, [sp, #4]
    428a:	47a8      	blx	r5
    428c:	1836      	adds	r6, r6, r0
    428e:	414f      	adcs	r7, r1
   t2 = (int64_t)a2 << 4;
    4290:	465b      	mov	r3, fp
    4292:	0f1b      	lsrs	r3, r3, #28
    4294:	9803      	ldr	r0, [sp, #12]
    4296:	0101      	lsls	r1, r0, #4
    4298:	4319      	orrs	r1, r3
    429a:	465b      	mov	r3, fp
    429c:	0118      	lsls	r0, r3, #4
   c0 = (int64_t)a0*a0 + (int64_t)t4*a1 + (int64_t)t2*a3;
    429e:	4652      	mov	r2, sl
    42a0:	9b02      	ldr	r3, [sp, #8]
    42a2:	47a8      	blx	r5
    42a4:	1836      	adds	r6, r6, r0
    42a6:	414f      	adcs	r7, r1
    42a8:	9606      	str	r6, [sp, #24]
    42aa:	9707      	str	r7, [sp, #28]
   t3 = (int64_t)a3 << 3;
    42ac:	4653      	mov	r3, sl
    42ae:	0f5b      	lsrs	r3, r3, #29
    42b0:	9f02      	ldr	r7, [sp, #8]
    42b2:	00f9      	lsls	r1, r7, #3
    42b4:	4319      	orrs	r1, r3
    42b6:	4653      	mov	r3, sl
    42b8:	00d8      	lsls	r0, r3, #3
   c1 = (int64_t)t0*a1 + (int64_t)t3*a3 + (int64_t)t4*a2;
    42ba:	4652      	mov	r2, sl
    42bc:	003b      	movs	r3, r7
    42be:	47a8      	blx	r5
    42c0:	0006      	movs	r6, r0
    42c2:	000f      	movs	r7, r1
    42c4:	9a08      	ldr	r2, [sp, #32]
    42c6:	9b01      	ldr	r3, [sp, #4]
    42c8:	9805      	ldr	r0, [sp, #20]
    42ca:	9904      	ldr	r1, [sp, #16]
    42cc:	47a8      	blx	r5
    42ce:	1836      	adds	r6, r6, r0
    42d0:	414f      	adcs	r7, r1
    42d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    42d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    42d6:	4658      	mov	r0, fp
    42d8:	9903      	ldr	r1, [sp, #12]
    42da:	47a8      	blx	r5
    42dc:	1836      	adds	r6, r6, r0
    42de:	414f      	adcs	r7, r1
    42e0:	960e      	str	r6, [sp, #56]	; 0x38
    42e2:	970f      	str	r7, [sp, #60]	; 0x3c
   c2 = (int64_t)t0*a2 + (int64_t)a1*a1 + (int64_t)t4*a3;
    42e4:	465a      	mov	r2, fp
    42e6:	9b03      	ldr	r3, [sp, #12]
    42e8:	9805      	ldr	r0, [sp, #20]
    42ea:	9904      	ldr	r1, [sp, #16]
    42ec:	47a8      	blx	r5
    42ee:	0006      	movs	r6, r0
    42f0:	000f      	movs	r7, r1
    42f2:	9808      	ldr	r0, [sp, #32]
    42f4:	0002      	movs	r2, r0
    42f6:	9901      	ldr	r1, [sp, #4]
    42f8:	000b      	movs	r3, r1
    42fa:	47a8      	blx	r5
    42fc:	1836      	adds	r6, r6, r0
    42fe:	414f      	adcs	r7, r1
    4300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4304:	4650      	mov	r0, sl
    4306:	9902      	ldr	r1, [sp, #8]
    4308:	47a8      	blx	r5
    430a:	0032      	movs	r2, r6
    430c:	003b      	movs	r3, r7
    430e:	1812      	adds	r2, r2, r0
    4310:	414b      	adcs	r3, r1
    4312:	9208      	str	r2, [sp, #32]
    4314:	9309      	str	r3, [sp, #36]	; 0x24
   c3 = (int64_t)t0*a3 + (int64_t)t1*a2 + ((int64_t)a4 << 3)*a4;
    4316:	4652      	mov	r2, sl
    4318:	9b02      	ldr	r3, [sp, #8]
    431a:	9805      	ldr	r0, [sp, #20]
    431c:	9904      	ldr	r1, [sp, #16]
    431e:	47a8      	blx	r5
    4320:	0006      	movs	r6, r0
    4322:	000f      	movs	r7, r1
    4324:	465a      	mov	r2, fp
    4326:	9b03      	ldr	r3, [sp, #12]
    4328:	980d      	ldr	r0, [sp, #52]	; 0x34
    432a:	9901      	ldr	r1, [sp, #4]
    432c:	47a8      	blx	r5
    432e:	1836      	adds	r6, r6, r0
    4330:	414f      	adcs	r7, r1
    4332:	0f63      	lsrs	r3, r4, #29
    4334:	4640      	mov	r0, r8
    4336:	00c1      	lsls	r1, r0, #3
    4338:	4319      	orrs	r1, r3
    433a:	00e0      	lsls	r0, r4, #3
    433c:	0022      	movs	r2, r4
    433e:	4643      	mov	r3, r8
    4340:	47a8      	blx	r5
    4342:	1836      	adds	r6, r6, r0
    4344:	414f      	adcs	r7, r1
    4346:	960a      	str	r6, [sp, #40]	; 0x28
    4348:	970b      	str	r7, [sp, #44]	; 0x2c
   c4 = (int64_t)t0*a4 + (int64_t)t1*a3 + (int64_t)a2*a2;
    434a:	0022      	movs	r2, r4
    434c:	4643      	mov	r3, r8
    434e:	9805      	ldr	r0, [sp, #20]
    4350:	9904      	ldr	r1, [sp, #16]
    4352:	47a8      	blx	r5
    4354:	0006      	movs	r6, r0
    4356:	000f      	movs	r7, r1
    4358:	4652      	mov	r2, sl
    435a:	9b02      	ldr	r3, [sp, #8]
    435c:	980d      	ldr	r0, [sp, #52]	; 0x34
    435e:	9901      	ldr	r1, [sp, #4]
    4360:	47a8      	blx	r5
    4362:	1836      	adds	r6, r6, r0
    4364:	414f      	adcs	r7, r1
    4366:	465a      	mov	r2, fp
    4368:	9903      	ldr	r1, [sp, #12]
    436a:	000b      	movs	r3, r1
    436c:	4658      	mov	r0, fp
    436e:	47a8      	blx	r5
    4370:	1836      	adds	r6, r6, r0
    4372:	414f      	adcs	r7, r1
#endif
   
                    r0   = c0 & mask_26; 
    c1 += c0 >> 26; r1   = c1 & mask_26;
    4374:	9c06      	ldr	r4, [sp, #24]
    4376:	9d07      	ldr	r5, [sp, #28]
    4378:	01ab      	lsls	r3, r5, #6
    437a:	0ea0      	lsrs	r0, r4, #26
    437c:	4318      	orrs	r0, r3
    437e:	16a9      	asrs	r1, r5, #26
    4380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4382:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    4384:	18c0      	adds	r0, r0, r3
    4386:	4161      	adcs	r1, r4
    c2 += c1 >> 26; c[2] = c2 & mask_26; 
    4388:	018b      	lsls	r3, r1, #6
    438a:	0e84      	lsrs	r4, r0, #26
    438c:	431c      	orrs	r4, r3
    438e:	168d      	asrs	r5, r1, #26
    4390:	9a08      	ldr	r2, [sp, #32]
    4392:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4394:	18a4      	adds	r4, r4, r2
    4396:	415d      	adcs	r5, r3
    4398:	01a3      	lsls	r3, r4, #6
    439a:	099b      	lsrs	r3, r3, #6
    439c:	464a      	mov	r2, r9
    439e:	6093      	str	r3, [r2, #8]
    c3 += c2 >> 26; c[3] = c3 & mask_26; 
    43a0:	01a9      	lsls	r1, r5, #6
    43a2:	0ea2      	lsrs	r2, r4, #26
    43a4:	430a      	orrs	r2, r1
    43a6:	16ab      	asrs	r3, r5, #26
    43a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    43aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    43ac:	1912      	adds	r2, r2, r4
    43ae:	416b      	adcs	r3, r5
    43b0:	0191      	lsls	r1, r2, #6
    43b2:	0989      	lsrs	r1, r1, #6
    43b4:	464d      	mov	r5, r9
    43b6:	60e9      	str	r1, [r5, #12]
    c4 += c3 >> 26; c[4] = c4 & mask_23; 
    43b8:	0199      	lsls	r1, r3, #6
    43ba:	0e94      	lsrs	r4, r2, #26
    43bc:	430c      	orrs	r4, r1
    43be:	169d      	asrs	r5, r3, #26
    43c0:	19a4      	adds	r4, r4, r6
    43c2:	417d      	adcs	r5, r7
    43c4:	0263      	lsls	r3, r4, #9
    43c6:	0a5b      	lsrs	r3, r3, #9
    43c8:	464a      	mov	r2, r9
    43ca:	6113      	str	r3, [r2, #16]
                    r0   = c0 & mask_26; 
    43cc:	9b06      	ldr	r3, [sp, #24]
    43ce:	019b      	lsls	r3, r3, #6
    43d0:	099b      	lsrs	r3, r3, #6
//    c4 += c3 >> 26; c[4] = c4 & mask_26; 
    
    c0   = r0 + (c4 >> 23);
    43d2:	001e      	movs	r6, r3
    43d4:	2700      	movs	r7, #0
    43d6:	0269      	lsls	r1, r5, #9
    43d8:	0de2      	lsrs	r2, r4, #23
    43da:	430a      	orrs	r2, r1
    43dc:	15eb      	asrs	r3, r5, #23
    43de:	1992      	adds	r2, r2, r6
    43e0:	417b      	adcs	r3, r7
//    c0   = r0 + ((c4 >> 26) << 3);                  
    c[0] = (int32_t)c0 & mask_26;
    43e2:	0191      	lsls	r1, r2, #6
    43e4:	0989      	lsrs	r1, r1, #6
    43e6:	464c      	mov	r4, r9
    43e8:	6021      	str	r1, [r4, #0]
    c1 += c0 >> 26; r1   = c1 & mask_26;
    43ea:	0180      	lsls	r0, r0, #6
    43ec:	0980      	lsrs	r0, r0, #6
    c[1] = r1 + (int32_t)(c0 >> 26);
    43ee:	019b      	lsls	r3, r3, #6
    43f0:	0e92      	lsrs	r2, r2, #26
    43f2:	431a      	orrs	r2, r3
    43f4:	1880      	adds	r0, r0, r2
    43f6:	6060      	str	r0, [r4, #4]
}
    43f8:	b011      	add	sp, #68	; 0x44
    43fa:	bc3c      	pop	{r2, r3, r4, r5}
    43fc:	4690      	mov	r8, r2
    43fe:	4699      	mov	r9, r3
    4400:	46a2      	mov	sl, r4
    4402:	46ab      	mov	fp, r5
    4404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4406:	46c0      	nop			; (mov r8, r8)
    4408:	00006e75 	.word	0x00006e75

0000440c <vmod1271_incomplete>:


void vmod1271_incomplete(velm_t a, velm_t c)
{ // Reduce field element modulo 2^127-1
    440c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Redundant representation: 23/26/26/26/26-bit
  // Output is in the range [0, 2^127-1]
    int32_t t0, t1, t2, t3, t4;
    uint32_t rem;

    t0 = a[0]; t1 = a[1]; t2 = a[2]; t3 = a[3]; t4 = a[4];   
    440e:	6805      	ldr	r5, [r0, #0]
    4410:	6847      	ldr	r7, [r0, #4]
    4412:	6882      	ldr	r2, [r0, #8]
    4414:	68c6      	ldr	r6, [r0, #12]
    4416:	6903      	ldr	r3, [r0, #16]

    // Carry propagation
    t1 += (t0 >> 26); t0 &= mask_26; 
    4418:	16ac      	asrs	r4, r5, #26
    441a:	19e4      	adds	r4, r4, r7
    t2 += (t1 >> 26); t1 &= mask_26; 
    441c:	16a0      	asrs	r0, r4, #26
    441e:	1880      	adds	r0, r0, r2
    4420:	01a4      	lsls	r4, r4, #6
    4422:	09a4      	lsrs	r4, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    4424:	1682      	asrs	r2, r0, #26
    4426:	1992      	adds	r2, r2, r6
    4428:	0180      	lsls	r0, r0, #6
    442a:	0980      	lsrs	r0, r0, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    442c:	1696      	asrs	r6, r2, #26
    442e:	18f6      	adds	r6, r6, r3
    4430:	0192      	lsls	r2, r2, #6
    4432:	0992      	lsrs	r2, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    4434:	0277      	lsls	r7, r6, #9
    4436:	0a7f      	lsrs	r7, r7, #9
    4438:	15f6      	asrs	r6, r6, #23
    t1 += (t0 >> 26); t0 &= mask_26; 
    443a:	01ad      	lsls	r5, r5, #6
    443c:	09ad      	lsrs	r5, r5, #6
    
    // Correction
    t0 += rem; 
    443e:	1973      	adds	r3, r6, r5
    t1 += (t0 >> 26); t0 &= mask_26; 
    4440:	169d      	asrs	r5, r3, #26
    4442:	192c      	adds	r4, r5, r4
    t2 += (t1 >> 26); t1 &= mask_26; 
    4444:	16a5      	asrs	r5, r4, #26
    4446:	1828      	adds	r0, r5, r0
    t3 += (t2 >> 26); t2 &= mask_26; 
    4448:	1685      	asrs	r5, r0, #26
    444a:	18aa      	adds	r2, r5, r2
    t4 += (t3 >> 26); t3 &= mask_26;
    444c:	1696      	asrs	r6, r2, #26
    444e:	19f6      	adds	r6, r6, r7
    rem = (t4 >> 23); t4 &= mask_23;
    4450:	15f7      	asrs	r7, r6, #23
    t1 += (t0 >> 26); t0 &= mask_26; 
    4452:	019d      	lsls	r5, r3, #6
    4454:	09ad      	lsrs	r5, r5, #6
    t0 += rem; 
    4456:	197d      	adds	r5, r7, r5

    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    4458:	600d      	str	r5, [r1, #0]
    t2 += (t1 >> 26); t1 &= mask_26; 
    445a:	01a4      	lsls	r4, r4, #6
    445c:	09a4      	lsrs	r4, r4, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    445e:	604c      	str	r4, [r1, #4]
    t3 += (t2 >> 26); t2 &= mask_26; 
    4460:	0180      	lsls	r0, r0, #6
    4462:	0980      	lsrs	r0, r0, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    4464:	6088      	str	r0, [r1, #8]
    t4 += (t3 >> 26); t3 &= mask_26;
    4466:	0192      	lsls	r2, r2, #6
    4468:	0992      	lsrs	r2, r2, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    446a:	60ca      	str	r2, [r1, #12]
    rem = (t4 >> 23); t4 &= mask_23;
    446c:	0273      	lsls	r3, r6, #9
    446e:	0a5b      	lsrs	r3, r3, #9
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    4470:	610b      	str	r3, [r1, #16]
}
    4472:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004474 <vmod1271>:


void vmod1271(velm_t a, velm_t c)
{ // Reduce field element modulo 2^127-1
    4474:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Output is in the range [0, 2^127-2]
  // Redundant representation: 23/26/26/26/26-bit
    int32_t t0, t1, t2, t3, t4;
    uint32_t mask, rem;

    t0 = a[0]; t1 = a[1]; t2 = a[2]; t3 = a[3]; t4 = a[4];   
    4476:	6803      	ldr	r3, [r0, #0]
    4478:	6847      	ldr	r7, [r0, #4]
    447a:	6882      	ldr	r2, [r0, #8]
    447c:	68c6      	ldr	r6, [r0, #12]
    447e:	6905      	ldr	r5, [r0, #16]

    // First carry propagation
    t1 += (t0 >> 26); t0 &= mask_26; 
    4480:	169c      	asrs	r4, r3, #26
    4482:	19e4      	adds	r4, r4, r7
    t2 += (t1 >> 26); t1 &= mask_26; 
    4484:	16a7      	asrs	r7, r4, #26
    4486:	18bf      	adds	r7, r7, r2
    4488:	01a4      	lsls	r4, r4, #6
    448a:	09a4      	lsrs	r4, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    448c:	16ba      	asrs	r2, r7, #26
    448e:	1992      	adds	r2, r2, r6
    4490:	01bf      	lsls	r7, r7, #6
    4492:	09bf      	lsrs	r7, r7, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    4494:	1690      	asrs	r0, r2, #26
    4496:	1940      	adds	r0, r0, r5
    4498:	0192      	lsls	r2, r2, #6
    449a:	0992      	lsrs	r2, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    449c:	0246      	lsls	r6, r0, #9
    449e:	0a76      	lsrs	r6, r6, #9
    t1 += (t0 >> 26); t0 &= mask_26; 
    44a0:	019b      	lsls	r3, r3, #6
    44a2:	099b      	lsrs	r3, r3, #6
    
    // First correction adding rem+1
    t0 += rem + 1; 
    44a4:	3301      	adds	r3, #1
    rem = (t4 >> 23); t4 &= mask_23;
    44a6:	15c0      	asrs	r0, r0, #23
    t0 += rem + 1; 
    44a8:	181b      	adds	r3, r3, r0
    t1 += (t0 >> 26); t0 &= mask_26; 
    44aa:	1698      	asrs	r0, r3, #26
    44ac:	1904      	adds	r4, r0, r4
    t2 += (t1 >> 26); t1 &= mask_26; 
    44ae:	16a0      	asrs	r0, r4, #26
    44b0:	19c7      	adds	r7, r0, r7
    44b2:	01a4      	lsls	r4, r4, #6
    44b4:	09a0      	lsrs	r0, r4, #6
    t3 += (t2 >> 26); t2 &= mask_26; 
    44b6:	16bc      	asrs	r4, r7, #26
    44b8:	18a2      	adds	r2, r4, r2
    44ba:	01bf      	lsls	r7, r7, #6
    44bc:	09bf      	lsrs	r7, r7, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    44be:	1695      	asrs	r5, r2, #26
    44c0:	19ad      	adds	r5, r5, r6
    44c2:	0192      	lsls	r2, r2, #6
    44c4:	0996      	lsrs	r6, r2, #6
    rem = (t4 >> 23); t4 &= mask_23;
    44c6:	026c      	lsls	r4, r5, #9
    44c8:	0a64      	lsrs	r4, r4, #9
    t1 += (t0 >> 26); t0 &= mask_26; 
    44ca:	019b      	lsls	r3, r3, #6
    44cc:	099b      	lsrs	r3, r3, #6
    rem = (t4 >> 23); t4 &= mask_23;
    44ce:	15ed      	asrs	r5, r5, #23

    // If final carry = 0 then subtract 1
    mask = rem - 1;
    44d0:	3d01      	subs	r5, #1
    t0 -= (mask & 1);
    44d2:	2201      	movs	r2, #1
    44d4:	4015      	ands	r5, r2
    44d6:	1b5b      	subs	r3, r3, r5
    t1 += (t0 >> 26); t0 &= mask_26; 
    44d8:	169d      	asrs	r5, r3, #26
    44da:	182d      	adds	r5, r5, r0
    t2 += (t1 >> 26); t1 &= mask_26; 
    44dc:	16a8      	asrs	r0, r5, #26
    44de:	19c0      	adds	r0, r0, r7
    t3 += (t2 >> 26); t2 &= mask_26; 
    44e0:	1682      	asrs	r2, r0, #26
    44e2:	1992      	adds	r2, r2, r6
    t1 += (t0 >> 26); t0 &= mask_26; 
    44e4:	019b      	lsls	r3, r3, #6
    44e6:	099b      	lsrs	r3, r3, #6
    t4 += (t3 >> 26); t3 &= mask_26;
    
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    44e8:	600b      	str	r3, [r1, #0]
    t2 += (t1 >> 26); t1 &= mask_26; 
    44ea:	01ad      	lsls	r5, r5, #6
    44ec:	09ad      	lsrs	r5, r5, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    44ee:	604d      	str	r5, [r1, #4]
    t3 += (t2 >> 26); t2 &= mask_26; 
    44f0:	0180      	lsls	r0, r0, #6
    44f2:	0980      	lsrs	r0, r0, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    44f4:	6088      	str	r0, [r1, #8]
    t4 += (t3 >> 26); t3 &= mask_26;
    44f6:	0193      	lsls	r3, r2, #6
    44f8:	099b      	lsrs	r3, r3, #6
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    44fa:	60cb      	str	r3, [r1, #12]
    t4 += (t3 >> 26); t3 &= mask_26;
    44fc:	1692      	asrs	r2, r2, #26
    44fe:	1914      	adds	r4, r2, r4
    c[0] = t0; c[1] = t1; c[2] = t2; c[3] = t3; c[4] = t4;
    4500:	610c      	str	r4, [r1, #16]
}
    4502:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004504 <vexp1251>:


__inline void vexp1251(felm_t a, felm_t af)
{ // Exponentiation over GF(p), af = a^(125-1)
    4504:	b5f0      	push	{r4, r5, r6, r7, lr}
    4506:	b09b      	sub	sp, #108	; 0x6c
    4508:	0005      	movs	r5, r0
    450a:	000e      	movs	r6, r1
	int i;
	velm_t t1, t2, t3, t4, t5;

	vsqr1271(a, t2);
    450c:	a910      	add	r1, sp, #64	; 0x40
    450e:	4c48      	ldr	r4, [pc, #288]	; (4630 <vexp1251+0x12c>)
    4510:	47a0      	blx	r4
	vmul1271(a, t2, t2);
    4512:	aa10      	add	r2, sp, #64	; 0x40
    4514:	0011      	movs	r1, r2
    4516:	0028      	movs	r0, r5
    4518:	4f46      	ldr	r7, [pc, #280]	; (4634 <vexp1251+0x130>)
    451a:	47b8      	blx	r7
	vsqr1271(t2, t3);
    451c:	a90b      	add	r1, sp, #44	; 0x2c
    451e:	a810      	add	r0, sp, #64	; 0x40
    4520:	47a0      	blx	r4
	vsqr1271(t3, t3);
    4522:	a90b      	add	r1, sp, #44	; 0x2c
    4524:	0008      	movs	r0, r1
    4526:	47a0      	blx	r4
	vmul1271(t2, t3, t3);
    4528:	aa0b      	add	r2, sp, #44	; 0x2c
    452a:	0011      	movs	r1, r2
    452c:	a810      	add	r0, sp, #64	; 0x40
    452e:	47b8      	blx	r7
	vsqr1271(t3, t4);
    4530:	a906      	add	r1, sp, #24
    4532:	a80b      	add	r0, sp, #44	; 0x2c
    4534:	47a0      	blx	r4
	vsqr1271(t4, t4);
    4536:	a906      	add	r1, sp, #24
    4538:	0008      	movs	r0, r1
    453a:	47a0      	blx	r4
	vsqr1271(t4, t4);
    453c:	a906      	add	r1, sp, #24
    453e:	0008      	movs	r0, r1
    4540:	47a0      	blx	r4
	vsqr1271(t4, t4);
    4542:	a906      	add	r1, sp, #24
    4544:	0008      	movs	r0, r1
    4546:	47a0      	blx	r4
	vmul1271(t3, t4, t4);
    4548:	aa06      	add	r2, sp, #24
    454a:	0011      	movs	r1, r2
    454c:	a80b      	add	r0, sp, #44	; 0x2c
    454e:	47b8      	blx	r7
	vsqr1271(t4, t5);
    4550:	a901      	add	r1, sp, #4
    4552:	a806      	add	r0, sp, #24
    4554:	47a0      	blx	r4
    4556:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) vsqr1271(t5, t5);
    4558:	4f35      	ldr	r7, [pc, #212]	; (4630 <vexp1251+0x12c>)
    455a:	a901      	add	r1, sp, #4
    455c:	0008      	movs	r0, r1
    455e:	47b8      	blx	r7
    4560:	3c01      	subs	r4, #1
    4562:	2c00      	cmp	r4, #0
    4564:	d1f9      	bne.n	455a <vexp1251+0x56>
	vmul1271(t4, t5, t5);
    4566:	aa01      	add	r2, sp, #4
    4568:	0011      	movs	r1, r2
    456a:	a806      	add	r0, sp, #24
    456c:	4b31      	ldr	r3, [pc, #196]	; (4634 <vexp1251+0x130>)
    456e:	4798      	blx	r3
	vsqr1271(t5, t2);
    4570:	a910      	add	r1, sp, #64	; 0x40
    4572:	a801      	add	r0, sp, #4
    4574:	4b2e      	ldr	r3, [pc, #184]	; (4630 <vexp1251+0x12c>)
    4576:	4798      	blx	r3
    4578:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) vsqr1271(t2, t2);
    457a:	4f2d      	ldr	r7, [pc, #180]	; (4630 <vexp1251+0x12c>)
    457c:	a910      	add	r1, sp, #64	; 0x40
    457e:	0008      	movs	r0, r1
    4580:	47b8      	blx	r7
    4582:	3c01      	subs	r4, #1
    4584:	2c00      	cmp	r4, #0
    4586:	d1f9      	bne.n	457c <vexp1251+0x78>
	vmul1271(t5, t2, t2);
    4588:	aa10      	add	r2, sp, #64	; 0x40
    458a:	0011      	movs	r1, r2
    458c:	a801      	add	r0, sp, #4
    458e:	4b29      	ldr	r3, [pc, #164]	; (4634 <vexp1251+0x130>)
    4590:	4798      	blx	r3
	vsqr1271(t2, t1);
    4592:	a915      	add	r1, sp, #84	; 0x54
    4594:	a810      	add	r0, sp, #64	; 0x40
    4596:	4b26      	ldr	r3, [pc, #152]	; (4630 <vexp1251+0x12c>)
    4598:	4798      	blx	r3
    459a:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) vsqr1271(t1, t1);
    459c:	4f24      	ldr	r7, [pc, #144]	; (4630 <vexp1251+0x12c>)
    459e:	a915      	add	r1, sp, #84	; 0x54
    45a0:	0008      	movs	r0, r1
    45a2:	47b8      	blx	r7
    45a4:	3c01      	subs	r4, #1
    45a6:	2c00      	cmp	r4, #0
    45a8:	d1f9      	bne.n	459e <vexp1251+0x9a>
	vmul1271(t2, t1, t1);
    45aa:	aa15      	add	r2, sp, #84	; 0x54
    45ac:	0011      	movs	r1, r2
    45ae:	a810      	add	r0, sp, #64	; 0x40
    45b0:	4b20      	ldr	r3, [pc, #128]	; (4634 <vexp1251+0x130>)
    45b2:	4798      	blx	r3
    45b4:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) vsqr1271(t1, t1);
    45b6:	4f1e      	ldr	r7, [pc, #120]	; (4630 <vexp1251+0x12c>)
    45b8:	a915      	add	r1, sp, #84	; 0x54
    45ba:	0008      	movs	r0, r1
    45bc:	47b8      	blx	r7
    45be:	3c01      	subs	r4, #1
    45c0:	2c00      	cmp	r4, #0
    45c2:	d1f9      	bne.n	45b8 <vexp1251+0xb4>
	vmul1271(t1, t2, t1);
    45c4:	aa15      	add	r2, sp, #84	; 0x54
    45c6:	a910      	add	r1, sp, #64	; 0x40
    45c8:	0010      	movs	r0, r2
    45ca:	4b1a      	ldr	r3, [pc, #104]	; (4634 <vexp1251+0x130>)
    45cc:	4798      	blx	r3
    45ce:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) vsqr1271(t1, t1);
    45d0:	4f17      	ldr	r7, [pc, #92]	; (4630 <vexp1251+0x12c>)
    45d2:	a915      	add	r1, sp, #84	; 0x54
    45d4:	0008      	movs	r0, r1
    45d6:	47b8      	blx	r7
    45d8:	3c01      	subs	r4, #1
    45da:	2c00      	cmp	r4, #0
    45dc:	d1f9      	bne.n	45d2 <vexp1251+0xce>
	vmul1271(t5, t1, t1);
    45de:	aa15      	add	r2, sp, #84	; 0x54
    45e0:	0011      	movs	r1, r2
    45e2:	a801      	add	r0, sp, #4
    45e4:	4b13      	ldr	r3, [pc, #76]	; (4634 <vexp1251+0x130>)
    45e6:	4798      	blx	r3
    45e8:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) vsqr1271(t1, t1);
    45ea:	4f11      	ldr	r7, [pc, #68]	; (4630 <vexp1251+0x12c>)
    45ec:	a915      	add	r1, sp, #84	; 0x54
    45ee:	0008      	movs	r0, r1
    45f0:	47b8      	blx	r7
    45f2:	3c01      	subs	r4, #1
    45f4:	2c00      	cmp	r4, #0
    45f6:	d1f9      	bne.n	45ec <vexp1251+0xe8>
	vmul1271(t4, t1, t1);
    45f8:	aa15      	add	r2, sp, #84	; 0x54
    45fa:	0011      	movs	r1, r2
    45fc:	a806      	add	r0, sp, #24
    45fe:	4b0d      	ldr	r3, [pc, #52]	; (4634 <vexp1251+0x130>)
    4600:	4798      	blx	r3
    4602:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) vsqr1271(t1, t1);
    4604:	4f0a      	ldr	r7, [pc, #40]	; (4630 <vexp1251+0x12c>)
    4606:	a915      	add	r1, sp, #84	; 0x54
    4608:	0008      	movs	r0, r1
    460a:	47b8      	blx	r7
    460c:	3c01      	subs	r4, #1
    460e:	2c00      	cmp	r4, #0
    4610:	d1f9      	bne.n	4606 <vexp1251+0x102>
	vmul1271(t3, t1, t1);
    4612:	aa15      	add	r2, sp, #84	; 0x54
    4614:	0011      	movs	r1, r2
    4616:	a80b      	add	r0, sp, #44	; 0x2c
    4618:	4c06      	ldr	r4, [pc, #24]	; (4634 <vexp1251+0x130>)
    461a:	47a0      	blx	r4
	vsqr1271(t1, t1);
    461c:	a915      	add	r1, sp, #84	; 0x54
    461e:	0008      	movs	r0, r1
    4620:	4b03      	ldr	r3, [pc, #12]	; (4630 <vexp1251+0x12c>)
    4622:	4798      	blx	r3
	vmul1271(a, t1, af);
    4624:	0032      	movs	r2, r6
    4626:	a915      	add	r1, sp, #84	; 0x54
    4628:	0028      	movs	r0, r5
    462a:	47a0      	blx	r4
}
    462c:	b01b      	add	sp, #108	; 0x6c
    462e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4630:	00004231 	.word	0x00004231
    4634:	00003f9d 	.word	0x00003f9d

00004638 <vinv1271>:


void vinv1271(felm_t a)
{ // Field inversion, af = a^-1 = a^(p-2) mod p
    4638:	b570      	push	{r4, r5, r6, lr}
    463a:	b09e      	sub	sp, #120	; 0x78
    463c:	0005      	movs	r5, r0
	vsqr1271(a, t2);
    463e:	a905      	add	r1, sp, #20
    4640:	4c4d      	ldr	r4, [pc, #308]	; (4778 <vinv1271+0x140>)
    4642:	47a0      	blx	r4
	vmul1271(a, t2, t2);
    4644:	aa05      	add	r2, sp, #20
    4646:	0011      	movs	r1, r2
    4648:	0028      	movs	r0, r5
    464a:	4e4c      	ldr	r6, [pc, #304]	; (477c <vinv1271+0x144>)
    464c:	47b0      	blx	r6
	vsqr1271(t2, t3);
    464e:	a90a      	add	r1, sp, #40	; 0x28
    4650:	a805      	add	r0, sp, #20
    4652:	47a0      	blx	r4
	vsqr1271(t3, t3);
    4654:	a90a      	add	r1, sp, #40	; 0x28
    4656:	0008      	movs	r0, r1
    4658:	47a0      	blx	r4
	vmul1271(t2, t3, t3);
    465a:	aa0a      	add	r2, sp, #40	; 0x28
    465c:	0011      	movs	r1, r2
    465e:	a805      	add	r0, sp, #20
    4660:	47b0      	blx	r6
	vsqr1271(t3, t4);
    4662:	a90f      	add	r1, sp, #60	; 0x3c
    4664:	a80a      	add	r0, sp, #40	; 0x28
    4666:	47a0      	blx	r4
	vsqr1271(t4, t4);
    4668:	a90f      	add	r1, sp, #60	; 0x3c
    466a:	0008      	movs	r0, r1
    466c:	47a0      	blx	r4
	vsqr1271(t4, t4);
    466e:	a90f      	add	r1, sp, #60	; 0x3c
    4670:	0008      	movs	r0, r1
    4672:	47a0      	blx	r4
	vsqr1271(t4, t4);
    4674:	a90f      	add	r1, sp, #60	; 0x3c
    4676:	0008      	movs	r0, r1
    4678:	47a0      	blx	r4
	vmul1271(t3, t4, t4);
    467a:	aa0f      	add	r2, sp, #60	; 0x3c
    467c:	0011      	movs	r1, r2
    467e:	a80a      	add	r0, sp, #40	; 0x28
    4680:	47b0      	blx	r6
	vsqr1271(t4, t5);
    4682:	a914      	add	r1, sp, #80	; 0x50
    4684:	a80f      	add	r0, sp, #60	; 0x3c
    4686:	47a0      	blx	r4
    4688:	2407      	movs	r4, #7
	for (i = 0; i<7; i++) vsqr1271(t5, t5);
    468a:	4e3b      	ldr	r6, [pc, #236]	; (4778 <vinv1271+0x140>)
    468c:	a914      	add	r1, sp, #80	; 0x50
    468e:	0008      	movs	r0, r1
    4690:	47b0      	blx	r6
    4692:	3c01      	subs	r4, #1
    4694:	2c00      	cmp	r4, #0
    4696:	d1f9      	bne.n	468c <vinv1271+0x54>
	vmul1271(t4, t5, t5);
    4698:	aa14      	add	r2, sp, #80	; 0x50
    469a:	0011      	movs	r1, r2
    469c:	a80f      	add	r0, sp, #60	; 0x3c
    469e:	4b37      	ldr	r3, [pc, #220]	; (477c <vinv1271+0x144>)
    46a0:	4798      	blx	r3
	vsqr1271(t5, t2);
    46a2:	a905      	add	r1, sp, #20
    46a4:	a814      	add	r0, sp, #80	; 0x50
    46a6:	4b34      	ldr	r3, [pc, #208]	; (4778 <vinv1271+0x140>)
    46a8:	4798      	blx	r3
    46aa:	340f      	adds	r4, #15
	for (i = 0; i<15; i++) vsqr1271(t2, t2);
    46ac:	4e32      	ldr	r6, [pc, #200]	; (4778 <vinv1271+0x140>)
    46ae:	a905      	add	r1, sp, #20
    46b0:	0008      	movs	r0, r1
    46b2:	47b0      	blx	r6
    46b4:	3c01      	subs	r4, #1
    46b6:	2c00      	cmp	r4, #0
    46b8:	d1f9      	bne.n	46ae <vinv1271+0x76>
	vmul1271(t5, t2, t2);
    46ba:	aa05      	add	r2, sp, #20
    46bc:	0011      	movs	r1, r2
    46be:	a814      	add	r0, sp, #80	; 0x50
    46c0:	4b2e      	ldr	r3, [pc, #184]	; (477c <vinv1271+0x144>)
    46c2:	4798      	blx	r3
	vsqr1271(t2, t1);
    46c4:	4669      	mov	r1, sp
    46c6:	a805      	add	r0, sp, #20
    46c8:	4b2b      	ldr	r3, [pc, #172]	; (4778 <vinv1271+0x140>)
    46ca:	4798      	blx	r3
    46cc:	341f      	adds	r4, #31
	for (i = 0; i<31; i++) vsqr1271(t1, t1);
    46ce:	4e2a      	ldr	r6, [pc, #168]	; (4778 <vinv1271+0x140>)
    46d0:	4669      	mov	r1, sp
    46d2:	4668      	mov	r0, sp
    46d4:	47b0      	blx	r6
    46d6:	3c01      	subs	r4, #1
    46d8:	2c00      	cmp	r4, #0
    46da:	d1f9      	bne.n	46d0 <vinv1271+0x98>
	vmul1271(t2, t1, t1);
    46dc:	466a      	mov	r2, sp
    46de:	4669      	mov	r1, sp
    46e0:	a805      	add	r0, sp, #20
    46e2:	4b26      	ldr	r3, [pc, #152]	; (477c <vinv1271+0x144>)
    46e4:	4798      	blx	r3
    46e6:	3420      	adds	r4, #32
	for (i = 0; i<32; i++) vsqr1271(t1, t1);
    46e8:	4e23      	ldr	r6, [pc, #140]	; (4778 <vinv1271+0x140>)
    46ea:	4669      	mov	r1, sp
    46ec:	4668      	mov	r0, sp
    46ee:	47b0      	blx	r6
    46f0:	3c01      	subs	r4, #1
    46f2:	2c00      	cmp	r4, #0
    46f4:	d1f9      	bne.n	46ea <vinv1271+0xb2>
	vmul1271(t1, t2, t1);
    46f6:	466a      	mov	r2, sp
    46f8:	a905      	add	r1, sp, #20
    46fa:	4668      	mov	r0, sp
    46fc:	4b1f      	ldr	r3, [pc, #124]	; (477c <vinv1271+0x144>)
    46fe:	4798      	blx	r3
    4700:	3410      	adds	r4, #16
	for (i = 0; i<16; i++) vsqr1271(t1, t1);
    4702:	4e1d      	ldr	r6, [pc, #116]	; (4778 <vinv1271+0x140>)
    4704:	4669      	mov	r1, sp
    4706:	4668      	mov	r0, sp
    4708:	47b0      	blx	r6
    470a:	3c01      	subs	r4, #1
    470c:	2c00      	cmp	r4, #0
    470e:	d1f9      	bne.n	4704 <vinv1271+0xcc>
	vmul1271(t5, t1, t1);
    4710:	466a      	mov	r2, sp
    4712:	4669      	mov	r1, sp
    4714:	a814      	add	r0, sp, #80	; 0x50
    4716:	4b19      	ldr	r3, [pc, #100]	; (477c <vinv1271+0x144>)
    4718:	4798      	blx	r3
    471a:	3408      	adds	r4, #8
	for (i = 0; i<8; i++) vsqr1271(t1, t1);
    471c:	4e16      	ldr	r6, [pc, #88]	; (4778 <vinv1271+0x140>)
    471e:	4669      	mov	r1, sp
    4720:	4668      	mov	r0, sp
    4722:	47b0      	blx	r6
    4724:	3c01      	subs	r4, #1
    4726:	2c00      	cmp	r4, #0
    4728:	d1f9      	bne.n	471e <vinv1271+0xe6>
	vmul1271(t4, t1, t1);
    472a:	466a      	mov	r2, sp
    472c:	4669      	mov	r1, sp
    472e:	a80f      	add	r0, sp, #60	; 0x3c
    4730:	4b12      	ldr	r3, [pc, #72]	; (477c <vinv1271+0x144>)
    4732:	4798      	blx	r3
    4734:	3404      	adds	r4, #4
	for (i = 0; i<4; i++) vsqr1271(t1, t1);
    4736:	4e10      	ldr	r6, [pc, #64]	; (4778 <vinv1271+0x140>)
    4738:	4669      	mov	r1, sp
    473a:	4668      	mov	r0, sp
    473c:	47b0      	blx	r6
    473e:	3c01      	subs	r4, #1
    4740:	2c00      	cmp	r4, #0
    4742:	d1f9      	bne.n	4738 <vinv1271+0x100>
	vmul1271(t3, t1, t1);
    4744:	466a      	mov	r2, sp
    4746:	4669      	mov	r1, sp
    4748:	a80a      	add	r0, sp, #40	; 0x28
    474a:	4c0c      	ldr	r4, [pc, #48]	; (477c <vinv1271+0x144>)
    474c:	47a0      	blx	r4
	vsqr1271(t1, t1);
    474e:	4669      	mov	r1, sp
    4750:	4668      	mov	r0, sp
    4752:	4e09      	ldr	r6, [pc, #36]	; (4778 <vinv1271+0x140>)
    4754:	47b0      	blx	r6
	vmul1271(a, t1, af);
    4756:	aa19      	add	r2, sp, #100	; 0x64
    4758:	4669      	mov	r1, sp
    475a:	0028      	movs	r0, r5
    475c:	47a0      	blx	r4
  // Hardcoded for p = 2^127-1
	velm_t t;

	vexp1251(a, t);
	vsqr1271(t, t);
    475e:	a919      	add	r1, sp, #100	; 0x64
    4760:	0008      	movs	r0, r1
    4762:	47b0      	blx	r6
	vsqr1271(t, t);
    4764:	a919      	add	r1, sp, #100	; 0x64
    4766:	0008      	movs	r0, r1
    4768:	47b0      	blx	r6
	vmul1271(a, t, a);
    476a:	002a      	movs	r2, r5
    476c:	a919      	add	r1, sp, #100	; 0x64
    476e:	0028      	movs	r0, r5
    4770:	47a0      	blx	r4
}
    4772:	b01e      	add	sp, #120	; 0x78
    4774:	bd70      	pop	{r4, r5, r6, pc}
    4776:	46c0      	nop			; (mov r8, r8)
    4778:	00004231 	.word	0x00004231
    477c:	00003f9d 	.word	0x00003f9d

00004780 <from_std_to_ext>:


void from_std_to_ext(f2elm_t a, v2elm_t c)
{ // Expand GF(p^2) element represented with two 4 32-bit digits to 23/26/26/26/26/23/26/26/26/26-bit vector representation
    4780:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Assumes fully reduced input in [0, 2^127-1]  
    const uint32_t mask_8  = ((uint32_t)1 <<  8) - 1;   
    const uint32_t mask_14 = ((uint32_t)1 << 14) - 1;  
    const uint32_t mask_20 = ((uint32_t)1 << 20) - 1; 

    c[0] = a[0][0] & mask_26;
    4782:	6803      	ldr	r3, [r0, #0]
    4784:	019b      	lsls	r3, r3, #6
    4786:	099b      	lsrs	r3, r3, #6
    4788:	600b      	str	r3, [r1, #0]
    c[1] = (a[0][0] >> 26) | ((a[0][1] & mask_20) <<  6);
    478a:	6843      	ldr	r3, [r0, #4]
    478c:	019b      	lsls	r3, r3, #6
    478e:	4a1c      	ldr	r2, [pc, #112]	; (4800 <from_std_to_ext+0x80>)
    4790:	4013      	ands	r3, r2
    4792:	6804      	ldr	r4, [r0, #0]
    4794:	0ea4      	lsrs	r4, r4, #26
    4796:	4323      	orrs	r3, r4
    4798:	604b      	str	r3, [r1, #4]
    c[2] = (a[0][1] >> 20) | ((a[0][2] & mask_14) << 12);
    479a:	6883      	ldr	r3, [r0, #8]
    479c:	031b      	lsls	r3, r3, #12
    479e:	4f19      	ldr	r7, [pc, #100]	; (4804 <from_std_to_ext+0x84>)
    47a0:	403b      	ands	r3, r7
    47a2:	6844      	ldr	r4, [r0, #4]
    47a4:	0d24      	lsrs	r4, r4, #20
    47a6:	4323      	orrs	r3, r4
    47a8:	608b      	str	r3, [r1, #8]
    c[3] = (a[0][2] >> 14) | ((a[0][3] & mask_8 ) << 18);
    47aa:	68c3      	ldr	r3, [r0, #12]
    47ac:	049d      	lsls	r5, r3, #18
    47ae:	26ff      	movs	r6, #255	; 0xff
    47b0:	04b6      	lsls	r6, r6, #18
    47b2:	4035      	ands	r5, r6
    47b4:	6883      	ldr	r3, [r0, #8]
    47b6:	0b9b      	lsrs	r3, r3, #14
    47b8:	431d      	orrs	r5, r3
    47ba:	60cd      	str	r5, [r1, #12]
    c[4] = (a[0][3] >>  8) & mask_23;
    47bc:	68c3      	ldr	r3, [r0, #12]
    47be:	005b      	lsls	r3, r3, #1
    47c0:	0a5b      	lsrs	r3, r3, #9
    47c2:	610b      	str	r3, [r1, #16]

    c[5] = a[1][0] & mask_26;
    47c4:	6903      	ldr	r3, [r0, #16]
    47c6:	019b      	lsls	r3, r3, #6
    47c8:	099b      	lsrs	r3, r3, #6
    47ca:	614b      	str	r3, [r1, #20]
    c[6] = (a[1][0] >> 26) | ((a[1][1] & mask_20) <<  6);
    47cc:	6943      	ldr	r3, [r0, #20]
    47ce:	019c      	lsls	r4, r3, #6
    47d0:	4014      	ands	r4, r2
    47d2:	6903      	ldr	r3, [r0, #16]
    47d4:	0e9b      	lsrs	r3, r3, #26
    47d6:	431c      	orrs	r4, r3
    47d8:	618c      	str	r4, [r1, #24]
    c[7] = (a[1][1] >> 20) | ((a[1][2] & mask_14) << 12);
    47da:	6983      	ldr	r3, [r0, #24]
    47dc:	031a      	lsls	r2, r3, #12
    47de:	403a      	ands	r2, r7
    47e0:	6943      	ldr	r3, [r0, #20]
    47e2:	0d1b      	lsrs	r3, r3, #20
    47e4:	431a      	orrs	r2, r3
    47e6:	61ca      	str	r2, [r1, #28]
    c[8] = (a[1][2] >> 14) | ((a[1][3] & mask_8 ) << 18);
    47e8:	69c3      	ldr	r3, [r0, #28]
    47ea:	049b      	lsls	r3, r3, #18
    47ec:	4033      	ands	r3, r6
    47ee:	6982      	ldr	r2, [r0, #24]
    47f0:	0b92      	lsrs	r2, r2, #14
    47f2:	4313      	orrs	r3, r2
    47f4:	620b      	str	r3, [r1, #32]
    c[9] = (a[1][3] >>  8) & mask_23;
    47f6:	69c3      	ldr	r3, [r0, #28]
    47f8:	005b      	lsls	r3, r3, #1
    47fa:	0a5b      	lsrs	r3, r3, #9
    47fc:	624b      	str	r3, [r1, #36]	; 0x24
}
    47fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4800:	03ffffc0 	.word	0x03ffffc0
    4804:	03fff000 	.word	0x03fff000

00004808 <from_ext_to_std>:

void from_ext_to_std(v2elm_t a, f2elm_t c)
{ // Contract GF(p^2) element in 23/26/26/26/26/23/26/26/26/26-bit vector representation to two 4 32-bit digits
  // Assumes fully reduced input in [0, 2^127-1]
        
    c[0][0]  = (a[1] << 26) |  a[0];
    4808:	6843      	ldr	r3, [r0, #4]
    480a:	069b      	lsls	r3, r3, #26
    480c:	6802      	ldr	r2, [r0, #0]
    480e:	4313      	orrs	r3, r2
    4810:	600b      	str	r3, [r1, #0]
    c[0][1]  = (a[2] << 20) | (a[1] >>  6);
    4812:	6883      	ldr	r3, [r0, #8]
    4814:	051b      	lsls	r3, r3, #20
    4816:	6842      	ldr	r2, [r0, #4]
    4818:	0992      	lsrs	r2, r2, #6
    481a:	4313      	orrs	r3, r2
    481c:	604b      	str	r3, [r1, #4]
    c[0][2]  = (a[3] << 14) | (a[2] >> 12);
    481e:	68c3      	ldr	r3, [r0, #12]
    4820:	039b      	lsls	r3, r3, #14
    4822:	6882      	ldr	r2, [r0, #8]
    4824:	0b12      	lsrs	r2, r2, #12
    4826:	4313      	orrs	r3, r2
    4828:	608b      	str	r3, [r1, #8]
    c[0][3]  = (a[4] <<  8) | (a[3] >> 18);
    482a:	6903      	ldr	r3, [r0, #16]
    482c:	021b      	lsls	r3, r3, #8
    482e:	68c2      	ldr	r2, [r0, #12]
    4830:	0c92      	lsrs	r2, r2, #18
    4832:	4313      	orrs	r3, r2
    4834:	60cb      	str	r3, [r1, #12]
        
    c[1][0]  = (a[6] << 26) |  a[5];
    4836:	6983      	ldr	r3, [r0, #24]
    4838:	069b      	lsls	r3, r3, #26
    483a:	6942      	ldr	r2, [r0, #20]
    483c:	4313      	orrs	r3, r2
    483e:	610b      	str	r3, [r1, #16]
    c[1][1]  = (a[7] << 20) | (a[6] >>  6);
    4840:	69c3      	ldr	r3, [r0, #28]
    4842:	051b      	lsls	r3, r3, #20
    4844:	6982      	ldr	r2, [r0, #24]
    4846:	0992      	lsrs	r2, r2, #6
    4848:	4313      	orrs	r3, r2
    484a:	614b      	str	r3, [r1, #20]
    c[1][2]  = (a[8] << 14) | (a[7] >> 12);
    484c:	6a03      	ldr	r3, [r0, #32]
    484e:	039b      	lsls	r3, r3, #14
    4850:	69c2      	ldr	r2, [r0, #28]
    4852:	0b12      	lsrs	r2, r2, #12
    4854:	4313      	orrs	r3, r2
    4856:	618b      	str	r3, [r1, #24]
    c[1][3]  = (a[9] <<  8) | (a[8] >> 18);
    4858:	6a43      	ldr	r3, [r0, #36]	; 0x24
    485a:	021b      	lsls	r3, r3, #8
    485c:	6a02      	ldr	r2, [r0, #32]
    485e:	0c92      	lsrs	r2, r2, #18
    4860:	4313      	orrs	r3, r2
    4862:	61cb      	str	r3, [r1, #28]
}
    4864:	4770      	bx	lr
	...

00004868 <mp_mul>:


void mp_mul(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Schoolbook multiprecision multiply, c = a*b   
    4868:	b5f0      	push	{r4, r5, r6, r7, lr}
    486a:	46de      	mov	lr, fp
    486c:	4657      	mov	r7, sl
    486e:	464e      	mov	r6, r9
    4870:	4645      	mov	r5, r8
    4872:	b5e0      	push	{r5, r6, r7, lr}
    4874:	b087      	sub	sp, #28
    4876:	9103      	str	r1, [sp, #12]
    4878:	4699      	mov	r9, r3
    unsigned int i, j;
    digit_t u, v, UV[2];
    unsigned int carry = 0;

    for (i = 0; i < (2*nwords); i++) c[i] = 0;
    487a:	0059      	lsls	r1, r3, #1
    487c:	d006      	beq.n	488c <mp_mul+0x24>
    487e:	0013      	movs	r3, r2
    4880:	0089      	lsls	r1, r1, #2
    4882:	1851      	adds	r1, r2, r1
    4884:	2400      	movs	r4, #0
    4886:	c310      	stmia	r3!, {r4}
    4888:	428b      	cmp	r3, r1
    488a:	d1fc      	bne.n	4886 <mp_mul+0x1e>

    for (i = 0; i < nwords; i++) {
    488c:	464b      	mov	r3, r9
    488e:	2b00      	cmp	r3, #0
    4890:	d035      	beq.n	48fe <mp_mul+0x96>
    4892:	9201      	str	r2, [sp, #4]
    4894:	4680      	mov	r8, r0
    4896:	009b      	lsls	r3, r3, #2
    4898:	9302      	str	r3, [sp, #8]
    489a:	2300      	movs	r3, #0
    489c:	469b      	mov	fp, r3
        u = 0;
        for (j = 0; j < nwords; j++) {
            MUL(a[i], b[j], UV+1, UV[0]); 
    489e:	4b1b      	ldr	r3, [pc, #108]	; (490c <mp_mul+0xa4>)
    48a0:	469a      	mov	sl, r3
    48a2:	9f03      	ldr	r7, [sp, #12]
{ // Schoolbook multiprecision multiply, c = a*b   
    48a4:	9e01      	ldr	r6, [sp, #4]
    48a6:	2400      	movs	r4, #0
    48a8:	2500      	movs	r5, #0
            MUL(a[i], b[j], UV+1, UV[0]); 
    48aa:	cf02      	ldmia	r7!, {r1}
    48ac:	aa04      	add	r2, sp, #16
    48ae:	4643      	mov	r3, r8
    48b0:	6818      	ldr	r0, [r3, #0]
    48b2:	47d0      	blx	sl
            ADDC(0, UV[0], u, carry, v); 
    48b4:	9a04      	ldr	r2, [sp, #16]
    48b6:	1913      	adds	r3, r2, r4
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
}

static __inline unsigned int is_digit_lessthan_ct(digit_t x, digit_t y)
{ // Is x < y?
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    48b8:	0011      	movs	r1, r2
    48ba:	4059      	eors	r1, r3
    48bc:	4054      	eors	r4, r2
    48be:	430c      	orrs	r4, r1
    48c0:	405c      	eors	r4, r3
    48c2:	0fe4      	lsrs	r4, r4, #31
            u = UV[1] + carry;
    48c4:	9a05      	ldr	r2, [sp, #20]
    48c6:	9200      	str	r2, [sp, #0]
    48c8:	18a1      	adds	r1, r4, r2
            ADDC(0, c[i+j], v, carry, v); 
    48ca:	6830      	ldr	r0, [r6, #0]
    48cc:	181a      	adds	r2, r3, r0
    48ce:	4043      	eors	r3, r0
    48d0:	001c      	movs	r4, r3
    48d2:	4050      	eors	r0, r2
    48d4:	4304      	orrs	r4, r0
    48d6:	4054      	eors	r4, r2
    48d8:	0fe4      	lsrs	r4, r4, #31
            u = u + carry;
    48da:	1864      	adds	r4, r4, r1
            c[i+j] = v;
    48dc:	c604      	stmia	r6!, {r2}
        for (j = 0; j < nwords; j++) {
    48de:	3501      	adds	r5, #1
    48e0:	45a9      	cmp	r9, r5
    48e2:	d1e2      	bne.n	48aa <mp_mul+0x42>
        }
        c[nwords+i] = u;
    48e4:	9b01      	ldr	r3, [sp, #4]
    48e6:	9a02      	ldr	r2, [sp, #8]
    48e8:	509c      	str	r4, [r3, r2]
    for (i = 0; i < nwords; i++) {
    48ea:	2201      	movs	r2, #1
    48ec:	4694      	mov	ip, r2
    48ee:	44e3      	add	fp, ip
    48f0:	3304      	adds	r3, #4
    48f2:	9301      	str	r3, [sp, #4]
    48f4:	2304      	movs	r3, #4
    48f6:	469c      	mov	ip, r3
    48f8:	44e0      	add	r8, ip
    48fa:	455d      	cmp	r5, fp
    48fc:	d1d1      	bne.n	48a2 <mp_mul+0x3a>
    }
}
    48fe:	b007      	add	sp, #28
    4900:	bc3c      	pop	{r2, r3, r4, r5}
    4902:	4690      	mov	r8, r2
    4904:	4699      	mov	r9, r3
    4906:	46a2      	mov	sl, r4
    4908:	46ab      	mov	fp, r5
    490a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    490c:	00003eb5 	.word	0x00003eb5

00004910 <subtract>:
    return carry;
}


unsigned int subtract(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Multiprecision subtraction, c = a-b, where lng(a) = lng(b) = nwords. Returns the borrow bit
    4910:	b5f0      	push	{r4, r5, r6, r7, lr}
    4912:	46d6      	mov	lr, sl
    4914:	464f      	mov	r7, r9
    4916:	4646      	mov	r6, r8
    4918:	b5c0      	push	{r6, r7, lr}
    491a:	4684      	mov	ip, r0
    491c:	4691      	mov	r9, r2
    unsigned int i, borrow = 0;

    for (i = 0; i < nwords; i++) {
    491e:	2b00      	cmp	r3, #0
    4920:	d022      	beq.n	4968 <subtract+0x58>
    4922:	009b      	lsls	r3, r3, #2
    4924:	4698      	mov	r8, r3
    4926:	2600      	movs	r6, #0
    4928:	2200      	movs	r2, #0
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    492a:	2301      	movs	r3, #1
    492c:	469a      	mov	sl, r3
        SUBC(borrow, a[i], b[i], borrow, c[i]);
    492e:	4663      	mov	r3, ip
    4930:	599b      	ldr	r3, [r3, r6]
    4932:	598f      	ldr	r7, [r1, r6]
    4934:	1bdd      	subs	r5, r3, r7
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    4936:	426c      	negs	r4, r5
    4938:	432c      	orrs	r4, r5
    493a:	0fe4      	lsrs	r4, r4, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    493c:	4650      	mov	r0, sl
    493e:	4044      	eors	r4, r0
    4940:	4014      	ands	r4, r2
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    4942:	0018      	movs	r0, r3
    4944:	4078      	eors	r0, r7
    4946:	406f      	eors	r7, r5
    4948:	4338      	orrs	r0, r7
    494a:	4058      	eors	r0, r3
    494c:	0fc0      	lsrs	r0, r0, #31
    494e:	4320      	orrs	r0, r4
    4950:	1aad      	subs	r5, r5, r2
    4952:	464b      	mov	r3, r9
    4954:	519d      	str	r5, [r3, r6]
    4956:	3604      	adds	r6, #4
    4958:	0002      	movs	r2, r0
    for (i = 0; i < nwords; i++) {
    495a:	4546      	cmp	r6, r8
    495c:	d1e7      	bne.n	492e <subtract+0x1e>
    }

    return borrow;
}
    495e:	bc1c      	pop	{r2, r3, r4}
    4960:	4690      	mov	r8, r2
    4962:	4699      	mov	r9, r3
    4964:	46a2      	mov	sl, r4
    4966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsigned int i, borrow = 0;
    4968:	2000      	movs	r0, #0
    return borrow;
    496a:	e7f8      	b.n	495e <subtract+0x4e>

0000496c <Montgomery_multiply_mod_order>:
	subtract_mod_order(c, (digit_t*)&curve_order, c);  // if c >= order then c = c - order
}
 

void Montgomery_multiply_mod_order(const digit_t* ma, const digit_t* mb, digit_t* mc)
{ // 256-bit Montgomery multiplication modulo the curve order, mc = ma*mb*r' mod order, where ma,mb,mc in [0, order-1]
    496c:	b5f0      	push	{r4, r5, r6, r7, lr}
    496e:	b0b1      	sub	sp, #196	; 0xc4
    4970:	0015      	movs	r5, r2
    mp_mul(a, b, c, NWORDS_ORDER);
    4972:	2308      	movs	r3, #8
    4974:	aa20      	add	r2, sp, #128	; 0x80
    4976:	4c2c      	ldr	r4, [pc, #176]	; (4a28 <Montgomery_multiply_mod_order+0xbc>)
    4978:	47a0      	blx	r4
    497a:	2308      	movs	r3, #8
    497c:	aa10      	add	r2, sp, #64	; 0x40
    497e:	492b      	ldr	r1, [pc, #172]	; (4a2c <Montgomery_multiply_mod_order+0xc0>)
    4980:	a820      	add	r0, sp, #128	; 0x80
    4982:	47a0      	blx	r4
    4984:	2308      	movs	r3, #8
    4986:	466a      	mov	r2, sp
    4988:	4929      	ldr	r1, [pc, #164]	; (4a30 <Montgomery_multiply_mod_order+0xc4>)
    498a:	a810      	add	r0, sp, #64	; 0x40
    498c:	47a0      	blx	r4
    498e:	2600      	movs	r6, #0
    unsigned int i, carry = 0;
    4990:	2400      	movs	r4, #0
        ADDC(carry, a[i], b[i], carry, c[i]);
    4992:	a920      	add	r1, sp, #128	; 0x80
    4994:	5873      	ldr	r3, [r6, r1]
    4996:	191a      	adds	r2, r3, r4
    4998:	4668      	mov	r0, sp
    499a:	5830      	ldr	r0, [r6, r0]
    499c:	4684      	mov	ip, r0
    499e:	1817      	adds	r7, r2, r0
    49a0:	4668      	mov	r0, sp
    49a2:	5037      	str	r7, [r6, r0]
    49a4:	0010      	movs	r0, r2
    49a6:	4060      	eors	r0, r4
    49a8:	405c      	eors	r4, r3
    49aa:	4320      	orrs	r0, r4
    49ac:	4050      	eors	r0, r2
    49ae:	0013      	movs	r3, r2
    49b0:	407b      	eors	r3, r7
    49b2:	4664      	mov	r4, ip
    49b4:	4054      	eors	r4, r2
    49b6:	431c      	orrs	r4, r3
    49b8:	407c      	eors	r4, r7
    49ba:	4304      	orrs	r4, r0
    49bc:	0fe4      	lsrs	r4, r4, #31
    49be:	3604      	adds	r6, #4
    for (i = 0; i < nwords; i++) {
    49c0:	2e40      	cmp	r6, #64	; 0x40
    49c2:	d1e7      	bne.n	4994 <Montgomery_multiply_mod_order+0x28>
    49c4:	2300      	movs	r3, #0
    multiply(P, (digit_t*)&Montgomery_rprime, Q);      // Q = P * r' mod 2^(log_2(r))
    multiply(Q, (digit_t*)&curve_order, temp);         // temp = Q * r
    cout = add(P, temp, temp, 2*NWORDS_ORDER);         // (cout, temp) = P + Q * r     

    for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
        mc[i] = temp[NWORDS_ORDER + i];
    49c6:	001a      	movs	r2, r3
    49c8:	446a      	add	r2, sp
    49ca:	6a12      	ldr	r2, [r2, #32]
    49cc:	50ea      	str	r2, [r5, r3]
    49ce:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
    49d0:	2b20      	cmp	r3, #32
    49d2:	d1f8      	bne.n	49c6 <Montgomery_multiply_mod_order+0x5a>
    }

    // Final, constant-time subtraction     
    bout = subtract(mc, (digit_t*)&curve_order, mc, NWORDS_ORDER);    // (cout, mc) = (cout, mc) - r
    49d4:	3b18      	subs	r3, #24
    49d6:	002a      	movs	r2, r5
    49d8:	4915      	ldr	r1, [pc, #84]	; (4a30 <Montgomery_multiply_mod_order+0xc4>)
    49da:	0028      	movs	r0, r5
    49dc:	4e15      	ldr	r6, [pc, #84]	; (4a34 <Montgomery_multiply_mod_order+0xc8>)
    49de:	47b0      	blx	r6
    mask = (digit_t)cout - (digit_t)bout;              // if (cout, mc) >= 0 then mask = 0x00..0, else if (cout, mc) < 0 then mask = 0xFF..F
    49e0:	1a24      	subs	r4, r4, r0
    49e2:	2300      	movs	r3, #0

    for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
        temp[i] = (order[i] & mask);
    49e4:	4912      	ldr	r1, [pc, #72]	; (4a30 <Montgomery_multiply_mod_order+0xc4>)
    49e6:	585a      	ldr	r2, [r3, r1]
    49e8:	4022      	ands	r2, r4
    49ea:	4668      	mov	r0, sp
    49ec:	501a      	str	r2, [r3, r0]
    49ee:	3304      	adds	r3, #4
    for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
    49f0:	2b20      	cmp	r3, #32
    49f2:	d1f8      	bne.n	49e6 <Montgomery_multiply_mod_order+0x7a>
    49f4:	2600      	movs	r6, #0
    49f6:	2300      	movs	r3, #0
        ADDC(carry, a[i], b[i], carry, c[i]);
    49f8:	59aa      	ldr	r2, [r5, r6]
    49fa:	18d1      	adds	r1, r2, r3
    49fc:	4668      	mov	r0, sp
    49fe:	5834      	ldr	r4, [r6, r0]
    4a00:	190f      	adds	r7, r1, r4
    4a02:	51af      	str	r7, [r5, r6]
    4a04:	0008      	movs	r0, r1
    4a06:	4058      	eors	r0, r3
    4a08:	4053      	eors	r3, r2
    4a0a:	4318      	orrs	r0, r3
    4a0c:	4048      	eors	r0, r1
    4a0e:	000a      	movs	r2, r1
    4a10:	407a      	eors	r2, r7
    4a12:	000b      	movs	r3, r1
    4a14:	4063      	eors	r3, r4
    4a16:	4313      	orrs	r3, r2
    4a18:	407b      	eors	r3, r7
    4a1a:	4303      	orrs	r3, r0
    4a1c:	0fdb      	lsrs	r3, r3, #31
    4a1e:	3604      	adds	r6, #4
    for (i = 0; i < nwords; i++) {
    4a20:	2e20      	cmp	r6, #32
    4a22:	d1e9      	bne.n	49f8 <Montgomery_multiply_mod_order+0x8c>
    }
    add(mc, temp, mc, NWORDS_ORDER);                   //  mc = mc + (mask & r)

    return;
}
    4a24:	b031      	add	sp, #196	; 0xc4
    4a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a28:	00004869 	.word	0x00004869
    4a2c:	0000abe8 	.word	0x0000abe8
    4a30:	0000ac30 	.word	0x0000ac30
    4a34:	00004911 	.word	0x00004911

00004a38 <modulo_order>:


void modulo_order(digit_t* a, digit_t* c)
{ // Reduction modulo the order using Montgomery arithmetic
    4a38:	b530      	push	{r4, r5, lr}
    4a3a:	b091      	sub	sp, #68	; 0x44
    4a3c:	0004      	movs	r4, r0
    4a3e:	000d      	movs	r5, r1
  // ma = a*Montgomery_Rprime mod r, where a,ma in [0, r-1], a,ma,r < 2^256
  // c = ma*1*Montgomery_Rprime^(-1) mod r, where ma,c in [0, r-1], ma,c,r < 2^256
	digit_t ma[NWORDS_ORDER], one[NWORDS_ORDER] = {0};
    4a40:	2220      	movs	r2, #32
    4a42:	2100      	movs	r1, #0
    4a44:	4668      	mov	r0, sp
    4a46:	4b07      	ldr	r3, [pc, #28]	; (4a64 <modulo_order+0x2c>)
    4a48:	4798      	blx	r3
    
    one[0] = 1;
    4a4a:	2301      	movs	r3, #1
    4a4c:	9300      	str	r3, [sp, #0]
    Montgomery_multiply_mod_order(a, (digit_t*)&Montgomery_Rprime, ma);
    4a4e:	aa08      	add	r2, sp, #32
    4a50:	4905      	ldr	r1, [pc, #20]	; (4a68 <modulo_order+0x30>)
    4a52:	0020      	movs	r0, r4
    4a54:	4c05      	ldr	r4, [pc, #20]	; (4a6c <modulo_order+0x34>)
    4a56:	47a0      	blx	r4
    Montgomery_multiply_mod_order(ma, one, c);
    4a58:	002a      	movs	r2, r5
    4a5a:	4669      	mov	r1, sp
    4a5c:	a808      	add	r0, sp, #32
    4a5e:	47a0      	blx	r4
}
    4a60:	b011      	add	sp, #68	; 0x44
    4a62:	bd30      	pop	{r4, r5, pc}
    4a64:	00006fa5 	.word	0x00006fa5
    4a68:	0000abc8 	.word	0x0000abc8
    4a6c:	0000496d 	.word	0x0000496d

00004a70 <conversion_to_odd>:


void conversion_to_odd(digit_t* k, digit_t* k_odd)
{ // Convert scalar to odd if even using the prime subgroup order r
    4a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a72:	46d6      	mov	lr, sl
    4a74:	464f      	mov	r7, r9
    4a76:	4646      	mov	r6, r8
    4a78:	b5c0      	push	{r6, r7, lr}
    4a7a:	4689      	mov	r9, r1
    digit_t mask;
    digit_t* order = (digit_t*)curve_order;
    unsigned int i, carry = 0;

    mask = ~(0 - (k[0] & 1));     
    4a7c:	2601      	movs	r6, #1
    4a7e:	6803      	ldr	r3, [r0, #0]
    4a80:	401e      	ands	r6, r3
    4a82:	1e73      	subs	r3, r6, #1
    4a84:	469c      	mov	ip, r3
    4a86:	2500      	movs	r5, #0
    unsigned int i, carry = 0;
    4a88:	2300      	movs	r3, #0

    for (i = 0; i < NWORDS_ORDER; i++) {   // If (k is odd) then k_odd = k else k_odd = k + r
        ADDC(carry, order[i] & mask, k[i], carry, k_odd[i]);
    4a8a:	4a11      	ldr	r2, [pc, #68]	; (4ad0 <conversion_to_odd+0x60>)
    4a8c:	4692      	mov	sl, r2
    4a8e:	4652      	mov	r2, sl
    4a90:	58aa      	ldr	r2, [r5, r2]
    4a92:	4661      	mov	r1, ip
    4a94:	400a      	ands	r2, r1
    4a96:	18d4      	adds	r4, r2, r3
    4a98:	5946      	ldr	r6, [r0, r5]
    4a9a:	19a1      	adds	r1, r4, r6
    4a9c:	464f      	mov	r7, r9
    4a9e:	5179      	str	r1, [r7, r5]
    4aa0:	0027      	movs	r7, r4
    4aa2:	405f      	eors	r7, r3
    4aa4:	405a      	eors	r2, r3
    4aa6:	433a      	orrs	r2, r7
    4aa8:	4062      	eors	r2, r4
    4aaa:	4690      	mov	r8, r2
    4aac:	0022      	movs	r2, r4
    4aae:	404a      	eors	r2, r1
    4ab0:	0023      	movs	r3, r4
    4ab2:	4073      	eors	r3, r6
    4ab4:	4313      	orrs	r3, r2
    4ab6:	404b      	eors	r3, r1
    4ab8:	4642      	mov	r2, r8
    4aba:	4313      	orrs	r3, r2
    4abc:	0fdb      	lsrs	r3, r3, #31
    4abe:	3504      	adds	r5, #4
    for (i = 0; i < NWORDS_ORDER; i++) {   // If (k is odd) then k_odd = k else k_odd = k + r
    4ac0:	2d20      	cmp	r5, #32
    4ac2:	d1e4      	bne.n	4a8e <conversion_to_odd+0x1e>
    }
}
    4ac4:	bc1c      	pop	{r2, r3, r4}
    4ac6:	4690      	mov	r8, r2
    4ac8:	4699      	mov	r9, r3
    4aca:	46a2      	mov	sl, r4
    4acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	0000ac30 	.word	0x0000ac30

00004ad4 <vdiv1271>:


__inline void vdiv1271(uint32_t* a) 
{ // GF(p) division by two, c = a/2 mod p
    4ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Redundant representation: 23/26/26/26/26-bit
    digit_t mask;

    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    4ad6:	6803      	ldr	r3, [r0, #0]
    4ad8:	07dc      	lsls	r4, r3, #31
    4ada:	17e4      	asrs	r4, r4, #31
    4adc:	09a6      	lsrs	r6, r4, #6
    
    a[0] += mask;
    a[1] += mask;
    4ade:	6842      	ldr	r2, [r0, #4]
    4ae0:	18b1      	adds	r1, r6, r2
    a[2] += mask;
    4ae2:	6882      	ldr	r2, [r0, #8]
    4ae4:	18b2      	adds	r2, r6, r2
    a[3] += mask;
    4ae6:	68c5      	ldr	r5, [r0, #12]
    4ae8:	1975      	adds	r5, r6, r5
    a[4] += (mask >> 3);
    4aea:	0a64      	lsrs	r4, r4, #9
    4aec:	6907      	ldr	r7, [r0, #16]
    4aee:	46bc      	mov	ip, r7
    4af0:	4464      	add	r4, ip
    a[0] += mask;
    4af2:	199b      	adds	r3, r3, r6

    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    4af4:	105b      	asrs	r3, r3, #1
    4af6:	064f      	lsls	r7, r1, #25
    4af8:	2680      	movs	r6, #128	; 0x80
    4afa:	04b6      	lsls	r6, r6, #18
    4afc:	4037      	ands	r7, r6
    4afe:	19db      	adds	r3, r3, r7
    4b00:	6003      	str	r3, [r0, #0]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    4b02:	0653      	lsls	r3, r2, #25
    4b04:	4033      	ands	r3, r6
    4b06:	1049      	asrs	r1, r1, #1
    4b08:	1859      	adds	r1, r3, r1
    4b0a:	6041      	str	r1, [r0, #4]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    4b0c:	0669      	lsls	r1, r5, #25
    4b0e:	4031      	ands	r1, r6
    4b10:	1052      	asrs	r2, r2, #1
    4b12:	188a      	adds	r2, r1, r2
    4b14:	6082      	str	r2, [r0, #8]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    4b16:	0663      	lsls	r3, r4, #25
    4b18:	4033      	ands	r3, r6
    4b1a:	106d      	asrs	r5, r5, #1
    4b1c:	195d      	adds	r5, r3, r5
    4b1e:	60c5      	str	r5, [r0, #12]
    a[4] = ((sdigit_t)a[4] >> 1);
    4b20:	1064      	asrs	r4, r4, #1
    4b22:	6104      	str	r4, [r0, #16]
}
    4b24:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004b26 <v2copy1271>:


void v2copy1271(v2elm_t a, v2elm_t c) 
{ // Copy vectorized GF(p^2) element, c <- a

    c[0] = a[0]; c[1] = a[1]; c[2] = a[2]; c[3] = a[3]; c[4] = a[4]; 
    4b26:	6803      	ldr	r3, [r0, #0]
    4b28:	600b      	str	r3, [r1, #0]
    4b2a:	6843      	ldr	r3, [r0, #4]
    4b2c:	604b      	str	r3, [r1, #4]
    4b2e:	6883      	ldr	r3, [r0, #8]
    4b30:	608b      	str	r3, [r1, #8]
    4b32:	68c3      	ldr	r3, [r0, #12]
    4b34:	60cb      	str	r3, [r1, #12]
    4b36:	6903      	ldr	r3, [r0, #16]
    4b38:	610b      	str	r3, [r1, #16]
    c[5] = a[5]; c[6] = a[6]; c[7] = a[7]; c[8] = a[8]; c[9] = a[9];
    4b3a:	6943      	ldr	r3, [r0, #20]
    4b3c:	614b      	str	r3, [r1, #20]
    4b3e:	6983      	ldr	r3, [r0, #24]
    4b40:	618b      	str	r3, [r1, #24]
    4b42:	69c3      	ldr	r3, [r0, #28]
    4b44:	61cb      	str	r3, [r1, #28]
    4b46:	6a03      	ldr	r3, [r0, #32]
    4b48:	620b      	str	r3, [r1, #32]
    4b4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4b4c:	624b      	str	r3, [r1, #36]	; 0x24
}
    4b4e:	4770      	bx	lr

00004b50 <table_lookup_1x8>:

#include "FourQ_internal.h"                        


void table_lookup_1x8(vpoint_extproj_precomp_t* table, vpoint_extproj_precomp_t P, unsigned int digit, unsigned int sign_mask)
{ // Constant-time table lookup to extract a point represented as (X+Y,Y-X,2Z,2dT) corresponding to extended twisted Edwards coordinates (X:Y:Z:T)
    4b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b52:	46d6      	mov	lr, sl
    4b54:	464f      	mov	r7, r9
    4b56:	4646      	mov	r6, r8
    4b58:	b5c0      	push	{r6, r7, lr}
    4b5a:	b0d2      	sub	sp, #328	; 0x148
    4b5c:	0004      	movs	r4, r0
    4b5e:	468a      	mov	sl, r1
    4b60:	4690      	mov	r8, r2
    4b62:	001e      	movs	r6, r3
#else
    vpoint_extproj_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                  
    ecccopy_precomp(table[0], point);                                        // point = table[0]
    4b64:	a92a      	add	r1, sp, #168	; 0xa8
    4b66:	4dcc      	ldr	r5, [pc, #816]	; (4e98 <table_lookup_1x8+0x348>)
    4b68:	47a8      	blx	r5
    4b6a:	0020      	movs	r0, r4
    4b6c:	3028      	adds	r0, #40	; 0x28
    4b6e:	a934      	add	r1, sp, #208	; 0xd0
    4b70:	47a8      	blx	r5
    4b72:	0020      	movs	r0, r4
    4b74:	3050      	adds	r0, #80	; 0x50
    4b76:	a93e      	add	r1, sp, #248	; 0xf8
    4b78:	47a8      	blx	r5
    4b7a:	0020      	movs	r0, r4
    4b7c:	3078      	adds	r0, #120	; 0x78
    4b7e:	a948      	add	r1, sp, #288	; 0x120
    4b80:	47a8      	blx	r5
    4b82:	0025      	movs	r5, r4
    4b84:	35a0      	adds	r5, #160	; 0xa0
    4b86:	23a0      	movs	r3, #160	; 0xa0
    4b88:	00db      	lsls	r3, r3, #3
    4b8a:	4699      	mov	r9, r3
    4b8c:	44a1      	add	r9, r4
    for (i = 1; i < 8; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    4b8e:	4fc2      	ldr	r7, [pc, #776]	; (4e98 <table_lookup_1x8+0x348>)
        digit--;
    4b90:	2301      	movs	r3, #1
    4b92:	425b      	negs	r3, r3
    4b94:	469c      	mov	ip, r3
    4b96:	44e0      	add	r8, ip
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    4b98:	4643      	mov	r3, r8
    4b9a:	0fdc      	lsrs	r4, r3, #31
    4b9c:	4464      	add	r4, ip
        ecccopy_precomp(table[i], temp_point);                               // temp_point = table[i] 
    4b9e:	a902      	add	r1, sp, #8
    4ba0:	0028      	movs	r0, r5
    4ba2:	47b8      	blx	r7
    4ba4:	0028      	movs	r0, r5
    4ba6:	3028      	adds	r0, #40	; 0x28
    4ba8:	a90c      	add	r1, sp, #48	; 0x30
    4baa:	47b8      	blx	r7
    4bac:	0028      	movs	r0, r5
    4bae:	3050      	adds	r0, #80	; 0x50
    4bb0:	a916      	add	r1, sp, #88	; 0x58
    4bb2:	47b8      	blx	r7
    4bb4:	0028      	movs	r0, r5
    4bb6:	3078      	adds	r0, #120	; 0x78
    4bb8:	a920      	add	r1, sp, #128	; 0x80
    4bba:	47b8      	blx	r7
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point            
        point->xy[0] = (mask & (point->xy[0] ^ temp_point->xy[0])) ^ point->xy[0];
    4bbc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    4bbe:	9b02      	ldr	r3, [sp, #8]
    4bc0:	4053      	eors	r3, r2
    4bc2:	4023      	ands	r3, r4
    4bc4:	4053      	eors	r3, r2
    4bc6:	932a      	str	r3, [sp, #168]	; 0xa8
        point->xy[1] = (mask & (point->xy[1] ^ temp_point->xy[1])) ^ point->xy[1];
    4bc8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    4bca:	9b03      	ldr	r3, [sp, #12]
    4bcc:	4053      	eors	r3, r2
    4bce:	4023      	ands	r3, r4
    4bd0:	4053      	eors	r3, r2
    4bd2:	932b      	str	r3, [sp, #172]	; 0xac
        point->xy[2] = (mask & (point->xy[2] ^ temp_point->xy[2])) ^ point->xy[2];
    4bd4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    4bd6:	9b04      	ldr	r3, [sp, #16]
    4bd8:	4053      	eors	r3, r2
    4bda:	4023      	ands	r3, r4
    4bdc:	4053      	eors	r3, r2
    4bde:	932c      	str	r3, [sp, #176]	; 0xb0
        point->xy[3] = (mask & (point->xy[3] ^ temp_point->xy[3])) ^ point->xy[3];
    4be0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    4be2:	9b05      	ldr	r3, [sp, #20]
    4be4:	4053      	eors	r3, r2
    4be6:	4023      	ands	r3, r4
    4be8:	4053      	eors	r3, r2
    4bea:	932d      	str	r3, [sp, #180]	; 0xb4
        point->xy[4] = (mask & (point->xy[4] ^ temp_point->xy[4])) ^ point->xy[4];
    4bec:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    4bee:	9b06      	ldr	r3, [sp, #24]
    4bf0:	4053      	eors	r3, r2
    4bf2:	4023      	ands	r3, r4
    4bf4:	4053      	eors	r3, r2
    4bf6:	932e      	str	r3, [sp, #184]	; 0xb8
        point->xy[5] = (mask & (point->xy[5] ^ temp_point->xy[5])) ^ point->xy[5];
    4bf8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    4bfa:	9b07      	ldr	r3, [sp, #28]
    4bfc:	4053      	eors	r3, r2
    4bfe:	4023      	ands	r3, r4
    4c00:	4053      	eors	r3, r2
    4c02:	932f      	str	r3, [sp, #188]	; 0xbc
        point->xy[6] = (mask & (point->xy[6] ^ temp_point->xy[6])) ^ point->xy[6];
    4c04:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    4c06:	9b08      	ldr	r3, [sp, #32]
    4c08:	4053      	eors	r3, r2
    4c0a:	4023      	ands	r3, r4
    4c0c:	4053      	eors	r3, r2
    4c0e:	9330      	str	r3, [sp, #192]	; 0xc0
        point->xy[7] = (mask & (point->xy[7] ^ temp_point->xy[7])) ^ point->xy[7];
    4c10:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    4c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4c14:	4053      	eors	r3, r2
    4c16:	4023      	ands	r3, r4
    4c18:	4053      	eors	r3, r2
    4c1a:	9331      	str	r3, [sp, #196]	; 0xc4
        point->xy[8] = (mask & (point->xy[8] ^ temp_point->xy[8])) ^ point->xy[8];
    4c1c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    4c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4c20:	4053      	eors	r3, r2
    4c22:	4023      	ands	r3, r4
    4c24:	4053      	eors	r3, r2
    4c26:	9332      	str	r3, [sp, #200]	; 0xc8
        point->xy[9] = (mask & (point->xy[9] ^ temp_point->xy[9])) ^ point->xy[9];
    4c28:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    4c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c2c:	4053      	eors	r3, r2
    4c2e:	4023      	ands	r3, r4
    4c30:	4053      	eors	r3, r2
    4c32:	9333      	str	r3, [sp, #204]	; 0xcc
        point->yx[0] = (mask & (point->yx[0] ^ temp_point->yx[0])) ^ point->yx[0];
    4c34:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    4c36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c38:	4053      	eors	r3, r2
    4c3a:	4023      	ands	r3, r4
    4c3c:	4053      	eors	r3, r2
    4c3e:	9334      	str	r3, [sp, #208]	; 0xd0
        point->yx[1] = (mask & (point->yx[1] ^ temp_point->yx[1])) ^ point->yx[1];
    4c40:	9a35      	ldr	r2, [sp, #212]	; 0xd4
    4c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4c44:	4053      	eors	r3, r2
    4c46:	4023      	ands	r3, r4
    4c48:	4053      	eors	r3, r2
    4c4a:	9335      	str	r3, [sp, #212]	; 0xd4
        point->yx[2] = (mask & (point->yx[2] ^ temp_point->yx[2])) ^ point->yx[2];
    4c4c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    4c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4c50:	4053      	eors	r3, r2
    4c52:	4023      	ands	r3, r4
    4c54:	4053      	eors	r3, r2
    4c56:	9336      	str	r3, [sp, #216]	; 0xd8
        point->yx[3] = (mask & (point->yx[3] ^ temp_point->yx[3])) ^ point->yx[3];
    4c58:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    4c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4c5c:	4053      	eors	r3, r2
    4c5e:	4023      	ands	r3, r4
    4c60:	4053      	eors	r3, r2
    4c62:	9337      	str	r3, [sp, #220]	; 0xdc
        point->yx[4] = (mask & (point->yx[4] ^ temp_point->yx[4])) ^ point->yx[4];
    4c64:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    4c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4c68:	4053      	eors	r3, r2
    4c6a:	4023      	ands	r3, r4
    4c6c:	4053      	eors	r3, r2
    4c6e:	9338      	str	r3, [sp, #224]	; 0xe0
        point->yx[5] = (mask & (point->yx[5] ^ temp_point->yx[5])) ^ point->yx[5];
    4c70:	9a39      	ldr	r2, [sp, #228]	; 0xe4
    4c72:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4c74:	4053      	eors	r3, r2
    4c76:	4023      	ands	r3, r4
    4c78:	4053      	eors	r3, r2
    4c7a:	9339      	str	r3, [sp, #228]	; 0xe4
        point->yx[6] = (mask & (point->yx[6] ^ temp_point->yx[6])) ^ point->yx[6];
    4c7c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    4c7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4c80:	4053      	eors	r3, r2
    4c82:	4023      	ands	r3, r4
    4c84:	4053      	eors	r3, r2
    4c86:	933a      	str	r3, [sp, #232]	; 0xe8
        point->yx[7] = (mask & (point->yx[7] ^ temp_point->yx[7])) ^ point->yx[7];
    4c88:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    4c8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4c8c:	4053      	eors	r3, r2
    4c8e:	4023      	ands	r3, r4
    4c90:	4053      	eors	r3, r2
    4c92:	933b      	str	r3, [sp, #236]	; 0xec
        point->yx[8] = (mask & (point->yx[8] ^ temp_point->yx[8])) ^ point->yx[8];
    4c94:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    4c96:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4c98:	4053      	eors	r3, r2
    4c9a:	4023      	ands	r3, r4
    4c9c:	4053      	eors	r3, r2
    4c9e:	933c      	str	r3, [sp, #240]	; 0xf0
        point->yx[9] = (mask & (point->yx[9] ^ temp_point->yx[9])) ^ point->yx[9];
    4ca0:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    4ca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4ca4:	4053      	eors	r3, r2
    4ca6:	4023      	ands	r3, r4
    4ca8:	4053      	eors	r3, r2
    4caa:	933d      	str	r3, [sp, #244]	; 0xf4
        point->z2[0] = (mask & (point->z2[0] ^ temp_point->z2[0])) ^ point->z2[0];
    4cac:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    4cae:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4cb0:	4053      	eors	r3, r2
    4cb2:	4023      	ands	r3, r4
    4cb4:	4053      	eors	r3, r2
    4cb6:	933e      	str	r3, [sp, #248]	; 0xf8
        point->z2[1] = (mask & (point->z2[1] ^ temp_point->z2[1])) ^ point->z2[1];
    4cb8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    4cba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4cbc:	4053      	eors	r3, r2
    4cbe:	4023      	ands	r3, r4
    4cc0:	4053      	eors	r3, r2
    4cc2:	933f      	str	r3, [sp, #252]	; 0xfc
        point->z2[2] = (mask & (point->z2[2] ^ temp_point->z2[2])) ^ point->z2[2];
    4cc4:	9a40      	ldr	r2, [sp, #256]	; 0x100
    4cc6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4cc8:	4053      	eors	r3, r2
    4cca:	4023      	ands	r3, r4
    4ccc:	4053      	eors	r3, r2
    4cce:	9340      	str	r3, [sp, #256]	; 0x100
        point->z2[3] = (mask & (point->z2[3] ^ temp_point->z2[3])) ^ point->z2[3];
    4cd0:	9a41      	ldr	r2, [sp, #260]	; 0x104
    4cd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4cd4:	4053      	eors	r3, r2
    4cd6:	4023      	ands	r3, r4
    4cd8:	4053      	eors	r3, r2
    4cda:	9341      	str	r3, [sp, #260]	; 0x104
        point->z2[4] = (mask & (point->z2[4] ^ temp_point->z2[4])) ^ point->z2[4];
    4cdc:	9a42      	ldr	r2, [sp, #264]	; 0x108
    4cde:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4ce0:	4053      	eors	r3, r2
    4ce2:	4023      	ands	r3, r4
    4ce4:	4053      	eors	r3, r2
    4ce6:	9342      	str	r3, [sp, #264]	; 0x108
        point->z2[5] = (mask & (point->z2[5] ^ temp_point->z2[5])) ^ point->z2[5];
    4ce8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    4cea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4cec:	4053      	eors	r3, r2
    4cee:	4023      	ands	r3, r4
    4cf0:	4053      	eors	r3, r2
    4cf2:	9343      	str	r3, [sp, #268]	; 0x10c
        point->z2[6] = (mask & (point->z2[6] ^ temp_point->z2[6])) ^ point->z2[6];
    4cf4:	9a44      	ldr	r2, [sp, #272]	; 0x110
    4cf6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4cf8:	4053      	eors	r3, r2
    4cfa:	4023      	ands	r3, r4
    4cfc:	4053      	eors	r3, r2
    4cfe:	9344      	str	r3, [sp, #272]	; 0x110
        point->z2[7] = (mask & (point->z2[7] ^ temp_point->z2[7])) ^ point->z2[7];
    4d00:	9a45      	ldr	r2, [sp, #276]	; 0x114
    4d02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4d04:	4053      	eors	r3, r2
    4d06:	4023      	ands	r3, r4
    4d08:	4053      	eors	r3, r2
    4d0a:	9345      	str	r3, [sp, #276]	; 0x114
        point->z2[8] = (mask & (point->z2[8] ^ temp_point->z2[8])) ^ point->z2[8];
    4d0c:	9a46      	ldr	r2, [sp, #280]	; 0x118
    4d0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4d10:	4053      	eors	r3, r2
    4d12:	4023      	ands	r3, r4
    4d14:	4053      	eors	r3, r2
    4d16:	9346      	str	r3, [sp, #280]	; 0x118
        point->z2[9] = (mask & (point->z2[9] ^ temp_point->z2[9])) ^ point->z2[9];
    4d18:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    4d1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    4d1c:	4053      	eors	r3, r2
    4d1e:	4023      	ands	r3, r4
    4d20:	4053      	eors	r3, r2
    4d22:	9347      	str	r3, [sp, #284]	; 0x11c
        point->t2[0] = (mask & (point->t2[0] ^ temp_point->t2[0])) ^ point->t2[0];
    4d24:	9a48      	ldr	r2, [sp, #288]	; 0x120
    4d26:	9b20      	ldr	r3, [sp, #128]	; 0x80
    4d28:	4053      	eors	r3, r2
    4d2a:	4023      	ands	r3, r4
    4d2c:	4053      	eors	r3, r2
    4d2e:	9348      	str	r3, [sp, #288]	; 0x120
        point->t2[1] = (mask & (point->t2[1] ^ temp_point->t2[1])) ^ point->t2[1];
    4d30:	9a49      	ldr	r2, [sp, #292]	; 0x124
    4d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4d34:	4053      	eors	r3, r2
    4d36:	4023      	ands	r3, r4
    4d38:	4053      	eors	r3, r2
    4d3a:	9349      	str	r3, [sp, #292]	; 0x124
        point->t2[2] = (mask & (point->t2[2] ^ temp_point->t2[2])) ^ point->t2[2];
    4d3c:	2280      	movs	r2, #128	; 0x80
    4d3e:	ab02      	add	r3, sp, #8
    4d40:	21a0      	movs	r1, #160	; 0xa0
    4d42:	185b      	adds	r3, r3, r1
    4d44:	5899      	ldr	r1, [r3, r2]
    4d46:	ab02      	add	r3, sp, #8
    4d48:	589b      	ldr	r3, [r3, r2]
    4d4a:	404b      	eors	r3, r1
    4d4c:	4023      	ands	r3, r4
    4d4e:	404b      	eors	r3, r1
    4d50:	a902      	add	r1, sp, #8
    4d52:	20a0      	movs	r0, #160	; 0xa0
    4d54:	1809      	adds	r1, r1, r0
    4d56:	508b      	str	r3, [r1, r2]
        point->t2[3] = (mask & (point->t2[3] ^ temp_point->t2[3])) ^ point->t2[3];
    4d58:	3204      	adds	r2, #4
    4d5a:	ab02      	add	r3, sp, #8
    4d5c:	21a0      	movs	r1, #160	; 0xa0
    4d5e:	185b      	adds	r3, r3, r1
    4d60:	5899      	ldr	r1, [r3, r2]
    4d62:	ab02      	add	r3, sp, #8
    4d64:	589b      	ldr	r3, [r3, r2]
    4d66:	404b      	eors	r3, r1
    4d68:	4023      	ands	r3, r4
    4d6a:	404b      	eors	r3, r1
    4d6c:	a902      	add	r1, sp, #8
    4d6e:	1809      	adds	r1, r1, r0
    4d70:	508b      	str	r3, [r1, r2]
        point->t2[4] = (mask & (point->t2[4] ^ temp_point->t2[4])) ^ point->t2[4];
    4d72:	3204      	adds	r2, #4
    4d74:	ab02      	add	r3, sp, #8
    4d76:	21a0      	movs	r1, #160	; 0xa0
    4d78:	185b      	adds	r3, r3, r1
    4d7a:	5899      	ldr	r1, [r3, r2]
    4d7c:	ab02      	add	r3, sp, #8
    4d7e:	589b      	ldr	r3, [r3, r2]
    4d80:	404b      	eors	r3, r1
    4d82:	4023      	ands	r3, r4
    4d84:	404b      	eors	r3, r1
    4d86:	a902      	add	r1, sp, #8
    4d88:	1809      	adds	r1, r1, r0
    4d8a:	508b      	str	r3, [r1, r2]
        point->t2[5] = (mask & (point->t2[5] ^ temp_point->t2[5])) ^ point->t2[5];
    4d8c:	3204      	adds	r2, #4
    4d8e:	ab02      	add	r3, sp, #8
    4d90:	21a0      	movs	r1, #160	; 0xa0
    4d92:	185b      	adds	r3, r3, r1
    4d94:	5899      	ldr	r1, [r3, r2]
    4d96:	ab02      	add	r3, sp, #8
    4d98:	589b      	ldr	r3, [r3, r2]
    4d9a:	404b      	eors	r3, r1
    4d9c:	4023      	ands	r3, r4
    4d9e:	404b      	eors	r3, r1
    4da0:	a902      	add	r1, sp, #8
    4da2:	1809      	adds	r1, r1, r0
    4da4:	508b      	str	r3, [r1, r2]
        point->t2[6] = (mask & (point->t2[6] ^ temp_point->t2[6])) ^ point->t2[6];
    4da6:	3204      	adds	r2, #4
    4da8:	ab02      	add	r3, sp, #8
    4daa:	21a0      	movs	r1, #160	; 0xa0
    4dac:	185b      	adds	r3, r3, r1
    4dae:	5899      	ldr	r1, [r3, r2]
    4db0:	ab02      	add	r3, sp, #8
    4db2:	589b      	ldr	r3, [r3, r2]
    4db4:	404b      	eors	r3, r1
    4db6:	4023      	ands	r3, r4
    4db8:	404b      	eors	r3, r1
    4dba:	a902      	add	r1, sp, #8
    4dbc:	1809      	adds	r1, r1, r0
    4dbe:	508b      	str	r3, [r1, r2]
        point->t2[7] = (mask & (point->t2[7] ^ temp_point->t2[7])) ^ point->t2[7];
    4dc0:	3204      	adds	r2, #4
    4dc2:	ab02      	add	r3, sp, #8
    4dc4:	21a0      	movs	r1, #160	; 0xa0
    4dc6:	185b      	adds	r3, r3, r1
    4dc8:	5899      	ldr	r1, [r3, r2]
    4dca:	ab02      	add	r3, sp, #8
    4dcc:	589b      	ldr	r3, [r3, r2]
    4dce:	404b      	eors	r3, r1
    4dd0:	4023      	ands	r3, r4
    4dd2:	404b      	eors	r3, r1
    4dd4:	a902      	add	r1, sp, #8
    4dd6:	1809      	adds	r1, r1, r0
    4dd8:	508b      	str	r3, [r1, r2]
        point->t2[8] = (mask & (point->t2[8] ^ temp_point->t2[8])) ^ point->t2[8];
    4dda:	3204      	adds	r2, #4
    4ddc:	ab02      	add	r3, sp, #8
    4dde:	21a0      	movs	r1, #160	; 0xa0
    4de0:	185b      	adds	r3, r3, r1
    4de2:	5899      	ldr	r1, [r3, r2]
    4de4:	ab02      	add	r3, sp, #8
    4de6:	589b      	ldr	r3, [r3, r2]
    4de8:	404b      	eors	r3, r1
    4dea:	4023      	ands	r3, r4
    4dec:	404b      	eors	r3, r1
    4dee:	a902      	add	r1, sp, #8
    4df0:	1809      	adds	r1, r1, r0
    4df2:	508b      	str	r3, [r1, r2]
        point->t2[9] = (mask & (point->t2[9] ^ temp_point->t2[9])) ^ point->t2[9];
    4df4:	239c      	movs	r3, #156	; 0x9c
    4df6:	aa02      	add	r2, sp, #8
    4df8:	21a0      	movs	r1, #160	; 0xa0
    4dfa:	1852      	adds	r2, r2, r1
    4dfc:	58d1      	ldr	r1, [r2, r3]
    4dfe:	aa02      	add	r2, sp, #8
    4e00:	58d2      	ldr	r2, [r2, r3]
    4e02:	9201      	str	r2, [sp, #4]
    4e04:	404a      	eors	r2, r1
    4e06:	4014      	ands	r4, r2
    4e08:	404c      	eors	r4, r1
    4e0a:	aa02      	add	r2, sp, #8
    4e0c:	21a0      	movs	r1, #160	; 0xa0
    4e0e:	1852      	adds	r2, r2, r1
    4e10:	50d4      	str	r4, [r2, r3]
    4e12:	35a0      	adds	r5, #160	; 0xa0
    for (i = 1; i < 8; i++)
    4e14:	454d      	cmp	r5, r9
    4e16:	d000      	beq.n	4e1a <table_lookup_1x8+0x2ca>
    4e18:	e6ba      	b.n	4b90 <table_lookup_1x8+0x40>
    }
    
    v2copy1271(point->t2, temp_point->t2);
    4e1a:	a920      	add	r1, sp, #128	; 0x80
    4e1c:	a848      	add	r0, sp, #288	; 0x120
    4e1e:	4c1e      	ldr	r4, [pc, #120]	; (4e98 <table_lookup_1x8+0x348>)
    4e20:	47a0      	blx	r4
    v2copy1271(point->xy, temp_point->yx);                                   // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    4e22:	a90c      	add	r1, sp, #48	; 0x30
    4e24:	a82a      	add	r0, sp, #168	; 0xa8
    4e26:	47a0      	blx	r4
    v2copy1271(point->yx, temp_point->xy);                                   
    4e28:	a902      	add	r1, sp, #8
    4e2a:	a834      	add	r0, sp, #208	; 0xd0
    4e2c:	47a0      	blx	r4
    vneg1271(&temp_point->t2[0]);                                            // Negate 2dt coordinate
    4e2e:	a820      	add	r0, sp, #128	; 0x80
    4e30:	4c1a      	ldr	r4, [pc, #104]	; (4e9c <table_lookup_1x8+0x34c>)
    4e32:	47a0      	blx	r4
    vneg1271(&temp_point->t2[VWORDS_FIELD]);             
    4e34:	a825      	add	r0, sp, #148	; 0x94
    4e36:	47a0      	blx	r4
    4e38:	ab2a      	add	r3, sp, #168	; 0xa8
    4e3a:	a902      	add	r1, sp, #8
    4e3c:	a834      	add	r0, sp, #208	; 0xd0
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                   // If sign_mask = 0 then choose negative of the point
        point->xy[j] = ((digit_t)((int)sign_mask) & (point->xy[j] ^ temp_point->xy[j])) ^ temp_point->xy[j];
    4e3e:	680c      	ldr	r4, [r1, #0]
    4e40:	681a      	ldr	r2, [r3, #0]
    4e42:	4062      	eors	r2, r4
    4e44:	4032      	ands	r2, r6
    4e46:	4062      	eors	r2, r4
    4e48:	601a      	str	r2, [r3, #0]
        point->yx[j] = ((digit_t)((int)sign_mask) & (point->yx[j] ^ temp_point->yx[j])) ^ temp_point->yx[j];
    4e4a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    4e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e4e:	4062      	eors	r2, r4
    4e50:	4032      	ands	r2, r6
    4e52:	4062      	eors	r2, r4
    4e54:	629a      	str	r2, [r3, #40]	; 0x28
        point->t2[j] = ((digit_t)((int)sign_mask) & (point->t2[j] ^ temp_point->t2[j])) ^ temp_point->t2[j];
    4e56:	6f8c      	ldr	r4, [r1, #120]	; 0x78
    4e58:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    4e5a:	4062      	eors	r2, r4
    4e5c:	4032      	ands	r2, r6
    4e5e:	4062      	eors	r2, r4
    4e60:	679a      	str	r2, [r3, #120]	; 0x78
    4e62:	3304      	adds	r3, #4
    4e64:	3104      	adds	r1, #4
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                   // If sign_mask = 0 then choose negative of the point
    4e66:	4283      	cmp	r3, r0
    4e68:	d1e9      	bne.n	4e3e <table_lookup_1x8+0x2ee>
    }                                
    ecccopy_precomp(point, P); 
    4e6a:	4651      	mov	r1, sl
    4e6c:	a82a      	add	r0, sp, #168	; 0xa8
    4e6e:	4c0a      	ldr	r4, [pc, #40]	; (4e98 <table_lookup_1x8+0x348>)
    4e70:	47a0      	blx	r4
    4e72:	4651      	mov	r1, sl
    4e74:	3128      	adds	r1, #40	; 0x28
    4e76:	a834      	add	r0, sp, #208	; 0xd0
    4e78:	47a0      	blx	r4
    4e7a:	4651      	mov	r1, sl
    4e7c:	3150      	adds	r1, #80	; 0x50
    4e7e:	a83e      	add	r0, sp, #248	; 0xf8
    4e80:	47a0      	blx	r4
    4e82:	4651      	mov	r1, sl
    4e84:	3178      	adds	r1, #120	; 0x78
    4e86:	a848      	add	r0, sp, #288	; 0x120
    4e88:	47a0      	blx	r4
#endif
}
    4e8a:	b052      	add	sp, #328	; 0x148
    4e8c:	bc1c      	pop	{r2, r3, r4}
    4e8e:	4690      	mov	r8, r2
    4e90:	4699      	mov	r9, r3
    4e92:	46a2      	mov	sl, r4
    4e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e96:	46c0      	nop			; (mov r8, r8)
    4e98:	00004b27 	.word	0x00004b27
    4e9c:	00003f71 	.word	0x00003f71

00004ea0 <table_lookup_fixed_base>:


void table_lookup_fixed_base(vpoint_precomp_t* table, vpoint_precomp_t P, unsigned int digit, unsigned int sign)
{ // Constant-time table lookup to extract a point represented as (x+y,y-x,2t) corresponding to extended twisted Edwards coordinates (X:Y:Z:T) with Z=1
    4ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ea2:	46de      	mov	lr, fp
    4ea4:	4657      	mov	r7, sl
    4ea6:	464e      	mov	r6, r9
    4ea8:	4645      	mov	r5, r8
    4eaa:	b5e0      	push	{r5, r6, r7, lr}
    4eac:	b0bf      	sub	sp, #252	; 0xfc
    4eae:	0004      	movs	r4, r0
    4eb0:	9101      	str	r1, [sp, #4]
    4eb2:	4692      	mov	sl, r2
    4eb4:	469b      	mov	fp, r3
#else
    vpoint_precomp_t point, temp_point;
    unsigned int i, j;
    digit_t mask;
                                   
    ecccopy_precomp_fixed_base(table[0], point);                             // point = table[0]
    4eb6:	a920      	add	r1, sp, #128	; 0x80
    4eb8:	4d42      	ldr	r5, [pc, #264]	; (4fc4 <table_lookup_fixed_base+0x124>)
    4eba:	47a8      	blx	r5
    4ebc:	0020      	movs	r0, r4
    4ebe:	3028      	adds	r0, #40	; 0x28
    4ec0:	a92a      	add	r1, sp, #168	; 0xa8
    4ec2:	47a8      	blx	r5
    4ec4:	0020      	movs	r0, r4
    4ec6:	3050      	adds	r0, #80	; 0x50
    4ec8:	a934      	add	r1, sp, #208	; 0xd0
    4eca:	47a8      	blx	r5
    4ecc:	0027      	movs	r7, r4
    4ece:	3778      	adds	r7, #120	; 0x78
    4ed0:	0023      	movs	r3, r4
    4ed2:	22f0      	movs	r2, #240	; 0xf0
    4ed4:	00d2      	lsls	r2, r2, #3
    4ed6:	4694      	mov	ip, r2
    4ed8:	4463      	add	r3, ip
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    {
        digit--;
        // While digit>=0 mask = 0xFF...F else sign = 0x00...0
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    4eda:	4a3a      	ldr	r2, [pc, #232]	; (4fc4 <table_lookup_fixed_base+0x124>)
    4edc:	4691      	mov	r9, r2
    4ede:	4698      	mov	r8, r3
    4ee0:	4654      	mov	r4, sl
    4ee2:	e003      	b.n	4eec <table_lookup_fixed_base+0x4c>
    4ee4:	4664      	mov	r4, ip
    4ee6:	3778      	adds	r7, #120	; 0x78
    for (i = 1; i < VPOINTS_FIXEDBASE; i++)
    4ee8:	4547      	cmp	r7, r8
    4eea:	d02e      	beq.n	4f4a <table_lookup_fixed_base+0xaa>
        digit--;
    4eec:	3c01      	subs	r4, #1
        mask = ((digit_t)digit >> (RADIX-1)) - 1;
    4eee:	0fe5      	lsrs	r5, r4, #31
    4ef0:	3d01      	subs	r5, #1
        ecccopy_precomp_fixed_base(table[i], temp_point);                    // temp_point = table[i] 
    4ef2:	a902      	add	r1, sp, #8
    4ef4:	0038      	movs	r0, r7
    4ef6:	47c8      	blx	r9
    4ef8:	0038      	movs	r0, r7
    4efa:	3028      	adds	r0, #40	; 0x28
    4efc:	a90c      	add	r1, sp, #48	; 0x30
    4efe:	47c8      	blx	r9
    4f00:	0038      	movs	r0, r7
    4f02:	3050      	adds	r0, #80	; 0x50
    4f04:	a916      	add	r1, sp, #88	; 0x58
    4f06:	47c8      	blx	r9
    4f08:	ae20      	add	r6, sp, #128	; 0x80
    4f0a:	ab02      	add	r3, sp, #8
    4f0c:	469a      	mov	sl, r3
    4f0e:	a82a      	add	r0, sp, #168	; 0xa8
    4f10:	0019      	movs	r1, r3
    4f12:	0032      	movs	r2, r6
    4f14:	46a4      	mov	ip, r4
        // If mask = 0x00...0 then point = point, else if mask = 0xFF...F then point = temp_point
        for (j = 0; j < 2*VWORDS_FIELD; j++) {
            point->xy[j] = (mask & (point->xy[j] ^ temp_point->xy[j])) ^ point->xy[j];
    4f16:	6813      	ldr	r3, [r2, #0]
    4f18:	680c      	ldr	r4, [r1, #0]
    4f1a:	4063      	eors	r3, r4
    4f1c:	402b      	ands	r3, r5
    4f1e:	6814      	ldr	r4, [r2, #0]
    4f20:	4063      	eors	r3, r4
    4f22:	6013      	str	r3, [r2, #0]
            point->yx[j] = (mask & (point->yx[j] ^ temp_point->yx[j])) ^ point->yx[j];
    4f24:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4f26:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    4f28:	4063      	eors	r3, r4
    4f2a:	402b      	ands	r3, r5
    4f2c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    4f2e:	4063      	eors	r3, r4
    4f30:	6293      	str	r3, [r2, #40]	; 0x28
            point->t2[j] = (mask & (point->t2[j] ^ temp_point->t2[j])) ^ point->t2[j];
    4f32:	6d13      	ldr	r3, [r2, #80]	; 0x50
    4f34:	6d0c      	ldr	r4, [r1, #80]	; 0x50
    4f36:	4063      	eors	r3, r4
    4f38:	402b      	ands	r3, r5
    4f3a:	6d14      	ldr	r4, [r2, #80]	; 0x50
    4f3c:	4063      	eors	r3, r4
    4f3e:	6513      	str	r3, [r2, #80]	; 0x50
    4f40:	3204      	adds	r2, #4
    4f42:	3104      	adds	r1, #4
        for (j = 0; j < 2*VWORDS_FIELD; j++) {
    4f44:	4282      	cmp	r2, r0
    4f46:	d1e6      	bne.n	4f16 <table_lookup_fixed_base+0x76>
    4f48:	e7cc      	b.n	4ee4 <table_lookup_fixed_base+0x44>
    4f4a:	0014      	movs	r4, r2
        }
    }
    
    v2copy1271(point->t2, temp_point->t2);
    4f4c:	a916      	add	r1, sp, #88	; 0x58
    4f4e:	a834      	add	r0, sp, #208	; 0xd0
    4f50:	4d1c      	ldr	r5, [pc, #112]	; (4fc4 <table_lookup_fixed_base+0x124>)
    4f52:	47a8      	blx	r5
    v2copy1271(point->xy, temp_point->yx);                                  // point: x+y,y-x,2dt coordinate, temp_point: y-x,x+y,-2dt coordinate
    4f54:	a90c      	add	r1, sp, #48	; 0x30
    4f56:	a820      	add	r0, sp, #128	; 0x80
    4f58:	47a8      	blx	r5
    v2copy1271(point->yx, temp_point->xy);                                   
    4f5a:	a902      	add	r1, sp, #8
    4f5c:	a82a      	add	r0, sp, #168	; 0xa8
    4f5e:	47a8      	blx	r5
    vneg1271(&temp_point->t2[0]);                                            // Negate 2dt coordinate
    4f60:	a816      	add	r0, sp, #88	; 0x58
    4f62:	4d19      	ldr	r5, [pc, #100]	; (4fc8 <table_lookup_fixed_base+0x128>)
    4f64:	47a8      	blx	r5
    vneg1271(&temp_point->t2[VWORDS_FIELD]);             
    4f66:	a81b      	add	r0, sp, #108	; 0x6c
    4f68:	47a8      	blx	r5
    4f6a:	4652      	mov	r2, sl
    4f6c:	4659      	mov	r1, fp
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
        point->xy[j] = ((digit_t)((int)sign) & (point->xy[j] ^ temp_point->xy[j])) ^ point->xy[j];
    4f6e:	6830      	ldr	r0, [r6, #0]
    4f70:	6813      	ldr	r3, [r2, #0]
    4f72:	4043      	eors	r3, r0
    4f74:	400b      	ands	r3, r1
    4f76:	4043      	eors	r3, r0
    4f78:	6033      	str	r3, [r6, #0]
        point->yx[j] = ((digit_t)((int)sign) & (point->yx[j] ^ temp_point->yx[j])) ^ point->yx[j];
    4f7a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    4f7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4f7e:	4043      	eors	r3, r0
    4f80:	400b      	ands	r3, r1
    4f82:	4043      	eors	r3, r0
    4f84:	62b3      	str	r3, [r6, #40]	; 0x28
        point->t2[j] = ((digit_t)((int)sign) & (point->t2[j] ^ temp_point->t2[j])) ^ point->t2[j];
    4f86:	6d30      	ldr	r0, [r6, #80]	; 0x50
    4f88:	6d13      	ldr	r3, [r2, #80]	; 0x50
    4f8a:	4043      	eors	r3, r0
    4f8c:	400b      	ands	r3, r1
    4f8e:	4043      	eors	r3, r0
    4f90:	6533      	str	r3, [r6, #80]	; 0x50
    4f92:	3604      	adds	r6, #4
    4f94:	3204      	adds	r2, #4
    for (j = 0; j < 2*VWORDS_FIELD; j++) {                                     // If sign = 0xFF...F then choose negative of the point
    4f96:	42a6      	cmp	r6, r4
    4f98:	d1e9      	bne.n	4f6e <table_lookup_fixed_base+0xce>
    }                                  
    ecccopy_precomp_fixed_base(point, P);
    4f9a:	9d01      	ldr	r5, [sp, #4]
    4f9c:	0029      	movs	r1, r5
    4f9e:	a820      	add	r0, sp, #128	; 0x80
    4fa0:	4c08      	ldr	r4, [pc, #32]	; (4fc4 <table_lookup_fixed_base+0x124>)
    4fa2:	47a0      	blx	r4
    4fa4:	0029      	movs	r1, r5
    4fa6:	3128      	adds	r1, #40	; 0x28
    4fa8:	a82a      	add	r0, sp, #168	; 0xa8
    4faa:	47a0      	blx	r4
    4fac:	0029      	movs	r1, r5
    4fae:	3150      	adds	r1, #80	; 0x50
    4fb0:	a834      	add	r0, sp, #208	; 0xd0
    4fb2:	47a0      	blx	r4
#endif
}
    4fb4:	b03f      	add	sp, #252	; 0xfc
    4fb6:	bc3c      	pop	{r2, r3, r4, r5}
    4fb8:	4690      	mov	r8, r2
    4fba:	4699      	mov	r9, r3
    4fbc:	46a2      	mov	sl, r4
    4fbe:	46ab      	mov	fp, r5
    4fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fc2:	46c0      	nop			; (mov r8, r8)
    4fc4:	00004b27 	.word	0x00004b27
    4fc8:	00003f71 	.word	0x00003f71

00004fcc <v2zero1271>:


void v2zero1271(v2elm_t a) 
{ // Zeroing vectorized GF(p^2) element, a = 0
    
    a[0] = 0; a[1] = 0; a[2] = 0; a[3] = 0; a[4] = 0; 
    4fcc:	2300      	movs	r3, #0
    4fce:	6003      	str	r3, [r0, #0]
    4fd0:	6043      	str	r3, [r0, #4]
    4fd2:	6083      	str	r3, [r0, #8]
    4fd4:	60c3      	str	r3, [r0, #12]
    4fd6:	6103      	str	r3, [r0, #16]
    a[5] = 0; a[6] = 0; a[7] = 0; a[8] = 0; a[9] = 0;
    4fd8:	6143      	str	r3, [r0, #20]
    4fda:	6183      	str	r3, [r0, #24]
    4fdc:	61c3      	str	r3, [r0, #28]
    4fde:	6203      	str	r3, [r0, #32]
    4fe0:	6243      	str	r3, [r0, #36]	; 0x24
}
    4fe2:	4770      	bx	lr

00004fe4 <v2add1271>:


__inline void v2add1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) addition, c = a+b in GF((2^127-1)^2)
    4fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fe6:	0004      	movs	r4, r0
    4fe8:	000d      	movs	r5, r1
    4fea:	0016      	movs	r6, r2
    vadd1271(&a[0], &b[0], &c[0]);
    4fec:	4f04      	ldr	r7, [pc, #16]	; (5000 <v2add1271+0x1c>)
    4fee:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    4ff0:	0032      	movs	r2, r6
    4ff2:	3214      	adds	r2, #20
    4ff4:	0029      	movs	r1, r5
    4ff6:	3114      	adds	r1, #20
    4ff8:	0020      	movs	r0, r4
    4ffa:	3014      	adds	r0, #20
    4ffc:	47b8      	blx	r7
}
    4ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5000:	00003f07 	.word	0x00003f07

00005004 <v2sub1271>:


__inline void v2sub1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) subtraction, c = a-b in GF((2^127-1)^2)
    5004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5006:	0004      	movs	r4, r0
    5008:	000d      	movs	r5, r1
    500a:	0016      	movs	r6, r2
    vsub1271(&a[0], &b[0], &c[0]);
    500c:	4f04      	ldr	r7, [pc, #16]	; (5020 <v2sub1271+0x1c>)
    500e:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5010:	0032      	movs	r2, r6
    5012:	3214      	adds	r2, #20
    5014:	0029      	movs	r1, r5
    5016:	3114      	adds	r1, #20
    5018:	0020      	movs	r0, r4
    501a:	3014      	adds	r0, #20
    501c:	47b8      	blx	r7
}
    501e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5020:	00003f43 	.word	0x00003f43

00005024 <v2dblsub1271>:


void v2dblsub1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // Vectorized GF(p^2) addition followed by subtraction, c = 2a-b in GF((2^127-1)^2) 
    5024:	b510      	push	{r4, lr}
    
    c[0] = (a[0] << 1) - b[0];
    5026:	6803      	ldr	r3, [r0, #0]
    5028:	005b      	lsls	r3, r3, #1
    502a:	680c      	ldr	r4, [r1, #0]
    502c:	1b1b      	subs	r3, r3, r4
    502e:	6013      	str	r3, [r2, #0]
    c[1] = (a[1] << 1) - b[1];
    5030:	6843      	ldr	r3, [r0, #4]
    5032:	005b      	lsls	r3, r3, #1
    5034:	684c      	ldr	r4, [r1, #4]
    5036:	1b1b      	subs	r3, r3, r4
    5038:	6053      	str	r3, [r2, #4]
    c[2] = (a[2] << 1) - b[2];
    503a:	6883      	ldr	r3, [r0, #8]
    503c:	005b      	lsls	r3, r3, #1
    503e:	688c      	ldr	r4, [r1, #8]
    5040:	1b1b      	subs	r3, r3, r4
    5042:	6093      	str	r3, [r2, #8]
    c[3] = (a[3] << 1) - b[3];
    5044:	68c3      	ldr	r3, [r0, #12]
    5046:	005b      	lsls	r3, r3, #1
    5048:	68cc      	ldr	r4, [r1, #12]
    504a:	1b1b      	subs	r3, r3, r4
    504c:	60d3      	str	r3, [r2, #12]
    c[4] = (a[4] << 1) - b[4];
    504e:	6903      	ldr	r3, [r0, #16]
    5050:	005b      	lsls	r3, r3, #1
    5052:	690c      	ldr	r4, [r1, #16]
    5054:	1b1b      	subs	r3, r3, r4
    5056:	6113      	str	r3, [r2, #16]
    c[5] = (a[5] << 1) - b[5];
    5058:	6943      	ldr	r3, [r0, #20]
    505a:	005b      	lsls	r3, r3, #1
    505c:	694c      	ldr	r4, [r1, #20]
    505e:	1b1b      	subs	r3, r3, r4
    5060:	6153      	str	r3, [r2, #20]
    c[6] = (a[6] << 1) - b[6];
    5062:	6983      	ldr	r3, [r0, #24]
    5064:	005b      	lsls	r3, r3, #1
    5066:	698c      	ldr	r4, [r1, #24]
    5068:	1b1b      	subs	r3, r3, r4
    506a:	6193      	str	r3, [r2, #24]
    c[7] = (a[7] << 1) - b[7];
    506c:	69c3      	ldr	r3, [r0, #28]
    506e:	005b      	lsls	r3, r3, #1
    5070:	69cc      	ldr	r4, [r1, #28]
    5072:	1b1b      	subs	r3, r3, r4
    5074:	61d3      	str	r3, [r2, #28]
    c[8] = (a[8] << 1) - b[8];
    5076:	6a03      	ldr	r3, [r0, #32]
    5078:	005b      	lsls	r3, r3, #1
    507a:	6a0c      	ldr	r4, [r1, #32]
    507c:	1b1b      	subs	r3, r3, r4
    507e:	6213      	str	r3, [r2, #32]
    c[9] = (a[9] << 1) - b[9];
    5080:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5082:	005b      	lsls	r3, r3, #1
    5084:	6a49      	ldr	r1, [r1, #36]	; 0x24
    5086:	1a5b      	subs	r3, r3, r1
    5088:	6253      	str	r3, [r2, #36]	; 0x24
}
    508a:	bd10      	pop	{r4, pc}

0000508c <v2neg1271>:

void v2neg1271(v2elm_t a) 
{ // Vectorized GF(p^2) negation
  // Representation: 23/26/26/26/26/23/26/26/26/26-bit
    
    a[0] = mask_26 - a[0];
    508c:	4b10      	ldr	r3, [pc, #64]	; (50d0 <v2neg1271+0x44>)
    508e:	6802      	ldr	r2, [r0, #0]
    5090:	1a9a      	subs	r2, r3, r2
    5092:	6002      	str	r2, [r0, #0]
    a[1] = mask_26 - a[1];
    5094:	6842      	ldr	r2, [r0, #4]
    5096:	1a9a      	subs	r2, r3, r2
    5098:	6042      	str	r2, [r0, #4]
    a[2] = mask_26 - a[2];
    509a:	6882      	ldr	r2, [r0, #8]
    509c:	1a9a      	subs	r2, r3, r2
    509e:	6082      	str	r2, [r0, #8]
    a[3] = mask_26 - a[3];
    50a0:	68c2      	ldr	r2, [r0, #12]
    50a2:	1a9a      	subs	r2, r3, r2
    50a4:	60c2      	str	r2, [r0, #12]
    a[4] = mask_23 - a[4];
    50a6:	4a0b      	ldr	r2, [pc, #44]	; (50d4 <v2neg1271+0x48>)
    50a8:	6901      	ldr	r1, [r0, #16]
    50aa:	1a51      	subs	r1, r2, r1
    50ac:	6101      	str	r1, [r0, #16]
    a[5] = mask_26 - a[5];
    50ae:	6941      	ldr	r1, [r0, #20]
    50b0:	1a59      	subs	r1, r3, r1
    50b2:	6141      	str	r1, [r0, #20]
    a[6] = mask_26 - a[6];
    50b4:	6981      	ldr	r1, [r0, #24]
    50b6:	1a59      	subs	r1, r3, r1
    50b8:	6181      	str	r1, [r0, #24]
    a[7] = mask_26 - a[7];
    50ba:	69c1      	ldr	r1, [r0, #28]
    50bc:	1a59      	subs	r1, r3, r1
    50be:	61c1      	str	r1, [r0, #28]
    a[8] = mask_26 - a[8];
    50c0:	6a01      	ldr	r1, [r0, #32]
    50c2:	1a5b      	subs	r3, r3, r1
    50c4:	6203      	str	r3, [r0, #32]
    a[9] = mask_23 - a[9];
    50c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    50c8:	1ad2      	subs	r2, r2, r3
    50ca:	6242      	str	r2, [r0, #36]	; 0x24
}
    50cc:	4770      	bx	lr
    50ce:	46c0      	nop			; (mov r8, r8)
    50d0:	03ffffff 	.word	0x03ffffff
    50d4:	007fffff 	.word	0x007fffff

000050d8 <v2div1271>:


void v2div1271(uint32_t* a) 
{ // GF(p^2) division by two, c = a/2 mod p
    50d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    50da:	46c6      	mov	lr, r8
    50dc:	b500      	push	{lr}
    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    50de:	6804      	ldr	r4, [r0, #0]
    50e0:	2301      	movs	r3, #1
    50e2:	4698      	mov	r8, r3
    50e4:	001a      	movs	r2, r3
    50e6:	4022      	ands	r2, r4
    50e8:	4252      	negs	r2, r2
    50ea:	0991      	lsrs	r1, r2, #6
    a[1] += mask;
    50ec:	6843      	ldr	r3, [r0, #4]
    50ee:	18ce      	adds	r6, r1, r3
    a[2] += mask;
    50f0:	6883      	ldr	r3, [r0, #8]
    50f2:	18cd      	adds	r5, r1, r3
    a[3] += mask;
    50f4:	68c3      	ldr	r3, [r0, #12]
    50f6:	18cf      	adds	r7, r1, r3
    a[4] += (mask >> 3);
    50f8:	0a52      	lsrs	r2, r2, #9
    50fa:	6903      	ldr	r3, [r0, #16]
    50fc:	469c      	mov	ip, r3
    50fe:	4462      	add	r2, ip
    a[0] += mask;
    5100:	1864      	adds	r4, r4, r1
    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    5102:	1064      	asrs	r4, r4, #1
    5104:	0673      	lsls	r3, r6, #25
    5106:	2180      	movs	r1, #128	; 0x80
    5108:	0489      	lsls	r1, r1, #18
    510a:	400b      	ands	r3, r1
    510c:	469c      	mov	ip, r3
    510e:	4464      	add	r4, ip
    5110:	6004      	str	r4, [r0, #0]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    5112:	066c      	lsls	r4, r5, #25
    5114:	400c      	ands	r4, r1
    5116:	1076      	asrs	r6, r6, #1
    5118:	19a6      	adds	r6, r4, r6
    511a:	6046      	str	r6, [r0, #4]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    511c:	067c      	lsls	r4, r7, #25
    511e:	400c      	ands	r4, r1
    5120:	106d      	asrs	r5, r5, #1
    5122:	1965      	adds	r5, r4, r5
    5124:	6085      	str	r5, [r0, #8]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    5126:	0654      	lsls	r4, r2, #25
    5128:	400c      	ands	r4, r1
    512a:	107f      	asrs	r7, r7, #1
    512c:	19e7      	adds	r7, r4, r7
    512e:	60c7      	str	r7, [r0, #12]
    a[4] = ((sdigit_t)a[4] >> 1);
    5130:	1052      	asrs	r2, r2, #1
    5132:	6102      	str	r2, [r0, #16]
    mask = (0 - (a[0] & 1)) >> 6;  // if a[0] is odd then mask = 2^26-1, else mask = 0
    5134:	6942      	ldr	r2, [r0, #20]
    5136:	4643      	mov	r3, r8
    5138:	4013      	ands	r3, r2
    513a:	425b      	negs	r3, r3
    513c:	099f      	lsrs	r7, r3, #6
    a[1] += mask;
    513e:	6984      	ldr	r4, [r0, #24]
    5140:	193e      	adds	r6, r7, r4
    a[2] += mask;
    5142:	69c4      	ldr	r4, [r0, #28]
    5144:	193d      	adds	r5, r7, r4
    a[3] += mask;
    5146:	6a04      	ldr	r4, [r0, #32]
    5148:	193c      	adds	r4, r7, r4
    a[4] += (mask >> 3);
    514a:	0a5b      	lsrs	r3, r3, #9
    514c:	4698      	mov	r8, r3
    514e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5150:	469c      	mov	ip, r3
    5152:	4643      	mov	r3, r8
    5154:	4463      	add	r3, ip
    a[0] += mask;
    5156:	19d2      	adds	r2, r2, r7
    a[0] = ((sdigit_t)a[0] >> 1) + ((a[1] & 1) << 25);
    5158:	1052      	asrs	r2, r2, #1
    515a:	0677      	lsls	r7, r6, #25
    515c:	400f      	ands	r7, r1
    515e:	19d2      	adds	r2, r2, r7
    5160:	6142      	str	r2, [r0, #20]
    a[1] = ((sdigit_t)a[1] >> 1) + ((a[2] & 1) << 25);
    5162:	066a      	lsls	r2, r5, #25
    5164:	400a      	ands	r2, r1
    5166:	1076      	asrs	r6, r6, #1
    5168:	1996      	adds	r6, r2, r6
    516a:	6186      	str	r6, [r0, #24]
    a[2] = ((sdigit_t)a[2] >> 1) + ((a[3] & 1) << 25);
    516c:	0662      	lsls	r2, r4, #25
    516e:	400a      	ands	r2, r1
    5170:	106d      	asrs	r5, r5, #1
    5172:	1955      	adds	r5, r2, r5
    5174:	61c5      	str	r5, [r0, #28]
    a[3] = ((sdigit_t)a[3] >> 1) + ((a[4] & 1) << 25);
    5176:	065a      	lsls	r2, r3, #25
    5178:	4011      	ands	r1, r2
    517a:	1064      	asrs	r4, r4, #1
    517c:	190c      	adds	r4, r1, r4
    517e:	6204      	str	r4, [r0, #32]
    a[4] = ((sdigit_t)a[4] >> 1);
    5180:	105b      	asrs	r3, r3, #1
    5182:	6243      	str	r3, [r0, #36]	; 0x24
    vdiv1271(&a[0]);
    vdiv1271(&a[VWORDS_FIELD]);
}
    5184:	bc04      	pop	{r2}
    5186:	4690      	mov	r8, r2
    5188:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000518c <v2mod1271_incomplete>:


void v2mod1271_incomplete(uint32_t* a, uint32_t* c) 
{ // Reduction of GF(p^2) element
    518c:	b570      	push	{r4, r5, r6, lr}
    518e:	0004      	movs	r4, r0
    5190:	000d      	movs	r5, r1
    vmod1271_incomplete(&a[0], &c[0]);
    5192:	4e04      	ldr	r6, [pc, #16]	; (51a4 <v2mod1271_incomplete+0x18>)
    5194:	47b0      	blx	r6
    vmod1271_incomplete(&a[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5196:	0029      	movs	r1, r5
    5198:	3114      	adds	r1, #20
    519a:	0020      	movs	r0, r4
    519c:	3014      	adds	r0, #20
    519e:	47b0      	blx	r6
}
    51a0:	bd70      	pop	{r4, r5, r6, pc}
    51a2:	46c0      	nop			; (mov r8, r8)
    51a4:	0000440d 	.word	0x0000440d

000051a8 <v2mod1271>:


void v2mod1271(uint32_t* a, uint32_t* c) 
{ // Reduction of GF(p^2) element
    51a8:	b570      	push	{r4, r5, r6, lr}
    51aa:	0004      	movs	r4, r0
    51ac:	000d      	movs	r5, r1
    vmod1271(&a[0], &c[0]);
    51ae:	4e04      	ldr	r6, [pc, #16]	; (51c0 <v2mod1271+0x18>)
    51b0:	47b0      	blx	r6
    vmod1271(&a[VWORDS_FIELD], &c[VWORDS_FIELD]);
    51b2:	0029      	movs	r1, r5
    51b4:	3114      	adds	r1, #20
    51b6:	0020      	movs	r0, r4
    51b8:	3014      	adds	r0, #20
    51ba:	47b0      	blx	r6
}
    51bc:	bd70      	pop	{r4, r5, r6, pc}
    51be:	46c0      	nop			; (mov r8, r8)
    51c0:	00004475 	.word	0x00004475

000051c4 <v2mul1271>:


void v2mul1271(v2elm_t a, v2elm_t b, v2elm_t c)
{ // GF(p^2) multiplication, c = a*b in GF((2^127-1)^2) 
    51c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51c6:	b097      	sub	sp, #92	; 0x5c
    51c8:	0006      	movs	r6, r0
    51ca:	000d      	movs	r5, r1
    51cc:	9201      	str	r2, [sp, #4]
    velm_t t1, t2, t3, t4;
    
    vmul1271(&a[0], &b[0], t1);                        // t1 = a0*b0
    51ce:	ab11      	add	r3, sp, #68	; 0x44
    51d0:	001a      	movs	r2, r3
    51d2:	4c16      	ldr	r4, [pc, #88]	; (522c <v2mul1271+0x68>)
    51d4:	47a0      	blx	r4
    vmul1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], t2);  // t2 = a1*b1
    51d6:	2314      	movs	r3, #20
    51d8:	469c      	mov	ip, r3
    51da:	44b4      	add	ip, r6
    51dc:	4663      	mov	r3, ip
    51de:	002f      	movs	r7, r5
    51e0:	3714      	adds	r7, #20
    51e2:	a90c      	add	r1, sp, #48	; 0x30
    51e4:	000a      	movs	r2, r1
    51e6:	0039      	movs	r1, r7
    51e8:	9300      	str	r3, [sp, #0]
    51ea:	4660      	mov	r0, ip
    51ec:	47a0      	blx	r4
    vadd1271(&a[0], &a[VWORDS_FIELD], t3);             // t3 = a0+a1
    51ee:	a807      	add	r0, sp, #28
    51f0:	0002      	movs	r2, r0
    51f2:	9900      	ldr	r1, [sp, #0]
    51f4:	0030      	movs	r0, r6
    51f6:	4e0e      	ldr	r6, [pc, #56]	; (5230 <v2mul1271+0x6c>)
    51f8:	47b0      	blx	r6
    vadd1271(&b[0], &b[VWORDS_FIELD], t4);             // t4 = b0+b1
    51fa:	aa02      	add	r2, sp, #8
    51fc:	0039      	movs	r1, r7
    51fe:	0028      	movs	r0, r5
    5200:	47b0      	blx	r6
    vsub1271(t1, t2, &c[0]);                           // c[0] = a0*b0 - a1*b1
    5202:	9e01      	ldr	r6, [sp, #4]
    5204:	0032      	movs	r2, r6
    5206:	a90c      	add	r1, sp, #48	; 0x30
    5208:	a811      	add	r0, sp, #68	; 0x44
    520a:	4d0a      	ldr	r5, [pc, #40]	; (5234 <v2mul1271+0x70>)
    520c:	47a8      	blx	r5
    vmul1271(t3, t4, t3);                              // t3 = (a0+a1)*(b0+b1)
    520e:	aa07      	add	r2, sp, #28
    5210:	a902      	add	r1, sp, #8
    5212:	0010      	movs	r0, r2
    5214:	47a0      	blx	r4
    vsub1271(t3, t1, t3);                              // t3 = (a0+a1)*(b0+b1) - a0*b0
    5216:	aa07      	add	r2, sp, #28
    5218:	a911      	add	r1, sp, #68	; 0x44
    521a:	0010      	movs	r0, r2
    521c:	47a8      	blx	r5
    vsub1271(t3, t2, &c[VWORDS_FIELD]);                // c[1] = (a0+a1)*(b0+b1) - a0*b0 - a1*b1
    521e:	0032      	movs	r2, r6
    5220:	3214      	adds	r2, #20
    5222:	a90c      	add	r1, sp, #48	; 0x30
    5224:	a807      	add	r0, sp, #28
    5226:	47a8      	blx	r5
}
    5228:	b017      	add	sp, #92	; 0x5c
    522a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    522c:	00003f9d 	.word	0x00003f9d
    5230:	00003f07 	.word	0x00003f07
    5234:	00003f43 	.word	0x00003f43

00005238 <v2sqr1271>:


void v2sqr1271(v2elm_t a, v2elm_t c)
{ // GF(p^2) squaring, c = a^2 in GF((2^127-1)^2) 
    5238:	b5f0      	push	{r4, r5, r6, r7, lr}
    523a:	b091      	sub	sp, #68	; 0x44
    523c:	0005      	movs	r5, r0
    523e:	000c      	movs	r4, r1
    velm_t t1, t2, t3;

    vadd1271(&a[0], &a[VWORDS_FIELD], t1);             // t1 = a0+a1 
    5240:	0006      	movs	r6, r0
    5242:	3614      	adds	r6, #20
    5244:	aa0b      	add	r2, sp, #44	; 0x2c
    5246:	0031      	movs	r1, r6
    5248:	4f0b      	ldr	r7, [pc, #44]	; (5278 <v2sqr1271+0x40>)
    524a:	47b8      	blx	r7
    vsub1271(&a[0], &a[VWORDS_FIELD], t2);             // t2 = a0-a1
    524c:	aa06      	add	r2, sp, #24
    524e:	0031      	movs	r1, r6
    5250:	0028      	movs	r0, r5
    5252:	4b0a      	ldr	r3, [pc, #40]	; (527c <v2sqr1271+0x44>)
    5254:	4798      	blx	r3
    vmul1271(&a[0], &a[VWORDS_FIELD], t3);             // t3 = a0*a1
    5256:	aa01      	add	r2, sp, #4
    5258:	0031      	movs	r1, r6
    525a:	0028      	movs	r0, r5
    525c:	4d08      	ldr	r5, [pc, #32]	; (5280 <v2sqr1271+0x48>)
    525e:	47a8      	blx	r5
    vmul1271(t1, t2, &c[0]);                           // c0 = (a0+a1)(a0-a1)
    5260:	0022      	movs	r2, r4
    5262:	a906      	add	r1, sp, #24
    5264:	a80b      	add	r0, sp, #44	; 0x2c
    5266:	47a8      	blx	r5
    vadd1271(t3, t3, &c[VWORDS_FIELD]);                // c1 = 2a0*a1
    5268:	0022      	movs	r2, r4
    526a:	3214      	adds	r2, #20
    526c:	a901      	add	r1, sp, #4
    526e:	0008      	movs	r0, r1
    5270:	47b8      	blx	r7
}
    5272:	b011      	add	sp, #68	; 0x44
    5274:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5276:	46c0      	nop			; (mov r8, r8)
    5278:	00003f07 	.word	0x00003f07
    527c:	00003f43 	.word	0x00003f43
    5280:	00003f9d 	.word	0x00003f9d

00005284 <v2inv1271>:


void v2inv1271(v2elm_t a)
{ // Vectorized GF(p^2) inversion, a = (a0-i*a1)/(a0^2+a1^2)
    5284:	b570      	push	{r4, r5, r6, lr}
    5286:	b08a      	sub	sp, #40	; 0x28
    5288:	0005      	movs	r5, r0
    velm_t t0, t1; 

    vsqr1271(&a[0], t0);                               // t0 = a0^2
    528a:	a905      	add	r1, sp, #20
    528c:	4e0e      	ldr	r6, [pc, #56]	; (52c8 <v2inv1271+0x44>)
    528e:	47b0      	blx	r6
    vsqr1271(&a[VWORDS_FIELD], t1);                    // t1 = a1^2 
    5290:	002c      	movs	r4, r5
    5292:	3414      	adds	r4, #20
    5294:	4669      	mov	r1, sp
    5296:	0020      	movs	r0, r4
    5298:	47b0      	blx	r6
    vadd1271(t0, t1, t0);                              // t0 = a0^2+a1^2 
    529a:	aa05      	add	r2, sp, #20
    529c:	4669      	mov	r1, sp
    529e:	0010      	movs	r0, r2
    52a0:	4b0a      	ldr	r3, [pc, #40]	; (52cc <v2inv1271+0x48>)
    52a2:	4798      	blx	r3
    vinv1271(t0);                                      // t0 = (a0^2+a1^2)^-1 
    52a4:	a805      	add	r0, sp, #20
    52a6:	4b0a      	ldr	r3, [pc, #40]	; (52d0 <v2inv1271+0x4c>)
    52a8:	4798      	blx	r3
    vneg1271(&a[VWORDS_FIELD]);                        // a = a0-i*a1 
    52aa:	0020      	movs	r0, r4
    52ac:	4b09      	ldr	r3, [pc, #36]	; (52d4 <v2inv1271+0x50>)
    52ae:	4798      	blx	r3
    vmul1271(&a[0], t0, &a[0]);
    52b0:	002a      	movs	r2, r5
    52b2:	a905      	add	r1, sp, #20
    52b4:	0028      	movs	r0, r5
    52b6:	4d08      	ldr	r5, [pc, #32]	; (52d8 <v2inv1271+0x54>)
    52b8:	47a8      	blx	r5
    vmul1271(&a[VWORDS_FIELD], t0, &a[VWORDS_FIELD]);  // a = (a0-i*a1)*(a0^2+a1^2)^-1
    52ba:	0022      	movs	r2, r4
    52bc:	a905      	add	r1, sp, #20
    52be:	0020      	movs	r0, r4
    52c0:	47a8      	blx	r5
}
    52c2:	b00a      	add	sp, #40	; 0x28
    52c4:	bd70      	pop	{r4, r5, r6, pc}
    52c6:	46c0      	nop			; (mov r8, r8)
    52c8:	00004231 	.word	0x00004231
    52cc:	00003f07 	.word	0x00003f07
    52d0:	00004639 	.word	0x00004639
    52d4:	00003f71 	.word	0x00003f71
    52d8:	00003f9d 	.word	0x00003f9d

000052dc <clear_words>:
  // It has been tested with MSVS 2013 and GNU GCC 4.6.3, 4.7.3, 4.8.2 and 4.8.4. Users are responsible for verifying correctness with different compilers.  
  // See "Compliant Solution (C99)" at https://www.securecoding.cert.org/confluence/display/c/MSC06-C.+Beware+of+compiler+optimizations 
	unsigned int i;
	volatile unsigned int *v = mem;

	for (i = 0; i < nwords; i++)
    52dc:	2900      	cmp	r1, #0
    52de:	d006      	beq.n	52ee <clear_words+0x12>
    52e0:	0003      	movs	r3, r0
    52e2:	0089      	lsls	r1, r1, #2
    52e4:	1840      	adds	r0, r0, r1
		v[i] = 0;
    52e6:	2200      	movs	r2, #0
    52e8:	c304      	stmia	r3!, {r2}
	for (i = 0; i < nwords; i++)
    52ea:	4283      	cmp	r3, r0
    52ec:	d1fc      	bne.n	52e8 <clear_words+0xc>
}
    52ee:	4770      	bx	lr

000052f0 <eccnorm>:
	fp2copy1271((felm_t*)&GENERATOR_y, P->y);    // Y1
}


__inline void eccnorm(vpoint_extproj_t P, vpoint_t Q)
{ // Normalize a projective point (X1:Y1:Z1), including full reduction
    52f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    52f2:	b083      	sub	sp, #12
    52f4:	0004      	movs	r4, r0
    52f6:	000d      	movs	r5, r1
  // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates    
  // Output: Q = (X1/Z1,Y1/Z1), corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    
    v2inv1271(P->z);                      // Z1 = Z1^-1
    52f8:	0007      	movs	r7, r0
    52fa:	3750      	adds	r7, #80	; 0x50
    52fc:	0038      	movs	r0, r7
    52fe:	4b0d      	ldr	r3, [pc, #52]	; (5334 <eccnorm+0x44>)
    5300:	4798      	blx	r3
    v2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    5302:	002a      	movs	r2, r5
    5304:	0039      	movs	r1, r7
    5306:	0020      	movs	r0, r4
    5308:	4e0b      	ldr	r6, [pc, #44]	; (5338 <eccnorm+0x48>)
    530a:	47b0      	blx	r6
    v2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    530c:	2328      	movs	r3, #40	; 0x28
    530e:	469c      	mov	ip, r3
    5310:	44ac      	add	ip, r5
    5312:	4663      	mov	r3, ip
    5314:	0020      	movs	r0, r4
    5316:	3028      	adds	r0, #40	; 0x28
    5318:	9301      	str	r3, [sp, #4]
    531a:	4662      	mov	r2, ip
    531c:	0039      	movs	r1, r7
    531e:	47b0      	blx	r6
    v2mod1271(Q->x, Q->x); 
    5320:	0029      	movs	r1, r5
    5322:	0028      	movs	r0, r5
    5324:	4c05      	ldr	r4, [pc, #20]	; (533c <eccnorm+0x4c>)
    5326:	47a0      	blx	r4
    v2mod1271(Q->y, Q->y); 
    5328:	9801      	ldr	r0, [sp, #4]
    532a:	0001      	movs	r1, r0
    532c:	47a0      	blx	r4
}
    532e:	b003      	add	sp, #12
    5330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5332:	46c0      	nop			; (mov r8, r8)
    5334:	00005285 	.word	0x00005285
    5338:	000051c5 	.word	0x000051c5
    533c:	000051a9 	.word	0x000051a9

00005340 <R1_to_R2>:


void R1_to_R2(vpoint_extproj_t P, vpoint_extproj_precomp_t Q) 
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT), where T = Ta*Tb
    5340:	b5f0      	push	{r4, r5, r6, r7, lr}
    5342:	b085      	sub	sp, #20
    5344:	0005      	movs	r5, r0
    5346:	000c      	movs	r4, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    
    v2add1271(P->ta, P->ta, Q->t2);              // T = 2*Ta
    5348:	3078      	adds	r0, #120	; 0x78
    534a:	2378      	movs	r3, #120	; 0x78
    534c:	469c      	mov	ip, r3
    534e:	448c      	add	ip, r1
    5350:	4663      	mov	r3, ip
    vadd1271(&a[0], &b[0], &c[0]);
    5352:	9301      	str	r3, [sp, #4]
    5354:	4662      	mov	r2, ip
    5356:	0001      	movs	r1, r0
    5358:	4e20      	ldr	r6, [pc, #128]	; (53dc <R1_to_R2+0x9c>)
    535a:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    535c:	002a      	movs	r2, r5
    535e:	328c      	adds	r2, #140	; 0x8c
    5360:	0010      	movs	r0, r2
    5362:	0022      	movs	r2, r4
    5364:	328c      	adds	r2, #140	; 0x8c
    5366:	0001      	movs	r1, r0
    5368:	47b0      	blx	r6
    v2add1271(P->x, P->y, Q->xy);                // QX = X+Y
    536a:	002f      	movs	r7, r5
    536c:	3728      	adds	r7, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    536e:	0022      	movs	r2, r4
    5370:	0039      	movs	r1, r7
    5372:	0028      	movs	r0, r5
    5374:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5376:	2214      	movs	r2, #20
    5378:	4694      	mov	ip, r2
    537a:	44ac      	add	ip, r5
    537c:	4663      	mov	r3, ip
    537e:	223c      	movs	r2, #60	; 0x3c
    5380:	4694      	mov	ip, r2
    5382:	44ac      	add	ip, r5
    5384:	4661      	mov	r1, ip
    5386:	0022      	movs	r2, r4
    5388:	3214      	adds	r2, #20
    538a:	9103      	str	r1, [sp, #12]
    538c:	9302      	str	r3, [sp, #8]
    538e:	0018      	movs	r0, r3
    5390:	47b0      	blx	r6
    v2sub1271(P->y, P->x, Q->yx);                // QY = Y-X 
    5392:	0022      	movs	r2, r4
    5394:	3228      	adds	r2, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    5396:	0029      	movs	r1, r5
    5398:	0038      	movs	r0, r7
    539a:	4f11      	ldr	r7, [pc, #68]	; (53e0 <R1_to_R2+0xa0>)
    539c:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    539e:	0022      	movs	r2, r4
    53a0:	323c      	adds	r2, #60	; 0x3c
    53a2:	9902      	ldr	r1, [sp, #8]
    53a4:	9803      	ldr	r0, [sp, #12]
    53a6:	47b8      	blx	r7
    v2mul1271(Q->t2, P->tb, Q->t2);              // T = 2*T
    53a8:	0029      	movs	r1, r5
    53aa:	31a0      	adds	r1, #160	; 0xa0
    53ac:	9801      	ldr	r0, [sp, #4]
    53ae:	0002      	movs	r2, r0
    53b0:	4f0c      	ldr	r7, [pc, #48]	; (53e4 <R1_to_R2+0xa4>)
    53b2:	47b8      	blx	r7
    v2add1271(P->z, P->z, Q->z2);                // QZ = 2*Z
    53b4:	002a      	movs	r2, r5
    53b6:	3250      	adds	r2, #80	; 0x50
    53b8:	0010      	movs	r0, r2
    53ba:	0022      	movs	r2, r4
    53bc:	3250      	adds	r2, #80	; 0x50
    vadd1271(&a[0], &b[0], &c[0]);
    53be:	0001      	movs	r1, r0
    53c0:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    53c2:	3564      	adds	r5, #100	; 0x64
    53c4:	0028      	movs	r0, r5
    53c6:	0022      	movs	r2, r4
    53c8:	3264      	adds	r2, #100	; 0x64
    53ca:	0029      	movs	r1, r5
    53cc:	47b0      	blx	r6
    v2mul1271(Q->t2, (digit_t*)&PARAMETER_d, Q->t2);       // QT = 2d*T
    53ce:	9801      	ldr	r0, [sp, #4]
    53d0:	0002      	movs	r2, r0
    53d2:	4905      	ldr	r1, [pc, #20]	; (53e8 <R1_to_R2+0xa8>)
    53d4:	47b8      	blx	r7
}
    53d6:	b005      	add	sp, #20
    53d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53da:	46c0      	nop			; (mov r8, r8)
    53dc:	00003f07 	.word	0x00003f07
    53e0:	00003f43 	.word	0x00003f43
    53e4:	000051c5 	.word	0x000051c5
    53e8:	0000ac08 	.word	0x0000ac08

000053ec <R1_to_R3>:


void R1_to_R3(vpoint_extproj_t P, vpoint_extproj_precomp_t Q)      
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T), where T = Ta*Tb 
    53ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    53ee:	b083      	sub	sp, #12
    53f0:	0004      	movs	r4, r0
    53f2:	000d      	movs	r5, r1
  // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (X1+Y1,Y1-X1,Z1,T1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates 
    
    v2add1271(P->x, P->y, Q->xy);            // XQ = (X1+Y1) 
    53f4:	0007      	movs	r7, r0
    53f6:	3728      	adds	r7, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    53f8:	000a      	movs	r2, r1
    53fa:	0039      	movs	r1, r7
    53fc:	4e15      	ldr	r6, [pc, #84]	; (5454 <R1_to_R3+0x68>)
    53fe:	47b0      	blx	r6
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5400:	2314      	movs	r3, #20
    5402:	469c      	mov	ip, r3
    5404:	44a4      	add	ip, r4
    5406:	4663      	mov	r3, ip
    5408:	223c      	movs	r2, #60	; 0x3c
    540a:	4694      	mov	ip, r2
    540c:	44a4      	add	ip, r4
    540e:	4661      	mov	r1, ip
    5410:	002a      	movs	r2, r5
    5412:	3214      	adds	r2, #20
    5414:	9101      	str	r1, [sp, #4]
    5416:	9300      	str	r3, [sp, #0]
    5418:	0018      	movs	r0, r3
    541a:	47b0      	blx	r6
    v2sub1271(P->y, P->x, Q->yx);            // YQ = (Y1-X1) 
    541c:	002a      	movs	r2, r5
    541e:	3228      	adds	r2, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    5420:	0021      	movs	r1, r4
    5422:	0038      	movs	r0, r7
    5424:	4f0c      	ldr	r7, [pc, #48]	; (5458 <R1_to_R3+0x6c>)
    5426:	47b8      	blx	r7
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5428:	002a      	movs	r2, r5
    542a:	323c      	adds	r2, #60	; 0x3c
    542c:	9900      	ldr	r1, [sp, #0]
    542e:	9801      	ldr	r0, [sp, #4]
    5430:	47b8      	blx	r7
    v2mul1271(P->ta, P->tb, Q->t2);          // TQ = T1
    5432:	002a      	movs	r2, r5
    5434:	3278      	adds	r2, #120	; 0x78
    5436:	0021      	movs	r1, r4
    5438:	31a0      	adds	r1, #160	; 0xa0
    543a:	0020      	movs	r0, r4
    543c:	3078      	adds	r0, #120	; 0x78
    543e:	4b07      	ldr	r3, [pc, #28]	; (545c <R1_to_R3+0x70>)
    5440:	4798      	blx	r3
    v2copy1271(P->z, Q->z2);                 // ZQ = Z1 
    5442:	0029      	movs	r1, r5
    5444:	3150      	adds	r1, #80	; 0x50
    5446:	0020      	movs	r0, r4
    5448:	3050      	adds	r0, #80	; 0x50
    544a:	4b05      	ldr	r3, [pc, #20]	; (5460 <R1_to_R3+0x74>)
    544c:	4798      	blx	r3
}
    544e:	b003      	add	sp, #12
    5450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5452:	46c0      	nop			; (mov r8, r8)
    5454:	00003f07 	.word	0x00003f07
    5458:	00003f43 	.word	0x00003f43
    545c:	000051c5 	.word	0x000051c5
    5460:	00004b27 	.word	0x00004b27

00005464 <R2_to_R4>:


void R2_to_R4(vpoint_extproj_precomp_t P, vpoint_extproj_t Q)      
{ // Conversion from representation (X+Y,Y-X,2Z,2dT) to (2X,2Y,2Z,2dT) 
    5464:	b5f0      	push	{r4, r5, r6, r7, lr}
    5466:	b083      	sub	sp, #12
    5468:	0006      	movs	r6, r0
    546a:	000d      	movs	r5, r1
  // Input:  P = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: Q = (2X1,2Y1,2Z1) corresponding to (X1:Y1:Z1) in twisted Edwards coordinates 
    
    v2sub1271(P->xy, P->yx, Q->x);           // XQ = 2*X1
    546c:	0007      	movs	r7, r0
    546e:	3728      	adds	r7, #40	; 0x28
    vsub1271(&a[0], &b[0], &c[0]);
    5470:	000a      	movs	r2, r1
    5472:	0039      	movs	r1, r7
    5474:	4c15      	ldr	r4, [pc, #84]	; (54cc <R2_to_R4+0x68>)
    5476:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5478:	2314      	movs	r3, #20
    547a:	469c      	mov	ip, r3
    547c:	44b4      	add	ip, r6
    547e:	4663      	mov	r3, ip
    5480:	223c      	movs	r2, #60	; 0x3c
    5482:	4694      	mov	ip, r2
    5484:	44b4      	add	ip, r6
    5486:	4661      	mov	r1, ip
    5488:	002a      	movs	r2, r5
    548a:	3214      	adds	r2, #20
    548c:	9101      	str	r1, [sp, #4]
    548e:	9300      	str	r3, [sp, #0]
    5490:	0018      	movs	r0, r3
    5492:	47a0      	blx	r4
    v2add1271(P->xy, P->yx, Q->y);           // YQ = 2*Y1
    5494:	002c      	movs	r4, r5
    5496:	3428      	adds	r4, #40	; 0x28
    vadd1271(&a[0], &b[0], &c[0]);
    5498:	0022      	movs	r2, r4
    549a:	0039      	movs	r1, r7
    549c:	0030      	movs	r0, r6
    549e:	4f0c      	ldr	r7, [pc, #48]	; (54d0 <R2_to_R4+0x6c>)
    54a0:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    54a2:	002a      	movs	r2, r5
    54a4:	323c      	adds	r2, #60	; 0x3c
    54a6:	9901      	ldr	r1, [sp, #4]
    54a8:	9800      	ldr	r0, [sp, #0]
    54aa:	47b8      	blx	r7
    v2copy1271(P->z2, Q->z);                 // ZQ = 2*Z1
    54ac:	0029      	movs	r1, r5
    54ae:	3150      	adds	r1, #80	; 0x50
    54b0:	0030      	movs	r0, r6
    54b2:	3050      	adds	r0, #80	; 0x50
    54b4:	4b07      	ldr	r3, [pc, #28]	; (54d4 <R2_to_R4+0x70>)
    54b6:	4798      	blx	r3
    v2mod1271_incomplete(Q->x, Q->x);   
    54b8:	0029      	movs	r1, r5
    54ba:	0028      	movs	r0, r5
    54bc:	4d06      	ldr	r5, [pc, #24]	; (54d8 <R2_to_R4+0x74>)
    54be:	47a8      	blx	r5
    v2mod1271_incomplete(Q->y, Q->y);   
    54c0:	0021      	movs	r1, r4
    54c2:	0020      	movs	r0, r4
    54c4:	47a8      	blx	r5
}
    54c6:	b003      	add	sp, #12
    54c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54ca:	46c0      	nop			; (mov r8, r8)
    54cc:	00003f43 	.word	0x00003f43
    54d0:	00003f07 	.word	0x00003f07
    54d4:	00004b27 	.word	0x00004b27
    54d8:	0000518d 	.word	0x0000518d

000054dc <eccdouble>:


void eccdouble(vpoint_extproj_t P)
{ // Point doubling 2P
    54dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    54de:	b099      	sub	sp, #100	; 0x64
    54e0:	0007      	movs	r7, r0
  // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates
  // Output: 2P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    v2elm_t t1, t2; 
  
    v2sqr1271(P->x, t1);                              // t1 = X1^2 
    54e2:	a90e      	add	r1, sp, #56	; 0x38
    54e4:	4e2f      	ldr	r6, [pc, #188]	; (55a4 <eccdouble+0xc8>)
    54e6:	47b0      	blx	r6
    v2sqr1271(P->y, t2);                              // t2 = Y1^2
    54e8:	2328      	movs	r3, #40	; 0x28
    54ea:	469c      	mov	ip, r3
    54ec:	44bc      	add	ip, r7
    54ee:	4663      	mov	r3, ip
    54f0:	4664      	mov	r4, ip
    54f2:	a904      	add	r1, sp, #16
    54f4:	0018      	movs	r0, r3
    54f6:	47b0      	blx	r6
    vadd1271(&a[0], &b[0], &c[0]);
    54f8:	003a      	movs	r2, r7
    54fa:	9400      	str	r4, [sp, #0]
    54fc:	0021      	movs	r1, r4
    54fe:	0038      	movs	r0, r7
    5500:	4c29      	ldr	r4, [pc, #164]	; (55a8 <eccdouble+0xcc>)
    5502:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5504:	0038      	movs	r0, r7
    5506:	3014      	adds	r0, #20
    5508:	0039      	movs	r1, r7
    550a:	313c      	adds	r1, #60	; 0x3c
    550c:	0002      	movs	r2, r0
    550e:	47a0      	blx	r4
    v2add1271(P->x, P->y, P->x);                      // X = X1+Y1
    v2add1271(t1, t2, P->tb);                         // Tbfinal = X1^2+Y1^2 
    5510:	23a0      	movs	r3, #160	; 0xa0
    5512:	469c      	mov	ip, r3
    5514:	44bc      	add	ip, r7
    5516:	4663      	mov	r3, ip
    vadd1271(&a[0], &b[0], &c[0]);
    5518:	9301      	str	r3, [sp, #4]
    551a:	4662      	mov	r2, ip
    551c:	a904      	add	r1, sp, #16
    551e:	a80e      	add	r0, sp, #56	; 0x38
    5520:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5522:	21b4      	movs	r1, #180	; 0xb4
    5524:	468c      	mov	ip, r1
    5526:	44bc      	add	ip, r7
    5528:	4661      	mov	r1, ip
    552a:	9103      	str	r1, [sp, #12]
    552c:	4662      	mov	r2, ip
    552e:	a809      	add	r0, sp, #36	; 0x24
    5530:	0001      	movs	r1, r0
    5532:	a813      	add	r0, sp, #76	; 0x4c
    5534:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    5536:	aa0e      	add	r2, sp, #56	; 0x38
    5538:	0011      	movs	r1, r2
    553a:	a804      	add	r0, sp, #16
    553c:	4d1b      	ldr	r5, [pc, #108]	; (55ac <eccdouble+0xd0>)
    553e:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5540:	aa13      	add	r2, sp, #76	; 0x4c
    5542:	0011      	movs	r1, r2
    5544:	a809      	add	r0, sp, #36	; 0x24
    5546:	47a8      	blx	r5
    v2sub1271(t2, t1, t1);                            // t1 = Y1^2-X1^2 
    v2sqr1271(P->z, t2);                              // t2 = Z1^2 
    5548:	2050      	movs	r0, #80	; 0x50
    554a:	4684      	mov	ip, r0
    554c:	44bc      	add	ip, r7
    554e:	4660      	mov	r0, ip
    5550:	a904      	add	r1, sp, #16
    5552:	9002      	str	r0, [sp, #8]
    5554:	47b0      	blx	r6
    v2sqr1271(P->x, P->ta);                           // Ta = (X1+Y1)^2 
    5556:	003c      	movs	r4, r7
    5558:	3478      	adds	r4, #120	; 0x78
    555a:	0021      	movs	r1, r4
    555c:	0038      	movs	r0, r7
    555e:	47b0      	blx	r6
    v2dblsub1271(t2, t1, t2);                         // t2 = 2Z1^2-(Y1^2-X1^2)
    5560:	aa04      	add	r2, sp, #16
    5562:	ae0e      	add	r6, sp, #56	; 0x38
    5564:	0031      	movs	r1, r6
    5566:	0010      	movs	r0, r2
    5568:	4b11      	ldr	r3, [pc, #68]	; (55b0 <eccdouble+0xd4>)
    556a:	4798      	blx	r3
    vsub1271(&a[0], &b[0], &c[0]);
    556c:	0022      	movs	r2, r4
    556e:	9e01      	ldr	r6, [sp, #4]
    5570:	0031      	movs	r1, r6
    5572:	0020      	movs	r0, r4
    5574:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5576:	003b      	movs	r3, r7
    5578:	338c      	adds	r3, #140	; 0x8c
    557a:	0018      	movs	r0, r3
    557c:	001a      	movs	r2, r3
    557e:	9903      	ldr	r1, [sp, #12]
    5580:	47a8      	blx	r5
    v2sub1271(P->ta, P->tb, P->ta);                   // Tafinal = 2X1*Y1 = (X1+Y1)^2-(X1^2+Y1^2)
    v2mul1271(t1, P->tb, P->y);                       // Yfinal = (X1^2+Y1^2)(Y1^2-X1^2) 
    5582:	9a00      	ldr	r2, [sp, #0]
    5584:	0031      	movs	r1, r6
    5586:	ab0e      	add	r3, sp, #56	; 0x38
    5588:	0018      	movs	r0, r3
    558a:	4d0a      	ldr	r5, [pc, #40]	; (55b4 <eccdouble+0xd8>)
    558c:	47a8      	blx	r5
    v2mul1271(t2, P->ta, P->x);                       // Xfinal = 2X1*Y1*[2Z1^2-(Y1^2-X1^2)]
    558e:	003a      	movs	r2, r7
    5590:	0021      	movs	r1, r4
    5592:	a804      	add	r0, sp, #16
    5594:	47a8      	blx	r5
    v2mul1271(t1, t2, P->z);                          // Zfinal = (Y1^2-X1^2)[2Z1^2-(Y1^2-X1^2)] 
    5596:	9a02      	ldr	r2, [sp, #8]
    5598:	a904      	add	r1, sp, #16
    559a:	a80e      	add	r0, sp, #56	; 0x38
    559c:	47a8      	blx	r5
}
    559e:	b019      	add	sp, #100	; 0x64
    55a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55a2:	46c0      	nop			; (mov r8, r8)
    55a4:	00005239 	.word	0x00005239
    55a8:	00003f07 	.word	0x00003f07
    55ac:	00003f43 	.word	0x00003f43
    55b0:	00005025 	.word	0x00005025
    55b4:	000051c5 	.word	0x000051c5

000055b8 <eccadd_core>:


__inline void eccadd_core(vpoint_extproj_precomp_t P, vpoint_extproj_precomp_t Q, vpoint_extproj_t R)      
{ // Basic point addition R = P+Q or R = P+P
    55b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ba:	b09b      	sub	sp, #108	; 0x6c
    55bc:	0006      	movs	r6, r0
    55be:	000f      	movs	r7, r1
    55c0:	0015      	movs	r5, r2
  //         Q = (X2+Y2,Y2-X2,Z2,T2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates    
  // Output: R = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    v2elm_t t1, t2; 
          
    v2mul1271(P->t2, Q->t2, R->z);                            // Z = 2dT1*T2 
    55c2:	2350      	movs	r3, #80	; 0x50
    55c4:	469c      	mov	ip, r3
    55c6:	4494      	add	ip, r2
    55c8:	4663      	mov	r3, ip
    55ca:	3178      	adds	r1, #120	; 0x78
    55cc:	3078      	adds	r0, #120	; 0x78
    55ce:	9301      	str	r3, [sp, #4]
    55d0:	4662      	mov	r2, ip
    55d2:	4c2f      	ldr	r4, [pc, #188]	; (5690 <eccadd_core+0xd8>)
    55d4:	47a0      	blx	r4
    v2mul1271(P->z2, Q->z2, t1);                              // t1 = 2Z1*Z2 
    55d6:	0039      	movs	r1, r7
    55d8:	3150      	adds	r1, #80	; 0x50
    55da:	0030      	movs	r0, r6
    55dc:	3050      	adds	r0, #80	; 0x50
    55de:	aa10      	add	r2, sp, #64	; 0x40
    55e0:	47a0      	blx	r4
    v2mul1271(P->xy, Q->xy, R->x);                            // X = (X1+Y1)(X2+Y2)
    55e2:	002a      	movs	r2, r5
    55e4:	0039      	movs	r1, r7
    55e6:	0030      	movs	r0, r6
    55e8:	47a0      	blx	r4
    v2mul1271(P->yx, Q->yx, R->y);                            // Y = (Y1-X1)(Y2-X2)
    55ea:	2228      	movs	r2, #40	; 0x28
    55ec:	4694      	mov	ip, r2
    55ee:	44ac      	add	ip, r5
    55f0:	4662      	mov	r2, ip
    55f2:	0039      	movs	r1, r7
    55f4:	3128      	adds	r1, #40	; 0x28
    55f6:	0030      	movs	r0, r6
    55f8:	3028      	adds	r0, #40	; 0x28
    55fa:	9202      	str	r2, [sp, #8]
    55fc:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    55fe:	aa06      	add	r2, sp, #24
    5600:	9f01      	ldr	r7, [sp, #4]
    5602:	0039      	movs	r1, r7
    5604:	a810      	add	r0, sp, #64	; 0x40
    5606:	4e23      	ldr	r6, [pc, #140]	; (5694 <eccadd_core+0xdc>)
    5608:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    560a:	2364      	movs	r3, #100	; 0x64
    560c:	469c      	mov	ip, r3
    560e:	44ac      	add	ip, r5
    5610:	4663      	mov	r3, ip
    5612:	aa0b      	add	r2, sp, #44	; 0x2c
    5614:	9303      	str	r3, [sp, #12]
    5616:	4661      	mov	r1, ip
    5618:	a815      	add	r0, sp, #84	; 0x54
    561a:	47b0      	blx	r6
    vadd1271(&a[0], &b[0], &c[0]);
    561c:	a810      	add	r0, sp, #64	; 0x40
    561e:	0002      	movs	r2, r0
    5620:	9701      	str	r7, [sp, #4]
    5622:	0039      	movs	r1, r7
    5624:	4f1c      	ldr	r7, [pc, #112]	; (5698 <eccadd_core+0xe0>)
    5626:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5628:	a815      	add	r0, sp, #84	; 0x54
    562a:	0002      	movs	r2, r0
    562c:	9903      	ldr	r1, [sp, #12]
    562e:	47b8      	blx	r7
    v2sub1271(t1, R->z, t2);                                  // t2 = theta
    v2add1271(t1, R->z, t1);                                  // t1 = alpha
    v2sub1271(R->x, R->y, R->tb);                             // Tbfinal = beta
    5630:	23a0      	movs	r3, #160	; 0xa0
    5632:	469c      	mov	ip, r3
    5634:	44ac      	add	ip, r5
    5636:	4663      	mov	r3, ip
    vsub1271(&a[0], &b[0], &c[0]);
    5638:	9303      	str	r3, [sp, #12]
    563a:	4662      	mov	r2, ip
    563c:	9902      	ldr	r1, [sp, #8]
    563e:	0028      	movs	r0, r5
    5640:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5642:	2114      	movs	r1, #20
    5644:	468c      	mov	ip, r1
    5646:	44ac      	add	ip, r5
    5648:	4660      	mov	r0, ip
    564a:	213c      	movs	r1, #60	; 0x3c
    564c:	468c      	mov	ip, r1
    564e:	44ac      	add	ip, r5
    5650:	4661      	mov	r1, ip
    5652:	002a      	movs	r2, r5
    5654:	32b4      	adds	r2, #180	; 0xb4
    5656:	9105      	str	r1, [sp, #20]
    5658:	9004      	str	r0, [sp, #16]
    565a:	47b0      	blx	r6
    v2add1271(R->x, R->y, R->ta);                             // Tafinal = omega
    565c:	002e      	movs	r6, r5
    565e:	3678      	adds	r6, #120	; 0x78
    vadd1271(&a[0], &b[0], &c[0]);
    5660:	0032      	movs	r2, r6
    5662:	9902      	ldr	r1, [sp, #8]
    5664:	0028      	movs	r0, r5
    5666:	47b8      	blx	r7
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5668:	002a      	movs	r2, r5
    566a:	328c      	adds	r2, #140	; 0x8c
    566c:	9905      	ldr	r1, [sp, #20]
    566e:	9804      	ldr	r0, [sp, #16]
    5670:	47b8      	blx	r7
    v2mul1271(R->tb, t2, R->x);                               // Xfinal = beta*theta
    5672:	002a      	movs	r2, r5
    5674:	a906      	add	r1, sp, #24
    5676:	9803      	ldr	r0, [sp, #12]
    5678:	47a0      	blx	r4
    v2mul1271(t1, t2, R->z);                                  // Zfinal = theta*alpha
    567a:	9a01      	ldr	r2, [sp, #4]
    567c:	a906      	add	r1, sp, #24
    567e:	a810      	add	r0, sp, #64	; 0x40
    5680:	47a0      	blx	r4
    v2mul1271(R->ta, t1, R->y);                               // Yfinal = alpha*omega
    5682:	9a02      	ldr	r2, [sp, #8]
    5684:	a910      	add	r1, sp, #64	; 0x40
    5686:	0030      	movs	r0, r6
    5688:	47a0      	blx	r4
}
    568a:	b01b      	add	sp, #108	; 0x6c
    568c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	000051c5 	.word	0x000051c5
    5694:	00003f43 	.word	0x00003f43
    5698:	00003f07 	.word	0x00003f07

0000569c <eccadd>:


void eccadd(vpoint_extproj_precomp_t Q, vpoint_extproj_t P)      
{ // Complete point addition P = P+Q or P = P+P
    569c:	b5f0      	push	{r4, r5, r6, r7, lr}
    569e:	46de      	mov	lr, fp
    56a0:	b500      	push	{lr}
    56a2:	b0ae      	sub	sp, #184	; 0xb8
    56a4:	0007      	movs	r7, r0
    56a6:	000d      	movs	r5, r1
  // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal, 
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    vpoint_precomp_t R;
    v2elm_t t1; 

    v2add1271(P->y, P->x, R->xy);            // XR = (X1+Y1)
    56a8:	2328      	movs	r3, #40	; 0x28
    56aa:	469c      	mov	ip, r3
    56ac:	448c      	add	ip, r1
    56ae:	4663      	mov	r3, ip
    56b0:	4666      	mov	r6, ip
    vadd1271(&a[0], &b[0], &c[0]);
    56b2:	aa10      	add	r2, sp, #64	; 0x40
    56b4:	0018      	movs	r0, r3
    56b6:	4c3a      	ldr	r4, [pc, #232]	; (57a0 <eccadd+0x104>)
    56b8:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    56ba:	233c      	movs	r3, #60	; 0x3c
    56bc:	469c      	mov	ip, r3
    56be:	44ac      	add	ip, r5
    56c0:	4663      	mov	r3, ip
    56c2:	2214      	movs	r2, #20
    56c4:	4694      	mov	ip, r2
    56c6:	44ac      	add	ip, r5
    56c8:	4661      	mov	r1, ip
    56ca:	aa15      	add	r2, sp, #84	; 0x54
    56cc:	9102      	str	r1, [sp, #8]
    56ce:	9301      	str	r3, [sp, #4]
    56d0:	0018      	movs	r0, r3
    56d2:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    56d4:	aa1a      	add	r2, sp, #104	; 0x68
    56d6:	0029      	movs	r1, r5
    56d8:	9603      	str	r6, [sp, #12]
    56da:	0030      	movs	r0, r6
    56dc:	4e31      	ldr	r6, [pc, #196]	; (57a4 <eccadd+0x108>)
    56de:	46b3      	mov	fp, r6
    56e0:	47b0      	blx	r6
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    56e2:	aa1f      	add	r2, sp, #124	; 0x7c
    56e4:	9902      	ldr	r1, [sp, #8]
    56e6:	9801      	ldr	r0, [sp, #4]
    56e8:	47b0      	blx	r6
    v2sub1271(P->y, P->x, R->yx);            // YR = (Y1-X1)
    v2mul1271(P->ta, P->tb, R->t2);          // TR = T1 
    56ea:	2078      	movs	r0, #120	; 0x78
    56ec:	4684      	mov	ip, r0
    56ee:	44ac      	add	ip, r5
    56f0:	4660      	mov	r0, ip
    56f2:	22a0      	movs	r2, #160	; 0xa0
    56f4:	4694      	mov	ip, r2
    56f6:	44ac      	add	ip, r5
    56f8:	4661      	mov	r1, ip
    56fa:	aa24      	add	r2, sp, #144	; 0x90
    56fc:	9105      	str	r1, [sp, #20]
    56fe:	9004      	str	r0, [sp, #16]
    5700:	4e29      	ldr	r6, [pc, #164]	; (57a8 <eccadd+0x10c>)
    5702:	47b0      	blx	r6
    v2mul1271(Q->z2, P->z, t1);              // t1 = 2Z1*Z2      
    5704:	2350      	movs	r3, #80	; 0x50
    5706:	469c      	mov	ip, r3
    5708:	44ac      	add	ip, r5
    570a:	4663      	mov	r3, ip
    570c:	0038      	movs	r0, r7
    570e:	3050      	adds	r0, #80	; 0x50
    5710:	aa06      	add	r2, sp, #24
    5712:	9300      	str	r3, [sp, #0]
    5714:	4661      	mov	r1, ip
    5716:	47b0      	blx	r6
    v2mul1271(Q->t2, R->t2, P->z);           // Z = 2dT1*T2 
    5718:	0038      	movs	r0, r7
    571a:	3078      	adds	r0, #120	; 0x78
    571c:	9a00      	ldr	r2, [sp, #0]
    571e:	a924      	add	r1, sp, #144	; 0x90
    5720:	47b0      	blx	r6
    v2mul1271(Q->xy, R->xy, P->x);           // X = (X1+Y1)(X2+Y2)
    5722:	002a      	movs	r2, r5
    5724:	a910      	add	r1, sp, #64	; 0x40
    5726:	0038      	movs	r0, r7
    5728:	47b0      	blx	r6
    v2mul1271(Q->yx, R->yx, P->y);           // Y = (Y1-X1)(Y2-X2)
    572a:	3728      	adds	r7, #40	; 0x28
    572c:	0038      	movs	r0, r7
    572e:	9a03      	ldr	r2, [sp, #12]
    5730:	a91a      	add	r1, sp, #104	; 0x68
    5732:	47b0      	blx	r6
    vsub1271(&a[0], &b[0], &c[0]);
    5734:	aa24      	add	r2, sp, #144	; 0x90
    5736:	9900      	ldr	r1, [sp, #0]
    5738:	a806      	add	r0, sp, #24
    573a:	47d8      	blx	fp
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    573c:	002f      	movs	r7, r5
    573e:	3764      	adds	r7, #100	; 0x64
    5740:	aa29      	add	r2, sp, #164	; 0xa4
    5742:	0039      	movs	r1, r7
    5744:	a80b      	add	r0, sp, #44	; 0x2c
    5746:	47d8      	blx	fp
    vadd1271(&a[0], &b[0], &c[0]);
    5748:	aa06      	add	r2, sp, #24
    574a:	9900      	ldr	r1, [sp, #0]
    574c:	0010      	movs	r0, r2
    574e:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5750:	aa0b      	add	r2, sp, #44	; 0x2c
    5752:	0039      	movs	r1, r7
    5754:	0010      	movs	r0, r2
    5756:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    5758:	9a05      	ldr	r2, [sp, #20]
    575a:	9f03      	ldr	r7, [sp, #12]
    575c:	0039      	movs	r1, r7
    575e:	0028      	movs	r0, r5
    5760:	47d8      	blx	fp
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5762:	002a      	movs	r2, r5
    5764:	32b4      	adds	r2, #180	; 0xb4
    5766:	9901      	ldr	r1, [sp, #4]
    5768:	9802      	ldr	r0, [sp, #8]
    576a:	47d8      	blx	fp
    vadd1271(&a[0], &b[0], &c[0]);
    576c:	9a04      	ldr	r2, [sp, #16]
    576e:	0039      	movs	r1, r7
    5770:	0028      	movs	r0, r5
    5772:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5774:	002a      	movs	r2, r5
    5776:	328c      	adds	r2, #140	; 0x8c
    5778:	9901      	ldr	r1, [sp, #4]
    577a:	9802      	ldr	r0, [sp, #8]
    577c:	47a0      	blx	r4
    v2sub1271(t1, P->z, R->t2);              // TR = theta
    v2add1271(t1, P->z, t1);                 // t1 = alpha
    v2sub1271(P->x, P->y, P->tb);            // Tbfinal = beta
    v2add1271(P->x, P->y, P->ta);            // Tafinal = omega
    v2mul1271(P->tb, R->t2, P->x);           // Xfinal = beta*theta
    577e:	002a      	movs	r2, r5
    5780:	a924      	add	r1, sp, #144	; 0x90
    5782:	9805      	ldr	r0, [sp, #20]
    5784:	47b0      	blx	r6
    v2mul1271(t1, R->t2, P->z);              // Zfinal = theta*alpha
    5786:	9a00      	ldr	r2, [sp, #0]
    5788:	a924      	add	r1, sp, #144	; 0x90
    578a:	a806      	add	r0, sp, #24
    578c:	47b0      	blx	r6
    v2mul1271(P->ta, t1, P->y);              // Yfinal = alpha*omega
    578e:	003a      	movs	r2, r7
    5790:	a906      	add	r1, sp, #24
    5792:	9804      	ldr	r0, [sp, #16]
    5794:	47b0      	blx	r6
}
    5796:	b02e      	add	sp, #184	; 0xb8
    5798:	bc04      	pop	{r2}
    579a:	4693      	mov	fp, r2
    579c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    579e:	46c0      	nop			; (mov r8, r8)
    57a0:	00003f07 	.word	0x00003f07
    57a4:	00003f43 	.word	0x00003f43
    57a8:	000051c5 	.word	0x000051c5

000057ac <point_setup>:


void point_setup(point_t P, vpoint_extproj_t Q)
{ // Point conversion to vectorized representation (X,Y,Z,Ta,Tb) 
    57ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57ae:	0005      	movs	r5, r0
    57b0:	000c      	movs	r4, r1
  // Input: P = (x,y) in affine coordinates
  // Output: P = (X,Y,1,Ta,Tb), where Ta=X, Tb=Y and T=Ta*Tb, corresponding to (X:Y:Z:T) in extended twisted Edwards coordinates

    from_std_to_ext(P->x, Q->x);
    57b2:	4f0c      	ldr	r7, [pc, #48]	; (57e4 <point_setup+0x38>)
    57b4:	47b8      	blx	r7
    from_std_to_ext(P->y, Q->y);
    57b6:	0026      	movs	r6, r4
    57b8:	3628      	adds	r6, #40	; 0x28
    57ba:	0028      	movs	r0, r5
    57bc:	3020      	adds	r0, #32
    57be:	0031      	movs	r1, r6
    57c0:	47b8      	blx	r7
    v2copy1271(Q->x, Q->ta);              // Ta = X1
    57c2:	0021      	movs	r1, r4
    57c4:	3178      	adds	r1, #120	; 0x78
    57c6:	0020      	movs	r0, r4
    57c8:	4d07      	ldr	r5, [pc, #28]	; (57e8 <point_setup+0x3c>)
    57ca:	47a8      	blx	r5
    v2copy1271(Q->y, Q->tb);              // Tb = Y1
    57cc:	0021      	movs	r1, r4
    57ce:	31a0      	adds	r1, #160	; 0xa0
    57d0:	0030      	movs	r0, r6
    57d2:	47a8      	blx	r5
    v2zero1271(Q->z); Q->z[0]=1;          // Z1 = 1
    57d4:	0020      	movs	r0, r4
    57d6:	3050      	adds	r0, #80	; 0x50
    57d8:	4b04      	ldr	r3, [pc, #16]	; (57ec <point_setup+0x40>)
    57da:	4798      	blx	r3
    57dc:	2301      	movs	r3, #1
    57de:	6523      	str	r3, [r4, #80]	; 0x50
}
    57e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57e2:	46c0      	nop			; (mov r8, r8)
    57e4:	00004781 	.word	0x00004781
    57e8:	00004b27 	.word	0x00004b27
    57ec:	00004fcd 	.word	0x00004fcd

000057f0 <ecc_point_validate>:


bool ecc_point_validate(vpoint_extproj_t P)
{ // Point validation: check if point lies on the curve
    57f0:	b530      	push	{r4, r5, lr}
    57f2:	b09f      	sub	sp, #124	; 0x7c
    57f4:	0005      	movs	r5, r0
  // Output: TRUE (1) if point lies on the curve E: -x^2+y^2-1-dx^2*y^2 = 0, FALSE (0) otherwise.
  // SECURITY NOTE: this function does not run in constant time (input point P is assumed to be public).
    v2elm_t t1, t2, t3;
    unsigned int i;

    v2sqr1271(P->y, t1);  
    57f6:	3028      	adds	r0, #40	; 0x28
    57f8:	a914      	add	r1, sp, #80	; 0x50
    57fa:	4c21      	ldr	r4, [pc, #132]	; (5880 <ecc_point_validate+0x90>)
    57fc:	47a0      	blx	r4
    v2sqr1271(P->x, t2);
    57fe:	a90a      	add	r1, sp, #40	; 0x28
    5800:	0028      	movs	r0, r5
    5802:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    5804:	466a      	mov	r2, sp
    5806:	a90a      	add	r1, sp, #40	; 0x28
    5808:	a814      	add	r0, sp, #80	; 0x50
    580a:	4c1e      	ldr	r4, [pc, #120]	; (5884 <ecc_point_validate+0x94>)
    580c:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    580e:	aa05      	add	r2, sp, #20
    5810:	a90f      	add	r1, sp, #60	; 0x3c
    5812:	a819      	add	r0, sp, #100	; 0x64
    5814:	47a0      	blx	r4
    v2sub1271(t1, t2, t3);                    // -x^2 + y^2 
    v2mul1271(t1, t2, t1);                    // x^2*y^2
    5816:	aa14      	add	r2, sp, #80	; 0x50
    5818:	a90a      	add	r1, sp, #40	; 0x28
    581a:	0010      	movs	r0, r2
    581c:	4d1a      	ldr	r5, [pc, #104]	; (5888 <ecc_point_validate+0x98>)
    581e:	47a8      	blx	r5
    v2mul1271((digit_t*)&PARAMETER_d, t1, t2);          // dx^2*y^2
    5820:	aa0a      	add	r2, sp, #40	; 0x28
    5822:	a914      	add	r1, sp, #80	; 0x50
    5824:	4819      	ldr	r0, [pc, #100]	; (588c <ecc_point_validate+0x9c>)
    5826:	47a8      	blx	r5
    v2zero1271(t1);  t1[0] = 1;               // t1 = 1
    5828:	a814      	add	r0, sp, #80	; 0x50
    582a:	4b19      	ldr	r3, [pc, #100]	; (5890 <ecc_point_validate+0xa0>)
    582c:	4798      	blx	r3
    582e:	2301      	movs	r3, #1
    5830:	9314      	str	r3, [sp, #80]	; 0x50
    vadd1271(&a[0], &b[0], &c[0]);
    5832:	aa0a      	add	r2, sp, #40	; 0x28
    5834:	a914      	add	r1, sp, #80	; 0x50
    5836:	0010      	movs	r0, r2
    5838:	4d16      	ldr	r5, [pc, #88]	; (5894 <ecc_point_validate+0xa4>)
    583a:	47a8      	blx	r5
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    583c:	aa0f      	add	r2, sp, #60	; 0x3c
    583e:	a919      	add	r1, sp, #100	; 0x64
    5840:	0010      	movs	r0, r2
    5842:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    5844:	aa14      	add	r2, sp, #80	; 0x50
    5846:	a90a      	add	r1, sp, #40	; 0x28
    5848:	4668      	mov	r0, sp
    584a:	47a0      	blx	r4
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    584c:	aa19      	add	r2, sp, #100	; 0x64
    584e:	a90f      	add	r1, sp, #60	; 0x3c
    5850:	a805      	add	r0, sp, #20
    5852:	47a0      	blx	r4
    v2add1271(t2, t1, t2);                    // 1 + dx^2*y^2
    v2sub1271(t3, t2, t1);                    // -x^2 + y^2 - 1 - dx^2*y^2
    v2mod1271(t1, t1);
    5854:	a914      	add	r1, sp, #80	; 0x50
    5856:	0008      	movs	r0, r1
    5858:	4b0f      	ldr	r3, [pc, #60]	; (5898 <ecc_point_validate+0xa8>)
    585a:	4798      	blx	r3
    
    for (i = 0; i < 2*VWORDS_FIELD-1; i++) {
        if (t1[i] != 0) return false;
    585c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    585e:	2b00      	cmp	r3, #0
    5860:	d10a      	bne.n	5878 <ecc_point_validate+0x88>
    5862:	ab14      	add	r3, sp, #80	; 0x50
    5864:	aa1c      	add	r2, sp, #112	; 0x70
    5866:	6859      	ldr	r1, [r3, #4]
    5868:	2900      	cmp	r1, #0
    586a:	d107      	bne.n	587c <ecc_point_validate+0x8c>
    586c:	3304      	adds	r3, #4
    for (i = 0; i < 2*VWORDS_FIELD-1; i++) {
    586e:	4293      	cmp	r3, r2
    5870:	d1f9      	bne.n	5866 <ecc_point_validate+0x76>
    }
    return true; 
    5872:	2001      	movs	r0, #1
}
    5874:	b01f      	add	sp, #124	; 0x7c
    5876:	bd30      	pop	{r4, r5, pc}
        if (t1[i] != 0) return false;
    5878:	2000      	movs	r0, #0
    587a:	e7fb      	b.n	5874 <ecc_point_validate+0x84>
    587c:	2000      	movs	r0, #0
    587e:	e7f9      	b.n	5874 <ecc_point_validate+0x84>
    5880:	00005239 	.word	0x00005239
    5884:	00003f43 	.word	0x00003f43
    5888:	000051c5 	.word	0x000051c5
    588c:	0000ac08 	.word	0x0000ac08
    5890:	00004fcd 	.word	0x00004fcd
    5894:	00003f07 	.word	0x00003f07
    5898:	000051a9 	.word	0x000051a9

0000589c <mLSB_set_recode>:
    return true;
}


void mLSB_set_recode(uint64_t* scalar, unsigned int *digits)
{ // Computes the modified LSB-set representation of a scalar
    589c:	b5f0      	push	{r4, r5, r6, r7, lr}
    589e:	46de      	mov	lr, fp
    58a0:	4657      	mov	r7, sl
    58a2:	464e      	mov	r6, r9
    58a4:	4645      	mov	r5, r8
    58a6:	b5e0      	push	{r5, r6, r7, lr}
    58a8:	b087      	sub	sp, #28
    58aa:	0005      	movs	r5, r0
    58ac:	468b      	mov	fp, r1
  //         where l = d*w and d = ceil(bitlength(order)/(w*v))*v. The values v and w are fixed and must be in the range [1, 10] (see FourQ.h); they determine the size 
  //         of the precomputed table "FIXED_BASE_TABLE" used by ecc_mul_fixed(). 
    unsigned int i, j, d = D_FIXEDBASE, l = L_FIXEDBASE;
    uint64_t temp, carry;
    
    digits[d-1] = 0;
    58ae:	2200      	movs	r2, #0
    58b0:	23c4      	movs	r3, #196	; 0xc4
    58b2:	50ca      	str	r2, [r1, r3]
    58b4:	9004      	str	r0, [sp, #16]
    58b6:	0004      	movs	r4, r0
    58b8:	3418      	adds	r4, #24
    58ba:	0003      	movs	r3, r0

    // Shift scalar to the right by 1   
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
        SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    58bc:	685a      	ldr	r2, [r3, #4]
    58be:	07d0      	lsls	r0, r2, #31
    58c0:	6819      	ldr	r1, [r3, #0]
    58c2:	0849      	lsrs	r1, r1, #1
    58c4:	4301      	orrs	r1, r0
    58c6:	0852      	lsrs	r2, r2, #1
    58c8:	6898      	ldr	r0, [r3, #8]
    58ca:	07c0      	lsls	r0, r0, #31
    58cc:	6019      	str	r1, [r3, #0]
    58ce:	4042      	eors	r2, r0
    58d0:	605a      	str	r2, [r3, #4]
    58d2:	3308      	adds	r3, #8
    for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    58d4:	42a3      	cmp	r3, r4
    58d6:	d1f1      	bne.n	58bc <mLSB_set_recode+0x20>
    58d8:	4699      	mov	r9, r3
    }
    scalar[NWORDS64_ORDER-1] >>= 1;
    58da:	69ea      	ldr	r2, [r5, #28]
    58dc:	07d1      	lsls	r1, r2, #31
    58de:	69ab      	ldr	r3, [r5, #24]
    58e0:	085b      	lsrs	r3, r3, #1
    58e2:	430b      	orrs	r3, r1
    58e4:	61ab      	str	r3, [r5, #24]
    58e6:	0852      	lsrs	r2, r2, #1
    58e8:	61ea      	str	r2, [r5, #28]
    58ea:	4659      	mov	r1, fp
    58ec:	23c4      	movs	r3, #196	; 0xc4
    58ee:	445b      	add	r3, fp
    58f0:	4698      	mov	r8, r3

    for (i = 0; i < (d-1); i++)
    {
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    58f2:	2301      	movs	r3, #1
    58f4:	469c      	mov	ip, r3
    58f6:	9600      	str	r6, [sp, #0]
    58f8:	9701      	str	r7, [sp, #4]
    58fa:	4648      	mov	r0, r9
    58fc:	e00a      	b.n	5914 <mLSB_set_recode+0x78>
                                                          // if scalar_(i+1) = 0 then digit_i = -1 (negative), else if scalar_(i+1) = 1 then digit_i = 0 (positive)
        // Shift scalar to the right by 1   
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    58fe:	69ef      	ldr	r7, [r5, #28]
    5900:	07fb      	lsls	r3, r7, #31
    5902:	69aa      	ldr	r2, [r5, #24]
    5904:	0852      	lsrs	r2, r2, #1
    5906:	431a      	orrs	r2, r3
    5908:	61aa      	str	r2, [r5, #24]
    590a:	087b      	lsrs	r3, r7, #1
    590c:	61eb      	str	r3, [r5, #28]
    590e:	3104      	adds	r1, #4
    for (i = 0; i < (d-1); i++)
    5910:	4541      	cmp	r1, r8
    5912:	d014      	beq.n	593e <mLSB_set_recode+0xa2>
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
    5914:	682b      	ldr	r3, [r5, #0]
    5916:	4662      	mov	r2, ip
    5918:	4013      	ands	r3, r2
    591a:	3b01      	subs	r3, #1
    591c:	600b      	str	r3, [r1, #0]
    591e:	9c04      	ldr	r4, [sp, #16]
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    5920:	6863      	ldr	r3, [r4, #4]
    5922:	07de      	lsls	r6, r3, #31
    5924:	6822      	ldr	r2, [r4, #0]
    5926:	0852      	lsrs	r2, r2, #1
    5928:	4332      	orrs	r2, r6
    592a:	085b      	lsrs	r3, r3, #1
    592c:	68a6      	ldr	r6, [r4, #8]
    592e:	07f6      	lsls	r6, r6, #31
    5930:	6022      	str	r2, [r4, #0]
    5932:	4073      	eors	r3, r6
    5934:	6063      	str	r3, [r4, #4]
    5936:	3408      	adds	r4, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    5938:	4284      	cmp	r4, r0
    593a:	d1f1      	bne.n	5920 <mLSB_set_recode+0x84>
    593c:	e7df      	b.n	58fe <mLSB_set_recode+0x62>
    593e:	9e00      	ldr	r6, [sp, #0]
    5940:	9f01      	ldr	r7, [sp, #4]
    5942:	23c8      	movs	r3, #200	; 0xc8
    5944:	445b      	add	r3, fp
    5946:	4698      	mov	r8, r3
    for (i = 0; i < (d-1); i++)
    5948:	2332      	movs	r3, #50	; 0x32
    594a:	2220      	movs	r2, #32
    594c:	4691      	mov	r9, r2
    594e:	44a9      	add	r9, r5
    5950:	46a2      	mov	sl, r4
    5952:	4644      	mov	r4, r8
    5954:	4698      	mov	r8, r3
    5956:	465b      	mov	r3, fp
    5958:	9305      	str	r3, [sp, #20]
    595a:	e007      	b.n	596c <mLSB_set_recode+0xd0>
    595c:	4681      	mov	r9, r0
    } 

    for (i = d; i < l; i++)
    595e:	2301      	movs	r3, #1
    5960:	469c      	mov	ip, r3
    5962:	44e0      	add	r8, ip
    5964:	3404      	adds	r4, #4
    5966:	4643      	mov	r3, r8
    5968:	2bfa      	cmp	r3, #250	; 0xfa
    596a:	d056      	beq.n	5a1a <mLSB_set_recode+0x17e>
    596c:	46a3      	mov	fp, r4
    {
        digits[i] = (unsigned int)(scalar[0] & 1);        // digits_i = k mod 2. Sign is determined by the "sign" row
    596e:	2301      	movs	r3, #1
    5970:	682a      	ldr	r2, [r5, #0]
    5972:	4013      	ands	r3, r2
    5974:	6023      	str	r3, [r4, #0]
    5976:	9904      	ldr	r1, [sp, #16]
    5978:	9600      	str	r6, [sp, #0]
    597a:	9701      	str	r7, [sp, #4]
    597c:	4657      	mov	r7, sl

        // Shift scalar to the right by 1  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
            SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
    597e:	684b      	ldr	r3, [r1, #4]
    5980:	07d8      	lsls	r0, r3, #31
    5982:	680a      	ldr	r2, [r1, #0]
    5984:	0852      	lsrs	r2, r2, #1
    5986:	4302      	orrs	r2, r0
    5988:	085b      	lsrs	r3, r3, #1
    598a:	6888      	ldr	r0, [r1, #8]
    598c:	07c0      	lsls	r0, r0, #31
    598e:	600a      	str	r2, [r1, #0]
    5990:	4043      	eors	r3, r0
    5992:	604b      	str	r3, [r1, #4]
    5994:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {
    5996:	42b9      	cmp	r1, r7
    5998:	d1f1      	bne.n	597e <mLSB_set_recode+0xe2>
    599a:	46ba      	mov	sl, r7
        }
        scalar[NWORDS64_ORDER-1] >>= 1;
    599c:	69ea      	ldr	r2, [r5, #28]
    599e:	07d1      	lsls	r1, r2, #31
    59a0:	69ab      	ldr	r3, [r5, #24]
    59a2:	085b      	lsrs	r3, r3, #1
    59a4:	430b      	orrs	r3, r1
    59a6:	61ab      	str	r3, [r5, #24]
    59a8:	0852      	lsrs	r2, r2, #1
    59aa:	61ea      	str	r2, [r5, #28]

        temp = (0 - digits[i-(i/d)*d]) & digits[i];       // if (digits_i=0 \/ 1) then temp = 0, else if (digits_i=-1) then temp = 1 
    59ac:	2132      	movs	r1, #50	; 0x32
    59ae:	4640      	mov	r0, r8
    59b0:	4b1d      	ldr	r3, [pc, #116]	; (5a28 <mLSB_set_recode+0x18c>)
    59b2:	4798      	blx	r3
    59b4:	0089      	lsls	r1, r1, #2
    59b6:	9b05      	ldr	r3, [sp, #20]
    59b8:	58cb      	ldr	r3, [r1, r3]
    59ba:	425b      	negs	r3, r3
    59bc:	465a      	mov	r2, fp
    59be:	6810      	ldr	r0, [r2, #0]
    59c0:	4018      	ands	r0, r3
    59c2:	4684      	mov	ip, r0
    59c4:	9002      	str	r0, [sp, #8]
    59c6:	2300      	movs	r3, #0
    59c8:	9303      	str	r3, [sp, #12]
            
        // floor(scalar/2) + temp
        scalar[0] = scalar[0] + temp;
    59ca:	9a02      	ldr	r2, [sp, #8]
    59cc:	9b03      	ldr	r3, [sp, #12]
    59ce:	6828      	ldr	r0, [r5, #0]
    59d0:	6869      	ldr	r1, [r5, #4]
    59d2:	1812      	adds	r2, r2, r0
    59d4:	414b      	adcs	r3, r1
    59d6:	0029      	movs	r1, r5
    59d8:	c10c      	stmia	r1!, {r2, r3}
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    59da:	9200      	str	r2, [sp, #0]
    59dc:	9301      	str	r3, [sp, #4]
    59de:	4253      	negs	r3, r2
    59e0:	9a00      	ldr	r2, [sp, #0]
    59e2:	4313      	orrs	r3, r2
    59e4:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    59e6:	2201      	movs	r2, #1
    59e8:	4053      	eors	r3, r2
        carry = (temp & (uint64_t)is_digit_zero_ct((digit_t)scalar[0]));       // carry = (scalar[0] < temp);
    59ea:	4660      	mov	r0, ip
    59ec:	4018      	ands	r0, r3
    59ee:	0006      	movs	r6, r0
    59f0:	2700      	movs	r7, #0
    59f2:	4648      	mov	r0, r9
        for (j = 1; j < NWORDS64_ORDER; j++)
        {
            scalar[j] = scalar[j] + carry; 
    59f4:	680a      	ldr	r2, [r1, #0]
    59f6:	684b      	ldr	r3, [r1, #4]
    59f8:	1992      	adds	r2, r2, r6
    59fa:	417b      	adcs	r3, r7
    59fc:	c10c      	stmia	r1!, {r2, r3}
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    59fe:	9200      	str	r2, [sp, #0]
    5a00:	9301      	str	r3, [sp, #4]
    5a02:	4253      	negs	r3, r2
    5a04:	9a00      	ldr	r2, [sp, #0]
    5a06:	4313      	orrs	r3, r2
    5a08:	0fdb      	lsrs	r3, r3, #31
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
    5a0a:	2201      	movs	r2, #1
    5a0c:	4053      	eors	r3, r2
            carry = (carry & (uint64_t)is_digit_zero_ct((digit_t)scalar[j]));  // carry = (scalar[j] < temp);
    5a0e:	4033      	ands	r3, r6
    5a10:	001e      	movs	r6, r3
    5a12:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    5a14:	4281      	cmp	r1, r0
    5a16:	d1ed      	bne.n	59f4 <mLSB_set_recode+0x158>
    5a18:	e7a0      	b.n	595c <mLSB_set_recode+0xc0>
        }
    } 
    return;              
}
    5a1a:	b007      	add	sp, #28
    5a1c:	bc3c      	pop	{r2, r3, r4, r5}
    5a1e:	4690      	mov	r8, r2
    5a20:	4699      	mov	r9, r3
    5a22:	46a2      	mov	sl, r4
    5a24:	46ab      	mov	fp, r5
    5a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a28:	00006c95 	.word	0x00006c95

00005a2c <ecc_mul_fixed>:
{ // Fixed-base scalar multiplication Q = k*G, where G is the generator. FIXED_BASE_TABLE stores v*2^(w-1) = 80 multiples of G.
    5a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a2e:	46de      	mov	lr, fp
    5a30:	4657      	mov	r7, sl
    5a32:	464e      	mov	r6, r9
    5a34:	4645      	mov	r5, r8
    5a36:	b5e0      	push	{r5, r6, r7, lr}
    5a38:	4cce      	ldr	r4, [pc, #824]	; (5d74 <ecc_mul_fixed+0x348>)
    5a3a:	44a5      	add	sp, r4
    5a3c:	0005      	movs	r5, r0
    5a3e:	9103      	str	r1, [sp, #12]
    unsigned int digit = 0, digits[NBITS_ORDER_PLUS_ONE+(W_FIXEDBASE*V_FIXEDBASE)-1] = {0}; 
    5a40:	ac85      	add	r4, sp, #532	; 0x214
    5a42:	4acd      	ldr	r2, [pc, #820]	; (5d78 <ecc_mul_fixed+0x34c>)
    5a44:	2100      	movs	r1, #0
    5a46:	0020      	movs	r0, r4
    5a48:	4bcc      	ldr	r3, [pc, #816]	; (5d7c <ecc_mul_fixed+0x350>)
    5a4a:	4798      	blx	r3
	modulo_order(k, temp);                                      // temp = k mod (order) 
    5a4c:	a97d      	add	r1, sp, #500	; 0x1f4
    5a4e:	0028      	movs	r0, r5
    5a50:	4bcb      	ldr	r3, [pc, #812]	; (5d80 <ecc_mul_fixed+0x354>)
    5a52:	4798      	blx	r3
	conversion_to_odd(temp, temp);                              // Converting scalar to odd using the prime subgroup order
    5a54:	a97d      	add	r1, sp, #500	; 0x1f4
    5a56:	0008      	movs	r0, r1
    5a58:	4bca      	ldr	r3, [pc, #808]	; (5d84 <ecc_mul_fixed+0x358>)
    5a5a:	4798      	blx	r3
	mLSB_set_recode((uint64_t*)temp, digits);                   // Scalar recoding
    5a5c:	a985      	add	r1, sp, #532	; 0x214
    5a5e:	a87d      	add	r0, sp, #500	; 0x1f4
    5a60:	4bc9      	ldr	r3, [pc, #804]	; (5d88 <ecc_mul_fixed+0x35c>)
    5a62:	4798      	blx	r3
    digit = digits[w*d-1];
    5a64:	23f9      	movs	r3, #249	; 0xf9
    5a66:	009b      	lsls	r3, r3, #2
        digit = 2*digit + digits[i];
    5a68:	58e2      	ldr	r2, [r4, r3]
    5a6a:	0052      	lsls	r2, r2, #1
    5a6c:	3bc8      	subs	r3, #200	; 0xc8
    5a6e:	58e3      	ldr	r3, [r4, r3]
    5a70:	18d2      	adds	r2, r2, r3
    5a72:	0052      	lsls	r2, r2, #1
    5a74:	2395      	movs	r3, #149	; 0x95
    5a76:	009b      	lsls	r3, r3, #2
    5a78:	58e3      	ldr	r3, [r4, r3]
    5a7a:	18d2      	adds	r2, r2, r3
    5a7c:	0052      	lsls	r2, r2, #1
    table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    5a7e:	23c4      	movs	r3, #196	; 0xc4
    5a80:	58e3      	ldr	r3, [r4, r3]
        digit = 2*digit + digits[i];
    5a82:	21c6      	movs	r1, #198	; 0xc6
    5a84:	0049      	lsls	r1, r1, #1
    5a86:	5861      	ldr	r1, [r4, r1]
    5a88:	1852      	adds	r2, r2, r1
    table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
    5a8a:	4cc0      	ldr	r4, [pc, #768]	; (5d8c <ecc_mul_fixed+0x360>)
    5a8c:	21f0      	movs	r1, #240	; 0xf0
    5a8e:	0149      	lsls	r1, r1, #5
    5a90:	1860      	adds	r0, r4, r1
    5a92:	a919      	add	r1, sp, #100	; 0x64
    5a94:	4dbe      	ldr	r5, [pc, #760]	; (5d90 <ecc_mul_fixed+0x364>)
    5a96:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    5a98:	aa37      	add	r2, sp, #220	; 0xdc
    5a9a:	a923      	add	r1, sp, #140	; 0x8c
    5a9c:	a819      	add	r0, sp, #100	; 0x64
    5a9e:	4dbd      	ldr	r5, [pc, #756]	; (5d94 <ecc_mul_fixed+0x368>)
    5aa0:	47a8      	blx	r5
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5aa2:	aa3c      	add	r2, sp, #240	; 0xf0
    5aa4:	a928      	add	r1, sp, #160	; 0xa0
    5aa6:	a81e      	add	r0, sp, #120	; 0x78
    5aa8:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    5aaa:	aa41      	add	r2, sp, #260	; 0x104
    5aac:	a923      	add	r1, sp, #140	; 0x8c
    5aae:	a819      	add	r0, sp, #100	; 0x64
    5ab0:	4db9      	ldr	r5, [pc, #740]	; (5d98 <ecc_mul_fixed+0x36c>)
    5ab2:	47a8      	blx	r5
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5ab4:	aa46      	add	r2, sp, #280	; 0x118
    5ab6:	a928      	add	r1, sp, #160	; 0xa0
    5ab8:	a81e      	add	r0, sp, #120	; 0x78
    5aba:	47a8      	blx	r5
    v2zero1271(Q->z); Q->z[0]=1;             // ZQ = 1
    5abc:	a84b      	add	r0, sp, #300	; 0x12c
    5abe:	4bb7      	ldr	r3, [pc, #732]	; (5d9c <ecc_mul_fixed+0x370>)
    5ac0:	4798      	blx	r3
    5ac2:	2301      	movs	r3, #1
    5ac4:	934b      	str	r3, [sp, #300]	; 0x12c
    v2div1271(Q->x);                         // XQ = x1
    5ac6:	a837      	add	r0, sp, #220	; 0xdc
    5ac8:	4db5      	ldr	r5, [pc, #724]	; (5da0 <ecc_mul_fixed+0x374>)
    5aca:	47a8      	blx	r5
    v2div1271(Q->y);                         // YQ = y1 
    5acc:	a841      	add	r0, sp, #260	; 0x104
    5ace:	47a8      	blx	r5
    v2copy1271(Q->x, Q->ta);                 // TaQ = x1
    5ad0:	a955      	add	r1, sp, #340	; 0x154
    5ad2:	a837      	add	r0, sp, #220	; 0xdc
    5ad4:	4db3      	ldr	r5, [pc, #716]	; (5da4 <ecc_mul_fixed+0x378>)
    5ad6:	47a8      	blx	r5
    v2copy1271(Q->y, Q->tb);                 // TbQ = y1
    5ad8:	a95f      	add	r1, sp, #380	; 0x17c
    5ada:	a841      	add	r0, sp, #260	; 0x104
    5adc:	47a8      	blx	r5
    5ade:	23b4      	movs	r3, #180	; 0xb4
    5ae0:	015b      	lsls	r3, r3, #5
    5ae2:	4698      	mov	r8, r3
    5ae4:	44a0      	add	r8, r4
    5ae6:	23a1      	movs	r3, #161	; 0xa1
    5ae8:	00db      	lsls	r3, r3, #3
    5aea:	446b      	add	r3, sp
    5aec:	469a      	mov	sl, r3
    5aee:	26bd      	movs	r6, #189	; 0xbd
        table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);   
    5af0:	4ba7      	ldr	r3, [pc, #668]	; (5d90 <ecc_mul_fixed+0x364>)
    5af2:	4699      	mov	r9, r3
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    5af4:	4dac      	ldr	r5, [pc, #688]	; (5da8 <ecc_mul_fixed+0x37c>)
    vadd1271(&a[0], &b[0], &c[0]);
    5af6:	4ca8      	ldr	r4, [pc, #672]	; (5d98 <ecc_mul_fixed+0x36c>)
    5af8:	46d3      	mov	fp, sl
    5afa:	46dc      	mov	ip, fp
        digit = digits[w*d-(j+1)*e-1];
    5afc:	465b      	mov	r3, fp
    5afe:	33c8      	adds	r3, #200	; 0xc8
    5b00:	681a      	ldr	r2, [r3, #0]
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)           
    5b02:	0033      	movs	r3, r6
    5b04:	0030      	movs	r0, r6
    5b06:	3864      	subs	r0, #100	; 0x64
    5b08:	4286      	cmp	r6, r0
    5b0a:	db08      	blt.n	5b1e <ecc_mul_fixed+0xf2>
    5b0c:	4659      	mov	r1, fp
            digit = 2*digit + digits[i];
    5b0e:	0052      	lsls	r2, r2, #1
    5b10:	680f      	ldr	r7, [r1, #0]
    5b12:	46ba      	mov	sl, r7
    5b14:	4452      	add	r2, sl
    5b16:	3b32      	subs	r3, #50	; 0x32
    5b18:	39c8      	subs	r1, #200	; 0xc8
        for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)           
    5b1a:	4298      	cmp	r0, r3
    5b1c:	ddf7      	ble.n	5b0e <ecc_mul_fixed+0xe2>
        table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);   
    5b1e:	4ba3      	ldr	r3, [pc, #652]	; (5dac <ecc_mul_fixed+0x380>)
    5b20:	4463      	add	r3, ip
    5b22:	681b      	ldr	r3, [r3, #0]
    5b24:	a919      	add	r1, sp, #100	; 0x64
    5b26:	4640      	mov	r0, r8
    5b28:	47c8      	blx	r9
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    5b2a:	aa55      	add	r2, sp, #340	; 0x154
    5b2c:	a95f      	add	r1, sp, #380	; 0x17c
    5b2e:	0010      	movs	r0, r2
    5b30:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    5b32:	aa05      	add	r2, sp, #20
    5b34:	a94b      	add	r1, sp, #300	; 0x12c
    5b36:	0008      	movs	r0, r1
    5b38:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5b3a:	aa0a      	add	r2, sp, #40	; 0x28
    5b3c:	a950      	add	r1, sp, #320	; 0x140
    5b3e:	0008      	movs	r0, r1
    5b40:	47a0      	blx	r4
    v2mul1271(P->ta, Q->t2, P->ta);                       // Ta = 2dT1*t2 
    5b42:	aa55      	add	r2, sp, #340	; 0x154
    5b44:	a92d      	add	r1, sp, #180	; 0xb4
    5b46:	0010      	movs	r0, r2
    5b48:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    5b4a:	aa4b      	add	r2, sp, #300	; 0x12c
    5b4c:	a941      	add	r1, sp, #260	; 0x104
    5b4e:	a837      	add	r0, sp, #220	; 0xdc
    5b50:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5b52:	aa50      	add	r2, sp, #320	; 0x140
    5b54:	a946      	add	r1, sp, #280	; 0x118
    5b56:	a83c      	add	r0, sp, #240	; 0xf0
    5b58:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    5b5a:	aa5f      	add	r2, sp, #380	; 0x17c
    5b5c:	a937      	add	r1, sp, #220	; 0xdc
    5b5e:	a841      	add	r0, sp, #260	; 0x104
    5b60:	4b8c      	ldr	r3, [pc, #560]	; (5d94 <ecc_mul_fixed+0x368>)
    5b62:	469a      	mov	sl, r3
    5b64:	4798      	blx	r3
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5b66:	aa64      	add	r2, sp, #400	; 0x190
    5b68:	a93c      	add	r1, sp, #240	; 0xf0
    5b6a:	a846      	add	r0, sp, #280	; 0x118
    5b6c:	47d0      	blx	sl
    vsub1271(&a[0], &b[0], &c[0]);
    5b6e:	aa0f      	add	r2, sp, #60	; 0x3c
    5b70:	a955      	add	r1, sp, #340	; 0x154
    5b72:	a805      	add	r0, sp, #20
    5b74:	47d0      	blx	sl
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5b76:	aa14      	add	r2, sp, #80	; 0x50
    5b78:	a95a      	add	r1, sp, #360	; 0x168
    5b7a:	a80a      	add	r0, sp, #40	; 0x28
    5b7c:	47d0      	blx	sl
    vadd1271(&a[0], &b[0], &c[0]);
    5b7e:	aa05      	add	r2, sp, #20
    5b80:	a955      	add	r1, sp, #340	; 0x154
    5b82:	0010      	movs	r0, r2
    5b84:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5b86:	aa0a      	add	r2, sp, #40	; 0x28
    5b88:	a95a      	add	r1, sp, #360	; 0x168
    5b8a:	0010      	movs	r0, r2
    5b8c:	47a0      	blx	r4
    v2mul1271(Q->xy, P->z, P->ta);                        // Ta = (X1+Y1)(x2+y2)
    5b8e:	aa55      	add	r2, sp, #340	; 0x154
    5b90:	a94b      	add	r1, sp, #300	; 0x12c
    5b92:	a819      	add	r0, sp, #100	; 0x64
    5b94:	47a8      	blx	r5
    v2mul1271(Q->yx, P->tb, P->x);                        // X = (Y1-X1)(y2-x2)
    5b96:	aa37      	add	r2, sp, #220	; 0xdc
    5b98:	a95f      	add	r1, sp, #380	; 0x17c
    5b9a:	a823      	add	r0, sp, #140	; 0x8c
    5b9c:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    5b9e:	aa5f      	add	r2, sp, #380	; 0x17c
    5ba0:	a937      	add	r1, sp, #220	; 0xdc
    5ba2:	a855      	add	r0, sp, #340	; 0x154
    5ba4:	47d0      	blx	sl
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5ba6:	aa64      	add	r2, sp, #400	; 0x190
    5ba8:	a93c      	add	r1, sp, #240	; 0xf0
    5baa:	a85a      	add	r0, sp, #360	; 0x168
    5bac:	47d0      	blx	sl
    vadd1271(&a[0], &b[0], &c[0]);
    5bae:	aa55      	add	r2, sp, #340	; 0x154
    5bb0:	a937      	add	r1, sp, #220	; 0xdc
    5bb2:	0010      	movs	r0, r2
    5bb4:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5bb6:	aa5a      	add	r2, sp, #360	; 0x168
    5bb8:	a93c      	add	r1, sp, #240	; 0xf0
    5bba:	0010      	movs	r0, r2
    5bbc:	47a0      	blx	r4
    v2mul1271(t1, t2, P->z);                              // Zfinal = theta*alpha
    5bbe:	aa4b      	add	r2, sp, #300	; 0x12c
    5bc0:	a90f      	add	r1, sp, #60	; 0x3c
    5bc2:	a805      	add	r0, sp, #20
    5bc4:	47a8      	blx	r5
    v2mul1271(P->tb, t2, P->x);                           // Xfinal = beta*theta
    5bc6:	aa37      	add	r2, sp, #220	; 0xdc
    5bc8:	a90f      	add	r1, sp, #60	; 0x3c
    5bca:	a85f      	add	r0, sp, #380	; 0x17c
    5bcc:	47a8      	blx	r5
    v2mul1271(P->ta, t1, P->y);                           // Yfinal = alpha*omega
    5bce:	aa41      	add	r2, sp, #260	; 0x104
    5bd0:	a905      	add	r1, sp, #20
    5bd2:	a855      	add	r0, sp, #340	; 0x154
    5bd4:	47a8      	blx	r5
    5bd6:	3e0a      	subs	r6, #10
    5bd8:	4b75      	ldr	r3, [pc, #468]	; (5db0 <ecc_mul_fixed+0x384>)
    5bda:	469c      	mov	ip, r3
    5bdc:	44e0      	add	r8, ip
    5bde:	2328      	movs	r3, #40	; 0x28
    5be0:	425b      	negs	r3, r3
    5be2:	469c      	mov	ip, r3
    5be4:	44e3      	add	fp, ip
    for (j = 0; j < (v-1); j++)
    5be6:	2e95      	cmp	r6, #149	; 0x95
    5be8:	d187      	bne.n	5afa <ecc_mul_fixed+0xce>
    5bea:	4b72      	ldr	r3, [pc, #456]	; (5db4 <ecc_mul_fixed+0x388>)
    5bec:	aa04      	add	r2, sp, #16
    5bee:	4694      	mov	ip, r2
    5bf0:	4463      	add	r3, ip
    5bf2:	9302      	str	r3, [sp, #8]
    5bf4:	23c6      	movs	r3, #198	; 0xc6
    5bf6:	9301      	str	r3, [sp, #4]
            table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]); 
    5bf8:	4b65      	ldr	r3, [pc, #404]	; (5d90 <ecc_mul_fixed+0x364>)
    5bfa:	469b      	mov	fp, r3
    5bfc:	e008      	b.n	5c10 <ecc_mul_fixed+0x1e4>
    5bfe:	9b01      	ldr	r3, [sp, #4]
    5c00:	3b01      	subs	r3, #1
    5c02:	9301      	str	r3, [sp, #4]
    5c04:	9a02      	ldr	r2, [sp, #8]
    5c06:	3a04      	subs	r2, #4
    5c08:	9202      	str	r2, [sp, #8]
    for (ii = (e-2); ii >= 0; ii--)
    5c0a:	2bbd      	cmp	r3, #189	; 0xbd
    5c0c:	d100      	bne.n	5c10 <ecc_mul_fixed+0x1e4>
    5c0e:	e08b      	b.n	5d28 <ecc_mul_fixed+0x2fc>
        eccdouble(R);                                           // R = 2*R using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    5c10:	a837      	add	r0, sp, #220	; 0xdc
    5c12:	4b69      	ldr	r3, [pc, #420]	; (5db8 <ecc_mul_fixed+0x38c>)
    5c14:	4798      	blx	r3
    5c16:	4b5d      	ldr	r3, [pc, #372]	; (5d8c <ecc_mul_fixed+0x360>)
    5c18:	22f0      	movs	r2, #240	; 0xf0
    5c1a:	0152      	lsls	r2, r2, #5
    5c1c:	4694      	mov	ip, r2
    5c1e:	4463      	add	r3, ip
    5c20:	4699      	mov	r9, r3
    5c22:	9f01      	ldr	r7, [sp, #4]
    5c24:	003b      	movs	r3, r7
    5c26:	2232      	movs	r2, #50	; 0x32
    5c28:	4252      	negs	r2, r2
    5c2a:	4694      	mov	ip, r2
    5c2c:	4463      	add	r3, ip
    5c2e:	469a      	mov	sl, r3
    5c30:	9b02      	ldr	r3, [sp, #8]
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    5c32:	4d5d      	ldr	r5, [pc, #372]	; (5da8 <ecc_mul_fixed+0x37c>)
    vadd1271(&a[0], &b[0], &c[0]);
    5c34:	4c58      	ldr	r4, [pc, #352]	; (5d98 <ecc_mul_fixed+0x36c>)
    5c36:	001e      	movs	r6, r3
    5c38:	46b4      	mov	ip, r6
            digit = digits[w*d-j*e+ii-e];
    5c3a:	0033      	movs	r3, r6
    5c3c:	33c8      	adds	r3, #200	; 0xc8
    5c3e:	681a      	ldr	r2, [r3, #0]
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)           
    5c40:	003b      	movs	r3, r7
    5c42:	0038      	movs	r0, r7
    5c44:	3864      	subs	r0, #100	; 0x64
    5c46:	4287      	cmp	r7, r0
    5c48:	db0a      	blt.n	5c60 <ecc_mul_fixed+0x234>
    5c4a:	0031      	movs	r1, r6
    5c4c:	9600      	str	r6, [sp, #0]
                digit = 2*digit + digits[i];
    5c4e:	0052      	lsls	r2, r2, #1
    5c50:	680e      	ldr	r6, [r1, #0]
    5c52:	46b0      	mov	r8, r6
    5c54:	4442      	add	r2, r8
    5c56:	3b32      	subs	r3, #50	; 0x32
    5c58:	39c8      	subs	r1, #200	; 0xc8
            for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)           
    5c5a:	4283      	cmp	r3, r0
    5c5c:	daf7      	bge.n	5c4e <ecc_mul_fixed+0x222>
    5c5e:	9e00      	ldr	r6, [sp, #0]
            table_lookup_fixed_base(((vpoint_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]); 
    5c60:	4b52      	ldr	r3, [pc, #328]	; (5dac <ecc_mul_fixed+0x380>)
    5c62:	4463      	add	r3, ip
    5c64:	681b      	ldr	r3, [r3, #0]
    5c66:	a919      	add	r1, sp, #100	; 0x64
    5c68:	4648      	mov	r0, r9
    5c6a:	47d8      	blx	fp
    v2mul1271(P->ta, P->tb, P->ta);                       // Ta = T1
    5c6c:	aa55      	add	r2, sp, #340	; 0x154
    5c6e:	a95f      	add	r1, sp, #380	; 0x17c
    5c70:	0010      	movs	r0, r2
    5c72:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    5c74:	aa05      	add	r2, sp, #20
    5c76:	a94b      	add	r1, sp, #300	; 0x12c
    5c78:	0008      	movs	r0, r1
    5c7a:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5c7c:	aa0a      	add	r2, sp, #40	; 0x28
    5c7e:	a950      	add	r1, sp, #320	; 0x140
    5c80:	0008      	movs	r0, r1
    5c82:	47a0      	blx	r4
    v2mul1271(P->ta, Q->t2, P->ta);                       // Ta = 2dT1*t2 
    5c84:	aa55      	add	r2, sp, #340	; 0x154
    5c86:	a92d      	add	r1, sp, #180	; 0xb4
    5c88:	0010      	movs	r0, r2
    5c8a:	47a8      	blx	r5
    vadd1271(&a[0], &b[0], &c[0]);
    5c8c:	aa4b      	add	r2, sp, #300	; 0x12c
    5c8e:	a941      	add	r1, sp, #260	; 0x104
    5c90:	a837      	add	r0, sp, #220	; 0xdc
    5c92:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5c94:	aa50      	add	r2, sp, #320	; 0x140
    5c96:	a946      	add	r1, sp, #280	; 0x118
    5c98:	a83c      	add	r0, sp, #240	; 0xf0
    5c9a:	47a0      	blx	r4
    vsub1271(&a[0], &b[0], &c[0]);
    5c9c:	aa5f      	add	r2, sp, #380	; 0x17c
    5c9e:	a937      	add	r1, sp, #220	; 0xdc
    5ca0:	a841      	add	r0, sp, #260	; 0x104
    5ca2:	4b3c      	ldr	r3, [pc, #240]	; (5d94 <ecc_mul_fixed+0x368>)
    5ca4:	4698      	mov	r8, r3
    5ca6:	4798      	blx	r3
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5ca8:	aa64      	add	r2, sp, #400	; 0x190
    5caa:	a93c      	add	r1, sp, #240	; 0xf0
    5cac:	a846      	add	r0, sp, #280	; 0x118
    5cae:	47c0      	blx	r8
    vsub1271(&a[0], &b[0], &c[0]);
    5cb0:	aa0f      	add	r2, sp, #60	; 0x3c
    5cb2:	a955      	add	r1, sp, #340	; 0x154
    5cb4:	a805      	add	r0, sp, #20
    5cb6:	47c0      	blx	r8
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5cb8:	aa14      	add	r2, sp, #80	; 0x50
    5cba:	a95a      	add	r1, sp, #360	; 0x168
    5cbc:	a80a      	add	r0, sp, #40	; 0x28
    5cbe:	47c0      	blx	r8
    vadd1271(&a[0], &b[0], &c[0]);
    5cc0:	aa05      	add	r2, sp, #20
    5cc2:	a955      	add	r1, sp, #340	; 0x154
    5cc4:	0010      	movs	r0, r2
    5cc6:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5cc8:	aa0a      	add	r2, sp, #40	; 0x28
    5cca:	a95a      	add	r1, sp, #360	; 0x168
    5ccc:	0010      	movs	r0, r2
    5cce:	47a0      	blx	r4
    v2mul1271(Q->xy, P->z, P->ta);                        // Ta = (X1+Y1)(x2+y2)
    5cd0:	aa55      	add	r2, sp, #340	; 0x154
    5cd2:	a94b      	add	r1, sp, #300	; 0x12c
    5cd4:	a819      	add	r0, sp, #100	; 0x64
    5cd6:	47a8      	blx	r5
    v2mul1271(Q->yx, P->tb, P->x);                        // X = (Y1-X1)(y2-x2)
    5cd8:	aa37      	add	r2, sp, #220	; 0xdc
    5cda:	a95f      	add	r1, sp, #380	; 0x17c
    5cdc:	a823      	add	r0, sp, #140	; 0x8c
    5cde:	47a8      	blx	r5
    vsub1271(&a[0], &b[0], &c[0]);
    5ce0:	aa5f      	add	r2, sp, #380	; 0x17c
    5ce2:	a937      	add	r1, sp, #220	; 0xdc
    5ce4:	a855      	add	r0, sp, #340	; 0x154
    5ce6:	47c0      	blx	r8
    vsub1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5ce8:	aa64      	add	r2, sp, #400	; 0x190
    5cea:	a93c      	add	r1, sp, #240	; 0xf0
    5cec:	a85a      	add	r0, sp, #360	; 0x168
    5cee:	47c0      	blx	r8
    vadd1271(&a[0], &b[0], &c[0]);
    5cf0:	aa55      	add	r2, sp, #340	; 0x154
    5cf2:	a937      	add	r1, sp, #220	; 0xdc
    5cf4:	0010      	movs	r0, r2
    5cf6:	47a0      	blx	r4
    vadd1271(&a[VWORDS_FIELD], &b[VWORDS_FIELD], &c[VWORDS_FIELD]);
    5cf8:	aa5a      	add	r2, sp, #360	; 0x168
    5cfa:	a93c      	add	r1, sp, #240	; 0xf0
    5cfc:	0010      	movs	r0, r2
    5cfe:	47a0      	blx	r4
    v2mul1271(t1, t2, P->z);                              // Zfinal = theta*alpha
    5d00:	aa4b      	add	r2, sp, #300	; 0x12c
    5d02:	a90f      	add	r1, sp, #60	; 0x3c
    5d04:	a805      	add	r0, sp, #20
    5d06:	47a8      	blx	r5
    v2mul1271(P->tb, t2, P->x);                           // Xfinal = beta*theta
    5d08:	aa37      	add	r2, sp, #220	; 0xdc
    5d0a:	a90f      	add	r1, sp, #60	; 0x3c
    5d0c:	a85f      	add	r0, sp, #380	; 0x17c
    5d0e:	47a8      	blx	r5
    v2mul1271(P->ta, t1, P->y);                           // Yfinal = alpha*omega
    5d10:	aa41      	add	r2, sp, #260	; 0x104
    5d12:	a905      	add	r1, sp, #20
    5d14:	a855      	add	r0, sp, #340	; 0x154
    5d16:	47a8      	blx	r5
    5d18:	3f0a      	subs	r7, #10
    5d1a:	4b25      	ldr	r3, [pc, #148]	; (5db0 <ecc_mul_fixed+0x384>)
    5d1c:	469c      	mov	ip, r3
    5d1e:	44e1      	add	r9, ip
    5d20:	3e28      	subs	r6, #40	; 0x28
        for (j = 0; j < v; j++)
    5d22:	4557      	cmp	r7, sl
    5d24:	d188      	bne.n	5c38 <ecc_mul_fixed+0x20c>
    5d26:	e76a      	b.n	5bfe <ecc_mul_fixed+0x1d2>
    v2inv1271(P->z);                      // Z1 = Z1^-1
    5d28:	a84b      	add	r0, sp, #300	; 0x12c
    5d2a:	4b24      	ldr	r3, [pc, #144]	; (5dbc <ecc_mul_fixed+0x390>)
    5d2c:	4798      	blx	r3
    v2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    5d2e:	aa69      	add	r2, sp, #420	; 0x1a4
    5d30:	a94b      	add	r1, sp, #300	; 0x12c
    5d32:	a837      	add	r0, sp, #220	; 0xdc
    5d34:	4c1c      	ldr	r4, [pc, #112]	; (5da8 <ecc_mul_fixed+0x37c>)
    5d36:	47a0      	blx	r4
    v2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    5d38:	aa73      	add	r2, sp, #460	; 0x1cc
    5d3a:	a94b      	add	r1, sp, #300	; 0x12c
    5d3c:	a841      	add	r0, sp, #260	; 0x104
    5d3e:	47a0      	blx	r4
    v2mod1271(Q->x, Q->x); 
    5d40:	a969      	add	r1, sp, #420	; 0x1a4
    5d42:	0008      	movs	r0, r1
    5d44:	4c1e      	ldr	r4, [pc, #120]	; (5dc0 <ecc_mul_fixed+0x394>)
    5d46:	47a0      	blx	r4
    v2mod1271(Q->y, Q->y); 
    5d48:	a973      	add	r1, sp, #460	; 0x1cc
    5d4a:	0008      	movs	r0, r1
    5d4c:	47a0      	blx	r4
    from_ext_to_std(A->x, Q->x);
    5d4e:	9d03      	ldr	r5, [sp, #12]
    5d50:	0029      	movs	r1, r5
    5d52:	a869      	add	r0, sp, #420	; 0x1a4
    5d54:	4c1b      	ldr	r4, [pc, #108]	; (5dc4 <ecc_mul_fixed+0x398>)
    5d56:	47a0      	blx	r4
    from_ext_to_std(A->y, Q->y); 
    5d58:	0029      	movs	r1, r5
    5d5a:	3120      	adds	r1, #32
    5d5c:	a873      	add	r0, sp, #460	; 0x1cc
    5d5e:	47a0      	blx	r4
}
    5d60:	2001      	movs	r0, #1
    5d62:	4b19      	ldr	r3, [pc, #100]	; (5dc8 <ecc_mul_fixed+0x39c>)
    5d64:	449d      	add	sp, r3
    5d66:	bc3c      	pop	{r2, r3, r4, r5}
    5d68:	4690      	mov	r8, r2
    5d6a:	4699      	mov	r9, r3
    5d6c:	46a2      	mov	sl, r4
    5d6e:	46ab      	mov	fp, r5
    5d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d72:	46c0      	nop			; (mov r8, r8)
    5d74:	fffff9ac 	.word	0xfffff9ac
    5d78:	0000043c 	.word	0x0000043c
    5d7c:	00006fa5 	.word	0x00006fa5
    5d80:	00004a39 	.word	0x00004a39
    5d84:	00004a71 	.word	0x00004a71
    5d88:	0000589d 	.word	0x0000589d
    5d8c:	00008648 	.word	0x00008648
    5d90:	00004ea1 	.word	0x00004ea1
    5d94:	00003f43 	.word	0x00003f43
    5d98:	00003f07 	.word	0x00003f07
    5d9c:	00004fcd 	.word	0x00004fcd
    5da0:	000050d9 	.word	0x000050d9
    5da4:	00004b27 	.word	0x00004b27
    5da8:	000051c5 	.word	0x000051c5
    5dac:	fffffda8 	.word	0xfffffda8
    5db0:	fffff880 	.word	0xfffff880
    5db4:	0000051c 	.word	0x0000051c
    5db8:	000054dd 	.word	0x000054dd
    5dbc:	00005285 	.word	0x00005285
    5dc0:	000051a9 	.word	0x000051a9
    5dc4:	00004809 	.word	0x00004809
    5dc8:	00000654 	.word	0x00000654

00005dcc <fixed_window_recode>:

/***********************************************/
/**********  CURVE/SCALAR FUNCTIONS  ***********/

void fixed_window_recode(uint64_t* scalar, unsigned int* digits, unsigned int* sign_masks)
{ // Converting scalar to the fixed window representation used by the variable-base scalar multiplication
    5dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dce:	46de      	mov	lr, fp
    5dd0:	4657      	mov	r7, sl
    5dd2:	464e      	mov	r6, r9
    5dd4:	4645      	mov	r5, r8
    5dd6:	b5e0      	push	{r5, r6, r7, lr}
    5dd8:	b089      	sub	sp, #36	; 0x24
    5dda:	4692      	mov	sl, r2
    5ddc:	2300      	movs	r3, #0
    5dde:	469c      	mov	ip, r3
    5de0:	3320      	adds	r3, #32
    5de2:	4699      	mov	r9, r3
    5de4:	4481      	add	r9, r0
    5de6:	3b08      	subs	r3, #8
    5de8:	4698      	mov	r8, r3
    5dea:	4480      	add	r8, r0
    5dec:	4643      	mov	r3, r8
    5dee:	9300      	str	r3, [sp, #0]
    5df0:	9107      	str	r1, [sp, #28]
    5df2:	4683      	mov	fp, r0
    5df4:	e011      	b.n	5e1a <fixed_window_recode+0x4e>
    5df6:	9400      	str	r4, [sp, #0]
        }    
  
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
        }
        scalar[NWORDS64_ORDER-1] = scalar[NWORDS64_ORDER-1] >> (W_VARBASE-1);
    5df8:	465b      	mov	r3, fp
    5dfa:	69db      	ldr	r3, [r3, #28]
    5dfc:	0719      	lsls	r1, r3, #28
    5dfe:	465a      	mov	r2, fp
    5e00:	6992      	ldr	r2, [r2, #24]
    5e02:	0912      	lsrs	r2, r2, #4
    5e04:	430a      	orrs	r2, r1
    5e06:	4659      	mov	r1, fp
    5e08:	618a      	str	r2, [r1, #24]
    5e0a:	091b      	lsrs	r3, r3, #4
    5e0c:	61cb      	str	r3, [r1, #28]
    5e0e:	2304      	movs	r3, #4
    5e10:	4698      	mov	r8, r3
    5e12:	44c4      	add	ip, r8
    for (i = 0; i < t_VARBASE; i++)
    5e14:	4663      	mov	r3, ip
    5e16:	2bf8      	cmp	r3, #248	; 0xf8
    5e18:	d069      	beq.n	5eee <fixed_window_recode+0x122>
        temp = (scalar[0] & val1) - val2;    // ki = (k mod 2^w)/2^(w-1)
    5e1a:	465a      	mov	r2, fp
    5e1c:	231f      	movs	r3, #31
    5e1e:	6812      	ldr	r2, [r2, #0]
    5e20:	4013      	ands	r3, r2
    5e22:	9304      	str	r3, [sp, #16]
    5e24:	2300      	movs	r3, #0
    5e26:	9305      	str	r3, [sp, #20]
    5e28:	9a04      	ldr	r2, [sp, #16]
    5e2a:	9b05      	ldr	r3, [sp, #20]
    5e2c:	2010      	movs	r0, #16
    5e2e:	4240      	negs	r0, r0
    5e30:	17c1      	asrs	r1, r0, #31
    5e32:	1812      	adds	r2, r2, r0
    5e34:	414b      	adcs	r3, r1
        sign_masks[i] = ~((unsigned int)(temp >> (RADIX64-1)));
    5e36:	17d9      	asrs	r1, r3, #31
    5e38:	9102      	str	r1, [sp, #8]
    5e3a:	9103      	str	r1, [sp, #12]
    5e3c:	43c9      	mvns	r1, r1
    5e3e:	4650      	mov	r0, sl
    5e40:	4665      	mov	r5, ip
    5e42:	5141      	str	r1, [r0, r5]
        digits[i] = ((sign_masks[i] & (unsigned int)(temp ^ -temp)) ^ (unsigned int)-temp) >> 1;        
    5e44:	4250      	negs	r0, r2
    5e46:	0004      	movs	r4, r0
    5e48:	4054      	eors	r4, r2
    5e4a:	4021      	ands	r1, r4
    5e4c:	4048      	eors	r0, r1
    5e4e:	0840      	lsrs	r0, r0, #1
    5e50:	9907      	ldr	r1, [sp, #28]
    5e52:	5148      	str	r0, [r1, r5]
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX-1)); 
    5e54:	4659      	mov	r1, fp
    5e56:	6809      	ldr	r1, [r1, #0]
    5e58:	1a8d      	subs	r5, r1, r2
    5e5a:	4055      	eors	r5, r2
    5e5c:	4659      	mov	r1, fp
    5e5e:	6809      	ldr	r1, [r1, #0]
    5e60:	4051      	eors	r1, r2
    5e62:	000c      	movs	r4, r1
    5e64:	432c      	orrs	r4, r5
    5e66:	4659      	mov	r1, fp
    5e68:	6809      	ldr	r1, [r1, #0]
    5e6a:	404c      	eors	r4, r1
    5e6c:	0fe1      	lsrs	r1, r4, #31
    5e6e:	4688      	mov	r8, r1
        borrow = ((temp >> (RADIX64-1)) - 1) & (uint64_t)is_digit_lessthan_ct((digit_t)scalar[0], (digit_t)temp);
    5e70:	9c02      	ldr	r4, [sp, #8]
    5e72:	9d03      	ldr	r5, [sp, #12]
    5e74:	2001      	movs	r0, #1
    5e76:	4240      	negs	r0, r0
    5e78:	17c1      	asrs	r1, r0, #31
    5e7a:	1824      	adds	r4, r4, r0
    5e7c:	414d      	adcs	r5, r1
    5e7e:	4641      	mov	r1, r8
    5e80:	4021      	ands	r1, r4
    5e82:	000e      	movs	r6, r1
    5e84:	2700      	movs	r7, #0
        res = scalar[0] - temp;              // k = (k - ki) / 2^(w-1) 
    5e86:	4659      	mov	r1, fp
    5e88:	6808      	ldr	r0, [r1, #0]
    5e8a:	6849      	ldr	r1, [r1, #4]
    5e8c:	1a80      	subs	r0, r0, r2
    5e8e:	4199      	sbcs	r1, r3
    5e90:	0002      	movs	r2, r0
    5e92:	000b      	movs	r3, r1
        scalar[0] = res;
    5e94:	4659      	mov	r1, fp
    5e96:	c10c      	stmia	r1!, {r2, r3}
    5e98:	9b00      	ldr	r3, [sp, #0]
    5e9a:	4698      	mov	r8, r3
    5e9c:	4648      	mov	r0, r9
            res = scalar[j];
    5e9e:	680b      	ldr	r3, [r1, #0]
    5ea0:	684c      	ldr	r4, [r1, #4]
    5ea2:	001a      	movs	r2, r3
    5ea4:	0023      	movs	r3, r4
            scalar[j] = res - borrow;
    5ea6:	0014      	movs	r4, r2
    5ea8:	001d      	movs	r5, r3
    5eaa:	1ba4      	subs	r4, r4, r6
    5eac:	41bd      	sbcs	r5, r7
    5eae:	c130      	stmia	r1!, {r4, r5}
    5eb0:	9200      	str	r2, [sp, #0]
    5eb2:	9301      	str	r3, [sp, #4]
    5eb4:	1b93      	subs	r3, r2, r6
    5eb6:	4073      	eors	r3, r6
    5eb8:	0034      	movs	r4, r6
    5eba:	9d00      	ldr	r5, [sp, #0]
    5ebc:	406c      	eors	r4, r5
    5ebe:	4323      	orrs	r3, r4
    5ec0:	406b      	eors	r3, r5
            borrow = (uint64_t)is_digit_lessthan_ct((digit_t)res, (digit_t)borrow); 
    5ec2:	0fde      	lsrs	r6, r3, #31
    5ec4:	2700      	movs	r7, #0
        for (j = 1; j < NWORDS64_ORDER; j++)
    5ec6:	4281      	cmp	r1, r0
    5ec8:	d1e9      	bne.n	5e9e <fixed_window_recode+0xd2>
    5eca:	4681      	mov	r9, r0
    5ecc:	4659      	mov	r1, fp
    5ece:	4644      	mov	r4, r8
            SHIFTR(scalar[j+1], scalar[j], (W_VARBASE-1), scalar[j], RADIX64);
    5ed0:	684b      	ldr	r3, [r1, #4]
    5ed2:	0718      	lsls	r0, r3, #28
    5ed4:	680a      	ldr	r2, [r1, #0]
    5ed6:	0912      	lsrs	r2, r2, #4
    5ed8:	4302      	orrs	r2, r0
    5eda:	091b      	lsrs	r3, r3, #4
    5edc:	6888      	ldr	r0, [r1, #8]
    5ede:	0700      	lsls	r0, r0, #28
    5ee0:	600a      	str	r2, [r1, #0]
    5ee2:	4043      	eors	r3, r0
    5ee4:	604b      	str	r3, [r1, #4]
    5ee6:	3108      	adds	r1, #8
        for (j = 0; j < (NWORDS64_ORDER-1); j++) {           
    5ee8:	428c      	cmp	r4, r1
    5eea:	d1f1      	bne.n	5ed0 <fixed_window_recode+0x104>
    5eec:	e783      	b.n	5df6 <fixed_window_recode+0x2a>
    5eee:	4658      	mov	r0, fp
    5ef0:	9b07      	ldr	r3, [sp, #28]
    5ef2:	469b      	mov	fp, r3

    } 
    sign_masks[t_VARBASE] = ~((unsigned int)(scalar[0] >> (RADIX64-1)));
    5ef4:	684b      	ldr	r3, [r1, #4]
    5ef6:	0fdb      	lsrs	r3, r3, #31
    5ef8:	43db      	mvns	r3, r3
    5efa:	21f8      	movs	r1, #248	; 0xf8
    5efc:	4652      	mov	r2, sl
    5efe:	5053      	str	r3, [r2, r1]
    digits[t_VARBASE] = ((sign_masks[t_VARBASE] & (unsigned int)(scalar[0] ^ (0-scalar[0]))) ^ (unsigned int)(0-scalar[0])) >> 1;    // kt = k  (t_VARBASE+1 digits)
    5f00:	6802      	ldr	r2, [r0, #0]
    5f02:	4250      	negs	r0, r2
    5f04:	4042      	eors	r2, r0
    5f06:	4013      	ands	r3, r2
    5f08:	4043      	eors	r3, r0
    5f0a:	085b      	lsrs	r3, r3, #1
    5f0c:	465a      	mov	r2, fp
    5f0e:	5053      	str	r3, [r2, r1]
}
    5f10:	b009      	add	sp, #36	; 0x24
    5f12:	bc3c      	pop	{r2, r3, r4, r5}
    5f14:	4690      	mov	r8, r2
    5f16:	4699      	mov	r9, r3
    5f18:	46a2      	mov	sl, r4
    5f1a:	46ab      	mov	fp, r5
    5f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00005f20 <ecc_precomp>:


void ecc_precomp(vpoint_extproj_t P, vpoint_extproj_precomp_t *T)
{ // Generation of the precomputation table used by the variable-base scalar multiplication ecc_mul().
    5f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f22:	b0db      	sub	sp, #364	; 0x16c
    5f24:	0004      	movs	r4, r0
    5f26:	000d      	movs	r5, r1
    vpoint_extproj_precomp_t P2;
    vpoint_extproj_t Q;
    unsigned int i; 

    // Generating P2 = 2(X1,Y1,Z1,T1a,T1b) = (XP2+YP2,Y2P-X2P,ZP2,TP2) and T[0] = P = (X1+Y1,Y1-X1,2*Z1,2*d*T1)
    ecccopy(P, Q);
    5f28:	4669      	mov	r1, sp
    5f2a:	4e18      	ldr	r6, [pc, #96]	; (5f8c <ecc_precomp+0x6c>)
    5f2c:	47b0      	blx	r6
    5f2e:	0020      	movs	r0, r4
    5f30:	3028      	adds	r0, #40	; 0x28
    5f32:	a90a      	add	r1, sp, #40	; 0x28
    5f34:	47b0      	blx	r6
    5f36:	0020      	movs	r0, r4
    5f38:	3050      	adds	r0, #80	; 0x50
    5f3a:	a914      	add	r1, sp, #80	; 0x50
    5f3c:	47b0      	blx	r6
    5f3e:	0020      	movs	r0, r4
    5f40:	3078      	adds	r0, #120	; 0x78
    5f42:	a91e      	add	r1, sp, #120	; 0x78
    5f44:	47b0      	blx	r6
    5f46:	0020      	movs	r0, r4
    5f48:	30a0      	adds	r0, #160	; 0xa0
    5f4a:	a928      	add	r1, sp, #160	; 0xa0
    5f4c:	47b0      	blx	r6
    R1_to_R2(P, T[0]);
    5f4e:	0029      	movs	r1, r5
    5f50:	0020      	movs	r0, r4
    5f52:	4b0f      	ldr	r3, [pc, #60]	; (5f90 <ecc_precomp+0x70>)
    5f54:	4798      	blx	r3
    eccdouble(Q);
    5f56:	4668      	mov	r0, sp
    5f58:	4b0e      	ldr	r3, [pc, #56]	; (5f94 <ecc_precomp+0x74>)
    5f5a:	4798      	blx	r3
    R1_to_R3(Q, P2);
    5f5c:	a932      	add	r1, sp, #200	; 0xc8
    5f5e:	4668      	mov	r0, sp
    5f60:	4b0d      	ldr	r3, [pc, #52]	; (5f98 <ecc_precomp+0x78>)
    5f62:	4798      	blx	r3
    5f64:	002c      	movs	r4, r5
    5f66:	238c      	movs	r3, #140	; 0x8c
    5f68:	00db      	lsls	r3, r3, #3
    5f6a:	469c      	mov	ip, r3
    5f6c:	4465      	add	r5, ip

    for (i = 1; i < NPOINTS_VARBASE; i++) {
        // T[i] = 2P+T[i-1] = (2*i+1)P = (XP2+YP2,Y2P-X2P,ZP2,TP2) + (X_(2*i-1)+Y_(2*i-1), Y_(2*i-1)-X_(2*i-1), 2Z_(2*i-1), 2T_(2*i-1)) = (X_(2*i+1)+Y_(2*i+1), Y_(2*i+1)-X_(2*i+1), 2Z_(2*i+1), 2dT_(2*i+1))
        eccadd_core(P2, T[i-1], Q);
    5f6e:	4f0b      	ldr	r7, [pc, #44]	; (5f9c <ecc_precomp+0x7c>)
        R1_to_R2(Q, T[i]);
    5f70:	4e07      	ldr	r6, [pc, #28]	; (5f90 <ecc_precomp+0x70>)
        eccadd_core(P2, T[i-1], Q);
    5f72:	466a      	mov	r2, sp
    5f74:	0021      	movs	r1, r4
    5f76:	a832      	add	r0, sp, #200	; 0xc8
    5f78:	47b8      	blx	r7
    5f7a:	34a0      	adds	r4, #160	; 0xa0
        R1_to_R2(Q, T[i]);
    5f7c:	0021      	movs	r1, r4
    5f7e:	4668      	mov	r0, sp
    5f80:	47b0      	blx	r6
    for (i = 1; i < NPOINTS_VARBASE; i++) {
    5f82:	42ac      	cmp	r4, r5
    5f84:	d1f5      	bne.n	5f72 <ecc_precomp+0x52>
    }
}
    5f86:	b05b      	add	sp, #364	; 0x16c
    5f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f8a:	46c0      	nop			; (mov r8, r8)
    5f8c:	00004b27 	.word	0x00004b27
    5f90:	00005341 	.word	0x00005341
    5f94:	000054dd 	.word	0x000054dd
    5f98:	000053ed 	.word	0x000053ed
    5f9c:	000055b9 	.word	0x000055b9

00005fa0 <cofactor_clearing>:


void cofactor_clearing(vpoint_extproj_t P)
{ // Co-factor clearing
    5fa0:	b570      	push	{r4, r5, r6, lr}
    5fa2:	b0a8      	sub	sp, #160	; 0xa0
    5fa4:	0004      	movs	r4, r0
  // Input: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
  // Output: P = 392*P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
  //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    vpoint_extproj_precomp_t Q;
     
    R1_to_R2(P, Q);                      // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
    5fa6:	4669      	mov	r1, sp
    5fa8:	4b0d      	ldr	r3, [pc, #52]	; (5fe0 <cofactor_clearing+0x40>)
    5faa:	4798      	blx	r3
    eccdouble(P);                        // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    5fac:	0020      	movs	r0, r4
    5fae:	4d0d      	ldr	r5, [pc, #52]	; (5fe4 <cofactor_clearing+0x44>)
    5fb0:	47a8      	blx	r5
    eccadd(Q, P);                        // P = P+Q using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    5fb2:	0021      	movs	r1, r4
    5fb4:	4668      	mov	r0, sp
    5fb6:	4e0c      	ldr	r6, [pc, #48]	; (5fe8 <cofactor_clearing+0x48>)
    5fb8:	47b0      	blx	r6
    eccdouble(P);
    5fba:	0020      	movs	r0, r4
    5fbc:	47a8      	blx	r5
    eccdouble(P);
    5fbe:	0020      	movs	r0, r4
    5fc0:	47a8      	blx	r5
    eccdouble(P);
    5fc2:	0020      	movs	r0, r4
    5fc4:	47a8      	blx	r5
    eccdouble(P);
    5fc6:	0020      	movs	r0, r4
    5fc8:	47a8      	blx	r5
    eccadd(Q, P);
    5fca:	0021      	movs	r1, r4
    5fcc:	4668      	mov	r0, sp
    5fce:	47b0      	blx	r6
    eccdouble(P);
    5fd0:	0020      	movs	r0, r4
    5fd2:	47a8      	blx	r5
    eccdouble(P);
    5fd4:	0020      	movs	r0, r4
    5fd6:	47a8      	blx	r5
    eccdouble(P);
    5fd8:	0020      	movs	r0, r4
    5fda:	47a8      	blx	r5
}
    5fdc:	b028      	add	sp, #160	; 0xa0
    5fde:	bd70      	pop	{r4, r5, r6, pc}
    5fe0:	00005341 	.word	0x00005341
    5fe4:	000054dd 	.word	0x000054dd
    5fe8:	0000569d 	.word	0x0000569d

00005fec <ecc_mul>:


bool ecc_mul(point_t P, digit_t* k, point_t Q, bool clear_cofactor)
{ // Scalar multiplication Q = k*P
    5fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fee:	4c5a      	ldr	r4, [pc, #360]	; (6158 <ecc_mul+0x16c>)
    5ff0:	44a5      	add	sp, r4
    5ff2:	0007      	movs	r7, r0
    5ff4:	000c      	movs	r4, r1
    5ff6:	9201      	str	r2, [sp, #4]
    5ff8:	001d      	movs	r5, r3
  // Output: Q = k*P in affine coordinates (x,y).
  // This function performs point validation and (if selected) cofactor clearing.
    vpoint_t A;
    vpoint_extproj_t R;
    vpoint_extproj_precomp_t S, Table[NPOINTS_VARBASE];
    unsigned int digits[t_VARBASE+1] = {0}, sign_masks[t_VARBASE+1] = {0};
    5ffa:	22fc      	movs	r2, #252	; 0xfc
    5ffc:	2100      	movs	r1, #0
    5ffe:	a849      	add	r0, sp, #292	; 0x124
    6000:	4e56      	ldr	r6, [pc, #344]	; (615c <ecc_mul+0x170>)
    6002:	47b0      	blx	r6
    6004:	22fc      	movs	r2, #252	; 0xfc
    6006:	2100      	movs	r1, #0
    6008:	a80a      	add	r0, sp, #40	; 0x28
    600a:	47b0      	blx	r6
    digit_t k_odd[NWORDS_ORDER];
    int i;

    point_setup(P, R);                                         // Convert to representation (X,Y,1,Ta,Tb)
    600c:	23f7      	movs	r3, #247	; 0xf7
    600e:	00db      	lsls	r3, r3, #3
    6010:	aa02      	add	r2, sp, #8
    6012:	4694      	mov	ip, r2
    6014:	4463      	add	r3, ip
    6016:	0019      	movs	r1, r3
    6018:	0038      	movs	r0, r7
    601a:	4b51      	ldr	r3, [pc, #324]	; (6160 <ecc_mul+0x174>)
    601c:	4798      	blx	r3

    if (ecc_point_validate(R) == false) {                      // Check if point lies on the curve
    601e:	23f7      	movs	r3, #247	; 0xf7
    6020:	00db      	lsls	r3, r3, #3
    6022:	aa02      	add	r2, sp, #8
    6024:	4694      	mov	ip, r2
    6026:	4463      	add	r3, ip
    6028:	0018      	movs	r0, r3
    602a:	4b4e      	ldr	r3, [pc, #312]	; (6164 <ecc_mul+0x178>)
    602c:	4798      	blx	r3
    602e:	9000      	str	r0, [sp, #0]
    6030:	2800      	cmp	r0, #0
    6032:	d100      	bne.n	6036 <ecc_mul+0x4a>
    6034:	e083      	b.n	613e <ecc_mul+0x152>
        return false;
    }

    if (clear_cofactor == true) {
    6036:	2d00      	cmp	r5, #0
    6038:	d000      	beq.n	603c <ecc_mul+0x50>
    603a:	e084      	b.n	6146 <ecc_mul+0x15a>
        cofactor_clearing(R);
    }

    modulo_order(k, k_odd);                                    // k_odd = k mod (order)      
    603c:	a902      	add	r1, sp, #8
    603e:	0020      	movs	r0, r4
    6040:	4b49      	ldr	r3, [pc, #292]	; (6168 <ecc_mul+0x17c>)
    6042:	4798      	blx	r3
    conversion_to_odd(k_odd, k_odd);                           // Converting scalar to odd using the prime subgroup order 
    6044:	a902      	add	r1, sp, #8
    6046:	0008      	movs	r0, r1
    6048:	4b48      	ldr	r3, [pc, #288]	; (616c <ecc_mul+0x180>)
    604a:	4798      	blx	r3
    ecc_precomp(R, Table);                                     // Precomputation of points T[0],...,T[npoints-1] 
    604c:	a988      	add	r1, sp, #544	; 0x220
    604e:	23f7      	movs	r3, #247	; 0xf7
    6050:	00db      	lsls	r3, r3, #3
    6052:	aa02      	add	r2, sp, #8
    6054:	4694      	mov	ip, r2
    6056:	4463      	add	r3, ip
    6058:	0018      	movs	r0, r3
    605a:	4b45      	ldr	r3, [pc, #276]	; (6170 <ecc_mul+0x184>)
    605c:	4798      	blx	r3
    fixed_window_recode((uint64_t*)k_odd, digits, sign_masks); // Scalar recoding
    605e:	aa0a      	add	r2, sp, #40	; 0x28
    6060:	a949      	add	r1, sp, #292	; 0x124
    6062:	a802      	add	r0, sp, #8
    6064:	4b43      	ldr	r3, [pc, #268]	; (6174 <ecc_mul+0x188>)
    6066:	4798      	blx	r3
    table_lookup_1x8(Table, S, digits[t_VARBASE], sign_masks[t_VARBASE]);       
    6068:	9b48      	ldr	r3, [sp, #288]	; 0x120
    606a:	9a87      	ldr	r2, [sp, #540]	; 0x21c
    606c:	21e3      	movs	r1, #227	; 0xe3
    606e:	00c9      	lsls	r1, r1, #3
    6070:	a802      	add	r0, sp, #8
    6072:	4684      	mov	ip, r0
    6074:	4461      	add	r1, ip
    6076:	a888      	add	r0, sp, #544	; 0x220
    6078:	4c3f      	ldr	r4, [pc, #252]	; (6178 <ecc_mul+0x18c>)
    607a:	47a0      	blx	r4
    R2_to_R4(S, R);                                            // Conversion to representation (2X,2Y,2Z)
    607c:	23f7      	movs	r3, #247	; 0xf7
    607e:	00db      	lsls	r3, r3, #3
    6080:	aa02      	add	r2, sp, #8
    6082:	4694      	mov	ip, r2
    6084:	4463      	add	r3, ip
    6086:	0019      	movs	r1, r3
    6088:	23e3      	movs	r3, #227	; 0xe3
    608a:	00db      	lsls	r3, r3, #3
    608c:	4463      	add	r3, ip
    608e:	0018      	movs	r0, r3
    6090:	4b3a      	ldr	r3, [pc, #232]	; (617c <ecc_mul+0x190>)
    6092:	4798      	blx	r3
    6094:	24f4      	movs	r4, #244	; 0xf4
    
    for (i = (t_VARBASE-1); i >= 0; i--)
    {
        eccdouble(R);
    6096:	4d3a      	ldr	r5, [pc, #232]	; (6180 <ecc_mul+0x194>)
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    6098:	4f37      	ldr	r7, [pc, #220]	; (6178 <ecc_mul+0x18c>)
        eccdouble(R);
        eccdouble(R);
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    609a:	4e3a      	ldr	r6, [pc, #232]	; (6184 <ecc_mul+0x198>)
        eccdouble(R);
    609c:	23f7      	movs	r3, #247	; 0xf7
    609e:	00db      	lsls	r3, r3, #3
    60a0:	aa02      	add	r2, sp, #8
    60a2:	4694      	mov	ip, r2
    60a4:	4463      	add	r3, ip
    60a6:	0018      	movs	r0, r3
    60a8:	47a8      	blx	r5
        table_lookup_1x8(Table, S, digits[i], sign_masks[i]);  // Extract point in (X+Y,Y-X,2Z,2dT) representation
    60aa:	ab0a      	add	r3, sp, #40	; 0x28
    60ac:	58e3      	ldr	r3, [r4, r3]
    60ae:	aa49      	add	r2, sp, #292	; 0x124
    60b0:	58a2      	ldr	r2, [r4, r2]
    60b2:	21e3      	movs	r1, #227	; 0xe3
    60b4:	00c9      	lsls	r1, r1, #3
    60b6:	a802      	add	r0, sp, #8
    60b8:	4684      	mov	ip, r0
    60ba:	4461      	add	r1, ip
    60bc:	a888      	add	r0, sp, #544	; 0x220
    60be:	47b8      	blx	r7
        eccdouble(R);
    60c0:	23f7      	movs	r3, #247	; 0xf7
    60c2:	00db      	lsls	r3, r3, #3
    60c4:	aa02      	add	r2, sp, #8
    60c6:	4694      	mov	ip, r2
    60c8:	4463      	add	r3, ip
    60ca:	0018      	movs	r0, r3
    60cc:	47a8      	blx	r5
        eccdouble(R);
    60ce:	23f7      	movs	r3, #247	; 0xf7
    60d0:	00db      	lsls	r3, r3, #3
    60d2:	aa02      	add	r2, sp, #8
    60d4:	4694      	mov	ip, r2
    60d6:	4463      	add	r3, ip
    60d8:	0018      	movs	r0, r3
    60da:	47a8      	blx	r5
        eccdouble(R);                                          // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    60dc:	23f7      	movs	r3, #247	; 0xf7
    60de:	00db      	lsls	r3, r3, #3
    60e0:	aa02      	add	r2, sp, #8
    60e2:	4694      	mov	ip, r2
    60e4:	4463      	add	r3, ip
    60e6:	0018      	movs	r0, r3
    60e8:	47a8      	blx	r5
        eccadd(S, R);                                          // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    60ea:	23f7      	movs	r3, #247	; 0xf7
    60ec:	00db      	lsls	r3, r3, #3
    60ee:	aa02      	add	r2, sp, #8
    60f0:	4694      	mov	ip, r2
    60f2:	4463      	add	r3, ip
    60f4:	0019      	movs	r1, r3
    60f6:	23e3      	movs	r3, #227	; 0xe3
    60f8:	00db      	lsls	r3, r3, #3
    60fa:	4463      	add	r3, ip
    60fc:	0018      	movs	r0, r3
    60fe:	47b0      	blx	r6
    6100:	3c04      	subs	r4, #4
    for (i = (t_VARBASE-1); i >= 0; i--)
    6102:	1d23      	adds	r3, r4, #4
    6104:	d1ca      	bne.n	609c <ecc_mul+0xb0>
    }
    eccnorm(R, A);                                             // Conversion to affine coordinates (x,y) and modular correction. 
    6106:	2388      	movs	r3, #136	; 0x88
    6108:	011b      	lsls	r3, r3, #4
    610a:	aa02      	add	r2, sp, #8
    610c:	4694      	mov	ip, r2
    610e:	4463      	add	r3, ip
    6110:	0019      	movs	r1, r3
    6112:	20f7      	movs	r0, #247	; 0xf7
    6114:	00c0      	lsls	r0, r0, #3
    6116:	4460      	add	r0, ip
    6118:	4b1b      	ldr	r3, [pc, #108]	; (6188 <ecc_mul+0x19c>)
    611a:	4798      	blx	r3
    from_ext_to_std(A->x, Q->x);
    611c:	9d01      	ldr	r5, [sp, #4]
    611e:	0029      	movs	r1, r5
    6120:	2388      	movs	r3, #136	; 0x88
    6122:	011b      	lsls	r3, r3, #4
    6124:	aa02      	add	r2, sp, #8
    6126:	4694      	mov	ip, r2
    6128:	4463      	add	r3, ip
    612a:	0018      	movs	r0, r3
    612c:	4c17      	ldr	r4, [pc, #92]	; (618c <ecc_mul+0x1a0>)
    612e:	47a0      	blx	r4
    from_ext_to_std(A->y, Q->y); 
    6130:	0029      	movs	r1, r5
    6132:	3120      	adds	r1, #32
    6134:	4816      	ldr	r0, [pc, #88]	; (6190 <ecc_mul+0x1a4>)
    6136:	ab02      	add	r3, sp, #8
    6138:	469c      	mov	ip, r3
    613a:	4460      	add	r0, ip
    613c:	47a0      	blx	r4
    
    return true;
}
    613e:	9800      	ldr	r0, [sp, #0]
    6140:	4b14      	ldr	r3, [pc, #80]	; (6194 <ecc_mul+0x1a8>)
    6142:	449d      	add	sp, r3
    6144:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cofactor_clearing(R);
    6146:	20f7      	movs	r0, #247	; 0xf7
    6148:	00c0      	lsls	r0, r0, #3
    614a:	ab02      	add	r3, sp, #8
    614c:	469c      	mov	ip, r3
    614e:	4460      	add	r0, ip
    6150:	4b11      	ldr	r3, [pc, #68]	; (6198 <ecc_mul+0x1ac>)
    6152:	4798      	blx	r3
    6154:	e772      	b.n	603c <ecc_mul+0x50>
    6156:	46c0      	nop			; (mov r8, r8)
    6158:	fffff724 	.word	0xfffff724
    615c:	00006fa5 	.word	0x00006fa5
    6160:	000057ad 	.word	0x000057ad
    6164:	000057f1 	.word	0x000057f1
    6168:	00004a39 	.word	0x00004a39
    616c:	00004a71 	.word	0x00004a71
    6170:	00005f21 	.word	0x00005f21
    6174:	00005dcd 	.word	0x00005dcd
    6178:	00004b51 	.word	0x00004b51
    617c:	00005465 	.word	0x00005465
    6180:	000054dd 	.word	0x000054dd
    6184:	0000569d 	.word	0x0000569d
    6188:	000052f1 	.word	0x000052f1
    618c:	00004809 	.word	0x00004809
    6190:	000008a8 	.word	0x000008a8
    6194:	000008dc 	.word	0x000008dc
    6198:	00005fa1 	.word	0x00005fa1

0000619c <CompressedPublicKeyGeneration>:


/*************** ECDH USING COMPRESSED, 32-BYTE PUBLIC KEYS ***************/

ECCRYPTO_STATUS CompressedPublicKeyGeneration(const unsigned char* SecretKey, unsigned char* PublicKey)
{ // Compressed public key generation for key exchange
    619c:	b510      	push	{r4, lr}
    619e:	b090      	sub	sp, #64	; 0x40
    61a0:	000c      	movs	r4, r1
  // It produces a public key PublicKey, which is the encoding of P = SecretKey*G (G is the generator).
  // Input:  32-byte SecretKey
  // Output: 32-byte PublicKey
    point_t P;
    
    ecc_mul_fixed((digit_t*)SecretKey, P);  // Compute public key                                       
    61a2:	4669      	mov	r1, sp
    61a4:	4b04      	ldr	r3, [pc, #16]	; (61b8 <CompressedPublicKeyGeneration+0x1c>)
    61a6:	4798      	blx	r3
	encode(P, PublicKey);                   // Encode public key
    61a8:	0021      	movs	r1, r4
    61aa:	4668      	mov	r0, sp
    61ac:	4b03      	ldr	r3, [pc, #12]	; (61bc <CompressedPublicKeyGeneration+0x20>)
    61ae:	4798      	blx	r3

    return ECCRYPTO_SUCCESS;
}
    61b0:	2001      	movs	r0, #1
    61b2:	b010      	add	sp, #64	; 0x40
    61b4:	bd10      	pop	{r4, pc}
    61b6:	46c0      	nop			; (mov r8, r8)
    61b8:	00005a2d 	.word	0x00005a2d
    61bc:	00003bf1 	.word	0x00003bf1

000061c0 <CompressedKeyGeneration>:


ECCRYPTO_STATUS CompressedKeyGeneration(unsigned char* SecretKey, unsigned char* PublicKey)
{ // Keypair generation for key exchange. Public key is compressed to 32 bytes
    61c0:	b570      	push	{r4, r5, r6, lr}
    61c2:	0006      	movs	r6, r0
    61c4:	000d      	movs	r5, r1
	//Status = RandomBytesFunction(SecretKey, 32);
	//if (Status != ECCRYPTO_SUCCESS) {
	//	goto cleanup;
	//}
  
    Status = CompressedPublicKeyGeneration(SecretKey, PublicKey);
    61c6:	4b07      	ldr	r3, [pc, #28]	; (61e4 <CompressedKeyGeneration+0x24>)
    61c8:	4798      	blx	r3
    61ca:	0004      	movs	r4, r0
    if (Status != ECCRYPTO_SUCCESS) {
    61cc:	2801      	cmp	r0, #1
    61ce:	d006      	beq.n	61de <CompressedKeyGeneration+0x1e>
    }

    return ECCRYPTO_SUCCESS;

cleanup:
    clear_words((unsigned int*)SecretKey, 256/(sizeof(unsigned int)*8));
    61d0:	2108      	movs	r1, #8
    61d2:	0030      	movs	r0, r6
    61d4:	4e04      	ldr	r6, [pc, #16]	; (61e8 <CompressedKeyGeneration+0x28>)
    61d6:	47b0      	blx	r6
    clear_words((unsigned int*)PublicKey, 256/(sizeof(unsigned int)*8));
    61d8:	2108      	movs	r1, #8
    61da:	0028      	movs	r0, r5
    61dc:	47b0      	blx	r6

    return Status;
}
    61de:	0020      	movs	r0, r4
    61e0:	bd70      	pop	{r4, r5, r6, pc}
    61e2:	46c0      	nop			; (mov r8, r8)
    61e4:	0000619d 	.word	0x0000619d
    61e8:	000052dd 	.word	0x000052dd

000061ec <CompressedSecretAgreement>:


ECCRYPTO_STATUS CompressedSecretAgreement(const unsigned char* SecretKey, const unsigned char* PublicKey, unsigned char* SharedSecret)
{ // Secret agreement computation for key exchange using a compressed, 32-byte public key
    61ec:	b570      	push	{r4, r5, r6, lr}
    61ee:	b090      	sub	sp, #64	; 0x40
    61f0:	0006      	movs	r6, r0
    61f2:	0008      	movs	r0, r1
    61f4:	0015      	movs	r5, r2
  // Inputs: 32-byte SecretKey and 32-byte PublicKey
  // Output: 32-byte SharedSecret
    point_t A;
    ECCRYPTO_STATUS Status = ECCRYPTO_ERROR_UNKNOWN;

    if ((PublicKey[15] & 0x80) != 0) {  // Is bit128(PublicKey) = 0?
    61f6:	7bcb      	ldrb	r3, [r1, #15]
    61f8:	2b7f      	cmp	r3, #127	; 0x7f
    61fa:	d830      	bhi.n	625e <CompressedSecretAgreement+0x72>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
		goto cleanup;
    }

	Status = decode(PublicKey, A);    // Also verifies that A is on the curve. If it is not, it fails
    61fc:	4669      	mov	r1, sp
    61fe:	4b19      	ldr	r3, [pc, #100]	; (6264 <CompressedSecretAgreement+0x78>)
    6200:	4798      	blx	r3
    6202:	0004      	movs	r4, r0
	if (Status != ECCRYPTO_SUCCESS) {
    6204:	2801      	cmp	r0, #1
    6206:	d006      	beq.n	6216 <CompressedSecretAgreement+0x2a>
	memmove(SharedSecret, (unsigned char*)A->y, 32);

	return ECCRYPTO_SUCCESS;
    
cleanup:
    clear_words((unsigned int*)SharedSecret, 256/(sizeof(unsigned int)*8));
    6208:	2108      	movs	r1, #8
    620a:	0028      	movs	r0, r5
    620c:	4b16      	ldr	r3, [pc, #88]	; (6268 <CompressedSecretAgreement+0x7c>)
    620e:	4798      	blx	r3
    
    return Status;
}
    6210:	0020      	movs	r0, r4
    6212:	b010      	add	sp, #64	; 0x40
    6214:	bd70      	pop	{r4, r5, r6, pc}
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    6216:	2301      	movs	r3, #1
    6218:	466a      	mov	r2, sp
    621a:	0031      	movs	r1, r6
    621c:	4668      	mov	r0, sp
    621e:	4e13      	ldr	r6, [pc, #76]	; (626c <CompressedSecretAgreement+0x80>)
    6220:	47b0      	blx	r6
	if (Status != ECCRYPTO_SUCCESS) {
    6222:	2800      	cmp	r0, #0
    6224:	d101      	bne.n	622a <CompressedSecretAgreement+0x3e>
    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
    6226:	2400      	movs	r4, #0
    6228:	e7ee      	b.n	6208 <CompressedSecretAgreement+0x1c>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    622a:	2108      	movs	r1, #8
    622c:	4668      	mov	r0, sp
    622e:	4b10      	ldr	r3, [pc, #64]	; (6270 <CompressedSecretAgreement+0x84>)
    6230:	4798      	blx	r3
    6232:	2800      	cmp	r0, #0
    6234:	d105      	bne.n	6242 <CompressedSecretAgreement+0x56>
	memmove(SharedSecret, (unsigned char*)A->y, 32);
    6236:	2220      	movs	r2, #32
    6238:	a908      	add	r1, sp, #32
    623a:	0028      	movs	r0, r5
    623c:	4b0d      	ldr	r3, [pc, #52]	; (6274 <CompressedSecretAgreement+0x88>)
    623e:	4798      	blx	r3
	return ECCRYPTO_SUCCESS;
    6240:	e7e6      	b.n	6210 <CompressedSecretAgreement+0x24>
    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
    6242:	2107      	movs	r1, #7
    6244:	a809      	add	r0, sp, #36	; 0x24
    6246:	4b0a      	ldr	r3, [pc, #40]	; (6270 <CompressedSecretAgreement+0x84>)
    6248:	4798      	blx	r3
    624a:	2800      	cmp	r0, #0
    624c:	d0f3      	beq.n	6236 <CompressedSecretAgreement+0x4a>
    624e:	9908      	ldr	r1, [sp, #32]
    6250:	1e4b      	subs	r3, r1, #1
    return (unsigned int)((x | (0-x)) >> (RADIX-1));
    6252:	2201      	movs	r2, #1
    6254:	1a52      	subs	r2, r2, r1
    6256:	4313      	orrs	r3, r2
    if (is_neutral_point(A)) {  // Is output = neutral point (0,1)?
    6258:	d4ed      	bmi.n	6236 <CompressedSecretAgreement+0x4a>
		Status = ECCRYPTO_ERROR_SHARED_KEY;
    625a:	2407      	movs	r4, #7
    625c:	e7d4      	b.n	6208 <CompressedSecretAgreement+0x1c>
		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
    625e:	2406      	movs	r4, #6
    6260:	e7d2      	b.n	6208 <CompressedSecretAgreement+0x1c>
    6262:	46c0      	nop			; (mov r8, r8)
    6264:	00003c39 	.word	0x00003c39
    6268:	000052dd 	.word	0x000052dd
    626c:	00005fed 	.word	0x00005fed
    6270:	00003bcd 	.word	0x00003bcd
    6274:	00006f6f 	.word	0x00006f6f

00006278 <internalPermutation>:
static void messageFold(const uint8_t *message, uint8_t *cells){
    cells[0] ^= message[0];
    cells[1] ^= message[1];
}

static void internalPermutation(uint8_t *cells){
    6278:	b5f0      	push	{r4, r5, r6, r7, lr}
    627a:	46de      	mov	lr, fp
    627c:	4657      	mov	r7, sl
    627e:	464e      	mov	r6, r9
    6280:	4645      	mov	r5, r8
    6282:	b5e0      	push	{r5, r6, r7, lr}
    6284:	b08b      	sub	sp, #44	; 0x2c
    6286:	0007      	movs	r7, r0
    int round;
    for(round=0;round<12;round++){
    6288:	2300      	movs	r3, #0
    628a:	9307      	str	r3, [sp, #28]
    628c:	e0c6      	b.n	641c <internalPermutation+0x1a4>
    for(i=0;i<D_VAL;i++){
        tmp_cells[i]=0;
        for(j=0;j<D_VAL;j++){
            uint8_t nib = cells[(col+(D_VAL*j))/2];
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
            else{nib = (nib & 0x0F);}
    628e:	200f      	movs	r0, #15
    6290:	4002      	ands	r2, r0
    6292:	e03e      	b.n	6312 <internalPermutation+0x9a>
                ret=MMUL[loc];
                b=0;
            }
            else{
                // Account for odd value as (a x 3) is (a x (2 + 1))
                if(b&1){
    6294:	2301      	movs	r3, #1
    6296:	4223      	tst	r3, r4
    6298:	d003      	beq.n	62a2 <internalPermutation+0x2a>
                    odd ^= ret;
    629a:	4661      	mov	r1, ip
    629c:	4051      	eors	r1, r2
    629e:	b2cb      	uxtb	r3, r1
    62a0:	469c      	mov	ip, r3
                }

                loc=ret; // loc holds the current value to be multiplied by 2
                // (a x 2) not found
                if(MMUL[32 + loc] > 0xF){
    62a2:	9204      	str	r2, [sp, #16]
    62a4:	2320      	movs	r3, #32
    62a6:	4698      	mov	r8, r3
    62a8:	4490      	add	r8, r2
    62aa:	4b83      	ldr	r3, [pc, #524]	; (64b8 <internalPermutation+0x240>)
    62ac:	4641      	mov	r1, r8
    62ae:	5c59      	ldrb	r1, [r3, r1]
    62b0:	290f      	cmp	r1, #15
    62b2:	d912      	bls.n	62da <internalPermutation+0x62>
                    ret = ret << 1;
    62b4:	0052      	lsls	r2, r2, #1
    62b6:	b2d1      	uxtb	r1, r2
                    // XOR with constant if shifted results is larger than 4 bits
                    if(ret&0x10){ret^=G_CON;}
    62b8:	2310      	movs	r3, #16
    62ba:	420b      	tst	r3, r1
    62bc:	d002      	beq.n	62c4 <internalPermutation+0x4c>
    62be:	3b0d      	subs	r3, #13
    62c0:	4059      	eors	r1, r3
    62c2:	b2c9      	uxtb	r1, r1

                    ret &= 0xF; // Only care about lower nibble
    62c4:	230f      	movs	r3, #15
    62c6:	4019      	ands	r1, r3
                    MMUL[32 + loc] = ret;
    62c8:	4b7b      	ldr	r3, [pc, #492]	; (64b8 <internalPermutation+0x240>)
    62ca:	4642      	mov	r2, r8
    62cc:	5499      	strb	r1, [r3, r2]
                    MMUL[16*loc + 2] = ret;
    62ce:	9b04      	ldr	r3, [sp, #16]
    62d0:	011a      	lsls	r2, r3, #4
    62d2:	4b79      	ldr	r3, [pc, #484]	; (64b8 <internalPermutation+0x240>)
    62d4:	4698      	mov	r8, r3
    62d6:	4442      	add	r2, r8
    62d8:	7091      	strb	r1, [r2, #2]
                }
                else{
                    ret = MMUL[32 + loc];
                }
                b = b >> 1;
    62da:	0864      	lsrs	r4, r4, #1
    62dc:	b2e4      	uxtb	r4, r4
    62de:	000a      	movs	r2, r1
    62e0:	e034      	b.n	634c <internalPermutation+0xd4>
    62e2:	9b01      	ldr	r3, [sp, #4]
        while(b>1){
    62e4:	0011      	movs	r1, r2
    62e6:	e03b      	b.n	6360 <internalPermutation+0xe8>
        if(b==1){return a;} // Multiply a by 1 is a
    62e8:	0003      	movs	r3, r0
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    62ea:	aa08      	add	r2, sp, #32
    62ec:	5cba      	ldrb	r2, [r7, r2]
    62ee:	4053      	eors	r3, r2
    62f0:	aa08      	add	r2, sp, #32
    62f2:	54bb      	strb	r3, [r7, r2]
    62f4:	3506      	adds	r5, #6
    62f6:	3601      	adds	r6, #1
        for(j=0;j<D_VAL;j++){
    62f8:	2d24      	cmp	r5, #36	; 0x24
    62fa:	d03f      	beq.n	637c <internalPermutation+0x104>
            uint8_t nib = cells[(col+(D_VAL*j))/2];
    62fc:	4653      	mov	r3, sl
    62fe:	18ea      	adds	r2, r5, r3
    6300:	0fd3      	lsrs	r3, r2, #31
    6302:	189b      	adds	r3, r3, r2
    6304:	105b      	asrs	r3, r3, #1
    6306:	465a      	mov	r2, fp
    6308:	5cd2      	ldrb	r2, [r2, r3]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    630a:	464b      	mov	r3, r9
    630c:	2b00      	cmp	r3, #0
    630e:	d1be      	bne.n	628e <internalPermutation+0x16>
    6310:	0912      	lsrs	r2, r2, #4
            tmp_cells[i] ^= (mul(A144[(D_VAL*i)+j],nib));
    6312:	7831      	ldrb	r1, [r6, #0]
    uint8_t ret = MMUL[(16*a)+b];
    6314:	0108      	lsls	r0, r1, #4
    6316:	4b68      	ldr	r3, [pc, #416]	; (64b8 <internalPermutation+0x240>)
    6318:	181b      	adds	r3, r3, r0
    631a:	5c9b      	ldrb	r3, [r3, r2]
    if(ret > 0x0F){
    631c:	2b0f      	cmp	r3, #15
    631e:	d9e4      	bls.n	62ea <internalPermutation+0x72>
    a &= 0x0F;
    6320:	230f      	movs	r3, #15
    6322:	0018      	movs	r0, r3
    6324:	4008      	ands	r0, r1
    b &= 0x0F;
    6326:	4013      	ands	r3, r2
        if(a<b){SWAP(a,b);} // Want a to be larger to reduce computation
    6328:	4298      	cmp	r0, r3
    632a:	d206      	bcs.n	633a <internalPermutation+0xc2>
    632c:	4051      	eors	r1, r2
    632e:	404a      	eors	r2, r1
    6330:	200f      	movs	r0, #15
    6332:	0003      	movs	r3, r0
    6334:	4013      	ands	r3, r2
    6336:	4051      	eors	r1, r2
    6338:	4008      	ands	r0, r1
        if(b==0){return b;} // Multiply a by 0 is 0
    633a:	2b00      	cmp	r3, #0
    633c:	d0d5      	beq.n	62ea <internalPermutation+0x72>
        if(b==1){return a;} // Multiply a by 1 is a
    633e:	2b01      	cmp	r3, #1
    6340:	d0d2      	beq.n	62e8 <internalPermutation+0x70>
    6342:	0002      	movs	r2, r0
    6344:	001c      	movs	r4, r3
    6346:	2100      	movs	r1, #0
    6348:	468c      	mov	ip, r1
    634a:	9301      	str	r3, [sp, #4]
        while(b>1){
    634c:	2c01      	cmp	r4, #1
    634e:	d9c8      	bls.n	62e2 <internalPermutation+0x6a>
            loc=(ret*16)+b;
    6350:	0111      	lsls	r1, r2, #4
    6352:	1861      	adds	r1, r4, r1
            if(MMUL[loc]<0x10){
    6354:	b2c9      	uxtb	r1, r1
    6356:	4b58      	ldr	r3, [pc, #352]	; (64b8 <internalPermutation+0x240>)
    6358:	5c59      	ldrb	r1, [r3, r1]
    635a:	290f      	cmp	r1, #15
    635c:	d89a      	bhi.n	6294 <internalPermutation+0x1c>
    635e:	9b01      	ldr	r3, [sp, #4]
            }
        }
        ret ^= odd; // One last "add" if multiplying by odd number at any point
    6360:	4662      	mov	r2, ip
    6362:	404a      	eors	r2, r1
    6364:	0011      	movs	r1, r2
        ret &= 0xF; // Only care about lower nibble
    6366:	220f      	movs	r2, #15
    6368:	4011      	ands	r1, r2

        // Update map so won't have to recompute a x b
        MMUL[(a*16)+b_orig]=ret;
    636a:	4a53      	ldr	r2, [pc, #332]	; (64b8 <internalPermutation+0x240>)
    636c:	0104      	lsls	r4, r0, #4
    636e:	1914      	adds	r4, r2, r4
    6370:	54e1      	strb	r1, [r4, r3]
        MMUL[(b_orig*16)+a]=ret;
    6372:	011b      	lsls	r3, r3, #4
    6374:	18d2      	adds	r2, r2, r3
    6376:	5411      	strb	r1, [r2, r0]
        ret &= 0xF; // Only care about lower nibble
    6378:	000b      	movs	r3, r1
    637a:	e7b6      	b.n	62ea <internalPermutation+0x72>
    for(i=0;i<D_VAL;i++){
    637c:	9b02      	ldr	r3, [sp, #8]
    637e:	3301      	adds	r3, #1
    6380:	9302      	str	r3, [sp, #8]
    6382:	9a03      	ldr	r2, [sp, #12]
    6384:	3206      	adds	r2, #6
    6386:	9203      	str	r2, [sp, #12]
    6388:	2b06      	cmp	r3, #6
    638a:	d00b      	beq.n	63a4 <internalPermutation+0x12c>
    638c:	9902      	ldr	r1, [sp, #8]
    638e:	000f      	movs	r7, r1
        tmp_cells[i]=0;
    6390:	2300      	movs	r3, #0
    6392:	aa08      	add	r2, sp, #32
    6394:	548b      	strb	r3, [r1, r2]
    6396:	9e03      	ldr	r6, [sp, #12]
    6398:	9d06      	ldr	r5, [sp, #24]
    639a:	33ff      	adds	r3, #255	; 0xff
    639c:	9a05      	ldr	r2, [sp, #20]
    639e:	401a      	ands	r2, r3
    63a0:	4692      	mov	sl, r2
    63a2:	e7ab      	b.n	62fc <internalPermutation+0x84>
    63a4:	9b05      	ldr	r3, [sp, #20]
    63a6:	469c      	mov	ip, r3
    63a8:	464f      	mov	r7, r9
    63aa:	4650      	mov	r0, sl
    for(i=0;i<D_VAL;i++){
    63ac:	2100      	movs	r1, #0
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    63ae:	240f      	movs	r4, #15
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    63b0:	465a      	mov	r2, fp
    63b2:	e00d      	b.n	63d0 <internalPermutation+0x158>
            cells[(col+(D_VAL*i))/2] &= 0xF0;
    63b4:	0fc3      	lsrs	r3, r0, #31
    63b6:	181b      	adds	r3, r3, r0
    63b8:	105b      	asrs	r3, r3, #1
    63ba:	18d3      	adds	r3, r2, r3
    63bc:	781d      	ldrb	r5, [r3, #0]
    63be:	43a5      	bics	r5, r4
            cells[(col+(D_VAL*i))/2] |= tmp_cells[i];
    63c0:	ae08      	add	r6, sp, #32
    63c2:	5d8e      	ldrb	r6, [r1, r6]
    63c4:	4335      	orrs	r5, r6
    63c6:	701d      	strb	r5, [r3, #0]
    for(i=0;i<D_VAL;i++){
    63c8:	3101      	adds	r1, #1
    63ca:	3006      	adds	r0, #6
    63cc:	2906      	cmp	r1, #6
    63ce:	d00d      	beq.n	63ec <internalPermutation+0x174>
        if(col%2 == 0){
    63d0:	2f00      	cmp	r7, #0
    63d2:	d1ef      	bne.n	63b4 <internalPermutation+0x13c>
            cells[(col+(D_VAL*i))/2] &= 0x0F;
    63d4:	0fc3      	lsrs	r3, r0, #31
    63d6:	181b      	adds	r3, r3, r0
    63d8:	105b      	asrs	r3, r3, #1
    63da:	18d3      	adds	r3, r2, r3
    63dc:	781d      	ldrb	r5, [r3, #0]
    63de:	4025      	ands	r5, r4
            cells[(col+(D_VAL*i))/2] |= (tmp_cells[i] << 4);
    63e0:	ae08      	add	r6, sp, #32
    63e2:	5d8e      	ldrb	r6, [r1, r6]
    63e4:	0136      	lsls	r6, r6, #4
    63e6:	4335      	orrs	r5, r6
    63e8:	701d      	strb	r5, [r3, #0]
    63ea:	e7ed      	b.n	63c8 <internalPermutation+0x150>
    63ec:	4693      	mov	fp, r2
    for(i=0;i<D_VAL;i++){
    63ee:	2301      	movs	r3, #1
    63f0:	4698      	mov	r8, r3
    63f2:	44c4      	add	ip, r8
    63f4:	4663      	mov	r3, ip
    63f6:	2b06      	cmp	r3, #6
    63f8:	d00a      	beq.n	6410 <internalPermutation+0x198>
    63fa:	4b30      	ldr	r3, [pc, #192]	; (64bc <internalPermutation+0x244>)
    63fc:	9303      	str	r3, [sp, #12]
    for(i=0;i<D_VAL;i++){
    63fe:	2300      	movs	r3, #0
    6400:	9302      	str	r3, [sp, #8]
            if(col%2 == 0){nib = (nib & 0xF0) >> 4;}
    6402:	4667      	mov	r7, ip
    6404:	3301      	adds	r3, #1
    6406:	401f      	ands	r7, r3
    6408:	4663      	mov	r3, ip
    640a:	9305      	str	r3, [sp, #20]
    640c:	46b9      	mov	r9, r7
    640e:	e7bd      	b.n	638c <internalPermutation+0x114>
    6410:	0017      	movs	r7, r2
    for(round=0;round<12;round++){
    6412:	9b07      	ldr	r3, [sp, #28]
    6414:	3301      	adds	r3, #1
    6416:	9307      	str	r3, [sp, #28]
    6418:	2b0c      	cmp	r3, #12
    641a:	d046      	beq.n	64aa <internalPermutation+0x232>
        cells[i*T_VAL/D_VAL] ^= (RC[round] ^ IC[i]) << 4;
    641c:	4b28      	ldr	r3, [pc, #160]	; (64c0 <internalPermutation+0x248>)
    641e:	9a07      	ldr	r2, [sp, #28]
    6420:	5cd3      	ldrb	r3, [r2, r3]
    6422:	4698      	mov	r8, r3
    6424:	4d27      	ldr	r5, [pc, #156]	; (64c4 <internalPermutation+0x24c>)
    6426:	2400      	movs	r4, #0
    6428:	4e27      	ldr	r6, [pc, #156]	; (64c8 <internalPermutation+0x250>)
    642a:	003b      	movs	r3, r7
    642c:	4647      	mov	r7, r8
    642e:	4698      	mov	r8, r3
    6430:	2106      	movs	r1, #6
    6432:	0020      	movs	r0, r4
    6434:	47b0      	blx	r6
    6436:	4440      	add	r0, r8
    6438:	782b      	ldrb	r3, [r5, #0]
    643a:	407b      	eors	r3, r7
    643c:	011b      	lsls	r3, r3, #4
    643e:	7802      	ldrb	r2, [r0, #0]
    6440:	4053      	eors	r3, r2
    6442:	7003      	strb	r3, [r0, #0]
    6444:	3412      	adds	r4, #18
    6446:	3501      	adds	r5, #1
    for(i=0;i<D_VAL;i++){
    6448:	2c6c      	cmp	r4, #108	; 0x6c
    644a:	d1f1      	bne.n	6430 <internalPermutation+0x1b8>
    644c:	4647      	mov	r7, r8
    644e:	4641      	mov	r1, r8
    6450:	4645      	mov	r5, r8
    6452:	3512      	adds	r5, #18
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    6454:	481d      	ldr	r0, [pc, #116]	; (64cc <internalPermutation+0x254>)
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    6456:	3c5d      	subs	r4, #93	; 0x5d
        uint16_t tmp=cells[i];
    6458:	780a      	ldrb	r2, [r1, #0]
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    645a:	0913      	lsrs	r3, r2, #4
    645c:	5cc3      	ldrb	r3, [r0, r3]
    645e:	011b      	lsls	r3, r3, #4
        cells[i] |= sbox[tmp & 0xF];        // lower nibble
    6460:	4022      	ands	r2, r4
        cells[i] |= sbox[tmp >> 4] << 4;    // upper nibble
    6462:	5c82      	ldrb	r2, [r0, r2]
    6464:	4313      	orrs	r3, r2
    6466:	700b      	strb	r3, [r1, #0]
    6468:	3101      	adds	r1, #1
    for(i=0;i<T_VAL;i++){
    646a:	428d      	cmp	r5, r1
    646c:	d1f4      	bne.n	6458 <internalPermutation+0x1e0>
    646e:	1cf9      	adds	r1, r7, #3
    6470:	2314      	movs	r3, #20
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    6472:	2018      	movs	r0, #24
    6474:	001a      	movs	r2, r3
        tmp1|=(cells[i*3]<<16);
    6476:	780b      	ldrb	r3, [r1, #0]
    6478:	041b      	lsls	r3, r3, #16
        tmp1|=(cells[(i*3)+1]<<8);
    647a:	784c      	ldrb	r4, [r1, #1]
    647c:	0224      	lsls	r4, r4, #8
        tmp1|=(cells[(i*3)+2]);
    647e:	4323      	orrs	r3, r4
    6480:	788c      	ldrb	r4, [r1, #2]
    6482:	4323      	orrs	r3, r4
        tmp1 = (tmp1 << (4*i)) | (tmp1 >> 4*(D_VAL-i));
    6484:	1a84      	subs	r4, r0, r2
    6486:	001d      	movs	r5, r3
    6488:	40a5      	lsls	r5, r4
    648a:	40d3      	lsrs	r3, r2
    648c:	432b      	orrs	r3, r5
        cells[i*3]=(tmp1 & 0xFF0000) >> 16;
    648e:	0c1c      	lsrs	r4, r3, #16
    6490:	700c      	strb	r4, [r1, #0]
        cells[(i*3)+1] = (tmp1 & 0xFF00) >> 8;
    6492:	0a1c      	lsrs	r4, r3, #8
    6494:	704c      	strb	r4, [r1, #1]
        cells[(i*3)+2] = (tmp1 & 0xFF);
    6496:	708b      	strb	r3, [r1, #2]
    6498:	3103      	adds	r1, #3
    649a:	3a04      	subs	r2, #4
    for(i=1;i<D_VAL;i++){
    649c:	2a00      	cmp	r2, #0
    649e:	d1ea      	bne.n	6476 <internalPermutation+0x1fe>
    64a0:	9206      	str	r2, [sp, #24]
    64a2:	2300      	movs	r3, #0
    64a4:	469c      	mov	ip, r3
    64a6:	46bb      	mov	fp, r7
    64a8:	e7a7      	b.n	63fa <internalPermutation+0x182>
}
    64aa:	b00b      	add	sp, #44	; 0x2c
    64ac:	bc3c      	pop	{r2, r3, r4, r5}
    64ae:	4690      	mov	r8, r2
    64b0:	4699      	mov	r9, r3
    64b2:	46a2      	mov	sl, r4
    64b4:	46ab      	mov	fp, r5
    64b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64b8:	200000f0 	.word	0x200000f0
    64bc:	0000ac50 	.word	0x0000ac50
    64c0:	0000ac7c 	.word	0x0000ac7c
    64c4:	0000ac74 	.word	0x0000ac74
    64c8:	00006c9d 	.word	0x00006c9d
    64cc:	0000ac88 	.word	0x0000ac88

000064d0 <photon128>:
void photon128(uint8_t *message, const int32_t message_bytes, uint8_t *hash){
    64d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    64d2:	46d6      	mov	lr, sl
    64d4:	464f      	mov	r7, r9
    64d6:	4646      	mov	r6, r8
    64d8:	b5c0      	push	{r6, r7, lr}
    64da:	b088      	sub	sp, #32
    64dc:	0005      	movs	r5, r0
    64de:	9001      	str	r0, [sp, #4]
    64e0:	4689      	mov	r9, r1
    64e2:	0016      	movs	r6, r2
    memset((uint8_t *) cells,0,T_VAL-3);
    64e4:	ac03      	add	r4, sp, #12
    64e6:	220f      	movs	r2, #15
    64e8:	2100      	movs	r1, #0
    64ea:	0020      	movs	r0, r4
    64ec:	4b30      	ldr	r3, [pc, #192]	; (65b0 <photon128+0xe0>)
    64ee:	4798      	blx	r3
    cells[15]=0x20;
    64f0:	2320      	movs	r3, #32
    64f2:	73e3      	strb	r3, [r4, #15]
    cells[16]=0x10;
    64f4:	3b10      	subs	r3, #16
    64f6:	7423      	strb	r3, [r4, #16]
    cells[17]=0x10;
    64f8:	7463      	strb	r3, [r4, #17]
    for(i=0;i<message_bytes/R_VAL;i++){
    64fa:	464b      	mov	r3, r9
    64fc:	0fdb      	lsrs	r3, r3, #31
    64fe:	444b      	add	r3, r9
    6500:	105b      	asrs	r3, r3, #1
    6502:	469a      	mov	sl, r3
    6504:	2b00      	cmp	r3, #0
    6506:	dd49      	ble.n	659c <photon128+0xcc>
    6508:	005b      	lsls	r3, r3, #1
    650a:	46a8      	mov	r8, r5
    650c:	4498      	add	r8, r3
    cells[0] ^= message[0];
    650e:	ac03      	add	r4, sp, #12
        internalPermutation(&cells[0]);
    6510:	4f28      	ldr	r7, [pc, #160]	; (65b4 <photon128+0xe4>)
    cells[0] ^= message[0];
    6512:	7823      	ldrb	r3, [r4, #0]
    6514:	782a      	ldrb	r2, [r5, #0]
    6516:	4053      	eors	r3, r2
    6518:	7023      	strb	r3, [r4, #0]
    cells[1] ^= message[1];
    651a:	7863      	ldrb	r3, [r4, #1]
    651c:	786a      	ldrb	r2, [r5, #1]
    651e:	4053      	eors	r3, r2
    6520:	7063      	strb	r3, [r4, #1]
        internalPermutation(&cells[0]);
    6522:	0020      	movs	r0, r4
    6524:	47b8      	blx	r7
    6526:	3502      	adds	r5, #2
    for(i=0;i<message_bytes/R_VAL;i++){
    6528:	4545      	cmp	r5, r8
    652a:	d1f2      	bne.n	6512 <photon128+0x42>
    652c:	4653      	mov	r3, sl
    if(message_bytes%2){
    652e:	464a      	mov	r2, r9
    6530:	07d2      	lsls	r2, r2, #31
    6532:	d535      	bpl.n	65a0 <photon128+0xd0>
        cells[0] ^= message[i*2];
    6534:	aa03      	add	r2, sp, #12
    6536:	005b      	lsls	r3, r3, #1
    6538:	9901      	ldr	r1, [sp, #4]
    653a:	5c5b      	ldrb	r3, [r3, r1]
    653c:	7811      	ldrb	r1, [r2, #0]
    653e:	404b      	eors	r3, r1
    6540:	7013      	strb	r3, [r2, #0]
        cells[1] ^= 0x80; //Padding
    6542:	7851      	ldrb	r1, [r2, #1]
    6544:	2380      	movs	r3, #128	; 0x80
    6546:	425b      	negs	r3, r3
    6548:	404b      	eors	r3, r1
    654a:	7053      	strb	r3, [r2, #1]
    internalPermutation(&cells[0]);
    654c:	ac03      	add	r4, sp, #12
    654e:	0020      	movs	r0, r4
    6550:	4b18      	ldr	r3, [pc, #96]	; (65b4 <photon128+0xe4>)
    6552:	4798      	blx	r3
    memset(hash,0,N_VAL);
    6554:	2210      	movs	r2, #16
    6556:	2100      	movs	r1, #0
    6558:	0030      	movs	r0, r6
    655a:	4b15      	ldr	r3, [pc, #84]	; (65b0 <photon128+0xe0>)
    655c:	4798      	blx	r3
    hash[0] |= cells[0];
    655e:	7833      	ldrb	r3, [r6, #0]
    6560:	7822      	ldrb	r2, [r4, #0]
    6562:	4313      	orrs	r3, r2
    6564:	7033      	strb	r3, [r6, #0]
    hash[1] |= cells[1];
    6566:	7873      	ldrb	r3, [r6, #1]
    6568:	7862      	ldrb	r2, [r4, #1]
    656a:	4313      	orrs	r3, r2
    656c:	7073      	strb	r3, [r6, #1]
    656e:	1cb4      	adds	r4, r6, #2
    6570:	3610      	adds	r6, #16
        internalPermutation(&cells[0]);
    6572:	ad03      	add	r5, sp, #12
    6574:	4f0f      	ldr	r7, [pc, #60]	; (65b4 <photon128+0xe4>)
    6576:	0028      	movs	r0, r5
    6578:	47b8      	blx	r7
        hash[2*i] |= cells[0];
    657a:	7823      	ldrb	r3, [r4, #0]
    657c:	782a      	ldrb	r2, [r5, #0]
    657e:	4313      	orrs	r3, r2
    6580:	7023      	strb	r3, [r4, #0]
        hash[(2*i)+1] |= cells[1];
    6582:	7863      	ldrb	r3, [r4, #1]
    6584:	786a      	ldrb	r2, [r5, #1]
    6586:	4313      	orrs	r3, r2
    6588:	7063      	strb	r3, [r4, #1]
    658a:	3402      	adds	r4, #2
    for(i=1;i<N_VAL/2;i++){
    658c:	42b4      	cmp	r4, r6
    658e:	d1f2      	bne.n	6576 <photon128+0xa6>
}
    6590:	b008      	add	sp, #32
    6592:	bc1c      	pop	{r2, r3, r4}
    6594:	4690      	mov	r8, r2
    6596:	4699      	mov	r9, r3
    6598:	46a2      	mov	sl, r4
    659a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(i=0;i<message_bytes/R_VAL;i++){
    659c:	2300      	movs	r3, #0
    659e:	e7c6      	b.n	652e <photon128+0x5e>
        cells[0] ^= 0x80;
    65a0:	aa03      	add	r2, sp, #12
    65a2:	7811      	ldrb	r1, [r2, #0]
    65a4:	2380      	movs	r3, #128	; 0x80
    65a6:	425b      	negs	r3, r3
    65a8:	404b      	eors	r3, r1
    65aa:	7013      	strb	r3, [r2, #0]
    65ac:	e7ce      	b.n	654c <photon128+0x7c>
    65ae:	46c0      	nop			; (mov r8, r8)
    65b0:	00006fa5 	.word	0x00006fa5
    65b4:	00006279 	.word	0x00006279

000065b8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    65b8:	b570      	push	{r4, r5, r6, lr}
    65ba:	b082      	sub	sp, #8
    65bc:	0005      	movs	r5, r0
    65be:	000e      	movs	r6, r1
	uint16_t temp = 0;
    65c0:	2200      	movs	r2, #0
    65c2:	466b      	mov	r3, sp
    65c4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    65c6:	4c06      	ldr	r4, [pc, #24]	; (65e0 <usart_serial_getchar+0x28>)
    65c8:	466b      	mov	r3, sp
    65ca:	1d99      	adds	r1, r3, #6
    65cc:	0028      	movs	r0, r5
    65ce:	47a0      	blx	r4
    65d0:	2800      	cmp	r0, #0
    65d2:	d1f9      	bne.n	65c8 <usart_serial_getchar+0x10>

	*c = temp;
    65d4:	466b      	mov	r3, sp
    65d6:	3306      	adds	r3, #6
    65d8:	881b      	ldrh	r3, [r3, #0]
    65da:	7033      	strb	r3, [r6, #0]
}
    65dc:	b002      	add	sp, #8
    65de:	bd70      	pop	{r4, r5, r6, pc}
    65e0:	0000319b 	.word	0x0000319b

000065e4 <usart_serial_putchar>:
{
    65e4:	b570      	push	{r4, r5, r6, lr}
    65e6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    65e8:	b28c      	uxth	r4, r1
    65ea:	4e03      	ldr	r6, [pc, #12]	; (65f8 <usart_serial_putchar+0x14>)
    65ec:	0021      	movs	r1, r4
    65ee:	0028      	movs	r0, r5
    65f0:	47b0      	blx	r6
    65f2:	2800      	cmp	r0, #0
    65f4:	d1fa      	bne.n	65ec <usart_serial_putchar+0x8>
}
    65f6:	bd70      	pop	{r4, r5, r6, pc}
    65f8:	00003175 	.word	0x00003175

000065fc <CAN0_Handler>:
	can_enable_interrupt(&can0_instance, CAN_PROTOCOL_ERROR_ARBITRATION
	| CAN_PROTOCOL_ERROR_DATA);
}
//! [can_init_setup]

void CAN0_Handler(void) {
    65fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    65fe:	46c6      	mov	lr, r8
    6600:	b500      	push	{lr}
    6602:	b082      	sub	sp, #8
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
    6604:	4b2b      	ldr	r3, [pc, #172]	; (66b4 <CAN0_Handler+0xb8>)
    6606:	681b      	ldr	r3, [r3, #0]
    6608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t rx_buffer_index;
	volatile uint32_t status = can_read_interrupt_status(&can0_instance);
    660a:	9200      	str	r2, [sp, #0]

	if ((status & CAN_PROTOCOL_ERROR_ARBITRATION)
    660c:	9a00      	ldr	r2, [sp, #0]
    660e:	0112      	lsls	r2, r2, #4
    6610:	d40e      	bmi.n	6630 <CAN0_Handler+0x34>
	|| (status & CAN_PROTOCOL_ERROR_DATA)) {
    6612:	9a00      	ldr	r2, [sp, #0]
    6614:	00d2      	lsls	r2, r2, #3
    6616:	d40b      	bmi.n	6630 <CAN0_Handler+0x34>
		can_clear_interrupt_status(&can0_instance, CAN_PROTOCOL_ERROR_ARBITRATION
		| CAN_PROTOCOL_ERROR_DATA);
		printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
	}

	else if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    6618:	9a00      	ldr	r2, [sp, #0]
    661a:	0312      	lsls	r2, r2, #12
    661c:	d50e      	bpl.n	663c <CAN0_Handler+0x40>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    661e:	2280      	movs	r2, #128	; 0x80
    6620:	0312      	lsls	r2, r2, #12
    6622:	651a      	str	r2, [r3, #80]	; 0x50
    6624:	2320      	movs	r3, #32
    6626:	425b      	negs	r3, r3
    6628:	4698      	mov	r8, r3
		can_clear_interrupt_status(&can0_instance,CAN_RX_BUFFER_NEW_MESSAGE);
		for (int i = 0; i < NETWORK_MAX_BUFFER_ELEMENTS; i++) {
    662a:	2400      	movs	r4, #0
			if (can_rx_get_buffer_status(&can0_instance, i)) {
				rx_buffer_index = i;
				can_rx_clear_buffer_status(&can0_instance, i);
				int temp_Buff = CAN0_rx_element_buff[rx_buffer_index].last_write;
    662c:	4d22      	ldr	r5, [pc, #136]	; (66b8 <CAN0_Handler+0xbc>)
    662e:	e032      	b.n	6696 <CAN0_Handler+0x9a>
    6630:	22c0      	movs	r2, #192	; 0xc0
    6632:	0552      	lsls	r2, r2, #21
    6634:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
    6636:	4821      	ldr	r0, [pc, #132]	; (66bc <CAN0_Handler+0xc0>)
    6638:	4b21      	ldr	r3, [pc, #132]	; (66c0 <CAN0_Handler+0xc4>)
    663a:	4798      	blx	r3
				rx_buffer_index);
				CAN0_rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % NETWORK_MAX_BUFFER_ELEMENTS;
			}
		}
	}
}
    663c:	b002      	add	sp, #8
    663e:	bc04      	pop	{r2}
    6640:	4690      	mov	r8, r2
    6642:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    6644:	4b1b      	ldr	r3, [pc, #108]	; (66b4 <CAN0_Handler+0xb8>)
    6646:	681a      	ldr	r2, [r3, #0]
    6648:	239c      	movs	r3, #156	; 0x9c
    664a:	58d0      	ldr	r0, [r2, r3]
    664c:	3b9b      	subs	r3, #155	; 0x9b
    664e:	4646      	mov	r6, r8
    6650:	40b3      	lsls	r3, r6
			if (can_rx_get_buffer_status(&can0_instance, i)) {
    6652:	4203      	tst	r3, r0
    6654:	d019      	beq.n	668a <CAN0_Handler+0x8e>
				rx_buffer_index = i;
    6656:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT2.reg = (1 << index);
    6658:	219c      	movs	r1, #156	; 0x9c
    665a:	5053      	str	r3, [r2, r1]
				int temp_Buff = CAN0_rx_element_buff[rx_buffer_index].last_write;
    665c:	9b01      	ldr	r3, [sp, #4]
    665e:	2691      	movs	r6, #145	; 0x91
    6660:	00b6      	lsls	r6, r6, #2
    6662:	4373      	muls	r3, r6
    6664:	5d5f      	ldrb	r7, [r3, r5]
				can_get_rx_buffer_element(&can0_instance, &(CAN0_rx_element_buff[rx_buffer_index].buffers[temp_Buff]),
    6666:	9901      	ldr	r1, [sp, #4]
    6668:	9a01      	ldr	r2, [sp, #4]
    666a:	4371      	muls	r1, r6
    666c:	3104      	adds	r1, #4
    666e:	00fb      	lsls	r3, r7, #3
    6670:	19db      	adds	r3, r3, r7
    6672:	00db      	lsls	r3, r3, #3
    6674:	18c9      	adds	r1, r1, r3
    6676:	1949      	adds	r1, r1, r5
    6678:	480e      	ldr	r0, [pc, #56]	; (66b4 <CAN0_Handler+0xb8>)
    667a:	4b12      	ldr	r3, [pc, #72]	; (66c4 <CAN0_Handler+0xc8>)
    667c:	4798      	blx	r3
				CAN0_rx_element_buff[rx_buffer_index].last_write = (temp_Buff + 1) % NETWORK_MAX_BUFFER_ELEMENTS;
    667e:	9b01      	ldr	r3, [sp, #4]
    6680:	435e      	muls	r6, r3
    6682:	3701      	adds	r7, #1
    6684:	2307      	movs	r3, #7
    6686:	401f      	ands	r7, r3
    6688:	5577      	strb	r7, [r6, r5]
		for (int i = 0; i < NETWORK_MAX_BUFFER_ELEMENTS; i++) {
    668a:	3401      	adds	r4, #1
    668c:	2301      	movs	r3, #1
    668e:	469c      	mov	ip, r3
    6690:	44e0      	add	r8, ip
    6692:	2c08      	cmp	r4, #8
    6694:	d0d2      	beq.n	663c <CAN0_Handler+0x40>
	if (index < 32) {
    6696:	2c1f      	cmp	r4, #31
    6698:	d8d4      	bhi.n	6644 <CAN0_Handler+0x48>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    669a:	4b06      	ldr	r3, [pc, #24]	; (66b4 <CAN0_Handler+0xb8>)
    669c:	681a      	ldr	r2, [r3, #0]
    669e:	2398      	movs	r3, #152	; 0x98
    66a0:	58d0      	ldr	r0, [r2, r3]
    66a2:	3b97      	subs	r3, #151	; 0x97
    66a4:	40a3      	lsls	r3, r4
			if (can_rx_get_buffer_status(&can0_instance, i)) {
    66a6:	4203      	tst	r3, r0
    66a8:	d0ef      	beq.n	668a <CAN0_Handler+0x8e>
				rx_buffer_index = i;
    66aa:	9401      	str	r4, [sp, #4]
		module_inst->hw->NDAT1.reg = (1 << index);
    66ac:	2198      	movs	r1, #152	; 0x98
    66ae:	5053      	str	r3, [r2, r1]
    66b0:	e7d4      	b.n	665c <CAN0_Handler+0x60>
    66b2:	46c0      	nop			; (mov r8, r8)
    66b4:	200026cc 	.word	0x200026cc
    66b8:	200026d0 	.word	0x200026d0
    66bc:	0000ac98 	.word	0x0000ac98
    66c0:	000071f9 	.word	0x000071f9
    66c4:	00002879 	.word	0x00002879

000066c8 <client_discover>:

void hid_get(struct hardware_id* hid) {
	hid->data = HARDWARE_ID_VAL;
}

struct node* client_discover(struct node* node_table, int max_nodes, int* num_nodes, struct node* parent_info, struct node* broadcast_info) {
    66c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    66ca:	46ce      	mov	lr, r9
    66cc:	4647      	mov	r7, r8
    66ce:	b580      	push	{r7, lr}
    66d0:	b0ad      	sub	sp, #180	; 0xb4
    66d2:	0006      	movs	r6, r0
    66d4:	001f      	movs	r7, r3
	struct node_msg_discover_init disc_init;
	debug_print("Waiting for init\n");
    66d6:	4d26      	ldr	r5, [pc, #152]	; (6770 <client_discover+0xa8>)
    66d8:	6829      	ldr	r1, [r5, #0]
    66da:	4826      	ldr	r0, [pc, #152]	; (6774 <client_discover+0xac>)
    66dc:	4b26      	ldr	r3, [pc, #152]	; (6778 <client_discover+0xb0>)
    66de:	4699      	mov	r9, r3
    66e0:	4798      	blx	r3
	node_msg_wait(broadcast_info, &disc_init);
    66e2:	a91e      	add	r1, sp, #120	; 0x78
    66e4:	9834      	ldr	r0, [sp, #208]	; 0xd0
    66e6:	4b25      	ldr	r3, [pc, #148]	; (677c <client_discover+0xb4>)
    66e8:	4798      	blx	r3
	memmove((uint8_t*)&parent_info->hid, (uint8_t*)&disc_init.hid, sizeof(struct hardware_id));
    66ea:	0038      	movs	r0, r7
    66ec:	3014      	adds	r0, #20
    66ee:	2204      	movs	r2, #4
    66f0:	a920      	add	r1, sp, #128	; 0x80
    66f2:	4b23      	ldr	r3, [pc, #140]	; (6780 <client_discover+0xb8>)
    66f4:	4798      	blx	r3
	hid->data = HARDWARE_ID_VAL;
    66f6:	4b23      	ldr	r3, [pc, #140]	; (6784 <client_discover+0xbc>)
    66f8:	681b      	ldr	r3, [r3, #0]
    66fa:	931d      	str	r3, [sp, #116]	; 0x74

	struct hardware_id my_hid;
	hid_get(&my_hid);

	struct node_msg_discover_response disc_resp;
	memmove((uint8_t*)&disc_resp.hid, (uint8_t*)&my_hid, sizeof(struct hardware_id));
    66fc:	9311      	str	r3, [sp, #68]	; 0x44
	disc_resp.capability = my_node_type;
    66fe:	ab0f      	add	r3, sp, #60	; 0x3c
    6700:	4a21      	ldr	r2, [pc, #132]	; (6788 <client_discover+0xc0>)
    6702:	7812      	ldrb	r2, [r2, #0]
    6704:	731a      	strb	r2, [r3, #12]
	node_msg_send(broadcast_info, parent_info, NODE_CMD_DISC_RESP, &disc_resp);
    6706:	2202      	movs	r2, #2
    6708:	0039      	movs	r1, r7
    670a:	9834      	ldr	r0, [sp, #208]	; 0xd0
    670c:	4c1f      	ldr	r4, [pc, #124]	; (678c <client_discover+0xc4>)
    670e:	47a0      	blx	r4

	struct node_msg_discover_assign disc_asgn;
	debug_print("Waiting for assignment\n");
    6710:	6829      	ldr	r1, [r5, #0]
    6712:	481f      	ldr	r0, [pc, #124]	; (6790 <client_discover+0xc8>)
    6714:	47c8      	blx	r9
	do {
		node_msg_wait(broadcast_info, &disc_asgn);
    6716:	4d19      	ldr	r5, [pc, #100]	; (677c <client_discover+0xb4>)
	} while (memcmp(&disc_asgn.hid, &my_hid, sizeof(struct hardware_id)) != 0);
    6718:	4c1e      	ldr	r4, [pc, #120]	; (6794 <client_discover+0xcc>)
		node_msg_wait(broadcast_info, &disc_asgn);
    671a:	a901      	add	r1, sp, #4
    671c:	9834      	ldr	r0, [sp, #208]	; 0xd0
    671e:	47a8      	blx	r5
	} while (memcmp(&disc_asgn.hid, &my_hid, sizeof(struct hardware_id)) != 0);
    6720:	2204      	movs	r2, #4
    6722:	a91d      	add	r1, sp, #116	; 0x74
    6724:	a803      	add	r0, sp, #12
    6726:	47a0      	blx	r4
    6728:	2800      	cmp	r0, #0
    672a:	d1f6      	bne.n	671a <client_discover+0x52>
	debug_print("Assigned addr value %d\n", disc_asgn.addr);
    672c:	ac01      	add	r4, sp, #4
    672e:	89a2      	ldrh	r2, [r4, #12]
    6730:	4b0f      	ldr	r3, [pc, #60]	; (6770 <client_discover+0xa8>)
    6732:	6819      	ldr	r1, [r3, #0]
    6734:	4818      	ldr	r0, [pc, #96]	; (6798 <client_discover+0xd0>)
    6736:	4b10      	ldr	r3, [pc, #64]	; (6778 <client_discover+0xb0>)
    6738:	4798      	blx	r3

	// Fill in this node's information in the table
	struct node* my_info;
	my_info = &node_table[disc_asgn.addr];
    673a:	89a5      	ldrh	r5, [r4, #12]
    673c:	00ac      	lsls	r4, r5, #2
    673e:	1964      	adds	r4, r4, r5
    6740:	00e4      	lsls	r4, r4, #3
    6742:	1934      	adds	r4, r6, r4
	my_info->addr.hops[0] = disc_asgn.addr;
    6744:	6065      	str	r5, [r4, #4]
	my_info->addr.len = 1;
    6746:	2301      	movs	r3, #1
    6748:	6023      	str	r3, [r4, #0]
	memmove((uint8_t*)&my_info->hid, (uint8_t*)&my_hid, sizeof(struct hardware_id));
    674a:	0020      	movs	r0, r4
    674c:	3014      	adds	r0, #20
    674e:	2204      	movs	r2, #4
    6750:	a91d      	add	r1, sp, #116	; 0x74
    6752:	4b0b      	ldr	r3, [pc, #44]	; (6780 <client_discover+0xb8>)
    6754:	4798      	blx	r3
	my_info->haddr.CAN_addr = disc_asgn.addr;
    6756:	8325      	strh	r5, [r4, #24]
	my_info->type = my_node_type;
    6758:	4b0b      	ldr	r3, [pc, #44]	; (6788 <client_discover+0xc0>)
    675a:	781b      	ldrb	r3, [r3, #0]
    675c:	61e3      	str	r3, [r4, #28]
	my_info->network = parent_info->network;
    675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6760:	6263      	str	r3, [r4, #36]	; 0x24
	return my_info;
}
    6762:	0020      	movs	r0, r4
    6764:	b02d      	add	sp, #180	; 0xb4
    6766:	bc0c      	pop	{r2, r3}
    6768:	4690      	mov	r8, r2
    676a:	4699      	mov	r9, r3
    676c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    676e:	46c0      	nop			; (mov r8, r8)
    6770:	20002ba8 	.word	0x20002ba8
    6774:	0000acdc 	.word	0x0000acdc
    6778:	00007105 	.word	0x00007105
    677c:	00000495 	.word	0x00000495
    6780:	00006f6f 	.word	0x00006f6f
    6784:	000084b4 	.word	0x000084b4
    6788:	20000200 	.word	0x20000200
    678c:	000002cd 	.word	0x000002cd
    6790:	0000acf4 	.word	0x0000acf4
    6794:	00006f51 	.word	0x00006f51
    6798:	0000ad14 	.word	0x0000ad14

0000679c <main>:
		node_table[*num_nodes].haddr.CAN_addr = *num_nodes;
	}
}

int main(void)
{
    679c:	b5f0      	push	{r4, r5, r6, r7, lr}
    679e:	46de      	mov	lr, fp
    67a0:	4657      	mov	r7, sl
    67a2:	464e      	mov	r6, r9
    67a4:	4645      	mov	r5, r8
    67a6:	b5e0      	push	{r5, r6, r7, lr}
    67a8:	b0b3      	sub	sp, #204	; 0xcc
	//uint8_t key;

//! [setup_init]
system_init();
    67aa:	4bc4      	ldr	r3, [pc, #784]	; (6abc <main+0x320>)
    67ac:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    67ae:	aa1b      	add	r2, sp, #108	; 0x6c
    67b0:	2380      	movs	r3, #128	; 0x80
    67b2:	05db      	lsls	r3, r3, #23
    67b4:	931b      	str	r3, [sp, #108]	; 0x6c
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    67b6:	2300      	movs	r3, #0
    67b8:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    67ba:	21ff      	movs	r1, #255	; 0xff
    67bc:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    67be:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    67c0:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    67c2:	2401      	movs	r4, #1
    67c4:	39d3      	subs	r1, #211	; 0xd3
    67c6:	5454      	strb	r4, [r2, r1]
	config->transmitter_enable = true;
    67c8:	3101      	adds	r1, #1
    67ca:	5454      	strb	r4, [r2, r1]
	config->clock_polarity_inverted = false;
    67cc:	3101      	adds	r1, #1
    67ce:	5453      	strb	r3, [r2, r1]
	config->use_external_clock = false;
    67d0:	3101      	adds	r1, #1
    67d2:	5453      	strb	r3, [r2, r1]
	config->ext_clock_freq   = 0;
    67d4:	6313      	str	r3, [r2, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    67d6:	3105      	adds	r1, #5
    67d8:	5453      	strb	r3, [r2, r1]
	config->generator_source = GCLK_GENERATOR_0;
    67da:	3101      	adds	r1, #1
    67dc:	5453      	strb	r3, [r2, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    67de:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    67e0:	2100      	movs	r1, #0
    67e2:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    67e4:	76d1      	strb	r1, [r2, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    67e6:	61d3      	str	r3, [r2, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    67e8:	8413      	strh	r3, [r2, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    67ea:	8453      	strh	r3, [r2, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    67ec:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    67ee:	3324      	adds	r3, #36	; 0x24
    67f0:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    67f2:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    67f4:	3b11      	subs	r3, #17
    67f6:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    67f8:	3313      	adds	r3, #19
    67fa:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    67fc:	3b01      	subs	r3, #1
    67fe:	54d1      	strb	r1, [r2, r3]
	config_cdc.baudrate	 = 115200;
    6800:	23e1      	movs	r3, #225	; 0xe1
    6802:	025b      	lsls	r3, r3, #9
    6804:	6293      	str	r3, [r2, #40]	; 0x28
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    6806:	23c4      	movs	r3, #196	; 0xc4
    6808:	039b      	lsls	r3, r3, #14
    680a:	60d3      	str	r3, [r2, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    680c:	2301      	movs	r3, #1
    680e:	425b      	negs	r3, r3
    6810:	6393      	str	r3, [r2, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    6812:	63d3      	str	r3, [r2, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    6814:	4baa      	ldr	r3, [pc, #680]	; (6ac0 <main+0x324>)
    6816:	6413      	str	r3, [r2, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    6818:	4baa      	ldr	r3, [pc, #680]	; (6ac4 <main+0x328>)
    681a:	6453      	str	r3, [r2, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    681c:	4daa      	ldr	r5, [pc, #680]	; (6ac8 <main+0x32c>)
    681e:	4bab      	ldr	r3, [pc, #684]	; (6acc <main+0x330>)
    6820:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    6822:	49ab      	ldr	r1, [pc, #684]	; (6ad0 <main+0x334>)
    6824:	4bab      	ldr	r3, [pc, #684]	; (6ad4 <main+0x338>)
    6826:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6828:	49ab      	ldr	r1, [pc, #684]	; (6ad8 <main+0x33c>)
    682a:	4bac      	ldr	r3, [pc, #688]	; (6adc <main+0x340>)
    682c:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    682e:	49ac      	ldr	r1, [pc, #688]	; (6ae0 <main+0x344>)
    6830:	0028      	movs	r0, r5
    6832:	4bac      	ldr	r3, [pc, #688]	; (6ae4 <main+0x348>)
    6834:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    6836:	4bac      	ldr	r3, [pc, #688]	; (6ae8 <main+0x34c>)
    6838:	4698      	mov	r8, r3
    683a:	681b      	ldr	r3, [r3, #0]
    683c:	6898      	ldr	r0, [r3, #8]
    683e:	2100      	movs	r1, #0
    6840:	4eaa      	ldr	r6, [pc, #680]	; (6aec <main+0x350>)
    6842:	47b0      	blx	r6
	setbuf(stdin, NULL);
    6844:	4643      	mov	r3, r8
    6846:	681b      	ldr	r3, [r3, #0]
    6848:	6858      	ldr	r0, [r3, #4]
    684a:	2100      	movs	r1, #0
    684c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    684e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6850:	0030      	movs	r0, r6
    6852:	4ba7      	ldr	r3, [pc, #668]	; (6af0 <main+0x354>)
    6854:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6856:	231f      	movs	r3, #31
    6858:	4018      	ands	r0, r3
    685a:	4084      	lsls	r4, r0
    685c:	4ba5      	ldr	r3, [pc, #660]	; (6af4 <main+0x358>)
    685e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6860:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6862:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    6864:	2a00      	cmp	r2, #0
    6866:	d1fc      	bne.n	6862 <main+0xc6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6868:	6833      	ldr	r3, [r6, #0]
    686a:	3202      	adds	r2, #2
    686c:	4690      	mov	r8, r2
    686e:	4313      	orrs	r3, r2
    6870:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6872:	ae0d      	add	r6, sp, #52	; 0x34
    6874:	2400      	movs	r4, #0
    6876:	7074      	strb	r4, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6878:	2501      	movs	r5, #1
    687a:	70b5      	strb	r5, [r6, #2]
	config->powersave    = false;
    687c:	70f4      	strb	r4, [r6, #3]
	pin_config.mux_position = CAN_TX_MUX_SETTING;
    687e:	2306      	movs	r3, #6
    6880:	469a      	mov	sl, r3
    6882:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
    6884:	0031      	movs	r1, r6
    6886:	2018      	movs	r0, #24
    6888:	4b9b      	ldr	r3, [pc, #620]	; (6af8 <main+0x35c>)
    688a:	4699      	mov	r9, r3
    688c:	4798      	blx	r3
	pin_config.mux_position = CAN_RX_MUX_SETTING;
    688e:	4653      	mov	r3, sl
    6890:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
    6892:	0031      	movs	r1, r6
    6894:	2019      	movs	r0, #25
    6896:	47c8      	blx	r9
	config->clock_source = GCLK_GENERATOR_8;
    6898:	aa1b      	add	r2, sp, #108	; 0x6c
    689a:	2308      	movs	r3, #8
    689c:	7013      	strb	r3, [r2, #0]
	config->run_in_standby = false;
    689e:	7054      	strb	r4, [r2, #1]
	config->watchdog_configuration = 0x00;
    68a0:	7094      	strb	r4, [r2, #2]
	config->transmit_pause = true;
    68a2:	70d5      	strb	r5, [r2, #3]
	config->edge_filtering = true;
    68a4:	7115      	strb	r5, [r2, #4]
	config->protocol_exception_handling = true;
    68a6:	7155      	strb	r5, [r2, #5]
	config->automatic_retransmission = true;
    68a8:	7195      	strb	r5, [r2, #6]
	config->clock_stop_request = false;
    68aa:	71d4      	strb	r4, [r2, #7]
	config->clock_stop_acknowledge = false;
    68ac:	7214      	strb	r4, [r2, #8]
	config->timestamp_prescaler = 0;
    68ae:	7254      	strb	r4, [r2, #9]
	config->timeout_period = 0xFFFF;
    68b0:	3b09      	subs	r3, #9
    68b2:	8153      	strh	r3, [r2, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
    68b4:	7314      	strb	r4, [r2, #12]
	config->timeout_enable = false;
    68b6:	7354      	strb	r4, [r2, #13]
	config->tdc_enable = false;
    68b8:	7394      	strb	r4, [r2, #14]
	config->delay_compensation_offset = 0;
    68ba:	73d4      	strb	r4, [r2, #15]
	config->delay_compensation_filter_window_length = 0;
    68bc:	7414      	strb	r4, [r2, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
    68be:	4643      	mov	r3, r8
    68c0:	7453      	strb	r3, [r2, #17]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
    68c2:	7493      	strb	r3, [r2, #18]
	config->remote_frames_standard_reject = true;
    68c4:	74d5      	strb	r5, [r2, #19]
	config->remote_frames_extended_reject = true;
    68c6:	7515      	strb	r5, [r2, #20]
	config->extended_id_mask = 0x1FFFFFFF;
    68c8:	4b8c      	ldr	r3, [pc, #560]	; (6afc <main+0x360>)
    68ca:	6193      	str	r3, [r2, #24]
	config->rx_fifo_0_overwrite = true;
    68cc:	7715      	strb	r5, [r2, #28]
	config->rx_fifo_0_watermark = 0;
    68ce:	7754      	strb	r4, [r2, #29]
	config->rx_fifo_1_overwrite = true;
    68d0:	7795      	strb	r5, [r2, #30]
	config->rx_fifo_1_watermark = 0;
    68d2:	77d4      	strb	r4, [r2, #31]
	config->tx_queue_mode = false;
    68d4:	2320      	movs	r3, #32
    68d6:	54d4      	strb	r4, [r2, r3]
	config->tx_event_fifo_watermark = 0;
    68d8:	3301      	adds	r3, #1
    68da:	54d4      	strb	r4, [r2, r3]
	can_init(&can0_instance, CAN_MODULE, &config_can);
    68dc:	4e88      	ldr	r6, [pc, #544]	; (6b00 <main+0x364>)
    68de:	4989      	ldr	r1, [pc, #548]	; (6b04 <main+0x368>)
    68e0:	0030      	movs	r0, r6
    68e2:	4b89      	ldr	r3, [pc, #548]	; (6b08 <main+0x36c>)
    68e4:	4798      	blx	r3
	can_enable_fd_mode(&can0_instance);
    68e6:	0030      	movs	r0, r6
    68e8:	4b88      	ldr	r3, [pc, #544]	; (6b0c <main+0x370>)
    68ea:	4798      	blx	r3
	can_start(&can0_instance);
    68ec:	0030      	movs	r0, r6
    68ee:	4b88      	ldr	r3, [pc, #544]	; (6b10 <main+0x374>)
    68f0:	4798      	blx	r3
    68f2:	4b80      	ldr	r3, [pc, #512]	; (6af4 <main+0x358>)
    68f4:	2280      	movs	r2, #128	; 0x80
    68f6:	0212      	lsls	r2, r2, #8
    68f8:	4690      	mov	r8, r2
    68fa:	601a      	str	r2, [r3, #0]
    68fc:	2280      	movs	r2, #128	; 0x80
    68fe:	0252      	lsls	r2, r2, #9
    6900:	601a      	str	r2, [r3, #0]
	module_inst->hw->IE.reg |= source;
    6902:	6832      	ldr	r2, [r6, #0]
    6904:	6d51      	ldr	r1, [r2, #84]	; 0x54
    6906:	23c0      	movs	r3, #192	; 0xc0
    6908:	055b      	lsls	r3, r3, #21
    690a:	430b      	orrs	r3, r1
    690c:	6553      	str	r3, [r2, #84]	; 0x54
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    690e:	a931      	add	r1, sp, #196	; 0xc4
    6910:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    6912:	708c      	strb	r4, [r1, #2]
//! [configure_can]
configure_can();
//! [configure_can]
struct port_config config_port_pin;
port_get_config_defaults(&config_port_pin);
config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    6914:	700d      	strb	r5, [r1, #0]
port_pin_set_config(LED_0_PIN, &config_port_pin);
    6916:	200f      	movs	r0, #15
    6918:	4b7e      	ldr	r3, [pc, #504]	; (6b14 <main+0x378>)
    691a:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    691c:	2382      	movs	r3, #130	; 0x82
    691e:	05db      	lsls	r3, r3, #23
    6920:	4642      	mov	r2, r8
    6922:	619a      	str	r2, [r3, #24]
port_pin_set_output_level(LED_0_PIN, 1);
printf("Starting\r\n");
    6924:	487c      	ldr	r0, [pc, #496]	; (6b18 <main+0x37c>)
    6926:	4b7d      	ldr	r3, [pc, #500]	; (6b1c <main+0x380>)
    6928:	4798      	blx	r3
node_my_name = myname;
    692a:	4b7d      	ldr	r3, [pc, #500]	; (6b20 <main+0x384>)
    692c:	681a      	ldr	r2, [r3, #0]
    692e:	4b7d      	ldr	r3, [pc, #500]	; (6b24 <main+0x388>)
    6930:	601a      	str	r2, [r3, #0]
InitKWIDKeyData();
    6932:	4b7d      	ldr	r3, [pc, #500]	; (6b28 <main+0x38c>)
    6934:	4798      	blx	r3
if (SYSTEM_NODE_TYPE == NODE_TYPE_MOTOR)
	initMotor();
else if (SYSTEM_NODE_TYPE == NODE_TYPE_FAN)
	initFan();
else if (SYSTEM_NODE_TYPE == NODE_TYPE_TSENS)
	initTSENS();
    6936:	4b7d      	ldr	r3, [pc, #500]	; (6b2c <main+0x390>)
    6938:	4798      	blx	r3

struct network parent_net;
parent_net.can_instance = &can0_instance;
    693a:	962d      	str	r6, [sp, #180]	; 0xb4
parent_net.buff_num = CAN0_COMM_BUFF_INDEX;
    693c:	942f      	str	r4, [sp, #188]	; 0xbc
parent_net.broadcast_buff_num = CAN0_BROADCAST_INDEX;
    693e:	9530      	str	r5, [sp, #192]	; 0xc0
parent_net.rx_element_buff = CAN0_rx_element_buff;
    6940:	4b7b      	ldr	r3, [pc, #492]	; (6b30 <main+0x394>)
    6942:	932e      	str	r3, [sp, #184]	; 0xb8
node_make_broadcast(&parent_net,&parent_broadcast_info);
    6944:	4c7b      	ldr	r4, [pc, #492]	; (6b34 <main+0x398>)
    6946:	0021      	movs	r1, r4
    6948:	a82d      	add	r0, sp, #180	; 0xb4
    694a:	4b7b      	ldr	r3, [pc, #492]	; (6b38 <main+0x39c>)
    694c:	4798      	blx	r3
node_make_parent(&parent_net,parent_info);
    694e:	4d7b      	ldr	r5, [pc, #492]	; (6b3c <main+0x3a0>)
    6950:	6829      	ldr	r1, [r5, #0]
    6952:	a82d      	add	r0, sp, #180	; 0xb4
    6954:	4b7a      	ldr	r3, [pc, #488]	; (6b40 <main+0x3a4>)
    6956:	4798      	blx	r3
network_start_listening(&parent_net,&parent_broadcast_info.haddr);
    6958:	0021      	movs	r1, r4
    695a:	3118      	adds	r1, #24
    695c:	a82d      	add	r0, sp, #180	; 0xb4
    695e:	4b79      	ldr	r3, [pc, #484]	; (6b44 <main+0x3a8>)
    6960:	4798      	blx	r3
my_parent_info = client_discover(parent_table, parent_max_nodes, &parent_num_nodes, parent_info, &parent_broadcast_info);
    6962:	682b      	ldr	r3, [r5, #0]
    6964:	4d78      	ldr	r5, [pc, #480]	; (6b48 <main+0x3ac>)
    6966:	4a79      	ldr	r2, [pc, #484]	; (6b4c <main+0x3b0>)
    6968:	6811      	ldr	r1, [r2, #0]
    696a:	9400      	str	r4, [sp, #0]
    696c:	002a      	movs	r2, r5
    696e:	4878      	ldr	r0, [pc, #480]	; (6b50 <main+0x3b4>)
    6970:	4c78      	ldr	r4, [pc, #480]	; (6b54 <main+0x3b8>)
    6972:	47a0      	blx	r4
    6974:	4b78      	ldr	r3, [pc, #480]	; (6b58 <main+0x3bc>)
    6976:	6018      	str	r0, [r3, #0]
for (int i = 0; i < parent_num_nodes; i++) {
    6978:	682c      	ldr	r4, [r5, #0]
    697a:	2c00      	cmp	r4, #0
    697c:	dd0c      	ble.n	6998 <main+0x1fc>
    697e:	4a74      	ldr	r2, [pc, #464]	; (6b50 <main+0x3b4>)
    6980:	0011      	movs	r1, r2
    6982:	3120      	adds	r1, #32
    6984:	00a3      	lsls	r3, r4, #2
    6986:	191b      	adds	r3, r3, r4
    6988:	00db      	lsls	r3, r3, #3
    698a:	3320      	adds	r3, #32
    698c:	18d3      	adds	r3, r2, r3
	parent_table[i].encryption_data = &selfData.ASCON_data; // or whatever
    698e:	4a73      	ldr	r2, [pc, #460]	; (6b5c <main+0x3c0>)
    6990:	600a      	str	r2, [r1, #0]
    6992:	3128      	adds	r1, #40	; 0x28
for (int i = 0; i < parent_num_nodes; i++) {
    6994:	4299      	cmp	r1, r3
    6996:	d1fb      	bne.n	6990 <main+0x1f4>
}
parent_broadcast_info.encryption_data = &selfData.ASCON_data;
    6998:	4c66      	ldr	r4, [pc, #408]	; (6b34 <main+0x398>)
    699a:	4b70      	ldr	r3, [pc, #448]	; (6b5c <main+0x3c0>)
    699c:	6223      	str	r3, [r4, #32]
my_parent_info->encryption_data = &selfData.ASCON_data;
    699e:	6203      	str	r3, [r0, #32]
network_start_listening(&parent_net,&my_parent_info->haddr);
    69a0:	0001      	movs	r1, r0
    69a2:	3118      	adds	r1, #24
    69a4:	a82d      	add	r0, sp, #180	; 0xb4
    69a6:	4b67      	ldr	r3, [pc, #412]	; (6b44 <main+0x3a8>)
    69a8:	4798      	blx	r3
authToParent(my_parent_info,parent_info,&parent_broadcast_info);
    69aa:	4b64      	ldr	r3, [pc, #400]	; (6b3c <main+0x3a0>)
    69ac:	6819      	ldr	r1, [r3, #0]
    69ae:	4b6a      	ldr	r3, [pc, #424]	; (6b58 <main+0x3bc>)
    69b0:	6818      	ldr	r0, [r3, #0]
    69b2:	0022      	movs	r2, r4
    69b4:	4b6a      	ldr	r3, [pc, #424]	; (6b60 <main+0x3c4>)
    69b6:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    69b8:	2280      	movs	r2, #128	; 0x80
    69ba:	0212      	lsls	r2, r2, #8
    69bc:	2382      	movs	r3, #130	; 0x82
    69be:	05db      	lsls	r3, r3, #23
    69c0:	615a      	str	r2, [r3, #20]
//my_parent_info->haddr.type = parent_net.type;

int test_val = 0;
while (1) {
	struct node_msg_generic msg;
	if (node_msg_check(&parent_broadcast_info, &msg)) {
    69c2:	4c68      	ldr	r4, [pc, #416]	; (6b64 <main+0x3c8>)
		if (msg.header.TTL == 0) {
			switch (msg.header.cmd) {
				case NODE_CMD_READ: {
					struct node_msg_data_addr* msg_read = (void*)&msg;
					debug_print("Received read request from %d for addr %x\n", msg_read->header.ret, msg_read->addr);
    69c4:	4b57      	ldr	r3, [pc, #348]	; (6b24 <main+0x388>)
    69c6:	4698      	mov	r8, r3
    69c8:	e02d      	b.n	6a26 <main+0x28a>
    69ca:	ae0d      	add	r6, sp, #52	; 0x34
    69cc:	7972      	ldrb	r2, [r6, #5]
    69ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69d0:	4641      	mov	r1, r8
    69d2:	6809      	ldr	r1, [r1, #0]
    69d4:	4864      	ldr	r0, [pc, #400]	; (6b68 <main+0x3cc>)
    69d6:	4d65      	ldr	r5, [pc, #404]	; (6b6c <main+0x3d0>)
    69d8:	47a8      	blx	r5
					uint32_t result;
					switch(msg_read->addr) {
    69da:	68b3      	ldr	r3, [r6, #8]
    69dc:	2b01      	cmp	r3, #1
    69de:	d05f      	beq.n	6aa0 <main+0x304>
    69e0:	2b00      	cmp	r3, #0
    69e2:	d058      	beq.n	6a96 <main+0x2fa>
    69e4:	2b02      	cmp	r3, #2
    69e6:	d101      	bne.n	69ec <main+0x250>
							break;
						case CB_VAL_STATUS_ALT:
							result = (cap_callback_ref.status_cb_get_alt)();
							break;
						case CB_TEST:
							result = test_val;
    69e8:	2300      	movs	r3, #0
    69ea:	469b      	mov	fp, r3
				}
				struct node source;
				node_make_source_from_msg(my_parent_info->network, &source, parent_table, parent_num_nodes, msg_read);
    69ec:	4b56      	ldr	r3, [pc, #344]	; (6b48 <main+0x3ac>)
    69ee:	681b      	ldr	r3, [r3, #0]
    69f0:	4d59      	ldr	r5, [pc, #356]	; (6b58 <main+0x3bc>)
    69f2:	682a      	ldr	r2, [r5, #0]
    69f4:	6a50      	ldr	r0, [r2, #36]	; 0x24
    69f6:	ae0d      	add	r6, sp, #52	; 0x34
    69f8:	9600      	str	r6, [sp, #0]
    69fa:	4a55      	ldr	r2, [pc, #340]	; (6b50 <main+0x3b4>)
    69fc:	a903      	add	r1, sp, #12
    69fe:	4f5c      	ldr	r7, [pc, #368]	; (6b70 <main+0x3d4>)
    6a00:	47b8      	blx	r7

				struct node_msg_data_addr_value msg_read_resp;
				msg_read_resp.addr = msg_read->addr;
    6a02:	68b3      	ldr	r3, [r6, #8]
    6a04:	931d      	str	r3, [sp, #116]	; 0x74
				msg_read_resp.value = result;
    6a06:	465a      	mov	r2, fp
    6a08:	921e      	str	r2, [sp, #120]	; 0x78
				debug_print("Sending response to %d, addr %x, data %x\n", msg_read->header.ret, msg_read_resp.addr, msg_read_resp.value);
    6a0a:	7972      	ldrb	r2, [r6, #5]
    6a0c:	4945      	ldr	r1, [pc, #276]	; (6b24 <main+0x388>)
    6a0e:	6809      	ldr	r1, [r1, #0]
    6a10:	4658      	mov	r0, fp
    6a12:	9000      	str	r0, [sp, #0]
    6a14:	4857      	ldr	r0, [pc, #348]	; (6b74 <main+0x3d8>)
    6a16:	4e55      	ldr	r6, [pc, #340]	; (6b6c <main+0x3d0>)
    6a18:	47b0      	blx	r6
				node_msg_send(my_parent_info, &source, NODE_CMD_READ_RESP, &msg_read_resp);
    6a1a:	6828      	ldr	r0, [r5, #0]
    6a1c:	ab1b      	add	r3, sp, #108	; 0x6c
    6a1e:	220d      	movs	r2, #13
    6a20:	a903      	add	r1, sp, #12
    6a22:	4e55      	ldr	r6, [pc, #340]	; (6b78 <main+0x3dc>)
    6a24:	47b0      	blx	r6
	if (node_msg_check(&parent_broadcast_info, &msg)) {
    6a26:	a90d      	add	r1, sp, #52	; 0x34
    6a28:	4842      	ldr	r0, [pc, #264]	; (6b34 <main+0x398>)
    6a2a:	47a0      	blx	r4
    6a2c:	2800      	cmp	r0, #0
    6a2e:	d0fa      	beq.n	6a26 <main+0x28a>
		if (msg.header.TTL == 0) {
    6a30:	ab0d      	add	r3, sp, #52	; 0x34
    6a32:	791b      	ldrb	r3, [r3, #4]
    6a34:	2b00      	cmp	r3, #0
    6a36:	d1f6      	bne.n	6a26 <main+0x28a>
			switch (msg.header.cmd) {
    6a38:	ab0d      	add	r3, sp, #52	; 0x34
    6a3a:	799b      	ldrb	r3, [r3, #6]
    6a3c:	2b0c      	cmp	r3, #12
    6a3e:	d0c4      	beq.n	69ca <main+0x22e>
    6a40:	2b0e      	cmp	r3, #14
    6a42:	d1f0      	bne.n	6a26 <main+0x28a>
				break;
			}
				
				case NODE_CMD_WRITE: {
					struct node_msg_data_addr_value* msg_write = (void*)&msg;
					debug_print("Received write request from %d for addr %x, data %x\n", msg_write->header.ret, msg_write->addr, msg_write->value);
    6a44:	ae0d      	add	r6, sp, #52	; 0x34
    6a46:	7972      	ldrb	r2, [r6, #5]
    6a48:	4b36      	ldr	r3, [pc, #216]	; (6b24 <main+0x388>)
    6a4a:	6819      	ldr	r1, [r3, #0]
    6a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6a4e:	9300      	str	r3, [sp, #0]
    6a50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6a52:	484a      	ldr	r0, [pc, #296]	; (6b7c <main+0x3e0>)
    6a54:	4d45      	ldr	r5, [pc, #276]	; (6b6c <main+0x3d0>)
    6a56:	47a8      	blx	r5
					uint32_t result;
					switch(msg_write->addr) {
    6a58:	68b3      	ldr	r3, [r6, #8]
    6a5a:	2b00      	cmp	r3, #0
    6a5c:	d025      	beq.n	6aaa <main+0x30e>
    6a5e:	2b01      	cmp	r3, #1
    6a60:	d028      	beq.n	6ab4 <main+0x318>
						break;
						case CB_TEST:
						result = test_val;
					}
					struct node source;
					node_make_source_from_msg(my_parent_info->network, &source, parent_table, parent_num_nodes, msg_write);
    6a62:	4b39      	ldr	r3, [pc, #228]	; (6b48 <main+0x3ac>)
    6a64:	681b      	ldr	r3, [r3, #0]
    6a66:	4d3c      	ldr	r5, [pc, #240]	; (6b58 <main+0x3bc>)
    6a68:	682a      	ldr	r2, [r5, #0]
    6a6a:	6a50      	ldr	r0, [r2, #36]	; 0x24
    6a6c:	ae0d      	add	r6, sp, #52	; 0x34
    6a6e:	9600      	str	r6, [sp, #0]
    6a70:	4a37      	ldr	r2, [pc, #220]	; (6b50 <main+0x3b4>)
    6a72:	a903      	add	r1, sp, #12
    6a74:	4f3e      	ldr	r7, [pc, #248]	; (6b70 <main+0x3d4>)
    6a76:	47b8      	blx	r7

					struct node_msg_data_addr msg_write_resp;
					msg_write_resp.addr = msg_write->addr;
    6a78:	68b3      	ldr	r3, [r6, #8]
    6a7a:	931d      	str	r3, [sp, #116]	; 0x74
					debug_print("Sending response to %d, addr %x\n", msg_write->header.ret, msg_write_resp.addr);
    6a7c:	7972      	ldrb	r2, [r6, #5]
    6a7e:	4929      	ldr	r1, [pc, #164]	; (6b24 <main+0x388>)
    6a80:	6809      	ldr	r1, [r1, #0]
    6a82:	483f      	ldr	r0, [pc, #252]	; (6b80 <main+0x3e4>)
    6a84:	4e39      	ldr	r6, [pc, #228]	; (6b6c <main+0x3d0>)
    6a86:	47b0      	blx	r6
					node_msg_send(my_parent_info, &source, NODE_CMD_READ_RESP, &msg_write_resp);
    6a88:	6828      	ldr	r0, [r5, #0]
    6a8a:	ab1b      	add	r3, sp, #108	; 0x6c
    6a8c:	220d      	movs	r2, #13
    6a8e:	a903      	add	r1, sp, #12
    6a90:	4e39      	ldr	r6, [pc, #228]	; (6b78 <main+0x3dc>)
    6a92:	47b0      	blx	r6
while (1) {
    6a94:	e7c7      	b.n	6a26 <main+0x28a>
							result = (cap_callback_ref.status_cb_get)();
    6a96:	4b3b      	ldr	r3, [pc, #236]	; (6b84 <main+0x3e8>)
    6a98:	681b      	ldr	r3, [r3, #0]
    6a9a:	4798      	blx	r3
    6a9c:	4683      	mov	fp, r0
							break;
    6a9e:	e7a5      	b.n	69ec <main+0x250>
							result = (cap_callback_ref.status_cb_get_alt)();
    6aa0:	4b38      	ldr	r3, [pc, #224]	; (6b84 <main+0x3e8>)
    6aa2:	685b      	ldr	r3, [r3, #4]
    6aa4:	4798      	blx	r3
    6aa6:	4683      	mov	fp, r0
							break;
    6aa8:	e7a0      	b.n	69ec <main+0x250>
						(cap_callback_ref.write_cb_set)(msg_write->value);
    6aaa:	4b36      	ldr	r3, [pc, #216]	; (6b84 <main+0x3e8>)
    6aac:	689b      	ldr	r3, [r3, #8]
    6aae:	9810      	ldr	r0, [sp, #64]	; 0x40
    6ab0:	4798      	blx	r3
						break;
    6ab2:	e7d6      	b.n	6a62 <main+0x2c6>
						(cap_callback_ref.write_cb_toggle)();
    6ab4:	4b33      	ldr	r3, [pc, #204]	; (6b84 <main+0x3e8>)
    6ab6:	68db      	ldr	r3, [r3, #12]
    6ab8:	4798      	blx	r3
						break;
    6aba:	e7d2      	b.n	6a62 <main+0x2c6>
    6abc:	00003a41 	.word	0x00003a41
    6ac0:	002a0003 	.word	0x002a0003
    6ac4:	002b0003 	.word	0x002b0003
    6ac8:	200024d0 	.word	0x200024d0
    6acc:	20002b7c 	.word	0x20002b7c
    6ad0:	000065e5 	.word	0x000065e5
    6ad4:	20002b78 	.word	0x20002b78
    6ad8:	000065b9 	.word	0x000065b9
    6adc:	20002b74 	.word	0x20002b74
    6ae0:	42001400 	.word	0x42001400
    6ae4:	00002dc9 	.word	0x00002dc9
    6ae8:	20000210 	.word	0x20000210
    6aec:	000072a9 	.word	0x000072a9
    6af0:	00002d39 	.word	0x00002d39
    6af4:	e000e100 	.word	0xe000e100
    6af8:	00003a11 	.word	0x00003a11
    6afc:	1fffffff 	.word	0x1fffffff
    6b00:	200026cc 	.word	0x200026cc
    6b04:	42001c00 	.word	0x42001c00
    6b08:	000024ed 	.word	0x000024ed
    6b0c:	00002807 	.word	0x00002807
    6b10:	000027f1 	.word	0x000027f1
    6b14:	0000295d 	.word	0x0000295d
    6b18:	0000ad34 	.word	0x0000ad34
    6b1c:	000071f9 	.word	0x000071f9
    6b20:	20000034 	.word	0x20000034
    6b24:	20002ba8 	.word	0x20002ba8
    6b28:	00000fd5 	.word	0x00000fd5
    6b2c:	00000829 	.word	0x00000829
    6b30:	200026d0 	.word	0x200026d0
    6b34:	20002b80 	.word	0x20002b80
    6b38:	000001a9 	.word	0x000001a9
    6b3c:	20000204 	.word	0x20000204
    6b40:	00000181 	.word	0x00000181
    6b44:	00000c19 	.word	0x00000c19
    6b48:	2000020c 	.word	0x2000020c
    6b4c:	20000208 	.word	0x20000208
    6b50:	20002508 	.word	0x20002508
    6b54:	000066c9 	.word	0x000066c9
    6b58:	20002504 	.word	0x20002504
    6b5c:	200000ac 	.word	0x200000ac
    6b60:	00001025 	.word	0x00001025
    6b64:	000005fd 	.word	0x000005fd
    6b68:	0000ad40 	.word	0x0000ad40
    6b6c:	00007105 	.word	0x00007105
    6b70:	000001d9 	.word	0x000001d9
    6b74:	0000ad70 	.word	0x0000ad70
    6b78:	000002cd 	.word	0x000002cd
    6b7c:	0000ada0 	.word	0x0000ada0
    6b80:	0000addc 	.word	0x0000addc
    6b84:	200001f0 	.word	0x200001f0

00006b88 <__udivsi3>:
    6b88:	2200      	movs	r2, #0
    6b8a:	0843      	lsrs	r3, r0, #1
    6b8c:	428b      	cmp	r3, r1
    6b8e:	d374      	bcc.n	6c7a <__udivsi3+0xf2>
    6b90:	0903      	lsrs	r3, r0, #4
    6b92:	428b      	cmp	r3, r1
    6b94:	d35f      	bcc.n	6c56 <__udivsi3+0xce>
    6b96:	0a03      	lsrs	r3, r0, #8
    6b98:	428b      	cmp	r3, r1
    6b9a:	d344      	bcc.n	6c26 <__udivsi3+0x9e>
    6b9c:	0b03      	lsrs	r3, r0, #12
    6b9e:	428b      	cmp	r3, r1
    6ba0:	d328      	bcc.n	6bf4 <__udivsi3+0x6c>
    6ba2:	0c03      	lsrs	r3, r0, #16
    6ba4:	428b      	cmp	r3, r1
    6ba6:	d30d      	bcc.n	6bc4 <__udivsi3+0x3c>
    6ba8:	22ff      	movs	r2, #255	; 0xff
    6baa:	0209      	lsls	r1, r1, #8
    6bac:	ba12      	rev	r2, r2
    6bae:	0c03      	lsrs	r3, r0, #16
    6bb0:	428b      	cmp	r3, r1
    6bb2:	d302      	bcc.n	6bba <__udivsi3+0x32>
    6bb4:	1212      	asrs	r2, r2, #8
    6bb6:	0209      	lsls	r1, r1, #8
    6bb8:	d065      	beq.n	6c86 <__udivsi3+0xfe>
    6bba:	0b03      	lsrs	r3, r0, #12
    6bbc:	428b      	cmp	r3, r1
    6bbe:	d319      	bcc.n	6bf4 <__udivsi3+0x6c>
    6bc0:	e000      	b.n	6bc4 <__udivsi3+0x3c>
    6bc2:	0a09      	lsrs	r1, r1, #8
    6bc4:	0bc3      	lsrs	r3, r0, #15
    6bc6:	428b      	cmp	r3, r1
    6bc8:	d301      	bcc.n	6bce <__udivsi3+0x46>
    6bca:	03cb      	lsls	r3, r1, #15
    6bcc:	1ac0      	subs	r0, r0, r3
    6bce:	4152      	adcs	r2, r2
    6bd0:	0b83      	lsrs	r3, r0, #14
    6bd2:	428b      	cmp	r3, r1
    6bd4:	d301      	bcc.n	6bda <__udivsi3+0x52>
    6bd6:	038b      	lsls	r3, r1, #14
    6bd8:	1ac0      	subs	r0, r0, r3
    6bda:	4152      	adcs	r2, r2
    6bdc:	0b43      	lsrs	r3, r0, #13
    6bde:	428b      	cmp	r3, r1
    6be0:	d301      	bcc.n	6be6 <__udivsi3+0x5e>
    6be2:	034b      	lsls	r3, r1, #13
    6be4:	1ac0      	subs	r0, r0, r3
    6be6:	4152      	adcs	r2, r2
    6be8:	0b03      	lsrs	r3, r0, #12
    6bea:	428b      	cmp	r3, r1
    6bec:	d301      	bcc.n	6bf2 <__udivsi3+0x6a>
    6bee:	030b      	lsls	r3, r1, #12
    6bf0:	1ac0      	subs	r0, r0, r3
    6bf2:	4152      	adcs	r2, r2
    6bf4:	0ac3      	lsrs	r3, r0, #11
    6bf6:	428b      	cmp	r3, r1
    6bf8:	d301      	bcc.n	6bfe <__udivsi3+0x76>
    6bfa:	02cb      	lsls	r3, r1, #11
    6bfc:	1ac0      	subs	r0, r0, r3
    6bfe:	4152      	adcs	r2, r2
    6c00:	0a83      	lsrs	r3, r0, #10
    6c02:	428b      	cmp	r3, r1
    6c04:	d301      	bcc.n	6c0a <__udivsi3+0x82>
    6c06:	028b      	lsls	r3, r1, #10
    6c08:	1ac0      	subs	r0, r0, r3
    6c0a:	4152      	adcs	r2, r2
    6c0c:	0a43      	lsrs	r3, r0, #9
    6c0e:	428b      	cmp	r3, r1
    6c10:	d301      	bcc.n	6c16 <__udivsi3+0x8e>
    6c12:	024b      	lsls	r3, r1, #9
    6c14:	1ac0      	subs	r0, r0, r3
    6c16:	4152      	adcs	r2, r2
    6c18:	0a03      	lsrs	r3, r0, #8
    6c1a:	428b      	cmp	r3, r1
    6c1c:	d301      	bcc.n	6c22 <__udivsi3+0x9a>
    6c1e:	020b      	lsls	r3, r1, #8
    6c20:	1ac0      	subs	r0, r0, r3
    6c22:	4152      	adcs	r2, r2
    6c24:	d2cd      	bcs.n	6bc2 <__udivsi3+0x3a>
    6c26:	09c3      	lsrs	r3, r0, #7
    6c28:	428b      	cmp	r3, r1
    6c2a:	d301      	bcc.n	6c30 <__udivsi3+0xa8>
    6c2c:	01cb      	lsls	r3, r1, #7
    6c2e:	1ac0      	subs	r0, r0, r3
    6c30:	4152      	adcs	r2, r2
    6c32:	0983      	lsrs	r3, r0, #6
    6c34:	428b      	cmp	r3, r1
    6c36:	d301      	bcc.n	6c3c <__udivsi3+0xb4>
    6c38:	018b      	lsls	r3, r1, #6
    6c3a:	1ac0      	subs	r0, r0, r3
    6c3c:	4152      	adcs	r2, r2
    6c3e:	0943      	lsrs	r3, r0, #5
    6c40:	428b      	cmp	r3, r1
    6c42:	d301      	bcc.n	6c48 <__udivsi3+0xc0>
    6c44:	014b      	lsls	r3, r1, #5
    6c46:	1ac0      	subs	r0, r0, r3
    6c48:	4152      	adcs	r2, r2
    6c4a:	0903      	lsrs	r3, r0, #4
    6c4c:	428b      	cmp	r3, r1
    6c4e:	d301      	bcc.n	6c54 <__udivsi3+0xcc>
    6c50:	010b      	lsls	r3, r1, #4
    6c52:	1ac0      	subs	r0, r0, r3
    6c54:	4152      	adcs	r2, r2
    6c56:	08c3      	lsrs	r3, r0, #3
    6c58:	428b      	cmp	r3, r1
    6c5a:	d301      	bcc.n	6c60 <__udivsi3+0xd8>
    6c5c:	00cb      	lsls	r3, r1, #3
    6c5e:	1ac0      	subs	r0, r0, r3
    6c60:	4152      	adcs	r2, r2
    6c62:	0883      	lsrs	r3, r0, #2
    6c64:	428b      	cmp	r3, r1
    6c66:	d301      	bcc.n	6c6c <__udivsi3+0xe4>
    6c68:	008b      	lsls	r3, r1, #2
    6c6a:	1ac0      	subs	r0, r0, r3
    6c6c:	4152      	adcs	r2, r2
    6c6e:	0843      	lsrs	r3, r0, #1
    6c70:	428b      	cmp	r3, r1
    6c72:	d301      	bcc.n	6c78 <__udivsi3+0xf0>
    6c74:	004b      	lsls	r3, r1, #1
    6c76:	1ac0      	subs	r0, r0, r3
    6c78:	4152      	adcs	r2, r2
    6c7a:	1a41      	subs	r1, r0, r1
    6c7c:	d200      	bcs.n	6c80 <__udivsi3+0xf8>
    6c7e:	4601      	mov	r1, r0
    6c80:	4152      	adcs	r2, r2
    6c82:	4610      	mov	r0, r2
    6c84:	4770      	bx	lr
    6c86:	e7ff      	b.n	6c88 <__udivsi3+0x100>
    6c88:	b501      	push	{r0, lr}
    6c8a:	2000      	movs	r0, #0
    6c8c:	f000 f8f0 	bl	6e70 <__aeabi_idiv0>
    6c90:	bd02      	pop	{r1, pc}
    6c92:	46c0      	nop			; (mov r8, r8)

00006c94 <__aeabi_uidivmod>:
    6c94:	2900      	cmp	r1, #0
    6c96:	d0f7      	beq.n	6c88 <__udivsi3+0x100>
    6c98:	e776      	b.n	6b88 <__udivsi3>
    6c9a:	4770      	bx	lr

00006c9c <__divsi3>:
    6c9c:	4603      	mov	r3, r0
    6c9e:	430b      	orrs	r3, r1
    6ca0:	d47f      	bmi.n	6da2 <__divsi3+0x106>
    6ca2:	2200      	movs	r2, #0
    6ca4:	0843      	lsrs	r3, r0, #1
    6ca6:	428b      	cmp	r3, r1
    6ca8:	d374      	bcc.n	6d94 <__divsi3+0xf8>
    6caa:	0903      	lsrs	r3, r0, #4
    6cac:	428b      	cmp	r3, r1
    6cae:	d35f      	bcc.n	6d70 <__divsi3+0xd4>
    6cb0:	0a03      	lsrs	r3, r0, #8
    6cb2:	428b      	cmp	r3, r1
    6cb4:	d344      	bcc.n	6d40 <__divsi3+0xa4>
    6cb6:	0b03      	lsrs	r3, r0, #12
    6cb8:	428b      	cmp	r3, r1
    6cba:	d328      	bcc.n	6d0e <__divsi3+0x72>
    6cbc:	0c03      	lsrs	r3, r0, #16
    6cbe:	428b      	cmp	r3, r1
    6cc0:	d30d      	bcc.n	6cde <__divsi3+0x42>
    6cc2:	22ff      	movs	r2, #255	; 0xff
    6cc4:	0209      	lsls	r1, r1, #8
    6cc6:	ba12      	rev	r2, r2
    6cc8:	0c03      	lsrs	r3, r0, #16
    6cca:	428b      	cmp	r3, r1
    6ccc:	d302      	bcc.n	6cd4 <__divsi3+0x38>
    6cce:	1212      	asrs	r2, r2, #8
    6cd0:	0209      	lsls	r1, r1, #8
    6cd2:	d065      	beq.n	6da0 <__divsi3+0x104>
    6cd4:	0b03      	lsrs	r3, r0, #12
    6cd6:	428b      	cmp	r3, r1
    6cd8:	d319      	bcc.n	6d0e <__divsi3+0x72>
    6cda:	e000      	b.n	6cde <__divsi3+0x42>
    6cdc:	0a09      	lsrs	r1, r1, #8
    6cde:	0bc3      	lsrs	r3, r0, #15
    6ce0:	428b      	cmp	r3, r1
    6ce2:	d301      	bcc.n	6ce8 <__divsi3+0x4c>
    6ce4:	03cb      	lsls	r3, r1, #15
    6ce6:	1ac0      	subs	r0, r0, r3
    6ce8:	4152      	adcs	r2, r2
    6cea:	0b83      	lsrs	r3, r0, #14
    6cec:	428b      	cmp	r3, r1
    6cee:	d301      	bcc.n	6cf4 <__divsi3+0x58>
    6cf0:	038b      	lsls	r3, r1, #14
    6cf2:	1ac0      	subs	r0, r0, r3
    6cf4:	4152      	adcs	r2, r2
    6cf6:	0b43      	lsrs	r3, r0, #13
    6cf8:	428b      	cmp	r3, r1
    6cfa:	d301      	bcc.n	6d00 <__divsi3+0x64>
    6cfc:	034b      	lsls	r3, r1, #13
    6cfe:	1ac0      	subs	r0, r0, r3
    6d00:	4152      	adcs	r2, r2
    6d02:	0b03      	lsrs	r3, r0, #12
    6d04:	428b      	cmp	r3, r1
    6d06:	d301      	bcc.n	6d0c <__divsi3+0x70>
    6d08:	030b      	lsls	r3, r1, #12
    6d0a:	1ac0      	subs	r0, r0, r3
    6d0c:	4152      	adcs	r2, r2
    6d0e:	0ac3      	lsrs	r3, r0, #11
    6d10:	428b      	cmp	r3, r1
    6d12:	d301      	bcc.n	6d18 <__divsi3+0x7c>
    6d14:	02cb      	lsls	r3, r1, #11
    6d16:	1ac0      	subs	r0, r0, r3
    6d18:	4152      	adcs	r2, r2
    6d1a:	0a83      	lsrs	r3, r0, #10
    6d1c:	428b      	cmp	r3, r1
    6d1e:	d301      	bcc.n	6d24 <__divsi3+0x88>
    6d20:	028b      	lsls	r3, r1, #10
    6d22:	1ac0      	subs	r0, r0, r3
    6d24:	4152      	adcs	r2, r2
    6d26:	0a43      	lsrs	r3, r0, #9
    6d28:	428b      	cmp	r3, r1
    6d2a:	d301      	bcc.n	6d30 <__divsi3+0x94>
    6d2c:	024b      	lsls	r3, r1, #9
    6d2e:	1ac0      	subs	r0, r0, r3
    6d30:	4152      	adcs	r2, r2
    6d32:	0a03      	lsrs	r3, r0, #8
    6d34:	428b      	cmp	r3, r1
    6d36:	d301      	bcc.n	6d3c <__divsi3+0xa0>
    6d38:	020b      	lsls	r3, r1, #8
    6d3a:	1ac0      	subs	r0, r0, r3
    6d3c:	4152      	adcs	r2, r2
    6d3e:	d2cd      	bcs.n	6cdc <__divsi3+0x40>
    6d40:	09c3      	lsrs	r3, r0, #7
    6d42:	428b      	cmp	r3, r1
    6d44:	d301      	bcc.n	6d4a <__divsi3+0xae>
    6d46:	01cb      	lsls	r3, r1, #7
    6d48:	1ac0      	subs	r0, r0, r3
    6d4a:	4152      	adcs	r2, r2
    6d4c:	0983      	lsrs	r3, r0, #6
    6d4e:	428b      	cmp	r3, r1
    6d50:	d301      	bcc.n	6d56 <__divsi3+0xba>
    6d52:	018b      	lsls	r3, r1, #6
    6d54:	1ac0      	subs	r0, r0, r3
    6d56:	4152      	adcs	r2, r2
    6d58:	0943      	lsrs	r3, r0, #5
    6d5a:	428b      	cmp	r3, r1
    6d5c:	d301      	bcc.n	6d62 <__divsi3+0xc6>
    6d5e:	014b      	lsls	r3, r1, #5
    6d60:	1ac0      	subs	r0, r0, r3
    6d62:	4152      	adcs	r2, r2
    6d64:	0903      	lsrs	r3, r0, #4
    6d66:	428b      	cmp	r3, r1
    6d68:	d301      	bcc.n	6d6e <__divsi3+0xd2>
    6d6a:	010b      	lsls	r3, r1, #4
    6d6c:	1ac0      	subs	r0, r0, r3
    6d6e:	4152      	adcs	r2, r2
    6d70:	08c3      	lsrs	r3, r0, #3
    6d72:	428b      	cmp	r3, r1
    6d74:	d301      	bcc.n	6d7a <__divsi3+0xde>
    6d76:	00cb      	lsls	r3, r1, #3
    6d78:	1ac0      	subs	r0, r0, r3
    6d7a:	4152      	adcs	r2, r2
    6d7c:	0883      	lsrs	r3, r0, #2
    6d7e:	428b      	cmp	r3, r1
    6d80:	d301      	bcc.n	6d86 <__divsi3+0xea>
    6d82:	008b      	lsls	r3, r1, #2
    6d84:	1ac0      	subs	r0, r0, r3
    6d86:	4152      	adcs	r2, r2
    6d88:	0843      	lsrs	r3, r0, #1
    6d8a:	428b      	cmp	r3, r1
    6d8c:	d301      	bcc.n	6d92 <__divsi3+0xf6>
    6d8e:	004b      	lsls	r3, r1, #1
    6d90:	1ac0      	subs	r0, r0, r3
    6d92:	4152      	adcs	r2, r2
    6d94:	1a41      	subs	r1, r0, r1
    6d96:	d200      	bcs.n	6d9a <__divsi3+0xfe>
    6d98:	4601      	mov	r1, r0
    6d9a:	4152      	adcs	r2, r2
    6d9c:	4610      	mov	r0, r2
    6d9e:	4770      	bx	lr
    6da0:	e05d      	b.n	6e5e <__divsi3+0x1c2>
    6da2:	0fca      	lsrs	r2, r1, #31
    6da4:	d000      	beq.n	6da8 <__divsi3+0x10c>
    6da6:	4249      	negs	r1, r1
    6da8:	1003      	asrs	r3, r0, #32
    6daa:	d300      	bcc.n	6dae <__divsi3+0x112>
    6dac:	4240      	negs	r0, r0
    6dae:	4053      	eors	r3, r2
    6db0:	2200      	movs	r2, #0
    6db2:	469c      	mov	ip, r3
    6db4:	0903      	lsrs	r3, r0, #4
    6db6:	428b      	cmp	r3, r1
    6db8:	d32d      	bcc.n	6e16 <__divsi3+0x17a>
    6dba:	0a03      	lsrs	r3, r0, #8
    6dbc:	428b      	cmp	r3, r1
    6dbe:	d312      	bcc.n	6de6 <__divsi3+0x14a>
    6dc0:	22fc      	movs	r2, #252	; 0xfc
    6dc2:	0189      	lsls	r1, r1, #6
    6dc4:	ba12      	rev	r2, r2
    6dc6:	0a03      	lsrs	r3, r0, #8
    6dc8:	428b      	cmp	r3, r1
    6dca:	d30c      	bcc.n	6de6 <__divsi3+0x14a>
    6dcc:	0189      	lsls	r1, r1, #6
    6dce:	1192      	asrs	r2, r2, #6
    6dd0:	428b      	cmp	r3, r1
    6dd2:	d308      	bcc.n	6de6 <__divsi3+0x14a>
    6dd4:	0189      	lsls	r1, r1, #6
    6dd6:	1192      	asrs	r2, r2, #6
    6dd8:	428b      	cmp	r3, r1
    6dda:	d304      	bcc.n	6de6 <__divsi3+0x14a>
    6ddc:	0189      	lsls	r1, r1, #6
    6dde:	d03a      	beq.n	6e56 <__divsi3+0x1ba>
    6de0:	1192      	asrs	r2, r2, #6
    6de2:	e000      	b.n	6de6 <__divsi3+0x14a>
    6de4:	0989      	lsrs	r1, r1, #6
    6de6:	09c3      	lsrs	r3, r0, #7
    6de8:	428b      	cmp	r3, r1
    6dea:	d301      	bcc.n	6df0 <__divsi3+0x154>
    6dec:	01cb      	lsls	r3, r1, #7
    6dee:	1ac0      	subs	r0, r0, r3
    6df0:	4152      	adcs	r2, r2
    6df2:	0983      	lsrs	r3, r0, #6
    6df4:	428b      	cmp	r3, r1
    6df6:	d301      	bcc.n	6dfc <__divsi3+0x160>
    6df8:	018b      	lsls	r3, r1, #6
    6dfa:	1ac0      	subs	r0, r0, r3
    6dfc:	4152      	adcs	r2, r2
    6dfe:	0943      	lsrs	r3, r0, #5
    6e00:	428b      	cmp	r3, r1
    6e02:	d301      	bcc.n	6e08 <__divsi3+0x16c>
    6e04:	014b      	lsls	r3, r1, #5
    6e06:	1ac0      	subs	r0, r0, r3
    6e08:	4152      	adcs	r2, r2
    6e0a:	0903      	lsrs	r3, r0, #4
    6e0c:	428b      	cmp	r3, r1
    6e0e:	d301      	bcc.n	6e14 <__divsi3+0x178>
    6e10:	010b      	lsls	r3, r1, #4
    6e12:	1ac0      	subs	r0, r0, r3
    6e14:	4152      	adcs	r2, r2
    6e16:	08c3      	lsrs	r3, r0, #3
    6e18:	428b      	cmp	r3, r1
    6e1a:	d301      	bcc.n	6e20 <__divsi3+0x184>
    6e1c:	00cb      	lsls	r3, r1, #3
    6e1e:	1ac0      	subs	r0, r0, r3
    6e20:	4152      	adcs	r2, r2
    6e22:	0883      	lsrs	r3, r0, #2
    6e24:	428b      	cmp	r3, r1
    6e26:	d301      	bcc.n	6e2c <__divsi3+0x190>
    6e28:	008b      	lsls	r3, r1, #2
    6e2a:	1ac0      	subs	r0, r0, r3
    6e2c:	4152      	adcs	r2, r2
    6e2e:	d2d9      	bcs.n	6de4 <__divsi3+0x148>
    6e30:	0843      	lsrs	r3, r0, #1
    6e32:	428b      	cmp	r3, r1
    6e34:	d301      	bcc.n	6e3a <__divsi3+0x19e>
    6e36:	004b      	lsls	r3, r1, #1
    6e38:	1ac0      	subs	r0, r0, r3
    6e3a:	4152      	adcs	r2, r2
    6e3c:	1a41      	subs	r1, r0, r1
    6e3e:	d200      	bcs.n	6e42 <__divsi3+0x1a6>
    6e40:	4601      	mov	r1, r0
    6e42:	4663      	mov	r3, ip
    6e44:	4152      	adcs	r2, r2
    6e46:	105b      	asrs	r3, r3, #1
    6e48:	4610      	mov	r0, r2
    6e4a:	d301      	bcc.n	6e50 <__divsi3+0x1b4>
    6e4c:	4240      	negs	r0, r0
    6e4e:	2b00      	cmp	r3, #0
    6e50:	d500      	bpl.n	6e54 <__divsi3+0x1b8>
    6e52:	4249      	negs	r1, r1
    6e54:	4770      	bx	lr
    6e56:	4663      	mov	r3, ip
    6e58:	105b      	asrs	r3, r3, #1
    6e5a:	d300      	bcc.n	6e5e <__divsi3+0x1c2>
    6e5c:	4240      	negs	r0, r0
    6e5e:	b501      	push	{r0, lr}
    6e60:	2000      	movs	r0, #0
    6e62:	f000 f805 	bl	6e70 <__aeabi_idiv0>
    6e66:	bd02      	pop	{r1, pc}

00006e68 <__aeabi_idivmod>:
    6e68:	2900      	cmp	r1, #0
    6e6a:	d0f8      	beq.n	6e5e <__divsi3+0x1c2>
    6e6c:	e716      	b.n	6c9c <__divsi3>
    6e6e:	4770      	bx	lr

00006e70 <__aeabi_idiv0>:
    6e70:	4770      	bx	lr
    6e72:	46c0      	nop			; (mov r8, r8)

00006e74 <__aeabi_lmul>:
    6e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e76:	46ce      	mov	lr, r9
    6e78:	4647      	mov	r7, r8
    6e7a:	0415      	lsls	r5, r2, #16
    6e7c:	0c2d      	lsrs	r5, r5, #16
    6e7e:	002e      	movs	r6, r5
    6e80:	b580      	push	{r7, lr}
    6e82:	0407      	lsls	r7, r0, #16
    6e84:	0c14      	lsrs	r4, r2, #16
    6e86:	0c3f      	lsrs	r7, r7, #16
    6e88:	4699      	mov	r9, r3
    6e8a:	0c03      	lsrs	r3, r0, #16
    6e8c:	437e      	muls	r6, r7
    6e8e:	435d      	muls	r5, r3
    6e90:	4367      	muls	r7, r4
    6e92:	4363      	muls	r3, r4
    6e94:	197f      	adds	r7, r7, r5
    6e96:	0c34      	lsrs	r4, r6, #16
    6e98:	19e4      	adds	r4, r4, r7
    6e9a:	469c      	mov	ip, r3
    6e9c:	42a5      	cmp	r5, r4
    6e9e:	d903      	bls.n	6ea8 <__aeabi_lmul+0x34>
    6ea0:	2380      	movs	r3, #128	; 0x80
    6ea2:	025b      	lsls	r3, r3, #9
    6ea4:	4698      	mov	r8, r3
    6ea6:	44c4      	add	ip, r8
    6ea8:	464b      	mov	r3, r9
    6eaa:	4351      	muls	r1, r2
    6eac:	4343      	muls	r3, r0
    6eae:	0436      	lsls	r6, r6, #16
    6eb0:	0c36      	lsrs	r6, r6, #16
    6eb2:	0c25      	lsrs	r5, r4, #16
    6eb4:	0424      	lsls	r4, r4, #16
    6eb6:	4465      	add	r5, ip
    6eb8:	19a4      	adds	r4, r4, r6
    6eba:	1859      	adds	r1, r3, r1
    6ebc:	1949      	adds	r1, r1, r5
    6ebe:	0020      	movs	r0, r4
    6ec0:	bc0c      	pop	{r2, r3}
    6ec2:	4690      	mov	r8, r2
    6ec4:	4699      	mov	r9, r3
    6ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006ec8 <exit>:
    6ec8:	4b08      	ldr	r3, [pc, #32]	; (6eec <exit+0x24>)
    6eca:	b510      	push	{r4, lr}
    6ecc:	0004      	movs	r4, r0
    6ece:	2b00      	cmp	r3, #0
    6ed0:	d002      	beq.n	6ed8 <exit+0x10>
    6ed2:	2100      	movs	r1, #0
    6ed4:	e000      	b.n	6ed8 <exit+0x10>
    6ed6:	bf00      	nop
    6ed8:	4b05      	ldr	r3, [pc, #20]	; (6ef0 <exit+0x28>)
    6eda:	6818      	ldr	r0, [r3, #0]
    6edc:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6ede:	2b00      	cmp	r3, #0
    6ee0:	d000      	beq.n	6ee4 <exit+0x1c>
    6ee2:	4798      	blx	r3
    6ee4:	0020      	movs	r0, r4
    6ee6:	f7fc fe6f 	bl	3bc8 <_exit>
    6eea:	46c0      	nop			; (mov r8, r8)
    6eec:	00000000 	.word	0x00000000
    6ef0:	0000ae04 	.word	0x0000ae04

00006ef4 <__libc_init_array>:
    6ef4:	b570      	push	{r4, r5, r6, lr}
    6ef6:	2600      	movs	r6, #0
    6ef8:	4d0c      	ldr	r5, [pc, #48]	; (6f2c <__libc_init_array+0x38>)
    6efa:	4c0d      	ldr	r4, [pc, #52]	; (6f30 <__libc_init_array+0x3c>)
    6efc:	1b64      	subs	r4, r4, r5
    6efe:	10a4      	asrs	r4, r4, #2
    6f00:	42a6      	cmp	r6, r4
    6f02:	d109      	bne.n	6f18 <__libc_init_array+0x24>
    6f04:	2600      	movs	r6, #0
    6f06:	f003 ffc9 	bl	ae9c <_init>
    6f0a:	4d0a      	ldr	r5, [pc, #40]	; (6f34 <__libc_init_array+0x40>)
    6f0c:	4c0a      	ldr	r4, [pc, #40]	; (6f38 <__libc_init_array+0x44>)
    6f0e:	1b64      	subs	r4, r4, r5
    6f10:	10a4      	asrs	r4, r4, #2
    6f12:	42a6      	cmp	r6, r4
    6f14:	d105      	bne.n	6f22 <__libc_init_array+0x2e>
    6f16:	bd70      	pop	{r4, r5, r6, pc}
    6f18:	00b3      	lsls	r3, r6, #2
    6f1a:	58eb      	ldr	r3, [r5, r3]
    6f1c:	4798      	blx	r3
    6f1e:	3601      	adds	r6, #1
    6f20:	e7ee      	b.n	6f00 <__libc_init_array+0xc>
    6f22:	00b3      	lsls	r3, r6, #2
    6f24:	58eb      	ldr	r3, [r5, r3]
    6f26:	4798      	blx	r3
    6f28:	3601      	adds	r6, #1
    6f2a:	e7f2      	b.n	6f12 <__libc_init_array+0x1e>
    6f2c:	0000aea8 	.word	0x0000aea8
    6f30:	0000aea8 	.word	0x0000aea8
    6f34:	0000aea8 	.word	0x0000aea8
    6f38:	0000aeac 	.word	0x0000aeac

00006f3c <malloc>:
    6f3c:	b510      	push	{r4, lr}
    6f3e:	4b03      	ldr	r3, [pc, #12]	; (6f4c <malloc+0x10>)
    6f40:	0001      	movs	r1, r0
    6f42:	6818      	ldr	r0, [r3, #0]
    6f44:	f000 f880 	bl	7048 <_malloc_r>
    6f48:	bd10      	pop	{r4, pc}
    6f4a:	46c0      	nop			; (mov r8, r8)
    6f4c:	20000210 	.word	0x20000210

00006f50 <memcmp>:
    6f50:	b530      	push	{r4, r5, lr}
    6f52:	2400      	movs	r4, #0
    6f54:	42a2      	cmp	r2, r4
    6f56:	d101      	bne.n	6f5c <memcmp+0xc>
    6f58:	2000      	movs	r0, #0
    6f5a:	e005      	b.n	6f68 <memcmp+0x18>
    6f5c:	5d03      	ldrb	r3, [r0, r4]
    6f5e:	1c65      	adds	r5, r4, #1
    6f60:	5d0c      	ldrb	r4, [r1, r4]
    6f62:	42a3      	cmp	r3, r4
    6f64:	d001      	beq.n	6f6a <memcmp+0x1a>
    6f66:	1b18      	subs	r0, r3, r4
    6f68:	bd30      	pop	{r4, r5, pc}
    6f6a:	002c      	movs	r4, r5
    6f6c:	e7f2      	b.n	6f54 <memcmp+0x4>

00006f6e <memcpy>:
    6f6e:	2300      	movs	r3, #0
    6f70:	b510      	push	{r4, lr}
    6f72:	429a      	cmp	r2, r3
    6f74:	d100      	bne.n	6f78 <memcpy+0xa>
    6f76:	bd10      	pop	{r4, pc}
    6f78:	5ccc      	ldrb	r4, [r1, r3]
    6f7a:	54c4      	strb	r4, [r0, r3]
    6f7c:	3301      	adds	r3, #1
    6f7e:	e7f8      	b.n	6f72 <memcpy+0x4>

00006f80 <memmove>:
    6f80:	b510      	push	{r4, lr}
    6f82:	4288      	cmp	r0, r1
    6f84:	d902      	bls.n	6f8c <memmove+0xc>
    6f86:	188b      	adds	r3, r1, r2
    6f88:	4298      	cmp	r0, r3
    6f8a:	d308      	bcc.n	6f9e <memmove+0x1e>
    6f8c:	2300      	movs	r3, #0
    6f8e:	429a      	cmp	r2, r3
    6f90:	d007      	beq.n	6fa2 <memmove+0x22>
    6f92:	5ccc      	ldrb	r4, [r1, r3]
    6f94:	54c4      	strb	r4, [r0, r3]
    6f96:	3301      	adds	r3, #1
    6f98:	e7f9      	b.n	6f8e <memmove+0xe>
    6f9a:	5c8b      	ldrb	r3, [r1, r2]
    6f9c:	5483      	strb	r3, [r0, r2]
    6f9e:	3a01      	subs	r2, #1
    6fa0:	d2fb      	bcs.n	6f9a <memmove+0x1a>
    6fa2:	bd10      	pop	{r4, pc}

00006fa4 <memset>:
    6fa4:	0003      	movs	r3, r0
    6fa6:	1882      	adds	r2, r0, r2
    6fa8:	4293      	cmp	r3, r2
    6faa:	d100      	bne.n	6fae <memset+0xa>
    6fac:	4770      	bx	lr
    6fae:	7019      	strb	r1, [r3, #0]
    6fb0:	3301      	adds	r3, #1
    6fb2:	e7f9      	b.n	6fa8 <memset+0x4>

00006fb4 <_free_r>:
    6fb4:	b570      	push	{r4, r5, r6, lr}
    6fb6:	0005      	movs	r5, r0
    6fb8:	2900      	cmp	r1, #0
    6fba:	d010      	beq.n	6fde <_free_r+0x2a>
    6fbc:	1f0c      	subs	r4, r1, #4
    6fbe:	6823      	ldr	r3, [r4, #0]
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	da00      	bge.n	6fc6 <_free_r+0x12>
    6fc4:	18e4      	adds	r4, r4, r3
    6fc6:	0028      	movs	r0, r5
    6fc8:	f000 fcea 	bl	79a0 <__malloc_lock>
    6fcc:	4a1d      	ldr	r2, [pc, #116]	; (7044 <_free_r+0x90>)
    6fce:	6813      	ldr	r3, [r2, #0]
    6fd0:	2b00      	cmp	r3, #0
    6fd2:	d105      	bne.n	6fe0 <_free_r+0x2c>
    6fd4:	6063      	str	r3, [r4, #4]
    6fd6:	6014      	str	r4, [r2, #0]
    6fd8:	0028      	movs	r0, r5
    6fda:	f000 fce2 	bl	79a2 <__malloc_unlock>
    6fde:	bd70      	pop	{r4, r5, r6, pc}
    6fe0:	42a3      	cmp	r3, r4
    6fe2:	d909      	bls.n	6ff8 <_free_r+0x44>
    6fe4:	6821      	ldr	r1, [r4, #0]
    6fe6:	1860      	adds	r0, r4, r1
    6fe8:	4283      	cmp	r3, r0
    6fea:	d1f3      	bne.n	6fd4 <_free_r+0x20>
    6fec:	6818      	ldr	r0, [r3, #0]
    6fee:	685b      	ldr	r3, [r3, #4]
    6ff0:	1841      	adds	r1, r0, r1
    6ff2:	6021      	str	r1, [r4, #0]
    6ff4:	e7ee      	b.n	6fd4 <_free_r+0x20>
    6ff6:	0013      	movs	r3, r2
    6ff8:	685a      	ldr	r2, [r3, #4]
    6ffa:	2a00      	cmp	r2, #0
    6ffc:	d001      	beq.n	7002 <_free_r+0x4e>
    6ffe:	42a2      	cmp	r2, r4
    7000:	d9f9      	bls.n	6ff6 <_free_r+0x42>
    7002:	6819      	ldr	r1, [r3, #0]
    7004:	1858      	adds	r0, r3, r1
    7006:	42a0      	cmp	r0, r4
    7008:	d10b      	bne.n	7022 <_free_r+0x6e>
    700a:	6820      	ldr	r0, [r4, #0]
    700c:	1809      	adds	r1, r1, r0
    700e:	1858      	adds	r0, r3, r1
    7010:	6019      	str	r1, [r3, #0]
    7012:	4282      	cmp	r2, r0
    7014:	d1e0      	bne.n	6fd8 <_free_r+0x24>
    7016:	6810      	ldr	r0, [r2, #0]
    7018:	6852      	ldr	r2, [r2, #4]
    701a:	1841      	adds	r1, r0, r1
    701c:	6019      	str	r1, [r3, #0]
    701e:	605a      	str	r2, [r3, #4]
    7020:	e7da      	b.n	6fd8 <_free_r+0x24>
    7022:	42a0      	cmp	r0, r4
    7024:	d902      	bls.n	702c <_free_r+0x78>
    7026:	230c      	movs	r3, #12
    7028:	602b      	str	r3, [r5, #0]
    702a:	e7d5      	b.n	6fd8 <_free_r+0x24>
    702c:	6821      	ldr	r1, [r4, #0]
    702e:	1860      	adds	r0, r4, r1
    7030:	4282      	cmp	r2, r0
    7032:	d103      	bne.n	703c <_free_r+0x88>
    7034:	6810      	ldr	r0, [r2, #0]
    7036:	6852      	ldr	r2, [r2, #4]
    7038:	1841      	adds	r1, r0, r1
    703a:	6021      	str	r1, [r4, #0]
    703c:	6062      	str	r2, [r4, #4]
    703e:	605c      	str	r4, [r3, #4]
    7040:	e7ca      	b.n	6fd8 <_free_r+0x24>
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	20002698 	.word	0x20002698

00007048 <_malloc_r>:
    7048:	2303      	movs	r3, #3
    704a:	b570      	push	{r4, r5, r6, lr}
    704c:	1ccd      	adds	r5, r1, #3
    704e:	439d      	bics	r5, r3
    7050:	3508      	adds	r5, #8
    7052:	0006      	movs	r6, r0
    7054:	2d0c      	cmp	r5, #12
    7056:	d21e      	bcs.n	7096 <_malloc_r+0x4e>
    7058:	250c      	movs	r5, #12
    705a:	42a9      	cmp	r1, r5
    705c:	d81d      	bhi.n	709a <_malloc_r+0x52>
    705e:	0030      	movs	r0, r6
    7060:	f000 fc9e 	bl	79a0 <__malloc_lock>
    7064:	4a25      	ldr	r2, [pc, #148]	; (70fc <_malloc_r+0xb4>)
    7066:	6814      	ldr	r4, [r2, #0]
    7068:	0021      	movs	r1, r4
    706a:	2900      	cmp	r1, #0
    706c:	d119      	bne.n	70a2 <_malloc_r+0x5a>
    706e:	4c24      	ldr	r4, [pc, #144]	; (7100 <_malloc_r+0xb8>)
    7070:	6823      	ldr	r3, [r4, #0]
    7072:	2b00      	cmp	r3, #0
    7074:	d103      	bne.n	707e <_malloc_r+0x36>
    7076:	0030      	movs	r0, r6
    7078:	f000 f904 	bl	7284 <_sbrk_r>
    707c:	6020      	str	r0, [r4, #0]
    707e:	0029      	movs	r1, r5
    7080:	0030      	movs	r0, r6
    7082:	f000 f8ff 	bl	7284 <_sbrk_r>
    7086:	1c43      	adds	r3, r0, #1
    7088:	d12c      	bne.n	70e4 <_malloc_r+0x9c>
    708a:	230c      	movs	r3, #12
    708c:	0030      	movs	r0, r6
    708e:	6033      	str	r3, [r6, #0]
    7090:	f000 fc87 	bl	79a2 <__malloc_unlock>
    7094:	e003      	b.n	709e <_malloc_r+0x56>
    7096:	2d00      	cmp	r5, #0
    7098:	dadf      	bge.n	705a <_malloc_r+0x12>
    709a:	230c      	movs	r3, #12
    709c:	6033      	str	r3, [r6, #0]
    709e:	2000      	movs	r0, #0
    70a0:	bd70      	pop	{r4, r5, r6, pc}
    70a2:	680b      	ldr	r3, [r1, #0]
    70a4:	1b5b      	subs	r3, r3, r5
    70a6:	d41a      	bmi.n	70de <_malloc_r+0x96>
    70a8:	2b0b      	cmp	r3, #11
    70aa:	d903      	bls.n	70b4 <_malloc_r+0x6c>
    70ac:	600b      	str	r3, [r1, #0]
    70ae:	18cc      	adds	r4, r1, r3
    70b0:	6025      	str	r5, [r4, #0]
    70b2:	e003      	b.n	70bc <_malloc_r+0x74>
    70b4:	428c      	cmp	r4, r1
    70b6:	d10e      	bne.n	70d6 <_malloc_r+0x8e>
    70b8:	6863      	ldr	r3, [r4, #4]
    70ba:	6013      	str	r3, [r2, #0]
    70bc:	0030      	movs	r0, r6
    70be:	f000 fc70 	bl	79a2 <__malloc_unlock>
    70c2:	0020      	movs	r0, r4
    70c4:	2207      	movs	r2, #7
    70c6:	300b      	adds	r0, #11
    70c8:	1d23      	adds	r3, r4, #4
    70ca:	4390      	bics	r0, r2
    70cc:	1ac3      	subs	r3, r0, r3
    70ce:	d0e7      	beq.n	70a0 <_malloc_r+0x58>
    70d0:	425a      	negs	r2, r3
    70d2:	50e2      	str	r2, [r4, r3]
    70d4:	e7e4      	b.n	70a0 <_malloc_r+0x58>
    70d6:	684b      	ldr	r3, [r1, #4]
    70d8:	6063      	str	r3, [r4, #4]
    70da:	000c      	movs	r4, r1
    70dc:	e7ee      	b.n	70bc <_malloc_r+0x74>
    70de:	000c      	movs	r4, r1
    70e0:	6849      	ldr	r1, [r1, #4]
    70e2:	e7c2      	b.n	706a <_malloc_r+0x22>
    70e4:	2303      	movs	r3, #3
    70e6:	1cc4      	adds	r4, r0, #3
    70e8:	439c      	bics	r4, r3
    70ea:	42a0      	cmp	r0, r4
    70ec:	d0e0      	beq.n	70b0 <_malloc_r+0x68>
    70ee:	1a21      	subs	r1, r4, r0
    70f0:	0030      	movs	r0, r6
    70f2:	f000 f8c7 	bl	7284 <_sbrk_r>
    70f6:	1c43      	adds	r3, r0, #1
    70f8:	d1da      	bne.n	70b0 <_malloc_r+0x68>
    70fa:	e7c6      	b.n	708a <_malloc_r+0x42>
    70fc:	20002698 	.word	0x20002698
    7100:	2000269c 	.word	0x2000269c

00007104 <iprintf>:
    7104:	b40f      	push	{r0, r1, r2, r3}
    7106:	4b0b      	ldr	r3, [pc, #44]	; (7134 <iprintf+0x30>)
    7108:	b513      	push	{r0, r1, r4, lr}
    710a:	681c      	ldr	r4, [r3, #0]
    710c:	2c00      	cmp	r4, #0
    710e:	d005      	beq.n	711c <iprintf+0x18>
    7110:	69a3      	ldr	r3, [r4, #24]
    7112:	2b00      	cmp	r3, #0
    7114:	d102      	bne.n	711c <iprintf+0x18>
    7116:	0020      	movs	r0, r4
    7118:	f000 fb40 	bl	779c <__sinit>
    711c:	ab05      	add	r3, sp, #20
    711e:	9a04      	ldr	r2, [sp, #16]
    7120:	68a1      	ldr	r1, [r4, #8]
    7122:	0020      	movs	r0, r4
    7124:	9301      	str	r3, [sp, #4]
    7126:	f000 fc65 	bl	79f4 <_vfiprintf_r>
    712a:	bc16      	pop	{r1, r2, r4}
    712c:	bc08      	pop	{r3}
    712e:	b004      	add	sp, #16
    7130:	4718      	bx	r3
    7132:	46c0      	nop			; (mov r8, r8)
    7134:	20000210 	.word	0x20000210

00007138 <_puts_r>:
    7138:	b570      	push	{r4, r5, r6, lr}
    713a:	0005      	movs	r5, r0
    713c:	000e      	movs	r6, r1
    713e:	2800      	cmp	r0, #0
    7140:	d004      	beq.n	714c <_puts_r+0x14>
    7142:	6983      	ldr	r3, [r0, #24]
    7144:	2b00      	cmp	r3, #0
    7146:	d101      	bne.n	714c <_puts_r+0x14>
    7148:	f000 fb28 	bl	779c <__sinit>
    714c:	69ab      	ldr	r3, [r5, #24]
    714e:	68ac      	ldr	r4, [r5, #8]
    7150:	2b00      	cmp	r3, #0
    7152:	d102      	bne.n	715a <_puts_r+0x22>
    7154:	0028      	movs	r0, r5
    7156:	f000 fb21 	bl	779c <__sinit>
    715a:	4b24      	ldr	r3, [pc, #144]	; (71ec <_puts_r+0xb4>)
    715c:	429c      	cmp	r4, r3
    715e:	d10f      	bne.n	7180 <_puts_r+0x48>
    7160:	686c      	ldr	r4, [r5, #4]
    7162:	89a3      	ldrh	r3, [r4, #12]
    7164:	071b      	lsls	r3, r3, #28
    7166:	d502      	bpl.n	716e <_puts_r+0x36>
    7168:	6923      	ldr	r3, [r4, #16]
    716a:	2b00      	cmp	r3, #0
    716c:	d120      	bne.n	71b0 <_puts_r+0x78>
    716e:	0021      	movs	r1, r4
    7170:	0028      	movs	r0, r5
    7172:	f000 f9a5 	bl	74c0 <__swsetup_r>
    7176:	2800      	cmp	r0, #0
    7178:	d01a      	beq.n	71b0 <_puts_r+0x78>
    717a:	2001      	movs	r0, #1
    717c:	4240      	negs	r0, r0
    717e:	bd70      	pop	{r4, r5, r6, pc}
    7180:	4b1b      	ldr	r3, [pc, #108]	; (71f0 <_puts_r+0xb8>)
    7182:	429c      	cmp	r4, r3
    7184:	d101      	bne.n	718a <_puts_r+0x52>
    7186:	68ac      	ldr	r4, [r5, #8]
    7188:	e7eb      	b.n	7162 <_puts_r+0x2a>
    718a:	4b1a      	ldr	r3, [pc, #104]	; (71f4 <_puts_r+0xbc>)
    718c:	429c      	cmp	r4, r3
    718e:	d1e8      	bne.n	7162 <_puts_r+0x2a>
    7190:	68ec      	ldr	r4, [r5, #12]
    7192:	e7e6      	b.n	7162 <_puts_r+0x2a>
    7194:	3b01      	subs	r3, #1
    7196:	3601      	adds	r6, #1
    7198:	60a3      	str	r3, [r4, #8]
    719a:	2b00      	cmp	r3, #0
    719c:	da04      	bge.n	71a8 <_puts_r+0x70>
    719e:	69a2      	ldr	r2, [r4, #24]
    71a0:	4293      	cmp	r3, r2
    71a2:	db16      	blt.n	71d2 <_puts_r+0x9a>
    71a4:	290a      	cmp	r1, #10
    71a6:	d014      	beq.n	71d2 <_puts_r+0x9a>
    71a8:	6823      	ldr	r3, [r4, #0]
    71aa:	1c5a      	adds	r2, r3, #1
    71ac:	6022      	str	r2, [r4, #0]
    71ae:	7019      	strb	r1, [r3, #0]
    71b0:	7831      	ldrb	r1, [r6, #0]
    71b2:	68a3      	ldr	r3, [r4, #8]
    71b4:	2900      	cmp	r1, #0
    71b6:	d1ed      	bne.n	7194 <_puts_r+0x5c>
    71b8:	3b01      	subs	r3, #1
    71ba:	60a3      	str	r3, [r4, #8]
    71bc:	2b00      	cmp	r3, #0
    71be:	da0f      	bge.n	71e0 <_puts_r+0xa8>
    71c0:	0022      	movs	r2, r4
    71c2:	310a      	adds	r1, #10
    71c4:	0028      	movs	r0, r5
    71c6:	f000 f925 	bl	7414 <__swbuf_r>
    71ca:	1c43      	adds	r3, r0, #1
    71cc:	d0d5      	beq.n	717a <_puts_r+0x42>
    71ce:	200a      	movs	r0, #10
    71d0:	e7d5      	b.n	717e <_puts_r+0x46>
    71d2:	0022      	movs	r2, r4
    71d4:	0028      	movs	r0, r5
    71d6:	f000 f91d 	bl	7414 <__swbuf_r>
    71da:	1c43      	adds	r3, r0, #1
    71dc:	d1e8      	bne.n	71b0 <_puts_r+0x78>
    71de:	e7cc      	b.n	717a <_puts_r+0x42>
    71e0:	200a      	movs	r0, #10
    71e2:	6823      	ldr	r3, [r4, #0]
    71e4:	1c5a      	adds	r2, r3, #1
    71e6:	6022      	str	r2, [r4, #0]
    71e8:	7018      	strb	r0, [r3, #0]
    71ea:	e7c8      	b.n	717e <_puts_r+0x46>
    71ec:	0000ae28 	.word	0x0000ae28
    71f0:	0000ae48 	.word	0x0000ae48
    71f4:	0000ae08 	.word	0x0000ae08

000071f8 <puts>:
    71f8:	b510      	push	{r4, lr}
    71fa:	4b03      	ldr	r3, [pc, #12]	; (7208 <puts+0x10>)
    71fc:	0001      	movs	r1, r0
    71fe:	6818      	ldr	r0, [r3, #0]
    7200:	f7ff ff9a 	bl	7138 <_puts_r>
    7204:	bd10      	pop	{r4, pc}
    7206:	46c0      	nop			; (mov r8, r8)
    7208:	20000210 	.word	0x20000210

0000720c <rand>:
    720c:	4b15      	ldr	r3, [pc, #84]	; (7264 <rand+0x58>)
    720e:	b510      	push	{r4, lr}
    7210:	681c      	ldr	r4, [r3, #0]
    7212:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7214:	2b00      	cmp	r3, #0
    7216:	d115      	bne.n	7244 <rand+0x38>
    7218:	2018      	movs	r0, #24
    721a:	f7ff fe8f 	bl	6f3c <malloc>
    721e:	4b12      	ldr	r3, [pc, #72]	; (7268 <rand+0x5c>)
    7220:	63a0      	str	r0, [r4, #56]	; 0x38
    7222:	8003      	strh	r3, [r0, #0]
    7224:	4b11      	ldr	r3, [pc, #68]	; (726c <rand+0x60>)
    7226:	2201      	movs	r2, #1
    7228:	8043      	strh	r3, [r0, #2]
    722a:	4b11      	ldr	r3, [pc, #68]	; (7270 <rand+0x64>)
    722c:	8083      	strh	r3, [r0, #4]
    722e:	4b11      	ldr	r3, [pc, #68]	; (7274 <rand+0x68>)
    7230:	80c3      	strh	r3, [r0, #6]
    7232:	4b11      	ldr	r3, [pc, #68]	; (7278 <rand+0x6c>)
    7234:	8103      	strh	r3, [r0, #8]
    7236:	2305      	movs	r3, #5
    7238:	8143      	strh	r3, [r0, #10]
    723a:	3306      	adds	r3, #6
    723c:	8183      	strh	r3, [r0, #12]
    723e:	2300      	movs	r3, #0
    7240:	6102      	str	r2, [r0, #16]
    7242:	6143      	str	r3, [r0, #20]
    7244:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    7246:	4a0d      	ldr	r2, [pc, #52]	; (727c <rand+0x70>)
    7248:	6920      	ldr	r0, [r4, #16]
    724a:	6961      	ldr	r1, [r4, #20]
    724c:	4b0c      	ldr	r3, [pc, #48]	; (7280 <rand+0x74>)
    724e:	f7ff fe11 	bl	6e74 <__aeabi_lmul>
    7252:	2201      	movs	r2, #1
    7254:	2300      	movs	r3, #0
    7256:	1880      	adds	r0, r0, r2
    7258:	4159      	adcs	r1, r3
    725a:	6120      	str	r0, [r4, #16]
    725c:	6161      	str	r1, [r4, #20]
    725e:	0048      	lsls	r0, r1, #1
    7260:	0840      	lsrs	r0, r0, #1
    7262:	bd10      	pop	{r4, pc}
    7264:	20000210 	.word	0x20000210
    7268:	0000330e 	.word	0x0000330e
    726c:	ffffabcd 	.word	0xffffabcd
    7270:	00001234 	.word	0x00001234
    7274:	ffffe66d 	.word	0xffffe66d
    7278:	ffffdeec 	.word	0xffffdeec
    727c:	4c957f2d 	.word	0x4c957f2d
    7280:	5851f42d 	.word	0x5851f42d

00007284 <_sbrk_r>:
    7284:	2300      	movs	r3, #0
    7286:	b570      	push	{r4, r5, r6, lr}
    7288:	4c06      	ldr	r4, [pc, #24]	; (72a4 <_sbrk_r+0x20>)
    728a:	0005      	movs	r5, r0
    728c:	0008      	movs	r0, r1
    728e:	6023      	str	r3, [r4, #0]
    7290:	f7fc fc7c 	bl	3b8c <_sbrk>
    7294:	1c43      	adds	r3, r0, #1
    7296:	d103      	bne.n	72a0 <_sbrk_r+0x1c>
    7298:	6823      	ldr	r3, [r4, #0]
    729a:	2b00      	cmp	r3, #0
    729c:	d000      	beq.n	72a0 <_sbrk_r+0x1c>
    729e:	602b      	str	r3, [r5, #0]
    72a0:	bd70      	pop	{r4, r5, r6, pc}
    72a2:	46c0      	nop			; (mov r8, r8)
    72a4:	20002bac 	.word	0x20002bac

000072a8 <setbuf>:
    72a8:	424a      	negs	r2, r1
    72aa:	414a      	adcs	r2, r1
    72ac:	2380      	movs	r3, #128	; 0x80
    72ae:	b510      	push	{r4, lr}
    72b0:	0052      	lsls	r2, r2, #1
    72b2:	00db      	lsls	r3, r3, #3
    72b4:	f000 f802 	bl	72bc <setvbuf>
    72b8:	bd10      	pop	{r4, pc}
	...

000072bc <setvbuf>:
    72bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    72be:	001d      	movs	r5, r3
    72c0:	4b4f      	ldr	r3, [pc, #316]	; (7400 <setvbuf+0x144>)
    72c2:	b085      	sub	sp, #20
    72c4:	681e      	ldr	r6, [r3, #0]
    72c6:	0004      	movs	r4, r0
    72c8:	000f      	movs	r7, r1
    72ca:	9200      	str	r2, [sp, #0]
    72cc:	2e00      	cmp	r6, #0
    72ce:	d005      	beq.n	72dc <setvbuf+0x20>
    72d0:	69b3      	ldr	r3, [r6, #24]
    72d2:	2b00      	cmp	r3, #0
    72d4:	d102      	bne.n	72dc <setvbuf+0x20>
    72d6:	0030      	movs	r0, r6
    72d8:	f000 fa60 	bl	779c <__sinit>
    72dc:	4b49      	ldr	r3, [pc, #292]	; (7404 <setvbuf+0x148>)
    72de:	429c      	cmp	r4, r3
    72e0:	d150      	bne.n	7384 <setvbuf+0xc8>
    72e2:	6874      	ldr	r4, [r6, #4]
    72e4:	9b00      	ldr	r3, [sp, #0]
    72e6:	2b02      	cmp	r3, #2
    72e8:	d005      	beq.n	72f6 <setvbuf+0x3a>
    72ea:	2b01      	cmp	r3, #1
    72ec:	d900      	bls.n	72f0 <setvbuf+0x34>
    72ee:	e084      	b.n	73fa <setvbuf+0x13e>
    72f0:	2d00      	cmp	r5, #0
    72f2:	da00      	bge.n	72f6 <setvbuf+0x3a>
    72f4:	e081      	b.n	73fa <setvbuf+0x13e>
    72f6:	0021      	movs	r1, r4
    72f8:	0030      	movs	r0, r6
    72fa:	f000 f9e1 	bl	76c0 <_fflush_r>
    72fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7300:	2900      	cmp	r1, #0
    7302:	d008      	beq.n	7316 <setvbuf+0x5a>
    7304:	0023      	movs	r3, r4
    7306:	3344      	adds	r3, #68	; 0x44
    7308:	4299      	cmp	r1, r3
    730a:	d002      	beq.n	7312 <setvbuf+0x56>
    730c:	0030      	movs	r0, r6
    730e:	f7ff fe51 	bl	6fb4 <_free_r>
    7312:	2300      	movs	r3, #0
    7314:	6363      	str	r3, [r4, #52]	; 0x34
    7316:	2300      	movs	r3, #0
    7318:	61a3      	str	r3, [r4, #24]
    731a:	6063      	str	r3, [r4, #4]
    731c:	89a3      	ldrh	r3, [r4, #12]
    731e:	061b      	lsls	r3, r3, #24
    7320:	d503      	bpl.n	732a <setvbuf+0x6e>
    7322:	6921      	ldr	r1, [r4, #16]
    7324:	0030      	movs	r0, r6
    7326:	f7ff fe45 	bl	6fb4 <_free_r>
    732a:	89a3      	ldrh	r3, [r4, #12]
    732c:	4a36      	ldr	r2, [pc, #216]	; (7408 <setvbuf+0x14c>)
    732e:	4013      	ands	r3, r2
    7330:	81a3      	strh	r3, [r4, #12]
    7332:	9b00      	ldr	r3, [sp, #0]
    7334:	2b02      	cmp	r3, #2
    7336:	d05a      	beq.n	73ee <setvbuf+0x132>
    7338:	ab03      	add	r3, sp, #12
    733a:	aa02      	add	r2, sp, #8
    733c:	0021      	movs	r1, r4
    733e:	0030      	movs	r0, r6
    7340:	f000 fac2 	bl	78c8 <__swhatbuf_r>
    7344:	89a3      	ldrh	r3, [r4, #12]
    7346:	4318      	orrs	r0, r3
    7348:	81a0      	strh	r0, [r4, #12]
    734a:	2d00      	cmp	r5, #0
    734c:	d124      	bne.n	7398 <setvbuf+0xdc>
    734e:	9d02      	ldr	r5, [sp, #8]
    7350:	0028      	movs	r0, r5
    7352:	f7ff fdf3 	bl	6f3c <malloc>
    7356:	9501      	str	r5, [sp, #4]
    7358:	1e07      	subs	r7, r0, #0
    735a:	d142      	bne.n	73e2 <setvbuf+0x126>
    735c:	9b02      	ldr	r3, [sp, #8]
    735e:	9301      	str	r3, [sp, #4]
    7360:	42ab      	cmp	r3, r5
    7362:	d139      	bne.n	73d8 <setvbuf+0x11c>
    7364:	2001      	movs	r0, #1
    7366:	4240      	negs	r0, r0
    7368:	2302      	movs	r3, #2
    736a:	89a2      	ldrh	r2, [r4, #12]
    736c:	4313      	orrs	r3, r2
    736e:	81a3      	strh	r3, [r4, #12]
    7370:	2300      	movs	r3, #0
    7372:	60a3      	str	r3, [r4, #8]
    7374:	0023      	movs	r3, r4
    7376:	3347      	adds	r3, #71	; 0x47
    7378:	6023      	str	r3, [r4, #0]
    737a:	6123      	str	r3, [r4, #16]
    737c:	2301      	movs	r3, #1
    737e:	6163      	str	r3, [r4, #20]
    7380:	b005      	add	sp, #20
    7382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7384:	4b21      	ldr	r3, [pc, #132]	; (740c <setvbuf+0x150>)
    7386:	429c      	cmp	r4, r3
    7388:	d101      	bne.n	738e <setvbuf+0xd2>
    738a:	68b4      	ldr	r4, [r6, #8]
    738c:	e7aa      	b.n	72e4 <setvbuf+0x28>
    738e:	4b20      	ldr	r3, [pc, #128]	; (7410 <setvbuf+0x154>)
    7390:	429c      	cmp	r4, r3
    7392:	d1a7      	bne.n	72e4 <setvbuf+0x28>
    7394:	68f4      	ldr	r4, [r6, #12]
    7396:	e7a5      	b.n	72e4 <setvbuf+0x28>
    7398:	2f00      	cmp	r7, #0
    739a:	d0d9      	beq.n	7350 <setvbuf+0x94>
    739c:	69b3      	ldr	r3, [r6, #24]
    739e:	2b00      	cmp	r3, #0
    73a0:	d102      	bne.n	73a8 <setvbuf+0xec>
    73a2:	0030      	movs	r0, r6
    73a4:	f000 f9fa 	bl	779c <__sinit>
    73a8:	9b00      	ldr	r3, [sp, #0]
    73aa:	2b01      	cmp	r3, #1
    73ac:	d103      	bne.n	73b6 <setvbuf+0xfa>
    73ae:	89a3      	ldrh	r3, [r4, #12]
    73b0:	9a00      	ldr	r2, [sp, #0]
    73b2:	431a      	orrs	r2, r3
    73b4:	81a2      	strh	r2, [r4, #12]
    73b6:	2008      	movs	r0, #8
    73b8:	89a3      	ldrh	r3, [r4, #12]
    73ba:	6027      	str	r7, [r4, #0]
    73bc:	6127      	str	r7, [r4, #16]
    73be:	6165      	str	r5, [r4, #20]
    73c0:	4018      	ands	r0, r3
    73c2:	d018      	beq.n	73f6 <setvbuf+0x13a>
    73c4:	2001      	movs	r0, #1
    73c6:	4018      	ands	r0, r3
    73c8:	2300      	movs	r3, #0
    73ca:	4298      	cmp	r0, r3
    73cc:	d011      	beq.n	73f2 <setvbuf+0x136>
    73ce:	426d      	negs	r5, r5
    73d0:	60a3      	str	r3, [r4, #8]
    73d2:	61a5      	str	r5, [r4, #24]
    73d4:	0018      	movs	r0, r3
    73d6:	e7d3      	b.n	7380 <setvbuf+0xc4>
    73d8:	9801      	ldr	r0, [sp, #4]
    73da:	f7ff fdaf 	bl	6f3c <malloc>
    73de:	1e07      	subs	r7, r0, #0
    73e0:	d0c0      	beq.n	7364 <setvbuf+0xa8>
    73e2:	2380      	movs	r3, #128	; 0x80
    73e4:	89a2      	ldrh	r2, [r4, #12]
    73e6:	9d01      	ldr	r5, [sp, #4]
    73e8:	4313      	orrs	r3, r2
    73ea:	81a3      	strh	r3, [r4, #12]
    73ec:	e7d6      	b.n	739c <setvbuf+0xe0>
    73ee:	2000      	movs	r0, #0
    73f0:	e7ba      	b.n	7368 <setvbuf+0xac>
    73f2:	60a5      	str	r5, [r4, #8]
    73f4:	e7c4      	b.n	7380 <setvbuf+0xc4>
    73f6:	60a0      	str	r0, [r4, #8]
    73f8:	e7c2      	b.n	7380 <setvbuf+0xc4>
    73fa:	2001      	movs	r0, #1
    73fc:	4240      	negs	r0, r0
    73fe:	e7bf      	b.n	7380 <setvbuf+0xc4>
    7400:	20000210 	.word	0x20000210
    7404:	0000ae28 	.word	0x0000ae28
    7408:	fffff35c 	.word	0xfffff35c
    740c:	0000ae48 	.word	0x0000ae48
    7410:	0000ae08 	.word	0x0000ae08

00007414 <__swbuf_r>:
    7414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7416:	0005      	movs	r5, r0
    7418:	000e      	movs	r6, r1
    741a:	0014      	movs	r4, r2
    741c:	2800      	cmp	r0, #0
    741e:	d004      	beq.n	742a <__swbuf_r+0x16>
    7420:	6983      	ldr	r3, [r0, #24]
    7422:	2b00      	cmp	r3, #0
    7424:	d101      	bne.n	742a <__swbuf_r+0x16>
    7426:	f000 f9b9 	bl	779c <__sinit>
    742a:	4b22      	ldr	r3, [pc, #136]	; (74b4 <__swbuf_r+0xa0>)
    742c:	429c      	cmp	r4, r3
    742e:	d12d      	bne.n	748c <__swbuf_r+0x78>
    7430:	686c      	ldr	r4, [r5, #4]
    7432:	69a3      	ldr	r3, [r4, #24]
    7434:	60a3      	str	r3, [r4, #8]
    7436:	89a3      	ldrh	r3, [r4, #12]
    7438:	071b      	lsls	r3, r3, #28
    743a:	d531      	bpl.n	74a0 <__swbuf_r+0x8c>
    743c:	6923      	ldr	r3, [r4, #16]
    743e:	2b00      	cmp	r3, #0
    7440:	d02e      	beq.n	74a0 <__swbuf_r+0x8c>
    7442:	6823      	ldr	r3, [r4, #0]
    7444:	6922      	ldr	r2, [r4, #16]
    7446:	b2f7      	uxtb	r7, r6
    7448:	1a98      	subs	r0, r3, r2
    744a:	6963      	ldr	r3, [r4, #20]
    744c:	b2f6      	uxtb	r6, r6
    744e:	4298      	cmp	r0, r3
    7450:	db05      	blt.n	745e <__swbuf_r+0x4a>
    7452:	0021      	movs	r1, r4
    7454:	0028      	movs	r0, r5
    7456:	f000 f933 	bl	76c0 <_fflush_r>
    745a:	2800      	cmp	r0, #0
    745c:	d126      	bne.n	74ac <__swbuf_r+0x98>
    745e:	68a3      	ldr	r3, [r4, #8]
    7460:	3001      	adds	r0, #1
    7462:	3b01      	subs	r3, #1
    7464:	60a3      	str	r3, [r4, #8]
    7466:	6823      	ldr	r3, [r4, #0]
    7468:	1c5a      	adds	r2, r3, #1
    746a:	6022      	str	r2, [r4, #0]
    746c:	701f      	strb	r7, [r3, #0]
    746e:	6963      	ldr	r3, [r4, #20]
    7470:	4298      	cmp	r0, r3
    7472:	d004      	beq.n	747e <__swbuf_r+0x6a>
    7474:	89a3      	ldrh	r3, [r4, #12]
    7476:	07db      	lsls	r3, r3, #31
    7478:	d51a      	bpl.n	74b0 <__swbuf_r+0x9c>
    747a:	2e0a      	cmp	r6, #10
    747c:	d118      	bne.n	74b0 <__swbuf_r+0x9c>
    747e:	0021      	movs	r1, r4
    7480:	0028      	movs	r0, r5
    7482:	f000 f91d 	bl	76c0 <_fflush_r>
    7486:	2800      	cmp	r0, #0
    7488:	d012      	beq.n	74b0 <__swbuf_r+0x9c>
    748a:	e00f      	b.n	74ac <__swbuf_r+0x98>
    748c:	4b0a      	ldr	r3, [pc, #40]	; (74b8 <__swbuf_r+0xa4>)
    748e:	429c      	cmp	r4, r3
    7490:	d101      	bne.n	7496 <__swbuf_r+0x82>
    7492:	68ac      	ldr	r4, [r5, #8]
    7494:	e7cd      	b.n	7432 <__swbuf_r+0x1e>
    7496:	4b09      	ldr	r3, [pc, #36]	; (74bc <__swbuf_r+0xa8>)
    7498:	429c      	cmp	r4, r3
    749a:	d1ca      	bne.n	7432 <__swbuf_r+0x1e>
    749c:	68ec      	ldr	r4, [r5, #12]
    749e:	e7c8      	b.n	7432 <__swbuf_r+0x1e>
    74a0:	0021      	movs	r1, r4
    74a2:	0028      	movs	r0, r5
    74a4:	f000 f80c 	bl	74c0 <__swsetup_r>
    74a8:	2800      	cmp	r0, #0
    74aa:	d0ca      	beq.n	7442 <__swbuf_r+0x2e>
    74ac:	2601      	movs	r6, #1
    74ae:	4276      	negs	r6, r6
    74b0:	0030      	movs	r0, r6
    74b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    74b4:	0000ae28 	.word	0x0000ae28
    74b8:	0000ae48 	.word	0x0000ae48
    74bc:	0000ae08 	.word	0x0000ae08

000074c0 <__swsetup_r>:
    74c0:	4b36      	ldr	r3, [pc, #216]	; (759c <__swsetup_r+0xdc>)
    74c2:	b570      	push	{r4, r5, r6, lr}
    74c4:	681d      	ldr	r5, [r3, #0]
    74c6:	0006      	movs	r6, r0
    74c8:	000c      	movs	r4, r1
    74ca:	2d00      	cmp	r5, #0
    74cc:	d005      	beq.n	74da <__swsetup_r+0x1a>
    74ce:	69ab      	ldr	r3, [r5, #24]
    74d0:	2b00      	cmp	r3, #0
    74d2:	d102      	bne.n	74da <__swsetup_r+0x1a>
    74d4:	0028      	movs	r0, r5
    74d6:	f000 f961 	bl	779c <__sinit>
    74da:	4b31      	ldr	r3, [pc, #196]	; (75a0 <__swsetup_r+0xe0>)
    74dc:	429c      	cmp	r4, r3
    74de:	d10f      	bne.n	7500 <__swsetup_r+0x40>
    74e0:	686c      	ldr	r4, [r5, #4]
    74e2:	230c      	movs	r3, #12
    74e4:	5ee2      	ldrsh	r2, [r4, r3]
    74e6:	b293      	uxth	r3, r2
    74e8:	0719      	lsls	r1, r3, #28
    74ea:	d42d      	bmi.n	7548 <__swsetup_r+0x88>
    74ec:	06d9      	lsls	r1, r3, #27
    74ee:	d411      	bmi.n	7514 <__swsetup_r+0x54>
    74f0:	2309      	movs	r3, #9
    74f2:	2001      	movs	r0, #1
    74f4:	6033      	str	r3, [r6, #0]
    74f6:	3337      	adds	r3, #55	; 0x37
    74f8:	4313      	orrs	r3, r2
    74fa:	81a3      	strh	r3, [r4, #12]
    74fc:	4240      	negs	r0, r0
    74fe:	bd70      	pop	{r4, r5, r6, pc}
    7500:	4b28      	ldr	r3, [pc, #160]	; (75a4 <__swsetup_r+0xe4>)
    7502:	429c      	cmp	r4, r3
    7504:	d101      	bne.n	750a <__swsetup_r+0x4a>
    7506:	68ac      	ldr	r4, [r5, #8]
    7508:	e7eb      	b.n	74e2 <__swsetup_r+0x22>
    750a:	4b27      	ldr	r3, [pc, #156]	; (75a8 <__swsetup_r+0xe8>)
    750c:	429c      	cmp	r4, r3
    750e:	d1e8      	bne.n	74e2 <__swsetup_r+0x22>
    7510:	68ec      	ldr	r4, [r5, #12]
    7512:	e7e6      	b.n	74e2 <__swsetup_r+0x22>
    7514:	075b      	lsls	r3, r3, #29
    7516:	d513      	bpl.n	7540 <__swsetup_r+0x80>
    7518:	6b61      	ldr	r1, [r4, #52]	; 0x34
    751a:	2900      	cmp	r1, #0
    751c:	d008      	beq.n	7530 <__swsetup_r+0x70>
    751e:	0023      	movs	r3, r4
    7520:	3344      	adds	r3, #68	; 0x44
    7522:	4299      	cmp	r1, r3
    7524:	d002      	beq.n	752c <__swsetup_r+0x6c>
    7526:	0030      	movs	r0, r6
    7528:	f7ff fd44 	bl	6fb4 <_free_r>
    752c:	2300      	movs	r3, #0
    752e:	6363      	str	r3, [r4, #52]	; 0x34
    7530:	2224      	movs	r2, #36	; 0x24
    7532:	89a3      	ldrh	r3, [r4, #12]
    7534:	4393      	bics	r3, r2
    7536:	81a3      	strh	r3, [r4, #12]
    7538:	2300      	movs	r3, #0
    753a:	6063      	str	r3, [r4, #4]
    753c:	6923      	ldr	r3, [r4, #16]
    753e:	6023      	str	r3, [r4, #0]
    7540:	2308      	movs	r3, #8
    7542:	89a2      	ldrh	r2, [r4, #12]
    7544:	4313      	orrs	r3, r2
    7546:	81a3      	strh	r3, [r4, #12]
    7548:	6923      	ldr	r3, [r4, #16]
    754a:	2b00      	cmp	r3, #0
    754c:	d10b      	bne.n	7566 <__swsetup_r+0xa6>
    754e:	21a0      	movs	r1, #160	; 0xa0
    7550:	2280      	movs	r2, #128	; 0x80
    7552:	89a3      	ldrh	r3, [r4, #12]
    7554:	0089      	lsls	r1, r1, #2
    7556:	0092      	lsls	r2, r2, #2
    7558:	400b      	ands	r3, r1
    755a:	4293      	cmp	r3, r2
    755c:	d003      	beq.n	7566 <__swsetup_r+0xa6>
    755e:	0021      	movs	r1, r4
    7560:	0030      	movs	r0, r6
    7562:	f000 f9d9 	bl	7918 <__smakebuf_r>
    7566:	2301      	movs	r3, #1
    7568:	89a2      	ldrh	r2, [r4, #12]
    756a:	4013      	ands	r3, r2
    756c:	d011      	beq.n	7592 <__swsetup_r+0xd2>
    756e:	2300      	movs	r3, #0
    7570:	60a3      	str	r3, [r4, #8]
    7572:	6963      	ldr	r3, [r4, #20]
    7574:	425b      	negs	r3, r3
    7576:	61a3      	str	r3, [r4, #24]
    7578:	2000      	movs	r0, #0
    757a:	6923      	ldr	r3, [r4, #16]
    757c:	4283      	cmp	r3, r0
    757e:	d1be      	bne.n	74fe <__swsetup_r+0x3e>
    7580:	230c      	movs	r3, #12
    7582:	5ee2      	ldrsh	r2, [r4, r3]
    7584:	0613      	lsls	r3, r2, #24
    7586:	d5ba      	bpl.n	74fe <__swsetup_r+0x3e>
    7588:	2340      	movs	r3, #64	; 0x40
    758a:	4313      	orrs	r3, r2
    758c:	81a3      	strh	r3, [r4, #12]
    758e:	3801      	subs	r0, #1
    7590:	e7b5      	b.n	74fe <__swsetup_r+0x3e>
    7592:	0792      	lsls	r2, r2, #30
    7594:	d400      	bmi.n	7598 <__swsetup_r+0xd8>
    7596:	6963      	ldr	r3, [r4, #20]
    7598:	60a3      	str	r3, [r4, #8]
    759a:	e7ed      	b.n	7578 <__swsetup_r+0xb8>
    759c:	20000210 	.word	0x20000210
    75a0:	0000ae28 	.word	0x0000ae28
    75a4:	0000ae48 	.word	0x0000ae48
    75a8:	0000ae08 	.word	0x0000ae08

000075ac <__sflush_r>:
    75ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    75ae:	898a      	ldrh	r2, [r1, #12]
    75b0:	0005      	movs	r5, r0
    75b2:	000c      	movs	r4, r1
    75b4:	0713      	lsls	r3, r2, #28
    75b6:	d460      	bmi.n	767a <__sflush_r+0xce>
    75b8:	684b      	ldr	r3, [r1, #4]
    75ba:	2b00      	cmp	r3, #0
    75bc:	dc04      	bgt.n	75c8 <__sflush_r+0x1c>
    75be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    75c0:	2b00      	cmp	r3, #0
    75c2:	dc01      	bgt.n	75c8 <__sflush_r+0x1c>
    75c4:	2000      	movs	r0, #0
    75c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    75c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    75ca:	2f00      	cmp	r7, #0
    75cc:	d0fa      	beq.n	75c4 <__sflush_r+0x18>
    75ce:	2300      	movs	r3, #0
    75d0:	682e      	ldr	r6, [r5, #0]
    75d2:	602b      	str	r3, [r5, #0]
    75d4:	2380      	movs	r3, #128	; 0x80
    75d6:	015b      	lsls	r3, r3, #5
    75d8:	401a      	ands	r2, r3
    75da:	d034      	beq.n	7646 <__sflush_r+0x9a>
    75dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    75de:	89a3      	ldrh	r3, [r4, #12]
    75e0:	075b      	lsls	r3, r3, #29
    75e2:	d506      	bpl.n	75f2 <__sflush_r+0x46>
    75e4:	6863      	ldr	r3, [r4, #4]
    75e6:	1ac0      	subs	r0, r0, r3
    75e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    75ea:	2b00      	cmp	r3, #0
    75ec:	d001      	beq.n	75f2 <__sflush_r+0x46>
    75ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    75f0:	1ac0      	subs	r0, r0, r3
    75f2:	0002      	movs	r2, r0
    75f4:	6a21      	ldr	r1, [r4, #32]
    75f6:	2300      	movs	r3, #0
    75f8:	0028      	movs	r0, r5
    75fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    75fc:	47b8      	blx	r7
    75fe:	89a1      	ldrh	r1, [r4, #12]
    7600:	1c43      	adds	r3, r0, #1
    7602:	d106      	bne.n	7612 <__sflush_r+0x66>
    7604:	682b      	ldr	r3, [r5, #0]
    7606:	2b1d      	cmp	r3, #29
    7608:	d831      	bhi.n	766e <__sflush_r+0xc2>
    760a:	4a2c      	ldr	r2, [pc, #176]	; (76bc <__sflush_r+0x110>)
    760c:	40da      	lsrs	r2, r3
    760e:	07d3      	lsls	r3, r2, #31
    7610:	d52d      	bpl.n	766e <__sflush_r+0xc2>
    7612:	2300      	movs	r3, #0
    7614:	6063      	str	r3, [r4, #4]
    7616:	6923      	ldr	r3, [r4, #16]
    7618:	6023      	str	r3, [r4, #0]
    761a:	04cb      	lsls	r3, r1, #19
    761c:	d505      	bpl.n	762a <__sflush_r+0x7e>
    761e:	1c43      	adds	r3, r0, #1
    7620:	d102      	bne.n	7628 <__sflush_r+0x7c>
    7622:	682b      	ldr	r3, [r5, #0]
    7624:	2b00      	cmp	r3, #0
    7626:	d100      	bne.n	762a <__sflush_r+0x7e>
    7628:	6560      	str	r0, [r4, #84]	; 0x54
    762a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    762c:	602e      	str	r6, [r5, #0]
    762e:	2900      	cmp	r1, #0
    7630:	d0c8      	beq.n	75c4 <__sflush_r+0x18>
    7632:	0023      	movs	r3, r4
    7634:	3344      	adds	r3, #68	; 0x44
    7636:	4299      	cmp	r1, r3
    7638:	d002      	beq.n	7640 <__sflush_r+0x94>
    763a:	0028      	movs	r0, r5
    763c:	f7ff fcba 	bl	6fb4 <_free_r>
    7640:	2000      	movs	r0, #0
    7642:	6360      	str	r0, [r4, #52]	; 0x34
    7644:	e7bf      	b.n	75c6 <__sflush_r+0x1a>
    7646:	2301      	movs	r3, #1
    7648:	6a21      	ldr	r1, [r4, #32]
    764a:	0028      	movs	r0, r5
    764c:	47b8      	blx	r7
    764e:	1c43      	adds	r3, r0, #1
    7650:	d1c5      	bne.n	75de <__sflush_r+0x32>
    7652:	682b      	ldr	r3, [r5, #0]
    7654:	2b00      	cmp	r3, #0
    7656:	d0c2      	beq.n	75de <__sflush_r+0x32>
    7658:	2b1d      	cmp	r3, #29
    765a:	d001      	beq.n	7660 <__sflush_r+0xb4>
    765c:	2b16      	cmp	r3, #22
    765e:	d101      	bne.n	7664 <__sflush_r+0xb8>
    7660:	602e      	str	r6, [r5, #0]
    7662:	e7af      	b.n	75c4 <__sflush_r+0x18>
    7664:	2340      	movs	r3, #64	; 0x40
    7666:	89a2      	ldrh	r2, [r4, #12]
    7668:	4313      	orrs	r3, r2
    766a:	81a3      	strh	r3, [r4, #12]
    766c:	e7ab      	b.n	75c6 <__sflush_r+0x1a>
    766e:	2340      	movs	r3, #64	; 0x40
    7670:	430b      	orrs	r3, r1
    7672:	2001      	movs	r0, #1
    7674:	81a3      	strh	r3, [r4, #12]
    7676:	4240      	negs	r0, r0
    7678:	e7a5      	b.n	75c6 <__sflush_r+0x1a>
    767a:	690f      	ldr	r7, [r1, #16]
    767c:	2f00      	cmp	r7, #0
    767e:	d0a1      	beq.n	75c4 <__sflush_r+0x18>
    7680:	680b      	ldr	r3, [r1, #0]
    7682:	600f      	str	r7, [r1, #0]
    7684:	1bdb      	subs	r3, r3, r7
    7686:	9301      	str	r3, [sp, #4]
    7688:	2300      	movs	r3, #0
    768a:	0792      	lsls	r2, r2, #30
    768c:	d100      	bne.n	7690 <__sflush_r+0xe4>
    768e:	694b      	ldr	r3, [r1, #20]
    7690:	60a3      	str	r3, [r4, #8]
    7692:	9b01      	ldr	r3, [sp, #4]
    7694:	2b00      	cmp	r3, #0
    7696:	dc00      	bgt.n	769a <__sflush_r+0xee>
    7698:	e794      	b.n	75c4 <__sflush_r+0x18>
    769a:	9b01      	ldr	r3, [sp, #4]
    769c:	003a      	movs	r2, r7
    769e:	6a21      	ldr	r1, [r4, #32]
    76a0:	0028      	movs	r0, r5
    76a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    76a4:	47b0      	blx	r6
    76a6:	2800      	cmp	r0, #0
    76a8:	dc03      	bgt.n	76b2 <__sflush_r+0x106>
    76aa:	2340      	movs	r3, #64	; 0x40
    76ac:	89a2      	ldrh	r2, [r4, #12]
    76ae:	4313      	orrs	r3, r2
    76b0:	e7df      	b.n	7672 <__sflush_r+0xc6>
    76b2:	9b01      	ldr	r3, [sp, #4]
    76b4:	183f      	adds	r7, r7, r0
    76b6:	1a1b      	subs	r3, r3, r0
    76b8:	9301      	str	r3, [sp, #4]
    76ba:	e7ea      	b.n	7692 <__sflush_r+0xe6>
    76bc:	20400001 	.word	0x20400001

000076c0 <_fflush_r>:
    76c0:	690b      	ldr	r3, [r1, #16]
    76c2:	b570      	push	{r4, r5, r6, lr}
    76c4:	0005      	movs	r5, r0
    76c6:	000c      	movs	r4, r1
    76c8:	2b00      	cmp	r3, #0
    76ca:	d101      	bne.n	76d0 <_fflush_r+0x10>
    76cc:	2000      	movs	r0, #0
    76ce:	bd70      	pop	{r4, r5, r6, pc}
    76d0:	2800      	cmp	r0, #0
    76d2:	d004      	beq.n	76de <_fflush_r+0x1e>
    76d4:	6983      	ldr	r3, [r0, #24]
    76d6:	2b00      	cmp	r3, #0
    76d8:	d101      	bne.n	76de <_fflush_r+0x1e>
    76da:	f000 f85f 	bl	779c <__sinit>
    76de:	4b0b      	ldr	r3, [pc, #44]	; (770c <_fflush_r+0x4c>)
    76e0:	429c      	cmp	r4, r3
    76e2:	d109      	bne.n	76f8 <_fflush_r+0x38>
    76e4:	686c      	ldr	r4, [r5, #4]
    76e6:	220c      	movs	r2, #12
    76e8:	5ea3      	ldrsh	r3, [r4, r2]
    76ea:	2b00      	cmp	r3, #0
    76ec:	d0ee      	beq.n	76cc <_fflush_r+0xc>
    76ee:	0021      	movs	r1, r4
    76f0:	0028      	movs	r0, r5
    76f2:	f7ff ff5b 	bl	75ac <__sflush_r>
    76f6:	e7ea      	b.n	76ce <_fflush_r+0xe>
    76f8:	4b05      	ldr	r3, [pc, #20]	; (7710 <_fflush_r+0x50>)
    76fa:	429c      	cmp	r4, r3
    76fc:	d101      	bne.n	7702 <_fflush_r+0x42>
    76fe:	68ac      	ldr	r4, [r5, #8]
    7700:	e7f1      	b.n	76e6 <_fflush_r+0x26>
    7702:	4b04      	ldr	r3, [pc, #16]	; (7714 <_fflush_r+0x54>)
    7704:	429c      	cmp	r4, r3
    7706:	d1ee      	bne.n	76e6 <_fflush_r+0x26>
    7708:	68ec      	ldr	r4, [r5, #12]
    770a:	e7ec      	b.n	76e6 <_fflush_r+0x26>
    770c:	0000ae28 	.word	0x0000ae28
    7710:	0000ae48 	.word	0x0000ae48
    7714:	0000ae08 	.word	0x0000ae08

00007718 <_cleanup_r>:
    7718:	b510      	push	{r4, lr}
    771a:	4902      	ldr	r1, [pc, #8]	; (7724 <_cleanup_r+0xc>)
    771c:	f000 f8b2 	bl	7884 <_fwalk_reent>
    7720:	bd10      	pop	{r4, pc}
    7722:	46c0      	nop			; (mov r8, r8)
    7724:	000076c1 	.word	0x000076c1

00007728 <std.isra.0>:
    7728:	2300      	movs	r3, #0
    772a:	b510      	push	{r4, lr}
    772c:	0004      	movs	r4, r0
    772e:	6003      	str	r3, [r0, #0]
    7730:	6043      	str	r3, [r0, #4]
    7732:	6083      	str	r3, [r0, #8]
    7734:	8181      	strh	r1, [r0, #12]
    7736:	6643      	str	r3, [r0, #100]	; 0x64
    7738:	81c2      	strh	r2, [r0, #14]
    773a:	6103      	str	r3, [r0, #16]
    773c:	6143      	str	r3, [r0, #20]
    773e:	6183      	str	r3, [r0, #24]
    7740:	0019      	movs	r1, r3
    7742:	2208      	movs	r2, #8
    7744:	305c      	adds	r0, #92	; 0x5c
    7746:	f7ff fc2d 	bl	6fa4 <memset>
    774a:	4b05      	ldr	r3, [pc, #20]	; (7760 <std.isra.0+0x38>)
    774c:	6224      	str	r4, [r4, #32]
    774e:	6263      	str	r3, [r4, #36]	; 0x24
    7750:	4b04      	ldr	r3, [pc, #16]	; (7764 <std.isra.0+0x3c>)
    7752:	62a3      	str	r3, [r4, #40]	; 0x28
    7754:	4b04      	ldr	r3, [pc, #16]	; (7768 <std.isra.0+0x40>)
    7756:	62e3      	str	r3, [r4, #44]	; 0x2c
    7758:	4b04      	ldr	r3, [pc, #16]	; (776c <std.isra.0+0x44>)
    775a:	6323      	str	r3, [r4, #48]	; 0x30
    775c:	bd10      	pop	{r4, pc}
    775e:	46c0      	nop			; (mov r8, r8)
    7760:	00007f3d 	.word	0x00007f3d
    7764:	00007f65 	.word	0x00007f65
    7768:	00007f9d 	.word	0x00007f9d
    776c:	00007fc9 	.word	0x00007fc9

00007770 <__sfmoreglue>:
    7770:	b570      	push	{r4, r5, r6, lr}
    7772:	2568      	movs	r5, #104	; 0x68
    7774:	1e4a      	subs	r2, r1, #1
    7776:	4355      	muls	r5, r2
    7778:	000e      	movs	r6, r1
    777a:	0029      	movs	r1, r5
    777c:	3174      	adds	r1, #116	; 0x74
    777e:	f7ff fc63 	bl	7048 <_malloc_r>
    7782:	1e04      	subs	r4, r0, #0
    7784:	d008      	beq.n	7798 <__sfmoreglue+0x28>
    7786:	2100      	movs	r1, #0
    7788:	002a      	movs	r2, r5
    778a:	6001      	str	r1, [r0, #0]
    778c:	6046      	str	r6, [r0, #4]
    778e:	300c      	adds	r0, #12
    7790:	60a0      	str	r0, [r4, #8]
    7792:	3268      	adds	r2, #104	; 0x68
    7794:	f7ff fc06 	bl	6fa4 <memset>
    7798:	0020      	movs	r0, r4
    779a:	bd70      	pop	{r4, r5, r6, pc}

0000779c <__sinit>:
    779c:	6983      	ldr	r3, [r0, #24]
    779e:	b513      	push	{r0, r1, r4, lr}
    77a0:	0004      	movs	r4, r0
    77a2:	2b00      	cmp	r3, #0
    77a4:	d128      	bne.n	77f8 <__sinit+0x5c>
    77a6:	6483      	str	r3, [r0, #72]	; 0x48
    77a8:	64c3      	str	r3, [r0, #76]	; 0x4c
    77aa:	6503      	str	r3, [r0, #80]	; 0x50
    77ac:	4b13      	ldr	r3, [pc, #76]	; (77fc <__sinit+0x60>)
    77ae:	4a14      	ldr	r2, [pc, #80]	; (7800 <__sinit+0x64>)
    77b0:	681b      	ldr	r3, [r3, #0]
    77b2:	6282      	str	r2, [r0, #40]	; 0x28
    77b4:	9301      	str	r3, [sp, #4]
    77b6:	4298      	cmp	r0, r3
    77b8:	d101      	bne.n	77be <__sinit+0x22>
    77ba:	2301      	movs	r3, #1
    77bc:	6183      	str	r3, [r0, #24]
    77be:	0020      	movs	r0, r4
    77c0:	f000 f820 	bl	7804 <__sfp>
    77c4:	6060      	str	r0, [r4, #4]
    77c6:	0020      	movs	r0, r4
    77c8:	f000 f81c 	bl	7804 <__sfp>
    77cc:	60a0      	str	r0, [r4, #8]
    77ce:	0020      	movs	r0, r4
    77d0:	f000 f818 	bl	7804 <__sfp>
    77d4:	2200      	movs	r2, #0
    77d6:	60e0      	str	r0, [r4, #12]
    77d8:	2104      	movs	r1, #4
    77da:	6860      	ldr	r0, [r4, #4]
    77dc:	f7ff ffa4 	bl	7728 <std.isra.0>
    77e0:	2201      	movs	r2, #1
    77e2:	2109      	movs	r1, #9
    77e4:	68a0      	ldr	r0, [r4, #8]
    77e6:	f7ff ff9f 	bl	7728 <std.isra.0>
    77ea:	2202      	movs	r2, #2
    77ec:	2112      	movs	r1, #18
    77ee:	68e0      	ldr	r0, [r4, #12]
    77f0:	f7ff ff9a 	bl	7728 <std.isra.0>
    77f4:	2301      	movs	r3, #1
    77f6:	61a3      	str	r3, [r4, #24]
    77f8:	bd13      	pop	{r0, r1, r4, pc}
    77fa:	46c0      	nop			; (mov r8, r8)
    77fc:	0000ae04 	.word	0x0000ae04
    7800:	00007719 	.word	0x00007719

00007804 <__sfp>:
    7804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7806:	4b1e      	ldr	r3, [pc, #120]	; (7880 <__sfp+0x7c>)
    7808:	0007      	movs	r7, r0
    780a:	681e      	ldr	r6, [r3, #0]
    780c:	69b3      	ldr	r3, [r6, #24]
    780e:	2b00      	cmp	r3, #0
    7810:	d102      	bne.n	7818 <__sfp+0x14>
    7812:	0030      	movs	r0, r6
    7814:	f7ff ffc2 	bl	779c <__sinit>
    7818:	3648      	adds	r6, #72	; 0x48
    781a:	68b4      	ldr	r4, [r6, #8]
    781c:	6873      	ldr	r3, [r6, #4]
    781e:	3b01      	subs	r3, #1
    7820:	d504      	bpl.n	782c <__sfp+0x28>
    7822:	6833      	ldr	r3, [r6, #0]
    7824:	2b00      	cmp	r3, #0
    7826:	d007      	beq.n	7838 <__sfp+0x34>
    7828:	6836      	ldr	r6, [r6, #0]
    782a:	e7f6      	b.n	781a <__sfp+0x16>
    782c:	220c      	movs	r2, #12
    782e:	5ea5      	ldrsh	r5, [r4, r2]
    7830:	2d00      	cmp	r5, #0
    7832:	d00d      	beq.n	7850 <__sfp+0x4c>
    7834:	3468      	adds	r4, #104	; 0x68
    7836:	e7f2      	b.n	781e <__sfp+0x1a>
    7838:	2104      	movs	r1, #4
    783a:	0038      	movs	r0, r7
    783c:	f7ff ff98 	bl	7770 <__sfmoreglue>
    7840:	6030      	str	r0, [r6, #0]
    7842:	2800      	cmp	r0, #0
    7844:	d1f0      	bne.n	7828 <__sfp+0x24>
    7846:	230c      	movs	r3, #12
    7848:	0004      	movs	r4, r0
    784a:	603b      	str	r3, [r7, #0]
    784c:	0020      	movs	r0, r4
    784e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7850:	2301      	movs	r3, #1
    7852:	0020      	movs	r0, r4
    7854:	425b      	negs	r3, r3
    7856:	81e3      	strh	r3, [r4, #14]
    7858:	3302      	adds	r3, #2
    785a:	81a3      	strh	r3, [r4, #12]
    785c:	6665      	str	r5, [r4, #100]	; 0x64
    785e:	6025      	str	r5, [r4, #0]
    7860:	60a5      	str	r5, [r4, #8]
    7862:	6065      	str	r5, [r4, #4]
    7864:	6125      	str	r5, [r4, #16]
    7866:	6165      	str	r5, [r4, #20]
    7868:	61a5      	str	r5, [r4, #24]
    786a:	2208      	movs	r2, #8
    786c:	0029      	movs	r1, r5
    786e:	305c      	adds	r0, #92	; 0x5c
    7870:	f7ff fb98 	bl	6fa4 <memset>
    7874:	6365      	str	r5, [r4, #52]	; 0x34
    7876:	63a5      	str	r5, [r4, #56]	; 0x38
    7878:	64a5      	str	r5, [r4, #72]	; 0x48
    787a:	64e5      	str	r5, [r4, #76]	; 0x4c
    787c:	e7e6      	b.n	784c <__sfp+0x48>
    787e:	46c0      	nop			; (mov r8, r8)
    7880:	0000ae04 	.word	0x0000ae04

00007884 <_fwalk_reent>:
    7884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7886:	0004      	movs	r4, r0
    7888:	0007      	movs	r7, r0
    788a:	2600      	movs	r6, #0
    788c:	9101      	str	r1, [sp, #4]
    788e:	3448      	adds	r4, #72	; 0x48
    7890:	2c00      	cmp	r4, #0
    7892:	d101      	bne.n	7898 <_fwalk_reent+0x14>
    7894:	0030      	movs	r0, r6
    7896:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7898:	6863      	ldr	r3, [r4, #4]
    789a:	68a5      	ldr	r5, [r4, #8]
    789c:	9300      	str	r3, [sp, #0]
    789e:	9b00      	ldr	r3, [sp, #0]
    78a0:	3b01      	subs	r3, #1
    78a2:	9300      	str	r3, [sp, #0]
    78a4:	d501      	bpl.n	78aa <_fwalk_reent+0x26>
    78a6:	6824      	ldr	r4, [r4, #0]
    78a8:	e7f2      	b.n	7890 <_fwalk_reent+0xc>
    78aa:	89ab      	ldrh	r3, [r5, #12]
    78ac:	2b01      	cmp	r3, #1
    78ae:	d908      	bls.n	78c2 <_fwalk_reent+0x3e>
    78b0:	220e      	movs	r2, #14
    78b2:	5eab      	ldrsh	r3, [r5, r2]
    78b4:	3301      	adds	r3, #1
    78b6:	d004      	beq.n	78c2 <_fwalk_reent+0x3e>
    78b8:	0029      	movs	r1, r5
    78ba:	0038      	movs	r0, r7
    78bc:	9b01      	ldr	r3, [sp, #4]
    78be:	4798      	blx	r3
    78c0:	4306      	orrs	r6, r0
    78c2:	3568      	adds	r5, #104	; 0x68
    78c4:	e7eb      	b.n	789e <_fwalk_reent+0x1a>
	...

000078c8 <__swhatbuf_r>:
    78c8:	b570      	push	{r4, r5, r6, lr}
    78ca:	000e      	movs	r6, r1
    78cc:	001d      	movs	r5, r3
    78ce:	230e      	movs	r3, #14
    78d0:	5ec9      	ldrsh	r1, [r1, r3]
    78d2:	b090      	sub	sp, #64	; 0x40
    78d4:	0014      	movs	r4, r2
    78d6:	2900      	cmp	r1, #0
    78d8:	da07      	bge.n	78ea <__swhatbuf_r+0x22>
    78da:	2300      	movs	r3, #0
    78dc:	602b      	str	r3, [r5, #0]
    78de:	89b3      	ldrh	r3, [r6, #12]
    78e0:	061b      	lsls	r3, r3, #24
    78e2:	d411      	bmi.n	7908 <__swhatbuf_r+0x40>
    78e4:	2380      	movs	r3, #128	; 0x80
    78e6:	00db      	lsls	r3, r3, #3
    78e8:	e00f      	b.n	790a <__swhatbuf_r+0x42>
    78ea:	aa01      	add	r2, sp, #4
    78ec:	f000 fb98 	bl	8020 <_fstat_r>
    78f0:	2800      	cmp	r0, #0
    78f2:	dbf2      	blt.n	78da <__swhatbuf_r+0x12>
    78f4:	22f0      	movs	r2, #240	; 0xf0
    78f6:	9b02      	ldr	r3, [sp, #8]
    78f8:	0212      	lsls	r2, r2, #8
    78fa:	4013      	ands	r3, r2
    78fc:	4a05      	ldr	r2, [pc, #20]	; (7914 <__swhatbuf_r+0x4c>)
    78fe:	189b      	adds	r3, r3, r2
    7900:	425a      	negs	r2, r3
    7902:	4153      	adcs	r3, r2
    7904:	602b      	str	r3, [r5, #0]
    7906:	e7ed      	b.n	78e4 <__swhatbuf_r+0x1c>
    7908:	2340      	movs	r3, #64	; 0x40
    790a:	2000      	movs	r0, #0
    790c:	6023      	str	r3, [r4, #0]
    790e:	b010      	add	sp, #64	; 0x40
    7910:	bd70      	pop	{r4, r5, r6, pc}
    7912:	46c0      	nop			; (mov r8, r8)
    7914:	ffffe000 	.word	0xffffe000

00007918 <__smakebuf_r>:
    7918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    791a:	2602      	movs	r6, #2
    791c:	898b      	ldrh	r3, [r1, #12]
    791e:	0005      	movs	r5, r0
    7920:	000c      	movs	r4, r1
    7922:	4233      	tst	r3, r6
    7924:	d006      	beq.n	7934 <__smakebuf_r+0x1c>
    7926:	0023      	movs	r3, r4
    7928:	3347      	adds	r3, #71	; 0x47
    792a:	6023      	str	r3, [r4, #0]
    792c:	6123      	str	r3, [r4, #16]
    792e:	2301      	movs	r3, #1
    7930:	6163      	str	r3, [r4, #20]
    7932:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7934:	ab01      	add	r3, sp, #4
    7936:	466a      	mov	r2, sp
    7938:	f7ff ffc6 	bl	78c8 <__swhatbuf_r>
    793c:	9900      	ldr	r1, [sp, #0]
    793e:	0007      	movs	r7, r0
    7940:	0028      	movs	r0, r5
    7942:	f7ff fb81 	bl	7048 <_malloc_r>
    7946:	2800      	cmp	r0, #0
    7948:	d108      	bne.n	795c <__smakebuf_r+0x44>
    794a:	220c      	movs	r2, #12
    794c:	5ea3      	ldrsh	r3, [r4, r2]
    794e:	059a      	lsls	r2, r3, #22
    7950:	d4ef      	bmi.n	7932 <__smakebuf_r+0x1a>
    7952:	2203      	movs	r2, #3
    7954:	4393      	bics	r3, r2
    7956:	431e      	orrs	r6, r3
    7958:	81a6      	strh	r6, [r4, #12]
    795a:	e7e4      	b.n	7926 <__smakebuf_r+0xe>
    795c:	4b0f      	ldr	r3, [pc, #60]	; (799c <__smakebuf_r+0x84>)
    795e:	62ab      	str	r3, [r5, #40]	; 0x28
    7960:	2380      	movs	r3, #128	; 0x80
    7962:	89a2      	ldrh	r2, [r4, #12]
    7964:	6020      	str	r0, [r4, #0]
    7966:	4313      	orrs	r3, r2
    7968:	81a3      	strh	r3, [r4, #12]
    796a:	9b00      	ldr	r3, [sp, #0]
    796c:	6120      	str	r0, [r4, #16]
    796e:	6163      	str	r3, [r4, #20]
    7970:	9b01      	ldr	r3, [sp, #4]
    7972:	2b00      	cmp	r3, #0
    7974:	d00d      	beq.n	7992 <__smakebuf_r+0x7a>
    7976:	230e      	movs	r3, #14
    7978:	5ee1      	ldrsh	r1, [r4, r3]
    797a:	0028      	movs	r0, r5
    797c:	f000 fb62 	bl	8044 <_isatty_r>
    7980:	2800      	cmp	r0, #0
    7982:	d006      	beq.n	7992 <__smakebuf_r+0x7a>
    7984:	2203      	movs	r2, #3
    7986:	89a3      	ldrh	r3, [r4, #12]
    7988:	4393      	bics	r3, r2
    798a:	001a      	movs	r2, r3
    798c:	2301      	movs	r3, #1
    798e:	4313      	orrs	r3, r2
    7990:	81a3      	strh	r3, [r4, #12]
    7992:	89a0      	ldrh	r0, [r4, #12]
    7994:	4338      	orrs	r0, r7
    7996:	81a0      	strh	r0, [r4, #12]
    7998:	e7cb      	b.n	7932 <__smakebuf_r+0x1a>
    799a:	46c0      	nop			; (mov r8, r8)
    799c:	00007719 	.word	0x00007719

000079a0 <__malloc_lock>:
    79a0:	4770      	bx	lr

000079a2 <__malloc_unlock>:
    79a2:	4770      	bx	lr

000079a4 <__sfputc_r>:
    79a4:	6893      	ldr	r3, [r2, #8]
    79a6:	b510      	push	{r4, lr}
    79a8:	3b01      	subs	r3, #1
    79aa:	6093      	str	r3, [r2, #8]
    79ac:	2b00      	cmp	r3, #0
    79ae:	da05      	bge.n	79bc <__sfputc_r+0x18>
    79b0:	6994      	ldr	r4, [r2, #24]
    79b2:	42a3      	cmp	r3, r4
    79b4:	db08      	blt.n	79c8 <__sfputc_r+0x24>
    79b6:	b2cb      	uxtb	r3, r1
    79b8:	2b0a      	cmp	r3, #10
    79ba:	d005      	beq.n	79c8 <__sfputc_r+0x24>
    79bc:	6813      	ldr	r3, [r2, #0]
    79be:	1c58      	adds	r0, r3, #1
    79c0:	6010      	str	r0, [r2, #0]
    79c2:	7019      	strb	r1, [r3, #0]
    79c4:	b2c8      	uxtb	r0, r1
    79c6:	bd10      	pop	{r4, pc}
    79c8:	f7ff fd24 	bl	7414 <__swbuf_r>
    79cc:	e7fb      	b.n	79c6 <__sfputc_r+0x22>

000079ce <__sfputs_r>:
    79ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79d0:	0006      	movs	r6, r0
    79d2:	000f      	movs	r7, r1
    79d4:	0014      	movs	r4, r2
    79d6:	18d5      	adds	r5, r2, r3
    79d8:	42ac      	cmp	r4, r5
    79da:	d101      	bne.n	79e0 <__sfputs_r+0x12>
    79dc:	2000      	movs	r0, #0
    79de:	e007      	b.n	79f0 <__sfputs_r+0x22>
    79e0:	7821      	ldrb	r1, [r4, #0]
    79e2:	003a      	movs	r2, r7
    79e4:	0030      	movs	r0, r6
    79e6:	f7ff ffdd 	bl	79a4 <__sfputc_r>
    79ea:	3401      	adds	r4, #1
    79ec:	1c43      	adds	r3, r0, #1
    79ee:	d1f3      	bne.n	79d8 <__sfputs_r+0xa>
    79f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000079f4 <_vfiprintf_r>:
    79f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    79f6:	b09f      	sub	sp, #124	; 0x7c
    79f8:	0006      	movs	r6, r0
    79fa:	000f      	movs	r7, r1
    79fc:	0014      	movs	r4, r2
    79fe:	9305      	str	r3, [sp, #20]
    7a00:	2800      	cmp	r0, #0
    7a02:	d004      	beq.n	7a0e <_vfiprintf_r+0x1a>
    7a04:	6983      	ldr	r3, [r0, #24]
    7a06:	2b00      	cmp	r3, #0
    7a08:	d101      	bne.n	7a0e <_vfiprintf_r+0x1a>
    7a0a:	f7ff fec7 	bl	779c <__sinit>
    7a0e:	4b7f      	ldr	r3, [pc, #508]	; (7c0c <_vfiprintf_r+0x218>)
    7a10:	429f      	cmp	r7, r3
    7a12:	d15c      	bne.n	7ace <_vfiprintf_r+0xda>
    7a14:	6877      	ldr	r7, [r6, #4]
    7a16:	89bb      	ldrh	r3, [r7, #12]
    7a18:	071b      	lsls	r3, r3, #28
    7a1a:	d562      	bpl.n	7ae2 <_vfiprintf_r+0xee>
    7a1c:	693b      	ldr	r3, [r7, #16]
    7a1e:	2b00      	cmp	r3, #0
    7a20:	d05f      	beq.n	7ae2 <_vfiprintf_r+0xee>
    7a22:	2300      	movs	r3, #0
    7a24:	ad06      	add	r5, sp, #24
    7a26:	616b      	str	r3, [r5, #20]
    7a28:	3320      	adds	r3, #32
    7a2a:	766b      	strb	r3, [r5, #25]
    7a2c:	3310      	adds	r3, #16
    7a2e:	76ab      	strb	r3, [r5, #26]
    7a30:	9402      	str	r4, [sp, #8]
    7a32:	9c02      	ldr	r4, [sp, #8]
    7a34:	7823      	ldrb	r3, [r4, #0]
    7a36:	2b00      	cmp	r3, #0
    7a38:	d15d      	bne.n	7af6 <_vfiprintf_r+0x102>
    7a3a:	9b02      	ldr	r3, [sp, #8]
    7a3c:	1ae3      	subs	r3, r4, r3
    7a3e:	9304      	str	r3, [sp, #16]
    7a40:	d00d      	beq.n	7a5e <_vfiprintf_r+0x6a>
    7a42:	9b04      	ldr	r3, [sp, #16]
    7a44:	9a02      	ldr	r2, [sp, #8]
    7a46:	0039      	movs	r1, r7
    7a48:	0030      	movs	r0, r6
    7a4a:	f7ff ffc0 	bl	79ce <__sfputs_r>
    7a4e:	1c43      	adds	r3, r0, #1
    7a50:	d100      	bne.n	7a54 <_vfiprintf_r+0x60>
    7a52:	e0cc      	b.n	7bee <_vfiprintf_r+0x1fa>
    7a54:	696a      	ldr	r2, [r5, #20]
    7a56:	9b04      	ldr	r3, [sp, #16]
    7a58:	4694      	mov	ip, r2
    7a5a:	4463      	add	r3, ip
    7a5c:	616b      	str	r3, [r5, #20]
    7a5e:	7823      	ldrb	r3, [r4, #0]
    7a60:	2b00      	cmp	r3, #0
    7a62:	d100      	bne.n	7a66 <_vfiprintf_r+0x72>
    7a64:	e0c3      	b.n	7bee <_vfiprintf_r+0x1fa>
    7a66:	2201      	movs	r2, #1
    7a68:	2300      	movs	r3, #0
    7a6a:	4252      	negs	r2, r2
    7a6c:	606a      	str	r2, [r5, #4]
    7a6e:	a902      	add	r1, sp, #8
    7a70:	3254      	adds	r2, #84	; 0x54
    7a72:	1852      	adds	r2, r2, r1
    7a74:	3401      	adds	r4, #1
    7a76:	602b      	str	r3, [r5, #0]
    7a78:	60eb      	str	r3, [r5, #12]
    7a7a:	60ab      	str	r3, [r5, #8]
    7a7c:	7013      	strb	r3, [r2, #0]
    7a7e:	65ab      	str	r3, [r5, #88]	; 0x58
    7a80:	7821      	ldrb	r1, [r4, #0]
    7a82:	2205      	movs	r2, #5
    7a84:	4862      	ldr	r0, [pc, #392]	; (7c10 <_vfiprintf_r+0x21c>)
    7a86:	f000 fb03 	bl	8090 <memchr>
    7a8a:	1c63      	adds	r3, r4, #1
    7a8c:	469c      	mov	ip, r3
    7a8e:	2800      	cmp	r0, #0
    7a90:	d135      	bne.n	7afe <_vfiprintf_r+0x10a>
    7a92:	6829      	ldr	r1, [r5, #0]
    7a94:	06cb      	lsls	r3, r1, #27
    7a96:	d504      	bpl.n	7aa2 <_vfiprintf_r+0xae>
    7a98:	2353      	movs	r3, #83	; 0x53
    7a9a:	aa02      	add	r2, sp, #8
    7a9c:	3020      	adds	r0, #32
    7a9e:	189b      	adds	r3, r3, r2
    7aa0:	7018      	strb	r0, [r3, #0]
    7aa2:	070b      	lsls	r3, r1, #28
    7aa4:	d504      	bpl.n	7ab0 <_vfiprintf_r+0xbc>
    7aa6:	2353      	movs	r3, #83	; 0x53
    7aa8:	202b      	movs	r0, #43	; 0x2b
    7aaa:	aa02      	add	r2, sp, #8
    7aac:	189b      	adds	r3, r3, r2
    7aae:	7018      	strb	r0, [r3, #0]
    7ab0:	7823      	ldrb	r3, [r4, #0]
    7ab2:	2b2a      	cmp	r3, #42	; 0x2a
    7ab4:	d02c      	beq.n	7b10 <_vfiprintf_r+0x11c>
    7ab6:	2000      	movs	r0, #0
    7ab8:	210a      	movs	r1, #10
    7aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7abc:	7822      	ldrb	r2, [r4, #0]
    7abe:	3a30      	subs	r2, #48	; 0x30
    7ac0:	2a09      	cmp	r2, #9
    7ac2:	d800      	bhi.n	7ac6 <_vfiprintf_r+0xd2>
    7ac4:	e06b      	b.n	7b9e <_vfiprintf_r+0x1aa>
    7ac6:	2800      	cmp	r0, #0
    7ac8:	d02a      	beq.n	7b20 <_vfiprintf_r+0x12c>
    7aca:	9309      	str	r3, [sp, #36]	; 0x24
    7acc:	e028      	b.n	7b20 <_vfiprintf_r+0x12c>
    7ace:	4b51      	ldr	r3, [pc, #324]	; (7c14 <_vfiprintf_r+0x220>)
    7ad0:	429f      	cmp	r7, r3
    7ad2:	d101      	bne.n	7ad8 <_vfiprintf_r+0xe4>
    7ad4:	68b7      	ldr	r7, [r6, #8]
    7ad6:	e79e      	b.n	7a16 <_vfiprintf_r+0x22>
    7ad8:	4b4f      	ldr	r3, [pc, #316]	; (7c18 <_vfiprintf_r+0x224>)
    7ada:	429f      	cmp	r7, r3
    7adc:	d19b      	bne.n	7a16 <_vfiprintf_r+0x22>
    7ade:	68f7      	ldr	r7, [r6, #12]
    7ae0:	e799      	b.n	7a16 <_vfiprintf_r+0x22>
    7ae2:	0039      	movs	r1, r7
    7ae4:	0030      	movs	r0, r6
    7ae6:	f7ff fceb 	bl	74c0 <__swsetup_r>
    7aea:	2800      	cmp	r0, #0
    7aec:	d099      	beq.n	7a22 <_vfiprintf_r+0x2e>
    7aee:	2001      	movs	r0, #1
    7af0:	4240      	negs	r0, r0
    7af2:	b01f      	add	sp, #124	; 0x7c
    7af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7af6:	2b25      	cmp	r3, #37	; 0x25
    7af8:	d09f      	beq.n	7a3a <_vfiprintf_r+0x46>
    7afa:	3401      	adds	r4, #1
    7afc:	e79a      	b.n	7a34 <_vfiprintf_r+0x40>
    7afe:	4b44      	ldr	r3, [pc, #272]	; (7c10 <_vfiprintf_r+0x21c>)
    7b00:	6829      	ldr	r1, [r5, #0]
    7b02:	1ac0      	subs	r0, r0, r3
    7b04:	2301      	movs	r3, #1
    7b06:	4083      	lsls	r3, r0
    7b08:	430b      	orrs	r3, r1
    7b0a:	602b      	str	r3, [r5, #0]
    7b0c:	4664      	mov	r4, ip
    7b0e:	e7b7      	b.n	7a80 <_vfiprintf_r+0x8c>
    7b10:	9b05      	ldr	r3, [sp, #20]
    7b12:	1d18      	adds	r0, r3, #4
    7b14:	681b      	ldr	r3, [r3, #0]
    7b16:	9005      	str	r0, [sp, #20]
    7b18:	2b00      	cmp	r3, #0
    7b1a:	db3a      	blt.n	7b92 <_vfiprintf_r+0x19e>
    7b1c:	9309      	str	r3, [sp, #36]	; 0x24
    7b1e:	4664      	mov	r4, ip
    7b20:	7823      	ldrb	r3, [r4, #0]
    7b22:	2b2e      	cmp	r3, #46	; 0x2e
    7b24:	d10b      	bne.n	7b3e <_vfiprintf_r+0x14a>
    7b26:	7863      	ldrb	r3, [r4, #1]
    7b28:	1c62      	adds	r2, r4, #1
    7b2a:	2b2a      	cmp	r3, #42	; 0x2a
    7b2c:	d13f      	bne.n	7bae <_vfiprintf_r+0x1ba>
    7b2e:	9b05      	ldr	r3, [sp, #20]
    7b30:	3402      	adds	r4, #2
    7b32:	1d1a      	adds	r2, r3, #4
    7b34:	681b      	ldr	r3, [r3, #0]
    7b36:	9205      	str	r2, [sp, #20]
    7b38:	2b00      	cmp	r3, #0
    7b3a:	db35      	blt.n	7ba8 <_vfiprintf_r+0x1b4>
    7b3c:	9307      	str	r3, [sp, #28]
    7b3e:	7821      	ldrb	r1, [r4, #0]
    7b40:	2203      	movs	r2, #3
    7b42:	4836      	ldr	r0, [pc, #216]	; (7c1c <_vfiprintf_r+0x228>)
    7b44:	f000 faa4 	bl	8090 <memchr>
    7b48:	2800      	cmp	r0, #0
    7b4a:	d007      	beq.n	7b5c <_vfiprintf_r+0x168>
    7b4c:	4b33      	ldr	r3, [pc, #204]	; (7c1c <_vfiprintf_r+0x228>)
    7b4e:	682a      	ldr	r2, [r5, #0]
    7b50:	1ac0      	subs	r0, r0, r3
    7b52:	2340      	movs	r3, #64	; 0x40
    7b54:	4083      	lsls	r3, r0
    7b56:	4313      	orrs	r3, r2
    7b58:	602b      	str	r3, [r5, #0]
    7b5a:	3401      	adds	r4, #1
    7b5c:	7821      	ldrb	r1, [r4, #0]
    7b5e:	1c63      	adds	r3, r4, #1
    7b60:	2206      	movs	r2, #6
    7b62:	482f      	ldr	r0, [pc, #188]	; (7c20 <_vfiprintf_r+0x22c>)
    7b64:	9302      	str	r3, [sp, #8]
    7b66:	7629      	strb	r1, [r5, #24]
    7b68:	f000 fa92 	bl	8090 <memchr>
    7b6c:	2800      	cmp	r0, #0
    7b6e:	d044      	beq.n	7bfa <_vfiprintf_r+0x206>
    7b70:	4b2c      	ldr	r3, [pc, #176]	; (7c24 <_vfiprintf_r+0x230>)
    7b72:	2b00      	cmp	r3, #0
    7b74:	d12f      	bne.n	7bd6 <_vfiprintf_r+0x1e2>
    7b76:	6829      	ldr	r1, [r5, #0]
    7b78:	9b05      	ldr	r3, [sp, #20]
    7b7a:	2207      	movs	r2, #7
    7b7c:	05c9      	lsls	r1, r1, #23
    7b7e:	d528      	bpl.n	7bd2 <_vfiprintf_r+0x1de>
    7b80:	189b      	adds	r3, r3, r2
    7b82:	4393      	bics	r3, r2
    7b84:	3308      	adds	r3, #8
    7b86:	9305      	str	r3, [sp, #20]
    7b88:	696b      	ldr	r3, [r5, #20]
    7b8a:	9a03      	ldr	r2, [sp, #12]
    7b8c:	189b      	adds	r3, r3, r2
    7b8e:	616b      	str	r3, [r5, #20]
    7b90:	e74f      	b.n	7a32 <_vfiprintf_r+0x3e>
    7b92:	425b      	negs	r3, r3
    7b94:	60eb      	str	r3, [r5, #12]
    7b96:	2302      	movs	r3, #2
    7b98:	430b      	orrs	r3, r1
    7b9a:	602b      	str	r3, [r5, #0]
    7b9c:	e7bf      	b.n	7b1e <_vfiprintf_r+0x12a>
    7b9e:	434b      	muls	r3, r1
    7ba0:	3401      	adds	r4, #1
    7ba2:	189b      	adds	r3, r3, r2
    7ba4:	2001      	movs	r0, #1
    7ba6:	e789      	b.n	7abc <_vfiprintf_r+0xc8>
    7ba8:	2301      	movs	r3, #1
    7baa:	425b      	negs	r3, r3
    7bac:	e7c6      	b.n	7b3c <_vfiprintf_r+0x148>
    7bae:	2300      	movs	r3, #0
    7bb0:	0014      	movs	r4, r2
    7bb2:	200a      	movs	r0, #10
    7bb4:	001a      	movs	r2, r3
    7bb6:	606b      	str	r3, [r5, #4]
    7bb8:	7821      	ldrb	r1, [r4, #0]
    7bba:	3930      	subs	r1, #48	; 0x30
    7bbc:	2909      	cmp	r1, #9
    7bbe:	d903      	bls.n	7bc8 <_vfiprintf_r+0x1d4>
    7bc0:	2b00      	cmp	r3, #0
    7bc2:	d0bc      	beq.n	7b3e <_vfiprintf_r+0x14a>
    7bc4:	9207      	str	r2, [sp, #28]
    7bc6:	e7ba      	b.n	7b3e <_vfiprintf_r+0x14a>
    7bc8:	4342      	muls	r2, r0
    7bca:	3401      	adds	r4, #1
    7bcc:	1852      	adds	r2, r2, r1
    7bce:	2301      	movs	r3, #1
    7bd0:	e7f2      	b.n	7bb8 <_vfiprintf_r+0x1c4>
    7bd2:	3307      	adds	r3, #7
    7bd4:	e7d5      	b.n	7b82 <_vfiprintf_r+0x18e>
    7bd6:	ab05      	add	r3, sp, #20
    7bd8:	9300      	str	r3, [sp, #0]
    7bda:	003a      	movs	r2, r7
    7bdc:	4b12      	ldr	r3, [pc, #72]	; (7c28 <_vfiprintf_r+0x234>)
    7bde:	0029      	movs	r1, r5
    7be0:	0030      	movs	r0, r6
    7be2:	e000      	b.n	7be6 <_vfiprintf_r+0x1f2>
    7be4:	bf00      	nop
    7be6:	9003      	str	r0, [sp, #12]
    7be8:	9b03      	ldr	r3, [sp, #12]
    7bea:	3301      	adds	r3, #1
    7bec:	d1cc      	bne.n	7b88 <_vfiprintf_r+0x194>
    7bee:	89bb      	ldrh	r3, [r7, #12]
    7bf0:	065b      	lsls	r3, r3, #25
    7bf2:	d500      	bpl.n	7bf6 <_vfiprintf_r+0x202>
    7bf4:	e77b      	b.n	7aee <_vfiprintf_r+0xfa>
    7bf6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7bf8:	e77b      	b.n	7af2 <_vfiprintf_r+0xfe>
    7bfa:	ab05      	add	r3, sp, #20
    7bfc:	9300      	str	r3, [sp, #0]
    7bfe:	003a      	movs	r2, r7
    7c00:	4b09      	ldr	r3, [pc, #36]	; (7c28 <_vfiprintf_r+0x234>)
    7c02:	0029      	movs	r1, r5
    7c04:	0030      	movs	r0, r6
    7c06:	f000 f87f 	bl	7d08 <_printf_i>
    7c0a:	e7ec      	b.n	7be6 <_vfiprintf_r+0x1f2>
    7c0c:	0000ae28 	.word	0x0000ae28
    7c10:	0000ae68 	.word	0x0000ae68
    7c14:	0000ae48 	.word	0x0000ae48
    7c18:	0000ae08 	.word	0x0000ae08
    7c1c:	0000ae6e 	.word	0x0000ae6e
    7c20:	0000ae72 	.word	0x0000ae72
    7c24:	00000000 	.word	0x00000000
    7c28:	000079cf 	.word	0x000079cf

00007c2c <_printf_common>:
    7c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7c2e:	0015      	movs	r5, r2
    7c30:	9301      	str	r3, [sp, #4]
    7c32:	688a      	ldr	r2, [r1, #8]
    7c34:	690b      	ldr	r3, [r1, #16]
    7c36:	9000      	str	r0, [sp, #0]
    7c38:	000c      	movs	r4, r1
    7c3a:	4293      	cmp	r3, r2
    7c3c:	da00      	bge.n	7c40 <_printf_common+0x14>
    7c3e:	0013      	movs	r3, r2
    7c40:	0022      	movs	r2, r4
    7c42:	602b      	str	r3, [r5, #0]
    7c44:	3243      	adds	r2, #67	; 0x43
    7c46:	7812      	ldrb	r2, [r2, #0]
    7c48:	2a00      	cmp	r2, #0
    7c4a:	d001      	beq.n	7c50 <_printf_common+0x24>
    7c4c:	3301      	adds	r3, #1
    7c4e:	602b      	str	r3, [r5, #0]
    7c50:	6823      	ldr	r3, [r4, #0]
    7c52:	069b      	lsls	r3, r3, #26
    7c54:	d502      	bpl.n	7c5c <_printf_common+0x30>
    7c56:	682b      	ldr	r3, [r5, #0]
    7c58:	3302      	adds	r3, #2
    7c5a:	602b      	str	r3, [r5, #0]
    7c5c:	2706      	movs	r7, #6
    7c5e:	6823      	ldr	r3, [r4, #0]
    7c60:	401f      	ands	r7, r3
    7c62:	d027      	beq.n	7cb4 <_printf_common+0x88>
    7c64:	0023      	movs	r3, r4
    7c66:	3343      	adds	r3, #67	; 0x43
    7c68:	781b      	ldrb	r3, [r3, #0]
    7c6a:	1e5a      	subs	r2, r3, #1
    7c6c:	4193      	sbcs	r3, r2
    7c6e:	6822      	ldr	r2, [r4, #0]
    7c70:	0692      	lsls	r2, r2, #26
    7c72:	d430      	bmi.n	7cd6 <_printf_common+0xaa>
    7c74:	0022      	movs	r2, r4
    7c76:	9901      	ldr	r1, [sp, #4]
    7c78:	3243      	adds	r2, #67	; 0x43
    7c7a:	9800      	ldr	r0, [sp, #0]
    7c7c:	9e08      	ldr	r6, [sp, #32]
    7c7e:	47b0      	blx	r6
    7c80:	1c43      	adds	r3, r0, #1
    7c82:	d025      	beq.n	7cd0 <_printf_common+0xa4>
    7c84:	2306      	movs	r3, #6
    7c86:	6820      	ldr	r0, [r4, #0]
    7c88:	682a      	ldr	r2, [r5, #0]
    7c8a:	68e1      	ldr	r1, [r4, #12]
    7c8c:	4003      	ands	r3, r0
    7c8e:	2500      	movs	r5, #0
    7c90:	2b04      	cmp	r3, #4
    7c92:	d103      	bne.n	7c9c <_printf_common+0x70>
    7c94:	1a8d      	subs	r5, r1, r2
    7c96:	43eb      	mvns	r3, r5
    7c98:	17db      	asrs	r3, r3, #31
    7c9a:	401d      	ands	r5, r3
    7c9c:	68a3      	ldr	r3, [r4, #8]
    7c9e:	6922      	ldr	r2, [r4, #16]
    7ca0:	4293      	cmp	r3, r2
    7ca2:	dd01      	ble.n	7ca8 <_printf_common+0x7c>
    7ca4:	1a9b      	subs	r3, r3, r2
    7ca6:	18ed      	adds	r5, r5, r3
    7ca8:	2700      	movs	r7, #0
    7caa:	42bd      	cmp	r5, r7
    7cac:	d120      	bne.n	7cf0 <_printf_common+0xc4>
    7cae:	2000      	movs	r0, #0
    7cb0:	e010      	b.n	7cd4 <_printf_common+0xa8>
    7cb2:	3701      	adds	r7, #1
    7cb4:	68e3      	ldr	r3, [r4, #12]
    7cb6:	682a      	ldr	r2, [r5, #0]
    7cb8:	1a9b      	subs	r3, r3, r2
    7cba:	429f      	cmp	r7, r3
    7cbc:	dad2      	bge.n	7c64 <_printf_common+0x38>
    7cbe:	0022      	movs	r2, r4
    7cc0:	2301      	movs	r3, #1
    7cc2:	3219      	adds	r2, #25
    7cc4:	9901      	ldr	r1, [sp, #4]
    7cc6:	9800      	ldr	r0, [sp, #0]
    7cc8:	9e08      	ldr	r6, [sp, #32]
    7cca:	47b0      	blx	r6
    7ccc:	1c43      	adds	r3, r0, #1
    7cce:	d1f0      	bne.n	7cb2 <_printf_common+0x86>
    7cd0:	2001      	movs	r0, #1
    7cd2:	4240      	negs	r0, r0
    7cd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7cd6:	2030      	movs	r0, #48	; 0x30
    7cd8:	18e1      	adds	r1, r4, r3
    7cda:	3143      	adds	r1, #67	; 0x43
    7cdc:	7008      	strb	r0, [r1, #0]
    7cde:	0021      	movs	r1, r4
    7ce0:	1c5a      	adds	r2, r3, #1
    7ce2:	3145      	adds	r1, #69	; 0x45
    7ce4:	7809      	ldrb	r1, [r1, #0]
    7ce6:	18a2      	adds	r2, r4, r2
    7ce8:	3243      	adds	r2, #67	; 0x43
    7cea:	3302      	adds	r3, #2
    7cec:	7011      	strb	r1, [r2, #0]
    7cee:	e7c1      	b.n	7c74 <_printf_common+0x48>
    7cf0:	0022      	movs	r2, r4
    7cf2:	2301      	movs	r3, #1
    7cf4:	321a      	adds	r2, #26
    7cf6:	9901      	ldr	r1, [sp, #4]
    7cf8:	9800      	ldr	r0, [sp, #0]
    7cfa:	9e08      	ldr	r6, [sp, #32]
    7cfc:	47b0      	blx	r6
    7cfe:	1c43      	adds	r3, r0, #1
    7d00:	d0e6      	beq.n	7cd0 <_printf_common+0xa4>
    7d02:	3701      	adds	r7, #1
    7d04:	e7d1      	b.n	7caa <_printf_common+0x7e>
	...

00007d08 <_printf_i>:
    7d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d0a:	b08b      	sub	sp, #44	; 0x2c
    7d0c:	9206      	str	r2, [sp, #24]
    7d0e:	000a      	movs	r2, r1
    7d10:	3243      	adds	r2, #67	; 0x43
    7d12:	9307      	str	r3, [sp, #28]
    7d14:	9005      	str	r0, [sp, #20]
    7d16:	9204      	str	r2, [sp, #16]
    7d18:	7e0a      	ldrb	r2, [r1, #24]
    7d1a:	000c      	movs	r4, r1
    7d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7d1e:	2a6e      	cmp	r2, #110	; 0x6e
    7d20:	d100      	bne.n	7d24 <_printf_i+0x1c>
    7d22:	e08f      	b.n	7e44 <_printf_i+0x13c>
    7d24:	d817      	bhi.n	7d56 <_printf_i+0x4e>
    7d26:	2a63      	cmp	r2, #99	; 0x63
    7d28:	d02c      	beq.n	7d84 <_printf_i+0x7c>
    7d2a:	d808      	bhi.n	7d3e <_printf_i+0x36>
    7d2c:	2a00      	cmp	r2, #0
    7d2e:	d100      	bne.n	7d32 <_printf_i+0x2a>
    7d30:	e099      	b.n	7e66 <_printf_i+0x15e>
    7d32:	2a58      	cmp	r2, #88	; 0x58
    7d34:	d054      	beq.n	7de0 <_printf_i+0xd8>
    7d36:	0026      	movs	r6, r4
    7d38:	3642      	adds	r6, #66	; 0x42
    7d3a:	7032      	strb	r2, [r6, #0]
    7d3c:	e029      	b.n	7d92 <_printf_i+0x8a>
    7d3e:	2a64      	cmp	r2, #100	; 0x64
    7d40:	d001      	beq.n	7d46 <_printf_i+0x3e>
    7d42:	2a69      	cmp	r2, #105	; 0x69
    7d44:	d1f7      	bne.n	7d36 <_printf_i+0x2e>
    7d46:	6821      	ldr	r1, [r4, #0]
    7d48:	681a      	ldr	r2, [r3, #0]
    7d4a:	0608      	lsls	r0, r1, #24
    7d4c:	d523      	bpl.n	7d96 <_printf_i+0x8e>
    7d4e:	1d11      	adds	r1, r2, #4
    7d50:	6019      	str	r1, [r3, #0]
    7d52:	6815      	ldr	r5, [r2, #0]
    7d54:	e025      	b.n	7da2 <_printf_i+0x9a>
    7d56:	2a73      	cmp	r2, #115	; 0x73
    7d58:	d100      	bne.n	7d5c <_printf_i+0x54>
    7d5a:	e088      	b.n	7e6e <_printf_i+0x166>
    7d5c:	d808      	bhi.n	7d70 <_printf_i+0x68>
    7d5e:	2a6f      	cmp	r2, #111	; 0x6f
    7d60:	d029      	beq.n	7db6 <_printf_i+0xae>
    7d62:	2a70      	cmp	r2, #112	; 0x70
    7d64:	d1e7      	bne.n	7d36 <_printf_i+0x2e>
    7d66:	2220      	movs	r2, #32
    7d68:	6809      	ldr	r1, [r1, #0]
    7d6a:	430a      	orrs	r2, r1
    7d6c:	6022      	str	r2, [r4, #0]
    7d6e:	e003      	b.n	7d78 <_printf_i+0x70>
    7d70:	2a75      	cmp	r2, #117	; 0x75
    7d72:	d020      	beq.n	7db6 <_printf_i+0xae>
    7d74:	2a78      	cmp	r2, #120	; 0x78
    7d76:	d1de      	bne.n	7d36 <_printf_i+0x2e>
    7d78:	0022      	movs	r2, r4
    7d7a:	2178      	movs	r1, #120	; 0x78
    7d7c:	3245      	adds	r2, #69	; 0x45
    7d7e:	7011      	strb	r1, [r2, #0]
    7d80:	4a6c      	ldr	r2, [pc, #432]	; (7f34 <_printf_i+0x22c>)
    7d82:	e030      	b.n	7de6 <_printf_i+0xde>
    7d84:	000e      	movs	r6, r1
    7d86:	681a      	ldr	r2, [r3, #0]
    7d88:	3642      	adds	r6, #66	; 0x42
    7d8a:	1d11      	adds	r1, r2, #4
    7d8c:	6019      	str	r1, [r3, #0]
    7d8e:	6813      	ldr	r3, [r2, #0]
    7d90:	7033      	strb	r3, [r6, #0]
    7d92:	2301      	movs	r3, #1
    7d94:	e079      	b.n	7e8a <_printf_i+0x182>
    7d96:	0649      	lsls	r1, r1, #25
    7d98:	d5d9      	bpl.n	7d4e <_printf_i+0x46>
    7d9a:	1d11      	adds	r1, r2, #4
    7d9c:	6019      	str	r1, [r3, #0]
    7d9e:	2300      	movs	r3, #0
    7da0:	5ed5      	ldrsh	r5, [r2, r3]
    7da2:	2d00      	cmp	r5, #0
    7da4:	da03      	bge.n	7dae <_printf_i+0xa6>
    7da6:	232d      	movs	r3, #45	; 0x2d
    7da8:	9a04      	ldr	r2, [sp, #16]
    7daa:	426d      	negs	r5, r5
    7dac:	7013      	strb	r3, [r2, #0]
    7dae:	4b62      	ldr	r3, [pc, #392]	; (7f38 <_printf_i+0x230>)
    7db0:	270a      	movs	r7, #10
    7db2:	9303      	str	r3, [sp, #12]
    7db4:	e02f      	b.n	7e16 <_printf_i+0x10e>
    7db6:	6820      	ldr	r0, [r4, #0]
    7db8:	6819      	ldr	r1, [r3, #0]
    7dba:	0605      	lsls	r5, r0, #24
    7dbc:	d503      	bpl.n	7dc6 <_printf_i+0xbe>
    7dbe:	1d08      	adds	r0, r1, #4
    7dc0:	6018      	str	r0, [r3, #0]
    7dc2:	680d      	ldr	r5, [r1, #0]
    7dc4:	e005      	b.n	7dd2 <_printf_i+0xca>
    7dc6:	0640      	lsls	r0, r0, #25
    7dc8:	d5f9      	bpl.n	7dbe <_printf_i+0xb6>
    7dca:	680d      	ldr	r5, [r1, #0]
    7dcc:	1d08      	adds	r0, r1, #4
    7dce:	6018      	str	r0, [r3, #0]
    7dd0:	b2ad      	uxth	r5, r5
    7dd2:	4b59      	ldr	r3, [pc, #356]	; (7f38 <_printf_i+0x230>)
    7dd4:	2708      	movs	r7, #8
    7dd6:	9303      	str	r3, [sp, #12]
    7dd8:	2a6f      	cmp	r2, #111	; 0x6f
    7dda:	d018      	beq.n	7e0e <_printf_i+0x106>
    7ddc:	270a      	movs	r7, #10
    7dde:	e016      	b.n	7e0e <_printf_i+0x106>
    7de0:	3145      	adds	r1, #69	; 0x45
    7de2:	700a      	strb	r2, [r1, #0]
    7de4:	4a54      	ldr	r2, [pc, #336]	; (7f38 <_printf_i+0x230>)
    7de6:	9203      	str	r2, [sp, #12]
    7de8:	681a      	ldr	r2, [r3, #0]
    7dea:	6821      	ldr	r1, [r4, #0]
    7dec:	1d10      	adds	r0, r2, #4
    7dee:	6018      	str	r0, [r3, #0]
    7df0:	6815      	ldr	r5, [r2, #0]
    7df2:	0608      	lsls	r0, r1, #24
    7df4:	d522      	bpl.n	7e3c <_printf_i+0x134>
    7df6:	07cb      	lsls	r3, r1, #31
    7df8:	d502      	bpl.n	7e00 <_printf_i+0xf8>
    7dfa:	2320      	movs	r3, #32
    7dfc:	4319      	orrs	r1, r3
    7dfe:	6021      	str	r1, [r4, #0]
    7e00:	2710      	movs	r7, #16
    7e02:	2d00      	cmp	r5, #0
    7e04:	d103      	bne.n	7e0e <_printf_i+0x106>
    7e06:	2320      	movs	r3, #32
    7e08:	6822      	ldr	r2, [r4, #0]
    7e0a:	439a      	bics	r2, r3
    7e0c:	6022      	str	r2, [r4, #0]
    7e0e:	0023      	movs	r3, r4
    7e10:	2200      	movs	r2, #0
    7e12:	3343      	adds	r3, #67	; 0x43
    7e14:	701a      	strb	r2, [r3, #0]
    7e16:	6863      	ldr	r3, [r4, #4]
    7e18:	60a3      	str	r3, [r4, #8]
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	db5c      	blt.n	7ed8 <_printf_i+0x1d0>
    7e1e:	2204      	movs	r2, #4
    7e20:	6821      	ldr	r1, [r4, #0]
    7e22:	4391      	bics	r1, r2
    7e24:	6021      	str	r1, [r4, #0]
    7e26:	2d00      	cmp	r5, #0
    7e28:	d158      	bne.n	7edc <_printf_i+0x1d4>
    7e2a:	9e04      	ldr	r6, [sp, #16]
    7e2c:	2b00      	cmp	r3, #0
    7e2e:	d064      	beq.n	7efa <_printf_i+0x1f2>
    7e30:	0026      	movs	r6, r4
    7e32:	9b03      	ldr	r3, [sp, #12]
    7e34:	3642      	adds	r6, #66	; 0x42
    7e36:	781b      	ldrb	r3, [r3, #0]
    7e38:	7033      	strb	r3, [r6, #0]
    7e3a:	e05e      	b.n	7efa <_printf_i+0x1f2>
    7e3c:	0648      	lsls	r0, r1, #25
    7e3e:	d5da      	bpl.n	7df6 <_printf_i+0xee>
    7e40:	b2ad      	uxth	r5, r5
    7e42:	e7d8      	b.n	7df6 <_printf_i+0xee>
    7e44:	6809      	ldr	r1, [r1, #0]
    7e46:	681a      	ldr	r2, [r3, #0]
    7e48:	0608      	lsls	r0, r1, #24
    7e4a:	d505      	bpl.n	7e58 <_printf_i+0x150>
    7e4c:	1d11      	adds	r1, r2, #4
    7e4e:	6019      	str	r1, [r3, #0]
    7e50:	6813      	ldr	r3, [r2, #0]
    7e52:	6962      	ldr	r2, [r4, #20]
    7e54:	601a      	str	r2, [r3, #0]
    7e56:	e006      	b.n	7e66 <_printf_i+0x15e>
    7e58:	0649      	lsls	r1, r1, #25
    7e5a:	d5f7      	bpl.n	7e4c <_printf_i+0x144>
    7e5c:	1d11      	adds	r1, r2, #4
    7e5e:	6019      	str	r1, [r3, #0]
    7e60:	6813      	ldr	r3, [r2, #0]
    7e62:	8aa2      	ldrh	r2, [r4, #20]
    7e64:	801a      	strh	r2, [r3, #0]
    7e66:	2300      	movs	r3, #0
    7e68:	9e04      	ldr	r6, [sp, #16]
    7e6a:	6123      	str	r3, [r4, #16]
    7e6c:	e054      	b.n	7f18 <_printf_i+0x210>
    7e6e:	681a      	ldr	r2, [r3, #0]
    7e70:	1d11      	adds	r1, r2, #4
    7e72:	6019      	str	r1, [r3, #0]
    7e74:	6816      	ldr	r6, [r2, #0]
    7e76:	2100      	movs	r1, #0
    7e78:	6862      	ldr	r2, [r4, #4]
    7e7a:	0030      	movs	r0, r6
    7e7c:	f000 f908 	bl	8090 <memchr>
    7e80:	2800      	cmp	r0, #0
    7e82:	d001      	beq.n	7e88 <_printf_i+0x180>
    7e84:	1b80      	subs	r0, r0, r6
    7e86:	6060      	str	r0, [r4, #4]
    7e88:	6863      	ldr	r3, [r4, #4]
    7e8a:	6123      	str	r3, [r4, #16]
    7e8c:	2300      	movs	r3, #0
    7e8e:	9a04      	ldr	r2, [sp, #16]
    7e90:	7013      	strb	r3, [r2, #0]
    7e92:	e041      	b.n	7f18 <_printf_i+0x210>
    7e94:	6923      	ldr	r3, [r4, #16]
    7e96:	0032      	movs	r2, r6
    7e98:	9906      	ldr	r1, [sp, #24]
    7e9a:	9805      	ldr	r0, [sp, #20]
    7e9c:	9d07      	ldr	r5, [sp, #28]
    7e9e:	47a8      	blx	r5
    7ea0:	1c43      	adds	r3, r0, #1
    7ea2:	d043      	beq.n	7f2c <_printf_i+0x224>
    7ea4:	6823      	ldr	r3, [r4, #0]
    7ea6:	2500      	movs	r5, #0
    7ea8:	079b      	lsls	r3, r3, #30
    7eaa:	d40f      	bmi.n	7ecc <_printf_i+0x1c4>
    7eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7eae:	68e0      	ldr	r0, [r4, #12]
    7eb0:	4298      	cmp	r0, r3
    7eb2:	da3d      	bge.n	7f30 <_printf_i+0x228>
    7eb4:	0018      	movs	r0, r3
    7eb6:	e03b      	b.n	7f30 <_printf_i+0x228>
    7eb8:	0022      	movs	r2, r4
    7eba:	2301      	movs	r3, #1
    7ebc:	3219      	adds	r2, #25
    7ebe:	9906      	ldr	r1, [sp, #24]
    7ec0:	9805      	ldr	r0, [sp, #20]
    7ec2:	9e07      	ldr	r6, [sp, #28]
    7ec4:	47b0      	blx	r6
    7ec6:	1c43      	adds	r3, r0, #1
    7ec8:	d030      	beq.n	7f2c <_printf_i+0x224>
    7eca:	3501      	adds	r5, #1
    7ecc:	68e3      	ldr	r3, [r4, #12]
    7ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7ed0:	1a9b      	subs	r3, r3, r2
    7ed2:	429d      	cmp	r5, r3
    7ed4:	dbf0      	blt.n	7eb8 <_printf_i+0x1b0>
    7ed6:	e7e9      	b.n	7eac <_printf_i+0x1a4>
    7ed8:	2d00      	cmp	r5, #0
    7eda:	d0a9      	beq.n	7e30 <_printf_i+0x128>
    7edc:	9e04      	ldr	r6, [sp, #16]
    7ede:	0028      	movs	r0, r5
    7ee0:	0039      	movs	r1, r7
    7ee2:	f7fe fed7 	bl	6c94 <__aeabi_uidivmod>
    7ee6:	9b03      	ldr	r3, [sp, #12]
    7ee8:	3e01      	subs	r6, #1
    7eea:	5c5b      	ldrb	r3, [r3, r1]
    7eec:	0028      	movs	r0, r5
    7eee:	7033      	strb	r3, [r6, #0]
    7ef0:	0039      	movs	r1, r7
    7ef2:	f7fe fe49 	bl	6b88 <__udivsi3>
    7ef6:	1e05      	subs	r5, r0, #0
    7ef8:	d1f1      	bne.n	7ede <_printf_i+0x1d6>
    7efa:	2f08      	cmp	r7, #8
    7efc:	d109      	bne.n	7f12 <_printf_i+0x20a>
    7efe:	6823      	ldr	r3, [r4, #0]
    7f00:	07db      	lsls	r3, r3, #31
    7f02:	d506      	bpl.n	7f12 <_printf_i+0x20a>
    7f04:	6863      	ldr	r3, [r4, #4]
    7f06:	6922      	ldr	r2, [r4, #16]
    7f08:	4293      	cmp	r3, r2
    7f0a:	dc02      	bgt.n	7f12 <_printf_i+0x20a>
    7f0c:	2330      	movs	r3, #48	; 0x30
    7f0e:	3e01      	subs	r6, #1
    7f10:	7033      	strb	r3, [r6, #0]
    7f12:	9b04      	ldr	r3, [sp, #16]
    7f14:	1b9b      	subs	r3, r3, r6
    7f16:	6123      	str	r3, [r4, #16]
    7f18:	9b07      	ldr	r3, [sp, #28]
    7f1a:	aa09      	add	r2, sp, #36	; 0x24
    7f1c:	9300      	str	r3, [sp, #0]
    7f1e:	0021      	movs	r1, r4
    7f20:	9b06      	ldr	r3, [sp, #24]
    7f22:	9805      	ldr	r0, [sp, #20]
    7f24:	f7ff fe82 	bl	7c2c <_printf_common>
    7f28:	1c43      	adds	r3, r0, #1
    7f2a:	d1b3      	bne.n	7e94 <_printf_i+0x18c>
    7f2c:	2001      	movs	r0, #1
    7f2e:	4240      	negs	r0, r0
    7f30:	b00b      	add	sp, #44	; 0x2c
    7f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f34:	0000ae8a 	.word	0x0000ae8a
    7f38:	0000ae79 	.word	0x0000ae79

00007f3c <__sread>:
    7f3c:	b570      	push	{r4, r5, r6, lr}
    7f3e:	000c      	movs	r4, r1
    7f40:	250e      	movs	r5, #14
    7f42:	5f49      	ldrsh	r1, [r1, r5]
    7f44:	f000 f8b0 	bl	80a8 <_read_r>
    7f48:	2800      	cmp	r0, #0
    7f4a:	db03      	blt.n	7f54 <__sread+0x18>
    7f4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7f4e:	181b      	adds	r3, r3, r0
    7f50:	6563      	str	r3, [r4, #84]	; 0x54
    7f52:	bd70      	pop	{r4, r5, r6, pc}
    7f54:	89a3      	ldrh	r3, [r4, #12]
    7f56:	4a02      	ldr	r2, [pc, #8]	; (7f60 <__sread+0x24>)
    7f58:	4013      	ands	r3, r2
    7f5a:	81a3      	strh	r3, [r4, #12]
    7f5c:	e7f9      	b.n	7f52 <__sread+0x16>
    7f5e:	46c0      	nop			; (mov r8, r8)
    7f60:	ffffefff 	.word	0xffffefff

00007f64 <__swrite>:
    7f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f66:	001f      	movs	r7, r3
    7f68:	898b      	ldrh	r3, [r1, #12]
    7f6a:	0005      	movs	r5, r0
    7f6c:	000c      	movs	r4, r1
    7f6e:	0016      	movs	r6, r2
    7f70:	05db      	lsls	r3, r3, #23
    7f72:	d505      	bpl.n	7f80 <__swrite+0x1c>
    7f74:	230e      	movs	r3, #14
    7f76:	5ec9      	ldrsh	r1, [r1, r3]
    7f78:	2200      	movs	r2, #0
    7f7a:	2302      	movs	r3, #2
    7f7c:	f000 f874 	bl	8068 <_lseek_r>
    7f80:	89a3      	ldrh	r3, [r4, #12]
    7f82:	4a05      	ldr	r2, [pc, #20]	; (7f98 <__swrite+0x34>)
    7f84:	0028      	movs	r0, r5
    7f86:	4013      	ands	r3, r2
    7f88:	81a3      	strh	r3, [r4, #12]
    7f8a:	0032      	movs	r2, r6
    7f8c:	230e      	movs	r3, #14
    7f8e:	5ee1      	ldrsh	r1, [r4, r3]
    7f90:	003b      	movs	r3, r7
    7f92:	f000 f81f 	bl	7fd4 <_write_r>
    7f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f98:	ffffefff 	.word	0xffffefff

00007f9c <__sseek>:
    7f9c:	b570      	push	{r4, r5, r6, lr}
    7f9e:	000c      	movs	r4, r1
    7fa0:	250e      	movs	r5, #14
    7fa2:	5f49      	ldrsh	r1, [r1, r5]
    7fa4:	f000 f860 	bl	8068 <_lseek_r>
    7fa8:	89a3      	ldrh	r3, [r4, #12]
    7faa:	1c42      	adds	r2, r0, #1
    7fac:	d103      	bne.n	7fb6 <__sseek+0x1a>
    7fae:	4a05      	ldr	r2, [pc, #20]	; (7fc4 <__sseek+0x28>)
    7fb0:	4013      	ands	r3, r2
    7fb2:	81a3      	strh	r3, [r4, #12]
    7fb4:	bd70      	pop	{r4, r5, r6, pc}
    7fb6:	2280      	movs	r2, #128	; 0x80
    7fb8:	0152      	lsls	r2, r2, #5
    7fba:	4313      	orrs	r3, r2
    7fbc:	81a3      	strh	r3, [r4, #12]
    7fbe:	6560      	str	r0, [r4, #84]	; 0x54
    7fc0:	e7f8      	b.n	7fb4 <__sseek+0x18>
    7fc2:	46c0      	nop			; (mov r8, r8)
    7fc4:	ffffefff 	.word	0xffffefff

00007fc8 <__sclose>:
    7fc8:	b510      	push	{r4, lr}
    7fca:	230e      	movs	r3, #14
    7fcc:	5ec9      	ldrsh	r1, [r1, r3]
    7fce:	f000 f815 	bl	7ffc <_close_r>
    7fd2:	bd10      	pop	{r4, pc}

00007fd4 <_write_r>:
    7fd4:	b570      	push	{r4, r5, r6, lr}
    7fd6:	0005      	movs	r5, r0
    7fd8:	0008      	movs	r0, r1
    7fda:	0011      	movs	r1, r2
    7fdc:	2200      	movs	r2, #0
    7fde:	4c06      	ldr	r4, [pc, #24]	; (7ff8 <_write_r+0x24>)
    7fe0:	6022      	str	r2, [r4, #0]
    7fe2:	001a      	movs	r2, r3
    7fe4:	f7fb fdaa 	bl	3b3c <_write>
    7fe8:	1c43      	adds	r3, r0, #1
    7fea:	d103      	bne.n	7ff4 <_write_r+0x20>
    7fec:	6823      	ldr	r3, [r4, #0]
    7fee:	2b00      	cmp	r3, #0
    7ff0:	d000      	beq.n	7ff4 <_write_r+0x20>
    7ff2:	602b      	str	r3, [r5, #0]
    7ff4:	bd70      	pop	{r4, r5, r6, pc}
    7ff6:	46c0      	nop			; (mov r8, r8)
    7ff8:	20002bac 	.word	0x20002bac

00007ffc <_close_r>:
    7ffc:	2300      	movs	r3, #0
    7ffe:	b570      	push	{r4, r5, r6, lr}
    8000:	4c06      	ldr	r4, [pc, #24]	; (801c <_close_r+0x20>)
    8002:	0005      	movs	r5, r0
    8004:	0008      	movs	r0, r1
    8006:	6023      	str	r3, [r4, #0]
    8008:	f7fb fdd2 	bl	3bb0 <_close>
    800c:	1c43      	adds	r3, r0, #1
    800e:	d103      	bne.n	8018 <_close_r+0x1c>
    8010:	6823      	ldr	r3, [r4, #0]
    8012:	2b00      	cmp	r3, #0
    8014:	d000      	beq.n	8018 <_close_r+0x1c>
    8016:	602b      	str	r3, [r5, #0]
    8018:	bd70      	pop	{r4, r5, r6, pc}
    801a:	46c0      	nop			; (mov r8, r8)
    801c:	20002bac 	.word	0x20002bac

00008020 <_fstat_r>:
    8020:	2300      	movs	r3, #0
    8022:	b570      	push	{r4, r5, r6, lr}
    8024:	4c06      	ldr	r4, [pc, #24]	; (8040 <_fstat_r+0x20>)
    8026:	0005      	movs	r5, r0
    8028:	0008      	movs	r0, r1
    802a:	0011      	movs	r1, r2
    802c:	6023      	str	r3, [r4, #0]
    802e:	f7fb fdc2 	bl	3bb6 <_fstat>
    8032:	1c43      	adds	r3, r0, #1
    8034:	d103      	bne.n	803e <_fstat_r+0x1e>
    8036:	6823      	ldr	r3, [r4, #0]
    8038:	2b00      	cmp	r3, #0
    803a:	d000      	beq.n	803e <_fstat_r+0x1e>
    803c:	602b      	str	r3, [r5, #0]
    803e:	bd70      	pop	{r4, r5, r6, pc}
    8040:	20002bac 	.word	0x20002bac

00008044 <_isatty_r>:
    8044:	2300      	movs	r3, #0
    8046:	b570      	push	{r4, r5, r6, lr}
    8048:	4c06      	ldr	r4, [pc, #24]	; (8064 <_isatty_r+0x20>)
    804a:	0005      	movs	r5, r0
    804c:	0008      	movs	r0, r1
    804e:	6023      	str	r3, [r4, #0]
    8050:	f7fb fdb6 	bl	3bc0 <_isatty>
    8054:	1c43      	adds	r3, r0, #1
    8056:	d103      	bne.n	8060 <_isatty_r+0x1c>
    8058:	6823      	ldr	r3, [r4, #0]
    805a:	2b00      	cmp	r3, #0
    805c:	d000      	beq.n	8060 <_isatty_r+0x1c>
    805e:	602b      	str	r3, [r5, #0]
    8060:	bd70      	pop	{r4, r5, r6, pc}
    8062:	46c0      	nop			; (mov r8, r8)
    8064:	20002bac 	.word	0x20002bac

00008068 <_lseek_r>:
    8068:	b570      	push	{r4, r5, r6, lr}
    806a:	0005      	movs	r5, r0
    806c:	0008      	movs	r0, r1
    806e:	0011      	movs	r1, r2
    8070:	2200      	movs	r2, #0
    8072:	4c06      	ldr	r4, [pc, #24]	; (808c <_lseek_r+0x24>)
    8074:	6022      	str	r2, [r4, #0]
    8076:	001a      	movs	r2, r3
    8078:	f7fb fda4 	bl	3bc4 <_lseek>
    807c:	1c43      	adds	r3, r0, #1
    807e:	d103      	bne.n	8088 <_lseek_r+0x20>
    8080:	6823      	ldr	r3, [r4, #0]
    8082:	2b00      	cmp	r3, #0
    8084:	d000      	beq.n	8088 <_lseek_r+0x20>
    8086:	602b      	str	r3, [r5, #0]
    8088:	bd70      	pop	{r4, r5, r6, pc}
    808a:	46c0      	nop			; (mov r8, r8)
    808c:	20002bac 	.word	0x20002bac

00008090 <memchr>:
    8090:	b2c9      	uxtb	r1, r1
    8092:	1882      	adds	r2, r0, r2
    8094:	4290      	cmp	r0, r2
    8096:	d101      	bne.n	809c <memchr+0xc>
    8098:	2000      	movs	r0, #0
    809a:	4770      	bx	lr
    809c:	7803      	ldrb	r3, [r0, #0]
    809e:	428b      	cmp	r3, r1
    80a0:	d0fb      	beq.n	809a <memchr+0xa>
    80a2:	3001      	adds	r0, #1
    80a4:	e7f6      	b.n	8094 <memchr+0x4>
	...

000080a8 <_read_r>:
    80a8:	b570      	push	{r4, r5, r6, lr}
    80aa:	0005      	movs	r5, r0
    80ac:	0008      	movs	r0, r1
    80ae:	0011      	movs	r1, r2
    80b0:	2200      	movs	r2, #0
    80b2:	4c06      	ldr	r4, [pc, #24]	; (80cc <_read_r+0x24>)
    80b4:	6022      	str	r2, [r4, #0]
    80b6:	001a      	movs	r2, r3
    80b8:	f7fb fd1e 	bl	3af8 <_read>
    80bc:	1c43      	adds	r3, r0, #1
    80be:	d103      	bne.n	80c8 <_read_r+0x20>
    80c0:	6823      	ldr	r3, [r4, #0]
    80c2:	2b00      	cmp	r3, #0
    80c4:	d000      	beq.n	80c8 <_read_r+0x20>
    80c6:	602b      	str	r3, [r5, #0]
    80c8:	bd70      	pop	{r4, r5, r6, pc}
    80ca:	46c0      	nop			; (mov r8, r8)
    80cc:	20002bac 	.word	0x20002bac
    80d0:	0000014c 	.word	0x0000014c
    80d4:	0000012c 	.word	0x0000012c
    80d8:	00000130 	.word	0x00000130
    80dc:	00000134 	.word	0x00000134
    80e0:	00000138 	.word	0x00000138
    80e4:	0000013c 	.word	0x0000013c
    80e8:	0000012c 	.word	0x0000012c
    80ec:	0000012c 	.word	0x0000012c
    80f0:	00000140 	.word	0x00000140
    80f4:	0000012c 	.word	0x0000012c
    80f8:	0000012c 	.word	0x0000012c
    80fc:	00000140 	.word	0x00000140
    8100:	0000012c 	.word	0x0000012c
    8104:	00000144 	.word	0x00000144
    8108:	00000144 	.word	0x00000144
    810c:	0000012c 	.word	0x0000012c
    8110:	203a7325 	.word	0x203a7325
    8114:	72646461 	.word	0x72646461
    8118:	5d64255b 	.word	0x5d64255b
    811c:	25203d20 	.word	0x25203d20
    8120:	000d0a64 	.word	0x000d0a64
    8124:	203a7325 	.word	0x203a7325
    8128:	73706f68 	.word	0x73706f68
    812c:	5d64255b 	.word	0x5d64255b
    8130:	25203d20 	.word	0x25203d20
    8134:	000d0a64 	.word	0x000d0a64
    8138:	203a7325 	.word	0x203a7325
    813c:	65636552 	.word	0x65636552
    8140:	6e697669 	.word	0x6e697669
    8144:	72662067 	.word	0x72662067
    8148:	6e206d6f 	.word	0x6e206d6f
    814c:	72646461 	.word	0x72646461
    8150:	2c782520 	.word	0x2c782520
    8154:	74657220 	.word	0x74657220
    8158:	0a782520 	.word	0x0a782520
    815c:	0000000d 	.word	0x0000000d
    8160:	203a7325 	.word	0x203a7325
    8164:	646e6553 	.word	0x646e6553
    8168:	20676e69 	.word	0x20676e69
    816c:	6e206f74 	.word	0x6e206f74
    8170:	72646461 	.word	0x72646461
    8174:	2c782520 	.word	0x2c782520
    8178:	6e656c20 	.word	0x6e656c20
    817c:	0a642520 	.word	0x0a642520
    8180:	0000000d 	.word	0x0000000d
    8184:	203a7325 	.word	0x203a7325
    8188:	72636544 	.word	0x72636544
    818c:	20747079 	.word	0x20747079
    8190:	20676154 	.word	0x20676154
    8194:	6c696146 	.word	0x6c696146
    8198:	25206465 	.word	0x25206465
    819c:	25202c69 	.word	0x25202c69
    81a0:	000d0a69 	.word	0x000d0a69
    81a4:	203a7325 	.word	0x203a7325
    81a8:	65636552 	.word	0x65636552
    81ac:	64657669 	.word	0x64657669
    81b0:	0d0a203a 	.word	0x0d0a203a
    81b4:	00000000 	.word	0x00000000
    81b8:	00207825 	.word	0x00207825
    81bc:	203a7325 	.word	0x203a7325
    81c0:	73736553 	.word	0x73736553
    81c4:	206e6f69 	.word	0x206e6f69
    81c8:	3a79654b 	.word	0x3a79654b
    81cc:	000d0a20 	.word	0x000d0a20
    81d0:	203a7325 	.word	0x203a7325
    81d4:	636e6f4e 	.word	0x636e6f4e
    81d8:	0a203a65 	.word	0x0a203a65
    81dc:	0000000d 	.word	0x0000000d
    81e0:	00000b3c 	.word	0x00000b3c
    81e4:	00000bae 	.word	0x00000bae
    81e8:	00000bae 	.word	0x00000bae
    81ec:	00000bae 	.word	0x00000bae
    81f0:	00000b66 	.word	0x00000b66
    81f4:	00000bae 	.word	0x00000bae
    81f8:	00000bae 	.word	0x00000bae
    81fc:	00000bae 	.word	0x00000bae
    8200:	00000b72 	.word	0x00000b72
    8204:	00000bae 	.word	0x00000bae
    8208:	00000bae 	.word	0x00000bae
    820c:	00000bae 	.word	0x00000bae
    8210:	00000b7e 	.word	0x00000b7e
    8214:	00000bae 	.word	0x00000bae
    8218:	00000bae 	.word	0x00000bae
    821c:	00000bae 	.word	0x00000bae
    8220:	00000bae 	.word	0x00000bae
    8224:	00000bae 	.word	0x00000bae
    8228:	00000bae 	.word	0x00000bae
    822c:	00000bae 	.word	0x00000bae
    8230:	00000b8a 	.word	0x00000b8a
    8234:	00000bae 	.word	0x00000bae
    8238:	00000bae 	.word	0x00000bae
    823c:	00000bae 	.word	0x00000bae
    8240:	00000bae 	.word	0x00000bae
    8244:	00000bae 	.word	0x00000bae
    8248:	00000bae 	.word	0x00000bae
    824c:	00000bae 	.word	0x00000bae
    8250:	00000bae 	.word	0x00000bae
    8254:	00000bae 	.word	0x00000bae
    8258:	00000bae 	.word	0x00000bae
    825c:	00000bae 	.word	0x00000bae
    8260:	00000bae 	.word	0x00000bae
    8264:	00000bae 	.word	0x00000bae
    8268:	00000bae 	.word	0x00000bae
    826c:	00000bae 	.word	0x00000bae
    8270:	00000b96 	.word	0x00000b96
    8274:	00000bae 	.word	0x00000bae
    8278:	00000bae 	.word	0x00000bae
    827c:	00000bae 	.word	0x00000bae
    8280:	00000bae 	.word	0x00000bae
    8284:	00000bae 	.word	0x00000bae
    8288:	00000bae 	.word	0x00000bae
    828c:	00000bae 	.word	0x00000bae
    8290:	00000bae 	.word	0x00000bae
    8294:	00000bae 	.word	0x00000bae
    8298:	00000bae 	.word	0x00000bae
    829c:	00000bae 	.word	0x00000bae
    82a0:	00000bae 	.word	0x00000bae
    82a4:	00000bae 	.word	0x00000bae
    82a8:	00000bae 	.word	0x00000bae
    82ac:	00000bae 	.word	0x00000bae
    82b0:	00000ba2 	.word	0x00000ba2
    82b4:	00000d7a 	.word	0x00000d7a
    82b8:	00000d58 	.word	0x00000d58
    82bc:	00000d5c 	.word	0x00000d5c
    82c0:	00000d60 	.word	0x00000d60
    82c4:	00000d64 	.word	0x00000d64
    82c8:	00000d68 	.word	0x00000d68
    82cc:	00000d6c 	.word	0x00000d6c
    82d0:	00000dbc 	.word	0x00000dbc
    82d4:	00000d9a 	.word	0x00000d9a
    82d8:	00000d9e 	.word	0x00000d9e
    82dc:	00000da2 	.word	0x00000da2
    82e0:	00000da6 	.word	0x00000da6
    82e4:	00000daa 	.word	0x00000daa
    82e8:	00000dae 	.word	0x00000dae
    82ec:	00000e00 	.word	0x00000e00
    82f0:	00000dde 	.word	0x00000dde
    82f4:	00000de2 	.word	0x00000de2
    82f8:	00000de6 	.word	0x00000de6
    82fc:	00000dea 	.word	0x00000dea
    8300:	00000dee 	.word	0x00000dee
    8304:	00000df2 	.word	0x00000df2
    8308:	00000ec6 	.word	0x00000ec6
    830c:	00000ea4 	.word	0x00000ea4
    8310:	00000ea8 	.word	0x00000ea8
    8314:	00000eac 	.word	0x00000eac
    8318:	00000eb0 	.word	0x00000eb0
    831c:	00000eb4 	.word	0x00000eb4
    8320:	00000eb8 	.word	0x00000eb8
    8324:	00000f08 	.word	0x00000f08
    8328:	00000ee6 	.word	0x00000ee6
    832c:	00000eea 	.word	0x00000eea
    8330:	00000eee 	.word	0x00000eee
    8334:	00000ef2 	.word	0x00000ef2
    8338:	00000ef6 	.word	0x00000ef6
    833c:	00000efa 	.word	0x00000efa
    8340:	00000f4c 	.word	0x00000f4c
    8344:	00000f2a 	.word	0x00000f2a
    8348:	00000f2e 	.word	0x00000f2e
    834c:	00000f32 	.word	0x00000f32
    8350:	00000f36 	.word	0x00000f36
    8354:	00000f3a 	.word	0x00000f3a
    8358:	00000f3e 	.word	0x00000f3e
    835c:	75206e41 	.word	0x75206e41
    8360:	7078656e 	.word	0x7078656e
    8364:	65746365 	.word	0x65746365
    8368:	61762064 	.word	0x61762064
    836c:	2065756c 	.word	0x2065756c
    8370:	20736177 	.word	0x20736177
    8374:	6f636e65 	.word	0x6f636e65
    8378:	65746e75 	.word	0x65746e75
    837c:	20646572 	.word	0x20646572
    8380:	43206e69 	.word	0x43206e69
    8384:	545f4e41 	.word	0x545f4e41
    8388:	61525f78 	.word	0x61525f78
    838c:	25202c77 	.word	0x25202c77
    8390:	64252064 	.word	0x64252064
    8394:	000a0d2e 	.word	0x000a0d2e

00008398 <map>:
    8398:	030201ff 07060504 14100c08 40302018     ............. 0@
    83a8:	203a7325 65636552 64657669 67657220     %s: Received reg
    83b8:	72616c75 74616420 0d0a2e61 00000000     ular data.......
    83c8:	74616857 64696420 756f7920 73756a20     What did you jus
    83d8:	69672074 6d206576 000d2e65 55424544     t give me...DEBU
    83e8:	44203a47 7420434c 6156206f 25203a6c     G: DLC to Val: %
    83f8:	000a0d64 203a7325 7774654e 206b726f     d...%s: Network 
    8408:	65636552 20657669 654d202d 67617373     Receive - Messag
    8418:	0a203a65 0000000d 203a7325 65636552     e: .....%s: Rece
    8428:	64657669 6f726220 61636461 64207473     ived broadcast d
    8438:	2e617461 00000d0a 203a7325 616f7242     ata.....%s: Broa
    8448:	73616364 654e2074 726f7774 6552206b     dcast Network Re
    8458:	76696563 202d2065 7373654d 3a656761     ceive - Message:
    8468:	000d0a20 203a7325 7774654e 206b726f      ...%s: Network 
    8478:	646e6573 4d202d20 61737365 203a6567     send - Message: 
    8488:	00000d0a 203a7325 63637553 66737365     ....%s: Successf
    8498:	796c6c75 6e655320 61442074 74206174     ully Sent Data t
    84a8:	4449206f 2e642520 00000d0a              o ID %d.....

000084b4 <HARDWARE_ID_VAL>:
    84b4:	00000009 6c696146 50206465 696c6275     ....Failed Publi
    84c4:	654b2063 65472079 6172656e 6e6f6974     c Key Generation
    84d4:	0000000d 6c696146 53206465 65726168     ....Failed Share
    84e4:	65532064 74657263 65724320 6f697461     d Secret Creatio
    84f4:	00000d6e 20656854 76726573 69207265     n...The server i
    8504:	6f6e2073 68742074 6e6f2065 6f792065     s not the one yo
    8514:	61772075 7420746e 6f63206f 63656e6e     u want to connec
    8524:	6f742074 00000d21 203a7325 65707845     t to!...%s: Expe
    8534:	64657463 73655220 736e6f70 0a203a65     cted Response: .
    8544:	0000000d 203a7325 65636552 64657669     ....%s: Received
    8554:	73655220 736e6f70 0a203a65 0000000d      Response: .....
    8564:	203a7325 6e676953 72757461 6f662065     %s: Signature fo
    8574:	65532072 6f697373 654b206e 61772079     r Session Key wa
    8584:	6e492073 72726f63 21746365 00000d0a     s Incorrect!....
    8594:	203a7325 706d6f43 6574656c 61502064     %s: Completed Pa
    85a4:	746e6572 41207327 65687475 6369746e     rent's Authentic
    85b4:	6f697461 000d0a6e 325f5045 53545f42     ation...EP_2B_TS
    85c4:	00534e45 42000400 42000800 42000c00     ENS....B...B...B
    85d4:	42001000 42001400 42001800 000033b2     ...B...B...B.3..
    85e4:	000033ae 000033ae 000033e0 000033e0     .3...3...3...3..
    85f4:	000033ca 000033b8 000033d0 000035a4     .3...3...3...5..
    8604:	00003584 00003584 000035da 00003596     .5...5...5...5..
    8614:	000035b2 00003588 000035c0              .5...5...5..

00008620 <PARAMETER_d>:
    8620:	00000142 00000000 000e4000 00000000     B........@......
    8630:	00000000 01fc0c8d 0085223c 020fcb38     ........<"..8...
    8640:	0211995f 005e472f                       _.../G^.

00008648 <FIXED_BASE_TABLE>:
    8648:	0303e631 028d3ce9 02b5fe18 02fc7540     1....<......@u..
    8658:	00287460 00f90353 0398bdf9 02cdee02     `t(.S...........
    8668:	00de2e1a 000c3ba0 00937edc 03c3e62c     .....;...~..,...
    8678:	0055590b 01e093c3 00740b7c 03a01366     .YU.....|.t.f...
    8688:	0048e448 017a5b32 02e4ea55 004ffcf5     H.H.2[z.U.....O.
    8698:	03da42bb 02bf32ea 017c6297 00dd55b2     .B...2...b|..U..
    86a8:	005948d1 0330684c 02268e4c 01f27a81     .HY.Lh0.L.&..z..
    86b8:	01c828d0 000caf2b 01188787 02e8063f     .(..+.......?...
    86c8:	012a83a8 02062374 00554612 009f9b77     ..*.t#...FU.w...
    86d8:	00f30cf0 02049b0b 03e2e134 001baeea     ........4.......
    86e8:	01faf900 01096984 03789006 004b869b     .....i....x...K.
    86f8:	0018f7cd 02556066 033c2684 036eb6dc     ....f`U..&<...n.
    8708:	03bab39e 00448e05 012829b0 03ccda27     ......D..)(.'...
    8718:	03db4bf2 032ca55e 006d911d 003c03ee     .K..^.,...m...<.
    8728:	00d4f6f7 025019f2 0016eafb 0006c543     ......P.....C...
    8738:	01afa125 03d15c4f 0364d2ea 01619228     %...O\....d.(.a.
    8748:	00729630 01313ef2 01ddc7e7 0306961b     0.r..>1.........
    8758:	03e2ff8a 004f41c7 019790ac 0188eb96     .....AO.........
    8768:	00a42408 021910cc 004d3385 00dd7487     .$.......3M..t..
    8778:	01a59927 02114fc5 03839663 0074df72     '....O..c...r.t.
    8788:	013c110b 0018c964 030d8c9a 00457f92     ..<.d.........E.
    8798:	00076bd4 02bff3d9 00679975 03a08766     .k......u.g.f...
    87a8:	0051f3b8 00249240 00965a73 016e5852     ..Q.@.$.sZ..RXn.
    87b8:	03706d69 028a20a7 0028aac8 01f7a57b     imp.. ....(.{...
    87c8:	007014ca 0200e41f 03a27c0f 00441ca9     ..p......|....D.
    87d8:	03f7241e 028e2ae2 037f4e1a 02bf20ca     .$...*...N... ..
    87e8:	0058f28c 025400c6 02be2e3e 0063ecad     ..X...T.>.....c.
    87f8:	0018a13a 0034b6d1 02f15097 02632ace     :.....4..P...*c.
    8808:	01c49f54 024005f6 006dbe77 0048e8bc     T.....@.w.m...H.
    8818:	03ddaa05 0200663b 016fc8eb 00637192     ....;f....o..qc.
    8828:	01ed81fa 00b1c86f 016abc5e 03bb5a01     ....o...^.j..Z..
    8838:	004ede70 00975810 03366d6d 01aa88f3     p.N..X..mm6.....
    8848:	0064bc2a 004752fd 03734414 01e53ac7     *.d..RG..Ds..:..
    8858:	00662318 034b211a 0011ddf7 02b1a34e     .#f..!K.....N...
    8868:	00ec1bdc 02770261 02cdeac1 00465575     ....a.w.....uUF.
    8878:	02638d2b 026117e0 018ce40b 0141e40a     +.c...a.......A.
    8888:	00488940 01b4f131 02e4e940 032fbbed     @.H.1...@...../.
    8898:	0034a226 0004f356 015b278b 03761d44     &.4.V....'[.D.v.
    88a8:	0058a457 0395364a 0056f25e 020c977e     W.X.J6..^.V.~...
    88b8:	01307373 0099692d 01061f5d 00078fca     ss0.-i..].......
    88c8:	02cc22a1 02cb7b5d 02bf63bb 0214f770     ."..]{...c..p...
    88d8:	00117b28 01c2baa2 00dd9f2e 00a8f43f     ({..........?...
    88e8:	009783aa 0073079e 0215796d 01e64ad6     ......s.my...J..
    88f8:	02f92017 00520367 002e7772 03372916     . ..g.R.rw...)7.
    8908:	02620d59 0176dbe0 01adebdd 00258f17     Y.b...v.......%.
    8918:	0168391b 00ce3f58 013a4308 017e69cd     .9h.X?...C:..i~.
    8928:	00728592 03e85114 0303f413 02b51862     ..r..Q......b...
    8938:	039d08eb 0053259e 033b1a68 000c6a12     .....%S.h.;..j..
    8948:	031fcfe0 01987e81 001a4f1d 01c928a7     .....~...O...(..
    8958:	035505a3 02a6a2dd 006b7c65 0060185c     ..U.....e|k.\.`.
    8968:	006da9b4 0025c5f7 03c03498 012d373f     ..m...%..4..?7-.
    8978:	00606209 01fa7e8d 03a9be81 008a0a41     .b`..~......A...
    8988:	01bc9dc5 004a4fe0 029e80f0 0094ea7b     .....OJ.....{...
    8998:	017337bb 022f32c4 00419a92 029a039e     .7s..2/...A.....
    89a8:	008ef99a 014bb843 02ba5ca0 0001b2d1     ....C.K..\......
    89b8:	03051231 02216134 01dd7a75 0083325e     1...4a!.uz..^2..
    89c8:	0054df1e 022f22dd 0241bf8f 01a0f91d     ..T.."/...A.....
    89d8:	025d7f7c 004e36e9 03747634 021c5d1a     |.]..6N.4vt..]..
    89e8:	03433d81 02ebbb84 003e5e31 0173baa3     .=C.....1^>...s.
    89f8:	02a025e5 037c6e4d 0365f3f9 004b852a     .%..Mn|...e.*.K.
    8a08:	00418b9e 02cd19c5 02f88e08 026cbf9b     ..A...........l.
    8a18:	00283d71 005c180b 00e74b79 015c8b73     q=(...\.yK..s.\.
    8a28:	03bc474b 0075acfc 00561876 001ddea3     KG....u.v.V.....
    8a38:	00c4b8f4 01029c4d 000c54ac 02baee08     ....M....T......
    8a48:	038a1f59 008bfb92 01401a86 006f357e     Y.........@.~5o.
    8a58:	011e6971 000cc67b 03d40c59 03be476b     qi..{...Y...kG..
    8a68:	00747c45 012f816e 0021aa47 02f7dde4     E|t.n./.G.!.....
    8a78:	03b6cecf 005dcb27 021dd2ee 03711b3e     ....'.].....>.q.
    8a88:	0249843f 027dc259 0051551f 01ed9bdc     ?.I.Y.}..UQ.....
    8a98:	014d3dd8 0307fb54 02cc1cfe 00453455     .=M.T.......U4E.
    8aa8:	03cab70b 01dcf8e0 034dff24 0179d633     ........$.M.3.y.
    8ab8:	00679be2 003eee29 01fb7ca5 00f66da1     ..g.).>..|...m..
    8ac8:	02e35b70 003dc9e5 013fb75b 01432e90     p[....=.[.?...C.
    8ad8:	0137f56a 016f16a1 001e6531 002c7213     j.7...o.1e...r,.
    8ae8:	024090a0 0252e5ff 0323d094 0073c9d8     ..@...R...#...s.
    8af8:	03198c8f 00dee18c 00f333c6 02cfb505     .........3......
    8b08:	00534f84 02dd6902 004f9cb7 033afad3     .OS..i....O...:.
    8b18:	0250737c 005ed57e 0257306e 03f8074a     |sP.~.^.n0W.J...
    8b28:	013f95a6 03a8d11c 0073b63d 031c2bf3     ..?.....=.s..+..
    8b38:	02dc15c3 018db39c 03927c68 002df8c6     ........h|....-.
    8b48:	037797e4 02f0d259 01062661 032efafa     ..w.Y...a&......
    8b58:	00501ae7 00959643 00aa237a 01d515b5     ..P.C...z#......
    8b68:	00a04700 00037275 001bb928 0315e88c     .G..ur..(.......
    8b78:	00fc6010 01c55555 00378b31 01a02cf1     .`..UU..1.7..,..
    8b88:	00fe908a 01b29f88 02e1435f 005f0047     ........_C..G._.
    8b98:	00402daa 011eb8ca 022bc4d2 009ea142     .-@.......+.B...
    8ba8:	000d0306 00a443f5 019766a2 03089b4e     .....C...f..N...
    8bb8:	01acb5b6 006ec968 02a1d987 000b823f     ....h.n.....?...
    8bc8:	03600de2 034fca35 005c64e1 0261bfb7     ..`.5.O..d\...a.
    8bd8:	0345efbd 0334c157 00db75d4 0056392d     ..E.W.4..u..-9V.
    8be8:	0119155c 011e362f 02afde25 00b4f4cd     \.../6..%.......
    8bf8:	00146d4f 014e15e8 02f802fe 010c09bf     Om....N.........
    8c08:	0269ab7c 002b185a 0152ab7b 0149ecfb     |.i.Z.+.{.R...I.
    8c18:	01e80926 0051cc40 0067997e 007cc541     &...@.Q.~.g.A.|.
    8c28:	03d3fd25 01a7ab58 031feb26 0036f800     %...X...&.....6.
    8c38:	000456d9 000b8c90 0297bd03 00d902f1     .V..............
    8c48:	004372e4 0350d898 0132aed1 03cbf914     .rC...P...2.....
    8c58:	03eb2688 0075d25a 0255cbfe 01645d9d     .&..Z.u...U..]d.
    8c68:	00b07794 01985ff1 0074db21 0166d0c9     .w..._..!.t...f.
    8c78:	01ec8909 03b23705 01642105 001d543b     .....7...!d.;T..
    8c88:	00428783 00a02d11 003ef19c 03f62db3     ..B..-....>..-..
    8c98:	00352309 0068ae72 00cf5ab0 019f4378     .#5.r.h..Z..xC..
    8ca8:	00688f00 004ec067 03d05bb5 020db868     ..h.g.N..[..h...
    8cb8:	02fe39d9 037fc893 0044fe1a 017efb4a     .9........D.J.~.
    8cc8:	01af0f39 00150a29 01a0d685 002efec8     9...)...........
    8cd8:	03194bca 0067027e 012062fe 034e54f3     .K..~.g..b ..TN.
    8ce8:	0018cc07 01c0b9e0 03fc85f2 03cee5bd     ................
    8cf8:	0159606a 00671aa7 00f7d1a2 030ceb8a     j`Y...g.........
    8d08:	023fee1c 0124de82 001b6f25 01babb83     ..?...$.%o......
    8d18:	000f4599 01211515 00db5622 0074b956     .E....!."V..V.t.
    8d28:	0296f869 025eb93a 010bdbdb 00627894     i...:.^......xb.
    8d38:	001507ce 02b93b13 0393553e 00929796     .....;..>U......
    8d48:	017c1658 006a8176 01a833ed 01014879     X.|.v.j..3..yH..
    8d58:	036442e9 00cac917 003bdea5 03d52693     .Bd.......;..&..
    8d68:	01da5d7f 00ed6bea 0122e9b5 0064b948     .]...k....".H.d.
    8d78:	00e33ec7 014b4065 01f259db 0369558e     .>..e@K..Y...Ui.
    8d88:	0071cf65 035a8138 01cec7f6 01c22ede     e.q.8.Z.........
    8d98:	00edb18b 0012e4d1 01185517 026c3099     .........U...0l.
    8da8:	03dd09d1 03495ed7 0077a011 02cd84e4     .....^I...w.....
    8db8:	037172ab 012d11fe 005478d2 0046844e     .rq...-..xT.N.F.
    8dc8:	004220df 008e8c64 030997a4 031d1fa3     . B.d...........
    8dd8:	005b3165 0335e22e 0197bab7 0195b1c6     e1[...5.........
    8de8:	015bf115 007802b5 015bd2de 00b7bd00     ..[...x...[.....
    8df8:	026ad85a 021e55c5 0017f2ab 0060c1e5     Z.j..U........`.
    8e08:	03db4d48 00e6a19c 0346f902 00122a7a     HM........F.z*..
    8e18:	005bf766 026ef219 01acf5b7 0275342b     f.[...n.....+4u.
    8e28:	0020fb00 03a28538 009a89ca 00bde975     .. .8.......u...
    8e38:	03a43508 007041b4 00dab057 00044cd6     .5...Ap.W....L..
    8e48:	002433b3 019bc349 003d398b 03cd4708     .3$.I....9=..G..
    8e58:	01666680 0009691a 0027364e 001eae24     .ff..i..N6'.$...
    8e68:	0036108c 035ad813 0196866d 00de2420     ..6...Z.m... $..
    8e78:	00171308 0125dcfd 02b5a45c 031ca57c     ......%.\...|...
    8e88:	02e25c13 0034b06c 0335abf2 03fa39c7     .\..l.4...5..9..
    8e98:	00db9dca 00663551 00698331 03af075b     ....Q5f.1.i.[...
    8ea8:	01d9d990 02b6d628 03955674 00200950     ....(...tV..P. .
    8eb8:	00dd9074 018ff0fb 013a2d4f 01c50ab0     t.......O-:.....
    8ec8:	00747331 01319356 0000c201 038ba96b     1st.V.1.....k...
    8ed8:	0380910d 002c20ff 026ac01a 025446b4     ..... ,...j..FT.
    8ee8:	03cf6488 0086665f 004ee327 030bf8ea     .d.._f..'.N.....
    8ef8:	03f9b9c3 026d715f 02d29b42 006b617f     ...._qm.B....ak.
    8f08:	012f7324 01b72871 00277491 03c2191a     $s/.q(...t'.....
    8f18:	003c8269 0037e04b 00843132 0142cc24     i.<.K.7.21..$.B.
    8f28:	013e4569 004e480b 027fe35e 03bcec26     iE>..HN.^...&...
    8f38:	004b2c5f 037913f6 0031a501 00a407b9     _,K...y...1.....
    8f48:	00a79250 025ab79f 00f29733 000ba7e0     P.....Z.3.......
    8f58:	0274d8ea 022c8162 01adca7a 0204389b     ..t.b.,.z....8..
    8f68:	0046f4c7 00a1128a 01c6b3a5 02811461     ..F.........a...
    8f78:	00095256 0044db55 03f18d5c 02278692     VR..U.D.\.....'.
    8f88:	006b27f8 00a90fcc 004d4f17 031cffad     .'k......OM.....
    8f98:	0265d9ae 01aca33a 0164934e 00625477     ..e.:...N.d.wTb.
    8fa8:	0225136e 0148c3b0 0211dd85 0341e364     n.%...H.....d.A.
    8fb8:	001c544d 023f63ba 03a65a7d 0138212f     MT...c?.}Z../!8.
    8fc8:	03725277 00069af1 03e5c256 02f3d033     wRr.....V...3...
    8fd8:	03595305 02492eee 0063ae90 03b7de06     .SY...I...c.....
    8fe8:	00425de4 0043ee45 03ce7f00 0009780c     .]B.E.C......x..
    8ff8:	03798871 02be39fa 03a37827 01b1dd5d     q.y..9..'x..]...
    9008:	003ace8a 02e055ba 03c184cc 0292b79d     ..:..U..........
    9018:	01eaab3a 00561dc0 020d2673 0108b660     :.....V.s&..`...
    9028:	013487e4 020f82bd 006b85df 02d8526b     ..4.......k.kR..
    9038:	0146b077 002bd1f1 039455c5 0035ead8     w.F...+..U....5.
    9048:	03c79dd4 01bbdb0c 03de46da 01349653     .........F..S.4.
    9058:	005f2ea0 0027d5fa 00df4330 0331b910     .._...'.0C....1.
    9068:	00401ec0 0053b540 014ba5a3 03c6628f     ..@.@.S...K..b..
    9078:	00195810 00966ea5 004463bd 002acf9e     .X...n...cD...*.
    9088:	02252b3b 009ce32b 0187590d 00787117     ;+%.+....Y...qx.
    9098:	011fe211 02b86cfd 02463253 00fd4d6d     .....l..S2F.mM..
    90a8:	00409e4b 025e49de 00db4436 0336a3a2     K.@..I^.6D....6.
    90b8:	000a7084 0019d2b1 02aadd90 017d010d     .p............}.
    90c8:	00b19283 00541464 000942a3 02828279     ....d.T..B..y...
    90d8:	0244c61d 01f9cc18 030f2a38 003afe96     ..D.....8*....:.
    90e8:	01230693 02006d24 010919f1 02e1897f     ..#.$m..........
    90f8:	0039e28d 01d44c8e 02d40d57 0280d9fa     ..9..L..W.......
    9108:	0369ca6c 00145155 014d76d5 033e0407     l.i.UQ...vM...>.
    9118:	02c68d3c 006a30ad 005a0faa 0354ea8a     <....0j...Z...T.
    9128:	019b2132 007733cc 038fd59b 0051052c     2!...3w.....,.Q.
    9138:	01ae9ff5 03853799 030243be 02280733     .....7...C..3.(.
    9148:	00758611 016bf15e 039e4722 013d6089     ..u.^.k."G...`=.
    9158:	00b49876 0035ff02 037d1cf9 03384f63     v.....5...}.cO8.
    9168:	038f6cd3 023e56de 004f1de9 02dc41b4     .l...V>...O..A..
    9178:	01a28918 01d2951e 00f08fdb 0061ad9e     ..............a.
    9188:	00ebdb51 03fa9920 02cf3584 001cfe77     Q... ....5..w...
    9198:	005d52fe 01f336d5 03920fab 0296a9af     .R]..6..........
    91a8:	032602c5 001dfa03 03819a19 01cf51ff     ..&..........Q..
    91b8:	000ed55f 0174d844 00697bf5 02399419     _...D.t..{i...9.
    91c8:	01201111 0259fded 0119ff38 00618c94     .. ...Y.8.....a.
    91d8:	008ef50c 025ffc7c 033c0f25 02e63764     ....|._.%.<.d7..
    91e8:	0007c935 00ded5f6 01632f1e 0148fbb7     5......../c...H.
    91f8:	001abc4c 001e9a0d 034cd4db 0338515f     L.........L._Q8.
    9208:	00994879 028658b5 0028396c 017605c3     yH...X..l9(...v.
    9218:	02568f71 027b1f50 00f69314 001e570f     q.V.P.{......W..
    9228:	00935787 01a68e41 01cce2af 01dbf740     .W..A.......@...
    9238:	00591ee3 00bc8633 02d637e2 015d1f77     ..Y.3....7..w.].
    9248:	0146cbce 005464d6 029a86ae 03025ac7     ..F..dT......Z..
    9258:	02b28afb 012fd96d 006ce2df 029d3e08     ....m./...l..>..
    9268:	02a0a34b 026d03b3 007634b5 00638201     K.....m..4v...c.
    9278:	013d193d 021f2993 016af949 0034edb5     =.=..)..I.j...4.
    9288:	0050ddf7 00ad15a9 037d9f32 01f928d5     ..P.....2.}..(..
    9298:	0262f16c 00392080 03d5a4fb 027d4837     l.b.. 9.....7H}.
    92a8:	03ba9ce9 021ee1a9 00323bbc 0003c789     .........;2.....
    92b8:	03e22a36 00055e13 02f7c880 0056ffdc     6*...^........V.
    92c8:	0324c72d 03c368c6 00c163af 01991830     -.$..h...c..0...
    92d8:	00700115 02c46a13 01edfd4e 03bc276f     ..p..j..N...o'..
    92e8:	03fadc1d 001c069b 014a3c36 01c64f28     ........6<J.(O..
    92f8:	01e3d8f4 012bc223 006d73e3 017d6634     ....#.+..sm.4f}.
    9308:	02caf64c 01ec8634 00e2ddfc 005b4047     L...4.......G@[.
    9318:	00a1cb1d 03eaedc7 02a46f34 032b2951     ........4o..Q)+.
    9328:	00054abb 00eda660 0372b742 01ef1e8c     .J..`...B.r.....
    9338:	02fe562f 006971ab 01db4eaf 00e155f7     /V...qi..N...U..
    9348:	0367c413 0216c1e6 001e1585 03a26068     ..g.........h`..
    9358:	01c11d33 02469d22 00cacf3a 0053b36d     3...".F.:...m.S.
    9368:	00543d08 0148f05b 0314e011 00b17dcc     .=T.[.H......}..
    9378:	004668e9 0117acd1 03cfaf90 0131abae     .hF...........1.
    9388:	006a9c4e 0004037d 0390c68d 00463938     N.j.}.......89F.
    9398:	0157568e 01569130 006b80cd 0329c032     .VW.0.V...k.2.).
    93a8:	01faa295 01ab2730 017fbba6 005cc547     ....0'......G.\.
    93b8:	0014ac75 01439093 01cd8344 01f976cf     u.....C.D....v..
    93c8:	003f0915 00588052 038ac6d4 02f8f62c     ..?.R.X.....,...
    93d8:	03153994 0027a899 03c2a5ed 0340e7cb     .9....'.......@.
    93e8:	03eec0ac 03775604 004b4044 00a75958     .....Vw.D@K.XY..
    93f8:	034627a4 033a1c04 02f39c74 00242551     .'F...:.t...Q%$.
    9408:	01f87f05 02be5ad4 01815d95 0083e027     .....Z...]..'...
    9418:	00029888 039483c5 03d97dce 00b43b27     .........}..';..
    9428:	0117d0d9 002ef607 034fb8b9 01af724f     ..........O.Or..
    9438:	03b8acb6 02d21d5a 002b86c9 039867a1     ....Z.....+..g..
    9448:	02f6b826 029aaf8e 006139bf 00441e70     &........9a.p.D.
    9458:	00cc1289 0094c0cc 02992fdc 016a2d35     ........./..5-j.
    9468:	0047d8d6 00ae74be 00edbe8c 019d58c0     ..G..t.......X..
    9478:	00f30ef6 001ca869 0018f2a6 03ac5444     ....i.......DT..
    9488:	03ff5699 019367d3 003da047 013aab59     .V...g..G.=.Y.:.
    9498:	01c810cf 017ff361 0184b2e1 002fa911     ....a........./.
    94a8:	002f1cac 015f6843 00619a40 02e4ce97     ../.Ch_.@.a.....
    94b8:	0048a219 015f0bc5 01040834 01dad423     ..H..._.4...#...
    94c8:	01411a82 0073f889 027421b8 0354c4b1     ..A...s..!t...T.
    94d8:	0222e1ba 006cda39 00419477 004e0dff     ..".9.l.w.A...N.
    94e8:	01c69e79 031c28cc 0391519f 004b4564     y....(...Q..dEK.
    94f8:	03e52093 027c5aab 03ea9775 03735d7e     . ...Z|.u...~]s.
    9508:	00391b71 034ef798 0301a52a 0130d2a1     q.9...N.*.....0.
    9518:	01515110 00023087 03aa1aa1 02b87ff3     .QQ..0..........
    9528:	021e74b7 00cb5ccd 0064e26f 010b54b9     .t...\..o.d..T..
    9538:	011c0e2f 02e158da 01bfabb3 00148cfa     /....X..........
    9548:	01c2cc3d 01b5351e 003de375 02a34c55     =....5..u.=.UL..
    9558:	0025d44e 02bb2c43 0322fbc9 0337fd82     N.%.C,...."...7.
    9568:	000cf49f 002c2047 03dad260 00cf660d     ....G ,.`....f..
    9578:	03b7d5bd 005e8ce0 00779431 02a583f2     ......^.1.w.....
    9588:	01c75a5f 01bf2120 009ca889 003c7c41     _Z.. !......A|<.
    9598:	01f03ad3 02ef7ebc 0370492e 0031a2d8     .:...~...Ip...1.
    95a8:	005d6103 02ee75d1 038a14ee 03636ca6     .a]..u.......lc.
    95b8:	00d1dc68 0012404b 02667e4f 00f118c9     h...K@..O~f.....
    95c8:	023b0be1 0245be6f 002bd261 01c80f89     ..;.o.E.a.+.....
    95d8:	00fe32eb 00b4886e 02285e53 0074520d     .2..n...S^(..Rt.
    95e8:	024cf97e 0171d140 02b021e1 0078794f     ~.L.@.q..!..Oyx.
    95f8:	005cee74 0399cda1 0223782b 0062c8d0     t.\.....+x#...b.
    9608:	02587302 00625812 01c0e934 00d0dcc8     .sX..Xb.4.......
    9618:	037a4431 01a31093 0060bbc7 0010e143     1Dz.......`.C...
    9628:	01c7efcf 015b8aba 027c52a4 0037b8ea     ......[..R|...7.
    9638:	000213ff 01bb1971 0045c8d9 00a3fdde     ....q.....E.....
    9648:	0074a088 02f607a3 02dc6536 00706bed     ..t.....6e...kp.
    9658:	01c45872 0017e866 024059cf 02e63814     rX..f....Y@..8..
    9668:	02f09ace 03125245 0068552a 031b3c47     ....ER..*Uh.G<..
    9678:	00a5c6eb 01b704cd 02f37788 0068442e     .........w...Dh.
    9688:	02867595 00a6e303 0247a196 034d8d7e     .u........G.~.M.
    9698:	006a6955 02e393ad 02d1783c 010c46fa     Uij.....<x...F..
    96a8:	03d3f3c1 0066dd3e 01dc7df1 02deaf3f     ....>.f..}..?...
    96b8:	00f9cbb0 01d46c2f 0014eb5b 02fd411d     ..../l..[....A..
    96c8:	01e7e728 0200a1cf 01cfffc1 005c496f     (...........oI\.
    96d8:	01426d70 01236155 018a9496 01a88c8b     pmB.Ua#.........
    96e8:	0046c101 019b6d4f 03f6e1c3 03633b57     ..F.Om......W;c.
    96f8:	01482776 00609eb6 02dc82c5 03e459af     v'H...`......Y..
    9708:	02f27e70 02d722be 00772fb5 00227a20     p~...".../w. z".
    9718:	00a5366c 03c8d79a 010444b6 007f75b1     l6.......D...u..
    9728:	02070020 0071fe23 017b198d 02ab1208      ...#.q...{.....
    9738:	005953d0 015f33ff 0094faf8 00c45e28     .SY..3_.....(^..
    9748:	03047985 00267d1d 019e2246 013d42ae     .y...}&.F"...B=.
    9758:	01495be6 01720bf9 004eaaab 0260bed0     .[I...r...N...`.
    9768:	0356b01f 01b4d927 01b79aa8 0067d378     ..V.'.......x.g.
    9778:	036e2945 0258afc3 02a9ba71 01128d7b     E)n...X.q...{...
    9788:	0063d938 026640ac 008a31f4 035a1b34     8.c..@f..1..4.Z.
    9798:	034baca3 00169c38 0039dc22 025caccd     ..K.8...".9...\.
    97a8:	01e144b7 015f36a8 00714784 001d58c7     .D...6_..Gq..X..
    97b8:	01b8497b 014f1522 025b9e3f 00669d87     {I..".O.?.[...f.
    97c8:	0244a07f 03746aaa 03ecf750 02d56bae     ..D..jt.P....k..
    97d8:	00327c62 014fbd25 02e3a56d 0364e006     b|2.%.O.m.....d.
    97e8:	017407ac 002ab3f9 00d5e196 03942030     ..t...*.....0 ..
    97f8:	02725fcb 035d695f 002a1b9b 00139b5d     ._r._i]...*.]...
    9808:	02cad9d6 03a731d2 02be126d 00751cf4     .....1..m.....u.
    9818:	037d00a5 029f4b8c 024bc164 02932e0e     ..}..K..d.K.....
    9828:	0000cee3 01be28f9 02380d9b 00502349     .....(....8.I#P.
    9838:	0245234a 00053d89 02b0fb69 01975932     J#E..=..i...2Y..
    9848:	00e74016 0088235a 004a9913 013f915d     .@..Z#....J.].?.
    9858:	012ef52f 022bbba4 03e45c84 001d34b0     /.....+..\...4..
    9868:	01e8a9f3 005371ca 00b605d1 00f754cd     .....qS......T..
    9878:	0008e7a4 02f0f3e8 02e3a48c 00f6228d     ............."..
    9888:	006e0099 005cb7be 02508f23 00b1e1e0     ..n...\.#.P.....
    9898:	021b29af 0333df8e 00336ae7 01d194be     .)....3..j3.....
    98a8:	00b53b8b 028727fe 006cae29 00573d2e     .;...'..).l..=W.
    98b8:	03b2ea36 00ba8cd8 00243333 00dd6c7d     6.......33$.}l..
    98c8:	00200bc1 02b3260d 011f2301 01c5e65c     .. ..&...#..\...
    98d8:	03294e65 0042021f 03b19946 039b3d26     eN)...B.F...&=..
    98e8:	02d2c2f7 01a88c65 00311fba 03e0d70d     ....e.....1.....
    98f8:	0304ed8a 030dcc30 00509c46 0061eeac     ....0...F.P...a.
    9908:	017d35d4 009a6596 021d7885 032f9af4     .5}..e...x..../.
    9918:	0070169b 0129a510 006cb42b 0394da0f     ..p...).+.l.....
    9928:	0051cb06 002ade53 009873e7 00c83706     ..Q.S.*..s...7..
    9938:	01b3811e 0253a173 002d2a17 02f621e3     ....s.S..*-..!..
    9948:	023114e9 036f7a0a 02d51497 004b06d5     ..1..zo.......K.
    9958:	0048ec1c 02459a46 00730f42 0155755e     ..H.F.E.B.s.^uU.
    9968:	001d4216 010a5b4e 018369ca 0165ff8c     .B..N[...i....e.
    9978:	00e687cd 0066dd9f 03b474a0 030a764d     ......f..t..Mv..
    9988:	01ee455a 01e928da 00429196 02e6bc89     ZE...(....B.....
    9998:	036b2a84 00310918 02401947 003d46e8     .*k...1.G.@..F=.
    99a8:	000e90b1 01550c28 00a39af0 03d5b697     ....(.U.........
    99b8:	0016f62b 008c51e6 00870cd2 03cd51a0     +....Q.......Q..
    99c8:	037d8fee 000d64da 01bfea7c 023b3967     ..}..d..|...g9;.
    99d8:	0203a091 035f75d0 003b3319 039fa90c     .....u_..3;.....
    99e8:	021516e2 019e61d8 03724231 0013b792     .....a..1Br.....
    99f8:	003d0979 0364e6a7 031270a2 02fadd2f     y.=...d..p../...
    9a08:	00321a5d 026d8470 0251fffd 03c995e5     ].2.p.m...Q.....
    9a18:	032bf49a 0022ec9e 03b10536 01f2a0a4     ..+...".6.......
    9a28:	01846de1 03015677 00593f56 01485023     .m..wV..V?Y.#PH.
    9a38:	020dccdd 00b1c114 03f7dd12 0023c6b0     ..............#.
    9a48:	0227804f 02411162 02a70377 02589c9b     O.'.b.A.w.....X.
    9a58:	00573e91 0235ac70 006c93cc 0385e35e     .>W.p.5...l.^...
    9a68:	008127d3 0051ba08 00d47194 01246058     .'....Q..q..X`$.
    9a78:	021dd4bc 0078cc23 005d29a2 026e4e33     ....#.x..)].3Nn.
    9a88:	016252cf 010fb7e1 00bd3cc7 0050dbbd     .Rb......<....P.
    9a98:	01a9c9de 0122f48d 00710ef2 03486d8d     ......"...q..mH.
    9aa8:	003418ad 02363bd2 01c8ce94 0099f96c     ..4..;6.....l...
    9ab8:	02b66823 007c8414 00e6c05c 02b2d295     #h....|.\.......
    9ac8:	0179abc6 0068464d 00572902 0308fa1c     ..y.MFh..)W.....
    9ad8:	01f0f802 02a73062 03e785f0 003d0b4f     ....b0......O.=.
    9ae8:	0190317f 01fa1d56 03e48d50 02cef1ef     .1..V...P.......
    9af8:	0075b27b 00e651f5 0203cb1b 02e4644a     {.u..Q......Jd..
    9b08:	03f06dc1 007b9795 01f9a640 01d6f7bf     .m....{.@.......
    9b18:	03aa89de 002aeaff 0075ade5 030889a0     ......*...u.....
    9b28:	02ac45a1 02c6cce0 03f37567 006f3ddc     .E......gu...=o.
    9b38:	00de0674 01a0cd62 020736e3 00a7a8a2     t...b....6......
    9b48:	00291d11 00884d61 02394e19 00d76f8b     ..).aM...N9..o..
    9b58:	03c6ba15 00706ef8 03753069 02a31960     .....np.i0u.`...
    9b68:	03966137 00731883 0001e45f 0376c7ba     7a....s._.....v.
    9b78:	0387fe0b 01c54e28 02b38fa2 0036d29e     ....(N........6.
    9b88:	030b49cb 01e7c55f 03937833 0278aeb2     .I.._...3x....x.
    9b98:	0065e9c3 030cda3e 008f1141 02de59b3     ..e.>...A....Y..
    9ba8:	00c6adf8 0016e02f 035122b7 033cd198     ..../...."Q...<.
    9bb8:	01e0953b 001f5b0b 001fd7e2 021e57ac     ;....[.......W..
    9bc8:	03d7e53a 034df3a5 03a343c2 000cba06     :.....M..C......
    9bd8:	03a9c392 011030e1 0180070b 010f7b87     .....0.......{..
    9be8:	001e7dc1 0239912b 022e9b5c 02d14549     .}..+.9.\...IE..
    9bf8:	02805c60 00332870 032d794c 00c1bf19     `\..p(3.Ly-.....
    9c08:	02b4e6be 0044916c 002c2ce2 012ba79f     ....l.D..,,...+.
    9c18:	02dc8b23 0327a109 03ea717d 00268520     #.....'.}q.. .&.
    9c28:	00fe78ee 02cc0149 02698515 03b32eba     .x..I.....i.....
    9c38:	00736201 0210bf78 022b044c 01843460     .bs.x...L.+.`4..
    9c48:	02467110 0032d8fd 00b8f2d8 015f86c1     .qF...2......._.
    9c58:	03459c95 03de6371 00775437 03a417f5     ..E.qc..7Tw.....
    9c68:	003d5616 01304120 017cf9eb 002e00ec     .V=. A0...|.....
    9c78:	03446288 01cf57ca 036e4fc8 024d8921     .bD..W...On.!.M.
    9c88:	0032270a 00789b22 01a91f02 016bec64     .'2.".x.....d.k.
    9c98:	03fa4958 002370d9 01e671c4 02be8d86     XI...p#..q......
    9ca8:	01fb2430 033ab07d 00156468 02417635     0$..}.:.hd..5vA.
    9cb8:	0137b0bc 0258f3b8 02405f03 0031140e     ..7...X.._@...1.
    9cc8:	037443fa 017e2332 024ac5c8 01759361     .Ct.2#~...J.a.u.
    9cd8:	000da75f 01b0fb84 03fd121c 036c3295     _............2l.
    9ce8:	002eb4cc 001b79e1 012977b3 03e650b7     .....y...w)..P..
    9cf8:	01a23ffd 02343e68 004c1b19 0112864e     .?..h>4...L.N...
    9d08:	01e28930 008d0ba7 025fc9b5 0074f668     0........._.h.t.
    9d18:	027ab611 01701ba1 038b93fd 00cffde1     ..z...p.........
    9d28:	004b98ce 01cb9165 02d3739d 01163f7d     ..K.e....s..}?..
    9d38:	028267b1 0011665a 027118b9 0263c5ab     .g..Zf....q...c.
    9d48:	0109a2a4 036ed3ad 00265ec3 00ce2c86     ......n..^&..,..
    9d58:	0108c19a 033853da 02aacb8c 0036e62b     .....S8.....+.6.
    9d68:	01ab4478 001f529e 00875995 03f1047a     xD...R...Y..z...
    9d78:	0025bfb2 03022ce1 0307b24c 00466d7a     ..%..,..L...zmF.
    9d88:	02b80cf4 0023d341 0162bc00 016d197a     ....A.#...b.z.m.
    9d98:	03180d29 006e8b5c 0023d021 03922d4d     )...\.n.!.#.M-..
    9da8:	03335ebf 01514a03 012378c0 001e7671     .^3..JQ..x#.qv..
    9db8:	0094efab 006acdaa 01e58c24 03cd0ff0     ......j.$.......
    9dc8:	001c9fc2 03d27a87 02e5958a 03015ca3     .....z.......\..
    9dd8:	008a1775 0053623e 00219420 01047c07     u...>bS. .!..|..
    9de8:	002f9557 01dc25ad 00192655 0323592f     W./..%..U&../Y#.
    9df8:	004b6506 01c06d33 02870f14 0030a9a9     .eK.3m........0.
    9e08:	026e8f79 026c2cfa 03cb23d8 0077171d     y.n..,l..#....w.
    9e18:	007eab75 02df6e36 026c61b9 01694c0a     u.~.6n...al..Li.
    9e28:	0160fc55 004f844d 0393dffa 000608c9     U.`.M.O.........
    9e38:	0054d419 002daf4e 002add44 01df6e32     ..T.N.-.D.*.2n..
    9e48:	01203c4c 02417d55 0211ab8f 00318ce3     L< .U}A.......1.
    9e58:	020984f4 01418b46 039f6056 018f4aff     ....F.A.V`...J..
    9e68:	006ebaec 01e79790 01d7f9ca 024e7770     ..n.........pwN.
    9e78:	01189322 000dd943 03a9b062 03c478b7     "...C...b....x..
    9e88:	03364bf8 00957ba2 001b17d8 032c6344     .K6..{......Dc,.
    9e98:	0085433d 028dc62c 02034207 00281068     =C..,....B..h.(.
    9ea8:	03ec91c1 012bc377 01f2ef4a 01b25df8     ....w.+.J....]..
    9eb8:	001a8f0e 00b9316f 01e8e9ce 022ec72a     ....o1......*...
    9ec8:	01ca3138 00323716 03a4af3b 001a4196     81...72.;....A..
    9ed8:	01367c14 00922447 00081514 00b6c337     .|6.G$......7...
    9ee8:	0352beaa 000e751b 026d44d0 0050e77a     ..R..u...Dm.z.P.
    9ef8:	02822548 000146ca 01cfc46c 0390697b     H%...F..l...{i..
    9f08:	00024886 01cac17f 02c3be90 01675a06     .H...........Zg.
    9f18:	02c06e71 00336a30 02097626 02cb0432     qn..0j3.&v..2...
    9f28:	0098174f 02a923a4 002b204c 01a17b74     O....#..L +.t{..
    9f38:	00b254ae 0303b690 02dae488 0039c2e9     .T............9.
    9f48:	00597419 005ae6cf 01f76b92 000993c5     .tY...Z..k......
    9f58:	006d9293 02ae1427 00a5f57b 013077b1     ..m.'...{....w0.
    9f68:	02b7f86f 000f0744 03e6a89d 015f8996     o...D........._.
    9f78:	02c1033b 0394ccd5 00282fa2 01dc772c     ;......../(.,w..
    9f88:	00e65718 00ff53a0 017a24f7 004f5d8f     .W...S...$z..]O.
    9f98:	0048023f 03249fbf 005ae4bf 01075a9a     ?.H...$...Z..Z..
    9fa8:	00596f22 0029b8a2 00f82bfb 038423cb     "oY...)..+...#..
    9fb8:	00344194 0031018e 00575626 0003fa51     .A4...1.&VW.Q...
    9fc8:	020112fd 01c1260b 001241d8 026781a7     .....&...A....g.
    9fd8:	03559993 022ce970 02743cf7 001b05f4     ..U.p.,..<t.....
    9fe8:	03717e66 013ff7d8 00e98a99 029daea2     f~q...?.........
    9ff8:	00416374 03f1579a 020b3b54 02a4b8b0     tcA..W..T;......
    a008:	03ead74a 0056781d 0065b318 0077bf46     J....xV...e.F.w.
    a018:	001f7815 02103582 0064669b 0338e14e     .x...5...fd.N.8.
    a028:	01bd2ed7 00b40e43 01042a5d 0043d438     ....C...]*..8.C.
    a038:	0266be02 00b3acf5 0028e583 02786b86     ..f.......(..kx.
    a048:	0006347d 01e3ea86 0251c6ce 01ae4697     }4........Q..F..
    a058:	01872d2d 002cf2cf 025a6ee4 02ca7ab6     --....,..nZ..z..
    a068:	01768b7a 02ca6b29 0012e75c 030d1ffc     z.v.)k..\.......
    a078:	02c44274 00e5ae65 0335acc8 0071f9be     tB..e.....5...q.
    a088:	0247eed9 00a24099 0058fdc8 00143295     ..G..@....X..2..
    a098:	0031d62d 0254c1e5 02efd48e 01491ea2     -.1...T.......I.
    a0a8:	02e78fb9 00602bf0 0380ad4b 029cd888     .....+`.K.......
    a0b8:	01f5825a 00c9c77d 002b6b1e 02a0470d     Z...}....k+..G..
    a0c8:	017bf61a 0354bdbc 0092e310 0005353c     ..{...T.....<5..
    a0d8:	01e06bca 01f6cf3d 025f7a3c 023cad3a     .k..=...<z_.:.<.
    a0e8:	00288a1c 02ce7ca1 014bd784 03c7dd61     ..(..|....K.a...
    a0f8:	02d0d99c 0059d4c1 021fcb95 00955394     ......Y......S..
    a108:	014401e0 003c902b 0066d398 01a4d9d1     ..D.+.<...f.....
    a118:	005bdace 02f62abf 0072a530 007fea35     ..[..*..0.r.5...
    a128:	009163ba 00adbcce 015ea3d6 013cb9e2     .c........^...<.
    a138:	000fc6b4 01a7c669 019100f3 03193d5c     ....i.......\=..
    a148:	00243980 002e4099 01fa4c2f 0303ebc5     .9$..@../L......
    a158:	036399b5 0276384a 0046295c 025b331b     ..c.J8v.\)F..3[.
    a168:	012b758e 018795ce 01cdb131 005fa7bd     .u+.....1....._.
    a178:	03d1aef2 00d1c511 0173947b 007088c9     ........{.s...p.
    a188:	0028004c 023c5299 0210df66 027e8d58     L.(..R<.f...X.~.
    a198:	00604b34 002ab19c 00037802 01c03da0     4K`...*..x...=..
    a1a8:	02b363ae 02002d08 001ad163 02bc2139     .c...-..c...9!..
    a1b8:	01fbcdbe 03d1d45b 03fc8772 0044bcde     ....[...r.....D.
    a1c8:	01e11c7b 01b6885c 00c1441c 01e7df13     {...\....D......
    a1d8:	002c35ee 01c13849 00a509d6 0050a485     .5,.I8........P.
    a1e8:	01bc42f8 006492d2 0050f0d9 0153a623     .B....d...P.#.S.
    a1f8:	0181ba6f 02db7588 006a2db2 025e57a3     o....u...-j..W^.
    a208:	02601aca 03d20f7d 036cee94 0057526b     ..`.}.....l.kRW.
    a218:	0100e650 039b2c7d 0334517c 02c10be3     P...},..|Q4.....
    a228:	0005d841 018de970 00029b1a 00b8eaa8     A...p...........
    a238:	0166af8b 0004f4b5 019ce49d 0037f5c9     ..f...........7.
    a248:	03935c05 02f7e536 00213839 01306204     .\..6...98!..b0.
    a258:	00496195 0305ab37 022c67e5 007d323b     .aI.7....g,.;2}.
    a268:	02b6c618 01140ac5 0195b26d 01a6aa25     ........m...%...
    a278:	00797170 01b41872 01f038db 021d0f86     pqy.r....8......
    a288:	0361b1db 0013d601 031b7383 0322c34c     ..a......s..L.".
    a298:	000752df 03cf90ba 00185472 0310eba0     .R......rT......
    a2a8:	0344f9ca 01b9505b 01d243de 00519a38     ..D.[P...C..8.Q.
    a2b8:	03ad2500 02706cb4 037338d0 0174b3c3     .%...lp..8s...t.
    a2c8:	00045da4 0062426c 0060655a 01b09640     .]..lBb.Ze`.@...
    a2d8:	03d66ff8 00728d57 01a2c585 0267e1e3     .o..W.r.......g.
    a2e8:	00e10f9a 00798771 004fc483 00394fe0     ....q.y...O..O9.
    a2f8:	0180b315 028ae6dc 01ad9fa7 00048456     ............V...
    a308:	0293809b 033c11d2 022bbc5f 00e963cf     ......<._.+..c..
    a318:	0071c0c2 02fe6c43 003eaf8d 000a7b40     ..q.Cl....>.@{..
    a328:	00fabb93 00614c2f 00e1c6c1 002a6034     ..../La.....4`*.
    a338:	01dcc761 01f22221 001ce819 02c2cb2b     a...!"......+...
    a348:	038727ce 0341eead 01eebcbc 00471ad0     .'....A.......G.
    a358:	0301121b 02a0df1a 00b59d67 00a07d67     ........g...g}..
    a368:	002a8e64 033262ca 01c0790b 0058052e     d.*..b2..y....X.
    a378:	01f7b394 0019e0a2 03bda6ac 024705e9     ..............G.
    a388:	031f2b56 00c46e77 0043484c 03ae49ea     V+..wn..LHC..I..
    a398:	00555526 03ae5a68 03768897 0043a2c5     &UU.hZ....v...C.
    a3a8:	01700eef 03a64abb 00856fa5 01588e46     ..p..J...o..F.X.
    a3b8:	0058911f 008c4da9 02e06879 003bd648     ..X..M..yh..H.;.
    a3c8:	0032f743 0066e6e3 029d266b 02882705     C.2...f.k&...'..
    a3d8:	03685f3b 0188c111 0020f7a8 020c3d2e     ;_h....... ..=..
    a3e8:	02d6aa86 011f1d1b 0210f444 00366c29     ........D...)l6.
    a3f8:	01cc9013 01e2d90b 023fb06c 01938427     ........l.?.'...
    a408:	0027484a 00677464 03ab2f29 00cc18f8     JH'.dtg.)/......
    a418:	006c7709 000b6cb3 018f0fa0 027213e2     .wl..l........r.
    a428:	032a2df6 01d12483 002dd426 014c5c69     .-*..$..&.-.i\L.
    a438:	004a865f 018d6c09 01fdaa63 00489ade     _.J..l..c.....H.
    a448:	03203e28 01da7d1f 02c97458 008ff016     (> ..}..Xt......
    a458:	00124f41 016d7d67 024dbd2b 00ff83bb     AO..g}m.+.M.....
    a468:	03fb53c0 00330954 02f90eaf 03994011     .S..T.3......@..
    a478:	01ebdc2c 018b53e7 007bf947 006dfb83     ,....S..G.{...m.
    a488:	00c5ca96 03d962e9 018ad044 003c7a60     .....b..D...`z<.
    a498:	007f0d93 02c0e5c5 010345dd 01bf1a0e     .........E......
    a4a8:	0008e359 03639bfa 0399ffd9 00232374     Y.....c.....t##.
    a4b8:	00846622 0019021c 01d55efa 03d7413f     "f.......^..?A..
    a4c8:	03aa3002 0381e786 0005b4c6 0174c84c     .0..........L.t.
    a4d8:	01e3a8eb 0277de56 0209a962 001c42f7     ....V.w.b....B..
    a4e8:	02cafacd 0119a2f4 0261ce05 034fb790     ..........a...O.
    a4f8:	00237668 00aebb32 011a98dd 00ef4edf     hv#.2........N..
    a508:	0164c73c 0031ec8c 035b5825 030ba570     <.d...1.%X[.p...
    a518:	01603955 03a9a096 0027d8b0 027d1ec0     U9`.......'...}.
    a528:	0225db90 03d13b7a 0301c54a 006b6cc5     ..%.z;..J....lk.
    a538:	00b244cd 0223c328 0189703d 026a33fb     .D..(.#.=p...3j.
    a548:	00001cae 0293a7fd 012ce87d 02c96a84     ........}.,..j..
    a558:	032deaf7 00676c9a 00cdbd33 02daf578     ..-..lg.3...x...
    a568:	019b8631 03703377 0029f289 02fb2eff     1...w3p...).....
    a578:	01f55d4d 03059094 019438fa 001eb2ce     M].......8......
    a588:	028bf405 026ce903 02e8d213 03ece7d2     ......l.........
    a598:	004165ed 0270d6a6 007b699e 004f6e06     .eA...p..i{..nO.
    a5a8:	00ca3242 002e3cc0 0056063f 020ca7b4     B2...<..?.V.....
    a5b8:	033d51ef 033927a2 006d4d01 0256d34b     .Q=..'9..Mm.K.V.
    a5c8:	00324bc5 029e0011 01385c20 006dad1c     .K2..... \8...m.
    a5d8:	00b477be 0315b164 02935584 002b5497     .w..d....U...T+.
    a5e8:	00597e5f 02b7d36d 02099363 0029e600     _~Y.m...c.....).
    a5f8:	01526672 003f5867 01546a1d 03aa277d     rfR.gX?..jT.}'..
    a608:	003643d7 01f668fd 0041754f 02f879a7     .C6..h..OuA..y..
    a618:	01e5a08b 028723b0 02566098 001ab277     .....#...`V.w...
    a628:	03ef7923 01f27c2e 02097dc3 0063b0d6     #y...|...}....c.
    a638:	00256ec8 01dd5846 00b69702 0145c4a7     .n%.FX........E.
    a648:	0187b72b 0051df6c 035ce819 0093f373     +...l.Q...\.s...
    a658:	009f1aef 02566b9a 000ba6bb 017b3a9e     .....kV......:{.
    a668:	01ef5969 00e4ae66 02468a2a 0071ffd5     iY..f...*.F...q.
    a678:	03a7fadf 00c97e94 00f1306c 0261acb7     .....~..l0....a.
    a688:	006667f2 012a09e4 01d469b5 0074a3ef     .gf...*..i....t.
    a698:	010902e3 00517a10 008183f5 03377f63     .....zQ.....c.7.
    a6a8:	007f1d08 031c6e05 0059237c 00395933     .....n..|#Y.3Y9.
    a6b8:	0253f462 02f67fff 0164b443 00538acc     b.S.....C.d...S.
    a6c8:	03f0eb1d 00738e1b 03e65ac5 02045317     ......s..Z...S..
    a6d8:	0069d42b 01bfe8b9 03b68e65 02341a17     +.i.....e.....4.
    a6e8:	023f7c16 005dc6d9 00e8be78 00134dd7     .|?...].x....M..
    a6f8:	003caf23 0087b312 0031b585 0380222a     #.<.......1.*"..
    a708:	00b60501 015c904d 00af8fb6 003dc18b     ....M.\.......=.
    a718:	02d70d2b 03858e7c 038d0a48 029af03c     +...|...H...<...
    a728:	004ffd54 02b7143b 00f196e9 03a9d8ae     T.O.;...........
    a738:	007e45e3 00482eb4 03ad4f1d 02e2d3a1     .E~...H..O......
    a748:	02b40240 01080167 006d8532 00275132     @...g...2.m.2Q'.
    a758:	017ddf91 02349c13 01a836ab 00626107     ..}...4..6...ab.
    a768:	0042765c 005af6ce 03d92353 02e8ea2f     \vB...Z.S#../...
    a778:	00246165 01177a75 035dd2f5 023b61c2     ea$.uz....]..a;.
    a788:	0264591f 00045a2f 014671a8 02d648d6     .Yd./Z...qF..H..
    a798:	00db5ed3 03696b35 000514fa 00a0f50f     .^..5ki.........
    a7a8:	025ff0d6 02a91e82 0373ca54 007cd2ba     .._.....T.s...|.
    a7b8:	029ac266 01144c3a 009790da 00f07853     f...:L......Sx..
    a7c8:	0026a0d4 0293a390 00adca7f 03ccbbb6     ..&.............
    a7d8:	02bfdfd9 00360357 007c59e8 0120d747     ....W.6..Y|.G. .
    a7e8:	0070b3ad 03f61be9 00570daf 03a3bd96     ..p.......W.....
    a7f8:	012f9a63 02ffcd7c 03b0ab5d 0017e4bd     c./.|...].......
    a808:	02d7dc51 0393aa7a 0118e43c 03835929     Q...z...<...)Y..
    a818:	0058ba7a 00680555 01331f99 030b8e01     z.X.U.h...3.....
    a828:	014f3898 0003abc9 0399be57 0218831d     .8O.....W.......
    a838:	02952a31 028ba136 002b258f 023b2ffd     1*..6....%+../;.
    a848:	023f7141 02556dd8 035e68ea 0017371d     Aq?..mU..h^..7..
    a858:	00981299 02e0dd5e 02b2d927 00407642     ....^...'...Bv@.
    a868:	00554552 00e54bd0 00c18863 02235b45     REU..K..c...E[#.
    a878:	0197ff6d 0059109b 0180a515 00f83128     m.....Y.....(1..
    a888:	004f4866 03907198 0041467f 00b73878     fHO..q...FA.x8..
    a898:	0306a937 03517ae2 000b1b01 0019d3cb     7....zQ.........
    a8a8:	026745f1 011f25fa 0043caa1 0068c72b     .Eg..%....C.+.h.
    a8b8:	0070dac7 02f87dfa 004fb09a 03b25b92     ..p..}....O..[..
    a8c8:	03a7d839 0067f228 038df3df 0166e33d     9...(.g.....=.f.
    a8d8:	02fa3bfb 024a9095 00366877 03177544     .;....J.wh6.Du..
    a8e8:	039707c8 01c90e1b 006d912c 00786a9e     ........,.m..jx.
    a8f8:	03ca7f5b 00bd1ce4 02b59417 02d2e2ab     [...............
    a908:	0062ae5b 02631b6f 02710c7e 00c6dbcd     [.b.o.c.~.q.....
    a918:	02cbb727 001fbe20 000ee085 0360a7ef     '... .........`.
    a928:	01d595fd 0056b717 00241dd3 01f7dbb6     ......V...$.....
    a938:	01a23589 012d4b4b 03fb96fb 00595a82     .5..KK-......ZY.
    a948:	0011880d 014eb833 02f76696 03fbf100     ....3.N..f......
    a958:	002b9e85 03770a81 01256d41 00731bb2     ..+...w.Am%...s.
    a968:	015d7ecd 0005d20c 02485ab2 03988d0d     .~]......ZH.....
    a978:	03ebb9d9 025997cf 0027012a 00c04ff7     ......Y.*.'..O..
    a988:	033fbd21 03fbe586 003303aa 0044a586     !.?.......3...D.
    a998:	03532e80 03f9b8bc 020fe6fb 02eabcc8     ..S.............
    a9a8:	0005abea 03809678 03487cb2 03ed21be     ....x....|H..!..
    a9b8:	004adfab 002aa621 0210190b 0220df3d     ..J.!.*.....=. .
    a9c8:	018f8e29 02f3be45 001ec8fb 00f96f6b     )...E.......ko..
    a9d8:	03a6cea9 00ef31ef 00a81a2c 006a3b84     .....1..,....;j.
    a9e8:	03f827f7 0352df35 01c9792d 02efcff4     .'..5.R.-y......
    a9f8:	00605175 001f6d98 02ed9067 03310139     uQ`..m..g...9.1.
    aa08:	03a65e36 003a3ab2 01d5dd0b 02565072     6^...::.....rPV.
    aa18:	03ce0c5c 018096ca 0034c6c7 01bb8126     \.........4.&...
    aa28:	01045692 036190d4 03ac476b 007622cb     .V....a.kG..."v.
    aa38:	024ef5ad 02ffe4c5 0345d785 01f4d572     ..N.......E.r...
    aa48:	00719164 00ce6e5c 03c95713 02e3e117     d.q.\n...W......
    aa58:	022c3a6a 00581b44 02225414 013cf2cd     j:,.D.X..T"...<.
    aa68:	0068554a 0314e6f1 00790180 03c6b96f     JUh.......y.o...
    aa78:	019010ed 0010b470 016ce8b0 0043cccf     ....p.....l...C.
    aa88:	014c3731 02fcebf0 025741df 00c6555c     17L......AW.\U..
    aa98:	001c368f 01070b5a 030bb4ed 03f6000b     .6..Z...........
    aaa8:	03758ecd 000332d8 009bd8f0 012c6423     ..u..2......#d,.
    aab8:	039ce074 018a36b2 002d258e 01c61e14     t....6...%-.....
    aac8:	016d2f6e 02996bba 00a568d3 000bca12     n/m..k...h......
    aad8:	032175d4 0321319b 03e78059 010e1e42     .u!..1!.Y...B...
    aae8:	001a3bed 01abb5b0 0253d5df 033e4df3     .;........S..M>.
    aaf8:	0398ecf0 00304777 002c5a6a 00a753fa     ....wG0.jZ,..S..
    ab08:	037a459a 0347a239 0072e421 03312959     .Ez.9.G.!.r.Y)1.
    ab18:	0188c0c4 03bb869e 02b633ca 002da03a     .........3..:.-.
    ab28:	03ecb0b6 02361823 003a6285 039e9009     ....#.6..b:.....
    ab38:	00343099 029a8f63 026d9d74 01886ba2     .04.c...t.m..k..
    ab48:	0293dbc5 003d2028 02047d0a 0238b4a1     ....( =..}....8.
    ab58:	00e20f06 0175b1dc 0014999b 0385da79     ......u.....y...
    ab68:	01d29648 01cd9d18 014b0568 0078aeb5     H.......h.K...x.
    ab78:	03e9c06e 03733308 01745482 027ed52d     n....3s..Tt.-.~.
    ab88:	007b18a1 029a7a06 03225bbf 01c13036     ..{..z...[".60..
    ab98:	0383461c 002f2c2c 025492c7 0366e7b5     .F..,,/...T...f.
    aba8:	010773b2 03942067 000649c7 0365e3cb     .s..g ...I....e.
    abb8:	02d9ba9e 0303fcda 010312ab 0049b15b     ............[.I.

0000abc8 <Montgomery_Rprime>:
    abc8:	5ff3d621 c81db879 ea6b387d 173ea5aa     !.._y...}8k...>.
    abd8:	2136f61c 3d01b7c7 6ac8f9d3 0006a5f1     ..6!...=...j....

0000abe8 <Montgomery_rprime>:
    abe8:	79bc3929 e12fe5f0 d1fcdcf3 d75e78b8     )9.y../......x^.
    abf8:	76b5db21 bce409ed afc1c074 f32702fd     !..v....t.....'.

0000ac08 <PARAMETER_d>:
    ac08:	00000142 00000000 000e4000 00000000     B........@......
    ac18:	00000000 01fc0c8d 0085223c 020fcb38     ........<"..8...
    ac28:	0211995f 005e472f                       _.../G^.

0000ac30 <curve_order>:
    ac30:	c7768ce7 2fb2540e fe0f7999 dfbd004d     ..v..T./.y..M...
    ac40:	9cbc14e5 f0539782 4e5e0a72 0029cbc1     ......S.r.^N..).

0000ac50 <A144>:
    ac50:	05080201 05020208 0c060201 080f090c     ................
    ac60:	050d0d08 010a030b 0e0d0f01 0208080b     ................
    ac70:	08020303                                ....

0000ac74 <IC>:
    ac74:	07030100 00000406                       ........

0000ac7c <RC>:
    ac7c:	0e070301 0c060b0d 0a050209              ............

0000ac88 <sbox>:
    ac88:	0b06050c 0d0a0009 080f0e03 02010704     ................
    ac98:	746f7250 6c6f636f 72726520 202c726f     Protocol error, 
    aca8:	61656c70 64206573 6c62756f 68632065     please double ch
    acb8:	206b6365 20656874 636f6c63 6e69206b     eck the clock in
    acc8:	6f777420 616f6220 2e736472 0d0a0d20      two boards. ...
    acd8:	00000000 203a7325 74696157 20676e69     ....%s: Waiting 
    ace8:	20726f66 74696e69 00000d0a 203a7325     for init....%s: 
    acf8:	74696157 20676e69 20726f66 69737361     Waiting for assi
    ad08:	656d6e67 0d0a746e 00000000 203a7325     gnment......%s: 
    ad18:	69737341 64656e67 64646120 61762072     Assigned addr va
    ad28:	2065756c 0d0a6425 00000000 72617453     lue %d......Star
    ad38:	676e6974 0000000d 203a7325 65636552     ting....%s: Rece
    ad48:	64657669 61657220 65722064 73657571     ived read reques
    ad58:	72662074 25206d6f 6f662064 64612072     t from %d for ad
    ad68:	25207264 000d0a78 203a7325 646e6553     dr %x...%s: Send
    ad78:	20676e69 70736572 65736e6f 206f7420     ing response to 
    ad88:	202c6425 72646461 2c782520 74616420     %d, addr %x, dat
    ad98:	78252061 00000d0a 203a7325 65636552     a %x....%s: Rece
    ada8:	64657669 69727720 72206574 65757165     ived write reque
    adb8:	66207473 206d6f72 66206425 6120726f     st from %d for a
    adc8:	20726464 202c7825 61746164 0a782520     ddr %x, data %x.
    add8:	0000000d 203a7325 646e6553 20676e69     ....%s: Sending 
    ade8:	70736572 65736e6f 206f7420 202c6425     response to %d, 
    adf8:	72646461 0a782520 0000000d              addr %x.....

0000ae04 <_global_impure_ptr>:
    ae04:	20000214                                ... 

0000ae08 <__sf_fake_stderr>:
	...

0000ae28 <__sf_fake_stdin>:
	...

0000ae48 <__sf_fake_stdout>:
	...
    ae68:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    ae78:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    ae88:	31300046 35343332 39383736 64636261     F.0123456789abcd
    ae98:	00006665                                ef..

0000ae9c <_init>:
    ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae9e:	46c0      	nop			; (mov r8, r8)
    aea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    aea2:	bc08      	pop	{r3}
    aea4:	469e      	mov	lr, r3
    aea6:	4770      	bx	lr

0000aea8 <__init_array_start>:
    aea8:	000000e5 	.word	0x000000e5

0000aeac <_fini>:
    aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aeae:	46c0      	nop			; (mov r8, r8)
    aeb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    aeb2:	bc08      	pop	{r3}
    aeb4:	469e      	mov	lr, r3
    aeb6:	4770      	bx	lr

0000aeb8 <__fini_array_start>:
    aeb8:	000000bd 	.word	0x000000bd
